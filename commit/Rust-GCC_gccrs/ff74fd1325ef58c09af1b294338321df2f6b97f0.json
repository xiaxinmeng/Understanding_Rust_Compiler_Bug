{"sha": "ff74fd1325ef58c09af1b294338321df2f6b97f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY3NGZkMTMyNWVmNThjMDlhZjFiMjk0MzM4MzIxZGYyZjZiOTdmMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-05-18T22:15:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-05-18T22:15:56Z"}, "message": "stl_pair.h (swap): Do not swap rvalues.\n\n2009-05-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/bits/stl_pair.h (swap): Do not swap rvalues.\n\t* include/bits/stl_deque.h (swap): Likewise.\n\t* include/bits/stl_list.h (swap): Likewise.\n\t* include/bits/stl_vector.h (swap): Likewise.\n\t* include/bits/stl_bvector.h (swap): Likewise.\n\t* include/bits/stl_queue.h (swap): Likewise.\n\t* include/bits/stl_stack.h (swap): Likewise.\n\t* include/bits/stl_tree.h (swap): Likewise.\n\t* include/bits/stl_map.h (swap): Likewise.\n\t* include/bits/stl_multimap.h (swap): Likewise.\n\t* include/bits/stl_set.h (swap): Likewise.\n\t* include/bits/stl_multiset.h (swap): Likewise.\n\t* include/bits/forward_list.h (swap): Likewise.\n\t* include/bits/unique_ptr.h (swap): Likewise.\n\t* include/debug/deque (swap): Likewise.\n\t* include/debug/list (swap): Likewise.\n\t* include/debug/vector (swap): Likewise.\n\t* include/debug/map.h (swap): Likewise.\n\t* include/debug/multimap.h (swap): Likewise.\n\t* include/debug/set.h (swap): Likewise.\n\t* include/debug/multiset.h (swap): Likewise.\n\t* include/debug/unordered_map (swap): Likewise.\n\t* include/debug/unordered_set (swap): Likewise.\n\t* include/ext/vstring.h (swap): Likewise.\n\t* include/tr1_impl/unordered_map (swap): Likewise.\n\t* include/tr1_impl/hashtable (swap): Likewise.\n\t* include/tr1_impl/unordered_set (swap): Likewise.\n\t* include/std/tuple (swap): Likewise.\n\t* include/std/mutex (swap): Likewise.\n\t* include/std/thread (swap): Likewise.\n\t(operator<<): Only output to lvalue streams.\n\t* testsuite/20_util/shared_ptr/modifiers/swap_rvalue.cc: Remove.\n\t* testsuite/23_containers/headers/forward_list/synopsis.cc: Adjust.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tassign_neg.cc: Adjust line numbers.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/30_threads/thread/swap/1.cc: Swap with lvalue and also\n\ttest non-member swap.\n\t* testsuite/30_threads/thread/swap/2.cc: Remove.\n\nFrom-SVN: r147678", "tree": {"sha": "9e5d3130d10e286ff2c08e48302f54620ec6707d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e5d3130d10e286ff2c08e48302f54620ec6707d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff74fd1325ef58c09af1b294338321df2f6b97f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff74fd1325ef58c09af1b294338321df2f6b97f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff74fd1325ef58c09af1b294338321df2f6b97f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff74fd1325ef58c09af1b294338321df2f6b97f0/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e57d93c6bcfd50cdb3d1928d78e8fe0bb6ce517c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57d93c6bcfd50cdb3d1928d78e8fe0bb6ce517c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57d93c6bcfd50cdb3d1928d78e8fe0bb6ce517c"}], "stats": {"total": 819, "additions": 134, "deletions": 685}, "files": [{"sha": "29c480526f1dbec1acfc9a1059fb2f1927ba0324", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -1,4 +1,67 @@\n-2009-05-13  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+2009-05-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/stl_pair.h (swap): Do not swap rvalues.\n+\t* include/bits/stl_deque.h (swap): Likewise.\n+\t* include/bits/stl_list.h (swap): Likewise.\n+\t* include/bits/stl_vector.h (swap): Likewise.\n+\t* include/bits/stl_bvector.h (swap): Likewise.\n+\t* include/bits/stl_queue.h (swap): Likewise.\n+\t* include/bits/stl_stack.h (swap): Likewise.\n+\t* include/bits/stl_tree.h (swap): Likewise.\n+\t* include/bits/stl_map.h (swap): Likewise.\n+\t* include/bits/stl_multimap.h (swap): Likewise.\n+\t* include/bits/stl_set.h (swap): Likewise.\n+\t* include/bits/stl_multiset.h (swap): Likewise.\n+\t* include/bits/forward_list.h (swap): Likewise.\n+\t* include/bits/unique_ptr.h (swap): Likewise.\n+\t* include/debug/deque (swap): Likewise.\n+\t* include/debug/list (swap): Likewise.\n+\t* include/debug/vector (swap): Likewise.\n+\t* include/debug/map.h (swap): Likewise.\n+\t* include/debug/multimap.h (swap): Likewise.\n+\t* include/debug/set.h (swap): Likewise.\n+\t* include/debug/multiset.h (swap): Likewise.\n+\t* include/debug/unordered_map (swap): Likewise.\n+\t* include/debug/unordered_set (swap): Likewise.\n+\t* include/ext/vstring.h (swap): Likewise.\n+\t* include/tr1_impl/unordered_map (swap): Likewise.\n+\t* include/tr1_impl/hashtable (swap): Likewise.\n+\t* include/tr1_impl/unordered_set (swap): Likewise.\n+\t* include/std/tuple (swap): Likewise.\n+\t* include/std/mutex (swap): Likewise.\n+\t* include/std/thread (swap): Likewise.\n+\t(operator<<): Only output to lvalue streams.\n+\t* testsuite/20_util/shared_ptr/modifiers/swap_rvalue.cc: Remove.\n+\t* testsuite/23_containers/headers/forward_list/synopsis.cc: Adjust.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tassign_neg.cc: Adjust line numbers.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/30_threads/thread/swap/1.cc: Swap with lvalue and also\n+\ttest non-member swap.\n+\t* testsuite/30_threads/thread/swap/2.cc: Remove.\n+\n+2009-05-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/mutex: Move std::lock_error to ...\n \t* src/compatibility.cc: Here."}, {"sha": "724d87b01b1a30729d9c62a21092008341e9d276", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -983,7 +983,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  function.\n        */\n       void\n-      swap(forward_list&& __list)\n+      swap(forward_list& __list)\n       { _Node_base::swap(this->_M_impl._M_head, __list._M_impl._M_head); }\n \n       /**\n@@ -1285,20 +1285,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n          forward_list<_Tp, _Alloc>& __ly)\n     { __lx.swap(__ly); }\n \n-  /// See std::forward_list::swap().\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(forward_list<_Tp, _Alloc>&& __lx,\n-         forward_list<_Tp, _Alloc>& __ly)\n-    { __lx.swap(__ly); }\n-\n-  /// See std::forward_list::swap().\n-  template<typename _Tp, typename _Alloc>\n-    inline void \n-    swap(forward_list<_Tp, _Alloc>& __lx,\n-\t forward_list<_Tp, _Alloc>&& __ly)\n-    { __lx.swap(__ly); }\n-\n _GLIBCXX_END_NAMESPACE // namespace std\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "87dbb0b3f87c955660b59249413be9c7223fbb70", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -743,11 +743,7 @@ template<typename _Alloc>\n     }\n \n     void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    swap(vector&& __x)\n-#else\n     swap(vector& __x)\n-#endif\n     {\n       std::swap(this->_M_impl._M_start, __x._M_impl._M_start);\n       std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);"}, {"sha": "7f601cbf0fb0f39b9c26c96c6b13537e5c82b968", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -1395,11 +1395,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  std::swap(d1,d2) will feed to this function.\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(deque&& __x)\n-#else\n       swap(deque& __x)\n-#endif\n       {\n \tstd::swap(this->_M_impl._M_start, __x._M_impl._M_start);\n \tstd::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);\n@@ -1802,18 +1798,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(deque<_Tp,_Alloc>&& __x, deque<_Tp,_Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>&& __y)\n-    { __x.swap(__y); }\n-#endif\n-\n _GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _STL_DEQUE_H */"}, {"sha": "f758baed5c9a50fb2ce22b1660fbd97a6c856f78", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -1106,11 +1106,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  function.\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(list&& __x)\n-#else\n       swap(list& __x)\n-#endif\n       {\n \t_List_node_base::swap(this->_M_impl._M_node, __x._M_impl._M_node);\n \n@@ -1516,18 +1512,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(list<_Tp, _Alloc>&& __x, list<_Tp, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-#endif\n-\n _GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _STL_LIST_H */"}, {"sha": "5416d82756777eb520446c9d63851f8a08f1a288", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -608,11 +608,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  that std::swap(m1,m2) will feed to this function.\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(map&& __x)\n-#else\n       swap(map& __x)\n-#endif\n       { _M_t.swap(__x._M_t); }\n \n       /**\n@@ -852,20 +848,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t map<_Key, _Tp, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n-    inline void\n-    swap(map<_Key, _Tp, _Compare, _Alloc>&& __x,\n-\t map<_Key, _Tp, _Compare, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n-    inline void\n-    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,\n-\t map<_Key, _Tp, _Compare, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-#endif\n-\n _GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _STL_MAP_H */"}, {"sha": "91dcfa675f466fb2246eafd5e2b30063ddca323d", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -544,11 +544,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  std::swap(m1,m2) will feed to this function.\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(multimap&& __x)\n-#else\n       swap(multimap& __x)\n-#endif\n       { _M_t.swap(__x._M_t); }\n \n       /**\n@@ -781,20 +777,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n          multimap<_Key, _Tp, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n-    inline void\n-    swap(multimap<_Key, _Tp, _Compare, _Alloc>&& __x,\n-         multimap<_Key, _Tp, _Compare, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n-    inline void\n-    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n-         multimap<_Key, _Tp, _Compare, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-#endif\n-\n _GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _STL_MULTIMAP_H */"}, {"sha": "be9e2489ce94b10c05e6e2db3a1911b2c952eb00", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -376,11 +376,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  std::swap(s1,s2) will feed to this function.\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(multiset&& __x)\n-#else\n       swap(multiset& __x)\n-#endif\n       { _M_t.swap(__x._M_t); }\n \n       // insert/erase\n@@ -678,20 +674,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t multiset<_Key, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Key, typename _Compare, typename _Alloc>\n-    inline void\n-    swap(multiset<_Key, _Compare, _Alloc>&& __x,\n-\t multiset<_Key, _Compare, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Key, typename _Compare, typename _Alloc>\n-    inline void\n-    swap(multiset<_Key, _Compare, _Alloc>& __x,\n-\t multiset<_Key, _Compare, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-#endif\n-\n _GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _STL_MULTISET_H */"}, {"sha": "d6c590186d65da66105e7f3e0ba7c4a55cf10deb", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -131,7 +131,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       void\n-      swap(pair&& __p)\n+      swap(pair& __p)\n       {\n \tusing std::swap;\n \tswap(first, __p.first);\n@@ -185,16 +185,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline void\n     swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)\n     { __x.swap(__y); }\n-\n-  template<class _T1, class _T2>\n-    inline void\n-    swap(pair<_T1, _T2>&& __x, pair<_T1, _T2>& __y)\n-    { __x.swap(__y); }\n-\n-  template<class _T1, class _T2>\n-    inline void\n-    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>&& __y)\n-    { __x.swap(__y); }\n #endif\n \n   /**"}, {"sha": "61149c457089be8b55816dd07932932d736b4c54", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -249,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       void\n-      swap(queue&& __q)\n+      swap(queue& __q)\n       { c.swap(__q.c); }\n #endif\n     };\n@@ -317,16 +317,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline void\n     swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>& __y)\n     { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Seq>\n-    inline void\n-    swap(queue<_Tp, _Seq>&& __x, queue<_Tp, _Seq>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Seq>\n-    inline void\n-    swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>&& __y)\n-    { __x.swap(__y); }\n #endif\n \n   /**\n@@ -550,7 +540,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       void\n-      swap(priority_queue&& __pq)\n+      swap(priority_queue& __pq)\n       {\n \tusing std::swap;\n \tc.swap(__pq.c);\n@@ -567,18 +557,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     swap(priority_queue<_Tp, _Sequence, _Compare>& __x,\n \t priority_queue<_Tp, _Sequence, _Compare>& __y)\n     { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Sequence, typename _Compare>\n-    inline void\n-    swap(priority_queue<_Tp, _Sequence, _Compare>&& __x,\n-\t priority_queue<_Tp, _Sequence, _Compare>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Sequence, typename _Compare>\n-    inline void\n-    swap(priority_queue<_Tp, _Sequence, _Compare>& __x,\n-\t priority_queue<_Tp, _Sequence, _Compare>&& __y)\n-    { __x.swap(__y); }\n #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "ccd0bc7b2ff8286076e351adf0340a26079f8f24", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -383,11 +383,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  std::swap(s1,s2) will feed to this function.\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(set&& __x)\n-#else\n       swap(set& __x)\t\n-#endif\n       { _M_t.swap(__x._M_t); }\n \n       // insert/erase\n@@ -691,18 +687,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Key, typename _Compare, typename _Alloc>\n-    inline void\n-    swap(set<_Key, _Compare, _Alloc>&& __x, set<_Key, _Compare, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Key, typename _Compare, typename _Alloc>\n-    inline void\n-    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-#endif\n-\n _GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _STL_SET_H */"}, {"sha": "417840872101e9940e82e7f1d18079f4ddfbba37", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -213,7 +213,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       void\n-      swap(stack&& __s)\n+      swap(stack& __s)\n       { c.swap(__s.c); }\n #endif\n     };\n@@ -282,16 +282,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline void\n     swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>& __y)\n     { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Seq>\n-    inline void\n-    swap(stack<_Tp, _Seq>&& __x, stack<_Tp, _Seq>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Seq>\n-    inline void\n-    swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>&& __y)\n-    { __x.swap(__y); }\n #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "1a67b563f62a5d569763ef8360346c2399441cce", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -675,11 +675,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return _M_get_Node_allocator().max_size(); }\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(_Rb_tree&& __t);\n-#else\n       swap(_Rb_tree& __t);      \n-#endif\n \n       // Insert/erase.\n       pair<iterator, bool>\n@@ -1104,11 +1100,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n            typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&& __t)\n-#else\n     swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)\n-#endif\n     {\n       if (_M_root() == 0)\n \t{"}, {"sha": "a68e9560816062234b90ef9e8c7aac6301de3853", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -923,11 +923,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  std::swap(v1,v2) will feed to this function.\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(vector&& __x)\n-#else\n       swap(vector& __x)\n-#endif\n       {\n \tstd::swap(this->_M_impl._M_start, __x._M_impl._M_start);\n \tstd::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);\n@@ -1216,18 +1212,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(vector<_Tp, _Alloc>&& __x, vector<_Tp, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-#endif\n-\n _GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _STL_VECTOR_H */"}, {"sha": "c1185f242d704949711b17faade40d8b78da9099", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -204,7 +204,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n       void\n-      swap(unique_ptr&& __u)\n+      swap(unique_ptr& __u)\n       {\n \tusing std::swap;\n \tswap(_M_t, __u._M_t);\n@@ -350,7 +350,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         void reset(_Up) = delete;\n \n       void\n-      swap(unique_ptr&& __u)\n+      swap(unique_ptr& __u)\n       {\n \tusing std::swap;\n \tswap(_M_t, __u._M_t);\n@@ -389,18 +389,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t unique_ptr<_Tp, _Tp_Deleter>& __y)\n     { __x.swap(__y); }\n \n-  template<typename _Tp, typename _Tp_Deleter> \n-    inline void\n-    swap(unique_ptr<_Tp, _Tp_Deleter>&& __x,\n-\t unique_ptr<_Tp, _Tp_Deleter>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Tp, typename _Tp_Deleter> \n-    inline void\n-    swap(unique_ptr<_Tp, _Tp_Deleter>& __x,\n-\t unique_ptr<_Tp, _Tp_Deleter>&& __y)\n-    { __x.swap(__y); }\n-  \n   template<typename _Tp, typename _Tp_Deleter,\n \t   typename _Up, typename _Up_Deleter>\n     inline bool"}, {"sha": "3a39dc46004f7526486c4d41ec6668b6b9dde910", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -432,11 +432,7 @@ namespace __debug\n       }\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(deque&& __x)\n-#else\n       swap(deque& __x)\n-#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -497,18 +493,6 @@ namespace __debug\n     swap(deque<_Tp, _Alloc>& __lhs, deque<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(deque<_Tp, _Alloc>&& __lhs, deque<_Tp, _Alloc>& __rhs)\n-    { __lhs.swap(__rhs); }\n-\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(deque<_Tp, _Alloc>& __lhs, deque<_Tp, _Alloc>&& __rhs)\n-    { __lhs.swap(__rhs); }\n-#endif\n-\n } // namespace __debug\n } // namespace std\n "}, {"sha": "d4904893f22c6f2d5fc9fbb25eb2512dc9c2c22d", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -367,11 +367,7 @@ namespace __debug\n       }\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(list&& __x)\n-#else\n       swap(list& __x)\n-#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -635,18 +631,6 @@ namespace __debug\n     swap(list<_Tp, _Alloc>& __lhs, list<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(list<_Tp, _Alloc>&& __lhs, list<_Tp, _Alloc>& __rhs)\n-    { __lhs.swap(__rhs); }\n-\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(list<_Tp, _Alloc>& __lhs, list<_Tp, _Alloc>&& __rhs)\n-    { __lhs.swap(__rhs); }\n-#endif\n-\n } // namespace __debug\n } // namespace std\n "}, {"sha": "c8eec2c4c6f10761aec31fa92d6bc8c5466637bd", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -260,11 +260,7 @@ namespace __debug\n       }\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(map&& __x)\n-#else\n       swap(map& __x)\n-#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -390,22 +386,6 @@ namespace __debug\n \t map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Key, typename _Tp,\n-\t   typename _Compare, typename _Allocator>\n-    inline void\n-    swap(map<_Key, _Tp, _Compare, _Allocator>&& __lhs,\n-\t map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    { __lhs.swap(__rhs); }\n-\n-  template<typename _Key, typename _Tp,\n-\t   typename _Compare, typename _Allocator>\n-    inline void\n-    swap(map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n-\t map<_Key, _Tp, _Compare, _Allocator>&& __rhs)\n-    { __lhs.swap(__rhs); }\n-#endif\n-\n } // namespace __debug\n } // namespace std\n "}, {"sha": "16841ff86680ef87146905d2a22c3dc756497e9b", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -248,11 +248,7 @@ namespace __debug\n       }\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(multimap&& __x)\n-#else\n       swap(multimap& __x)\n-#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -378,22 +374,6 @@ namespace __debug\n \t multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Key, typename _Tp,\n-\t   typename _Compare, typename _Allocator>\n-    inline void\n-    swap(multimap<_Key, _Tp, _Compare, _Allocator>&& __lhs,\n-\t multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n-    { __lhs.swap(__rhs); }\n-\n-  template<typename _Key, typename _Tp,\n-\t   typename _Compare, typename _Allocator>\n-    inline void\n-    swap(multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n-\t multimap<_Key, _Tp, _Compare, _Allocator>&& __rhs)\n-    { __lhs.swap(__rhs); }\n-#endif\n-\n } // namespace __debug\n } // namespace std\n "}, {"sha": "a952663ea31f3b95378509cca7ec3d7b31cdac64", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -245,11 +245,7 @@ namespace __debug\n       }\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(multiset&& __x)\n-#else\n       swap(multiset& __x)\n-#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -376,20 +372,6 @@ namespace __debug\n \t multiset<_Key, _Compare, _Allocator>& __y)\n     { return __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Key, typename _Compare, typename _Allocator>\n-    void\n-    swap(multiset<_Key, _Compare, _Allocator>&& __x,\n-\t multiset<_Key, _Compare, _Allocator>& __y)\n-    { return __x.swap(__y); }\n-\n-  template<typename _Key, typename _Compare, typename _Allocator>\n-    void\n-    swap(multiset<_Key, _Compare, _Allocator>& __x,\n-\t multiset<_Key, _Compare, _Allocator>&& __y)\n-    { return __x.swap(__y); }\n-#endif\n-\n } // namespace __debug\n } // namespace std\n "}, {"sha": "131b817d5fa4dd99db4a6e5291402a99d5caf5a0", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -250,11 +250,7 @@ namespace __debug\n       }\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(set&& __x)\n-#else\n       swap(set& __x)\n-#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -381,20 +377,6 @@ namespace __debug\n \t set<_Key, _Compare, _Allocator>& __y)\n     { return __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Key, typename _Compare, typename _Allocator>\n-    void\n-    swap(set<_Key, _Compare, _Allocator>&& __x,\n-\t set<_Key, _Compare, _Allocator>& __y)\n-    { return __x.swap(__y); }\n-\n-  template<typename _Key, typename _Compare, typename _Allocator>\n-    void\n-    swap(set<_Key, _Compare, _Allocator>& __x,\n-\t set<_Key, _Compare, _Allocator>&& __y)\n-    { return __x.swap(__y); }\n-#endif\n-\n } // namespace __debug\n } // namespace std\n "}, {"sha": "93a720653a3ab93eadcd99b3af4a2be4af1621d6", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -129,7 +129,7 @@ namespace __debug\n       }\n \n       void\n-      swap(unordered_map&& __x)\n+      swap(unordered_map& __x)\n       {\n \t_Base::swap(__x);\n \t_Safe_base::_M_swap(__x);\n@@ -314,20 +314,6 @@ namespace __debug\n \t unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-  template<typename _Key, typename _Tp, typename _Hash,\n-\t   typename _Pred, typename _Alloc>\n-    inline void\n-    swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&& __x,\n-\t unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Key, typename _Tp, typename _Hash,\n-\t   typename _Pred, typename _Alloc>\n-    inline void\n-    swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n-\t unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-\n \n   template<typename _Key, typename _Tp,\n \t   typename _Hash = std::hash<_Key>,\n@@ -415,7 +401,7 @@ namespace __debug\n       }\n \n       void\n-      swap(unordered_multimap&& __x)\n+      swap(unordered_multimap& __x)\n       {\n \t_Base::swap(__x);\n \t_Safe_base::_M_swap(__x);\n@@ -588,20 +574,6 @@ namespace __debug\n \t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-  template<typename _Key, typename _Tp, typename _Hash,\n-\t   typename _Pred, typename _Alloc>\n-    inline void\n-    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&& __x,\n-\t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Key, typename _Tp, typename _Hash,\n-\t   typename _Pred, typename _Alloc>\n-    inline void\n-    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n-\t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-\n } // namespace __debug\n } // namespace std\n "}, {"sha": "96d0b0f3e35a8901d900d85fc20f71c891a2a8d7", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -129,7 +129,7 @@ namespace __debug\n       }\n \n       void\n-      swap(unordered_set&& __x)\n+      swap(unordered_set& __x)\n       {\n \t_Base::swap(__x);\n \t_Safe_base::_M_swap(__x);\n@@ -313,18 +313,6 @@ namespace __debug\n \t unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-  template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>\n-    inline void\n-    swap(unordered_set<_Value, _Hash, _Pred, _Alloc>&& __x,\n-\t unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>\n-    inline void\n-    swap(unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n-\t unordered_set<_Value, _Hash, _Pred, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-\n \n   template<typename _Value,\n \t   typename _Hash = std::hash<_Value>,\n@@ -411,7 +399,7 @@ namespace __debug\n       }\n \n       void\n-      swap(unordered_multiset&& __x)\n+      swap(unordered_multiset& __x)\n       {\n \t_Base::swap(__x);\n \t_Safe_base::_M_swap(__x);\n@@ -583,18 +571,6 @@ namespace __debug\n \t unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-  template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>\n-    inline void\n-    swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>&& __x,\n-\t unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>\n-    inline void\n-    swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n-\t unordered_multiset<_Value, _Hash, _Pred, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-\n } // namespace __debug\n } // namespace std\n "}, {"sha": "708ee455fe97de08085bf3f2859f6920f101197a", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -452,11 +452,7 @@ namespace __debug\n       }\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(vector&& __x)\n-#else\n       swap(vector& __x)\n-#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -533,18 +529,6 @@ namespace __debug\n     swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(vector<_Tp, _Alloc>&& __lhs, vector<_Tp, _Alloc>& __rhs)\n-    { __lhs.swap(__rhs); }\n-\n-  template<typename _Tp, typename _Alloc>\n-    inline void\n-    swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>&& __rhs)\n-    { __lhs.swap(__rhs); }\n-#endif\n-\n } // namespace __debug\n } // namespace std\n "}, {"sha": "cfce575dc721829e3430f156457b5a54d4e2a6c2", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -1439,11 +1439,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n        *  constant time.\n       */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      swap(__versa_string&& __s)\n-#else\n       swap(__versa_string& __s)\n-#endif\n       { this->_M_swap(__s); }\n \n       // String operations:\n@@ -2335,22 +2331,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n     { __lhs.swap(__rhs); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _CharT, typename _Traits, typename _Alloc,\n-\t   template <typename, typename, typename> class _Base>\n-    inline void\n-    swap(__versa_string<_CharT, _Traits, _Alloc, _Base>&& __lhs,\n-\t __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n-    { __lhs.swap(__rhs); }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc,\n-\t   template <typename, typename, typename> class _Base>\n-    inline void\n-    swap(__versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n-\t __versa_string<_CharT, _Traits, _Alloc, _Base>&& __rhs)\n-    { __lhs.swap(__rhs); }\n-#endif\n-\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "75595a97828edab523c0f322113f3d1262abf926", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -555,7 +555,7 @@ namespace std\n       }\n \n       void\n-      swap(unique_lock&& __u)\n+      swap(unique_lock& __u)\n       {\n \tstd::swap(_M_device, __u._M_device);\n \tstd::swap(_M_owns, __u._M_owns);\n@@ -591,16 +591,6 @@ namespace std\n     swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y)\n     { __x.swap(__y); }\n \n-  template<typename _Mutex>\n-    inline void\n-    swap(unique_lock<_Mutex>&& __x, unique_lock<_Mutex>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename _Mutex>\n-    inline void\n-    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>&& __y)\n-    { __x.swap(__y); }\n-\n   template<int _Idx>\n     struct __unlock_impl\n     {"}, {"sha": "fbdfe2ee53fcc42d6c90d264b0f07b423fb7dc23", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -88,7 +88,7 @@ namespace std\n \n       template<class _CharT, class _Traits>\n \tfriend basic_ostream<_CharT, _Traits>&\n-\toperator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id);\n+\toperator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);\n     };\n \n     // Simple base type that the templatized, derived class containing\n@@ -149,7 +149,7 @@ namespace std\n     }\n \n     void\n-    swap(thread&& __t)\n+    swap(thread& __t)\n     { std::swap(_M_id, __t._M_id); }\n \n     bool\n@@ -194,14 +194,6 @@ namespace std\n   swap(thread& __x, thread& __y)\n   { __x.swap(__y); }\n \n-  inline void\n-  swap(thread&& __x, thread& __y)\n-  { __x.swap(__y); }\n-\n-  inline void\n-  swap(thread& __x, thread&& __y)\n-  { __x.swap(__y); }\n-\n   inline bool\n   operator!=(thread::id __x, thread::id __y)\n   { return !(__x == __y); }\n@@ -220,7 +212,7 @@ namespace std\n \n   template<class _CharT, class _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id)\n+    operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)\n     {\n       if (__id == thread::id())\n \treturn __out << \"thread::id of a non-executing thread\";"}, {"sha": "8dc8dcfc064acca04cffe9d6e9f15d208f9f9191", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -77,7 +77,7 @@ namespace std\n       _Head&       _M_head()       { return *this; }\n       const _Head& _M_head() const { return *this; }\n     \n-      void _M_swap_impl(_Head&&) { /* no-op */ }\n+      void _M_swap_impl(_Head&) { /* no-op */ }\n     };\n \n   template<std::size_t _Idx, typename _Head>\n@@ -97,7 +97,7 @@ namespace std\n       const _Head& _M_head() const { return _M_head_impl; }        \n \n       void\n-      _M_swap_impl(_Head&& __h)\n+      _M_swap_impl(_Head& __h)\n       { \n \tusing std::swap;\n \tswap(__h, _M_head_impl);\n@@ -125,7 +125,7 @@ namespace std\n     struct _Tuple_impl<_Idx>\n     { \n     protected:\n-      void _M_swap_impl(_Tuple_impl&&) { /* no-op */ }\n+      void _M_swap_impl(_Tuple_impl&) { /* no-op */ }\n     };\n \n   /**\n@@ -214,7 +214,7 @@ namespace std\n \n     protected:\n       void\n-      _M_swap_impl(_Tuple_impl&& __in)\n+      _M_swap_impl(_Tuple_impl& __in)\n       {\n \t_Base::_M_swap_impl(__in._M_head());\n \t_Inherited::_M_swap_impl(__in._M_tail());\n@@ -292,7 +292,7 @@ namespace std\n \t}\n \n       void\n-      swap(tuple&& __in)\n+      swap(tuple& __in)\n       { _Inherited::_M_swap_impl(__in); }\n     };\n \n@@ -301,7 +301,7 @@ namespace std\n     class tuple<>\n     {\n     public:\n-      void swap(tuple&&) { /* no-op */ }\n+      void swap(tuple&) { /* no-op */ }\n     };\n \n   /// tuple (2-element), with construction and assignment from a pair.\n@@ -394,7 +394,7 @@ namespace std\n \t}\n \n       void\n-      swap(tuple&& __in)\n+      swap(tuple& __in)\n       { \n \tusing std::swap;\n \tswap(this->_M_head(), __in._M_head());\n@@ -665,16 +665,6 @@ namespace std\n     swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)\n     { __x.swap(__y); }\n \n-  template<typename... _Elements>\n-    inline void\n-    swap(tuple<_Elements...>&& __x, tuple<_Elements...>& __y)\n-    { __x.swap(__y); }\n-\n-  template<typename... _Elements>\n-    inline void\n-    swap(tuple<_Elements...>& __x, tuple<_Elements...>&& __y)\n-    { __x.swap(__y); }\n-\n   // A class (and instance) which can be used in 'tie' when an element\n   // of a tuple is not required\n   struct _Swallow_assign"}, {"sha": "bce550ff1f1460a2078e386cb1306ccdf3ab46fa", "filename": "libstdc++-v3/include/tr1_impl/hashtable", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -225,11 +225,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n       ~_Hashtable();\n \n-#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n-      void swap(_Hashtable&&);\n-#else\n       void swap(_Hashtable&);\n-#endif\n \n       // Basic container operations\n       iterator\n@@ -732,11 +728,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     void\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n-#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n-    swap(_Hashtable&& __x)\n-#else\n     swap(_Hashtable& __x)\n-#endif\n     {\n       // The only base class with member variables is hash_code_base.  We\n       // define _Hash_code_base::_M_swap because different specializations"}, {"sha": "edf49789fa47b95b001fda6b54ad0ef3cf9ea349", "filename": "libstdc++-v3/include/tr1_impl/unordered_map", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_map?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -340,31 +340,5 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n-  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n-    inline void\n-    swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&& __x,\n-\t unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n-    inline void\n-    swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n-\t unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-\n-  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n-    inline void\n-    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&& __x,\n-\t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n-    inline void\n-    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n-\t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-#endif\n-\n _GLIBCXX_END_NAMESPACE_TR1\n }"}, {"sha": "d52b1517d9179021753e3f6a1927a9b980a5631e", "filename": "libstdc++-v3/include/tr1_impl/unordered_set", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_set?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -330,31 +330,5 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n-  template<class _Value, class _Hash, class _Pred, class _Alloc>\n-    inline void\n-    swap(unordered_set<_Value, _Hash, _Pred, _Alloc>&& __x,\n-\t unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<class _Value, class _Hash, class _Pred, class _Alloc>\n-    inline void\n-    swap(unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n-\t unordered_set<_Value, _Hash, _Pred, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-\n-  template<class _Value, class _Hash, class _Pred, class _Alloc>\n-    inline void\n-    swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>&& __x,\n-\t unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n-    { __x.swap(__y); }\n-\n-  template<class _Value, class _Hash, class _Pred, class _Alloc>\n-    inline void\n-    swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n-\t unordered_multiset<_Value, _Hash, _Pred, _Alloc>&& __y)\n-    { __x.swap(__y); }\n-#endif\n-\n _GLIBCXX_END_NAMESPACE_TR1\n }"}, {"sha": "0ace59b1cc72fc3a0c575d01dec5ad9dba17a9eb", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/modifiers/swap_rvalue.cc", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57d93c6bcfd50cdb3d1928d78e8fe0bb6ce517c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmodifiers%2Fswap_rvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57d93c6bcfd50cdb3d1928d78e8fe0bb6ce517c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmodifiers%2Fswap_rvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmodifiers%2Fswap_rvalue.cc?ref=e57d93c6bcfd50cdb3d1928d78e8fe0bb6ce517c", "patch": "@@ -1,47 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// { dg-do compile }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 20.7.12.2 Template class shared_ptr [util.smartptr.shared]\n-\n-#include <memory>\n-#include <testsuite_hooks.h>\n-\n-struct A { };\n-\n-// 20.7.12.2.4 shared_ptr modifiers [util.smartptr.shared.mod]\n-\n-// swap\n-int\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::shared_ptr<A> p(new A);\n-  p.swap(std::shared_ptr<A>(new A));\n-\n-  return 0;\n-}\n-\n-int \n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "f7439944837a6695c4c3c352b947ac23ea6d3b43", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1498 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1494 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "b1136f59cf7b784d7ac0254b0cf15b746d01c463", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1437 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1433 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "8752a7e7b10b6c63323688d1cdedead27d09c705", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1437 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1433 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "8cf322e821981662a92b5bca4161d49d3ac791a2", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1582 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1578 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "21d80cbb24b08c33aae340f63a6d5ee0f2740eb1", "filename": "libstdc++-v3/testsuite/23_containers/headers/forward_list/synopsis.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fforward_list%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fforward_list%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fforward_list%2Fsynopsis.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -43,10 +43,4 @@ namespace std {\n \n   template <class T, class Allocator>\n     void swap(forward_list<T,Allocator>& x, forward_list<T,Allocator>& y);\n-\n-  template <class T, class Allocator>\n-    void swap(forward_list<T,Allocator>&& x, forward_list<T,Allocator>& y);\n-\n-  template <class T, class Allocator>\n-    void swap(forward_list<T,Allocator>& x, forward_list<T,Allocator>&& y);\n }"}, {"sha": "e3c86f4056b89740691a1327b4f067c310df399d", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1383 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1379 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "ef268014e2fedb9755bd9e19e0560989e86f6e56", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1352 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1348 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "41280156344cd3be36dc7dbaf9fc61ced50fb65d", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1352 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1348 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "f16fcfb2af35fd31cfa7c1be16720b997afe96ce", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1352 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1348 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "5bff1fec07bf00679f2e11386e0e0976ce02ae28", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1051 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1047 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "a50f5226c0763e2e9423d77fd9214a2a4dd61431", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 991 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 987 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "a871cec9b5695e90b1be79dbef8260f0a51d6a71", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 991 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 987 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "d079335f7ae7b4a77cf5665ffc8b581b09ff5272", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1092 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1088 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "2a820ad0799e9ba0ba185af65ed89ba866a1a83d", "filename": "libstdc++-v3/testsuite/30_threads/thread/swap/1.cc", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff74fd1325ef58c09af1b294338321df2f6b97f0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F1.cc?ref=ff74fd1325ef58c09af1b294338321df2f6b97f0", "patch": "@@ -30,21 +30,48 @@\n \n void f() { }\n \n-int main()\n+void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  try \n+  try\n     {\n       std::thread t1(f);\n       std::thread::id t1_id = t1.get_id();\n       \n       std::thread t2;\n-      t2.swap(std::move(t1));\n       \n+      t2.swap(t1);\n       VERIFY( t1.get_id() == std::thread::id() );\n       VERIFY( t2.get_id() == t1_id );\n+\n+      t2.join();\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      std::thread t1(f);\n+      std::thread::id t1_id = t1.get_id();\n+      \n+      std::thread t2;\n       \n+      std::swap(t1, t2);\n+      VERIFY( t1.get_id() == std::thread::id() );\n+      VERIFY( t2.get_id() == t1_id );\n+\n       t2.join();\n     }\n   catch (const std::system_error&)\n@@ -55,6 +82,12 @@ int main()\n     {\n       VERIFY( false );\n     }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n \n   return 0;\n }"}, {"sha": "62e6651f7d6b593d2fbd82fe81589ff271499c6f", "filename": "libstdc++-v3/testsuite/30_threads/thread/swap/2.cc", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57d93c6bcfd50cdb3d1928d78e8fe0bb6ce517c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57d93c6bcfd50cdb3d1928d78e8fe0bb6ce517c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F2.cc?ref=e57d93c6bcfd50cdb3d1928d78e8fe0bb6ce517c", "patch": "@@ -1,112 +0,0 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n-// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n-// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n-// { dg-require-cstdint \"\" }\n-// { dg-require-gthreads \"\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-\n-#include <thread>\n-#include <system_error>\n-#include <bits/move.h> // std::move\n-#include <testsuite_hooks.h>\n-\n-void f() { }\n-\n-void test01()\n-{\n-  try\n-    {\n-      std::thread t1(f);\n-      std::thread::id t1_id = t1.get_id();\n-      \n-      std::thread t2;\n-      std::swap(t1, t2);\n-      \n-      VERIFY( t1.get_id() == std::thread::id() );\n-      VERIFY( t2.get_id() == t1_id );\n-\n-      t2.join();\n-    }\n- catch (const std::system_error&)\n-   {\n-     VERIFY( false );\n-   }\n- catch (...)\n-   {\n-     VERIFY( false );\n-   }  \n-}\n-\n-void test02()\n-{\n-  try\n-    {\n-      std::thread t1(f);\n-      std::thread::id t1_id = t1.get_id();\n-\n-      std::thread t2;\n-      std::swap(std::move(t1), t2);\n-\n-      VERIFY( t2.get_id() == t1_id );\n-\n-      t2.join();\n-    }\n-  catch (const std::system_error&)\n-    {\n-      VERIFY( false );\n-    }\n-  catch (...)\n-    {\n-      VERIFY( false );\n-    }\n-}\n-\n-void test03()\n-{\n-  try\n-    {\n-      std::thread t1(f);\n-      std::thread::id t1_id = t1.get_id();\n-\n-      std::thread t2;\n-      std::swap(t2, std::move(t1));\n-\n-      VERIFY( t2.get_id() == t1_id );\n-      \n-      t2.join();\n-    }\n-  catch (const std::system_error&)\n-    {\n-      VERIFY( false );\n-    }\n-  catch (...)\n-    {\n-      VERIFY( false );\n-    }\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n-}"}]}