{"sha": "c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b", "node_id": "C_kwDOANBUbNoAKGM2NGNhMGU3YmJlMTkzYjk1ZjUwYjBkM2RhZjlmZjdiNzEwZDZjNmI", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2021-10-27T21:01:21Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2021-11-05T21:09:04Z"}, "message": "Fortran: Delete unused decl in gfortran.h\n\ngcc/fortran/ChangeLog:\n\n\t* decl.c (gfc_insert_kind_parameter_exprs): Make static.\n\t* expr.c (gfc_build_init_expr): Make static\n\t(gfc_build_default_init_expr): Move below its static helper.\n\t* gfortran.h (gfc_insert_kind_parameter_exprs, gfc_add_saved_common,\n\tgfc_add_common, gfc_use_derived_tree, gfc_free_charlen,\n\tgfc_get_ultimate_derived_super_type,\n\tgfc_resolve_oacc_parallel_loop_blocks, gfc_build_init_expr,\n\tgfc_iso_c_sub_interface): Delete.\n\t* symbol.c (gfc_new_charlen, gfc_get_derived_super_type): Make\n\tstatic.", "tree": {"sha": "f544c47de925d93422e9961d0dd573f2feedd0d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f544c47de925d93422e9961d0dd573f2feedd0d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b/comments", "author": null, "committer": null, "parents": [{"sha": "452a0afbace650d7c0f2811e2b47e62dcd18e1fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452a0afbace650d7c0f2811e2b47e62dcd18e1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452a0afbace650d7c0f2811e2b47e62dcd18e1fd"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "e9e23fe1acb16e9beaa7c512d6022b2b557a3673", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b", "patch": "@@ -3713,7 +3713,7 @@ insert_parameter_exprs (gfc_expr* e, gfc_symbol* sym ATTRIBUTE_UNUSED,\n }\n \n \n-bool\n+static bool\n gfc_insert_kind_parameter_exprs (gfc_expr *e)\n {\n   return gfc_traverse_expr (e, NULL, &insert_parameter_exprs, 0);"}, {"sha": "087d822021afc8145157d31437f8d95d64e866d7", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b", "patch": "@@ -4587,21 +4587,12 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_component *comp, gfc_expr *rvalue)\n   return true;\n }\n \n-/* Invoke gfc_build_init_expr to create an initializer expression, but do not\n- * require that an expression be built.  */\n-\n-gfc_expr *\n-gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n-{\n-  return gfc_build_init_expr (ts, where, false);\n-}\n-\n /* Build an initializer for a local integer, real, complex, logical, or\n    character variable, based on the command line flags finit-local-zero,\n    finit-integer=, finit-real=, finit-logical=, and finit-character=.\n    With force, an initializer is ALWAYS generated.  */\n \n-gfc_expr *\n+static gfc_expr *\n gfc_build_init_expr (gfc_typespec *ts, locus *where, bool force)\n {\n   gfc_expr *init_expr;\n@@ -4758,6 +4749,15 @@ gfc_build_init_expr (gfc_typespec *ts, locus *where, bool force)\n   return init_expr;\n }\n \n+/* Invoke gfc_build_init_expr to create an initializer expression, but do not\n+ * require that an expression be built.  */\n+\n+gfc_expr *\n+gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n+{\n+  return gfc_build_init_expr (ts, where, false);\n+}\n+\n /* Apply an initialization expression to a typespec. Can be used for symbols or\n    components. Similar to add_init_expr_to_sym in decl.c; could probably be\n    combined with some effort.  */"}, {"sha": "8c11cf6d18d87a749db88aaac63a21cfdd1c96d9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b", "patch": "@@ -3116,7 +3116,6 @@ struct gfc_vect_builtin_tuple\n extern hash_map<nofree_string_hash, int> *gfc_vectorized_builtins;\n \n /* Handling Parameterized Derived Types  */\n-bool gfc_insert_kind_parameter_exprs (gfc_expr *);\n bool gfc_insert_parameter_exprs (gfc_expr *, gfc_actual_arglist *);\n match gfc_get_pdt_instance (gfc_actual_arglist *, gfc_symbol **,\n \t\t\t    gfc_actual_arglist **);\n@@ -3348,11 +3347,9 @@ bool gfc_add_threadprivate (symbol_attribute *, const char *, locus *);\n bool gfc_add_omp_declare_target (symbol_attribute *, const char *, locus *);\n bool gfc_add_omp_declare_target_link (symbol_attribute *, const char *,\n \t\t\t\t      locus *);\n-bool gfc_add_saved_common (symbol_attribute *, locus *);\n bool gfc_add_target (symbol_attribute *, locus *);\n bool gfc_add_dummy (symbol_attribute *, const char *, locus *);\n bool gfc_add_generic (symbol_attribute *, const char *, locus *);\n-bool gfc_add_common (symbol_attribute *, locus *);\n bool gfc_add_in_common (symbol_attribute *, const char *, locus *);\n bool gfc_add_in_equivalence (symbol_attribute *, const char *, locus *);\n bool gfc_add_data (symbol_attribute *, const char *, locus *);\n@@ -3387,7 +3384,6 @@ bool gfc_copy_attr (symbol_attribute *, symbol_attribute *, locus *);\n int gfc_copy_dummy_sym (gfc_symbol **, gfc_symbol *, int);\n bool gfc_add_component (gfc_symbol *, const char *, gfc_component **);\n gfc_symbol *gfc_use_derived (gfc_symbol *);\n-gfc_symtree *gfc_use_derived_tree (gfc_symtree *);\n gfc_component *gfc_find_component (gfc_symbol *, const char *, bool, bool,\n                                    gfc_ref **);\n \n@@ -3428,7 +3424,6 @@ void gfc_undo_symbols (void);\n void gfc_commit_symbols (void);\n void gfc_commit_symbol (gfc_symbol *);\n gfc_charlen *gfc_new_charlen (gfc_namespace *, gfc_charlen *);\n-void gfc_free_charlen (gfc_charlen *, gfc_charlen *);\n void gfc_free_namespace (gfc_namespace *);\n \n void gfc_symbol_init_2 (void);\n@@ -3448,7 +3443,6 @@ void gfc_traverse_gsymbol (gfc_gsymbol *, void (*)(gfc_gsymbol *, void *), void\n \n gfc_typebound_proc* gfc_get_typebound_proc (gfc_typebound_proc*);\n gfc_symbol* gfc_get_derived_super_type (gfc_symbol*);\n-gfc_symbol* gfc_get_ultimate_derived_super_type (gfc_symbol*);\n bool gfc_type_is_extension_of (gfc_symbol *, gfc_symbol *);\n bool gfc_type_compatible (gfc_typespec *, gfc_typespec *);\n \n@@ -3542,7 +3536,6 @@ void gfc_omp_restore_state (struct gfc_omp_saved_state *);\n void gfc_free_expr_list (gfc_expr_list *);\n void gfc_resolve_oacc_directive (gfc_code *, gfc_namespace *);\n void gfc_resolve_oacc_declare (gfc_namespace *);\n-void gfc_resolve_oacc_parallel_loop_blocks (gfc_code *, gfc_namespace *);\n void gfc_resolve_oacc_blocks (gfc_code *, gfc_namespace *);\n void gfc_resolve_oacc_routines (gfc_namespace *);\n \n@@ -3599,7 +3592,6 @@ bool gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n bool gfc_check_assign_symbol (gfc_symbol *, gfc_component *, gfc_expr *);\n \n gfc_expr *gfc_build_default_init_expr (gfc_typespec *, locus *);\n-gfc_expr *gfc_build_init_expr (gfc_typespec *, locus *, bool);\n void gfc_apply_init (gfc_typespec *, symbol_attribute *, gfc_expr *);\n bool gfc_has_default_initializer (gfc_symbol *);\n gfc_expr *gfc_default_initializer (gfc_typespec *);\n@@ -3665,7 +3657,6 @@ bool gfc_resolve_dim_arg (gfc_expr *);\n bool gfc_is_formal_arg (void);\n bool gfc_resolve_substring (gfc_ref *, bool *);\n void gfc_resolve_substring_charlen (gfc_expr *);\n-match gfc_iso_c_sub_interface(gfc_code *, gfc_symbol *);\n gfc_expr *gfc_expr_to_initialize (gfc_expr *);\n bool gfc_type_is_extensible (gfc_symbol *);\n bool gfc_resolve_intrinsic (gfc_symbol *, locus *);"}, {"sha": "8c9a1d00ce015d389e22dad7756f95572271dd8c", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=c64ca0e7bbe193b95f50b0d3daf9ff7b710d6c6b", "patch": "@@ -3985,7 +3985,7 @@ gfc_new_charlen (gfc_namespace *ns, gfc_charlen *old_cl)\n /* Free the charlen list from cl to end (end is not freed).\n    Free the whole list if end is NULL.  */\n \n-void\n+static void\n gfc_free_charlen (gfc_charlen *cl, gfc_charlen *end)\n {\n   gfc_charlen *cl2;\n@@ -5108,7 +5108,7 @@ gfc_get_derived_super_type (gfc_symbol* derived)\n \n /* Get the ultimate super-type of a given derived type.  */\n \n-gfc_symbol*\n+static gfc_symbol*\n gfc_get_ultimate_derived_super_type (gfc_symbol* derived)\n {\n   if (!derived->attr.extension)"}]}