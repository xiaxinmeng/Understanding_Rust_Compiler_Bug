{"sha": "8e342c04550466ab088c33746091ce7f3498ee44", "node_id": "C_kwDOANBUbNoAKDhlMzQyYzA0NTUwNDY2YWIwODhjMzM3NDYwOTFjZTdmMzQ5OGVlNDQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-27T22:34:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-28T09:49:11Z"}, "message": "libstdc++: Fix uses_allocator_construction_args for pair<T&&, U&&> [PR108952]\n\nThis implements LWG 3527 which fixes the handling of pair<T&&, U&&> in\nstd::uses_allocator_construction_args.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108952\n\t* include/bits/uses_allocator_args.h\n\t(uses_allocator_construction_args): Implement LWG 3527.\n\t* testsuite/20_util/pair/astuple/get-2.cc: New test.\n\t* testsuite/20_util/scoped_allocator/108952.cc: New test.\n\t* testsuite/20_util/uses_allocator/lwg3527.cc: New test.", "tree": {"sha": "45266e22922348c83bacc43659c36abb3f4f3361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45266e22922348c83bacc43659c36abb3f4f3361"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e342c04550466ab088c33746091ce7f3498ee44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e342c04550466ab088c33746091ce7f3498ee44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e342c04550466ab088c33746091ce7f3498ee44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e342c04550466ab088c33746091ce7f3498ee44/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "822a11a1e642e0abe92a996e7033a5066905a447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822a11a1e642e0abe92a996e7033a5066905a447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822a11a1e642e0abe92a996e7033a5066905a447"}], "stats": {"total": 124, "additions": 120, "deletions": 4}, "files": [{"sha": "bc038f0345841b6b451447bf3b0331d3595523da", "filename": "libstdc++-v3/include/bits/uses_allocator_args.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e342c04550466ab088c33746091ce7f3498ee44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator_args.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e342c04550466ab088c33746091ce7f3498ee44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator_args.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator_args.h?ref=8e342c04550466ab088c33746091ce7f3498ee44", "patch": "@@ -185,11 +185,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using _Tp1 = typename _Tp::first_type;\n       using _Tp2 = typename _Tp::second_type;\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3527. uses_allocator_construction_args handles rvalue pairs\n+      // of rvalue references incorrectly\n       return std::make_tuple(piecewise_construct,\n \t  std::uses_allocator_construction_args<_Tp1>(__a,\n-\t    std::move(__pr).first),\n+\t    std::get<0>(std::move(__pr))),\n \t  std::uses_allocator_construction_args<_Tp2>(__a,\n-\t    std::move(__pr).second));\n+\t    std::get<1>(std::move(__pr))));\n     }\n \n #if __cplusplus > 202002L\n@@ -216,9 +219,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       return std::make_tuple(piecewise_construct,\n \t  std::uses_allocator_construction_args<_Tp1>(__a,\n-\t    std::move(__pr).first),\n+\t    std::get<0>(std::move(__pr))),\n \t  std::uses_allocator_construction_args<_Tp2>(__a,\n-\t    std::move(__pr).second));\n+\t    std::get<1>(std::move(__pr))));\n     }\n #endif // C++23\n "}, {"sha": "573d239effa900c6114bd021a124df52a1777d81", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/get-2.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e342c04550466ab088c33746091ce7f3498ee44/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e342c04550466ab088c33746091ce7f3498ee44/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget-2.cc?ref=8e342c04550466ab088c33746091ce7f3498ee44", "patch": "@@ -0,0 +1,68 @@\n+// { dg-do compile { target c++11 } }\n+\n+#include <utility>\n+\n+template<int N, typename T, typename Pair>\n+constexpr bool\n+check()\n+{\n+  return std::is_same<decltype(std::get<N>(std::declval<Pair>())), T>::value;\n+}\n+\n+void\n+test_value_category()\n+{\n+  using P = std::pair<int, long>;\n+  static_assert( check<0, int&, P&>(),\n+\t\t \"get<0>(pair<T1, T2>&)\" );\n+  static_assert( check<1, long&, P&>(),\n+\t\t \"get<1>(pair<T1, T2>&)\" );\n+  static_assert( check<0, int&&, P&&>(),\n+\t\t \"get<0>(pair<T1, T2>&&)\" );\n+  static_assert( check<1, long&&, P&&>(),\n+\t\t \"get<1>(pair<T1, T2>&&)\" );\n+  static_assert( check<0, const int&, const P&>(),\n+\t\t \"get<0>(const pair<T1, T2>&)\" );\n+  static_assert( check<1, const long&, const P&>(),\n+\t\t \"get<1>(const pair<T1, T2>&)\" );\n+  static_assert( check<0, const int&&, const P&&>(),\n+\t\t \"get<0>(const pair<T1, T2>&&)\" );\n+  static_assert( check<1, const long&&, const P&&>(),\n+\t\t \"get<1>(const pair<T1, T2>&&)\" );\n+\n+  using PL = std::pair<int&, long&>;\n+  static_assert( check<0, int&, PL&>(),\n+\t\t \"get<0>(pair<T1&, T2&>&)\" );\n+  static_assert( check<1, long&, PL&>(),\n+\t\t \"get<1>(pair<T1&, T2&>&)\" );\n+  static_assert( check<0, int&, PL&&>(),\n+\t\t \"get<0>(pair<T1&, T2&>&&)\" );\n+  static_assert( check<1, long&, PL&&>(),\n+\t\t \"get<1>(pair<T1&, T2&>&&)\" );\n+  static_assert( check<0, int&, const PL&>(),\n+\t\t \"get<0>(const pair<T1&, T2&>&)\" );\n+  static_assert( check<1, long&, const PL&>(),\n+\t\t \"get<1>(const pair<T1&, T2&>&)\" );\n+  static_assert( check<0, int&, const PL&&>(),\n+\t\t \"get<0>(const pair<T1&, T2&>&&)\" );\n+  static_assert( check<1, long&, const PL&&>(),\n+\t\t \"get<1>(const pair<T1&, T2&>&&)\" );\n+\n+  using PR = std::pair<int&&, long&&>;\n+  static_assert( check<0, int&, P&>(),\n+\t\t \"get<0>(pair<T1&&, T2&&>&)\" );\n+  static_assert( check<1, long&, P&>(),\n+\t\t \"get<1>(pair<T1&&, T2&&>&)\" );\n+  static_assert( check<0, int&&, PR&&>(),\n+\t\t \"get<0>(pair<T1&&, T2&&>&&)\" );\n+  static_assert( check<1, long&&, PR&&>(),\n+\t\t \"get<1>(pair<T1&&, T2&&>&&)\" );\n+  static_assert( check<0, int&, const PR&>(),\n+\t\t \"get<0>(const pair<T1&&, T2&&>&)\" );\n+  static_assert( check<1, long&, const PR&>(),\n+\t\t \"get<1>(const pair<T1&&, T2&&>&)\" );\n+  static_assert( check<0, int&&, const PR&&>(),\n+\t\t \"get<0>(const pair<T1&&, T2&&>&&)\" );\n+  static_assert( check<1, long&&, const PR&&>(),\n+\t\t \"get<1>(const pair<T1&&, T2&&>&&)\" );\n+}"}, {"sha": "a6b9c67498cd69ef5bf517104cf9313ead0ba83d", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/108952.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e342c04550466ab088c33746091ce7f3498ee44/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F108952.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e342c04550466ab088c33746091ce7f3498ee44/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F108952.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F108952.cc?ref=8e342c04550466ab088c33746091ce7f3498ee44", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target c++11 } }\n+\n+#include <scoped_allocator>\n+\n+struct move_only\n+{\n+  move_only(move_only&&);\n+};\n+\n+using P = std::pair<move_only, move_only>;\n+\n+void\n+test_pr108952(std::pair<move_only&&, move_only&&> rvals)\n+{\n+  // LWG 3527. uses_allocator_construction_args handles rvalue pairs of\n+  // rvalue references incorrectly.\n+  // PR libstdc++/108952 Regression in uses_allocator_construction_args\n+  // for pair of rvalue references\n+  std::scoped_allocator_adaptor<std::allocator<P>> a;\n+  auto p = a.allocate(1);\n+  a.construct(p, std::move(rvals));\n+  a.deallocate(p, 1);\n+}"}, {"sha": "ae377f4b5a338390d09cdaf8c83f23e683f28b79", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/lwg3527.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e342c04550466ab088c33746091ce7f3498ee44/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Flwg3527.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e342c04550466ab088c33746091ce7f3498ee44/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Flwg3527.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Flwg3527.cc?ref=8e342c04550466ab088c33746091ce7f3498ee44", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <memory>\n+\n+struct move_only\n+{\n+  move_only(move_only&&);\n+};\n+\n+using P = std::pair<move_only, move_only>;\n+\n+void\n+test_lwg3527(std::pair<move_only&&, move_only&&> rvals)\n+{\n+  // LWG 3527. uses_allocator_construction_args handles rvalue pairs of\n+  // rvalue references incorrectly.\n+  // PR libstdc++/108952 Regression in uses_allocator_construction_args\n+  // for pair of rvalue references\n+  std::allocator<move_only> a;\n+  (void) std::uses_allocator_construction_args<P>(a, std::move(rvals));\n+}"}]}