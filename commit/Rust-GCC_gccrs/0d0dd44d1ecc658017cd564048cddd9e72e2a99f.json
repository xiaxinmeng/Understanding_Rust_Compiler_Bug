{"sha": "0d0dd44d1ecc658017cd564048cddd9e72e2a99f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQwZGQ0NGQxZWNjNjU4MDE3Y2Q1NjQwNDhjZGRkOWU3MmUyYTk5Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-06T21:42:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-06T21:42:11Z"}, "message": "(CPU_FPU_SPEC, CPP_SPEC, ASM_SPEC): Support m5200.\n\nFrom-SVN: r12183", "tree": {"sha": "4354c049ba0d120c0a7f4779fc53d070c66cd308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4354c049ba0d120c0a7f4779fc53d070c66cd308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d0dd44d1ecc658017cd564048cddd9e72e2a99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0dd44d1ecc658017cd564048cddd9e72e2a99f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d0dd44d1ecc658017cd564048cddd9e72e2a99f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0dd44d1ecc658017cd564048cddd9e72e2a99f/comments", "author": null, "committer": null, "parents": [{"sha": "15338c41de2b5b286b872820162d689f19195fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15338c41de2b5b286b872820162d689f19195fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15338c41de2b5b286b872820162d689f19195fec"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "01b87c2aacd2cb30813118fc43358e0720ac7ece", "filename": "gcc/config/m68k/m68k-none.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d0dd44d1ecc658017cd564048cddd9e72e2a99f/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d0dd44d1ecc658017cd564048cddd9e72e2a99f/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-none.h?ref=0d0dd44d1ecc658017cd564048cddd9e72e2a99f", "patch": "@@ -97,7 +97,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #if TARGET_DEFAULT & 02\n /* ??? Why isn't m68302 treated like m68000 here?  */\n #define CPP_FPU_SPEC \\\n-\"%{!mc68000:%{!m68000:%{!m68332:%{!msoft-float:%{mfpa:-D__HAVE_FPA__ }%{!mfpa:-D__HAVE_68881__ }}}}}\"\n+\"%{!mc68000:%{!m68000:%{!m68332:%{!m5200:%{!msoft-float:%{mfpa:-D__HAVE_FPA__ }%{!mfpa:-D__HAVE_68881__ }}}}}}\"\n #else\n /* This can't currently happen, but we code it anyway to show how it's done.  */\n #if TARGET_DEFAULT & 0100\n@@ -120,6 +120,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n    -m68020-40: define mc68020 mc68030 mc68040\n    -m68302: define mc68302\n    -m68332: define mc68332\n+   -m5200: define mcf5200\n    default: define as above appropriately\n \n    GCC won't automatically add __'d versions, we have to mention them\n@@ -128,9 +129,9 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #undef CPP_SPEC\n #define CPP_SPEC \"\\\n %(cpp_fpu) \\\n-%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }} \\\n-%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 } \\\n-%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:%(cpp_cpu_default)}}}}}}}}}} \\\n+%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68060:-Dmc68060 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }%{m5200:-Dmcf5200 }} \\\n+%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{mc68060:-D__mc68060__ -D__mc68060 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 }%{m5200:-D__mcf5200__ -D__mcf5200 } \\\n+%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68060:%{!m68302:%{!m68332:%{!m5200:%(cpp_cpu_default)}}}}}}}}}}}} \\\n %(cpp_subtarget) \\\n \"\n \n@@ -139,8 +140,8 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n %{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881 } \\\n-%{m68000}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040 }%{m68302}%{m68332} \\\n-%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:%(asm_cpu_default)}}}}}}}}}} \\\n+%{m68000}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040}%{m68060}%{m68302}%{m68332}%{m5200} \\\n+%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68060:%{!m68302:%{!m68332:%{!m5200:%(asm_cpu_default)}}}}}}}}}}}} \\\n \"\n \n #undef CC1_SPEC"}]}