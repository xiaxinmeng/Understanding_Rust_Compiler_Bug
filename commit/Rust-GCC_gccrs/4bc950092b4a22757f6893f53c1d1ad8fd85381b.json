{"sha": "4bc950092b4a22757f6893f53c1d1ad8fd85381b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJjOTUwMDkyYjRhMjI3NTdmNjg5M2Y1M2MxZDFhZDhmZDg1MzgxYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-31T01:26:06Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-31T01:26:06Z"}, "message": "[multiple changes]\n\n\n2000-10-30  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/complex_io.cc : Remove ancient defines.\n\t* config/os/gnu-linux/bits/os_defines.h: Add defines.\n\t* libsupc++/tinfo2.cc: Change to cstddef.\n\n\t* include/bits/codecvt.h: Add include of c++config.h, so that\n\t__USE_GNU gets defined. (Important for alpha.)\n\n\t* include/c/bits/std_cwctype.h: Same.\n\t* include/c/bits/std_ctime.h: And here.\n\t* include/c/bits/std_cstdarg.h: Same.\n\t* include/c/bits/std_csignal.h: Same.\n\t* include/c/bits/std_csetjmp.h: Same.\n\t* include/c/bits/std_clocale.h: Same.\n\t* include/c/bits/std_climits.h: Touch.\n\t* include/c/bits/std_cfloat.h: Same.\n\t* include/c/bits/std_cerrno.h: Same.\n\t* include/c/bits/std_cwchar.h: Same.\n\t* include/c/bits/std_cassert.h: Same.\n\t* include/c/bits/std_cctype.h: Same.\n\t* include/c/bits/std_cstddef.h: And here.\n\t* include/c/bits/std_cstdlib.h: And here.\n\t* include/c/bits/std_cstdio.h: Same.\n\t* include/c/bits/std_cstring.h: Add names to namespace std::.\n\n\t* include/bits/c++config (_GNU_SOURCE): Move linux-specific macros\n\tfrom here...\n\t(_ISOC99_SOURCE): And this one....\n\t* config/os/gnu-linux/bits/os_defines.h: ...to here.\n\n\t* include/bits/codecvt.h (codecvt<_InternT, _ExternT,\n\t__enc_traits>::do_in): Don't cast to const, this is a bug in glibc\n\tprior to 2.2.\n\t(codecvt<_InternT, _ExternT, __enc_traits>::do_out): Same.\n\t* include/c/bits/std_cwchar.h: Add using declarations for mbstate_t.\n\n2000-10-30  Steven King  <sxking@uswest.net>\n\n\t* include/bits/codecvt.h: Add cast.\n\t* include/c_std/stdio.h: Re-add printf using declaration.\n\t* include/c_std/bits/std_cstdio.h: Same\n\t* testsuite/22_locale/codecvt_wchar_t_char.cc: Fixup testsuite.\n\t* testsuite/22_locale/ctor_copy_dtor.cc: Same.\n\t* testsuite/22_locale/facet.cc: Same.\n\t* testsuite/22_locale/global_templates.cc: Same.\n\t* testsuite/22_locale/operators.cc: Same.\n\t* testsuite/22_locale/static_members.cc: Same.\n\t* testsuite/26_numerics/c_math.cc: Same.\n\t* testsuite/26_numerics/complex_inserters_extractors.cc: Same.\n\t* testsuite/27_io/fpos.cc: Same.\n\t* testsuite/27_io/istream_extractor_arith.cc: Same.\n\t* testsuite/27_io/istream_unformatted.cc: Same.\n\t* testsuite/27_io/ostream_inserter_arith.cc: Same.\n\t* testsuite/27_io/streambuf.cc: Same.\n\nFrom-SVN: r37149", "tree": {"sha": "2e8590154664aecb09e8512679ca63219b2abdb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e8590154664aecb09e8512679ca63219b2abdb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bc950092b4a22757f6893f53c1d1ad8fd85381b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc950092b4a22757f6893f53c1d1ad8fd85381b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc950092b4a22757f6893f53c1d1ad8fd85381b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc950092b4a22757f6893f53c1d1ad8fd85381b/comments", "author": null, "committer": null, "parents": [{"sha": "a5c3cccda43ddeaa0e90df75f74c230dea0ad579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c3cccda43ddeaa0e90df75f74c230dea0ad579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c3cccda43ddeaa0e90df75f74c230dea0ad579"}], "stats": {"total": 998, "additions": 573, "deletions": 425}, "files": [{"sha": "3c50834a923248ed92003f894e0e6cf01825ba7e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,3 +1,59 @@\n+2000-10-30  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/complex_io.cc : Remove ancient defines.\n+\t* config/os/gnu-linux/bits/os_defines.h: Add defines.\n+\t* libsupc++/tinfo2.cc: Change to cstddef.\n+\n+\t* include/bits/codecvt.h: Add include of c++config.h, so that\n+\t__USE_GNU gets defined. (Important for alpha.)\n+\n+\t* include/c/bits/std_cwctype.h: Same.\n+\t* include/c/bits/std_ctime.h: And here.\n+\t* include/c/bits/std_cstdarg.h: Same.\n+\t* include/c/bits/std_csignal.h: Same.\n+\t* include/c/bits/std_csetjmp.h: Same.\n+\t* include/c/bits/std_clocale.h: Same.\n+\t* include/c/bits/std_climits.h: Touch.\n+\t* include/c/bits/std_cfloat.h: Same.\n+\t* include/c/bits/std_cerrno.h: Same.\n+\t* include/c/bits/std_cwchar.h: Same.\n+\t* include/c/bits/std_cassert.h: Same.\n+\t* include/c/bits/std_cctype.h: Same.\t\n+\t* include/c/bits/std_cstddef.h: And here.\n+\t* include/c/bits/std_cstdlib.h: And here.\n+\t* include/c/bits/std_cstdio.h: Same.\n+\t* include/c/bits/std_cstring.h: Add names to namespace std::.\n+\n+\t* include/bits/c++config (_GNU_SOURCE): Move linux-specific macros\n+\tfrom here...\n+\t(_ISOC99_SOURCE): And this one....\n+\t* config/os/gnu-linux/bits/os_defines.h: ...to here.\n+\t\n+\t* include/bits/codecvt.h (codecvt<_InternT, _ExternT,\n+\t__enc_traits>::do_in): Don't cast to const, this is a bug in glibc\n+\tprior to 2.2.\n+\t(codecvt<_InternT, _ExternT, __enc_traits>::do_out): Same.\n+\t* include/c/bits/std_cwchar.h: Add using declarations for mbstate_t.\n+\t\n+2000-10-30  Steven King  <sxking@uswest.net>\n+\n+\t* include/bits/codecvt.h: Add cast.\n+\t* include/c_std/stdio.h: Re-add printf using declaration.\n+\t* include/c_std/bits/std_cstdio.h: Same\n+\t* testsuite/22_locale/codecvt_wchar_t_char.cc: Fixup testsuite.\n+\t* testsuite/22_locale/ctor_copy_dtor.cc: Same.\n+\t* testsuite/22_locale/facet.cc: Same.\n+\t* testsuite/22_locale/global_templates.cc: Same.\n+\t* testsuite/22_locale/operators.cc: Same.\n+\t* testsuite/22_locale/static_members.cc: Same.\n+\t* testsuite/26_numerics/c_math.cc: Same.\n+\t* testsuite/26_numerics/complex_inserters_extractors.cc: Same.\n+\t* testsuite/27_io/fpos.cc: Same.\n+\t* testsuite/27_io/istream_extractor_arith.cc: Same.\n+\t* testsuite/27_io/istream_unformatted.cc: Same.\n+\t* testsuite/27_io/ostream_inserter_arith.cc: Same.\n+\t* testsuite/27_io/streambuf.cc: Same.\n+\n 2000-10-30  Mark Mitchell  <mark@codesourcery.com>\n \n         * acinclude.m4 (GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT): Check "}, {"sha": "a98b34892e59087103c587ebf1c1a86d4d5ad7c6", "filename": "libstdc++-v3/config/os/gnu-linux/bits/os_defines.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -31,11 +31,22 @@\n #ifndef _GLIBCPP_OS_DEFINES\n #  define _GLIBCPP_OS_DEFINES\n \n+// By enabling this, all GNU extensions are enabled.\n+#define _GNU_SOURCE 1\n \n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n+// By enabling this, all ISO C99, ISO C9X functionality is enabled.\n+#define _ISOC99_SOURCE 1\n \n+// This keeps isanum, et al from being propagated as macros.\n+#define __NO_CTYPE 1\n+\n+# if defined __GLIBC__ && __GLIBC__ >= 2\n+// We must not see the optimized string functions GNU libc defines.\n+#  define __NO_STRING_INLINES\n+# endif\n \n #endif\n \n \n+\n+"}, {"sha": "57f0e4db9afb7a8d71916cc973ce84e7f200c1fd", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -36,12 +36,6 @@\n // The current version of the C++ library in compressed ISO date format.\n #define __GLIBCPP__ 20000911\n \n-// By enabling this, all GNU extensions are enabled.\n-#define _GNU_SOURCE 1\n-\n-// By enabling this, all ISO C99, ISO C9X functionality is enabled.\n-#define _ISOC99_SOURCE 1\n-\n // This flag controls the error handling in string, and perhaps other\n // bits as time goes on: check out bits/basic_string.h for more\n // info. It also helps alleviate the circular dependency between"}, {"sha": "f39009a9ea5f9be028e417e7e65a94add9ab8cef", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -38,6 +38,7 @@\n #ifndef _CPP_BITS_CODECVT_H\n #define _CPP_BITS_CODECVT_H\t1\n \n+#include <bits/c++config.h>\n #ifdef _GLIBCPP_USE_WCHAR_T\n #include <iconv.h>\t\t// For iconv, iconv_t\n #include <langinfo.h>"}, {"sha": "0cd937e4039da1c694df30b5023e07a46858d3cd", "filename": "libstdc++-v3/include/c/bits/std_cassert.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cassert.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,5 +35,15 @@\n \n // No include guards on this header...\n \n-# pragma GCC system_header\n-# include_next <assert.h>\n+#pragma GCC system_header\n+#include_next <assert.h>\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "bb50610b815ac053c9f45c4b3fe0c5286173900b", "filename": "libstdc++-v3/include/c/bits/std_cctype.h", "status": "modified", "additions": 23, "deletions": 160, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cctype.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -31,172 +31,35 @@\n // ISO C++ 14882: <ccytpe>\n //\n \n+// Note: This is not a conforming implementation.\n+\n #ifndef _CPP_CCTYPE\n #define _CPP_CCTYPE 1\n \n-// This keeps isanum, et al from being propagated as macros.\n-#if __linux__\n-#define __NO_CTYPE 1\n-#endif\n-\n-# pragma GCC system_header\n-# include_next <ctype.h>\n+#include <bits/c++config.h>\n \n-// Sequester the C non-inline implementations in the _C_Swamp::\n-// namespace, and provide C++ inlines for them in the std:: namespace\n-// where they belong.\n+#pragma GCC system_header\n+#include_next <ctype.h>\n \n-namespace std \n+namespace std\n {\n-  // NB: If not using namespaces, can't have any of these definitions,\n-  // as they will duplicate what's in the global namespace. \n-\n-#ifdef toupper\n-  inline int \n-  _S_toupper_helper(int __c) { return toupper(__c); }\n-# undef toupper\n-  inline int \n-  toupper(int __c) { return _S_toupper_helper(__c); }\n-#else\n-  inline int \n-  toupper(int __c) { return ::toupper(__c); }\n-#endif\n-\n-#ifdef tolower\n-  inline int \n-  _S_tolower_helper(int __c) { return tolower(__c); }\n-# undef tolower\n-  inline int \n-  tolower(int __c) { return _S_tolower_helper(__c); }\n-#else\n-  inline int \n-  tolower(int __c) { return ::tolower(__c); }\n-#endif\n-\n-#ifdef isspace\n-  inline int \n-  _S_isspace_helper(int __c) { return isspace(__c); }\n-# undef isspace\n-  inline int \n-  isspace(int __c) { return _S_isspace_helper(__c); }\n-#else\n-  inline int \n-  isspace(int __c) { return ::isspace(__c); }\n-#endif\n-\n-#ifdef isprint\n-  inline int \n-  _S_isprint_helper(int __c) { return isprint(__c); }\n-# undef isprint\n-  inline int \n-  isprint(int __c) { return _S_isprint_helper(__c); }\n-#else\n-  inline int \n-  isprint(int __c) { return ::isprint(__c); }\n-#endif\n-\n-#ifdef iscntrl\n-  inline int \n-  _S_iscntrl_helper(int __c) { return iscntrl(__c); }\n-# undef iscntrl\n-  inline int \n-  iscntrl(int __c) { return _S_iscntrl_helper(__c); }\n-#else\n-  inline int \n-  iscntrl(int __c) { return ::iscntrl(__c); }\n-#endif\n-\n-#ifdef isupper\n-  inline int \n-  _S_isupper_helper(int __c) { return isupper(__c); }\n-# undef isupper\n-  inline int \n-  isupper(int __c) { return _S_isupper_helper(__c); }\n-#else\n-  inline int \n-  isupper(int __c) { return ::isupper(__c); }\n-#endif\n-\n-#ifdef islower\n-  inline int \n-  _S_islower_helper(int __c) { return islower(__c); }\n-# undef islower\n-  inline int \n-  islower(int __c) { return _S_islower_helper(__c); }\n-#else\n-  inline int \n-  islower(int __c) { return ::islower(__c); }\n-#endif\n-\n-#ifdef isalpha\n-  inline int \n-  _S_isalpha_helper(int __c) { return isalpha(__c); }\n-# undef isalpha\n-  inline int \n-  isalpha(int __c) { return _S_isalpha_helper(__c); }\n-#else\n-  inline int \n-  isalpha(int __c) { return ::isalpha(__c); }\n-#endif\n-\n-#ifdef isdigit\n-  inline int \n-  _S_isdigit_helper(int __c) { return isdigit(__c); }\n-# undef isdigit\n-  inline int \n-  isdigit(int __c) { return _S_isdigit_helper(__c); }\n-#else\n-  inline int \n-  isdigit(int __c) { return ::isdigit(__c); }\n-#endif\n-\n-#ifdef ispunct\n-  inline int \n-  _S_ispunct_helper(int __c) { return ispunct(__c); }\n-# undef ispunct\n-  inline int \n-  ispunct(int __c) { return _S_ispunct_helper(__c); }\n-#else\n-  inline int \n-  ispunct(int __c) { return ::ispunct(__c); }\n-#endif\n-\n-#ifdef isxdigit\n-  inline int \n-  _S_isxdigit_helper(int __c) { return isxdigit(__c); }\n-# undef isxdigit\n-  inline int \n-  isxdigit(int __c) { return _S_isxdigit_helper(__c); }\n-#else\n-  inline int \n-  isxdigit(int __c) { return ::isxdigit(__c); }\n-#endif\n-\n-#ifdef isalnum\n-  inline int \n-  _S_isalnum_helper(int __c) { return isalnum(__c); }\n-# undef isalnum\n-  inline int \n-  isalnum(int __c) { return _S_isalnum_helper(__c); }\n-#else\n-  inline int \n-  isalnum(int __c) { return ::isalnum(__c); }\n-#endif\n-\n-#ifdef isgraph\n-  inline int \n-  _S_isgraph_helper(int __c) { return isgraph(__c); }\n-# undef isgraph\n-  inline int \n-  isgraph(int __c) { return _S_isgraph_helper(__c); }\n-#else\n-  inline int \n-  isgraph(int __c) { return ::isgraph(__c); }\n-#endif\n-\n-} // namespace std\n-\n-#endif // _CPP_CCTYPE\n+  extern \"C\" int isalnum(int __c);\n+  extern \"C\" int isalpha(int __c);\n+  extern \"C\" int isblank(int __c);\n+  extern \"C\" int iscntrl(int __c);\n+  extern \"C\" int isdigit(int __c);\n+  extern \"C\" int isgraph(int __c);\n+  extern \"C\" int islower(int __c);\n+  extern \"C\" int isprint(int __c);\n+  extern \"C\" int ispunct(int __c);\n+  extern \"C\" int isspace(int __c);\n+  extern \"C\" int isupper(int __c);\n+  extern \"C\" int isxdigit(int __c);\n+  extern \"C\" int tolower(int __c);\n+  extern \"C\" int toupper(int __c);\n+}\n+\n+#endif \n \n \n "}, {"sha": "518651008ba30ead4bbad1c47da506a64e31890e", "filename": "libstdc++-v3/include/c/bits/std_cerrno.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cerrno.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -31,10 +31,21 @@\n // ISO C++ 14882: 19.3  Error numbers\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CERRNO\n #define _CPP_CERRNO 1\n-# pragma GCC system_header\n-# include_next <errno.h>\n+\n+#pragma GCC system_header\n+#include_next <errno.h>\n+\n+namespace std \n+{\n+  extern \"C\" int errno;\n+}\n+\n #endif\n+\n+\n+\n+"}, {"sha": "4ff42b0865c16f57a9220e23cf3c79bfccf7e2be", "filename": "libstdc++-v3/include/c/bits/std_cfloat.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cfloat.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,17 +31,13 @@\n // ISO C++ 14882: 18.2.2  Implementation properties: C library\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CFLOAT\n #define _CPP_CFLOAT 1\n-# pragma GCC system_header\n-# include_next <float.h>\n-\n-#if 0\n-# ifdef __GLIBC__\n-// For GNU libc we must also include this one:\n-#  include <fenv.h>\n-# endif\n-#endif\n+\n+#pragma GCC system_header\n+#include_next <float.h>\n+\n #endif\n+"}, {"sha": "d7b171df0410509a0c8c3cfff3768db758388987", "filename": "libstdc++-v3/include/c/bits/std_climits.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_climits.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -35,8 +35,13 @@\n \n #ifndef _CPP_CLIMITS\n #define _CPP_CLIMITS\t1\n-# pragma GCC system_header\n-# include_next <limits.h>\n+\n+#pragma GCC system_header\n+#include_next <limits.h>\n+\n #endif\n \n \n+\n+\n+"}, {"sha": "0ce02976fe4d20949f2599367c43d2d926a1b98f", "filename": "libstdc++-v3/include/c/bits/std_clocale.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_clocale.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,11 +31,22 @@\n // ISO C++ 14882: 18.2.2  Implementation properties: C library\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CLOCALE\n-#define _CPP_CLOCALE     1\n-# pragma GCC system_header\n-# include_next <locale.h>\n+#define _CPP_CLOCALE 1\n+\n+#pragma GCC system_header\n+#include_next <locale.h>\n+\n+namespace std\n+{\n+  using ::lconv;\n+  extern \"C\" char* setlocale(int, const char*); \n+  extern \"C\" struct lconv* localeconv(void);\n+}\n+\n #endif\n \n+\n+"}, {"sha": "5a2c50567375816693278edd4971f7111d4e57d7", "filename": "libstdc++-v3/include/c/bits/std_cmath.h", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -31,23 +31,24 @@\n // ISO C++ 14882: 26.5  C library\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CMATH\n #define _CPP_CMATH 1\n-# pragma GCC system_header\n-# include_next <math.h>\n-# include_next <stdlib.h>\n \n-# include <bits/c++config.h>\n-\n-namespace std {\n-\n-  inline int \n-  abs(int i) { return i > 0 ? i : -i; }\n+#include <bits/c++config.h>\n+#include <bits/std_cstdlib.h>\n+ \n+#pragma GCC system_header\n+#include_next <math.h>\n \n+namespace std \n+{\n   inline long \n-  abs(long i) { return i > 0 ? i : -i; }\n+  abs(long __i) { return ::labs(__i); }\n+\n+  inline ldiv_t\n+  div(long __i, long __j) { return ::ldiv(__i, __j); }\n \n #if _GLIBCPP_HAVE___BUILTIN_FABSF\n   inline float \n@@ -212,7 +213,8 @@ namespace std {\n   { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-  float pow(float, int);\n+  float \n+  pow(float, int);\n \n #if _GLIBCPP_HAVE___BUILTIN_SINF\n   inline float \n@@ -310,12 +312,10 @@ namespace std {\n \n   extern \"C\" double modf(double __x, double* __iptr);\n \n-#if 0\n   extern \"C\" double pow(double __x, double __y);\n \n-  extern \"C\" double pow(double, int);\n-#endif\n-  using ::pow;\n+  double \n+  pow(double __x, int __i);\n \n #if _GLIBCPP_HAVE___BUILTIN_SIN\n   inline double \n@@ -552,7 +552,10 @@ namespace std {\n #endif\n } // std\n \n-#endif // _CPP_CMATH\n+#endif\n+\n+\n+\n \n \n "}, {"sha": "a7864b0fc1f282b810e865f74b4b891679451416", "filename": "libstdc++-v3/include/c/bits/std_csetjmp.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csetjmp.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,10 +31,18 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CSETJMP\n #define _CPP_CSETJMP 1\n-# pragma GCC system_header\n-# include_next <setjmp.h>\n+\n+#pragma GCC system_header\n+#include_next <setjmp.h>\n+\n+namespace std\n+{\n+  using ::jmp_buf;\n+  extern \"C\" void longjmp(jmp_buf, int);\n+}\n+\n #endif"}, {"sha": "48f6584b25d72e83ab77716e909ad86c0215b4cc", "filename": "libstdc++-v3/include/c/bits/std_csignal.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csignal.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,10 +31,19 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CSIGNAL\n #define _CPP_CSIGNAL 1\n-# pragma GCC system_header\n-# include_next <signal.h>\n+\n+#pragma GCC system_header\n+#include_next <signal.h>\n+\n+namespace std\n+{\n+  using ::sig_atomic_t;\n+  extern \"C\" void (*signal(int, void (*__func)(int)))(int); \n+  extern \"C\" int raise(int);\n+}\n+\n #endif"}, {"sha": "87a8a0f54b74c8728bf2ca54e51774005a627583", "filename": "libstdc++-v3/include/c/bits/std_cstdarg.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdarg.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,10 +31,17 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CSTDARG\n #define _CPP_CSTDARG 1\n-# pragma GCC system_header\n-# include_next <stdarg.h>\n+\n+#pragma GCC system_header\n+#include_next <stdarg.h>\n+\n+namespace std\n+{\n+  using ::va_list;\n+}\n+\n #endif"}, {"sha": "a256e8548334a0e25e40babb0841ce1367c00a4a", "filename": "libstdc++-v3/include/c/bits/std_cstddef.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstddef.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,17 +31,18 @@\n // ISO C++ 14882: 18.1  Types\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CSTDDEF\n #define _CPP_CSTDDEF 1\n-# pragma GCC system_header\n-# include_next <stddef.h>\n-#endif\n \n-namespace std {\n-  using ::size_t;\n-  using ::ptrdiff_t;\n-} // namespace std\n+#pragma GCC system_header\n+#include_next <stddef.h>\n \n+namespace std \n+{\n+  using ::ptrdiff_t;\n+  using ::size_t;\n+}\n \n+#endif"}, {"sha": "b5836244f2a7e796631e2ea1a07c2ac54eae2e8f", "filename": "libstdc++-v3/include/c/bits/std_cstdio.h", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,24 +31,68 @@\n // ISO C++ 14882: 27.8.2  C Library files\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CSTDIO\n #define _CPP_CSTDIO 1\n-# pragma GCC system_header\n-# include_next <stdio.h>\n \n-#ifndef SEEK_CUR\n-#define SEEK_CUR 1\n-#endif\n-\n-#ifndef SEEK_END\n-#define SEEK_END 2\n-#endif\n-\n-#ifndef SEEK_SET\n-#define SEEK_SET 4\n-#endif\n+#include <bits/std_cstdarg.h>\n+\n+#pragma GCC system_header\n+#include_next <stdio.h>\n+\n+namespace std \n+{\n+  using ::FILE;\n+  using ::fpos_t;\n+\n+  extern \"C\" int remove(const char*); \n+  extern \"C\" int rename(const char*, const char*); \n+  extern \"C\" FILE* tmpfile(void); \n+  extern \"C\" char* tmpnam(char*); \n+  extern \"C\" int fclose(FILE*); \n+  extern \"C\" int fflush(FILE*); \n+  extern \"C\" FILE* fopen(const char*, const char*); \n+  extern \"C\" FILE* freopen(const char*, const char*, FILE*); \n+  extern \"C\" void setbuf(FILE*, char*);\n+  extern \"C\" int setvbuf(FILE*, char*, int, size_t); \n+  extern \"C\" int fprintf(FILE*, const char*, ...); \n+  extern \"C\" int fscanf(FILE*, const char*, ...); \n+  extern \"C\" int printf(const char*, ...); \n+  extern \"C\" int scanf(const char*, ...); \n+  extern \"C\" int snprintf(char *, size_t, const char*, ...);\n+  extern \"C\" int sprintf(char *, const char*, ...); \n+  extern \"C\" int sscanf(const char*, const char*, ...); \n+  extern \"C\" int vfprintf(FILE*, const char*, va_list); \n+  extern \"C\" int vfscanf(FILE*, const char*, va_list); \n+  extern \"C\" int vprintf(const char*, va_list); \n+  extern \"C\" int vscanf(const char*, va_list); \n+  extern \"C\" int vsnprintf(char*, size_t, const char*, va_list); \n+  extern \"C\" int vsprintf(char*, const char*, va_list); \n+  extern \"C\" int vsscanf(const char*, const char*, va_list); \n+  extern \"C\" int fgetc(FILE *); \n+  extern \"C\" char *fgets(char*, int, FILE*); \n+  extern \"C\" int fputc(int, FILE*); \n+  extern \"C\" int fputs(const char*, FILE*); \n+  extern \"C\" int getc(FILE*); \n+  extern \"C\" int getchar(void); \n+  extern \"C\" char *gets(char*); \n+  extern \"C\" int putc(int, FILE*); \n+  extern \"C\" int putchar(int); \n+  extern \"C\" int puts(const char*); \n+  extern \"C\" int ungetc(int, FILE*);\n+  extern \"C\" size_t fread(void*, size_t, size_t, FILE*); \n+  extern \"C\" size_t fwrite(const void*, size_t, size_t, FILE*); \n+  extern \"C\" int fgetpos(FILE*, fpos_t*); \n+  extern \"C\" int fseek(FILE*, long int, int); \n+  extern \"C\" int fsetpos(FILE*, const fpos_t*); \n+  extern \"C\" long int ftell(FILE*); \n+  extern \"C\" void rewind(FILE*); \n+  extern \"C\" void clearerr(FILE*); \n+  extern \"C\" int feof(FILE*); \n+  extern \"C\" int ferror(FILE*); \n+  extern \"C\" void perror(const char*);\n+}\n \n #endif\n "}, {"sha": "10600e60f303f92aab314da902d3fa0adc8ec36f", "filename": "libstdc++-v3/include/c/bits/std_cstdlib.h", "status": "modified", "additions": 80, "deletions": 8, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdlib.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,20 +31,92 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CSTDLIB\n #define _CPP_CSTDLIB 1\n \n-// This keeps isanum, et al from being propagated as macros.\n-#if __linux__\n-#define __USE_ISOC9X 1\n+#include <bits/c++config.h>\n+\n+#pragma GCC system_header\n+#include_next <stdlib.h>\n+\n+namespace std \n+{\n+  using ::div_t;\n+  using ::ldiv_t;\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+# ifdef _GLIBCPP_HAVE_LLDIV_T\n+  using ::lldiv_t;\n+# else\n+  struct lldiv_t\n+  {\n+    long long quot;\n+    long long rem;\n+  };\n+# endif\n+#endif \n+\n+  extern \"C\" double atof(const char*); \n+  extern \"C\" int atoi(const char*); \n+  extern \"C\" long int atol(const char*); \n+  extern \"C\" double strtod(const char*, char**); \n+  extern \"C\" float strtof(const char*, char**); \n+  extern \"C\" long int strtol(const char*, char**, int); \n+  extern \"C\" unsigned long int strtoul(const char*, char**, int);\n+  extern \"C\" int rand(void); \n+  extern \"C\" void srand(unsigned int); \n+  extern \"C\" void* calloc(size_t, size_t); \n+  extern \"C\" void free(void*); \n+  extern \"C\" void* malloc(size_t); \n+  extern \"C\" void* realloc(void*, size_t); \n+  extern \"C\" void abort(void); \n+  extern \"C\" int atexit(void (*func)(void)); \n+  extern \"C\" void exit(int); \n+  extern \"C\" void _Exit(int); \n+  extern \"C\" char*getenv(const char*); \n+  extern \"C\" int system(const char*); \n+  extern \"C\" void* bsearch(const void*, const void*, size_t, size_t, \n+\t\t\t   int (*comp)(const void *, const void *)); \n+  extern \"C\" void qsort(void*, size_t, size_t, \n+\t\t\tint (*comp)(const void *, const void *)); \n+  extern \"C\" int abs(int); \n+  extern \"C\" long int labs(long int); \n+  extern \"C\" div_t div(int, int); \n+  extern \"C\" ldiv_t ldiv(long int, long int); \n+  extern \"C\" int mblen(const char*, size_t); \n+  extern \"C\" int mbtowc(wchar_t*, const char*, size_t); \n+  extern \"C\" int wctomb(char*, wchar_t); \n+  extern \"C\" size_t mbstowcs(wchar_t*, const char*, size_t); \n+  extern \"C\" size_t wcstombs(char*, const wchar_t*, size_t);\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  inline long long \n+  abs(long long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline long long \n+  llabs(long long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline lldiv_t \n+  div(long long __n, long long __d)\n+  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+  inline lldiv_t \n+  lldiv(long long __n, long long __d)\n+  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+  extern \"C\" long long int atoll(const char*); \n+  extern \"C\" long long int strtoll(const char*, char**, int); \n+  extern \"C\" unsigned long long int strtoull(const char*, char**, int); \n #endif\n \n-# pragma GCC system_header\n-# include_next <stdlib.h>\n+#ifdef _GLIBCPP_HAVE_STRTOLD\n+  extern \"C\" long double strtold(const char*, char**); \n+#endif\n+}\n \n-#endif // _CPP_CSTDLIB\n+#endif \n \n \n "}, {"sha": "252693b40d487b560cfd560c5bfbd46e9f650b77", "filename": "libstdc++-v3/include/c/bits/std_cstring.h", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstring.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,14 +31,43 @@\n // ISO C++ 14882: 20.4.6  C library\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CSTRING\n #define _CPP_CSTRING 1\n-# if defined __GLIBC__ && __GLIBC__ >= 2\n-// We must not see the optimized string functions GNU libc defines.\n-#  define __NO_STRING_INLINES\n-# endif\n-# pragma GCC system_header\n-# include_next <string.h>\n+\n+#include <bits/c++config.h>\n+\n+#pragma GCC system_header\n+#include_next <string.h>\n+\n+namespace std \n+{\n+  extern \"C\" void* memcpy(void*, const void*, size_t); \n+  extern \"C\" void* memmove(void*, const void*, size_t); \n+  extern \"C\" char* strcpy(char*, const char*); \n+  extern \"C\" char* strncpy(char*, const char*, size_t); \n+  extern \"C\" char* strcat(char*, const char*); \n+  extern \"C\" char* strncat(char*, const char*, size_t); \n+  extern \"C\" int memcmp(const void*, const void*, size_t); \n+  extern \"C\" int strcmp(const char*, const char*); \n+  extern \"C\" int strcoll(const char*, const char*); \n+  extern \"C\" int strncmp(const char*, const char*, size_t); \n+  extern \"C\" size_t strxfrm(char*, const char*, size_t); \n+  extern \"C\" void* memchr(const void*, int, size_t); \n+  extern \"C\" char* strchr(const char*, int); \n+  extern \"C\" size_t strcspn(const char*, const char*); \n+  extern \"C\" char* strpbrk(const char*, const char*); \n+  extern \"C\" char* strrchr(const char*, int); \n+  extern \"C\" size_t strspn(const char*, const char*); \n+  extern \"C\" char* strstr(const char*, const char*); \n+  extern \"C\" char* strtok(char*, const char*); \n+  extern \"C\" void* memset(void*, int, size_t); \n+  extern \"C\" char* strerror(int); \n+  extern \"C\" size_t strlen(const char*);\n+}\n+\n #endif\n+\n+\n+"}, {"sha": "8c700e699f21bd4d7a5810568a77f1814d2fc3ca", "filename": "libstdc++-v3/include/c/bits/std_ctime.h", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_ctime.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,10 +31,29 @@\n // ISO C++ 14882: 20.5  Date and time\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CTIME\n #define _CPP_CTIME 1\n-# pragma GCC system_header\n-# include_next <time.h>\n+\n+#pragma GCC system_header\n+#include_next <time.h>\n+\n+namespace std\n+{\n+  using ::clock_t;\n+  using ::time_t;\n+  using ::tm;\n+\n+  extern \"C\" clock_t clock(void); \n+  extern \"C\" double difftime(time_t, time_t); \n+  extern \"C\" time_t mktime(struct tm*); \n+  extern \"C\" time_t time(time_t*); \n+  extern \"C\" char* asctime(const struct tm*); \n+  extern \"C\" char* ctime(const time_t*); \n+  extern \"C\" struct tm* gmtime(const time_t*); \n+  extern \"C\" struct tm* localtime(const time_t*); \n+  extern \"C\" size_t strftime(char*, size_t, const char*, const struct tm*);\n+}\n+\n #endif"}, {"sha": "cc769402c53f92a5343b69295c3adb80bf9d27d3", "filename": "libstdc++-v3/include/c/bits/std_cwchar.h", "status": "modified", "additions": 84, "deletions": 8, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwchar.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -31,31 +31,107 @@\n // ISO C++ 14882: ???\n //\n \n-// Note: this is not a conforming implementation.\n+// Note: This is not a conforming implementation.\n \n #ifndef _CPP_CWCHAR\n #define _CPP_CWCHAR 1\n \n #include <bits/c++config.h>\n+#include <bits/std_cstdio.h>\n+#include <bits/std_cstdarg.h>\n \n #if _GLIBCPP_USE_WCHAR_T\n- # pragma GCC system_header\n- # include_next <wchar.h>\n+#pragma GCC system_header\n+#include_next <wchar.h>\n+\n+namespace std\n+{\n+  using ::wint_t;\n+  using ::mbstate_t;\n+\n+  extern \"C\" wint_t btowc(int); \n+  extern \"C\" int wctob(wint_t); \n+  extern \"C\" wint_t fgetwc(FILE*); \n+  extern \"C\" wchar_t* fgetws(wchar_t*, int, FILE*); \n+  extern \"C\" wint_t fputwc(wchar_t, FILE*); \n+  extern \"C\" int fputws(const wchar_t*, FILE*); \n+  extern \"C\" int fwide(FILE*, int); \n+  extern \"C\" int fwprintf(FILE*, const wchar_t*, ...); \n+  extern \"C\" int fwscanf(FILE*, const wchar_t*, ...); \n+  extern \"C\" int swprintf(wchar_t*, size_t, const wchar_t*, ...); \n+  extern \"C\" int swscanf(const wchar_t*, const wchar_t*, ...); \n+  extern \"C\" int vfwprintf(FILE*, const wchar_t*, va_list); \n+  extern \"C\" int vfwscanf(FILE*, const wchar_t*, va_list); \n+  extern \"C\" int vswprintf(wchar_t*, size_t, const wchar_t*, va_list); \n+  extern \"C\" int vswscanf(const wchar_t*, const wchar_t*, va_list); \n+  extern \"C\" int vwprintf(const wchar_t*, va_list); \n+  extern \"C\" int vwscanf(const wchar_t*, va_list); \n+  extern \"C\" int wprintf(const wchar_t*, ...); \n+  extern \"C\" int wscanf(const wchar_t*, ...); \n+  extern \"C\" wint_t getwc(FILE* stream); \n+  extern \"C\" wint_t getwchar(void); \n+  extern \"C\" int mbsinit(const mbstate_t*); \n+  extern \"C\" size_t mbrlen(const char*, size_t, mbstate_t*); \n+  extern \"C\" size_t mbrtowc(wchar_t*, const char*, size_t, mbstate_t*); \n+  extern \"C\" size_t mbsrtowcs(wchar_t*, const char**, size_t, mbstate_t*); \n+  extern \"C\" size_t wcsrtombs(char*, const wchar_t **, size_t, mbstate_t*);\n+  extern \"C\" wint_t putwc(wchar_t, FILE*); \n+  extern \"C\" wint_t putwchar(wchar_t); \n+  extern \"C\" wint_t ungetwc(wint_t, FILE*);\n+  extern \"C\" size_t wcrtomb(char*, wchar_t, mbstate_t*); \n+  extern \"C\" double wcstod(const wchar_t*, wchar_t**); \n+  extern \"C\" float wcstof(const wchar_t*, wchar_t**); \n+  extern \"C\" long int wcstol(const wchar_t*, wchar_t**, int); \n+  extern \"C\" unsigned long int wcstoul(const wchar_t*, wchar_t**, int); \n+  extern \"C\" wchar_t* wcscpy(wchar_t* s1, const wchar_t*); \n+  extern \"C\" wchar_t* wcsncpy(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wcscat(wchar_t*, const wchar_t*); \n+  extern \"C\" wchar_t* wcsncat(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" int wcscmp(const wchar_t*, const wchar_t*); \n+  extern \"C\" int wcscoll(const wchar_t*, const wchar_t*); \n+  extern \"C\" int wcsncmp(const wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" size_t wcsxfrm(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wcschr(const wchar_t*, wchar_t); \n+  extern \"C\" size_t wcscspn(const wchar_t*, const wchar_t*); \n+  extern \"C\" size_t wcslen(const wchar_t*); \n+  extern \"C\" wchar_t* wcspbrk(const wchar_t*, const wchar_t*); \n+  extern \"C\" wchar_t* wcsrchr(const wchar_t*, wchar_t); \n+  extern \"C\" size_t wcsspn(const wchar_t*, const wchar_t*); \n+  extern \"C\" wchar_t* wcsstr(const wchar_t*, const wchar_t*); \n+  extern \"C\" wchar_t* wcstok(wchar_t*, const wchar_t*, wchar_t**); \n+  extern \"C\" wchar_t* wmemchr(const wchar_t*, wchar_t, size_t);\n+  extern \"C\" int wmemcmp(const wchar_t*, const wchar_t*, size_t); \n+  //extern \"C\" int wmemcmp(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wmemcpy(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wmemmove(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wmemset(wchar_t*, wchar_t, size_t); \n+  extern \"C\" size_t wcsftime(wchar_t*, size_t, const wchar_t*, const struct tm*); \n+\n+#if 0\n+  // Full C9X listing\n+  extern \"C\" long double wcstold(const wchar_t*, wchar_t**); \n+  extern \"C\" long long int wcstoll(const wchar_t*, wchar_t**, int); \n+  extern \"C\" unsigned long long int wcstoull(const wchar_t*, wchar_t**, int); \n+#endif\n+}\n+\n #else\n-# ifdef __cplusplus\n extern \"C\" \n {\n-#endif\n   typedef struct \n   {\n     int __fill[6];\n   } mbstate_t;\n-# ifdef __cplusplus\n }\n-# endif\n+\n+namespace std \n+{\n+  using ::mbstate_t;\n+}\n #endif //_GLIBCPP_USE_WCHAR_T\n \n-#endif // _CPP_CWCHAR\n+\n+#endif \n \n \n "}, {"sha": "5757c14b16b2aa60b65873d09d408b669f5981ec", "filename": "libstdc++-v3/include/c/bits/std_cwctype.h", "status": "modified", "additions": 29, "deletions": 115, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwctype.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -31,126 +31,40 @@\n // ISO C++ 14882: <cwctype>\n //\n \n+// Note: This is not a conforming implementation.\n+\n #ifndef _CPP_CWCTYPE\n #define _CPP_CWCTYPE 1\n \n-# pragma GCC system_header\n-# include_next <wctype.h>\n-\n-// Sequester the C non-inline implementations in the _C_Swamp::\n-// namespace, and provide C++ inlines for them in the std:: namespace\n-// where they belong.\n+#pragma GCC system_header\n+#include_next <wctype.h>\n \n-namespace std \n+namespace std\n {\n-\n-#ifdef towupper\n-  inline wint_t \n-  _S_towupper_helper(wint_t __wc) { return towupper(__wc); }\n-# undef towupper\n-  inline wint_t \n-  towupper(wint_t __wc) { return _S_towupper_helper(__wc); }\n-#endif\n-\n-#ifdef towlower\n-  inline wint_t \n-  _S_towlower_helper(wint_t __wc) { return towlower(__wc); }\n-# undef towlower\n-  inline wint_t \n-  towlower(wint_t __wc) { return _S_towlower_helper(__wc); }\n-#endif\n-\n-#ifdef iswspace\n-  inline int \n-  _S_iswspace_helper(wint_t __wc) { return iswspace(__wc); }\n-# undef iswspace\n-  inline int \n-  iswspace(wint_t __wc) { return _S_iswspace_helper(__wc); }\n-#endif\n-\n-#ifdef iswprint\n-  inline int \n-  _S_iswprint_helper(wint_t __wc) { return iswprint(__wc); }\n-# undef iswprint\n-  inline int \n-  iswprint(wint_t __wc) { return _S_iswprint_helper(__wc); }\n-#endif\n-\n-#ifdef iswcntrl\n-  inline int \n-  _S_iswcntrl_helper(wint_t __wc) { return iswcntrl(__wc); }\n-# undef iswcntrl\n-  inline int \n-  iswcntrl(wint_t __wc) { return _S_iswcntrl_helper(__wc); }\n-#endif\n-\n-#ifdef iswupper\n-  inline int \n-  _S_iswupper_helper(wint_t __wc) { return iswupper(__wc); }\n-# undef iswupper\n-  inline int \n-  iswupper(wint_t __wc) { return _S_iswupper_helper(__wc); }\n-#endif\n-\n-#ifdef iswlower\n-  inline int \n-  _S_iswlower_helper(wint_t __wc) { return iswlower(__wc); }\n-# undef iswlower\n-  inline int \n-  iswlower(wint_t __wc) { return _S_iswlower_helper(__wc); }\n-#endif\n-\n-#ifdef iswalpha\n-  inline int \n-  _S_iswalpha_helper(wint_t __wc) { return iswalpha(__wc); }\n-# undef iswalpha\n-  inline int \n-  iswalpha(wint_t __wc) { return _S_iswalpha_helper(__wc); }\n-#endif\n-\n-#ifdef iswdigit\n-  inline int \n-  _S_iswdigit_helper(wint_t __wc) { return iswdigit(__wc); }\n-# undef iswdigit\n-  inline int \n-  iswdigit(wint_t __wc) { return _S_iswdigit_helper(__wc); }\n-#endif\n-\n-#ifdef iswpunct\n-  inline int \n-  _S_iswpunct_helper(wint_t __wc) { return iswpunct(__wc); }\n-# undef iswpunct\n-  inline int \n-  iswpunct(wint_t __wc) { return _S_iswpunct_helper(__wc); }\n-#endif\n-\n-#ifdef iswxdigit\n-  inline int \n-  _S_iswxdigit_helper (wint_t __wc) { return iswxdigit(__wc); }\n-# undef iswxdigit\n-  inline int \n-  iswxdigit(wint_t __wc) { return _S_iswxdigit_helper(__wc); }\n-#endif\n-\n-#ifdef iswalnum\n-  inline int \n-  _S_iswalnum_helper(wint_t __wc) { return iswalnum(__wc); }\n-# undef iswalnum\n-  inline int \n-  iswalnum(wint_t __wc) { return _S_iswalnum_helper(__wc); }\n-#endif\n-\n-#ifdef iswgraph\n-  inline int \n-  _S_iswgraph_helper(wint_t __wc) { return iswgraph(__wc); }\n-# undef iswgraph\n-  inline int \n-  iswgraph(wint_t __wc) { return _S_iswgraph_helper(__wc); }\n-#endif\n-\n-} // namespace std\n-\n-#endif // _CPP_CWCTYPE\n+  using ::wctype_t;\n+  using ::wctrans_t;\n+\n+  extern \"C\" int iswalnum(wint_t); \n+  extern \"C\" int iswalpha(wint_t); \n+  extern \"C\" int iswblank(wint_t); \n+  extern \"C\" int iswcntrl(wint_t); \n+  extern \"C\" int iswdigit(wint_t); \n+  extern \"C\" int iswgraph(wint_t); \n+  extern \"C\" int iswlower(wint_t); \n+  extern \"C\" int iswprint(wint_t); \n+  extern \"C\" int iswpunct(wint_t); \n+  extern \"C\" int iswspace(wint_t); \n+  extern \"C\" int iswupper(wint_t); \n+  extern \"C\" int iswxdigit(wint_t);\n+  extern \"C\" int iswctype(wint_t, wctype_t); \n+  extern \"C\" wctype_t wctype(const char *); \n+  extern \"C\" wint_t towlower(wint_t); \n+  extern \"C\" wint_t towupper(wint_t); \n+  extern \"C\" wint_t towctrans(wint_t, wctrans_t); \n+  extern \"C\" wctrans_t wctrans(const char*);\n+}\n+\n+#endif \n \n \n "}, {"sha": "db2761281d08d1ffbfe68bd7371e372e8d58a274", "filename": "libstdc++-v3/include/c_std/bits/std_cstdio.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -133,7 +133,7 @@ namespace std {\n   using _C_legacy::remove;\n   using _C_legacy::rename;\n   using _C_legacy::tmpnam;\n-  //  using _C_legacy::printf;\n+  using _C_legacy::printf;\n   using _C_legacy::scanf;\n   using _C_legacy::sprintf;\n   using _C_legacy::sscanf;"}, {"sha": "c3a43b736c2dc14aa61b42b1c361373716f3aa1a", "filename": "libstdc++-v3/include/c_std/stdio.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstdio.h?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -57,7 +57,7 @@\n   using std::setvbuf;\n   using std::fprintf;\n   using std::fscanf;\n-//  using std::printf;\n+  using std::printf;\n   using std::scanf;\n   using std::sprintf;\n   using std::sscanf;"}, {"sha": "bbcbda79dc574d88d998de6aefd48e4acfbea7ee", "filename": "libstdc++-v3/libsupc++/tinfo2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -27,7 +27,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <stddef.h>\n+#include <cstddef>\n #include \"tinfo.h\"\n #include \"new\"\t\t\t// for placement new\n "}, {"sha": "075558dee999b69f7de8f2cd3e6b0287e050470e", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -57,12 +57,12 @@ fi\n top_srcdir=@top_srcdir@\n C_DIR=\"`basename @C_INCLUDE_DIR@`\"\n if [ $WHICH != \"1\" ]; then\n-  INC_PATH=\"@CSHADOW_FLAGS@ -I$BUILD_DIR/include -I$BUILD_DIR/libio \\\n+  INC_PATH=\"-nostdinc++ @CSHADOW_FLAGS@ -I$BUILD_DIR/include \\\n     -I$SRC_DIR/include/std  -I$SRC_DIR/include/$C_DIR \\\n     -I$SRC_DIR/include -I$SRC_DIR/libsupc++ -I$SRC_DIR/libio \\\n     -I$SRC_DIR/testsuite\"\n elif [ $WHICH -eq 1 ]; then\n-  INC_PATH=\"-I$SRC_DIR/testsuite\"\n+  INC_PATH=\"-nostdinc++ -I$SRC_DIR/testsuite\"\n fi\n \n if [ $WHICH -eq 2 ]; then"}, {"sha": "8b8854c6254d82f45873170cd5996ae9e957e824", "filename": "libstdc++-v3/src/complex_io.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -32,7 +32,6 @@\n #include <bits/std_ostream.h>\n #include <bits/std_sstream.h>\n \n-\n namespace std\n {\n     \n@@ -82,9 +81,7 @@ namespace std\n     {\n       basic_ostringstream<_CharT, _Traits> __s;\n       __s.flags(__os.flags());\n-#ifdef _G_HAVE_LOCALE\n       __s.imbue(__os.getloc());\n-#endif\n       __s.precision (__os.precision());\n       __s << '(' << __x.real() << \",\" << __x.imag() << ')' << ends;\n       return __os << __s.str();"}, {"sha": "91505beef2717d050efc7b2fa9f8c5f1a80333c4", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_wchar_t_char.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_wchar_t_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_wchar_t_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_wchar_t_char.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -20,6 +20,7 @@\n \n // 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n \n+#include <cwchar> // for mbstate_t\n #include <locale>\n #include <debug_assert.h>\n \n@@ -34,8 +35,8 @@\n //   w_codecvt::state_type state01 = {0, 0};\n // .. except Ulrich says: Use memset. Always use memset. Feel the force...\n void\n-zero_state(mbstate_t& state)\n-{ memset(&state, 0, sizeof(mbstate_t)); }\n+zero_state(std::mbstate_t& state)\n+{ std::memset(&state, 0, sizeof(std::mbstate_t)); }\n \n // Required instantiation\n // codecvt<wchar_t, char, mbstate_t>"}, {"sha": "64433ee28b69e83076c3442147e24b9b0e5d6c46", "filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -20,14 +20,15 @@\n \n // 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n \n+#include <cwchar> // for mbstate_t\n #include <locale>\n #include <stdexcept>\n #include <debug_assert.h>\n \n-typedef std::codecvt<char, char, mbstate_t> \t\tc_codecvt;\n-typedef std::codecvt_byname<char, char, mbstate_t> \tc_codecvt_byname;\n-typedef std::codecvt<wchar_t, char, mbstate_t>\t\tw_codecvt;\n-typedef std::codecvt_byname<wchar_t, char, mbstate_t>\tw_codecvt_byname;\n+typedef std::codecvt<char, char, std::mbstate_t> \t\tc_codecvt;\n+typedef std::codecvt_byname<char, char, std::mbstate_t> \tc_codecvt_byname;\n+typedef std::codecvt<wchar_t, char, std::mbstate_t>\t\tw_codecvt;\n+typedef std::codecvt_byname<wchar_t, char, std::mbstate_t>\tw_codecvt_byname;\n \n class gnu_codecvt: public c_codecvt { }; \n "}, {"sha": "8129ea9e048cf71fa44c1fa616af196d57f3918d", "filename": "libstdc++-v3/testsuite/22_locale/facet.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -20,6 +20,7 @@\n \n // 22.1.1.1.2 - class locale::facet [lib.locale.facet]\n \n+#include <cwchar> // for mbstate_t\n #include <locale>\n #include <iterator>\n #include <debug_assert.h>\n@@ -30,7 +31,7 @@ typedef std::ostreambuf_iterator<char>\t\toutput_iterator;\n \n class gnu_collate: public std::collate<char> { }; \n class gnu_ctype: public std::ctype<char> { }; \n-class gnu_codecvt: public std::codecvt<char, char, mbstate_t> { }; \n+class gnu_codecvt: public std::codecvt<char, char, std::mbstate_t> { }; \n class gnu_moneypunct: public std::moneypunct<char> { }; \n class gnu_moneypunct_true: public std::moneypunct<char, true> { }; \n class gnu_money_get: public std::money_get<char> { }; "}, {"sha": "afd00b060b527c6b805c4bf51b869f7328fa4928", "filename": "libstdc++-v3/testsuite/22_locale/global_templates.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -20,10 +20,11 @@\n \n // 22.1.2 locale globals [lib.locale.global.templates]\n \n+#include <cwchar> // for mbstate_t\n #include <locale>\n #include <debug_assert.h>\n \n-typedef std::codecvt<char, char, mbstate_t> ccodecvt;\n+typedef std::codecvt<char, char, std::mbstate_t> ccodecvt;\n \n class gnu_codecvt: public ccodecvt { }; \n "}, {"sha": "e876748d30206d0505aed5e8101741361f510cc2", "filename": "libstdc++-v3/testsuite/22_locale/operators.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Foperators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Foperators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Foperators.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -20,10 +20,11 @@\n \n // 22.1.1.4 locale operators [lib.locale.operators]\n \n+#include <cwchar> // for mbstate_t\n #include <locale>\n #include <debug_assert.h>\n \n-typedef std::codecvt<char, char, mbstate_t> ccodecvt;\n+typedef std::codecvt<char, char, std::mbstate_t> ccodecvt;\n class gnu_codecvt: public ccodecvt { }; \n \n void test01()"}, {"sha": "7f951d81ff8a90d3c0add8cac1e45310c8073fc2", "filename": "libstdc++-v3/testsuite/22_locale/static_members.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -20,10 +20,11 @@\n \n // 22.1.1.5 locale static members [lib.locale.statics]\n \n+#include <cwchar> // for mbstate_t\n #include <locale>\n #include <debug_assert.h>\n \n-typedef std::codecvt<char, char, mbstate_t> ccodecvt;\n+typedef std::codecvt<char, char, std::mbstate_t> ccodecvt;\n class gnu_codecvt: public ccodecvt { }; \n \n void test01()"}, {"sha": "119c0d37f0ab1f3fa3a2664dad83594fdf90c2e9", "filename": "libstdc++-v3/testsuite/26_numerics/c_math.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc_math.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc_math.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc_math.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -36,15 +36,15 @@ test01()\n int\n test02()\n {\n-  sin(static_cast<float>(0));\n+\tstd::sin(static_cast<float>(0));\n   return 0;\n }\n \n // as did this.\n int\n test03()\n {\n-  double powtest = pow(2., 0);\n+  double powtest = std::pow(2., 0);\n   return 0;\n }\n "}, {"sha": "e195651160f40628e21d7ea43b3c71bf85d38275", "filename": "libstdc++-v3/testsuite/26_numerics/complex_inserters_extractors.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -31,7 +31,7 @@ template<typename R>\n inline bool flteq(R x, R y)\n {\n   if (x == R(0)) return y == R(0);\n-  else return fabs(x-y) < 1e-6*fabs(x);\n+  else return std::fabs(x-y) < 1e-6*std::fabs(x);\n }\n \n template<typename R>"}, {"sha": "ef290bc5d8ad80d56ffbcc84ea5741bcae383e47", "filename": "libstdc++-v3/testsuite/27_io/fpos.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -29,14 +29,15 @@\n \n // 27.4.3 template class fpos\n \n+#include <cwchar> // for mbstate_t\n #include <ios>\n #include <debug_assert.h>\n \n void test01()\n {\n   bool test = true;\n \n-  typedef mbstate_t state_type;\n+  typedef std::mbstate_t state_type;\n   state_type state01;\n   state_type state02;\n \n@@ -72,7 +73,7 @@ void test02()\n {\n   bool test = true;\n \n-  typedef mbstate_t state_type;\n+  typedef std::mbstate_t state_type;\n   state_type state01;\n   state_type state02;\n \n@@ -132,7 +133,7 @@ void test03()\n {\n   bool test = true;\n \n-  typedef mbstate_t state_type;\n+  typedef std::mbstate_t state_type;\n   state_type state01;\n   state_type state02;\n "}, {"sha": "d410f741f16bc68e25885474d89ca8687e05b038", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -20,6 +20,7 @@\n \n // 27.6.1.2.2 arithmetic extractors\n \n+#include <cstdio> // for printf\n #include <istream>\n #include <ostream>\n #include <sstream>\n@@ -105,9 +106,9 @@ bool test01() {\n   VERIFY( f1 == 1.5 );\n \n   is_04 >> std::hex >> i1;\n-  printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n+  std::printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n   VERIFY( i1 == 0x123 );\n-  printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n+  std::printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n \n   // test void pointers\n   int i = 55;\n@@ -116,7 +117,7 @@ bool test01() {\n \n   ss_01 << po;\n   ss_01 >> pi;\n-  printf (\"%x %x\\n\", pi, po);\n+  std::printf (\"%x %x\\n\", pi, po);\n   VERIFY( po == pi );\n   \n #ifdef DEBUG_ASSERT"}, {"sha": "96f47fab99bc00ec989daad665dbdd677bfc4c8f", "filename": "libstdc++-v3/testsuite/27_io/istream_unformatted.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -20,6 +20,7 @@\n \n // 27.6.1.3 unformatted input functions\n \n+#include <cstring> // for strncmp,...\n #include <istream>\n #include <sstream>\n #include <fstream>\n@@ -56,7 +57,7 @@ test01()\n   is_04.read(carray, 9);\n   state2 = is_04.rdstate();\n   VERIFY( state1 == state2 );\n-  VERIFY( !strncmp(carray, \"soul eyes\", 9) );\n+  VERIFY( !std::strncmp(carray, \"soul eyes\", 9) );\n   VERIFY( is_04.peek() == ':' );\n \n   state1 = is_03.rdstate();\n@@ -65,7 +66,7 @@ test01()\n   VERIFY( state1 != state2 );\n   VERIFY( static_cast<bool>(state2 & stateeof) ); \n   VERIFY( static_cast<bool>(state2 & statefail) ); \n-  VERIFY( !strncmp(carray, \"soul eyes: john coltrane quartet\", 35) );\n+  VERIFY( !std::strncmp(carray, \"soul eyes: john coltrane quartet\", 35) );\n \n \n   // istream& ignore(streamsize n = 1, int_type delim = traits::eof())\n@@ -377,7 +378,7 @@ aaaaaaaaaaaaaa\n   char tmp[it];\n   std::stringbuf sb(charray, std::ios_base::in);\n   std::istream ifs(&sb);\n-  std::streamsize blen = strlen(charray);\n+  std::streamsize blen = std::strlen(charray);\n   VERIFY(ifs);\n   while(ifs.getline(tmp, it) || ifs.gcount())\n     {\n@@ -401,7 +402,7 @@ aaaaaaaaaaaaaa\n \t  // or\n \t  // -> n - 1 characters are stored\n           ifs.clear(ifs.rdstate() & ~std::ios::failbit);\n-          VERIFY((ifs.gcount() == 0) || (strlen(tmp) == it - 1));\n+          VERIFY((ifs.gcount() == 0) || (std::strlen(tmp) == it - 1));\n           VERIFY(ifs);\n           continue;\n         }\n@@ -411,7 +412,7 @@ aaaaaaaaaaaaaa\n \t  //\n \t  // -> strlen(__s) < n - 1 \n \t  // -> delimiter was seen -> gcount() > strlen(__s)\n-          VERIFY(ifs.gcount() == strlen(tmp) + 1);\n+          VERIFY(ifs.gcount() == std::strlen(tmp) + 1);\n           continue;\n         }\n     }"}, {"sha": "f503ad37f61474682202effdb2f6344d8e0fc952", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -19,6 +19,7 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n+#include <cstdio> // for sprintf\n #include <iostream>\n #include <iomanip>\n #include <locale>"}, {"sha": "17de46b02ea384a0ed7d03f77d2dd551a8853f35", "filename": "libstdc++-v3/testsuite/27_io/streambuf.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstreambuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc950092b4a22757f6893f53c1d1ad8fd85381b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstreambuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstreambuf.cc?ref=4bc950092b4a22757f6893f53c1d1ad8fd85381b", "patch": "@@ -29,6 +29,7 @@\n \n // 27.5.2 template class basic_streambuf\n \n+#include <cstring> // for memset, memcmp\n #include <streambuf>\n #include <ostream>\n #include <debug_assert.h>\n@@ -131,9 +132,9 @@ void test01()\n \n   // sputn/xsputn\n   char* lit02 = \"isotope 217: the unstable molecule on thrill jockey\";\n-  int i02 = strlen(lit02);\n+  int i02 = std::strlen(lit02);\n   char carray[i02 + 1];\n-  memset(carray, 0, i02 + 1);\n+  std::memset(carray, 0, i02 + 1);\n \n   buf01.pub_setp(carray, (carray + i02));\n   buf01.sputn(lit02, 0);\n@@ -144,9 +145,9 @@ void test01()\n   VERIFY( lit02[1] == 's' );\n   VERIFY( carray[1] == 0 );\n   buf01.sputn(lit02 + 1, 10);\n-  VERIFY( memcmp(lit02, carray, 10) == 0 );\n+  VERIFY( std::memcmp(lit02, carray, 10) == 0 );\n   buf01.sputn(lit02 + 11, 20);\n-  VERIFY( memcmp(lit02, carray, 30) == 0 );\n+  VERIFY( std::memcmp(lit02, carray, 30) == 0 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -172,7 +173,7 @@ void test02()\n   // 27.5.2.2.5 Put area\n   size_t i01 = traits_type::length(lit01);\n   char carray01[i01];\n-  memset(carray01, 0, i01);\n+  std::memset(carray01, 0, i01);\n   \n   buf01.pub_setg(lit01, lit01, lit01 + i01);\n   buf01.sgetn(carray01, 0);"}]}