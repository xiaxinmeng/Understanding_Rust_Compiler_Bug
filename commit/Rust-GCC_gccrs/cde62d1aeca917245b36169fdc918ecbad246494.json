{"sha": "cde62d1aeca917245b36169fdc918ecbad246494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RlNjJkMWFlY2E5MTcyNDViMzYxNjlmZGM5MThlY2JhZDI0NjQ5NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-01-24T12:18:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-01-24T12:18:57Z"}, "message": "(CLASS_LIKELY_SPILLED_P): Add default definition.\n\n(alloc_qty_for_scratch, local_alloc): Use CLASS_LIKELY_SPILLED_P.\n\nFrom-SVN: r3319", "tree": {"sha": "54bf1d1eae1c35255af47a5297aa035f695167d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54bf1d1eae1c35255af47a5297aa035f695167d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cde62d1aeca917245b36169fdc918ecbad246494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde62d1aeca917245b36169fdc918ecbad246494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde62d1aeca917245b36169fdc918ecbad246494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde62d1aeca917245b36169fdc918ecbad246494/comments", "author": null, "committer": null, "parents": [{"sha": "f65b79390a3249bf670ddd04eb2e320b88f2b1e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65b79390a3249bf670ddd04eb2e320b88f2b1e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65b79390a3249bf670ddd04eb2e320b88f2b1e0"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "dba5fe5b1412d94646c3d59bd868116b05c25a7a", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde62d1aeca917245b36169fdc918ecbad246494/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde62d1aeca917245b36169fdc918ecbad246494/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=cde62d1aeca917245b36169fdc918ecbad246494", "patch": "@@ -65,6 +65,17 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"recog.h\"\n #include \"output.h\"\n \f\n+/* Pseudos allocated here cannot be reallocated by global.c if the hard\n+   register is used as a spill register.  So we don't allocate such pseudos\n+   here if their preferred class is likely to be used by spills.\n+\n+   On most machines, the appropriate test is if the class has one\n+   register, so we default to that.  */\n+\n+#ifndef CLASS_LIKELY_SPILLED_P\n+#define CLASS_LIKELY_SPILLED_P(CLASS) (reg_class_size[(int) (CLASS)] == 1)\n+#endif\n+\n /* Next quantity number available for allocation.  */\n \n static int next_qty;\n@@ -329,11 +340,11 @@ alloc_qty_for_scratch (scratch, n, insn, insn_code_num, insn_number)\n \tbreak;\n       }\n \n-  /* If CLASS has only one register, don't allocate the SCRATCH here since\n+  /* If CLASS has only a few registers, don't allocate the SCRATCH here since\n      it will prevent that register from being used as a spill register.\n      reload will do the allocation.  */\n \n-  if (class == NO_REGS || reg_class_size[(int) class] == 1)\n+  if (class == NO_REGS || CLASS_LIKELY_SPILLED_P (class))\n     return;\n \n #else /* REGISTER_CONSTRAINTS */\n@@ -411,7 +422,7 @@ local_alloc ()\n   /* Determine which pseudo-registers can be allocated by local-alloc.\n      In general, these are the registers used only in a single block and\n      which only die once.  However, if a register's preferred class has only\n-     one entry, don't allocate this register here unless it is preferred\n+     a few entries, don't allocate this register here unless it is preferred\n      or nothing since retry_global_alloc won't be able to move it to\n      GENERAL_REGS if a reload register of this class is needed.\n \n@@ -422,7 +433,7 @@ local_alloc ()\n     {\n       if (reg_basic_block[i] >= 0 && reg_n_deaths[i] == 1\n \t  && (reg_alternate_class (i) == NO_REGS\n-\t      || reg_class_size[(int) reg_preferred_class (i)] > 1))\n+\t      || ! CLASS_LIKELY_SPILLED_P (reg_preferred_class (i))))\n \treg_qty[i] = -2;\n       else\n \treg_qty[i] = -1;"}]}