{"sha": "7b824de381af8ec76c78819f0858e935b6bb44b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4MjRkZTM4MWFmOGVjNzZjNzg4MTlmMDg1OGU5MzViNmJiNDRiOA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-04-16T17:25:08Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-04-16T17:25:08Z"}, "message": "JIS0201.h: New file, generated from Unicode table.\n\n\ufffd\n\t* gnu/gcj/convert/JIS0201.h:  New file, generated from Unicode table.\n\t* gnu/gcj/convert/Input_JavaSrc.java: New BytesToUnicode class.\n\t* gnu/gcj/convert/Input_SJIS.java: New BytesToUnicode class.\n\t* gnu/gcj/convert/Output_EUCJIS.java:  New UnicodeToBytes class.\n\t* gnu/gcj/convert/Output_SJIS.java:  New UnicodeToBytes class.\n\t* gnu/gcj/convert/natInput_EUCJIS.cc:  New file.\n\t* gnu/gcj/convert/natInput_SJIS.cc:  New file.\n\t* gnu/gcj/convert/natOutput_EUCJIS.cc:  New file.\n\t* gnu/gcj/convert/natOutput_SJIS.cc:  New file.\n\t* gnu/gcj/convert/make-trie.c:  New file: functions to make a trie.\n\t* gnu/gcj/convert/gen-from-JIS.c:  Invoke make-trie for output.\n\t* gnu/gcj/convert/Unicode_to_JIS.cc:  New generated trie table.\n\nFrom-SVN: r26501", "tree": {"sha": "86aa86aa2596f5675dbd136b44c9e1a168293346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86aa86aa2596f5675dbd136b44c9e1a168293346"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b824de381af8ec76c78819f0858e935b6bb44b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b824de381af8ec76c78819f0858e935b6bb44b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b824de381af8ec76c78819f0858e935b6bb44b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b824de381af8ec76c78819f0858e935b6bb44b8/comments", "author": null, "committer": null, "parents": [{"sha": "063ee226edb855777a839a78036711e3e0f114e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063ee226edb855777a839a78036711e3e0f114e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/063ee226edb855777a839a78036711e3e0f114e7"}], "stats": {"total": 330, "additions": 319, "deletions": 11}, "files": [{"sha": "e0d2d5100b4be5fbb7f3d71ec260b4c64c9c7a02", "filename": "libjava/gnu/gcj/convert/Input_8859_1.java", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_8859_1.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_8859_1.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_8859_1.java?ref=7b824de381af8ec76c78819f0858e935b6bb44b8", "patch": "@@ -8,6 +8,12 @@\n \n package gnu.gcj.convert;\n \n+/**\n+ * Convert ISO-Latin-1 (8851-1) text to Unicode.\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @date Match 1999.\n+ */\n+\n public class Input_8859_1 extends BytesToUnicode\n {\n   public String getName() { return \"8859_1\"; }"}, {"sha": "cdc7c4cb81968b33edd576afe4eb92bc0ecd9ce5", "filename": "libjava/gnu/gcj/convert/Input_SJIS.java", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_SJIS.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_SJIS.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_SJIS.java?ref=7b824de381af8ec76c78819f0858e935b6bb44b8", "patch": "@@ -0,0 +1,24 @@\n+/* Copyright (C) 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.convert;\n+\n+/**\n+ * Convert SJIS (Shift JIS, used on Japanese MS-Windows) to Unicode.\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @date April 1999.\n+ */\n+\n+public class Input_SJIS extends BytesToUnicode\n+{\n+  public String getName() { return \"SJIS\"; }\n+\n+  public native int read (char[] outbuffer, int outpos, int outlength);\n+\n+  int first_byte;\n+}"}, {"sha": "3a3b4f1b85ae23e3fe2e2c05818f87258ad8c1bc", "filename": "libjava/gnu/gcj/convert/JIS0201.h", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FJIS0201.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FJIS0201.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FJIS0201.h?ref=7b824de381af8ec76c78819f0858e935b6bb44b8", "patch": "@@ -0,0 +1,159 @@\n+/* This file is automatically generated from Unicode tables */\n+MAP(0x00, 0x20, 0x0020)  /* SPACE */\n+MAP(0x00, 0x21, 0x0021)  /* EXCLAMATION MARK */\n+MAP(0x00, 0x22, 0x0022)  /* QUOTATION MARK */\n+MAP(0x00, 0x23, 0x0023)  /* NUMBER SIGN */\n+MAP(0x00, 0x24, 0x0024)  /* DOLLAR SIGN */\n+MAP(0x00, 0x25, 0x0025)  /* PERCENT SIGN */\n+MAP(0x00, 0x26, 0x0026)  /* AMPERSAND */\n+MAP(0x00, 0x27, 0x0027)  /* APOSTROPHE */\n+MAP(0x00, 0x28, 0x0028)  /* LEFT PARENTHESIS */\n+MAP(0x00, 0x29, 0x0029)  /* RIGHT PARENTHESIS */\n+MAP(0x00, 0x2A, 0x002A)  /* ASTERISK */\n+MAP(0x00, 0x2B, 0x002B)  /* PLUS SIGN */\n+MAP(0x00, 0x2C, 0x002C)  /* COMMA */\n+MAP(0x00, 0x2D, 0x002D)  /* HYPHEN-MINUS */\n+MAP(0x00, 0x2E, 0x002E)  /* FULL STOP */\n+MAP(0x00, 0x2F, 0x002F)  /* SOLIDUS */\n+MAP(0x00, 0x30, 0x0030)  /* DIGIT ZERO */\n+MAP(0x00, 0x31, 0x0031)  /* DIGIT ONE */\n+MAP(0x00, 0x32, 0x0032)  /* DIGIT TWO */\n+MAP(0x00, 0x33, 0x0033)  /* DIGIT THREE */\n+MAP(0x00, 0x34, 0x0034)  /* DIGIT FOUR */\n+MAP(0x00, 0x35, 0x0035)  /* DIGIT FIVE */\n+MAP(0x00, 0x36, 0x0036)  /* DIGIT SIX */\n+MAP(0x00, 0x37, 0x0037)  /* DIGIT SEVEN */\n+MAP(0x00, 0x38, 0x0038)  /* DIGIT EIGHT */\n+MAP(0x00, 0x39, 0x0039)  /* DIGIT NINE */\n+MAP(0x00, 0x3A, 0x003A)  /* COLON */\n+MAP(0x00, 0x3B, 0x003B)  /* SEMICOLON */\n+MAP(0x00, 0x3C, 0x003C)  /* LESS-THAN SIGN */\n+MAP(0x00, 0x3D, 0x003D)  /* EQUALS SIGN */\n+MAP(0x00, 0x3E, 0x003E)  /* GREATER-THAN SIGN */\n+MAP(0x00, 0x3F, 0x003F)  /* QUESTION MARK */\n+MAP(0x00, 0x40, 0x0040)  /* COMMERCIAL AT */\n+MAP(0x00, 0x41, 0x0041)  /* LATIN CAPITAL LETTER A */\n+MAP(0x00, 0x42, 0x0042)  /* LATIN CAPITAL LETTER B */\n+MAP(0x00, 0x43, 0x0043)  /* LATIN CAPITAL LETTER C */\n+MAP(0x00, 0x44, 0x0044)  /* LATIN CAPITAL LETTER D */\n+MAP(0x00, 0x45, 0x0045)  /* LATIN CAPITAL LETTER E */\n+MAP(0x00, 0x46, 0x0046)  /* LATIN CAPITAL LETTER F */\n+MAP(0x00, 0x47, 0x0047)  /* LATIN CAPITAL LETTER G */\n+MAP(0x00, 0x48, 0x0048)  /* LATIN CAPITAL LETTER H */\n+MAP(0x00, 0x49, 0x0049)  /* LATIN CAPITAL LETTER I */\n+MAP(0x00, 0x4A, 0x004A)  /* LATIN CAPITAL LETTER J */\n+MAP(0x00, 0x4B, 0x004B)  /* LATIN CAPITAL LETTER K */\n+MAP(0x00, 0x4C, 0x004C)  /* LATIN CAPITAL LETTER L */\n+MAP(0x00, 0x4D, 0x004D)  /* LATIN CAPITAL LETTER M */\n+MAP(0x00, 0x4E, 0x004E)  /* LATIN CAPITAL LETTER N */\n+MAP(0x00, 0x4F, 0x004F)  /* LATIN CAPITAL LETTER O */\n+MAP(0x00, 0x50, 0x0050)  /* LATIN CAPITAL LETTER P */\n+MAP(0x00, 0x51, 0x0051)  /* LATIN CAPITAL LETTER Q */\n+MAP(0x00, 0x52, 0x0052)  /* LATIN CAPITAL LETTER R */\n+MAP(0x00, 0x53, 0x0053)  /* LATIN CAPITAL LETTER S */\n+MAP(0x00, 0x54, 0x0054)  /* LATIN CAPITAL LETTER T */\n+MAP(0x00, 0x55, 0x0055)  /* LATIN CAPITAL LETTER U */\n+MAP(0x00, 0x56, 0x0056)  /* LATIN CAPITAL LETTER V */\n+MAP(0x00, 0x57, 0x0057)  /* LATIN CAPITAL LETTER W */\n+MAP(0x00, 0x58, 0x0058)  /* LATIN CAPITAL LETTER X */\n+MAP(0x00, 0x59, 0x0059)  /* LATIN CAPITAL LETTER Y */\n+MAP(0x00, 0x5A, 0x005A)  /* LATIN CAPITAL LETTER Z */\n+MAP(0x00, 0x5B, 0x005B)  /* LEFT SQUARE BRACKET */\n+MAP(0x00, 0x5C, 0x00A5)  /* YEN SIGN */\n+MAP(0x00, 0x5D, 0x005D)  /* RIGHT SQUARE BRACKET */\n+MAP(0x00, 0x5E, 0x005E)  /* CIRCUMFLEX ACCENT */\n+MAP(0x00, 0x5F, 0x005F)  /* LOW LINE */\n+MAP(0x00, 0x60, 0x0060)  /* GRAVE ACCENT */\n+MAP(0x00, 0x61, 0x0061)  /* LATIN SMALL LETTER A */\n+MAP(0x00, 0x62, 0x0062)  /* LATIN SMALL LETTER B */\n+MAP(0x00, 0x63, 0x0063)  /* LATIN SMALL LETTER C */\n+MAP(0x00, 0x64, 0x0064)  /* LATIN SMALL LETTER D */\n+MAP(0x00, 0x65, 0x0065)  /* LATIN SMALL LETTER E */\n+MAP(0x00, 0x66, 0x0066)  /* LATIN SMALL LETTER F */\n+MAP(0x00, 0x67, 0x0067)  /* LATIN SMALL LETTER G */\n+MAP(0x00, 0x68, 0x0068)  /* LATIN SMALL LETTER H */\n+MAP(0x00, 0x69, 0x0069)  /* LATIN SMALL LETTER I */\n+MAP(0x00, 0x6A, 0x006A)  /* LATIN SMALL LETTER J */\n+MAP(0x00, 0x6B, 0x006B)  /* LATIN SMALL LETTER K */\n+MAP(0x00, 0x6C, 0x006C)  /* LATIN SMALL LETTER L */\n+MAP(0x00, 0x6D, 0x006D)  /* LATIN SMALL LETTER M */\n+MAP(0x00, 0x6E, 0x006E)  /* LATIN SMALL LETTER N */\n+MAP(0x00, 0x6F, 0x006F)  /* LATIN SMALL LETTER O */\n+MAP(0x00, 0x70, 0x0070)  /* LATIN SMALL LETTER P */\n+MAP(0x00, 0x71, 0x0071)  /* LATIN SMALL LETTER Q */\n+MAP(0x00, 0x72, 0x0072)  /* LATIN SMALL LETTER R */\n+MAP(0x00, 0x73, 0x0073)  /* LATIN SMALL LETTER S */\n+MAP(0x00, 0x74, 0x0074)  /* LATIN SMALL LETTER T */\n+MAP(0x00, 0x75, 0x0075)  /* LATIN SMALL LETTER U */\n+MAP(0x00, 0x76, 0x0076)  /* LATIN SMALL LETTER V */\n+MAP(0x00, 0x77, 0x0077)  /* LATIN SMALL LETTER W */\n+MAP(0x00, 0x78, 0x0078)  /* LATIN SMALL LETTER X */\n+MAP(0x00, 0x79, 0x0079)  /* LATIN SMALL LETTER Y */\n+MAP(0x00, 0x7A, 0x007A)  /* LATIN SMALL LETTER Z */\n+MAP(0x00, 0x7B, 0x007B)  /* LEFT CURLY BRACKET */\n+MAP(0x00, 0x7C, 0x007C)  /* VERTICAL LINE */\n+MAP(0x00, 0x7D, 0x007D)  /* RIGHT CURLY BRACKET */\n+MAP(0x00, 0x7E, 0x203E)  /* OVERLINE */\n+MAP(0x00, 0xA1, 0xFF61)  /* HALFWIDTH IDEOGRAPHIC FULL STOP */\n+MAP(0x00, 0xA2, 0xFF62)  /* HALFWIDTH LEFT CORNER BRACKET */\n+MAP(0x00, 0xA3, 0xFF63)  /* HALFWIDTH RIGHT CORNER BRACKET */\n+MAP(0x00, 0xA4, 0xFF64)  /* HALFWIDTH IDEOGRAPHIC COMMA */\n+MAP(0x00, 0xA5, 0xFF65)  /* HALFWIDTH KATAKANA MIDDLE DOT */\n+MAP(0x00, 0xA6, 0xFF66)  /* HALFWIDTH KATAKANA LETTER WO */\n+MAP(0x00, 0xA7, 0xFF67)  /* HALFWIDTH KATAKANA LETTER SMALL A */\n+MAP(0x00, 0xA8, 0xFF68)  /* HALFWIDTH KATAKANA LETTER SMALL I */\n+MAP(0x00, 0xA9, 0xFF69)  /* HALFWIDTH KATAKANA LETTER SMALL U */\n+MAP(0x00, 0xAA, 0xFF6A)  /* HALFWIDTH KATAKANA LETTER SMALL E */\n+MAP(0x00, 0xAB, 0xFF6B)  /* HALFWIDTH KATAKANA LETTER SMALL O */\n+MAP(0x00, 0xAC, 0xFF6C)  /* HALFWIDTH KATAKANA LETTER SMALL YA */\n+MAP(0x00, 0xAD, 0xFF6D)  /* HALFWIDTH KATAKANA LETTER SMALL YU */\n+MAP(0x00, 0xAE, 0xFF6E)  /* HALFWIDTH KATAKANA LETTER SMALL YO */\n+MAP(0x00, 0xAF, 0xFF6F)  /* HALFWIDTH KATAKANA LETTER SMALL TU */\n+MAP(0x00, 0xB0, 0xFF70)  /* HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK */\n+MAP(0x00, 0xB1, 0xFF71)  /* HALFWIDTH KATAKANA LETTER A */\n+MAP(0x00, 0xB2, 0xFF72)  /* HALFWIDTH KATAKANA LETTER I */\n+MAP(0x00, 0xB3, 0xFF73)  /* HALFWIDTH KATAKANA LETTER U */\n+MAP(0x00, 0xB4, 0xFF74)  /* HALFWIDTH KATAKANA LETTER E */\n+MAP(0x00, 0xB5, 0xFF75)  /* HALFWIDTH KATAKANA LETTER O */\n+MAP(0x00, 0xB6, 0xFF76)  /* HALFWIDTH KATAKANA LETTER KA */\n+MAP(0x00, 0xB7, 0xFF77)  /* HALFWIDTH KATAKANA LETTER KI */\n+MAP(0x00, 0xB8, 0xFF78)  /* HALFWIDTH KATAKANA LETTER KU */\n+MAP(0x00, 0xB9, 0xFF79)  /* HALFWIDTH KATAKANA LETTER KE */\n+MAP(0x00, 0xBA, 0xFF7A)  /* HALFWIDTH KATAKANA LETTER KO */\n+MAP(0x00, 0xBB, 0xFF7B)  /* HALFWIDTH KATAKANA LETTER SA */\n+MAP(0x00, 0xBC, 0xFF7C)  /* HALFWIDTH KATAKANA LETTER SI */\n+MAP(0x00, 0xBD, 0xFF7D)  /* HALFWIDTH KATAKANA LETTER SU */\n+MAP(0x00, 0xBE, 0xFF7E)  /* HALFWIDTH KATAKANA LETTER SE */\n+MAP(0x00, 0xBF, 0xFF7F)  /* HALFWIDTH KATAKANA LETTER SO */\n+MAP(0x00, 0xC0, 0xFF80)  /* HALFWIDTH KATAKANA LETTER TA */\n+MAP(0x00, 0xC1, 0xFF81)  /* HALFWIDTH KATAKANA LETTER TI */\n+MAP(0x00, 0xC2, 0xFF82)  /* HALFWIDTH KATAKANA LETTER TU */\n+MAP(0x00, 0xC3, 0xFF83)  /* HALFWIDTH KATAKANA LETTER TE */\n+MAP(0x00, 0xC4, 0xFF84)  /* HALFWIDTH KATAKANA LETTER TO */\n+MAP(0x00, 0xC5, 0xFF85)  /* HALFWIDTH KATAKANA LETTER NA */\n+MAP(0x00, 0xC6, 0xFF86)  /* HALFWIDTH KATAKANA LETTER NI */\n+MAP(0x00, 0xC7, 0xFF87)  /* HALFWIDTH KATAKANA LETTER NU */\n+MAP(0x00, 0xC8, 0xFF88)  /* HALFWIDTH KATAKANA LETTER NE */\n+MAP(0x00, 0xC9, 0xFF89)  /* HALFWIDTH KATAKANA LETTER NO */\n+MAP(0x00, 0xCA, 0xFF8A)  /* HALFWIDTH KATAKANA LETTER HA */\n+MAP(0x00, 0xCB, 0xFF8B)  /* HALFWIDTH KATAKANA LETTER HI */\n+MAP(0x00, 0xCC, 0xFF8C)  /* HALFWIDTH KATAKANA LETTER HU */\n+MAP(0x00, 0xCD, 0xFF8D)  /* HALFWIDTH KATAKANA LETTER HE */\n+MAP(0x00, 0xCE, 0xFF8E)  /* HALFWIDTH KATAKANA LETTER HO */\n+MAP(0x00, 0xCF, 0xFF8F)  /* HALFWIDTH KATAKANA LETTER MA */\n+MAP(0x00, 0xD0, 0xFF90)  /* HALFWIDTH KATAKANA LETTER MI */\n+MAP(0x00, 0xD1, 0xFF91)  /* HALFWIDTH KATAKANA LETTER MU */\n+MAP(0x00, 0xD2, 0xFF92)  /* HALFWIDTH KATAKANA LETTER ME */\n+MAP(0x00, 0xD3, 0xFF93)  /* HALFWIDTH KATAKANA LETTER MO */\n+MAP(0x00, 0xD4, 0xFF94)  /* HALFWIDTH KATAKANA LETTER YA */\n+MAP(0x00, 0xD5, 0xFF95)  /* HALFWIDTH KATAKANA LETTER YU */\n+MAP(0x00, 0xD6, 0xFF96)  /* HALFWIDTH KATAKANA LETTER YO */\n+MAP(0x00, 0xD7, 0xFF97)  /* HALFWIDTH KATAKANA LETTER RA */\n+MAP(0x00, 0xD8, 0xFF98)  /* HALFWIDTH KATAKANA LETTER RI */\n+MAP(0x00, 0xD9, 0xFF99)  /* HALFWIDTH KATAKANA LETTER RU */\n+MAP(0x00, 0xDA, 0xFF9A)  /* HALFWIDTH KATAKANA LETTER RE */\n+MAP(0x00, 0xDB, 0xFF9B)  /* HALFWIDTH KATAKANA LETTER RO */\n+MAP(0x00, 0xDC, 0xFF9C)  /* HALFWIDTH KATAKANA LETTER WA */\n+MAP(0x00, 0xDD, 0xFF9D)  /* HALFWIDTH KATAKANA LETTER N */\n+MAP(0x00, 0xDE, 0xFF9E)  /* HALFWIDTH KATAKANA VOICED SOUND MARK */\n+MAP(0x00, 0xDF, 0xFF9F)  /* HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK */"}, {"sha": "4df25bc5444619eb314ed0a5624e7afa333b7eea", "filename": "libjava/gnu/gcj/convert/gen-from-JIS.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2Fgen-from-JIS.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2Fgen-from-JIS.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2Fgen-from-JIS.c?ref=7b824de381af8ec76c78819f0858e935b6bb44b8", "patch": "@@ -16,6 +16,11 @@ struct chval\n \n #define MAP(B1, B2, C) { B1, B2, C },\n \n+struct chval chtab_0201[] = {\n+#include \"JIS0201.h\"\n+  { 255, 255, 0}\n+};\n+\n struct chval chtab_0208[] = {\n #include \"JIS0208.h\"\n   { 255, 255, 0}\n@@ -50,9 +55,9 @@ int\n main(int argc, char** argv)\n {\n   FILE *out = stdout;\n-  unsigned min1 = 256, max1 = 0, min2 = 256, max2 = 0, count = 0;\n-  unsigned short low1_uc = 0xFFFF, high1_uc = 0;\n-  unsigned short low2_uc = 0xFFFF, high2_uc = 0;\n+  int min1 = 256, max1 = 0, min2 = 256, max2 = 0, count = 0;\n+  int low1_uc = 0xFFFF, high1_uc = 0;\n+  int low2_uc = 0xFFFF, high2_uc = 0;\n   int i;  int row, col;\n   if (strcmp (argv[1], \"JIS0208\") == 0)\n     chtab = chtab_0208;\n@@ -61,14 +66,26 @@ main(int argc, char** argv)\n   else if (strcmp (argv[1], \"toJIS\") == 0)\n     {\n       int i;\n-      int count = sizeof(sorted)/sizeof(struct chval);\n-      qsort (sorted, count, sizeof(struct chval),\n-\t     compare);\n-      for (i = 0;  i < count;  i++)\n+      for (i = 0;  chtab_0201[i].b1 != 255;  i++)\n+\t{\n+\t  enter(chtab_0201[i].uc, chtab_0201[i].b2);\n+\t}\n+      for (i = 0;  i < 0x20;  i++)\n+\t{\n+\t  enter (i, i);\n+\t}\n+      enter (127, 127);\n+      for (i = 0;  chtab_0208[i].b1 != 255;  i++)\n+\t{\n+\t  enter(chtab_0208[i].uc,\n+\t\t(chtab_0208[i].b1 << 8) | chtab_0208[i].b2);\n+\t}\n+      for (i = 0;  chtab_0212[i].b1 != 255;  i++)\n \t{\n-\t  fprintf (out, \"  0x%04x -> 0x%02x, 0x%02x\\n\",\n-\t\t   sorted[i].uc, sorted[i].b1, sorted[i].b2);\n+\t  enter(chtab_0212[i].uc,\n+\t\t0x8000 | (chtab_0212[i].b1 << 8) | chtab_0212[i].b2);\n \t}\n+      print_table (\"Unicode_to_JIS\", stdout);\n       exit(0);\n     }\n   else\n@@ -111,7 +128,7 @@ main(int argc, char** argv)\n \t    {\n \t      if (row == chtab[i].b1 && col == chtab[i].b2)\n \t\t{\n-\t\t  unsigned uc = chtab[i].uc;\n+\t\t  int uc = chtab[i].uc;\n \t\t  if (uc < 0x2000)\n \t\t    {\n \t\t      if (uc > high1_uc)"}, {"sha": "4c62818464d736bb542ca0a6cd97254d9b59d490", "filename": "libjava/gnu/gcj/convert/natInput_EUCJIS.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_EUCJIS.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_EUCJIS.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_EUCJIS.cc?ref=7b824de381af8ec76c78819f0858e935b6bb44b8", "patch": "@@ -31,7 +31,7 @@ gnu::gcj::convert::Input_EUCJIS::read(jcharArray outbuffer, jint outpos,\n \t{\n \t  if (b < 128)\n \t    {\n-#if 0\n+#if 1\n \t      // Technically, we should translate 0x5c to Yen symbol;\n \t      // in practice, it is not clear.\n \t      if (b == 0x5c)"}, {"sha": "585e56b25c5a56be2799365def05fb1265a181d5", "filename": "libjava/gnu/gcj/convert/natOutput_EUCJIS.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatOutput_EUCJIS.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b824de381af8ec76c78819f0858e935b6bb44b8/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatOutput_EUCJIS.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatOutput_EUCJIS.cc?ref=7b824de381af8ec76c78819f0858e935b6bb44b8", "patch": "@@ -0,0 +1,102 @@\n+/* Copyright (C) 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <cni.h>\n+#include <gnu/gcj/convert/Output_EUCJIS.h>\n+\n+/* A trie structure to map unicode values to JIS codes.\n+ * code == -1: the character is undefined.\n+ * code >= 0 && code < 128:  JIS-Roman - mostly Ascii.\n+ * code >= 128 && code < 256:  Half-width Katakana.\n+ * code >= 256 && code < 0x8000:  JIS X 0208:1997.\n+ * code >= 0x8000 && code < 0xFFFF:  JIX X 0212-1990.\n+ */\n+\n+extern unsigned short Unicode_to_JIS[];\n+\n+int\n+trie_lookup (unsigned short *trie, unsigned short key)\n+{\n+  unsigned short branch = trie[(key >> 12) & 0xf];\n+  if (branch == 0)\n+    return -1;\n+  branch = trie[branch + ((key >> 8) & 0xf)];\n+  if (branch == 0)\n+    return -1;\n+  branch = trie[branch + ((key >> 4) & 0xf)];\n+  if (branch == 0)\n+    return -1;\n+  return trie[branch + (key & 0xf)];\n+}\n+\n+static jint\n+convert_TO_EUCJIS (gnu::gcj::convert::Output_EUCJIS *encoder,\n+\t\t\t  jchar *ptr, jint inlength)\n+{\n+  int orig_inlength = inlength;\n+  jint outbuf_length = encoder->buf->length;\n+  for (;;)\n+    {\n+      if (encoder->count >= outbuf_length)\n+\tbreak;\n+      if (encoder->pending1 >= 0)\n+\t{\n+\t  elements(encoder->buf)[encoder->count++] = encoder->pending1;\n+\t  encoder->pending1 = encoder->pending2;\n+\t  encoder->pending2 = -1;\n+\t  continue;\n+\t}\n+      if (inlength == 0)\n+\tbreak;\n+      jchar ch = *ptr++;\n+      inlength--;\n+      unsigned short val = trie_lookup(Unicode_to_JIS, ch);\n+      if (val < 0x80)\n+\t{\n+\t  if (val == 0xffff)\n+\t    val = '?';\n+\t}\n+      else if (val <= 0xFF)\n+\t{\n+\t  encoder->pending1 = val;\n+\t  encoder->pending2 = -1;\n+\t  val = 0x8e;\n+\t}\n+      else if (val < 0x8000)\n+\t{\n+\t  val |= 0x8080;\n+\t  encoder->pending1 = val & 0xff;\n+\t  val = val >> 8;\n+\t  encoder->pending2 = -1;\n+\t}\n+      else\n+\t{\n+\t  val |= 0x8080;\n+\t  encoder->pending1 = val >> 8;\n+\t  encoder->pending2 = val & 0xff;\n+\t  val = 0x8f;\n+\t}\n+      elements(encoder->buf)[encoder->count++] = val;\n+    }\n+  return orig_inlength - inlength;\n+}\n+\n+jint\n+gnu::gcj::convert::Output_EUCJIS::write (jcharArray inbuffer,\n+\t\t\t\t\t jint inpos, jint inlength)\n+{\n+  return convert_TO_EUCJIS(this, &elements(inbuffer)[inpos], inlength);\n+}\n+\n+jint\n+gnu::gcj::convert::Output_EUCJIS::write (jstring str, jint inpos,\n+\t\t\t\t\t jint inlength, jcharArray)\n+{\n+  return convert_TO_EUCJIS(this, _Jv_GetStringChars(str)+inpos, inlength);\n+}"}]}