{"sha": "79c9824ecb18f39f16051032db4be0b9bcf87cf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljOTgyNGVjYjE4ZjM5ZjE2MDUxMDMyZGI0YmUwYjliY2Y4N2NmMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-17T20:26:29Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-17T20:26:29Z"}, "message": "Warning fixes:\n\n        * Makefile.in (flow.o): Depend on recog.h.\n        * cpplib.h (directive_table): Add missing initializiers.\n        (finclude): Change type of variable `bsize' to size_t.\n        * cse.c (rtx_cost): Mark parameter `outer_code' with ATTRIBUTE_UNUSED.\n        * dwarfout.h (dwarfout_label): Wrap prototype in macro RTX_CODE.\n        * fix-header.c (lookup_std_proto): Cast the result of `strlen' to\n        `int' when comparing against one.\n        (cpp_file_line_for_message): Mark parameter `pfile' with\n        ATTRIBUTE_UNUSED.\n        (cpp_fatal): Mark parameter `pfile' with ATTRIBUTE_UNUSED.\n        * flow.c: Include recog.h.\n        (sbitmap_copy): Cast arguments 1 & 2 of `bcopy' to (PTR).\n        * function.c (thread_prologue_and_epilogue_insns): Mark parameter\n        `f' with ATTRIBUTE_UNUSED.\n        (reposition_prologue_and_epilogue_notes): Likewise.\n        * genopinit.c (gen_insn): Cast argument of ctype functions to\n        `unsigned char'.\n        * haifa-sched.c: Include recog.h.\n        (blockage_range): Cast result of UNIT_BLOCKED macro to (int) when\n        comparing against one.\n        * libgcc2.a (__throw): Revert ATTRIBUTE_UNUSED change for now.\n        * mips-tfile.c (parse_end): Cast the argument of ctype function to\n        `unsigned char'.\n        (parse_ent): Likewise.\n        (parse_input): Likewise.\n        * optabs.c (init_libfuncs): Likewise.\n        * protoize.c (find_rightmost_formals_list): Likewise.\n        * recog.h (const_double_operand): Fix typo in prototype.\n        * tlink.c (scan_linker_output): Cast the argument of ctype\n        function to `unsigned char'.\n        * toplev.c (check_lang_option): Cast the result of `strlen' to\n        `int' when comparing against one.\n\nFrom-SVN: r23155", "tree": {"sha": "15838ddf2fc3b9a91598b7edfce12e6d16b40cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15838ddf2fc3b9a91598b7edfce12e6d16b40cd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79c9824ecb18f39f16051032db4be0b9bcf87cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c9824ecb18f39f16051032db4be0b9bcf87cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c9824ecb18f39f16051032db4be0b9bcf87cf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c9824ecb18f39f16051032db4be0b9bcf87cf1/comments", "author": null, "committer": null, "parents": [{"sha": "eb51666662345e5c95a7d3f474c76ea80666df23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb51666662345e5c95a7d3f474c76ea80666df23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb51666662345e5c95a7d3f474c76ea80666df23"}], "stats": {"total": 122, "additions": 88, "deletions": 34}, "files": [{"sha": "62a23cf21b399e7ada86b503ec012f171b051f57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -1,3 +1,53 @@\n+Sat Oct 17 23:18:08 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (flow.o): Depend on recog.h.\n+\n+\t* cpplib.h (directive_table): Add missing initializiers.\n+\t(finclude): Change type of variable `bsize' to size_t.\n+\t\n+\t* cse.c (rtx_cost): Mark parameter `outer_code' with ATTRIBUTE_UNUSED.\n+\n+\t* dwarfout.h (dwarfout_label): Wrap prototype in macro RTX_CODE.\n+\n+\t* fix-header.c (lookup_std_proto): Cast the result of `strlen' to\n+\t`int' when comparing against one.\n+\t(cpp_file_line_for_message): Mark parameter `pfile' with\n+\tATTRIBUTE_UNUSED.\n+\t(cpp_fatal): Mark parameter `pfile' with ATTRIBUTE_UNUSED.\n+\n+\t* flow.c: Include recog.h.\n+\t(sbitmap_copy): Cast arguments 1 & 2 of `bcopy' to (PTR).\n+\n+\t* function.c (thread_prologue_and_epilogue_insns): Mark parameter\n+\t`f' with ATTRIBUTE_UNUSED.\n+\t(reposition_prologue_and_epilogue_notes): Likewise.\n+\n+\t* genopinit.c (gen_insn): Cast argument of ctype functions to\n+\t`unsigned char'.\n+\n+\t* haifa-sched.c: Include recog.h.\n+\t(blockage_range): Cast result of UNIT_BLOCKED macro to (int) when\n+\tcomparing against one.\n+\n+\t* libgcc2.a (__throw): Revert ATTRIBUTE_UNUSED change for now.\n+\n+\t* mips-tfile.c (parse_end): Cast the argument of ctype function to\n+\t`unsigned char'.\n+\t(parse_ent): Likewise.\n+\t(parse_input): Likewise.\n+\n+\t* optabs.c (init_libfuncs): Likewise.\n+\n+\t* protoize.c (find_rightmost_formals_list): Likewise.\n+\n+\t* recog.h (const_double_operand): Fix typo in prototype.\n+\n+\t* tlink.c (scan_linker_output): Cast the argument of ctype\n+\tfunction to `unsigned char'.\n+\n+\t* toplev.c (check_lang_option): Cast the result of `strlen' to\n+\t`int' when comparing against one.\n+\n Sat Oct 17 13:09:09 1998  Graham  <grahams@rcp.co.uk>\n \n \t* gcse.c (dump_cuid_table): Correct typo."}, {"sha": "6ceb132889902b4d859175b87651c20c7be2c29c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -1477,7 +1477,7 @@ loop.o : loop.c $(CONFIG_H) system.h $(RTL_H) flags.h loop.h insn-config.h \\\n unroll.o : unroll.c $(CONFIG_H) system.h $(RTL_H) insn-config.h \\\n    integrate.h $(REGS_H) $(RECOG_H) flags.h $(EXPR_H) loop.h toplev.h\n flow.o : flow.c $(CONFIG_H) system.h $(RTL_H) flags.h insn-config.h \\\n-   $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h\n+   $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h recog.h\n combine.o : combine.c $(CONFIG_H) system.h $(RTL_H) flags.h  \\\n    insn-config.h insn-flags.h insn-codes.h insn-attr.h $(REGS_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h toplev.h"}, {"sha": "b45e014351d73f61e2cc29f18167d1ad41a0725f", "filename": "gcc/cpplib.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -377,7 +377,7 @@ static int do_warning PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHA\n    The initialize_builtins function assumes #define is the very first.  */\n \n static struct directive directive_table[] = {\n-  {  6, do_define, \"define\", T_DEFINE},\n+  {  6, do_define, \"define\", T_DEFINE, 0},\n   {  5, do_xifdef, \"ifdef\", T_IFDEF, 1},\n   {  6, do_xifdef, \"ifndef\", T_IFNDEF, 1},\n   {  7, do_include, \"include\", T_INCLUDE, 1},\n@@ -387,18 +387,18 @@ static struct directive directive_table[] = {\n   {  4, do_else, \"else\", T_ELSE, 1},\n   {  2, do_if, \"if\", T_IF, 1},\n   {  4, do_elif, \"elif\", T_ELIF, 1},\n-  {  5, do_undef, \"undef\", T_UNDEF},\n-  {  5, do_error, \"error\", T_ERROR},\n-  {  7, do_warning, \"warning\", T_WARNING},\n-  {  6, do_pragma, \"pragma\", T_PRAGMA},\n+  {  5, do_undef, \"undef\", T_UNDEF, 0},\n+  {  5, do_error, \"error\", T_ERROR, 0},\n+  {  7, do_warning, \"warning\", T_WARNING, 0},\n+  {  6, do_pragma, \"pragma\", T_PRAGMA, 0},\n   {  4, do_line, \"line\", T_LINE, 1},\n   {  5, do_ident, \"ident\", T_IDENT, 1},\n #ifdef SCCS_DIRECTIVE\n-  {  4, do_sccs, \"sccs\", T_SCCS},\n+  {  4, do_sccs, \"sccs\", T_SCCS, 0},\n #endif\n   {  6, do_assert, \"assert\", T_ASSERT, 1},\n   {  8, do_unassert, \"unassert\", T_UNASSERT, 1},\n-  {  -1, 0, \"\", T_UNUSED},\n+  {  -1, 0, \"\", T_UNUSED, 0},\n };\n \f\n /* table to tell if char can be part of a C identifier.  */\n@@ -5642,7 +5642,7 @@ finclude (pfile, f, fname, system_header_p, dirptr)\n        First read the entire file into heap and\n        copy them into buffer on stack.  */\n \n-    int bsize = 2000;\n+    size_t bsize = 2000;\n \n     st_size = 0;\n     fp->buf = (U_CHAR *) xmalloc (bsize + 2);"}, {"sha": "8fb473af57e44e5ebc88a7f4bdadb48076dae7fd", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -702,7 +702,7 @@ notreg_cost (x)\n int\n rtx_cost (x, outer_code)\n      rtx x;\n-     enum rtx_code outer_code;\n+     enum rtx_code outer_code ATTRIBUTE_UNUSED;\n {\n   register int i, j;\n   register enum rtx_code code;"}, {"sha": "29c8dd39d5f05b942a1909926975ed1a25acbd95", "filename": "gcc/dwarfout.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fdwarfout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fdwarfout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.h?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -35,6 +35,8 @@ extern void dwarfout_end_epilogue\tPROTO ((void));\n extern void dwarfout_begin_block\tPROTO ((unsigned));\n extern void dwarfout_end_block\t\tPROTO ((unsigned));\n \n+#ifdef RTX_CODE\n extern void dwarfout_label\t\tPROTO ((rtx));\n+#endif\n extern void dwarfout_line\t\tPROTO ((char *, unsigned));\n "}, {"sha": "e1a9956a18cb5b1811117e1ba15471b4f9a5c488", "filename": "gcc/fix-header.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -397,7 +397,7 @@ lookup_std_proto (name, name_length)\n       if (hash_tab[i] == 0)\n \treturn NULL;\n       fn = &std_protos[hash_tab[i]];\n-      if (strlen (fn->fname) == name_length\n+      if ((int) strlen (fn->fname) == name_length\n \t  && strncmp (fn->fname, name, name_length) == 0)\n \treturn fn;\n       i = (i+1) % HASH_SIZE;\n@@ -1326,7 +1326,7 @@ main (argc, argv)\n \n void\n cpp_file_line_for_message (pfile, filename, line, column)\n-     cpp_reader * pfile;\n+     cpp_reader * pfile ATTRIBUTE_UNUSED;\n      char *filename;\n      int line, column;\n {\n@@ -1418,7 +1418,7 @@ fatal VPROTO ((const char *str, ...))\n }\n \n void\n-cpp_fatal VPROTO ((cpp_reader * pfile, const char *str, ...))\n+cpp_fatal VPROTO ((cpp_reader * pfile ATTRIBUTE_UNUSED, const char *str, ...))\n {\n #ifndef __STDC__\n   cpp_reader * pfile;"}, {"sha": "8bc8a110ba0c72d217ffe1b850deeb2fdd3858ab", "filename": "gcc/flow.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -122,6 +122,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"except.h\"\n #include \"toplev.h\"\n+#include \"recog.h\"\n \n #include \"obstack.h\"\n #define obstack_chunk_alloc xmalloc\n@@ -3687,7 +3688,7 @@ void\n sbitmap_copy (dst, src)\n      sbitmap dst, src;\n {\n-  bcopy (src->elms, dst->elms, sizeof (SBITMAP_ELT_TYPE) * dst->size);\n+  bcopy ((PTR) src->elms, (PTR) dst->elms, sizeof (SBITMAP_ELT_TYPE) * dst->size);\n }\n \n /* Zero all elements in a bitmap.  */"}, {"sha": "e594e7000f58d7b87688383de6a405786821f4e0", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -6183,7 +6183,7 @@ contains (insn, vec)\n \n void\n thread_prologue_and_epilogue_insns (f)\n-     rtx f;\n+     rtx f ATTRIBUTE_UNUSED;\n {\n #ifdef HAVE_prologue\n   if (HAVE_prologue)\n@@ -6284,7 +6284,7 @@ thread_prologue_and_epilogue_insns (f)\n \n void\n reposition_prologue_and_epilogue_notes (f)\n-     rtx f;\n+     rtx f ATTRIBUTE_UNUSED;\n {\n #if defined (HAVE_prologue) || defined (HAVE_epilogue)\n   /* Reposition the prologue and epilogue notes.  */"}, {"sha": "066a05507081a14c137759895cb3f770358ea38b", "filename": "gcc/genopinit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -202,7 +202,7 @@ gen_insn (insn)\n \t\tfor (i = ((int) MAX_MACHINE_MODE) - 1; i >= 0; i--)\n \t\t  {\n \t\t    for (p = mode_name[i], q = np; *p; p++, q++)\n-\t\t      if (tolower (*p) != *q)\n+\t\t      if (tolower ((unsigned char)*p) != *q)\n \t\t\tbreak;\n \n \t\t    if (*p == 0\n@@ -256,11 +256,11 @@ gen_insn (insn)\n \t    break;\n \t  case 'a':\n \t    for (np = mode_name[m1]; *np; np++)\n-\t      printf (\"%c\", tolower (*np));\n+\t      printf (\"%c\", tolower ((unsigned char)*np));\n \t    break;\n \t  case 'b':\n \t    for (np = mode_name[m2]; *np; np++)\n-\t      printf (\"%c\", tolower (*np));\n+\t      printf (\"%c\", tolower ((unsigned char)*np));\n \t    break;\n \t  case 'A':\n \t    printf (\"%smode\", mode_name[m1]);\n@@ -273,7 +273,7 @@ gen_insn (insn)\n \t    break;\n \t  case 'C':\n \t    for (np = rtx_name[op]; *np; np++)\n-\t      printf (\"%c\", toupper (*np));\n+\t      printf (\"%c\", toupper ((unsigned char)*np));\n \t    break;\n \t  }\n     }"}, {"sha": "806bb396d8864142f219249a4aea64e9e47a9c6b", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -166,6 +166,7 @@\n #include \"insn-attr.h\"\n #include \"except.h\"\n #include \"toplev.h\"\n+#include \"recog.h\"\n \n extern char *reg_known_equiv_p;\n extern rtx *reg_known_value;\n@@ -2858,7 +2859,7 @@ blockage_range (unit, insn)\n   unsigned int blockage = INSN_BLOCKAGE (insn);\n   unsigned int range;\n \n-  if (UNIT_BLOCKED (blockage) != unit + 1)\n+  if ((int) UNIT_BLOCKED (blockage) != unit + 1)\n     {\n       range = function_units[unit].blockage_range_function (insn);\n       /* We only cache the blockage range for one unit and then only if"}, {"sha": "d519f238ddaa002e6129becdefd56955a1185445", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -3637,7 +3637,7 @@ next_stack_level (void *pc, frame_state *udata, frame_state *caller_udata)\n    If we find one, then we unwind the frames down to the one that\n    has the handler and transfer control into the handler.  */\n \n-extern void __throw(void) __attribute__ ((__noreturn__));\n+/*extern void __throw(void) __attribute__ ((__noreturn__));*/\n \n void\n __throw ()"}, {"sha": "c1407703077f418c3266016f75bf7ac7928291eb", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -3472,7 +3472,7 @@ parse_end (start)\n     }\n \n   /* Get the function name, skipping whitespace.  */\n-  for (start_func = start; ISSPACE (*start_func); start_func++)\n+  for (start_func = start; ISSPACE ((unsigned char)*start_func); start_func++)\n     ;\n \n   ch = *start_func;\n@@ -3531,7 +3531,7 @@ parse_ent (start)\n       return;\n     }\n \n-  for (start_func = start; ISSPACE (*start_func); start_func++)\n+  for (start_func = start; ISSPACE ((unsigned char)*start_func); start_func++)\n     ;\n \n   ch = *start_func;\n@@ -3871,16 +3871,16 @@ parse_input __proto((void))\n   while ((p = read_line ()) != (char *) 0)\n     {\n       /* Skip leading blanks */\n-      while (ISSPACE (*p))\n+      while (ISSPACE ((unsigned char)*p))\n \tp++;\n \n       /* See if it's a directive we handle.  If so, dispatch handler.  */\n       for (i = 0; i < sizeof (pseudo_ops) / sizeof (pseudo_ops[0]); i++)\n \tif (memcmp (p, pseudo_ops[i].name, pseudo_ops[i].len) == 0\n-\t    && ISSPACE (p[pseudo_ops[i].len]))\n+\t    && ISSPACE ((unsigned char)(p[pseudo_ops[i].len])))\n \t  {\n \t    p += pseudo_ops[i].len;\t/* skip to first argument */\n-\t    while (ISSPACE (*p))\n+\t    while (ISSPACE ((unsigned char)*p))\n \t      p++;\n \n \t    (*pseudo_ops[i].func)( p );"}, {"sha": "801b8535dd128ba139666938697e91fa2b1a9a7f", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -4034,7 +4034,7 @@ init_libfuncs (optable, first_mode, last_mode, opname, suffix)\n       for (q = opname; *q; )\n \t*p++ = *q++;\n       for (q = mname; *q; q++)\n-\t*p++ = tolower (*q);\n+\t*p++ = tolower ((unsigned char)*q);\n       *p++ = suffix;\n       *p++ = '\\0';\n       optable->handlers[(int) mode].libfunc"}, {"sha": "18187a6c9cd4788686402e82ab75169365c3f432", "filename": "gcc/protoize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -3447,8 +3447,8 @@ find_rightmost_formals_list (clean_text_p)\n \n     while (*end_formals != ')')\n       {\n-\tif (ISSPACE (*end_formals))\n-\t  while (ISSPACE (*end_formals))\n+\tif (ISSPACE ((unsigned char)*end_formals))\n+\t  while (ISSPACE ((unsigned char)*end_formals))\n \t    check_source (--end_formals > clean_read_ptr, 0);\n \telse\n \t  check_source (--end_formals > clean_read_ptr, 0);"}, {"sha": "1bf77b4d0fcce9496489338bded96fb7ef8455c7", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -44,7 +44,7 @@ extern int register_operand\t\tPROTO((rtx, enum machine_mode));\n extern int scratch_operand\t\tPROTO((rtx, enum machine_mode));\n extern int immediate_operand\t\tPROTO((rtx, enum machine_mode));\n extern int const_int_operand\t\tPROTO((rtx, enum machine_mode));\n-extern int cosnt_double_operand\t\tPROTO((rtx, enum machine_mode));\n+extern int const_double_operand\t\tPROTO((rtx, enum machine_mode));\n extern int nonimmediate_operand\t\tPROTO((rtx, enum machine_mode));\n extern int nonmemory_operand\t\tPROTO((rtx, enum machine_mode));\n extern int push_operand\t\t\tPROTO((rtx, enum machine_mode));"}, {"sha": "0ec3f9a10644e908a8aac169a3125c6a05cd6fc0", "filename": "gcc/tlink.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -530,13 +530,13 @@ scan_linker_output (fname)\n       symbol *sym;\n       int end;\n       \n-      while (*p && ISSPACE (*p))\n+      while (*p && ISSPACE ((unsigned char)*p))\n \t++p;\n \n       if (! *p)\n \tcontinue;\n \n-      for (q = p; *q && ! ISSPACE (*q); ++q)\n+      for (q = p; *q && ! ISSPACE ((unsigned char)*q); ++q)\n \t;\n \n       /* Try the first word on the line.  */"}, {"sha": "8ad8eebc073df4af3aee1d236e9963f4df397bab", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c9824ecb18f39f16051032db4be0b9bcf87cf1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=79c9824ecb18f39f16051032db4be0b9bcf87cf1", "patch": "@@ -4179,7 +4179,7 @@ check_lang_option (option, lang_option)\n      -fpack-struct.  */\n   \n   /* An exact match is OK  */\n-  if (strlen (option) == len)\n+  if ((int) strlen (option) == len)\n     return 1;\n   \n   /* If it is not an -f or -W option allow the match */"}]}