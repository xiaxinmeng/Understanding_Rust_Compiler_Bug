{"sha": "f32550199459a387e1ece1b385460cb0603cb6d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyNTUwMTk5NDU5YTM4N2UxZWNlMWIzODU0NjBjYjA2MDNjYjZkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-15T15:57:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-15T15:57:12Z"}, "message": "typeck2.c (cxx_incomplete_type_diagnostic): Use the location of value.\n\n\t* typeck2.c (cxx_incomplete_type_diagnostic): Use the location of\n\tvalue.\n\nFrom-SVN: r232437", "tree": {"sha": "155687cdd77213235ef4dd575615f189e8af9429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/155687cdd77213235ef4dd575615f189e8af9429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f32550199459a387e1ece1b385460cb0603cb6d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32550199459a387e1ece1b385460cb0603cb6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32550199459a387e1ece1b385460cb0603cb6d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32550199459a387e1ece1b385460cb0603cb6d5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56233bd6c9d476f3966ff8907859b2605b3b113f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56233bd6c9d476f3966ff8907859b2605b3b113f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56233bd6c9d476f3966ff8907859b2605b3b113f"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "fc846dc7e3a64e480bc9073b548d611e9538853c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32550199459a387e1ece1b385460cb0603cb6d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32550199459a387e1ece1b385460cb0603cb6d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f32550199459a387e1ece1b385460cb0603cb6d5", "patch": "@@ -1,5 +1,8 @@\n 2016-01-15  Jason Merrill  <jason@redhat.com>\n \n+\t* typeck2.c (cxx_incomplete_type_diagnostic): Use the location of\n+\tvalue.\n+\n \tPR c++/69257\n \t* typeck.c (decay_conversion): Don't call mark_rvalue_use for\n \tarray/function-to-pointer conversion.  Call"}, {"sha": "ac2f3c366e8d1292da303b0eb87da330c4dcf9fc", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32550199459a387e1ece1b385460cb0603cb6d5/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32550199459a387e1ece1b385460cb0603cb6d5/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=f32550199459a387e1ece1b385460cb0603cb6d5", "patch": "@@ -475,21 +475,23 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type,\n  retry:\n   /* We must print an error message.  Be clever about what it says.  */\n \n+  location_t loc = EXPR_LOC_OR_LOC (value, input_location);\n+\n   switch (TREE_CODE (type))\n     {\n     case RECORD_TYPE:\n     case UNION_TYPE:\n     case ENUMERAL_TYPE:\n       if (!is_decl)\n-\tcomplained = emit_diagnostic (diag_kind, input_location, 0,\n+\tcomplained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t\t      \"invalid use of incomplete type %q#T\",\n \t\t\t\t      type);\n       if (complained)\n \tcxx_incomplete_type_inform (type);\n       break;\n \n     case VOID_TYPE:\n-      emit_diagnostic (diag_kind, input_location, 0,\n+      emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of %qT\", type);\n       break;\n \n@@ -499,7 +501,7 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type,\n \t  type = TREE_TYPE (type);\n \t  goto retry;\n \t}\n-      emit_diagnostic (diag_kind, input_location, 0,\n+      emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of array with unspecified bounds\");\n       break;\n \n@@ -511,55 +513,55 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type,\n \t  member = get_first_fn (member);\n \tif (DECL_FUNCTION_MEMBER_P (member)\n \t    && ! flag_ms_extensions)\n-\t  emit_diagnostic (diag_kind, input_location, 0,\n+\t  emit_diagnostic (diag_kind, loc, 0,\n \t\t\t   \"invalid use of member function %qD \"\n \t\t\t   \"(did you forget the %<()%> ?)\", member);\n \telse\n-\t  emit_diagnostic (diag_kind, input_location, 0,\n+\t  emit_diagnostic (diag_kind, loc, 0,\n \t\t\t   \"invalid use of member %qD \"\n \t\t\t   \"(did you forget the %<&%> ?)\", member);\n       }\n       break;\n \n     case TEMPLATE_TYPE_PARM:\n       if (is_auto (type))\n-\temit_diagnostic (diag_kind, input_location, 0,\n+\temit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"invalid use of %<auto%>\");\n       else\n-\temit_diagnostic (diag_kind, input_location, 0,\n+\temit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"invalid use of template type parameter %qT\", type);\n       break;\n \n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n-      emit_diagnostic (diag_kind, input_location, 0,\n+      emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of template template parameter %qT\",\n \t\t       TYPE_NAME (type));\n       break;\n \n     case TYPENAME_TYPE:\n-      emit_diagnostic (diag_kind, input_location, 0,\n+      emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of dependent type %qT\", type);\n       break;\n \n     case LANG_TYPE:\n       if (type == init_list_type_node)\n \t{\n-\t  emit_diagnostic (diag_kind, input_location, 0,\n+\t  emit_diagnostic (diag_kind, loc, 0,\n \t\t\t   \"invalid use of brace-enclosed initializer list\");\n \t  break;\n \t}\n       gcc_assert (type == unknown_type_node);\n       if (value && TREE_CODE (value) == COMPONENT_REF)\n \tgoto bad_member;\n       else if (value && TREE_CODE (value) == ADDR_EXPR)\n-\temit_diagnostic (diag_kind, input_location, 0,\n+\temit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"address of overloaded function with no contextual \"\n \t\t\t \"type information\");\n       else if (value && TREE_CODE (value) == OVERLOAD)\n-\temit_diagnostic (diag_kind, input_location, 0,\n+\temit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"overloaded function with no contextual type information\");\n       else\n-\temit_diagnostic (diag_kind, input_location, 0,\n+\temit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"insufficient contextual information to determine type\");\n       break;\n "}]}