{"sha": "f391a855826aaa21043f0f492bb2eb4dde130cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5MWE4NTU4MjZhYWEyMTA0M2YwZjQ5MmJiMmViNGRkZTEzMGNmNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-05-22T10:10:47Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-05-22T10:10:47Z"}, "message": "re PR fortran/53389 (-frealloc-lhs: memory leak when assigning array function result to allocatable array, where one of its supplied arguments is itself an array function result)\n\n2012-05-22  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53389\n        * trans-array.c (gfc_add_loop_ss_code): Don't evaluate\n        * expression, if\n        ss->is_alloc_lhs is set.\n\n2012-05-22  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53389\n        * gfortran.dg/realloc_on_assign_15.f90: New.\n\nFrom-SVN: r187769", "tree": {"sha": "8b77b254e5bea16cdf800e07c9c06e2bdfa682f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b77b254e5bea16cdf800e07c9c06e2bdfa682f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f391a855826aaa21043f0f492bb2eb4dde130cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f391a855826aaa21043f0f492bb2eb4dde130cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f391a855826aaa21043f0f492bb2eb4dde130cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f391a855826aaa21043f0f492bb2eb4dde130cf6/comments", "author": null, "committer": null, "parents": [{"sha": "633d9236a135cbeff21d9f51781fa12c88928f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633d9236a135cbeff21d9f51781fa12c88928f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/633d9236a135cbeff21d9f51781fa12c88928f8a"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "38bff786afa8734b25a2be452b57c2f21563e369", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f391a855826aaa21043f0f492bb2eb4dde130cf6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f391a855826aaa21043f0f492bb2eb4dde130cf6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f391a855826aaa21043f0f492bb2eb4dde130cf6", "patch": "@@ -1,8 +1,14 @@\n+2012-05-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53389\n+\t* trans-array.c (gfc_add_loop_ss_code): Don't evaluate expression, if\n+\tss->is_alloc_lhs is set.\n+\n 2012-05-22  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/53322\n \t* f95-lang.c (gfc_init_builtin_functions): Remove the unused\n-    \ttypedef builtin_type.\n+\ttypedef builtin_type.\n \n 2012-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n "}, {"sha": "02bb38d41e43ed71501e167203834aa52be13dca", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f391a855826aaa21043f0f492bb2eb4dde130cf6/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f391a855826aaa21043f0f492bb2eb4dde130cf6/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=f391a855826aaa21043f0f492bb2eb4dde130cf6", "patch": "@@ -2401,6 +2401,11 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript,\n   bool skip_nested = false;\n   int n;\n \n+  /* Don't evaluate the arguments for realloc_lhs_loop_for_fcn_call; otherwise,\n+     arguments could get evaluated multiple times.  */\n+  if (ss->is_alloc_lhs)\n+    return;\n+\n   outer_loop = outermost_loop (loop);\n \n   /* TODO: This can generate bad code if there are ordering dependencies,"}, {"sha": "21f448daa52e9827c8da24e710eafdf9c6390cff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f391a855826aaa21043f0f492bb2eb4dde130cf6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f391a855826aaa21043f0f492bb2eb4dde130cf6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f391a855826aaa21043f0f492bb2eb4dde130cf6", "patch": "@@ -1,3 +1,8 @@\n+2012-05-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53389\n+\t* gfortran.dg/realloc_on_assign_15.f90: New.\n+\n 2012-05-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/51071\n@@ -12,7 +17,7 @@\n \n \tPR c++/53322\n \t* g++.dg/warn/Wunused-local-typedefs.C: Adjust to use -Wunused\n-    \tinstead of -Wunused-local-typedefs.\n+\tinstead of -Wunused-local-typedefs.\n \n 2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "2a0e5be91011da4f6d80ab5ebb342d5c3d083d32", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_15.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f391a855826aaa21043f0f492bb2eb4dde130cf6/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f391a855826aaa21043f0f492bb2eb4dde130cf6/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_15.f90?ref=f391a855826aaa21043f0f492bb2eb4dde130cf6", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+!\n+! PR fortran/53389\n+!\n+! The program was leaking memory before due to\n+! realloc on assignment and nested functions.\n+!\n+module foo\n+  implicit none\n+  contains\n+\n+  function filler(array, val)\n+    real, dimension(:), intent(in):: array\n+    real, dimension(size(array)):: filler\n+    real, intent(in):: val\n+\n+    filler=val\n+\n+  end function filler\n+end module\n+\n+program test\n+  use foo\n+  implicit none\n+\n+  real, dimension(:), allocatable:: x, y\n+  integer, parameter:: N=1000 !*1000\n+  integer:: i\n+\n+!  allocate( x(N) )\n+  allocate( y(N) )\n+  y=0.0\n+\n+  do i=1, N\n+!    print *,i\n+    x=filler(filler(y, real(2*i)), real(i))\n+    y=y+x\n+  end do\n+\n+end program test"}]}