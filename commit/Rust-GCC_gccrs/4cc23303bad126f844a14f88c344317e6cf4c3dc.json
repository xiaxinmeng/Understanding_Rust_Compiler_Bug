{"sha": "4cc23303bad126f844a14f88c344317e6cf4c3dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjMjMzMDNiYWQxMjZmODQ0YTE0Zjg4YzM0NDMxN2U2Y2Y0YzNkYw==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T18:58:48Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T18:58:48Z"}, "message": "[ARM][GCC][6/5x]: Remaining MVE load intrinsics which loads half word and word or double word from memory.\n\nThis patch supports the following Remaining MVE ACLE load intrinsics which load an halfword,\nword or double word from memory.\n\nvldrdq_gather_base_s64, vldrdq_gather_base_u64, vldrdq_gather_base_z_s64,\nvldrdq_gather_base_z_u64, vldrdq_gather_offset_s64, vldrdq_gather_offset_u64,\nvldrdq_gather_offset_z_s64, vldrdq_gather_offset_z_u64, vldrdq_gather_shifted_offset_s64,\nvldrdq_gather_shifted_offset_u64, vldrdq_gather_shifted_offset_z_s64,\nvldrdq_gather_shifted_offset_z_u64, vldrhq_gather_offset_f16, vldrhq_gather_offset_z_f16,\nvldrhq_gather_shifted_offset_f16, vldrhq_gather_shifted_offset_z_f16, vldrwq_gather_base_f32,\nvldrwq_gather_base_z_f32, vldrwq_gather_offset_f32, vldrwq_gather_offset_s32,\nvldrwq_gather_offset_u32, vldrwq_gather_offset_z_f32, vldrwq_gather_offset_z_s32,\nvldrwq_gather_offset_z_u32, vldrwq_gather_shifted_offset_f32, vldrwq_gather_shifted_offset_s32,\nvldrwq_gather_shifted_offset_u32, vldrwq_gather_shifted_offset_z_f32,\nvldrwq_gather_shifted_offset_z_s32, vldrwq_gather_shifted_offset_z_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vld1q_s8): Define macro.\n\t(vld1q_s32): Likewise.\n\t(vld1q_s16): Likewise.\n\t(vld1q_u8): Likewise.\n\t(vld1q_u32): Likewise.\n\t(vld1q_u16): Likewise.\n\t(vldrhq_gather_offset_s32): Likewise.\n\t(vldrhq_gather_offset_s16): Likewise.\n\t(vldrhq_gather_offset_u32): Likewise.\n\t(vldrhq_gather_offset_u16): Likewise.\n\t(vldrhq_gather_offset_z_s32): Likewise.\n\t(vldrhq_gather_offset_z_s16): Likewise.\n\t(vldrhq_gather_offset_z_u32): Likewise.\n\t(vldrhq_gather_offset_z_u16): Likewise.\n\t(vldrhq_gather_shifted_offset_s32): Likewise.\n\t(vldrhq_gather_shifted_offset_s16): Likewise.\n\t(vldrhq_gather_shifted_offset_u32): Likewise.\n\t(vldrhq_gather_shifted_offset_u16): Likewise.\n\t(vldrhq_gather_shifted_offset_z_s32): Likewise.\n\t(vldrhq_gather_shifted_offset_z_s16): Likewise.\n\t(vldrhq_gather_shifted_offset_z_u32): Likewise.\n\t(vldrhq_gather_shifted_offset_z_u16): Likewise.\n\t(vldrhq_s32): Likewise.\n\t(vldrhq_s16): Likewise.\n\t(vldrhq_u32): Likewise.\n\t(vldrhq_u16): Likewise.\n\t(vldrhq_z_s32): Likewise.\n\t(vldrhq_z_s16): Likewise.\n\t(vldrhq_z_u32): Likewise.\n\t(vldrhq_z_u16): Likewise.\n\t(vldrwq_s32): Likewise.\n\t(vldrwq_u32): Likewise.\n\t(vldrwq_z_s32): Likewise.\n\t(vldrwq_z_u32): Likewise.\n\t(vld1q_f32): Likewise.\n\t(vld1q_f16): Likewise.\n\t(vldrhq_f16): Likewise.\n\t(vldrhq_z_f16): Likewise.\n\t(vldrwq_f32): Likewise.\n\t(vldrwq_z_f32): Likewise.\n\t(__arm_vld1q_s8): Define intrinsic.\n\t(__arm_vld1q_s32): Likewise.\n\t(__arm_vld1q_s16): Likewise.\n\t(__arm_vld1q_u8): Likewise.\n\t(__arm_vld1q_u32): Likewise.\n\t(__arm_vld1q_u16): Likewise.\n\t(__arm_vldrhq_gather_offset_s32): Likewise.\n\t(__arm_vldrhq_gather_offset_s16): Likewise.\n\t(__arm_vldrhq_gather_offset_u32): Likewise.\n\t(__arm_vldrhq_gather_offset_u16): Likewise.\n\t(__arm_vldrhq_gather_offset_z_s32): Likewise.\n\t(__arm_vldrhq_gather_offset_z_s16): Likewise.\n\t(__arm_vldrhq_gather_offset_z_u32): Likewise.\n\t(__arm_vldrhq_gather_offset_z_u16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_s32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_s16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_u32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_u16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_s32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_s16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_u32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_u16): Likewise.\n\t(__arm_vldrhq_s32): Likewise.\n\t(__arm_vldrhq_s16): Likewise.\n\t(__arm_vldrhq_u32): Likewise.\n\t(__arm_vldrhq_u16): Likewise.\n\t(__arm_vldrhq_z_s32): Likewise.\n\t(__arm_vldrhq_z_s16): Likewise.\n\t(__arm_vldrhq_z_u32): Likewise.\n\t(__arm_vldrhq_z_u16): Likewise.\n\t(__arm_vldrwq_s32): Likewise.\n\t(__arm_vldrwq_u32): Likewise.\n\t(__arm_vldrwq_z_s32): Likewise.\n\t(__arm_vldrwq_z_u32): Likewise.\n\t(__arm_vld1q_f32): Likewise.\n\t(__arm_vld1q_f16): Likewise.\n\t(__arm_vldrwq_f32): Likewise.\n\t(__arm_vldrwq_z_f32): Likewise.\n\t(__arm_vldrhq_z_f16): Likewise.\n\t(__arm_vldrhq_f16): Likewise.\n\t(vld1q): Define polymorphic variant.\n\t(vldrhq_gather_offset): Likewise.\n\t(vldrhq_gather_offset_z): Likewise.\n\t(vldrhq_gather_shifted_offset): Likewise.\n\t(vldrhq_gather_shifted_offset_z): Likewise.\n\t* config/arm/arm_mve_builtins.def (LDRU): Use builtin qualifier.\n\t(LDRS): Likewise.\n\t(LDRU_Z): Likewise.\n\t(LDRS_Z): Likewise.\n\t(LDRGU_Z): Likewise.\n\t(LDRGU): Likewise.\n\t(LDRGS_Z): Likewise.\n\t(LDRGS): Likewise.\n\t* config/arm/mve.md (MVE_H_ELEM): Define mode iterator.\n\t(V_sz_elem1): Likewise.\n\t(VLD1Q): Define iterator.\n\t(VLDRHGOQ): Likewise.\n\t(VLDRHGSOQ): Likewise.\n\t(VLDRHQ): Likewise.\n\t(VLDRWQ): Likewise.\n\t(mve_vldrhq_fv8hf): Define RTL pattern.\n\t(mve_vldrhq_gather_offset_<supf><mode>): Likewise.\n\t(mve_vldrhq_gather_offset_z_<supf><mode>): Likewise.\n\t(mve_vldrhq_gather_shifted_offset_<supf><mode>): Likewise.\n\t(mve_vldrhq_gather_shifted_offset_z_<supf><mode>): Likewise.\n\t(mve_vldrhq_<supf><mode>): Likewise.\n\t(mve_vldrhq_z_fv8hf): Likewise.\n\t(mve_vldrhq_z_<supf><mode>): Likewise.\n\t(mve_vldrwq_fv4sf): Likewise.\n\t(mve_vldrwq_<supf>v4si): Likewise.\n\t(mve_vldrwq_z_fv4sf): Likewise.\n\t(mve_vldrwq_z_<supf>v4si): Likewise.\n\t(mve_vld1q_f<mode>): Define RTL expand pattern.\n\t(mve_vld1q_<supf><mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vld1q_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vld1q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_u32.c: Likewise.", "tree": {"sha": "f2a0f9d13eb872de3d4f903bde3df2843ea633a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2a0f9d13eb872de3d4f903bde3df2843ea633a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cc23303bad126f844a14f88c344317e6cf4c3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc23303bad126f844a14f88c344317e6cf4c3dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc23303bad126f844a14f88c344317e6cf4c3dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc23303bad126f844a14f88c344317e6cf4c3dc/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6"}], "stats": {"total": 1567, "additions": 1565, "deletions": 2}, "files": [{"sha": "2a29c2dac138e47bbcbcbc1ee6e046eb8aa9e236", "filename": "gcc/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -117,6 +117,125 @@\n \t(mve_vld1q_f<mode>): Define RTL expand pattern.\n \t(mve_vld1q_<supf><mode>): Likewise.\n \n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vld1q_s8): Define macro.\n+\t(vld1q_s32): Likewise.\n+\t(vld1q_s16): Likewise.\n+\t(vld1q_u8): Likewise.\n+\t(vld1q_u32): Likewise.\n+\t(vld1q_u16): Likewise.\n+\t(vldrhq_gather_offset_s32): Likewise.\n+\t(vldrhq_gather_offset_s16): Likewise.\n+\t(vldrhq_gather_offset_u32): Likewise.\n+\t(vldrhq_gather_offset_u16): Likewise.\n+\t(vldrhq_gather_offset_z_s32): Likewise.\n+\t(vldrhq_gather_offset_z_s16): Likewise.\n+\t(vldrhq_gather_offset_z_u32): Likewise.\n+\t(vldrhq_gather_offset_z_u16): Likewise.\n+\t(vldrhq_gather_shifted_offset_s32): Likewise.\n+\t(vldrhq_gather_shifted_offset_s16): Likewise.\n+\t(vldrhq_gather_shifted_offset_u32): Likewise.\n+\t(vldrhq_gather_shifted_offset_u16): Likewise.\n+\t(vldrhq_gather_shifted_offset_z_s32): Likewise.\n+\t(vldrhq_gather_shifted_offset_z_s16): Likewise.\n+\t(vldrhq_gather_shifted_offset_z_u32): Likewise.\n+\t(vldrhq_gather_shifted_offset_z_u16): Likewise.\n+\t(vldrhq_s32): Likewise.\n+\t(vldrhq_s16): Likewise.\n+\t(vldrhq_u32): Likewise.\n+\t(vldrhq_u16): Likewise.\n+\t(vldrhq_z_s32): Likewise.\n+\t(vldrhq_z_s16): Likewise.\n+\t(vldrhq_z_u32): Likewise.\n+\t(vldrhq_z_u16): Likewise.\n+\t(vldrwq_s32): Likewise.\n+\t(vldrwq_u32): Likewise.\n+\t(vldrwq_z_s32): Likewise.\n+\t(vldrwq_z_u32): Likewise.\n+\t(vld1q_f32): Likewise.\n+\t(vld1q_f16): Likewise.\n+\t(vldrhq_f16): Likewise.\n+\t(vldrhq_z_f16): Likewise.\n+\t(vldrwq_f32): Likewise.\n+\t(vldrwq_z_f32): Likewise.\n+\t(__arm_vld1q_s8): Define intrinsic.\n+\t(__arm_vld1q_s32): Likewise.\n+\t(__arm_vld1q_s16): Likewise.\n+\t(__arm_vld1q_u8): Likewise.\n+\t(__arm_vld1q_u32): Likewise.\n+\t(__arm_vld1q_u16): Likewise.\n+\t(__arm_vldrhq_gather_offset_s32): Likewise.\n+\t(__arm_vldrhq_gather_offset_s16): Likewise.\n+\t(__arm_vldrhq_gather_offset_u32): Likewise.\n+\t(__arm_vldrhq_gather_offset_u16): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_s32): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_s16): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_u32): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_u16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_s32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_s16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_u32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_u16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_s32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_s16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_u32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_u16): Likewise.\n+\t(__arm_vldrhq_s32): Likewise.\n+\t(__arm_vldrhq_s16): Likewise.\n+\t(__arm_vldrhq_u32): Likewise.\n+\t(__arm_vldrhq_u16): Likewise.\n+\t(__arm_vldrhq_z_s32): Likewise.\n+\t(__arm_vldrhq_z_s16): Likewise.\n+\t(__arm_vldrhq_z_u32): Likewise.\n+\t(__arm_vldrhq_z_u16): Likewise.\n+\t(__arm_vldrwq_s32): Likewise.\n+\t(__arm_vldrwq_u32): Likewise.\n+\t(__arm_vldrwq_z_s32): Likewise.\n+\t(__arm_vldrwq_z_u32): Likewise.\n+\t(__arm_vld1q_f32): Likewise.\n+\t(__arm_vld1q_f16): Likewise.\n+\t(__arm_vldrwq_f32): Likewise.\n+\t(__arm_vldrwq_z_f32): Likewise.\n+\t(__arm_vldrhq_z_f16): Likewise.\n+\t(__arm_vldrhq_f16): Likewise.\n+\t(vld1q): Define polymorphic variant.\n+\t(vldrhq_gather_offset): Likewise.\n+\t(vldrhq_gather_offset_z): Likewise.\n+\t(vldrhq_gather_shifted_offset): Likewise.\n+\t(vldrhq_gather_shifted_offset_z): Likewise.\n+\t* config/arm/arm_mve_builtins.def (LDRU): Use builtin qualifier.\n+\t(LDRS): Likewise.\n+\t(LDRU_Z): Likewise.\n+\t(LDRS_Z): Likewise.\n+\t(LDRGU_Z): Likewise.\n+\t(LDRGU): Likewise.\n+\t(LDRGS_Z): Likewise.\n+\t(LDRGS): Likewise.\n+\t* config/arm/mve.md (MVE_H_ELEM): Define mode iterator.\n+\t(V_sz_elem1): Likewise.\n+\t(VLD1Q): Define iterator.\n+\t(VLDRHGOQ): Likewise.\n+\t(VLDRHGSOQ): Likewise.\n+\t(VLDRHQ): Likewise.\n+\t(VLDRWQ): Likewise.\n+\t(mve_vldrhq_fv8hf): Define RTL pattern.\n+\t(mve_vldrhq_gather_offset_<supf><mode>): Likewise.\n+\t(mve_vldrhq_gather_offset_z_<supf><mode>): Likewise.\n+\t(mve_vldrhq_gather_shifted_offset_<supf><mode>): Likewise.\n+\t(mve_vldrhq_gather_shifted_offset_z_<supf><mode>): Likewise.\n+\t(mve_vldrhq_<supf><mode>): Likewise.\n+\t(mve_vldrhq_z_fv8hf): Likewise.\n+\t(mve_vldrhq_z_<supf><mode>): Likewise.\n+\t(mve_vldrwq_fv4sf): Likewise.\n+\t(mve_vldrwq_<supf>v4si): Likewise.\n+\t(mve_vldrwq_z_fv4sf): Likewise.\n+\t(mve_vldrwq_z_<supf>v4si): Likewise.\n+\t(mve_vld1q_f<mode>): Define RTL expand pattern.\n+\t(mve_vld1q_<supf><mode>): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "89cdc5bf858f1cedf03cd87a2d340ad77befb1ed", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 359, "deletions": 0, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -1798,6 +1798,36 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vldrhq_z_f16(__base, __p) __arm_vldrhq_z_f16(__base, __p)\n #define vldrwq_f32(__base) __arm_vldrwq_f32(__base)\n #define vldrwq_z_f32(__base, __p) __arm_vldrwq_z_f32(__base, __p)\n+#define vldrdq_gather_base_s64(__addr,  __offset) __arm_vldrdq_gather_base_s64(__addr,  __offset)\n+#define vldrdq_gather_base_u64(__addr,  __offset) __arm_vldrdq_gather_base_u64(__addr,  __offset)\n+#define vldrdq_gather_base_z_s64(__addr,  __offset, __p) __arm_vldrdq_gather_base_z_s64(__addr,  __offset, __p)\n+#define vldrdq_gather_base_z_u64(__addr,  __offset, __p) __arm_vldrdq_gather_base_z_u64(__addr,  __offset, __p)\n+#define vldrdq_gather_offset_s64(__base, __offset) __arm_vldrdq_gather_offset_s64(__base, __offset)\n+#define vldrdq_gather_offset_u64(__base, __offset) __arm_vldrdq_gather_offset_u64(__base, __offset)\n+#define vldrdq_gather_offset_z_s64(__base, __offset, __p) __arm_vldrdq_gather_offset_z_s64(__base, __offset, __p)\n+#define vldrdq_gather_offset_z_u64(__base, __offset, __p) __arm_vldrdq_gather_offset_z_u64(__base, __offset, __p)\n+#define vldrdq_gather_shifted_offset_s64(__base, __offset) __arm_vldrdq_gather_shifted_offset_s64(__base, __offset)\n+#define vldrdq_gather_shifted_offset_u64(__base, __offset) __arm_vldrdq_gather_shifted_offset_u64(__base, __offset)\n+#define vldrdq_gather_shifted_offset_z_s64(__base, __offset, __p) __arm_vldrdq_gather_shifted_offset_z_s64(__base, __offset, __p)\n+#define vldrdq_gather_shifted_offset_z_u64(__base, __offset, __p) __arm_vldrdq_gather_shifted_offset_z_u64(__base, __offset, __p)\n+#define vldrhq_gather_offset_f16(__base, __offset) __arm_vldrhq_gather_offset_f16(__base, __offset)\n+#define vldrhq_gather_offset_z_f16(__base, __offset, __p) __arm_vldrhq_gather_offset_z_f16(__base, __offset, __p)\n+#define vldrhq_gather_shifted_offset_f16(__base, __offset) __arm_vldrhq_gather_shifted_offset_f16(__base, __offset)\n+#define vldrhq_gather_shifted_offset_z_f16(__base, __offset, __p) __arm_vldrhq_gather_shifted_offset_z_f16(__base, __offset, __p)\n+#define vldrwq_gather_base_f32(__addr,  __offset) __arm_vldrwq_gather_base_f32(__addr,  __offset)\n+#define vldrwq_gather_base_z_f32(__addr,  __offset, __p) __arm_vldrwq_gather_base_z_f32(__addr,  __offset, __p)\n+#define vldrwq_gather_offset_f32(__base, __offset) __arm_vldrwq_gather_offset_f32(__base, __offset)\n+#define vldrwq_gather_offset_s32(__base, __offset) __arm_vldrwq_gather_offset_s32(__base, __offset)\n+#define vldrwq_gather_offset_u32(__base, __offset) __arm_vldrwq_gather_offset_u32(__base, __offset)\n+#define vldrwq_gather_offset_z_f32(__base, __offset, __p) __arm_vldrwq_gather_offset_z_f32(__base, __offset, __p)\n+#define vldrwq_gather_offset_z_s32(__base, __offset, __p) __arm_vldrwq_gather_offset_z_s32(__base, __offset, __p)\n+#define vldrwq_gather_offset_z_u32(__base, __offset, __p) __arm_vldrwq_gather_offset_z_u32(__base, __offset, __p)\n+#define vldrwq_gather_shifted_offset_f32(__base, __offset) __arm_vldrwq_gather_shifted_offset_f32(__base, __offset)\n+#define vldrwq_gather_shifted_offset_s32(__base, __offset) __arm_vldrwq_gather_shifted_offset_s32(__base, __offset)\n+#define vldrwq_gather_shifted_offset_u32(__base, __offset) __arm_vldrwq_gather_shifted_offset_u32(__base, __offset)\n+#define vldrwq_gather_shifted_offset_z_f32(__base, __offset, __p) __arm_vldrwq_gather_shifted_offset_z_f32(__base, __offset, __p)\n+#define vldrwq_gather_shifted_offset_z_s32(__base, __offset, __p) __arm_vldrwq_gather_shifted_offset_z_s32(__base, __offset, __p)\n+#define vldrwq_gather_shifted_offset_z_u32(__base, __offset, __p) __arm_vldrwq_gather_shifted_offset_z_u32(__base, __offset, __p)\n #endif\n \n __extension__ extern __inline void\n@@ -11722,6 +11752,147 @@ __arm_vldrwq_z_u32 (uint32_t const * __base, mve_pred16_t __p)\n   return __builtin_mve_vldrwq_z_uv4si ((__builtin_neon_si *) __base, __p);\n }\n \n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_base_s64 (uint64x2_t __addr, const int __offset)\n+{\n+  return __builtin_mve_vldrdq_gather_base_sv2di (__addr, __offset);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_base_u64 (uint64x2_t __addr, const int __offset)\n+{\n+  return __builtin_mve_vldrdq_gather_base_uv2di (__addr, __offset);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_base_z_s64 (uint64x2_t __addr, const int __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrdq_gather_base_z_sv2di (__addr, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_base_z_u64 (uint64x2_t __addr, const int __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrdq_gather_base_z_uv2di (__addr, __offset, __p);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_offset_s64 (int64_t const * __base, uint64x2_t __offset)\n+{\n+  return __builtin_mve_vldrdq_gather_offset_sv2di ((__builtin_neon_di *) __base, __offset);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_offset_u64 (uint64_t const * __base, uint64x2_t __offset)\n+{\n+  return __builtin_mve_vldrdq_gather_offset_uv2di ((__builtin_neon_di *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_offset_z_s64 (int64_t const * __base, uint64x2_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrdq_gather_offset_z_sv2di ((__builtin_neon_di *) __base, __offset, __p);\n+}\n+\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_offset_z_u64 (uint64_t const * __base, uint64x2_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrdq_gather_offset_z_uv2di ((__builtin_neon_di *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_shifted_offset_s64 (int64_t const * __base, uint64x2_t __offset)\n+{\n+  return __builtin_mve_vldrdq_gather_shifted_offset_sv2di ((__builtin_neon_di *) __base, __offset);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_shifted_offset_u64 (uint64_t const * __base, uint64x2_t __offset)\n+{\n+  return __builtin_mve_vldrdq_gather_shifted_offset_uv2di ((__builtin_neon_di *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_shifted_offset_z_s64 (int64_t const * __base, uint64x2_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrdq_gather_shifted_offset_z_sv2di ((__builtin_neon_di *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_shifted_offset_z_u64 (uint64_t const * __base, uint64x2_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrdq_gather_shifted_offset_z_uv2di ((__builtin_neon_di *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_offset_s32 (int32_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrwq_gather_offset_sv4si ((__builtin_neon_si *) __base, __offset);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_offset_u32 (uint32_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrwq_gather_offset_uv4si ((__builtin_neon_si *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_offset_z_s32 (int32_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_gather_offset_z_sv4si ((__builtin_neon_si *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_offset_z_u32 (uint32_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_gather_offset_z_uv4si ((__builtin_neon_si *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_shifted_offset_s32 (int32_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrwq_gather_shifted_offset_sv4si ((__builtin_neon_si *) __base, __offset);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_shifted_offset_u32 (uint32_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrwq_gather_shifted_offset_uv4si ((__builtin_neon_si *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_shifted_offset_z_s32 (int32_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_gather_shifted_offset_z_sv4si ((__builtin_neon_si *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_shifted_offset_z_u32 (uint32_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_gather_shifted_offset_z_uv4si ((__builtin_neon_si *) __base, __offset, __p);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -13905,6 +14076,77 @@ __arm_vldrhq_f16 (float16_t const * __base)\n {\n   return __builtin_mve_vldrhq_fv8hf((__builtin_neon_hi *) __base);\n }\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_f16 (float16_t const * __base, uint16x8_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_fv8hf((__builtin_neon_hi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_z_f16 (float16_t const * __base, uint16x8_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_z_fv8hf((__builtin_neon_hi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_f16 (float16_t const * __base, uint16x8_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_fv8hf (__base, __offset);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_z_f16 (float16_t const * __base, uint16x8_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_z_fv8hf (__base, __offset, __p);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_f32 (uint32x4_t __addr, const int __offset)\n+{\n+  return __builtin_mve_vldrwq_gather_base_fv4sf (__addr, __offset);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_z_f32 (uint32x4_t __addr, const int __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_gather_base_z_fv4sf (__addr, __offset, __p);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_offset_f32 (float32_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrwq_gather_offset_fv4sf((__builtin_neon_si *) __base, __offset);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_offset_z_f32 (float32_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_gather_offset_z_fv4sf((__builtin_neon_si *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_shifted_offset_f32 (float32_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrwq_gather_shifted_offset_fv4sf (__base, __offset);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_shifted_offset_z_f32 (float32_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_gather_shifted_offset_z_fv4sf (__base, __offset, __p);\n+}\n+\n #endif\n \n enum {\n@@ -16384,6 +16626,74 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_float16_t_const_ptr]: __arm_vld1q_f16 (__ARM_mve_coerce(__p0, float16_t const *)), \\\n   int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vld1q_f32 (__ARM_mve_coerce(__p0, float32_t const *)));})\n \n+#define vldrhq_gather_offset(p0,p1) __arm_vldrhq_gather_offset(p0,p1)\n+#define __arm_vldrhq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_s16 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_s32 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_u16 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_u32 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_f16 (__ARM_mve_coerce(__p0, float16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)));})\n+\n+#define vldrhq_gather_offset_z(p0,p1,p2) __arm_vldrhq_gather_offset_z(p0,p1,p2)\n+#define __arm_vldrhq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_s16 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_s32 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_u16 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_u32 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_float16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_f16 (__ARM_mve_coerce(__p0, float16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2));})\n+\n+#define vldrhq_gather_shifted_offset(p0,p1) __arm_vldrhq_gather_shifted_offset(p0,p1)\n+#define __arm_vldrhq_gather_shifted_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_s16 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_s32 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_u16 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_f16 (__ARM_mve_coerce(__p0, float16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)));})\n+\n+#define vldrhq_gather_shifted_offset_z(p0,p1,p2) __arm_vldrhq_gather_shifted_offset_z(p0,p1,p2)\n+#define __arm_vldrhq_gather_shifted_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_s16 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_s32 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_u16 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_float16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_f16 (__ARM_mve_coerce(__p0, float16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2));})\n+\n+#define vldrwq_gather_offset(p0,p1) __arm_vldrwq_gather_offset(p0,p1)\n+#define __arm_vldrwq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vldrwq_gather_offset_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_offset_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1), \\\n+  int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vldrwq_gather_offset_f32 (__ARM_mve_coerce(__p0, float32_t const *), p1));})\n+\n+#define vldrwq_gather_offset_z(p0,p1,p2) __arm_vldrwq_gather_offset_z(p0,p1,p2)\n+#define __arm_vldrwq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vldrwq_gather_offset_z_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_offset_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1, p2), \\\n+  int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vldrwq_gather_offset_z_f32 (__ARM_mve_coerce(__p0, float32_t const *), p1, p2));})\n+\n+#define vldrwq_gather_shifted_offset(p0,p1) __arm_vldrwq_gather_shifted_offset(p0,p1)\n+#define __arm_vldrwq_gather_shifted_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1), \\\n+  int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_f32 (__ARM_mve_coerce(__p0, float32_t const *), p1));})\n+\n+#define vldrwq_gather_shifted_offset_z(p0,p1,p2) __arm_vldrwq_gather_shifted_offset_z(p0,p1,p2)\n+#define __arm_vldrwq_gather_shifted_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1, p2), \\\n+  int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_f32 (__ARM_mve_coerce(__p0, float32_t const *), p1, p2));})\n+\n #else /* MVE Integer.  */\n \n #define vst4q(p0,p1) __arm_vst4q(p0,p1)\n@@ -18526,8 +18836,57 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_u16 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n   int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n \n+#define vldrwq_gather_offset(p0,p1) __arm_vldrwq_gather_offset(p0,p1)\n+#define __arm_vldrwq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vldrwq_gather_offset_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_offset_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1));})\n+\n+#define vldrwq_gather_offset_z(p0,p1,p2) __arm_vldrwq_gather_offset_z(p0,p1,p2)\n+#define __arm_vldrwq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vldrwq_gather_offset_z_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_offset_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1, p2));})\n+\n+#define vldrwq_gather_shifted_offset(p0,p1) __arm_vldrwq_gather_shifted_offset(p0,p1)\n+#define __arm_vldrwq_gather_shifted_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1));})\n+\n+#define vldrwq_gather_shifted_offset_z(p0,p1,p2) __arm_vldrwq_gather_shifted_offset_z(p0,p1,p2)\n+#define __arm_vldrwq_gather_shifted_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1, p2));})\n+\n #endif /* MVE Integer.  */\n \n+#define vldrdq_gather_offset(p0,p1) __arm_vldrdq_gather_offset(p0,p1)\n+#define __arm_vldrdq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int64_t_const_ptr]: __arm_vldrdq_gather_offset_s64 (__ARM_mve_coerce(__p0, int64_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint64_t_const_ptr]: __arm_vldrdq_gather_offset_u64 (__ARM_mve_coerce(__p0, uint64_t const *), p1));})\n+\n+#define vldrdq_gather_offset_z(p0,p1,p2) __arm_vldrdq_gather_offset_z(p0,p1,p2)\n+#define __arm_vldrdq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int64_t_const_ptr]: __arm_vldrdq_gather_offset_z_s64 (__ARM_mve_coerce(__p0, int64_t const *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint64_t_const_ptr]: __arm_vldrdq_gather_offset_z_u64 (__ARM_mve_coerce(__p0, uint64_t const *), p1, p2));})\n+\n+#define vldrdq_gather_shifted_offset(p0,p1) __arm_vldrdq_gather_shifted_offset(p0,p1)\n+#define __arm_vldrdq_gather_shifted_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int64_t_const_ptr]: __arm_vldrdq_gather_shifted_offset_s64 (__ARM_mve_coerce(__p0, int64_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint64_t_const_ptr]: __arm_vldrdq_gather_shifted_offset_u64 (__ARM_mve_coerce(__p0, uint64_t const *), p1));})\n+\n+#define vldrdq_gather_shifted_offset_z(p0,p1,p2) __arm_vldrdq_gather_shifted_offset_z(p0,p1,p2)\n+#define __arm_vldrdq_gather_shifted_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int64_t_const_ptr]: __arm_vldrdq_gather_shifted_offset_z_s64 (__ARM_mve_coerce(__p0, int64_t const *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint64_t_const_ptr]: __arm_vldrdq_gather_shifted_offset_z_u64 (__ARM_mve_coerce(__p0, uint64_t const *), p1, p2));})\n+\n+\n #define vldrbq_gather_offset_z(p0,p1,p2) __arm_vldrbq_gather_offset_z(p0,p1,p2)\n #define __arm_vldrbq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\"}, {"sha": "fc303612d133c8e872d9d811293408469c07eea2", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -732,3 +732,33 @@ VAR1 (LDRU, vldrwq_u, v4si)\n VAR1 (LDRS_Z, vldrwq_z_f, v4sf)\n VAR1 (LDRS_Z, vldrwq_z_s, v4si)\n VAR1 (LDRU_Z, vldrwq_z_u, v4si)\n+VAR1 (LDRGBS, vldrdq_gather_base_s, v2di)\n+VAR1 (LDRGBS, vldrwq_gather_base_f, v4sf)\n+VAR1 (LDRGBS_Z, vldrdq_gather_base_z_s, v2di)\n+VAR1 (LDRGBS_Z, vldrwq_gather_base_z_f, v4sf)\n+VAR1 (LDRGBU, vldrdq_gather_base_u, v2di)\n+VAR1 (LDRGBU_Z, vldrdq_gather_base_z_u, v2di)\n+VAR1 (LDRGS, vldrdq_gather_offset_s, v2di)\n+VAR1 (LDRGS, vldrdq_gather_shifted_offset_s, v2di)\n+VAR1 (LDRGS, vldrhq_gather_offset_f, v8hf)\n+VAR1 (LDRGS, vldrhq_gather_shifted_offset_f, v8hf)\n+VAR1 (LDRGS, vldrwq_gather_offset_f, v4sf)\n+VAR1 (LDRGS, vldrwq_gather_offset_s, v4si)\n+VAR1 (LDRGS, vldrwq_gather_shifted_offset_f, v4sf)\n+VAR1 (LDRGS, vldrwq_gather_shifted_offset_s, v4si)\n+VAR1 (LDRGS_Z, vldrdq_gather_offset_z_s, v2di)\n+VAR1 (LDRGS_Z, vldrdq_gather_shifted_offset_z_s, v2di)\n+VAR1 (LDRGS_Z, vldrhq_gather_offset_z_f, v8hf)\n+VAR1 (LDRGS_Z, vldrhq_gather_shifted_offset_z_f, v8hf)\n+VAR1 (LDRGS_Z, vldrwq_gather_offset_z_f, v4sf)\n+VAR1 (LDRGS_Z, vldrwq_gather_offset_z_s, v4si)\n+VAR1 (LDRGS_Z, vldrwq_gather_shifted_offset_z_f, v4sf)\n+VAR1 (LDRGS_Z, vldrwq_gather_shifted_offset_z_s, v4si)\n+VAR1 (LDRGU, vldrdq_gather_offset_u, v2di)\n+VAR1 (LDRGU, vldrdq_gather_shifted_offset_u, v2di)\n+VAR1 (LDRGU, vldrwq_gather_offset_u, v4si)\n+VAR1 (LDRGU, vldrwq_gather_shifted_offset_u, v4si)\n+VAR1 (LDRGU_Z, vldrdq_gather_offset_z_u, v2di)\n+VAR1 (LDRGU_Z, vldrdq_gather_shifted_offset_z_u, v2di)\n+VAR1 (LDRGU_Z, vldrwq_gather_offset_z_u, v4si)\n+VAR1 (LDRGU_Z, vldrwq_gather_shifted_offset_z_u, v4si)"}, {"sha": "b0c0b872b438c71248706b4a053bf823a32f3d63", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 430, "deletions": 2, "changes": 432, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -197,7 +197,11 @@\n \t\t\t VLDRBQGO_U VLDRBQ_S VLDRBQ_U VLDRWQGB_S VLDRWQGB_U\n \t\t\t VLD1Q_F VLD1Q_S VLD1Q_U VLDRHQ_F VLDRHQGO_S\n \t\t\t VLDRHQGO_U VLDRHQGSO_S VLDRHQGSO_U VLDRHQ_S VLDRHQ_U\n-\t\t\t VLDRWQ_F VLDRWQ_S VLDRWQ_U])\n+\t\t\t VLDRWQ_F VLDRWQ_S VLDRWQ_U VLDRDQGB_S VLDRDQGB_U\n+\t\t\t VLDRDQGO_S VLDRDQGO_U VLDRDQGSO_S VLDRDQGSO_U\n+\t\t\t VLDRHQGO_F VLDRHQGSO_F VLDRWQGB_F VLDRWQGO_F\n+\t\t\t VLDRWQGO_S VLDRWQGO_U VLDRWQGSO_F VLDRWQGSO_S\n+\t\t\t VLDRWQGSO_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n \t\t\t    (V4SF \"V4SI\")])\n@@ -356,7 +360,10 @@\n \t\t       (VLD1Q_S \"s\") (VLD1Q_U \"u\") (VLDRHQGO_S \"s\")\n \t\t       (VLDRHQGO_U \"u\") (VLDRHQGSO_S \"s\") (VLDRHQGSO_U \"u\")\n \t\t       (VLDRHQ_S \"s\") (VLDRHQ_U \"u\") (VLDRWQ_S \"s\")\n-\t\t       (VLDRWQ_U \"u\")])\n+\t\t       (VLDRWQ_U \"u\") (VLDRDQGB_S \"s\") (VLDRDQGB_U \"u\")\n+\t\t       (VLDRDQGO_S \"s\") (VLDRDQGO_U \"u\") (VLDRDQGSO_S \"s\")\n+\t\t       (VLDRDQGSO_U \"u\") (VLDRWQGO_S \"s\") (VLDRWQGO_U \"u\")\n+\t\t       (VLDRWQGSO_S \"s\") (VLDRWQGSO_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -590,6 +597,11 @@\n (define_int_iterator VLDRHGSOQ [VLDRHQGSO_S VLDRHQGSO_U])\n (define_int_iterator VLDRHQ [VLDRHQ_S VLDRHQ_U])\n (define_int_iterator VLDRWQ [VLDRWQ_S VLDRWQ_U])\n+(define_int_iterator VLDRDGBQ [VLDRDQGB_S VLDRDQGB_U])\n+(define_int_iterator VLDRDGOQ [VLDRDQGO_S VLDRDQGO_U])\n+(define_int_iterator VLDRDGSOQ [VLDRDQGSO_S VLDRDQGSO_U])\n+(define_int_iterator VLDRWGOQ [VLDRWQGO_S VLDRWQGO_U])\n+(define_int_iterator VLDRWGSOQ [VLDRWQGSO_S VLDRWQGSO_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -8496,3 +8508,419 @@\n   emit_insn (gen_mve_vldr<V_sz_elem1>q_<supf><mode>(operands[0],operands[1]));\n   DONE;\n })\n+\n+;;\n+;; [vldrdq_gather_base_s vldrdq_gather_base_u]\n+;;\n+(define_insn \"mve_vldrdq_gather_base_<supf>v2di\"\n+  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t VLDRDGBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrd.64\\t%q0, [%q1, %2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrdq_gather_base_z_s vldrdq_gather_base_z_u]\n+;;\n+(define_insn \"mve_vldrdq_gather_base_z_<supf>v2di\"\n+  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRDGBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvldrdt.u64\\t%q0, [%q1, %2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrdq_gather_offset_s vldrdq_gather_offset_u]\n+;;\n+(define_insn \"mve_vldrdq_gather_offset_<supf>v2di\"\n+ [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n+       (unspec:V2DI [(match_operand:V2DI 1 \"memory_operand\" \"Us\")\n+\t\t     (match_operand:V2DI 2 \"s_register_operand\" \"w\")]\n+\tVLDRDGOQ))\n+ ]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ops[3];\n+  ops[0] = operands[0];\n+  ops[1] = operands[1];\n+  ops[2] = operands[2];\n+  output_asm_insn (\"vldrd.u64\\t%q0, [%m1, %q2]\",ops);\n+  return \"\";\n+}\n+ [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrdq_gather_offset_z_s vldrdq_gather_offset_z_u]\n+;;\n+(define_insn \"mve_vldrdq_gather_offset_z_<supf>v2di\"\n+ [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n+       (unspec:V2DI [(match_operand:V2DI 1 \"memory_operand\" \"Us\")\n+\t\t     (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n+\t\t     (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\tVLDRDGOQ))\n+ ]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ops[3];\n+  ops[0] = operands[0];\n+  ops[1] = operands[1];\n+  ops[2] = operands[2];\n+  output_asm_insn (\"vpst\\n\\tvldrdt.u64\\t%q0, [%m1, %q2]\",ops);\n+  return \"\";\n+}\n+ [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrdq_gather_shifted_offset_s vldrdq_gather_shifted_offset_u]\n+;;\n+(define_insn \"mve_vldrdq_gather_shifted_offset_<supf>v2di\"\n+  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V2DI 2 \"s_register_operand\" \"w\")]\n+\t VLDRDGSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrd.u64\\t%q0, [%m1, %q2, uxtw #3]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrdq_gather_shifted_offset_z_s vldrdq_gather_shifted_offset_z_u]\n+;;\n+(define_insn \"mve_vldrdq_gather_shifted_offset_z_<supf>v2di\"\n+  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRDGSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvldrdt.u64\\t%q0, [%m1, %q2, uxtw #3]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrhq_gather_offset_f]\n+;;\n+(define_insn \"mve_vldrhq_gather_offset_fv8hf\"\n+  [(set (match_operand:V8HF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V8HF [(match_operand:V8HI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V8HI 2 \"s_register_operand\" \"w\")]\n+\t VLDRHQGO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrh.f16\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrhq_gather_offset_z_f]\n+;;\n+(define_insn \"mve_vldrhq_gather_offset_z_fv8hf\"\n+  [(set (match_operand:V8HF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V8HF [(match_operand:V8HI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V8HI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRHQGO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[4];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   ops[3] = operands[3];\n+   output_asm_insn (\"vpst\\n\\tvldrht.f16\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrhq_gather_shifted_offset_f]\n+;;\n+(define_insn \"mve_vldrhq_gather_shifted_offset_fv8hf\"\n+  [(set (match_operand:V8HF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V8HF [(match_operand:V8HI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V8HI 2 \"s_register_operand\" \"w\")]\n+\t VLDRHQGSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrh.f16\\t%q0, [%m1, %q2, uxtw #1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrhq_gather_shifted_offset_z_f]\n+;;\n+(define_insn \"mve_vldrhq_gather_shifted_offset_z_fv8hf\"\n+  [(set (match_operand:V8HF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V8HF [(match_operand:V8HI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V8HI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRHQGSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[4];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   ops[3] = operands[3];\n+   output_asm_insn (\"vpst\\n\\tvldrht.f16\\t%q0, [%m1, %q2, uxtw #1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrwq_gather_base_f]\n+;;\n+(define_insn \"mve_vldrwq_gather_base_fv4sf\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t VLDRWQGB_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrw.u32\\t%q0, [%q1, %2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrwq_gather_base_z_f]\n+;;\n+(define_insn \"mve_vldrwq_gather_base_z_fv4sf\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRWQGB_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvldrwt.u32\\t%q0, [%q1, %2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrwq_gather_offset_f]\n+;;\n+(define_insn \"mve_vldrwq_gather_offset_fv4sf\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VLDRWQGO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrw.u32\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrwq_gather_offset_s vldrwq_gather_offset_u]\n+;;\n+(define_insn \"mve_vldrwq_gather_offset_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VLDRWGOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrw.u32\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrwq_gather_offset_z_f]\n+;;\n+(define_insn \"mve_vldrwq_gather_offset_z_fv4sf\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRWQGO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[4];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   ops[3] = operands[3];\n+   output_asm_insn (\"vpst\\n\\tvldrwt.u32\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrwq_gather_offset_z_s vldrwq_gather_offset_z_u]\n+;;\n+(define_insn \"mve_vldrwq_gather_offset_z_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRWGOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[4];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   ops[3] = operands[3];\n+   output_asm_insn (\"vpst\\n\\tvldrwt.u32\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrwq_gather_shifted_offset_f]\n+;;\n+(define_insn \"mve_vldrwq_gather_shifted_offset_fv4sf\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VLDRWQGSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrw.u32\\t%q0, [%m1, %q2, uxtw #2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrwq_gather_shifted_offset_s vldrwq_gather_shifted_offset_u]\n+;;\n+(define_insn \"mve_vldrwq_gather_shifted_offset_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VLDRWGSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrw.u32\\t%q0, [%m1, %q2, uxtw #2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrwq_gather_shifted_offset_z_f]\n+;;\n+(define_insn \"mve_vldrwq_gather_shifted_offset_z_fv4sf\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRWQGSO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[4];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   ops[3] = operands[3];\n+   output_asm_insn (\"vpst\\n\\tvldrwt.u32\\t%q0, [%m1, %q2, uxtw #2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrwq_gather_shifted_offset_z_s vldrwq_gather_shifted_offset_z_u]\n+;;\n+(define_insn \"mve_vldrwq_gather_shifted_offset_z_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VLDRWGSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[4];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   ops[3] = operands[3];\n+   output_asm_insn (\"vpst\\n\\tvldrwt.u32\\t%q0, [%m1, %q2, uxtw #2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])"}, {"sha": "3b689b15c47c63faadf7ae4a58ca38a8f1949557", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -43,6 +43,51 @@\n \t* gcc.target/arm/mve/intrinsics/vldrwq_z_s32.c: Likewise.\n \t* gcc.target/arm/mve/intrinsics/vldrwq_z_u32.c: Likewise.\n \n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vld1q_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_z_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_z_u32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "0116d35828deaf638de211f87821a40112b297a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_s64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_s64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (uint64x2_t addr)\n+{\n+  return vldrdq_gather_base_s64 (addr, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.64\"  }  } */"}, {"sha": "191e5deb4cf2de98dd1d37f4018542b38fa6d95a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_u64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_u64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64x2_t addr)\n+{\n+  return vldrdq_gather_base_u64 (addr, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.64\"  }  } */"}, {"sha": "9193b419b4ede4d3c0445b0ac96a96a26f787196", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_z_s64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_s64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (uint64x2_t addr, mve_pred16_t p)\n+{\n+  return vldrdq_gather_base_z_s64 (addr, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */"}, {"sha": "9f156751f5597c9f634d04dca636ee9465266a3a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_z_u64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_u64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64x2_t addr, mve_pred16_t p)\n+{\n+  return vldrdq_gather_base_z_u64 (addr, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */"}, {"sha": "00547a4b7c9ca6da28c35489ef83b2357e8c5b26", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_s64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_s64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64_t const * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_offset_s64 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.u64\"  }  } */\n+\n+int64x2_t\n+foo1 (int64_t const * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.u64\"  }  } */"}, {"sha": "af59f95094736d4247640c84d5faa86671e1a289", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_u64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_u64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64_t const * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_offset_u64 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.u64\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint64_t const * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.u64\"  }  } */"}, {"sha": "7818470d5684f7d93ebe8547fd4701d46202d4aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_z_s64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_s64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64_t const * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_offset_z_s64 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */\n+\n+int64x2_t\n+foo1 (int64_t const * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */"}, {"sha": "440941026efac37355affd32a06875c64da7c29f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_z_u64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_u64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64_t const * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_offset_z_u64 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint64_t const * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */"}, {"sha": "6dac7c2f89ea63bb3837bffcae81fc5bf559467f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_s64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_s64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64_t const * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_shifted_offset_s64 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.u64\"  }  } */\n+\n+int64x2_t\n+foo1 (int64_t const * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.u64\"  }  } */"}, {"sha": "b33efc296268b1e3c6f904e54b1567deea76a5ba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_u64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_u64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64_t const * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_shifted_offset_u64 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.u64\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint64_t const * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.u64\"  }  } */"}, {"sha": "9a0572e402dbd1aac67a37e1f91dfa463e954d7f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_z_s64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_s64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64_t const * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_shifted_offset_z_s64 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */\n+\n+int64x2_t\n+foo1 (int64_t const * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */"}, {"sha": "50a2cd161964cd0ad4bf0c39786184b480d7a700", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_z_u64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_u64.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64_t const * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_shifted_offset_z_u64 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint64_t const * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */"}, {"sha": "a915959d0160e3574a5a593e618b696167c95039", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_f16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_f16.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_offset_f16 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */"}, {"sha": "fdc6762c082b1eace0704aabe237fa43a6bd842a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_f16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_f16.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z_f16 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */"}, {"sha": "ba9d0f2279a8e3b773ab86466eb053653a27a1a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_f16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_f16.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_shifted_offset_f16 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */"}, {"sha": "561669f0a2aa4a25961ee7492ff9cc9b02553687", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_f16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_f16.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z_f16 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */"}, {"sha": "b398bab5e232f1d1f7bf55b9b06b3929b505702f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_f32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_f32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (uint32x4_t addr)\n+{\n+  return vldrwq_gather_base_f32 (addr, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "bc219c7f0b51c394f381cdb47dc5e6917561a019", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_f32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_f32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (uint32x4_t addr, mve_pred16_t p)\n+{\n+  return vldrwq_gather_base_z_f32 (addr, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "2e3b94fbb0e95c97a1dbbfa3fd6d177e4bd16611", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_f32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_f32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_offset_f32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "fe5d51ccfa51031ad4c4d2884b9b7a44a51b10ca", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_s32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_s32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_offset_s32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "89ec39813002ad68c0c7aac8aa0c90224852bfb5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_u32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_u32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_offset_u32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "c85a0c2c7f89633fb216b05c55983232592878ad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_z_f32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_f32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_offset_z_f32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "e128b434bd6c7b7583a1881bd6bff32df2ea035a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_z_s32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_s32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_offset_z_s32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "b183b9afefdc0aeb49f637d9cc9dc936622adea5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_z_u32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_u32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_offset_z_u32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "67a42f72dd28bf747ddf16ae5a0ef7dc95792444", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_f32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_f32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_shifted_offset_f32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "283d0a512e5d9627f433ba326b877254902dd885", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_s32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_s32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_shifted_offset_s32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "4783fae28e6286b39f28c79c9cdcb48f6b00beb7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_u32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_u32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_shifted_offset_u32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t const * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "c1443854aee7d99a8f961d544bd412f0e23e3ec3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_z_f32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_f32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_shifted_offset_z_f32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "b537998da597ac52774e1459c7663739b1c5b52b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_z_s32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_s32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_shifted_offset_z_s32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "a3d4fde827c85b3027e853aed963183699e1d7e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_z_u32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc23303bad126f844a14f88c344317e6cf4c3dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_u32.c?ref=4cc23303bad126f844a14f88c344317e6cf4c3dc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_shifted_offset_z_u32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}]}