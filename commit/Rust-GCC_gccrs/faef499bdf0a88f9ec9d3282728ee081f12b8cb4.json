{"sha": "faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFlZjQ5OWJkZjBhODhmOWVjOWQzMjgyNzI4ZWUwODFmMTJiOGNiNA==", "commit": {"author": {"name": "David Ayers", "email": "ayers@gcc.gnu.org", "date": "2009-03-12T22:28:15Z"}, "committer": {"name": "David Ayers", "email": "ayers@gcc.gnu.org", "date": "2009-03-12T22:28:15Z"}, "message": "re PR libobjc/27466 (RFE: Support for libobjc equivalent of std::set_unexpected)\n\nlibobjc/\n\n2009-03-12  Richard Frith-Macdonald  <rfm@gnu.org>\n\t    David Ayers  <ayers@fsfe.org>\n\n\tPR libobjc/27466\n\t* objc/objc-api.h (_objc_unexpected_exception): Declare\n\tnew hook.  Update copyright dates.\n\t* exception.c (objc_exception_throw): Use hook.  Update\n\tcopyright dates.\n\t* libobjc.def (_objc_unexpected_exception): Export hook.\n\tUpdate copyright dates.\n\t\ngcc/testsuite/\n\n2009-03-12  David Ayers  <ayers@fsfe.org>\n\n\tPR libobjc/27466\n\t* objc/execute/exceptions/handler-1.m. New test.\n\nFrom-SVN: r144826", "tree": {"sha": "53acb0e9cd94a0ada09c499da8ecc1b24cdba655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53acb0e9cd94a0ada09c499da8ecc1b24cdba655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/comments", "author": null, "committer": null, "parents": [{"sha": "03a181983d217bfc13d295e698edc1eae0e8dacd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a181983d217bfc13d295e698edc1eae0e8dacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a181983d217bfc13d295e698edc1eae0e8dacd"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "8198504b8565f40cc956813aa9145f92d5fece0b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "patch": "@@ -1,3 +1,8 @@\n+2009-03-12  David Ayers  <ayers@fsfe.org>\n+\n+\tPR libobjc/27466\n+\t* objc/execute/exceptions/handler-1.m. New test.\n+\n 2008-03-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/39431"}, {"sha": "9cd8df19c44f55fadc31fe8f801189a1190bb960", "filename": "gcc/testsuite/objc/execute/exceptions/handler-1.m", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fhandler-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fhandler-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fhandler-1.m?ref=faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "patch": "@@ -0,0 +1,38 @@\n+/* Test custom exception handlers  */\n+/* Author: David Ayers */\n+\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+static unsigned int handlerExpected = 0;\n+\n+void\n+my_exception_handler(id excp)\n+{\n+  /* Returning from the handler would abort.  */\n+  if (handlerExpected)\n+    exit(0);\n+\n+  abort();\n+}\n+\n+int \n+main(int argc, char *argv[])\n+{\n+  _objc_unexpected_exception = my_exception_handler;\n+\n+  @try\n+    {\n+      @throw [Object new];\n+    }\n+  @catch (id exc)\n+    {\n+      handlerExpected = 1;\n+    }\n+\n+  @throw [Object new];\n+  abort();\n+  return 0;\n+}"}, {"sha": "1dc81be7a84337ca12c8bc10df3f920d58a0893a", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "patch": "@@ -1,3 +1,14 @@\n+2009-03-12  Richard Frith-Macdonald  <rfm@gnu.org>\n+\t    David Ayers  <ayers@fsfe.org>\n+\n+\tPR libobjc/27466\n+\t* objc/objc-api.h (_objc_unexpected_exception): Declare\n+\tnew hook.  Update copyright dates.\n+\t* exception.c (objc_exception_throw): Use hook.  Update\n+\tcopyright dates.\n+\t* libobjc.def (_objc_unexpected_exception): Export hook.\n+\tUpdate copyright dates.\n+\t\n 2009-03-01  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure: Regenerate."}, {"sha": "5af63103762f413b6d72158da890c98bd9e44c35", "filename": "libobjc/exception.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/libobjc%2Fexception.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/libobjc%2Fexception.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fexception.c?ref=faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "patch": "@@ -1,5 +1,5 @@\n /* The implementation of exception handling primitives for Objective-C.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -86,6 +86,11 @@ struct lsda_header_info\n   unsigned char call_site_encoding;\n };\n \n+/* This hook allows libraries to sepecify special actions when an\n+   exception is thrown without a handler in place.\n+ */\n+void (*_objc_unexpected_exception) (id exception); /* !T:SAFE */\n+\n static const unsigned char *\n parse_lsda_header (struct _Unwind_Context *context, const unsigned char *p,\n \t\t   struct lsda_header_info *info)\n@@ -486,5 +491,9 @@ objc_exception_throw (id value)\n #endif\n \n   /* Some sort of unwinding error.  */\n+  if (_objc_unexpected_exception != 0)\n+    {\n+      (*_objc_unexpected_exception) (value);\n+    }\n   abort ();\n }"}, {"sha": "9aca6d8f77c054e6b071dc336a486dbd8785d960", "filename": "libobjc/libobjc.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/libobjc%2Flibobjc.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/libobjc%2Flibobjc.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Flibobjc.def?ref=faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "patch": "@@ -1,5 +1,5 @@\n ;  GNU Objective C Runtime DLL Export Definitions\n-;  Copyright (C) 1997 Free Software Foundation, Inc.\n+;  Copyright (C) 1997, 2001, 2003, 2005, 2009 Free Software Foundation, Inc.\n ;  Contributed by Scott Christley <scottc@net-community.com>\n ;\n ;  This file is part of GCC.\n@@ -38,6 +38,7 @@ objc_mutex_deallocate\n objc_mutex_lock\n objc_mutex_trylock\n objc_mutex_unlock\n+_objc_unexpected_exception\n objc_thread_detach\n objc_thread_exit\n objc_thread_get_data"}, {"sha": "02a8c7afa3d63dab09f9a3f108f68d0ae231b255", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faef499bdf0a88f9ec9d3282728ee081f12b8cb4/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=faef499bdf0a88f9ec9d3282728ee081f12b8cb4", "patch": "@@ -1,5 +1,6 @@\n /* GNU Objective-C Runtime API.\n-   Copyright (C) 1993, 1995, 1996, 1997, 2002, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 1997, 2001, 2002, 2003, 2004, 2005,\n+   2007, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -430,6 +431,15 @@ objc_EXPORT void (*_objc_free)(void *);\n objc_EXPORT IMP (*__objc_msg_forward)(SEL);\n objc_EXPORT IMP (*__objc_msg_forward2)(id, SEL);\n \n+/*\n+** Hook for uncaught exceptions.  This hook is called when an exception\n+** is thrown and no valid exception handler is in place.  The function\n+** is expected never to return.  If the function returns the result is\n+** currently undefined.\n+*/\n+objc_EXPORT void (*_objc_unexpected_exception)(id);\n+\n+\n Method_t class_get_class_method(MetaClass _class, SEL aSel);\n \n Method_t class_get_instance_method(Class _class, SEL aSel);"}]}