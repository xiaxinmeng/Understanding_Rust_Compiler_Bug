{"sha": "6defecc2d32860e29a9de5033fc3810ed64857ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRlZmVjYzJkMzI4NjBlMjlhOWRlNTAzM2ZjMzgxMGVkNjQ4NTdhZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-02-07T22:23:58Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-02-07T22:23:58Z"}, "message": "configure.ac (_GLIBCXX_LONG_DOUBLE_COMPAT): New check.\n\n2006-02-07  Jakub Jelinek  <jakub@redhat.com>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* configure.ac (_GLIBCXX_LONG_DOUBLE_COMPAT): New check.\n\tIf true, set also port_specific_symbol_files and create\n\tas_symver_specs.\n\t(GLIBCXX_LDBL_COMPAT): New GLIBCXX_CONDITIONAL.\n\t* configure: Rebuilt.\n\t* config.h.in: Rebuilt.\n\t* config/os/gnu-linux/ldbl-extra.ver: New file.\n\t* config/abi/pre/gnu.ver: Make sure no __float128 symbols are\n\texported.\n\t* include/bits/c++config (_GLIBCXX_LONG_DOUBLE_COMPAT,\n\t_GLIBCXX_LDBL_NAMESPACE, _GLIBCXX_BEGIN_LDBL_NAMESPACE,\n\t_GLIBCXX_END_LDBL_NAMESPACE): Define.\n\t* include/bits/localefwd.h: Use them to conditionally scope facets.\n\t* include/bits/locale_facets.h: Surround std::{money,num}_{get,put}\n\twith _GLIBCXX_BEGIN_LDBL_NAMESPACE and _GLIBCXX_END_LDBL_NAMESPACE.\n\tSurround std::{money,num}_{get,put}\n\twith _GLIBCXX_BEGIN_LDBL_NAMESPACE and _GLIBCXX_END_LDBL_NAMESPACE.\n\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (std::money_get): Add __do_get method.\n\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (std::money_put): Add __do_put method.\n\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (std::num_get): Add __do_get method.\n\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (std::num_put): Add __do_put method.\n\t* include/bits/locale_facets.tcc: Surround std::{money,num}_{get,put}\n\twith _GLIBCXX_BEGIN_LDBL_NAMESPACE and _GLIBCXX_END_LDBL_NAMESPACE.\n\t(std::money_get::__do_get, std::money_put::__do_put,\n\tstd::num_get::__do_get, std::num_put::__do_put): New\n\tspecializations.\n\t* include/Makefile.am: Conditionally define\n\t_GLIBCXX_LONG_DOUBLE_COMPAT in c++config.\n\t* include/Makefile.in: Regenerate.\n\t* src/locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT] (_GLIBCXX_LOC_ID,\n\t_GLIBCXX_SYNC_ID): Define, use them.\n\t* src/compatibility-ldbl.cc: New file.\n\t* src/complex_io.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Add compatibility\n\tsymbols.\n\t* src/limits.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n\t* src/locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n\t* src/locale-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\t\n\t* src/locale-misc-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n\t* src/istream-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n\t* src/ostream-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n\t* src/locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n\t* src/wlocale-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n\t* src/compatibility.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n\t* config/locale/generic/c_locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]:\n\tLikewise.\n\t* config/locale/gnu/c_locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]:\n\tLikewise.\n\t* src/Makefile.am (libstdc++-symbol.ver): Append instead of\n\tinsert in the middle if port specific symbol file requests it.\n\t(ldbl_compat_sources): New variable.\n\t(sources): Use it.\n\t(compatibility-ldbl.lo, compatibility-ldbl.o): New rules.\n\t* src/Makefile.in: Rebuilt.\n\t* testsuite/testsuite_abi.cc: Recognize GLIBCXX_LDBL_3.4,\n\tGLIBCXX_LDBL_3.4.7, CXXABI_LDBL_1.3.\t\n\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r110725", "tree": {"sha": "b8066f235ec23f5dc04e5951f1059343bd4db2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8066f235ec23f5dc04e5951f1059343bd4db2ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6defecc2d32860e29a9de5033fc3810ed64857ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6defecc2d32860e29a9de5033fc3810ed64857ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6defecc2d32860e29a9de5033fc3810ed64857ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6defecc2d32860e29a9de5033fc3810ed64857ae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293"}], "stats": {"total": 980, "additions": 907, "deletions": 73}, "files": [{"sha": "9341fd1b51a3ba14c40c8f7c125815aa057872d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,3 +1,62 @@\n+2006-02-07  Jakub Jelinek  <jakub@redhat.com>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* configure.ac (_GLIBCXX_LONG_DOUBLE_COMPAT): New check.\n+\tIf true, set also port_specific_symbol_files and create\n+\tas_symver_specs.\n+\t(GLIBCXX_LDBL_COMPAT): New GLIBCXX_CONDITIONAL.\n+\t* configure: Rebuilt.\n+\t* config.h.in: Rebuilt.\n+\t* config/os/gnu-linux/ldbl-extra.ver: New file.\n+\t* config/abi/pre/gnu.ver: Make sure no __float128 symbols are\n+\texported.\n+\t* include/bits/c++config (_GLIBCXX_LONG_DOUBLE_COMPAT,\n+\t_GLIBCXX_LDBL_NAMESPACE, _GLIBCXX_BEGIN_LDBL_NAMESPACE,\n+\t_GLIBCXX_END_LDBL_NAMESPACE): Define.\n+\t* include/bits/localefwd.h: Use them to conditionally scope facets.\n+\t* include/bits/locale_facets.h: Surround std::{money,num}_{get,put}\n+\twith _GLIBCXX_BEGIN_LDBL_NAMESPACE and _GLIBCXX_END_LDBL_NAMESPACE.\n+\tSurround std::{money,num}_{get,put}\n+\twith _GLIBCXX_BEGIN_LDBL_NAMESPACE and _GLIBCXX_END_LDBL_NAMESPACE.\n+\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (std::money_get): Add __do_get method.\n+\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (std::money_put): Add __do_put method.\n+\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (std::num_get): Add __do_get method.\n+\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (std::num_put): Add __do_put method.\n+\t* include/bits/locale_facets.tcc: Surround std::{money,num}_{get,put}\n+\twith _GLIBCXX_BEGIN_LDBL_NAMESPACE and _GLIBCXX_END_LDBL_NAMESPACE.\n+\t(std::money_get::__do_get, std::money_put::__do_put,\n+\tstd::num_get::__do_get, std::num_put::__do_put): New\n+\tspecializations.\n+\t* include/Makefile.am: Conditionally define\n+\t_GLIBCXX_LONG_DOUBLE_COMPAT in c++config.\n+\t* include/Makefile.in: Regenerate.\n+\t* src/locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT] (_GLIBCXX_LOC_ID,\n+\t_GLIBCXX_SYNC_ID): Define, use them.\n+\t* src/compatibility-ldbl.cc: New file.\n+\t* src/complex_io.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Add compatibility\n+\tsymbols.\n+\t* src/limits.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n+\t* src/locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n+\t* src/locale-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\t\n+\t* src/locale-misc-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n+\t* src/istream-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n+\t* src/ostream-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n+\t* src/locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n+\t* src/wlocale-inst.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n+\t* src/compatibility.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Likewise.\n+\t* config/locale/generic/c_locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]:\n+\tLikewise.\n+\t* config/locale/gnu/c_locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]:\n+\tLikewise.\n+\t* src/Makefile.am (libstdc++-symbol.ver): Append instead of\n+\tinsert in the middle if port specific symbol file requests it.\n+\t(ldbl_compat_sources): New variable.\n+\t(sources): Use it.\n+\t(compatibility-ldbl.lo, compatibility-ldbl.o): New rules.\n+\t* src/Makefile.in: Rebuilt.\n+\t* testsuite/testsuite_abi.cc: Recognize GLIBCXX_LDBL_3.4,\n+\tGLIBCXX_LDBL_3.4.7, CXXABI_LDBL_1.3.\t\n+\n 2006-02-07  Paolo Carlini  <pcarlini@suse.de>\t\n \n \t* include/tr1/hashtable: Trivial formatting fixes."}, {"sha": "78f26a7f1c2f3a68d0b7433216363d54b4fe857d", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -154,6 +154,8 @@ GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n+GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@"}, {"sha": "b112aca8c6882efc2cafda520ff12401c6b849ab", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -661,6 +661,9 @@\n /* Define to 1 if a full hosted library is built, or 0 if freestanding. */\n #undef _GLIBCXX_HOSTED\n \n+/* Define if compatibility should be provided for -mlong-double-64. */\n+#undef _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n /* Define if ptrdiff_t is int. */\n #undef _GLIBCXX_PTRDIFF_T_IS_INT\n "}, {"sha": "8ea7c64a525619743312c67189fa02f85e39786c", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -90,7 +90,10 @@ GLIBCXX_3.4 {\n       std::locale::_S_normalize_category*;\n       std::locale::_[T-Za-z]*;\n #     std::[A-Zm-r]*;\n-      std::[A-Zm-n]*;\n+      std::[A-Zm]*;\n+      std::n[^u]*;\n+      std::nu[^m]*;\n+      std::num[^e]*;\n       std::[p-r]*;\n       std::ostrstream*;\n       std::out_of_range*;\n@@ -254,7 +257,7 @@ GLIBCXX_3.4 {\n     _ZNSi[0-9][a-h]*;\n     _ZNSi[0-9][j-z]*;\n     _ZNSi6ignoreE[il][il];\n-    _ZNSirsE*;\n+    _ZNSirsE*[^g];\n \n     # std::basic_istream<wchar_t>\n     _ZNSt13basic_istreamIwSt11char_traitsIwEEC*;\n@@ -263,7 +266,7 @@ GLIBCXX_3.4 {\n     _ZNSt13basic_istreamIwSt11char_traitsIwEE[0-9][a-h]*;\n     _ZNSt13basic_istreamIwSt11char_traitsIwEE[0-9][j-z]*;\n     _ZNSt13basic_istreamIwSt11char_traitsIwEE6ignoreE[il][ijlm];\n-    _ZNSt13basic_istreamIwSt11char_traitsIwEErsE*;\n+    _ZNSt13basic_istreamIwSt11char_traitsIwEErsE*[^g];\n \n     # std::istream operators and extractors\n     _ZSt7getlineI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_istream*;\n@@ -281,7 +284,7 @@ GLIBCXX_3.4 {\n     _ZNKSo6sentrycvbEv;\n     _ZNSo8_M_write*;\n     _ZNSo[0-9][a-z]*;\n-    _ZNSolsE*;\n+    _ZNSolsE*[^g];\n \n     # std::basic_ostream<wchar_t>\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEEC*;\n@@ -294,7 +297,7 @@ GLIBCXX_3.4 {\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEE5writeEPKw*;\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEE6sentry*;\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEE8_M_write*;\n-    _ZNSt13basic_ostreamIwSt11char_traitsIwEElsE*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEElsE*[^g];\n \n     # std::ostream operators and inserters\n     _ZSt4end[ls]I[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n@@ -321,7 +324,7 @@ GLIBCXX_3.4 {\n     _ZNSt8ios_base4InitD*;\n \n     # bool std::has_facet \n-    _ZSt9has_facet*;\n+    _ZSt9has_facetIS*;\n \n     # std::num_get\n     _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n@@ -335,6 +338,9 @@ GLIBCXX_3.4 {\n     # std::money_put\n     _ZNKSt9money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n \n+    # std::numeric_limits\n+    _ZNSt14numeric_limitsI[^g]*;\n+\n     # std::_Rb_tree\n     _ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base;\n     _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base;\n@@ -362,7 +368,7 @@ GLIBCXX_3.4 {\n     _ZNSt12__basic_fileIcED*;\n \n     # std::__convert_to_v\n-    _ZSt14__convert_to_v*;\n+    _ZSt14__convert_to_vI[^g]*;\n \n     # __gnu_cxx::stdio_sync_filebuf\n     _ZTVN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EEE;\n@@ -455,7 +461,8 @@ GLIBCXX_3.4 {\n     _ZTSN9__gnu_cxx13stdio_filebufI[cw]St11char_traitsI[cw]EEE;\n \n     # function-scope static objects requires a guard variable.\n-    _ZGVNSt*;\n+    _ZGVNSt[^1]*;\n+    _ZGVNSt1[^7]*;\n \n     # virtual function thunks\n     _ZThn8_NS*;\n@@ -661,10 +668,10 @@ GLIBCXX_3.4.7 {\n     _ZNSt11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n     _ZNSt11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n \n-    _ZNSo9_M_insertI*;\n-    _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertI*;\n-    _ZNSi10_M_extractI*;\n-    _ZNSt13basic_istreamIwSt11char_traitsIwEE10_M_extractI*;\n+    _ZNSo9_M_insertI[^g]*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertI[^g]*;\n+    _ZNSi10_M_extractI[^g]*;\n+    _ZNSt13basic_istreamIwSt11char_traitsIwEE10_M_extractI[^g]*;\n \n } GLIBCXX_3.4.6;\n \n@@ -740,9 +747,9 @@ CXXABI_1.3 {\n     _ZTVN10__cxxabiv121__vmi_class_type_infoE;\n \n     # typeinfo structure (and some names)\n-    _ZTI[a-z];\n-    _ZTIP[a-z];\n-    _ZTIPK[a-z];\n+    _ZTI[a-fh-z];\n+    _ZTIP[a-fh-z];\n+    _ZTIPK[a-fh-z];\n     _ZTIN10__cxxabiv117__array_type_infoE;\n     _ZTIN10__cxxabiv117__class_type_infoE;\n     _ZTIN10__cxxabiv116__enum_type_infoE;\n@@ -755,9 +762,9 @@ CXXABI_1.3 {\n     _ZTIN10__cxxabiv121__vmi_class_type_infoE;\n \n     # typeinfo name\n-    _ZTS[a-z];\n-    _ZTSP[a-z];\n-    _ZTSPK[a-z];\n+    _ZTS[a-fh-z];\n+    _ZTSP[a-fh-z];\n+    _ZTSPK[a-fh-z];\n     _ZTSN10__cxxabiv117__array_type_infoE;\n     _ZTSN10__cxxabiv117__class_type_infoE;\n     _ZTSN10__cxxabiv116__enum_type_infoE;"}, {"sha": "783b1963c0a023b4fc54b9c69a78314e313a04f9", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -171,3 +171,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const char* const* const locale::_S_categories = __gnu_cxx::category_names;\n \n _GLIBCXX_END_NAMESPACE\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl)))\n+_GLIBCXX_LDBL_COMPAT(_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKPi, _ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKPi);\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "8a42638e0f28fb4a8a2abe771100273f2b92d9ef", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 \n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -135,3 +135,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const char* const* const locale::_S_categories = __gnu_cxx::category_names;\n \n _GLIBCXX_END_NAMESPACE\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl)))\n+_GLIBCXX_LDBL_COMPAT(_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct, _ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct);\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "d1e09ec7e19fdc499829d89acb82b4000228e06b", "filename": "libstdc++-v3/config/os/gnu-linux/ldbl-extra.ver", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-extra.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-extra.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-extra.ver?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -0,0 +1,26 @@\n+# Appended to version file.\n+\n+GLIBCXX_LDBL_3.4 {\n+  _ZNSt14numeric_limitsIg*;\n+  _ZNSirsERg;\n+  _ZNSolsEg;\n+  _ZNSt13basic_istreamIwSt11char_traitsIwEErsERg;\n+  _ZNSt13basic_ostreamIwSt11char_traitsIwEElsEg;\n+  _ZSt14__convert_to_vIgEvPKcRT_RSt12_Ios_IostateRKP*;\n+  _ZStlsIg[cw]St11char_traitsI[cw]EERSt13basic_ostreamIT0_T1_ES6_RKSt7complexIT_E;\n+  _ZStrsIg[cw]St11char_traitsI[cw]EERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E;\n+  *__gnu_cxx_ldbl128*;\n+};\n+\n+GLIBCXX_LDBL_3.4.7 {\n+  _ZNSi10_M_extractIgEERSiRT_;\n+  _ZNSt13basic_istreamIwSt11char_traitsIwEE10_M_extractIgEERS2_RT_;\n+  _ZNSo9_M_insertIgEERSoT_;\n+  _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertIgEERS2_T_;\n+} GLIBCXX_LDBL_3.4;\n+\n+CXXABI_LDBL_1.3 {\n+  _ZT[IS]g;\n+  _ZT[IS]Pg;\n+  _ZT[IS]PKg;\n+};"}, {"sha": "2f8cea5ae321fb727c5511774c5f0f525c4105f7", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS glibcxx_thread_h WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_FILE port_specific_symbol_files ENABLE_SYMVERS_TRUE ENABLE_SYMVERS_FALSE ENABLE_SYMVERS_GNU_TRUE ENABLE_SYMVERS_GNU_FALSE ENABLE_SYMVERS_GNU_NAMESPACE_TRUE ENABLE_SYMVERS_GNU_NAMESPACE_FALSE ENABLE_SYMVERS_DARWIN_TRUE ENABLE_SYMVERS_DARWIN_FALSE baseline_dir ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR CPU_DEFINES_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS glibcxx_thread_h WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_FILE port_specific_symbol_files ENABLE_SYMVERS_TRUE ENABLE_SYMVERS_FALSE ENABLE_SYMVERS_GNU_TRUE ENABLE_SYMVERS_GNU_FALSE ENABLE_SYMVERS_GNU_NAMESPACE_TRUE ENABLE_SYMVERS_GNU_NAMESPACE_FALSE ENABLE_SYMVERS_DARWIN_TRUE ENABLE_SYMVERS_DARWIN_FALSE GLIBCXX_LDBL_COMPAT_TRUE GLIBCXX_LDBL_COMPAT_FALSE baseline_dir ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR CPU_DEFINES_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -89068,6 +89068,72 @@ echo \"$as_me:$LINENO: result: $glibcxx_ptrdiff_t_is_i\" >&5\n echo \"${ECHO_T}$glibcxx_ptrdiff_t_is_i\" >&6\n \n \n+ac_ldbl_compat=no\n+case \"$target\" in\n+  powerpc*-*-*gnu* | \\\n+  sparc*-*-linux* | \\\n+  s390*-*-linux* | \\\n+  alpha*-*-linux*)\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+#if !defined __LONG_DOUBLE_128__ || (defined(__sparc__) && defined(__arch64__))\n+#error no need for long double compatibility\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_ldbl_compat=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_ldbl_compat=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+  if test \"$ac_ldbl_compat\" = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_LONG_DOUBLE_COMPAT 1\n+_ACEOF\n+\n+    port_specific_symbol_files=\"\\$(top_srcdir)/config/os/gnu-linux/ldbl-extra.ver\"\n+  fi\n+esac\n+\n+\n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n \n   if $GLIBCXX_IS_NATIVE ; then\n@@ -89942,6 +90008,17 @@ fi\n \n \n \n+if test $ac_ldbl_compat = yes; then\n+  GLIBCXX_LDBL_COMPAT_TRUE=\n+  GLIBCXX_LDBL_COMPAT_FALSE='#'\n+else\n+  GLIBCXX_LDBL_COMPAT_TRUE='#'\n+  GLIBCXX_LDBL_COMPAT_FALSE=\n+fi\n+\n+\n+\n+\n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n # tests run on this system so they can be shared between configure\n@@ -90311,6 +90388,13 @@ echo \"$as_me: error: conditional \\\"ENABLE_SYMVERS_DARWIN\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&2;}\n    { (exit 1); exit 1; }; }\n fi\n+if test -z \"${GLIBCXX_LDBL_COMPAT_TRUE}\" && test -z \"${GLIBCXX_LDBL_COMPAT_FALSE}\"; then\n+  { { echo \"$as_me:$LINENO: error: conditional \\\"GLIBCXX_LDBL_COMPAT\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&5\n+echo \"$as_me: error: conditional \\\"GLIBCXX_LDBL_COMPAT\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n \n : ${CONFIG_STATUS=./config.status}\n ac_clean_files_save=$ac_clean_files\n@@ -90985,6 +91069,8 @@ s,@ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@,$ENABLE_SYMVERS_GNU_NAMESPACE_TRUE,;t t\n s,@ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@,$ENABLE_SYMVERS_GNU_NAMESPACE_FALSE,;t t\n s,@ENABLE_SYMVERS_DARWIN_TRUE@,$ENABLE_SYMVERS_DARWIN_TRUE,;t t\n s,@ENABLE_SYMVERS_DARWIN_FALSE@,$ENABLE_SYMVERS_DARWIN_FALSE,;t t\n+s,@GLIBCXX_LDBL_COMPAT_TRUE@,$GLIBCXX_LDBL_COMPAT_TRUE,;t t\n+s,@GLIBCXX_LDBL_COMPAT_FALSE@,$GLIBCXX_LDBL_COMPAT_FALSE,;t t\n s,@baseline_dir@,$baseline_dir,;t t\n s,@ATOMICITY_SRCDIR@,$ATOMICITY_SRCDIR,;t t\n s,@ATOMIC_WORD_SRCDIR@,$ATOMIC_WORD_SRCDIR,;t t"}, {"sha": "07b2c171e4163d686280e4d3db24a151bce26851", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -284,6 +284,25 @@ fi\n # This depends on GLIBCXX CHECK_LINKER_FEATURES, but without it assumes no.\n GLIBCXX_ENABLE_SYMVERS([yes])\n \n+ac_ldbl_compat=no\n+case \"$target\" in\n+  powerpc*-*-*gnu* | \\\n+  sparc*-*-linux* | \\\n+  s390*-*-linux* | \\\n+  alpha*-*-linux*)\n+  AC_TRY_COMPILE(, [\n+#if !defined __LONG_DOUBLE_128__ || (defined(__sparc__) && defined(__arch64__))\n+#error no need for long double compatibility\n+#endif\n+  ], [ac_ldbl_compat=yes], [ac_ldbl_compat=no])\n+  if test \"$ac_ldbl_compat\" = yes; then\n+    AC_DEFINE([_GLIBCXX_LONG_DOUBLE_COMPAT],1,\n+\t      [Define if compatibility should be provided for -mlong-double-64.])\n+    port_specific_symbol_files=\"\\$(top_srcdir)/config/os/gnu-linux/ldbl-extra.ver\"\n+  fi\n+esac\n+GLIBCXX_CONDITIONAL(GLIBCXX_LDBL_COMPAT, test $ac_ldbl_compat = yes)\n+\n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n GLIBCXX_CONFIGURE_TESTSUITE\n "}, {"sha": "23b94a3aa0ef712254fda6c1c5db31cbd24a1a6c", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -865,13 +865,19 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-namespace-version\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tnsa_version=`cat stamp-namespace-version` ;\\\n+\tldbl_compat='' ;\\\n+\tgrep \"^[ \t]*#[ \t]*define[ \t][ \t]*_GLIBCXX_LONG_DOUBLE_COMPAT[ \t][ \t]*1[ \t]*$$\" \\\n+\t${CONFIG_HEADER} > /dev/null 2>&1 \\\n+\t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n \t-e \"s,define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION, define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION $$nsa_version,\" \\\n+\t-e \"$$ldbl_compat\" \\\n             < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n+\t    -e '/[ \t]_GLIBCXX_LONG_DOUBLE_COMPAT[ \t]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\\n \techo \"#endif // _CXXCONFIG_\" >> $@"}, {"sha": "c04a598d88d59dfeba5a0c9b550a8d66ffffd666", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -122,6 +122,8 @@ GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n+GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n@@ -1243,13 +1245,19 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-namespace-version\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tnsa_version=`cat stamp-namespace-version` ;\\\n+\tldbl_compat='' ;\\\n+\tgrep \"^[ \t]*#[ \t]*define[ \t][ \t]*_GLIBCXX_LONG_DOUBLE_COMPAT[ \t][ \t]*1[ \t]*$$\" \\\n+\t${CONFIG_HEADER} > /dev/null 2>&1 \\\n+\t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n \t-e \"s,define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION, define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION $$nsa_version,\" \\\n+\t-e \"$$ldbl_compat\" \\\n             < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n+\t    -e '/[ \t]_GLIBCXX_LONG_DOUBLE_COMPAT[ \t]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\\n \techo \"#endif // _CXXCONFIG_\" >> $@"}, {"sha": "a6a154a8cbe9d5dc1c0e67660f80201c24982a0c", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Predefined symbols and macros -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -129,6 +129,24 @@ namespace std\n #endif\n #endif\n \n+/* Define if compatibility should be provided for -mlong-double-64. */\n+#undef _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+// XXX GLIBCXX_ABI Deprecated\n+// Namespace associations for long double 128 mode.\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+# define _GLIBCXX_LDBL_NAMESPACE __gnu_cxx_ldbl128::\n+# define _GLIBCXX_BEGIN_LDBL_NAMESPACE namespace __gnu_cxx_ldbl128 {\n+# define _GLIBCXX_END_LDBL_NAMESPACE }\n+  namespace __gnu_cxx_ldbl128 { }\n+  using namespace __gnu_cxx_ldbl128 __attribute__((__strong__));\n+#else\n+# define _GLIBCXX_LDBL_NAMESPACE\n+# define _GLIBCXX_BEGIN_LDBL_NAMESPACE\n+# define _GLIBCXX_END_LDBL_NAMESPACE\n+#endif\n+_GLIBCXX_END_NAMESPACE\n \n // Allow use of \"export template.\" This is currently not a feature\n // that g++ supports."}, {"sha": "538fa5183504e2a4c8bc66a413cbc571853e25af", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1910,6 +1910,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       ~numpunct_byname() { }\n     };\n \n+_GLIBCXX_BEGIN_LDBL_NAMESPACE\n   /**\n    *  @brief  Facet for parsing number strings.\n    *\n@@ -2176,13 +2177,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,\n \t     double&) const;\n \n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      virtual iter_type\n+      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,\n+\t       double&) const;\n+#else\n       virtual iter_type\n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,\n \t     long double&) const;\n+#endif\n \n       virtual iter_type\n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,\n \t     void*&) const;\n+\n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      virtual iter_type\n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,\n+\t     long double&) const;\n+#endif\n       //@}\n     };\n \n@@ -2438,17 +2453,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       virtual iter_type\n       do_put(iter_type, ios_base&, char_type __fill, double __v) const;\n \n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      virtual iter_type\n+      __do_put(iter_type, ios_base&, char_type __fill, double __v) const;\n+#else\n       virtual iter_type\n       do_put(iter_type, ios_base&, char_type __fill, long double __v) const;\n+#endif\n \n       virtual iter_type\n       do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;\n+\n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      virtual iter_type\n+      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;\n+#endif\n       //@}\n     };\n \n   template <typename _CharT, typename _OutIter>\n     locale::id num_put<_CharT, _OutIter>::id;\n \n+_GLIBCXX_END_LDBL_NAMESPACE\n \n   /**\n    *  @brief  Facet for localized string comparison.\n@@ -3953,6 +3981,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, bool _Intl>\n     const bool moneypunct_byname<_CharT, _Intl>::intl;\n \n+_GLIBCXX_BEGIN_LDBL_NAMESPACE\n   /**\n    *  @brief  Facet for parsing monetary amounts.\n    *\n@@ -4064,9 +4093,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  value.  This function is a hook for derived classes to change the\n        *  value returned.  @see get() for details.\n        */\n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      virtual iter_type\n+      __do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n+\t       ios_base::iostate& __err, double& __units) const;\n+#else\n       virtual iter_type\n       do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n \t     ios_base::iostate& __err, long double& __units) const;\n+#endif\n \n       /**\n        *  @brief  Read and parse a monetary value.\n@@ -4079,6 +4115,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n \t     ios_base::iostate& __err, string_type& __digits) const;\n \n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      virtual iter_type\n+      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n+\t     ios_base::iostate& __err, long double& __units) const;\n+#endif\n+\n       template<bool _Intl>\n         iter_type\n         _M_extract(iter_type __s, iter_type __end, ios_base& __io,\n@@ -4191,9 +4234,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  units  Place to store result of parsing.\n        *  @return  Iterator after writing.\n        */\n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      virtual iter_type\n+      __do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n+\t       double __units) const;\n+#else\n       virtual iter_type\n       do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t     long double __units) const;\n+#endif\n \n       /**\n        *  @brief  Format and output a monetary value.\n@@ -4217,6 +4267,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t     const string_type& __digits) const;\n \n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      virtual iter_type\n+      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n+\t     long double __units) const;\n+#endif\n+\n       template<bool _Intl>\n         iter_type\n         _M_insert(iter_type __s, ios_base& __io, char_type __fill,\n@@ -4226,6 +4283,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, typename _OutIter>\n     locale::id money_put<_CharT, _OutIter>::id;\n \n+_GLIBCXX_END_LDBL_NAMESPACE\n+\n   /**\n    *  @brief  Messages facet base class providing catalog typedef.\n    */"}, {"sha": "5ba955c289eb32c38226c9abdef041ab6f828dec", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 72, "deletions": 10, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -272,6 +272,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __verify_grouping(const char* __grouping, size_t __grouping_size,\n \t\t    const string& __grouping_tmp);\n \n+_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n@@ -446,6 +448,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __beg;\n     }\n \n+_GLIBCXX_END_LDBL_NAMESPACE\n+\n   template<typename _ValueT>\n     struct __to_unsigned_type\n     { typedef _ValueT __type; };\n@@ -460,6 +464,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { typedef unsigned long long __type; };\n #endif\n \n+_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+\n   template<typename _CharT, typename _InIter>\n     template<typename _ValueT>\n       _InIter\n@@ -772,6 +778,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __beg;\n     }\n \n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+  template<typename _CharT, typename _InIter>\n+    _InIter\n+    num_get<_CharT, _InIter>::\n+    __do_get(iter_type __beg, iter_type __end, ios_base& __io,\n+\t     ios_base::iostate& __err, double& __v) const\n+    {\n+      string __xtrc;\n+      __xtrc.reserve(32);\n+      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\n+      return __beg;\n+    }\n+#endif\n+\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n@@ -822,6 +843,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __len = static_cast<int>(__w);\n     }\n \n+_GLIBCXX_END_LDBL_NAMESPACE\n+\n   // Forwarding functions to peel signed from unsigned integer types and\n   // either cast or compute the absolute value for the former, depending\n   // on __basefield.\n@@ -911,6 +934,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __bufend - __buf;\n     }\n \n+_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+\n   template<typename _CharT, typename _OutIter>\n     void\n     num_put<_CharT, _OutIter>::\n@@ -1233,6 +1258,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const\n     { return _M_insert_float(__s, __io, __fill, char(), __v); }\n \n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+  template<typename _CharT, typename _OutIter>\n+    _OutIter\n+    num_put<_CharT, _OutIter>::\n+    __do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const\n+    { return _M_insert_float(__s, __io, __fill, char(), __v); }\n+#endif\n+\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     num_put<_CharT, _OutIter>::\n@@ -1474,6 +1507,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn __beg;\n       }\n \n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+  template<typename _CharT, typename _InIter>\n+    _InIter\n+    money_get<_CharT, _InIter>::\n+    __do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,\n+\t     ios_base::iostate& __err, double& __units) const\n+    {\n+      string __str;\n+      if (__intl)\n+\t__beg = _M_extract<true>(__beg, __end, __io, __err, __str);\n+      else\n+\t__beg = _M_extract<false>(__beg, __end, __io, __err, __str);\n+      std::__convert_to_v(__str.c_str(), __units, __err, _S_get_c_locale());\n+      return __beg;\n+    }\n+#endif\n+\n   template<typename _CharT, typename _InIter>\n     _InIter\n     money_get<_CharT, _InIter>::\n@@ -1678,7 +1728,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t__io.width(0);\n \treturn __s;    \n       }\n-  \n+\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+  template<typename _CharT, typename _OutIter>\n+    _OutIter\n+    money_put<_CharT, _OutIter>::\n+    __do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n+\t     double __units) const\n+    {\n+      return this->do_put(__s, __intl, __io, __fill, (long double) __units);\n+    }\n+#endif\n+\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     money_put<_CharT, _OutIter>::\n@@ -1726,6 +1787,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return __intl ? _M_insert<true>(__s, __io, __fill, __digits)\n \t            : _M_insert<false>(__s, __io, __fill, __digits); }\n \n+_GLIBCXX_END_LDBL_NAMESPACE\n \n   // NB: Not especially useful. Without an ios_base object or some\n   // kind of locale reference, we are left clawing at the air where\n@@ -2511,12 +2573,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template class moneypunct<char, true>;\n   extern template class moneypunct_byname<char, false>;\n   extern template class moneypunct_byname<char, true>;\n-  extern template class money_get<char>;\n-  extern template class money_put<char>;\n+  extern template class _GLIBCXX_LDBL_NAMESPACE money_get<char>;\n+  extern template class _GLIBCXX_LDBL_NAMESPACE money_put<char>;\n   extern template class numpunct<char>;\n   extern template class numpunct_byname<char>;\n-  extern template class num_get<char>;\n-  extern template class num_put<char>;\n+  extern template class _GLIBCXX_LDBL_NAMESPACE num_get<char>;\n+  extern template class _GLIBCXX_LDBL_NAMESPACE num_put<char>;\n   extern template class __timepunct<char>;\n   extern template class time_put<char>;\n   extern template class time_put_byname<char>;\n@@ -2638,12 +2700,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template class moneypunct<wchar_t, true>;\n   extern template class moneypunct_byname<wchar_t, false>;\n   extern template class moneypunct_byname<wchar_t, true>;\n-  extern template class money_get<wchar_t>;\n-  extern template class money_put<wchar_t>;\n+  extern template class _GLIBCXX_LDBL_NAMESPACE money_get<wchar_t>;\n+  extern template class _GLIBCXX_LDBL_NAMESPACE money_put<wchar_t>;\n   extern template class numpunct<wchar_t>;\n   extern template class numpunct_byname<wchar_t>;\n-  extern template class num_get<wchar_t>;\n-  extern template class num_put<wchar_t>;\n+  extern template class _GLIBCXX_LDBL_NAMESPACE num_get<wchar_t>;\n+  extern template class _GLIBCXX_LDBL_NAMESPACE num_put<wchar_t>;\n   extern template class __timepunct<wchar_t>;\n   extern template class time_put<wchar_t>;\n   extern template class time_put_byname<wchar_t>;"}, {"sha": "2290fbc07c2e00b413bb7f609f6b429a99ed3795", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -129,10 +129,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class codecvt_byname;\n \n   // 22.2.2 and 22.2.3 numeric\n+_GLIBCXX_BEGIN_LDBL_NAMESPACE\n   template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >\n     class num_get;\n   template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n     class num_put;\n+_GLIBCXX_END_LDBL_NAMESPACE\n   template<typename _CharT> class numpunct;\n   template<typename _CharT> class numpunct_byname;\n \n@@ -155,10 +157,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // 22.2.6 money\n   class money_base;\n+_GLIBCXX_BEGIN_LDBL_NAMESPACE\n   template<typename _CharT, typename _InIter =  istreambuf_iterator<_CharT> >\n     class money_get;\n   template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n     class money_put;\n+_GLIBCXX_END_LDBL_NAMESPACE\n   template<typename _CharT, bool _Intl = false>\n     class moneypunct;\n   template<typename _CharT, bool _Intl = false>"}, {"sha": "c14bf144840741fcf2146085e2bfd80c27419f0f", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -137,6 +137,8 @@ GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n+GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@"}, {"sha": "5ae37a04529796e8847aa03e816dac34d06bef38", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -178,6 +178,8 @@ GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n+GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@"}, {"sha": "3a91097784c2e753120e9f84dbc804a617479401", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -122,6 +122,8 @@ GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n+GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@"}, {"sha": "b3ada6aeddb3eabb96e92df25202caa484660f9a", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -33,10 +33,15 @@ libstdc++-symbols.ver:  ${glibcxx_srcdir}/$(SYMVER_FILE) \\\n \t\t$(port_specific_symbol_files)\n \tcp ${glibcxx_srcdir}/$(SYMVER_FILE) ./libstdc++-symbols.ver\n \tif test \"x$(port_specific_symbol_files)\" != x; then \\\n-\t  sed -n '1,/DO NOT DELETE/p' $@ > tmp.top; \\\n-\t  sed -n '/DO NOT DELETE/,$$p' $@ > tmp.bottom; \\\n-\t  cat tmp.top $(port_specific_symbol_files) tmp.bottom > $@; \\\n-\t  rm tmp.top tmp.bottom; \\\n+\t  if grep '^# Appended to version file.' \\\n+\t       $(port_specific_symbol_files) /dev/null > /dev/null 2>&1; then \\\n+\t    cat $(port_specific_symbol_files) >> $@; \\\n+\t  else \\\n+\t    sed -n '1,/DO NOT DELETE/p' $@ > tmp.top; \\\n+\t    sed -n '/DO NOT DELETE/,$$p' $@ > tmp.bottom; \\\n+\t    cat tmp.top $(port_specific_symbol_files) tmp.bottom > $@; \\\n+\t    rm tmp.top tmp.bottom; \\\n+\t  fi; \\\n \tfi\n \n if ENABLE_SYMVERS_GNU\n@@ -115,6 +120,12 @@ c++locale.cc: ${glibcxx_srcdir}/$(CLOCALE_CC)\n basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_CC) ./$@ || true\n \n+if GLIBCXX_LDBL_COMPAT\n+ldbl_compat_sources = compatibility-ldbl.cc\n+else\n+ldbl_compat_sources =\n+endif\n+\n # Sources present in the src directory.\n sources = \\\n \tbitmap_allocator.cc \\\n@@ -162,7 +173,8 @@ sources = \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\\n \t${host_sources} \\\n-\t${host_sources_extra}\n+\t${host_sources_extra} \\\n+\t${ldbl_compat_sources}\n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n \n@@ -193,6 +205,15 @@ concept-inst.lo: concept-inst.cc\n concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n+if GLIBCXX_LDBL_COMPAT\n+# Use special rules for compatibility-ldbl.cc compilation, as we need to\n+# pass -mlong-double-64.\n+compatibility-ldbl.lo: compatibility-ldbl.cc\n+\t$(LTCXXCOMPILE) -mlong-double-64 -c $<\n+compatibility-ldbl.o: compatibility-ldbl.cc\n+\t$(CXXCOMPILE) -mlong-double-64 -c $<\n+endif\n+\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after"}, {"sha": "c6e412e3c5348b8d1d093750f894b259d9689a1a", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -59,11 +59,27 @@ am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;\n am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\"\n toolexeclibLTLIBRARIES_INSTALL = $(INSTALL)\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n+am__libstdc___la_SOURCES_DIST = bitmap_allocator.cc pool_allocator.cc \\\n+\tmt_allocator.cc codecvt.cc compatibility.cc complex_io.cc \\\n+\tctype.cc debug.cc debug_list.cc functexcept.cc \\\n+\tglobals_locale.cc globals_io.cc ios.cc ios_failure.cc \\\n+\tios_init.cc ios_locale.cc limits.cc list.cc locale.cc \\\n+\tlocale_init.cc locale_facets.cc localename.cc stdexcept.cc \\\n+\tstrstream.cc tree.cc allocator-inst.cc concept-inst.cc \\\n+\tfstream-inst.cc ext-inst.cc ios-inst.cc iostream-inst.cc \\\n+\tistream-inst.cc istream.cc locale-inst.cc locale-misc-inst.cc \\\n+\tmisc-inst.cc ostream-inst.cc sstream-inst.cc streambuf-inst.cc \\\n+\tstreambuf.cc string-inst.cc valarray-inst.cc wlocale-inst.cc \\\n+\twstring-inst.cc atomicity.cc codecvt_members.cc \\\n+\tcollate_members.cc ctype_members.cc messages_members.cc \\\n+\tmonetary_members.cc numeric_members.cc time_members.cc \\\n+\tbasic_file.cc c++locale.cc compatibility-ldbl.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n am__objects_2 = basic_file.lo c++locale.lo\n-am__objects_3 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n+@GLIBCXX_LDBL_COMPAT_TRUE@am__objects_3 = compatibility-ldbl.lo\n+am__objects_4 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tcodecvt.lo compatibility.lo complex_io.lo ctype.lo debug.lo \\\n \tdebug_list.lo functexcept.lo globals_locale.lo globals_io.lo \\\n \tios.lo ios_failure.lo ios_init.lo ios_locale.lo limits.lo \\\n@@ -74,8 +90,9 @@ am__objects_3 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tlocale-inst.lo locale-misc-inst.lo misc-inst.lo \\\n \tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n \tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n-\twstring-inst.lo $(am__objects_1) $(am__objects_2)\n-am_libstdc___la_OBJECTS = $(am__objects_3)\n+\twstring-inst.lo $(am__objects_1) $(am__objects_2) \\\n+\t$(am__objects_3)\n+am_libstdc___la_OBJECTS = $(am__objects_4)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n depcomp =\n@@ -84,7 +101,7 @@ CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n \t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n SOURCES = $(libstdc___la_SOURCES)\n-DIST_SOURCES = $(libstdc___la_SOURCES)\n+DIST_SOURCES = $(am__libstdc___la_SOURCES_DIST)\n ETAGS = etags\n CTAGS = ctags\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n@@ -156,6 +173,8 @@ GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n+GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n@@ -308,6 +327,8 @@ host_sources_extra = \\\n \tbasic_file.cc \\\n \tc++locale.cc\n \n+@GLIBCXX_LDBL_COMPAT_FALSE@ldbl_compat_sources = \n+@GLIBCXX_LDBL_COMPAT_TRUE@ldbl_compat_sources = compatibility-ldbl.cc\n \n # Sources present in the src directory.\n sources = \\\n@@ -356,7 +377,8 @@ sources = \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\\n \t${host_sources} \\\n-\t${host_sources_extra}\n+\t${host_sources_extra} \\\n+\t${ldbl_compat_sources}\n \n libstdc___la_SOURCES = $(sources)\n libstdc___la_LIBADD = \\\n@@ -681,10 +703,15 @@ uninstall-am: uninstall-info-am uninstall-toolexeclibLTLIBRARIES\n @ENABLE_SYMVERS_TRUE@\t\t$(port_specific_symbol_files)\n @ENABLE_SYMVERS_TRUE@\tcp ${glibcxx_srcdir}/$(SYMVER_FILE) ./libstdc++-symbols.ver\n @ENABLE_SYMVERS_TRUE@\tif test \"x$(port_specific_symbol_files)\" != x; then \\\n-@ENABLE_SYMVERS_TRUE@\t  sed -n '1,/DO NOT DELETE/p' $@ > tmp.top; \\\n-@ENABLE_SYMVERS_TRUE@\t  sed -n '/DO NOT DELETE/,$$p' $@ > tmp.bottom; \\\n-@ENABLE_SYMVERS_TRUE@\t  cat tmp.top $(port_specific_symbol_files) tmp.bottom > $@; \\\n-@ENABLE_SYMVERS_TRUE@\t  rm tmp.top tmp.bottom; \\\n+@ENABLE_SYMVERS_TRUE@\t  if grep '^# Appended to version file.' \\\n+@ENABLE_SYMVERS_TRUE@\t       $(port_specific_symbol_files) /dev/null > /dev/null 2>&1; then \\\n+@ENABLE_SYMVERS_TRUE@\t    cat $(port_specific_symbol_files) >> $@; \\\n+@ENABLE_SYMVERS_TRUE@\t  else \\\n+@ENABLE_SYMVERS_TRUE@\t    sed -n '1,/DO NOT DELETE/p' $@ > tmp.top; \\\n+@ENABLE_SYMVERS_TRUE@\t    sed -n '/DO NOT DELETE/,$$p' $@ > tmp.bottom; \\\n+@ENABLE_SYMVERS_TRUE@\t    cat tmp.top $(port_specific_symbol_files) tmp.bottom > $@; \\\n+@ENABLE_SYMVERS_TRUE@\t    rm tmp.top tmp.bottom; \\\n+@ENABLE_SYMVERS_TRUE@\t  fi; \\\n @ENABLE_SYMVERS_TRUE@\tfi\n @ENABLE_SYMVERS_DARWIN_TRUE@@ENABLE_SYMVERS_TRUE@libstdc++-symbols.explist : libstdc++-symbols.ver \\\n @ENABLE_SYMVERS_DARWIN_TRUE@@ENABLE_SYMVERS_TRUE@\t\t${glibcxx_srcdir}/scripts/make_exports.pl \\\n@@ -737,6 +764,13 @@ concept-inst.lo: concept-inst.cc\n concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n+# Use special rules for compatibility-ldbl.cc compilation, as we need to\n+# pass -mlong-double-64.\n+@GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc\n+@GLIBCXX_LDBL_COMPAT_TRUE@\t$(LTCXXCOMPILE) -mlong-double-64 -c $<\n+@GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.o: compatibility-ldbl.cc\n+@GLIBCXX_LDBL_COMPAT_TRUE@\t$(CXXCOMPILE) -mlong-double-64 -c $<\n+\n # Added bits to build debug library.\n @GLIBCXX_BUILD_DEBUG_TRUE@all-local: build_debug\n @GLIBCXX_BUILD_DEBUG_TRUE@install-data-local: install_debug"}, {"sha": "108790efabc6bbd493f3502ab6ac86f8a3d79654", "filename": "libstdc++-v3/src/compatibility-ldbl.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-ldbl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-ldbl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-ldbl.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -0,0 +1,73 @@\n+// Compatibility symbols for -mlong-double-64 compatibility -*- C++ -*-\n+\n+// Copyright (C) 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <locale>\n+\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+#ifdef __LONG_DOUBLE_128__\n+#error \"compatibility-ldbl.cc must be compiled with -mlong-double-64\"\n+#endif\n+\n+namespace std\n+{\n+#define C char\n+  template class num_get<C, istreambuf_iterator<C> >;\n+  template class num_put<C, ostreambuf_iterator<C> >;\n+  template class money_get<C, istreambuf_iterator<C> >;\n+  template class money_put<C, ostreambuf_iterator<C> >;\n+  template const num_put<C>& use_facet<num_put<C> >(const locale&);\n+  template const num_get<C>& use_facet<num_get<C> >(const locale&);\n+  template const money_put<C>& use_facet<money_put<C> >(const locale&);\n+  template const money_get<C>& use_facet<money_get<C> >(const locale&);\n+  template bool has_facet<num_put<C> >(const locale&);\n+  template bool has_facet<num_get<C> >(const locale&);\n+  template bool has_facet<money_put<C> >(const locale&);\n+  template bool has_facet<money_get<C> >(const locale&);\n+#undef C\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+#define C wchar_t\n+  template class num_get<C, istreambuf_iterator<C> >;\n+  template class num_put<C, ostreambuf_iterator<C> >;\n+  template class money_get<C, istreambuf_iterator<C> >;\n+  template class money_put<C, ostreambuf_iterator<C> >;\n+  template const num_put<C>& use_facet<num_put<C> >(const locale&);\n+  template const num_get<C>& use_facet<num_get<C> >(const locale&);\n+  template const money_put<C>& use_facet<money_put<C> >(const locale&);\n+  template const money_get<C>& use_facet<money_get<C> >(const locale&);\n+  template bool has_facet<num_put<C> >(const locale&);\n+  template bool has_facet<num_get<C> >(const locale&);\n+  template bool has_facet<money_put<C> >(const locale&);\n+  template bool has_facet<money_get<C> >(const locale&);\n+#undef C\n+#endif\n+}\n+\n+#endif"}, {"sha": "3353ba4f5a041d405223e22a9ed03b7ecf5502c9", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 105, "deletions": 2, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for previous versions -*- C++ -*-\n \n-// Copyright (C) 2005\n+// Copyright (C) 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -51,6 +51,7 @@\n #include <istream>\n #include <fstream>\n #include <sstream>\n+#include <cmath>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -467,11 +468,113 @@ _GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter15_M_print_stringEPKc\n _ZNK11__gnu_debug16_Error_formatter15_M_print_stringEPKc, \\\n GLIBCXX_3.4)\n \n+// gcc-4.1.0\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+#define _GLIBCXX_MATHL_WRAPPER(name, argdecl, args, ver) \\\n+extern \"C\" double\t\t\t\t\t\t\\\n+__ ## name ## l_wrapper argdecl\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return name args;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+asm (\".symver __\" #name \"l_wrapper, \" #name \"l@\" #ver)\n \n+#define _GLIBCXX_MATHL_WRAPPER1(name, ver) \\\n+  _GLIBCXX_MATHL_WRAPPER (name, (double x), (x), ver)\n+\n+#define _GLIBCXX_MATHL_WRAPPER2(name, ver) \\\n+  _GLIBCXX_MATHL_WRAPPER (name, (double x, double y), (x, y), ver)\n+\n+#ifdef _GLIBCXX_HAVE_ACOSL\n+_GLIBCXX_MATHL_WRAPPER1 (acos, GLIBCXX_3.4.3);\n+#endif\n+#ifdef _GLIBCXX_HAVE_ASINL\n+_GLIBCXX_MATHL_WRAPPER1 (asin, GLIBCXX_3.4.3);\n+#endif\n+#ifdef _GLIBCXX_HAVE_ATAN2L\n+_GLIBCXX_MATHL_WRAPPER2 (atan2, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_ATANL\n+_GLIBCXX_MATHL_WRAPPER1 (atan, GLIBCXX_3.4.3);\n+#endif\n+#ifdef _GLIBCXX_HAVE_CEILL\n+_GLIBCXX_MATHL_WRAPPER1 (ceil, GLIBCXX_3.4.3);\n+#endif\n+#ifdef _GLIBCXX_HAVE_COSHL\n+_GLIBCXX_MATHL_WRAPPER1 (cosh, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_COSL\n+_GLIBCXX_MATHL_WRAPPER1 (cos, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_EXPL\n+_GLIBCXX_MATHL_WRAPPER1 (exp, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_FLOORL\n+_GLIBCXX_MATHL_WRAPPER1 (floor, GLIBCXX_3.4.3);\n+#endif\n+#ifdef _GLIBCXX_HAVE_FMODL\n+_GLIBCXX_MATHL_WRAPPER2 (fmod, GLIBCXX_3.4.3);\n+#endif\n+#ifdef _GLIBCXX_HAVE_FREXPL\n+_GLIBCXX_MATHL_WRAPPER (frexp, (double x, int *y), (x, y), GLIBCXX_3.4.3);\n+#endif\n+#ifdef _GLIBCXX_HAVE_HYPOTL\n+_GLIBCXX_MATHL_WRAPPER2 (hypot, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_LDEXPL\n+_GLIBCXX_MATHL_WRAPPER (ldexp, (double x, int y), (x, y), GLIBCXX_3.4.3);\n #endif\n+#ifdef _GLIBCXX_HAVE_LOG10L\n+_GLIBCXX_MATHL_WRAPPER1 (log10, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_LOGL\n+_GLIBCXX_MATHL_WRAPPER1 (log, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_MODFL\n+_GLIBCXX_MATHL_WRAPPER (modf, (double x, double *y), (x, y), GLIBCXX_3.4.3);\n+#endif\n+#ifdef _GLIBCXX_HAVE_POWL\n+_GLIBCXX_MATHL_WRAPPER2 (pow, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_SINHL\n+_GLIBCXX_MATHL_WRAPPER1 (sinh, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_SINL\n+_GLIBCXX_MATHL_WRAPPER1 (sin, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_SQRTL\n+_GLIBCXX_MATHL_WRAPPER1 (sqrt, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_TANHL\n+_GLIBCXX_MATHL_WRAPPER1 (tanh, GLIBCXX_3.4);\n+#endif\n+#ifdef _GLIBCXX_HAVE_TANL\n+_GLIBCXX_MATHL_WRAPPER1 (tan, GLIBCXX_3.4);\n+#endif\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+#endif\n+\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+extern void *_ZTVN10__cxxabiv123__fundamental_type_infoE[];\n+extern void *_ZTVN10__cxxabiv119__pointer_type_infoE[];\n+extern __attribute__((used, weak)) const char _ZTSe[2] = \"e\";\n+extern __attribute__((used, weak)) const char _ZTSPe[3] = \"Pe\";\n+extern __attribute__((used, weak)) const char _ZTSPKe[4] = \"PKe\";\n+extern __attribute__((used, weak)) const void *_ZTIe[2]\n+  = { (void *) &_ZTVN10__cxxabiv123__fundamental_type_infoE[2],\n+      (void *) _ZTSe };\n+extern __attribute__((used, weak)) const void *_ZTIPe[4]\n+  = { (void *) &_ZTVN10__cxxabiv119__pointer_type_infoE[2],\n+      (void *) _ZTSPe, (void *) 0L, (void *) _ZTIe };\n+extern __attribute__((used, weak)) const void *_ZTIPKe[4]\n+  = { (void *) &_ZTVN10__cxxabiv119__pointer_type_infoE[2],\n+      (void *) _ZTSPKe, (void *) 1L, (void *) _ZTIe };\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+\n \n #ifdef _GLIBCXX_SYMVER_DARWIN\n-#if (defined(__ppc__) || defined (__ppc64__)) && defined (PIC)\n+#if (defined(__ppc__) || defined(__ppc64__)) && defined(PIC)\n /* __eprintf shouldn't have been made visible from libstdc++, or\n    anywhere, but on Mac OS X 10.4 it was defined in\n    libstdc++.6.0.3.dylib; so on that platform we have to keep defining"}, {"sha": "e65a22d8457e3a38f6cb08bb94b385f687d6b905", "filename": "libstdc++-v3/src/complex_io.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- complex number classes.\n \n-// Copyright (C) 2000, 2001, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -92,3 +92,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif //_GLIBCXX_USE_WCHAR_T\n \n _GLIBCXX_END_NAMESPACE\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n+\n+_GLIBCXX_LDBL_COMPAT (_ZStlsIdcSt11char_traitsIcEERSt13basic_ostreamIT0_T1_ES6_RKSt7complexIT_E,\n+\t\t      _ZStlsIecSt11char_traitsIcEERSt13basic_ostreamIT0_T1_ES6_RKSt7complexIT_E);\n+_GLIBCXX_LDBL_COMPAT (_ZStlsIdwSt11char_traitsIwEERSt13basic_ostreamIT0_T1_ES6_RKSt7complexIT_E,\n+\t\t      _ZStlsIewSt11char_traitsIwEERSt13basic_ostreamIT0_T1_ES6_RKSt7complexIT_E);\n+_GLIBCXX_LDBL_COMPAT (_ZStrsIdcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E,\n+\t\t      _ZStrsIecSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E);\n+_GLIBCXX_LDBL_COMPAT (_ZStrsIdwSt11char_traitsIwEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E,\n+\t\t      _ZStrsIewSt11char_traitsIwEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E);\n+\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "7140ab27ba128fc962bc9ab05f8c4a4d75b809d0", "filename": "libstdc++-v3/src/istream-inst.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -96,3 +96,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n \n _GLIBCXX_END_NAMESPACE\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n+_GLIBCXX_LDBL_COMPAT (_ZNSirsERd, _ZNSirsERe);\n+_GLIBCXX_LDBL_COMPAT (_ZNSt13basic_istreamIwSt11char_traitsIwEErsERd,\n+\t\t      _ZNSt13basic_istreamIwSt11char_traitsIwEErsERe);\n+_GLIBCXX_LDBL_COMPAT (_ZNSi10_M_extractIdEERSiRT_,\n+\t\t      _ZNSi10_M_extractIeEERSiRT_);\n+_GLIBCXX_LDBL_COMPAT (_ZNSt13basic_istreamIwSt11char_traitsIwEE10_M_extractIdEERS2_RT_,\n+\t\t      _ZNSt13basic_istreamIwSt11char_traitsIwEE10_M_extractIeEERS2_RT_);\n+\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "5771bc32a7caebad3bf2f08eb5e63048f932dc30", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Static data members of -*- C++ -*- numeric_limits classes\n \n-// Copyright (C) 1999, 2001, 2002, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -448,3 +448,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const float_round_style numeric_limits<long double>::round_style;\n \n _GLIBCXX_END_NAMESPACE\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+#define _GLIBCXX_NUM_LIM_COMPAT(type, member, len) \\\n+  extern \"C\" type _ZNSt14numeric_limitsIeE ## len ## member ## E \\\n+  __attribute__ ((alias (\"_ZNSt14numeric_limitsIdE\" #len #member \"E\")))\n+_GLIBCXX_NUM_LIM_COMPAT (bool, is_specialized, 14);\n+_GLIBCXX_NUM_LIM_COMPAT (int, digits, 6);\n+_GLIBCXX_NUM_LIM_COMPAT (int, digits10, 8);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, is_signed, 9);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, is_integer, 10);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, is_exact, 8);\n+_GLIBCXX_NUM_LIM_COMPAT (int, radix, 5);\n+_GLIBCXX_NUM_LIM_COMPAT (int, min_exponent, 12);\n+_GLIBCXX_NUM_LIM_COMPAT (int, min_exponent10, 14);\n+_GLIBCXX_NUM_LIM_COMPAT (int, max_exponent, 12);\n+_GLIBCXX_NUM_LIM_COMPAT (int, max_exponent10, 14);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, has_infinity, 12);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, has_quiet_NaN, 13);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, has_signaling_NaN, 17);\n+_GLIBCXX_NUM_LIM_COMPAT (std::float_denorm_style, has_denorm, 10);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, has_denorm_loss, 15);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, is_iec559, 9);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, is_bounded, 10);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, is_modulo, 9);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, traps, 5);\n+_GLIBCXX_NUM_LIM_COMPAT (bool, tinyness_before, 15);\n+_GLIBCXX_NUM_LIM_COMPAT (std::float_round_style, round_style, 11);\n+\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "790e6146943b82917c9360d4f72549d4606c3715", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -37,6 +37,7 @@\n // Instantiation configuration.\n #ifndef C\n # define C char\n+# define C_is_char\n #endif\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -48,6 +49,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template struct __moneypunct_cache<C, true>;\n   template class moneypunct_byname<C, false>;\n   template class moneypunct_byname<C, true>;\n+_GLIBCXX_BEGIN_LDBL_NAMESPACE\n   template class money_get<C, istreambuf_iterator<C> >;\n   template class money_put<C, ostreambuf_iterator<C> >;\n   template\n@@ -73,11 +75,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     money_put<C, ostreambuf_iterator<C> >::\n     _M_insert<false>(ostreambuf_iterator<C>, ios_base&, C, \n \t\t     const string_type&) const;\n+_GLIBCXX_END_LDBL_NAMESPACE\n \n   // numpunct, numpunct_byname, num_get, and num_put\n   template class numpunct<C>;\n   template struct __numpunct_cache<C>;\n   template class numpunct_byname<C>;\n+_GLIBCXX_BEGIN_LDBL_NAMESPACE\n   template class num_get<C, istreambuf_iterator<C> >;\n   template class num_put<C, ostreambuf_iterator<C> >; \n   template\n@@ -161,7 +165,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     num_put<C, ostreambuf_iterator<C> >::\n     _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char, \n \t\t    long double) const;\n-  \n+_GLIBCXX_END_LDBL_NAMESPACE\n+\n   // time_get and time_put\n   template class __timepunct<C>;\n   template struct __timepunct_cache<C>;\n@@ -315,3 +320,44 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n \n _GLIBCXX_END_NAMESPACE\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined C_is_char\n+\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n+\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIjEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIjEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIlEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIlEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intImEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intImEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intItEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intItEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIxEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIxEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIyEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIyEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIlEES4_S4_RSt8ios_basecT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIlEES3_S3_RSt8ios_basecT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intImEES4_S4_RSt8ios_basecT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intImEES3_S3_RSt8ios_basecT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIxEES4_S4_RSt8ios_basecT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIxEES3_S3_RSt8ios_basecT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIyEES4_S4_RSt8ios_basecT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIyEES3_S3_RSt8ios_basecT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIdEES4_S4_RSt8ios_baseccT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIdEES3_S3_RSt8ios_baseccT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIdEES3_S3_RSt8ios_baseccT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIeEES3_S3_RSt8ios_baseccT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb0EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n+\t\t     _ZNKSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb0EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb1EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n+\t\t     _ZNKSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb1EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb0EEES4_S4_RSt8ios_basecRKSs,\n+\t\t     _ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb0EEES3_S3_RSt8ios_basecRKSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb1EEES4_S4_RSt8ios_basecRKSs,\n+\t\t     _ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb1EEES3_S3_RSt8ios_basecRKSs);\n+\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "8af73596a6bdfb1dbadfc766c015a680c9256bc9", "filename": "libstdc++-v3/src/locale-misc-inst.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Flocale-misc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Flocale-misc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-misc-inst.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2005\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -47,3 +47,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t     const __c_locale&, int);\n \n _GLIBCXX_END_NAMESPACE\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n+\n+# if _GLIBCXX_C_LOCALE_GNU\n+_GLIBCXX_LDBL_COMPAT(_ZSt16__convert_from_vIdEiPciPKcT_RKP15__locale_structi,\n+\t\t     _ZSt16__convert_from_vIeEiPciPKcT_RKP15__locale_structi);\n+# else\n+_GLIBCXX_LDBL_COMPAT(_ZSt16__convert_from_vIdEiPciPKcT_RKPii,\n+\t\t     _ZSt16__convert_from_vIeEiPciPKcT_RKPii);\n+# endif\n+\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "7f54ab85867cf0c15f30d56a9aa78dcc91982d16", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,6 +41,21 @@ namespace __gnu_internal\n   static __glibcxx_mutex_define_initialized(locale_cache_mutex);\n }\n \n+// XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+# define _GLIBCXX_LOC_ID(mangled) extern std::locale::id mangled\n+_GLIBCXX_LOC_ID (_ZNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+_GLIBCXX_LOC_ID (_ZNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+_GLIBCXX_LOC_ID (_ZNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+_GLIBCXX_LOC_ID (_ZNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+# ifdef _GLIBCXX_USE_WCHAR_T\n+_GLIBCXX_LOC_ID (_ZNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+_GLIBCXX_LOC_ID (_ZNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+_GLIBCXX_LOC_ID (_ZNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+_GLIBCXX_LOC_ID (_ZNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+# endif\n+#endif\n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Definitions for static const data members of locale.\n@@ -398,10 +413,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   locale::id::_M_id() const\n   {\n     if (!_M_index)\n-      _M_index = 1 + __gnu_cxx::__exchange_and_add(&_S_refcount, 1);\n+      {\n+\t// XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+\tlocale::id *f = 0;\n+# define _GLIBCXX_SYNC_ID(facet, mangled) \\\n+\tif (this == &::mangled)\t\t\t\t\\\n+\t  f = &facet::id\n+\t_GLIBCXX_SYNC_ID (num_get<char>, _ZNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+\t_GLIBCXX_SYNC_ID (num_put<char>, _ZNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+\t_GLIBCXX_SYNC_ID (money_get<char>, _ZNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+\t_GLIBCXX_SYNC_ID (money_put<char>, _ZNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+# ifdef _GLIBCXX_USE_WCHAR_T\n+\t_GLIBCXX_SYNC_ID (num_get<wchar_t>, _ZNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+\t_GLIBCXX_SYNC_ID (num_put<wchar_t>, _ZNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+\t_GLIBCXX_SYNC_ID (money_get<wchar_t>, _ZNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+\t_GLIBCXX_SYNC_ID (money_put<wchar_t>, _ZNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+# endif\n+\tif (f)\n+\t  _M_index = 1 + f->_M_id();\n+\telse\n+#endif\n+\t  _M_index = 1 + __gnu_cxx::__exchange_and_add(&_S_refcount, 1);\n+      }\n     return _M_index - 1;\n   }\n \n _GLIBCXX_END_NAMESPACE\n-\n-"}, {"sha": "2ea663bfadea9e9f9af6c91f9550d18df4d03d2e", "filename": "libstdc++-v3/src/ostream-inst.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -97,3 +97,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n \n _GLIBCXX_END_NAMESPACE\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n+_GLIBCXX_LDBL_COMPAT (_ZNSolsEd, _ZNSolsEe);\n+_GLIBCXX_LDBL_COMPAT (_ZNSt13basic_ostreamIwSt11char_traitsIwEElsEd,\n+\t\t      _ZNSt13basic_ostreamIwSt11char_traitsIwEElsEe);\n+_GLIBCXX_LDBL_COMPAT (_ZNSo9_M_insertIdEERSoT_,\n+\t\t      _ZNSo9_M_insertIeEERSoT_);\n+_GLIBCXX_LDBL_COMPAT (_ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertIdEERS2_T_,\n+\t\t      _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertIeEERS2_T_);\n+\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "b776cd24c59fa675b83e6df7bd9ce4d04087bc3b", "filename": "libstdc++-v3/src/wlocale-inst.cc", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fwlocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Fsrc%2Fwlocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fwlocale-inst.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,4 +37,45 @@\n #ifdef _GLIBCXX_USE_WCHAR_T\n #define C wchar_t\n #include \"locale-inst.cc\"\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT\n+\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n+\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIjEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIjEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIlEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIlEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intImEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intImEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intItEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intItEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIxEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIxEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIyEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIyEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIlEES4_S4_RSt8ios_basewT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIlEES3_S3_RSt8ios_basewT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intImEES4_S4_RSt8ios_basewT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intImEES3_S3_RSt8ios_basewT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIxEES4_S4_RSt8ios_basewT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIxEES3_S3_RSt8ios_basewT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIyEES4_S4_RSt8ios_basewT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIyEES3_S3_RSt8ios_basewT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIdEES4_S4_RSt8ios_basewcT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIdEES3_S3_RSt8ios_basewcT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIdEES3_S3_RSt8ios_basewcT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIeEES3_S3_RSt8ios_basewcT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb0EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n+\t\t     _ZNKSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb0EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb1EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n+\t\t     _ZNKSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb1EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb0EEES4_S4_RSt8ios_basewRKSbIwS3_SaIwEE,\n+\t\t     _ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb0EEES3_S3_RSt8ios_basewRKSbIwS2_SaIwEE);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb1EEES4_S4_RSt8ios_basewRKSbIwS3_SaIwEE,\n+\t\t     _ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb1EEES3_S3_RSt8ios_basewRKSbIwS2_SaIwEE);\n+\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT\n #endif"}, {"sha": "92c8a027639ea543d8515d8ba82d5de26e690079", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -126,6 +126,8 @@ GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n+GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@"}, {"sha": "56bec9682239f31c4dfc12c390d75fdf310040d9", "filename": "libstdc++-v3/testsuite/testsuite_abi.cc", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6defecc2d32860e29a9de5033fc3810ed64857ae/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc?ref=6defecc2d32860e29a9de5033fc3810ed64857ae", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n \n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n@@ -186,8 +186,11 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.5\");\n       known_versions.push_back(\"GLIBCXX_3.4.6\");\n       known_versions.push_back(\"GLIBCXX_3.4.7\");\n+      known_versions.push_back(\"GLIBCXX_LDBL_3.4\");\n+      known_versions.push_back(\"GLIBCXX_LDBL_3.4.7\");\n       known_versions.push_back(\"CXXABI_1.3\");\n       known_versions.push_back(\"CXXABI_1.3.1\");\n+      known_versions.push_back(\"CXXABI_LDBL_1.3\");\n     }\n   compat_list::iterator begin = known_versions.begin();\n   compat_list::iterator end = known_versions.end();\n@@ -223,9 +226,7 @@ check_version(symbol& test, bool added)\n \t  // New version labels are ok. The rest are not.\n \t  compat_list::iterator it2 = find(begin, end, test.name);\n \t  if (it2 != end)\n-\t    {\n-\t      test.version_status = symbol::compatible;\n-\t    }\n+\t    test.version_status = symbol::compatible;\n \t  else\n \t    test.version_status = symbol::incompatible;\n \t}\n@@ -369,21 +370,23 @@ compare_symbols(const char* baseline_file, const char* test_file,\n \t  added_names.erase(it);\n \t}\n       else\n-\t  missing_names.push_back(what);\n+\tmissing_names.push_back(what);\n     }\n \n   // Check missing names for compatibility.\n   typedef pair<symbol, symbol> symbol_pair;\n   vector<symbol_pair> incompatible;\n-  for (size_t j = 0; j < missing_names.size(); ++j)\n+  const symbol_names::size_type missing_size = missing_names.size();\n+  for (size_t j = 0; j < missing_size; ++j)\n     {\n       symbol& base = baseline_objects[missing_names[j]];\n       base.status = symbol::subtracted;\n       incompatible.push_back(symbol_pair(base, base));\n     }\n \n   // Check shared names for compatibility.\n-  for (size_t k = 0; k < shared_names.size(); ++k)\n+  const symbol_names::size_type shared_size = shared_names.size();\n+  for (size_t k = 0; k < shared_size; ++k)\n     {\n       symbol& base = baseline_objects[shared_names[k]];\n       symbol& test = test_objects[shared_names[k]];\n@@ -393,7 +396,8 @@ compare_symbols(const char* baseline_file, const char* test_file,\n     }\n \n   // Check added names for compatibility.\n-  for (size_t l = 0; l < added_names.size(); ++l)\n+  const symbol_names::size_type added_size = added_names.size();\n+  for (size_t l = 0; l < added_size; ++l)\n     {\n       symbol& test = test_objects[added_names[l]];\n       test.status = symbol::added;\n@@ -459,7 +463,8 @@ create_symbols(const char* file)\n   ifstream ifs(file);\n   if (ifs.is_open())\n     {\n-      // Organize file data into container of symbol objects.\n+      // Organize file data into container of symbol objects, and a\n+      // container of mangled names without versioning information.\n       symbol_names& names = s.first;\n       symbol_objects& objects = s.second;\n       const string empty;\n@@ -468,8 +473,8 @@ create_symbols(const char* file)\n \t{\n \t  symbol tmp;\n \t  tmp.init(line);\n-\t  objects[tmp.raw_name] = tmp;\n-\t  names.push_back(tmp.raw_name);\n+\t  objects[tmp.name] = tmp;\n+\t  names.push_back(tmp.name);\n \t  line = empty;\n \t}\n     }"}]}