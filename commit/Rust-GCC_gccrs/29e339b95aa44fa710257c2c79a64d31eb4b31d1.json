{"sha": "29e339b95aa44fa710257c2c79a64d31eb4b31d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllMzM5Yjk1YWE0NGZhNzEwMjU3YzJjNzlhNjRkMzFlYjRiMzFkMQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2006-05-10T21:54:06Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2006-05-10T21:54:06Z"}, "message": "r113709@merlin: rearnsha | 2006-05-10 22:53:26 +0100\n\n r113709@merlin:  rearnsha | 2006-05-10 22:53:26 +0100\n \t* arm.c (arm_struct_value_rtx): Delete.\n \t(TARGET_STRUCT_VALUE_RTX): Use the default definition.\n \t(arm_init_cumulative_args): Always initialize nregs to zero.\n\nFrom-SVN: r113683", "tree": {"sha": "8c14736a14e0e9df374f231df1c96dd5b0281cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c14736a14e0e9df374f231df1c96dd5b0281cf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29e339b95aa44fa710257c2c79a64d31eb4b31d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e339b95aa44fa710257c2c79a64d31eb4b31d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e339b95aa44fa710257c2c79a64d31eb4b31d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e339b95aa44fa710257c2c79a64d31eb4b31d1/comments", "author": null, "committer": null, "parents": [{"sha": "5ac4f3bb75a7e96a6180eabe1fd274a7318e2e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac4f3bb75a7e96a6180eabe1fd274a7318e2e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac4f3bb75a7e96a6180eabe1fd274a7318e2e08"}], "stats": {"total": 31, "additions": 7, "deletions": 24}, "files": [{"sha": "35226d1350cf53fb88dd05769e71c357e5a05fbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e339b95aa44fa710257c2c79a64d31eb4b31d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e339b95aa44fa710257c2c79a64d31eb4b31d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29e339b95aa44fa710257c2c79a64d31eb4b31d1", "patch": "@@ -1,3 +1,9 @@\n+2006-05-10  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (arm_struct_value_rtx): Delete.\n+\t(TARGET_STRUCT_VALUE_RTX): Use the default definition.\n+\t(arm_init_cumulative_args): Always initialize nregs to zero.\n+\n 2006-05-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/27532"}, {"sha": "66d091a67bba382c793b273a07777763d368399c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e339b95aa44fa710257c2c79a64d31eb4b31d1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e339b95aa44fa710257c2c79a64d31eb4b31d1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=29e339b95aa44fa710257c2c79a64d31eb4b31d1", "patch": "@@ -163,7 +163,6 @@ static void aof_file_start (void);\n static void aof_file_end (void);\n static void aof_asm_init_sections (void);\n #endif\n-static rtx arm_struct_value_rtx (tree, int);\n static void arm_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\ttree, int *, int);\n static bool arm_pass_by_reference (CUMULATIVE_ARGS *,\n@@ -300,9 +299,6 @@ static bool arm_tls_symbol_p (rtx x);\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES arm_arg_partial_bytes\n \n-#undef TARGET_STRUCT_VALUE_RTX\n-#define TARGET_STRUCT_VALUE_RTX arm_struct_value_rtx\n-\n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS arm_setup_incoming_varargs\n \n@@ -2669,7 +2665,7 @@ arm_init_cumulative_args (CUMULATIVE_ARGS *pcum, tree fntype,\n \t\t\t  tree fndecl ATTRIBUTE_UNUSED)\n {\n   /* On the ARM, the offset starts at 0.  */\n-  pcum->nregs = ((fntype && aggregate_value_p (TREE_TYPE (fntype), fntype)) ? 1 : 0);\n+  pcum->nregs = 0;\n   pcum->iwmmxt_nregs = 0;\n   pcum->can_split = true;\n \n@@ -14835,25 +14831,6 @@ arm_output_load_gr (rtx *operands)\n   return \"\";\n }\n \n-static rtx\n-arm_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n-\t\t      int incoming ATTRIBUTE_UNUSED)\n-{\n-#if 0\n-  /* FIXME: The ARM backend has special code to handle structure\n-\t returns, and will reserve its own hidden first argument.  So\n-\t if this macro is enabled a *second* hidden argument will be\n-\t reserved, which will break binary compatibility with old\n-\t toolchains and also thunk handling.  One day this should be\n-\t fixed.  */\n-  return 0;\n-#else\n-  /* Register in which address to store a structure value\n-     is passed to a function.  */\n-  return gen_rtx_REG (Pmode, ARG_REGISTER (1));\n-#endif\n-}\n-\n /* Worker function for TARGET_SETUP_INCOMING_VARARGS.\n \n    On the ARM, PRETEND_SIZE is set in order to have the prologue push the last"}]}