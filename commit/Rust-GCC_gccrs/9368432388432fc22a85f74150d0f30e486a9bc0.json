{"sha": "9368432388432fc22a85f74150d0f30e486a9bc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM2ODQzMjM4ODQzMmZjMjJhODVmNzQxNTBkMGYzMGU0ODZhOWJjMA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2015-04-15T07:24:44Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-04-15T07:24:44Z"}, "message": "rl78.c (rl78_expand_prologue): Mark large stack decrement instruction as being frame related.\n\n\t* config/rl78/rl78.c (rl78_expand_prologue): Mark large stack\n\tdecrement instruction as being frame related.\n\t(rl78_print_operand_1): Handle 'p' modifier to add +0 to HL\n\tbased addresses.\n\tIf zero extending a function address enclose the operation in\n\t%code(...).\n\t(rl78_preferred_reload_class): New function.\n\t(TARGET_PREFERRED_RELOAD_CLASS): Define.\n\t* config/rl78/rl78.md: Remove useless constraints in expanders.\n\t(mulqi3_rl78): Remove + qualifier on input-only operand 1.\n\t(mulhi3_rl78): Likewise.\n\t(mulhi3_g13): Likewise.\n\t(mulsi3_rl78): Likewise.\n\t(es_addr): Move to before the multiply patterns.\n\nFrom-SVN: r222114", "tree": {"sha": "f84e3826cb3bb944318696c72ed5fc631022ae12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f84e3826cb3bb944318696c72ed5fc631022ae12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9368432388432fc22a85f74150d0f30e486a9bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9368432388432fc22a85f74150d0f30e486a9bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9368432388432fc22a85f74150d0f30e486a9bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9368432388432fc22a85f74150d0f30e486a9bc0/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "614d5bd88def9761bdfce33815f5e83cc801dab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614d5bd88def9761bdfce33815f5e83cc801dab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614d5bd88def9761bdfce33815f5e83cc801dab0"}], "stats": {"total": 155, "additions": 110, "deletions": 45}, "files": [{"sha": "e52771f79232dda0d99b1e76a31b1684190c24fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9368432388432fc22a85f74150d0f30e486a9bc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9368432388432fc22a85f74150d0f30e486a9bc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9368432388432fc22a85f74150d0f30e486a9bc0", "patch": "@@ -1,3 +1,20 @@\n+2015-04-15  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78.c (rl78_expand_prologue): Mark large stack\n+\tdecrement instruction as being frame related.\n+\t(rl78_print_operand_1): Handle 'p' modifier to add +0 to HL\n+\tbased addresses.\n+\tIf zero extending a function address enclose the operation in\n+\t%code(...).\n+\t(rl78_preferred_reload_class): New function.\n+\t(TARGET_PREFERRED_RELOAD_CLASS): Define.\n+\t* config/rl78/rl78.md: Remove useless constraints in expanders.\n+\t(mulqi3_rl78): Remove + qualifier on input-only operand 1.\n+\t(mulhi3_rl78): Likewise.\n+\t(mulhi3_g13): Likewise.\n+\t(mulsi3_rl78): Likewise.\n+\t(es_addr): Move to before the multiply patterns.\n+\n 2015-04-15  Alan Modra  <amodra@gmail.com>\n \n \t* function.h (struct emit_status): Delete x_first_insn, x_last_insn"}, {"sha": "a9d5f5aeaa966feb8c9142921d3c202dd7edb76e", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 64, "deletions": 16, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9368432388432fc22a85f74150d0f30e486a9bc0/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9368432388432fc22a85f74150d0f30e486a9bc0/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=9368432388432fc22a85f74150d0f30e486a9bc0", "patch": "@@ -1322,7 +1322,7 @@ rl78_expand_prologue (void)\n \n \t  emit_move_insn (ax, sp);\n \t  emit_insn (gen_subhi3 (ax, ax, GEN_INT (fs)));\n-\t  insn = emit_move_insn (sp, ax);\n+\t  insn = F (emit_move_insn (sp, ax));\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n \t\t\tgen_rtx_SET (SImode, sp,\n \t\t\t\t     gen_rtx_PLUS (HImode, sp, GEN_INT (-fs))));\n@@ -1570,6 +1570,7 @@ rl78_function_arg_boundary (machine_mode mode ATTRIBUTE_UNUSED,\n    e - third QI of an SI (i.e. where the ES register gets values from)\n    E - fourth QI of an SI (i.e. MSB)\n \n+   p - Add +0 to a zero-indexed HL based address.\n */\n \n /* Implements the bulk of rl78_print_operand, below.  We do it this\n@@ -1644,13 +1645,16 @@ rl78_print_operand_1 (FILE * file, rtx op, int letter)\n \t      rl78_print_operand_1 (file, XEXP (XEXP (op, 0), 1), 'u');\n \t      fprintf (file, \"[\");\n \t      rl78_print_operand_1 (file, XEXP (XEXP (op, 0), 0), 0);\n+\t      if (letter == 'p' && GET_CODE (XEXP (op, 0)) == REG)\n+\t\tfprintf (file, \"+0\");\n \t      fprintf (file, \"]\");\n \t    }\n \t  else\n \t    {\n+\t      op = XEXP (op, 0);\n \t      fprintf (file, \"[\");\n-\t      rl78_print_operand_1 (file, XEXP (op, 0), letter);\n-\t      if (letter == 'p' && GET_CODE (XEXP (op, 0)) == REG)\n+\t      rl78_print_operand_1 (file, op, letter);\n+\t      if (letter == 'p' && REG_P (op) && REGNO (op) == 6)\n \t\tfprintf (file, \"+0\");\n \t      fprintf (file, \"]\");\n \t    }\n@@ -1772,15 +1776,41 @@ rl78_print_operand_1 (FILE * file, rtx op, int letter)\n \n       if (GET_CODE (XEXP (op, 0)) == ZERO_EXTEND)\n \t{\n-\t  rl78_print_operand_1 (file, XEXP (op, 1), letter);\n-\t  fprintf (file, \"+\");\n-\t  rl78_print_operand_1 (file, XEXP (op, 0), letter);\n+\t  if (GET_CODE (XEXP (op, 1)) == SYMBOL_REF\n+\t      && SYMBOL_REF_DECL (XEXP (op, 1))\n+\t      && TREE_CODE (SYMBOL_REF_DECL (XEXP (op, 1))) == FUNCTION_DECL)\n+\t    {\n+\t      fprintf (file, \"%%code(\");\n+\t      assemble_name (file, rl78_strip_nonasm_name_encoding (XSTR (XEXP (op, 1), 0)));\n+\t      fprintf (file, \"+\");\n+\t      rl78_print_operand_1 (file, XEXP (op, 0), letter);\n+\t      fprintf (file, \")\");\n+\t    }\n+\t  else\n+\t    {\n+\t      rl78_print_operand_1 (file, XEXP (op, 1), letter);\n+\t      fprintf (file, \"+\");\n+\t      rl78_print_operand_1 (file, XEXP (op, 0), letter);\n+\t    }\n \t}\n       else\n \t{\n-\t  rl78_print_operand_1 (file, XEXP (op, 0), letter);\n-\t  fprintf (file, \"+\");\n-\t  rl78_print_operand_1 (file, XEXP (op, 1), letter);\n+\t  if (GET_CODE (XEXP (op, 0)) == SYMBOL_REF\n+\t      && SYMBOL_REF_DECL (XEXP (op, 0))\n+\t      && TREE_CODE (SYMBOL_REF_DECL (XEXP (op, 0))) == FUNCTION_DECL)\n+\t    {\n+\t      fprintf (file, \"%%code(\");\n+\t      assemble_name (file, rl78_strip_nonasm_name_encoding (XSTR (XEXP (op, 0), 0)));\n+\t      fprintf (file, \"+\");\n+\t      rl78_print_operand_1 (file, XEXP (op, 1), letter);\n+\t      fprintf (file, \")\");\n+\t    }\n+\t  else\n+\t    {\n+\t      rl78_print_operand_1 (file, XEXP (op, 0), letter);\n+\t      fprintf (file, \"+\");\n+\t      rl78_print_operand_1 (file, XEXP (op, 1), letter);\n+\t    }\n \t}\n       if (need_paren)\n \tfprintf (file, \")\");\n@@ -4038,15 +4068,20 @@ rl78_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #undef  TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS rl78_rtx_costs\n \n-static bool rl78_rtx_costs (rtx   x,\n-\t\t\t    int   code,\n-\t\t\t    int   outer_code ATTRIBUTE_UNUSED,\n-\t\t\t    int   opno ATTRIBUTE_UNUSED,\n-\t\t\t    int * total,\n-\t\t\t    bool  speed ATTRIBUTE_UNUSED)\n+static bool\n+rl78_rtx_costs (rtx   x,\n+\t\tint   code,\n+\t\tint   outer_code ATTRIBUTE_UNUSED,\n+\t\tint   opno ATTRIBUTE_UNUSED,\n+\t\tint * total,\n+\t\tbool  speed ATTRIBUTE_UNUSED)\n {\n   if (code == IF_THEN_ELSE)\n-    return COSTS_N_INSNS (10);\n+    {\n+      *total = COSTS_N_INSNS (10);\n+      return true;\n+    }\n+\n   if (GET_MODE (x) == SImode)\n     {\n       switch (code)\n@@ -4508,6 +4543,19 @@ rl78_flags_already_set (rtx op, rtx operand)\n \n   return res;\n }\n+\f\n+#undef  TARGET_PREFERRED_RELOAD_CLASS\n+#define TARGET_PREFERRED_RELOAD_CLASS rl78_preferred_reload_class\n+\n+static reg_class_t\n+rl78_preferred_reload_class (rtx x, reg_class_t rclass)\n+{\n+  if (rclass == NO_REGS)\n+    rclass = V_REGS;\n+\n+  return rclass;\n+}\n+\n \f\n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "258c139c86734f65765c1143853fe047f90695ec", "filename": "gcc/config/rl78/rl78.md", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9368432388432fc22a85f74150d0f30e486a9bc0/gcc%2Fconfig%2Frl78%2Frl78.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9368432388432fc22a85f74150d0f30e486a9bc0/gcc%2Fconfig%2Frl78%2Frl78.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.md?ref=9368432388432fc22a85f74150d0f30e486a9bc0", "patch": "@@ -107,7 +107,7 @@\n )\n \n (define_expand \"eh_return\"\n-  [(match_operand:HI 0 \"\" \"\")]\n+  [(match_operand:HI 0 \"\")]\n   \"\"\n   \"rl78_expand_eh_epilogue (operands[0]);\n    emit_barrier ();\n@@ -169,10 +169,10 @@\n ;; non-immediate as well.\n (define_expand \"nonlocal_goto\"\n   [(set (pc)\n-\t(unspec_volatile [(match_operand 0 \"\" \"\") ;; fp (ignore)\n-\t\t\t  (match_operand 1 \"\" \"vi\") ;; target\n-\t\t\t  (match_operand 2 \"\" \"vi\") ;; sp\n-\t\t\t  (match_operand 3 \"\" \"vi\") ;; ?\n+\t(unspec_volatile [(match_operand 0 \"\") ;; fp (ignore)\n+\t\t\t  (match_operand 1 \"\") ;; target\n+\t\t\t  (match_operand 2 \"\") ;; sp\n+\t\t\t  (match_operand 3 \"\") ;; ?\n \t\t\t  ] UNS_NONLOCAL_GOTO))\n    ]\n   \"\"\n@@ -200,6 +200,14 @@\n \"\n   )\n \n+(define_expand \"es_addr\"\n+  [(unspec:SI [(reg:QI ES_REG)\n+\t       (match_operand:HI 0 \"\")\n+\t       ] UNS_ES_ADDR)]\n+  \"\"\n+  \"\"\n+)\n+\n ;;======================================================================\n ;;\n ;; \"macro\" insns - cases where inline chunks of code are more\n@@ -243,9 +251,9 @@\n )\n \n (define_expand \"subsi3\"\n-  [(set (match_operand:SI           0 \"nonimmediate_operand\" \"=&vm\")\n-\t(minus:SI (match_operand:SI 1 \"general_operand\"      \"vim\")\n-\t\t  (match_operand    2 \"general_operand\"    \"vim\")))\n+  [(set (match_operand:SI           0 \"nonimmediate_operand\")\n+\t(minus:SI (match_operand:SI 1 \"general_operand\")\n+\t\t  (match_operand    2 \"general_operand\")))\n    ]\n   \"\"\n   \"emit_insn (gen_subsi3_internal_virt (operands[0], operands[1], operands[2]));\n@@ -280,35 +288,35 @@\n )\n \n (define_expand \"mulqi3\"\n-  [(set (match_operand:QI          0 \"register_operand\" \"\")\n-\t(mult:QI  (match_operand:QI 1 \"general_operand\" \"\")\n-\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n+  [(set (match_operand:QI          0 \"register_operand\")\n+\t(mult:QI  (match_operand:QI 1 \"general_operand\")\n+\t\t  (match_operand:QI 2 \"nonmemory_operand\")))\n    ]\n   \"\" ; mulu supported by all targets\n   \"\"\n )\n \n (define_expand \"mulhi3\"\n-  [(set (match_operand:HI          0 \"register_operand\" \"\")\n-\t(mult:HI (match_operand:HI 1 \"general_operand\" \"\")\n-\t\t (match_operand:HI 2 \"nonmemory_operand\" \"\")))\n+  [(set (match_operand:HI          0 \"register_operand\")\n+\t(mult:HI (match_operand:HI 1 \"general_operand\")\n+\t\t (match_operand:HI 2 \"nonmemory_operand\")))\n    ]\n   \"! RL78_MUL_NONE\"\n   \"\"\n )\n \n (define_expand \"mulsi3\"\n-  [(set (match_operand:SI          0 \"register_operand\" \"=&v\")\n-\t(mult:SI (match_operand:SI 1 \"general_operand\" \"+vim\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"vi\")))\n+  [(set (match_operand:SI          0 \"register_operand\")\n+\t(mult:SI (match_operand:SI 1 \"general_operand\")\n+\t\t (match_operand:SI 2 \"nonmemory_operand\")))\n    ]\n   \"! RL78_MUL_NONE\"\n   \"\"\n )\n \n (define_insn \"*mulqi3_rl78\"\n   [(set (match_operand:QI          0 \"register_operand\" \"=&v\")\n-\t(mult:QI (match_operand:QI 1 \"general_operand\" \"+viU\")\n+\t(mult:QI (match_operand:QI 1 \"general_operand\" \"viU\")\n \t\t (match_operand:QI 2 \"general_operand\" \"vi\")))\n    ]\n   \"\" ; mulu supported by all targets\n@@ -325,7 +333,7 @@\n \n (define_insn \"*mulhi3_rl78\"\n   [(set (match_operand:HI          0 \"register_operand\" \"=&v\")\n-\t(mult:HI (match_operand:HI 1 \"general_operand\" \"+viU\")\n+\t(mult:HI (match_operand:HI 1 \"general_operand\" \"viU\")\n \t\t (match_operand:HI 2 \"general_operand\" \"vi\")))\n    ]\n   \"RL78_MUL_RL78\"\n@@ -340,7 +348,7 @@\n \n (define_insn \"*mulhi3_g13\"\n   [(set (match_operand:HI          0 \"register_operand\" \"=&v\")\n-\t(mult:HI (match_operand:HI 1 \"general_operand\" \"+viU\")\n+\t(mult:HI (match_operand:HI 1 \"general_operand\" \"viU\")\n \t\t (match_operand:HI 2 \"general_operand\" \"vi\")))\n    ]\n   \"RL78_MUL_G13\"\n@@ -363,7 +371,7 @@\n ;; bits of the result).\n (define_insn \"mulsi3_rl78\"\n   [(set (match_operand:SI          0 \"register_operand\" \"=&v\")\n-\t(mult:SI (match_operand:SI 1 \"general_operand\" \"+viU\")\n+\t(mult:SI (match_operand:SI 1 \"general_operand\" \"viU\")\n \t\t (match_operand:SI 2 \"general_operand\" \"vi\")))\n    ]\n   \"RL78_MUL_RL78\"\n@@ -432,12 +440,4 @@\n \tmovw\t%H0, ax\n \t; end of mulsi macro\"\n   [(set_attr \"valloc\" \"macax\")]\n-  )\n-\n-(define_expand \"es_addr\"\n-  [(unspec:SI [(reg:QI ES_REG)\n-\t       (match_operand:HI 0 \"\" \"\")\n-\t       ] UNS_ES_ADDR)]\n-  \"\"\n-  \"\"\n )"}]}