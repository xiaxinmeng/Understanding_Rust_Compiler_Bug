{"sha": "edf711a4e4e345ea0c165d7ad3b823b81360d43a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRmNzExYTRlNGUzNDVlYTBjMTY1ZDdhZDNiODIzYjgxMzYwZDQzYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-26T12:43:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-26T12:43:24Z"}, "message": "(find_and_verify_loops): When moving blocks of code, verify that the just destination is not in an inner nested loop.\n\n(find_and_verify_loops): When moving blocks of code, verify that the\njust destination is not in an inner nested loop.\n(mark_loop_jump): Don't mark label as loop exit if it jumps to an\ninner nested loop.\n\nFrom-SVN: r10164", "tree": {"sha": "ff34715c19a84dbb2b8dc93e02b274fd4e5fdc8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff34715c19a84dbb2b8dc93e02b274fd4e5fdc8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edf711a4e4e345ea0c165d7ad3b823b81360d43a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf711a4e4e345ea0c165d7ad3b823b81360d43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf711a4e4e345ea0c165d7ad3b823b81360d43a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf711a4e4e345ea0c165d7ad3b823b81360d43a/comments", "author": null, "committer": null, "parents": [{"sha": "aa6b6385f2b1aa288907cc7adbd0b5b839707a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6b6385f2b1aa288907cc7adbd0b5b839707a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6b6385f2b1aa288907cc7adbd0b5b839707a94"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "2729450a389dfffd70c90dc489a5fe29bc9975f3", "filename": "gcc/loop.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf711a4e4e345ea0c165d7ad3b823b81360d43a/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf711a4e4e345ea0c165d7ad3b823b81360d43a/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=edf711a4e4e345ea0c165d7ad3b823b81360d43a", "patch": "@@ -2338,6 +2338,8 @@ find_and_verify_loops (f)\n \t  {\n \t    rtx p;\n \t    rtx our_next = next_real_insn (insn);\n+\t    int dest_loop = uid_loop_num[INSN_UID (JUMP_LABEL (insn))];\n+\t    int outer_loop;\n \n \t    /* Go backwards until we reach the start of the loop, a label,\n \t       or a JUMP_INSN.  */\n@@ -2349,6 +2351,19 @@ find_and_verify_loops (f)\n \t\t p = PREV_INSN (p))\n \t      ;\n \n+\t    /* Check for the case where we have a jump to an inner nested\n+\t       loop, and do not perform the optimization in that case.  */\n+\n+\t    if (dest_loop != -1)\n+\t      {\n+\t\tfor (outer_loop = dest_loop; outer_loop != -1;\n+\t\t     outer_loop = loop_outer_loop[outer_loop])\n+\t\t  if (outer_loop == this_loop_num)\n+\t\t    break;\n+\t      }\n+\t    else\n+\t      outer_loop = -1;\n+\n \t    /* If we stopped on a JUMP_INSN to the next insn after INSN,\n \t       we have a block of code to try to move.\n \n@@ -2358,7 +2373,8 @@ find_and_verify_loops (f)\n \t       of the block, invert the jump in P and point it to that label,\n \t       and move the block of code to the spot we found.  */\n \n-\t    if (GET_CODE (p) == JUMP_INSN\n+\t    if (outer_loop == -1\n+\t\t&& GET_CODE (p) == JUMP_INSN\n \t\t&& JUMP_LABEL (p) != 0\n \t\t/* Just ignore jumps to labels that were never emitted.\n \t\t   These always indicate compilation errors.  */\n@@ -2522,7 +2538,19 @@ mark_loop_jump (x, loop_num)\n \t mark this LABEL_REF so we know that this branch should predict\n \t false.  */\n \n-      if (dest_loop != loop_num && loop_num != -1)\n+      /* A check to make sure the label is not in an inner nested loop,\n+\t since this does not count as a loop exit.  */\n+      if (dest_loop != -1)\n+\t{\n+\t  for (outer_loop = dest_loop; outer_loop != -1;\n+\t       outer_loop = loop_outer_loop[outer_loop])\n+\t    if (outer_loop == loop_num)\n+\t      break;\n+\t}\n+      else\n+\touter_loop = -1;\n+\n+      if (loop_num != -1 && outer_loop == -1)\n \t{\n \t  LABEL_OUTSIDE_LOOP_P (x) = 1;\n \t  LABEL_NEXTREF (x) = loop_number_exit_labels[loop_num];"}]}