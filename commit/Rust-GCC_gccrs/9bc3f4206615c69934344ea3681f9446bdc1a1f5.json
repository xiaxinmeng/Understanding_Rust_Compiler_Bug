{"sha": "9bc3f4206615c69934344ea3681f9446bdc1a1f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjM2Y0MjA2NjE1YzY5OTM0MzQ0ZWEzNjgxZjk0NDZiZGMxYTFmNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-06T14:19:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-06T14:19:23Z"}, "message": "[C++ PATCH] hash-table for extern-c fns.\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg00376.html\n\tUse hash_table for extern \"C\" names\n\t* name-lookup.c (extern_c_fns): Use hash_table.\n\t(check_extern_c_conflict): Adjust.\n\t(c_linkage_bindings): Adjust.\n\nFrom-SVN: r253493", "tree": {"sha": "1f36d628d50134cf505369a6074ff953c04e9e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f36d628d50134cf505369a6074ff953c04e9e15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bc3f4206615c69934344ea3681f9446bdc1a1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc3f4206615c69934344ea3681f9446bdc1a1f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc3f4206615c69934344ea3681f9446bdc1a1f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc3f4206615c69934344ea3681f9446bdc1a1f5/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "513d5564225f8baa2ddeafde9edb9e10b62e30ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513d5564225f8baa2ddeafde9edb9e10b62e30ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/513d5564225f8baa2ddeafde9edb9e10b62e30ce"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "7292fee2d6750117f0a142efcadb5a00d493d3ac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc3f4206615c69934344ea3681f9446bdc1a1f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc3f4206615c69934344ea3681f9446bdc1a1f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9bc3f4206615c69934344ea3681f9446bdc1a1f5", "patch": "@@ -1,5 +1,10 @@\n 2017-10-06  Nathan Sidwell  <nathan@acm.org>\n \n+\tUse hash_table for extern \"C\" names\n+\t* name-lookup.c (extern_c_fns): Use hash_table.\n+\t(check_extern_c_conflict): Adjust.\n+\t(c_linkage_bindings): Adjust.\n+\n \tUse hash_table for namespace bindings\n \t* cp-tree.h (struct named_decl_hash): New.\n \t(lang_decl_ns): Change type of bindings field."}, {"sha": "fb86310c88458a92e5e6f35e4c115cb4bce5f523", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc3f4206615c69934344ea3681f9446bdc1a1f5/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc3f4206615c69934344ea3681f9446bdc1a1f5/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9bc3f4206615c69934344ea3681f9446bdc1a1f5", "patch": "@@ -2511,9 +2511,9 @@ update_binding (cp_binding_level *level, cxx_binding *binding, tree *slot,\n   return decl;\n }\n \n-/* Map of identifiers to extern C functions (or LISTS thereof).  */\n+/* Table of identifiers to extern C functions (or LISTS thereof).  */\n \n-static GTY(()) hash_map<lang_identifier *, tree> *extern_c_fns;\n+static GTY(()) hash_table<named_decl_hash> *extern_c_fns;\n \n /* DECL has C linkage. If we have an existing instance, make sure it\n    has the same exception specification [7.5, 7.6].  If there's no\n@@ -2527,17 +2527,15 @@ check_extern_c_conflict (tree decl)\n     return;\n \n   if (!extern_c_fns)\n-    extern_c_fns = hash_map<lang_identifier *,tree>::create_ggc (127);\n+    extern_c_fns = hash_table<named_decl_hash>::create_ggc (127);\n \n-  bool existed;\n-  tree *slot = &extern_c_fns->get_or_insert (DECL_NAME (decl), &existed);\n-  if (!existed)\n-    *slot = decl;\n-  else\n+  tree *slot = extern_c_fns\n+    ->find_slot_with_hash (DECL_NAME (decl),\n+\t\t\t   IDENTIFIER_HASH_VALUE (DECL_NAME (decl)), INSERT);\n+  if (tree old = *slot)\n     {\n-      tree old = *slot;\n-      if (TREE_CODE (old) == TREE_LIST)\n-\told = TREE_VALUE (old);\n+      if (TREE_CODE (old) == OVERLOAD)\n+\told = OVL_FUNCTION (old);\n \n       int mismatch = 0;\n       if (DECL_CONTEXT (old) == DECL_CONTEXT (decl))\n@@ -2563,9 +2561,24 @@ check_extern_c_conflict (tree decl)\n \t\t     \"due to different exception specifications\");\n \t}\n       else\n-\t/* Chain it on for c_linkage_binding's use.  */\n-\t*slot = tree_cons (NULL_TREE, decl, *slot);\n+\t{\n+\t  if (old == *slot)\n+\t    /* The hash table expects OVERLOADS, so construct one with\n+\t       OLD as both the function and the chain.  This allocate\n+\t       an excess OVERLOAD node, but it's rare to have multiple\n+\t       extern \"C\" decls of the same name.  And we save\n+\t       complicating the hash table logic (which is used\n+\t       elsewhere).  */\n+\t    *slot = ovl_make (old, old);\n+\n+\t  slot = &OVL_CHAIN (*slot);\n+\n+\t  /* Chain it on for c_linkage_binding's use.  */\n+\t  *slot = tree_cons (NULL_TREE, decl, *slot);\n+\t}\n     }\n+  else\n+    *slot = decl;\n }\n \n /* Returns a list of C-linkage decls with the name NAME.  Used in\n@@ -2575,8 +2588,15 @@ tree\n c_linkage_bindings (tree name)\n {\n   if (extern_c_fns)\n-    if (tree *slot = extern_c_fns->get (name))\n-      return *slot;\n+    if (tree *slot = extern_c_fns\n+\t->find_slot_with_hash (name, IDENTIFIER_HASH_VALUE (name), NO_INSERT))\n+      {\n+\ttree result = *slot;\n+\tif (TREE_CODE (result) == OVERLOAD)\n+\t  result = OVL_CHAIN (result);\n+\treturn result;\n+      }\n+\n   return NULL_TREE;\n }\n "}]}