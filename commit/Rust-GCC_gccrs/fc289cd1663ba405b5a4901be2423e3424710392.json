{"sha": "fc289cd1663ba405b5a4901be2423e3424710392", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyODljZDE2NjNiYTQwNWI1YTQ5MDFiZTI0MjNlMzQyNDcxMDM5Mg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-11T19:49:26Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-11T19:49:26Z"}, "message": "(identify_blocks): Handle case where no block nodes exist.\n\n(identify_blocks): Handle case where no block nodes\nexist.  Use xmalloc not alloca for block_vector.\n(reorder_blocks): New argument top_block.  Handle case where no\nblock nodes exist.  Always clear BLOCK_SUBBLOCKS (block) when\nadding it to the block tree.\n(all_blocks): Handle case where vector is zero. Store current\nblock at offset 0 in vector, not n_blocks.  Don't count current\nblock twice in n_blocks.\n\nFrom-SVN: r1797", "tree": {"sha": "84f35f1b8ee039d9db79da3304a72795bee7b60a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84f35f1b8ee039d9db79da3304a72795bee7b60a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc289cd1663ba405b5a4901be2423e3424710392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc289cd1663ba405b5a4901be2423e3424710392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc289cd1663ba405b5a4901be2423e3424710392", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc289cd1663ba405b5a4901be2423e3424710392/comments", "author": null, "committer": null, "parents": [{"sha": "715e6efb423ec714465e1c187616db850d48a7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715e6efb423ec714465e1c187616db850d48a7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715e6efb423ec714465e1c187616db850d48a7d0"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "df2bffadcd0b2e355c30b513db6566c54b175ead", "filename": "gcc/function.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc289cd1663ba405b5a4901be2423e3424710392/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc289cd1663ba405b5a4901be2423e3424710392/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fc289cd1663ba405b5a4901be2423e3424710392", "patch": "@@ -3552,14 +3552,21 @@ identify_blocks (top_block, insns)\n      tree top_block;\n      rtx insns;\n {\n-  int n_blocks = all_blocks (top_block, 0);\n-  tree *block_vector = (tree *) alloca (n_blocks * sizeof (tree));\n-  int *block_stack = (int *) alloca (n_blocks * sizeof (int));\n+  int n_blocks;\n+  tree *block_vector;\n+  int *block_stack;\n   int depth = 0;\n   int next_block_number = 0;\n   int current_block_number = 0;\n   rtx insn;\n \n+  if (top_block == 0)\n+    return 0;\n+\n+  n_blocks = all_blocks (top_block, 0);\n+  block_vector = (tree *) xmalloc (n_blocks * sizeof (tree));\n+  block_stack = (int *) alloca (n_blocks * sizeof (int));\n+\n   all_blocks (top_block, block_vector);\n \n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n@@ -3584,16 +3591,24 @@ identify_blocks (top_block, insns)\n /* Given BLOCK_VECTOR which was returned by identify_blocks,\n    and a revised instruction chain, rebuild the tree structure\n    of BLOCK nodes to correspond to the new order of RTL.\n+   The new block tree is inserted below TOP_BLOCK.\n    Returns the current top-level block.  */\n \n tree\n-reorder_blocks (block_vector, insns)\n+reorder_blocks (block_vector, top_block, insns)\n      tree *block_vector;\n+     tree top_block;\n      rtx insns;\n {\n-  tree current_block = block_vector[0];\n+  tree current_block = top_block;\n   rtx insn;\n \n+  if (block_vector == 0)\n+    return top_block;\n+\n+  /* Prune the old tree away, so that it doesn't get in the way.  */\n+  BLOCK_SUBBLOCKS (current_block) = 0;\n+\n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n     if (GET_CODE (insn) == NOTE)\n       {\n@@ -3603,8 +3618,7 @@ reorder_blocks (block_vector, insns)\n \t    /* If we have seen this block before, copy it.  */\n \t    if (TREE_ASM_WRITTEN (block))\n \t      block = copy_node (block);\n-\t    else\n-\t      BLOCK_SUBBLOCKS (block) = 0;\n+\t    BLOCK_SUBBLOCKS (block) = 0;\n \t    TREE_ASM_WRITTEN (block) = 1;\n \t    BLOCK_SUPERCONTEXT (block) = current_block; \n \t    BLOCK_CHAIN (block) = BLOCK_SUBBLOCKS (current_block);\n@@ -3654,12 +3668,13 @@ all_blocks (block, vector)\n \n   TREE_ASM_WRITTEN (block) = 0;\n   /* Record this block.  */\n-  vector[n_blocks++] = block;\n+  if (vector)\n+    vector[0] = block;\n \n   /* Record the subblocks, and their subblocks.  */\n   for (subblocks = BLOCK_SUBBLOCKS (block);\n        subblocks; subblocks = BLOCK_CHAIN (subblocks))\n-    n_blocks += all_blocks (subblocks, vector + n_blocks);\n+    n_blocks += all_blocks (subblocks, vector ? vector + n_blocks : 0);\n \n   return n_blocks;\n }"}]}