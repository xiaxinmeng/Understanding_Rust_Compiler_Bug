{"sha": "2488a51e82c40b41b3226100d18323fee5e34613", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ4OGE1MWU4MmM0MGI0MWIzMjI2MTAwZDE4MzIzZmVlNWUzNDYxMw==", "commit": {"author": {"name": "Ralph Loader", "email": "rcl@ihug.co.nz", "date": "2003-10-16T21:28:23Z"}, "committer": {"name": "Ralph Loader", "email": "ralph@gcc.gnu.org", "date": "2003-10-16T21:28:23Z"}, "message": "natString.cc (getChars): Fix validation of array indexes.\n\n\t* java/lang/natString.cc (getChars):\n\tFix validation of array indexes.\n\t(getBytes, regionMatches, startsWith, valueOf): Likewise.\n\t* testsuite/libjava.lang/String_overflow.java: New file.\n\t* testsuite/libjava.lang/String_overflow.out: New file.\n\nFrom-SVN: r72578", "tree": {"sha": "29b6320b5dc7e8dbb94d055fb55385f1064c0a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29b6320b5dc7e8dbb94d055fb55385f1064c0a14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2488a51e82c40b41b3226100d18323fee5e34613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2488a51e82c40b41b3226100d18323fee5e34613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2488a51e82c40b41b3226100d18323fee5e34613", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2488a51e82c40b41b3226100d18323fee5e34613/comments", "author": null, "committer": null, "parents": [{"sha": "bf1b388d0ebb654f925fa101f1e23444009f0918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1b388d0ebb654f925fa101f1e23444009f0918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1b388d0ebb654f925fa101f1e23444009f0918"}], "stats": {"total": 175, "additions": 165, "deletions": 10}, "files": [{"sha": "ef0511712b822790cf9a300a971b95cdfa2bbdcb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2488a51e82c40b41b3226100d18323fee5e34613/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2488a51e82c40b41b3226100d18323fee5e34613/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2488a51e82c40b41b3226100d18323fee5e34613", "patch": "@@ -1,3 +1,11 @@\n+2003-10-17  Ralph Loader  <rcl@ihug.co.nz>\n+\n+\t* java/lang/natString.cc (getChars):\n+\tFix validation of array indexes.\n+\t(getBytes, regionMatches, startsWith, valueOf): Likewise.\n+\t* testsuite/libjava.lang/String_overflow.java: New file.\n+\t* testsuite/libjava.lang/String_overflow.out: New file.\n+\n 2003-10-17  Ralph Loader  <rcl@ihug.co.nz>\n \n \t* prims.cc (_Jv_NewObjectArray): Make sure byte size doesn't"}, {"sha": "8217f70399541a0aabfbc6828335b43c2414da2e", "filename": "libjava/java/lang/natString.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2488a51e82c40b41b3226100d18323fee5e34613/libjava%2Fjava%2Flang%2FnatString.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2488a51e82c40b41b3226100d18323fee5e34613/libjava%2Fjava%2Flang%2FnatString.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatString.cc?ref=2488a51e82c40b41b3226100d18323fee5e34613", "patch": "@@ -601,7 +601,10 @@ java::lang::String::getChars(jint srcBegin, jint srcEnd,\n   jint dst_length = JvGetArrayLength (dst);\n   if (srcBegin < 0 || srcBegin > srcEnd || srcEnd > count)\n     throw new java::lang::StringIndexOutOfBoundsException;\n-  if (dstBegin < 0 || dstBegin + (srcEnd-srcBegin) > dst_length)\n+  // The 2nd part of the test below is equivalent to \n+  // dstBegin + (srcEnd-srcBegin) > dst_length\n+  // except that it does not overflow.\n+  if (dstBegin < 0 || dstBegin > dst_length - (srcEnd-srcBegin))\n     throw new ArrayIndexOutOfBoundsException;\n   jchar *dPtr = elements (dst) + dstBegin;\n   jchar *sPtr = JvGetStringChars (this) + srcBegin;\n@@ -653,7 +656,10 @@ java::lang::String::getBytes(jint srcBegin, jint srcEnd,\n   jint dst_length = JvGetArrayLength (dst);\n   if (srcBegin < 0 || srcBegin > srcEnd || srcEnd > count)\n     throw new java::lang::StringIndexOutOfBoundsException;\n-  if (dstBegin < 0 || dstBegin + (srcEnd-srcBegin) > dst_length)\n+  // The 2nd part of the test below is equivalent to \n+  // dstBegin + (srcEnd-srcBegin) > dst_length\n+  // except that it does not overflow.\n+  if (dstBegin < 0 || dstBegin > dst_length - (srcEnd-srcBegin))\n     throw new ArrayIndexOutOfBoundsException;\n   jbyte *dPtr = elements (dst) + dstBegin;\n   jchar *sPtr = JvGetStringChars (this) + srcBegin;\n@@ -700,9 +706,9 @@ jboolean\n java::lang::String::regionMatches (jint toffset,\n \t\t\t\t   jstring other, jint ooffset, jint len)\n {\n-  if (toffset < 0 || ooffset < 0\n-      || toffset + len > count\n-      || ooffset + len > other->count)\n+  if (toffset < 0 || ooffset < 0 || len < 0\n+      || toffset > count - len\n+      || ooffset > other->count - len)\n     return false;\n   jchar *tptr = JvGetStringChars (this) + toffset;\n   jchar *optr = JvGetStringChars (other) + ooffset;\n@@ -737,9 +743,9 @@ jboolean\n java::lang::String::regionMatches (jboolean ignoreCase, jint toffset,\n \t\t\t\t   jstring other, jint ooffset, jint len)\n {\n-  if (toffset < 0 || ooffset < 0\n-      || toffset + len > count\n-      || ooffset + len > other->count)\n+  if (toffset < 0 || ooffset < 0 || len < 0\n+      || toffset > count - len\n+      || ooffset > other->count - len)\n     return false;\n   jchar *tptr = JvGetStringChars (this) + toffset;\n   jchar *optr = JvGetStringChars (other) + ooffset;\n@@ -770,7 +776,7 @@ jboolean\n java::lang::String::startsWith (jstring prefix, jint toffset)\n {\n   jint i = prefix->count;\n-  if (toffset < 0 || toffset + i > count)\n+  if (toffset < 0 || toffset > count - i)\n     return false;\n   jchar *xptr = JvGetStringChars (this) + toffset;\n   jchar *yptr = JvGetStringChars (prefix);\n@@ -1043,7 +1049,7 @@ jstring\n java::lang::String::valueOf(jcharArray data, jint offset, jint count)\n {\n   jint data_length = JvGetArrayLength (data);\n-  if (offset < 0 || count < 0 || offset+count > data_length)\n+  if (offset < 0 || count < 0 || offset > data_length - count)\n     throw new ArrayIndexOutOfBoundsException;\n   jstring result = JvAllocString(count);\n   jchar *sPtr = elements (data) + offset;"}, {"sha": "5a1a907c50329c4f47222765873b48bb559ad2cf", "filename": "libjava/testsuite/libjava.lang/String_overflow.java", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2488a51e82c40b41b3226100d18323fee5e34613/libjava%2Ftestsuite%2Flibjava.lang%2FString_overflow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2488a51e82c40b41b3226100d18323fee5e34613/libjava%2Ftestsuite%2Flibjava.lang%2FString_overflow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FString_overflow.java?ref=2488a51e82c40b41b3226100d18323fee5e34613", "patch": "@@ -0,0 +1,140 @@\n+class String_overflow\n+{\n+  static void getChars()\n+  {\n+    String source = \"abcdefg\";\n+    char[] dest = new char [3];\n+\n+    try\n+      {\n+\tsource.getChars (0, 5,\t// Source\n+\t\t\t dest, (1<<31) - 1);\n+\tFail (\"getChars\", \"Should not have succeeded\");\n+      }\n+    catch (Throwable e)\n+      {\n+\tExpectArrayIndex (\"getChars\", e);\n+      }\n+  }\n+\n+    /* How do I stop a compiler warning causing a test to fail?\n+  static void getBytes()\n+  {\n+    String source = \"abcdefg\";\n+    byte[] dest = new byte[3];\n+\n+    try\n+      {\n+\tsource.getBytes (0, 5, dest, (1<<31) - 1);\n+\tFail (\"getBytes\", \"Should not have succeeded\");\n+      }\n+    catch (Throwable e)\n+      {\n+\tExpectArrayIndex (\"getBytes\", e);\n+      }\n+  }\n+    */\n+\n+  static void regionMatches()\n+  {\n+    if (\"abcdefg\".regionMatches (4, \"abcdefg\", 4, -1))\n+      {\n+\tFail (\"regionMatches\", \"Should not return true\");\n+      }\n+\n+    try\n+      {\n+\tif (\"abcdefg\".regionMatches (4, \"abcdefg\", 4, (1<<31)-1))\n+\t  {\n+\t    Fail (\"regionMatches (2nd)\", \"Should not return true\");\n+\t  }\n+      }\n+    catch (Throwable e)\n+      {\n+\tFail (\"regionMatches (2nd)\", e);\n+      }\n+  }\n+\n+  static void regionMatchesCase()\n+  {\n+    if (\"abcdefg\".regionMatches (true, 4, \"abcdefg\", 4, -1))\n+      {\n+\tFail (\"regionMatchesCase\", \"Should not return true\");\n+      }\n+\n+    try\n+      {\n+\tif (\"abcdefg\".regionMatches (true, 4, \"abcdefg\", 4, (1<<31)-1))\n+\t  {\n+\t    Fail (\"regionMatchesCase (2nd)\", \"Should not return true\");\n+\t  }\n+      }\n+    catch (Throwable e)\n+      {\n+\tFail (\"regionMatchesCase (2nd)\", e);\n+      }\n+  }\n+\n+  static void startsWith()\n+  {\n+    // We make the arg pretty big to try and cause a segfault.\n+    String s = new String (\"abcdef\");\n+    StringBuffer b = new StringBuffer (1000000);\n+    b.setLength (1000000);\n+    String arg = new String (b);\n+\n+    try\n+      {\n+\ts.startsWith (arg, (1<<31) - 1000000);\n+      }\n+    catch (Throwable e)\n+      {\n+\tFail (\"startsWith\", e);\n+      }\n+  }\n+\n+  static void valueOf()\n+  {\n+    char[] array = new char[] {'a', 'b', 'c', 'd', 'e'};\n+    try\n+      {\n+\tString.valueOf (array, 4, (1<<31)-1);\n+\tFail (\"valueOf\", \"should not succeed\");\n+      }\n+    catch (Throwable e)\n+      {\n+\tExpectArrayIndex (\"valueOf\", e);\n+      }\n+  }\n+\n+  public static void main (String[] args) throws Throwable\n+  {\n+    getChars();\n+    //    getBytes();\n+    regionMatches();\n+    regionMatchesCase();\n+    startsWith();\n+    valueOf();\n+\n+    if (tests_failed == 0)\n+      System.out.println (\"ok\");\n+  }\n+\n+  static void ExpectArrayIndex (String test, Throwable e)\n+  {\n+    if (e instanceof ArrayIndexOutOfBoundsException)\n+      return;\n+\n+    Fail (test, e);\n+  }\n+\n+  static void Fail (String test, Object problem)\n+  {\n+    ++tests_failed;\n+    System.err.print (test);\n+    System.err.print ('\\t');\n+    System.err.println (problem);\n+  }\n+\n+  static int tests_failed;\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/String_overflow.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2488a51e82c40b41b3226100d18323fee5e34613/libjava%2Ftestsuite%2Flibjava.lang%2FString_overflow.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2488a51e82c40b41b3226100d18323fee5e34613/libjava%2Ftestsuite%2Flibjava.lang%2FString_overflow.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FString_overflow.out?ref=2488a51e82c40b41b3226100d18323fee5e34613", "patch": "@@ -0,0 +1 @@\n+ok"}]}