{"sha": "6464d9b18207d381568b0a5b5a953286ccd2a5b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2NGQ5YjE4MjA3ZDM4MTU2OGIwYTViNWE5NTMyODZjY2QyYTViNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-04-05T19:49:38Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-04-05T19:49:38Z"}, "message": "PR bootstrap/89980 - pointer initialization with empty string folded to zero\n\ngcc/cp/ChangeLog:\n\n\tPR bootstrap/89980\n\t* decl.c (reshape_init_array_1): Avoid treating empty strings\n\tas zeros in array initializers.\n\tUse trivial_type_p () instead of TYPE_HAS_TRIVIAL_DFLT().\n\ngcc/testsuite/ChangeLog:\n\n\tPR bootstrap/89980\n\t* g++.dg/init/array52.C: New test.\n\nFrom-SVN: r270177", "tree": {"sha": "63a0f8a21cc5a09ddf4e9f068ed290d4ad0f4a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63a0f8a21cc5a09ddf4e9f068ed290d4ad0f4a20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6464d9b18207d381568b0a5b5a953286ccd2a5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6464d9b18207d381568b0a5b5a953286ccd2a5b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6464d9b18207d381568b0a5b5a953286ccd2a5b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6464d9b18207d381568b0a5b5a953286ccd2a5b6/comments", "author": null, "committer": null, "parents": [{"sha": "199b20e3cbf77757bb2e03649c98fc73b19c611e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199b20e3cbf77757bb2e03649c98fc73b19c611e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199b20e3cbf77757bb2e03649c98fc73b19c611e"}], "stats": {"total": 126, "additions": 120, "deletions": 6}, "files": [{"sha": "17c9aa712aa65fa938fa9b8d03820f0ecc3ef3d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6464d9b18207d381568b0a5b5a953286ccd2a5b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6464d9b18207d381568b0a5b5a953286ccd2a5b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6464d9b18207d381568b0a5b5a953286ccd2a5b6", "patch": "@@ -1,3 +1,10 @@\n+2019-04-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR bootstrap/89980\n+\t* decl.c (reshape_init_array_1): Avoid treating empty strings\n+\tas zeros in array initializers.\n+\tUse trivial_type_p () instead of TYPE_HAS_TRIVIAL_DFLT().\n+\n 2019-04-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/89948 - ICE with break in statement-expr."}, {"sha": "2528a8cd670f57d9594ea25b8a8c22d80e184969", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6464d9b18207d381568b0a5b5a953286ccd2a5b6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6464d9b18207d381568b0a5b5a953286ccd2a5b6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6464d9b18207d381568b0a5b5a953286ccd2a5b6", "patch": "@@ -5800,7 +5800,7 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n     }\n \n   /* Set to the index of the last element with a non-zero initializer.\n-     Initializers for elements past this one can be dropped.  */\n+     Zero initializers for elements past this one can be dropped.  */\n   unsigned HOST_WIDE_INT last_nonzero = -1;\n   /* Loop until there are no more initializers.  */\n   for (index = 0;\n@@ -5820,17 +5820,19 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n       if (!TREE_CONSTANT (elt_init))\n \tTREE_CONSTANT (new_init) = false;\n \n-      if (!initializer_zerop (elt_init))\n+      /* Pointers initialized to strings must be treated as non-zero\n+\t even if the string is empty.  */\n+      tree init_type = TREE_TYPE (elt_init);\n+      if ((POINTER_TYPE_P (elt_type) != POINTER_TYPE_P (init_type))\n+\t  || !initializer_zerop (elt_init))\n \tlast_nonzero = index;\n \n       /* This can happen with an invalid initializer (c++/54501).  */\n       if (d->cur == old_cur && !sized_array_p)\n \tbreak;\n     }\n \n-  if (sized_array_p\n-      && (!CLASS_TYPE_P (elt_type)\n-\t  || TYPE_HAS_TRIVIAL_DFLT (elt_type)))\n+  if (sized_array_p && trivial_type_p (elt_type))\n     {\n       /* Strip trailing zero-initializers from an array of a trivial\n \t type of known size.  They are redundant and get in the way"}, {"sha": "dc6f911fc4ff55772a361b6a24522229935652ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6464d9b18207d381568b0a5b5a953286ccd2a5b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6464d9b18207d381568b0a5b5a953286ccd2a5b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6464d9b18207d381568b0a5b5a953286ccd2a5b6", "patch": "@@ -1,3 +1,8 @@\n+2019-04-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR bootstrap/89980\n+\t* g++.dg/init/array52.C: New test.\n+\n 2019-04-05  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/89985\n@@ -12,7 +17,7 @@\n \n 2019-04-05  Marek Polacek  <polacek@redhat.com>\n \n-\tPR c++/89973 - -Waddress-of-packed-member ICE with invalid conversion. \n+\tPR c++/89973 - -Waddress-of-packed-member ICE with invalid conversion.\n \t* g++.dg/warn/Waddress-of-packed-member2.C: New test.\n \n 2019-04-05  Richard Biener  <rguenther@suse.de>"}, {"sha": "e7b4cb394ad21ad45d2a38ef4ccb1a5e1b975f14", "filename": "gcc/testsuite/g++.dg/init/array52.C", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6464d9b18207d381568b0a5b5a953286ccd2a5b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6464d9b18207d381568b0a5b5a953286ccd2a5b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray52.C?ref=6464d9b18207d381568b0a5b5a953286ccd2a5b6", "patch": "@@ -0,0 +1,100 @@\n+// PR c++/89980 - pointer initialization with empty string folded to zero\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wall -fdump-tree-optimized\" }\n+\n+#if __cplusplus >= 201103L\n+\n+#define SA(e) static_assert (e, #e)\n+\n+static constexpr const char* const ca1[2] = { \"\" };\n+\n+void fca1 (void)\n+{\n+  SA (ca1[0] && ca1[0][0] == 0 && ca1[1] == 0);\n+}\n+\n+static constexpr const char* const ca2[][2] =\n+{\n+  { }, { 0 }, { 0, 0 }, { \"\" }, { \"\", \"\" }, { \"\", 0 }, { 0, \"\" }\n+};\n+\n+void fca2 (void)\n+{\n+  SA (ca2[0][0] == 0 && ca2[0][1] == 0);\n+  SA (ca2[1][0] == 0 && ca2[1][1] == 0);\n+  SA (ca2[2][0] == 0 && ca2[2][1] == 0);\n+\n+  SA (ca2[3][0] && ca2[3][0][0] == 0 && ca2[3][1] == 0);\n+  SA (ca2[4][0] && ca2[4][0][0] == 0 && ca2[4][1] && ca2[4][1][0] == 0);\n+  SA (ca2[5][0] && ca2[5][0][0] == 0 && ca2[5][1] == 0);\n+  SA (ca2[6][0] == 0 && ca2[6][1] && ca2[6][1][0] == 0);\n+}\n+\n+struct A\n+{\n+  const char *p;\n+  char a[2];\n+};\n+\n+static constexpr A ca3[] =\n+{\n+  {  }, { 0 }, { 0, \"\" }, { \"\" }, { \"\", \"\" }\n+};\n+\n+void fca3 (void)\n+{\n+  SA (ca3[0].p == 0 && ca3[0].a[0] == 0 && ca3[0].a[1] == 0);\n+  SA (ca3[1].p == 0 && ca3[1].a[0] == 0 && ca3[1].a[1] == 0);\n+  SA (ca3[2].p == 0 && ca3[2].a[0] == 0 && ca3[2].a[1] == 0);\n+  SA (ca3[3].p && ca3[3].p[0] == 0 && ca3[3].a[0] == 0 && ca3[3].a[1] == 0);\n+  SA (ca3[4].p && ca3[4].p[0] == 0 && ca3[4].a[0] == 0 && ca3[4].a[1] == 0);\n+}\n+\n+#endif   // C++ 11 and above\n+\n+\n+#define A(e) ((e) ? (void)0 : __builtin_abort ())\n+\n+static const char* const a1[2] = { \"\" };\n+\n+void fa1 (void)\n+{\n+  A (a1[0] && a1[0][0] == 0 && a1[1] == 0);\n+}\n+\n+static const char* const a2[][2] =\n+{\n+  { }, { 0 }, { 0, 0 }, { \"\" }, { \"\", \"\" }, { \"\", 0 }, { 0, \"\" }\n+};\n+\n+void fa2 (void)\n+{\n+  A (a2[0][0] == 0 && a2[0][1] == 0);\n+  A (a2[1][0] == 0 && a2[1][1] == 0);\n+  A (a2[2][0] == 0 && a2[2][1] == 0);\n+\n+  A (a2[3][0] && a2[3][0][0] == 0 && a2[3][1] == 0);\n+  A (a2[4][0] && a2[4][0][0] == 0 && a2[4][1] && a2[4][1][0] == 0);\n+  A (a2[5][0] && a2[5][0][0] == 0 && a2[5][1] == 0);\n+  A (a2[6][0] == 0 && a2[6][1] && a2[6][1][0] == 0);\n+}\n+\n+struct B\n+{\n+  const char *p;\n+  char a[2];\n+};\n+\n+static const B a3[] =\n+{\n+  {  }, { 0 }, { 0, \"\" }, { \"\" }, { \"\", \"\" }\n+};\n+\n+void fa3 (void)\n+{\n+  A (a3[0].p == 0 && a3[0].a[0] == 0 && a3[0].a[1] == 0);\n+  A (a3[1].p == 0 && a3[1].a[0] == 0 && a3[1].a[1] == 0);\n+  A (a3[2].p == 0 && a3[2].a[0] == 0 && a3[2].a[1] == 0);\n+  A (a3[3].p && a3[3].p[0] == 0 && a3[3].a[0] == 0 && a3[3].a[1] == 0);\n+  A (a3[4].p && a3[4].p[0] == 0 && a3[4].a[0] == 0 && a3[4].a[1] == 0);\n+}"}]}