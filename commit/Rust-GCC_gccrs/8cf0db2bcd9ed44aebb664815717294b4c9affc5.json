{"sha": "8cf0db2bcd9ed44aebb664815717294b4c9affc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNmMGRiMmJjZDllZDQ0YWViYjY2NDgxNTcxNzI5NGI0YzlhZmZjNQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2006-06-06T17:01:27Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2006-06-06T17:01:27Z"}, "message": "re PR target/27842 (Miscompile of Altivec vec_abs (float) inside loop)\n\n\tPR target/27842\n\t* config/rs6000/altivec.md (UNSPEC_VSLW): Remove.\n\t(\"altivec_vspltisw_v4sf\", \"altivec_vslw_v4sf\"): Remove.\n\t(\"mulv4sf3\", \"absv4sf3\", \"negv4sf3\"): Adapt users to use\n\tV4SImode temporaries and operations instead.\n\n\tPR target/27842\n\t* gcc.dg/vmx/pr27842.c: New test.\n\nFrom-SVN: r114438", "tree": {"sha": "da37bb730304b618f9e7594aa00a76fcc99fbba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da37bb730304b618f9e7594aa00a76fcc99fbba5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cf0db2bcd9ed44aebb664815717294b4c9affc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf0db2bcd9ed44aebb664815717294b4c9affc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cf0db2bcd9ed44aebb664815717294b4c9affc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf0db2bcd9ed44aebb664815717294b4c9affc5/comments", "author": null, "committer": null, "parents": [{"sha": "696dad4b6bbaf23576e59546d1bd3e93dd0e96c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696dad4b6bbaf23576e59546d1bd3e93dd0e96c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696dad4b6bbaf23576e59546d1bd3e93dd0e96c4"}], "stats": {"total": 86, "additions": 55, "deletions": 31}, "files": [{"sha": "1f69780145a908ff7530aa1513edba714844d2e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf0db2bcd9ed44aebb664815717294b4c9affc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf0db2bcd9ed44aebb664815717294b4c9affc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cf0db2bcd9ed44aebb664815717294b4c9affc5", "patch": "@@ -1,3 +1,11 @@\n+2006-06-06  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR target/27842\n+\t* config/rs6000/altivec.md (UNSPEC_VSLW): Remove.\n+\t(\"altivec_vspltisw_v4sf\", \"altivec_vslw_v4sf\"): Remove.\n+\t(\"mulv4sf3\", \"absv4sf3\", \"negv4sf3\"): Adapt users to use\n+\tV4SImode temporaries and operations instead.\n+\n 2006-06-06  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* config/mips/t-linux64 (tp-bit.c): Append to tp-bit.c, not"}, {"sha": "e0326856f1a9bc1c90b89b971411a9c024031c56", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf0db2bcd9ed44aebb664815717294b4c9affc5/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf0db2bcd9ed44aebb664815717294b4c9affc5/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=8cf0db2bcd9ed44aebb664815717294b4c9affc5", "patch": "@@ -65,7 +65,6 @@\n    (UNSPEC_VPKSWUS      103)\n    (UNSPEC_VRL          104)\n    (UNSPEC_VSL          107)\n-   (UNSPEC_VSLW         109)\n    (UNSPEC_VSLV4SI      110)\n    (UNSPEC_VSLO         111)\n    (UNSPEC_VSR          118)\n@@ -546,13 +545,13 @@\n   rtx neg0;\n \n   /* Generate [-0.0, -0.0, -0.0, -0.0].  */\n-  neg0 = gen_reg_rtx (V4SFmode);\n-  emit_insn (gen_altivec_vspltisw_v4sf (neg0, constm1_rtx));\n-  emit_insn (gen_altivec_vslw_v4sf (neg0, neg0, neg0));\n+  neg0 = gen_reg_rtx (V4SImode);\n+  emit_insn (gen_altivec_vspltisw (neg0, constm1_rtx));\n+  emit_insn (gen_altivec_vslw (neg0, neg0, neg0));\n \n   /* Use the multiply-add.  */\n   emit_insn (gen_altivec_vmaddfp (operands[0], operands[1], operands[2],\n-\t\t\t\t  neg0));\n+\t\t\t\t  gen_lowpart (V4SFmode, neg0)));\n   DONE;\n }\")\n \n@@ -1168,15 +1167,6 @@\n   \"vsl<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-(define_insn \"altivec_vslw_v4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SF 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VSLW))]\n-  \"TARGET_ALTIVEC\"\n-  \"vslw %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")])\n-\n (define_insn \"altivec_vsl\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n@@ -1317,14 +1307,6 @@\n   \"vspltis<VI_char> %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vspltisw_v4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-\t(vec_duplicate:V4SF\n-\t (float:SF (match_operand:QI 1 \"s5bit_cint_operand\" \"i\"))))]\n-  \"TARGET_ALTIVEC\"\n-  \"vspltisw %0,%1\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n (define_insn \"ftruncv4sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n   \t(fix:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")))]\n@@ -1992,16 +1974,16 @@\n ;;    vandc %0,%1,SCRATCH2\n (define_expand \"absv4sf2\"\n   [(set (match_dup 2)\n-\t(vec_duplicate:V4SF (float:SF (const_int -1))))\n+\t(vec_duplicate:V4SI (const_int -1)))\n    (set (match_dup 3)\n-        (unspec:V4SF [(match_dup 2) (match_dup 2)] UNSPEC_VSLW))\n+        (unspec:V4SI [(match_dup 2) (match_dup 2)] UNSPEC_VSL))\n    (set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-        (and:V4SF (not:V4SF (match_dup 3))\n+        (and:V4SF (not:V4SF (subreg:V4SF (match_dup 3) 0))\n                   (match_operand:V4SF 1 \"register_operand\" \"v\")))]\n   \"TARGET_ALTIVEC\"\n {\n-  operands[2] = gen_reg_rtx (V4SFmode);\n-  operands[3] = gen_reg_rtx (V4SFmode);\n+  operands[2] = gen_reg_rtx (V4SImode);\n+  operands[3] = gen_reg_rtx (V4SImode);\n })\n \n ;; Generate\n@@ -2230,12 +2212,13 @@\n   rtx neg0;\n \n   /* Generate [-0.0, -0.0, -0.0, -0.0].  */\n-  neg0 = gen_reg_rtx (V4SFmode);\n-  emit_insn (gen_altivec_vspltisw_v4sf (neg0, constm1_rtx));\n-  emit_insn (gen_altivec_vslw_v4sf (neg0, neg0, neg0));\n+  neg0 = gen_reg_rtx (V4SImode);\n+  emit_insn (gen_altivec_vspltisw (neg0, constm1_rtx));\n+  emit_insn (gen_altivec_vslw (neg0, neg0, neg0));\n \n   /* XOR */\n-  emit_insn (gen_xorv4sf3 (operands[0], neg0, operands[1])); \n+  emit_insn (gen_xorv4sf3 (operands[0],\n+\t\t\t   gen_lowpart (V4SFmode, neg0), operands[1])); \n     \n   DONE;\n }\")"}, {"sha": "f4c04f117cf50a827f09f4469d56941d33157c87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf0db2bcd9ed44aebb664815717294b4c9affc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf0db2bcd9ed44aebb664815717294b4c9affc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8cf0db2bcd9ed44aebb664815717294b4c9affc5", "patch": "@@ -1,3 +1,8 @@\n+2006-06-06  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR target/27842\n+\t* gcc.dg/vmx/pr27842.c: New test.\n+\n 2006-06-05  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/27895"}, {"sha": "56b2970e423ca8076810a3742f1ecc14ea2f1057", "filename": "gcc/testsuite/gcc.dg/vmx/pr27842.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf0db2bcd9ed44aebb664815717294b4c9affc5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpr27842.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf0db2bcd9ed44aebb664815717294b4c9affc5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpr27842.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpr27842.c?ref=8cf0db2bcd9ed44aebb664815717294b4c9affc5", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+\n+void test (vector float *p, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    p[i] = vec_abs (p[i]);\n+}\n+\n+int\n+main (void)\n+{\n+  vector float p = (vector float){ 0.5, 0.5, 0.5, 0.5 };\n+  vector float q = p;\n+\n+  test (&p, 1);\n+\n+  if (memcmp (&p, &q, sizeof (p)))\n+    abort ();\n+\n+  return 0;\n+}\n+"}]}