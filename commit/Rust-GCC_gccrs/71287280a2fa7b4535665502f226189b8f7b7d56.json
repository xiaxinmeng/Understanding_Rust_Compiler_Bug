{"sha": "71287280a2fa7b4535665502f226189b8f7b7d56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyODcyODBhMmZhN2I0NTM1NjY1NTAyZjIyNjE4OWI4ZjdiN2Q1Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-10-12T13:10:33Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-10-12T13:10:33Z"}, "message": "gthr-dce.h: Fix comment formatting.\n\n\t* gthr-dce.h: Fix comment formatting.\n\t* gthr-posix.h: Likewise.\n\t* gthr-single.h: Likewise.\n\t* gthr-solaris.h: Likewise.\n\t* gthr-vxworks.h: Likewise.\n\t* gthr-win32.h: Likewise.\n\nFrom-SVN: r46229", "tree": {"sha": "a1d7f27ef543bf7ddeb79c9da064d112557b3ead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1d7f27ef543bf7ddeb79c9da064d112557b3ead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71287280a2fa7b4535665502f226189b8f7b7d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71287280a2fa7b4535665502f226189b8f7b7d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71287280a2fa7b4535665502f226189b8f7b7d56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71287280a2fa7b4535665502f226189b8f7b7d56/comments", "author": null, "committer": null, "parents": [{"sha": "8554d9a464c544fbe1f2cf7df84b33dd8ab79347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8554d9a464c544fbe1f2cf7df84b33dd8ab79347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8554d9a464c544fbe1f2cf7df84b33dd8ab79347"}], "stats": {"total": 287, "additions": 148, "deletions": 139}, "files": [{"sha": "c627e6a505c5ac4b370bd9a2c564f31b15ed2080", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71287280a2fa7b4535665502f226189b8f7b7d56", "patch": "@@ -1,3 +1,12 @@\n+2001-10-12  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* gthr-dce.h: Fix comment formatting.\n+\t* gthr-posix.h: Likewise.\n+\t* gthr-single.h: Likewise.\n+\t* gthr-solaris.h: Likewise.\n+\t* gthr-vxworks.h: Likewise.\n+\t* gthr-win32.h: Likewise.\n+\n 2001-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* final.c (output_asm_insn): Make sure assembly dialects are"}, {"sha": "25eab0e5693a7a445a0ca04ee8ebe37d13c4e94b", "filename": "gcc/gthr-dce.h", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-dce.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-dce.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-dce.h?ref=71287280a2fa7b4535665502f226189b8f7b7d56", "patch": "@@ -31,7 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* DCE threads interface.\n    DCE threads are based on POSIX threads draft 4, and many things\n-   have changed since then. */\n+   have changed since then.  */\n \n #define __GTHREADS 1\n \n@@ -68,7 +68,7 @@ typedef pthread_mutex_t __gthread_mutex_t;\n #pragma weak pthread_mutex_unlock\n \n #ifdef _LIBOBJC\n-/* Objective C. */\n+/* Objective C.  */\n #pragma weak pthread_cond_broadcast\n #pragma weak pthread_cond_destroy\n #pragma weak pthread_cond_init\n@@ -109,7 +109,7 @@ static void *thread_local_storage = NULL;\n \n /* Backend initialization functions */\n \n-/* Initialize the threads subsystem. */\n+/* Initialize the threads subsystem.  */\n static inline int\n __gthread_objc_init_thread_system(void)\n {\n@@ -120,7 +120,7 @@ __gthread_objc_init_thread_system(void)\n     return -1;\n }\n \n-/* Close the threads subsystem. */\n+/* Close the threads subsystem.  */\n static inline int\n __gthread_objc_close_thread_system(void)\n {\n@@ -132,7 +132,7 @@ __gthread_objc_close_thread_system(void)\n \n /* Backend thread functions */\n \n-/* Create a new thread of execution. */\n+/* Create a new thread of execution.  */\n static inline objc_thread_t\n __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n {\n@@ -147,15 +147,15 @@ __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n     {\n       /* ??? May not work! (64bit) */\n       thread_id = *(objc_thread_t *)&new_thread_handle;\n-      pthread_detach(&new_thread_handle); /* Fully detach thread. */\n+      pthread_detach(&new_thread_handle); /* Fully detach thread.  */\n     }\n   else\n     thread_id = NULL;\n   \n   return thread_id;\n }\n \n-/* Set the current thread's priority. */\n+/* Set the current thread's priority.  */\n static inline int\n __gthread_objc_thread_set_priority(int priority)\n {\n@@ -178,15 +178,15 @@ __gthread_objc_thread_set_priority(int priority)\n       break;\n     }\n     \n-  /* Change the priority. */\n+  /* Change the priority.  */\n   if (pthread_setprio(pthread_self(), sys_priority) >= 0)\n     return 0;\n   else\n     /* Failed */\n     return -1;\n }\n \n-/* Return the current thread's priority. */\n+/* Return the current thread's priority.  */\n static inline int\n __gthread_objc_thread_get_priority(void)\n {\n@@ -212,15 +212,15 @@ __gthread_objc_thread_get_priority(void)\n     return OBJC_THREAD_INTERACTIVE_PRIORITY;\n }\n \n-/* Yield our process time to another thread. */\n+/* Yield our process time to another thread.  */\n static inline void\n __gthread_objc_thread_yield(void)\n {\n   if (__gthread_active_p ())\n     pthread_yield();\n }\n \n-/* Terminate the current thread. */\n+/* Terminate the current thread.  */\n static inline int\n __gthread_objc_thread_exit(void)\n {\n@@ -232,7 +232,7 @@ __gthread_objc_thread_exit(void)\n   return -1;\n }\n \n-/* Returns an integer value which uniquely describes a thread. */\n+/* Returns an integer value which uniquely describes a thread.  */\n static inline objc_thread_t\n __gthread_objc_thread_id(void)\n {\n@@ -246,7 +246,7 @@ __gthread_objc_thread_id(void)\n     return (objc_thread_t)1;\n }\n \n-/* Sets the thread's local storage pointer. */\n+/* Sets the thread's local storage pointer.  */\n static inline int\n __gthread_objc_thread_set_data(void *value)\n {\n@@ -259,7 +259,7 @@ __gthread_objc_thread_set_data(void *value)\n     }\n }\n \n-/* Returns the thread's local storage pointer. */\n+/* Returns the thread's local storage pointer.  */\n static inline void *\n __gthread_objc_thread_get_data(void)\n {\n@@ -278,7 +278,7 @@ __gthread_objc_thread_get_data(void)\n \n /* Backend mutex functions */\n \n-/* Allocate a mutex. */\n+/* Allocate a mutex.  */\n static inline int\n __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n {\n@@ -298,7 +298,7 @@ __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Deallocate a mutex. */\n+/* Deallocate a mutex.  */\n static inline int\n __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n {\n@@ -314,7 +314,7 @@ __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Grab a lock on a mutex. */\n+/* Grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_lock(objc_mutex_t mutex)\n {\n@@ -324,7 +324,7 @@ __gthread_objc_mutex_lock(objc_mutex_t mutex)\n     return 0;\n }\n \n-/* Try to grab a lock on a mutex. */\n+/* Try to grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_trylock(objc_mutex_t mutex)\n {\n@@ -347,23 +347,23 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Backend condition mutex functions */\n \n-/* Allocate a condition. */\n+/* Allocate a condition.  */\n static inline int\n __gthread_objc_condition_allocate(objc_condition_t condition)\n {\n   if (__gthread_active_p ())\n-    /* Unimplemented. */\n+    /* Unimplemented.  */\n     return -1;\n   else\n     return 0;\n }\n \n-/* Deallocate a condition. */\n+/* Deallocate a condition.  */\n static inline int\n __gthread_objc_condition_deallocate(objc_condition_t condition)\n {\n   if (__gthread_active_p ())\n-    /* Unimplemented. */\n+    /* Unimplemented.  */\n     return -1;\n   else\n     return 0;\n@@ -374,29 +374,29 @@ static inline int\n __gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n {\n   if (__gthread_active_p ())\n-    /* Unimplemented. */\n+    /* Unimplemented.  */\n     return -1;\n   else\n     return 0;\n }\n \n-/* Wake up all threads waiting on this condition. */\n+/* Wake up all threads waiting on this condition.  */\n static inline int\n __gthread_objc_condition_broadcast(objc_condition_t condition)\n {\n   if (__gthread_active_p ())\n-    /* Unimplemented. */\n+    /* Unimplemented.  */\n     return -1;\n   else\n     return 0;\n }\n \n-/* Wake up one thread waiting on this condition. */\n+/* Wake up one thread waiting on this condition.  */\n static inline int\n __gthread_objc_condition_signal(objc_condition_t condition)\n {\n   if (__gthread_active_p ())\n-    /* Unimplemented. */\n+    /* Unimplemented.  */\n     return -1;\n   else\n     return 0;\n@@ -422,7 +422,7 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n static inline int\n __gthread_key_dtor (UNUSED (__gthread_key_t key), UNUSED (void *ptr))\n {\n-  /* Nothing needed. */\n+  /* Nothing needed.  */\n   return 0;\n }\n "}, {"sha": "fe9e584bbb701afe995351794438631b828883f2", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=71287280a2fa7b4535665502f226189b8f7b7d56", "patch": "@@ -30,7 +30,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GCC_GTHR_POSIX_H\n \n /* POSIX threads specific definitions.\n-   Easy, since the interface is just one-to-one mapping. */\n+   Easy, since the interface is just one-to-one mapping.  */\n \n #define __GTHREADS 1\n \n@@ -57,7 +57,7 @@ typedef pthread_mutex_t __gthread_mutex_t;\n #pragma weak pthread_mutex_unlock \n \n #ifdef _LIBOBJC\n-/* Objective C. */\n+/* Objective C.  */\n #pragma weak pthread_cond_broadcast\n #pragma weak pthread_cond_destroy\n #pragma weak pthread_cond_init\n@@ -113,7 +113,7 @@ static void *thread_local_storage = NULL;\n \n /* Backend initialization functions */\n \n-/* Initialize the threads subsystem. */\n+/* Initialize the threads subsystem.  */\n static inline int\n __gthread_objc_init_thread_system(void)\n {\n@@ -135,7 +135,7 @@ __gthread_objc_init_thread_system(void)\n   return -1;\n }\n \n-/* Close the threads subsystem. */\n+/* Close the threads subsystem.  */\n static inline int\n __gthread_objc_close_thread_system(void)\n {\n@@ -149,7 +149,7 @@ __gthread_objc_close_thread_system(void)\n \n /* Backend thread functions */\n \n-/* Create a new thread of execution. */\n+/* Create a new thread of execution.  */\n static inline objc_thread_t\n __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n {\n@@ -167,7 +167,7 @@ __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n   return thread_id;\n }\n \n-/* Set the current thread's priority. */\n+/* Set the current thread's priority.  */\n static inline int\n __gthread_objc_thread_set_priority(int priority)\n {\n@@ -205,7 +205,7 @@ __gthread_objc_thread_set_priority(int priority)\n   }\n }\n \n-/* Return the current thread's priority. */\n+/* Return the current thread's priority.  */\n static inline int\n __gthread_objc_thread_get_priority(void)\n {\n@@ -223,15 +223,15 @@ __gthread_objc_thread_get_priority(void)\n     return OBJC_THREAD_INTERACTIVE_PRIORITY;\n }\n \n-/* Yield our process time to another thread. */\n+/* Yield our process time to another thread.  */\n static inline void\n __gthread_objc_thread_yield(void)\n {\n   if (__gthread_active_p ())\n     sched_yield();\n }\n \n-/* Terminate the current thread. */\n+/* Terminate the current thread.  */\n static inline int\n __gthread_objc_thread_exit(void)\n {\n@@ -243,7 +243,7 @@ __gthread_objc_thread_exit(void)\n   return -1;\n }\n \n-/* Returns an integer value which uniquely describes a thread. */\n+/* Returns an integer value which uniquely describes a thread.  */\n static inline objc_thread_t\n __gthread_objc_thread_id(void)\n {\n@@ -253,7 +253,7 @@ __gthread_objc_thread_id(void)\n     return (objc_thread_t) 1;\n }\n \n-/* Sets the thread's local storage pointer. */\n+/* Sets the thread's local storage pointer.  */\n static inline int\n __gthread_objc_thread_set_data(void *value)\n {\n@@ -266,7 +266,7 @@ __gthread_objc_thread_set_data(void *value)\n     }\n }\n \n-/* Returns the thread's local storage pointer. */\n+/* Returns the thread's local storage pointer.  */\n static inline void *\n __gthread_objc_thread_get_data(void)\n {\n@@ -278,7 +278,7 @@ __gthread_objc_thread_get_data(void)\n \n /* Backend mutex functions */\n \n-/* Allocate a mutex. */\n+/* Allocate a mutex.  */\n static inline int\n __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n {\n@@ -297,7 +297,7 @@ __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Deallocate a mutex. */\n+/* Deallocate a mutex.  */\n static inline int\n __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n {\n@@ -327,7 +327,7 @@ __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Grab a lock on a mutex. */\n+/* Grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_lock(objc_mutex_t mutex)\n {\n@@ -340,7 +340,7 @@ __gthread_objc_mutex_lock(objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Try to grab a lock on a mutex. */\n+/* Try to grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_trylock(objc_mutex_t mutex)\n {\n@@ -368,7 +368,7 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Backend condition mutex functions */\n \n-/* Allocate a condition. */\n+/* Allocate a condition.  */\n static inline int\n __gthread_objc_condition_allocate(objc_condition_t condition)\n {\n@@ -387,7 +387,7 @@ __gthread_objc_condition_allocate(objc_condition_t condition)\n   return 0;\n }\n \n-/* Deallocate a condition. */\n+/* Deallocate a condition.  */\n static inline int\n __gthread_objc_condition_deallocate(objc_condition_t condition)\n {\n@@ -413,7 +413,7 @@ __gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n     return 0;\n }\n \n-/* Wake up all threads waiting on this condition. */\n+/* Wake up all threads waiting on this condition.  */\n static inline int\n __gthread_objc_condition_broadcast(objc_condition_t condition)\n {\n@@ -423,7 +423,7 @@ __gthread_objc_condition_broadcast(objc_condition_t condition)\n     return 0;\n }\n \n-/* Wake up one thread waiting on this condition. */\n+/* Wake up one thread waiting on this condition.  */\n static inline int\n __gthread_objc_condition_signal(objc_condition_t condition)\n {\n@@ -453,7 +453,7 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n static inline int\n __gthread_key_dtor (__gthread_key_t key, void *ptr)\n {\n-  /* Just reset the key value to zero. */\n+  /* Just reset the key value to zero.  */\n   if (ptr)\n     return pthread_setspecific (key, 0);\n   else"}, {"sha": "64ff354131d5c82cffe95f55d17027f16466b7c5", "filename": "gcc/gthr-single.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-single.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-single.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-single.h?ref=71287280a2fa7b4535665502f226189b8f7b7d56", "patch": "@@ -29,7 +29,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_GTHR_SINGLE_H\n #define GCC_GTHR_SINGLE_H\n \n-/* Just provide compatibility for mutex handling. */\n+/* Just provide compatibility for mutex handling.  */\n \n typedef int __gthread_mutex_t;\n \n@@ -48,15 +48,15 @@ static void *thread_local_storage = NULL;\n \n /* Backend initialization functions */\n \n-/* Initialize the threads subsystem. */\n+/* Initialize the threads subsystem.  */\n static inline int\n __gthread_objc_init_thread_system(void)\n {\n   /* No thread support available */\n   return -1;\n }\n \n-/* Close the threads subsystem. */\n+/* Close the threads subsystem.  */\n static inline int\n __gthread_objc_close_thread_system(void)\n {\n@@ -66,37 +66,37 @@ __gthread_objc_close_thread_system(void)\n \n /* Backend thread functions */\n \n-/* Create a new thread of execution. */\n+/* Create a new thread of execution.  */\n static inline objc_thread_t\n __gthread_objc_thread_detach(void (* func)(void *), void * UNUSED(arg))\n {\n   /* No thread support available */\n   return NULL;\n }\n \n-/* Set the current thread's priority. */\n+/* Set the current thread's priority.  */\n static inline int\n __gthread_objc_thread_set_priority(int UNUSED(priority))\n {\n   /* No thread support available */\n   return -1;\n }\n \n-/* Return the current thread's priority. */\n+/* Return the current thread's priority.  */\n static inline int\n __gthread_objc_thread_get_priority(void)\n {\n   return OBJC_THREAD_INTERACTIVE_PRIORITY;\n }\n \n-/* Yield our process time to another thread. */\n+/* Yield our process time to another thread.  */\n static inline void\n __gthread_objc_thread_yield(void)\n {\n   return;\n }\n \n-/* Terminate the current thread. */\n+/* Terminate the current thread.  */\n static inline int\n __gthread_objc_thread_exit(void)\n {\n@@ -106,23 +106,23 @@ __gthread_objc_thread_exit(void)\n   return -1;\n }\n \n-/* Returns an integer value which uniquely describes a thread. */\n+/* Returns an integer value which uniquely describes a thread.  */\n static inline objc_thread_t\n __gthread_objc_thread_id(void)\n {\n-  /* No thread support, use 1. */\n+  /* No thread support, use 1.  */\n   return (objc_thread_t)1;\n }\n \n-/* Sets the thread's local storage pointer. */\n+/* Sets the thread's local storage pointer.  */\n static inline int\n __gthread_objc_thread_set_data(void *value)\n {\n   thread_local_storage = value;\n   return 0;\n }\n \n-/* Returns the thread's local storage pointer. */\n+/* Returns the thread's local storage pointer.  */\n static inline void *\n __gthread_objc_thread_get_data(void)\n {\n@@ -131,29 +131,29 @@ __gthread_objc_thread_get_data(void)\n \n /* Backend mutex functions */\n \n-/* Allocate a mutex. */\n+/* Allocate a mutex.  */\n static inline int\n __gthread_objc_mutex_allocate(objc_mutex_t UNUSED(mutex))\n {\n   return 0;\n }\n \n-/* Deallocate a mutex. */\n+/* Deallocate a mutex.  */\n static inline int\n __gthread_objc_mutex_deallocate(objc_mutex_t UNUSED(mutex))\n {\n   return 0;\n }\n \n-/* Grab a lock on a mutex. */\n+/* Grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_lock(objc_mutex_t UNUSED(mutex))\n {\n   /* There can only be one thread, so we always get the lock */\n   return 0;\n }\n \n-/* Try to grab a lock on a mutex. */\n+/* Try to grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_trylock(objc_mutex_t UNUSED(mutex))\n {\n@@ -170,14 +170,14 @@ __gthread_objc_mutex_unlock(objc_mutex_t UNUSED(mutex))\n \n /* Backend condition mutex functions */\n \n-/* Allocate a condition. */\n+/* Allocate a condition.  */\n static inline int\n __gthread_objc_condition_allocate(objc_condition_t UNUSED(condition))\n {\n   return 0;\n }\n \n-/* Deallocate a condition. */\n+/* Deallocate a condition.  */\n static inline int\n __gthread_objc_condition_deallocate(objc_condition_t UNUSED(condition))\n {\n@@ -192,14 +192,14 @@ __gthread_objc_condition_wait(objc_condition_t UNUSED(condition),\n   return 0;\n }\n \n-/* Wake up all threads waiting on this condition. */\n+/* Wake up all threads waiting on this condition.  */\n static inline int\n __gthread_objc_condition_broadcast(objc_condition_t UNUSED(condition))\n {\n   return 0;\n }\n \n-/* Wake up one thread waiting on this condition. */\n+/* Wake up one thread waiting on this condition.  */\n static inline int\n __gthread_objc_condition_signal(objc_condition_t UNUSED(condition))\n {"}, {"sha": "291210d4e8c1369c0e022435775730a00a97baa4", "filename": "gcc/gthr-solaris.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-solaris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-solaris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-solaris.h?ref=71287280a2fa7b4535665502f226189b8f7b7d56", "patch": "@@ -31,7 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Solaris threads as found in Solaris 2.[456].\n    Actually these are Unix International (UI) threads, but I don't\n-   know if anyone else implements these. */\n+   know if anyone else implements these.  */\n \n #define __GTHREADS 1\n \n@@ -79,7 +79,7 @@ typedef mutex_t __gthread_mutex_t;\n #endif\n \n /* This will not actually work in Solaris 2.5, since libc contains\n-   dummy symbols of all thr_* routines. */\n+   dummy symbols of all thr_* routines.  */\n \n static void *__gthread_active_ptr = (void *) &thr_create;\n \n@@ -109,7 +109,7 @@ static void *thread_local_storage = NULL;\n \n /* Backend initialization functions */\n \n-/* Initialize the threads subsystem. */\n+/* Initialize the threads subsystem.  */\n static inline int\n __gthread_objc_init_thread_system(void)\n {\n@@ -121,7 +121,7 @@ __gthread_objc_init_thread_system(void)\n   return -1;\n }\n \n-/* Close the threads subsystem. */\n+/* Close the threads subsystem.  */\n static inline int\n __gthread_objc_close_thread_system(void)\n {\n@@ -133,7 +133,7 @@ __gthread_objc_close_thread_system(void)\n \n /* Backend thread functions */\n \n-/* Create a new thread of execution. */\n+/* Create a new thread of execution.  */\n static inline objc_thread_t\n __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n {\n@@ -153,7 +153,7 @@ __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n   return thread_id;\n }\n \n-/* Set the current thread's priority. */\n+/* Set the current thread's priority.  */\n static inline int\n __gthread_objc_thread_set_priority(int priority)\n {\n@@ -183,7 +183,7 @@ __gthread_objc_thread_set_priority(int priority)\n     return -1;\n }\n \n-/* Return the current thread's priority. */\n+/* Return the current thread's priority.  */\n static inline int\n __gthread_objc_thread_get_priority(void)\n {\n@@ -201,19 +201,19 @@ __gthread_objc_thread_get_priority(void)\n       return OBJC_THREAD_LOW_PRIORITY;\n     }\n \n-  /* Couldn't get priority. */\n+  /* Couldn't get priority.  */\n   return -1;\n }\n \n-/* Yield our process time to another thread. */\n+/* Yield our process time to another thread.  */\n static inline void\n __gthread_objc_thread_yield(void)\n {\n   if (__gthread_active_p ())\n     thr_yield();\n }\n \n-/* Terminate the current thread. */\n+/* Terminate the current thread.  */\n static inline int\n __gthread_objc_thread_exit(void)\n {\n@@ -225,7 +225,7 @@ __gthread_objc_thread_exit(void)\n   return -1;\n }\n \n-/* Returns an integer value which uniquely describes a thread. */\n+/* Returns an integer value which uniquely describes a thread.  */\n static inline objc_thread_t\n __gthread_objc_thread_id(void)\n {\n@@ -235,7 +235,7 @@ __gthread_objc_thread_id(void)\n     return (objc_thread_t)1;\n }\n \n-/* Sets the thread's local storage pointer. */\n+/* Sets the thread's local storage pointer.  */\n static inline int\n __gthread_objc_thread_set_data(void *value)\n {\n@@ -253,7 +253,7 @@ __gthread_objc_thread_set_data(void *value)\n     }\n }\n \n-/* Returns the thread's local storage pointer. */\n+/* Returns the thread's local storage pointer.  */\n static inline void *\n __gthread_objc_thread_get_data(void)\n {\n@@ -272,7 +272,7 @@ __gthread_objc_thread_get_data(void)\n \n /* Backend mutex functions */\n \n-/* Allocate a mutex. */\n+/* Allocate a mutex.  */\n static inline int\n __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n {\n@@ -283,7 +283,7 @@ __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Deallocate a mutex. */\n+/* Deallocate a mutex.  */\n static inline int\n __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n {\n@@ -293,7 +293,7 @@ __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Grab a lock on a mutex. */\n+/* Grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_lock(objc_mutex_t mutex)\n {\n@@ -304,7 +304,7 @@ __gthread_objc_mutex_lock(objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Try to grab a lock on a mutex. */\n+/* Try to grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_trylock(objc_mutex_t mutex)\n {\n@@ -328,7 +328,7 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Backend condition mutex functions */\n \n-/* Allocate a condition. */\n+/* Allocate a condition.  */\n static inline int\n __gthread_objc_condition_allocate(objc_condition_t condition)\n {\n@@ -339,7 +339,7 @@ __gthread_objc_condition_allocate(objc_condition_t condition)\n     return 0;\n }\n \n-/* Deallocate a condition. */\n+/* Deallocate a condition.  */\n static inline int\n __gthread_objc_condition_deallocate(objc_condition_t condition)\n {\n@@ -360,7 +360,7 @@ __gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n     return 0;\n }\n \n-/* Wake up all threads waiting on this condition. */\n+/* Wake up all threads waiting on this condition.  */\n static inline int\n __gthread_objc_condition_broadcast(objc_condition_t condition)\n {\n@@ -370,7 +370,7 @@ __gthread_objc_condition_broadcast(objc_condition_t condition)\n     return 0;\n }\n \n-/* Wake up one thread waiting on this condition. */\n+/* Wake up one thread waiting on this condition.  */\n static inline int\n __gthread_objc_condition_signal(objc_condition_t condition)\n {\n@@ -410,7 +410,7 @@ static inline int\n __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n {\n   /* Solaris 2.5 contains thr_* routines no-op in libc, so test if we actually\n-     got a reasonable key value, and if not, fail. */\n+     got a reasonable key value, and if not, fail.  */\n   *key = -1;\n   if (thr_keycreate (key, dtor) != 0 || *key == -1)\n     return -1;\n@@ -421,14 +421,14 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n static inline int\n __gthread_key_dtor (__gthread_key_t key, void *ptr)\n {\n-  /* Nothing needed. */\n+  /* Nothing needed.  */\n   return 0;\n }\n \n static inline int\n __gthread_key_delete (__gthread_key_t key)\n {\n-  /* Not possible. */\n+  /* Not possible.  */\n   return -1;\n }\n "}, {"sha": "1474853edb319378cc7d6e898c5c4f763635ba62", "filename": "gcc/gthr-vxworks.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-vxworks.h?ref=71287280a2fa7b4535665502f226189b8f7b7d56", "patch": "@@ -37,15 +37,15 @@ static void *thread_local_storage = NULL;\n \n /* Backend initialization functions */\n \n-/* Initialize the threads subsystem. */\n+/* Initialize the threads subsystem.  */\n int\n __gthread_objc_init_thread_system(void)\n {\n   /* No thread support available */\n   return -1;\n }\n \n-/* Close the threads subsystem. */\n+/* Close the threads subsystem.  */\n int\n __gthread_objc_close_thread_system(void)\n {\n@@ -55,37 +55,37 @@ __gthread_objc_close_thread_system(void)\n \n /* Backend thread functions */\n \n-/* Create a new thread of execution. */\n+/* Create a new thread of execution.  */\n objc_thread_t\n __gthread_objc_thread_detach(void (*func)(void *arg), void *arg)\n {\n   /* No thread support available */\n   return NULL;\n }\n \n-/* Set the current thread's priority. */\n+/* Set the current thread's priority.  */\n int\n __gthread_objc_thread_set_priority(int priority)\n {\n   /* No thread support available */\n   return -1;\n }\n \n-/* Return the current thread's priority. */\n+/* Return the current thread's priority.  */\n int\n __gthread_objc_thread_get_priority(void)\n {\n   return OBJC_THREAD_INTERACTIVE_PRIORITY;\n }\n \n-/* Yield our process time to another thread. */\n+/* Yield our process time to another thread.  */\n void\n __gthread_objc_thread_yield(void)\n {\n   return;\n }\n \n-/* Terminate the current thread. */\n+/* Terminate the current thread.  */\n int\n __gthread_objc_thread_exit(void)\n {\n@@ -95,23 +95,23 @@ __gthread_objc_thread_exit(void)\n   return -1;\n }\n \n-/* Returns an integer value which uniquely describes a thread. */\n+/* Returns an integer value which uniquely describes a thread.  */\n objc_thread_t\n __gthread_objc_thread_id(void)\n {\n-  /* No thread support, use 1. */\n+  /* No thread support, use 1.  */\n   return (objc_thread_t)1;\n }\n \n-/* Sets the thread's local storage pointer. */\n+/* Sets the thread's local storage pointer.  */\n int\n __gthread_objc_thread_set_data(void *value)\n {\n   thread_local_storage = value;\n   return 0;\n }\n \n-/* Returns the thread's local storage pointer. */\n+/* Returns the thread's local storage pointer.  */\n void *\n __gthread_objc_thread_get_data(void)\n {\n@@ -120,29 +120,29 @@ __gthread_objc_thread_get_data(void)\n \n /* Backend mutex functions */\n \n-/* Allocate a mutex. */\n+/* Allocate a mutex.  */\n int\n __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n {\n   return 0;\n }\n \n-/* Deallocate a mutex. */\n+/* Deallocate a mutex.  */\n int\n __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n {\n   return 0;\n }\n \n-/* Grab a lock on a mutex. */\n+/* Grab a lock on a mutex.  */\n int\n __gthread_objc_mutex_lock(objc_mutex_t mutex)\n {\n   /* There can only be one thread, so we always get the lock */\n   return 0;\n }\n \n-/* Try to grab a lock on a mutex. */\n+/* Try to grab a lock on a mutex.  */\n int\n __gthread_objc_mutex_trylock(objc_mutex_t mutex)\n {\n@@ -159,14 +159,14 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Backend condition mutex functions */\n \n-/* Allocate a condition. */\n+/* Allocate a condition.  */\n int\n __gthread_objc_condition_allocate(objc_condition_t condition)\n {\n   return 0;\n }\n \n-/* Deallocate a condition. */\n+/* Deallocate a condition.  */\n int\n __gthread_objc_condition_deallocate(objc_condition_t condition)\n {\n@@ -180,14 +180,14 @@ __gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Wake up all threads waiting on this condition. */\n+/* Wake up all threads waiting on this condition.  */\n int\n __gthread_objc_condition_broadcast(objc_condition_t condition)\n {\n   return 0;\n }\n \n-/* Wake up one thread waiting on this condition. */\n+/* Wake up one thread waiting on this condition.  */\n int\n __gthread_objc_condition_signal(objc_condition_t condition)\n {\n@@ -197,7 +197,7 @@ __gthread_objc_condition_signal(objc_condition_t condition)\n #else /* _LIBOBJC */\n \n /* POSIX threads specific definitions.\n-   Easy, since the interface is just one-to-one mapping. */\n+   Easy, since the interface is just one-to-one mapping.  */\n \n #define __GTHREADS 1\n \n@@ -264,7 +264,7 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n static inline int\n __gthread_key_dtor (__gthread_key_t key, void *ptr)\n {\n-  /* Just reset the key value to zero. */\n+  /* Just reset the key value to zero.  */\n   if (ptr)\n     return __gthread_setspecific (key, 0);\n   else"}, {"sha": "97a50dab0bbd5653662823f08b537db85498be45", "filename": "gcc/gthr-win32.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-win32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71287280a2fa7b4535665502f226189b8f7b7d56/gcc%2Fgthr-win32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-win32.h?ref=71287280a2fa7b4535665502f226189b8f7b7d56", "patch": "@@ -77,7 +77,7 @@ static DWORD\t__gthread_objc_data_tls = (DWORD)-1;\n \n /* Backend initialization functions */\n \n-/* Initialize the threads subsystem. */\n+/* Initialize the threads subsystem.  */\n int\n __gthread_objc_init_thread_system(void)\n {\n@@ -88,7 +88,7 @@ __gthread_objc_init_thread_system(void)\n     return -1;\n }\n \n-/* Close the threads subsystem. */\n+/* Close the threads subsystem.  */\n int\n __gthread_objc_close_thread_system(void)\n {\n@@ -99,7 +99,7 @@ __gthread_objc_close_thread_system(void)\n \n /* Backend thread functions */\n \n-/* Create a new thread of execution. */\n+/* Create a new thread of execution.  */\n objc_thread_t\n __gthread_objc_thread_detach(void (*func)(void *arg), void *arg)\n {\n@@ -113,7 +113,7 @@ __gthread_objc_thread_detach(void (*func)(void *arg), void *arg)\n   return (objc_thread_t)thread_id;\n }\n \n-/* Set the current thread's priority. */\n+/* Set the current thread's priority.  */\n int\n __gthread_objc_thread_set_priority(int priority)\n {\n@@ -140,7 +140,7 @@ __gthread_objc_thread_set_priority(int priority)\n     return -1;\n }\n \n-/* Return the current thread's priority. */\n+/* Return the current thread's priority.  */\n int\n __gthread_objc_thread_get_priority(void)\n {\n@@ -165,18 +165,18 @@ __gthread_objc_thread_get_priority(void)\n       return OBJC_THREAD_LOW_PRIORITY;\n     }\n \n-  /* Couldn't get priority. */\n+  /* Couldn't get priority.  */\n   return -1;\n }\n \n-/* Yield our process time to another thread. */\n+/* Yield our process time to another thread.  */\n void\n __gthread_objc_thread_yield(void)\n {\n   Sleep(0);\n }\n \n-/* Terminate the current thread. */\n+/* Terminate the current thread.  */\n int\n __gthread_objc_thread_exit(void)\n {\n@@ -187,14 +187,14 @@ __gthread_objc_thread_exit(void)\n   return -1;\n }\n \n-/* Returns an integer value which uniquely describes a thread. */\n+/* Returns an integer value which uniquely describes a thread.  */\n objc_thread_t\n __gthread_objc_thread_id(void)\n {\n   return (objc_thread_t)GetCurrentThreadId();\n }\n \n-/* Sets the thread's local storage pointer. */\n+/* Sets the thread's local storage pointer.  */\n int\n __gthread_objc_thread_set_data(void *value)\n {\n@@ -204,7 +204,7 @@ __gthread_objc_thread_set_data(void *value)\n     return -1;\n }\n \n-/* Returns the thread's local storage pointer. */\n+/* Returns the thread's local storage pointer.  */\n void *\n __gthread_objc_thread_get_data(void)\n {\n@@ -222,7 +222,7 @@ __gthread_objc_thread_get_data(void)\n \n /* Backend mutex functions */\n \n-/* Allocate a mutex. */\n+/* Allocate a mutex.  */\n int\n __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n {\n@@ -232,15 +232,15 @@ __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n     return 0;\n }\n \n-/* Deallocate a mutex. */\n+/* Deallocate a mutex.  */\n int\n __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n {\n   CloseHandle((HANDLE)(mutex->backend));\n   return 0;\n }\n \n-/* Grab a lock on a mutex. */\n+/* Grab a lock on a mutex.  */\n int\n __gthread_objc_mutex_lock(objc_mutex_t mutex)\n {\n@@ -253,7 +253,7 @@ __gthread_objc_mutex_lock(objc_mutex_t mutex)\n     return 0;\n }\n \n-/* Try to grab a lock on a mutex. */\n+/* Try to grab a lock on a mutex.  */\n int\n __gthread_objc_mutex_trylock(objc_mutex_t mutex)\n {\n@@ -278,43 +278,43 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Backend condition mutex functions */\n \n-/* Allocate a condition. */\n+/* Allocate a condition.  */\n int\n __gthread_objc_condition_allocate(objc_condition_t condition)\n {\n-  /* Unimplemented. */\n+  /* Unimplemented.  */\n   return -1;\n }\n \n-/* Deallocate a condition. */\n+/* Deallocate a condition.  */\n int\n __gthread_objc_condition_deallocate(objc_condition_t condition)\n {\n-  /* Unimplemented. */\n+  /* Unimplemented.  */\n   return -1;\n }\n \n /* Wait on the condition */\n int\n __gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n {\n-  /* Unimplemented. */\n+  /* Unimplemented.  */\n   return -1;\n }\n \n-/* Wake up all threads waiting on this condition. */\n+/* Wake up all threads waiting on this condition.  */\n int\n __gthread_objc_condition_broadcast(objc_condition_t condition)\n {\n-  /* Unimplemented. */\n+  /* Unimplemented.  */\n   return -1;\n }\n \n-/* Wake up one thread waiting on this condition. */\n+/* Wake up one thread waiting on this condition.  */\n int\n __gthread_objc_condition_signal(objc_condition_t condition)\n {\n-  /* Unimplemented. */\n+  /* Unimplemented.  */\n   return -1;\n }\n \n@@ -413,7 +413,7 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n static inline int\n __gthread_key_dtor (__gthread_key_t key, void *ptr)\n {\n-  /* Nothing needed. */\n+  /* Nothing needed.  */\n   return 0;\n }\n "}]}