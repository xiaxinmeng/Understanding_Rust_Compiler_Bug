{"sha": "7ab886543206b714b7e90e447446c0128d7638cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiODg2NTQzMjA2YjcxNGI3ZTkwZTQ0NzQ0NmMwMTI4ZDc2MzhjYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-09-12T10:30:22Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-09-12T10:30:22Z"}, "message": "re PR fortran/33297 (SIZE intrinsic crashes gfortran on invalid usage)\n\n2007-09-12  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/33297\n\t* check.c (scalar_check): Move up in the file.\n\t(kind_check): Call scalar_check.\n\t(dim_check): If optional, do not call nonoptional_check; use\n\tbool for optional.\n\t(gfc_check_all_any,gfc_check_count,gfc_check_cshift,gfc_check_eoshift,\n\tgfc_check_lbound,gfc_check_minloc_maxloc,check_reduction,\n\tgfc_check_spread,gfc_check_ubound): Use true/false instead of 0/1\n\tfor dim_check; honor changed meaning of optional.\n\t(gfc_check_int): Replace checks by kind_check.\n\t(gfc_check_size): Replace checks by dim_check.\n\n2007-09-12  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/33297\n\t* gfortran.dg/intrinsic_size.f90: New.\n\nFrom-SVN: r128424", "tree": {"sha": "92f48b1eeaac17f8cfaab5a4bf50c5d21fd6b71e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92f48b1eeaac17f8cfaab5a4bf50c5d21fd6b71e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ab886543206b714b7e90e447446c0128d7638cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab886543206b714b7e90e447446c0128d7638cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab886543206b714b7e90e447446c0128d7638cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab886543206b714b7e90e447446c0128d7638cb/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1dde7d41c18eccd347c996c282423a6b0056efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1dde7d41c18eccd347c996c282423a6b0056efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1dde7d41c18eccd347c996c282423a6b0056efd"}], "stats": {"total": 106, "additions": 67, "deletions": 39}, "files": [{"sha": "6a5914bdea1ed79dfeffc859373b7661e08e688b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab886543206b714b7e90e447446c0128d7638cb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab886543206b714b7e90e447446c0128d7638cb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7ab886543206b714b7e90e447446c0128d7638cb", "patch": "@@ -1,3 +1,17 @@\n+2007-09-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33297\n+\t* check.c (scalar_check): Move up in the file.\n+\t(kind_check): Call scalar_check.\n+\t(dim_check): If optional, do not call nonoptional_check; use\n+\tbool for optional.\n+\t(gfc_check_all_any,gfc_check_count,gfc_check_cshift,gfc_check_eoshift,\n+\tgfc_check_lbound,gfc_check_minloc_maxloc,check_reduction,\n+\tgfc_check_spread,gfc_check_ubound): Use true/false instead of 0/1\n+\tfor dim_check; honor changed meaning of optional.\n+\t(gfc_check_int): Replace checks by kind_check.\n+\t(gfc_check_size): Replace checks by dim_check.\n+\n 2007-09-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33284"}, {"sha": "5f3f92df4fbfe7b51a387d05afc54b8154e30a1c", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab886543206b714b7e90e447446c0128d7638cb/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab886543206b714b7e90e447446c0128d7638cb/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=7ab886543206b714b7e90e447446c0128d7638cb", "patch": "@@ -33,6 +33,21 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intrinsic.h\"\n \n \n+/* Make sure an expression is a scalar.  */\n+\n+static try\n+scalar_check (gfc_expr *e, int n)\n+{\n+  if (e->rank == 0)\n+    return SUCCESS;\n+\n+  gfc_error (\"'%s' argument of '%s' intrinsic at %L must be a scalar\",\n+\t     gfc_current_intrinsic_arg[n], gfc_current_intrinsic, &e->where);\n+\n+  return FAILURE;\n+}\n+\n+\n /* Check the type of an expression.  */\n \n static try\n@@ -124,6 +139,9 @@ kind_check (gfc_expr *k, int n, bt type)\n   if (type_check (k, n, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n+  if (scalar_check (k, n) == FAILURE)\n+    return FAILURE;\n+\n   if (k->expr_type != EXPR_CONSTANT)\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L must be a constant\",\n@@ -196,21 +214,6 @@ array_check (gfc_expr *e, int n)\n }\n \n \n-/* Make sure an expression is a scalar.  */\n-\n-static try\n-scalar_check (gfc_expr *e, int n)\n-{\n-  if (e->rank == 0)\n-    return SUCCESS;\n-\n-  gfc_error (\"'%s' argument of '%s' intrinsic at %L must be a scalar\",\n-\t     gfc_current_intrinsic_arg[n], gfc_current_intrinsic, &e->where);\n-\n-  return FAILURE;\n-}\n-\n-\n /* Make sure two expressions have the same type.  */\n \n static try\n@@ -307,9 +310,9 @@ variable_check (gfc_expr *e, int n)\n /* Check the common DIM parameter for correctness.  */\n \n static try\n-dim_check (gfc_expr *dim, int n, int optional)\n+dim_check (gfc_expr *dim, int n, bool optional)\n {\n-  if (optional && dim == NULL)\n+  if (dim == NULL)\n     return SUCCESS;\n \n   if (dim == NULL)\n@@ -325,7 +328,7 @@ dim_check (gfc_expr *dim, int n, int optional)\n   if (scalar_check (dim, n) == FAILURE)\n     return FAILURE;\n \n-  if (nonoptional_check (dim, n) == FAILURE)\n+  if (!optional && nonoptional_check (dim, n) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -475,7 +478,7 @@ gfc_check_all_any (gfc_expr *mask, gfc_expr *dim)\n   if (logical_array_check (mask, 0) == FAILURE)\n     return FAILURE;\n \n-  if (dim_check (dim, 1, 1) == FAILURE)\n+  if (dim_check (dim, 1, false) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -792,7 +795,7 @@ gfc_check_count (gfc_expr *mask, gfc_expr *dim, gfc_expr *kind)\n {\n   if (logical_array_check (mask, 0) == FAILURE)\n     return FAILURE;\n-  if (dim_check (dim, 1, 1) == FAILURE)\n+  if (dim_check (dim, 1, false) == FAILURE)\n     return FAILURE;\n   if (kind_check (kind, 2, BT_INTEGER) == FAILURE)\n     return FAILURE;\n@@ -821,7 +824,8 @@ gfc_check_cshift (gfc_expr *array, gfc_expr *shift, gfc_expr *dim)\n       /* TODO: more requirements on shift parameter.  */\n     }\n \n-  if (dim_check (dim, 2, 1) == FAILURE)\n+  /* FIXME (PR33317): Allow optional DIM=.  */\n+  if (dim_check (dim, 2, false) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -955,7 +959,8 @@ gfc_check_eoshift (gfc_expr *array, gfc_expr *shift, gfc_expr *boundary,\n       /* TODO: more restrictions on boundary.  */\n     }\n \n-  if (dim_check (dim, 1, 1) == FAILURE)\n+  /* FIXME (PR33317): Allow optional DIM=.  */\n+  if (dim_check (dim, 4, false) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -1233,14 +1238,8 @@ gfc_check_int (gfc_expr *x, gfc_expr *kind)\n   if (numeric_check (x, 0) == FAILURE)\n     return FAILURE;\n \n-  if (kind != NULL)\n-    {\n-      if (type_check (kind, 1, BT_INTEGER) == FAILURE)\n-\treturn FAILURE;\n-\n-      if (scalar_check (kind, 1) == FAILURE)\n-\treturn FAILURE;\n-    }\n+  if (kind_check (kind, 1, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n \n   return SUCCESS;\n }\n@@ -1365,7 +1364,7 @@ gfc_check_lbound (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n \n   if (dim != NULL)\n     {\n-      if (dim_check (dim, 1, 1) == FAILURE)\n+      if (dim_check (dim, 1, false) == FAILURE)\n \treturn FAILURE;\n \n       if (dim_rank_check (dim, array, 1) == FAILURE)\n@@ -1714,7 +1713,7 @@ gfc_check_minloc_maxloc (gfc_actual_arglist *ap)\n       ap->next->next->expr = m;\n     }\n \n-  if (dim_check (d, 1, 1) == FAILURE)\n+  if (d && dim_check (d, 1, false) == FAILURE)\n     return FAILURE;\n \n   if (d && dim_rank_check (d, a, 0) == FAILURE)\n@@ -1770,7 +1769,7 @@ check_reduction (gfc_actual_arglist *ap)\n       ap->next->next->expr = m;\n     }\n \n-  if (dim_check (d, 1, 1) == FAILURE)\n+  if (d && dim_check (d, 1, false) == FAILURE)\n     return FAILURE;\n \n   if (d && dim_rank_check (d, a, 0) == FAILURE)\n@@ -2338,10 +2337,7 @@ gfc_check_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n \n   if (dim != NULL)\n     {\n-      if (type_check (dim, 1, BT_INTEGER) == FAILURE)\n-\treturn FAILURE;\n-\n-      if (kind_value_check (dim, 1, gfc_default_integer_kind) == FAILURE)\n+      if (dim_check (dim, 1, true) == FAILURE)\n \treturn FAILURE;\n \n       if (dim_rank_check (dim, array, 0) == FAILURE)\n@@ -2392,7 +2388,10 @@ gfc_check_spread (gfc_expr *source, gfc_expr *dim, gfc_expr *ncopies)\n       return FAILURE;\n     }\n \n-  if (dim_check (dim, 1, 0) == FAILURE)\n+  if (dim == NULL)\n+    return FAILURE;\n+\n+  if (dim_check (dim, 1, false) == FAILURE)\n     return FAILURE;\n \n   if (type_check (ncopies, 2, BT_INTEGER) == FAILURE)\n@@ -2673,7 +2672,7 @@ gfc_check_ubound (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n \n   if (dim != NULL)\n     {\n-      if (dim_check (dim, 1, 1) == FAILURE)\n+      if (dim_check (dim, 1, false) == FAILURE)\n \treturn FAILURE;\n \n       if (dim_rank_check (dim, array, 0) == FAILURE)"}, {"sha": "ddddf5987cbee31d473c82563f07dde3880b634b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab886543206b714b7e90e447446c0128d7638cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab886543206b714b7e90e447446c0128d7638cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ab886543206b714b7e90e447446c0128d7638cb", "patch": "@@ -1,3 +1,8 @@\n+2007-09-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33297\n+\t* gfortran.dg/intrinsic_size.f90: New.\n+\n 2007-09-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33284"}, {"sha": "284c649bd80eeb5b6953698ab141106008c3040e", "filename": "gcc/testsuite/gfortran.dg/intrinsic_size.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab886543206b714b7e90e447446c0128d7638cb/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_size.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab886543206b714b7e90e447446c0128d7638cb/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_size.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_size.f90?ref=7ab886543206b714b7e90e447446c0128d7638cb", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+!\n+! Argument checking; dim and kind have to be scalar\n+!\n+! PR fortran/33297\n+!\n+  integer array(5), i1, i2\n+  print *, size(array,(/i1,i2/))  ! { dg-error \"must be a scalar\" }\n+  print *, size(array,i1,(/i1,i2/))  ! { dg-error \"must be a scalar\" }\n+  end"}]}