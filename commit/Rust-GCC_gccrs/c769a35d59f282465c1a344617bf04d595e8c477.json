{"sha": "c769a35d59f282465c1a344617bf04d595e8c477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2OWEzNWQ1OWYyODI0NjVjMWEzNDQ2MTdiZjA0ZDU5NWU4YzQ3Nw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-10-24T09:25:30Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-10-24T09:25:30Z"}, "message": "arm.c (arm_rtx_costs_1, [...]): Adjust costs for comparing a constant with small negative numbers and add...\n\n* arm.c (arm_rtx_costs_1, case TARGET_THUMB): Adjust costs for\ncomparing a constant with small negative numbers and add costing\nfor constants in conjunction with AND.\n(note_invalid_constants): Tidy previous change.\n(thumb_cmp_operand): Tidy.\n(thumb_cmpneg_operand): New function.\n* arm.h (CONDITIONAL_REGISTER_USAGE): Don't use HI regs if optimizing\nfor size.\n(FIRST_LO_REGNUM, FIRST_HI_REGNUM, LAST_HI_REGNUM): Define.\n(PREDICATE_CODES): Add thumb_cmpneg_operand.\n* arm.md (cbranchsi4): Convert to define_expand.  Handle comparison\nwith a negative constant.\n(cbranchsi4_insn): Matcher for cbranchsi4.\n(cbranchsi4_scratch): Similar, but a scratch is available for\nhandling negative constants.\n(movsi_cbranchsi4): New pattern.\n(tstsi3_cbranch): Renamed from andsi3_cbranch_scratch, remove scratch\nand use the TST instruction.\n(andsi3_cbranch, orrsi3_cbranch, xorsi3_cbranch, cbranchne_decr1)\n(addsi3_cbranch, subsi3_cbranch): Ensure that register preferencing\ncannot see high regs or memory alternatives.\n(bicsi3_cbranch_scratch, bicsi3_cbranch): New patterns.\n\nFrom-SVN: r72885", "tree": {"sha": "8b0705d0530966a28b9e785abe61611f6dc2697b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b0705d0530966a28b9e785abe61611f6dc2697b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c769a35d59f282465c1a344617bf04d595e8c477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c769a35d59f282465c1a344617bf04d595e8c477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c769a35d59f282465c1a344617bf04d595e8c477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c769a35d59f282465c1a344617bf04d595e8c477/comments", "author": null, "committer": null, "parents": [{"sha": "c21dbe8553f0e26da2d3df76d3d0c387da38c522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21dbe8553f0e26da2d3df76d3d0c387da38c522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21dbe8553f0e26da2d3df76d3d0c387da38c522"}], "stats": {"total": 364, "additions": 317, "deletions": 47}, "files": [{"sha": "6330e5cb1aec00f0411bdbae5354fa110fbfd0c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c769a35d59f282465c1a344617bf04d595e8c477/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c769a35d59f282465c1a344617bf04d595e8c477/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c769a35d59f282465c1a344617bf04d595e8c477", "patch": "@@ -1,3 +1,28 @@\n+2003-10-24  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (arm_rtx_costs_1, case TARGET_THUMB): Adjust costs for\n+\tcomparing a constant with small negative numbers and add costing\n+\tfor constants in conjunction with AND.\n+\t(note_invalid_constants): Tidy previous change.\n+\t(thumb_cmp_operand): Tidy.\n+\t(thumb_cmpneg_operand): New function.\n+\t* arm.h (CONDITIONAL_REGISTER_USAGE): Don't use HI regs if optimizing\n+\tfor size.\n+\t(FIRST_LO_REGNUM, FIRST_HI_REGNUM, LAST_HI_REGNUM): Define.\n+\t(PREDICATE_CODES): Add thumb_cmpneg_operand.\n+\t* arm.md (cbranchsi4): Convert to define_expand.  Handle comparison\n+\twith a negative constant.\n+\t(cbranchsi4_insn): Matcher for cbranchsi4.\n+\t(cbranchsi4_scratch): Similar, but a scratch is available for\n+\thandling negative constants.\n+\t(movsi_cbranchsi4): New pattern.\n+\t(tstsi3_cbranch): Renamed from andsi3_cbranch_scratch, remove scratch\n+\tand use the TST instruction.\n+\t(andsi3_cbranch, orrsi3_cbranch, xorsi3_cbranch, cbranchne_decr1)\n+\t(addsi3_cbranch, subsi3_cbranch): Ensure that register preferencing\n+\tcannot see high regs or memory alternatives.\n+\t(bicsi3_cbranch_scratch, bicsi3_cbranch): New patterns.\n+\n 2003-10-24  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (note_invalid_constants): Try to extract the constant\n@@ -119,8 +144,10 @@\n \n 2003-10-22  Jan Hubicka  <jh@suse.cz>\n \n-\t* dwarf2out.c (dwarf2out_abstract_function): Use DW_AT to check presence of DW_AT_inline.\n-\t(gen_subprogram_die): Likewise; do not abort instead of emitting DW_AT_not_inline\n+\t* dwarf2out.c (dwarf2out_abstract_function): Use DW_AT to check\n+\tpresence of DW_AT_inline.\n+\t(gen_subprogram_die): Likewise; do not abort instead of emitting\n+\tDW_AT_not_inline.\n \n 2003-10-22  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "f127b1d2904e5a9f4a883522fecddc3f31d02f32", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c769a35d59f282465c1a344617bf04d595e8c477/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c769a35d59f282465c1a344617bf04d595e8c477/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c769a35d59f282465c1a344617bf04d595e8c477", "patch": "@@ -3131,12 +3131,12 @@ arm_rtx_costs_1 (rtx x, enum rtx_code code, enum rtx_code outer)\n \t\treturn COSTS_N_INSNS (2);\t\t\t\t\n \t      return COSTS_N_INSNS (3);\t\t\t\t\n \t    }\t\t\t\t\t\t\t\t\n-\t  else if (outer == PLUS\t\t\t\t\t\n+\t  else if ((outer == PLUS || outer == COMPARE)\n \t\t   && INTVAL (x) < 256 && INTVAL (x) > -256)\t\t\n-\t    return 0;\t\t\t\t\t\t\t\n-\t  else if (outer == COMPARE\t\t\t\t\t\n-\t\t   && (unsigned HOST_WIDE_INT) INTVAL (x) < 256)\t\n-\t    return 0;\t\t\t\t\t\t\t\n+\t    return 0;\n+\t  else if (outer == AND\n+\t\t   && INTVAL (x) < 256 && INTVAL (x) >= -256)\n+\t    return COSTS_N_INSNS (1);\n \t  else if (outer == ASHIFT || outer == ASHIFTRT\t\t\n \t\t   || outer == LSHIFTRT)\t\t\t\t\n \t    return 0;\t\t\t\t\t\t\t\n@@ -6903,13 +6903,11 @@ note_invalid_constants (rtx insn, HOST_WIDE_INT address, int do_pushes)\n \t\t     us here.  Lets just hope that we can use the \n \t\t     constant pool value directly.  */\n \t\t  if (op == cop)\n-\t\t    op = get_pool_constant (XEXP (op, 0));\n-\t\t  else\n-\t\t    op = cop;\n+\t\t    cop = get_pool_constant (XEXP (op, 0));\n \n \t\t  push_minipool_fix (insn, address,\n \t\t\t\t     recog_data.operand_loc[opno],\n-\t\t\t\t     recog_data.operand_mode[opno], op);\n+\t\t\t\t     recog_data.operand_mode[opno], cop);\n \t\t}\n \n \t      result = true;\n@@ -12647,10 +12645,19 @@ int\n thumb_cmp_operand (rtx op, enum machine_mode mode)\n {\n   return ((GET_CODE (op) == CONST_INT\n-\t   && (unsigned HOST_WIDE_INT) (INTVAL (op)) < 256)\n+\t   && INTVAL (op) < 256\n+\t   && INTVAL (op) >= 0)\n \t  || s_register_operand (op, mode));\n }\n \n+int\n+thumb_cmpneg_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  return (GET_CODE (op) == CONST_INT\n+\t  && INTVAL (op) < 0\n+\t  && INTVAL (op) > -256);\n+}\n+\n /* Return TRUE if a result can be stored in OP without clobbering the\n    condition code register.  Prior to reload we only accept a\n    register.  After reload we have to be able to handle memory as"}, {"sha": "0cb1562e636fb3372123bb650892c2756d69fa95", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c769a35d59f282465c1a344617bf04d595e8c477/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c769a35d59f282465c1a344617bf04d595e8c477/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c769a35d59f282465c1a344617bf04d595e8c477", "patch": "@@ -949,6 +949,16 @@ extern const char * structure_size_string;\n \tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n+  if (TARGET_THUMB && optimize_size)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      /* When optimizing for size, it's better not to use\t\\\n+\t the HI regs, because of the overhead of stacking \t\\\n+\t them. */\t\t\t\t\t\t\\\n+      for (regno = FIRST_HI_REGNUM;\t\t\t\t\\\n+\t   regno <= LAST_HI_REGNUM; ++regno)\t\t\t\\\n+\tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n   if (TARGET_CIRRUS)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       for (regno = FIRST_ARM_FP_REGNUM;\t\t\t\t\\\n@@ -1055,8 +1065,11 @@ extern const char * structure_size_string;\n /* The number of the last argument register.  */\n #define LAST_ARG_REGNUM \tARG_REGISTER (NUM_ARG_REGS)\n \n-/* The number of the last \"lo\" register (thumb).  */\n+/* The numbers of the Thumb register ranges.  */\n+#define FIRST_LO_REGNUM  \t0\n #define LAST_LO_REGNUM  \t7\n+#define FIRST_HI_REGNUM\t\t8\n+#define LAST_HI_REGNUM\t\t11\n \n /* The register that holds the return address in exception handlers.  */\n #define EXCEPTION_LR_REGNUM\t2\n@@ -2693,6 +2706,7 @@ extern int making_const_table;\n   {\"reg_or_int_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"index_operand\",      {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"thumb_cmp_operand\",  {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"thumb_cmpneg_operand\", {CONST_INT}},\t\t\t\t\\\n   {\"thumb_cbrch_target_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n   {\"offsettable_memory_operand\", {MEM}},\t\t\t\t\\\n   {\"bad_signed_byte_operand\", {MEM}},\t\t\t\t\t\\"}, {"sha": "9a693a839d0836637e698312e8e6ecd881a403d9", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 256, "deletions": 34, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c769a35d59f282465c1a344617bf04d595e8c477/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c769a35d59f282465c1a344617bf04d595e8c477/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c769a35d59f282465c1a344617bf04d595e8c477", "patch": "@@ -5209,17 +5209,36 @@\n ;; For a 'b'       pos_range = 2046, neg_range = -2048 giving (-2040->2048).\n ;; For a 'b<cond>' pos_range = 254,  neg_range = -256  giving (-250 ->256).\n \n-(define_insn \"cbranchsi4\"\n-  [(set (pc)\n-\t(if_then_else\n-\t    (match_operator                    0 \"arm_comparison_operator\"\n-\t                    [(match_operand:SI 1 \"register_operand\"   \"l,r\")\n-\t\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"rI,r\")])\n-\t    (label_ref       (match_operand    3 \"\" \"\"))\n-\t    (pc)))]\n+(define_expand \"cbranchsi4\"\n+  [(set (pc) (if_then_else\n+\t      (match_operator 0 \"arm_comparison_operator\"\n+\t       [(match_operand:SI 1 \"s_register_operand\" \"\")\n+\t        (match_operand:SI 2 \"nonmemory_operand\" \"\")])\n+\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t      (pc)))]\n+  \"TARGET_THUMB\"\n+  \"\n+  if (thumb_cmpneg_operand (operands[2], SImode))\n+    {\n+      emit_jump_insn (gen_cbranchsi4_scratch (NULL, operands[1], operands[2],\n+\t\t\t\t\t      operands[3], operands[0]));\n+      DONE;\n+    }\n+  if (!thumb_cmp_operand (operands[2], SImode))\n+    operands[2] = force_reg (SImode, operands[2]);\n+  \")\n+\n+(define_insn \"*cbranchsi4_insn\"\n+  [(set (pc) (if_then_else\n+\t      (match_operator 0 \"arm_comparison_operator\"\n+\t       [(match_operand:SI 1 \"s_register_operand\" \"l,*h\")\n+\t        (match_operand:SI 2 \"thumb_cmp_operand\" \"lI*h,*r\")])\n+\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t      (pc)))]\n   \"TARGET_THUMB\"\n   \"*\n   output_asm_insn (\\\"cmp\\\\t%1, %2\\\", operands);\n+\n   switch (get_attr_length (insn))\n     {\n     case 4:  return \\\"b%d0\\\\t%l3\\\";\n@@ -5244,13 +5263,111 @@\n \t\t(const_int 8))))]\n )\n \n+(define_insn \"cbranchsi4_scratch\"\n+  [(set (pc) (if_then_else\n+\t      (match_operator 4 \"arm_comparison_operator\"\n+\t       [(match_operand:SI 1 \"s_register_operand\" \"l,0\")\n+\t        (match_operand:SI 2 \"thumb_cmpneg_operand\" \"L,J\")])\n+\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t      (pc)))\n+   (clobber (match_scratch:SI 0 \"=l,l\"))]\n+  \"TARGET_THUMB\"\n+  \"*\n+  output_asm_insn (\\\"add\\\\t%0, %1, #%n2\\\", operands);\n+\n+  switch (get_attr_length (insn))\n+    {\n+    case 4:  return \\\"b%d4\\\\t%l3\\\";\n+    case 6:  return \\\"b%D4\\\\t.LCB%=\\;b\\\\t%l3\\\\t%@long jump\\\\n.LCB%=:\\\";\n+    default: return \\\"b%D4\\\\t.LCB%=\\;bl\\\\t%l3\\\\t%@far jump\\\\n.LCB%=:\\\";\n+    }\n+  \"\n+  [(set (attr \"far_jump\")\n+        (if_then_else\n+\t    (eq_attr \"length\" \"8\")\n+\t    (const_string \"yes\")\n+            (const_string \"no\")))\n+   (set (attr \"length\") \n+        (if_then_else\n+\t    (and (ge (minus (match_dup 3) (pc)) (const_int -250))\n+\t         (le (minus (match_dup 3) (pc)) (const_int 256)))\n+\t    (const_int 4)\n+\t    (if_then_else\n+\t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n+\t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n+\t\t(const_int 6)\n+\t\t(const_int 8))))]\n+)\n+(define_insn \"*movsi_cbranchsi4\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (match_operator 3 \"arm_comparison_operator\"\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"0,l,l,l\")\n+\t   (const_int 0)])\n+\t (label_ref (match_operand 2 \"\" \"\"))\n+\t (pc)))\n+   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,l,*h,*m\")\n+\t(match_dup 1))]\n+  \"TARGET_THUMB\"\n+  \"*{\n+  if (which_alternative == 0)\n+    output_asm_insn (\\\"cmp\\t%0, #0\\\", operands);\n+  else if (which_alternative == 1)\n+    output_asm_insn (\\\"sub\\t%0, %1, #0\\\", operands);\n+  else\n+    {\n+      output_asm_insn (\\\"cmp\\t%1, #0\\\", operands);\n+      if (which_alternative == 2)\n+\toutput_asm_insn (\\\"mov\\t%0, %1\\\", operands);\n+      else\n+\toutput_asm_insn (\\\"str\\t%1, %0\\\", operands);\n+    }\n+  switch (get_attr_length (insn) - ((which_alternative > 1) ? 2 : 0))\n+    {\n+    case 4:  return \\\"b%d3\\\\t%l2\\\";\n+    case 6:  return \\\"b%D3\\\\t.LCB%=\\;b\\\\t%l2\\\\t%@long jump\\\\n.LCB%=:\\\";\n+    default: return \\\"b%D3\\\\t.LCB%=\\;bl\\\\t%l2\\\\t%@far jump\\\\n.LCB%=:\\\";\n+    }\n+  }\"\n+  [(set (attr \"far_jump\")\n+        (if_then_else\n+\t    (ior (and (gt (symbol_ref (\"which_alternative\"))\n+\t                  (const_int 1))\n+\t\t      (eq_attr \"length\" \"8\"))\n+\t\t (eq_attr \"length\" \"10\"))\n+\t    (const_string \"yes\")\n+            (const_string \"no\")))\n+   (set (attr \"length\")\n+     (if_then_else\n+       (le (symbol_ref (\"which_alternative\"))\n+\t\t       (const_int 1))\n+       (if_then_else\n+\t (and (ge (minus (match_dup 2) (pc)) (const_int -250))\n+\t      (le (minus (match_dup 2) (pc)) (const_int 256)))\n+\t (const_int 4)\n+\t (if_then_else\n+\t   (and (ge (minus (match_dup 2) (pc)) (const_int -2040))\n+\t\t(le (minus (match_dup 2) (pc)) (const_int 2048)))\n+\t   (const_int 6)\n+\t   (const_int 8)))\n+       (if_then_else\n+\t (and (ge (minus (match_dup 2) (pc)) (const_int -248))\n+\t      (le (minus (match_dup 2) (pc)) (const_int 256)))\n+\t (const_int 6)\n+\t (if_then_else\n+\t   (and (ge (minus (match_dup 2) (pc)) (const_int -2038))\n+\t\t(le (minus (match_dup 2) (pc)) (const_int 2048)))\n+\t   (const_int 8)\n+\t   (const_int 10)))))]\n+)\n+\n (define_insn \"*negated_cbranchsi4\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator             0 \"arm_comparison_operator\"\n-\t  [(match_operand:SI         1 \"register_operand\"  \"l\")\n-\t   (neg:SI (match_operand:SI 2 \"nonmemory_operand\" \"l\"))])\n-\t (label_ref (match_operand   3 \"\" \"\"))\n+\t (match_operator 0 \"arm_comparison_operator\"\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"l\")\n+\t   (neg:SI (match_operand:SI 2 \"s_register_operand\" \"l\"))])\n+\t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n   \"TARGET_THUMB\"\n   \"*\n@@ -5323,25 +5440,24 @@\n \t\t(const_int 8))))]\n )\n   \n-(define_insn \"*andsi3_cbranch_scratch\"\n+(define_insn \"*tstsi3_cbranch\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator 4 \"equality_operator\"\n-\t  [(and:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n-\t\t   (match_operand:SI 2 \"s_register_operand\" \"l\"))\n+\t (match_operator 3 \"equality_operator\"\n+\t  [(and:SI (match_operand:SI 0 \"s_register_operand\" \"%l\")\n+\t\t   (match_operand:SI 1 \"s_register_operand\" \"l\"))\n \t   (const_int 0)])\n-\t (label_ref (match_operand 3 \"\" \"\"))\n-\t (pc)))\n-   (clobber (match_scratch:SI 0 \"=l\"))]\n+\t (label_ref (match_operand 2 \"\" \"\"))\n+\t (pc)))]\n   \"TARGET_THUMB\"\n   \"*\n   {\n-  output_asm_insn (\\\"and\\\\t%0, %2\\\", operands);\n+  output_asm_insn (\\\"tst\\\\t%0, %1\\\", operands);\n   switch (get_attr_length (insn))\n     {\n-    case 4:  return \\\"b%d4\\\\t%l3\\\";\n-    case 6:  return \\\"b%D4\\\\t.LCB%=\\;b\\\\t%l3\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D4\\\\t.LCB%=\\;bl\\\\t%l3\\\\t%@far jump\\\\n.LCB%=:\\\";\n+    case 4:  return \\\"b%d3\\\\t%l2\\\";\n+    case 6:  return \\\"b%D3\\\\t.LCB%=\\;b\\\\t%l2\\\\t%@long jump\\\\n.LCB%=:\\\";\n+    default: return \\\"b%D3\\\\t.LCB%=\\;bl\\\\t%l2\\\\t%@far jump\\\\n.LCB%=:\\\";\n     }\n   }\"\n   [(set (attr \"far_jump\")\n@@ -5351,12 +5467,12 @@\n             (const_string \"no\")))\n    (set (attr \"length\") \n         (if_then_else\n-\t    (and (ge (minus (match_dup 3) (pc)) (const_int -250))\n-\t         (le (minus (match_dup 3) (pc)) (const_int 256)))\n+\t    (and (ge (minus (match_dup 2) (pc)) (const_int -250))\n+\t         (le (minus (match_dup 2) (pc)) (const_int 256)))\n \t    (const_int 4)\n \t    (if_then_else\n-\t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n-\t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n+\t        (and (ge (minus (match_dup 2) (pc)) (const_int -2040))\n+\t\t     (le (minus (match_dup 2) (pc)) (const_int 2048)))\n \t\t(const_int 6)\n \t\t(const_int 8))))]\n )\n@@ -5370,7 +5486,7 @@\n \t   (const_int 0)])\n \t (label_ref (match_operand 4 \"\" \"\"))\n \t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,?h,?m,?m\")\n+   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n \t(and:SI (match_dup 2) (match_dup 3)))\n    (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n   \"TARGET_THUMB\"\n@@ -5475,7 +5591,7 @@\n \t   (const_int 0)])\n \t (label_ref (match_operand 4 \"\" \"\"))\n \t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,?h,?m,?m\")\n+   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n \t(ior:SI (match_dup 2) (match_dup 3)))\n    (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n   \"TARGET_THUMB\"\n@@ -5580,7 +5696,7 @@\n \t   (const_int 0)])\n \t (label_ref (match_operand 4 \"\" \"\"))\n \t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,?h,?m,?m\")\n+   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n \t(xor:SI (match_dup 2) (match_dup 3)))\n    (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n   \"TARGET_THUMB\"\n@@ -5638,14 +5754,119 @@\n \t   (const_int 10)))))]\n )\n \n+(define_insn \"*bicsi3_cbranch_scratch\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (match_operator 4 \"equality_operator\"\n+\t  [(and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"l\"))\n+\t\t   (match_operand:SI 1 \"s_register_operand\" \"0\"))\n+\t   (const_int 0)])\n+\t (label_ref (match_operand 3 \"\" \"\"))\n+\t (pc)))\n+   (clobber (match_scratch:SI 0 \"=l\"))]\n+  \"TARGET_THUMB\"\n+  \"*\n+  {\n+  output_asm_insn (\\\"bic\\\\t%0, %2\\\", operands);\n+  switch (get_attr_length (insn))\n+    {\n+    case 4:  return \\\"b%d4\\\\t%l3\\\";\n+    case 6:  return \\\"b%D4\\\\t.LCB%=\\;b\\\\t%l3\\\\t%@long jump\\\\n.LCB%=:\\\";\n+    default: return \\\"b%D4\\\\t.LCB%=\\;bl\\\\t%l3\\\\t%@far jump\\\\n.LCB%=:\\\";\n+    }\n+  }\"\n+  [(set (attr \"far_jump\")\n+        (if_then_else\n+\t    (eq_attr \"length\" \"8\")\n+\t    (const_string \"yes\")\n+            (const_string \"no\")))\n+   (set (attr \"length\") \n+        (if_then_else\n+\t    (and (ge (minus (match_dup 3) (pc)) (const_int -250))\n+\t         (le (minus (match_dup 3) (pc)) (const_int 256)))\n+\t    (const_int 4)\n+\t    (if_then_else\n+\t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n+\t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n+\t\t(const_int 6)\n+\t\t(const_int 8))))]\n+)\n+  \n+(define_insn \"*bicsi3_cbranch\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (match_operator 5 \"equality_operator\"\n+\t  [(and:SI (not:SI (match_operand:SI 3 \"s_register_operand\" \"l,l,l,l\"))\n+\t\t   (match_operand:SI 2 \"s_register_operand\" \"0,1,1,1\"))\n+\t   (const_int 0)])\n+\t (label_ref (match_operand 4 \"\" \"\"))\n+\t (pc)))\n+   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n+\t(and:SI (not:SI (match_dup 3)) (match_dup 2)))\n+   (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n+  \"TARGET_THUMB\"\n+  \"*\n+  {\n+  if (which_alternative == 0)\n+    output_asm_insn (\\\"bic\\\\t%0, %3\\\", operands);\n+  else if (which_alternative == 1)\n+    {\n+      output_asm_insn (\\\"bic\\\\t%1, %3\\\", operands);\n+      output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n+    }\n+  else\n+    {\n+      output_asm_insn (\\\"bic\\\\t%1, %3\\\", operands);\n+      output_asm_insn (\\\"str\\\\t%1, %0\\\", operands);\n+    }\n+\n+  switch (get_attr_length (insn) - (which_alternative ? 2 : 0))\n+    {\n+    case 4:  return \\\"b%d5\\\\t%l4\\\";\n+    case 6:  return \\\"b%D5\\\\t.LCB%=\\;b\\\\t%l4\\\\t%@long jump\\\\n.LCB%=:\\\";\n+    default: return \\\"b%D5\\\\t.LCB%=\\;bl\\\\t%l4\\\\t%@far jump\\\\n.LCB%=:\\\";\n+    }\n+  }\"\n+  [(set (attr \"far_jump\")\n+        (if_then_else\n+\t    (ior (and (eq (symbol_ref (\"which_alternative\"))\n+\t                  (const_int 0))\n+\t\t      (eq_attr \"length\" \"8\"))\n+\t\t (eq_attr \"length\" \"10\"))\n+\t    (const_string \"yes\")\n+            (const_string \"no\")))\n+   (set (attr \"length\")\n+     (if_then_else\n+       (eq (symbol_ref (\"which_alternative\"))\n+\t\t       (const_int 0))\n+       (if_then_else\n+\t (and (ge (minus (match_dup 4) (pc)) (const_int -250))\n+\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n+\t (const_int 4)\n+\t (if_then_else\n+\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2040))\n+\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n+\t   (const_int 6)\n+\t   (const_int 8)))\n+       (if_then_else\n+\t (and (ge (minus (match_dup 4) (pc)) (const_int -248))\n+\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n+\t (const_int 6)\n+\t (if_then_else\n+\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2038))\n+\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n+\t   (const_int 8)\n+\t   (const_int 10)))))]\n+)\n+\n (define_insn \"*cbranchne_decr1\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"equality_operator\"\n \t\t       [(match_operand:SI 2 \"s_register_operand\" \"l,l,1,l\")\n \t\t        (const_int 0)])\n \t\t      (label_ref (match_operand 4 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,?h,?m,?m\")\n+   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n \t(plus:SI (match_dup 2) (const_int -1)))\n    (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n   \"TARGET_THUMB\"\n@@ -5751,8 +5972,9 @@\n \t   (const_int 0)])\n \t (label_ref (match_operand 5 \"\" \"\"))\n \t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,l,*!h,?h,?m,?m\")\n-\t(plus:SI (match_dup 2) (match_dup 3)))\n+   (set\n+    (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,l,*!h,*?h,*?m,*?m\")\n+    (plus:SI (match_dup 2) (match_dup 3)))\n    (clobber (match_scratch:SI 1 \"=X,X,X,l,&l,&l\"))]\n   \"TARGET_THUMB\n    && (GET_CODE (operands[4]) == EQ\n@@ -5894,7 +6116,7 @@\n \t   (const_int 0)])\n \t (label_ref (match_operand 5 \"\" \"\"))\n \t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,?h,?m,?m\")\n+   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n \t(minus:SI (match_dup 2) (match_dup 3)))\n    (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n   \"TARGET_THUMB"}]}