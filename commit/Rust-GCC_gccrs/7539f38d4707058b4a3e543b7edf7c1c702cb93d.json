{"sha": "7539f38d4707058b4a3e543b7edf7c1c702cb93d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUzOWYzOGQ0NzA3MDU4YjRhM2U1NDNiN2VkZjdjMWM3MDJjYjkzZA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-09-05T12:25:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-05T12:25:19Z"}, "message": "* getopt.h, obstack.h: Updated from gcc.\n\nFrom-SVN: r22260", "tree": {"sha": "b6d9693e80d880c05525f23d8be2ed0c3b741ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6d9693e80d880c05525f23d8be2ed0c3b741ec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7539f38d4707058b4a3e543b7edf7c1c702cb93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7539f38d4707058b4a3e543b7edf7c1c702cb93d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7539f38d4707058b4a3e543b7edf7c1c702cb93d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7539f38d4707058b4a3e543b7edf7c1c702cb93d/comments", "author": null, "committer": null, "parents": [{"sha": "f45da49cd603917aef8f93fcd4f2f9258448cb31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45da49cd603917aef8f93fcd4f2f9258448cb31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45da49cd603917aef8f93fcd4f2f9258448cb31"}], "stats": {"total": 331, "additions": 177, "deletions": 154}, "files": [{"sha": "c79b2ed7475c26e7c37db52c361b20cb82f64076", "filename": "include/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7539f38d4707058b4a3e543b7edf7c1c702cb93d/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7539f38d4707058b4a3e543b7edf7c1c702cb93d/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=7539f38d4707058b4a3e543b7edf7c1c702cb93d", "patch": "@@ -1,6 +1,6 @@\n Sat Sep  5 12:16:33 1998  Jeffrey A Law  (law@cygnus.com)\n \n-\t* getopt.h: Updated from gcc.\n+\t* getopt.h, obstack.h: Updated from gcc.\n \n Tue Feb 24 13:05:02 1998  Doug Evans  <devans@canuck.cygnus.com>\n "}, {"sha": "38e96777660d5bbdafa108ae60def43e5221b750", "filename": "include/obstack.h", "status": "modified", "additions": 176, "deletions": 153, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7539f38d4707058b4a3e543b7edf7c1c702cb93d/include%2Fobstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7539f38d4707058b4a3e543b7edf7c1c702cb93d/include%2Fobstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fobstack.h?ref=7539f38d4707058b4a3e543b7edf7c1c702cb93d", "patch": "@@ -1,19 +1,24 @@\n /* obstack.h - object stack macros\n-   Copyright (C) 1988,89,90,91,92,93,94,96 Free Software Foundation, Inc.\n+   Copyright (C) 1988,89,90,91,92,93,94,96,97,98 Free Software Foundation, Inc.\n \n-This program is free software; you can redistribute it and/or modify it\n-under the terms of the GNU General Public License as published by the\n-Free Software Foundation; either version 2, or (at your option) any\n-later version.\n \n-This program is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n+   NOTE: The canonical source of this file is maintained with the GNU C Library.\n+   Bugs can be reported to bug-glibc@gnu.org.\n \n-You should have received a copy of the GNU General Public License\n-along with this program; if not, write to the Free Software\n-Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 2, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+   USA.  */\n \n /* Summary:\n \n@@ -100,42 +105,51 @@ break the ordinary 'growth' macro.\n \n /* Don't do the contents of this file more than once.  */\n \n-#ifndef __OBSTACK_H__\n-#define __OBSTACK_H__\n+#ifndef _OBSTACK_H\n+#define _OBSTACK_H 1\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n \f\n /* We use subtraction of (char *) 0 instead of casting to int\n    because on word-addressable machines a simple cast to int\n    may ignore the byte-within-word field of the pointer.  */\n \n #ifndef __PTR_TO_INT\n-#define __PTR_TO_INT(P) ((P) - (char *) 0)\n+# define __PTR_TO_INT(P) ((P) - (char *) 0)\n #endif\n \n #ifndef __INT_TO_PTR\n-#define __INT_TO_PTR(P) ((P) + (char *) 0)\n+# define __INT_TO_PTR(P) ((P) + (char *) 0)\n #endif\n \n-/* We need the type of the resulting object.  In ANSI C it is ptrdiff_t\n-   but in traditional C it is usually long.  If we are in ANSI C and\n-   don't already have ptrdiff_t get it.  */\n-\n-#if defined (__STDC__) && __STDC__ && ! defined (offsetof)\n-#if defined (__GNUC__) && defined (IN_GCC)\n-/* On Next machine, the system's stddef.h screws up if included\n-   after we have defined just ptrdiff_t, so include all of stddef.h.\n-   Otherwise, define just ptrdiff_t, which is all we need.  */\n-#ifndef __NeXT__\n-#define __need_ptrdiff_t\n-#endif\n-#endif\n+/* We need the type of the resulting object.  If __PTRDIFF_TYPE__ is\n+   defined, as with GNU C, use that; that way we don't pollute the\n+   namespace with <stddef.h>'s symbols.  Otherwise, if <stddef.h> is\n+   available, include it and use ptrdiff_t.  In traditional C, long is\n+   the best that we can do.  */\n \n-#include <stddef.h>\n+#ifdef __PTRDIFF_TYPE__\n+# define PTR_INT_TYPE __PTRDIFF_TYPE__\n+#else\n+# ifdef HAVE_STDDEF_H\n+#  include <stddef.h>\n+#  define PTR_INT_TYPE ptrdiff_t\n+# else\n+#  define PTR_INT_TYPE long\n+# endif\n #endif\n \n-#if defined (__STDC__) && __STDC__\n-#define PTR_INT_TYPE ptrdiff_t\n+#if defined _LIBC || defined HAVE_STRING_H\n+# include <string.h>\n+# define _obstack_memcpy(To, From, N) memcpy ((To), (From), (N))\n #else\n-#define PTR_INT_TYPE long\n+# ifdef memcpy\n+#  define _obstack_memcpy(To, From, N) memcpy ((To), (From), (N))\n+# else\n+#  define _obstack_memcpy(To, From, N) bcopy ((From), (To), (N))\n+# endif\n #endif\n \n struct _obstack_chunk\t\t/* Lives at front of each chunk. */\n@@ -154,7 +168,7 @@ struct obstack\t\t/* control current object in current chunk */\n   char\t*chunk_limit;\t\t/* address of char after current chunk */\n   PTR_INT_TYPE temp;\t\t/* Temporary for some macros.  */\n   int   alignment_mask;\t\t/* Mask of alignment for each object. */\n-#if defined (__STDC__) && __STDC__\n+#if defined __STDC__ && __STDC__\n   /* These prototypes vary based on `use_extra_arg', and we use\n      casts to the prototypeless function type in all assignments,\n      but having prototypes here quiets -Wstrict-prototypes.  */\n@@ -171,33 +185,31 @@ struct obstack\t\t/* control current object in current chunk */\n \t\t\t\t   chunk contains a zero-length object.  This\n \t\t\t\t   prevents freeing the chunk if we allocate\n \t\t\t\t   a bigger chunk to replace it. */\n-  unsigned alloc_failed:1;\t/* chunk alloc func returned 0 */\n+  unsigned alloc_failed:1;\t/* No longer used, as we now call the failed\n+\t\t\t\t   handler on error, but retained for binary\n+\t\t\t\t   compatibility.  */\n };\n \n /* Declare the external functions we use; they are in obstack.c.  */\n \n-#if defined (__STDC__) && __STDC__\n+#if defined __STDC__ && __STDC__\n extern void _obstack_newchunk (struct obstack *, int);\n extern void _obstack_free (struct obstack *, void *);\n extern int _obstack_begin (struct obstack *, int, int,\n \t\t\t    void *(*) (long), void (*) (void *));\n extern int _obstack_begin_1 (struct obstack *, int, int,\n \t\t\t     void *(*) (void *, long),\n \t\t\t     void (*) (void *, void *), void *);\n-/* CYGNUS LOCAL */\n extern int _obstack_memory_used (struct obstack *);\n-/* END CYGNUS LOCAL */\n #else\n extern void _obstack_newchunk ();\n extern void _obstack_free ();\n extern int _obstack_begin ();\n extern int _obstack_begin_1 ();\n-/* CYGNUS LOCAL */\n extern int _obstack_memory_used ();\n-/* END CYGNUS LOCAL */\n #endif\n \f\n-#if defined (__STDC__) && __STDC__\n+#if defined __STDC__ && __STDC__\n \n /* Do the function-declarations after the structs\n    but before defining the macros.  */\n@@ -225,6 +237,7 @@ void * obstack_finish (struct obstack *obstack);\n int obstack_object_size (struct obstack *obstack);\n \n int obstack_room (struct obstack *obstack);\n+void obstack_make_room (struct obstack *obstack, int size);\n void obstack_1grow_fast (struct obstack *obstack, int data_char);\n void obstack_ptr_grow_fast (struct obstack *obstack, void *data);\n void obstack_int_grow_fast (struct obstack *obstack, int data);\n@@ -234,82 +247,92 @@ void * obstack_base (struct obstack *obstack);\n void * obstack_next_free (struct obstack *obstack);\n int obstack_alignment_mask (struct obstack *obstack);\n int obstack_chunk_size (struct obstack *obstack);\n-/* CYGNUS LOCAL */\n int obstack_memory_used (struct obstack *obstack);\n-/* END CYGNUS LOCAL */\n \n #endif /* __STDC__ */\n \n /* Non-ANSI C cannot really support alternative functions for these macros,\n    so we do not declare them.  */\n+\n+/* Error handler called when `obstack_chunk_alloc' failed to allocate\n+   more memory.  This can be set to a user defined function.  The\n+   default action is to print a message and abort.  */\n+#if defined __STDC__ && __STDC__\n+extern void (*obstack_alloc_failed_handler) (void);\n+#else\n+extern void (*obstack_alloc_failed_handler) ();\n+#endif\n+\n+/* Exit value used when `print_and_abort' is used.  */\n+extern int obstack_exit_failure;\n \f\n /* Pointer to beginning of object being allocated or to be allocated next.\n    Note that this might not be the final address of the object\n    because a new chunk might be needed to hold the final size.  */\n \n-#define obstack_base(h) ((h)->alloc_failed ? 0 : (h)->object_base)\n+#define obstack_base(h) ((h)->object_base)\n \n /* Size for allocating ordinary chunks.  */\n \n #define obstack_chunk_size(h) ((h)->chunk_size)\n \n /* Pointer to next byte not yet allocated in current chunk.  */\n \n-#define obstack_next_free(h)\t((h)->alloc_failed ? 0 : (h)->next_free)\n+#define obstack_next_free(h)\t((h)->next_free)\n \n /* Mask specifying low bits that should be clear in address of an object.  */\n \n #define obstack_alignment_mask(h) ((h)->alignment_mask)\n \n /* To prevent prototype warnings provide complete argument list in\n    standard C version.  */\n-#if defined (__STDC__) && __STDC__\n+#if defined __STDC__ && __STDC__\n \n-#define obstack_init(h) \\\n+# define obstack_init(h) \\\n   _obstack_begin ((h), 0, 0, \\\n \t\t  (void *(*) (long)) obstack_chunk_alloc, (void (*) (void *)) obstack_chunk_free)\n \n-#define obstack_begin(h, size) \\\n+# define obstack_begin(h, size) \\\n   _obstack_begin ((h), (size), 0, \\\n \t\t  (void *(*) (long)) obstack_chunk_alloc, (void (*) (void *)) obstack_chunk_free)\n \n-#define obstack_specify_allocation(h, size, alignment, chunkfun, freefun) \\\n+# define obstack_specify_allocation(h, size, alignment, chunkfun, freefun) \\\n   _obstack_begin ((h), (size), (alignment), \\\n \t\t    (void *(*) (long)) (chunkfun), (void (*) (void *)) (freefun))\n \n-#define obstack_specify_allocation_with_arg(h, size, alignment, chunkfun, freefun, arg) \\\n+# define obstack_specify_allocation_with_arg(h, size, alignment, chunkfun, freefun, arg) \\\n   _obstack_begin_1 ((h), (size), (alignment), \\\n \t\t    (void *(*) (void *, long)) (chunkfun), \\\n \t\t    (void (*) (void *, void *)) (freefun), (arg))\n \n-#define obstack_chunkfun(h, newchunkfun) \\\n+# define obstack_chunkfun(h, newchunkfun) \\\n   ((h) -> chunkfun = (struct _obstack_chunk *(*)(void *, long)) (newchunkfun))\n \n-#define obstack_freefun(h, newfreefun) \\\n+# define obstack_freefun(h, newfreefun) \\\n   ((h) -> freefun = (void (*)(void *, struct _obstack_chunk *)) (newfreefun))\n \n #else\n \n-#define obstack_init(h) \\\n+# define obstack_init(h) \\\n   _obstack_begin ((h), 0, 0, \\\n \t\t  (void *(*) ()) obstack_chunk_alloc, (void (*) ()) obstack_chunk_free)\n \n-#define obstack_begin(h, size) \\\n+# define obstack_begin(h, size) \\\n   _obstack_begin ((h), (size), 0, \\\n \t\t  (void *(*) ()) obstack_chunk_alloc, (void (*) ()) obstack_chunk_free)\n \n-#define obstack_specify_allocation(h, size, alignment, chunkfun, freefun) \\\n+# define obstack_specify_allocation(h, size, alignment, chunkfun, freefun) \\\n   _obstack_begin ((h), (size), (alignment), \\\n \t\t    (void *(*) ()) (chunkfun), (void (*) ()) (freefun))\n \n-#define obstack_specify_allocation_with_arg(h, size, alignment, chunkfun, freefun, arg) \\\n+# define obstack_specify_allocation_with_arg(h, size, alignment, chunkfun, freefun, arg) \\\n   _obstack_begin_1 ((h), (size), (alignment), \\\n \t\t    (void *(*) ()) (chunkfun), (void (*) ()) (freefun), (arg))\n \n-#define obstack_chunkfun(h, newchunkfun) \\\n+# define obstack_chunkfun(h, newchunkfun) \\\n   ((h) -> chunkfun = (struct _obstack_chunk *(*)()) (newchunkfun))\n \n-#define obstack_freefun(h, newfreefun) \\\n+# define obstack_freefun(h, newfreefun) \\\n   ((h) -> freefun = (void (*)()) (newfreefun))\n \n #endif\n@@ -318,147 +341,142 @@ int obstack_memory_used (struct obstack *obstack);\n \n #define obstack_blank_fast(h,n) ((h)->next_free += (n))\n \n-/* CYGNUS LOCAL */\n #define obstack_memory_used(h) _obstack_memory_used (h)\n-/* END CYGNUS LOCAL */\n \f\n-#if defined (__GNUC__) && defined (__STDC__) && __STDC__\n+#if defined __GNUC__ && defined __STDC__ && __STDC__\n /* NextStep 2.0 cc is really gcc 1.93 but it defines __GNUC__ = 2 and\n    does not implement __extension__.  But that compiler doesn't define\n    __GNUC_MINOR__.  */\n-#if __GNUC__ < 2 || (__NeXT__ && !__GNUC_MINOR__)\n-#define __extension__\n-#endif\n+# if __GNUC__ < 2 || (__NeXT__ && !__GNUC_MINOR__)\n+#  define __extension__\n+# endif\n \n /* For GNU C, if not -traditional,\n    we can define these macros to compute all args only once\n    without using a global variable.\n    Also, we can avoid using the `temp' slot, to make faster code.  */\n \n-#define obstack_object_size(OBSTACK)\t\t\t\t\t\\\n+# define obstack_object_size(OBSTACK)\t\t\t\t\t\\\n   __extension__\t\t\t\t\t\t\t\t\\\n   ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n-     __o->alloc_failed ? 0 :\t\t\t\t\t\t\\\n      (unsigned) (__o->next_free - __o->object_base); })\n \n-#define obstack_room(OBSTACK)\t\t\t\t\t\t\\\n+# define obstack_room(OBSTACK)\t\t\t\t\t\t\\\n   __extension__\t\t\t\t\t\t\t\t\\\n   ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n      (unsigned) (__o->chunk_limit - __o->next_free); })\n \n-#define obstack_grow(OBSTACK,where,length)\t\t\t\t\\\n+# define obstack_make_room(OBSTACK,length)\t\t\t\t\\\n+__extension__\t\t\t\t\t\t\t\t\\\n+({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n+   int __len = (length);\t\t\t\t\t\t\\\n+   if (__o->chunk_limit - __o->next_free < __len)\t\t\t\\\n+     _obstack_newchunk (__o, __len);\t\t\t\t\t\\\n+   (void) 0; })\n+\n+# define obstack_empty_p(OBSTACK)\t\t\t\t\t\\\n+  __extension__\t\t\t\t\t\t\t\t\\\n+  ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n+     (__o->chunk->prev == 0 && __o->next_free - __o->chunk->contents == 0); })\n+\n+# define obstack_grow(OBSTACK,where,length)\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    int __len = (length);\t\t\t\t\t\t\\\n    if (__o->next_free + __len > __o->chunk_limit)\t\t\t\\\n      _obstack_newchunk (__o, __len);\t\t\t\t\t\\\n-   if (!__o->alloc_failed)\t\t\t\t\t\t\\\n-     {\t\t\t\t\t\t\t\t\t\\\n-        memcpy (__o->next_free, (char *) (where), __len);\t\t\\\n-\t__o->next_free += __len;\t\t\t\t\t\\\n-     }\t\t\t\t\t\t\t\t\t\\\n+   _obstack_memcpy (__o->next_free, (char *) (where), __len);\t\t\\\n+   __o->next_free += __len;\t\t\t\t\t\t\\\n    (void) 0; })\n \n-#define obstack_grow0(OBSTACK,where,length)\t\t\t\t\\\n+# define obstack_grow0(OBSTACK,where,length)\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    int __len = (length);\t\t\t\t\t\t\\\n    if (__o->next_free + __len + 1 > __o->chunk_limit)\t\t\t\\\n      _obstack_newchunk (__o, __len + 1);\t\t\t\t\\\n-   if (!__o->alloc_failed)\t\t\t\t\t\t\\\n-     {\t\t\t\t\t\t\t\t\t\\\n-       memcpy (__o->next_free, (char *) (where), __len);\t\t\\\n-       __o->next_free += __len;\t\t\t\t\t\t\\\n-       *(__o->next_free)++ = 0;\t\t\t\t\t\t\\\n-     }\t\t\t\t\t\t\t\t\t\\\n+   _obstack_memcpy (__o->next_free, (char *) (where), __len);\t\t\\\n+   __o->next_free += __len;\t\t\t\t\t\t\\\n+   *(__o->next_free)++ = 0;\t\t\t\t\t\t\\\n    (void) 0; })\n \n-#define obstack_1grow(OBSTACK,datum)\t\t\t\t\t\\\n+# define obstack_1grow(OBSTACK,datum)\t\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    if (__o->next_free + 1 > __o->chunk_limit)\t\t\t\t\\\n      _obstack_newchunk (__o, 1);\t\t\t\t\t\\\n-   if (!__o->alloc_failed)\t\t\t\t\t\t\\\n-     *(__o->next_free)++ = (datum);\t\t\t\t\t\\\n+   *(__o->next_free)++ = (datum);\t\t\t\t\t\\\n    (void) 0; })\n \n /* These assume that the obstack alignment is good enough for pointers or ints,\n    and that the data added so far to the current object\n    shares that much alignment.  */\n \n-#define obstack_ptr_grow(OBSTACK,datum)\t\t\t\t\t\\\n+# define obstack_ptr_grow(OBSTACK,datum)\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    if (__o->next_free + sizeof (void *) > __o->chunk_limit)\t\t\\\n      _obstack_newchunk (__o, sizeof (void *));\t\t\t\t\\\n-   if (!__o->alloc_failed)\t\t\t\t\t\t\\\n-     *((void **)__o->next_free)++ = ((void *)datum);\t\t\t\\\n+   *((void **)__o->next_free)++ = ((void *)datum);\t\t\t\\\n    (void) 0; })\n \n-#define obstack_int_grow(OBSTACK,datum)\t\t\t\t\t\\\n+# define obstack_int_grow(OBSTACK,datum)\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    if (__o->next_free + sizeof (int) > __o->chunk_limit)\t\t\\\n      _obstack_newchunk (__o, sizeof (int));\t\t\t\t\\\n-   if (!__o->alloc_failed)\t\t\t\t\t\t\\\n-     *((int *)__o->next_free)++ = ((int)datum);\t\t\t\t\\\n+   *((int *)__o->next_free)++ = ((int)datum);\t\t\t\t\\\n    (void) 0; })\n \n-#define obstack_ptr_grow_fast(h,aptr) (*((void **) (h)->next_free)++ = (void *)aptr)\n-#define obstack_int_grow_fast(h,aint) (*((int *) (h)->next_free)++ = (int) aint)\n+# define obstack_ptr_grow_fast(h,aptr) (*((void **) (h)->next_free)++ = (void *)aptr)\n+# define obstack_int_grow_fast(h,aint) (*((int *) (h)->next_free)++ = (int) aint)\n \n-#define obstack_blank(OBSTACK,length)\t\t\t\t\t\\\n+# define obstack_blank(OBSTACK,length)\t\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    int __len = (length);\t\t\t\t\t\t\\\n    if (__o->chunk_limit - __o->next_free < __len)\t\t\t\\\n      _obstack_newchunk (__o, __len);\t\t\t\t\t\\\n-   if (!__o->alloc_failed)\t\t\t\t\t\t\\\n-     __o->next_free += __len;\t\t\t\t\t\t\\\n+   __o->next_free += __len;\t\t\t\t\t\t\\\n    (void) 0; })\n \n-#define obstack_alloc(OBSTACK,length)\t\t\t\t\t\\\n+# define obstack_alloc(OBSTACK,length)\t\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__h = (OBSTACK);\t\t\t\t\t\\\n    obstack_blank (__h, (length));\t\t\t\t\t\\\n    obstack_finish (__h); })\n \n-#define obstack_copy(OBSTACK,where,length)\t\t\t\t\\\n+# define obstack_copy(OBSTACK,where,length)\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__h = (OBSTACK);\t\t\t\t\t\\\n    obstack_grow (__h, (where), (length));\t\t\t\t\\\n    obstack_finish (__h); })\n \n-#define obstack_copy0(OBSTACK,where,length)\t\t\t\t\\\n+# define obstack_copy0(OBSTACK,where,length)\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__h = (OBSTACK);\t\t\t\t\t\\\n    obstack_grow0 (__h, (where), (length));\t\t\t\t\\\n    obstack_finish (__h); })\n \n /* The local variable is named __o1 to avoid a name conflict\n    when obstack_blank is called.  */\n-#define obstack_finish(OBSTACK)  \t\t\t\t\t\\\n+# define obstack_finish(OBSTACK)  \t\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o1 = (OBSTACK);\t\t\t\t\t\\\n    void *value;\t\t\t\t\t\t\t\t\\\n-   if (__o1->alloc_failed)\t\t\t\t\t\t\\\n-     value = 0;\t\t\t\t\t\t\t\t\\\n-   else\t\t\t\t\t\t\t\t\t\\\n-     {\t\t\t\t\t\t\t\t\t\\\n-       value = (void *) __o1->object_base;\t\t\t\t\\\n-       if (__o1->next_free == value)\t\t\t\t\t\\\n-         __o1->maybe_empty_object = 1;\t\t\t\t\t\\\n-       __o1->next_free\t\t\t\t\t\t\t\\\n-\t = __INT_TO_PTR ((__PTR_TO_INT (__o1->next_free)+__o1->alignment_mask)\\\n-\t\t\t & ~ (__o1->alignment_mask));\t\t\t\\\n-       if (__o1->next_free - (char *)__o1->chunk\t\t\t\\\n-\t   > __o1->chunk_limit - (char *)__o1->chunk)\t\t\t\\\n-\t __o1->next_free = __o1->chunk_limit;\t\t\t\t\\\n-       __o1->object_base = __o1->next_free;\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n+   value = (void *) __o1->object_base;\t\t\t\t\t\\\n+   if (__o1->next_free == value)\t\t\t\t\t\\\n+     __o1->maybe_empty_object = 1;\t\t\t\t\t\\\n+   __o1->next_free\t\t\t\t\t\t\t\\\n+     = __INT_TO_PTR ((__PTR_TO_INT (__o1->next_free)+__o1->alignment_mask)\\\n+\t\t     & ~ (__o1->alignment_mask));\t\t\t\\\n+   if (__o1->next_free - (char *)__o1->chunk\t\t\t\t\\\n+       > __o1->chunk_limit - (char *)__o1->chunk)\t\t\t\\\n+     __o1->next_free = __o1->chunk_limit;\t\t\t\t\\\n+   __o1->object_base = __o1->next_free;\t\t\t\t\t\\\n    value; })\n \n-#define obstack_free(OBSTACK, OBJ)\t\t\t\t\t\\\n+# define obstack_free(OBSTACK, OBJ)\t\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    void *__obj = (OBJ);\t\t\t\t\t\t\t\\\n@@ -468,103 +486,108 @@ __extension__\t\t\t\t\t\t\t\t\\\n \f\n #else /* not __GNUC__ or not __STDC__ */\n \n-#define obstack_object_size(h) \\\n- (unsigned) ((h)->alloc_failed ? 0 : (h)->next_free - (h)->object_base)\n+# define obstack_object_size(h) \\\n+ (unsigned) ((h)->next_free - (h)->object_base)\n \n-#define obstack_room(h)\t\t\\\n+# define obstack_room(h)\t\t\\\n  (unsigned) ((h)->chunk_limit - (h)->next_free)\n \n+# define obstack_empty_p(h) \\\n+ ((h)->chunk->prev == 0 && (h)->next_free - (h)->chunk->contents == 0)\n+\n /* Note that the call to _obstack_newchunk is enclosed in (..., 0)\n    so that we can avoid having void expressions\n    in the arms of the conditional expression.\n    Casting the third operand to void was tried before,\n    but some compilers won't accept it.  */\n \n-#define obstack_grow(h,where,length)\t\t\t\t\t\\\n+# define obstack_make_room(h,length)\t\t\t\t\t\\\n+( (h)->temp = (length),\t\t\t\t\t\t\t\\\n+  (((h)->next_free + (h)->temp > (h)->chunk_limit)\t\t\t\\\n+   ? (_obstack_newchunk ((h), (h)->temp), 0) : 0))\n+\n+# define obstack_grow(h,where,length)\t\t\t\t\t\\\n ( (h)->temp = (length),\t\t\t\t\t\t\t\\\n   (((h)->next_free + (h)->temp > (h)->chunk_limit)\t\t\t\\\n    ? (_obstack_newchunk ((h), (h)->temp), 0) : 0),\t\t\t\\\n-  ((h)->alloc_failed ? 0 :\t\t\t\t\t\t\\\n-  (memcpy ((h)->next_free, (char *) (where), (h)->temp),\t\t\\\n-  (h)->next_free += (h)->temp)))\n+  _obstack_memcpy ((h)->next_free, (char *) (where), (h)->temp),\t\\\n+  (h)->next_free += (h)->temp)\n \n-#define obstack_grow0(h,where,length)\t\t\t\t\t\\\n+# define obstack_grow0(h,where,length)\t\t\t\t\t\\\n ( (h)->temp = (length),\t\t\t\t\t\t\t\\\n   (((h)->next_free + (h)->temp + 1 > (h)->chunk_limit)\t\t\t\\\n    ? (_obstack_newchunk ((h), (h)->temp + 1), 0) : 0),\t\t\t\\\n-  ((h)->alloc_failed ? 0 :\t\t\t\t\t\t\\\n-  (memcpy ((h)->next_free, (char *) (where), (h)->temp),\t\t\\\n+  _obstack_memcpy ((h)->next_free, (char *) (where), (h)->temp),\t\\\n   (h)->next_free += (h)->temp,\t\t\t\t\t\t\\\n-  *((h)->next_free)++ = 0)))\n+  *((h)->next_free)++ = 0)\n \n-#define obstack_1grow(h,datum)\t\t\t\t\t\t\\\n+# define obstack_1grow(h,datum)\t\t\t\t\t\t\\\n ( (((h)->next_free + 1 > (h)->chunk_limit)\t\t\t\t\\\n    ? (_obstack_newchunk ((h), 1), 0) : 0),\t\t\t\t\\\n- ((h)->alloc_failed ? 0 :\t\t\t\t\t\t\\\n-  (*((h)->next_free)++ = (datum))))\n+  (*((h)->next_free)++ = (datum)))\n \n-#define obstack_ptr_grow(h,datum)\t\t\t\t\t\\\n+# define obstack_ptr_grow(h,datum)\t\t\t\t\t\\\n ( (((h)->next_free + sizeof (char *) > (h)->chunk_limit)\t\t\\\n    ? (_obstack_newchunk ((h), sizeof (char *)), 0) : 0),\t\t\\\n-  ((h)->alloc_failed ? 0 :\t\t\t\t\t\t\\\n-  (*((char **) (((h)->next_free+=sizeof(char *))-sizeof(char *))) = ((char *) datum))))\n+  (*((char **) (((h)->next_free+=sizeof(char *))-sizeof(char *))) = ((char *) datum)))\n \n-#define obstack_int_grow(h,datum)\t\t\t\t\t\\\n+# define obstack_int_grow(h,datum)\t\t\t\t\t\\\n ( (((h)->next_free + sizeof (int) > (h)->chunk_limit)\t\t\t\\\n    ? (_obstack_newchunk ((h), sizeof (int)), 0) : 0),\t\t\t\\\n-  ((h)->alloc_failed ? 0 :\t\t\t\t\t\t\\\n-  (*((int *) (((h)->next_free+=sizeof(int))-sizeof(int))) = ((int) datum))))\n+  (*((int *) (((h)->next_free+=sizeof(int))-sizeof(int))) = ((int) datum)))\n \n-#define obstack_ptr_grow_fast(h,aptr) (*((char **) (h)->next_free)++ = (char *) aptr)\n-#define obstack_int_grow_fast(h,aint) (*((int *) (h)->next_free)++ = (int) aint)\n+# define obstack_ptr_grow_fast(h,aptr) (*((char **) (h)->next_free)++ = (char *) aptr)\n+# define obstack_int_grow_fast(h,aint) (*((int *) (h)->next_free)++ = (int) aint)\n \n-#define obstack_blank(h,length)\t\t\t\t\t\t\\\n+# define obstack_blank(h,length)\t\t\t\t\t\\\n ( (h)->temp = (length),\t\t\t\t\t\t\t\\\n   (((h)->chunk_limit - (h)->next_free < (h)->temp)\t\t\t\\\n    ? (_obstack_newchunk ((h), (h)->temp), 0) : 0),\t\t\t\\\n-  ((h)->alloc_failed ? 0 :\t\t\t\t\t\t\\\n-  ((h)->next_free += (h)->temp)))\n+  ((h)->next_free += (h)->temp))\n \n-#define obstack_alloc(h,length)\t\t\t\t\t\t\\\n+# define obstack_alloc(h,length)\t\t\t\t\t\\\n  (obstack_blank ((h), (length)), obstack_finish ((h)))\n \n-#define obstack_copy(h,where,length)\t\t\t\t\t\\\n+# define obstack_copy(h,where,length)\t\t\t\t\t\\\n  (obstack_grow ((h), (where), (length)), obstack_finish ((h)))\n \n-#define obstack_copy0(h,where,length)\t\t\t\t\t\\\n+# define obstack_copy0(h,where,length)\t\t\t\t\t\\\n  (obstack_grow0 ((h), (where), (length)), obstack_finish ((h)))\n \n-#define obstack_finish(h)  \t\t\t\t\t\t\\\n-( (h)->alloc_failed ? 0 :\t\t\t\t\t\t\\\n-  (((h)->next_free == (h)->object_base\t\t\t\t\t\\\n+# define obstack_finish(h)  \t\t\t\t\t\t\\\n+( ((h)->next_free == (h)->object_base\t\t\t\t\t\\\n    ? (((h)->maybe_empty_object = 1), 0)\t\t\t\t\t\\\n    : 0),\t\t\t\t\t\t\t\t\\\n   (h)->temp = __PTR_TO_INT ((h)->object_base),\t\t\t\t\\\n   (h)->next_free\t\t\t\t\t\t\t\\\n     = __INT_TO_PTR ((__PTR_TO_INT ((h)->next_free)+(h)->alignment_mask)\t\\\n \t\t    & ~ ((h)->alignment_mask)),\t\t\t\t\\\n-  (((h)->next_free - (char *) (h)->chunk\t\t\t\t\t\\\n+  (((h)->next_free - (char *) (h)->chunk\t\t\t\t\\\n     > (h)->chunk_limit - (char *) (h)->chunk)\t\t\t\t\\\n    ? ((h)->next_free = (h)->chunk_limit) : 0),\t\t\t\t\\\n   (h)->object_base = (h)->next_free,\t\t\t\t\t\\\n-  __INT_TO_PTR ((h)->temp)))\n+  __INT_TO_PTR ((h)->temp))\n \n-#if defined (__STDC__) && __STDC__\n-#define obstack_free(h,obj)\t\t\t\t\t\t\\\n+# if defined __STDC__ && __STDC__\n+#  define obstack_free(h,obj)\t\t\t\t\t\t\\\n ( (h)->temp = (char *) (obj) - (char *) (h)->chunk,\t\t\t\\\n   (((h)->temp > 0 && (h)->temp < (h)->chunk_limit - (char *) (h)->chunk)\\\n    ? (int) ((h)->next_free = (h)->object_base\t\t\t\t\\\n \t    = (h)->temp + (char *) (h)->chunk)\t\t\t\t\\\n    : (((obstack_free) ((h), (h)->temp + (char *) (h)->chunk), 0), 0)))\n-#else\n-#define obstack_free(h,obj)\t\t\t\t\t\t\\\n+# else\n+#  define obstack_free(h,obj)\t\t\t\t\t\t\\\n ( (h)->temp = (char *) (obj) - (char *) (h)->chunk,\t\t\t\\\n   (((h)->temp > 0 && (h)->temp < (h)->chunk_limit - (char *) (h)->chunk)\\\n    ? (int) ((h)->next_free = (h)->object_base\t\t\t\t\\\n \t    = (h)->temp + (char *) (h)->chunk)\t\t\t\t\\\n    : (_obstack_free ((h), (h)->temp + (char *) (h)->chunk), 0)))\n-#endif\n+# endif\n \n #endif /* not __GNUC__ or not __STDC__ */\n \n-#endif /* not __OBSTACK_H__ */\n+#ifdef __cplusplus\n+}\t/* C++ */\n+#endif\n+\n+#endif /* obstack.h */"}]}