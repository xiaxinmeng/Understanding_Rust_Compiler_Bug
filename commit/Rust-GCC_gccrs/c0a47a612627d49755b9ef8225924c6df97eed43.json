{"sha": "c0a47a612627d49755b9ef8225924c6df97eed43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBhNDdhNjEyNjI3ZDQ5NzU1YjllZjgyMjU5MjRjNmRmOTdlZWQ0Mw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-02-22T04:16:18Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-02-22T04:16:18Z"}, "message": "fold-const.c (omit_one_operand): No longer static.\n\n\n\t* fold-const.c (omit_one_operand): No longer static.\n\t* tree.h (omit_one_operand): Prototype here.\n\t(div_and_round_double): Keep fold-const.c prototypes together.\n\t* builtins.c (builtin_mathfn_code): Handle binary built-in\n\tfuntions, such as \"pow\" and \"atan2\".\n\t(fold_builtin): Optimize both pow(x,0.0) and pow(1.0,y) to 1.0.\n\tSimplify optimizations using \"type\" the builtin's return type.\n\n\t* gcc.dg/builtins-5.c: New test case.\n\nFrom-SVN: r63273", "tree": {"sha": "b5839d7e929ffb3f98fcd9a26632868768f973ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5839d7e929ffb3f98fcd9a26632868768f973ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0a47a612627d49755b9ef8225924c6df97eed43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a47a612627d49755b9ef8225924c6df97eed43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0a47a612627d49755b9ef8225924c6df97eed43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a47a612627d49755b9ef8225924c6df97eed43/comments", "author": null, "committer": null, "parents": [{"sha": "5b296d934079373d33f531b4384224e4023695ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b296d934079373d33f531b4384224e4023695ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b296d934079373d33f531b4384224e4023695ca"}], "stats": {"total": 152, "additions": 125, "deletions": 27}, "files": [{"sha": "5ddc7da18995c58e8266ddfa9e2161e3ec424f1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0a47a612627d49755b9ef8225924c6df97eed43", "patch": "@@ -1,3 +1,13 @@\n+2003-02-21  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (omit_one_operand): No longer static.\n+\t* tree.h (omit_one_operand): Prototype here.\n+\t(div_and_round_double): Keep fold-const.c prototypes together.\n+\t* builtins.c (builtin_mathfn_code): Handle binary built-in\n+\tfuntions, such as \"pow\" and \"atan2\".\n+\t(fold_builtin): Optimize both pow(x,0.0) and pow(1.0,y) to 1.0.\n+\tSimplify optimizations using \"type\" the builtin's return type.\n+\n 2003-02-22  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.c (cris_rtx_costs): Blockify dangling else."}, {"sha": "81e38db73aacda5710efc1b8a86fa869d85d8e98", "filename": "gcc/builtins.c", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c0a47a612627d49755b9ef8225924c6df97eed43", "patch": "@@ -4515,10 +4515,30 @@ builtin_mathfn_code (t)\n \n   arglist = TREE_OPERAND (t, 1);\n   if (! arglist\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != REAL_TYPE\n-      || TREE_CHAIN (arglist))\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != REAL_TYPE)\n     return END_BUILTINS;\n \n+  arglist = TREE_CHAIN (arglist);\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+    case BUILT_IN_POW:\n+    case BUILT_IN_POWF:\n+    case BUILT_IN_POWL:\n+    case BUILT_IN_ATAN2:\n+    case BUILT_IN_ATAN2F:\n+    case BUILT_IN_ATAN2L:\n+      if (! arglist\n+\t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != REAL_TYPE\n+\t  || TREE_CHAIN (arglist))\n+\treturn END_BUILTINS;\n+      break;\n+\n+    default:\n+      if (arglist)\n+\treturn END_BUILTINS;\n+      break;\n+    }\n+\n   return DECL_FUNCTION_CODE (fndecl);\n }\n \n@@ -4653,6 +4673,7 @@ fold_builtin (exp)\n {\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   tree arglist = TREE_OPERAND (exp, 1);\n+  tree type = TREE_TYPE (TREE_TYPE (fndecl));\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n \n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n@@ -4696,10 +4717,10 @@ fold_builtin (exp)\n \t      REAL_VALUE_TYPE r, x;\n \n \t      x = TREE_REAL_CST (arg);\n-\t      mode = TYPE_MODE (TREE_TYPE (arg));\n+\t      mode = TYPE_MODE (type);\n \t      if (real_sqrt (&r, mode, &x)\n \t\t  || (!flag_trapping_math && !flag_errno_math))\n-\t\treturn build_real (TREE_TYPE (arg), r);\n+\t\treturn build_real (type, r);\n \t    }\n \n \t  /* Optimize sqrt(exp(x)) = exp(x/2.0).  */\n@@ -4710,9 +4731,9 @@ fold_builtin (exp)\n \t\t  || fcode == BUILT_IN_EXPL))\n \t    {\n \t      tree expfn = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n-\t      arg = build (RDIV_EXPR, TREE_TYPE (arg),\n+\t      arg = build (RDIV_EXPR, type,\n \t\t\t   TREE_VALUE (TREE_OPERAND (arg, 1)),\n-\t\t\t   build_real (TREE_TYPE (arg), dconst2));\n+\t\t\t   build_real (type, dconst2));\n \t      arglist = build_tree_list (NULL_TREE, arg);\n \t      return build_function_call_expr (expfn, arglist);\n \t    }\n@@ -4729,7 +4750,7 @@ fold_builtin (exp)\n \n \t  /* Optimize exp(0.0) = 1.0.  */\n \t  if (real_zerop (arg))\n-\t    return build_real (TREE_TYPE (arg), dconst1);\n+\t    return build_real (type, dconst1);\n \n \t  /* Optimize exp(log(x)) = x.  */\n \t  fcode = builtin_mathfn_code (arg);\n@@ -4751,7 +4772,7 @@ fold_builtin (exp)\n \n \t  /* Optimize log(1.0) = 0.0.  */\n \t  if (real_onep (arg))\n-\t    return build_real (TREE_TYPE (arg), dconst0);\n+\t    return build_real (type, dconst0);\n \n \t  /* Optimize log(exp(x)) = x.  */\n \t  fcode = builtin_mathfn_code (arg);\n@@ -4769,31 +4790,49 @@ fold_builtin (exp)\n \t    {\n \t      tree logfn = build_function_call_expr (fndecl,\n \t\t\t\t\t\t     TREE_OPERAND (arg, 1));\n-\t      return fold (build (RDIV_EXPR, TREE_TYPE (arg), logfn,\n-\t\t\t\t  build_real (TREE_TYPE (arg), dconst2)));\n+\t      return fold (build (RDIV_EXPR, type, logfn,\n+\t\t\t\t  build_real (type, dconst2)));\n \t    }\n \t}\n       break;\n \n+    case BUILT_IN_POW:\n+    case BUILT_IN_POWF:\n+    case BUILT_IN_POWL:\n+      if (validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n+\t{\n+\t  tree arg0 = TREE_VALUE (arglist);\n+\t  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+\n+\t  /* Optimize pow(x,0.0) = 1.0.  */\n+\t  if (real_zerop (arg1))\n+\t    return omit_one_operand (type, build_real (type, dconst1), arg0);\n+\n+\t  /* Optimize pow(1.0,y) = 1.0.  */\n+\t  if (real_onep (arg0))\n+\t    return omit_one_operand (type, build_real (type, dconst1), arg1);\n+\t}\n+      break;\n+\n     case BUILT_IN_INF:\n     case BUILT_IN_INFF:\n     case BUILT_IN_INFL:\n-      return fold_builtin_inf (TREE_TYPE (TREE_TYPE (fndecl)), true);\n+      return fold_builtin_inf (type, true);\n \n     case BUILT_IN_HUGE_VAL:\n     case BUILT_IN_HUGE_VALF:\n     case BUILT_IN_HUGE_VALL:\n-      return fold_builtin_inf (TREE_TYPE (TREE_TYPE (fndecl)), false);\n+      return fold_builtin_inf (type, false);\n \n     case BUILT_IN_NAN:\n     case BUILT_IN_NANF:\n     case BUILT_IN_NANL:\n-      return fold_builtin_nan (arglist, TREE_TYPE (TREE_TYPE (fndecl)), true);\n+      return fold_builtin_nan (arglist, type, true);\n \n     case BUILT_IN_NANS:\n     case BUILT_IN_NANSF:\n     case BUILT_IN_NANSL:\n-      return fold_builtin_nan (arglist, TREE_TYPE (TREE_TYPE (fndecl)), false);\n+      return fold_builtin_nan (arglist, type, false);\n \n     case BUILT_IN_FLOOR:\n     case BUILT_IN_FLOORF:"}, {"sha": "48c3683f8c2667de2c0967cf2aa97c61e12f6480", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c0a47a612627d49755b9ef8225924c6df97eed43", "patch": "@@ -81,7 +81,6 @@ static int truth_value_p\tPARAMS ((enum tree_code));\n static int operand_equal_for_comparison_p PARAMS ((tree, tree, tree));\n static int twoval_comparison_p\tPARAMS ((tree, tree *, tree *, int *));\n static tree eval_subst\t\tPARAMS ((tree, tree, tree, tree, tree));\n-static tree omit_one_operand\tPARAMS ((tree, tree, tree));\n static tree pedantic_omit_one_operand PARAMS ((tree, tree, tree));\n static tree distribute_bit_expr PARAMS ((enum tree_code, tree, tree, tree));\n static tree make_bit_field_ref\tPARAMS ((tree, tree, int, int, int));\n@@ -2256,7 +2255,7 @@ eval_subst (arg, old0, new0, old1, new1)\n    If OMITTED has side effects, we must evaluate it.  Otherwise, just do\n    the conversion of RESULT to TYPE.  */\n \n-static tree\n+tree\n omit_one_operand (type, result, omitted)\n      tree type, result, omitted;\n {"}, {"sha": "f68ad3aef15262f0167a24db3a3201c283cb7891", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0a47a612627d49755b9ef8225924c6df97eed43", "patch": "@@ -1,3 +1,7 @@\n+2003-02-21  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-5.c: New test case.\n+\n 2003-02-22  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/asmreg-1.c: New test."}, {"sha": "a056812446da8af728d5c69454b70a1eaa98cb1b", "filename": "gcc/testsuite/gcc.dg/builtins-5.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-5.c?ref=c0a47a612627d49755b9ef8225924c6df97eed43", "patch": "@@ -0,0 +1,45 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that built-in math function constant folding of constant\n+   arguments is correctly performed by the by the compiler.\n+\n+   Written by Roger Sayle, 20th February 2003.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void link_error(void);\n+\n+void test(double x)\n+{\n+  if (pow (x, 0.0) != 1.0)\n+    link_error ();\n+  if (pow (1.0, x) != 1.0)\n+    link_error ();\n+}\n+\n+void testf(float x)\n+{\n+  if (powf (x, 0.0f) != 1.0f)\n+    link_error ();\n+  if (powf (1.0f, x) != 1.0f)\n+    link_error ();\n+}\n+\n+void testl(long double x)\n+{\n+  if (powl (x, 0.0l) != 1.0l)\n+    link_error ();\n+  if (powl (1.0l, x) != 1.0l)\n+    link_error ();\n+}\n+\n+int main()\n+{\n+  test (0.0);\n+  testf (0.0f);\n+  testl (0.0l);\n+\n+  return 0;\n+}\n+"}, {"sha": "6cdf2c8b01706191c12b7f3ba698ae1c69933c3f", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a47a612627d49755b9ef8225924c6df97eed43/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c0a47a612627d49755b9ef8225924c6df97eed43", "patch": "@@ -2902,7 +2902,19 @@ extern void rrotate_double\tPARAMS ((unsigned HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t\t HOST_WIDE_INT, unsigned int,\n \t\t\t\t\t unsigned HOST_WIDE_INT *,\n \t\t\t\t\t HOST_WIDE_INT *));\n+\n+extern int div_and_round_double\t\tPARAMS ((enum tree_code, int,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t HOST_WIDE_INT,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t HOST_WIDE_INT,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT *,\n+\t\t\t\t\t\t HOST_WIDE_INT *,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT *,\n+\t\t\t\t\t\t HOST_WIDE_INT *));\n+\n extern int operand_equal_p\tPARAMS ((tree, tree, int));\n+extern tree omit_one_operand\tPARAMS ((tree, tree, tree));\n extern tree invert_truthvalue\tPARAMS ((tree));\n \n /* In builtins.c */\n@@ -3050,17 +3062,6 @@ extern void variable_section\t\tPARAMS ((tree, int));\n enum tls_model decl_tls_model\t\tPARAMS ((tree));\n enum symbol_visibility decl_visibility\tPARAMS ((tree));\n \n-/* In fold-const.c */\n-extern int div_and_round_double\t\tPARAMS ((enum tree_code, int,\n-\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n-\t\t\t\t\t\t HOST_WIDE_INT,\n-\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n-\t\t\t\t\t\t HOST_WIDE_INT,\n-\t\t\t\t\t\t unsigned HOST_WIDE_INT *,\n-\t\t\t\t\t\t HOST_WIDE_INT *,\n-\t\t\t\t\t\t unsigned HOST_WIDE_INT *,\n-\t\t\t\t\t\t HOST_WIDE_INT *));\n-\n /* In stmt.c */\n extern void emit_nop\t\t\tPARAMS ((void));\n extern void expand_computed_goto\tPARAMS ((tree));"}]}