{"sha": "ebea4e1da08608622e9db37c133c84120b8c5da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJlYTRlMWRhMDg2MDg2MjJlOWRiMzdjMTMzYzg0MTIwYjhjNWRhOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-29T07:42:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-29T07:42:52Z"}, "message": "re PR c++/87539 (internal compiler error when compiling project with Os optimization flag)\n\n\tPR c++/87539\n\t* g++.dg/cpp0x/pr87539.C: New test.\n\nFrom-SVN: r266611", "tree": {"sha": "bcc7e895ff0d1df4707d3a2bf1d33ccea38f25cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcc7e895ff0d1df4707d3a2bf1d33ccea38f25cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebea4e1da08608622e9db37c133c84120b8c5da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebea4e1da08608622e9db37c133c84120b8c5da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebea4e1da08608622e9db37c133c84120b8c5da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebea4e1da08608622e9db37c133c84120b8c5da8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9caa6732f9aafd8335adda6e9a57239d1fed40cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9caa6732f9aafd8335adda6e9a57239d1fed40cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9caa6732f9aafd8335adda6e9a57239d1fed40cb"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "1764265073df02ff7638fc9eb3d03823f8dc1c22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebea4e1da08608622e9db37c133c84120b8c5da8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebea4e1da08608622e9db37c133c84120b8c5da8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebea4e1da08608622e9db37c133c84120b8c5da8", "patch": "@@ -1,3 +1,8 @@\n+2018-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/87539\n+\t* g++.dg/cpp0x/pr87539.C: New test.\n+\n 2018-11-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/88065"}, {"sha": "97c392f0c8fa33eecb226306e853a2a7beca8cb9", "filename": "gcc/testsuite/g++.dg/cpp0x/pr87539.C", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebea4e1da08608622e9db37c133c84120b8c5da8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr87539.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebea4e1da08608622e9db37c133c84120b8c5da8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr87539.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr87539.C?ref=ebea4e1da08608622e9db37c133c84120b8c5da8", "patch": "@@ -0,0 +1,85 @@\n+// PR c++/87539\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Os\" }\n+\n+namespace a {\n+template <typename b, typename = b, typename = int> class c;\n+class exception {};\n+template <typename d> struct e { d f; };\n+struct g { g(); g(const g &); };\n+}\n+template <class, class, class = int> class h;\n+template <typename, typename> struct i;\n+template <int j> struct aa { static const int k = j; };\n+struct ac { typedef a::e<int> l; };\n+struct ad;\n+template <int, typename m, typename> struct ae { typedef m l; };\n+template <typename m, typename n> struct ae<false, m, n> { typedef n l; };\n+template <typename m, typename n, typename p> struct o {\n+  typedef typename ae<m::k, n, p>::l l;\n+};\n+struct af { af(char *); };\n+template <typename> struct ag { ag(a::g = a::g()) {} };\n+template <typename ah, typename ai, typename aj, typename al>\n+struct i<a::c<ah, ai, aj>, al> { typedef ag<al> l; };\n+namespace ak {\n+template <typename am, typename an, typename ao> struct ap {\n+  typedef typename o<am, an, ao>::l ::l l;\n+};\n+template <typename = ad> struct aq { typedef ad l; };\n+}\n+template <typename ar> struct as {\n+  typedef char at;\n+  template <typename au, typename> static decltype(au(), at()) av(int);\n+  template <typename, typename> static int av(...);\n+  static const bool k = sizeof(av<ar, int>(0)) == 1;\n+};\n+template <typename ar> struct aw { static const bool k = as<ar>::k; };\n+template <class ar> struct ax { typedef aw<ar> l; };\n+template <typename ar> struct ay { typedef typename ax<ar>::l l; };\n+template <typename ar> struct az : ay<ar>::l {};\n+template <class ar, class> struct ba : aa<az<ar>::k> {};\n+template <class> struct bb : ak::ap<ba<int, int>, ak::aq<>, int> {};\n+template <typename> struct q : ba<bb<int>::l, int> {};\n+template <class, class, bool> class r;\n+template <class s, class t> struct r<s, t, false> {\n+  s operator*();\n+  s operator++();\n+};\n+template <class, class, class, class, class>\n+class bc : public r<a::e<h<int, int>>, int, q<int>::k> {};\n+template <class bd, class be, class bf, class u, class v, class bg, class w,\n+          class x, class bh, class bi>\n+int operator!=(bc<bd, be, bf, u, v>, bc<bg, w, x, bh, bi>);\n+template <class, class, class> struct h {\n+  typedef af bl;\n+  bc<int, int, int, ak::ap<aa<false>, int, ac>::l, int> begin();\n+  bc<int, int, int, ak::ap<aa<false>, int, ac>::l, int> end();\n+  template <class bm> bm bn() const;\n+  template <class> int bo() const;\n+  template <class bm> int bx(const bl &, const bm &) const;\n+  template <class> int bp(const bl &) const;\n+};\n+template <class bq, class br, class am>\n+template <class bm>\n+bm h<bq, br, am>::bn() const { typename i<a::c<int>, bm>::l(); return bm(); }\n+template <class bq, class br, class am>\n+template <class>\n+int h<bq, br, am>::bo() const { i<a::c<int>, int>::l(); bn<int>(); return 0; }\n+template <class bq, class br, class am>\n+template <class bm>\n+int h<bq, br, am>::bx(const bl &bs, const bm &) const { bp<int>(bs); return 0; }\n+template <class bq, class br, class am>\n+template <class>\n+int h<bq, br, am>::bp(const bl &) const { bo<int>(); return 0; }\n+char bt[] = \"\";\n+void\n+d()\n+{\n+  h<int, int> bu;\n+  for (auto bv : bu)\n+    try {\n+      bv.f.bx(bt, 0);\n+    } catch (a::exception) {\n+    }\n+}"}]}