{"sha": "72f1c34bd49cceca3dc1f8529161353b1aa89c41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJmMWMzNGJkNDljY2VjYTNkYzFmODUyOTE2MTM1M2IxYWE4OWM0MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-18T12:37:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-18T12:37:06Z"}, "message": "hash-long-double-aux.cc: Rename to...\n\n2011-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* src/hash-long-double-aux.cc: Rename to...\n\t* src/hash-long-double-tr1-aux.cc: ... this.\n\t* src/compatibility-ldbl.cc: Adjust.\n\t* src/hash_tr1.cc: Likewise.\n\t* src/hash_c++0x.cc: Don't use src/hash-long-double-aux.cc.\n\t* include/bits/functional_hash.h (hash<_Tp*>::operator(), specs\n\tfor integer types, hash<float>::operator(), hash<double>::operator(),\n\thash<long double>::operator()): Declare noexcept.\n\t* include/debug/bitset (hash<__debug::bitset>::operator()): Likewise.\n\t* include/debug/vector (hash<__debug::vector>::operator()): Likewise.\n\t* include/std/system_error (hash<error_code>::operator()): Likewise.\n\t* include/std/thread (hash<thread::id>::operator()): Likewise.\n\t* include/std/bitset (hash<bitset>::operator()): Likewise.\n\t* include/std/typeindex (hash<type_index>::operator()): Likewise.\n\t* include/profile/bitset (hash<__profile::vector>::operator()):\n\tLikewise.\n\t* include/profile/vector (hash<__profile::vector>::operator()):\n\tLikewise.\n\t* include/ext/vstring.h (hash<__vstring>::operator(),\n\thash<__wvstring>::operator(), hash<__u16vstring>::operator(),\n\thash<__u32vstring>::operator()): Likewise.\n\t* include/bits/shared_ptr.h (hash<shared_ptr>::operator()): Likewise.\n\t* include/bits/shared_ptr_base.h (hash<__shared_ptr>::operator()):\n\tLikewise.\n\t* include/bits/unique_ptr.h (hash<unique_ptr>::operator()): Likewise.\n\t* include/bits/basic_string.h (hash<string>::operator(),\n\thash<wstring>::operator(), hash<u16string>::operator(),\n\thash<u32string>::operator()): Likewise.\n\t* include/bits/vector.tcc (hash<vector>::operator()): Likewise.\n\t* include/bits/stl_bvector.h (hash<vector>::operator()): Likewise.\n\t* libsupc++/typeinfo (type_info::hash_code): Use noexcept instead of\n\tthrow().\n\nFrom-SVN: r181473", "tree": {"sha": "c112cd81959516415afee24bcf522b75fcf6693a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c112cd81959516415afee24bcf522b75fcf6693a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72f1c34bd49cceca3dc1f8529161353b1aa89c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f1c34bd49cceca3dc1f8529161353b1aa89c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72f1c34bd49cceca3dc1f8529161353b1aa89c41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f1c34bd49cceca3dc1f8529161353b1aa89c41/comments", "author": null, "committer": null, "parents": [{"sha": "1e1ae0afd8adb79708a34b962bbe3a228f07f68e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e1ae0afd8adb79708a34b962bbe3a228f07f68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e1ae0afd8adb79708a34b962bbe3a228f07f68e"}], "stats": {"total": 307, "additions": 188, "deletions": 119}, "files": [{"sha": "0d68464933c9ac6599e596905c460969845b16c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -1,3 +1,38 @@\n+2011-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* src/hash-long-double-aux.cc: Rename to...\n+\t* src/hash-long-double-tr1-aux.cc: ... this.\n+\t* src/compatibility-ldbl.cc: Adjust.\n+\t* src/hash_tr1.cc: Likewise.\n+\t* src/hash_c++0x.cc: Don't use src/hash-long-double-aux.cc.\n+\t* include/bits/functional_hash.h (hash<_Tp*>::operator(), specs\n+\tfor integer types, hash<float>::operator(), hash<double>::operator(),\n+\thash<long double>::operator()): Declare noexcept.\n+\t* include/debug/bitset (hash<__debug::bitset>::operator()): Likewise.\n+\t* include/debug/vector (hash<__debug::vector>::operator()): Likewise.\n+\t* include/std/system_error (hash<error_code>::operator()): Likewise.\n+\t* include/std/thread (hash<thread::id>::operator()): Likewise.\n+\t* include/std/bitset (hash<bitset>::operator()): Likewise.\n+\t* include/std/typeindex (hash<type_index>::operator()): Likewise.\n+\t* include/profile/bitset (hash<__profile::vector>::operator()):\n+\tLikewise.\n+\t* include/profile/vector (hash<__profile::vector>::operator()):\n+\tLikewise.\n+\t* include/ext/vstring.h (hash<__vstring>::operator(),\n+\thash<__wvstring>::operator(), hash<__u16vstring>::operator(),\n+\thash<__u32vstring>::operator()): Likewise.\n+\t* include/bits/shared_ptr.h (hash<shared_ptr>::operator()): Likewise.\n+\t* include/bits/shared_ptr_base.h (hash<__shared_ptr>::operator()):\n+\tLikewise.\n+\t* include/bits/unique_ptr.h (hash<unique_ptr>::operator()): Likewise.\n+\t* include/bits/basic_string.h (hash<string>::operator(),\n+\thash<wstring>::operator(), hash<u16string>::operator(),\n+\thash<u32string>::operator()): Likewise.\n+\t* include/bits/vector.tcc (hash<vector>::operator()): Likewise.\n+\t* include/bits/stl_bvector.h (hash<vector>::operator()): Likewise.\n+\t* libsupc++/typeinfo (type_info::hash_code): Use noexcept instead of\n+\tthrow().\n+\n 2011-11-17  Richard Henderson  <rth@redhat.com>\n \n \tPR libstdc++/51181"}, {"sha": "169daf586138c7e23eb7a8a7ae5c70cb258abd14", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -3044,7 +3044,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, string>\n     {\n       size_t\n-      operator()(const string& __s) const\n+      operator()(const string& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(), __s.length()); }\n     };\n \n@@ -3055,7 +3055,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, wstring>\n     {\n       size_t\n-      operator()(const wstring& __s) const\n+      operator()(const wstring& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(),\n                                      __s.length() * sizeof(wchar_t)); }\n     };\n@@ -3069,7 +3069,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, u16string>\n     {\n       size_t\n-      operator()(const u16string& __s) const\n+      operator()(const u16string& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(),\n                                      __s.length() * sizeof(char16_t)); }\n     };\n@@ -3080,7 +3080,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, u32string>\n     {\n       size_t\n-      operator()(const u32string& __s) const\n+      operator()(const u32string& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(),\n                                      __s.length() * sizeof(char32_t)); }\n     };"}, {"sha": "2b82b21f71603cac0056b610f7dffa5314150039", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 44, "deletions": 31, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -66,61 +66,64 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct hash<_Tp*> : public __hash_base<size_t, _Tp*>\n     {\n       size_t\n-      operator()(_Tp* __p) const\n+      operator()(_Tp* __p) const noexcept\n       { return reinterpret_cast<size_t>(__p); }\n     };\n \n   // Explicit specializations for integer types.\n #define _Cxx_hashtable_define_trivial_hash(_Tp) \t\\\n   template<>\t\t\t\t\t\t\\\n-    inline size_t\t\t\t\t\t\\\n-    hash<_Tp>::operator()(_Tp __val) const\t\t\\\n-    { return static_cast<size_t>(__val); }\n+    struct hash<_Tp> : public __hash_base<size_t, _Tp>  \\\n+    {                                                   \\\n+      size_t                                            \\\n+      operator()(_Tp __val) const noexcept              \\\n+      { return static_cast<size_t>(__val); }            \\\n+    };\n \n   /// Explicit specialization for bool.\n-  _Cxx_hashtable_define_trivial_hash(bool);\n+  _Cxx_hashtable_define_trivial_hash(bool)\n \n   /// Explicit specialization for char.\n-  _Cxx_hashtable_define_trivial_hash(char);\n+  _Cxx_hashtable_define_trivial_hash(char)\n \n   /// Explicit specialization for signed char.\n-  _Cxx_hashtable_define_trivial_hash(signed char);\n+  _Cxx_hashtable_define_trivial_hash(signed char)\n \n   /// Explicit specialization for unsigned char.\n-  _Cxx_hashtable_define_trivial_hash(unsigned char);\n+  _Cxx_hashtable_define_trivial_hash(unsigned char)\n \n   /// Explicit specialization for wchar_t.\n-  _Cxx_hashtable_define_trivial_hash(wchar_t);\n+  _Cxx_hashtable_define_trivial_hash(wchar_t)\n \n   /// Explicit specialization for char16_t.\n-  _Cxx_hashtable_define_trivial_hash(char16_t);\n+  _Cxx_hashtable_define_trivial_hash(char16_t)\n \n   /// Explicit specialization for char32_t.\n-  _Cxx_hashtable_define_trivial_hash(char32_t);\n+  _Cxx_hashtable_define_trivial_hash(char32_t)\n \n   /// Explicit specialization for short.\n-  _Cxx_hashtable_define_trivial_hash(short);\n+  _Cxx_hashtable_define_trivial_hash(short)\n \n   /// Explicit specialization for int.\n-  _Cxx_hashtable_define_trivial_hash(int);\n+  _Cxx_hashtable_define_trivial_hash(int)\n \n   /// Explicit specialization for long.\n-  _Cxx_hashtable_define_trivial_hash(long);\n+  _Cxx_hashtable_define_trivial_hash(long)\n \n   /// Explicit specialization for long long.\n-  _Cxx_hashtable_define_trivial_hash(long long);\n+  _Cxx_hashtable_define_trivial_hash(long long)\n \n   /// Explicit specialization for unsigned short.\n-  _Cxx_hashtable_define_trivial_hash(unsigned short);\n+  _Cxx_hashtable_define_trivial_hash(unsigned short)\n \n   /// Explicit specialization for unsigned int.\n-  _Cxx_hashtable_define_trivial_hash(unsigned int);\n+  _Cxx_hashtable_define_trivial_hash(unsigned int)\n \n   /// Explicit specialization for unsigned long.\n-  _Cxx_hashtable_define_trivial_hash(unsigned long);\n+  _Cxx_hashtable_define_trivial_hash(unsigned long)\n \n   /// Explicit specialization for unsigned long long.\n-  _Cxx_hashtable_define_trivial_hash(unsigned long long);\n+  _Cxx_hashtable_define_trivial_hash(unsigned long long)\n \n #undef _Cxx_hashtable_define_trivial_hash\n \n@@ -162,26 +165,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Specialization for float.\n   template<>\n-    inline size_t\n-    hash<float>::operator()(float __val) const\n+    struct hash<float> : public __hash_base<size_t, float>\n     {\n-      // 0 and -0 both hash to zero.\n-      return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;\n-    }\n+      size_t\n+      operator()(float __val) const noexcept\n+      {\n+\t// 0 and -0 both hash to zero.\n+\treturn __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;\n+      }\n+    };\n \n   /// Specialization for double.\n   template<>\n-    inline size_t\n-    hash<double>::operator()(double __val) const\n+    struct hash<double> : public __hash_base<size_t, double>\n     {\n-      // 0 and -0 both hash to zero.\n-      return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;\n-    }\n+      size_t\n+      operator()(double __val) const noexcept\n+      {\n+\t// 0 and -0 both hash to zero.\n+\treturn __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;\n+      }\n+    };\n \n   /// Specialization for long double.\n   template<>\n-    _GLIBCXX_PURE size_t\n-    hash<long double>::operator()(long double __val) const;\n+    struct hash<long double>\n+    : public __hash_base<size_t, long double>\n+    {\n+      _GLIBCXX_PURE size_t\n+      operator()(long double __val) const noexcept;\n+    };\n \n   // @} group hashes\n "}, {"sha": "33128dd4ed63151da1b361d9043ef65274cf80b0", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -619,7 +619,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, shared_ptr<_Tp>>\n     {\n       size_t\n-      operator()(const shared_ptr<_Tp>& __s) const\n+      operator()(const shared_ptr<_Tp>& __s) const noexcept\n       { return std::hash<_Tp*>()(__s.get()); }\n     };\n "}, {"sha": "c06775475532d1d24702ed0fecbe917bafbbed0b", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -1450,7 +1450,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>\n     {\n       size_t\n-      operator()(const __shared_ptr<_Tp, _Lp>& __s) const\n+      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept\n       { return std::hash<_Tp*>()(__s.get()); }\n     };\n "}, {"sha": "bec63ff03f9749330fe03b2313324dff6acb60a0", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -1075,7 +1075,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, _GLIBCXX_STD_C::vector<bool, _Alloc>>\n     {\n       size_t\n-      operator()(const _GLIBCXX_STD_C::vector<bool, _Alloc>& __b) const;\n+      operator()(const _GLIBCXX_STD_C::vector<bool, _Alloc>&) const noexcept;\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "0a127996e52e49de80e169a91df5a7ef87777592", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -545,7 +545,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>\n     {\n       size_t\n-      operator()(const unique_ptr<_Tp, _Dp>& __u) const\n+      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept\n       {\n \ttypedef unique_ptr<_Tp, _Dp> _UP;\n \treturn std::hash<typename _UP::pointer>()(__u.get());"}, {"sha": "d9c3b659e6b5ca1e3c525560bcc494bc5b520efa", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -818,7 +818,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Alloc>\n     size_t\n     hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>::\n-    operator()(const _GLIBCXX_STD_C::vector<bool, _Alloc>& __b) const\n+    operator()(const _GLIBCXX_STD_C::vector<bool, _Alloc>& __b) const noexcept\n     {\n       size_t __hash = 0;\n       using _GLIBCXX_STD_C::_S_word_bit;"}, {"sha": "f44bbcddefd1bd74f2f8e08bf227c9ffe1769d8e", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -414,7 +414,7 @@ namespace __debug\n     : public __hash_base<size_t, __debug::bitset<_Nb>>\n     {\n       size_t\n-      operator()(const __debug::bitset<_Nb>& __b) const\n+      operator()(const __debug::bitset<_Nb>& __b) const noexcept\n       { return std::hash<_GLIBCXX_STD_C::bitset<_Nb>>()(__b._M_base()); }\n     };\n #endif"}, {"sha": "5ee0fabc32a1849a4ac1fe3fa118f36377e844c2", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -625,7 +625,7 @@ namespace __debug\n     : public __hash_base<size_t, __debug::vector<bool, _Alloc>>\n     {\n       size_t\n-      operator()(const __debug::vector<bool, _Alloc>& __b) const\n+      operator()(const __debug::vector<bool, _Alloc>& __b) const noexcept\n       { return std::hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>()\n \t  (__b._M_base()); }\n     };"}, {"sha": "8c4120a3be2c7c716bd0324d5bc88b1e62aa6ef4", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -2769,7 +2769,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, __gnu_cxx::__vstring>\n     {\n       size_t\n-      operator()(const __gnu_cxx::__vstring& __s) const\n+      operator()(const __gnu_cxx::__vstring& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(), __s.length()); }\n     };\n \n@@ -2780,7 +2780,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, __gnu_cxx::__wvstring>\n     {\n       size_t\n-      operator()(const __gnu_cxx::__wvstring& __s) const\n+      operator()(const __gnu_cxx::__wvstring& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(),\n                                      __s.length() * sizeof(wchar_t)); }\n     };\n@@ -2793,7 +2793,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, __gnu_cxx::__u16vstring>\n     {\n       size_t\n-      operator()(const __gnu_cxx::__u16vstring& __s) const\n+      operator()(const __gnu_cxx::__u16vstring& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(),\n                                      __s.length() * sizeof(char16_t)); }\n     };\n@@ -2804,7 +2804,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, __gnu_cxx::__u32vstring>\n     {\n       size_t\n-      operator()(const __gnu_cxx::__u32vstring& __s) const\n+      operator()(const __gnu_cxx::__u32vstring& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(),\n                                      __s.length() * sizeof(char32_t)); }\n     };"}, {"sha": "a2cba5efe801e01b230130ae970de9ce1149a1cc", "filename": "libstdc++-v3/include/profile/bitset", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -372,7 +372,7 @@ namespace __profile\n     : public __hash_base<size_t, __profile::bitset<_Nb>>\n     {\n       size_t\n-      operator()(const __profile::bitset<_Nb>& __b) const\n+      operator()(const __profile::bitset<_Nb>& __b) const noexcept\n       { return std::hash<_GLIBCXX_STD_C::bitset<_Nb>>()(__b._M_base()); }\n     };\n #endif"}, {"sha": "0526c5aabb7d847cf16afb31a885504da449ff89", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -529,7 +529,7 @@ namespace __profile\n     : public __hash_base<size_t, __profile::vector<bool, _Alloc>>\n     {\n       size_t\n-      operator()(const __profile::vector<bool, _Alloc>& __b) const\n+      operator()(const __profile::vector<bool, _Alloc>& __b) const noexcept\n       { return std::hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>()\n \t  (__b._M_base()); }\n     };"}, {"sha": "e07c5e089706d1c396e7c4be344306b43bd8d343", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -1555,7 +1555,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, _GLIBCXX_STD_C::bitset<_Nb>>\n     {\n       size_t\n-      operator()(const _GLIBCXX_STD_C::bitset<_Nb>& __b) const\n+      operator()(const _GLIBCXX_STD_C::bitset<_Nb>& __b) const noexcept\n       {\n \tconst size_t __clength = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n \treturn std::_Hash_impl::hash(__b._M_getdata(), __clength);\n@@ -1567,7 +1567,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, _GLIBCXX_STD_C::bitset<0>>\n     {\n       size_t\n-      operator()(const _GLIBCXX_STD_C::bitset<0>&) const\n+      operator()(const _GLIBCXX_STD_C::bitset<0>&) const noexcept\n       { return 0; }\n     };\n "}, {"sha": "19482bc21811f077ef5120307b24ca751ce419a4", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -361,7 +361,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, error_code>\n     {\n       size_t\n-      operator()(const error_code& __e) const\n+      operator()(const error_code& __e) const noexcept\n       {\n \tconst size_t __tmp = std::_Hash_impl::hash(__e._M_value);\n \treturn std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);"}, {"sha": "1d1733731bf46c9363ed158e047febfd18eb9697", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -221,7 +221,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __hash_base<size_t, thread::id>\n     {\n       size_t\n-      operator()(const thread::id& __id) const\n+      operator()(const thread::id& __id) const noexcept\n       { return std::_Hash_impl::hash(__id._M_thread); }\n     };\n "}, {"sha": "fa07ac620e6e016eab04d7f4960f4e16ec0f5113", "filename": "libstdc++-v3/include/std/typeindex", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -76,7 +76,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !_M_target->before(*__rhs._M_target); }\n \n     size_t\n-    hash_code() const\n+    hash_code() const noexcept\n     { return _M_target->hash_code(); }\n \n     const char*\n@@ -97,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef type_index  argument_type;\n \n       size_t\n-      operator()(const type_index& __ti) const\n+      operator()(const type_index& __ti) const noexcept\n       { return __ti.hash_code(); }\n     };\n "}, {"sha": "22ef49fa7b21f70a3de4615fe19e0b9153cb287f", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -140,7 +140,7 @@ namespace std\n     { return !operator==(__arg); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    size_t hash_code() const throw()\n+    size_t hash_code() const noexcept\n     {\n #  if !__GXX_MERGED_TYPEINFO_NAMES\n       return _Hash_bytes(name(), __builtin_strlen(name()),"}, {"sha": "a103856adfa00234697399cd36e680b487a56314", "filename": "libstdc++-v3/src/compatibility-ldbl.cc", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-ldbl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-ldbl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-ldbl.cc?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for -mlong-double-64 compatibility -*- C++ -*-\n \n-// Copyright (C) 2006, 2008, 2009, 2010\n+// Copyright (C) 2006, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -69,14 +69,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \n // For std::tr1::hash<long double>::operator()\n #define _GLIBCXX_LONG_DOUBLE_COMPAT_IMPL\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-  namespace tr1 \n-  {\n-#include \"hash-long-double-aux.cc\"\n-  }\n-}\n+#include \"hash-long-double-tr1-aux.cc\"\n \n // std::tr1::hash<long double>::operator()\n // and std::hash<long double>::operator()"}, {"sha": "d54d635f83e69e66484d09abf6c74b2d6de0bd6d", "filename": "libstdc++-v3/src/hash-long-double-aux.cc", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e1ae0afd8adb79708a34b962bbe3a228f07f68e/libstdc%2B%2B-v3%2Fsrc%2Fhash-long-double-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e1ae0afd8adb79708a34b962bbe3a228f07f68e/libstdc%2B%2B-v3%2Fsrc%2Fhash-long-double-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash-long-double-aux.cc?ref=1e1ae0afd8adb79708a34b962bbe3a228f07f68e", "patch": "@@ -1,50 +0,0 @@\n-//  std::hash and std::tr1::hash definitions, long double bits -*- C++ -*-\n-\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-  // For long double, careful with random padding bits (e.g., on x86,\n-  // 10 bytes -> 12 bytes) and resort to frexp.\n-  template<>\n-    size_t\n-    hash<long double>::operator()(long double __val) const\n-    {\n-      // 0 and -0 both hash to zero.\n-      if (__val == 0.0L)\n-\treturn 0;\n-\n-      int __exponent;\n-      __val = __builtin_frexpl(__val, &__exponent);\n-      __val = __val < 0.0l ? -(__val + 0.5l) : __val;\n-\n-      const long double __mult = __SIZE_MAX__ + 1.0l;\n-      __val *= __mult;\n-\n-      // Try to use all the bits of the mantissa (really necessary only\n-      // on 32-bit targets, at least for 80-bit floating point formats).\n-      const size_t __hibits = (size_t)__val;\n-      __val = (__val - (long double)__hibits) * __mult;\n-\n-      const size_t __coeff = __SIZE_MAX__ / __LDBL_MAX_EXP__;\n-\n-      return __hibits + (size_t)__val + __coeff * __exponent;\n-    }"}, {"sha": "70ed45bbfbe87325c8838024961e299eef7d44b3", "filename": "libstdc++-v3/src/hash-long-double-tr1-aux.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Fsrc%2Fhash-long-double-tr1-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Fsrc%2Fhash-long-double-tr1-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash-long-double-tr1-aux.cc?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -0,0 +1,56 @@\n+// std::tr1::hash definitions, long double bits -*- C++ -*-\n+\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+  namespace tr1 \n+  {\n+    // For long double, careful with random padding bits (e.g., on x86,\n+    // 10 bytes -> 12 bytes) and resort to frexp.\n+    template<>\n+      size_t\n+      hash<long double>::operator()(long double __val) const\n+      {\n+\t// 0 and -0 both hash to zero.\n+\tif (__val == 0.0L)\n+\t  return 0;\n+\n+\tint __exponent;\n+\t__val = __builtin_frexpl(__val, &__exponent);\n+\t__val = __val < 0.0l ? -(__val + 0.5l) : __val;\n+\n+\tconst long double __mult = __SIZE_MAX__ + 1.0l;\n+\t__val *= __mult;\n+\n+\t// Try to use all the bits of the mantissa (really necessary only\n+\t// on 32-bit targets, at least for 80-bit floating point formats).\n+\tconst size_t __hibits = (size_t)__val;\n+\t__val = (__val - (long double)__hibits) * __mult;\n+\n+\tconst size_t __coeff = __SIZE_MAX__ / __LDBL_MAX_EXP__;\n+\n+\treturn __hibits + (size_t)__val + __coeff * __exponent;\n+      }\n+  }\n+}"}, {"sha": "d685074540b06f7fc6813a21d3389aa4d6c592fc", "filename": "libstdc++-v3/src/hash_c++0x.cc", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -1,6 +1,6 @@\n // std::hash definitions -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,5 +30,27 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-#include \"hash-long-double-aux.cc\"\n+  _GLIBCXX_PURE size_t\n+  hash<long double>::operator()(long double __val) const noexcept\n+  {\n+    // 0 and -0 both hash to zero.\n+    if (__val == 0.0L)\n+      return 0;\n+\n+    int __exponent;\n+    __val = __builtin_frexpl(__val, &__exponent);\n+    __val = __val < 0.0l ? -(__val + 0.5l) : __val;\n+\n+    const long double __mult = __SIZE_MAX__ + 1.0l;\n+    __val *= __mult;\n+\n+    // Try to use all the bits of the mantissa (really necessary only\n+    // on 32-bit targets, at least for 80-bit floating point formats).\n+    const size_t __hibits = (size_t)__val;\n+    __val = (__val - (long double)__hibits) * __mult;\n+\n+    const size_t __coeff = __SIZE_MAX__ / __LDBL_MAX_EXP__;\n+\n+    return __hibits + (size_t)__val + __coeff * __exponent;\n+  }\n }"}, {"sha": "a5ac87e585b9c52e874e896ef09429803280553b", "filename": "libstdc++-v3/src/hash_tr1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f1c34bd49cceca3dc1f8529161353b1aa89c41/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc?ref=72f1c34bd49cceca3dc1f8529161353b1aa89c41", "patch": "@@ -1,6 +1,6 @@\n // std::tr1::hash definitions -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,12 +25,12 @@\n #include <string>\n #include <tr1/functional>\n \n+#include \"hash-long-double-tr1-aux.cc\"\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n   namespace tr1 \n   {\n-#include \"hash-long-double-aux.cc\"\n-\n #ifndef _GLIBCXX_LONG_DOUBLE_COMPAT_IMPL\n   template<>\n     size_t"}]}