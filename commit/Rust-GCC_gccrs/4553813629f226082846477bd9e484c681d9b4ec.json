{"sha": "4553813629f226082846477bd9e484c681d9b4ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1MzgxMzYyOWYyMjYwODI4NDY0NzdiZDllNDg0YzY4MWQ5YjRlYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-09-28T12:57:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-09-28T12:57:47Z"}, "message": "boost_shared_ptr.h: Use __atomic_add_dispatch and __exchange_and_add_dispatch everywhere.\n\n2006-09-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/boost_shared_ptr.h: Use __atomic_add_dispatch and\n\t__exchange_and_add_dispatch everywhere.\n\nFrom-SVN: r117280", "tree": {"sha": "3dede75e702158bbb4db106f34a0f77463000c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dede75e702158bbb4db106f34a0f77463000c45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4553813629f226082846477bd9e484c681d9b4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4553813629f226082846477bd9e484c681d9b4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4553813629f226082846477bd9e484c681d9b4ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4553813629f226082846477bd9e484c681d9b4ec/comments", "author": null, "committer": null, "parents": [{"sha": "01e0ef5af0d68f3f37e2dfd7a6b464163ce01ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e0ef5af0d68f3f37e2dfd7a6b464163ce01ade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e0ef5af0d68f3f37e2dfd7a6b464163ce01ade"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "7db967bcb505fcd2128f8f68a70bee97d85c1435", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4553813629f226082846477bd9e484c681d9b4ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4553813629f226082846477bd9e484c681d9b4ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4553813629f226082846477bd9e484c681d9b4ec", "patch": "@@ -1,3 +1,8 @@\n+2006-09-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/boost_shared_ptr.h: Use __atomic_add_dispatch and\n+\t__exchange_and_add_dispatch everywhere.\n+\n 2006-09-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/typelist.h (type_to_type): Remove."}, {"sha": "4766bee3a7f056eddc38249a06f821cfceddda50", "filename": "libstdc++-v3/include/tr1/boost_shared_ptr.h", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4553813629f226082846477bd9e484c681d9b4ec/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4553813629f226082846477bd9e484c681d9b4ec/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h?ref=4553813629f226082846477bd9e484c681d9b4ec", "patch": "@@ -109,7 +109,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     : public _Mutex_base<_Lp>\n     {\n     public:  \n-      _Sp_counted_base() : _M_use_count(1), _M_weak_count(1) { }\n+      _Sp_counted_base()\n+      : _M_use_count(1), _M_weak_count(1) { }\n       \n       virtual\n       ~_Sp_counted_base() // nothrow \n@@ -130,34 +131,36 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n       void\n       _M_add_ref_copy()\n-      { __gnu_cxx::__atomic_add(&_M_use_count, 1); }\n+      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }\n   \n       void\n       _M_add_ref_lock();\n       \n       void\n       _M_release() // nothrow\n       {\n-\tif (__gnu_cxx::__exchange_and_add(&_M_use_count, -1) == 1)\n+\tif (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count,\n+\t\t\t\t\t\t   -1) == 1)\n \t  {\n \t    _M_dispose();\n-#ifdef __GTHREADS\t\n+#ifdef __GTHREADS\n \t    _GLIBCXX_READ_MEM_BARRIER;\n \t    _GLIBCXX_WRITE_MEM_BARRIER;\n #endif\n-\t    if (__gnu_cxx::__exchange_and_add(&_M_weak_count, -1) == 1)\n+\t    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,\n+\t\t\t\t\t\t       -1) == 1)\n \t      _M_destroy();\n \t  }\n       }\n   \n       void\n       _M_weak_add_ref() // nothrow\n-      { __gnu_cxx::__atomic_add(&_M_weak_count, 1); }\n+      { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }\n \n       void\n       _M_weak_release() // nothrow\n       {\n-\tif (__gnu_cxx::__exchange_and_add(&_M_weak_count, -1) == 1)\n+\tif (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)\n \t  {\n #ifdef __GTHREADS\n \t    _GLIBCXX_READ_MEM_BARRIER;\n@@ -184,21 +187,21 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     _Sp_counted_base<_S_single>::\n     _M_add_ref_lock()\n     {\n-      if (__gnu_cxx::__exchange_and_add(&_M_use_count, 1) == 0)\n+      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)\n \t{\n \t  _M_use_count = 0;\n \t  __throw_bad_weak_ptr();\n \t}\n     }\n-  \n+\n #ifdef __GTHREADS\n   template<>\n     inline void\n     _Sp_counted_base<_S_mutex>::\n     _M_add_ref_lock()\n     {\n       __gnu_cxx::__scoped_lock sentry(*this);\n-      if (__gnu_cxx::__exchange_and_add(&_M_use_count, 1) == 0)\n+      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)\n \t{\n \t  _M_use_count = 0;\n \t  __throw_bad_weak_ptr();\n@@ -227,7 +230,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     }\n \n   template<typename _Ptr, typename _Deleter, _Lock_policy _Lp>\n-    class _Sp_counted_base_impl : public _Sp_counted_base<_Lp>\n+    class _Sp_counted_base_impl\n+    : public _Sp_counted_base<_Lp>\n     {\n     public:\n       /**"}]}