{"sha": "dae2b8eaa891aa280bb99103045bde802af66086", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFlMmI4ZWFhODkxYWEyODBiYjk5MTAzMDQ1YmRlODAyYWY2NjA4Ng==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2007-08-16T12:21:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-16T12:21:07Z"}, "message": "sem_res.adb (Comes_From_Predefined_Lib_Unit): New.\n\n2007-08-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\t    Bob Duff  <duff@adacore.com>\n\t    Nicolas Setton  <setton@adacore.com>\n\n\t* sem_res.adb (Comes_From_Predefined_Lib_Unit): New.\n\t(Resolve): Alphabetize local variables. Add new variable From_Lib. When\n\tthe statement which is being resolved comes from a predefined library\n\tunit, all non-predefined library interpretations are skipped.\n\t(Resolve_Op_Concat): If string concatenation was folded in the parser,\n\tbut the \"&\" is user defined, give an error, because the folding would\n\tbe wrong.\n\n\t* sinfo.ads, sinfo.adb (Is_Folded_In_Parser): New flag to indicate that\n\tthe parser has folded a long sequence of concatenations of string\n\tliterals.\n\n\t* trans.c (Handled_Sequence_Of_Statements_to_gnu): Mark \"JMPBUF_SAVE\"\n\tand \"JMP_BUF\" variables as artificial.\n\t(N_String_Literal): Do not use alloca for very long string literals. Use\n\txmalloc/free instead. Otherwise the stack might overflow.\n\n\t* utils.c (init_gigi_decls): Mark \"JMPBUF_T\" type as created by the\n\tcompiler.\n\nFrom-SVN: r127550", "tree": {"sha": "0989d9ca5b50bc66dbae68eaaf4a0c7ab927a05e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0989d9ca5b50bc66dbae68eaaf4a0c7ab927a05e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dae2b8eaa891aa280bb99103045bde802af66086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae2b8eaa891aa280bb99103045bde802af66086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae2b8eaa891aa280bb99103045bde802af66086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae2b8eaa891aa280bb99103045bde802af66086/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ace980d5d8b6443b4e0d8d5b9cdcd34083c5e09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace980d5d8b6443b4e0d8d5b9cdcd34083c5e09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace980d5d8b6443b4e0d8d5b9cdcd34083c5e09b"}], "stats": {"total": 114, "additions": 101, "deletions": 13}, "files": [{"sha": "c1387f21062bef66edf6e753bd01f84296d77ba6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 52, "deletions": 6, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=dae2b8eaa891aa280bb99103045bde802af66086", "patch": "@@ -37,6 +37,7 @@ with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n+with Fname;    use Fname;\n with Freeze;   use Freeze;\n with Itypes;   use Itypes;\n with Lib;      use Lib;\n@@ -1546,16 +1547,21 @@ package body Sem_Res is\n    -------------\n \n    procedure Resolve (N : Node_Id; Typ : Entity_Id) is\n+      Ambiguous : Boolean   := False;\n+      Ctx_Type  : Entity_Id := Typ;\n+      Expr_Type : Entity_Id := Empty; -- prevent junk warning\n+      Err_Type  : Entity_Id := Empty;\n+      Found     : Boolean   := False;\n+      From_Lib  : Boolean;\n       I         : Interp_Index;\n-      I1        : Interp_Index := 0; -- prevent junk warning\n+      I1        : Interp_Index := 0;  -- prevent junk warning\n       It        : Interp;\n       It1       : Interp;\n-      Found     : Boolean   := False;\n       Seen      : Entity_Id := Empty; -- prevent junk warning\n-      Ctx_Type  : Entity_Id := Typ;\n-      Expr_Type : Entity_Id := Empty; -- prevent junk warning\n-      Err_Type  : Entity_Id := Empty;\n-      Ambiguous : Boolean   := False;\n+\n+      function Comes_From_Predefined_Lib_Unit (Nod : Node_Id) return Boolean;\n+      --  Determine whether a node comes from a predefined library unit or\n+      --  Standard.\n \n       procedure Patch_Up_Value (N : Node_Id; Typ : Entity_Id);\n       --  Try and fix up a literal so that it matches its expected type. New\n@@ -1564,6 +1570,18 @@ package body Sem_Res is\n       procedure Resolution_Failed;\n       --  Called when attempt at resolving current expression fails\n \n+      ------------------------------------\n+      -- Comes_From_Predefined_Lib_Unit --\n+      -------------------------------------\n+\n+      function Comes_From_Predefined_Lib_Unit (Nod : Node_Id) return Boolean is\n+      begin\n+         return\n+           Sloc (Nod) = Standard_Location\n+             or else Is_Predefined_File_Name (Unit_File_Name (\n+                       Get_Source_Unit (Sloc (Nod))));\n+      end Comes_From_Predefined_Lib_Unit;\n+\n       --------------------\n       -- Patch_Up_Value --\n       --------------------\n@@ -1660,6 +1678,8 @@ package body Sem_Res is\n            (\"prefix must statically denote a non-remote subprogram\", N);\n       end if;\n \n+      From_Lib := Comes_From_Predefined_Lib_Unit (N);\n+\n       --  If the context is a Remote_Access_To_Subprogram, access attributes\n       --  must be resolved with the corresponding fat pointer. There is no need\n       --  to check for the attribute name since the return type of an\n@@ -1817,6 +1837,16 @@ package body Sem_Res is\n                --  some more obscure cases are handled in Disambiguate.\n \n                else\n+                  --  If the current statement is part of a predefined library\n+                  --  unit, then all interpretations which come from user level\n+                  --  packages should not be considered.\n+\n+                  if From_Lib\n+                    and then not Comes_From_Predefined_Lib_Unit (It.Nam)\n+                  then\n+                     goto Continue;\n+                  end if;\n+\n                   Error_Msg_Sloc := Sloc (Seen);\n                   It1 := Disambiguate (N, I1, I, Typ);\n \n@@ -6335,6 +6365,22 @@ package body Sem_Res is\n    --  Start of processing for Resolve_Op_Concat\n \n    begin\n+      --  The parser folds an enormous sequence of concatenations of string\n+      --  literals into \"\" & \"...\", where the Is_Folded_In_Parser flag is set\n+      --  in the right. If the expression resolves to a predefined \"&\"\n+      --  operator, all is well. Otherwise, the parser's folding is wrong, so\n+      --  we give an error. See P_Simple_Expression in Par.Ch4.\n+\n+      if Nkind (Op2) = N_String_Literal\n+        and then Is_Folded_In_Parser (Op2)\n+        and then Ekind (Entity (N)) = E_Function\n+      then\n+         pragma Assert (Nkind (Op1) = N_String_Literal  --  should be \"\"\n+               and then String_Length (Strval (Op1)) = 0);\n+         Error_Msg_N (\"too many user-defined concatenations\", N);\n+         return;\n+      end if;\n+\n       Set_Etype (N, Btyp);\n \n       if Is_Limited_Composite (Btyp) then"}, {"sha": "f664f92fc4dc0a52f24c7764d088b6d3ec3b710f", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=dae2b8eaa891aa280bb99103045bde802af66086", "patch": "@@ -1590,6 +1590,14 @@ package body Sinfo is\n       return Flag8 (N);\n    end Is_Entry_Barrier_Function;\n \n+   function Is_Folded_In_Parser\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_String_Literal);\n+      return Flag4 (N);\n+   end Is_Folded_In_Parser;\n+\n    function Is_In_Discriminant_Check\n       (N : Node_Id) return Boolean is\n    begin\n@@ -4289,6 +4297,14 @@ package body Sinfo is\n       Set_Flag8 (N, Val);\n    end Set_Is_Entry_Barrier_Function;\n \n+   procedure Set_Is_Folded_In_Parser\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_String_Literal);\n+      Set_Flag4 (N, Val);\n+   end Set_Is_Folded_In_Parser;\n+\n    procedure Set_Is_In_Discriminant_Check\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "65009c6796e961bbad771dc5352093c4122dee1d", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=dae2b8eaa891aa280bb99103045bde802af66086", "patch": "@@ -1202,11 +1202,6 @@ package Sinfo is\n    --    conditions holds, and the flag is set, then the division or\n    --    multiplication can be (and is) converted to a shift.\n \n-   --  Is_Overloaded (Flag5-Sem)\n-   --    A flag present in all expression nodes. Used temporarily during\n-   --    overloading determination. The setting of this flag is not relevant\n-   --    once overloading analysis is complete.\n-\n    --  Is_Protected_Subprogram_Body (Flag7-Sem)\n    --    A flag set in a Subprogram_Body block to indicate that it is the\n    --    implemenation of a protected subprogram. Such a body needs cleanup\n@@ -1820,11 +1815,19 @@ package Sinfo is\n \n       --  A STRING_ELEMENT is either a pair of quotation marks (\"), or a\n       --  single GRAPHIC_CHARACTER other than a quotation mark.\n+      --\n+      --  Is_Folded_In_Parser is True if the parser created this literal by\n+      --  folding a sequence of \"&\" operators. For example, if the source code\n+      --  says \"aaa\" & \"bbb\" & \"ccc\", and the produces \"aaabbbccc\", the flag is\n+      --  set. This flag is needed because the parser doesn't know about\n+      --  visibility, so the folded result might be wrong, and semantic\n+      --  analysis needs to check for that.\n \n       --  N_String_Literal\n       --  Sloc points to literal\n       --  Strval (Str3) contains Id of string value\n       --  Has_Wide_Character (Flag11-Sem)\n+      --  Is_Folded_In_Parser (Flag4)\n       --  plus fields for expression\n \n       ------------------\n@@ -7870,6 +7873,9 @@ package Sinfo is\n    function Is_Entry_Barrier_Function\n      (N : Node_Id) return Boolean;    -- Flag8\n \n+   function Is_Folded_In_Parser\n+     (N : Node_Id) return Boolean;    -- Flag4\n+\n    function Is_In_Discriminant_Check\n      (N : Node_Id) return Boolean;    -- Flag11\n \n@@ -8725,6 +8731,9 @@ package Sinfo is\n    procedure Set_Is_Entry_Barrier_Function\n      (N : Node_Id; Val : Boolean := True);    -- Flag8\n \n+   procedure Set_Is_Folded_In_Parser\n+     (N : Node_Id; Val : Boolean := True);    -- Flag4\n+\n    procedure Set_Is_In_Discriminant_Check\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n@@ -10817,6 +10826,7 @@ package Sinfo is\n    pragma Inline (Is_Controlling_Actual);\n    pragma Inline (Is_Dynamic_Coextension);\n    pragma Inline (Is_Entry_Barrier_Function);\n+   pragma Inline (Is_Folded_In_Parser);\n    pragma Inline (Is_In_Discriminant_Check);\n    pragma Inline (Is_Machine_Number);\n    pragma Inline (Is_Null_Loop);\n@@ -11098,6 +11108,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Controlling_Actual);\n    pragma Inline (Set_Is_Dynamic_Coextension);\n    pragma Inline (Set_Is_Entry_Barrier_Function);\n+   pragma Inline (Set_Is_Folded_In_Parser);\n    pragma Inline (Set_Is_In_Discriminant_Check);\n    pragma Inline (Set_Is_Machine_Number);\n    pragma Inline (Set_Is_Null_Loop);"}, {"sha": "f6ba98c25f6646b8ac0d20a891d4f98a47163564", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=dae2b8eaa891aa280bb99103045bde802af66086", "patch": "@@ -101,6 +101,11 @@ DEF_VEC_ALLOC_P(parm_attr,gc);\n \n struct language_function GTY(())\n {\n+/* We should avoid allocating more than ALLOCA_THRESHOLD bytes via alloca, for\n+   fear of running out of stack space. If we need more, we use xmalloc/free\n+   instead. */\n+#define ALLOCA_THRESHOLD 1000\n+\n   VEC(parm_attr,gc) *parm_attr_cache;\n };\n \n@@ -2508,6 +2513,8 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n \t\t\t\t\t  build_call_0_expr (get_jmpbuf_decl),\n \t\t\t\t\t  false, false, false, false, NULL,\n \t\t\t\t\t  gnat_node);\n+      DECL_ARTIFICIAL (gnu_jmpsave_decl) = 1;\n+\n       /* The __builtin_setjmp receivers will immediately reinstall it.  Now\n \t because of the unstructured form of EH used by setjmp_longjmp, there\n \t might be forward edges going to __builtin_setjmp receivers on which\n@@ -2517,6 +2524,7 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n \t\t\t\t\t NULL_TREE, jmpbuf_type,\n \t\t\t\t\t NULL_TREE, false, false, false, false,\n \t\t\t\t\t NULL, gnat_node);\n+      DECL_ARTIFICIAL (gnu_jmpbuf_decl) = 1;\n \n       set_block_jmpbuf_decl (gnu_jmpbuf_decl);\n \n@@ -3118,8 +3126,12 @@ gnat_to_gnu (Node_Id gnat_node)\n \t{\n \t  String_Id gnat_string = Strval (gnat_node);\n \t  int length = String_Length (gnat_string);\n-\t  char *string = (char *) alloca (length + 1);\n \t  int i;\n+\t  char *string;\n+\t  if (length >= ALLOCA_THRESHOLD)\n+             string = xmalloc (length + 1); /* in case of large strings */\n+          else\n+             string = (char *) alloca (length + 1);\n \n \t  /* Build the string with the characters in the literal.  Note\n \t     that Ada strings are 1-origin.  */\n@@ -3135,6 +3147,9 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  /* Strings in GCC don't normally have types, but we want\n \t     this to not be converted to the array type.  */\n \t  TREE_TYPE (gnu_result) = gnu_result_type;\n+\n+\t  if (length >= ALLOCA_THRESHOLD) /* free if heap-allocated */\n+             free (string);\n \t}\n       else\n \t{"}, {"sha": "86e80f1335d4d8024ac88081ff2083d565841f33", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae2b8eaa891aa280bb99103045bde802af66086/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=dae2b8eaa891aa280bb99103045bde802af66086", "patch": "@@ -592,7 +592,7 @@ init_gigi_decls (tree long_long_float_type, tree exception_type)\n     = build_array_type (gnat_type_for_mode (Pmode, 0),\n \t\t\tbuild_index_type (build_int_cst (NULL_TREE, 5)));\n   create_type_decl (get_identifier (\"JMPBUF_T\"), jmpbuf_type, NULL,\n-\t\t    false, true, Empty);\n+\t\t    true, true, Empty);\n   jmpbuf_ptr_type = build_pointer_type (jmpbuf_type);\n \n   /* Functions to get and set the jumpbuf pointer for the current thread.  */"}]}