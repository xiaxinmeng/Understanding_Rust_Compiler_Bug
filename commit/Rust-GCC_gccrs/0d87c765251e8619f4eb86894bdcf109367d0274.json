{"sha": "0d87c765251e8619f4eb86894bdcf109367d0274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4N2M3NjUyNTFlODYxOWY0ZWI4Njg5NGJkY2YxMDkzNjdkMDI3NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-13T09:05:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-13T09:05:31Z"}, "message": "re PR inline-asm/6806 (gcc 3.0.4 ignoring clobbered registers in inline asm with -O1 or higher on i386)\n\n        PR inline-asm/6806\n        * cselib.c (cselib_invalidate_rtx): Export.  Remove unused args.\n        (cselib_invalidate_rtx_note_stores): New.\n        (cselib_record_sets, cselib_process_insn): Update to match.\n        * cselib.h (cselib_invalidate_rtx): Declare.\n        * postreload.c (reload_cse_simplify): Invalidate asm clobbers.\n\nFrom-SVN: r87432", "tree": {"sha": "c07f98b7d57da963ba6c6d9edd7cb156910bc1e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c07f98b7d57da963ba6c6d9edd7cb156910bc1e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d87c765251e8619f4eb86894bdcf109367d0274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d87c765251e8619f4eb86894bdcf109367d0274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d87c765251e8619f4eb86894bdcf109367d0274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d87c765251e8619f4eb86894bdcf109367d0274/comments", "author": null, "committer": null, "parents": [{"sha": "ddef210a8919486d2d9f9b65c914435a39b21060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddef210a8919486d2d9f9b65c914435a39b21060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddef210a8919486d2d9f9b65c914435a39b21060"}], "stats": {"total": 84, "additions": 73, "deletions": 11}, "files": [{"sha": "6f63d50fd739beb34a0dc48d705ce844d65fb767", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d87c765251e8619f4eb86894bdcf109367d0274", "patch": "@@ -1,3 +1,12 @@\n+2004-09-13  Richard Henderson  <rth@redhat.com>\n+ \n+        PR inline-asm/6806\n+        * cselib.c (cselib_invalidate_rtx): Export.  Remove unused args.\n+        (cselib_invalidate_rtx_note_stores): New.\n+        (cselib_record_sets, cselib_process_insn): Update to match.\n+        * cselib.h (cselib_invalidate_rtx): Declare.\n+        * postreload.c (reload_cse_simplify): Invalidate asm clobbers.\n+\n 2004-09-13  Richard Henderson  <rth@redhat.com>\n \n \tPR tree-opt/10528"}, {"sha": "e58f2541d4d4d5b4a985aabb5ae4bbf6766f762d", "filename": "gcc/cselib.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=0d87c765251e8619f4eb86894bdcf109367d0274", "patch": "@@ -61,7 +61,6 @@ static void add_mem_for_addr (cselib_val *, cselib_val *, rtx);\n static cselib_val *cselib_lookup_mem (rtx, int);\n static void cselib_invalidate_regno (unsigned int, enum machine_mode);\n static void cselib_invalidate_mem (rtx);\n-static void cselib_invalidate_rtx (rtx, rtx, void *);\n static void cselib_record_set (rtx, cselib_val *, cselib_val *);\n static void cselib_record_sets (rtx);\n \n@@ -1141,13 +1140,10 @@ cselib_invalidate_mem (rtx mem_rtx)\n   *vp = &dummy_val;\n }\n \n-/* Invalidate DEST, which is being assigned to or clobbered.  The second and\n-   the third parameter exist so that this function can be passed to\n-   note_stores; they are ignored.  */\n+/* Invalidate DEST, which is being assigned to or clobbered.  */\n \n-static void\n-cselib_invalidate_rtx (rtx dest, rtx ignore ATTRIBUTE_UNUSED,\n-\t\t       void *data ATTRIBUTE_UNUSED)\n+void\n+cselib_invalidate_rtx (rtx dest)\n {\n   while (GET_CODE (dest) == STRICT_LOW_PART || GET_CODE (dest) == SIGN_EXTRACT\n \t || GET_CODE (dest) == ZERO_EXTRACT || GET_CODE (dest) == SUBREG)\n@@ -1163,7 +1159,16 @@ cselib_invalidate_rtx (rtx dest, rtx ignore ATTRIBUTE_UNUSED,\n      invalidate the stack pointer correctly.  Note that invalidating\n      the stack pointer is different from invalidating DEST.  */\n   if (push_operand (dest, GET_MODE (dest)))\n-    cselib_invalidate_rtx (stack_pointer_rtx, NULL_RTX, NULL);\n+    cselib_invalidate_rtx (stack_pointer_rtx);\n+}\n+\n+/* A wrapper for cselib_invalidate_rtx to be called via note_stores.  */\n+\n+static void\n+cselib_invalidate_rtx_note_stores (rtx dest, rtx ignore ATTRIBUTE_UNUSED,\n+\t\t\t\t   void *data ATTRIBUTE_UNUSED)\n+{\n+  cselib_invalidate_rtx (dest);\n }\n \n /* Record the result of a SET instruction.  DEST is being set; the source\n@@ -1296,7 +1301,7 @@ cselib_record_sets (rtx insn)\n   /* Invalidate all locations written by this insn.  Note that the elts we\n      looked up in the previous loop aren't affected, just some of their\n      locations may go away.  */\n-  note_stores (body, cselib_invalidate_rtx, NULL);\n+  note_stores (body, cselib_invalidate_rtx_note_stores, NULL);\n \n   /* If this is an asm, look for duplicate sets.  This can happen when the\n      user uses the same value as an output multiple times.  This is valid\n@@ -1384,15 +1389,15 @@ cselib_process_insn (rtx insn)\n      unlikely to help.  */\n   for (x = REG_NOTES (insn); x; x = XEXP (x, 1))\n     if (REG_NOTE_KIND (x) == REG_INC)\n-      cselib_invalidate_rtx (XEXP (x, 0), NULL_RTX, NULL);\n+      cselib_invalidate_rtx (XEXP (x, 0));\n #endif\n \n   /* Look for any CLOBBERs in CALL_INSN_FUNCTION_USAGE, but only\n      after we have processed the insn.  */\n   if (CALL_P (insn))\n     for (x = CALL_INSN_FUNCTION_USAGE (insn); x; x = XEXP (x, 1))\n       if (GET_CODE (XEXP (x, 0)) == CLOBBER)\n-\tcselib_invalidate_rtx (XEXP (XEXP (x, 0), 0), NULL_RTX, NULL);\n+\tcselib_invalidate_rtx (XEXP (XEXP (x, 0), 0));\n \n   cselib_current_insn = 0;\n "}, {"sha": "1aff2514f303bba67f470a611a600ec80c879dfe", "filename": "gcc/cselib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2Fcselib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2Fcselib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.h?ref=0d87c765251e8619f4eb86894bdcf109367d0274", "patch": "@@ -70,3 +70,4 @@ extern enum machine_mode cselib_reg_set_mode (rtx);\n extern int rtx_equal_for_cselib_p (rtx, rtx);\n extern int references_value_p (rtx, int);\n extern rtx cselib_subst_to_values (rtx);\n+extern void cselib_invalidate_rtx (rtx);"}, {"sha": "2ff95b1a4a71c6d59993d79f7f3bd8158b818f8a", "filename": "gcc/postreload.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=0d87c765251e8619f4eb86894bdcf109367d0274", "patch": "@@ -118,6 +118,19 @@ reload_cse_simplify (rtx insn, rtx testreg)\n       int count = 0;\n       rtx value = NULL_RTX;\n \n+      /* Registers mentioned in the clobber list for an asm cannot be reused\n+\t within the body of the asm.  Invalidate those registers now so that\n+\t we don't try to substitute values for them.  */\n+      if (asm_noperands (body) >= 0)\n+\t{\n+\t  for (i = XVECLEN (body, 0) - 1; i >= 0; --i)\n+\t    {\n+\t      rtx part = XVECEXP (body, 0, i);\n+\t      if (GET_CODE (part) == CLOBBER && REG_P (XEXP (part, 0)))\n+\t\tcselib_invalidate_rtx (XEXP (part, 0));\n+\t    }\n+\t}\n+\n       /* If every action in a PARALLEL is a noop, we can delete\n \t the entire PARALLEL.  */\n       for (i = XVECLEN (body, 0) - 1; i >= 0; --i)"}, {"sha": "f60f7d6378a9b99afada10fe94b4ae3a52153aa9", "filename": "gcc/testsuite/gcc.dg/i386-asm-3.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-asm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87c765251e8619f4eb86894bdcf109367d0274/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-asm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-asm-3.c?ref=0d87c765251e8619f4eb86894bdcf109367d0274", "patch": "@@ -0,0 +1,34 @@\n+/* PR inline-asm/6806 */\n+/* { dg-do run { target i?86-*-* } } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+volatile int out = 1;\n+volatile int a = 2;\n+volatile int b = 4;\n+volatile int c = 8;\n+volatile int d = 16;\n+volatile int e = 32;\n+volatile int f = 64;\n+\n+int\n+main ()\n+{\n+  asm volatile (\"xorl %%eax, %%eax\t\\n\\t\"\n+\t\t\"xorl %%esi, %%esi\t\\n\\t\"\n+\t\t\"addl %1, %0\t\t\\n\\t\"\n+\t\t\"addl %2, %0\t\t\\n\\t\"\n+\t\t\"addl %3, %0\t\t\\n\\t\"\n+\t\t\"addl %4, %0\t\t\\n\\t\"\n+\t\t\"addl %5, %0\t\t\\n\\t\"\n+\t\t\"addl %6, %0\"\n+\t\t: \"+r\" (out)\n+\t\t: \"r\" (a), \"r\" (b), \"r\" (c), \"g\" (d), \"g\" (e), \"g\" (f)\n+\t\t: \"%eax\", \"%esi\");\n+\n+  if (out != 127)\n+    abort ();\n+\n+  return 0;\n+}"}]}