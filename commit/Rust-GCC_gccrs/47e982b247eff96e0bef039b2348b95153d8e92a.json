{"sha": "47e982b247eff96e0bef039b2348b95153d8e92a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlOTgyYjI0N2VmZjk2ZTBiZWYwMzliMjM0OGI5NTE1M2Q4ZTkyYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-04-18T01:06:05Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-04-18T01:06:05Z"}, "message": "map_operators.cc: Add dg-excess-errors.\n\n\n2001-04-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/23_containers/map_operators.cc: Add dg-excess-errors.\n\t* testsuite/23_containers/set_operators.cc: Same.\n\n\t* include/bits/c++config: Add _GLIBCPP_CONCEPT_CHECKS. Disable by\n\tdefault.\n\t(__GLIBCPP__): Bump from value of last release.\n\t* include/bits/concept_check.h: Default to off, edit comments.\n\t* src/stl-inst.cc: Use _GLIBCPP_CONCEPT_CHECKS.\n\t* src/Makefile.am (AM_CXXFLAGS): Remove _GLIBCPP_NO_CONCEPT_CHECKS.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r41397", "tree": {"sha": "255639afa7ef7aec6e20edbe4daef731cb122f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/255639afa7ef7aec6e20edbe4daef731cb122f1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47e982b247eff96e0bef039b2348b95153d8e92a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e982b247eff96e0bef039b2348b95153d8e92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47e982b247eff96e0bef039b2348b95153d8e92a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e982b247eff96e0bef039b2348b95153d8e92a/comments", "author": null, "committer": null, "parents": [{"sha": "7848c238063060437df850020d3c041b93c22ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7848c238063060437df850020d3c041b93c22ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7848c238063060437df850020d3c041b93c22ecc"}], "stats": {"total": 1606, "additions": 804, "deletions": 802}, "files": [{"sha": "d71e36c66ff6c816fd5ef66b873e9caf17102ac8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=47e982b247eff96e0bef039b2348b95153d8e92a", "patch": "@@ -1,3 +1,16 @@\n+2001-04-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/23_containers/map_operators.cc: Add dg-excess-errors.\n+\t* testsuite/23_containers/set_operators.cc: Same.\n+\n+\t* include/bits/c++config: Add _GLIBCPP_CONCEPT_CHECKS. Disable by\n+\tdefault.\n+\t(__GLIBCPP__): Bump from value of last release.\n+\t* include/bits/concept_check.h: Default to off, edit comments.\n+\t* src/stl-inst.cc: Use _GLIBCPP_CONCEPT_CHECKS.\n+\t* src/Makefile.am (AM_CXXFLAGS): Remove _GLIBCPP_NO_CONCEPT_CHECKS. \n+\t* src/Makefile.in: Regenerate.\n+\t\n 2001-04-14  Martin Reinecke <martin@MPA-Garching.MPG.DE>\n \n \t* include/bits/boost_concept_check.h(_Mutable_ContainerConcept):"}, {"sha": "97b402acf2185dbcc013acee9f5f3c9d61d24fc0", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 767, "deletions": 762, "changes": 1529, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=47e982b247eff96e0bef039b2348b95153d8e92a"}, {"sha": "ad72c1fdc3c90f0e17b02e8027254225817f40a9", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=47e982b247eff96e0bef039b2348b95153d8e92a", "patch": "@@ -34,7 +34,7 @@\n #include <bits/os_defines.h>\n \n // The current version of the C++ library in compressed ISO date format.\n-#define __GLIBCPP__ 20010406\n+#define __GLIBCPP__ 20010417\n \n // This is necessary until GCC supports separate template\n // compilation.  \n@@ -55,6 +55,9 @@\n // Use corrected code from the committee library group's issues list.\n #define _GLIBCPP_RESOLVE_LIB_DEFECTS 1\n \n+// Enable concept checking code from the boost libraries.\n+//#define _GLIBCPP_CONCEPT_CHECKS 1\n+\n // From SGI's stl_config.h; generic settings and user hooks (_NOTHREADS).\n #if defined(_PTHREADS) && !defined(_NOTHREADS)\n #    define __STL_PTHREADS\n@@ -63,9 +66,6 @@\n #    define __STL_UITHREADS\n #endif\n \n-// Concept-checking hooks and related config are now in bits/concept_check.h.\n-\n-\n // This is also a user hook, but via -f[no-]exceptions, not direct #defines.\n #ifdef __EXCEPTIONS\n #  define __STL_USE_EXCEPTIONS\n@@ -142,5 +142,3 @@\n \n \n // End of prewritten config; the discovered settings follow.\n-\n-"}, {"sha": "2a02bd8c8b31d744175910f67234d129f8f7c6b7", "filename": "libstdc++-v3/include/bits/concept_check.h", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h?ref=47e982b247eff96e0bef039b2348b95153d8e92a", "patch": "@@ -31,29 +31,18 @@\n #define _GLIBCPP_CONCEPT_CHECK 1\n \n #pragma GCC system_header\n-#include <bits/c++config.h>\n-\n \n-// Concept-checking code is on by default unless users turn it off via any\n-// of these methods:\n-//  -  _GLIBCPP_NO_CONCEPT_CHECKS is a user hook; defining it disables the\n-//     checks.\n-//  -  _STL_NO_CONCEPT_CHECKS is a user hook from the old STL implementation\n-//     specifically for this purpose; defining it disables the checks, in\n-//     case the user is expecting the old version.\n-//  -  NDEBUG is the usual macro that kills assert().  Defining it will also\n-//     disable the checks, by the reasoning that if the user doesn't want\n-//     any runtime assertion code, then no space penalty for the checks\n-//     is desired either.\n+#include <bits/c++config.h>\n \n // All places in libstdc++-v3 where these are used, or /might/ be used, or\n // don't need to be used, or perhaps /should/ be used, are commented with\n // \"concept requirements\" (and maybe some more text).  So grep like crazy\n // if you're looking for additional places to use these.\n \n+// Concept-checking code is off by default unless users turn it on via\n+// configure options or editing c++config.h.\n \n-#if defined(_GLIBCPP_NO_CONCEPT_CHECKS) || defined(_STL_NO_CONCEPT_CHECKS) \\\n-    || defined(NDEBUG)\n+#ifndef _GLIBCPP_CONCEPT_CHECKS\n \n #define __glibcpp_function_requires(...)\n #define __glibcpp_class_requires(_a,_b)\n@@ -90,4 +79,3 @@\n #endif // enable/disable\n \n #endif // _GLIBCPP_CONCEPT_CHECK\n-"}, {"sha": "5cd1593b81555ec189b0b17a02ad1ba998e6cfe6", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=47e982b247eff96e0bef039b2348b95153d8e92a", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.82 2001/04/06 06:08:17 bkoz Exp $\n+## $Id: Makefile.am,v 1.83 2001/04/11 18:52:31 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -306,7 +306,7 @@ tmp-libstdc++.INC: Makefile\n # the concept-checking symbols.  So we must disable the checks while\n # actually building the library.\n AM_CXXFLAGS = \\\n-\t-fno-implicit-templates -D_GLIBCPP_NO_CONCEPT_CHECKS \\\n+\t-fno-implicit-templates \\\n \t$(LIBSUPCXX_CXXFLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\"}, {"sha": "d232ad0177c2829f402cb92fa5474721e15565cb", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=47e982b247eff96e0bef039b2348b95153d8e92a", "patch": "@@ -198,7 +198,7 @@ c_incdir = @C_INCLUDE_DIR@\n # The no-implicit-templates flag will generate unresolved references to\n # the concept-checking symbols.  So we must disable the checks while\n # actually building the library.\n-AM_CXXFLAGS =  \t-fno-implicit-templates -D_GLIBCPP_NO_CONCEPT_CHECKS \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes"}, {"sha": "2dfc2537804619a51637ba68b2d3481726b26db4", "filename": "libstdc++-v3/src/stl-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc?ref=47e982b247eff96e0bef039b2348b95153d8e92a", "patch": "@@ -50,7 +50,7 @@ namespace std\n     vector<unsigned int>::\n     _M_insert_aux(vector<unsigned int>::iterator, unsigned int const &);\n \n-#ifdef __STL_USE_CONCEPT_CHECKS\n+#ifdef _GLIBCPP_CONCEPT_CHECKS\n   template\n     void __sink_unused_warning<unsigned int>(unsigned int);\n "}, {"sha": "6df8a2b7c0125e8d9e7350a16d15e31e2c8093d7", "filename": "libstdc++-v3/testsuite/23_containers/map_operators.cc", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap_operators.cc?ref=47e982b247eff96e0bef039b2348b95153d8e92a", "patch": "@@ -24,13 +24,10 @@\n #include <string>\n #include <iostream>\n \n-// map and set\n-// libstdc++/86: map & set iterator comparisons are not type-safe\n-// XXX this is XFAIL for the time being, ie this should not compile\n-\n-// Just try to compile\n // { dg-do compile }\n+// { dg-excess-errors \"\" }\n \n+// libstdc++/86: map & set iterator comparisons are not type-safe\n void test01()\n {\n   bool test = true;\n@@ -43,8 +40,8 @@ void test01()\n   std::map<unsigned, int>::iterator itr(mapByIndex.begin());\n \n   // NB: notice, it's not mapByIndex!!\n-  test &= itr != mapByName.end();  // { dg-error \".*\" \"\" { xfail *-*-* } }\n-  test &= itr == mapByName.end();  // { dg-error \".*\" \"\" { xfail *-*-* } }\n+  test &= itr != mapByName.end(); // { dg-error \"match\" \"\" { xfail *-*-* } }\n+  test &= itr == mapByName.end(); // { dg-error \"match\" \"\" { xfail *-*-* } }\n }\n \n // http://gcc.gnu.org/ml/libstdc++/2000-11/msg00093.html"}, {"sha": "5bf9dba18f9517cb2619a67a23b203204be92258", "filename": "libstdc++-v3/testsuite/23_containers/set_operators.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e982b247eff96e0bef039b2348b95153d8e92a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset_operators.cc?ref=47e982b247eff96e0bef039b2348b95153d8e92a", "patch": "@@ -22,12 +22,11 @@\n \n #include <set>\n #include <string>\n-\n-// map and set\n-// libstdc++/86: map & set iterator comparisons are not type-safe\n-\n+make \n // { dg-do compile }\n+// { dg-excess-errors \"\" }\n \n+// libstdc++/86: map & set iterator comparisons are not type-safe\n int main(void)\n {\n   bool test = true;\n@@ -37,9 +36,11 @@ int main(void)\n   \n   std::set<unsigned int>::iterator itr(setByIndex.begin());\n   \n-  // NB: it's not setByIndex!!\n-  test &= itr != setByName.end();  // { dg-error \".*\" \"\" { xfail *-*-* } }\n-  test &= itr == setByName.end();  // { dg-error \".*\" \"\" { xfail *-*-* } }\n \n+  // NB: it's not setByIndex!!\n+  test &= itr != setByName.end(); \n+  // { dg-error \"no match for\" \"\" { xfail *-*-* } 41 }\n+  test &= itr == setByName.end(); \n+  // { dg-error \"no match for\" \"\" { xfail *-*-* } 43 }\n   return 0;\n }"}]}