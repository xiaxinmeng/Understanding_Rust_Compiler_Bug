{"sha": "5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM0NWFjNWExMTBhNWZjYWZhYTliZGYzMTE2YjgyNTJkZTJkOTZjNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-05-08T17:32:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-05-08T17:32:30Z"}, "message": "[C++ PATCH] Kill DECL_SAVED_FUNCTION_DATA\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-05/msg00377.html\n\tKill DECL_SAVED_FUNCTION_DATA .\n\t* cp-tree.h (language_function): Remove x_auto_return_pattern.\n\t(current_function_auto_return_pattern): Delete.\n\t(lang_decl_fn): Replace saved_language_function with\n\tsaved_auto_return type.\n\t(DECL_SAVED_FUNCTION_DATA): Delete.\n\t(DECL_SAVED_AUTO_RETURN_TYPE): New.\n\t(FNDECL_USED_AUTO): Correct documentation.\n\t* decl.c (duplicate_decls): Adjust AUTO return handling.\n\t(start_preparsed_function): Replace\n\tcurrent_function_auto_return_pattern with\n\tDECL_SAVED_AUTO_RETURN_TYPE.  Remove DECL_SAVED_FUNCTION_DATA\n\tzapping.\n\t(finish_function): Likewise.\n\t(save_function_data): Delete.\n\t(fndecl_declared_return_type): Reimplement.\n\t* mangle.c (write_unqualified_name): Use DECL_SAVED_AUTO_RETURN_TYPE.\n\t* method.c (make_thunk, make_alias_for): Likewise.\n\t* parser.c (cp_parser_jump_statement): Likewise.\n\t* pt.c (do_auto_deduction): Likewise.\n\t* typeck.c (check_return_expr): Likewise.\n\nFrom-SVN: r271015", "tree": {"sha": "6a43295a10bddfa65440fab78cda3df26d5d0389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a43295a10bddfa65440fab78cda3df26d5d0389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18922fbdbf2d2c2f85afcec51f079446888e02bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18922fbdbf2d2c2f85afcec51f079446888e02bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18922fbdbf2d2c2f85afcec51f079446888e02bd"}], "stats": {"total": 151, "additions": 61, "deletions": 90}, "files": [{"sha": "9469602c5f5ce5245231a8af67eba270472ae727", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "patch": "@@ -1,3 +1,27 @@\n+2019-05-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\tKill DECL_SAVED_FUNCTION_DATA .\n+\t* cp-tree.h (language_function): Remove x_auto_return_pattern.\n+\t(current_function_auto_return_pattern): Delete.\n+\t(lang_decl_fn): Replace saved_language_function with\n+\tsaved_auto_return type.\n+\t(DECL_SAVED_FUNCTION_DATA): Delete.\n+\t(DECL_SAVED_AUTO_RETURN_TYPE): New.\n+\t(FNDECL_USED_AUTO): Correct documentation.\n+\t* decl.c (duplicate_decls): Adjust AUTO return handling.\n+\t(start_preparsed_function): Replace\n+\tcurrent_function_auto_return_pattern with\n+\tDECL_SAVED_AUTO_RETURN_TYPE.  Remove DECL_SAVED_FUNCTION_DATA\n+\tzapping.\n+\t(finish_function): Likewise.\n+\t(save_function_data): Delete.\n+\t(fndecl_declared_return_type): Reimplement.\n+\t* mangle.c (write_unqualified_name): Use DECL_SAVED_AUTO_RETURN_TYPE.\n+\t* method.c (make_thunk, make_alias_for): Likewise.\n+\t* parser.c (cp_parser_jump_statement): Likewise.\n+\t* pt.c (do_auto_deduction): Likewise.\n+\t* typeck.c (check_return_expr): Likewise.\n+\n 2019-05-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/90171 - reorganize usual_deallocation_fn_p"}, {"sha": "f253857b02afedf859c9f669509c6c908e86f53c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "patch": "@@ -1813,7 +1813,6 @@ struct GTY(()) language_function {\n   tree x_in_charge_parm;\n   tree x_vtt_parm;\n   tree x_return_value;\n-  tree x_auto_return_pattern;\n \n   BOOL_BITFIELD returns_value : 1;\n   BOOL_BITFIELD returns_null : 1;\n@@ -1909,11 +1908,6 @@ struct GTY(()) language_function {\n #define current_function_return_value \\\n   (cp_function_chain->x_return_value)\n \n-/* A type involving 'auto' to be used for return type deduction.  */\n-\n-#define current_function_auto_return_pattern \\\n-  (cp_function_chain->x_auto_return_pattern)\n-\n /* In parser.c.  */\n extern tree cp_literal_operator_id (const char *);\n \n@@ -2654,8 +2648,7 @@ struct GTY(()) lang_decl_fn {\n   union lang_decl_u3\n   {\n     struct cp_token_cache * GTY ((tag (\"1\"))) pending_inline_info;\n-    struct language_function * GTY ((tag (\"0\")))\n-      saved_language_function;\n+    tree GTY ((tag (\"0\"))) saved_auto_return_type;\n   } GTY ((desc (\"%1.pending_inline_p\"))) u;\n \n };\n@@ -3700,10 +3693,10 @@ struct GTY(()) lang_decl {\n #define FOLD_EXPR_INIT(NODE) \\\n   TREE_OPERAND (BINARY_FOLD_EXPR_CHECK (NODE), 2)\n \n-/* In a FUNCTION_DECL, the saved language-specific per-function data.  */\n-#define DECL_SAVED_FUNCTION_DATA(NODE)\t\t\t\\\n+/* In a FUNCTION_DECL, the saved auto-return pattern.  */\n+#define DECL_SAVED_AUTO_RETURN_TYPE(NODE)\t\t\\\n   (LANG_DECL_FN_CHECK (FUNCTION_DECL_CHECK (NODE))\t\\\n-   ->u.saved_language_function)\n+   ->u.saved_auto_return_type)\n \n /* True if NODE is an implicit INDIRECT_REF from convert_from_reference.  */\n #define REFERENCE_REF_P(NODE)\t\t\t\t\\\n@@ -3934,7 +3927,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n /* True if NODE was declared with auto in its return type, but it has\n    started compilation and so the return type might have been changed by\n    return type deduction; its declared return type should be found in\n-   DECL_STRUCT_FUNCTION(NODE)->language->x_auto_return_pattern.  */\n+   DECL_SAVED_AUTO_RETURN_TYPE (NODE).   */\n #define FNDECL_USED_AUTO(NODE) \\\n   TREE_LANG_FLAG_2 (FUNCTION_DECL_CHECK (NODE))\n "}, {"sha": "7f19d4a0b383a5e524d78ec0970706fa957be004", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 64, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "patch": "@@ -80,7 +80,6 @@ static void maybe_deduce_size_from_array_init (tree, tree);\n static void layout_var_decl (tree);\n static tree check_initializer (tree, tree, int, vec<tree, va_gc> **);\n static void make_rtl_for_nonlocal_decl (tree, tree, const char *);\n-static void save_function_data (tree);\n static void copy_type_enum (tree , tree);\n static void check_function_type (tree, tree);\n static void finish_constructor_body (void);\n@@ -2480,9 +2479,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    }\n \t  else if (DECL_PENDING_INLINE_P (newdecl))\n \t    ;\n-\t  else if (DECL_SAVED_FUNCTION_DATA (newdecl) == NULL)\n-\t    DECL_SAVED_FUNCTION_DATA (newdecl)\n-\t      = DECL_SAVED_FUNCTION_DATA (olddecl);\n+\t  else if (DECL_SAVED_AUTO_RETURN_TYPE (newdecl) == NULL)\n+\t    DECL_SAVED_AUTO_RETURN_TYPE (newdecl)\n+\t      = DECL_SAVED_AUTO_RETURN_TYPE (olddecl);\n \n \t  DECL_DECLARED_INLINE_P (newdecl) |= DECL_DECLARED_INLINE_P (olddecl);\n \n@@ -15449,20 +15448,21 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n   current_binding_level = bl;\n \n+  /* If we are (erroneously) defining a function that we have already\n+     defined before, wipe out what we knew before.  */\n+  gcc_checking_assert (!DECL_PENDING_INLINE_P (decl1));\n+  FNDECL_USED_AUTO (decl1) = false;\n+  DECL_SAVED_AUTO_RETURN_TYPE (decl1) = NULL;\n+\n   if (!processing_template_decl && type_uses_auto (restype))\n     {\n       FNDECL_USED_AUTO (decl1) = true;\n-      current_function_auto_return_pattern = restype;\n+      DECL_SAVED_AUTO_RETURN_TYPE (decl1) = restype;\n     }\n \n   /* Start the statement-tree, start the tree now.  */\n   DECL_SAVED_TREE (decl1) = push_stmt_list ();\n \n-  /* If we are (erroneously) defining a function that we have already\n-     defined before, wipe out what we knew before.  */\n-  if (!DECL_PENDING_INLINE_P (decl1))\n-    DECL_SAVED_FUNCTION_DATA (decl1) = NULL;\n-\n   if (ctype && !doing_friend && !DECL_STATIC_FUNCTION_P (decl1))\n     {\n       /* We know that this was set up by `grokclassfn'.  We do not\n@@ -15753,31 +15753,6 @@ store_parm_decls (tree current_function_parms)\n }\n \n \f\n-/* We have finished doing semantic analysis on DECL, but have not yet\n-   generated RTL for its body.  Save away our current state, so that\n-   when we want to generate RTL later we know what to do.  */\n-\n-static void\n-save_function_data (tree decl)\n-{\n-  struct language_function *f;\n-\n-  /* Save the language-specific per-function data so that we can\n-     get it back when we really expand this function.  */\n-  gcc_assert (!DECL_PENDING_INLINE_P (decl));\n-\n-  /* Make a copy.  */\n-  f = ggc_alloc<language_function> ();\n-  memcpy (f, cp_function_chain, sizeof (struct language_function));\n-  DECL_SAVED_FUNCTION_DATA (decl) = f;\n-\n-  /* Clear out the bits we don't need.  */\n-  f->base.x_stmt_tree.x_cur_stmt_list = NULL;\n-  f->bindings = NULL;\n-  f->base.local_typedefs = NULL;\n-}\n-\n-\n /* Set the return value of the constructor (if present).  */\n \n static void\n@@ -16106,9 +16081,9 @@ finish_function (bool inline_p)\n      the return type is void.  But if the declared type is something like\n      auto*, this is an error.  */\n   if (!processing_template_decl && FNDECL_USED_AUTO (fndecl)\n-      && TREE_TYPE (fntype) == current_function_auto_return_pattern)\n+      && TREE_TYPE (fntype) == DECL_SAVED_AUTO_RETURN_TYPE (fndecl))\n     {\n-      if (is_auto (current_function_auto_return_pattern))\n+      if (is_auto (DECL_SAVED_AUTO_RETURN_TYPE (fndecl)))\n \t{\n \t  apply_deduced_return_type (fndecl, void_type_node);\n \t  fntype = TREE_TYPE (fndecl);\n@@ -16117,7 +16092,7 @@ finish_function (bool inline_p)\n \t       && !current_function_returns_null)\n \t{\n \t  error (\"no return statements in function returning %qT\",\n-\t\t current_function_auto_return_pattern);\n+\t\t DECL_SAVED_AUTO_RETURN_TYPE (fndecl));\n \t  inform (input_location, \"only plain %<auto%> return type can be \"\n \t\t  \"deduced to %<void%>\");\n \t}\n@@ -16180,10 +16155,6 @@ finish_function (bool inline_p)\n      to the FUNCTION_DECL node itself.  */\n   BLOCK_SUPERCONTEXT (DECL_INITIAL (fndecl)) = fndecl;\n \n-  /* Save away current state, if appropriate.  */\n-  if (!processing_template_decl)\n-    save_function_data (fndecl);\n-\n   /* Complain if there's just no return statement.  */\n   if (warn_return_type\n       && !VOID_TYPE_P (TREE_TYPE (fntype))\n@@ -16265,20 +16236,7 @@ finish_function (bool inline_p)\n \n   /* Genericize before inlining.  */\n   if (!processing_template_decl)\n-    {\n-      struct language_function *f = DECL_SAVED_FUNCTION_DATA (fndecl);\n-      cp_genericize (fndecl);\n-      /* Clear out the bits we don't need.  */\n-      f->x_current_class_ptr = NULL;\n-      f->x_current_class_ref = NULL;\n-      f->x_eh_spec_block = NULL;\n-      f->x_in_charge_parm = NULL;\n-      f->x_vtt_parm = NULL;\n-      f->x_return_value = NULL;\n-      f->bindings = NULL;\n-      f->extern_decl_map = NULL;\n-      f->infinite_loops = NULL;\n-    }\n+    cp_genericize (fndecl);\n \n   /* We're leaving the context of this function, so zap cfun.  It's still in\n      DECL_STRUCT_FUNCTION, and we'll restore it in tree_rest_of_compilation.  */\n@@ -16692,14 +16650,8 @@ fndecl_declared_return_type (tree fn)\n {\n   fn = STRIP_TEMPLATE (fn);\n   if (FNDECL_USED_AUTO (fn))\n-    {\n-      struct language_function *f = NULL;\n-      if (DECL_STRUCT_FUNCTION (fn))\n-\tf = DECL_STRUCT_FUNCTION (fn)->language;\n-      if (f == NULL)\n-\tf = DECL_SAVED_FUNCTION_DATA (fn);\n-      return f->x_auto_return_pattern;\n-    }\n+    return DECL_SAVED_AUTO_RETURN_TYPE (fn);\n+\n   return TREE_TYPE (TREE_TYPE (fn));\n }\n "}, {"sha": "4b2212349d68ed3df861ea2f5459e943e4e25843", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "patch": "@@ -1366,8 +1366,7 @@ write_unqualified_name (tree decl)\n \t      type = TREE_TYPE (fn_type);\n \t    }\n \t  else if (FNDECL_USED_AUTO (decl))\n-\t    type = (DECL_STRUCT_FUNCTION (decl)->language\n-\t\t    ->x_auto_return_pattern);\n+\t    type = DECL_SAVED_AUTO_RETURN_TYPE (decl);\n \t  else\n \t    type = DECL_CONV_FN_TYPE (decl);\n \t  write_conversion_operator_name (type);"}, {"sha": "9ebc99eb394668f3e09e5c9db7ed9d0de8a19336", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "patch": "@@ -118,7 +118,7 @@ make_thunk (tree function, bool this_adjusting,\n   DECL_INTERFACE_KNOWN (thunk) = 1;\n   DECL_NOT_REALLY_EXTERN (thunk) = 1;\n   DECL_COMDAT (thunk) = DECL_COMDAT (function);\n-  DECL_SAVED_FUNCTION_DATA (thunk) = NULL;\n+  DECL_SAVED_AUTO_RETURN_TYPE (thunk) = NULL;\n   /* The thunk itself is not a constructor or destructor, even if\n      the thing it is thunking to is.  */\n   DECL_CXX_DESTRUCTOR_P (thunk) = 0;\n@@ -206,7 +206,7 @@ make_alias_for (tree target, tree newid)\n   DECL_TEMPLATE_INSTANTIATED (alias) = 0;\n   if (TREE_CODE (alias) == FUNCTION_DECL)\n     {\n-      DECL_SAVED_FUNCTION_DATA (alias) = NULL;\n+      DECL_SAVED_AUTO_RETURN_TYPE (alias) = NULL;\n       DECL_CXX_DESTRUCTOR_P (alias) = 0;\n       DECL_CXX_CONSTRUCTOR_P (alias) = 0;\n       DECL_PENDING_INLINE_P (alias) = 0;"}, {"sha": "12beadf5096db0190cf152b90cfb6799aba0adf1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "patch": "@@ -12913,7 +12913,7 @@ cp_parser_jump_statement (cp_parser* parser)\n \t     expression.  */\n \t  expr = NULL_TREE;\n \t/* Build the return-statement.  */\n-\tif (current_function_auto_return_pattern && in_discarded_stmt)\n+\tif (FNDECL_USED_AUTO (current_function_decl) && in_discarded_stmt)\n \t  /* Don't deduce from a discarded return statement.  */;\n \telse\n \t  statement = finish_return_stmt (expr);"}, {"sha": "d6976e08690452da9b48cc5ce9f53271bf59ffaa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "patch": "@@ -27622,7 +27622,10 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t       emitted by now.  Also, having a mention to '<type error>'\n \t       in the diagnostic is not really useful to the user.  */\n \t    {\n-\t      if (cfun && auto_node == current_function_auto_return_pattern\n+\t      if (cfun\n+\t\t  && FNDECL_USED_AUTO (current_function_decl)\n+\t\t  && (auto_node\n+\t\t      == DECL_SAVED_AUTO_RETURN_TYPE (current_function_decl))\n \t\t  && LAMBDA_FUNCTION_P (current_function_decl))\n \t\terror (\"unable to deduce lambda return type from %qE\", init);\n \t      else"}, {"sha": "06f485a136b186069aeeb9630f966748a08a55f2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5345ac5a110a5fcafaa9bdf3116b8252de2d96c6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5345ac5a110a5fcafaa9bdf3116b8252de2d96c6", "patch": "@@ -9551,7 +9551,7 @@ check_return_expr (tree retval, bool *no_warning)\n       /* If one of the types might be void, we can't tell whether we're\n \t returning a value.  */\n       if ((WILDCARD_TYPE_P (TREE_TYPE (DECL_RESULT (current_function_decl)))\n-\t   && !current_function_auto_return_pattern)\n+\t   && !FNDECL_USED_AUTO (current_function_decl))\n \t  || (retval != NULL_TREE\n \t      && (TREE_TYPE (retval) == NULL_TREE\n \t\t  || WILDCARD_TYPE_P (TREE_TYPE (retval)))))\n@@ -9561,16 +9561,17 @@ check_return_expr (tree retval, bool *no_warning)\n   functype = TREE_TYPE (TREE_TYPE (current_function_decl));\n \n   /* Deduce auto return type from a return statement.  */\n-  if (current_function_auto_return_pattern)\n+  if (FNDECL_USED_AUTO (current_function_decl))\n     {\n+      tree pattern = DECL_SAVED_AUTO_RETURN_TYPE (current_function_decl);\n       tree auto_node;\n       tree type;\n \n-      if (!retval && !is_auto (current_function_auto_return_pattern))\n+      if (!retval && !is_auto (pattern))\n \t{\n \t  /* Give a helpful error message.  */\n \t  error (\"return-statement with no value, in function returning %qT\",\n-\t\t current_function_auto_return_pattern);\n+\t\t pattern);\n \t  inform (input_location, \"only plain %<auto%> return type can be \"\n \t\t  \"deduced to %<void%>\");\n \t  type = error_mark_node;\n@@ -9584,14 +9585,13 @@ check_return_expr (tree retval, bool *no_warning)\n \t{\n \t  if (!retval)\n \t    retval = void_node;\n-\t  auto_node = type_uses_auto (current_function_auto_return_pattern);\n-\t  type = do_auto_deduction (current_function_auto_return_pattern,\n-\t\t\t\t    retval, auto_node);\n+\t  auto_node = type_uses_auto (pattern);\n+\t  type = do_auto_deduction (pattern, retval, auto_node);\n \t}\n \n       if (type == error_mark_node)\n \t/* Leave it.  */;\n-      else if (functype == current_function_auto_return_pattern)\n+      else if (functype == pattern)\n \tapply_deduced_return_type (current_function_decl, type);\n       else if (!same_type_p (type, functype))\n \t{"}]}