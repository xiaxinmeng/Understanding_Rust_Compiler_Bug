{"sha": "91e01231957fcefefd7c4de6abbbb023b3fb5da6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlMDEyMzE5NTdmY2VmZWZkN2M0ZGU2YWJiYmIwMjNiM2ZiNWRhNg==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-03-03T01:11:57Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-03-03T01:11:57Z"}, "message": "mips16.S: Change fixsfsi and fixdfsi to fix_trunc.\n\n2004-03-02  Eric Christopher  <echristo@redhat.com>\n\n\t* config/mips/mips16.S: Change fixsfsi and fixdfsi to\n\tfix_trunc.\n\t* config/mips/mips.c (mips_init_libfuncs): Change accordingly.\n\t* config/mips/t-elf (LIB1ASMFUNCS): Ditto.\n\t* config/mips/t-isa3264 (LIB1ASMFUNCS): Ditto.\n\t* config/mips/t-r3900 (LIB1ASMFUNCS): Ditto.\n\nFrom-SVN: r78811", "tree": {"sha": "9a3495c1a698a6e58bb529ad142f911e0fe0ba5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a3495c1a698a6e58bb529ad142f911e0fe0ba5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91e01231957fcefefd7c4de6abbbb023b3fb5da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e01231957fcefefd7c4de6abbbb023b3fb5da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e01231957fcefefd7c4de6abbbb023b3fb5da6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e01231957fcefefd7c4de6abbbb023b3fb5da6/comments", "author": null, "committer": null, "parents": [{"sha": "465e1d4c41d913da0fd47c2557aff3a5dac7c749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465e1d4c41d913da0fd47c2557aff3a5dac7c749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/465e1d4c41d913da0fd47c2557aff3a5dac7c749"}], "stats": {"total": 98, "additions": 53, "deletions": 45}, "files": [{"sha": "63cf5baeae171339519c0677f2536b048a6a4b0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91e01231957fcefefd7c4de6abbbb023b3fb5da6", "patch": "@@ -1,3 +1,12 @@\n+2004-03-02  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/mips/mips16.S: Change fixsfsi and fixdfsi to\n+\tfix_trunc.\n+\t* config/mips/mips.c (mips_init_libfuncs): Change accordingly.\n+\t* config/mips/t-elf (LIB1ASMFUNCS): Ditto.\n+\t* config/mips/t-isa3264 (LIB1ASMFUNCS): Ditto.\n+\t* config/mips/t-r3900 (LIB1ASMFUNCS): Ditto.\n+\n 2004-03-02  Richard Henderson  <rth@redhat.com>\n \n         PR middle-end/11767\n@@ -216,13 +225,13 @@\n \t* fold-const.c (fold): An equality comparison of a non-weak object\n \tagainst zero has a known result.  Similarly an equality comparison\n \tof the address of two non-weak, unaliased symbols has a known result.\n- \n+\n \t* ggc-page.c (struct page_entry): New field PREV.\n \t(ggc_alloc): Update PREV field appropriately.\n \t(sweep_pages): Likewise.\n \t(ggc_free): Likewise.  Use PREV field rather than loop to\n \timprove ggc_free performance.\n- \n+\n 2004-03-01  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_output_division): Use the division\n@@ -313,7 +322,7 @@\n \t* config/sh/sh.c: Convert to ISO-C.\n \n 2004-02-28  Andrew Pinski  <pinskia@physics.uc.edu>\n-\t\n+\n \t* c-typeck.c (tagged_types_tu_compatible_p): Fix pasto in\n \tmy previous patch.\n \n@@ -339,7 +348,7 @@\n \n 2004-02-28  Maciej W. Rozycki  <macro@ds2.pg.gda.pl>\n \n-\t* config/mips/mips.c (override_options): Remove an obsolete \n+\t* config/mips/mips.c (override_options): Remove an obsolete\n \tduplicate definition of the \"e\" constraint.\n \t* config/mips/mips.h: Update a comment accordingly.\n \n@@ -455,27 +464,27 @@\n \t* Makefile.in (OBJS-common): Add it.\n \t* diagnostic.c (rtl_dump_and_exit): Move decl ...\n \t* flags.h (rtl_dump_and_exit): ... here.\n-\t* output.h (size_directive_output, last_assemble_variable_decl): \n+\t* output.h (size_directive_output, last_assemble_variable_decl):\n \tMove from toplev.c.\n \t* rtl.h (reg_alloc): Move from toplev.c.\n \t* toplev.c (HAVE_conditional_execution, DUMPFILE_FORMAT,\n \tstruct dump_file_info, enum dump_file_index, dump_file_tbl,\n \topen_dump_file, close_dump_file, rest_of_decl_compilation,\n \trest_of_type_compilation, rest_of_handle_final,\n-\trest_of_handle_delay_slots, rest_of_handle_stack_regs, \n+\trest_of_handle_delay_slots, rest_of_handle_stack_regs,\n \trest_of_handle_variable_tracking, rest_of_handle_machine_reorg,\n \trest_of_handle_new_regalloc, rest_of_handle_old_regalloc,\n \trest_of_handle_regrename, rest_of_handle_reorder_blocks,\n \trest_of_handle_sched, rest_of_handle_sched2, rest_of_handle_regmove,\n-\trest_of_handle_tracer, rest_of_handle_if_conversion, \n+\trest_of_handle_tracer, rest_of_handle_if_conversion,\n \trest_of_handle_if_after_combine, rest_of_handle_web,\n \trest_of_handle_branch_prob,\n \trest_of_handle_value_profile_transformations, rest_of_handle_cfg,\n-\trest_of_handle_addressof, rest_of_handle_sibling_calls, \n+\trest_of_handle_addressof, rest_of_handle_sibling_calls,\n \trest_of_handle_jump_bypass, rest_of_handle_inlining,\n \trest_of_handle_null_pointer, rest_of_handle_combine,\n \trest_of_handle_life, rest_of_handle_cse, rest_of_handle_cse2,\n-\trest_of_handle_gcse, rest_of_handle_loop_optimize, \n+\trest_of_handle_gcse, rest_of_handle_loop_optimize,\n \trest_of_handle_loop2, rest_of_compilation): Move to passes.c.\n \t(decode_d_option): Use enable_rtl_dump_file.\n \t(compile_file, finalize, do_compile): Move profile+combine+graph\n@@ -506,7 +515,7 @@\n \t* config/rs6000/spe.md: Delete spe_efsctuiz.\n \tAdd spe_fixuns_truncsfsi2.\n \tAdd spe_fix_truncsfsi2.\n- \n+\n 2004-02-26  Eric Christopher  <echristo@redhat.com>\n \n \t* c-lex.c (c_lex_string_translate): New variable."}, {"sha": "336ca9971dd76fffe18a33683be9f938e86c1c76", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=91e01231957fcefefd7c4de6abbbb023b3fb5da6", "patch": "@@ -5945,7 +5945,7 @@ mips_file_end (void)\n \t\t when it is unsafe.  */\n \t      if (TARGET_IRIX && mips_abi == ABI_32 && p->size == -1)\n \t\t{\n-\t\t  fputs (\"\\t.globl \", asm_out_file);\t\t       \n+\t\t  fputs (\"\\t.globl \", asm_out_file);\n \t\t  assemble_name (asm_out_file, p->name);\n \t\t  fputs (\" .text\\n\", asm_out_file);\n \t\t}\n@@ -7012,7 +7012,7 @@ mips_expand_epilogue (int sibcall_p)\n     emit_insn (gen_add3_insn (stack_pointer_rtx,\n \t\t\t      stack_pointer_rtx,\n \t\t\t      GEN_INT (step2)));\n-    \n+\n   /* Add in the __builtin_eh_return stack adjustment.   We need to\n      use a temporary in mips16 code.  */\n   if (current_function_calls_eh_return)\n@@ -8767,7 +8767,7 @@ mips_init_libfuncs (void)\n       set_optab_libfunc (lt_optab, SFmode, \"__mips16_ltsf2\");\n       set_optab_libfunc (le_optab, SFmode, \"__mips16_lesf2\");\n \n-      set_conv_libfunc (sfix_optab, SImode, SFmode, \"__mips16_fixsfsi\");\n+      set_conv_libfunc (sfix_optab, SImode, SFmode, \"__mips16_fix_truncsfsi\");\n       set_conv_libfunc (sfloat_optab, SFmode, SImode, \"__mips16_floatsisf\");\n \n       if (TARGET_DOUBLE_FLOAT)\n@@ -8787,7 +8787,7 @@ mips_init_libfuncs (void)\n \t  set_conv_libfunc (sext_optab, DFmode, SFmode, \"__mips16_extendsfdf2\");\n \t  set_conv_libfunc (trunc_optab, SFmode, DFmode, \"__mips16_truncdfsf2\");\n \n-\t  set_conv_libfunc (sfix_optab, SImode, DFmode, \"__mips16_fixdfsi\");\n+\t  set_conv_libfunc (sfix_optab, SImode, DFmode, \"__mips16_fix_truncdfsi\");\n \t  set_conv_libfunc (sfloat_optab, DFmode, SImode, \"__mips16_floatsidf\");\n \t}\n     }\n@@ -9419,7 +9419,7 @@ mips_emit_prefetch (rtx *operands)\n   int indexed = GET_CODE (operands[3]) == REG;\n   int code;\n   char buffer[30];\n-  \n+\n   if (locality <= 0)\n     code = (write ? 5 : 4);\t/* store_streamed / load_streamed.  */\n   else if (locality <= 2)"}, {"sha": "7ecc48660a51819e7cd46194f56522a3eb5f2671", "filename": "gcc/config/mips/mips16.S", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Fmips16.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Fmips16.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips16.S?ref=91e01231957fcefefd7c4de6abbbb023b3fb5da6", "patch": "@@ -92,14 +92,14 @@ STARTFN (NAME);\t\t\t\\\n \tnop;\t\t\t\\\n \t.set\treorder;\t\\\n \tENDFN (NAME)\n-\t\n+\n #ifdef L_m16negsf2\n SFOP2(__mips16_negsf2, neg.s)\n #endif\n #ifdef L_m16abssf2\n SFOP2(__mips16_abssf2, abs.s)\n #endif\n-\t\n+\n /* Single precision comparisons.  */\n \n /* This macro defines a function which loads two single precision\n@@ -167,21 +167,21 @@ STARTFN (__mips16_floatsisf)\n \tENDFN (__mips16_floatsisf)\n #endif\n \n-#ifdef L_m16fixsfsi\n-STARTFN (__mips16_fixsfsi)\n+#ifdef L_m16fix_truncsfsi\n+STARTFN (__mips16_fix_truncsfsi)\n \t.set\tnoreorder\n \tmtc1\t$4,$f0\n \tnop\n \ttrunc.w.s $f0,$f0,$4\n \tmfc1\t$2,$f0\n \tj\t$31\n-\tnop\t\n+\tnop\n \t.set\treorder\n-\tENDFN (__mips16_fixsfsi)\n+\tENDFN (__mips16_fix_truncsfsi)\n #endif\n \n #if !defined(__mips_single_float) && !defined(__SINGLE_FLOAT)\n-\t\t\n+\n /* The double precision operations.  We need to use different code\n    based on the preprocessor symbol __mips64, because the way in which\n    double precision values will change.  Without __mips64, the value\n@@ -194,9 +194,9 @@ STARTFN (__mips16_fixsfsi)\n #define LDDBL1 dmtc1 $4,$f12\n #elif defined(__mipsfp64)\n #define LDDBL1 sw $4,0($29); sw $5,4($29); l.d $f12,0($29)\n-#elif defined(__MIPSEB__)\t\n+#elif defined(__MIPSEB__)\n #define LDDBL1 mtc1 $4,$f13; mtc1 $5,$f12\n-#else\t\n+#else\n #define LDDBL1 mtc1 $4,$f12; mtc1 $5,$f13\n #endif\n \n@@ -207,24 +207,24 @@ STARTFN (__mips16_fixsfsi)\n #define LDDBL2 dmtc1 $5,$f14\n #elif defined(__mipsfp64)\n #define LDDBL2 sw $6,8($29); sw $7,12($29); l.d $f14,8($29)\n-#elif defined(__MIPSEB__)\t\n+#elif defined(__MIPSEB__)\n #define LDDBL2 mtc1 $6,$f15; mtc1 $7,$f14\n-#else\t\n+#else\n #define LDDBL2 mtc1 $6,$f14; mtc1 $7,$f15\n #endif\n-\t\n+\n /* Move the double precision return value to the right place.  */\n \n #if defined(__mips64)\n #define RETDBL dmfc1 $2,$f0\n #elif defined(__mipsfp64)\n #define RETDBL s.d $f0,0($29); lw $2,0($29); lw $3,4($29)\n-#elif defined(__MIPSEB__)\t\n+#elif defined(__MIPSEB__)\n #define RETDBL mfc1 $2,$f1; mfc1 $3,$f0\n-#else\t\n+#else\n #define RETDBL mfc1 $2,$f0; mfc1 $3,$f1\n #endif\n-\t\n+\n /* Double precision math.  */\n \n /* This macro defines a function which loads two double precision\n@@ -268,15 +268,15 @@ STARTFN (NAME);\t\t\t\\\n \tnop;\t\t\t\\\n \t.set\treorder;\t\\\n \tENDFN (NAME)\n-\t\n+\n #ifdef L_m16negdf2\n DFOP2(__mips16_negdf2, neg.d)\n #endif\n #ifdef L_m16absdf2\n DFOP2(__mips16_absdf2, abs.d)\n #endif\n \n-\t\n+\n /* Conversions between single and double precision.  */\n \n #ifdef L_m16extsfdf2\n@@ -372,8 +372,8 @@ STARTFN (__mips16_floatsidf)\n \tENDFN (__mips16_floatsidf)\n #endif\n \n-#ifdef L_m16fixdfsi\n-STARTFN (__mips16_fixdfsi)\n+#ifdef L_m16fix_truncdfsi\n+STARTFN (__mips16_fix_truncdfsi)\n \t.set\tnoreorder\n \tLDDBL1\n \tnop\n@@ -382,7 +382,7 @@ STARTFN (__mips16_fixdfsi)\n \tj\t$31\n \tnop\n \t.set\treorder\n-\tENDFN (__mips16_fixdfsi)\n+\tENDFN (__mips16_fix_truncdfsi)\n #endif\n #endif /* !__mips_single_float */\n \n@@ -410,12 +410,12 @@ STARTFN (__mips16_ret_df)\n #elif defined(__mipsfp64)\n \tsw\t$2,0($29)\n \tsw\t$3,4($29)\n-\tl.d\t$f0,0($29) \n-#elif defined(__MIPSEB__)\t\n+\tl.d\t$f0,0($29)\n+#elif defined(__MIPSEB__)\n \tmtc1\t$2,$f1\n \tj\t$31\n \tmtc1\t$3,$f0\n-#else\t\n+#else\n \tmtc1\t$2,$f0\n \tj\t$31\n \tmtc1\t$3,$f1\n@@ -737,4 +737,3 @@ STARTFN (__mips16_call_stub_df_10)\n \tENDFN (__mips16_call_stub_df_10)\n #endif\n #endif /* !__mips_single_float */\n-"}, {"sha": "c36798c2765d2a1648d8c9bec206440e4a74b78d", "filename": "gcc/config/mips/t-elf", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-elf?ref=91e01231957fcefefd7c4de6abbbb023b3fb5da6", "patch": "@@ -13,11 +13,11 @@ $(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n LIB1ASMSRC = mips/mips16.S\n LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n-\t_m16fltsisf _m16fixsfsi \\\n+\t_m16fltsisf _m16fix_truncsfsi \\\n \t_m16adddf3 _m16subdf3 _m16muldf3 _m16divdf3 \\\n \t_m16extsfdf2 _m16trdfsf2 \\\n \t_m16eqdf2 _m16nedf2 _m16gtdf2 _m16gedf2 _m16ledf2 _m16ltdf2 \\\n-\t_m16fltsidf _m16fixdfsi \\\n+\t_m16fltsidf _m16fix_truncdfsi \\\n \t_m16retsf _m16retdf \\\n \t_m16stub1 _m16stub2 _m16stub5 _m16stub6 _m16stub9 _m16stub10 \\\n \t_m16stubsf0 _m16stubsf1 _m16stubsf2 _m16stubsf5 _m16stubsf6 \\"}, {"sha": "6604fbe09b25eaef4f4260a508ee3ceedd079465", "filename": "gcc/config/mips/t-isa3264", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Ft-isa3264", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Ft-isa3264", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-isa3264?ref=91e01231957fcefefd7c4de6abbbb023b3fb5da6", "patch": "@@ -13,11 +13,11 @@ $(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n LIB1ASMSRC = mips/mips16.S\n LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n-\t_m16fltsisf _m16fixsfsi \\\n+\t_m16fltsisf _m16fix_truncsfsi \\\n \t_m16adddf3 _m16subdf3 _m16muldf3 _m16divdf3 \\\n \t_m16extsfdf2 _m16trdfsf2 \\\n \t_m16eqdf2 _m16nedf2 _m16gtdf2 _m16gedf2 _m16ledf2 _m16ltdf2 \\\n-\t_m16fltsidf _m16fixdfsi \\\n+\t_m16fltsidf _m16fix_truncdfsi \\\n \t_m16retsf _m16retdf \\\n \t_m16stub1 _m16stub2 _m16stub5 _m16stub6 _m16stub9 _m16stub10 \\\n \t_m16stubsf0 _m16stubsf1 _m16stubsf2 _m16stubsf5 _m16stubsf6 \\"}, {"sha": "3bc8c47279d651a8c2eb0dfaf7437c31a1e80a9c", "filename": "gcc/config/mips/t-r3900", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Ft-r3900", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e01231957fcefefd7c4de6abbbb023b3fb5da6/gcc%2Fconfig%2Fmips%2Ft-r3900", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-r3900?ref=91e01231957fcefefd7c4de6abbbb023b3fb5da6", "patch": "@@ -1,11 +1,11 @@\n LIB1ASMSRC = mips/mips16.S\n LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n-\t_m16fltsisf _m16fixsfsi \\\n+\t_m16fltsisf _m16fix_truncsfsi \\\n \t_m16adddf3 _m16subdf3 _m16muldf3 _m16divdf3 \\\n \t_m16extsfdf2 _m16trdfsf2 \\\n \t_m16eqdf2 _m16nedf2 _m16gtdf2 _m16gedf2 _m16ledf2 _m16ltdf2 \\\n-\t_m16fltsidf _m16fixdfsi \\\n+\t_m16fltsidf _m16fix_truncdfsi \\\n \t_m16retsf _m16retdf \\\n \t_m16stub1 _m16stub2 _m16stub5 _m16stub6 _m16stub9 _m16stub10 \\\n \t_m16stubsf0 _m16stubsf1 _m16stubsf2 _m16stubsf5 _m16stubsf6 \\"}]}