{"sha": "3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViYzVjNTJlODVjNTA5ZjhmNWExNjdiMWVkYTUxZTBiYmIwMTUwNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-05-25T15:31:38Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-05-25T15:31:38Z"}, "message": "class.c (finish_vtbls): Copy BINFO_VIRTUALs before using it to intialize a vtable.\n\n\t* class.c (finish_vtbls): Copy BINFO_VIRTUALs before using it to\n\tintialize a vtable.\n\t* cp-tree.h (NAMESPACE_LEVEL): Reformat.\n\t(lang_decl_flags): Document MEMFUNC_POINTER_TO.  Save four bytes\n\tby combining TEMPLATE_INFO and LEVEL into a single union.\n\t(DECL_TEMPLATE_INFO): Reformat.\n\t(DECL_SAVED_TREE): Document.\n\t(DECL_TEMPLATE_INJECT): Remove.\n\t* class.c (finish_struct): Remove code to deal with\n\tDECL_TEMPLATE_INJECT.\n\t* decl.c (maybe_process_template_type_declaration): Handle all new\n\ttypes in templates uniformly.\n\t* method.c (bulid_overload_identifier): Use CP_DECL_CONTEXT, not\n\tDECL_CONTEXT.\n\t* pt.c (lookup_template_class): Inject template instantiations of\n\tforward-declarations.\n\t(instantiate_class_template): Remove code processing\n\tDECL_TEMPLATE_INJECT.\n\t* pt.c (lookup_template_class): Tweak lookup to find member\n\ttemplates.\n\t* pt.c (tsubst_expr, case ASM_STMT): Don't tsubst into\n\tASM_CV_QUAL.\n\t* semantics.c (finish_asm_stmt): Make strings permanent if they're\n\tused in a template.\n\nFrom-SVN: r27144", "tree": {"sha": "a92251b76a9d8c50ccfdb269bdce4aaf3e601d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a92251b76a9d8c50ccfdb269bdce4aaf3e601d76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/comments", "author": null, "committer": null, "parents": [{"sha": "c9b2595a777d4f39268ec960c9264f310a642f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b2595a777d4f39268ec960c9264f310a642f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b2595a777d4f39268ec960c9264f310a642f5d"}], "stats": {"total": 251, "additions": 172, "deletions": 79}, "files": [{"sha": "32de5b16c0488a5998bfbcd65efd8361dbe97a32", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -1,3 +1,34 @@\n+1999-05-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (finish_vtbls): Copy BINFO_VIRTUALs before using it to\n+\tintialize a vtable.\n+\n+\t* cp-tree.h (NAMESPACE_LEVEL): Reformat.\n+\t(lang_decl_flags): Document MEMFUNC_POINTER_TO.  Save four bytes\n+\tby combining TEMPLATE_INFO and LEVEL into a single union.\n+\t(DECL_TEMPLATE_INFO): Reformat.\n+\t(DECL_SAVED_TREE): Document.\n+\t(DECL_TEMPLATE_INJECT): Remove.\n+\t* class.c (finish_struct): Remove code to deal with\n+\tDECL_TEMPLATE_INJECT. \n+\n+\t* decl.c (maybe_process_template_type_declaration): Handle all new\n+\ttypes in templates uniformly.\n+\t* method.c (bulid_overload_identifier): Use CP_DECL_CONTEXT, not\n+\tDECL_CONTEXT.\n+\t* pt.c (lookup_template_class): Inject template instantiations of\n+\tforward-declarations.\n+\t(instantiate_class_template): Remove code processing\n+\tDECL_TEMPLATE_INJECT.\n+\t\n+\t* pt.c (lookup_template_class): Tweak lookup to find member\n+\ttemplates.\n+\n+\t* pt.c (tsubst_expr, case ASM_STMT): Don't tsubst into\n+\tASM_CV_QUAL.\n+\t* semantics.c (finish_asm_stmt): Make strings permanent if they're\n+\tused in a template.\n+\t\n 1999-05-25  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* typeck.c (casts_away_constness, casts_away_constness_r): Strip both"}, {"sha": "c6d6bcc84e8d827df48c41d48eb0a9f3c25e53eb", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -2170,9 +2170,14 @@ finish_vtbls (binfo, do_self, t)\n \t  decl = BINFO_VTABLE (binfo);\n \t  context = DECL_CONTEXT (decl);\n \t  DECL_CONTEXT (decl) = 0;\n-\t  if (DECL_INITIAL (decl) != BINFO_VIRTUALS (binfo))\n-\t    DECL_INITIAL (decl) = build_nt (CONSTRUCTOR, NULL_TREE,\n-\t\t\t\t\t    BINFO_VIRTUALS (binfo));\n+\n+\t  /* We make a copy here in case we need to replace pure\n+\t     virtual functions with __pure_virtual.  We don't want to\n+\t     mess up BINFO_VIRTUALS when we do this.  */\n+\t  DECL_INITIAL (decl) = copy_list (BINFO_VIRTUALS (binfo));\n+\t  DECL_INITIAL (decl) = build_nt (CONSTRUCTOR, NULL_TREE,\n+\t\t\t\t\t  DECL_INITIAL (decl));\n+\n \t  cp_finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0, 0);\n \t  DECL_CONTEXT (decl) = context;\n \t}\n@@ -4197,24 +4202,6 @@ finish_struct (t, attributes, warn_anon)\n \n   if (processing_template_decl)\n     {\n-      tree d = getdecls ();\n-      for (; d; d = TREE_CHAIN (d))\n-\t{\n-\t  /* If this is the decl for the class or one of the template\n-             parms, we've seen all the injected decls.  */\n-\t  if ((TREE_CODE (d) == TYPE_DECL\n-\t       && (TREE_TYPE (d) == t\n-\t\t   || TREE_CODE (TREE_TYPE (d)) == TEMPLATE_TYPE_PARM\n-\t\t   || TREE_CODE (TREE_TYPE (d)) == TEMPLATE_TEMPLATE_PARM))\n-\t      || TREE_CODE (d) == CONST_DECL)\n-\t    break;\n-\t  /* Don't inject cache decls.  */\n-\t  else if (IDENTIFIER_TEMPLATE (DECL_NAME (d)))\n-\t    continue;\n-\t  DECL_TEMPLATE_INJECT (CLASSTYPE_TI_TEMPLATE (t))\n-\t    = tree_cons (NULL_TREE, d,\n-\t\t\t DECL_TEMPLATE_INJECT (CLASSTYPE_TI_TEMPLATE (t)));\n-\t}\n       finish_struct_methods (t);\n       TYPE_SIZE (t) = integer_zero_node;\n     }      "}, {"sha": "4971b7999d4bde0635a865534f8005cc389525e0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -1136,7 +1136,8 @@ struct lang_type\n    && TREE_VALUE (TYPE_RAISES_EXCEPTIONS (NODE)) == NULL_TREE)\n \n /* The binding level associated with the namespace.  */\n-#define NAMESPACE_LEVEL(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.level)\n+#define NAMESPACE_LEVEL(NODE) \\\n+  (DECL_LANG_SPECIFIC(NODE)->decl_flags.u.level)\n \f\n \n /* If a DECL has DECL_LANG_SPECIFIC, it is either a lang_decl_flags or\n@@ -1180,9 +1181,19 @@ struct lang_decl_flags\n \n   tree access;\n   tree context;\n+\n+  /* In a template FUNCTION_DECL, this is DECL_SAVED_TREE.\n+     In a non-template FUNCTION_DECL, this is DECL_MEMFUNC_POINTER_TO.\n+     In a FIELD_DECL, this is DECL_MEMFUNC_POINTING_TO.  */\n   tree memfunc_pointer_to;\n-  tree template_info;\n-  struct binding_level *level;\n+\n+  union {\n+    /* In a FUNCTION_DECL, this is DECL_TEMPLATE_INFO.  */\n+    tree template_info;\n+\n+    /* In a NAMESPACE_DECL, this is NAMESPACE_LEVEL.  */\n+    struct binding_level *level;\n+  } u;\n };\n \n struct lang_decl\n@@ -1392,7 +1403,8 @@ struct lang_decl\n #define DECL_MEMFUNC_POINTING_TO(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.memfunc_pointer_to)\n \n /* For a VAR_DECL or FUNCTION_DECL: template-specific information.  */\n-#define DECL_TEMPLATE_INFO(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.template_info)\n+#define DECL_TEMPLATE_INFO(NODE) \\\n+  (DECL_LANG_SPECIFIC(NODE)->decl_flags.u.template_info)\n \n /* Template information for a RECORD_TYPE or UNION_TYPE.  */\n #define CLASSTYPE_TEMPLATE_INFO(NODE) (TYPE_LANG_SPECIFIC(NODE)->template_info)\n@@ -1475,7 +1487,10 @@ struct lang_decl\n    the class definition is complete.  */\n #define TEMPLATE_PARMS_FOR_INLINE(NODE) TREE_LANG_FLAG_1 (NODE)\n \n+/* In a template FUNCTION_DECL, the tree structure that will be\n+   substituted into to obtain instantiations.  */\n #define DECL_SAVED_TREE(NODE)\t\tDECL_MEMFUNC_POINTER_TO (NODE)\n+\n #define COMPOUND_STMT_NO_SCOPE(NODE)\tTREE_LANG_FLAG_0 (NODE)\n #define NEW_EXPR_USE_GLOBAL(NODE)\tTREE_LANG_FLAG_0 (NODE)\n #define DELETE_EXPR_USE_GLOBAL(NODE)\tTREE_LANG_FLAG_0 (NODE)\n@@ -1898,7 +1913,6 @@ extern int flag_new_for_scope;\n \n    This list is not used for static variable templates.  */\n #define DECL_TEMPLATE_SPECIALIZATIONS(NODE)     DECL_SIZE(NODE)\n-#define DECL_TEMPLATE_INJECT(NODE)\tDECL_INITIAL(NODE)\n \n /* Nonzero for a DECL which is actually a template parameter.  */\n #define DECL_TEMPLATE_PARM_P(NODE) \\"}, {"sha": "d990a82f715c09c860f734d172fb216630f64032", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -2783,25 +2783,7 @@ maybe_process_template_type_declaration (type, globalize, b)\n \t\t\t  || TREE_CODE (type) == ENUMERAL_TYPE, 0);\n \t\t\t  \n \t\t\t  \n-      if (/* If !GLOBALIZE then we are looking at a definition.\n-\t     It may not be a primary template.  (For example, in:\n-\t\t  \n-\t       template <class T>\n-\t       struct S1 { class S2 {}; }\n-\t\t  \n-\t     we have to push_template_decl for S2.)  */\n-\t  (processing_template_decl && !globalize)\n-\t  /* If we are declaring a friend template class, we will\n-\t     have GLOBALIZE set, since something like:\n-\n-\t       template <class T>\n-\t       struct S1 {\n-\t\t template <class U>\n-\t\t friend class S2; \n-\t       };\n-\n-\t     declares S2 to be at global scope.  */\n-\t  || PROCESSING_REAL_TEMPLATE_DECL_P ())\n+      if (processing_template_decl)\n \t{\n \t  /* This may change after the call to\n \t     push_template_decl_real, but we want the original value.  */"}, {"sha": "873ccd411d28d653695f2895cbc12cfa92384400", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -999,8 +999,8 @@ build_overload_identifier (name)\n       && CLASS_TYPE_P (TREE_TYPE (name))\n       && CLASSTYPE_TEMPLATE_INFO (TREE_TYPE (name))\n       && (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (TREE_TYPE (name)))\n-\t  || (TREE_CODE (DECL_CONTEXT (CLASSTYPE_TI_TEMPLATE \n-\t\t\t\t       (TREE_TYPE (name))))\n+\t  || (TREE_CODE (CP_DECL_CONTEXT (CLASSTYPE_TI_TEMPLATE \n+\t\t\t\t\t  (TREE_TYPE (name))))\n \t      == FUNCTION_DECL)))\n     {\n       /* NAME is the TYPE_DECL for a template specialization.  */"}, {"sha": "2592ab4459854f57a48a8286811db811c86ddfa0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -3613,12 +3613,8 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \t{\n \t  if (context)\n \t    push_decl_namespace (context);\n-\t  if (current_class_type != NULL_TREE)\n-\t    template =\n-\t      maybe_get_template_decl_from_type_decl\n-\t      (IDENTIFIER_CLASS_VALUE (d1));\n-\t  if (template == NULL_TREE)\n-\t    template = lookup_name_nonclass (d1);\n+\t  template = lookup_name (d1, /*prefer_type=*/0);\n+\t  template = maybe_get_template_decl_from_type_decl (template);\n \t  if (context)\n \t    pop_decl_namespace ();\n \t}\n@@ -3834,24 +3830,35 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \t  if (found)\n \t    found = TREE_VALUE (found);\n \t}\n-      \n+\n       if (found)\n \t{\n \t  pop_momentary ();\n \t  return found;\n \t}\n \n-      /* Since we didn't find the type, we'll have to create it.\n-\t Since we'll be saving this type on the\n-\t DECL_TEMPLATE_INSTANTIATIONS list, it must be permanent.  */\n-      push_obstacks (&permanent_obstack, &permanent_obstack);\n-      \n       /* This type is a \"partial instantiation\" if any of the template\n \t arguments still inolve template parameters.  Note that we set\n \t IS_PARTIAL_INSTANTIATION for partial specializations as\n \t well.  */\n       is_partial_instantiation = uses_template_parms (arglist);\n \n+      if (!is_partial_instantiation \n+\t  && !PRIMARY_TEMPLATE_P (template)\n+\t  && TREE_CODE (CP_DECL_CONTEXT (template)) == NAMESPACE_DECL)\n+\t{\n+\t  pop_momentary ();\n+\t  found = xref_tag_from_type (TREE_TYPE (template),\n+\t\t\t\t      DECL_NAME (template),\n+\t\t\t\t      /*globalize=*/1);\n+\t  return found;\n+\t}\n+\t\t\t\t    \n+      /* Since we didn't find the type, we'll have to create it.\n+\t Since we'll be saving this type on the\n+\t DECL_TEMPLATE_INSTANTIATIONS list, it must be permanent.  */\n+      push_obstacks (&permanent_obstack, &permanent_obstack);\n+      \n       /* Create the type.  */\n       if (TREE_CODE (template_type) == ENUMERAL_TYPE)\n \t{\n@@ -5111,23 +5118,6 @@ instantiate_class_template (type)\n \t--processing_template_decl;\n     }\n \n-  /* This does injection for friend functions. */\n-  if (!processing_template_decl)\n-    {\n-      t = tsubst (DECL_TEMPLATE_INJECT (template), args,\n-\t\t  /*complain=*/1, NULL_TREE);\n-\n-      for (; t; t = TREE_CHAIN (t))\n-\t{\n-\t  tree d = TREE_VALUE (t);\n-\n-\t  if (TREE_CODE (d) == TYPE_DECL)\n-\t    /* Already injected.  */;\n-\t  else\n-\t    pushdecl (d);\n-\t}\n-    } \n-\n   for (t = TYPE_FIELDS (type); t; t = TREE_CHAIN (t))\n     if (TREE_CODE (t) == FIELD_DECL)\n       {\n@@ -7200,7 +7190,7 @@ tsubst_expr (t, args, complain, in_decl)\n \n     case ASM_STMT:\n       lineno = TREE_COMPLEXITY (t);\n-      finish_asm_stmt (tsubst_expr (ASM_CV_QUAL (t), args, complain, in_decl),\n+      finish_asm_stmt (ASM_CV_QUAL (t),\n \t\t       tsubst_expr (ASM_STRING (t), args, complain, in_decl),\n \t\t       tsubst_expr (ASM_OUTPUTS (t), args, complain, in_decl),\n \t\t       tsubst_expr (ASM_INPUTS (t), args, complain, in_decl), "}, {"sha": "5be0ae1832678f87643d8edeba55cc88d243c104", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -718,15 +718,28 @@ finish_compound_stmt (has_no_scope, compound_stmt)\n \n void\n finish_asm_stmt (cv_qualifier, string, output_operands,\n-\t\t      input_operands, clobbers)\n+\t\t input_operands, clobbers)\n      tree cv_qualifier;\n      tree string;\n      tree output_operands;\n      tree input_operands;\n      tree clobbers;\n {\n   if (TREE_CHAIN (string))\n-    string = combine_strings (string);\n+    {\n+      if (processing_template_decl)\n+\t{\n+\t  /* We need to build the combined string on the permanent\n+\t     obstack so that we can use it during instantiations.  */\n+\t  push_obstacks_nochange ();\n+\t  end_temporary_allocation ();\n+\t}\n+\n+      string = combine_strings (string);\n+\n+      if (processing_template_decl)\n+\tpop_obstacks ();\n+    }\n \n   if (processing_template_decl)\n     {"}, {"sha": "d093002ff8fe80e8cd6dd8fd7587183860514207", "filename": "gcc/testsuite/g++.old-deja/g++.pt/asm1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fasm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fasm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fasm1.C?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link:\n+// Origin: \"Weidmann, Nicholas\" <nicholas.weidmann@swx.ch>\n+// Skip if not target: i?86-*-linux*\n+\n+template<int i> int foo(int v)\n+{\n+\t__asm__ __volatile__(\"addl %1, %0\" : \"=a\" (v) : \"b\" (i));\n+\n+\treturn v;\n+}\n+\n+int bar(int i)\n+{\n+\treturn foo<123>(i);\n+}\n+"}, {"sha": "4f6bd0aa85694709a7b942306e045eff4ed8f6bf", "filename": "gcc/testsuite/g++.old-deja/g++.pt/asm2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fasm2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fasm2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fasm2.C?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link:\n+// Origin: \"Weidmann, Nicholas\" <nicholas.weidmann@swx.ch>\n+// Skip if not target: i?86-*-linux*\n+\n+typedef void (function_ptr)(int);\n+\n+void foo(int)\n+{\n+}\n+\n+template<function_ptr ptr> void doit(int i)\n+{\n+\t__asm__(\"pushl %0\\n\\t\"\n+\t\t  \"call *%1\\n\\t\"\n+\t\t  \"popl %0\"\n+\t\t  :\n+\t\t  : \"a\" (i), \"b\" (ptr));\n+}\n+\n+void bar()\n+{\n+\tdoit<foo>(123);\n+}"}, {"sha": "8d351202c2f25f26536a34881e63d8e1a881173c", "filename": "gcc/testsuite/g++.old-deja/g++.pt/inject1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finject1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finject1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finject1.C?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+template <int I>\n+struct S {\n+  struct T* x;\n+};\n+\n+template struct S<2>;\n+\n+T* t;"}, {"sha": "e94ac1c56937fee222a54b48a56bb481d1506798", "filename": "gcc/testsuite/g++.old-deja/g++.pt/inject2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finject2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finject2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finject2.C?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+// Special g++ Options: -Wno-non-template-friend\n+\n+template<int I>\n+class C {\n+    friend void f(struct X *);\n+};\n+\n+template class C<0>;\n+\n+class D {\n+    friend void f(struct X*);\n+};\n+"}, {"sha": "a3217e621282d8d7e40d8d46a39d26eb41cd6184", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memclass21.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebc5c52e85c509f8f5a167b1eda51e0bbb01507/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass21.C?ref=3ebc5c52e85c509f8f5a167b1eda51e0bbb01507", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link:\n+// Origin: <Corey Kosak> kosak@cs.cmu.edu\n+\n+struct moo {\n+  template<bool x> struct cow {};\n+\n+  template<bool x>\n+  struct moo2 {\n+    void func(cow<x> &c) { }\n+  };\n+};"}]}