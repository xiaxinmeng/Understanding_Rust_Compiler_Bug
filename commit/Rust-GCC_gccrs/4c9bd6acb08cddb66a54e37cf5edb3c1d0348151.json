{"sha": "4c9bd6acb08cddb66a54e37cf5edb3c1d0348151", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM5YmQ2YWNiMDhjZGRiNjZhNTRlMzdjZjVlZGIzYzFkMDM0ODE1MQ==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2012-02-20T20:57:23Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2012-02-20T20:57:23Z"}, "message": "libitm: Optimize synchronization in gl_wt rollback.\n\n\tlibitm/\n\t* method-gl.cc (gl_wt_dispatch::rollback): Optimize memory orders.\n\nFrom-SVN: r184402", "tree": {"sha": "dc864c9bb78042d05b370d6e2decbdc8ab5e601b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc864c9bb78042d05b370d6e2decbdc8ab5e601b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c9bd6acb08cddb66a54e37cf5edb3c1d0348151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9bd6acb08cddb66a54e37cf5edb3c1d0348151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c9bd6acb08cddb66a54e37cf5edb3c1d0348151", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9bd6acb08cddb66a54e37cf5edb3c1d0348151/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "651ff4152e25e6aecbfa7fbcf2b920df15cb0f41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "da94906bcd3ccf0eba0f8a4aba9635a261552b7e", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9bd6acb08cddb66a54e37cf5edb3c1d0348151/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9bd6acb08cddb66a54e37cf5edb3c1d0348151/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=4c9bd6acb08cddb66a54e37cf5edb3c1d0348151", "patch": "@@ -1,3 +1,7 @@\n+2012-02-20  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* method-gl.cc (gl_wt_dispatch::rollback): Optimize memory orders.\n+\n 2012-02-20  Torvald Riegel  <triegel@redhat.com>\n \n \t* method-gl.cc (gl_wt_dispatch::trycommit): Remove handling of"}, {"sha": "4fd506ef1543afd521337c9abec352011e986255", "filename": "libitm/method-gl.cc", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9bd6acb08cddb66a54e37cf5edb3c1d0348151/libitm%2Fmethod-gl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9bd6acb08cddb66a54e37cf5edb3c1d0348151/libitm%2Fmethod-gl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fmethod-gl.cc?ref=4c9bd6acb08cddb66a54e37cf5edb3c1d0348151", "patch": "@@ -314,22 +314,26 @@ class gl_wt_dispatch : public abi_dispatch\n     // value that is correct wrt. privatization safety.\n     if (gl_mg::is_locked(v))\n       {\n-\t// Release the global orec, increasing its version number / timestamp.\n-        // See begin_or_restart() for why we need release memory order here.\n+\t// With our rollback, global time increases.\n \tv = gl_mg::clear_locked(v) + 1;\n-\to_gl_mg.orec.store(v, memory_order_release);\n \n-\t// Also reset the timestamp published via shared_state.\n+\t// First reset the timestamp published via shared_state.  Release\n+\t// memory order will make this happen after undoing prior data writes.\n+\t// This must also happen before we actually release the global orec\n+\t// next, so that future update transactions in other threads observe\n+\t// a meaningful snapshot time for our transaction; otherwise, they\n+\t// could read a shared_store value with the LOCK_BIT set, which can\n+\t// break privatization safety because it's larger than the actual\n+\t// snapshot time.  Note that we only need to consider other update\n+\t// transactions because only those will potentially privatize data.\n \ttx->shared_state.store(v, memory_order_release);\n \n-\t// We need a store-load barrier after this store to prevent it\n-\t// from becoming visible after later data loads because the\n-\t// previous value of shared_state has been higher than the actual\n-\t// snapshot time (the lock bit had been set), which could break\n-\t// privatization safety. We do not need a barrier before this\n-\t// store (see pre_write() for an explanation).\n-\t// ??? What is the precise reasoning in the C++11 model?\n-\tatomic_thread_fence(memory_order_seq_cst);\n+\t// Release the global orec, increasing its version number / timestamp.\n+\t// See begin_or_restart() for why we need release memory order here,\n+\t// and we also need it to make future update transactions read the\n+\t// prior update to shared_state too (update transactions acquire the\n+\t// global orec with acquire memory order).\n+\to_gl_mg.orec.store(v, memory_order_release);\n       }\n \n   }"}]}