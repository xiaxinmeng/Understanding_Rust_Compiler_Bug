{"sha": "4e7c9a2248fbefdffb35dabbbb2c7c5c26d97f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU3YzlhMjI0OGZiZWZkZmZiMzVkYWJiYmIyYzdjNWMyNmQ5N2Y3MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-03T23:26:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-03T23:26:51Z"}, "message": "(emit_library_call, emit_library_call_value):\n\nHandle STACK_BOUNDARY when using push insns.\n\nFrom-SVN: r3420", "tree": {"sha": "f52e60f70a2e31979f897319ef95b087d604ac56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f52e60f70a2e31979f897319ef95b087d604ac56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e7c9a2248fbefdffb35dabbbb2c7c5c26d97f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7c9a2248fbefdffb35dabbbb2c7c5c26d97f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7c9a2248fbefdffb35dabbbb2c7c5c26d97f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7c9a2248fbefdffb35dabbbb2c7c5c26d97f70/comments", "author": null, "committer": null, "parents": [{"sha": "f79322f009eae6df119616d01293e878b5d1418e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79322f009eae6df119616d01293e878b5d1418e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f79322f009eae6df119616d01293e878b5d1418e"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "b407896e3eafa9c0e95037f752644efa2378136c", "filename": "gcc/expr.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7c9a2248fbefdffb35dabbbb2c7c5c26d97f70/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7c9a2248fbefdffb35dabbbb2c7c5c26d97f70/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4e7c9a2248fbefdffb35dabbbb2c7c5c26d97f70", "patch": "@@ -2074,7 +2074,10 @@ emit_library_call (va_alist)\n      va_dcl\n {\n   va_list p;\n+  /* Total size in bytes of all the stack-parms scanned so far.  */\n   struct args_size args_size;\n+  /* Size of arguments before any adjustments (such as rounding).  */\n+  struct args_size original_args_size;\n   register int argnum;\n   enum machine_mode outmode;\n   int nargs;\n@@ -2196,6 +2199,7 @@ emit_library_call (va_alist)\n      functions, write one out.  */\n   assemble_external_libcall (fun);\n \n+  original_args_size = args_size;\n #ifdef STACK_BOUNDARY\n   args_size.constant = (((args_size.constant + (STACK_BYTES - 1))\n \t\t\t / STACK_BYTES) * STACK_BYTES);\n@@ -2219,6 +2223,16 @@ emit_library_call (va_alist)\n   argblock = push_block (GEN_INT (args_size.constant), 0, 0);\n #endif\n \n+#ifdef PUSH_ARGS_REVERSED\n+#ifdef STACK_BOUNDARY\n+  /* If we push args individually in reverse order, perform stack alignment\n+     before the first push (the last arg).  */\n+  if (argblock == 0)\n+    anti_adjust_stack (GEN_INT (args_size.constant\n+\t\t\t\t- original_args_size.constant));\n+#endif\n+#endif\n+\n #ifdef PUSH_ARGS_REVERSED\n   inc = -1;\n   argnum = nargs - 1;\n@@ -2242,6 +2256,16 @@ emit_library_call (va_alist)\n       NO_DEFER_POP;\n     }\n \n+#ifndef PUSH_ARGS_REVERSED\n+#ifdef STACK_BOUNDARY\n+  /* If we pushed args in forward order, perform stack alignment\n+     after pushing the last arg.  */\n+  if (argblock == 0)\n+    anti_adjust_stack (GEN_INT (args_size.constant\n+\t\t\t\t- original_args_size.constant));\n+#endif\n+#endif\n+\n #ifdef PUSH_ARGS_REVERSED\n   argnum = nargs - 1;\n #else\n@@ -2301,7 +2325,10 @@ emit_library_call_value (va_alist)\n      va_dcl\n {\n   va_list p;\n+  /* Total size in bytes of all the stack-parms scanned so far.  */\n   struct args_size args_size;\n+  /* Size of arguments before any adjustments (such as rounding).  */\n+  struct args_size original_args_size;\n   register int argnum;\n   enum machine_mode outmode;\n   int nargs;\n@@ -2438,6 +2465,7 @@ emit_library_call_value (va_alist)\n      functions, write one out.  */\n   assemble_external_libcall (fun);\n \n+  original_args_size = args_size;\n #ifdef STACK_BOUNDARY\n   args_size.constant = (((args_size.constant + (STACK_BYTES - 1))\n \t\t\t / STACK_BYTES) * STACK_BYTES);\n@@ -2461,6 +2489,16 @@ emit_library_call_value (va_alist)\n   argblock = push_block (GEN_INT (args_size.constant), 0, 0);\n #endif\n \n+#ifdef PUSH_ARGS_REVERSED\n+#ifdef STACK_BOUNDARY\n+  /* If we push args individually in reverse order, perform stack alignment\n+     before the first push (the last arg).  */\n+  if (argblock == 0)\n+    anti_adjust_stack (GEN_INT (args_size.constant\n+\t\t\t\t- original_args_size.constant));\n+#endif\n+#endif\n+\n #ifdef PUSH_ARGS_REVERSED\n   inc = -1;\n   argnum = nargs - 1;\n@@ -2484,6 +2522,16 @@ emit_library_call_value (va_alist)\n       NO_DEFER_POP;\n     }\n \n+#ifndef PUSH_ARGS_REVERSED\n+#ifdef STACK_BOUNDARY\n+  /* If we pushed args in forward order, perform stack alignment\n+     after pushing the last arg.  */\n+  if (argblock == 0)\n+    anti_adjust_stack (GEN_INT (args_size.constant\n+\t\t\t\t- original_args_size.constant));\n+#endif\n+#endif\n+\n #ifdef PUSH_ARGS_REVERSED\n   argnum = nargs - 1;\n #else"}]}