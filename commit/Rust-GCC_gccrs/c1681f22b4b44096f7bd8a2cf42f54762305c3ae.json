{"sha": "c1681f22b4b44096f7bd8a2cf42f54762305c3ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2ODFmMjJiNGI0NDA5NmY3YmQ4YTJjZjQyZjU0NzYyMzA1YzNhZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-20T08:57:49Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-03T10:47:23Z"}, "message": "Simplify option handling for -fsanitize-coverage\n\ngcc/ChangeLog:\n\n\t* common.opt: Use proper Enum values.\n\t* opts.c (COVERAGE_SANITIZER_OPT): Remove.\n\t(parse_sanitizer_options): Handle only sanitizer_opts.\n\t(common_handle_option): Just assign value.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/spellcheck-options-23.c: New test.", "tree": {"sha": "1e5368fa2eee765c91756115bb3616649bb8cfa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e5368fa2eee765c91756115bb3616649bb8cfa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1681f22b4b44096f7bd8a2cf42f54762305c3ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1681f22b4b44096f7bd8a2cf42f54762305c3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1681f22b4b44096f7bd8a2cf42f54762305c3ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1681f22b4b44096f7bd8a2cf42f54762305c3ae/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad085ef5fb4142df2027f81ea03992fdafc6e2f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad085ef5fb4142df2027f81ea03992fdafc6e2f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad085ef5fb4142df2027f81ea03992fdafc6e2f6"}], "stats": {"total": 57, "additions": 25, "deletions": 32}, "files": [{"sha": "7f5fc39911ec4c4c1859d0d2a3a72b807bfdd8d0", "filename": "gcc/common.opt", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1681f22b4b44096f7bd8a2cf42f54762305c3ae/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1681f22b4b44096f7bd8a2cf42f54762305c3ae/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c1681f22b4b44096f7bd8a2cf42f54762305c3ae", "patch": "@@ -1037,9 +1037,18 @@ Common Driver Joined\n Select what to sanitize.\n \n fsanitize-coverage=\n-Common Joined\n+Common Joined RejectNegative Enum(sanitize_coverage)\n Select type of coverage sanitization.\n \n+Enum\n+Name(sanitize_coverage) Type(int)\n+\n+EnumValue\n+Enum(sanitize_coverage) String(trace-pc) Value(SANITIZE_COV_TRACE_PC)\n+\n+EnumValue\n+Enum(sanitize_coverage) String(trace-cmp) Value(SANITIZE_COV_TRACE_CMP)\n+\n fasan-shadow-offset=\n Common Joined RejectNegative Var(common_deferred_options) Defer\n -fasan-shadow-offset=<number>\tUse custom shadow memory offset."}, {"sha": "52e9e3a9df9093a9fb879bcdfb1cb786a1e3996e", "filename": "gcc/opts.c", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1681f22b4b44096f7bd8a2cf42f54762305c3ae/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1681f22b4b44096f7bd8a2cf42f54762305c3ae/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c1681f22b4b44096f7bd8a2cf42f54762305c3ae", "patch": "@@ -1908,17 +1908,6 @@ const struct sanitizer_opts_s sanitizer_opts[] =\n   { NULL, 0U, 0UL, false }\n };\n \n-/* -f{,no-}sanitize-coverage= suboptions.  */\n-const struct sanitizer_opts_s coverage_sanitizer_opts[] =\n-{\n-#define COVERAGE_SANITIZER_OPT(name, flags) \\\n-    { #name, flags, sizeof #name - 1, true }\n-  COVERAGE_SANITIZER_OPT (trace-pc, SANITIZE_COV_TRACE_PC),\n-  COVERAGE_SANITIZER_OPT (trace-cmp, SANITIZE_COV_TRACE_CMP),\n-#undef COVERAGE_SANITIZER_OPT\n-  { NULL, 0U, 0UL, false }\n-};\n-\n /* -fzero-call-used-regs= suboptions.  */\n const struct zero_call_used_regs_opts_s zero_call_used_regs_opts[] =\n {\n@@ -1969,8 +1958,7 @@ struct edit_distance_traits<const string_fragment &>\n /* Given ARG, an unrecognized sanitizer option, return the best\n    matching sanitizer option, or NULL if there isn't one.\n    OPTS is array of candidate sanitizer options.\n-   CODE is OPT_fsanitize_, OPT_fsanitize_recover_ or\n-   OPT_fsanitize_coverage_.\n+   CODE is OPT_fsanitize_ or OPT_fsanitize_recover_.\n    VALUE is non-zero for the regular form of the option, zero\n    for the \"no-\" form (e.g. \"-fno-sanitize-recover=\").  */\n \n@@ -2010,12 +1998,6 @@ parse_sanitizer_options (const char *p, location_t loc, int scode,\n {\n   enum opt_code code = (enum opt_code) scode;\n \n-  const struct sanitizer_opts_s *opts;\n-  if (code == OPT_fsanitize_coverage_)\n-    opts = coverage_sanitizer_opts;\n-  else\n-    opts = sanitizer_opts;\n-\n   while (*p != 0)\n     {\n       size_t len, i;\n@@ -2033,11 +2015,12 @@ parse_sanitizer_options (const char *p, location_t loc, int scode,\n \t}\n \n       /* Check to see if the string matches an option class name.  */\n-      for (i = 0; opts[i].name != NULL; ++i)\n-\tif (len == opts[i].len && memcmp (p, opts[i].name, len) == 0)\n+      for (i = 0; sanitizer_opts[i].name != NULL; ++i)\n+\tif (len == sanitizer_opts[i].len\n+\t    && memcmp (p, sanitizer_opts[i].name, len) == 0)\n \t  {\n \t    /* Handle both -fsanitize and -fno-sanitize cases.  */\n-\t    if (value && opts[i].flag == ~0U)\n+\t    if (value && sanitizer_opts[i].flag == ~0U)\n \t      {\n \t\tif (code == OPT_fsanitize_)\n \t\t  {\n@@ -2054,14 +2037,14 @@ parse_sanitizer_options (const char *p, location_t loc, int scode,\n \t\t   -fsanitize-recover=return if -fsanitize-recover=undefined\n \t\t   is selected.  */\n \t\tif (code == OPT_fsanitize_recover_\n-\t\t    && opts[i].flag == SANITIZE_UNDEFINED)\n+\t\t    && sanitizer_opts[i].flag == SANITIZE_UNDEFINED)\n \t\t  flags |= (SANITIZE_UNDEFINED\n \t\t\t    & ~(SANITIZE_UNREACHABLE | SANITIZE_RETURN));\n \t\telse\n-\t\t  flags |= opts[i].flag;\n+\t\t  flags |= sanitizer_opts[i].flag;\n \t      }\n \t    else\n-\t      flags &= ~opts[i].flag;\n+\t      flags &= ~sanitizer_opts[i].flag;\n \t    found = true;\n \t    break;\n \t  }\n@@ -2070,13 +2053,11 @@ parse_sanitizer_options (const char *p, location_t loc, int scode,\n \t{\n \t  const char *hint\n \t    = get_closest_sanitizer_option (string_fragment (p, len),\n-\t\t\t\t\t    opts, code, value);\n+\t\t\t\t\t    sanitizer_opts, code, value);\n \n \t  const char *suffix;\n \t  if (code == OPT_fsanitize_recover_)\n \t    suffix = \"-recover\";\n-\t  else if (code == OPT_fsanitize_coverage_)\n-\t    suffix = \"-coverage\";\n \t  else\n \t    suffix = \"\";\n \n@@ -2527,9 +2508,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fsanitize_coverage_:\n-      opts->x_flag_sanitize_coverage\n-\t= parse_sanitizer_options (arg, loc, code,\n-\t\t\t\t   opts->x_flag_sanitize_coverage, value, true);\n+      opts->x_flag_sanitize_coverage = value;\n       break;\n \n     case OPT_O:"}, {"sha": "575a28da5045036ff8306fc6dda6d75316ca273d", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-23.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1681f22b4b44096f7bd8a2cf42f54762305c3ae/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1681f22b4b44096f7bd8a2cf42f54762305c3ae/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-23.c?ref=c1681f22b4b44096f7bd8a2cf42f54762305c3ae", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-coverage=tracecmp\" } */\n+\n+/* { dg-error \"unrecognized argument in option '-fsanitize-coverage=tracecmp'\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"valid arguments to '-fsanitize-coverage=' are: trace-cmp trace-pc; did you mean 'trace-cmp'?\" \"\" { target *-*-* } 0 } */"}]}