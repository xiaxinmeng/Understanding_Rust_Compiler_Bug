{"sha": "a260bce67642765094ec0bbfa3687876c7a2f51c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2MGJjZTY3NjQyNzY1MDk0ZWMwYmJmYTM2ODc4NzZjN2EyZjUxYw==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2003-03-20T21:14:30Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2003-03-20T21:14:30Z"}, "message": "cp-tree.h (unemitted_tinfo_decls): Declaration of a new varray.\n\n\t* cp-tree.h (unemitted_tinfo_decls): Declaration of a new varray.\n\t(unemitted_tinfo_decl_p): Remove.\n\t(emit_tinfo_decl): Change declaration to remove unused parameter.\n\t* decl2.c (finish_file): Change tinfo emission to loop through\n\tunemitted_tinfo_decls array instead of looping through all decls.\n\t* rtti.c (unemitted_tinfo_decl_p): Declare as static, remove\n\tunused second parameter.\n\t(init_rtti_processing): initialize unemitted_tinfo_decls varray.\n\t(get_tinfo_decls): push new tinfo decl on unemitted_tinfo_decls.\n\t(emit_tinfo_decl): remove unused second parameter, add assertion\n\tthat decl hasn't already been emitted.\n\nFrom-SVN: r64621", "tree": {"sha": "4beefd450f4f5c3baa474b410f8a4e40a2189ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4beefd450f4f5c3baa474b410f8a4e40a2189ca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a260bce67642765094ec0bbfa3687876c7a2f51c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a260bce67642765094ec0bbfa3687876c7a2f51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a260bce67642765094ec0bbfa3687876c7a2f51c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a260bce67642765094ec0bbfa3687876c7a2f51c/comments", "author": null, "committer": null, "parents": [{"sha": "d0940a55f800ad463e270ab8c86dfc53600a49a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0940a55f800ad463e270ab8c86dfc53600a49a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0940a55f800ad463e270ab8c86dfc53600a49a6"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "7c263488cbbf1b0f5fbb5773ddde9b9ef7165cda", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a260bce67642765094ec0bbfa3687876c7a2f51c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a260bce67642765094ec0bbfa3687876c7a2f51c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a260bce67642765094ec0bbfa3687876c7a2f51c", "patch": "@@ -1,3 +1,17 @@\n+2003-03-14  Matt Austern  <austern@apple.com>\n+\n+\t* cp-tree.h (unemitted_tinfo_decls): Declaration of a new varray.\n+\t(unemitted_tinfo_decl_p): Remove.\n+\t(emit_tinfo_decl): Change declaration to remove unused parameter.\n+\t* decl2.c (finish_file): Change tinfo emission to loop through\n+\tunemitted_tinfo_decls array instead of looping through all decls.\n+\t* rtti.c (unemitted_tinfo_decl_p): Declare as static, remove\n+\tunused second parameter.\n+\t(init_rtti_processing): initialize unemitted_tinfo_decls varray.\n+\t(get_tinfo_decls): push new tinfo decl on unemitted_tinfo_decls.\n+\t(emit_tinfo_decl): remove unused second parameter, add assertion\n+\tthat decl hasn't already been emitted.\t\n+\t\n 2003-03-19  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* dump.c (cp_dump_tree), cp-tree.h (cp_dump_tree): Change return"}, {"sha": "2a207a1a7f91765cff918bd246d48e1484d5aeac", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a260bce67642765094ec0bbfa3687876c7a2f51c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a260bce67642765094ec0bbfa3687876c7a2f51c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a260bce67642765094ec0bbfa3687876c7a2f51c", "patch": "@@ -4062,14 +4062,16 @@ extern void init_repo (const char *);\n extern void finish_repo (void);\n \n /* in rtti.c */\n+/* A varray of all tinfo decls that haven't been emitted yet. */\n+extern GTY(()) varray_type unemitted_tinfo_decls;\n+\n extern void init_rtti_processing (void);\n extern tree build_typeid (tree);\n extern tree get_tinfo_decl (tree);\n extern tree get_typeid (tree);\n extern tree build_dynamic_cast (tree, tree);\n extern void emit_support_tinfos (void);\n-extern bool unemitted_tinfo_decl_p (tree, void *);\n-extern bool emit_tinfo_decl (tree *, void *);\n+extern bool emit_tinfo_decl (tree);\n \n /* in search.c */\n extern tree lookup_base (tree, tree, base_access, base_kind *);"}, {"sha": "1ba80d7a7d8130cbaee4cf026cc71b38d522cdd0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a260bce67642765094ec0bbfa3687876c7a2f51c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a260bce67642765094ec0bbfa3687876c7a2f51c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a260bce67642765094ec0bbfa3687876c7a2f51c", "patch": "@@ -2595,6 +2595,7 @@ finish_file ()\n   do \n     {\n       tree t;\n+      size_t n_old, n_new;\n \n       reconsider = false;\n \n@@ -2611,7 +2612,7 @@ finish_file ()\n       while (keyed_classes != NULL_TREE\n  \t     && maybe_emit_vtables (TREE_VALUE (keyed_classes)))\n  \t{\n-  \t  reconsider = 1;\n+  \t  reconsider = true;\n  \t  keyed_classes = TREE_CHAIN (keyed_classes);\n  \t}\n  \n@@ -2624,7 +2625,7 @@ finish_file ()\n  \t    {\n  \t      if (maybe_emit_vtables (TREE_VALUE (next)))\n  \t\t{\n- \t\t  reconsider = 1;\n+ \t\t  reconsider = true;\n  \t\t  TREE_CHAIN (t) = TREE_CHAIN (next);\n  \t\t}\n  \t      else\n@@ -2634,10 +2635,34 @@ finish_file ()\n  \t    }\n  \t}\n        \n-      /* Write out needed type info variables. Writing out one variable\n-         might cause others to be needed.  */\n-      if (walk_globals (unemitted_tinfo_decl_p, emit_tinfo_decl, /*data=*/0))\n-\treconsider = true;\n+      /* Write out needed type info variables.  We have to be careful\n+ \t looping through unemitted decls, because emit_tinfo_decl may\n+ \t cause other variables to be needed.  We stick new elements\n+ \t (and old elements that we may need to reconsider) at the end\n+ \t of the array, then shift them back to the beginning once we're\n+ \t done. */\n+  \n+      n_old = VARRAY_ACTIVE_SIZE (unemitted_tinfo_decls);\n+      for (i = 0; i < n_old; ++i)\n+  \t{\n+  \t  tree tinfo_decl = VARRAY_TREE (unemitted_tinfo_decls, i);\n+  \t  if (emit_tinfo_decl (tinfo_decl))\n+ \t    reconsider = true;\n+  \t  else\n+  \t    VARRAY_PUSH_TREE (unemitted_tinfo_decls, tinfo_decl);\n+  \t}\n+  \n+      /* The only elements we want to keep are the new ones.  Copy\n+  \t them to the beginning of the array, then get rid of the\n+  \t leftovers. */\n+      n_new = VARRAY_ACTIVE_SIZE (unemitted_tinfo_decls) - n_old;\n+      memmove (&VARRAY_TREE (unemitted_tinfo_decls, 0),\n+  \t       &VARRAY_TREE (unemitted_tinfo_decls, n_old),\n+  \t       n_new * sizeof (tree));\n+      memset (&VARRAY_TREE (unemitted_tinfo_decls, n_new),\n+  \t      0,\n+  \t      n_old * sizeof (tree));\n+      VARRAY_ACTIVE_SIZE (unemitted_tinfo_decls) = n_new;\n \n       /* The list of objects with static storage duration is built up\n \t in reverse order.  We clear STATIC_AGGREGATES so that any new"}, {"sha": "a9a7cdbcea084feb2f0bd840c143c3677e4f4efd", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a260bce67642765094ec0bbfa3687876c7a2f51c/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a260bce67642765094ec0bbfa3687876c7a2f51c/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a260bce67642765094ec0bbfa3687876c7a2f51c", "patch": "@@ -73,6 +73,9 @@ Boston, MA 02111-1307, USA.  */\n /* The IDENTIFIER_NODE naming the real class.  */\n #define TINFO_REAL_NAME(NODE) TREE_PURPOSE (NODE)\n \n+/* A varray of all tinfo decls that haven't yet been emitted. */\n+varray_type unemitted_tinfo_decls;\n+\n static tree build_headof PARAMS((tree));\n static tree ifnonnull PARAMS((tree, tree));\n static tree tinfo_name PARAMS((tree));\n@@ -97,6 +100,7 @@ static tree get_pseudo_ti_init PARAMS ((tree, tree, bool *));\n static tree get_pseudo_ti_desc PARAMS((tree));\n static void create_tinfo_types PARAMS((void));\n static bool typeinfo_in_lib_p (tree);\n+static bool unemitted_tinfo_decl_p PARAMS((tree));\n \n static int doing_runtime = 0;\n \f\n@@ -122,6 +126,8 @@ init_rtti_processing (void)\n   type_info_ptr_type = build_pointer_type (const_type_info_type);\n   type_info_ref_type = build_reference_type (const_type_info_type);\n \n+  VARRAY_TREE_INIT (unemitted_tinfo_decls, 10, \"RTTI decls\");\n+\n   create_tinfo_types ();\n }\n \n@@ -367,6 +373,10 @@ get_tinfo_decl (tree type)\n \n       /* Remember the type it is for.  */\n       TREE_TYPE (name) = type;\n+\n+      /* Add decl to the global array of tinfo decls. */\n+      my_friendly_assert (unemitted_tinfo_decls != 0, 20030312);\n+      VARRAY_PUSH_TREE (unemitted_tinfo_decls, d);\n     }\n \n   return d;\n@@ -1403,8 +1413,8 @@ emit_support_tinfos (void)\n /* Return true, iff T is a type_info variable which has not had a\n    definition emitted for it.  */\n \n-bool\n-unemitted_tinfo_decl_p (tree t, void *data ATTRIBUTE_UNUSED)\n+static bool\n+unemitted_tinfo_decl_p (tree t)\n {\n   if (/* It's a var decl */\n       TREE_CODE (t) == VAR_DECL\n@@ -1429,13 +1439,14 @@ unemitted_tinfo_decl_p (tree t, void *data ATTRIBUTE_UNUSED)\n    generate the initializer.  */\n \n bool\n-emit_tinfo_decl (tree *decl_ptr, void *data ATTRIBUTE_UNUSED)\n+emit_tinfo_decl (tree decl)\n {\n-  tree decl = *decl_ptr;\n   tree type = TREE_TYPE (DECL_NAME (decl));\n   bool non_public;\n   int in_library = typeinfo_in_lib_p (type);\n   tree var_desc, var_init;\n+\n+  my_friendly_assert (unemitted_tinfo_decl_p (decl), 20030307); \n   \n   import_export_tinfo (decl, type, in_library);\n   if (DECL_REALLY_EXTERN (decl) || !DECL_NEEDED_P (decl))"}]}