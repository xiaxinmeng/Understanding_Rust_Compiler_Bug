{"sha": "33074e5fe7854810796e1b4a180622be8656eac9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMwNzRlNWZlNzg1NDgxMDc5NmUxYjRhMTgwNjIyYmU4NjU2ZWFjOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-31T03:11:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-31T03:11:20Z"}, "message": "sparc.c: Remove all references to TARGET_EPILOGUE.\n\n        * config/sparc/sparc.c: Remove all references to TARGET_EPILOGUE.\n        (sparc_emitting_epilogue): New.\n        (leaf_label, output_return, sparc_return_peephole_ok): Remove.\n        * config/sparc/sparc-protos.h: Update.\n        * config/sparc/sparc.h (MASK_EPILOGUE, TARGET_EPILOGUE): Remove.\n        (TARGET_SWITCHES): Update.\n        * config/sparc/sparc.md (return): Remove.\n        (return_*): Use sparc_emitting_epilogue, not !TARGET_EPILOGUE.\n        * config/sparc/freebsd.h, config/sparc/linux64.h, config/sparc/lite.h,\n        config/sparc/liteelf.h, config/sparc/netbsd-elf.h,\n        config/sparc/sol2-sld-64.h, config/sparc/sol2.h,\n        config/sparc/sp64-aout.h, config/sparc/sp64-elf.h,\n        config/sparc/sp86x-aout.h, config/sparc/sp86x-elf.h,\n        config/sparc/splet.h, config/sparc/vxsparc64.h (TARGET_DEFAULT):\n        Remove MASK_EPILOGUE.\n        * doc/invoke.texi: Update.\n\nFrom-SVN: r51626", "tree": {"sha": "041dd45bacbf6d0c89075be5a23f09e3ace928af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/041dd45bacbf6d0c89075be5a23f09e3ace928af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33074e5fe7854810796e1b4a180622be8656eac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33074e5fe7854810796e1b4a180622be8656eac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33074e5fe7854810796e1b4a180622be8656eac9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33074e5fe7854810796e1b4a180622be8656eac9/comments", "author": null, "committer": null, "parents": [{"sha": "afaef726703929d7bb53a9e32d6ab61ad3ae56d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afaef726703929d7bb53a9e32d6ab61ad3ae56d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afaef726703929d7bb53a9e32d6ab61ad3ae56d7"}], "stats": {"total": 453, "additions": 148, "deletions": 305}, "files": [{"sha": "f11319c29efe7ea622e3844e7f88d13ee780ec75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -1,3 +1,22 @@\n+2002-03-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sparc/sparc.c: Remove all references to TARGET_EPILOGUE.\n+\t(sparc_emitting_epilogue): New.\n+\t(leaf_label, output_return, sparc_return_peephole_ok): Remove.\n+\t* config/sparc/sparc-protos.h: Update.\n+\t* config/sparc/sparc.h (MASK_EPILOGUE, TARGET_EPILOGUE): Remove.\n+\t(TARGET_SWITCHES): Update.\n+\t* config/sparc/sparc.md (return): Remove.\n+\t(return_*): Use sparc_emitting_epilogue, not !TARGET_EPILOGUE.\n+\t* config/sparc/freebsd.h, config/sparc/linux64.h, config/sparc/lite.h,\n+\tconfig/sparc/liteelf.h, config/sparc/netbsd-elf.h,\n+\tconfig/sparc/sol2-sld-64.h, config/sparc/sol2.h,\n+\tconfig/sparc/sp64-aout.h, config/sparc/sp64-elf.h,\n+\tconfig/sparc/sp86x-aout.h, config/sparc/sp86x-elf.h,\n+\tconfig/sparc/splet.h, config/sparc/vxsparc64.h (TARGET_DEFAULT):\n+\tRemove MASK_EPILOGUE.\n+\t* doc/invoke.texi: Update.\n+\n 2002-03-30  Daniel Berlin  <dan@dberlin.org>\n \n \t* dwarf2out.c (dwarf2out_define): Remove start_source_file call,"}, {"sha": "9017839b53c437dccba63bc4a0e85c193b96ad39", "filename": "gcc/config/sparc/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ffreebsd.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -92,7 +92,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef  TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n   (MASK_V9 + MASK_64BIT + MASK_PTR64 /* + MASK_FASTER_STRUCTS */ \\\n-   + MASK_STACK_BIAS + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU \\\n+   + MASK_STACK_BIAS + MASK_APP_REGS + MASK_FPU \\\n    + MASK_LONG_DOUBLE_128 /* + MASK_HARD_QUAD */)\n \n /* The default code model.  */"}, {"sha": "7c31d8760452a1fa43d41032e3712c379ab33e56", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n   (MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ \\\n-   + MASK_STACK_BIAS + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU + MASK_LONG_DOUBLE_128)\n+   + MASK_STACK_BIAS + MASK_APP_REGS + MASK_FPU + MASK_LONG_DOUBLE_128)\n #endif\n \n #undef ASM_CPU_DEFAULT_SPEC"}, {"sha": "95da781812f922c353b45abbb8c5eb67e887cd7d", "filename": "gcc/config/sparc/lite.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Flite.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Flite.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flite.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */\n /* Enable app-regs and epilogue options.  Do not enable the fpu.  */\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n+#define TARGET_DEFAULT MASK_APP_REGS\n \n /* US Software GOFAST library support.  */\n #undef INIT_SUBTARGET_OPTABS"}, {"sha": "5c93c2d943a31698844f27b1bc4deea389354924", "filename": "gcc/config/sparc/liteelf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fliteelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fliteelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fliteelf.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -38,7 +38,7 @@ Boston, MA 02111-1307, USA.  */\n /* Enable app-regs and epilogue options.  Do not enable the fpu.  */\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n+#define TARGET_DEFAULT MASK_APP_REGS\n \n /* US Software GOFAST library support.  */\n #undef INIT_SUBTARGET_OPTABS"}, {"sha": "9ed9b519c8aed213c03909b29655731e08008b25", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -137,8 +137,7 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n   (MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ \\\n- + MASK_STACK_BIAS + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU \\\n- + MASK_LONG_DOUBLE_128)\n+   + MASK_STACK_BIAS + MASK_APP_REGS + MASK_FPU + MASK_LONG_DOUBLE_128)\n \n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_MEDANY"}, {"sha": "2a8eafc95393f754655afbb66cfc9817dd86c8ca", "filename": "gcc/config/sparc/sol2-sld-64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -27,7 +27,7 @@\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n   (MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ + \\\n-   MASK_STACK_BIAS + MASK_EPILOGUE + MASK_FPU + MASK_LONG_DOUBLE_128)\n+   MASK_STACK_BIAS + MASK_FPU + MASK_LONG_DOUBLE_128)\n #endif\n \n /* The default code model.  */"}, {"sha": "3541cace14c13aef59388abfaf8ed23a8a547ac5", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -237,7 +237,7 @@ Boston, MA 02111-1307, USA.  */\n /* Solaris allows 64 bit out and global registers in 32 bit mode.\n    sparc_override_options will disable V8+ if not generating V9 code.  */\n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_EPILOGUE + MASK_FPU + MASK_V8PLUS + MASK_LONG_DOUBLE_128)\n+#define TARGET_DEFAULT (MASK_FPU + MASK_V8PLUS + MASK_LONG_DOUBLE_128)\n \f\n /*\n  * Attempt to turn on access permissions for the stack."}, {"sha": "1af9dea39a2598ecabe690de5cdbeeba495e4deb", "filename": "gcc/config/sparc/sp64-aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n   (MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \\\n-   + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU + MASK_STACK_BIAS)\n+   + MASK_APP_REGS + MASK_FPU + MASK_STACK_BIAS)\n \n /* The only code model supported is Medium/Low.  */\n #undef SPARC_DEFAULT_CMODEL"}, {"sha": "2574c1ee42307de2b5eacfc6f5a0e0c729398c57", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -33,7 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n (MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \\\n- + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU + MASK_STACK_BIAS + MASK_LONG_DOUBLE_128)\n+ + MASK_APP_REGS + MASK_FPU + MASK_STACK_BIAS + MASK_LONG_DOUBLE_128)\n \n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_EMBMEDANY"}, {"sha": "74607d351654ce92968fd3b9d4190ff0e4a3be2f", "filename": "gcc/config/sparc/sp86x-aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsp86x-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsp86x-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp86x-aout.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */\n /* Enable app-regs and epilogue options.  Do not enable the fpu.  */\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n+#define TARGET_DEFAULT MASK_APP_REGS\n \n #undef ASM_SPEC\n #define ASM_SPEC \"%{v:-v} %{mlittle-endian-data:--little-endian-data} %(asm_cpu)\""}, {"sha": "42239a945e15afbf9dff3b8d7920617423d10588", "filename": "gcc/config/sparc/sp86x-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp86x-elf.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -38,7 +38,7 @@ Boston, MA 02111-1307, USA.  */\n /* Enable app-regs and epilogue options.  Do not enable the fpu.  */\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n+#define TARGET_DEFAULT MASK_APP_REGS\n \n #undef ASM_SPEC\n #define ASM_SPEC \"%{v:-V} %{mlittle-endian-data:--little-endian-data} %(asm_cpu)\""}, {"sha": "0f3cef4e0189f058f0c1555628200b697c8f0a03", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -24,6 +24,8 @@ Boston, MA 02111-1307, USA.  */\n #ifndef __SPARC_PROTOS_H__\n #define __SPARC_PROTOS_H__\n \n+extern bool sparc_emitting_epilogue;\n+\n #ifdef TREE_CODE\n extern struct rtx_def *function_value PARAMS ((tree, enum machine_mode, int));\n extern void function_arg_advance PARAMS ((CUMULATIVE_ARGS *,\n@@ -84,7 +86,6 @@ extern void sparc_emit_set_symbolic_const64 PARAMS ((rtx, rtx, rtx));\n extern int sparc_splitdi_legitimate PARAMS ((rtx, rtx));\n extern int sparc_absnegfloat_split_legitimate PARAMS ((rtx, rtx));\n extern char *output_cbranch PARAMS ((rtx, rtx, int, int, int, int, rtx));\n-extern const char *output_return PARAMS ((rtx *));\n extern const char *output_sibcall PARAMS ((rtx, rtx));\n extern char *output_v9branch PARAMS ((rtx, rtx, int, int, int, int, int,\n \t\t\t\t      rtx));\n@@ -115,7 +116,6 @@ extern char *sparc_v8plus_shift PARAMS ((rtx *, rtx, const char *));\n /* Function used for V8+ code generation.  Returns 1 if the high\n    32 bits of REG are 0 before INSN.  */   \n extern int sparc_check_64 PARAMS ((rtx, rtx));\n-extern int sparc_return_peephole_ok PARAMS ((rtx, rtx));\n extern rtx gen_df_reg PARAMS ((rtx, int));\n #endif /* RTX_CODE */\n "}, {"sha": "f2b91886e5917b4ec9eda1b54fdbbefaa71107a4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 98, "deletions": 231, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -68,18 +68,17 @@ Boston, MA 02111-1307, USA.  */\n static int apparent_fsize;\n static int actual_fsize;\n \n-/* Number of live general or floating point registers needed to be saved\n-   (as 4-byte quantities).  This is only done if TARGET_EPILOGUE.  */\n+/* Number of live general or floating point registers needed to be\n+   saved (as 4-byte quantities).  */\n static int num_gfregs;\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n-\n rtx sparc_compare_op0, sparc_compare_op1;\n \n-/* We may need an epilogue if we spill too many registers.\n-   If this is non-zero, then we branch here for the epilogue.  */\n-static rtx leaf_label;\n+/* Coordinate with the md file wrt special insns created by\n+   sparc_nonflat_function_epilogue.  */\n+bool sparc_emitting_epilogue;\n \n #ifdef LEAF_REGISTERS\n \n@@ -3392,31 +3391,28 @@ compute_frame_size (size, leaf_function)\n   int outgoing_args_size = (current_function_outgoing_args_size\n \t\t\t    + REG_PARM_STACK_SPACE (current_function_decl));\n \n-  if (TARGET_EPILOGUE)\n-    {\n-      /* N_REGS is the number of 4-byte regs saved thus far.  This applies\n-\t even to v9 int regs to be consistent with save_regs/restore_regs.  */\n-\n-      if (TARGET_ARCH64)\n-\t{\n-\t  for (i = 0; i < 8; i++)\n-\t    if (regs_ever_live[i] && ! call_used_regs[i])\n-\t      n_regs += 2;\n-\t}\n-      else\n-\t{\n-\t  for (i = 0; i < 8; i += 2)\n-\t    if ((regs_ever_live[i] && ! call_used_regs[i])\n-\t\t|| (regs_ever_live[i+1] && ! call_used_regs[i+1]))\n-\t      n_regs += 2;\n-\t}\n+  /* N_REGS is the number of 4-byte regs saved thus far.  This applies\n+     even to v9 int regs to be consistent with save_regs/restore_regs.  */\n \n-      for (i = 32; i < (TARGET_V9 ? 96 : 64); i += 2)\n+  if (TARGET_ARCH64)\n+    {\n+      for (i = 0; i < 8; i++)\n+\tif (regs_ever_live[i] && ! call_used_regs[i])\n+\t  n_regs += 2;\n+    }\n+  else\n+    {\n+      for (i = 0; i < 8; i += 2)\n \tif ((regs_ever_live[i] && ! call_used_regs[i])\n \t    || (regs_ever_live[i+1] && ! call_used_regs[i+1]))\n \t  n_regs += 2;\n     }\n \n+  for (i = 32; i < (TARGET_V9 ? 96 : 64); i += 2)\n+    if ((regs_ever_live[i] && ! call_used_regs[i])\n+\t|| (regs_ever_live[i+1] && ! call_used_regs[i+1]))\n+      n_regs += 2;\n+\n   /* Set up values for use in `function_epilogue'.  */\n   num_gfregs = n_regs;\n \n@@ -3640,24 +3636,9 @@ sparc_nonflat_function_prologue (file, size, leaf_function)\n \t  base = frame_base_name;\n \t}\n \n-      n_regs = 0;\n-      if (TARGET_EPILOGUE && ! leaf_function)\n-\t/* ??? Originally saved regs 0-15 here.  */\n-\tn_regs = save_regs (file, 0, 8, base, offset, 0, real_offset);\n-      else if (leaf_function)\n-\t/* ??? Originally saved regs 0-31 here.  */\n-\tn_regs = save_regs (file, 0, 8, base, offset, 0, real_offset);\n-      if (TARGET_EPILOGUE)\n-\tsave_regs (file, 32, TARGET_V9 ? 96 : 64, base, offset, n_regs,\n-\t\t   real_offset);\n-    }\n-\n-  leaf_label = 0;\n-  if (leaf_function && actual_fsize != 0)\n-    {\n-      /* warning (\"leaf procedure with frame size %d\", actual_fsize); */\n-      if (! TARGET_EPILOGUE)\n-\tleaf_label = gen_label_rtx ();\n+      n_regs = save_regs (file, 0, 8, base, offset, 0, real_offset);\n+      save_regs (file, 32, TARGET_V9 ? 96 : 64, base, offset, n_regs,\n+\t\t real_offset);\n     }\n }\n \n@@ -3684,15 +3665,8 @@ output_restore_regs (file, leaf_function)\n       base = frame_base_name;\n     }\n \n-  n_regs = 0;\n-  if (TARGET_EPILOGUE && ! leaf_function)\n-    /* ??? Originally saved regs 0-15 here.  */\n-    n_regs = restore_regs (file, 0, 8, base, offset, 0);\n-  else if (leaf_function)\n-    /* ??? Originally saved regs 0-31 here.  */\n-    n_regs = restore_regs (file, 0, 8, base, offset, 0);\n-  if (TARGET_EPILOGUE)\n-    restore_regs (file, 32, TARGET_V9 ? 96 : 64, base, offset, n_regs);\n+  n_regs = restore_regs (file, 0, 8, base, offset, 0);\n+  restore_regs (file, 32, TARGET_V9 ? 96 : 64, base, offset, n_regs);\n }\n \n /* This function generates the assembly code for function exit,\n@@ -3725,12 +3699,6 @@ sparc_nonflat_function_epilogue (file, size, leaf_function)\n {\n   const char *ret;\n \n-  if (leaf_label)\n-    {\n-      emit_label_after (leaf_label, get_last_insn ());\n-      final_scan_insn (get_last_insn (), file, 0, 0, 1);\n-    }\n-\n   if (current_function_epilogue_delay_list == 0)\n     {\n       /* If code does not drop into the epilogue, we need\n@@ -3751,95 +3719,93 @@ sparc_nonflat_function_epilogue (file, size, leaf_function)\n   else\n     ret = (SKIP_CALLERS_UNIMP_P ? \"jmp\\t%i7+12\" : \"ret\");\n \n-  if (TARGET_EPILOGUE || leaf_label)\n+  if (! leaf_function)\n     {\n-      int old_target_epilogue = TARGET_EPILOGUE;\n-      target_flags &= ~old_target_epilogue;\n+      if (current_function_calls_eh_return)\n+\t{\n+\t  if (current_function_epilogue_delay_list)\n+\t    abort ();\n+\t  if (SKIP_CALLERS_UNIMP_P)\n+\t    abort ();\n \n-      if (! leaf_function)\n+\t  fputs (\"\\trestore\\n\\tretl\\n\\tadd\\t%sp, %g1, %sp\\n\", file);\n+\t}\n+      /* If we wound up with things in our delay slot, flush them here.  */\n+      else if (current_function_epilogue_delay_list)\n \t{\n-\t  if (current_function_calls_eh_return)\n-\t    {\n-\t      if (current_function_epilogue_delay_list)\n-\t\tabort ();\n-\t      if (SKIP_CALLERS_UNIMP_P)\n-\t\tabort ();\n+\t  rtx delay = PATTERN (XEXP (current_function_epilogue_delay_list, 0));\n \n-\t      fputs (\"\\trestore\\n\\tretl\\n\\tadd\\t%sp, %g1, %sp\\n\", file);\n+\t  if (TARGET_V9 && ! epilogue_renumber (&delay, 1))\n+\t    {\n+\t      epilogue_renumber (&delay, 0);\n+\t      fputs (SKIP_CALLERS_UNIMP_P\n+\t\t     ? \"\\treturn\\t%i7+12\\n\"\n+\t\t     : \"\\treturn\\t%i7+8\\n\", file);\n+\t      final_scan_insn (XEXP (current_function_epilogue_delay_list, 0),\n+\t\t\t       file, 1, 0, 0);\n \t    }\n-\t  /* If we wound up with things in our delay slot, flush them here.  */\n-\t  else if (current_function_epilogue_delay_list)\n+\t  else\n \t    {\n-\t      rtx delay = PATTERN (XEXP (current_function_epilogue_delay_list, 0));\n+\t      rtx insn, src;\n \n-\t      if (TARGET_V9 && ! epilogue_renumber (&delay, 1))\n-\t\t{\n-\t\t  epilogue_renumber (&delay, 0);\n-\t\t  fputs (SKIP_CALLERS_UNIMP_P\n-\t\t\t ? \"\\treturn\\t%i7+12\\n\"\n-\t\t\t : \"\\treturn\\t%i7+8\\n\", file);\n-\t\t  final_scan_insn (XEXP (current_function_epilogue_delay_list, 0), file, 1, 0, 0);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  rtx insn = emit_jump_insn_after (gen_rtx_RETURN (VOIDmode),\n-\t\t\t\t\t\t   get_last_insn ());\n-\t\t  rtx src;\n+\t      if (GET_CODE (delay) != SET)\n+\t\tabort();\n \n-\t\t  if (GET_CODE (delay) != SET)\n+\t      src = SET_SRC (delay);\n+\t      if (GET_CODE (src) == ASHIFT)\n+\t\t{\n+\t\t  if (XEXP (src, 1) != const1_rtx)\n \t\t    abort();\n+\t\t  SET_SRC (delay)\n+\t\t    = gen_rtx_PLUS (GET_MODE (src), XEXP (src, 0),\n+\t\t\t\t    XEXP (src, 0));\n+\t\t}\n \n-\t\t  src = SET_SRC (delay);\n-\t\t  if (GET_CODE (src) == ASHIFT)\n-\t\t    {\n-\t\t      if (XEXP (src, 1) != const1_rtx)\n-\t\t\tabort();\n-\t\t      SET_SRC (delay) = gen_rtx_PLUS (GET_MODE (src), XEXP (src, 0),\n-\t\t\t\t\t\t      XEXP (src, 0));\n-\t\t    }\n+\t      insn = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t\t       gen_rtvec (2, delay,\n+\t\t\t\t\t\t  gen_rtx_RETURN (VOIDmode)));\n+\t      insn = emit_jump_insn (insn);\n \n-\t\t  PATTERN (insn) = gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t\t\tgen_rtvec (2, delay, PATTERN (insn)));\n-\t\t  final_scan_insn (insn, file, 1, 0, 1);\n-\t\t}\n+\t      sparc_emitting_epilogue = true;\n+\t      final_scan_insn (insn, file, 1, 0, 1);\n+\t      sparc_emitting_epilogue = false;\n \t    }\n-\t  else if (TARGET_V9 && ! SKIP_CALLERS_UNIMP_P)\n-\t    fputs (\"\\treturn\\t%i7+8\\n\\tnop\\n\", file);\n-\t  else\n-\t    fprintf (file, \"\\t%s\\n\\trestore\\n\", ret);\n \t}\n-      else if (current_function_calls_eh_return)\n+      else if (TARGET_V9 && ! SKIP_CALLERS_UNIMP_P)\n+\tfputs (\"\\treturn\\t%i7+8\\n\\tnop\\n\", file);\n+      else\n+\tfprintf (file, \"\\t%s\\n\\trestore\\n\", ret);\n+    }\n+  /* All of the following cases are for leaf functions.  */\n+  else if (current_function_calls_eh_return)\n+    abort ();\n+  else if (current_function_epilogue_delay_list)\n+    {\n+      /* eligible_for_epilogue_delay_slot ensures that if this is a\n+\t leaf function, then we will only have insn in the delay slot\n+\t if the frame size is zero, thus no adjust for the stack is\n+\t needed here.  */\n+      if (actual_fsize != 0)\n \tabort ();\n-      /* All of the following cases are for leaf functions.  */\n-      else if (current_function_epilogue_delay_list)\n-\t{\n-\t  /* eligible_for_epilogue_delay_slot ensures that if this is a\n-\t     leaf function, then we will only have insn in the delay slot\n-\t     if the frame size is zero, thus no adjust for the stack is\n-\t     needed here.  */\n-\t  if (actual_fsize != 0)\n-\t    abort ();\n-\t  fprintf (file, \"\\t%s\\n\", ret);\n-\t  final_scan_insn (XEXP (current_function_epilogue_delay_list, 0),\n-\t\t\t   file, 1, 0, 1);\n-\t}\n-      /* Output 'nop' instead of 'sub %sp,-0,%sp' when no frame, so as to\n-\t avoid generating confusing assembly language output.  */\n-      else if (actual_fsize == 0)\n-\tfprintf (file, \"\\t%s\\n\\tnop\\n\", ret);\n-      else if (actual_fsize <= 4096)\n-\tfprintf (file, \"\\t%s\\n\\tsub\\t%%sp, -%d, %%sp\\n\", ret, actual_fsize);\n-      else if (actual_fsize <= 8192)\n-\tfprintf (file, \"\\tsub\\t%%sp, -4096, %%sp\\n\\t%s\\n\\tsub\\t%%sp, -%d, %%sp\\n\",\n-\t\t ret, actual_fsize - 4096);\n-      else if ((actual_fsize & 0x3ff) == 0)\n-\tfprintf (file, \"\\tsethi\\t%%hi(%d), %%g1\\n\\t%s\\n\\tadd\\t%%sp, %%g1, %%sp\\n\",\n-\t\t actual_fsize, ret);\n-      else\t\t \n-\tfprintf (file, \"\\tsethi\\t%%hi(%d), %%g1\\n\\tor\\t%%g1, %%lo(%d), %%g1\\n\\t%s\\n\\tadd\\t%%sp, %%g1, %%sp\\n\",\n-\t\t actual_fsize, actual_fsize, ret);\n-      target_flags |= old_target_epilogue;\n+      fprintf (file, \"\\t%s\\n\", ret);\n+      final_scan_insn (XEXP (current_function_epilogue_delay_list, 0),\n+\t\t       file, 1, 0, 1);\n     }\n+  /* Output 'nop' instead of 'sub %sp,-0,%sp' when no frame, so as to\n+\t avoid generating confusing assembly language output.  */\n+  else if (actual_fsize == 0)\n+    fprintf (file, \"\\t%s\\n\\tnop\\n\", ret);\n+  else if (actual_fsize <= 4096)\n+    fprintf (file, \"\\t%s\\n\\tsub\\t%%sp, -%d, %%sp\\n\", ret, actual_fsize);\n+  else if (actual_fsize <= 8192)\n+    fprintf (file, \"\\tsub\\t%%sp, -4096, %%sp\\n\\t%s\\n\\tsub\\t%%sp, -%d, %%sp\\n\",\n+\t     ret, actual_fsize - 4096);\n+  else if ((actual_fsize & 0x3ff) == 0)\n+    fprintf (file, \"\\tsethi\\t%%hi(%d), %%g1\\n\\t%s\\n\\tadd\\t%%sp, %%g1, %%sp\\n\",\n+\t     actual_fsize, ret);\n+  else\t\t \n+    fprintf (file, \"\\tsethi\\t%%hi(%d), %%g1\\n\\tor\\t%%g1, %%lo(%d), %%g1\\n\\t%s\\n\\tadd\\t%%sp, %%g1, %%sp\\n\",\n+\t     actual_fsize, actual_fsize, ret);\n \n  output_vectors:\n   sparc_output_deferred_case_vectors ();\n@@ -5699,87 +5665,6 @@ epilogue_renumber (where, test)\n     }\n   return 0;\n }\n-\n-/* Output assembler code to return from a function.  */\n-\n-const char *\n-output_return (operands)\n-     rtx *operands;\n-{\n-  rtx delay = final_sequence ? XVECEXP (final_sequence, 0, 1) : 0;\n-\n-  if (leaf_label)\n-    {\n-      operands[0] = leaf_label;\n-      return \"b%* %l0%(\";\n-    }\n-  else if (current_function_uses_only_leaf_regs)\n-    {\n-      /* No delay slot in a leaf function.  */\n-      if (delay)\n-\tabort ();\n-\n-      /* If we didn't allocate a frame pointer for the current function,\n-\t the stack pointer might have been adjusted.  Output code to\n-\t restore it now.  */\n-\n-      operands[0] = GEN_INT (actual_fsize);\n-\n-      /* Use sub of negated value in first two cases instead of add to\n-\t allow actual_fsize == 4096.  */\n-\n-      if (actual_fsize <= 4096)\n-\t{\n-\t  if (SKIP_CALLERS_UNIMP_P)\n-\t    return \"jmp\\t%%o7+12\\n\\tsub\\t%%sp, -%0, %%sp\";\n-\t  else\n-\t    return \"retl\\n\\tsub\\t%%sp, -%0, %%sp\";\n-\t}\n-      else if (actual_fsize <= 8192)\n-\t{\n-\t  operands[0] = GEN_INT (actual_fsize - 4096);\n-\t  if (SKIP_CALLERS_UNIMP_P)\n-\t    return \"sub\\t%%sp, -4096, %%sp\\n\\tjmp\\t%%o7+12\\n\\tsub\\t%%sp, -%0, %%sp\";\n-\t  else\n-\t    return \"sub\\t%%sp, -4096, %%sp\\n\\tretl\\n\\tsub\\t%%sp, -%0, %%sp\";\n-\t}\n-      else if (SKIP_CALLERS_UNIMP_P)\n-\t{\n-\t  if ((actual_fsize & 0x3ff) != 0)\n-\t    return \"sethi\\t%%hi(%a0), %%g1\\n\\tor\\t%%g1, %%lo(%a0), %%g1\\n\\tjmp\\t%%o7+12\\n\\tadd\\t%%sp, %%g1, %%sp\";\n-\t  else\n-\t    return \"sethi\\t%%hi(%a0), %%g1\\n\\tjmp\\t%%o7+12\\n\\tadd\\t%%sp, %%g1, %%sp\";\n-\t}\n-      else\n-\t{\n-\t  if ((actual_fsize & 0x3ff) != 0)\n-\t    return \"sethi\\t%%hi(%a0), %%g1\\n\\tor\\t%%g1, %%lo(%a0), %%g1\\n\\tretl\\n\\tadd\\t%%sp, %%g1, %%sp\";\n-\t  else\n-\t    return \"sethi\\t%%hi(%a0), %%g1\\n\\tretl\\n\\tadd\\t%%sp, %%g1, %%sp\";\n-\t}\n-    }\n-  else if (TARGET_V9)\n-    {\n-      if (delay)\n-\t{\n-\t  epilogue_renumber (&SET_DEST (PATTERN (delay)), 0);\n-\t  epilogue_renumber (&SET_SRC (PATTERN (delay)), 0);\n-\t}\n-      if (SKIP_CALLERS_UNIMP_P)\n-\treturn \"return\\t%%i7+12%#\";\n-      else\n-\treturn \"return\\t%%i7+8%#\";\n-    }\n-  else\n-    {\n-      if (delay)\n-\tabort ();\n-      if (SKIP_CALLERS_UNIMP_P)\n-\treturn \"jmp\\t%%i7+12\\n\\trestore\";\n-      else\n-\treturn \"ret\\n\\trestore\";\n-    }\n-}\n \f\n /* Leaf functions and non-leaf functions have different needs.  */\n \n@@ -8593,23 +8478,6 @@ sparc_v8plus_shift (operands, insn, opcode)\n   else\n     return strcat (asm_code, \"\\t%3, %2, %3\\n\\tsrlx\\t%3, 32, %H0\\n\\tmov\\t%3, %L0\");\n }\n-\n-\n-/* Return 1 if DEST and SRC reference only global and in registers.  */\n-\n-int\n-sparc_return_peephole_ok (dest, src)\n-     rtx dest, src;\n-{\n-  if (! TARGET_V9)\n-    return 0;\n-  if (current_function_uses_only_leaf_regs)\n-    return 0;\n-  if (GET_CODE (src) != CONST_INT\n-      && (GET_CODE (src) != REG || ! IN_OR_GLOBAL_P (src)))\n-    return 0;\n-  return IN_OR_GLOBAL_P (dest);\n-}\n \f\n /* Output rtl to increment the profiler label LABELNO\n    for profiling a function entry.  */\n@@ -8651,7 +8519,6 @@ sparc_add_gc_roots ()\n {\n   ggc_add_rtx_root (&sparc_compare_op0, 1);\n   ggc_add_rtx_root (&sparc_compare_op1, 1);\n-  ggc_add_rtx_root (&leaf_label, 1);\n   ggc_add_rtx_root (&global_offset_table, 1);\n   ggc_add_rtx_root (&get_pc_symbol, 1);\n   ggc_add_rtx_root (&sparc_addr_diff_list, 1);"}, {"sha": "d488a8f38bab708336b0fff8f02ddb8a9d81040b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -387,11 +387,6 @@ extern int target_flags;\n #define MASK_FPU 1\n #define TARGET_FPU (target_flags & MASK_FPU)\n \n-/* Nonzero if we should use function_epilogue().  Otherwise, we\n-   use fast return insns, but lose some generality.  */\n-#define MASK_EPILOGUE 2\n-#define TARGET_EPILOGUE (target_flags & MASK_EPILOGUE)\n-\n /* Nonzero if we should assume that double pointers might be unaligned.\n    This can happen when linking gcc compiled code with other compilers,\n    because the ABI only guarantees 4 byte alignment.  */\n@@ -535,10 +530,6 @@ extern int target_flags;\n     {\"soft-float\", -MASK_FPU,\t\t\t\t\t\t\\\n      N_(\"Do not use hardware fp\") },\t\t\t\t\t\\\n     {\"soft-float\", MASK_FPU_SET,\t\t\tNULL },\t\t\\\n-    {\"epilogue\", MASK_EPILOGUE,\t\t\t\t\t\t\\\n-     N_(\"Use function_epilogue()\") },\t\t\t\t\t\\\n-    {\"no-epilogue\", -MASK_EPILOGUE,\t\t\t\t\t\\\n-     N_(\"Do not use function_epilogue()\") }, \t\t\t\t\\\n     {\"unaligned-doubles\", MASK_UNALIGNED_DOUBLES,\t\t\t\\\n      N_(\"Assume possible double misalignment\") },\t\t\t\\\n     {\"no-unaligned-doubles\", -MASK_UNALIGNED_DOUBLES,\t\t\t\\\n@@ -607,7 +598,7 @@ extern int target_flags;\n /* MASK_APP_REGS must always be the default because that's what\n    FIXED_REGISTERS is set to and -ffixed- is processed before\n    CONDITIONAL_REGISTER_USAGE is called (where we process -mno-app-regs).  */\n-#define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU)\n+#define TARGET_DEFAULT (MASK_APP_REGS + MASK_FPU)\n \n /* This is meant to be redefined in target specific files.  */\n #define SUBTARGET_SWITCHES"}, {"sha": "2426db5632dfc4d2bc8e110ac08ce6bacb49417a", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -8744,21 +8744,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"3\")])\n \f\n-(define_insn \"return\"\n-  [(return)\n-   (use (reg:SI 31))]\n-  \"! TARGET_EPILOGUE\"\n-  \"* return output_return (operands);\"\n-  [(set_attr \"type\" \"return\")])\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(match_operand:SI 1 \"arith_operand\" \"rI\"))\n-   (parallel [(return)\n-\t      (use (reg:SI 31))])]\n-  \"sparc_return_peephole_ok (operands[0], operands[1])\"\n-  \"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\")\n-\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\"\n@@ -9155,14 +9140,14 @@\n \t\t   (compare:CC (match_dup 1) (const_int 0)))])]\n   \"\")\n \n-;; Return peepholes.  First the \"normal\" ones.\n-;; These are necessary to catch insns ending up in the epilogue delay list.\n+;; Return peepholes.  These are generated by sparc_nonflat_function_epilogue\n+;; who then immediately calls final_scan_insn.\n \n (define_insn \"*return_qi\"\n   [(set (match_operand:QI 0 \"restore_operand\" \"\")\n \t(match_operand:QI 1 \"arith_operand\" \"rI\"))\n    (return)]\n-  \"! TARGET_EPILOGUE\"\n+  \"sparc_emitting_epilogue\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9180,7 +9165,7 @@\n   [(set (match_operand:HI 0 \"restore_operand\" \"\")\n \t(match_operand:HI 1 \"arith_operand\" \"rI\"))\n    (return)]\n-  \"! TARGET_EPILOGUE\"\n+  \"sparc_emitting_epilogue\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9198,7 +9183,7 @@\n   [(set (match_operand:SI 0 \"restore_operand\" \"\")\n \t(match_operand:SI 1 \"arith_operand\" \"rI\"))\n    (return)]\n-  \"! TARGET_EPILOGUE\"\n+  \"sparc_emitting_epilogue\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9212,15 +9197,11 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n-;; The following pattern is only generated by delayed-branch scheduling,\n-;; when the insn winds up in the epilogue.  This can happen not only when\n-;; ! TARGET_FPU because we move complex types around by parts using\n-;; SF mode SUBREGs.\n (define_insn \"*return_sf_no_fpu\"\n   [(set (match_operand:SF 0 \"restore_operand\" \"=r\")\n \t(match_operand:SF 1 \"register_operand\" \"r\"))\n    (return)]\n-  \"! TARGET_EPILOGUE\"\n+  \"sparc_emitting_epilogue\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9237,7 +9218,7 @@\n   [(set (match_operand:DF 0 \"restore_operand\" \"=r\")\n \t(match_operand:DF 1 \"register_operand\" \"r\"))\n    (return)]\n-  \"! TARGET_EPILOGUE && TARGET_ARCH64\"\n+  \"sparc_emitting_epilogue && TARGET_ARCH64\"\n   \"*\n {\n   if (IN_OR_GLOBAL_P (operands[1]))\n@@ -9253,7 +9234,7 @@\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))\n    (return)]\n-  \"! TARGET_EPILOGUE\"\n+  \"sparc_emitting_epilogue\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9274,7 +9255,7 @@\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"immediate_operand\" \"in\")))\n    (return)]\n-  \"! TARGET_EPILOGUE && ! TARGET_CM_MEDMID\"\n+  \"sparc_emitting_epilogue && ! TARGET_CM_MEDMID\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9292,7 +9273,7 @@\n   [(set (match_operand:DI 0 \"restore_operand\" \"\")\n \t(match_operand:DI 1 \"arith_double_operand\" \"rHI\"))\n    (return)]\n-  \"TARGET_ARCH64 && ! TARGET_EPILOGUE\"\n+  \"sparc_emitting_epilogue && TARGET_ARCH64\"\n   \"ret\\;restore %%g0, %1, %Y0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n@@ -9302,7 +9283,7 @@\n \t(plus:DI (match_operand:DI 1 \"arith_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (return)]\n-  \"TARGET_ARCH64 && ! TARGET_EPILOGUE\"\n+  \"sparc_emitting_epilogue && TARGET_ARCH64\"\n   \"ret\\;restore %r1, %2, %Y0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n@@ -9312,18 +9293,16 @@\n \t(lo_sum:DI (match_operand:DI 1 \"arith_operand\" \"%r\")\n \t\t   (match_operand:DI 2 \"immediate_operand\" \"in\")))\n    (return)]\n-  \"TARGET_ARCH64 && ! TARGET_EPILOGUE && ! TARGET_CM_MEDMID\"\n+  \"sparc_emitting_epilogue && TARGET_ARCH64 && ! TARGET_CM_MEDMID\"\n   \"ret\\;restore %r1, %%lo(%a2), %Y0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n-;; The following pattern is only generated by delayed-branch scheduling,\n-;; when the insn winds up in the epilogue.\n (define_insn \"*return_sf\"\n   [(set (reg:SF 32)\n \t(match_operand:SF 0 \"register_operand\" \"f\"))\n    (return)]\n-  \"! TARGET_EPILOGUE\"\n+  \"sparc_emitting_epilogue\"\n   \"ret\\;fmovs\\\\t%0, %%f0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])"}, {"sha": "0d3f0546abe22480fff49e38c536988b2defcbad", "filename": "gcc/config/sparc/splet.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsplet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fsplet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsplet.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -20,7 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n+#define TARGET_DEFAULT MASK_APP_REGS\n \n #define CPP_PREDEFINES \"-Dsparc -Acpu=sparc -Amachine=sparc\" \n "}, {"sha": "358f2c00087a55e0b276aeeacc19b1d7e3b5a2b8", "filename": "gcc/config/sparc/vxsparc64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -71,7 +71,7 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_SPEC \"%(cpp_cpu) %(cpp_arch) -DCPU=ULTRASPARC -D__CPU__=CPU\"\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_APP_REGS | MASK_EPILOGUE | MASK_FPU \\\n+#define TARGET_DEFAULT (MASK_APP_REGS | MASK_FPU \\\n \t\t\t| MASK_LONG_DOUBLE_128 | MASK_64BIT)\n \n #undef SPARC_DEFAULT_CMODEL"}, {"sha": "eb800ee9a01327f5922f773268c2834cf90d5d12", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33074e5fe7854810796e1b4a180622be8656eac9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=33074e5fe7854810796e1b4a180622be8656eac9", "patch": "@@ -349,10 +349,10 @@ in the following sections.\n -mcmodel=@var{code-model} @gol\n -m32  -m64 @gol\n -mapp-regs  -mbroken-saverestore  -mcypress @gol\n--mepilogue  -mfaster-structs  -mflat @gol\n+-mfaster-structs  -mflat @gol\n -mfpu  -mhard-float  -mhard-quad-float @gol\n -mimpure-text  -mlive-g0  -mno-app-regs @gol\n--mno-epilogue  -mno-faster-structs  -mno-flat  -mno-fpu @gol\n+-mno-faster-structs  -mno-flat  -mno-fpu @gol\n -mno-impure-text  -mno-stack-bias  -mno-unaligned-doubles @gol\n -msoft-float  -msoft-quad-float  -msparclite  -mstack-bias @gol\n -msupersparc  -munaligned-doubles  -mv8}\n@@ -5164,18 +5164,6 @@ emulates the effect of the instruction.  Because of the trap handler overhead,\n this is much slower than calling the ABI library routines.  Thus the\n @option{-msoft-quad-float} option is the default.\n \n-@item -mno-epilogue\n-@itemx -mepilogue\n-@opindex mno-epilogue\n-@opindex mepilogue\n-With @option{-mepilogue} (the default), the compiler always emits code for\n-function exit at the end of each function.  Any function exit in\n-the middle of the function (such as a return statement in C) will\n-generate a jump to the exit code at the end of the function.\n-\n-With @option{-mno-epilogue}, the compiler tries to emit exit code inline\n-at every function exit.\n-\n @item -mno-flat\n @itemx -mflat\n @opindex mno-flat"}]}