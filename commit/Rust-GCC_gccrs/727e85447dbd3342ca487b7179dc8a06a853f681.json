{"sha": "727e85447dbd3342ca487b7179dc8a06a853f681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3ZTg1NDQ3ZGJkMzM0MmNhNDg3YjcxNzlkYzhhMDZhODUzZjY4MQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-10T09:19:24Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-10T09:19:24Z"}, "message": "re PR fortran/40940 ([F03] CLASS statement)\n\n2009-08-10  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40940\n\t* decl.c (gfc_match_type_spec): Match CLASS statement and warn about\n\tmissing polymorphism.\n\t* gfortran.h (gfc_typespec): Add field 'is_class'.\n\t* misc.c (gfc_clear_ts): Initialize 'is_class' to zero.\n\t* resolve.c (type_is_extensible): New function to check if a derived\n\ttype is extensible.\n\t(resolve_fl_variable_derived): Add error checks for CLASS variables.\n\t(resolve_typebound_procedure): Disallow non-polymorphic passed-object\n\tdummy arguments, turning warning into error.\n\t(resolve_fl_derived): Use 'type_is_extensible'. Disallow non-polymorphic\n\tpassed-object dummy arguments for procedure pointer components,\n\tturning warning into error. Add error check for CLASS components.\n\n2009-08-10  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40940\n\t* gfortran.dg/class_1.f03: New.\n\t* gfortran.dg/class_2.f03: New.\n\t* gfortran.dg/proc_ptr_comp_pass_1.f90: Use CLASS instead of TYPE.\n\t* gfortran.dg/proc_ptr_comp_pass_2.f90: Ditto.\n\t* gfortran.dg/proc_ptr_comp_pass_3.f90: Ditto.\n\t* gfortran.dg/typebound_call_10.f03: Ditto.\n\t* gfortran.dg/typebound_call_2.f03: Ditto.\n\t* gfortran.dg/typebound_call_3.f03: Ditto.\n\t* gfortran.dg/typebound_call_4.f03: Ditto.\n\t* gfortran.dg/typebound_generic_3.f03: Ditto.\n\t* gfortran.dg/typebound_generic_4.f03: Ditto.\n\t* gfortran.dg/typebound_proc_1.f08: Ditto.\n\t* gfortran.dg/typebound_proc_5.f03: Ditto.\n\t* gfortran.dg/typebound_proc_6.f03: Ditto.\n\nFrom-SVN: r150620", "tree": {"sha": "af7da891a51a852fbcada6ef52aef9d436f99528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af7da891a51a852fbcada6ef52aef9d436f99528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/727e85447dbd3342ca487b7179dc8a06a853f681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727e85447dbd3342ca487b7179dc8a06a853f681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727e85447dbd3342ca487b7179dc8a06a853f681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727e85447dbd3342ca487b7179dc8a06a853f681/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "477eca006cf19ab67eb0d5c7e9af8872eb5a6d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477eca006cf19ab67eb0d5c7e9af8872eb5a6d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477eca006cf19ab67eb0d5c7e9af8872eb5a6d22"}], "stats": {"total": 250, "additions": 210, "deletions": 40}, "files": [{"sha": "6158a7258d46330dc358f08f5e6373c4b89ef893", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -1,3 +1,19 @@\n+2009-08-10  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40940\n+\t* decl.c (gfc_match_type_spec): Match CLASS statement and warn about\n+\tmissing polymorphism.\n+\t* gfortran.h (gfc_typespec): Add field 'is_class'.\n+\t* misc.c (gfc_clear_ts): Initialize 'is_class' to zero.\n+\t* resolve.c (type_is_extensible): New function to check if a derived\n+\ttype is extensible.\n+\t(resolve_fl_variable_derived): Add error checks for CLASS variables.\n+\t(resolve_typebound_procedure): Disallow non-polymorphic passed-object\n+\tdummy arguments, turning warning into error.\n+\t(resolve_fl_derived): Use 'type_is_extensible'. Disallow non-polymorphic\n+\tpassed-object dummy arguments for procedure pointer components,\n+\tturning warning into error. Add error check for CLASS components.\n+\n 2009-08-05  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/40955"}, {"sha": "6b6203e002c7ad6ce24f7aacb0330fa84223bc36", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -2369,7 +2369,16 @@ gfc_match_type_spec (gfc_typespec *ts, int implicit_flag)\n \n   m = gfc_match (\" type ( %n )\", name);\n   if (m != MATCH_YES)\n-    return m;\n+    {\n+      m = gfc_match (\" class ( %n )\", name);\n+      if (m != MATCH_YES)\n+\treturn m;\n+      ts->is_class = 1;\n+\n+      /* TODO: Implement Polymorphism.  */\n+      gfc_warning (\"Polymorphic entities are not yet implemented. \"\n+\t\t   \"CLASS will be treated like TYPE at %C\");\n+    }\n \n   ts->type = BT_DERIVED;\n "}, {"sha": "3d95d2177ae1878f4a0ab5add0d0872751ec73bc", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -841,6 +841,7 @@ typedef struct\n   struct gfc_symbol *derived;\n   gfc_charlen *cl;\t/* For character types only.  */\n   struct gfc_symbol *interface;\t/* For PROCEDURE declarations.  */\n+  unsigned int is_class:1;\n   int is_c_interop;\n   int is_iso_c;\n   bt f90_type; "}, {"sha": "7e4b481e59f56585c9425b530dfc3aa652d2489a", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -71,6 +71,7 @@ gfc_clear_ts (gfc_typespec *ts)\n   ts->kind = 0;\n   ts->cl = NULL;\n   ts->interface = NULL;\n+  ts->is_class = 0;\n   /* flag that says if the type is C interoperable */\n   ts->is_c_interop = 0;\n   /* says what f90 type the C kind interops with */"}, {"sha": "81c8ccd8b24d83957954ce36fc335f13a4b2cfcc", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -7916,6 +7916,15 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n }\n \n \n+/* Check if a derived type is extensible.  */\n+\n+static bool\n+type_is_extensible (gfc_symbol *sym)\n+{\n+  return !(sym->attr.is_bind_c || sym->attr.sequence);\n+}\n+\n+\n /* Additional checks for symbols with flavor variable and derived\n    type.  To be called from resolve_fl_variable.  */\n \n@@ -7964,6 +7973,25 @@ resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)\n       return FAILURE;\n     }\n \n+  if (sym->ts.is_class)\n+    {\n+      /* C502.  */\n+      if (!type_is_extensible (sym->ts.derived))\n+\t{\n+\t  gfc_error (\"Type '%s' of CLASS variable '%s' at %L is not extensible\",\n+\t\t     sym->ts.derived->name, sym->name, &sym->declared_at);\n+\t  return FAILURE;\n+\t}\n+\n+      /* C509.  */\n+      if (!(sym->attr.dummy || sym->attr.allocatable || sym->attr.pointer))\n+\t{\n+\t  gfc_error (\"CLASS variable '%s' at %L must be dummy, allocatable \"\n+\t\t     \"or pointer\", sym->name, &sym->declared_at);\n+\t  return FAILURE;\n+\t}\n+    }\n+\n   /* Assign default initializer.  */\n   if (!(sym->value || sym->attr.pointer || sym->attr.allocatable)\n       && (!no_init_flag || sym->attr.intent == INTENT_OUT))\n@@ -9000,9 +9028,12 @@ resolve_typebound_procedure (gfc_symtree* stree)\n \t  goto error;\n \t}\n \n-      gfc_warning (\"Polymorphic entities are not yet implemented,\"\n-\t\t   \" non-polymorphic passed-object dummy argument of '%s'\"\n-\t\t   \" at %L accepted\", proc->name, &where);\n+      if (!me_arg->ts.is_class)\n+\t{\n+\t  gfc_error (\"Non-polymorphic passed-object dummy argument of '%s'\"\n+\t\t     \" at %L\", proc->name, &where);\n+\t  goto error;\n+\t}\n     }\n \n   /* If we are extending some type, check that we don't override a procedure\n@@ -9164,7 +9195,7 @@ resolve_fl_derived (gfc_symbol *sym)\n     return FAILURE;\n \n   /* An ABSTRACT type must be extensible.  */\n-  if (sym->attr.abstract && (sym->attr.is_bind_c || sym->attr.sequence))\n+  if (sym->attr.abstract && !type_is_extensible (sym))\n     {\n       gfc_error (\"Non-extensible derived-type '%s' at %L must not be ABSTRACT\",\n \t\t sym->name, &sym->declared_at);\n@@ -9340,11 +9371,9 @@ resolve_fl_derived (gfc_symbol *sym)\n \t      return FAILURE;\n \t    }\n \n-\t  /* TODO: Make this an error once CLASS is implemented.  */\n-\t  if (!sym->attr.sequence)\n-\t    gfc_warning (\"Polymorphic entities are not yet implemented,\"\n-\t\t\t \" non-polymorphic passed-object dummy argument of '%s'\"\n-\t\t\t \" at %L accepted\", c->name, &c->loc);\n+\t  if (type_is_extensible (sym) && !me_arg->ts.is_class)\n+\t    gfc_error (\"Non-polymorphic passed-object dummy argument of '%s'\"\n+\t\t\t \" at %L\", c->name, &c->loc);\n \n \t}\n \n@@ -9412,6 +9441,15 @@ resolve_fl_derived (gfc_symbol *sym)\n \t  return FAILURE;\n \t}\n \n+      /* C437.  */\n+      if (c->ts.type == BT_DERIVED && c->ts.is_class\n+\t  && !(c->attr.pointer || c->attr.allocatable))\n+\t{\n+\t  gfc_error (\"Component '%s' with CLASS at %L must be allocatable \"\n+\t\t     \"or pointer\", c->name, &c->loc);\n+\t  return FAILURE;\n+\t}\n+\n       /* Ensure that all the derived type components are put on the\n \t derived type list; even in formal namespaces, where derived type\n \t pointer components might not have been declared.  */"}, {"sha": "d1e2b1dd7a0d3d80103a4bffdfbb21cc1ceeb825", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -1,3 +1,21 @@\n+2009-08-10  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40940\n+\t* gfortran.dg/class_1.f03: New.\n+\t* gfortran.dg/class_2.f03: New.\n+\t* gfortran.dg/proc_ptr_comp_pass_1.f90: Use CLASS instead of TYPE.\n+\t* gfortran.dg/proc_ptr_comp_pass_2.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_comp_pass_3.f90: Ditto.\n+\t* gfortran.dg/typebound_call_10.f03: Ditto.\n+\t* gfortran.dg/typebound_call_2.f03: Ditto.\n+\t* gfortran.dg/typebound_call_3.f03: Ditto.\n+\t* gfortran.dg/typebound_call_4.f03: Ditto.\n+\t* gfortran.dg/typebound_generic_3.f03: Ditto.\n+\t* gfortran.dg/typebound_generic_4.f03: Ditto.\n+\t* gfortran.dg/typebound_proc_1.f08: Ditto.\n+\t* gfortran.dg/typebound_proc_5.f03: Ditto.\n+\t* gfortran.dg/typebound_proc_6.f03: Ditto.\n+\n 2009-08-10  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/40866"}, {"sha": "bdd742b0105b62abfd51ce932a120599103a9874", "filename": "gcc/testsuite/gfortran.dg/class_1.f03", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_1.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+!\n+! FIXME: Remove -w after polymorphic entities are supported.\n+! { dg-options \"-w\" }\n+!\n+! PR 40940: CLASS statement\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+implicit none\n+\n+type t\n+  integer :: comp\n+  class(t),pointer :: c2\n+end type\n+\n+class(t),pointer :: c1\n+\n+allocate(c1)\n+\n+c1%comp = 5\n+c1%c2 => c1\n+\n+print *,c1%comp\n+\n+call sub(c1)\n+\n+if (c1%comp/=5) call abort()\n+\n+deallocate(c1)\n+\n+contains\n+\n+  subroutine sub (c3)\n+    class(t) :: c3\n+    print *,c3%comp\n+  end subroutine\n+\n+end\n+"}, {"sha": "b4020450126cea938f717eccb504be1ae9577f76", "filename": "gcc/testsuite/gfortran.dg/class_2.f03", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_2.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do compile }\n+!\n+! FIXME: Remove -w after polymorphic entities are supported.\n+! { dg-options \"-w\" }\n+!\n+! PR 40940: CLASS statement\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+use,intrinsic :: iso_c_binding\n+\n+type t1\n+  integer :: comp\n+end type\n+\n+type t2\n+  sequence\n+  real :: r\n+end type\n+\n+type,bind(c) :: t3\n+  integer(c_int) :: i\n+end type\n+\n+type :: t4\n+  procedure(absint), pointer :: p  ! { dg-error \"Non-polymorphic passed-object dummy argument\" }\n+end type\n+\n+type :: t5\n+  class(t1) :: c  ! { dg-error \"must be allocatable or pointer\" }\n+end type\n+\n+abstract interface\n+  subroutine absint(arg)\n+    import :: t4\n+    type(t4) :: arg\n+  end subroutine\n+end interface\n+\n+\n+class(t1) :: o1  ! { dg-error \"must be dummy, allocatable or pointer\" }\n+\n+class(t2), pointer :: o2  ! { dg-error \"is not extensible\" }\n+class(t3), pointer :: o3  ! { dg-error \"is not extensible\" }\n+\n+end\n+"}, {"sha": "2a73bdad35bba91c7b3271d3280840df8dc0ba97", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_pass_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_pass_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_pass_1.f90?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -17,15 +17,15 @@ module mymod\n     abstract interface\n         subroutine set_int_value(this,i)\n             import\n-            type(mytype), intent(inout) :: this\n+            class(mytype), intent(inout) :: this\n             integer, intent(in) :: i\n         end subroutine set_int_value\n     end interface\n \n     contains\n \n     subroutine seti_proc(this,i)\n-        type(mytype), intent(inout) :: this\n+        class(mytype), intent(inout) :: this\n         integer, intent(in) :: i\n         this%i=i\n     end subroutine seti_proc"}, {"sha": "9e3cd5835e6d2cbe31088437168a03559a4a1c3e", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_pass_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_pass_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_pass_2.f90?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -17,14 +17,14 @@ module passed_object_example\n contains\n \n   subroutine print_me (arg, lun)\n-    type(t), intent(in) :: arg\n+    class(t), intent(in) :: arg\n     integer, intent(in) :: lun\n     if (abs(arg%a-2.718)>1E-6) call abort()\n     write (lun,*) arg%a\n   end subroutine print_me\n \n   subroutine print_my_square (arg, lun)\n-    type(t), intent(in) :: arg\n+    class(t), intent(in) :: arg\n     integer, intent(in) :: lun\n     if (abs(arg%a-2.718)>1E-6) call abort()\n     write (lun,*) arg%a**2"}, {"sha": "3c56794166a33f6c407a2cba785b4504c28cf9e0", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_pass_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_pass_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_pass_3.f90?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -16,7 +16,7 @@\n   subroutine obp(w,x)\n     import :: t\n     integer :: w\n-    type(t) :: x\n+    class(t) :: x\n   end subroutine\n end interface\n \n@@ -30,7 +30,7 @@ subroutine obp(w,x)\n \n   subroutine my_obp_sub(w,x)\n     integer :: w\n-    type(t) :: x\n+    class(t) :: x\n     if (x%name/=\"doodoo\") call abort()\n     if (w/=32) call abort()\n   end subroutine"}, {"sha": "77667fba733e133079ff158c85e13ffe24f9b3ef", "filename": "gcc/testsuite/gfortran.dg/typebound_call_10.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_10.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -19,7 +19,7 @@ module m\n \n  subroutine foo(x,y)\n   type(t),optional :: x\n-  type(t) :: y\n+  class(t) :: y\n   if(present(x)) then\n     print *, 'foo', x%i, y%i\n   else"}, {"sha": "f6e623c498a34166a5ea1bcd8b180d8fc8007e92", "filename": "gcc/testsuite/gfortran.dg/typebound_call_2.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_2.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -27,22 +27,22 @@ MODULE m\n \n   INTEGER FUNCTION func_add (me, x)\n     IMPLICIT NONE\n-    TYPE(add) :: me\n+    CLASS(add) :: me\n     INTEGER :: x\n     func_add = me%val + x\n   END FUNCTION func_add\n \n   SUBROUTINE sub_add (res, me, x)\n     IMPLICIT NONE\n     INTEGER, INTENT(OUT) :: res\n-    TYPE(add), INTENT(IN) :: me\n+    CLASS(add), INTENT(IN) :: me\n     INTEGER, INTENT(IN) :: x\n     res = me%val + x\n   END SUBROUTINE sub_add\n \n   SUBROUTINE swap (me1, me2)\n     IMPLICIT NONE\n-    TYPE(trueOrFalse), INTENT(INOUT) :: me1, me2\n+    CLASS(trueOrFalse), INTENT(INOUT) :: me1, me2\n \n     IF (.NOT. me1%val .OR. me2%val) THEN\n       CALL abort ()"}, {"sha": "028c5b124b0ac9e3a391ed8163fad45216c48182", "filename": "gcc/testsuite/gfortran.dg/typebound_call_3.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_3.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -19,7 +19,7 @@ MODULE m\n \n   SUBROUTINE swap (me1, me2)\n     IMPLICIT NONE\n-    TYPE(trueOrFalse), INTENT(INOUT) :: me1, me2\n+    CLASS(trueOrFalse), INTENT(INOUT) :: me1, me2\n \n     IF (.NOT. me1%val .OR. me2%val) THEN\n       CALL abort ()"}, {"sha": "25745fda488f1b0d6fbbfee22ecca0ba1217e6ab", "filename": "gcc/testsuite/gfortran.dg/typebound_call_4.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_4.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -24,7 +24,7 @@ MODULE m\n \n   SUBROUTINE proc (me)\n     IMPLICIT NONE\n-    TYPE(t), INTENT(INOUT) :: me\n+    CLASS(t), INTENT(INOUT) :: me\n   END SUBROUTINE proc\n \n   INTEGER FUNCTION func ()"}, {"sha": "d70828265ca9abdf675ab33fb04b5f9f1dc15e59", "filename": "gcc/testsuite/gfortran.dg/typebound_generic_3.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_3.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -35,15 +35,15 @@ END SUBROUTINE plain_real\n \n   SUBROUTINE passed_intint (me, x, y)\n     IMPLICIT NONE\n-    TYPE(t) :: me\n+    CLASS(t) :: me\n     INTEGER :: x, y\n     WRITE (*,*) \"Passed Integer\"\n   END SUBROUTINE passed_intint\n \n   SUBROUTINE passed_realreal (x, me, y)\n     IMPLICIT NONE\n     REAL :: x, y\n-    TYPE(t) :: me\n+    CLASS(t) :: me\n     WRITE (*,*) \"Passed Real\"\n   END SUBROUTINE passed_realreal\n "}, {"sha": "28af021f85d8c29e33c6d6be070d86fd1d301bcf", "filename": "gcc/testsuite/gfortran.dg/typebound_generic_4.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_4.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -25,15 +25,15 @@ module bar_mod\n   \n   subroutine foo_v_inner(x,a)\n     real :: x(:)\n-    type(foo) :: a\n+    class(foo) :: a\n     \n     a%i = int(x(1))\n     WRITE (*,*) \"Vector\"\n   end subroutine foo_v_inner\n   \n   subroutine foo_m_inner(x,a)\n     real :: x(:,:)\n-    type(foo) :: a\n+    class(foo) :: a\n     \n     a%i = int(x(1,1))\n     WRITE (*,*) \"Matrix\""}, {"sha": "3437baaa63cde431df034fc4debf263d29917af3", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_1.f08", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_1.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_1.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_1.f08?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -51,19 +51,19 @@ MODULE testmod\n   \n   SUBROUTINE proc1 (me)\n     IMPLICIT NONE\n-    TYPE(t1) :: me\n+    CLASS(t1) :: me\n   END SUBROUTINE proc1\n \n   REAL FUNCTION proc2 (x, me)\n     IMPLICIT NONE\n     REAL :: x\n-    TYPE(t1) :: me\n+    CLASS(t1) :: me\n     proc2 = x / 2\n   END FUNCTION proc2\n \n   INTEGER FUNCTION proc3 (me)\n     IMPLICIT NONE\n-    TYPE(t2) :: me\n+    CLASS(t2) :: me\n     proc3 = 42\n   END FUNCTION proc3\n "}, {"sha": "1251e3f97f948642cdc43cb74b91451700847b6f", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_5.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_5.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -71,19 +71,19 @@ END SUBROUTINE proc_abstract_intf\n \n   SUBROUTINE proc_arg_first (me, x)\n     IMPLICIT NONE\n-    TYPE(t) :: me\n+    CLASS(t) :: me\n     REAL :: x\n   END SUBROUTINE proc_arg_first\n \n   INTEGER FUNCTION proc_arg_middle (x, me, y)\n     IMPLICIT NONE\n     REAL :: x, y\n-    TYPE(t) :: me\n+    CLASS(t) :: me\n   END FUNCTION proc_arg_middle\n \n   SUBROUTINE proc_arg_last (x, me)\n     IMPLICIT NONE\n-    TYPE(t) :: me\n+    CLASS(t) :: me\n     REAL :: x\n   END SUBROUTINE proc_arg_last\n "}, {"sha": "eba483660986ef1ca8038f1b6e0749825bc12e78", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_6.f03", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727e85447dbd3342ca487b7179dc8a06a853f681/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03?ref=727e85447dbd3342ca487b7179dc8a06a853f681", "patch": "@@ -134,47 +134,47 @@ END FUNCTION proc_realfunc\n \n   SUBROUTINE proc_stme1 (me, a)\n     IMPLICIT NONE\n-    TYPE(supert) :: me\n+    CLASS(supert) :: me\n     INTEGER :: a\n   END SUBROUTINE proc_stme1\n \n   SUBROUTINE proc_tme1 (me, a)\n     IMPLICIT NONE\n-    TYPE(t) :: me\n+    CLASS(t) :: me\n     INTEGER :: a\n   END SUBROUTINE proc_tme1\n \n   SUBROUTINE proc_stmeme (me1, me2)\n     IMPLICIT NONE\n-    TYPE(supert) :: me1, me2\n+    CLASS(supert) :: me1, me2\n   END SUBROUTINE proc_stmeme\n \n   SUBROUTINE proc_tmeme (me1, me2)\n     IMPLICIT NONE\n-    TYPE(t) :: me1, me2\n+    CLASS(t) :: me1, me2\n   END SUBROUTINE proc_tmeme\n \n   SUBROUTINE proc_stmeint (me, a)\n     IMPLICIT NONE\n-    TYPE(supert) :: me\n+    CLASS(supert) :: me\n     INTEGER :: a\n   END SUBROUTINE proc_stmeint\n \n   SUBROUTINE proc_tmeint (me, a)\n     IMPLICIT NONE\n-    TYPE(t) :: me\n+    CLASS(t) :: me\n     INTEGER :: a\n   END SUBROUTINE proc_tmeint\n \n   SUBROUTINE proc_tmeintx (me, x)\n     IMPLICIT NONE\n-    TYPE(t) :: me\n+    CLASS(t) :: me\n     INTEGER :: x\n   END SUBROUTINE proc_tmeintx\n \n   SUBROUTINE proc_tmereal (me, a)\n     IMPLICIT NONE\n-    TYPE(t) :: me\n+    CLASS(t) :: me\n     REAL :: a\n   END SUBROUTINE proc_tmereal\n "}]}