{"sha": "3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1NmQ4ZDhkZTI2YzdkN2FjNDY3MzNiN2IzYzAxYWUzNGUxNDRmMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-10-30T10:38:52Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-10-30T10:38:52Z"}, "message": "Use symtab_node::order in LTO sections with body.\n\n2019-10-30  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/91393\n\tPR lto/88220\n\t* cgraph.c (cgraph_node::get_create): Overwrite node->order\n\tfrom a first_clone in order to get proper LTO section\n\tin LTO stream.\n\t(cgraph_node::get_untransformed_body):\n\tUse lto_get_section_data where symtab_node::order\n\tmust be provided.\n\t* cgraphclones.c (cgraph_node::find_replacement):\n\tUpdate also symbol order.\n\t* ipa-fnsummary.c (ipa_fn_summary_read):\n\tUse new function lto_get_summary_section_data.\n\t* ipa-hsa.c (ipa_hsa_read_summary): Likewise.\n\t* ipa-icf.c (sem_item_optimizer::read_summary):\n\tLikewise.\n\t* ipa-prop.c (ipa_prop_read_jump_functions):\n\tLikewise.\n\t(ipcp_read_transformation_summaries): Likewise.\n\t* ipa-sra.c (ipa_sra_read_summary): Likewise.\n\t* lto-cgraph.c (input_node): Add also order_base.\n\t(input_varpool_node): Likewise.\n\t(input_cgraph_1): Assign the order_base.\n\t(input_cgraph_opt_summary): Use new lto_get_summary_section_data.\n\t* lto-opts.c (lto_write_options): Pass new argument.\n\t* lto-section-in.c (lto_get_section_data): Add new argumente order.\n\t(lto_get_summary_section_data): New.\n\t(lto_get_raw_section_data): Add order argument.\n\t(lto_create_simple_input_block): Likewise.\n\t* lto-section-out.c (lto_destroy_simple_output_block):\n\tLikewise.\n\t* lto-streamer-in.c (lto_input_toplevel_asms):\n\tUse lto_get_summary_section_data.\n\t(lto_input_mode_table): Likewise.\n\t* lto-streamer-out.c (produce_asm): Pass symtab_node::order.\n\t(lto_output_toplevel_asms): Pass new argument.\n\t(copy_function_or_variable): Likewise.\n\t(produce_lto_section):Likewise.\n\t(produce_symtab): Likewise.\n\t(lto_write_mode_table): Likewise.\n\t(produce_asm_for_decls): Likewise.\n\t* lto-streamer.c (lto_get_section_name): Concat symbol name\n\tand symbol order.\n\t* lto-streamer.h (lto_get_section_data): Add order argument.\n\t(lto_get_summary_section_data): New.\n\t(lto_get_raw_section_data): Add order argument.\n\t(lto_get_section_name): Likewise.\n\t* varpool.c (varpool_node::get_constructor): Pass order argument.\n2019-10-30  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/91393\n\tPR lto/88220\n\t* lto-common.c (lto_file_finalize): Use lto_get_summary_section_data.\n\t(get_section_data): Add order argument.\n2019-10-30  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/91393\n\tPR lto/88220\n\t* gcc.dg/lto/pr91393_0.c: New test.\n\nFrom-SVN: r277607", "tree": {"sha": "fa3f3e368cfb454737f1269277b2ea7d8b2c89e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa3f3e368cfb454737f1269277b2ea7d8b2c89e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01509e2f045ab897000de7a2b242a059a99a89a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01509e2f045ab897000de7a2b242a059a99a89a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01509e2f045ab897000de7a2b242a059a99a89a3"}], "stats": {"total": 240, "additions": 175, "deletions": 65}, "files": [{"sha": "89ddfcef05a73d068e5788e829131a5a9ec93c7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -1,3 +1,53 @@\n+2019-10-30  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/91393\n+\tPR lto/88220\n+\t* cgraph.c (cgraph_node::get_create): Overwrite node->order\n+\tfrom a first_clone in order to get proper LTO section\n+\tin LTO stream.\n+\t(cgraph_node::get_untransformed_body):\n+\tUse lto_get_section_data where symtab_node::order\n+\tmust be provided.\n+\t* cgraphclones.c (cgraph_node::find_replacement):\n+\tUpdate also symbol order.\n+\t* ipa-fnsummary.c (ipa_fn_summary_read):\n+\tUse new function lto_get_summary_section_data.\n+\t* ipa-hsa.c (ipa_hsa_read_summary): Likewise.\n+\t* ipa-icf.c (sem_item_optimizer::read_summary):\n+\tLikewise.\n+\t* ipa-prop.c (ipa_prop_read_jump_functions):\n+\tLikewise.\n+\t(ipcp_read_transformation_summaries): Likewise.\n+\t* ipa-sra.c (ipa_sra_read_summary): Likewise.\n+\t* lto-cgraph.c (input_node): Add also order_base.\n+\t(input_varpool_node): Likewise.\n+\t(input_cgraph_1): Assign the order_base.\n+\t(input_cgraph_opt_summary): Use new lto_get_summary_section_data.\n+\t* lto-opts.c (lto_write_options): Pass new argument.\n+\t* lto-section-in.c (lto_get_section_data): Add new argumente order.\n+\t(lto_get_summary_section_data): New.\n+\t(lto_get_raw_section_data): Add order argument.\n+\t(lto_create_simple_input_block): Likewise.\n+\t* lto-section-out.c (lto_destroy_simple_output_block):\n+\tLikewise.\n+\t* lto-streamer-in.c (lto_input_toplevel_asms):\n+\tUse lto_get_summary_section_data.\n+\t(lto_input_mode_table): Likewise.\n+\t* lto-streamer-out.c (produce_asm): Pass symtab_node::order.\n+\t(lto_output_toplevel_asms): Pass new argument.\n+\t(copy_function_or_variable): Likewise.\n+\t(produce_lto_section):Likewise.\n+\t(produce_symtab): Likewise.\n+\t(lto_write_mode_table): Likewise.\n+\t(produce_asm_for_decls): Likewise.\n+\t* lto-streamer.c (lto_get_section_name): Concat symbol name\n+\tand symbol order.\n+\t* lto-streamer.h (lto_get_section_data): Add order argument.\n+\t(lto_get_summary_section_data): New.\n+\t(lto_get_raw_section_data): Add order argument.\n+\t(lto_get_section_name): Likewise.\n+\t* varpool.c (varpool_node::get_constructor): Pass order argument.\n+\n 2019-10-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/92262"}, {"sha": "9eea0218c4fc70ab4851072b6833644e792cc478", "filename": "gcc/cgraph.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -547,6 +547,7 @@ cgraph_node::get_create (tree decl)\n     {\n       first_clone->clone_of = node;\n       node->clones = first_clone;\n+      node->order = first_clone->order;\n       symtab->symtab_prevail_in_asm_name_hash (node);\n       node->decl->decl_with_vis.symtab_node = node;\n       if (dump_file)\n@@ -3546,12 +3547,17 @@ cgraph_node::get_untransformed_body (void)\n   struct lto_in_decl_state *decl_state\n \t = lto_get_function_in_decl_state (file_data, decl);\n \n+  cgraph_node *origin = this;\n+  while (origin->clone_of)\n+    origin = origin->clone_of;\n+\n+  int stream_order = origin->order - file_data->order_base;\n   data = lto_get_section_data (file_data, LTO_section_function_body,\n-\t\t\t       name, &len, decl_state->compressed);\n+\t\t\t       name, stream_order, &len,\n+\t\t\t       decl_state->compressed);\n   if (!data)\n-    fatal_error (input_location, \"%s: section %s is missing\",\n-\t\t file_data->file_name,\n-\t\t name);\n+    fatal_error (input_location, \"%s: section %s.%d is missing\",\n+\t\t file_data->file_name, name, stream_order);\n \n   gcc_assert (DECL_STRUCT_FUNCTION (decl) == NULL);\n "}, {"sha": "726e31e17f7833fed65549d4520b2de9e5d48b47", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -672,6 +672,11 @@ cgraph_node::find_replacement (void)\n \t  n->clone_of = next_inline_clone;\n \t  n = n->next_sibling_clone;\n \t}\n+\n+      /* Update order in order to be able to find a LTO section\n+\t with function body.  */\n+      replacement->order = order;\n+\n       return replacement;\n     }\n   else"}, {"sha": "5eee2416dd79906a31c2286569b22930c57a4103", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -3712,9 +3712,9 @@ ipa_fn_summary_read (void)\n   while ((file_data = file_data_vec[j++]))\n     {\n       size_t len;\n-      const char *data = lto_get_section_data (file_data,\n-\t\t\t\t\t       LTO_section_ipa_fn_summary,\n-\t\t\t\t\t       NULL, &len);\n+      const char *data\n+\t= lto_get_summary_section_data (file_data, LTO_section_ipa_fn_summary,\n+\t\t\t\t\t&len);\n       if (data)\n \tinline_read_section (file_data, data, len);\n       else"}, {"sha": "654009bdf6fdee080ecf0d788578366c7fda18ad", "filename": "gcc/ipa-hsa.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-hsa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-hsa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-hsa.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -277,9 +277,8 @@ ipa_hsa_read_summary (void)\n   while ((file_data = file_data_vec[j++]))\n     {\n       size_t len;\n-      const char *data = lto_get_section_data (file_data, LTO_section_ipa_hsa,\n-\t\t\t\t\t       NULL, &len);\n-\n+      const char *data\n+\t= lto_get_summary_section_data (file_data, LTO_section_ipa_hsa, &len);\n       if (data)\n \tipa_hsa_read_section (file_data, data, len);\n     }"}, {"sha": "13b46483f2dcce8a1245993cad03040c9bfe976e", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -2386,9 +2386,8 @@ sem_item_optimizer::read_summary (void)\n   while ((file_data = file_data_vec[j++]))\n     {\n       size_t len;\n-      const char *data = lto_get_section_data (file_data,\n-\t\t\t LTO_section_ipa_icf, NULL, &len);\n-\n+      const char *data\n+\t= lto_get_summary_section_data (file_data, LTO_section_ipa_icf, &len);\n       if (data)\n \tread_section (file_data, data, len);\n     }"}, {"sha": "336d271874d6621e606650866ae57a57d79163b3", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -4626,8 +4626,9 @@ ipa_prop_read_jump_functions (void)\n   while ((file_data = file_data_vec[j++]))\n     {\n       size_t len;\n-      const char *data = lto_get_section_data (file_data, LTO_section_jump_functions, NULL, &len);\n-\n+      const char *data\n+\t= lto_get_summary_section_data (file_data, LTO_section_jump_functions,\n+\t\t\t\t\t&len);\n       if (data)\n         ipa_prop_read_section (file_data, data, len);\n     }\n@@ -4869,9 +4870,9 @@ ipcp_read_transformation_summaries (void)\n   while ((file_data = file_data_vec[j++]))\n     {\n       size_t len;\n-      const char *data = lto_get_section_data (file_data,\n-\t\t\t\t\t       LTO_section_ipcp_transform,\n-\t\t\t\t\t       NULL, &len);\n+      const char *data\n+\t= lto_get_summary_section_data (file_data, LTO_section_ipcp_transform,\n+\t\t\t\t\t&len);\n       if (data)\n         read_replacements_section (file_data, data, len);\n     }"}, {"sha": "8f0284385561ca62751ebaa524ac25f6bee1e27b", "filename": "gcc/ipa-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fipa-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -2812,8 +2812,8 @@ ipa_sra_read_summary (void)\n   while ((file_data = file_data_vec[j++]))\n     {\n       size_t len;\n-      const char *data = lto_get_section_data (file_data, LTO_section_ipa_sra,\n-\t\t\t\t\t       NULL, &len);\n+      const char *data\n+\t= lto_get_summary_section_data (file_data, LTO_section_ipa_sra, &len);\n       if (data)\n         isra_read_summary_section (file_data, data, len);\n     }"}, {"sha": "a4a70e7848c46a97b8fc9a549d3d050ffcc0051f", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -49,9 +49,6 @@ static void input_cgraph_opt_summary (vec<symtab_node *>  nodes);\n /* Number of LDPR values known to GCC.  */\n #define LDPR_NUM_KNOWN (LDPR_PREVAILING_DEF_IRONLY_EXP + 1)\n \n-/* All node orders are ofsetted by ORDER_BASE.  */\n-static int order_base;\n-\n /* Cgraph streaming is organized as set of record whose type\n    is indicated by a tag.  */\n enum LTO_symtab_tags\n@@ -1218,7 +1215,7 @@ input_node (struct lto_file_decl_data *file_data,\n   int i, count;\n   tree group;\n   const char *section;\n-  order = streamer_read_hwi (ib) + order_base;\n+  order = streamer_read_hwi (ib) + file_data->order_base;\n   clone_ref = streamer_read_hwi (ib);\n \n   decl_index = streamer_read_uhwi (ib);\n@@ -1337,7 +1334,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n   tree group;\n   const char *section;\n \n-  order = streamer_read_hwi (ib) + order_base;\n+  order = streamer_read_hwi (ib) + file_data->order_base;\n   decl_index = streamer_read_uhwi (ib);\n   var_decl = lto_file_decl_data_get_var_decl (file_data, decl_index);\n \n@@ -1504,7 +1501,7 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n   unsigned i;\n \n   tag = streamer_read_enum (ib, LTO_symtab_tags, LTO_symtab_last_tag);\n-  order_base = symtab->order;\n+  file_data->order_base = symtab->order;\n   while (tag)\n     {\n       if (tag == LTO_symtab_edge)\n@@ -1529,7 +1526,7 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n       tag = streamer_read_enum (ib, LTO_symtab_tags, LTO_symtab_last_tag);\n     }\n \n-  lto_input_toplevel_asms (file_data, order_base);\n+  lto_input_toplevel_asms (file_data, file_data->order_base);\n \n   /* AUX pointers should be all non-zero for function nodes read from the stream.  */\n   if (flag_checking)\n@@ -2037,10 +2034,9 @@ input_cgraph_opt_summary (vec<symtab_node *> nodes)\n   while ((file_data = file_data_vec[j++]))\n     {\n       size_t len;\n-      const char *data =\n-\tlto_get_section_data (file_data, LTO_section_cgraph_opt_sum, NULL,\n-\t\t\t      &len);\n-\n+      const char *data\n+\t= lto_get_summary_section_data (file_data, LTO_section_cgraph_opt_sum,\n+\t\t\t\t\t&len);\n       if (data)\n \tinput_cgraph_opt_section (file_data, data, len, nodes);\n     }"}, {"sha": "99c6fe53923a9d597d01b1fa645f69c24747b584", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -65,7 +65,7 @@ lto_write_options (void)\n   char *args;\n   bool first_p = true;\n \n-  section_name = lto_get_section_name (LTO_section_opts, NULL, NULL);\n+  section_name = lto_get_section_name (LTO_section_opts, NULL, 0, NULL);\n   lto_begin_section (section_name, false);\n \n   obstack_init (&temporary_obstack);"}, {"sha": "67d998472e08d14791884d94ca1df070ac45d31b", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -131,10 +131,11 @@ struct lto_data_header\n const char *\n lto_get_section_data (struct lto_file_decl_data *file_data,\n \t\t      enum lto_section_type section_type,\n-\t\t      const char *name,\n+\t\t      const char *name, int order,\n \t\t      size_t *len, bool decompress)\n {\n-  const char *data = (get_section_f) (file_data, section_type, name, len);\n+  const char *data = (get_section_f) (file_data, section_type, name, order,\n+\t\t\t\t      len);\n   const size_t header_length = sizeof (struct lto_data_header);\n   struct lto_data_header *header;\n   struct lto_buffer buffer;\n@@ -172,15 +173,27 @@ lto_get_section_data (struct lto_file_decl_data *file_data,\n   return data;\n }\n \n+/* Return a char pointer to the start of a data stream for an LTO pass.\n+   FILE_DATA indicates where to obtain the data.\n+   SECTION_TYPE is the type of information to be obtained.\n+   LEN is the size of the data returned.  */\n+\n+const char *\n+lto_get_summary_section_data (struct lto_file_decl_data *file_data,\n+\t\t\t      enum lto_section_type section_type, size_t *len)\n+{\n+  return lto_get_section_data (file_data, section_type, NULL, 0, len);\n+}\n+\n /* Get the section data without any header parsing or uncompression.  */\n \n const char *\n lto_get_raw_section_data (struct lto_file_decl_data *file_data,\n \t\t\t  enum lto_section_type section_type,\n-\t\t\t  const char *name,\n+\t\t\t  const char *name, int order,\n \t\t\t  size_t *len)\n {\n-  return (get_section_f) (file_data, section_type, name, len);\n+  return (get_section_f) (file_data, section_type, name, order, len);\n }\n \n /* Free the data found from the above call.  The first three\n@@ -235,7 +248,8 @@ lto_create_simple_input_block (struct lto_file_decl_data *file_data,\n \t\t\t       enum lto_section_type section_type,\n \t\t\t       const char **datar, size_t *len)\n {\n-  const char *data = lto_get_section_data (file_data, section_type, NULL, len);\n+  const char *data = lto_get_section_data (file_data, section_type, NULL, 0,\n+\t\t\t\t\t   len);\n   const struct lto_simple_header * header\n     = (const struct lto_simple_header *) data;\n "}, {"sha": "69fb8b7cffa1b1f15f46cfa84d896d9c700d02aa", "filename": "gcc/lto-section-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-section-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-section-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-out.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -278,7 +278,7 @@ lto_destroy_simple_output_block (struct lto_simple_output_block *ob)\n   char *section_name;\n   struct lto_simple_header header;\n \n-  section_name = lto_get_section_name (ob->section_type, NULL, NULL);\n+  section_name = lto_get_section_name (ob->section_type, NULL, 0, NULL);\n   lto_begin_section (section_name, !flag_wpa);\n   free (section_name);\n "}, {"sha": "76a005e71e201d40da732335d8c59254180366a5", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -1562,8 +1562,8 @@ void\n lto_input_toplevel_asms (struct lto_file_decl_data *file_data, int order_base)\n {\n   size_t len;\n-  const char *data = lto_get_section_data (file_data, LTO_section_asm,\n-\t\t\t\t\t   NULL, &len);\n+  const char *data\n+    = lto_get_summary_section_data (file_data, LTO_section_asm, &len);\n   const struct lto_simple_header_with_strings *header\n     = (const struct lto_simple_header_with_strings *) data;\n   int string_offset;\n@@ -1601,8 +1601,8 @@ void\n lto_input_mode_table (struct lto_file_decl_data *file_data)\n {\n   size_t len;\n-  const char *data = lto_get_section_data (file_data, LTO_section_mode_table,\n-\t\t\t\t\t   NULL, &len);\n+  const char *data\n+    = lto_get_summary_section_data (file_data, LTO_section_mode_table, &len);\n   if (! data)\n     {\n       internal_error (\"cannot read LTO mode table from %s\","}, {"sha": "cf45cc3af6446f3da4c431374f6a3d7dcb3ea950", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -1972,10 +1972,12 @@ produce_asm (struct output_block *ob, tree fn)\n   if (section_type == LTO_section_function_body)\n     {\n       const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fn));\n-      section_name = lto_get_section_name (section_type, name, NULL);\n+      section_name = lto_get_section_name (section_type, name,\n+\t\t\t\t\t   symtab_node::get (fn)->order,\n+\t\t\t\t\t   NULL);\n     }\n   else\n-    section_name = lto_get_section_name (section_type, NULL, NULL);\n+    section_name = lto_get_section_name (section_type, NULL, 0, NULL);\n \n   lto_begin_section (section_name, !flag_wpa);\n   free (section_name);\n@@ -2278,7 +2280,7 @@ lto_output_toplevel_asms (void)\n \n   streamer_write_string_cst (ob, ob->main_stream, NULL_TREE);\n \n-  section_name = lto_get_section_name (LTO_section_asm, NULL, NULL);\n+  section_name = lto_get_section_name (LTO_section_asm, NULL, 0, NULL);\n   lto_begin_section (section_name, !flag_wpa);\n   free (section_name);\n \n@@ -2311,7 +2313,7 @@ copy_function_or_variable (struct symtab_node *node)\n   size_t len;\n   const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (function));\n   char *section_name =\n-    lto_get_section_name (LTO_section_function_body, name, NULL);\n+    lto_get_section_name (LTO_section_function_body, name, node->order, NULL);\n   size_t i, j;\n   struct lto_in_decl_state *in_state;\n   struct lto_out_decl_state *out_state = lto_get_out_decl_state ();\n@@ -2325,7 +2327,8 @@ copy_function_or_variable (struct symtab_node *node)\n   name = lto_get_decl_name_mapping (file_data, name);\n \n   data = lto_get_raw_section_data (file_data, LTO_section_function_body,\n-                                   name, &len);\n+\t\t\t\t   name, node->order - file_data->order_base,\n+\t\t\t\t   &len);\n   gcc_assert (data);\n \n   /* Do a bit copy of the function body.  */\n@@ -2410,7 +2413,7 @@ produce_lto_section ()\n   /* Stream LTO meta section.  */\n   output_block *ob = create_output_block (LTO_section_lto);\n \n-  char * section_name = lto_get_section_name (LTO_section_lto, NULL, NULL);\n+  char * section_name = lto_get_section_name (LTO_section_lto, NULL, 0, NULL);\n   lto_begin_section (section_name, false);\n   free (section_name);\n \n@@ -2784,7 +2787,7 @@ static void\n produce_symtab (struct output_block *ob)\n {\n   struct streamer_tree_cache_d *cache = ob->writer_cache;\n-  char *section_name = lto_get_section_name (LTO_section_symtab, NULL, NULL);\n+  char *section_name = lto_get_section_name (LTO_section_symtab, NULL, 0, NULL);\n   lto_symtab_encoder_t encoder = ob->decl_state->symtab_node_encoder;\n   lto_symtab_encoder_iterator lsei;\n \n@@ -2884,7 +2887,7 @@ lto_write_mode_table (void)\n   streamer_write_bitpack (&bp);\n \n   char *section_name\n-    = lto_get_section_name (LTO_section_mode_table, NULL, NULL);\n+    = lto_get_section_name (LTO_section_mode_table, NULL, 0, NULL);\n   lto_begin_section (section_name, !flag_wpa);\n   free (section_name);\n \n@@ -2928,7 +2931,7 @@ produce_asm_for_decls (void)\n \n   memset (&header, 0, sizeof (struct lto_decl_header));\n \n-  section_name = lto_get_section_name (LTO_section_decls, NULL, NULL);\n+  section_name = lto_get_section_name (LTO_section_decls, NULL, 0, NULL);\n   lto_begin_section (section_name, !flag_wpa);\n   free (section_name);\n "}, {"sha": "2ad979fdf34c8f194c9fbd125bc18ae836eb7b0a", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -114,7 +114,8 @@ lto_tag_name (enum LTO_tags tag)\n    to free the returned name.  */\n \n char *\n-lto_get_section_name (int section_type, const char *name, struct lto_file_decl_data *f)\n+lto_get_section_name (int section_type, const char *name,\n+\t\t      int node_order, struct lto_file_decl_data *f)\n {\n   const char *add;\n   char post[32];\n@@ -125,7 +126,11 @@ lto_get_section_name (int section_type, const char *name, struct lto_file_decl_d\n       gcc_assert (name != NULL);\n       if (name[0] == '*')\n \tname++;\n-      add = name;\n+\n+      char *buffer = (char *)xmalloc (strlen (name) + 32);\n+      sprintf (buffer, \"%s.%d\", name, node_order);\n+\n+      add = buffer;\n       sep = \"\";\n     }\n   else if (section_type < LTO_N_SECTION_TYPES)"}, {"sha": "116642740f4defd0b26da4aa66966b722deca74a", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -283,6 +283,7 @@ lto_file_decl_data_num_ ## name ## s (struct lto_file_decl_data *data) \\\n typedef const char* (lto_get_section_data_f) (struct lto_file_decl_data *,\n \t\t\t\t\t      enum lto_section_type,\n \t\t\t\t\t      const char *,\n+\t\t\t\t\t      int,\n \t\t\t\t\t      size_t *);\n \n /* Return the data found from the above call.  The first three\n@@ -623,6 +624,8 @@ struct GTY(()) lto_file_decl_data\n \n   /* Read LTO section.  */\n   lto_section lto_section_header;\n+\n+  int order_base;\n };\n \n typedef struct lto_file_decl_data *lto_file_decl_data_ptr;\n@@ -789,11 +792,14 @@ extern void lto_set_in_hooks (struct lto_file_decl_data **,\n extern struct lto_file_decl_data **lto_get_file_decl_data (void);\n extern const char *lto_get_section_data (struct lto_file_decl_data *,\n \t\t\t\t\t enum lto_section_type,\n-\t\t\t\t\t const char *, size_t *,\n+\t\t\t\t\t const char *, int, size_t *,\n \t\t\t\t\t bool decompress = false);\n+extern const char *lto_get_summary_section_data (struct lto_file_decl_data *,\n+\t\t\t\t\t\t enum lto_section_type,\n+\t\t\t\t\t\t size_t *);\n extern const char *lto_get_raw_section_data (struct lto_file_decl_data *,\n \t\t\t\t\t     enum lto_section_type,\n-\t\t\t\t\t     const char *, size_t *);\n+\t\t\t\t\t     const char *, int, size_t *);\n extern void lto_free_section_data (struct lto_file_decl_data *,\n \t\t\t           enum lto_section_type,\n \t\t\t\t   const char *, const char *, size_t,\n@@ -857,7 +863,8 @@ extern void lto_append_block (struct lto_output_stream *);\n extern bool lto_stream_offload_p;\n \n extern const char *lto_tag_name (enum LTO_tags);\n-extern char *lto_get_section_name (int, const char *, struct lto_file_decl_data *);\n+extern char *lto_get_section_name (int, const char *, int,\n+\t\t\t\t   struct lto_file_decl_data *);\n extern void print_lto_report (const char *);\n extern void lto_streamer_init (void);\n extern bool gate_lto_out (void);"}, {"sha": "a20e2d496fefdc232adcdb9327dfbfd7568fb700", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -1,3 +1,10 @@\n+2019-10-30  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/91393\n+\tPR lto/88220\n+\t* lto-common.c (lto_file_finalize): Use lto_get_summary_section_data.\n+\t(get_section_data): Add order argument.\n+\n 2019-10-29  Martin Liska  <mliska@suse.cz>\n \n \t* lto.c (do_whole_program_analysis): Pass"}, {"sha": "fc189ffcf0154c6f7b9c9de058398a818b278348", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -2204,7 +2204,7 @@ lto_file_finalize (struct lto_file_decl_data *file_data, lto_file *file,\n #endif\n \n   /* Read and verify LTO section.  */\n-  data = lto_get_section_data (file_data, LTO_section_lto, NULL, &len, false);\n+  data = lto_get_summary_section_data (file_data, LTO_section_lto, &len);\n   if (data == NULL)\n     {\n       fatal_error (input_location, \"bytecode stream in file %qs generated \"\n@@ -2217,7 +2217,7 @@ lto_file_finalize (struct lto_file_decl_data *file_data, lto_file *file,\n \t\t     file_data->lto_section_header.minor_version,\n \t\t     file_data->file_name);\n \n-  data = lto_get_section_data (file_data, LTO_section_decls, NULL, &len);\n+  data = lto_get_summary_section_data (file_data, LTO_section_decls, &len);\n   if (data == NULL)\n     {\n       internal_error (\"cannot read %<LTO_section_decls%> from %s\",\n@@ -2396,15 +2396,15 @@ lto_read_section_data (struct lto_file_decl_data *file_data,\n \n static const char *\n get_section_data (struct lto_file_decl_data *file_data,\n-\t\t      enum lto_section_type section_type,\n-\t\t      const char *name,\n-\t\t      size_t *len)\n+\t\t  enum lto_section_type section_type,\n+\t\t  const char *name, int order,\n+\t\t  size_t *len)\n {\n   htab_t section_hash_table = file_data->section_hash_table;\n   struct lto_section_slot *f_slot;\n   struct lto_section_slot s_slot;\n   const char *section_name = lto_get_section_name (section_type, name,\n-\t\t\t\t\t\t   file_data);\n+\t\t\t\t\t\t   order, file_data);\n   char *data = NULL;\n \n   *len = 0;"}, {"sha": "65729622b8c62a302eb6f64021dbd627abf89231", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -1,3 +1,9 @@\n+2019-10-30  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/91393\n+\tPR lto/88220\n+\t* gcc.dg/lto/pr91393_0.c: New test.\n+\n 2019-10-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/92262"}, {"sha": "43b2426c86b86cb3c4691ac3c020d3a5fe5c98e1", "filename": "gcc/testsuite/gcc.dg/lto/pr91393_0.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr91393_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr91393_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr91393_0.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -0,0 +1,11 @@\n+void __open_alias(int, ...) __asm__(\"open\");\n+void __open_alias(int flags, ...) {}\n+extern __inline __attribute__((__gnu_inline__)) int open() {}\n+struct {\n+  void *func;\n+} a = {open};\n+\n+int main()\n+{\n+  return 0;\n+}"}, {"sha": "d4b83429c126643deef7b1c35b7ef4ac473ead3e", "filename": "gcc/varpool.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=3c56d8d8de26c7d7ac46733b7b3c01ae34e144f1", "patch": "@@ -299,11 +299,12 @@ varpool_node::get_constructor (void)\n \t = lto_get_function_in_decl_state (file_data, decl);\n \n   data = lto_get_section_data (file_data, LTO_section_function_body,\n-\t\t\t       name, &len, decl_state->compressed);\n+\t\t\t       name, order - file_data->order_base,\n+\t\t\t       &len, decl_state->compressed);\n   if (!data)\n-    fatal_error (input_location, \"%s: section %s is missing\",\n+    fatal_error (input_location, \"%s: section %s.%d is missing\",\n \t\t file_data->file_name,\n-\t\t name);\n+\t\t name, order - file_data->order_base);\n \n   if (!quiet_flag)\n     fprintf (stderr, \" in:%s\", IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));"}]}