{"sha": "6b67c26e611e8546402d9b963398fad166439822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2N2MyNmU2MTFlODU0NjQwMmQ5Yjk2MzM5OGZhZDE2NjQzOTgyMg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-06-27T18:03:03Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-06-27T18:03:03Z"}, "message": "diagnostic.h: Add documentation.\n\n2001-06-27  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\t* diagnostic.h: Add documentation. Make macros polymorphic.\n\t* diagnostic.c (ideal_line_wrap_cutoff): Remove\n\tdefinition. Replace with diagnostic_line_cutoff.\n\t(prefixing_policy): Remove. Replace with diagnostic_prefixing_rule.\n\nFrom-SVN: r43616", "tree": {"sha": "31587bd16906560e230a3ecb24be524cab04216a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31587bd16906560e230a3ecb24be524cab04216a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b67c26e611e8546402d9b963398fad166439822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b67c26e611e8546402d9b963398fad166439822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b67c26e611e8546402d9b963398fad166439822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b67c26e611e8546402d9b963398fad166439822/comments", "author": null, "committer": null, "parents": [{"sha": "a8b997e8c4a0e1fb517f2d270f3ca3a990b01c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b997e8c4a0e1fb517f2d270f3ca3a990b01c24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b997e8c4a0e1fb517f2d270f3ca3a990b01c24"}], "stats": {"total": 112, "additions": 80, "deletions": 32}, "files": [{"sha": "5a89256f13e9f6f9f4ace58dbd157a191cc132cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b67c26e611e8546402d9b963398fad166439822/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b67c26e611e8546402d9b963398fad166439822/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b67c26e611e8546402d9b963398fad166439822", "patch": "@@ -1,3 +1,10 @@\n+2001-06-27  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.h: Add documentation. Make macros polymorphic.\n+\t* diagnostic.c (ideal_line_wrap_cutoff): Remove\n+\tdefinition. Replace with diagnostic_line_cutoff.\n+\t(prefixing_policy): Remove. Replace with diagnostic_prefixing_rule.\n+\n 2001-06-27  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/c-tree.texi, doc/contrib.texi, doc/cpp.texi,"}, {"sha": "c306355ff255ef6422abfc90b471811f3661e014", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b67c26e611e8546402d9b963398fad166439822/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b67c26e611e8546402d9b963398fad166439822/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=6b67c26e611e8546402d9b963398fad166439822", "patch": "@@ -52,9 +52,7 @@ Boston, MA 02111-1307, USA.  */\n #define is_starting_newline(BUFFER) (output_text_length (BUFFER) == 0)\n #define output_prefix(BUFFER) (BUFFER)->state.prefix\n #define line_wrap_cutoff(BUFFER) (BUFFER)->state.maximum_length\n-#define ideal_line_wrap_cutoff(BUFFER) (BUFFER)->state.ideal_maximum_length\n #define prefix_was_emitted_for(BUFFER) (BUFFER)->state.emitted_prefix_p\n-#define prefixing_policy(BUFFER) (BUFFER)->state.prefixing_rule\n #define output_buffer_ptr_to_format_args(BUFFER) (BUFFER)->state.format_args\n \n #define diagnostic_args output_buffer_ptr_to_format_args (diagnostic_buffer)\n@@ -189,7 +187,7 @@ int\n output_is_line_wrapping (buffer)\n      output_buffer *buffer;\n {\n-  return ideal_line_wrap_cutoff (buffer) > 0;\n+  return diagnostic_line_cutoff (buffer) > 0;\n }\n \n /* Return BUFFER's prefix.  */\n@@ -212,19 +210,19 @@ set_real_maximum_length (buffer)\n    we'll emit prefix only once per diagnostic message, it is appropriate\n   not to increase unncessarily the line-length cut-off.  */\n   if (! output_is_line_wrapping (buffer)\n-      || prefixing_policy (buffer) == DIAGNOSTICS_SHOW_PREFIX_ONCE\n-      || prefixing_policy (buffer) == DIAGNOSTICS_SHOW_PREFIX_NEVER)\n-    line_wrap_cutoff (buffer) = ideal_line_wrap_cutoff (buffer);\n+      || diagnostic_prefixing_rule (buffer) == DIAGNOSTICS_SHOW_PREFIX_ONCE\n+      || diagnostic_prefixing_rule (buffer) == DIAGNOSTICS_SHOW_PREFIX_NEVER)\n+    line_wrap_cutoff (buffer) = diagnostic_line_cutoff (buffer);\n   else\n     {\n       int prefix_length =\n         output_prefix (buffer) ? strlen (output_prefix (buffer)) : 0;\n       /* If the prefix is ridiculously too long, output at least\n          32 characters.  */\n-      if (ideal_line_wrap_cutoff (buffer) - prefix_length < 32)\n-        line_wrap_cutoff (buffer) = ideal_line_wrap_cutoff (buffer) + 32;\n+      if (diagnostic_line_cutoff (buffer) - prefix_length < 32)\n+        line_wrap_cutoff (buffer) = diagnostic_line_cutoff (buffer) + 32;\n       else\n-        line_wrap_cutoff (buffer) = ideal_line_wrap_cutoff (buffer);\n+        line_wrap_cutoff (buffer) = diagnostic_line_cutoff (buffer);\n     }\n }\n \n@@ -236,7 +234,7 @@ output_set_maximum_length (buffer, length)\n      output_buffer *buffer;\n      int length;\n {\n-  ideal_line_wrap_cutoff (buffer) = length;\n+  diagnostic_line_cutoff (buffer) = length;\n   set_real_maximum_length (buffer);\n }\n \n@@ -313,8 +311,8 @@ init_output_buffer (buffer, prefix, maximum_length)\n   memset (buffer, 0, sizeof (output_buffer));\n   obstack_init (&buffer->obstack);\n   output_buffer_attached_stream (buffer) = stderr;\n-  ideal_line_wrap_cutoff (buffer) = maximum_length;\n-  prefixing_policy (buffer) = diagnostic_prefixing_rule (global_dc);\n+  diagnostic_line_cutoff (buffer) = maximum_length;\n+  diagnostic_prefixing_rule (buffer) = diagnostic_prefixing_rule (global_dc);\n   output_set_prefix (buffer, prefix);\n   output_text_length (buffer) = 0;\n   clear_diagnostic_info (buffer);  \n@@ -366,7 +364,7 @@ output_emit_prefix (buffer)\n {\n   if (output_prefix (buffer) != NULL)\n     {\n-      switch (prefixing_policy (buffer))\n+      switch (diagnostic_prefixing_rule (buffer))\n         {\n         default:\n         case DIAGNOSTICS_SHOW_PREFIX_NEVER:\n@@ -1559,7 +1557,7 @@ output_do_verbatim (buffer, msgid, args_ptr)\n \n   os = output_buffer_state (buffer);\n   output_prefix (buffer) = NULL;\n-  prefixing_policy (buffer) = DIAGNOSTICS_SHOW_PREFIX_NEVER;\n+  diagnostic_prefixing_rule (buffer) = DIAGNOSTICS_SHOW_PREFIX_NEVER;\n   output_buffer_text_cursor (buffer) = _(msgid);\n   output_buffer_ptr_to_format_args (buffer) = args_ptr;\n   output_set_maximum_length (buffer, 0);"}, {"sha": "0e229bb9523cce0ed75ed6fdf4820f7c7842273c", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 61, "deletions": 18, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b67c26e611e8546402d9b963398fad166439822/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b67c26e611e8546402d9b963398fad166439822/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=6b67c26e611e8546402d9b963398fad166439822", "patch": "@@ -76,10 +76,10 @@ typedef struct\n   int indent_skip;\n \n   /* Nonzero if current PREFIX was emitted at least once.  */\n-  int emitted_prefix_p;\n+  bool emitted_prefix_p;\n \n   /* Nonzero means one should emit a newline before outputing anything.  */\n-  int need_newline_p;\n+  bool need_newline_p;\n \n   /* Current prefixing rule.  */\n   diagnostic_prefixing_rule_t prefixing_rule;\n@@ -130,13 +130,30 @@ struct output_buffer\n   printer_fn format_decoder;\n };\n \n-#define output_buffer_state(BUFFER) (BUFFER)->state\n+/* Current state of the diagnostic_context' output_buffer.  This macro\n+   accepts both `diagnostic_context *' and `output_buffer *'.  */\n+#define output_buffer_state(BUFFER) ((output_buffer *)BUFFER)->state\n+\n+/* The stream attached to the output_buffer, where the formatted\n+   diagnostics will ultimately go.  Works only on `output_buffer *'.  */\n #define output_buffer_attached_stream(BUFFER) (BUFFER)->stream\n+\n+/* This points to the beginning of the rest of the diagnostic message\n+   to be formatted.  Accepts only `output_buffer *'s.  */\n #define output_buffer_text_cursor(BUFFER) (BUFFER)->state.cursor\n-#define output_buffer_format_args(BUFFER) *((BUFFER)->state.format_args)\n+\n+/* The rest of the `variable argument list' not yet processed.\n+   This macro works on both `output_state *' and `output_buffer *'.  */\n+#define output_buffer_format_args(BUFFER) \\\n+   *(((output_state *)BUFFER)->format_args)\n+\n+/* In line-wrapping mode, whether we should start a new line.  */\n #define output_needs_newline(BUFFER) (BUFFER)->state.need_newline_p\n-#define output_buffer_state(BUFFER) (BUFFER)->state\n+\n+/* The amount of whitespace to be emitted when starting a new line.  */\n #define output_indentation(BUFFER) (BUFFER)->state.indent_skip\n+\n+/* A pointer to the formatted diagonstic message.  */\n #define output_message_text(BUFFER) \\\n    ((const char *) obstack_base (&(BUFFER)->obstack))\n \n@@ -181,39 +198,65 @@ struct diagnostic_context\n   void *x_data;\n };\n \n+/* The diagnostic message being formatted.  */\n #define diagnostic_message(DC) (DC)->message\n+\n+/* A pointer to the variable argument list used in a call\n+   to a diagonstic routine.  */   \n #define diagnostic_argument_list(DC) (DC)->args_ptr\n+\n+/* The program file to which the diagnostic is referring to.  */\n #define diagnostic_file_location(DC) (DC)->file\n+\n+/* The program source line referred to in the diagnostic message.  */\n #define diagnostic_line_location(DC) (DC)->line\n+\n+/* Tell whether the diagnostic message is to be treated as a warning.  */\n #define diagnostic_is_warning(DC) (DC)->warn\n+\n+/* Client supplied function to announce a diagnostic.  */\n #define diagnostic_starter(DC) (DC)->begin_diagnostic\n+\n+/* Client supplied function called after a diagnostic message is\n+   displayed.  */\n #define diagnostic_finalizer(DC) (DC)->end_diagnostic\n+\n+/* Extention hook for client.  */\n #define diagnostic_auxiliary_data(DC) (DC)->x_data\n-#define diagnostic_format_decoder(DC) (DC)->buffer.format_decoder\n-#define diagnostic_prefixing_rule(DC) (DC)->buffer.state.prefixing_rule\n+\n+/* Client supplied function used to decode formats.  Can operate on both\n+ `output_buffer *' and `diagnostic_context *'.  */\n+#define diagnostic_format_decoder(DC) ((output_buffer *)DC)->format_decoder\n+\n+/* Prefixing rule used in formatting a diagnostic message.  Accepts both\n+   `output_buffer *' and `diagnostic_context *'.  */\n+#define diagnostic_prefixing_rule(DC) \\\n+   ((output_buffer *)DC)->state.prefixing_rule\n \n /* Maximum characters per line in automatic line wrapping mode.\n    Zero means don't wrap lines. */\n-#define diagnostic_line_cutoff(DC) (DC)->buffer.state.ideal_maximum_length\n+#define diagnostic_line_cutoff(DC) \\\n+   ((output_buffer *)DC)->state.ideal_maximum_length\n \n-/* This output buffer is used by front-ends that directly output\n+/* This diagnostic context is used by front-ends that directly output\n    diagnostic messages without going through `error', `warning',\n-   and similar functions.  In general, such usage should be\n-   avoided.  This global buffer will go away, once all such usage\n-   has been removed.  */\n-extern output_buffer *diagnostic_buffer;\n+   and similar functions.  */\n extern diagnostic_context *global_dc;\n \n-#define diagnostic_kind_count(BUFFER, DK) \\\n-   (BUFFER)->state.diagnostic_count[(int) DK]\n+/* This will be removed shortly.  */\n+extern output_buffer *diagnostic_buffer;\n+\n+/* The total count of a KIND of diagnostics meitted so far.  */\n+#define diagnostic_kind_count(DC, DK) \\\n+   ((output_buffer *)DC)->state.diagnostic_count[(int) DK]\n \n /* The number of errors that have been issued so far.  Ideally, these\n    would take an output_buffer as an argument.  */\n-#define errorcount diagnostic_kind_count (diagnostic_buffer, DK_ERROR)\n+#define errorcount diagnostic_kind_count (global_dc, DK_ERROR)\n /* Similarly, but for warnings.  */\n-#define warningcount diagnostic_kind_count (diagnostic_buffer, DK_WARNING)\n+#define warningcount diagnostic_kind_count (global_dc, DK_WARNING)\n /* Similarly, but for sorrys.  */\n-#define sorrycount diagnostic_kind_count (diagnostic_buffer, DK_SORRY)\n+#define sorrycount diagnostic_kind_count (global_dc, DK_SORRY)\n \n /* Returns non-zero if warnings should be emitted.  */\n #define diagnostic_report_warnings_p()\t\t\t\\"}]}