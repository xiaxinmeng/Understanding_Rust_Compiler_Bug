{"sha": "097955f2b05559906c8cee612eaffd06c97c2f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3OTU1ZjJiMDU1NTk5MDZjOGNlZTYxMmVhZmZkMDZjOTdjMmYyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-03-18T19:44:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-03-18T19:44:29Z"}, "message": "re PR c++/2039 (bad code generated for access to unnamed union in base class)\n\n        PR c++/2039\n        * init.c (resolve_offset_ref): Hand off to build_component_ref.\n\nFrom-SVN: r50991", "tree": {"sha": "a736a461b660acd1f9c921b9d578952f38b9650a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a736a461b660acd1f9c921b9d578952f38b9650a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/097955f2b05559906c8cee612eaffd06c97c2f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097955f2b05559906c8cee612eaffd06c97c2f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097955f2b05559906c8cee612eaffd06c97c2f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097955f2b05559906c8cee612eaffd06c97c2f20/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2d8e20aff09aec125e2377c3403cc1cbc1f2d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d8e20aff09aec125e2377c3403cc1cbc1f2d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d8e20aff09aec125e2377c3403cc1cbc1f2d00"}], "stats": {"total": 83, "additions": 58, "deletions": 25}, "files": [{"sha": "6b791d54bde50a1cfe65ce5cb0ccfb32a400fc97", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097955f2b05559906c8cee612eaffd06c97c2f20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097955f2b05559906c8cee612eaffd06c97c2f20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=097955f2b05559906c8cee612eaffd06c97c2f20", "patch": "@@ -1,5 +1,8 @@\n 2002-03-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/2039\n+\t* init.c (resolve_offset_ref): Hand off to build_component_ref.\n+\n \tPR c++/4222, c++/5995\n \t* call.c (build_over_call): Fix empty class logic.\n "}, {"sha": "53c9eef17493d1b1545ea5837caa2b47bfbda375", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097955f2b05559906c8cee612eaffd06c97c2f20/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097955f2b05559906c8cee612eaffd06c97c2f20/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=097955f2b05559906c8cee612eaffd06c97c2f20", "patch": "@@ -1819,40 +1819,23 @@ resolve_offset_ref (exp)\n   if (TREE_CODE (member) == FIELD_DECL\n       && (base == current_class_ref || is_dummy_object (base)))\n     {\n-      tree expr;\n-\n-      basetype = DECL_CONTEXT (member);\n+      tree binfo = TYPE_BINFO (current_class_type);\n \n       /* Try to get to basetype from 'this'; if that doesn't work,\n          nothing will.  */\n       base = current_class_ref;\n \n       /* First convert to the intermediate base specified, if appropriate.  */\n       if (TREE_CODE (exp) == OFFSET_REF && TREE_CODE (type) == OFFSET_TYPE)\n-\tbase = build_scoped_ref (base, TYPE_OFFSET_BASETYPE (type));\n-\n-      /* Don't check access on the conversion; we might be after a member\n-\t promoted by an access- or using-declaration, and we have already\n-\t checked access for the member itself.  */\n-      basetype = lookup_base (TREE_TYPE (base), basetype, ba_ignore, NULL);\n-      expr = build_base_path (PLUS_EXPR, base, basetype, 1);\n-\n-      if (expr == error_mark_node)\n-\treturn error_mark_node;\n-\n-      type = TREE_TYPE (member);\n-      if (TREE_CODE (type) != REFERENCE_TYPE)\n \t{\n-\t  int quals = cp_type_quals (type) | cp_type_quals (TREE_TYPE (expr));\n-\n-\t  if (DECL_MUTABLE_P (member))\n-\t    quals &= ~TYPE_QUAL_CONST;\n-\t  \n-\t  type = cp_build_qualified_type (type, quals);\n+\t  binfo = binfo_or_else (TYPE_OFFSET_BASETYPE (type),\n+\t\t\t\t current_class_type);\n+\t  if (!binfo)\n+\t    return error_mark_node;\n+\t  base = build_base_path (PLUS_EXPR, base, binfo, 1);\n \t}\n-      \n-      expr = build (COMPONENT_REF, type, expr, member);\n-      return convert_from_reference (expr);\n+\n+      return build_component_ref (base, member, binfo, 1);\n     }\n \n   /* Ensure that we have an object.  */"}, {"sha": "e4db50d946cb6312aa867a057be88114b3171540", "filename": "gcc/testsuite/g++.dg/lookup/anon1.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097955f2b05559906c8cee612eaffd06c97c2f20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097955f2b05559906c8cee612eaffd06c97c2f20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon1.C?ref=097955f2b05559906c8cee612eaffd06c97c2f20", "patch": "@@ -0,0 +1,47 @@\n+// PR c++/2039\n+// Test that a scoped reference to a member of an anonymous union member of\n+// a base class works properly.\n+\n+// { dg-do run }\n+\n+struct A\n+{\n+  long ia1;\n+  union\n+  {\n+    long ia2;\n+  };\n+};\n+\n+struct B : public A\n+{\n+  void f1();\n+  void f2();\n+};\n+\n+void B::f1()\n+{\n+  ia1 = 11;\n+  ia2 = 22;\n+}\n+\n+void B::f2()\n+{\n+  ia1    = 33;\n+  A::ia2 = 44;   // <<< !!!????\n+}\n+\n+int main()\n+{\n+  B x;\n+\n+  x.f1();\n+  if (x.ia1 != 11 || x.ia2 != 22)\n+    return 1;\n+\n+  x.f2();\n+  if (x.ia1 != 33 || x.ia2 != 44)\n+    return 1;\n+\n+  return 0;\n+}"}]}