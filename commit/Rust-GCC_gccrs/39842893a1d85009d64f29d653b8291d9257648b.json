{"sha": "39842893a1d85009d64f29d653b8291d9257648b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk4NDI4OTNhMWQ4NTAwOWQ2NGYyOWQ2NTNiODI5MWQ5MjU3NjQ4Yg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-03-09T15:49:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-09T15:49:12Z"}, "message": "* calls.c (expand_call): Slightly reorganize code.\n\nFrom-SVN: r25655", "tree": {"sha": "927487c5569fd7b5bd3e13ac22b5e59849a1eb7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/927487c5569fd7b5bd3e13ac22b5e59849a1eb7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39842893a1d85009d64f29d653b8291d9257648b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39842893a1d85009d64f29d653b8291d9257648b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39842893a1d85009d64f29d653b8291d9257648b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39842893a1d85009d64f29d653b8291d9257648b/comments", "author": null, "committer": null, "parents": [{"sha": "89b21b680c3dcbd328c15663624e4e44a8f1da25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b21b680c3dcbd328c15663624e4e44a8f1da25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b21b680c3dcbd328c15663624e4e44a8f1da25"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "2a5b2a99169c0a6c2d2f72b8a91c3801ac18c195", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39842893a1d85009d64f29d653b8291d9257648b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39842893a1d85009d64f29d653b8291d9257648b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39842893a1d85009d64f29d653b8291d9257648b", "patch": "@@ -15,6 +15,8 @@ Tue Mar  9 09:33:16 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n Tue Mar  9 02:08:17 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* calls.c (expand_call): Slightly reorganize code.\n+\n \t* calls.c (compute_argument_addresses): New function.\n \t(rtx_for_function_call): New function.\n \t(expand_call): Use them."}, {"sha": "e45c3c23360d735581af3c1d7a75bf6bfe2f16ab", "filename": "gcc/calls.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39842893a1d85009d64f29d653b8291d9257648b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39842893a1d85009d64f29d653b8291d9257648b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=39842893a1d85009d64f29d653b8291d9257648b", "patch": "@@ -1754,11 +1754,6 @@ expand_call (exp, target, ignore)\n       mark_addressable (fndecl);\n     }\n \n-  /* When calling a const function, we must pop the stack args right away,\n-     so that the pop is deleted or moved with the call.  */\n-  if (is_const)\n-    NO_DEFER_POP;\n-\n   function_call_count++;\n \n   if (fndecl && DECL_NAME (fndecl))\n@@ -1772,6 +1767,17 @@ expand_call (exp, target, ignore)\n   if (may_be_alloca)\n     current_function_calls_alloca = 1;\n \n+  /* Operand 0 is a pointer-to-function; get the type of the function.  */\n+  funtype = TREE_TYPE (TREE_OPERAND (exp, 0));\n+  if (! POINTER_TYPE_P (funtype))\n+    abort ();\n+  funtype = TREE_TYPE (funtype);\n+\n+  /* When calling a const function, we must pop the stack args right away,\n+     so that the pop is deleted or moved with the call.  */\n+  if (is_const)\n+    NO_DEFER_POP;\n+\n   /* Don't let pending stack adjusts add up to too much.\n      Also, do all pending adjustments now\n      if there is any chance this might be a call to alloca.  */\n@@ -1780,13 +1786,6 @@ expand_call (exp, target, ignore)\n       || (pending_stack_adjust > 0 && may_be_alloca))\n     do_pending_stack_adjust ();\n \n-  /* Operand 0 is a pointer-to-function; get the type of the function.  */\n-  funtype = TREE_TYPE (TREE_OPERAND (exp, 0));\n-  if (! POINTER_TYPE_P (funtype))\n-    abort ();\n-\n-  funtype = TREE_TYPE (funtype);\n-\n   /* Push the temporary stack slot level so that we can free any temporaries\n      we make.  */\n   push_temp_slots ();"}]}