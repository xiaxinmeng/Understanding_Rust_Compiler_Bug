{"sha": "3b111bd757f065188029914f9a7b21c1e1c3ccfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IxMTFiZDc1N2YwNjUxODgwMjk5MTRmOWE3YjIxYzFlMWMzY2NmZQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2014-05-26T15:19:36Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2014-05-26T15:19:36Z"}, "message": "[multiple changes]\n\n2014-05-26  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/55117\n\t* trans-io.c (nml_full_name, transfer_namelist_element): Insert\n\ta '+' rather then '%' to differentiate namelist variable names\n\tthat are based on extended derived types.\n\n2014-05-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/55117\n\t* io/list_read.c (extended_look_ahead): New helper function to\n\tscan the namelist name and look for matches with the new '+'\n\textended type parent indicator.  (str_comp_extended): New\n\thelper function to compare the namelist name with the varname\n\tnamelist. (find_nml_name): Use the new helper functions to match\n\tthe extended type varnames.\n\nFrom-SVN: r210934", "tree": {"sha": "e0feaad272b918928001fe12ba340e17a2ae7878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0feaad272b918928001fe12ba340e17a2ae7878"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b111bd757f065188029914f9a7b21c1e1c3ccfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b111bd757f065188029914f9a7b21c1e1c3ccfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b111bd757f065188029914f9a7b21c1e1c3ccfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b111bd757f065188029914f9a7b21c1e1c3ccfe/comments", "author": null, "committer": null, "parents": [{"sha": "d93461f724b233e2af55555da586d5d5ebe2081b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93461f724b233e2af55555da586d5d5ebe2081b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93461f724b233e2af55555da586d5d5ebe2081b"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "0a830a7ed6ebb49a16dd136f27011bdc4f06b8d5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b111bd757f065188029914f9a7b21c1e1c3ccfe/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b111bd757f065188029914f9a7b21c1e1c3ccfe/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3b111bd757f065188029914f9a7b21c1e1c3ccfe", "patch": "@@ -1,3 +1,10 @@\n+2014-05-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55117\n+\t* trans-io.c (nml_full_name, transfer_namelist_element): Insert\n+\ta '+' rather then '%' to differentiate namelist variable names\n+\tthat are based on extended derived types.\n+\n 2014-05-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* check.c (gfc_check_num_images): New."}, {"sha": "fb6f69fa49c7a878aa0ddffc730200db69b2a213", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b111bd757f065188029914f9a7b21c1e1c3ccfe/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b111bd757f065188029914f9a7b21c1e1c3ccfe/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=3b111bd757f065188029914f9a7b21c1e1c3ccfe", "patch": "@@ -1452,18 +1452,18 @@ gfc_trans_wait (gfc_code * code)\n \n \n /* nml_full_name builds up the fully qualified name of a\n-   derived type component.  */\n+   derived type component. '+' is used to denote a type extension.  */\n \n static char*\n-nml_full_name (const char* var_name, const char* cmp_name)\n+nml_full_name (const char* var_name, const char* cmp_name, bool parent)\n {\n   int full_name_length;\n   char * full_name;\n \n   full_name_length = strlen (var_name) + strlen (cmp_name) + 1;\n   full_name = XCNEWVEC (char, full_name_length + 1);\n   strcpy (full_name, var_name);\n-  full_name = strcat (full_name, \"%\");\n+  full_name = strcat (full_name, parent ? \"+\" : \"%\");\n   full_name = strcat (full_name, cmp_name);\n   return full_name;\n }\n@@ -1634,7 +1634,8 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n \n       for (cmp = ts->u.derived->components; cmp; cmp = cmp->next)\n \t{\n-\t  char *full_name = nml_full_name (var_name, cmp->name);\n+\t  char *full_name = nml_full_name (var_name, cmp->name,\n+\t\t\t\t\t   ts->u.derived->attr.extension);\n \t  transfer_namelist_element (block,\n \t\t\t\t     full_name,\n \t\t\t\t     NULL, cmp, expr);"}, {"sha": "efa6f053a0d49ca5111fc0e7b08b42a3783dc0d8", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b111bd757f065188029914f9a7b21c1e1c3ccfe/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b111bd757f065188029914f9a7b21c1e1c3ccfe/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3b111bd757f065188029914f9a7b21c1e1c3ccfe", "patch": "@@ -1,3 +1,13 @@\n+2014-05-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/55117\n+\t* io/list_read.c (extended_look_ahead): New helper function to\n+\tscan the namelist name and look for matches with the new '+'\n+\textended type parent indicator.  (str_comp_extended): New\n+\thelper function to compare the namelist name with the varname\n+\tnamelist. (find_nml_name): Use the new helper functions to match\n+\tthe extended type varnames.\t\n+\n 2014-05-23  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \n \tPR libfortran/61173"}, {"sha": "13e38f48afb0b0f0c4e33a2f649206ed32bc64b1", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b111bd757f065188029914f9a7b21c1e1c3ccfe/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b111bd757f065188029914f9a7b21c1e1c3ccfe/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=3b111bd757f065188029914f9a7b21c1e1c3ccfe", "patch": "@@ -2557,6 +2557,38 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n   return false;\n }\n \n+\n+static bool\n+extended_look_ahead (char *p, char *q)\n+{\n+  char *r, *s;\n+\n+  /* Scan ahead to find a '%' in the p string.  */\n+  for(r = p, s = q; *r && *s; s++)\n+    if ((*s == '%' || *s == '+') && strcmp (r + 1, s + 1) == 0)\n+      return true;\n+  return false;\n+}\n+\n+\n+static bool\n+strcmp_extended_type (char *p, char *q)\n+{\n+  char *r, *s;\n+  \n+  for (r = p, s = q; *r && *s; r++, s++)\n+    {\n+      if (*r != *s)\n+\t{\n+\t  if (*r == '%' && *s == '+' && extended_look_ahead (r, s))\n+\t    return true;\n+\t  break;\n+\t}\n+    }\n+  return false;\n+}\n+\n+\n static namelist_info *\n find_nml_node (st_parameter_dt *dtp, char * var_name)\n {\n@@ -2568,6 +2600,11 @@ find_nml_node (st_parameter_dt *dtp, char * var_name)\n \t  t->touched = 1;\n \t  return t;\n \t}\n+      if (strcmp_extended_type (var_name, t->var_name))\n+\t{\n+\t  t->touched = 1;\n+\t  return t;\n+\t}\n       t = t->next;\n     }\n   return NULL;"}]}