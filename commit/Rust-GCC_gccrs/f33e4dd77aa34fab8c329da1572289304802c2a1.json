{"sha": "f33e4dd77aa34fab8c329da1572289304802c2a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzZTRkZDc3YWEzNGZhYjhjMzI5ZGExNTcyMjg5MzA0ODAyYzJhMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-12T18:25:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-12T18:25:42Z"}, "message": "re PR c++/42013 (cv-qualification of conditional expression type depending on the value of its first expression?!?)\n\n\tPR c++/42013\n\t* call.c (build_conditional_expr): Don't fold a TREE_SIDE_EFFECTS\n\tCOND_EXPR in unevaluated context.\n\nFrom-SVN: r154124", "tree": {"sha": "11455813d31d0bd5a499463d3f1bf40fc9518d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11455813d31d0bd5a499463d3f1bf40fc9518d77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33e4dd77aa34fab8c329da1572289304802c2a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33e4dd77aa34fab8c329da1572289304802c2a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33e4dd77aa34fab8c329da1572289304802c2a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33e4dd77aa34fab8c329da1572289304802c2a1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d324ddebd9179cac8a7dcc1bba76b8579902e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d324ddebd9179cac8a7dcc1bba76b8579902e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d324ddebd9179cac8a7dcc1bba76b8579902e9f"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "e6d696b0447513753fffacca33f05c7ddb78ba46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e4dd77aa34fab8c329da1572289304802c2a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e4dd77aa34fab8c329da1572289304802c2a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f33e4dd77aa34fab8c329da1572289304802c2a1", "patch": "@@ -1,3 +1,9 @@\n+2009-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42013\n+\t* call.c (build_conditional_expr): Don't fold a TREE_SIDE_EFFECTS\n+\tCOND_EXPR in unevaluated context.\n+\n 2009-11-12  Jan Hubicka  <jh@suse.cz>\n \n \t* decl2.c (constrain_visibility): Clear WEAK and COMMON flags."}, {"sha": "e77a738660d4281352c43109213955cb4b954686", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e4dd77aa34fab8c329da1572289304802c2a1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e4dd77aa34fab8c329da1572289304802c2a1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f33e4dd77aa34fab8c329da1572289304802c2a1", "patch": "@@ -3991,8 +3991,13 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3,\n     }\n \n  valid_operands:\n-  result = fold_if_not_in_template (build3 (COND_EXPR, result_type, arg1,\n-\t\t\t\t\t    arg2, arg3));\n+  result = build3 (COND_EXPR, result_type, arg1, arg2, arg3);\n+\n+  if (cp_unevaluated_operand && TREE_SIDE_EFFECTS (result))\n+    /* Avoid folding a ?: of two calls within decltype (c++/42013).  */;\n+  else\n+    result = fold_if_not_in_template (result);\n+\n   /* We can't use result_type below, as fold might have returned a\n      throw_expr.  */\n "}, {"sha": "d5115fd09ac89f61b3d89ac3456c9fc853689eef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e4dd77aa34fab8c329da1572289304802c2a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e4dd77aa34fab8c329da1572289304802c2a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f33e4dd77aa34fab8c329da1572289304802c2a1", "patch": "@@ -1,3 +1,8 @@\n+2009-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42013\n+\t* g++.dg/cpp0x/decltype19.C: New.\n+\n 2009-11-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/39131"}, {"sha": "33ca71ff4929f60f2a4d59127af750fb972a50a1", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype19.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33e4dd77aa34fab8c329da1572289304802c2a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33e4dd77aa34fab8c329da1572289304802c2a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype19.C?ref=f33e4dd77aa34fab8c329da1572289304802c2a1", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/42013\n+\n+template<typename _Tp>\n+  _Tp\n+declval();\n+\n+template<typename _Tp, typename _Up>\n+  struct common_type\n+  {\n+    typedef __decltype(true  ? declval<_Tp>() : declval<_Up>()) typet;\n+    typedef __decltype(false ? declval<_Tp>() : declval<_Up>()) typef;\n+  };\n+\n+template<typename, typename> struct is_same;\n+\n+template<typename _Tp> struct is_same<_Tp, _Tp> { typedef _Tp type; };\n+\n+void f()\n+{\n+  typedef common_type<int, const int>::typet typet;\n+  typedef common_type<int, const int>::typef typef;\n+\n+  typedef is_same<typet, typef>::type type;\n+}"}]}