{"sha": "17f6e9a357a2a55601fc237e08d91fe7f24bb7c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmNmU5YTM1N2EyYTU1NjAxZmMyMzdlMDhkOTFmZTdmMjRiYjdjMw==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-11-24T23:39:47Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-11-24T23:39:47Z"}, "message": "linux-atomic.c (ABORT_INSTRUCTION): Use __builtin_trap() instead.\n\n\t* config/pa/linux-atomic.c (ABORT_INSTRUCTION): Use __builtin_trap()\n\tinstead.\n\nFrom-SVN: r218033", "tree": {"sha": "eaa1132734c93f0c8559037f073f339a07610468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaa1132734c93f0c8559037f073f339a07610468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17f6e9a357a2a55601fc237e08d91fe7f24bb7c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f6e9a357a2a55601fc237e08d91fe7f24bb7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f6e9a357a2a55601fc237e08d91fe7f24bb7c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f6e9a357a2a55601fc237e08d91fe7f24bb7c3/comments", "author": null, "committer": null, "parents": [{"sha": "67c4c164202205321e843f2345a0f786d8b30aa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c4c164202205321e843f2345a0f786d8b30aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c4c164202205321e843f2345a0f786d8b30aa6"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "d35a962a7b94f728268437ae5b04af4684bad983", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f6e9a357a2a55601fc237e08d91fe7f24bb7c3/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f6e9a357a2a55601fc237e08d91fe7f24bb7c3/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=17f6e9a357a2a55601fc237e08d91fe7f24bb7c3", "patch": "@@ -1,3 +1,8 @@\n+2014-11-24  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/linux-atomic.c (ABORT_INSTRUCTION): Use __builtin_trap()\n+\tinstead.\n+\n 2014-11-21  Guy Martin  <gmsoft@tuxicoman.be>\n \t    John David Anglin  <danglin@gcc.gnu.org>\n "}, {"sha": "19e37b6f3c4d33e88b8c1ba0fab8dd6ece3da84e", "filename": "libgcc/config/pa/linux-atomic.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f6e9a357a2a55601fc237e08d91fe7f24bb7c3/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f6e9a357a2a55601fc237e08d91fe7f24bb7c3/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c?ref=17f6e9a357a2a55601fc237e08d91fe7f24bb7c3", "patch": "@@ -41,9 +41,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    using the kernel helper defined below.  There is no support for\n    64-bit operations yet.  */\n \n-/* A privileged instruction to crash a userspace program with SIGILL.  */\n-#define ABORT_INSTRUCTION asm (\"iitlbp %r0,(%sr0, %r0)\")\n-\n /* Determine kernel LWS function call (0=32-bit, 1=64-bit userspace).  */\n #define LWS_CAS (sizeof(long) == 4 ? 0 : 1)\n \n@@ -64,7 +61,7 @@ __kernel_cmpxchg (int oldval, int newval, int *mem)\n \t: \"r1\", \"r20\", \"r22\", \"r23\", \"r29\", \"r31\", \"memory\"\n   );\n   if (__builtin_expect (lws_errno == -EFAULT || lws_errno == -ENOSYS, 0))\n-    ABORT_INSTRUCTION;\n+    __builtin_trap ();\n \n   /* If the kernel LWS call succeeded (lws_errno == 0), lws_ret contains\n      the old value from memory.  If this value is equal to OLDVAL, the\n@@ -91,7 +88,7 @@ __kernel_cmpxchg2 (void * oldval, void * newval, void *mem, int val_size)\n \t: \"r1\", \"r20\", \"r22\", \"r29\", \"r31\", \"fr4\", \"memory\"\n   );\n   if (__builtin_expect (lws_errno == -EFAULT || lws_errno == -ENOSYS, 0))\n-    ABORT_INSTRUCTION;\n+    __builtin_trap ();\n \n   /* If the kernel LWS call fails, retrun EBUSY */\n   if (!lws_errno && lws_ret)"}]}