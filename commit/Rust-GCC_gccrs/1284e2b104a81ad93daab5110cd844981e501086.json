{"sha": "1284e2b104a81ad93daab5110cd844981e501086", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4NGUyYjEwNGE4MWFkOTNkYWFiNTExMGNkODQ0OTgxZTUwMTA4Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-11T13:10:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-11T13:10:15Z"}, "message": "re PR tree-optimization/90883 (Generated code is worse if returned struct is unnamed)\n\n2019-10-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/90883\n\tPR tree-optimization/91091\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Use correct\n\talias-sets both for recording VN table entries and continuing\n\twalking after translating through copies.  Handle same-sized\n\treads from SSA names by returning the plain SSA name.\n\t(eliminate_dom_walker::eliminate_stmt): Properly handle\n\tnon-size precision stores in redundant store elimination.\n\n\t* gcc.dg/torture/20191011-1.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-fre-82.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-83.c: Likewise.\n\t* gcc.dg/tree-ssa/redundant-assign-zero-1.c: Disable FRE.\n\t* gcc.dg/tree-ssa/redundant-assign-zero-2.c: Likewise.\n\nFrom-SVN: r276882", "tree": {"sha": "d773f6808cd52e7a7ccf0619e48f94f89c3e7c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d773f6808cd52e7a7ccf0619e48f94f89c3e7c28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1284e2b104a81ad93daab5110cd844981e501086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1284e2b104a81ad93daab5110cd844981e501086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1284e2b104a81ad93daab5110cd844981e501086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1284e2b104a81ad93daab5110cd844981e501086/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5207f1a6528877713109dc59b8db6c62a6eca28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5207f1a6528877713109dc59b8db6c62a6eca28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5207f1a6528877713109dc59b8db6c62a6eca28"}], "stats": {"total": 217, "additions": 186, "deletions": 31}, "files": [{"sha": "34a6db2e73e15e08112d0344c5c2e3a333238e84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1284e2b104a81ad93daab5110cd844981e501086/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1284e2b104a81ad93daab5110cd844981e501086/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1284e2b104a81ad93daab5110cd844981e501086", "patch": "@@ -1,3 +1,14 @@\n+2019-10-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90883\n+\tPR tree-optimization/91091\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Use correct\n+\talias-sets both for recording VN table entries and continuing\n+\twalking after translating through copies.  Handle same-sized\n+\treads from SSA names by returning the plain SSA name.\n+\t(eliminate_dom_walker::eliminate_stmt): Properly handle\n+\tnon-size precision stores in redundant store elimination.\n+\n 2019-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ggc-page.c (release_pages): Output statistics when !quiet_flag."}, {"sha": "c18cb5fa6f79d73ed3a7bbcad96e42228ea671c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1284e2b104a81ad93daab5110cd844981e501086", "patch": "@@ -1,3 +1,13 @@\n+2019-10-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90883\n+\tPR tree-optimization/91091\n+\t* gcc.dg/torture/20191011-1.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-fre-82.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-83.c: Likewise.\n+\t* gcc.dg/tree-ssa/redundant-assign-zero-1.c: Disable FRE.\n+\t* gcc.dg/tree-ssa/redundant-assign-zero-2.c: Likewise.\n+\n 2019-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/size_clause4.ads: New test."}, {"sha": "c00b27d83899fabdef1deb7e0d9252df13f34f5e", "filename": "gcc/testsuite/gcc.dg/torture/20191011-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20191011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20191011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20191011-1.c?ref=1284e2b104a81ad93daab5110cd844981e501086", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fgimple -fstrict-aliasing\" } */\n+\n+#if __SIZEOF_INT__ != __SIZEOF_FLOAT__\n+int main() { return 0; }\n+#else\n+struct X { int i; };\n+float f;\n+\n+int __GIMPLE (ssa,startwith(\"fre\")) __attribute__((noipa))\n+foo (float *p)\n+{\n+  struct X x;\n+  float tem;\n+  int _2;\n+\n+  __BB(2):\n+  f = 0.0f;\n+  __MEM <float> (p_1(D)) = 1.0f;\n+  x = __VIEW_CONVERT <struct X> (f);\n+  _2 = x.i;\n+  return _2;\n+}\n+\n+int\n+main()\n+{\n+  if (foo (&f) == 0)\n+    __builtin_abort ();\n+  return 0;\n+}\n+#endif"}, {"sha": "eadf1814916c3a9c5c1d6e967449ccb4630c7dc9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/redundant-assign-zero-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-1.c?ref=1284e2b104a81ad93daab5110cd844981e501086", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dse-details\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-dse-details\" } */\n \n void blah (char *);\n "}, {"sha": "4a5b7804922e4200ea859562ad0ef9328dc74078", "filename": "gcc/testsuite/gcc.dg/tree-ssa/redundant-assign-zero-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-2.c?ref=1284e2b104a81ad93daab5110cd844981e501086", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dse-details\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-dse-details\" } */\n \n #include <string.h>\n "}, {"sha": "e245488b80d840b7791c8f0ed2a98a1cad661420", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-82.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-82.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-82.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-82.c?ref=1284e2b104a81ad93daab5110cd844981e501086", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+\n+struct S { _Bool x; };\n+\n+void\n+foo (struct S *s)\n+{\n+  __builtin_memset (s, 1, sizeof (struct S));\n+  s->x = 1;\n+}\n+\n+int\n+main ()\n+{\n+  struct S s;\n+  foo (&s);\n+  char c;\n+  __builtin_memcpy (&c, &s.x, 1);\n+  if (c != 1)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Deleted redundant store\" \"fre1\" } } */"}, {"sha": "cf6be22937732c27ea621a73e9250d008515ca54", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-83.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-83.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-83.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-83.c?ref=1284e2b104a81ad93daab5110cd844981e501086", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+\n+struct X\n+{\n+   int a : 1;\n+   int b : 1;\n+} x;\n+\n+void foo (int v)\n+{\n+  x.a = 1;\n+  x.b = v;\n+  x.a = 1;\n+  x.b = v;\n+}\n+\n+struct Y\n+{\n+   _Bool a;\n+   _Bool b;\n+} y;\n+\n+void bar (int v)\n+{\n+  y.a = 1;\n+  y.b = v;\n+  y.a = 1;\n+  y.b = v;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleted redundant store\" 4 \"fre1\" } } */"}, {"sha": "364d0d0ca4ff8b2fed0d6a0b2a1ec5150a2af2ab", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 74, "deletions": 29, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1284e2b104a81ad93daab5110cd844981e501086/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1284e2b104a81ad93daab5110cd844981e501086", "patch": "@@ -1877,8 +1877,10 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n \t\t \"Successfully combined %u partial definitions\\n\", ndefs);\n+      /* ???  If we track partial defs alias-set we could use that if it\n+         is the same for all.  Use zero for now.  */\n       return vn_reference_lookup_or_insert_for_pieces\n-\t\t(first_vuse, vr->set, vr->type, vr->operands, val);\n+\t\t(first_vuse, 0, vr->type, vr->operands, val);\n     }\n   else\n     {\n@@ -2331,9 +2333,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t}\n     }\n \n-  /* If we are looking for redundant stores do not create new hashtable\n-     entries from aliasing defs with made up alias-sets.  */\n-  if (*disambiguate_only > TR_TRANSLATE || !data->tbaa_p)\n+  if (*disambiguate_only > TR_TRANSLATE)\n     return (void *)-1;\n \n   /* If we cannot constrain the size of the reference we cannot\n@@ -2449,7 +2449,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\treturn (void *)-1;\n \t    }\n \t  return vn_reference_lookup_or_insert_for_pieces\n-\t           (vuse, vr->set, vr->type, vr->operands, val);\n+\t           (vuse, 0, vr->type, vr->operands, val);\n \t}\n       /* For now handle clearing memory with partial defs.  */\n       else if (known_eq (ref->size, maxsize)\n@@ -2499,7 +2499,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t    {\n \t      tree val = build_zero_cst (vr->type);\n \t      return vn_reference_lookup_or_insert_for_pieces\n-\t\t  (vuse, vr->set, vr->type, vr->operands, val);\n+\t\t  (vuse, get_alias_set (lhs), vr->type, vr->operands, val);\n \t    }\n \t  else if (known_eq (ref->size, maxsize)\n \t\t   && maxsize.is_constant (&maxsizei)\n@@ -2614,7 +2614,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \n \t\t  if (val)\n \t\t    return vn_reference_lookup_or_insert_for_pieces\n-\t\t\t(vuse, vr->set, vr->type, vr->operands, val);\n+\t\t      (vuse, get_alias_set (lhs), vr->type, vr->operands, val);\n \t\t}\n \t    }\n \t  else if (ranges_known_overlap_p (offseti, maxsizei, offset2i, size2i))\n@@ -2672,23 +2672,26 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t     according to endianness.  */\n \t  && (! INTEGRAL_TYPE_P (vr->type)\n \t      || known_eq (ref->size, TYPE_PRECISION (vr->type)))\n-\t  && multiple_p (ref->size, BITS_PER_UNIT)\n-\t  && (! INTEGRAL_TYPE_P (TREE_TYPE (def_rhs))\n-\t      || type_has_mode_precision_p (TREE_TYPE (def_rhs))))\n+\t  && multiple_p (ref->size, BITS_PER_UNIT))\n \t{\n-\t  gimple_match_op op (gimple_match_cond::UNCOND,\n-\t\t\t      BIT_FIELD_REF, vr->type,\n-\t\t\t      vn_valueize (def_rhs),\n-\t\t\t      bitsize_int (ref->size),\n-\t\t\t      bitsize_int (offset - offset2));\n-\t  tree val = vn_nary_build_or_lookup (&op);\n-\t  if (val\n-\t      && (TREE_CODE (val) != SSA_NAME\n-\t\t  || ! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val)))\n+\t  if (known_eq (ref->size, size2))\n+\t    return vn_reference_lookup_or_insert_for_pieces\n+\t\t(vuse, get_alias_set (lhs), vr->type, vr->operands,\n+\t\t SSA_VAL (def_rhs));\n+\t  else if (! INTEGRAL_TYPE_P (TREE_TYPE (def_rhs))\n+\t\t   || type_has_mode_precision_p (TREE_TYPE (def_rhs)))\n \t    {\n-\t      vn_reference_t res = vn_reference_lookup_or_insert_for_pieces\n-\t\t  (vuse, vr->set, vr->type, vr->operands, val);\n-\t      return res;\n+\t      gimple_match_op op (gimple_match_cond::UNCOND,\n+\t\t\t\t  BIT_FIELD_REF, vr->type,\n+\t\t\t\t  vn_valueize (def_rhs),\n+\t\t\t\t  bitsize_int (ref->size),\n+\t\t\t\t  bitsize_int (offset - offset2));\n+\t      tree val = vn_nary_build_or_lookup (&op);\n+\t      if (val\n+\t\t  && (TREE_CODE (val) != SSA_NAME\n+\t\t      || ! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val)))\n+\t\treturn vn_reference_lookup_or_insert_for_pieces\n+\t\t    (vuse, get_alias_set (lhs), vr->type, vr->operands, val);\n \t    }\n \t}\n     }\n@@ -2770,7 +2773,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t}\n \n       /* Now re-write REF to be based on the rhs of the assignment.  */\n-      copy_reference_ops_from_ref (gimple_assign_rhs1 (def_stmt), &rhs);\n+      tree rhs1 = gimple_assign_rhs1 (def_stmt);\n+      copy_reference_ops_from_ref (rhs1, &rhs);\n \n       /* Apply an extra offset to the inner MEM_REF of the RHS.  */\n       if (maybe_ne (extra_off, 0))\n@@ -2806,7 +2810,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t{\n \t  if (data->partial_defs.is_empty ())\n \t    return vn_reference_lookup_or_insert_for_pieces\n-\t\t(vuse, vr->set, vr->type, vr->operands, val);\n+\t      (vuse, get_alias_set (rhs1), vr->type, vr->operands, val);\n \t  /* This is the only interesting case for partial-def handling\n \t     coming from targets that like to gimplify init-ctors as\n \t     aggregate copies from constant data like aarch64 for\n@@ -2829,7 +2833,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \treturn (void *)-1;\n \n       /* Adjust *ref from the new operands.  */\n-      if (!ao_ref_init_from_vn_reference (&r, vr->set, vr->type, vr->operands))\n+      if (!ao_ref_init_from_vn_reference (&r, get_alias_set (rhs1),\n+\t\t\t\t\t  vr->type, vr->operands))\n \treturn (void *)-1;\n       /* This can happen with bitfields.  */\n       if (maybe_ne (ref->size, r.size))\n@@ -2990,10 +2995,10 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       tree val = fully_constant_vn_reference_p (vr);\n       if (val)\n \treturn vn_reference_lookup_or_insert_for_pieces\n-\t\t (vuse, vr->set, vr->type, vr->operands, val);\n+\t\t (vuse, 0, vr->type, vr->operands, val);\n \n       /* Adjust *ref from the new operands.  */\n-      if (!ao_ref_init_from_vn_reference (&r, vr->set, vr->type, vr->operands))\n+      if (!ao_ref_init_from_vn_reference (&r, 0, vr->type, vr->operands))\n \treturn (void *)-1;\n       /* This can happen with bitfields.  */\n       if (maybe_ne (ref->size, r.size))\n@@ -5539,8 +5544,48 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n       tree val;\n       tree rhs = gimple_assign_rhs1 (stmt);\n       vn_reference_t vnresult;\n-      val = vn_reference_lookup (lhs, gimple_vuse (stmt), VN_WALKREWRITE,\n-\t\t\t\t &vnresult, false);\n+      /* ???  gcc.dg/torture/pr91445.c shows that we lookup a boolean\n+         typed load of a byte known to be 0x11 as 1 so a store of\n+\t a boolean 1 is detected as redundant.  Because of this we\n+\t have to make sure to lookup with a ref where its size\n+\t matches the precision.  */\n+      tree lookup_lhs = lhs;\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t  && (TREE_CODE (lhs) != COMPONENT_REF\n+\t      || !DECL_BIT_FIELD_TYPE (TREE_OPERAND (lhs, 1)))\n+\t  && !type_has_mode_precision_p (TREE_TYPE (lhs)))\n+\t{\n+\t  if (TREE_CODE (lhs) == COMPONENT_REF\n+\t      || TREE_CODE (lhs) == MEM_REF)\n+\t    {\n+\t      tree ltype = build_nonstandard_integer_type\n+\t\t\t\t(TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (lhs))),\n+\t\t\t\t TYPE_UNSIGNED (TREE_TYPE (lhs)));\n+\t      if (TREE_CODE (lhs) == COMPONENT_REF)\n+\t\t{\n+\t\t  tree foff = component_ref_field_offset (lhs);\n+\t\t  tree f = TREE_OPERAND (lhs, 1);\n+\t\t  if (!poly_int_tree_p (foff))\n+\t\t    lookup_lhs = NULL_TREE;\n+\t\t  else\n+\t\t    lookup_lhs = build3 (BIT_FIELD_REF, ltype,\n+\t\t\t\t\t TREE_OPERAND (lhs, 0),\n+\t\t\t\t\t TYPE_SIZE (TREE_TYPE (lhs)),\n+\t\t\t\t\t bit_from_pos\n+\t\t\t\t\t   (foff, DECL_FIELD_BIT_OFFSET (f)));\n+\t\t}\n+\t      else\n+\t\tlookup_lhs = build2 (MEM_REF, ltype,\n+\t\t\t\t     TREE_OPERAND (lhs, 0),\n+\t\t\t\t     TREE_OPERAND (lhs, 1));\n+\t    }\n+\t  else\n+\t    lookup_lhs = NULL_TREE;\n+\t}\n+      val = NULL_TREE;\n+      if (lookup_lhs)\n+\tval = vn_reference_lookup (lookup_lhs, gimple_vuse (stmt), VN_WALK,\n+\t\t\t\t   &vnresult, false);\n       if (TREE_CODE (rhs) == SSA_NAME)\n \trhs = VN_INFO (rhs)->valnum;\n       if (val"}]}