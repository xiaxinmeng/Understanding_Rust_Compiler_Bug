{"sha": "957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3ZjVmZWFjZjJmNGM3OTE2ZTAxMzdhZDk1ZDJkOTU1OWUwNmZhNA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-10-26T16:42:31Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-10-26T16:42:31Z"}, "message": "Deduction guides for associative containers, debug mode deduction guide fixes.\n\n* include/bits/stl_iterator.h (__iter_key_t)\n(__iter_val_t, __iter_to_alloc_t): New.\n* include/bits/stl_map.h: Add deduction guides.\n* include/bits/stl_multimap.h: Likewise.\n* include/bits/stl_multiset.h: Likewise.\n* include/bits/stl_set.h: Likewise.\n* include/bits/unordered_map.h: Likewise.\n* include/bits/unordered_set.h: Likewise.\n* include/debug/deque: Likewise.\n* include/debug/forward_list: Likewise.\n* include/debug/list: Likewise.\n* include/debug/map.h: Likewise.\n* include/debug/multimap.h: Likewise.\n* include/debug/multiset.h: Likewise.\n* include/debug/set.h: Likewise.\n* include/debug/unordered_map: Likewise.\n* include/debug/unordered_set: Likewise.\n* include/debug/vector: Likewise.\n* testsuite/23_containers/map/cons/deduction.cc: New.\n* testsuite/23_containers/multimap/cons/deduction.cc: Likewise.\n* testsuite/23_containers/multiset/cons/deduction.cc: Likewise.\n* testsuite/23_containers/set/cons/deduction.cc: Likewise.\n* testsuite/23_containers/unordered_map/cons/deduction.cc: Likewise.\n* testsuite/23_containers/unordered_multimap/cons/deduction.cc:\nLikewise.\n* testsuite/23_containers/unordered_multiset/cons/deduction.cc:\nLikewise.\n* testsuite/23_containers/unordered_set/cons/deduction.cc: Likewise.\n\nFrom-SVN: r254113", "tree": {"sha": "7c2cad975d641075c6537cff8b686ab8238fe588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c2cad975d641075c6537cff8b686ab8238fe588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7bffd09412d801016ecd014f34db77da2cc63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7bffd09412d801016ecd014f34db77da2cc63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7bffd09412d801016ecd014f34db77da2cc63e"}], "stats": {"total": 1524, "additions": 1524, "deletions": 0}, "files": [{"sha": "a4df5b6398c322fc2d7bd24613d0a1bc08622c65", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -1,3 +1,36 @@\n+2017-10-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tDeduction guides for associative containers, debug mode deduction\n+\tguide fixes.\n+\t* include/bits/stl_iterator.h (__iter_key_t)\n+\t(__iter_val_t, __iter_to_alloc_t): New.\n+\t* include/bits/stl_map.h: Add deduction guides.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/unordered_map.h: Likewise.\n+\t* include/bits/unordered_set.h: Likewise.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/forward_list: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* include/debug/multiset.h: Likewise.\n+\t* include/debug/set.h: Likewise.\n+\t* include/debug/unordered_map: Likewise.\n+\t* include/debug/unordered_set: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* testsuite/23_containers/map/cons/deduction.cc: New.\n+\t* testsuite/23_containers/multimap/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/multiset/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/set/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/cons/deduction.cc: Likewise.\n+\n 2017-10-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Update C++17 status, and"}, {"sha": "74ef0d9bf880d5b1ccf638c034f76813f9e84526", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -1244,6 +1244,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) (_Iter)\n #endif // C++11\n \n+#if __cpp_deduction_guides >= 201606\n+  // These helper traits are used for deduction guides\n+  // of associative containers.\n+  template<typename _InputIterator>\n+    using __iter_key_t = remove_const_t<\n+    typename iterator_traits<_InputIterator>::value_type::first_type>;\n+\n+  template<typename _InputIterator>\n+    using __iter_val_t =\n+    typename iterator_traits<_InputIterator>::value_type::second_type;\n+\n+  template<typename _T1, typename _T2>\n+    struct pair;\n+\n+  template<typename _InputIterator>\n+    using __iter_to_alloc_t =\n+    pair<add_const_t<__iter_key_t<_InputIterator>>,\n+\t __iter_val_t<_InputIterator>>;\n+\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "8a9e6c9c3296363428cc63c6bfcabdcd805f70b9", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -1381,6 +1381,40 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  const map<_K1, _T1, _C1, _A1>&);\n     };\n \n+\n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Compare = less<__iter_key_t<_InputIterator>>,\n+\t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    map(_InputIterator, _InputIterator,\n+\t_Compare = _Compare(), _Allocator = _Allocator())\n+    -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+\t   _Compare, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Compare = less<_Key>,\n+\t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    map(initializer_list<pair<_Key, _Tp>>,\n+\t_Compare = _Compare(), _Allocator = _Allocator())\n+    -> map<_Key, _Tp, _Compare, _Allocator>;\n+\n+  template <typename _InputIterator, typename _Allocator,\n+\t    typename = _RequireInputIter<_InputIterator>,\n+\t    typename = _RequireAllocator<_Allocator>>\n+    map(_InputIterator, _InputIterator, _Allocator)\n+    -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+\t   less<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    map(initializer_list<pair<_Key, _Tp>>, _Allocator)\n+    -> map<_Key, _Tp, less<_Key>, _Allocator>;\n+\n+#endif\n+\n   /**\n    *  @brief  Map equality comparison.\n    *  @param  __x  A %map."}, {"sha": "1a16bf982e3e11563f6d1d72c4db093912322ddb", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -1047,6 +1047,39 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  const multimap<_K1, _T1, _C1, _A1>&);\n   };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Compare = less<__iter_key_t<_InputIterator>>,\n+\t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multimap(_InputIterator, _InputIterator,\n+\t     _Compare = _Compare(), _Allocator = _Allocator())\n+    -> multimap<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+\t\t_Compare, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Compare = less<_Key>,\n+\t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multimap(initializer_list<pair<_Key, _Tp>>,\n+\t     _Compare = _Compare(), _Allocator = _Allocator())\n+    -> multimap<_Key, _Tp, _Compare, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multimap(_InputIterator, _InputIterator, _Allocator)\n+    -> multimap<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+\t\tless<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)\n+    -> multimap<_Key, _Tp, less<_Key>, _Allocator>;\n+\n+#endif\n+\n   /**\n    *  @brief  Multimap equality comparison.\n    *  @param  __x  A %multimap."}, {"sha": "d34b6758e18dd74e0a72c5fca657df016988d20b", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -881,6 +881,43 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t   const multiset<_K1, _C1, _A1>&);\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Compare =\n+\t     less<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Allocator =\n+\t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+   multiset(_InputIterator, _InputIterator,\n+\t    _Compare = _Compare(), _Allocator = _Allocator())\n+   -> multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t       _Compare, _Allocator>;\n+\n+ template<typename _Key,\n+\t  typename _Compare = less<_Key>,\n+\t  typename _Allocator = allocator<_Key>,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   multiset(initializer_list<_Key>,\n+\t    _Compare = _Compare(), _Allocator = _Allocator())\n+   -> multiset<_Key, _Compare, _Allocator>;\n+\n+ template<typename _InputIterator, typename _Allocator,\n+\t  typename = _RequireInputIter<_InputIterator>,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   multiset(_InputIterator, _InputIterator, _Allocator)\n+   -> multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t       less<typename iterator_traits<_InputIterator>::value_type>,\n+\t       _Allocator>;\n+\n+ template<typename _Key, typename _Allocator,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   multiset(initializer_list<_Key>, _Allocator)\n+   -> multiset<_Key, less<_Key>, _Allocator>;\n+\n+#endif\n+\n   /**\n    *  @brief  Multiset equality comparison.\n    *  @param  __x  A %multiset.\n@@ -971,6 +1008,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       _S_get_tree(_GLIBCXX_STD_C::multiset<_Val, _Cmp2, _Alloc>& __set)\n       { return __set._M_t; }\n     };\n+\n #endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "3a7992c4dab420ff01a97032d202bf5c8ecedc78", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -898,6 +898,41 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \toperator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Compare =\n+\t     less<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Allocator =\n+\t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    set(_InputIterator, _InputIterator,\n+\t_Compare = _Compare(), _Allocator = _Allocator())\n+    -> set<typename iterator_traits<_InputIterator>::value_type,\n+\t  _Compare, _Allocator>;\n+\n+  template<typename _Key, typename _Compare = less<_Key>,\n+\t   typename _Allocator = allocator<_Key>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    set(initializer_list<_Key>,\n+\t_Compare = _Compare(), _Allocator = _Allocator())\n+    -> set<_Key, _Compare, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    set(_InputIterator, _InputIterator, _Allocator)\n+    -> set<typename iterator_traits<_InputIterator>::value_type,\n+\t   less<typename iterator_traits<_InputIterator>::value_type>,\n+\t   _Allocator>;\n+\n+  template<typename _Key, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    set(initializer_list<_Key>, _Allocator)\n+    -> set<_Key, less<_Key>, _Allocator>;\n+\n+#endif\n \n   /**\n    *  @brief  Set equality comparison."}, {"sha": "385e4bd4df4dc0f9ea6a3f7a3ce7af849aca300c", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -1130,6 +1130,82 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t   const unordered_map<_Key1, _Tp1, _Hash1, _Pred1, _Alloc1>&);\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Hash = hash<__iter_key_t<_InputIterator>>,\n+\t   typename _Pred = equal_to<__iter_key_t<_InputIterator>>,\n+\t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(_InputIterator, _InputIterator,\n+\t\t  typename unordered_map<int, int>::size_type = {},\n+\t\t  _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())\n+    -> unordered_map<__iter_key_t<_InputIterator>,\n+\t\t     __iter_val_t<_InputIterator>,\n+\t\t     _Hash, _Pred, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>,\n+\t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(initializer_list<pair<_Key, _Tp>>,\n+\t\t  typename unordered_map<int, int>::size_type = {},\n+\t\t  _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())\n+    -> unordered_map<_Key, _Tp, _Hash, _Pred, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(_InputIterator, _InputIterator,\n+\t\t  typename unordered_map<int, int>::size_type, _Allocator)\n+    -> unordered_map<__iter_key_t<_InputIterator>,\n+\t\t     __iter_val_t<_InputIterator>,\n+\t\t     hash<__iter_key_t<_InputIterator>>,\n+\t\t     equal_to<__iter_key_t<_InputIterator>>,\n+\t\t     _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(_InputIterator, _InputIterator, _Allocator)\n+    -> unordered_map<__iter_key_t<_InputIterator>,\n+\t\t     __iter_val_t<_InputIterator>,\n+\t\t     hash<__iter_key_t<_InputIterator>>,\n+\t\t     equal_to<__iter_key_t<_InputIterator>>,\n+\t\t     _Allocator>;\n+\n+  template<typename _InputIterator, typename _Hash, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(_InputIterator, _InputIterator,\n+\t\t  typename unordered_map<int, int>::size_type,\n+\t\t  _Hash, _Allocator)\n+    -> unordered_map<__iter_key_t<_InputIterator>,\n+\t\t     __iter_val_t<_InputIterator>, _Hash,\n+\t\t     equal_to<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(initializer_list<pair<_Key, _Tp>>,\n+\t\t  typename unordered_map<int, int>::size_type,\n+\t\t  _Allocator)\n+    -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   _RequireAllocator<_Allocator>>\n+    unordered_map(initializer_list<pair<_Key, _Tp>>, _Allocator)\n+    -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(initializer_list<pair<_Key, _Tp>>,\n+\t\t  typename unordered_map<int, int>::size_type,\n+\t\t  _Hash, _Allocator)\n+    -> unordered_map<_Key, _Tp, _Hash, equal_to<_Key>, _Allocator>;\n+\n+#endif\n+\n   /**\n    *  @brief A standard container composed of equivalent keys\n    *  (possibly containing multiple of each key value) that associates\n@@ -1893,6 +1969,82 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t    _Hash1, _Pred1, _Alloc1>&);\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Hash = hash<__iter_key_t<_InputIterator>>,\n+\t   typename _Pred = equal_to<__iter_key_t<_InputIterator>>,\n+\t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(_InputIterator, _InputIterator,\n+\t\t       unordered_multimap<int, int>::size_type = {},\n+\t\t       _Hash = _Hash(), _Pred = _Pred(),\n+\t\t       _Allocator = _Allocator())\n+    -> unordered_multimap<__iter_key_t<_InputIterator>,\n+\t\t\t  __iter_val_t<_InputIterator>, _Hash, _Pred,\n+\t\t\t  _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>,\n+\t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n+\t\t       unordered_multimap<int, int>::size_type = {},\n+\t\t       _Hash = _Hash(), _Pred = _Pred(),\n+\t\t       _Allocator = _Allocator())\n+    -> unordered_multimap<_Key, _Tp, _Hash, _Pred, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(_InputIterator, _InputIterator,\n+\t\t       unordered_multimap<int, int>::size_type, _Allocator)\n+    -> unordered_multimap<__iter_key_t<_InputIterator>,\n+\t\t\t  __iter_val_t<_InputIterator>,\n+\t\t\t  hash<__iter_key_t<_InputIterator>>,\n+\t\t\t  equal_to<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(_InputIterator, _InputIterator, _Allocator)\n+    -> unordered_multimap<__iter_key_t<_InputIterator>,\n+\t\t\t  __iter_val_t<_InputIterator>,\n+\t\t\t  hash<__iter_key_t<_InputIterator>>,\n+\t\t\t  equal_to<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Hash, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(_InputIterator, _InputIterator,\n+\t\t       unordered_multimap<int, int>::size_type, _Hash,\n+\t\t       _Allocator)\n+    -> unordered_multimap<__iter_key_t<_InputIterator>,\n+\t\t\t  __iter_val_t<_InputIterator>, _Hash,\n+\t\t\t  equal_to<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n+\t\t       unordered_multimap<int, int>::size_type,\n+\t\t       _Allocator)\n+    -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)\n+    -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n+\t\t       unordered_multimap<int, int>::size_type,\n+\t\t       _Hash, _Allocator)\n+    -> unordered_multimap<_Key, _Tp, _Hash, equal_to<_Key>, _Allocator>;\n+\n+#endif\n+\n   template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n     inline void\n     swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,"}, {"sha": "416dbbcfb96770403fef80981860ec01ff6180b4", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -805,6 +805,70 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t   const unordered_set<_Value1, _Hash1, _Pred1, _Alloc1>&);\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Hash =\n+\t   hash<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Pred =\n+\t   equal_to<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Allocator =\n+\t   allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(_InputIterator, _InputIterator,\n+\t\t  unordered_set<int>::size_type = {},\n+\t\t  _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())\n+    -> unordered_set<typename iterator_traits<_InputIterator>::value_type,\n+\t\t     _Hash, _Pred, _Allocator>;\n+\n+  template<typename _Tp, typename _Hash = hash<_Tp>,\n+\t   typename _Pred = equal_to<_Tp>,\n+\t   typename _Allocator = allocator<_Tp>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(initializer_list<_Tp>,\n+\t\t  unordered_set<int>::size_type = {},\n+\t\t  _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())\n+    -> unordered_set<_Tp, _Hash, _Pred, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(_InputIterator, _InputIterator,\n+\t\t  unordered_set<int>::size_type, _Allocator)\n+    -> unordered_set<typename iterator_traits<_InputIterator>::value_type,\n+\t\t     hash<\n+\t\t       typename iterator_traits<_InputIterator>::value_type>,\n+\t\t     equal_to<\n+\t\t       typename iterator_traits<_InputIterator>::value_type>,\n+\t\t     _Allocator>;\n+\n+  template<typename _InputIterator, typename _Hash, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(_InputIterator, _InputIterator,\n+\t\t  unordered_set<int>::size_type,\n+\t\t  _Hash, _Allocator)\n+    -> unordered_set<typename iterator_traits<_InputIterator>::value_type,\n+\t\t     _Hash,\n+\t\t     equal_to<\n+\t\t       typename iterator_traits<_InputIterator>::value_type>,\n+\t\t     _Allocator>;\n+\n+  template<typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(initializer_list<_Tp>,\n+\t\t  unordered_set<int>::size_type, _Allocator)\n+    -> unordered_set<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;\n+\n+  template<typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(initializer_list<_Tp>,\n+\t\t  unordered_set<int>::size_type, _Hash, _Allocator)\n+    -> unordered_set<_Tp, _Hash, equal_to<_Tp>, _Allocator>;\n+\n+#endif\n+\n   /**\n    *  @brief A standard container composed of equivalent keys\n    *  (possibly containing multiple of each key value) in which the\n@@ -1517,6 +1581,75 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t const unordered_multiset<_Value1, _Hash1, _Pred1, _Alloc1>&);\n     };\n \n+\n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Hash =\n+\t   hash<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Pred =\n+\t   equal_to<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Allocator =\n+\t   allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(_InputIterator, _InputIterator,\n+\t\t       unordered_multiset<int>::size_type = {},\n+\t\t       _Hash = _Hash(), _Pred = _Pred(),\n+\t\t       _Allocator = _Allocator())\n+    -> unordered_multiset<typename iterator_traits<_InputIterator>::value_type,\n+                          _Hash, _Pred, _Allocator>;\n+\n+  template<typename _Tp, typename _Hash = hash<_Tp>,\n+\t   typename _Pred = equal_to<_Tp>,\n+\t   typename _Allocator = allocator<_Tp>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(initializer_list<_Tp>,\n+\t\t       unordered_multiset<int>::size_type = {},\n+\t\t       _Hash = _Hash(), _Pred = _Pred(),\n+\t\t       _Allocator = _Allocator())\n+    -> unordered_multiset<_Tp, _Hash, _Pred, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(_InputIterator, _InputIterator,\n+\t\t       unordered_multiset<int>::size_type, _Allocator)\n+    -> unordered_multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t\t\t  hash<typename\n+\t\t\t       iterator_traits<_InputIterator>::value_type>,\n+\t\t\t  equal_to<typename\n+\t\t\t\t   iterator_traits<_InputIterator>::value_type>,\n+\t\t\t  _Allocator>;\n+\n+  template<typename _InputIterator, typename _Hash, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(_InputIterator, _InputIterator,\n+\t\t       unordered_multiset<int>::size_type,\n+\t\t       _Hash, _Allocator)\n+    -> unordered_multiset<typename\n+\t\t\t  iterator_traits<_InputIterator>::value_type,\n+\t\t\t  _Hash,\n+\t\t\t  equal_to<\n+\t\t\t    typename\n+\t\t\t    iterator_traits<_InputIterator>::value_type>,\n+\t\t\t  _Allocator>;\n+\n+  template<typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(initializer_list<_Tp>,\n+\t\t       unordered_multiset<int>::size_type, _Allocator)\n+    -> unordered_multiset<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;\n+\n+  template<typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(initializer_list<_Tp>,\n+\t\t       unordered_multiset<int>::size_type, _Hash, _Allocator)\n+    -> unordered_multiset<_Tp, _Hash, equal_to<_Tp>, _Allocator>;\n+\n+#endif\n+\n   template<class _Value, class _Hash, class _Pred, class _Alloc>\n     inline void\n     swap(unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,"}, {"sha": "5816b4b1624f56e87f783f77b8c9741de81bcee0", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -624,6 +624,16 @@ namespace __debug\n       _M_base() const _GLIBCXX_NOEXCEPT\t{ return *this; }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _InputIterator, typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Allocator = allocator<_ValT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    deque(_InputIterator, _InputIterator, _Allocator = _Allocator())\n+      -> deque<_ValT, _Allocator>;\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     inline bool\n     operator==(const deque<_Tp, _Alloc>& __lhs,"}, {"sha": "20c7ebe4a8fdf7c58081d201b37e172d23546e49", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -772,6 +772,16 @@ namespace __debug\n       _M_base() const noexcept { return *this; }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _InputIterator, typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Allocator = allocator<_ValT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    forward_list(_InputIterator, _InputIterator, _Allocator = _Allocator())\n+      -> forward_list<_ValT, _Allocator>;\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     bool\n     operator==(const forward_list<_Tp, _Alloc>& __lx,"}, {"sha": "94d325c6e6a3647a83610ca4d2956e2206b39272", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -769,6 +769,16 @@ namespace __debug\n       _M_base() const _GLIBCXX_NOEXCEPT\t{ return *this; }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _InputIterator, typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Allocator = allocator<_ValT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    list(_InputIterator, _InputIterator, _Allocator = _Allocator())\n+      -> list<_ValT, _Allocator>;\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     inline bool\n     operator==(const list<_Tp, _Alloc>& __lhs,"}, {"sha": "d5a2c9f6e6f60f8155aeffc0d80d87bdc46a4928", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -667,6 +667,39 @@ namespace __debug\n       _M_base() const _GLIBCXX_NOEXCEPT\t{ return *this; }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+ template<typename _InputIterator,\n+\t  typename _Compare = less<__iter_key_t<_InputIterator>>,\n+\t  typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n+\t  typename = _RequireInputIter<_InputIterator>,\n+\t  typename = _RequireAllocator<_Allocator>>\n+  map(_InputIterator, _InputIterator,\n+      _Compare = _Compare(), _Allocator = _Allocator())\n+  -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+\t _Compare, _Allocator>;\n+\n+ template<typename _Key, typename _Tp, typename _Compare = less<_Key>,\n+\t  typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   map(initializer_list<pair<_Key, _Tp>>,\n+       _Compare = _Compare(), _Allocator = _Allocator())\n+   -> map<_Key, _Tp, _Compare, _Allocator>;\n+\n+ template <typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+   map(_InputIterator, _InputIterator, _Allocator)\n+   -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+\t  less<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+ template<typename _Key, typename _Tp, typename _Allocator,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   map(initializer_list<pair<_Key, _Tp>>, _Allocator)\n+   -> map<_Key, _Tp, less<_Key>, _Allocator>;\n+\n+#endif\n+\n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool"}, {"sha": "6c7b2ab4f8d598885b2233cc882f8754f920cd03", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -555,6 +555,39 @@ namespace __debug\n       _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Compare = less<__iter_key_t<_InputIterator>>,\n+\t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multimap(_InputIterator, _InputIterator,\n+\t     _Compare = _Compare(), _Allocator = _Allocator())\n+    -> multimap<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+\t\t_Compare, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Compare = less<_Key>,\n+\t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multimap(initializer_list<pair<_Key, _Tp>>,\n+\t     _Compare = _Compare(), _Allocator = _Allocator())\n+    -> multimap<_Key, _Tp, _Compare, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multimap(_InputIterator, _InputIterator, _Allocator)\n+    -> multimap<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+    less<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)\n+    -> multimap<_Key, _Tp, less<_Key>, _Allocator>;\n+\n+#endif\n+\n   template<typename _Key, typename _Tp,\n \t   typename _Compare, typename _Allocator>\n     inline bool"}, {"sha": "59331b4bc6ba3a6a2b99cc2752f0eb5838aa194a", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -542,6 +542,43 @@ namespace __debug\n       _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Compare =\n+\t     less<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Allocator =\n+\t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+   multiset(_InputIterator, _InputIterator,\n+\t    _Compare = _Compare(), _Allocator = _Allocator())\n+   -> multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t       _Compare, _Allocator>;\n+\n+ template<typename _Key,\n+\t  typename _Compare = less<_Key>,\n+\t  typename _Allocator = allocator<_Key>,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   multiset(initializer_list<_Key>,\n+\t    _Compare = _Compare(), _Allocator = _Allocator())\n+   -> multiset<_Key, _Compare, _Allocator>;\n+\n+ template<typename _InputIterator, typename _Allocator,\n+\t  typename = _RequireInputIter<_InputIterator>,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   multiset(_InputIterator, _InputIterator, _Allocator)\n+   -> multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t       less<typename iterator_traits<_InputIterator>::value_type>,\n+\t       _Allocator>;\n+\n+ template<typename _Key, typename _Allocator,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   multiset(initializer_list<_Key>, _Allocator)\n+   -> multiset<_Key, less<_Key>, _Allocator>;\n+\n+#endif\n+\n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator==(const multiset<_Key, _Compare, _Allocator>& __lhs,"}, {"sha": "5353cfe87b29671bb3cb4d63c44696dce38de023", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -560,6 +560,42 @@ namespace __debug\n       _M_base() const _GLIBCXX_NOEXCEPT\t{ return *this; }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Compare =\n+\t     less<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Allocator =\n+\t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    set(_InputIterator, _InputIterator,\n+       _Compare = _Compare(), _Allocator = _Allocator())\n+   -> set<typename iterator_traits<_InputIterator>::value_type,\n+\t  _Compare, _Allocator>;\n+\n+ template<typename _Key, typename _Compare = less<_Key>,\n+\t  typename _Allocator = allocator<_Key>,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   set(initializer_list<_Key>,\n+       _Compare = _Compare(), _Allocator = _Allocator())\n+   -> set<_Key, _Compare, _Allocator>;\n+\n+ template<typename _InputIterator, typename _Allocator,\n+\t  typename = _RequireInputIter<_InputIterator>,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   set(_InputIterator, _InputIterator, _Allocator)\n+   -> set<typename iterator_traits<_InputIterator>::value_type,\n+\t  less<typename iterator_traits<_InputIterator>::value_type>,\n+\t  _Allocator>;\n+\n+ template<typename _Key, typename _Allocator,\n+\t  typename = _RequireAllocator<_Allocator>>\n+   set(initializer_list<_Key>, _Allocator)\n+   -> set<_Key, less<_Key>, _Allocator>;\n+\n+#endif\n+\n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n     operator==(const set<_Key, _Compare, _Allocator>& __lhs,"}, {"sha": "c5734304846438c3dbd6c44503468339c86cc82f", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -616,6 +616,82 @@ namespace __debug\n       }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Hash = hash<__iter_key_t<_InputIterator>>,\n+\t   typename _Pred = equal_to<__iter_key_t<_InputIterator>>,\n+\t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(_InputIterator, _InputIterator,\n+\t\t  typename unordered_map<int, int>::size_type = {},\n+\t\t  _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())\n+    -> unordered_map<__iter_key_t<_InputIterator>,\n+\t\t     __iter_val_t<_InputIterator>,\n+\t\t     _Hash, _Pred, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>,\n+\t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(initializer_list<pair<_Key, _Tp>>,\n+\t\t  typename unordered_map<int, int>::size_type = {},\n+\t\t  _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())\n+    -> unordered_map<_Key, _Tp, _Hash, _Pred, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(_InputIterator, _InputIterator,\n+\t\t  typename unordered_map<int, int>::size_type, _Allocator)\n+    -> unordered_map<__iter_key_t<_InputIterator>,\n+\t\t     __iter_val_t<_InputIterator>,\n+\t\t     hash<__iter_key_t<_InputIterator>>,\n+\t\t     equal_to<__iter_key_t<_InputIterator>>,\n+\t\t     _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(_InputIterator, _InputIterator, _Allocator)\n+    -> unordered_map<__iter_key_t<_InputIterator>,\n+\t\t     __iter_val_t<_InputIterator>,\n+\t\t     hash<__iter_key_t<_InputIterator>>,\n+\t\t     equal_to<__iter_key_t<_InputIterator>>,\n+\t\t     _Allocator>;\n+\n+  template<typename _InputIterator, typename _Hash, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(_InputIterator, _InputIterator,\n+\t\t  typename unordered_map<int, int>::size_type,\n+\t\t  _Hash, _Allocator)\n+    -> unordered_map<__iter_key_t<_InputIterator>,\n+\t\t     __iter_val_t<_InputIterator>, _Hash,\n+\t\t     equal_to<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(initializer_list<pair<_Key, _Tp>>,\n+\t\t  typename unordered_map<int, int>::size_type,\n+\t\t  _Allocator)\n+    -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   _RequireAllocator<_Allocator>>\n+    unordered_map(initializer_list<pair<_Key, _Tp>>, _Allocator)\n+    -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_map(initializer_list<pair<_Key, _Tp>>,\n+\t\t  typename unordered_map<int, int>::size_type,\n+\t\t  _Hash, _Allocator)\n+    -> unordered_map<_Key, _Tp, _Hash, equal_to<_Key>, _Allocator>;\n+\n+#endif\n+\n   template<typename _Key, typename _Tp, typename _Hash,\n \t   typename _Pred, typename _Alloc>\n     inline void\n@@ -1110,6 +1186,82 @@ namespace __debug\n       }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Hash = hash<__iter_key_t<_InputIterator>>,\n+\t   typename _Pred = equal_to<__iter_key_t<_InputIterator>>,\n+\t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(_InputIterator, _InputIterator,\n+\t\t       unordered_multimap<int, int>::size_type = {},\n+\t\t       _Hash = _Hash(), _Pred = _Pred(),\n+\t\t       _Allocator = _Allocator())\n+    -> unordered_multimap<__iter_key_t<_InputIterator>,\n+\t\t\t  __iter_val_t<_InputIterator>, _Hash, _Pred,\n+\t\t\t  _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n+\t   typename _Pred = equal_to<_Key>,\n+\t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n+\t\t       unordered_multimap<int, int>::size_type = {},\n+\t\t       _Hash = _Hash(), _Pred = _Pred(),\n+\t\t       _Allocator = _Allocator())\n+    -> unordered_multimap<_Key, _Tp, _Hash, _Pred, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(_InputIterator, _InputIterator,\n+\t\t       unordered_multimap<int, int>::size_type, _Allocator)\n+    -> unordered_multimap<__iter_key_t<_InputIterator>,\n+\t\t\t  __iter_val_t<_InputIterator>,\n+\t\t\t  hash<__iter_key_t<_InputIterator>>,\n+\t\t\t  equal_to<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(_InputIterator, _InputIterator, _Allocator)\n+    -> unordered_multimap<__iter_key_t<_InputIterator>,\n+\t\t\t  __iter_val_t<_InputIterator>,\n+\t\t\t  hash<__iter_key_t<_InputIterator>>,\n+\t\t\t  equal_to<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Hash, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(_InputIterator, _InputIterator,\n+\t\t       unordered_multimap<int, int>::size_type, _Hash,\n+\t\t       _Allocator)\n+    -> unordered_multimap<__iter_key_t<_InputIterator>,\n+\t\t\t  __iter_val_t<_InputIterator>, _Hash,\n+\t\t\t  equal_to<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n+\t\t       unordered_multimap<int, int>::size_type,\n+\t\t       _Allocator)\n+    -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)\n+    -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n+\t\t       unordered_multimap<int, int>::size_type,\n+\t\t       _Hash, _Allocator)\n+    -> unordered_multimap<_Key, _Tp, _Hash, equal_to<_Key>, _Allocator>;\n+\n+#endif\n+\n   template<typename _Key, typename _Tp, typename _Hash,\n \t   typename _Pred, typename _Alloc>\n     inline void"}, {"sha": "1fe493fe52fe2acd63f355ec0ff0ca2a20af873a", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -530,6 +530,70 @@ namespace __debug\n       }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Hash =\n+\t   hash<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Pred =\n+\t   equal_to<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Allocator =\n+\t   allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(_InputIterator, _InputIterator,\n+\t\t  unordered_set<int>::size_type = {},\n+\t\t  _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())\n+    -> unordered_set<typename iterator_traits<_InputIterator>::value_type,\n+\t\t     _Hash, _Pred, _Allocator>;\n+\n+  template<typename _Tp, typename _Hash = hash<_Tp>,\n+\t   typename _Pred = equal_to<_Tp>,\n+\t   typename _Allocator = allocator<_Tp>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(initializer_list<_Tp>,\n+\t\t  unordered_set<int>::size_type = {},\n+\t\t  _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())\n+    -> unordered_set<_Tp, _Hash, _Pred, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(_InputIterator, _InputIterator,\n+\t\t  unordered_set<int>::size_type, _Allocator)\n+    -> unordered_set<typename iterator_traits<_InputIterator>::value_type,\n+\t\t     hash<\n+\t\t       typename iterator_traits<_InputIterator>::value_type>,\n+\t\t     equal_to<\n+\t\t       typename iterator_traits<_InputIterator>::value_type>,\n+\t\t     _Allocator>;\n+\n+  template<typename _InputIterator, typename _Hash, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(_InputIterator, _InputIterator,\n+\t\t  unordered_set<int>::size_type,\n+\t\t  _Hash, _Allocator)\n+    -> unordered_set<typename iterator_traits<_InputIterator>::value_type,\n+\t\t     _Hash,\n+\t\t     equal_to<\n+\t\t       typename iterator_traits<_InputIterator>::value_type>,\n+\t\t     _Allocator>;\n+\n+  template<typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(initializer_list<_Tp>,\n+\t\t  unordered_set<int>::size_type, _Allocator)\n+    -> unordered_set<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;\n+\n+  template<typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_set(initializer_list<_Tp>,\n+\t\t  unordered_set<int>::size_type, _Hash, _Allocator)\n+    -> unordered_set<_Tp, _Hash, equal_to<_Tp>, _Allocator>;\n+\n+#endif\n+\n   template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>\n     inline void\n     swap(unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n@@ -1012,6 +1076,74 @@ namespace __debug\n       }\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+\n+  template<typename _InputIterator,\n+\t   typename _Hash =\n+\t   hash<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Pred =\n+\t   equal_to<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename _Allocator =\n+\t   allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(_InputIterator, _InputIterator,\n+\t\t       unordered_multiset<int>::size_type = {},\n+\t\t       _Hash = _Hash(), _Pred = _Pred(),\n+\t\t       _Allocator = _Allocator())\n+    -> unordered_multiset<typename iterator_traits<_InputIterator>::value_type,\n+                          _Hash, _Pred, _Allocator>;\n+\n+  template<typename _Tp, typename _Hash = hash<_Tp>,\n+\t   typename _Pred = equal_to<_Tp>,\n+\t   typename _Allocator = allocator<_Tp>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(initializer_list<_Tp>,\n+\t\t       unordered_multiset<int>::size_type = {},\n+\t\t       _Hash = _Hash(), _Pred = _Pred(),\n+\t\t       _Allocator = _Allocator())\n+    -> unordered_multiset<_Tp, _Hash, _Pred, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(_InputIterator, _InputIterator,\n+\t\t       unordered_multiset<int>::size_type, _Allocator)\n+    -> unordered_multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t\t\t  hash<typename\n+\t\t\t       iterator_traits<_InputIterator>::value_type>,\n+\t\t\t  equal_to<typename\n+\t\t\t\t   iterator_traits<_InputIterator>::value_type>,\n+\t\t\t  _Allocator>;\n+\n+  template<typename _InputIterator, typename _Hash, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(_InputIterator, _InputIterator,\n+\t\t       unordered_multiset<int>::size_type,\n+\t\t       _Hash, _Allocator)\n+    -> unordered_multiset<typename\n+\t\t\t  iterator_traits<_InputIterator>::value_type,\n+\t\t\t  _Hash,\n+\t\t\t  equal_to<\n+\t\t\t    typename\n+\t\t\t    iterator_traits<_InputIterator>::value_type>,\n+\t\t\t  _Allocator>;\n+\n+  template<typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(initializer_list<_Tp>,\n+\t\t       unordered_multiset<int>::size_type, _Allocator)\n+    -> unordered_multiset<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;\n+\n+  template<typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    unordered_multiset(initializer_list<_Tp>,\n+\t\t       unordered_multiset<int>::size_type, _Hash, _Allocator)\n+    -> unordered_multiset<_Tp, _Hash, equal_to<_Tp>, _Allocator>;\n+\n+#endif\n+\n   template<typename _Value, typename _Hash, typename _Pred, typename _Alloc>\n     inline void\n     swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,"}, {"sha": "c24c2f3d45f9466a2158a22abde3476d0a77bd92", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -757,6 +757,16 @@ namespace __debug\n     _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _InputIterator, typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Allocator = allocator<_ValT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    vector(_InputIterator, _InputIterator, _Allocator = _Allocator())\n+      -> vector<_ValT, _Allocator>;\n+#endif\n+\n } // namespace __debug\n \n #if __cplusplus >= 201103L"}, {"sha": "3880cd5e79ddfaee54240dcfbc50736d6f81df1e", "filename": "libstdc++-v3/testsuite/23_containers/map/cons/deduction.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fdeduction.cc?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <map>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_test::SimpleAllocator;\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::map{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}}),\n+\t      std::map<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::map{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}}}),\n+\t      std::map<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::map{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t    std::less<int>{}, {}}),\n+\t      std::map<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::map{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t    {}}),\n+\t      std::map<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::map{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t    {}, SimpleAllocator<std::pair<const int, double>>{}}),\n+\t      std::map<int, double, std::less<int>,\n+\t      SimpleAllocator<std::pair<const int, double>>>>);\n+\n+void f()\n+{\n+  std::map<int, double> x;\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map(x.begin(), x.end())),\n+\t\tstd::map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t      std::less<int>{},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::map<int, double>>);\n+  \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t      std::less<int>{}, {}}),\n+\t\tstd::map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::map{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      SimpleAllocator<std::pair<const int, double>>{}}),\n+\t\tstd::map<int, double, std::less<int>,\n+\t\tSimpleAllocator<std::pair<const int, double>>>>);\n+}"}, {"sha": "ee48bfda26b5c92a81374884f886e44be00c4547", "filename": "libstdc++-v3/testsuite/23_containers/multimap/cons/deduction.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fdeduction.cc?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <map>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_test::SimpleAllocator;\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multimap{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}}),\n+\t      std::multimap<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multimap{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}}}),\n+\t      std::multimap<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multimap{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t    std::less<int>{}, {}}),\n+\t      std::multimap<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multimap{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t    {}}),\n+\t      std::multimap<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multimap{{std::pair{1, 2.0}, {2, 3.0}, {3, 4.0}},\n+\t\t    {}, SimpleAllocator<std::pair<const int, double>>{}}),\n+\t      std::multimap<int, double, std::less<int>,\n+\t      SimpleAllocator<std::pair<const int, double>>>>);\n+\n+void f()\n+{\n+  std::multimap<int, double> x;\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multimap(x.begin(), x.end())),\n+\t\tstd::multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multimap{x.begin(), x.end(),\n+\t\t      std::less<int>{},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::multimap<int, double>>);\n+  \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multimap{x.begin(), x.end(),\n+\t\t      std::less<int>{}, {}}),\n+\t\tstd::multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multimap(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multimap{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multimap{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      SimpleAllocator<std::pair<const int, double>>{}}),\n+\t\tstd::multimap<int, double, std::less<int>,\n+\t\tSimpleAllocator<std::pair<const int, double>>>>);\n+}"}, {"sha": "4ca3f98129a0313fe5dbd3d5a45949e972ae63ad", "filename": "libstdc++-v3/testsuite/23_containers/multiset/cons/deduction.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <set>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_test::SimpleAllocator;\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multiset{1, 2, 3}),\n+\t      std::multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multiset{1, 2, 3}),\n+\t      std::multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multiset{{1, 2, 3},\n+\t\t    std::less<int>{}, {}}),\n+\t      std::multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multiset{{1, 2, 3},\n+\t\t    {}}),\n+\t      std::multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::multiset{{1, 2, 3},\n+\t\t    {}, SimpleAllocator<int>{}}),\n+\t      std::multiset<int, std::less<int>,\n+\t      SimpleAllocator<int>>>);\n+\n+void f()\n+{\n+  std::multiset<int> x;\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset(x.begin(), x.end())),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t      std::less<int>{},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::multiset<int>>);\n+  \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t      std::less<int>{}, {}}),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::multiset{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      SimpleAllocator<int>{}}),\n+\t\tstd::multiset<int, std::less<int>, SimpleAllocator<int>>>);\n+}"}, {"sha": "73d5cfdd227a33dcf6e4c69065c21a0eebda4380", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/deduction.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <set>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_test::SimpleAllocator;\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::set{1, 2, 3}),\n+\t      std::set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::set{1, 2, 3}),\n+\t      std::set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::set{{1, 2, 3},\n+\t\t    std::less<int>{}, {}}),\n+\t      std::set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::set{{1, 2, 3},\n+\t\t    {}}),\n+\t      std::set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::set{{1, 2, 3},\n+\t\t    {}, SimpleAllocator<int>{}}),\n+\t      std::set<int, std::less<int>,\n+\t      SimpleAllocator<int>>>);\n+\n+void f()\n+{\n+  std::set<int> x;\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set(x.begin(), x.end())),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t      std::less<int>{},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::set<int>>);\n+  \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t      std::less<int>{}, {}}),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::set{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      SimpleAllocator<int>{}}),\n+\t\tstd::set<int, std::less<int>, SimpleAllocator<int>>>);\n+}"}, {"sha": "1905b20116bf0585b3bca8024fbb5f2c55b03ad3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/cons/deduction.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fdeduction.cc?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <unordered_map>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_test::SimpleAllocator;\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_map{std::pair{1, 2.0},\n+\t\t    {2, 3.0}, {3, 4.0}}),\n+\t      std::unordered_map<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_map{{std::pair{1, 2.0},\n+\t\t      {2, 3.0}, {3, 4.0}}}),\n+\t      std::unordered_map<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_map{{std::pair{1, 2.0},\n+\t\t      {2, 3.0}, {3, 4.0}},\n+\t\t    {}, std::hash<int>{}, {}}),\n+\t      std::unordered_map<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_map{{std::pair{1, 2.0},\n+\t\t      {2, 3.0}, {3, 4.0}},\n+\t\t    {}}),\n+\t      std::unordered_map<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_map{{std::pair{1, 2.0},\n+\t\t      {2, 3.0}, {3, 4.0}},\n+\t\t    {}, {}, {},\n+\t\t    SimpleAllocator<std::pair<const int, double>>{}}),\n+\t      std::unordered_map<int, double, std::hash<int>,\n+\t      std::equal_to<int>,\n+\t      SimpleAllocator<std::pair<const int, double>>>>);\n+\n+\n+void f()\n+{\n+  std::unordered_map<int, double> x;\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map(x.begin(), x.end())),\n+\t\tstd::unordered_map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map{x.begin(), x.end(),\n+\t\t      {}, std::hash<int>{}, {},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map{x.begin(), x.end(),\n+\t\t      {}, std::hash<int>{}, {}}),\n+\t\tstd::unordered_map<int, double>>);\n+  \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::unordered_map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map{x.begin(), x.end(),\n+\t\t      {}, {}, {},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_map<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_map{x.begin(), x.end(),\n+\t\t      {}, {}, {},\n+\t\t      SimpleAllocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_map<int, double, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<std::pair<const int, double>>>>);\n+}"}, {"sha": "db5e32b4ad2792e39d3c9d13b78613dfce264e7f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/cons/deduction.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fdeduction.cc?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <unordered_map>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_test::SimpleAllocator;\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multimap{std::pair{1, 2.0},\n+\t\t    {2, 3.0}, {3, 4.0}}),\n+\t      std::unordered_multimap<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multimap{{std::pair{1, 2.0},\n+\t\t      {2, 3.0}, {3, 4.0}}}),\n+\t      std::unordered_multimap<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multimap{{std::pair{1, 2.0},\n+\t\t      {2, 3.0}, {3, 4.0}},\n+\t\t    {}, std::hash<int>{}, {}}),\n+\t      std::unordered_multimap<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multimap{{std::pair{1, 2.0},\n+\t\t      {2, 3.0}, {3, 4.0}},\n+\t\t    {}}),\n+\t      std::unordered_multimap<int, double>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multimap{{std::pair{1, 2.0},\n+\t\t      {2, 3.0}, {3, 4.0}},\n+\t\t    {}, {}, {},\n+\t\t    SimpleAllocator<std::pair<const int, double>>{}}),\n+\t      std::unordered_multimap<int, double, std::hash<int>,\n+\t      std::equal_to<int>,\n+\t      SimpleAllocator<std::pair<const int, double>>>>);\n+\n+\n+void f()\n+{\n+  std::unordered_multimap<int, double> x;\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap(x.begin(), x.end())),\n+\t\tstd::unordered_multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap{x.begin(), x.end(),\n+\t\t      {}, std::hash<int>{}, {},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap{x.begin(), x.end(),\n+\t\t      {}, std::hash<int>{}, {}}),\n+\t\tstd::unordered_multimap<int, double>>);\n+  \n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::unordered_multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap{x.begin(), x.end(),\n+\t\t      {}, {}, {},\n+\t\t      std::allocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_multimap<int, double>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multimap{x.begin(), x.end(),\n+\t\t      {}, {}, {},\n+\t\t      SimpleAllocator<std::pair<const int, double>>{}}),\n+\t\tstd::unordered_multimap<int, double, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<std::pair<const int, double>>>>);\n+}"}, {"sha": "352176d1e7dbcb825616bfff06971a81047e848c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/cons/deduction.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fdeduction.cc?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <unordered_set>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_test::SimpleAllocator;\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{1, 2, 3}),\n+\t      std::unordered_multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{1, 2, 3}),\n+\t      std::unordered_multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{{1, 2, 3},\n+\t\t    0, std::hash<int>{}, {}}),\n+\t      std::unordered_multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{{1, 2, 3},\n+\t\t    {}}),\n+\t      std::unordered_multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{{1, 2, 3},\n+\t\t    {}, {}, {}, std::allocator<int>{}}),\n+\t      std::unordered_multiset<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_multiset{{1, 2, 3},\n+\t\t    {}, {}, {}, SimpleAllocator<int>{}}),\n+\t      std::unordered_multiset<int, std::hash<int>,\n+\t      std::equal_to<int>,\n+\t      SimpleAllocator<int>>>);\n+\n+void f()\n+{\n+  std::unordered_multiset<int> x;\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset(x.begin(), x.end())),\n+\t\tstd::unordered_multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      std::hash<int>{},\n+\t\t      std::equal_to<int>{},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::unordered_multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset{x.begin(), x.end(),\n+\t\t      {}, std::hash<int>{}, {}}),\n+\t\tstd::unordered_multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::unordered_multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset{x.begin(), x.end(),\n+\t\t      {}, {}, {},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::unordered_multiset<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_multiset{x.begin(), x.end(),\n+\t\t      {}, {}, {},\n+\t\t      SimpleAllocator<int>{}}),\n+\t\tstd::unordered_multiset<int, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<int>>>);\n+}"}, {"sha": "c7e1798ef7de65eb8085945f80e100b0ba1b661a", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/cons/deduction.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957f5feacf2f4c7916e0137ad95d2d9559e06fa4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fdeduction.cc?ref=957f5feacf2f4c7916e0137ad95d2d9559e06fa4", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <unordered_set>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_test::SimpleAllocator;\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_set{1, 2, 3}),\n+\t      std::unordered_set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_set{1, 2, 3}),\n+\t      std::unordered_set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_set{{1, 2, 3},\n+\t\t    0, std::hash<int>{}, {}}),\n+\t      std::unordered_set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_set{{1, 2, 3},\n+\t\t    {}}),\n+\t      std::unordered_set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_set{{1, 2, 3},\n+\t\t    {}, {}, {}, std::allocator<int>{}}),\n+\t      std::unordered_set<int>>);\n+\n+static_assert(std::is_same_v<\n+\t      decltype(std::unordered_set{{1, 2, 3},\n+\t\t    {}, {}, {}, SimpleAllocator<int>{}}),\n+\t      std::unordered_set<int, std::hash<int>,\n+\t      std::equal_to<int>,\n+\t      SimpleAllocator<int>>>);\n+\n+void f()\n+{\n+  std::unordered_set<int> x;\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set(x.begin(), x.end())),\n+\t\tstd::unordered_set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set{x.begin(), x.end(),\n+\t\t      {},\n+\t\t      std::hash<int>{},\n+\t\t      std::equal_to<int>{},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::unordered_set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set{x.begin(), x.end(),\n+\t\t      {}, std::hash<int>{}, {}}),\n+\t\tstd::unordered_set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set(x.begin(), x.end(),\n+\t\t\t\t  {})),\n+\t\tstd::unordered_set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set{x.begin(), x.end(),\n+\t\t      {}, {}, {},\n+\t\t      std::allocator<int>{}}),\n+\t\tstd::unordered_set<int>>);\n+\n+  static_assert(std::is_same_v<\n+\t\tdecltype(std::unordered_set{x.begin(), x.end(),\n+\t\t      {}, {}, {},\n+\t\t      SimpleAllocator<int>{}}),\n+\t\tstd::unordered_set<int, std::hash<int>,\n+\t\tstd::equal_to<int>,\n+\t\tSimpleAllocator<int>>>);\n+}"}]}