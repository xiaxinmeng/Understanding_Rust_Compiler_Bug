{"sha": "56c79e7f5d21660c2e16b2e17d5b48d1df10d92f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZjNzllN2Y1ZDIxNjYwYzJlMTZiMmUxN2Q1YjQ4ZDFkZjEwZDkyZg==", "commit": {"author": {"name": "Mike Gulick", "email": "mgulick@mathworks.com", "date": "2018-11-27T15:49:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-11-27T15:49:43Z"}, "message": "PR preprocessor/83173: Additional check before decrementing highest_location\n\n2018-11-27  Mike Gulick  <mgulick@mathworks.com>\n\n\tPR preprocessor/83173\n\t* files.c (_cpp_stack_include): Check if\n\tline_table->highest_location is past current line before\n\tdecrementing.\n\nFrom-SVN: r266516", "tree": {"sha": "badad3254b640aae0b59b521d6190bfd33070b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/badad3254b640aae0b59b521d6190bfd33070b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56c79e7f5d21660c2e16b2e17d5b48d1df10d92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c79e7f5d21660c2e16b2e17d5b48d1df10d92f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c79e7f5d21660c2e16b2e17d5b48d1df10d92f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c79e7f5d21660c2e16b2e17d5b48d1df10d92f/comments", "author": {"login": "mgulick", "id": 4109840, "node_id": "MDQ6VXNlcjQxMDk4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4109840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgulick", "html_url": "https://github.com/mgulick", "followers_url": "https://api.github.com/users/mgulick/followers", "following_url": "https://api.github.com/users/mgulick/following{/other_user}", "gists_url": "https://api.github.com/users/mgulick/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgulick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgulick/subscriptions", "organizations_url": "https://api.github.com/users/mgulick/orgs", "repos_url": "https://api.github.com/users/mgulick/repos", "events_url": "https://api.github.com/users/mgulick/events{/privacy}", "received_events_url": "https://api.github.com/users/mgulick/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f316c3e5a7b07e558a62fec06a81e555f8d35185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f316c3e5a7b07e558a62fec06a81e555f8d35185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f316c3e5a7b07e558a62fec06a81e555f8d35185"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "71fc213433a3956f8d851396e580c15445591448", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c79e7f5d21660c2e16b2e17d5b48d1df10d92f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c79e7f5d21660c2e16b2e17d5b48d1df10d92f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=56c79e7f5d21660c2e16b2e17d5b48d1df10d92f", "patch": "@@ -1,3 +1,10 @@\n+2018-11-27  Mike Gulick  <mgulick@mathworks.com>\n+\n+\tPR preprocessor/83173\n+\t* files.c (_cpp_stack_include): Check if\n+\tline_table->highest_location is past current line before\n+\tdecrementing.\n+\n 2018-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* charset.c: Replace \"source_location\" with \"location_t\"."}, {"sha": "fe80e84454b3050a78062d1b392f5b7faa8a1e2e", "filename": "libcpp/files.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c79e7f5d21660c2e16b2e17d5b48d1df10d92f/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c79e7f5d21660c2e16b2e17d5b48d1df10d92f/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=56c79e7f5d21660c2e16b2e17d5b48d1df10d92f", "patch": "@@ -1012,6 +1012,7 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n   struct cpp_dir *dir;\n   _cpp_file *file;\n   bool stacked;\n+  bool decremented = false;\n \n   /* For -include command-line flags we have type == IT_CMDLINE.\n      When the first -include file is processed we have the case, where\n@@ -1035,20 +1036,33 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n     return false;\n \n   /* Compensate for the increment in linemap_add that occurs if\n-      _cpp_stack_file actually stacks the file.  In the case of a\n-     normal #include, we're currently at the start of the line\n-     *following* the #include.  A separate location_t for this\n-     location makes no sense (until we do the LC_LEAVE), and\n-     complicates LAST_SOURCE_LINE_LOCATION.  This does not apply if we\n-     found a PCH file (in which case linemap_add is not called) or we\n-     were included from the command-line.  */\n+     _cpp_stack_file actually stacks the file.  In the case of a normal\n+     #include, we're currently at the start of the line *following* the\n+     #include.  A separate location_t for this location makes no\n+     sense (until we do the LC_LEAVE), and complicates\n+     LAST_SOURCE_LINE_LOCATION.  This does not apply if we found a PCH\n+     file (in which case linemap_add is not called) or we were included\n+     from the command-line.  In the case that the #include is the last\n+     line in the file, highest_location still points to the current\n+     line, not the start of the next line, so we do not decrement in\n+     this case.  See plugin/location-overflow-test-pr83173.h for an\n+     example.  */\n   if (file->pchname == NULL && file->err_no == 0\n       && type != IT_CMDLINE && type != IT_DEFAULT)\n-    pfile->line_table->highest_location--;\n+    {\n+      int highest_line = linemap_get_expansion_line (pfile->line_table,\n+\t\t\t\t\t\t     pfile->line_table->highest_location);\n+      int source_line = linemap_get_expansion_line (pfile->line_table, loc);\n+      if (highest_line > source_line)\n+\t{\n+\t  pfile->line_table->highest_location--;\n+\t  decremented = true;\n+\t}\n+    }\n \n   stacked = _cpp_stack_file (pfile, file, type == IT_IMPORT, loc);\n \n-  if (!stacked)\n+  if (decremented && !stacked)\n     /* _cpp_stack_file didn't stack the file, so let's rollback the\n        compensation dance we performed above.  */\n     pfile->line_table->highest_location++;"}]}