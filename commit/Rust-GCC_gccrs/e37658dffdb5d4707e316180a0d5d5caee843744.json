{"sha": "e37658dffdb5d4707e316180a0d5d5caee843744", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM3NjU4ZGZmZGI1ZDQ3MDdlMzE2MTgwYTBkNWQ1Y2FlZTg0Mzc0NA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-20T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-20T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "e92c50e8024ff20173f79dad243d0eba18996ac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e92c50e8024ff20173f79dad243d0eba18996ac6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e37658dffdb5d4707e316180a0d5d5caee843744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37658dffdb5d4707e316180a0d5d5caee843744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37658dffdb5d4707e316180a0d5d5caee843744", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37658dffdb5d4707e316180a0d5d5caee843744/comments", "author": null, "committer": null, "parents": [{"sha": "70c25e5be2d74b6c572dec884d280120a53f4149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c25e5be2d74b6c572dec884d280120a53f4149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c25e5be2d74b6c572dec884d280120a53f4149"}], "stats": {"total": 306, "additions": 305, "deletions": 1}, "files": [{"sha": "d599e8fe04c317015640d49e216efbc3173cdfc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e37658dffdb5d4707e316180a0d5d5caee843744", "patch": "@@ -1,3 +1,24 @@\n+2020-06-19  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gcn_related_vector_mode): Add ARG_UNUSED.\n+\t(output_file_start): Use const 'char *'.\n+\n+2020-06-19  Przemyslaw Wirkus  <Przemyslaw.Wirkus@arm.com>\n+\n+\tPR tree-optimization/94880\n+\t* match.pd (A | B) - B -> (A & ~B): New simplification.\n+\n+2020-06-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Adjust\n+\tfor lane permutations.\n+\n+2020-06-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95761\n+\t* tree-vect-slp.c (vect_schedule_slp_instance): Walk all\n+\tvectorized stmts for finding the last one.\n+\n 2020-06-18  Felix Yang  <felix.yang@huawei.com>\n \n \t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Call"}, {"sha": "34d423ff9ba755cd9c85256dd4aeea3b925df124", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e37658dffdb5d4707e316180a0d5d5caee843744", "patch": "@@ -1 +1 @@\n-20200619\n+20200620"}, {"sha": "7340c50da570a1902ad90280a8820a44b39e6d1d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e37658dffdb5d4707e316180a0d5d5caee843744", "patch": "@@ -1,3 +1,212 @@\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (lvalue_required_for_attribute_p): Do not deal\n+\twith 'Pos or 'Val.\n+\t(Attribute_to_gnu): Likewise.\n+\t* gcc-interface/utils.c (create_field_decl): Small formatting fix.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (adjust_for_implicit_deref): Delete.\n+\t(maybe_implicit_deref): Likewise.\n+\t(Attribute_to_gnu): Replace calls to maybe_implicit_deref by calls\n+\tto maybe_padded_object.\n+\t(Call_to_gnu): Likewise.\n+\t(gnat_to_gnu) <N_Indexed_Component>: Likewise.\n+\t<N_Slice>: Likewise.\n+\t<N_Selected_Component>: Likewise.\n+\t<N_Free_Statement>: Remove call to adjust_for_implicit_deref and\n+\tmanually make sure that the designated type is complete.\n+\t* gcc-interface/utils2.c (build_simple_component_ref): Add comment.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_param): Tidy up.\n+\t(gnat_to_gnu_subprog_type): For a variadic C function, do not\n+\tbuild unnamed parameters and do not add final void node.\n+\t* gcc-interface/misc.c: Include snames.h.\n+\t* gcc-interface/trans.c (Attribute_to_gnu): Tidy up.\n+\t(Call_to_gnu): Implement support for unnamed parameters in a\n+\tvariadic C function.\n+\t* gcc-interface/utils.c: Include snames.h.\n+\t(copy_type): Tidy up.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Do not apply\n+\trange checks to allocators here.\n+\n+2020-06-19  Justin Squirek  <squirek@adacore.com>\n+\n+\t* lib.adb (Check_Same_Extended_Unit): Add check to determine if\n+\tthe body for the subunits exist in the same file as their\n+\tspecifications.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (In_Place_Assign_OK): In an allocator context,\n+\tcheck the bounds of an array aggregate against those of the\n+\tdesignated type, except if the latter is unconstrained.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Is_Visible_Component): Reason only on the private\n+\tstatus of the original type in an instance body.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Qualified_Expression): Do not override the\n+\ttype of the node when it is unconstrained if it is for an allocator.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Allocator): Call Resolve_Qualified_Expression\n+\ton the qualified expression, if any, instead of doing an incomplete\n+\ttype resolution manually.\n+\t(Resolve_Qualified_Expression): Apply predicate check to operand.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): In an instance body,\n+\talso invoke Find_Component_In_Instance on the parent subtype of\n+\ta derived tagged type immediately visible.  Remove obsolete case.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Get_Integer_Type): Return the largest supported\n+\tunsigned integer type if need be.\n+\n+2020-06-19  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Known_Condition): Add general sanity\n+\tcheck that asserts the original source node being checked\n+\tcontains an entity. If not, it could be the result of special\n+\tcase expansion for type conversions.\n+\n+2020-06-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Do not indicate\n+\tthat the function has a completion if it appears within a Ghost\n+\tgeneric package.\n+\n+2020-06-19  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-ststbo.adb (Write): Replace pragma Assert with \"if\n+\t... raise Constraint_Error\".\n+\n+2020-06-19  Justin Squirek  <squirek@adacore.com>\n+\n+\t* widechar.adb, widechar.ads (Skip_Wide): Catch validity check\n+\tfailure when skipping over characters, and update comment to\n+\treflect Skip_Wide's usage in error printing.\n+\n+2020-06-19  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.ads (Ensure_Activation_Chain_And_Master): New\n+\tsubprogram.\n+\t* exp_ch3.adb (Ensure_Activation_Chain_And_Master): New\n+\tsubprogram that factorizes code.\n+\t(Expand_N_Object_Declaration): Call new subprogram.\n+\t* sem_ch6.adb (Analyze_Function_Return): Returning a\n+\tbuild-in-place unconstrained array type defer the full analysis\n+\tof the returned object to avoid generating the corresponding\n+\tconstrained subtype; otherwise the bounds would be created in\n+\tthe stack and a dangling reference would be returned pointing to\n+\tthe bounds.\n+\n+2020-06-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.adb, libgnat/a-nbnbin.ads,\n+\tlibgnat/a-nbnbin__gmp.adb, libgnat/a-nbnbre.adb,\n+\tlibgnat/a-nbnbre.ads: Update spec according to AI12-0366.\n+\n+2020-06-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.ads: Remove excessive whitespace in declarations of\n+\tfunctions for check suppression.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch7.adb (Hide_Public_Entities): Split handling of objects\n+\tand subprograms, and do not reject the latter upfront in nested\n+\tinstance specs if there are no referencer subprograms at all.\n+\t(Analyze_Package_Body_Helper): Also call Hide_Public_Entities on\n+\tnested generic instances.\n+\n+2020-06-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Reject illegal positional\n+\tcomponent associations; fix syntax in comment about named\n+\tcomponent associations.\n+\n+2020-06-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Record_Aggregate): Modify a nested\n+\tGet_Component_Type routine to return a component and not just\n+\tits type; use this routine to decorate the identifier within the\n+\tdelta aggregate.\n+\n+2020-06-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch4.adb (Find_Equality_Types.Check_Access_Attribute): New.\n+\t(Find_Equality_Types): Move universal_access related checks at\n+\tthe end of the processing and add call to\n+\tCheck_Access_Attribute.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_prag.adb (Process_Convention): Revert previous change.\n+\n+2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.ads (Apply_Static_Length_Check): Move up.\n+\t(Apply_Range_Check): Add parameter Insert_Node.\n+\t* checks.adb (Apply_Selected_Range_Checks): Merge into...\n+\t(Apply_Range_Check): ...this.  Add parameter Insert_Node,\n+\tpass it as Warn_Node to Selected_Range_Checks and use it\n+\tas insertion point for the checks.\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Rewrite block\n+\tdealing with the range checks for the subtype indication.\n+\tUse local variable and call Apply_Range_Check in both cases.\n+\n+2020-06-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Call Ensure_Valid\n+\ton the expression of an object declaration that captures the\n+\tvalue of 'Old prefix.\n+\n+2020-06-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Add comment.\n+\t* sem_attr.adb (Analyze_Attribute): Add ??? comment.\n+\t* sem_util.ads (Valid_Scalars): This routine is only used for\n+\t'Valid_Scalars and not for 'Valid.\n+\n+2020-06-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Do not call\n+\tScalar_Part_Present on the array component's type.\n+\t(Build_Array_VS_Func): Remove Comp_Typ parameter, because it can\n+\tbe easily computed from the Array_Top parameter *and redundant\n+\tparameters are confusing and error-prone).\n+\n+2020-06-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Build_Record_VS_Func): Strip privacy and type\n+\tderivation from the root type when 'Valid_Scalars is applied to\n+\ta class-wide type.\n+\n+2020-06-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Apply_Parameter_Validity_Checks): Remove testing\n+\tof Check_Validity_Of_Parameters for every formal parameter and\n+\tfunction result.\n+\n+2020-06-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Add missing\n+\twarning tag.\n+\n 2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch4.adb (Get_Size_For_Range): Only make sure to return a"}, {"sha": "4af420a2cdb7e6fbee3b8e77621cb6ed117b411a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e37658dffdb5d4707e316180a0d5d5caee843744", "patch": "@@ -1,3 +1,9 @@\n+2020-06-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* method.c (early_check_defaulted_comparison): Allow defaulting\n+\tcomparison outside class.  Complain if non-member operator isn't a\n+\tfriend.\n+\n 2020-06-18  Jason Merrill  <jason@redhat.com>\n \n \t* method.c (early_check_defaulted_comparison): Check for &&."}, {"sha": "ab7066f68562b5cfb8cd6ceb564b4389be28de9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37658dffdb5d4707e316180a0d5d5caee843744/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e37658dffdb5d4707e316180a0d5d5caee843744", "patch": "@@ -1,3 +1,35 @@\n+2020-06-19  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.dg/tree-ssa/popcount4ll.c: Add target lp64.\n+\t* gcc.dg/tree-ssa/popcount5ll.c: Same.\n+\n+2020-06-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/spaceship-friend1.C: New test.\n+\t* g++.dg/cpp2a/spaceship-err4.C: Adjust diagnostic.\n+\n+2020-06-19  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/vec-extracth-be-0.c: Apply -mbig\n+\tconditionally for powerpc64le*-*-*.\n+\t* gcc.target/powerpc/vec-extracth-be-1.c: Same.\n+\t* gcc.target/powerpc/vec-extracth-be-2.c: Same.\n+\t* gcc.target/powerpc/vec-extracth-be-3.c: Same.\n+\t* gcc.target/powerpc/vec-extractl-be-0.c: Same.\n+\t* gcc.target/powerpc/vec-extractl-be-1.c: Same.\n+\t* gcc.target/powerpc/vec-extractl-be-2.c: Same.\n+\t* gcc.target/powerpc/vec-extractl-be-3.c: Same.\n+\n+2020-06-19  Przemyslaw Wirkus  <Przemyslaw.Wirkus@arm.com>\n+\n+\tPR tree-optimization/94880\n+\t* gcc.dg/tree-ssa/pr94880.c: New Test.\n+\n+2020-06-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95761\n+\t* gcc.dg/torture/pr95761.c: New testcase.\n+\n 2020-06-18  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp2a/spaceship-ref1.C: New test."}, {"sha": "b148f8548709df7c5c19b3268599e311e62653cf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37658dffdb5d4707e316180a0d5d5caee843744/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37658dffdb5d4707e316180a0d5d5caee843744/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e37658dffdb5d4707e316180a0d5d5caee843744", "patch": "@@ -1,3 +1,39 @@\n+2020-06-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95765\n+\t* include/bits/stl_algobase.h (__size_to_integer(float))\n+\t(__size_to_integer(double), __size_to_integer(long double))\n+\t(__size_to_integer(__float128)): Cast return type explicitly.\n+\t* include/bits/stl_uninitialized.h (__uninitialized_default_1<true>):\n+\tRemove unused typedef.\n+\n+2020-06-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_pair.h (_Index_tuple): Remove redundant\n+\tnamespace qualification.\n+\t(pair::pair(tuple<>&, tuple<>&, _Index_tuple, _Index_tuple)):\n+\tLikewise.\n+\t* include/std/tuple (_Head_base, _Tuple_impl, tuple_size)\n+\t(tuple_element, __get_helper, get, __make_tuple_impl)\n+\t(__make_1st_indices, __tuple_concater)\n+\t(pair::pair(tuple<>&, tuple<>&, _Index_tuple, _Index_tuple)):\n+\tLikewise.\n+\t* include/std/utility (tuple_element, __is_tuple_like_impl)\n+\t(tuple_size, __pair_get, get): Likewise.\n+\n+2020-06-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_function.h (function): Define all member\n+\tfunctions inline.\n+\n+2020-06-19  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* include/bits/stl_algo.h (__includes): Simplify the code.\n+\n+2020-06-19  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* include/std/optional (optional()): Explicitly define it.\n+\n 2020-06-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94540"}]}