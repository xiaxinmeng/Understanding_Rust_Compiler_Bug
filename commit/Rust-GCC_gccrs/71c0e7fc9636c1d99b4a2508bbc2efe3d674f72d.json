{"sha": "71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjMGU3ZmM5NjM2YzFkOTliNGEyNTA4YmJjMmVmZTNkNjc0ZjcyZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-23T15:27:37Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-23T15:27:37Z"}, "message": "basic-block.h: Fix comment formatting.\n\n\t* basic-block.h: Fix comment formatting.\n\t* bt-load.c: Likewise.\n\t* builtins.c: Likewise.\n\t* c-common.c: Likewise.\n\t* c-common.h: Likewise.\n\t* c-format.c: Likewise.\n\t* coverage.c: Likewise.\n\t* cpplib.h: Likewise.\n\t* cpppch.c: Likewise.\n\t* dbxout.c: Likewise.\n\t* diagnostic.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* expr.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* function.c: Likewise.\n\t* gcc.c: Likewise.\n\t* gcov-io.c: Likewise.\n\t* gcov-io.h: Likewise.\n\t* gcov.c: Likewise.\n\t* profile.c: Likewise.\n\t* real.h: Likewise.\n\t* sched-deps.c: Likewise.\n\nFrom-SVN: r68369", "tree": {"sha": "e01bf4ee4ed8ca0042861ba7004bed92770df135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e01bf4ee4ed8ca0042861ba7004bed92770df135"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/comments", "author": null, "committer": null, "parents": [{"sha": "164131ce2b0389a0ae7254e468c5c7bcada48b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164131ce2b0389a0ae7254e468c5c7bcada48b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164131ce2b0389a0ae7254e468c5c7bcada48b28"}], "stats": {"total": 159, "additions": 92, "deletions": 67}, "files": [{"sha": "1136f7f599c46fbebbe7ebd75c58074e6b4409f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -1,3 +1,28 @@\n+2003-06-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* basic-block.h: Fix comment formatting.\n+\t* bt-load.c: Likewise.\n+\t* builtins.c: Likewise.\n+\t* c-common.c: Likewise.\n+\t* c-common.h: Likewise.\n+\t* c-format.c: Likewise.\n+\t* coverage.c: Likewise.\n+\t* cpplib.h: Likewise.\n+\t* cpppch.c: Likewise.\n+\t* dbxout.c: Likewise.\n+\t* diagnostic.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* function.c: Likewise.\n+\t* gcc.c: Likewise.\n+\t* gcov-io.c: Likewise.\n+\t* gcov-io.h: Likewise.\n+\t* gcov.c: Likewise.\n+\t* profile.c: Likewise.\n+\t* real.h: Likewise.\n+\t* sched-deps.c: Likewise.\n+\n 2003-06-23  Roger Sayle  <roger@eyesopen.com>\n             Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n "}, {"sha": "40775b9ad9a0b5e6e2b89a6d55de03fdc485a7da", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -157,7 +157,7 @@ typedef struct edge_def {\n #define EDGE_COMPLEX\t(EDGE_ABNORMAL | EDGE_ABNORMAL_CALL | EDGE_EH)\n \n /* Counter summary from the last set of coverage counts read by\n-   profile.c. */\n+   profile.c.  */\n extern const struct gcov_ctr_summary *profile_info;\n \n /* Declared in cfgloop.h.  */"}, {"sha": "4ff61defdb743241cc1122cb42db074ee538529a", "filename": "gcc/bt-load.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -97,7 +97,7 @@ typedef struct btr_def_s\n      containing the def (before the def), or in a block containing\n      a use (after the use).  If there are such other live ranges, then\n      other_btr_uses_before_def or other_btr_uses_after_use must be set true\n-     as appropriate. */\n+     as appropriate.  */\n   char other_btr_uses_before_def;\n   char other_btr_uses_after_use;\n   bitmap live_range;\n@@ -248,7 +248,7 @@ insn_sets_btr_p (rtx insn, int check_const, int *regno)\n   return 0;\n }\n \n-/* Find and return a use of a target register within an instruction INSN. */\n+/* Find and return a use of a target register within an instruction INSN.  */\n static rtx *\n find_btr_use (rtx insn)\n {\n@@ -376,7 +376,7 @@ new_btr_user (basic_block bb, int insn_luid, rtx insn)\n   return user;\n }\n \n-/* Write the contents of S to the dump file. */\n+/* Write the contents of S to the dump file.  */\n static void\n dump_hard_reg_set (HARD_REG_SET s)\n {\n@@ -386,7 +386,7 @@ dump_hard_reg_set (HARD_REG_SET s)\n       fprintf (rtl_dump_file, \" %d\", reg);\n }\n \n-/* Write the set of target regs live in block BB to the dump file. */\n+/* Write the set of target regs live in block BB to the dump file.  */\n static void\n dump_btrs_live (int bb)\n {\n@@ -572,7 +572,7 @@ compute_kill (sbitmap *bb_kill, sbitmap *btr_defset,\n   int regno;\n \n   /* For each basic block, form the set BB_KILL - the set\n-     of definitions that the block kills. */\n+     of definitions that the block kills.  */\n   sbitmap_vector_zero (bb_kill, n_basic_blocks);\n   for (i = 0; i < n_basic_blocks; i++)\n     {\n@@ -622,7 +622,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n   sbitmap reaching_defs = sbitmap_alloc (max_uid);\n \n   /* Link uses to the uses lists of all of their reaching defs.\n-     Count up the number of reaching defs of each use. */\n+     Count up the number of reaching defs of each use.  */\n   for (i = 0; i < n_basic_blocks; i++)\n     {\n       basic_block bb = BASIC_BLOCK (i);\n@@ -643,7 +643,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n \t      if (def != NULL)\n \t\t{\n \t\t  /* Remove all reaching defs of regno except\n-\t\t     for this one. */\n+\t\t     for this one.  */\n \t\t  sbitmap_difference (reaching_defs, reaching_defs,\n \t\t\t\t      btr_defset[def->btr - first_btr]);\n \t\t  SET_BIT(reaching_defs, insn_uid);\n@@ -691,7 +691,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n \t\t      if (user->first_reaching_def != -1)\n \t\t\t{ /* There is more than one reaching def.  This is\n \t\t\t     a rare case, so just give up on this def/use\n-\t\t\t     web when it occurs. */\n+\t\t\t     web when it occurs.  */\n \t\t\t  def->has_ambiguous_use = 1;\n \t\t\t  def_array[user->first_reaching_def]\n \t\t\t    ->has_ambiguous_use = 1;\n@@ -788,7 +788,7 @@ block_at_edge_of_live_range_p (int bb, btr_def def)\n    Blocks at the boundary of the live range may contain other live\n    ranges for the same target register, so we have to be careful\n    to remove the target register from the live set of these blocks\n-   only if they do not contain other live ranges for the same register. */\n+   only if they do not contain other live ranges for the same register.  */\n static void\n clear_btr_from_live_range (btr_def def)\n {\n@@ -980,9 +980,9 @@ combine_btr_defs (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \t  && dominated_by_p (dom, other_def->bb, def->bb))\n \t{\n \t  /* def->bb dominates the other def, so def and other_def could\n-\t     be combined. */\n+\t     be combined.  */\n \t  /* Merge their live ranges, and get the set of\n-\t     target registers live over the merged range. */\n+\t     target registers live over the merged range.  */\n \t  int btr;\n \t  HARD_REG_SET combined_btrs_live;\n \t  bitmap combined_live_range = BITMAP_XMALLOC ();\n@@ -1024,7 +1024,7 @@ combine_btr_defs (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \t\t some REG_DEAD notes may no longer be correct.  We could\n \t\t be more precise about this if we looked at the combined\n \t\t live range, but here I just delete any REG_DEAD notes\n-\t\t in case they are no longer correct. */\n+\t\t in case they are no longer correct.  */\n \t      for (user = def->uses; user != NULL; user = user->next)\n \t\tremove_note (user->insn,\n \t\t\t     find_regno_note (user->insn, REG_DEAD,\n@@ -1059,7 +1059,7 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n      Set a target register in block NEW_DEF_BB to the value\n      needed for this target register definition.\n      Replace all uses of the old target register definition by\n-     uses of the new definition.  Delete the old definition. */\n+     uses of the new definition.  Delete the old definition.  */\n   basic_block b = new_def_bb;\n   rtx insp = b->head;\n   rtx old_insn = def->insn;\n@@ -1098,7 +1098,7 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n \n   new_insn = gen_move_insn (btr_rtx, src);\n \n-  /* Insert target register initialization at head of basic block. */\n+  /* Insert target register initialization at head of basic block.  */\n   def->insn = emit_insn_after (new_insn, insp);\n \n   regs_ever_live[btr] = 1;\n@@ -1111,13 +1111,13 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n   delete_insn (old_insn);\n \n   /* Replace each use of the old target register by a use of the new target\n-     register. */\n+     register.  */\n   for (user = def->uses; user != NULL; user = user->next)\n     {\n       /* Some extra work here to ensure consistent modes, because\n \t it seems that a target register REG rtx can be given a different\n \t mode depending on the context (surely that should not be\n-\t the case?). */\n+\t the case?).  */\n       rtx replacement_rtx;\n       if (GET_MODE (user->use) == GET_MODE (btr_rtx)\n \t  || GET_MODE (user->use) == VOIDmode)\n@@ -1164,7 +1164,7 @@ can_move_up (basic_block bb, rtx insn, int n_insns)\n    Return nonzero if there may be benefit from attempting to\n    migrate this DEF further (i.e. we have reduced the cost below\n    MIN_COST, but we may be able to reduce it further).\n-   Return zero if no further migration is possible. */\n+   Return zero if no further migration is possible.  */\n static int\n migrate_btr_def (btr_def def, int min_cost)\n {\n@@ -1234,7 +1234,7 @@ migrate_btr_def (btr_def def, int min_cost)\n        try = get_immediate_dominator (dom, try))\n     {\n       /* Try to move the instruction that sets the target register into\n-\t basic block TRY. */\n+\t basic block TRY.  */\n       int try_freq = basic_block_freq (try);\n \n       if (rtl_dump_file)\n@@ -1283,7 +1283,7 @@ migrate_btr_def (btr_def def, int min_cost)\n }\n \n /* Attempt to move instructions that set target registers earlier\n-   in the flowgraph, away from their corresponding uses. */\n+   in the flowgraph, away from their corresponding uses.  */\n static void\n migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n {\n@@ -1361,16 +1361,16 @@ branch_target_load_optimize (rtx insns, bool after_prologue_epilogue_gen)\n       else\n \tissue_rate = 1;\n \n-      /* Build the CFG for migrate_btr_defs. */\n+      /* Build the CFG for migrate_btr_defs.  */\n #if 1\n       /* This may or may not be needed, depending on where we\n-\t run this phase. */\n+\t run this phase.  */\n       cleanup_cfg (optimize ? CLEANUP_EXPENSIVE : 0);\n #endif\n \n       life_analysis (insns, NULL, 0);\n \n-      /* Dominator info is also needed for migrate_btr_def. */\n+      /* Dominator info is also needed for migrate_btr_def.  */\n       dom = calculate_dominance_info (CDI_DOMINATORS);\n       migrate_btr_defs (class,\n \t\t       ((*targetm.branch_target_register_callee_saved)"}, {"sha": "16d483a3594c7d34d67a3630cbd855a110f3a5dd", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -4026,7 +4026,7 @@ expand_builtin_fputs (tree arglist, int ignore, int unlocked)\n       {\n \ttree string_arg;\n \n-\t/* If optimizing for size keep fputs. */\n+\t/* If optimizing for size keep fputs.  */\n \tif (optimize_size)\n \t  return 0;\n \tstring_arg = TREE_VALUE (arglist);"}, {"sha": "8b555a88cdd16d91be9bb3353fb665de7823c6d3", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -612,7 +612,7 @@ int flag_abi_version = 1;\n \n int warn_abi = 0;\n \n-/* Nonzero means warn about invalid uses of offsetof. */\n+/* Nonzero means warn about invalid uses of offsetof.  */\n \n int warn_invalid_offsetof = 1;\n "}, {"sha": "d97f460712db200d8bd4ca490a44dac5b2529bbd", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -774,7 +774,7 @@ extern int flag_abi_version;\n \n extern int warn_abi;\n \n-/* Nonzero means warn about invalid uses of offsetof. */\n+/* Nonzero means warn about invalid uses of offsetof.  */\n  \n extern int warn_invalid_offsetof;\n "}, {"sha": "1a2401955cba5c66922559238446c529c3bfd58c", "filename": "gcc/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -145,7 +145,7 @@ check_format_string (tree argument, unsigned HOST_WIDE_INT format_num,\n \n /* Strip any conversions from the expression, verify it is a constant,\n    and store its value. If validated_p is true, abort on errors.\n-   Returns true on success, false otherwise. */\n+   Returns true on success, false otherwise.  */\n bool\n get_constant(tree expr, unsigned HOST_WIDE_INT *value, int validated_p)\n {"}, {"sha": "11f5a76ed80d5fb784321fdc503ec83366cfc506", "filename": "gcc/coverage.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -81,7 +81,7 @@ static unsigned prg_ctr_mask; /* Mask of counter types generated.  */\n static unsigned prg_n_ctrs[GCOV_COUNTERS]; /* Total counters allocated.  */\n \n /* Counter information for current function.  */\n-static unsigned fn_ctr_mask; /* Mask of counters used. */\n+static unsigned fn_ctr_mask; /* Mask of counters used.  */\n static unsigned fn_n_ctrs[GCOV_COUNTERS]; /* Counters allocated.  */\n static unsigned fn_b_ctrs[GCOV_COUNTERS]; /* Allocation base.  */\n \n@@ -305,7 +305,7 @@ get_coverage_counts (unsigned counter, unsigned expected,\n {\n   counts_entry_t *entry, elt;\n \n-  /* No hash table, no counts. */\n+  /* No hash table, no counts.  */\n   if (!counts_hash)\n     {\n       static int warned = 0;\n@@ -386,7 +386,7 @@ coverage_counter_ref (unsigned counter, unsigned no)\n }\n \f\n /* Generate a checksum for a string.  CHKSUM is the current\n-   checksum. */\n+   checksum.  */\n \n static unsigned\n checksum_string (unsigned chksum, const char *string)\n@@ -881,7 +881,7 @@ create_coverage ()\n }\n \f\n /* Perform file-level initialization. Read in data file, generate name\n-   of graph file. */\n+   of graph file.  */\n \n void\n coverage_init (filename)"}, {"sha": "7e9c5d5510cba0c407ccee7f4789c70cd46b137b", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -432,7 +432,7 @@ extern const char *progname;\n #define NODE_DIAGNOSTIC (1 << 3)\t/* Possible diagnostic when lexed.  */\n #define NODE_WARN\t(1 << 4)\t/* Warn if redefined or undefined.  */\n #define NODE_DISABLED\t(1 << 5)\t/* A disabled macro.  */\n-#define NODE_MACRO_ARG\t(1 << 6)\t/* Used during #define processing. */\n+#define NODE_MACRO_ARG\t(1 << 6)\t/* Used during #define processing.  */\n \n /* Different flavors of hash node.  */\n enum node_type\n@@ -470,7 +470,7 @@ struct cpp_hashnode GTY(())\n   unsigned int is_directive : 1;\n   unsigned int directive_index : 7;\t/* If is_directive, \n \t\t\t\t\t   then index into directive table.\n-\t\t\t\t\t   Otherwise, a NODE_OPERATOR. */\n+\t\t\t\t\t   Otherwise, a NODE_OPERATOR.  */\n   unsigned char rid_code;\t\t/* Rid code - for front ends.  */\n   ENUM_BITFIELD(node_type) type : 8;\t/* CPP node type.  */\n   unsigned char flags;\t\t\t/* CPP flags.  */"}, {"sha": "6b60c57eaacd184b6e549713a74e28b41659c848", "filename": "gcc/cpppch.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fcpppch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fcpppch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpppch.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -109,7 +109,7 @@ struct cpp_savedstate\n   size_t hashsize;\n   /* Number of definitions */\n   size_t n_defs;\n-  /* Array of definitions.  In cpp_write_pch_deps it is used for sorting. */\n+  /* Array of definitions.  In cpp_write_pch_deps it is used for sorting.  */\n   cpp_hashnode **defs;\n   /* Space for the next definition.  Definitions are null-terminated\n      strings.  */\n@@ -244,7 +244,7 @@ count_defs (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *hn, void *ss_p)\n     }\n }\n \n-/* Collect the identifiers into the state's string table. */\n+/* Collect the identifiers into the state's string table.  */\n static int\n write_defs (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *hn, void *ss_p)\n {\n@@ -314,7 +314,7 @@ cpp_write_pch_deps (cpp_reader *r, FILE *f)\n   ss->n_defs = 0;\n   cpp_forall_identifiers (r, write_defs, ss);\n \n-  /* Sort the list, copy it into a buffer, and write it out. */\n+  /* Sort the list, copy it into a buffer, and write it out.  */\n   qsort (ss->defs, ss->n_defs, sizeof (cpp_hashnode *), &comp_hashnodes);\n   definedstrs = ss->definedstrs = xmalloc (ss->hashsize);\n   for (i = 0; i < ss->n_defs; ++i)\n@@ -496,7 +496,7 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n   qsort (nl.defs, nl.n_defs, sizeof (cpp_hashnode *), &comp_hashnodes);\n  \n   /* Loop through nl.defs and undeftab, both of which are sorted lists.\n-     There should be no matches. */\n+     There should be no matches.  */\n   first = undeftab;\n   last = undeftab + m.definition_length;\n   i = 0;"}, {"sha": "f4f35dbef97a319d905ef815402ad16275ef8abd", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -587,7 +587,7 @@ dbxout_handle_pch (unsigned at_end)\n     }\n   else\n     {\n-      /* ... and an EINCL. */\n+      /* ... and an EINCL.  */\n       dbxout_end_source_file (0);\n \n       /* Deal with cases where 'lastfile' was never actually changed.  */"}, {"sha": "8736a606478d740bfda89cad0fc8bc123a814733", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -561,7 +561,7 @@ output_format (output_buffer *buffer, text_info *text)\n             output_long_long_decimal\n               (buffer, va_arg (*text->args_ptr, long long));\n           else\n-            /* Sould not happen. */\n+            /* Sould not happen.  */\n             abort();\n           break;\n "}, {"sha": "65bd95c4aa5dbb66e0b8c36bd315c537adde92dd", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -3588,10 +3588,10 @@ static int current_function_has_inlines;\n static int comp_unit_has_inlines;\n #endif\n \n-/* Number of file tables emited in maybe_emit_file(). */\n+/* Number of file tables emited in maybe_emit_file().  */\n static GTY(()) int emitcount = 0;\n \n-/* Number of internal labels generated by gen_internal_sym(). */\n+/* Number of internal labels generated by gen_internal_sym().  */\n static GTY(()) int label_num;\n \n #ifdef DWARF2_DEBUGGING_INFO"}, {"sha": "4b29993b401a4e5cc74ccc8473cb7abe246f11b5", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -4465,7 +4465,7 @@ store_expr (exp, target, want_value)\n     {\n       /* C++ can generate ?: expressions with a throw expression in one\n \t branch and an rvalue in the other. Here, we resolve attempts to\n-\t store the throw expression's nonexistant result. */\n+\t store the throw expression's nonexistant result.  */\n       if (want_value)\n \tabort ();\n       expand_expr (exp, const0_rtx, VOIDmode, 0);\n@@ -7001,7 +7001,7 @@ expand_expr (exp, target, tmode, modifier)\n \t  return original_target;\n \t}\n \n-      /* ... fall through ... */\n+      /* ... fall through ...  */\n \n     case STRING_CST:\n       temp = output_constant_def (exp, 1);"}, {"sha": "b35d733e220c6cc6d10d047b8a944dbfc968c1d4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -8222,7 +8222,7 @@ tree_expr_nonnegative_p (t)\n \t      }\n \t}\n \n-      /* ... fall through ... */\n+      /* ... fall through ...  */\n \n     default:\n       if (truth_value_p (TREE_CODE (t)))"}, {"sha": "58467237209bd51eaa2e671d09d33d163f85db51", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -6963,7 +6963,7 @@ use_return_register ()\n \n static GTY(()) rtx initial_trampoline;\n \n-/* Generate RTL for the end of the current function. */\n+/* Generate RTL for the end of the current function.  */\n \n void\n expand_function_end ()"}, {"sha": "df3205151bcb9f239d31226aafebfc01314ab7a5", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -6155,7 +6155,7 @@ main (argc, argv)\n \t}\n     }\n \n-  /* Process sysroot_suffix_spec. */\n+  /* Process sysroot_suffix_spec.  */\n   if (*sysroot_suffix_spec != 0\n       && do_spec_2 (sysroot_suffix_spec) == 0)\n     {\n@@ -6165,7 +6165,7 @@ main (argc, argv)\n         target_sysroot_suffix = xstrdup (argbuf[argbuf_index -1]);\n     }\n \n-  /* Process sysroot_hdrs_suffix_spec. */\n+  /* Process sysroot_hdrs_suffix_spec.  */\n   if (*sysroot_hdrs_suffix_spec != 0\n       && do_spec_2 (sysroot_hdrs_suffix_spec) == 0)\n     {"}, {"sha": "6f4f1b8b6889aadcbe983932eb96fd2583359edd", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -338,7 +338,7 @@ gcov_write_summary (gcov_unsigned_t tag, const struct gcov_summary *summary)\n #endif /*!IN_GCOV */\n \n /* Return a pointer to read BYTES bytes from the gcov file. Returns\n-   NULL on failure (read past EOF). */\n+   NULL on failure (read past EOF).  */\n \n static const unsigned char *\n gcov_read_bytes (unsigned bytes)\n@@ -489,7 +489,7 @@ gcov_sync (gcov_position_t base, gcov_unsigned_t length)\n \n #if IN_LIBGCOV\n /* Move to the a set position in a gcov file.  BASE is zero to move to\n-   the end, and nonzero to move to that position. */\n+   the end, and nonzero to move to that position.  */\n \n GCOV_LINKAGE void\n gcov_seek (gcov_position_t base)"}, {"sha": "556540810375439120450b51d3cf613acbfb5e0b", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -223,7 +223,7 @@ typedef HOST_WIDEST_INT gcov_type;\n #define gcov_read_counter __gcov_read_counter\n #define gcov_read_summary __gcov_read_summary\n \n-/* Poison these, so they don't accidentally slip in. */\n+/* Poison these, so they don't accidentally slip in.  */\n #pragma GCC poison gcov_write_string gcov_write_tag gcov_write_length\n #pragma GCC poison gcov_read_string gcov_sync gcov_time\n \n@@ -268,7 +268,7 @@ typedef HOST_WIDEST_INT gcov_type;\n /* Counters that are collected.  */\n #define GCOV_COUNTER_ARCS \t0  /* Arc transitions.  */\n #define GCOV_COUNTERS_SUMMABLE\t1  /* Counters which can be\n-\t\t\t\t      summaried. */\n+\t\t\t\t      summaried.  */\n #define GCOV_COUNTERS\t\t1\n \n /* A list of human readable names of the counters */\n@@ -277,7 +277,7 @@ typedef HOST_WIDEST_INT gcov_type;\n /* Names of merge functions for counters.  */\n #define GCOV_MERGE_FUNCTIONS\t{\"__gcov_merge_add\"}\n \n-/* Convert a counter index to a tag. */\n+/* Convert a counter index to a tag.  */\n #define GCOV_TAG_FOR_COUNTER(COUNT)\t\t\t\t\\\n \t(GCOV_TAG_COUNTER_BASE + ((gcov_unsigned_t)(COUNT) << 17))\n /* Convert a tag to a counter.  */\n@@ -316,9 +316,9 @@ struct gcov_ctr_summary\n {\n   gcov_unsigned_t num;\t\t/* number of counters.  */\n   gcov_unsigned_t runs;\t\t/* number of program runs */\n-  gcov_type sum_all;\t\t/* sum of all counters accumulated. */\n+  gcov_type sum_all;\t\t/* sum of all counters accumulated.  */\n   gcov_type run_max;\t\t/* maximum value on a single run.  */\n-  gcov_type sum_max;    \t/* sum of individual run max values. */\n+  gcov_type sum_max;    \t/* sum of individual run max values.  */\n };\n \n /* Object & program summary record.  */\n@@ -391,8 +391,8 @@ GCOV_LINKAGE struct gcov_var\n {\n   FILE *file;\n   gcov_position_t start;\t/* Position of first byte of block */\n-  unsigned offset;\t\t/* Read/write position within the block. */\n-  unsigned length;\t\t/* Read limit in the block. */\n+  unsigned offset;\t\t/* Read/write position within the block.  */\n+  unsigned length;\t\t/* Read limit in the block.  */\n   unsigned overread;\t\t/* Number of bytes overread.  */\n   int error;\t\t\t/* < 0 overflow, > 0 disk error.  */\n   int mode;\t                /* < 0 writing, > 0 reading */\n@@ -417,7 +417,7 @@ GCOV_LINKAGE struct gcov_var\n    may use the gcov_write functions, gcov_seek & gcov_error. When a\n    file is to be rewritten you use the functions for reading, then\n    gcov_rewrite then the functions for writing.  Your file may become\n-   corrupted if you break these invariants. */\n+   corrupted if you break these invariants.  */\n GCOV_LINKAGE int gcov_open (const char */*name*/, int /*truncate*/);\n GCOV_LINKAGE int gcov_close (void);\n "}, {"sha": "60930da32ebc168c603290035b8309f2acd67bd9", "filename": "gcc/gcov.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -149,11 +149,11 @@ typedef struct block_info\n     struct\n     {\n       /* Single line graph cycle workspace.  Used for all-blocks\n-\t mode. */\n+\t mode.  */\n       arc_t *arc;\n       unsigned ident;\n     } cycle; /* Used in all-blocks mode, after blocks are linked onto\n-\t       lines. */\n+\t       lines.  */\n   } u;\n \n   /* Temporary chain for solving graph, and for chaining blocks on one\n@@ -218,9 +218,9 @@ typedef struct line_info\n   {\n     arc_t *branches; \t   /* branches from blocks that end on this\n \t\t\t      line. Used for branch-counts when not\n-\t\t\t      all-blocks mode. */\n+\t\t\t      all-blocks mode.  */\n     block_t *blocks;       /* blocks which start on this line.  Used\n-\t\t\t      in all-blocks mode. */\n+\t\t\t      in all-blocks mode.  */\n   } u;\n   unsigned exists : 1;\n } line_t;\n@@ -1691,7 +1691,7 @@ accumulate_line_counts (src)\n \t\t      arc_t *cycle_arc = arc;\n \t\t      arc_t *probe_arc;\n \t\t      \n-\t\t      /* Locate the smallest arc count of the loop. */\n+\t\t      /* Locate the smallest arc count of the loop.  */\n \t\t      for (dst = head; (probe_arc = dst->u.cycle.arc);\n \t\t\t   dst = probe_arc->src)\n \t\t\tif (cycle_count > probe_arc->count)\n@@ -1723,7 +1723,7 @@ accumulate_line_counts (src)\n \t      arc = head->u.cycle.arc;\n \t      if (arc)\n \t\t{\n-\t\t  /* It was not the first vertex. Move onto next arc. */\n+\t\t  /* It was not the first vertex. Move onto next arc.  */\n \t\t  head->u.cycle.arc = NULL;\n \t\t  head = arc->src;\n \t\t  arc = arc->succ_next;"}, {"sha": "b2ae4a04f00f96282db90a82529f409215ea31e5", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -84,7 +84,7 @@ struct bb_info {\n #define EDGE_INFO(e)  ((struct edge_info *) (e)->aux)\n #define BB_INFO(b)  ((struct bb_info *) (b)->aux)\n \n-/* Counter summary from the last set of coverage counts read. */\n+/* Counter summary from the last set of coverage counts read.  */\n \n const struct gcov_ctr_summary *profile_info;\n \n@@ -731,7 +731,7 @@ branch_prob ()\n \t}\n     }\n   \n-  /* Line numbers. */\n+  /* Line numbers.  */\n   if (coverage_begin_output ())\n     {\n       char const *prev_file_name = NULL;"}, {"sha": "56afd0e518c7e47f2c45ca0498b469d3a766a492", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -368,7 +368,7 @@ extern bool real_sqrt\t\t\tPARAMS ((REAL_VALUE_TYPE *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t const REAL_VALUE_TYPE *));\n \n-/* Calculate R as X raised to the integer exponent N in mode MODE. */\n+/* Calculate R as X raised to the integer exponent N in mode MODE.  */\n extern bool real_powi\t\t\tPARAMS ((REAL_VALUE_TYPE *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t const REAL_VALUE_TYPE *,"}, {"sha": "186766d05b1743b7266d44f0610deb8beec5ecbe", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=71c0e7fc9636c1d99b4a2508bbc2efe3d674f72d", "patch": "@@ -489,7 +489,7 @@ sched_analyze_1 (deps, x, insn)\n              them as writes to get proper dependencies for following\n              instructions.  We must handle them as reads to get proper\n              dependencies from this to previous instructions.\n-             Thus we need to call sched_analyze_2. */\n+             Thus we need to call sched_analyze_2.  */\n \n \t  sched_analyze_2 (deps, XEXP (dest, 0), insn);  \n \t}"}]}