{"sha": "ec61e852bc917b45c288e17fa4f1cb06145cf95e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM2MWU4NTJiYzkxN2I0NWMyODhlMTdmYTRmMWNiMDYxNDVjZjk1ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-25T08:45:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-25T08:45:04Z"}, "message": "basic_string.h (_Rep::_M_is_safe, [...]): New, use througout.\n\n2004-10-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (_Rep::_M_is_safe, _M_check_length,\n\t_M_move, _M_copy, _M_assign): New, use througout.\n\t(operator+=(_CharT)): Define in terms of push_back.\n\t(append(const basic_string&)): Define here, inline, and simplify,\n\tdon't use the full _M_replace_safe.\n\t(append(size_type, _CharT)): Likewise, don't use _M_replace_aux.\n\t(push_back): Likewise.\n\t(assign(const basic_string&)): Define here, inline.\n\t* include/bits/basic_string.tcc (append(const _CharT* s, size_type):\n\tFix: when s points inside the _Rep, upon reallocation (reserve) we\n\twere copying from deallocated memory.\n\t(append(const basic_string&, size_type, size_type)): Simplify,\n\tdon't use _M_replace_safe.\n\t(replace(size_type, size_type, const _CharT*, size_type)): Slightly\n\ttweak.\n\t(reserve): Likewise.\n\t* testsuite/21_strings/basic_string/append/char/2.cc: New.\n\t* testsuite/21_strings/basic_string/append/char/3.cc: Likewise.\n\t* testsuite/21_strings/basic_string/append/wchar_t/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string/append/wchar_t/3.cc: Likewise.\n\n\t* testsuite/21_strings/basic_string/assign/char/3.cc: Remove junk.\n\t* testsuite/21_strings/basic_string/assign/wchar_t/3.cc: Likewise.\n\nFrom-SVN: r89526", "tree": {"sha": "53f134c47b30d8ff6221eeacd91087abc68323a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53f134c47b30d8ff6221eeacd91087abc68323a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec61e852bc917b45c288e17fa4f1cb06145cf95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec61e852bc917b45c288e17fa4f1cb06145cf95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec61e852bc917b45c288e17fa4f1cb06145cf95e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec61e852bc917b45c288e17fa4f1cb06145cf95e/comments", "author": null, "committer": null, "parents": [{"sha": "4318d4a1b62579003c5df549e212c711364e535d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4318d4a1b62579003c5df549e212c711364e535d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4318d4a1b62579003c5df549e212c711364e535d"}], "stats": {"total": 602, "additions": 460, "deletions": 142}, "files": [{"sha": "9d8d3f2c0f62bb8e2727d645b23891c5d9f0c7f5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -1,3 +1,29 @@\n+2004-10-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (_Rep::_M_is_safe, _M_check_length,\n+\t_M_move, _M_copy, _M_assign): New, use througout.\n+\t(operator+=(_CharT)): Define in terms of push_back.\n+\t(append(const basic_string&)): Define here, inline, and simplify,\n+\tdon't use the full _M_replace_safe.\n+\t(append(size_type, _CharT)): Likewise, don't use _M_replace_aux.\n+\t(push_back): Likewise.\n+\t(assign(const basic_string&)): Define here, inline.\n+\t* include/bits/basic_string.tcc (append(const _CharT* s, size_type):\n+\tFix: when s points inside the _Rep, upon reallocation (reserve) we\n+\twere copying from deallocated memory.\n+\t(append(const basic_string&, size_type, size_type)): Simplify,\n+\tdon't use _M_replace_safe.\n+\t(replace(size_type, size_type, const _CharT*, size_type)): Slightly\n+\ttweak.\n+\t(reserve): Likewise.\n+\t* testsuite/21_strings/basic_string/append/char/2.cc: New.\n+\t* testsuite/21_strings/basic_string/append/char/3.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/append/wchar_t/2.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/append/wchar_t/3.cc: Likewise.\n+\n+\t* testsuite/21_strings/basic_string/assign/char/3.cc: Remove junk.\n+\t* testsuite/21_strings/basic_string/assign/wchar_t/3.cc: Likewise.\n+\n 2004-10-23  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* testsuite/ext/mt_allocator/deallocate_global-2.c:"}, {"sha": "9900798339a5d452fdf0aa2092019b293bc9eeda", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 101, "deletions": 18, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -185,6 +185,14 @@ namespace std\n \t_M_is_shared() const\n         { return this->_M_refcount > 0; }\n \n+\t// True if source and destination do not overlap.\n+\tbool\n+\t_M_is_safe(const _CharT* __data, const _CharT* __s) const\n+\t{\n+\t  return (less<const _CharT*>()(__s, __data)\n+\t\t  || less<const _CharT*>()(__data + this->_M_length, __s));\n+\t}\n+\n         void\n \t_M_set_leaked()\n         { this->_M_refcount = -1; }\n@@ -302,6 +310,13 @@ namespace std\n \treturn __pos;\n       }\n \n+      void\n+      _M_check_length(size_type __n1, size_type __n2, const char* __s) const\n+      {\n+\tif (this->max_size() - (this->size() - __n1) < __n2)\n+\t  __throw_length_error(__N(__s));\n+      }\n+\n       // NB: _M_limit doesn't check for a bad __pos value.\n       size_type\n       _M_limit(size_type __pos, size_type __off) const\n@@ -310,6 +325,35 @@ namespace std\n \treturn __testoff ? __off : this->size() - __pos;\n       }\n \n+      // When __n = 1 way faster than the general multichar\n+      // traits_type::copy/move/assign.\n+      static void\n+      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)\n+      {\n+\tif (__n == 1)\n+\t  traits_type::assign(*__d, *__s);\n+\telse\n+\t  traits_type::copy(__d, __s, __n);\n+      }\n+\n+      static void\n+      _M_move(_CharT* __d, const _CharT* __s, size_type __n)\n+      {\n+\tif (__n == 1)\n+\t  traits_type::assign(*__d, *__s);\n+\telse\n+\t  traits_type::move(__d, __s, __n);\t  \n+      }\n+\n+      static void\n+      _M_assign(_CharT* __d, size_type __n, _CharT __c)\n+      {\n+\tif (__n == 1)\n+\t  traits_type::assign(*__d, __c);\n+\telse\n+\t  traits_type::assign(__d, __n, __c);\t  \n+      }\n+\n       // _S_copy_chars is a separate template to permit specialization\n       // to optimize for the common case of pointers as iterators.\n       template<class _Iterator>\n@@ -330,11 +374,11 @@ namespace std\n \n       static void\n       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)\n-      { traits_type::copy(__p, __k1, __k2 - __k1); }\n+      { _M_copy(__p, __k1, __k2 - __k1); }\n \n       static void\n       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)\n-      { traits_type::copy(__p, __k1, __k2 - __k1); }\n+      { _M_copy(__p, __k1, __k2 - __k1); }\n \n       void\n       _M_mutate(size_type __pos, size_type __len1, size_type __len2);\n@@ -721,15 +765,30 @@ namespace std\n        */\n       basic_string&\n       operator+=(_CharT __c)\n-      { return this->append(size_type(1), __c); }\n+      { \n+\tthis->push_back(__c);\n+\treturn *this;\n+      }\n \n       /**\n        *  @brief  Append a string to this string.\n        *  @param str  The string to append.\n        *  @return  Reference to this string.\n        */\n       basic_string&\n-      append(const basic_string& __str);\n+      append(const basic_string& __str)\n+      {\n+\tconst size_type __size = __str.size();\n+\tif (__size)\n+\t  {\n+\t    const size_type __len = __size + this->size();\n+\t    if (__len > this->capacity() || _M_rep()->_M_is_shared())\n+\t      this->reserve(__len);\n+\t    _M_copy(_M_data() + this->size(), __str._M_data(), __size);\n+\t    _M_rep()->_M_set_length_and_sharable(__len);\n+\t  }\n+\treturn *this;\n+      }\n \n       /**\n        *  @brief  Append a substring.\n@@ -777,7 +836,18 @@ namespace std\n        */\n       basic_string&\n       append(size_type __n, _CharT __c)\n-      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }\n+      {\n+\tif (__n)\n+\t  {\n+\t    _M_check_length(size_type(0), __n, \"basic_string::append\");\t  \n+\t    const size_type __len = __n + this->size();\n+\t    if (__len > this->capacity() || _M_rep()->_M_is_shared())\n+\t      this->reserve(__len);\n+\t    _M_assign(_M_data() + this->size(), __n, __c);\n+\t    _M_rep()->_M_set_length_and_sharable(__len);\n+\t  }\n+\treturn *this;\n+      }\n \n       /**\n        *  @brief  Append a range of characters.\n@@ -798,15 +868,32 @@ namespace std\n        */\n       void\n       push_back(_CharT __c)\n-      { _M_replace_aux(this->size(), size_type(0), size_type(1), __c); }\n+      { \n+\tconst size_type __len = 1 + this->size();\n+\tif (__len > this->capacity() || _M_rep()->_M_is_shared())\n+\t  this->reserve(__len);\n+\ttraits_type::assign(_M_data()[this->size()], __c);\n+\t_M_rep()->_M_set_length_and_sharable(__len);\n+      }\n \n       /**\n        *  @brief  Set value to contents of another string.\n        *  @param  str  Source string to use.\n        *  @return  Reference to this string.\n        */\n       basic_string&\n-      assign(const basic_string& __str);\n+      assign(const basic_string& __str)\n+      {\n+\tif (_M_rep() != __str._M_rep())\n+\t  {\n+\t    // XXX MT\n+\t    const allocator_type __a = this->get_allocator();\n+\t    _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());\n+\t    _M_rep()->_M_dispose(__a);\n+\t    _M_data(__tmp);\n+\t  }\n+\treturn *this;\n+      }\n \n       /**\n        *  @brief  Set value to a substring of a string.\n@@ -909,7 +996,8 @@ namespace std\n        *  of the string doesn't change if an error is thrown.\n       */\n       template<class _InputIterator>\n-        void insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n+        void\n+        insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n         { this->replace(__p, __p, __beg, __end); }\n \n       /**\n@@ -1370,13 +1458,10 @@ namespace std\n       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n \t\t     _CharT __c)\n       {\n-\tif (this->max_size() - (this->size() - __n1) < __n2)\n-\t  __throw_length_error(__N(\"basic_string::_M_replace_aux\"));\n+\t_M_check_length(__n1, __n2, \"basic_string::_M_replace_aux\");\n \t_M_mutate(__pos1, __n1, __n2);\n-\tif (__n2 == 1)\n-\t  _M_data()[__pos1] = __c;\n-\telse if (__n2)\n-\t  traits_type::assign(_M_data() + __pos1, __n2, __c);\n+\tif (__n2)\n+\t  _M_assign(_M_data() + __pos1, __n2, __c);\n \treturn *this;\n       }\n \n@@ -1385,10 +1470,8 @@ namespace std\n \t\t      size_type __n2)\n       {\n \t_M_mutate(__pos1, __n1, __n2);\n-\tif (__n2 == 1)\n-\t  _M_data()[__pos1] = *__s;\n-\telse if (__n2)\n-\t  traits_type::copy(_M_data() + __pos1, __s, __n2);\n+\tif (__n2)\n+\t  _M_copy(_M_data() + __pos1, __s, __n2);\n \treturn *this;\n       }\n "}, {"sha": "40634978712ddcb8703cabc6b0fd6e1a29a611fe", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 83, "deletions": 116, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -101,7 +101,7 @@ namespace std\n \t    ++__beg;\n \t  }\n \t_Rep* __r = _Rep::_S_create(__len, size_type(0), __a);\n-\ttraits_type::copy(__r->_M_refdata(), __buf, __len);\n+\t_M_copy(__r->_M_refdata(), __buf, __len);\n \ttry\n \t  {\n \t    while (__beg != __end)\n@@ -110,8 +110,7 @@ namespace std\n \t\t  {\n \t\t    // Allocate more space.\n \t\t    _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);\n-\t\t    traits_type::copy(__another->_M_refdata(),\n-\t\t\t\t      __r->_M_refdata(), __len);\n+\t\t    _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);\n \t\t    __r->_M_destroy(__a);\n \t\t    __r = __another;\n \t\t  }\n@@ -170,7 +169,7 @@ namespace std\n       // Check for out_of_range and length_error exceptions.\n       _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);\n       if (__n)\n-\ttraits_type::assign(__r->_M_refdata(), __n, __c);\n+\t_M_assign(__r->_M_refdata(), __n, __c);\n \n       __r->_M_set_length_and_sharable(__n);\n       return __r->_M_refdata();\n@@ -243,42 +242,69 @@ namespace std\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n-    assign(const basic_string& __str)\n+    assign(const _CharT* __s, size_type __n)\n     {\n-      if (_M_rep() != __str._M_rep())\n+      __glibcxx_requires_string_len(__s, __n);\n+      _M_check_length(this->size(), __n, \"basic_string::assign\");\n+      if (_M_rep()->_M_is_safe(_M_data(), __s) || _M_rep()->_M_is_shared())\n+\treturn _M_replace_safe(size_type(0), this->size(), __s, __n);\n+      else\n \t{\n-\t  // XXX MT\n-\t  const allocator_type __a = this->get_allocator();\n-\t  _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());\n-\t  _M_rep()->_M_dispose(__a);\n-\t  _M_data(__tmp);\n+\t  // Work in-place.\n+\t  const size_type __pos = __s - _M_data();\n+\t  if (__pos >= __n)\n+\t    traits_type::copy(_M_data(), __s, __n);\n+\t  else if (__pos)\n+\t    traits_type::move(_M_data(), __s, __n);\n+\t  _M_rep()->_M_set_length_and_sharable(__n);\n+\t  return *this;\n+\t}\n+     }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    append(const _CharT* __s, size_type __n)\n+    {\n+      __glibcxx_requires_string_len(__s, __n);\n+      if (__n)\n+\t{\n+\t  _M_check_length(size_type(0), __n, \"basic_string::append\");\n+\t  const size_type __len = __n + this->size();\n+\t  if (__len > this->capacity() || _M_rep()->_M_is_shared())\n+\t    {\n+\t      if (_M_rep()->_M_is_safe(_M_data(), __s))\n+\t\tthis->reserve(__len);\n+\t      else\n+\t\t{\n+\t\t  const size_type __off = __s - _M_data();\n+\t\t  this->reserve(__len);\n+\t\t  __s = _M_data() + __off;\n+\t\t}\n+\t    }\n+\t  _M_copy(_M_data() + this->size(), __s, __n);\n+\t  _M_rep()->_M_set_length_and_sharable(__len);\n \t}\n       return *this;\n     }\n \n-   template<typename _CharT, typename _Traits, typename _Alloc>\n-     basic_string<_CharT, _Traits, _Alloc>&\n-     basic_string<_CharT, _Traits, _Alloc>::\n-     assign(const _CharT* __s, size_type __n)\n-     {\n-       __glibcxx_requires_string_len(__s, __n);\n-       if (__n > this->max_size())\n-\t __throw_length_error(__N(\"basic_string::assign\"));\n-       if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n-\t   || less<const _CharT*>()(_M_data() + this->size(), __s))\n-\t return _M_replace_safe(size_type(0), this->size(), __s, __n);\n-       else\n-\t {\n-\t   // Work in-place\n-\t   const size_type __pos = __s - _M_data();\n-\t   if (__pos >= __n)\n-\t     traits_type::copy(_M_data(), __s, __n);\n-\t   else if (__pos)\n-\t     traits_type::move(_M_data(), __s, __n);\n-\t   _M_rep()->_M_set_length_and_sharable(__n);\n-\t   return *this;\n-\t }\n-     }\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    append(const basic_string& __str, size_type __pos, size_type __n)\n+    {\n+      __str._M_check(__pos, \"basic_string::append\");\n+      __n = __str._M_limit(__pos, __n);\n+      if (__n)\n+\t{\n+\t  const size_type __len = __n + this->size();\n+\t  if (__len > this->capacity() || _M_rep()->_M_is_shared())\n+\t    this->reserve(__len);\n+\t  _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);\n+\t  _M_rep()->_M_set_length_and_sharable(__len);\t  \n+\t}\n+      return *this;\n+    }\n \n    template<typename _CharT, typename _Traits, typename _Alloc>\n      basic_string<_CharT, _Traits, _Alloc>&\n@@ -287,29 +313,25 @@ namespace std\n      {\n        __glibcxx_requires_string_len(__s, __n);\n        _M_check(__pos, \"basic_string::insert\");\n-       if (this->max_size() - this->size() < __n)\n-\t __throw_length_error(__N(\"basic_string::insert\"));\n-       if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n-           || less<const _CharT*>()(_M_data() + this->size(), __s))\n+       _M_check_length(size_type(0), __n, \"basic_string::insert\");\n+       if (_M_rep()->_M_is_safe(_M_data(), __s) || _M_rep()->_M_is_shared())\n          return _M_replace_safe(__pos, size_type(0), __s, __n);\n        else\n          {\n-           // Work in-place. If _M_mutate reallocates the string, __s\n-           // does not point anymore to valid data, therefore we save its\n-           // offset, then we restore it.\n+           // Work in-place.\n            const size_type __off = __s - _M_data();\n            _M_mutate(__pos, 0, __n);\n            __s = _M_data() + __off;\n            _CharT* __p = _M_data() + __pos;\n            if (__s  + __n <= __p)\n-             traits_type::copy(__p, __s, __n);\n+             _M_copy(__p, __s, __n);\n            else if (__s >= __p)\n-             traits_type::copy(__p, __s + __n, __n);\n+             _M_copy(__p, __s + __n, __n);\n            else\n              {\n \t       const size_type __nleft = __p - __s;\n-               traits_type::copy(__p, __s, __nleft);\n-               traits_type::copy(__p + __nleft, __p + __n, __n - __nleft);\n+               _M_copy(__p, __s, __nleft);\n+               _M_copy(__p + __nleft, __p + __n, __n - __nleft);\n              }\n            return *this;\n          }\n@@ -324,24 +346,18 @@ namespace std\n        __glibcxx_requires_string_len(__s, __n2);\n        _M_check(__pos, \"basic_string::replace\");\n        __n1 = _M_limit(__pos, __n1);\n-       if (this->max_size() - (this->size() - __n1) < __n2)\n-         __throw_length_error(__N(\"basic_string::replace\"));\n+       _M_check_length(__n1, __n2, \"basic_string::replace\");\n        bool __left;\n-       if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n-\t   || less<const _CharT*>()(_M_data() + this->size(), __s))\n+       if (_M_rep()->_M_is_safe(_M_data(), __s) || _M_rep()->_M_is_shared())\n          return _M_replace_safe(__pos, __n1, __s, __n2);\n        else if ((__left = __s + __n2 <= _M_data() + __pos)\n \t\t|| _M_data() + __pos + __n1 <= __s)\n \t {\n \t   // Work in-place: non-overlapping case.\n-\t   const size_type __off = __s - _M_data();\n+\t   size_type __off = __s - _M_data();\n+\t   __left ? __off : (__off += __n2 - __n1);\n \t   _M_mutate(__pos, __n1, __n2);\n-\t   if (__left)\n-\t     traits_type::copy(_M_data() + __pos,\n-\t\t\t       _M_data() + __off, __n2);\n-\t   else\n-\t     traits_type::copy(_M_data() + __pos,\n-\t\t\t       _M_data() + __off + __n2 - __n1, __n2);\n+\t   _M_copy(_M_data() + __pos, _M_data() + __off, __n2);\n \t   return *this;\n \t }\n        else\n@@ -396,19 +412,19 @@ namespace std\n \t  _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);\n \n \t  if (__pos)\n-\t    traits_type::copy(__r->_M_refdata(), _M_data(), __pos);\n+\t    _M_copy(__r->_M_refdata(), _M_data(), __pos);\n \t  if (__how_much)\n-\t    traits_type::copy(__r->_M_refdata() + __pos + __len2,\n-\t\t\t      _M_data() + __pos + __len1, __how_much);\n+\t    _M_copy(__r->_M_refdata() + __pos + __len2,\n+\t\t    _M_data() + __pos + __len1, __how_much);\n \n \t  _M_rep()->_M_dispose(__a);\n \t  _M_data(__r->_M_refdata());\n \t}\n       else if (__how_much && __len1 != __len2)\n \t{\n-\t  // Work in-place\n-\t  traits_type::move(_M_data() + __pos + __len2,\n-\t\t\t    _M_data() + __pos + __len1, __how_much);\n+\t  // Work in-place.\n+\t  _M_move(_M_data() + __pos + __len2,\n+\t\t  _M_data() + __pos + __len1, __how_much);\n \t}\n       _M_rep()->_M_set_length_and_sharable(__new_size);\n     }\n@@ -420,8 +436,6 @@ namespace std\n     {\n       if (__res != this->capacity() || _M_rep()->_M_is_shared())\n         {\n-\t  if (__res > this->max_size())\n-\t    __throw_length_error(__N(\"basic_string::reserve\"));\n \t  // Make sure we don't shrink below the current size\n \t  if (__res < this->size())\n \t    __res = this->size();\n@@ -539,7 +553,7 @@ namespace std\n       _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,\n \t\t\t\t  __alloc);\n       if (this->_M_length)\n-\ttraits_type::copy(__r->_M_refdata(), _M_refdata(), this->_M_length);\n+\t_M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);\n \n       __r->_M_set_length_and_sharable(this->_M_length);\n       return __r->_M_refdata();\n@@ -550,9 +564,8 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     resize(size_type __n, _CharT __c)\n     {\n-      if (__n > max_size())\n-\t__throw_length_error(__N(\"basic_string::resize\"));\n       const size_type __size = this->size();\n+      _M_check_length(__size, __n, \"basic_string::resize\");\n       if (__size < __n)\n \tthis->append(__n - __size, __c);\n       else if (__n < __size)\n@@ -569,57 +582,11 @@ namespace std\n       {\n \tconst basic_string __s(__k1, __k2);\n \tconst size_type __n1 = __i2 - __i1;\n-\tif (this->max_size() - (this->size() - __n1) < __s.size())\n-\t  __throw_length_error(__N(\"basic_string::_M_replace_dispatch\"));\n+\t_M_check_length(__n1, __s.size(), \"basic_string::_M_replace_dispatch\");\n \treturn _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),\n \t\t\t       __s.size());\n       }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>&\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    append(const basic_string& __str)\n-    {\n-      // Iff appending itself, string needs to pre-reserve the\n-      // correct size so that _M_mutate does not clobber the\n-      // pointer __str._M_data() formed here.\n-      const size_type __size = __str.size();\n-      const size_type __len = __size + this->size();\n-      if (__len > this->capacity())\n-\tthis->reserve(__len);\n-      return _M_replace_safe(this->size(), size_type(0), __str._M_data(),\n-\t\t\t     __str.size());\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>&\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    append(const basic_string& __str, size_type __pos, size_type __n)\n-    {\n-      // Iff appending itself, string needs to pre-reserve the\n-      // correct size so that _M_mutate does not clobber the\n-      // pointer __str._M_data() formed here.\n-      __str._M_check(__pos, \"basic_string::append\");\n-      __n = __str._M_limit(__pos, __n);\n-      const size_type __len = __n + this->size();\n-      if (__len > this->capacity())\n-\tthis->reserve(__len);\n-      return _M_replace_safe(this->size(), size_type(0), __str._M_data()\n-\t\t\t     + __pos, __n);\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>&\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    append(const _CharT* __s, size_type __n)\n-    {\n-      __glibcxx_requires_string_len(__s, __n);\n-      const size_type __len = __n + this->size();\n-      if (__len > this->capacity())\n-\tthis->reserve(__len);\n-      return _M_replace_safe(this->size(), size_type(0), __s, __n);\n-    }\n-\n+ \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>\n     operator+(const _CharT* __lhs,\n@@ -659,7 +626,7 @@ namespace std\n       __n = _M_limit(__pos, __n);\n       __glibcxx_requires_string_len(__s, __n);\n       if (__n)\n-\ttraits_type::copy(__s, _M_data() + __pos, __n);\n+\t_M_copy(__s, _M_data() + __pos, __n);\n       // 21.3.5.7 par 3: do not append null.  (good.)\n       return __n;\n     }"}, {"sha": "cf131ac109c51c09f563f19237a65adb4f4abaf4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F1.cc?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -18,7 +18,7 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 21.3.5.3 basic_string::assign\n+// 21.3.5.2 basic_string::append\n \n #include <string>\n #include <stdexcept>"}, {"sha": "d381e2a03c64924b7fd16bec37b607d04448bb51", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/char/2.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F2.cc?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -0,0 +1,67 @@\n+// 2004-25-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// append(const _CharT* __s, size_type __n)\n+// append(const _CharT* __s)\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std;\n+ \n+  string one; \n+  string two;\n+  string three;\n+  const char * source = \"Written in your eyes\";\n+\n+  one.append(source);\n+  VERIFY( one == \"Written in your eyes\" );\n+\n+  two.append(source, 20);\n+  VERIFY( two == \"Written in your eyes\" );\n+\n+  three.append(source, 7);\n+  VERIFY( three == \"Written\" );\n+  \n+  three.clear();\n+  three.append(source + 8, 2);\n+  VERIFY( three == \"in\" );\n+\n+  one.append(one.c_str(), 20);\n+  VERIFY( one == \"Written in your eyesWritten in your eyes\" );\n+\n+  two.append(two.c_str() + 16, 4);\n+  VERIFY( two == \"Written in your eyeseyes\" );\n+\n+  two.append(two.c_str(), 3);\n+  VERIFY( two == \"Written in your eyeseyesWri\" );\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "f45943d49bc9aa6e1a74888e3e75545d68ab3920", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/char/3.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F3.cc?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -0,0 +1,56 @@\n+// 2004-25-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// Upon reallocation (basic_string::reserve) we were copying from\n+// deallocated memory.\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std;\n+ \n+  const char * source = \"Kesto\";\n+\n+  for (unsigned i = 0; i < 10; ++i)\n+    {\n+      string one(source);\n+      string two(source);\n+      for (unsigned j = 0; j < 18; ++j)\n+\t{\n+\t  VERIFY( one == two );\n+\t  one.append(one);\n+\t  one += 'x';\n+\t  two.append(two.c_str(), two.size());\n+\t  two += 'x';\n+\t}\n+    }\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "6eb37e014cc0fe0fd276f3af8d38943c5f61d3cf", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F1.cc?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -18,7 +18,7 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 21.3.5.3 basic_string::assign\n+// 21.3.5.2 basic_string::append\n \n #include <string>\n #include <stdexcept>"}, {"sha": "8af018b40f274f06c8de721359885022033b987f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/wchar_t/2.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F2.cc?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -0,0 +1,67 @@\n+// 2004-25-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// append(const _CharT* __s, size_type __n)\n+// append(const _CharT* __s)\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std;\n+ \n+  wstring one; \n+  wstring two;\n+  wstring three;\n+  const wchar_t * source = L\"Written in your eyes\";\n+\n+  one.append(source);\n+  VERIFY( one == L\"Written in your eyes\" );\n+\n+  two.append(source, 20);\n+  VERIFY( two == L\"Written in your eyes\" );\n+\n+  three.append(source, 7);\n+  VERIFY( three == L\"Written\" );\n+  \n+  three.clear();\n+  three.append(source + 8, 2);\n+  VERIFY( three == L\"in\" );\n+\n+  one.append(one.c_str(), 20);\n+  VERIFY( one == L\"Written in your eyesWritten in your eyes\" );\n+\n+  two.append(two.c_str() + 16, 4);\n+  VERIFY( two == L\"Written in your eyeseyes\" );\n+\n+  two.append(two.c_str(), 3);\n+  VERIFY( two == L\"Written in your eyeseyesWri\" );\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "8ebaa6513ba8b743bc0f5d3eed94c9ebd4b90a03", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/wchar_t/3.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F3.cc?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -0,0 +1,56 @@\n+// 2004-25-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// Upon reallocation (basic_string::reserve) we were copying from\n+// deallocated memory.\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std;\n+ \n+  const wchar_t * source = L\"Kesto\";\n+\n+  for (unsigned i = 0; i < 10; ++i)\n+    {\n+      wstring one(source);\n+      wstring two(source);\n+      for (unsigned j = 0; j < 18; ++j)\n+\t{\n+\t  VERIFY( one == two );\n+\t  one.append(one);\n+\t  one += L'x';\n+\t  two.append(two.c_str(), two.size());\n+\t  two += L'x';\n+\t}\n+    }\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "232a46028bd9a7ae112ea5597cd99e69f817ba6d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/char/3.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F3.cc?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -1,6 +1,6 @@\n // 2001-10-30 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,7 +21,6 @@\n // 21.3.5 string modifiers\n \n #include <string>\n-#include <cstdio>\n #include <testsuite_hooks.h>\n \n // assign(const _CharT* __s, size_type __n)\n@@ -35,7 +34,6 @@ test03()\n  \n   string one; \n   string two;\n-  string three = two;\n   const char * source = \"Selling England by the pound\";\n \n   one.assign(source);"}, {"sha": "b656d82f390629379715edd6999ff5782259a21b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec61e852bc917b45c288e17fa4f1cb06145cf95e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F3.cc?ref=ec61e852bc917b45c288e17fa4f1cb06145cf95e", "patch": "@@ -1,6 +1,6 @@\n // 2001-10-30 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,7 +21,6 @@\n // 21.3.5 string modifiers\n \n #include <string>\n-#include <cstdio>\n #include <testsuite_hooks.h>\n \n // assign(const _CharT* __s, size_type __n)\n@@ -35,7 +34,6 @@ test03()\n  \n   wstring one; \n   wstring two;\n-  wstring three = two;\n   const wchar_t* source = L\"Selling England by the pound\";\n \n   one.assign(source);"}]}