{"sha": "c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiNzYzZmE5YTlhMGRiYTBjY2NlMTQ5M2M2NTUxNzlmZGFhN2QyMg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-07-28T05:13:10Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-07-28T05:13:10Z"}, "message": "tree-optimize.c (init_tree_optimization_passes): Schedule pass_may_alias right after the program is renamed into SSA.\n\n\n\t* tree-optimize.c (init_tree_optimization_passes): Schedule\n\tpass_may_alias right after the program is renamed into SSA.\n\t* tree-pass.h (PROP_alias): Define.\n\t* tree-outof-ssa.c (pass_del_ssa): Require PROP_alias.\n\t* tree-sra.c (pass_sra): Likewise.\n\t* tree-ssa-ccp.c (pass_ccp): Likewise.\n\t* tree-ssa-copyrename.c (pass_rename_ssa_ccp): Likewise.\n\t* tree-ssa-dce.c (pass_dce): Likewise.\n\t* tree-ssa-dom.c (pass_dominator): Likewise.\n\t* tree-ssa-dse.c (pass_dse): Likewise.\n\t* tree-ssa-forwprop.c (pass_forwprop): Likewise.\n\t* tree-ssa-loop-ch.c (pass_ch): Likewise.\n\t* tree-ssa-phiopt.c (pass_phiopt): Likewise.\n\t* tree-ssa-pre.c (pass_pre): Likewise.\n\t* tree-tailcall.c (pass_tail_recursion): Likewise.\n\t* tree-ssa.c (pass_redundant_phi): Likewise.\n\t* tree-ssa-alias.c (aliases_computed_p): Remove.\n\tUpdate all users.\n\t(init_alias_info): Do not mark all type tags for renaming\n\tunconditionally.\n\tClear may_aliases from every symbol.\n\t(setup_pointers_and_addressables): If a pointer has not been\n\tdereferenced and it had a type tag, clear it and mark the old\n\ttag for renaming.\n\n\ntestsuite/ChangeLog\n\n\t* gcc.dg/tree-ssa/20030714-2.c: Adjust number of expected\n\tconditionals.\n\t* gcc.dg/tree-ssa/20031022-1.c: Adjust number of expected\n\tloads.\n\t* gcc.dg/tree-ssa/ssa-dom-cse-1.c: Expect optimization in\n\tDOM1.\n\nFrom-SVN: r85255", "tree": {"sha": "a9aa14b2fab671abc299a440ee7b02eaae3b2aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9aa14b2fab671abc299a440ee7b02eaae3b2aeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/comments", "author": null, "committer": null, "parents": [{"sha": "58907cda076946ae56d334ab39637a474f621b95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58907cda076946ae56d334ab39637a474f621b95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58907cda076946ae56d334ab39637a474f621b95"}], "stats": {"total": 305, "additions": 158, "deletions": 147}, "files": [{"sha": "a3f30ff9d3d4b049d61d0f550da7e788a276a9c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -1,3 +1,30 @@\n+2004-07-28  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-optimize.c (init_tree_optimization_passes): Schedule\n+\tpass_may_alias right after the program is renamed into SSA.\n+\t* tree-pass.h (PROP_alias): Define.\n+\t* tree-outof-ssa.c (pass_del_ssa): Require PROP_alias.\n+\t* tree-sra.c (pass_sra): Likewise.\n+\t* tree-ssa-ccp.c (pass_ccp): Likewise.\n+\t* tree-ssa-copyrename.c (pass_rename_ssa_ccp): Likewise.\n+\t* tree-ssa-dce.c (pass_dce): Likewise.\n+\t* tree-ssa-dom.c (pass_dominator): Likewise.\n+\t* tree-ssa-dse.c (pass_dse): Likewise.\n+\t* tree-ssa-forwprop.c (pass_forwprop): Likewise.\n+\t* tree-ssa-loop-ch.c (pass_ch): Likewise.\n+\t* tree-ssa-phiopt.c (pass_phiopt): Likewise.\n+\t* tree-ssa-pre.c (pass_pre): Likewise.\n+\t* tree-tailcall.c (pass_tail_recursion): Likewise.\n+\t* tree-ssa.c (pass_redundant_phi): Likewise.\n+\t* tree-ssa-alias.c (aliases_computed_p): Remove.\n+\tUpdate all users.\n+\t(init_alias_info): Do not mark all type tags for renaming\n+\tunconditionally.\n+\tClear may_aliases from every symbol.\n+\t(setup_pointers_and_addressables): If a pointer has not been\n+\tdereferenced and it had a type tag, clear it and mark the old\n+\ttag for renaming.\n+\n 2004-07-28  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/16705"}, {"sha": "8b99613999f67a96302a002770694f62c300f3ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -1,3 +1,12 @@\n+2004-07-28  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/20030714-2.c: Adjust number of expected\n+\tconditionals.\n+\t* gcc.dg/tree-ssa/20031022-1.c: Adjust number of expected\n+\tloads.\n+\t* gcc.dg/tree-ssa/ssa-dom-cse-1.c: Expect optimization in\n+\tDOM1.\n+\n 2004-07-27  Andrew Pinski  <apinski@apple.com>\n \n \t* g++.dg/rtti/tinfo1.C: Correct the xfail."}, {"sha": "2c8a84a494d0486c5396cce4ab99fe7360e8ccb2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030714-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-2.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -32,8 +32,8 @@ get_alias_set (t)\n     }\n }\n \n-/* There should be exactly four IF conditionals if we thread jumps\n+/* There should be exactly three IF conditionals if we thread jumps\n    properly.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 4 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 3 \"dom3\"} } */\n  \n "}, {"sha": "d4f9b3c361172d20508601969312ffd30b9a7fb2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20031022-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031022-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031022-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031022-1.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -23,5 +23,5 @@ blah (int arf)\n   foo (e);\n }\n \n-/* There should be two loads from entry_exit_blocks[1].pred.  */\n+/* There should be one load from entry_exit_blocks[1].pred.  */\n /* { dg-final { scan-tree-dump-times \"entry_exit_blocks.1..pred\" 2 \"dom1\"} } */"}, {"sha": "52531009e67f93423308c6134924f1de4b9cdc79", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-cse-1.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-1.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom1-details\" } */\n int t(int a) __attribute__ ((const));\n void q (void);\n void\n@@ -11,6 +11,5 @@ threading(int a,int b)\n \t    q();\n \t}\n }\n-/* We should thread the jump twice and eliminate it.  Test this in\n-   DOM2, after aliases have been computed.  */\n-/* { dg-final { scan-tree-dump-times \"Replaced.* t \" 1 \"dom2\"} } */\n+/* We should thread the jump twice and eliminate it.  */\n+/* { dg-final { scan-tree-dump-times \"Replaced.* t \" 1 \"dom1\"} } */"}, {"sha": "d41bebc618a1bc762a2bb8f378ddf83b7af18e69", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -321,6 +321,7 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_referenced_vars);\n   NEXT_PASS (pass_build_pta);\n   NEXT_PASS (pass_build_ssa);\n+  NEXT_PASS (pass_may_alias);\n   NEXT_PASS (pass_rename_ssa_copies);\n   NEXT_PASS (pass_early_warn_uninitialized);\n   NEXT_PASS (pass_dce);"}, {"sha": "1fef266646df0dec82b18880e6f3f2d712465a3f", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -2213,7 +2213,7 @@ struct tree_opt_pass pass_del_ssa =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_SSA_TO_NORMAL,\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   /* ??? If TER is enabled, we also kill gimple.  */\n   PROP_ssa,\t\t\t\t/* properties_destroyed */"}, {"sha": "2bf63ee77b66c08c10d1230259cf404edd8f6de7", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -76,6 +76,7 @@ struct tree_opt_pass\n #define PROP_ssa\t\t(1 << 6)\n #define PROP_no_crit_edges      (1 << 7)\n #define PROP_rtl\t\t(1 << 8)\n+#define PROP_alias\t\t(1 << 9)\n \n #define PROP_trees \\\n   (PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh)"}, {"sha": "b3fa20c6c7767ef28a16c7656070399e3f47da10", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -2118,7 +2118,7 @@ struct tree_opt_pass pass_sra =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_SRA,\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "94ccd800929aecdda8c822f98d6ed732ddc754cd", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 63, "deletions": 60, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -175,13 +175,6 @@ bitmap call_clobbered_vars;\n    variable).  */\n bitmap addressable_vars;\n \n-/* 'true' after aliases have been computed (see compute_may_aliases).  This\n-   is used by get_stmt_operands and its helpers to determine what to do\n-   when scanning an operand for a variable that may be aliased.  If\n-   may-alias information is still not available, the statement is marked as\n-   having volatile operands.  */\n-bool aliases_computed_p;\n-\n /* When the program has too many call-clobbered variables and call-sites,\n    this variable is used to represent the clobbering effects of function\n    calls.  In these cases, all the call clobbered variables in the program\n@@ -350,9 +343,6 @@ compute_may_aliases (void)\n \n   /* Deallocate memory used by aliasing data structures.  */\n   delete_alias_info (ai);\n-\n-  /* Indicate that may-alias information is now available.  */\n-  aliases_computed_p = true;\n }\n \n struct tree_opt_pass pass_may_alias = \n@@ -365,7 +355,7 @@ struct tree_opt_pass pass_may_alias =\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_MAY_ALIAS,\t\t\t/* tv_id */\n   PROP_cfg | PROP_ssa | PROP_pta,\t/* properties_required */\n-  0,\t\t\t\t\t/* properties_provided */\n+  PROP_alias,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_rename_vars\n@@ -379,6 +369,7 @@ static struct alias_info *\n init_alias_info (void)\n {\n   struct alias_info *ai;\n+  static bool aliases_computed_p = false;\n \n   ai = xcalloc (1, sizeof (struct alias_info));\n   ai->ssa_names_visited = BITMAP_XMALLOC ();\n@@ -417,14 +408,8 @@ init_alias_info (void)\n       for (i = 0; i < num_referenced_vars; i++)\n \t{\n \t  var_ann_t ann = var_ann (referenced_var (i));\n-\n \t  ann->is_alias_tag = 0;\n-\t  if (ann->type_mem_tag)\n-\t    {\n-\t      var_ann_t tag_ann = var_ann (ann->type_mem_tag);\n-\t      tag_ann->may_aliases = NULL;\n-\t      bitmap_set_bit (vars_to_rename, tag_ann->uid);\n-\t    }\n+\t  ann->may_aliases = NULL;\n \t}\n \n       /* Clear flow-sensitive points-to information from each SSA name.  */\n@@ -450,12 +435,13 @@ init_alias_info (void)\n \t      pi->is_dereferenced = 0;\n \t      if (pi->pt_vars)\n \t\tbitmap_clear (pi->pt_vars);\n-\t      if (pi->name_mem_tag)\n-\t\tvar_ann (pi->name_mem_tag)->may_aliases = NULL;\n \t    }\n \t}\n     }\n \n+  /* Next time, we will need to reset alias information.  */\n+  aliases_computed_p = true;\n+\n   return ai;\n }\n \n@@ -1375,47 +1361,64 @@ setup_pointers_and_addressables (struct alias_info *ai)\n \n       /* Add pointer variables that have been dereferenced to the POINTERS\n          array and create a type memory tag for them.  */\n-      if (POINTER_TYPE_P (TREE_TYPE (var))\n-\t  && (bitmap_bit_p (ai->dereferenced_ptrs_store, v_ann->uid)\n-\t      || bitmap_bit_p (ai->dereferenced_ptrs_load, v_ann->uid)))\n+      if (POINTER_TYPE_P (TREE_TYPE (var)))\n \t{\n-\t  tree tag;\n-\t  var_ann_t t_ann;\n-\n-\t  /* If pointer VAR still doesn't have a memory tag associated\n-\t     with it, create it now or re-use an existing one.  */\n-\t  tag = get_tmt_for (var, ai);\n-\t  t_ann = var_ann (tag);\n-\n-\t  /* The type tag will need to be renamed into SSA afterwards.\n-\t     Note that we cannot do this inside get_tmt_for because\n-\t     aliasing may run multiple times and we only create type\n-\t     tags the first time.  */\n-\t  bitmap_set_bit (vars_to_rename, t_ann->uid);\n-\n-\t  /* Associate the tag with pointer VAR.  */\n-\t  v_ann->type_mem_tag = tag;\n-\n-\t  /* If pointer VAR has been used in a store operation, then its\n-\t     memory tag must be marked as written-to.  */\n-\t  if (bitmap_bit_p (ai->dereferenced_ptrs_store, v_ann->uid))\n-\t    bitmap_set_bit (ai->written_vars, t_ann->uid);\n-\n-\t  /* If pointer VAR is a global variable or a PARM_DECL, then its\n-\t     memory tag should be considered a global variable.  */\n-\t  if (TREE_CODE (var) == PARM_DECL || needs_to_live_in_memory (var))\n-\t    mark_call_clobbered (tag);\n-\n-\t  /* All the dereferences of pointer VAR count as references of\n-\t     TAG.  Since TAG can be associated with several pointers, add\n-\t     the dereferences of VAR to the TAG.  We may need to grow\n-\t     AI->NUM_REFERENCES because we have been adding name and\n-\t     type tags.  */\n-\t  if (t_ann->uid >= VARRAY_SIZE (ai->num_references))\n-\t    VARRAY_GROW (ai->num_references, t_ann->uid + 10);\n-\n-\t  VARRAY_UINT (ai->num_references, t_ann->uid)\n-\t      += VARRAY_UINT (ai->num_references, v_ann->uid);\n+\t  if ((bitmap_bit_p (ai->dereferenced_ptrs_store, v_ann->uid)\n+\t\t|| bitmap_bit_p (ai->dereferenced_ptrs_load, v_ann->uid)))\n+\t    {\n+\t      tree tag;\n+\t      var_ann_t t_ann;\n+\n+\t      /* If pointer VAR still doesn't have a memory tag\n+\t\t associated with it, create it now or re-use an\n+\t\t existing one.  */\n+\t      tag = get_tmt_for (var, ai);\n+\t      t_ann = var_ann (tag);\n+\n+\t      /* The type tag will need to be renamed into SSA\n+\t\t afterwards. Note that we cannot do this inside\n+\t\t get_tmt_for because aliasing may run multiple times\n+\t\t and we only create type tags the first time.  */\n+\t      bitmap_set_bit (vars_to_rename, t_ann->uid);\n+\n+\t      /* Associate the tag with pointer VAR.  */\n+\t      v_ann->type_mem_tag = tag;\n+\n+\t      /* If pointer VAR has been used in a store operation,\n+\t\t then its memory tag must be marked as written-to.  */\n+\t      if (bitmap_bit_p (ai->dereferenced_ptrs_store, v_ann->uid))\n+\t\tbitmap_set_bit (ai->written_vars, t_ann->uid);\n+\n+\t      /* If pointer VAR is a global variable or a PARM_DECL,\n+\t\t then its memory tag should be considered a global\n+\t\t variable.  */\n+\t      if (TREE_CODE (var) == PARM_DECL || needs_to_live_in_memory (var))\n+\t\tmark_call_clobbered (tag);\n+\n+\t      /* All the dereferences of pointer VAR count as\n+\t\t references of TAG.  Since TAG can be associated with\n+\t\t several pointers, add the dereferences of VAR to the\n+\t\t TAG.  We may need to grow AI->NUM_REFERENCES because\n+\t\t we have been adding name and type tags.  */\n+\t      if (t_ann->uid >= VARRAY_SIZE (ai->num_references))\n+\t\tVARRAY_GROW (ai->num_references, t_ann->uid + 10);\n+\n+\t      VARRAY_UINT (ai->num_references, t_ann->uid)\n+\t\t+= VARRAY_UINT (ai->num_references, v_ann->uid);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* The pointer has not been dereferenced.  If it had a\n+\t\t type memory tag, remove it and mark the old tag for\n+\t\t renaming to remove it out of the IL.  */\n+\t      var_ann_t ann = var_ann (var);\n+\t      tree tag = ann->type_mem_tag;\n+\t      if (tag)\n+\t\t{\n+\t\t  bitmap_set_bit (vars_to_rename, var_ann (tag)->uid);\n+\t\t  ann->type_mem_tag = NULL_TREE;\n+\t\t}\n+\t    }\n \t}\n     }\n "}, {"sha": "82479f052e69981bc47f3884c721bbdaff3db52e", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -245,7 +245,7 @@ struct tree_opt_pass pass_ccp =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_CCP,\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n@@ -2704,7 +2704,7 @@ struct tree_opt_pass pass_fold_builtins =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   0,\t\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "2fd87e2214b42ec46d7bea869578bb8b15ae0236", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -391,7 +391,7 @@ struct tree_opt_pass pass_rename_ssa_copies =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_COPY_RENAME,\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */ "}, {"sha": "c94a2f6c6d67607fa5ae5eed4131cf189abd826d", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -908,7 +908,7 @@ struct tree_opt_pass pass_dce =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_DCE,\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n@@ -924,7 +924,7 @@ struct tree_opt_pass pass_cd_dce =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_CD_DCE,\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "036706f9f37a78f149f561270c267b07d907d4e7", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -692,7 +692,7 @@ struct tree_opt_pass pass_dominator =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_SSA_DOMINATOR_OPTS,\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "26aae0cb143cbf2382708f82930179a5c848e8fe", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -437,7 +437,8 @@ struct tree_opt_pass pass_dse = {\n   NULL,\t\t\t\t/* next */\n   0,\t\t\t\t/* static_pass_number */\n   TV_TREE_DSE,\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa\n+    | PROP_alias,\t\t/* properties_required */\n   0,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */"}, {"sha": "2cb3b9bd20b58791c91a77d14bf55bd6f12b0caa", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -517,7 +517,8 @@ struct tree_opt_pass pass_forwprop = {\n   NULL,\t\t\t\t/* next */\n   0,\t\t\t\t/* static_pass_number */\n   TV_TREE_FORWPROP,\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa\n+    | PROP_alias,\t\t/* properties_required */\n   0,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */"}, {"sha": "ddb2438bae7d649b19e448063fe729a232952f2e", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -340,7 +340,7 @@ struct tree_opt_pass pass_ch =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_CH,\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "a9e864ed8c1c018f17483288134a6f649199e700", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 29, "deletions": 56, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -1137,13 +1137,6 @@ get_asm_expr_operands (tree stmt, voperands_t prev_vops)\n \t      add_stmt_operand (&var, stmt, opf_is_def, prev_vops);\n \t    });\n \n-\t/* If we don't have call-clobbered nor addressable vars and we\n-\t   still have not computed aliasing information, just mark the\n-\t   statement as having volatile operands.  If the alias pass\n-\t   finds some, we will add them at that point.  */\n-\tif (!aliases_computed_p)\n-\t  stmt_ann (stmt)->has_volatile_ops = true;\n-\n \tbreak;\n       }\n }\n@@ -1159,53 +1152,42 @@ get_indirect_ref_operands (tree stmt, tree expr, int flags,\n \n   if (SSA_VAR_P (ptr))\n     {\n-      if (!aliases_computed_p)\n+      struct ptr_info_def *pi = NULL;\n+\n+      /* If PTR has flow-sensitive points-to information, use it.  */\n+      if (TREE_CODE (ptr) == SSA_NAME\n+\t  && (pi = SSA_NAME_PTR_INFO (ptr)) != NULL\n+\t  && pi->name_mem_tag)\n \t{\n-\t  /* If the pointer does not have a memory tag and aliases have not\n-\t     been computed yet, mark the statement as having volatile\n-\t     operands to prevent DOM from entering it in equivalence tables\n-\t     and DCE from killing it.  */\n-\t  stmt_ann (stmt)->has_volatile_ops = true;\n+\t  /* PTR has its own memory tag.  Use it.  */\n+\t  add_stmt_operand (&pi->name_mem_tag, stmt, flags, prev_vops);\n \t}\n       else\n \t{\n-\t  struct ptr_info_def *pi = NULL;\n-\n-\t  /* If we have computed aliasing already, check if PTR has\n-\t     flow-sensitive points-to information.  */\n-\t  if (TREE_CODE (ptr) == SSA_NAME\n-\t      && (pi = SSA_NAME_PTR_INFO (ptr)) != NULL\n-\t      && pi->name_mem_tag)\n+\t  /* If PTR is not an SSA_NAME or it doesn't have a name\n+\t     tag, use its type memory tag.  */\n+\t  var_ann_t ann;\n+\n+\t  /* If we are emitting debugging dumps, display a warning if\n+\t     PTR is an SSA_NAME with no flow-sensitive alias\n+\t     information.  That means that we may need to compute\n+\t     aliasing again.  */\n+\t  if (dump_file\n+\t      && TREE_CODE (ptr) == SSA_NAME\n+\t      && pi == NULL)\n \t    {\n-\t      /* PTR has its own memory tag.  Use it.  */\n-\t      add_stmt_operand (&pi->name_mem_tag, stmt, flags, prev_vops);\n+\t      fprintf (dump_file,\n+\t\t  \"NOTE: no flow-sensitive alias info for \");\n+\t      print_generic_expr (dump_file, ptr, dump_flags);\n+\t      fprintf (dump_file, \" in \");\n+\t      print_generic_stmt (dump_file, stmt, dump_flags);\n \t    }\n-\t  else\n-\t    {\n-\t      /* If PTR is not an SSA_NAME or it doesn't have a name\n-\t\t tag, use its type memory tag.  */\n-\t      var_ann_t ann;\n-\n-\t      /* If we are emitting debugging dumps, display a warning if\n-\t\t PTR is an SSA_NAME with no flow-sensitive alias\n-\t\t information.  That means that we may need to compute\n-\t\t aliasing again.  */\n-\t      if (dump_file\n-\t\t  && TREE_CODE (ptr) == SSA_NAME\n-\t\t  && pi == NULL)\n-\t\t{\n-\t\t  fprintf (dump_file,\n-\t\t\t   \"NOTE: no flow-sensitive alias info for \");\n-\t\t  print_generic_expr (dump_file, ptr, dump_flags);\n-\t\t  fprintf (dump_file, \" in \");\n-\t\t  print_generic_stmt (dump_file, stmt, dump_flags);\n-\t\t}\n \n-\t      if (TREE_CODE (ptr) == SSA_NAME)\n-\t\tptr = SSA_NAME_VAR (ptr);\n-\t      ann = var_ann (ptr);\n-\t      add_stmt_operand (&ann->type_mem_tag, stmt, flags, prev_vops);\n-\t    }\n+\t  if (TREE_CODE (ptr) == SSA_NAME)\n+\t    ptr = SSA_NAME_VAR (ptr);\n+\t  ann = var_ann (ptr);\n+\t  if (ann->type_mem_tag)\n+\t    add_stmt_operand (&ann->type_mem_tag, stmt, flags, prev_vops);\n \t}\n     }\n \n@@ -1272,8 +1254,6 @@ get_call_expr_operands (tree stmt, tree expr, voperands_t prev_vops)\n       else if (!(call_flags & (ECF_CONST | ECF_NORETURN)))\n \tadd_call_read_ops (stmt, prev_vops);\n     }\n-  else if (!aliases_computed_p)\n-    stmt_ann (stmt)->has_volatile_ops = true;\n }\n \n \n@@ -1348,13 +1328,6 @@ add_stmt_operand (tree *var_p, tree stmt, int flags, voperands_t prev_vops)\n \n       aliases = v_ann->may_aliases;\n \n-      /* If alias information hasn't been computed yet, then\n-\t addressable variables will not be an alias tag nor will they\n-\t have aliases.  In this case, mark the statement as having\n-\t volatile operands.  */\n-      if (!aliases_computed_p && may_be_aliased (var))\n-\ts_ann->has_volatile_ops = true;\n-\n       if (aliases == NULL)\n \t{\n \t  /* The variable is not aliased or it is an alias tag.  */"}, {"sha": "ee48b25b2145ac263f373f91014f3f8fd71d508a", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -669,7 +669,7 @@ struct tree_opt_pass pass_phiopt =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_PHIOPT,\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "95ee573aa1a47483a1f23070f9816ee54798d2df", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -2076,7 +2076,8 @@ struct tree_opt_pass pass_pre =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_PRE,\t\t\t\t/* tv_id */\n-  PROP_no_crit_edges | PROP_cfg | PROP_ssa,/* properties_required */\n+  PROP_no_crit_edges | PROP_cfg\n+    | PROP_ssa | PROP_alias,\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n@@ -2107,7 +2108,7 @@ struct tree_opt_pass pass_fre =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_FRE,\t\t\t\t/* tv_id */\n-  PROP_no_crit_edges | PROP_cfg | PROP_ssa,/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "52df86937e00ae27a75684eb5fdbe5f707a2c39b", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -505,11 +505,8 @@ verify_flow_sensitive_alias_info (void)\n static void\n verify_alias_info (void)\n {\n-  if (aliases_computed_p)\n-    {\n-      verify_flow_sensitive_alias_info ();\n-      verify_flow_insensitive_alias_info ();\n-    }\n+  verify_flow_sensitive_alias_info ();\n+  verify_flow_insensitive_alias_info ();\n }\n \n \n@@ -677,7 +674,6 @@ init_tree_ssa (void)\n   init_ssanames ();\n   init_phinodes ();\n   global_var = NULL_TREE;\n-  aliases_computed_p = false;\n }\n \n \n@@ -710,7 +706,6 @@ delete_tree_ssa (void)\n   global_var = NULL_TREE;\n   BITMAP_XFREE (call_clobbered_vars);\n   call_clobbered_vars = NULL;\n-  aliases_computed_p = false;\n   BITMAP_XFREE (addressable_vars);\n   addressable_vars = NULL;\n }\n@@ -1211,7 +1206,7 @@ struct tree_opt_pass pass_redundant_phi =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   0,\t\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "6599cbd09e2c30c2db875937807258608e481ff6", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b763fa9a9a0dba0ccce1493c655179fdaa7d22/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=c1b763fa9a9a0dba0ccce1493c655179fdaa7d22", "patch": "@@ -937,7 +937,7 @@ struct tree_opt_pass pass_tail_recursion =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   0,\t\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n@@ -953,7 +953,7 @@ struct tree_opt_pass pass_tail_calls =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   0,\t\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}]}