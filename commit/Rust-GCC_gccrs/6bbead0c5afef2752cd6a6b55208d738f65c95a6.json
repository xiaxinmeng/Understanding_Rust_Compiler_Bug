{"sha": "6bbead0c5afef2752cd6a6b55208d738f65c95a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiZWFkMGM1YWZlZjI3NTJjZDZhNmI1NTIwOGQ3MzhmNjVjOTVhNg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-10-09T11:31:14Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-10-09T11:31:14Z"}, "message": "[PR92036] Add 'libgomp.oacc-c-c++-common/data-firstprivate-1.c'\n\n\tlibgomp/\n\tPR middle-end/92036\n\t* testsuite/libgomp.oacc-c-c++-common/data-firstprivate-1.c: New\n\tfile.\n\nFrom-SVN: r276757", "tree": {"sha": "6fef583feddbf6699762aaa16de7375a966a6c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fef583feddbf6699762aaa16de7375a966a6c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bbead0c5afef2752cd6a6b55208d738f65c95a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbead0c5afef2752cd6a6b55208d738f65c95a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbead0c5afef2752cd6a6b55208d738f65c95a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbead0c5afef2752cd6a6b55208d738f65c95a6/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3423d768d880f6a9687c2ee0c2e44b8292d44ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3423d768d880f6a9687c2ee0c2e44b8292d44ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3423d768d880f6a9687c2ee0c2e44b8292d44ad"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "319a19118825298f17f429238b658fc7d202f31c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbead0c5afef2752cd6a6b55208d738f65c95a6/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbead0c5afef2752cd6a6b55208d738f65c95a6/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6bbead0c5afef2752cd6a6b55208d738f65c95a6", "patch": "@@ -1,3 +1,9 @@\n+2019-10-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/92036\n+\t* testsuite/libgomp.oacc-c-c++-common/data-firstprivate-1.c: New\n+\tfile.\n+\n 2019-10-09  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR testsuite/91884"}, {"sha": "8900a4e070da1d7ccc5b31427485e92e02e844d8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/data-firstprivate-1.c", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbead0c5afef2752cd6a6b55208d738f65c95a6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-firstprivate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbead0c5afef2752cd6a6b55208d738f65c95a6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-firstprivate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-firstprivate-1.c?ref=6bbead0c5afef2752cd6a6b55208d738f65c95a6", "patch": "@@ -0,0 +1,165 @@\n+/* Test behavior of 'firstprivate' lexically vs. dynamically nested inside a\n+   'data' region.  */\n+\n+#include <stdlib.h>\n+\n+\n+#define VERIFY(x) \\\n+  do { \\\n+    if (!(x)) \\\n+      abort (); \\\n+  } while (0);\n+\n+\n+/* This is basically and extended version of 't2' from 'firstprivate-1.c'.  */\n+\n+int lexically_nested_val = 2;\n+\n+static void\n+lexically_nested ()\n+{\n+#pragma acc data \\\n+  copy (lexically_nested_val)\n+  {\n+    VERIFY (lexically_nested_val == 2);\n+\n+#pragma acc parallel \\\n+  present (lexically_nested_val)\n+    {\n+      VERIFY (lexically_nested_val == 2);\n+\n+      /* This updates the device copy, or shared variable.  */\n+      lexically_nested_val = 7;\n+    }\n+\n+#if ACC_MEM_SHARED\n+    VERIFY (lexically_nested_val == 7);\n+#else\n+    VERIFY (lexically_nested_val == 2);\n+#endif\n+\n+    /* This only updates the local/shared variable, but not the device\n+       copy.  */\n+    lexically_nested_val = 5;\n+\n+#pragma acc parallel \\\n+    firstprivate (lexically_nested_val)\n+      {\n+#if 1 /* Current behavior.  */\n+\t/* The 'firstprivate' copy is initialized from the device copy, or\n+\t   shared variable.  */\n+# if ACC_MEM_SHARED\n+\tVERIFY (lexically_nested_val == 5);\n+# else\n+\tVERIFY (lexically_nested_val == 7);\n+# endif\n+#else /* Expected behavior per PR92036.  */\n+\t/* The 'firstprivate' copy is initialized from the local thread.  */\n+\tVERIFY (lexically_nested_val == 5);\n+#endif\n+\n+\t/* This updates the 'firstprivate' copy only, but not the shared\n+\t   variable.  */\n+\tlexically_nested_val = 9;\n+      }\n+\n+    VERIFY (lexically_nested_val == 5);\n+  }\n+  /* If not shared, the device copy has now been copied back.  */\n+\n+#if ACC_MEM_SHARED\n+  VERIFY (lexically_nested_val == 5);\n+#else\n+  VERIFY (lexically_nested_val == 7);\n+#endif\n+}\n+\n+\n+int dynamically_nested_val = 2;\n+\n+/* Same as above, but compute construct 1 broken out, so no longer lexically\n+   nested inside 'data' region.  */\n+\n+static void\n+dynamically_nested_compute_1 ()\n+{\n+#pragma acc parallel \\\n+  present (dynamically_nested_val)\n+  {\n+    VERIFY (dynamically_nested_val == 2);\n+\n+    /* This updates the device copy, or shared variable.  */\n+    dynamically_nested_val = 7;\n+  }\n+}\n+\n+/* Same as above, but compute construct 2 broken out, so no longer lexically\n+   nested inside 'data' region.  */\n+\n+static void\n+dynamically_nested_compute_2 ()\n+{\n+#pragma acc parallel \\\n+  firstprivate (dynamically_nested_val)\n+    {\n+#if 1 /* Current behavior.  */\n+      /* The 'firstprivate' copy is initialized from the device copy, or shared\n+\t variable.  */\n+# if ACC_MEM_SHARED\n+      VERIFY (dynamically_nested_val == 5);\n+# else\n+      VERIFY (dynamically_nested_val == 7);\n+# endif\n+#else /* Expected behavior per PR92036.  */\n+      /* The 'firstprivate' copy is initialized from the local thread.  */\n+      VERIFY (dynamically_nested_val == 5);\n+#endif\n+\n+      /* This updates the 'firstprivate' copy only, but not the shared\n+\t variable.  */\n+      dynamically_nested_val = 9;\n+    }\n+}\n+\n+static void\n+dynamically_nested ()\n+{\n+#pragma acc data \\\n+  copy (dynamically_nested_val)\n+  {\n+    VERIFY (dynamically_nested_val == 2);\n+\n+    dynamically_nested_compute_1 ();\n+\n+#if ACC_MEM_SHARED\n+    VERIFY (dynamically_nested_val == 7);\n+#else\n+    VERIFY (dynamically_nested_val == 2);\n+#endif\n+\n+    /* This only updates the local/shared variable, but not the device\n+       copy.  */\n+    dynamically_nested_val = 5;\n+\n+    dynamically_nested_compute_2 ();\n+\n+    VERIFY (dynamically_nested_val == 5);\n+  }\n+  /* If not shared, the device copy has now been copied back.  */\n+\n+#if ACC_MEM_SHARED\n+  VERIFY (dynamically_nested_val == 5);\n+#else\n+  VERIFY (dynamically_nested_val == 7);\n+#endif\n+}\n+\n+\n+int\n+main()\n+{\n+  lexically_nested ();\n+  dynamically_nested ();\n+\n+  return 0;\n+}"}]}