{"sha": "6babedbbaee5a6e6acaf148f7b963bb813fe0041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhYmVkYmJhZWU1YTZlNmFjYWYxNDhmN2I5NjNiYjgxM2ZlMDA0MQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-03-15T06:17:54Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:29Z"}, "message": "AVX512FP16: Add vcvttsh2si/vcvttsh2usi.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm_cvttsh_i32):\n\tNew intrinsic.\n\t(_mm_cvttsh_u32): Likewise.\n\t(_mm_cvtt_roundsh_i32): Likewise.\n\t(_mm_cvtt_roundsh_u32): Likewise.\n\t(_mm_cvttsh_i64): Likewise.\n\t(_mm_cvttsh_u64): Likewise.\n\t(_mm_cvtt_roundsh_i64): Likewise.\n\t(_mm_cvtt_roundsh_u64): Likewise.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/sse.md\n\t(avx512fp16_fix<fixunssuffix>_trunc<mode>2<round_saeonly_name>):\n\tNew.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vcvttsh2si-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vcvttsh2si-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttsh2si64-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttsh2si64-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttsh2usi-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttsh2usi-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttsh2usi64-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvttsh2usi64-1b.c: Ditto.\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "8fafec37e548d0eab0d3dd0a35a8d21f4f7b0541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fafec37e548d0eab0d3dd0a35a8d21f4f7b0541"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6babedbbaee5a6e6acaf148f7b963bb813fe0041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6babedbbaee5a6e6acaf148f7b963bb813fe0041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6babedbbaee5a6e6acaf148f7b963bb813fe0041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6babedbbaee5a6e6acaf148f7b963bb813fe0041/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8691efe4007d4b64429c09b7816429d48a9b8abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8691efe4007d4b64429c09b7816429d48a9b8abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8691efe4007d4b64429c09b7816429d48a9b8abc"}], "stats": {"total": 404, "additions": 404, "deletions": 0}, "files": [{"sha": "d5fe49b9b7c2368abda9be6675504dd605765941", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -4154,6 +4154,87 @@ _mm_cvt_roundsh_u64 (__m128h __A, const int __R)\n #endif /* __OPTIMIZE__ */\n #endif /* __x86_64__ */\n \n+/* Intrinsics vcvttsh2si, vcvttsh2us.  */\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttsh_i32 (__m128h __A)\n+{\n+  return (int)\n+    __builtin_ia32_vcvttsh2si32_round (__A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline unsigned\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttsh_u32 (__m128h __A)\n+{\n+  return (int)\n+    __builtin_ia32_vcvttsh2usi32_round (__A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtt_roundsh_i32 (__m128h __A, const int __R)\n+{\n+  return (int) __builtin_ia32_vcvttsh2si32_round (__A, __R);\n+}\n+\n+extern __inline unsigned\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtt_roundsh_u32 (__m128h __A, const int __R)\n+{\n+  return (int) __builtin_ia32_vcvttsh2usi32_round (__A, __R);\n+}\n+\n+#else\n+#define _mm_cvtt_roundsh_i32(A, B)\t\t\\\n+  ((int)__builtin_ia32_vcvttsh2si32_round ((A), (B)))\n+#define _mm_cvtt_roundsh_u32(A, B)\t\t\\\n+  ((int)__builtin_ia32_vcvttsh2usi32_round ((A), (B)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+#ifdef __x86_64__\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttsh_i64 (__m128h __A)\n+{\n+  return (long long)\n+    __builtin_ia32_vcvttsh2si64_round (__A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttsh_u64 (__m128h __A)\n+{\n+  return (long long)\n+    __builtin_ia32_vcvttsh2usi64_round (__A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtt_roundsh_i64 (__m128h __A, const int __R)\n+{\n+  return (long long) __builtin_ia32_vcvttsh2si64_round (__A, __R);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtt_roundsh_u64 (__m128h __A, const int __R)\n+{\n+  return (long long) __builtin_ia32_vcvttsh2usi64_round (__A, __R);\n+}\n+\n+#else\n+#define _mm_cvtt_roundsh_i64(A, B)\t\t\t\\\n+  ((long long)__builtin_ia32_vcvttsh2si64_round ((A), (B)))\n+#define _mm_cvtt_roundsh_u64(A, B)\t\t\t\\\n+  ((long long)__builtin_ia32_vcvttsh2usi64_round ((A), (B)))\n+\n+#endif /* __OPTIMIZE__ */\n+#endif /* __x86_64__ */\n+\n /* Intrinsics vcvtsi2sh, vcvtusi2sh.  */\n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "fb36707bf55bac16a2644da697b2472c136516b1", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -3116,6 +3116,10 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2si_round, \"__b\n BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2siq_round, \"__builtin_ia32_vcvtsh2si64_round\", IX86_BUILTIN_VCVTSH2SI64_ROUND, UNKNOWN, (int) INT64_FTYPE_V8HF_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2usi_round, \"__builtin_ia32_vcvtsh2usi32_round\", IX86_BUILTIN_VCVTSH2USI32_ROUND, UNKNOWN, (int) UINT_FTYPE_V8HF_INT)\n BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2usiq_round, \"__builtin_ia32_vcvtsh2usi64_round\", IX86_BUILTIN_VCVTSH2USI64_ROUND, UNKNOWN, (int) UINT64_FTYPE_V8HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncsi2_round, \"__builtin_ia32_vcvttsh2si32_round\", IX86_BUILTIN_VCVTTSH2SI32_ROUND, UNKNOWN, (int) INT_FTYPE_V8HF_INT)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncdi2_round, \"__builtin_ia32_vcvttsh2si64_round\", IX86_BUILTIN_VCVTTSH2SI64_ROUND, UNKNOWN, (int) INT64_FTYPE_V8HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncsi2_round, \"__builtin_ia32_vcvttsh2usi32_round\", IX86_BUILTIN_VCVTTSH2USI32_ROUND, UNKNOWN, (int) UINT_FTYPE_V8HF_INT)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncdi2_round, \"__builtin_ia32_vcvttsh2usi64_round\", IX86_BUILTIN_VCVTTSH2USI64_ROUND, UNKNOWN, (int) UINT64_FTYPE_V8HF_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsi2sh_round, \"__builtin_ia32_vcvtsi2sh32_round\", IX86_BUILTIN_VCVTSI2SH32_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT_INT)\n BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsi2shq_round, \"__builtin_ia32_vcvtsi2sh64_round\", IX86_BUILTIN_VCVTSI2SH64_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT64_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtusi2sh_round, \"__builtin_ia32_vcvtusi2sh32_round\", IX86_BUILTIN_VCVTUSI2SH32_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_UINT_INT)"}, {"sha": "fc606628b941e7ca23d59028a1fa30e1a79dfb26", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -5988,6 +5988,28 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512fp16_fix<fixunssuffix>_trunc<mode>2<round_saeonly_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(any_fix:SWI48\n+\t  (vec_select:HF\n+\t    (match_operand:V8HF 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_AVX512FP16\"\n+  \"%vcvttsh2<fixsuffix>si\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512fp16_fix<fixunssuffix>_trunc<mode>2_mem\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(any_fix:SWI48\n+\t  (match_operand:HF 1 \"memory_operand\" \"vm\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"%vcvttsh2<fixsuffix>si\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point conversion operations"}, {"sha": "65796841d9874072f682e5d1890be72c68463193", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -741,6 +741,10 @@\n #define __builtin_ia32_vcvtsh2si64_round(A, B) __builtin_ia32_vcvtsh2si64_round(A, 8)\n #define __builtin_ia32_vcvtsh2usi32_round(A, B) __builtin_ia32_vcvtsh2usi32_round(A, 8)\n #define __builtin_ia32_vcvtsh2usi64_round(A, B) __builtin_ia32_vcvtsh2usi64_round(A, 8)\n+#define __builtin_ia32_vcvttsh2si32_round(A, B) __builtin_ia32_vcvttsh2si32_round(A, 8)\n+#define __builtin_ia32_vcvttsh2si64_round(A, B) __builtin_ia32_vcvttsh2si64_round(A, 8)\n+#define __builtin_ia32_vcvttsh2usi32_round(A, B) __builtin_ia32_vcvttsh2usi32_round(A, 8)\n+#define __builtin_ia32_vcvttsh2usi64_round(A, B) __builtin_ia32_vcvttsh2usi64_round(A, 8)\n #define __builtin_ia32_vcvtsi2sh32_round(A, B, C) __builtin_ia32_vcvtsi2sh32_round(A, B, 8)\n #define __builtin_ia32_vcvtsi2sh64_round(A, B, C) __builtin_ia32_vcvtsi2sh64_round(A, B, 8)\n #define __builtin_ia32_vcvtusi2sh32_round(A, B, C) __builtin_ia32_vcvtusi2sh32_round(A, B, 8)"}, {"sha": "80d84fce1534d1b88f55e240081afa9a59ddddaa", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2si-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si-1a.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x1;\n+volatile int res1;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm_cvttsh_i32 (x1);\n+  res1 = _mm_cvtt_roundsh_i32 (x1, 8);\n+}"}, {"sha": "c5b0a64d5f0235bf96885cc5a0cf0c128345096b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2si-1b.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si-1b.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 2\n+\n+void NOINLINE\n+emulate_cvtph2_d(V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = dest->u32[i];\n+      }\n+    }\n+    else {\n+      v5.u32[i] = v1.f32[i];\n+\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_cvtph2_d(&exp, src1,  NET_MASK, 0);\n+  res.i32[0] = _mm_cvtt_roundsh_i32(src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvtt_roundsh_i32\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "76a9053ef897cd54d88839efed0d4ed77f2f86a8", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2si64-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si64-1a.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%rax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%rax\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x1;\n+volatile long long res2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res2 = _mm_cvttsh_i64 (x1);\n+  res2 = _mm_cvtt_roundsh_i64 (x1, 8);\n+}"}, {"sha": "4e0fe5bb6bfc6bb17f0ed73cef9a7be1f4fee183", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2si64-1b.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si64-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si64-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2si64-1b.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run { target { { ! ia32 } && avx512fp16 } } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 4\n+\n+void NOINLINE\n+emulate_cvtph2_q(V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u64[i] = 0;\n+      }\n+      else {\n+\tv5.u64[i] = dest->u64[i];\n+      }\n+    }\n+    else {\n+      v5.u64[i] = v1.f32[i];\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_cvtph2_q(&exp, src1,  NET_MASK, 0);\n+  res.s64[0] = _mm_cvtt_roundsh_i64(src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvtt_roundsh_i64\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "59564578a4d5fc1e2e05838f7a286dc08ddcffe4", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2usi-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi-1a.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%eax\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x1;\n+volatile unsigned int res1;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm_cvttsh_u32 (x1);\n+  res1 = _mm_cvtt_roundsh_u32 (x1, 8);\n+}"}, {"sha": "214e3e13db7aa7108ecff7d9833bc84a194c1cd9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2usi-1b.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi-1b.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 2\n+\n+void NOINLINE\n+emulate_cvtph2_d(V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = dest->u32[i];\n+      }\n+    }\n+    else {\n+      v5.u32[i] = v1.f32[i];\n+\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_cvtph2_d(&exp, src1,  NET_MASK, 0);\n+  res.u32[0] = _mm_cvtt_roundsh_i32(src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvtt_roundsh_u32\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "23e8e70a901c1b7363ac067ec4756716b1ca0b7e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2usi64-1a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi64-1a.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile  { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512fp16 -O2 \" } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%rax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%rax\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x1;\n+volatile unsigned long long res2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res2 = _mm_cvttsh_u64 (x1);\n+  res2 = _mm_cvtt_roundsh_u64 (x1, 8);\n+}"}, {"sha": "863fb6e167d71c8070462eb3f6b3b35f21d43ad9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvttsh2usi64-1b.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi64-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi64-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvttsh2usi64-1b.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run  { target { { ! ia32 } && avx512fp16 } } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 4\n+\n+void NOINLINE\n+emulate_cvtph2_q(V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.u64[i] = 0;\n+      }\n+      else {\n+\tv5.u64[i] = dest->u64[i];\n+      }\n+    }\n+    else {\n+      v5.u64[i] = v1.f32[i];\n+    }\n+  }\n+  *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+  \n+  init_src();\n+  emulate_cvtph2_q(&exp, src1,  NET_MASK, 0);\n+  res.u64[0] = _mm_cvtt_roundsh_i64(src1.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, 4, \"_mm_cvtt_roundsh_u64\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "d3bb6e1daa140f99376ad4291fda71241460ae2c", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -758,6 +758,10 @@\n #define __builtin_ia32_vcvtsh2si64_round(A, B) __builtin_ia32_vcvtsh2si64_round(A, 8)\n #define __builtin_ia32_vcvtsh2usi32_round(A, B) __builtin_ia32_vcvtsh2usi32_round(A, 8)\n #define __builtin_ia32_vcvtsh2usi64_round(A, B) __builtin_ia32_vcvtsh2usi64_round(A, 8)\n+#define __builtin_ia32_vcvttsh2si32_round(A, B) __builtin_ia32_vcvttsh2si32_round(A, 8)\n+#define __builtin_ia32_vcvttsh2si64_round(A, B) __builtin_ia32_vcvttsh2si64_round(A, 8)\n+#define __builtin_ia32_vcvttsh2usi32_round(A, B) __builtin_ia32_vcvttsh2usi32_round(A, 8)\n+#define __builtin_ia32_vcvttsh2usi64_round(A, B) __builtin_ia32_vcvttsh2usi64_round(A, 8)\n #define __builtin_ia32_vcvtsi2sh32_round(A, B, C) __builtin_ia32_vcvtsi2sh32_round(A, B, 8)\n #define __builtin_ia32_vcvtsi2sh64_round(A, B, C) __builtin_ia32_vcvtsi2sh64_round(A, B, 8)\n #define __builtin_ia32_vcvtusi2sh32_round(A, B, C) __builtin_ia32_vcvtusi2sh32_round(A, B, 8)"}, {"sha": "403f3af60678a8c0d63976a35766dcd96bdae957", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -698,9 +698,13 @@ test_1 (_mm512_cvt_roundepi64_ph, __m128h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu64_ph, __m128h, __m512i, 8)\n test_1 (_mm_cvt_roundsh_i32, int, __m128h, 8)\n test_1 (_mm_cvt_roundsh_u32, unsigned, __m128h, 8)\n+test_1 (_mm_cvtt_roundsh_i32, int, __m128h, 8)\n+test_1 (_mm_cvtt_roundsh_u32, unsigned, __m128h, 8)\n #ifdef __x86_64__\n test_1 (_mm_cvt_roundsh_i64, long long, __m128h, 8)\n test_1 (_mm_cvt_roundsh_u64, unsigned long long, __m128h, 8)\n+test_1 (_mm_cvtt_roundsh_i64, long long, __m128h, 8)\n+test_1 (_mm_cvtt_roundsh_u64, unsigned long long, __m128h, 8)\n test_2 (_mm_cvt_roundi64_sh, __m128h, __m128h, long long, 8)\n test_2 (_mm_cvt_roundu64_sh, __m128h, __m128h, unsigned long long, 8)\n #endif"}, {"sha": "b980ac3cddd0caa5b3aa361d9762a0304631eb28", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -803,9 +803,13 @@ test_1 (_mm512_cvt_roundepi64_ph, __m128h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu64_ph, __m128h, __m512i, 8)\n test_1 (_mm_cvt_roundsh_i32, int, __m128h, 8)\n test_1 (_mm_cvt_roundsh_u32, unsigned, __m128h, 8)\n+test_1 (_mm_cvtt_roundsh_i32, int, __m128h, 8)\n+test_1 (_mm_cvtt_roundsh_u32, unsigned, __m128h, 8)\n #ifdef __x86_64__\n test_1 (_mm_cvt_roundsh_i64, long long, __m128h, 8)\n test_1 (_mm_cvt_roundsh_u64, unsigned long long, __m128h, 8)\n+test_1 (_mm_cvtt_roundsh_i64, long long, __m128h, 8)\n+test_1 (_mm_cvtt_roundsh_u64, unsigned long long, __m128h, 8)\n test_2 (_mm_cvt_roundi64_sh, __m128h, __m128h, long long, 8)\n test_2 (_mm_cvt_roundu64_sh, __m128h, __m128h, unsigned long long, 8)\n #endif"}, {"sha": "16430344ed23d590e8cbd24bb15e28caf577d96c", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6babedbbaee5a6e6acaf148f7b963bb813fe0041/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=6babedbbaee5a6e6acaf148f7b963bb813fe0041", "patch": "@@ -759,6 +759,10 @@\n #define __builtin_ia32_vcvtsh2si64_round(A, B) __builtin_ia32_vcvtsh2si64_round(A, 8)\n #define __builtin_ia32_vcvtsh2usi32_round(A, B) __builtin_ia32_vcvtsh2usi32_round(A, 8)\n #define __builtin_ia32_vcvtsh2usi64_round(A, B) __builtin_ia32_vcvtsh2usi64_round(A, 8)\n+#define __builtin_ia32_vcvttsh2si32_round(A, B) __builtin_ia32_vcvttsh2si32_round(A, 8)\n+#define __builtin_ia32_vcvttsh2si64_round(A, B) __builtin_ia32_vcvttsh2si64_round(A, 8)\n+#define __builtin_ia32_vcvttsh2usi32_round(A, B) __builtin_ia32_vcvttsh2usi32_round(A, 8)\n+#define __builtin_ia32_vcvttsh2usi64_round(A, B) __builtin_ia32_vcvttsh2usi64_round(A, 8)\n #define __builtin_ia32_vcvtsi2sh32_round(A, B, C) __builtin_ia32_vcvtsi2sh32_round(A, B, 8)\n #define __builtin_ia32_vcvtsi2sh64_round(A, B, C) __builtin_ia32_vcvtsi2sh64_round(A, B, 8)\n #define __builtin_ia32_vcvtusi2sh32_round(A, B, C) __builtin_ia32_vcvtusi2sh32_round(A, B, 8)"}]}