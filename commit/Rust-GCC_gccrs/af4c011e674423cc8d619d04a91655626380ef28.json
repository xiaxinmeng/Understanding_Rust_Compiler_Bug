{"sha": "af4c011e674423cc8d619d04a91655626380ef28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0YzAxMWU2NzQ0MjNjYzhkNjE5ZDA0YTkxNjU1NjI2MzgwZWYyOA==", "commit": {"author": {"name": "Evgeny Stupachenko", "email": "evstupac@gmail.com", "date": "2014-11-11T16:07:52Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2014-11-11T16:07:52Z"}, "message": "tree-vect-data-refs.c (vect_shift_permute_load_chain): Extend shift permutations on power of 2 cases.\n\ngcc/\n\n        * tree-vect-data-refs.c (vect_shift_permute_load_chain): Extend shift\n\tpermutations on power of 2 cases.\n\ngcc/testsuites/\n\n\t* gcc.target/i386/pr52252-atom-1.c: New.\n\nFrom-SVN: r217359", "tree": {"sha": "fc6f48ec764fd8425cd1989602c9dbcb0df8b02d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc6f48ec764fd8425cd1989602c9dbcb0df8b02d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af4c011e674423cc8d619d04a91655626380ef28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4c011e674423cc8d619d04a91655626380ef28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4c011e674423cc8d619d04a91655626380ef28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4c011e674423cc8d619d04a91655626380ef28/comments", "author": {"login": "evstupac", "id": 38332307, "node_id": "MDQ6VXNlcjM4MzMyMzA3", "avatar_url": "https://avatars.githubusercontent.com/u/38332307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evstupac", "html_url": "https://github.com/evstupac", "followers_url": "https://api.github.com/users/evstupac/followers", "following_url": "https://api.github.com/users/evstupac/following{/other_user}", "gists_url": "https://api.github.com/users/evstupac/gists{/gist_id}", "starred_url": "https://api.github.com/users/evstupac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evstupac/subscriptions", "organizations_url": "https://api.github.com/users/evstupac/orgs", "repos_url": "https://api.github.com/users/evstupac/repos", "events_url": "https://api.github.com/users/evstupac/events{/privacy}", "received_events_url": "https://api.github.com/users/evstupac/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "febd3244c47ba81b5cc17151c324d5cc974e5ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febd3244c47ba81b5cc17151c324d5cc974e5ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/febd3244c47ba81b5cc17151c324d5cc974e5ca2"}], "stats": {"total": 95, "additions": 67, "deletions": 28}, "files": [{"sha": "6baafa066ebca364c3b9c5fc669567dcf24cb741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4c011e674423cc8d619d04a91655626380ef28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4c011e674423cc8d619d04a91655626380ef28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af4c011e674423cc8d619d04a91655626380ef28", "patch": "@@ -1,3 +1,8 @@\n+2014-11-11  Evgeny Stupachenko  <evstupac@gmail.com>\n+\n+        * tree-vect-data-refs.c (vect_shift_permute_load_chain): Extend shift\n+\tpermutations on power of 2 cases.\n+\n 2014-11-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.h (MACHMODE): Remove 'enum' keyword."}, {"sha": "3ffd69ae1fce393294f6c0331dcaf77b5c34985a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4c011e674423cc8d619d04a91655626380ef28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4c011e674423cc8d619d04a91655626380ef28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af4c011e674423cc8d619d04a91655626380ef28", "patch": "@@ -1,3 +1,7 @@\n+2014-11-11  Evgeny Stupachenko  <evstupac@gmail.com>\n+\n+\t* gcc.target/i386/pr52252-atom-1.c: New.\n+\n 2014-11-11  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/63622"}, {"sha": "1fbd258ac72464dacba95c2c4e459f6d303b8172", "filename": "gcc/testsuite/gcc.target/i386/pr52252-atom-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4c011e674423cc8d619d04a91655626380ef28/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr52252-atom-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4c011e674423cc8d619d04a91655626380ef28/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr52252-atom-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr52252-atom-1.c?ref=af4c011e674423cc8d619d04a91655626380ef28", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ssse3 } */\n+/* { dg-options \"-O2 -ftree-vectorize -mssse3 -mtune=slm\" } */\n+#define byte unsigned char\n+\n+void\n+pair_mul_sum(byte *in, byte *out, int size)\n+{\n+  int j;\n+  for(j = 0; j < size; j++)\n+    {\n+      byte a = in[0];\n+      byte b = in[1];\n+      byte c = in[2];\n+      byte d = in[3];\n+      out[0] = (byte)(a * b) + (byte)(b * c) + (byte)(c * d) + (byte)(d * a);\n+      in += 4;\n+      out += 1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"palignr\" } } */"}, {"sha": "d07885fd1438fac6119f7b437bf5e4daea2b2b08", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4c011e674423cc8d619d04a91655626380ef28/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4c011e674423cc8d619d04a91655626380ef28/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=af4c011e674423cc8d619d04a91655626380ef28", "patch": "@@ -5371,8 +5371,9 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n   memcpy (result_chain->address (), dr_chain.address (),\n \t  length * sizeof (tree));\n \n-  if (length == 2 && LOOP_VINFO_VECT_FACTOR (loop_vinfo) > 4)\n+  if (exact_log2 (length) != -1 && LOOP_VINFO_VECT_FACTOR (loop_vinfo) > 4)\n     {\n+      unsigned int j, log_length = exact_log2 (length);\n       for (i = 0; i < nelt / 2; ++i)\n \tsel[i] = i * 2;\n       for (i = 0; i < nelt / 2; ++i)\n@@ -5433,37 +5434,44 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n       select_mask = vect_gen_perm_mask (vectype, sel);\n       gcc_assert (select_mask != NULL);\n \n-      first_vect = dr_chain[0];\n-      second_vect = dr_chain[1];\n-\n-      data_ref = make_temp_ssa_name (vectype, NULL, \"vect_shuffle2\");\n-      perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n-\t\t\t\t\t\tfirst_vect, first_vect,\n-\t\t\t\t\t\tperm2_mask1);\n-      vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n-      vect[0] = data_ref;\n+      for (i = 0; i < log_length; i++)\n+\t{\n+\t  for (j = 0; j < length; j += 2)\n+\t    {\n+\t      first_vect = dr_chain[j];\n+\t      second_vect = dr_chain[j + 1];\n \n-      data_ref = make_temp_ssa_name (vectype, NULL, \"vect_shuffle2\");\n-      perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n-\t\t\t\t\t\tsecond_vect, second_vect,\n-\t\t\t\t\t\tperm2_mask2);\n-      vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n-      vect[1] = data_ref;\n+\t      data_ref = make_temp_ssa_name (vectype, NULL, \"vect_shuffle2\");\n+\t      perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n+\t\t\t\t\t\t\tfirst_vect, first_vect,\n+\t\t\t\t\t\t\tperm2_mask1);\n+\t      vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n+\t      vect[0] = data_ref;\n \n-      data_ref = make_temp_ssa_name (vectype, NULL, \"vect_shift\");\n-      perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n-\t\t\t\t\t\tvect[0], vect[1],\n-\t\t\t\t\t\tshift1_mask);\n-      vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n-      (*result_chain)[1] = data_ref;\n+\t      data_ref = make_temp_ssa_name (vectype, NULL, \"vect_shuffle2\");\n+\t      perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n+\t\t\t\t\t\t\tsecond_vect, second_vect,\n+\t\t\t\t\t\t\tperm2_mask2);\n+\t      vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n+\t      vect[1] = data_ref;\n \n-      data_ref = make_temp_ssa_name (vectype, NULL, \"vect_select\");\n-      perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n-\t\t\t\t\t\tvect[0], vect[1],\n-\t\t\t\t\t\tselect_mask);\n-      vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n-      (*result_chain)[0] = data_ref;\n+\t      data_ref = make_temp_ssa_name (vectype, NULL, \"vect_shift\");\n+\t      perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n+\t\t\t\t\t\t\tvect[0], vect[1],\n+\t\t\t\t\t\t\tshift1_mask);\n+\t      vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n+\t      (*result_chain)[j/2 + length/2] = data_ref;\n \n+\t      data_ref = make_temp_ssa_name (vectype, NULL, \"vect_select\");\n+\t      perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n+\t\t\t\t\t\t\tvect[0], vect[1],\n+\t\t\t\t\t\t\tselect_mask);\n+\t      vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n+\t      (*result_chain)[j/2] = data_ref;\n+\t    }\n+\t  memcpy (dr_chain.address (), result_chain->address (),\n+\t\t  length * sizeof (tree));\n+\t}\n       return true;\n     }\n   if (length == 3 && LOOP_VINFO_VECT_FACTOR (loop_vinfo) > 2)"}]}