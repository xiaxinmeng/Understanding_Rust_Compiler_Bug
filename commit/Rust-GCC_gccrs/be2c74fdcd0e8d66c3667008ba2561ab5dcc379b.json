{"sha": "be2c74fdcd0e8d66c3667008ba2561ab5dcc379b", "node_id": "C_kwDOANBUbNoAKGJlMmM3NGZkY2QwZThkNjZjMzY2NzAwOGJhMjU2MWFiNWRjYzM3OWI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-10T14:04:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-11T13:31:24Z"}, "message": "Make last DCE remove empty loops\n\nThe following makes the last DCE pass CD-DCE and in turn the\nlast CD-DCE pass a DCE one.  That ensues we remove empty loops\nthat become empty between the two.  I've also moved the tail-call\npass after DCE since DCE can only improve things here.\n\nThe two testcases were the only ones scanning cddce3 so I've\nchanged them to scan the dce7 pass that's now in this place.\nThe testcases scanning dce7 also work when that's in the earlier\nposition.\n\n\tPR tree-optimization/84646\n\t* tree-ssa-dce.cc (pass_dce::set_pass_param): Add param\n\twheter to run update-address-taken.\n\t(pass_dce::execute): Honor it.\n\t* passes.def: Exchange last DCE and CD-DCE invocations.\n\tSwap pass_tail_calls and the last DCE.\n\n\t* g++.dg/tree-ssa/pr106922.C: Continue to scan earlier DCE dump.\n\t* gcc.dg/tree-ssa/20030808-1.c: Likewise.", "tree": {"sha": "091155704143fbac78105c27630499db30634b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/091155704143fbac78105c27630499db30634b80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b54cc9d04c2efb2c8f9a0b515e638917636630c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b54cc9d04c2efb2c8f9a0b515e638917636630c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b54cc9d04c2efb2c8f9a0b515e638917636630c"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "462e9afad61010441aa6fa3c9de034d3f2016d4b", "filename": "gcc/passes.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=be2c74fdcd0e8d66c3667008ba2561ab5dcc379b", "patch": "@@ -346,21 +346,21 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_ccp, true /* nonzero_p */);\n       NEXT_PASS (pass_warn_restrict);\n       NEXT_PASS (pass_dse);\n-      NEXT_PASS (pass_cd_dce, true /* update_address_taken_p */);\n-      /* After late CD DCE we rewrite no longer addressed locals into SSA\n+      NEXT_PASS (pass_dce, true /* update_address_taken_p */);\n+      /* After late DCE we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n       NEXT_PASS (pass_forwprop);\n       NEXT_PASS (pass_sink_code, true /* unsplit edges */);\n       NEXT_PASS (pass_phiopt, false /* early_p */);\n       NEXT_PASS (pass_fold_builtins);\n       NEXT_PASS (pass_optimize_widening_mul);\n       NEXT_PASS (pass_store_merging);\n-      NEXT_PASS (pass_tail_calls);\n       /* If DCE is not run before checking for uninitialized uses,\n \t we may get false warnings (e.g., testsuite/gcc.dg/uninit-5.c).\n \t However, this also causes us to misdiagnose cases that should be\n \t real warnings (e.g., testsuite/gcc.dg/pr18501.c).  */\n-      NEXT_PASS (pass_dce);\n+      NEXT_PASS (pass_cd_dce, false /* update_address_taken_p */);\n+      NEXT_PASS (pass_tail_calls);\n       /* Split critical edges before late uninit warning to reduce the\n          number of false positives from it.  */\n       NEXT_PASS (pass_split_crit_edges);"}, {"sha": "4b6a4ad7f6c8f49f8081a32f005d56f467c636ff", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr106922.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr106922.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr106922.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr106922.C?ref=be2c74fdcd0e8d66c3667008ba2561ab5dcc379b", "patch": "@@ -1,5 +1,5 @@\n // { dg-require-effective-target c++20 }\n-// { dg-options \"-O2 -fdump-tree-cddce3\" }\n+// { dg-options \"-O2 -fdump-tree-dce7\" }\n \n template <typename> struct __new_allocator {\n   void deallocate(int *, int) { operator delete(0); }\n@@ -87,4 +87,4 @@ void testfunctionfoo() {\n   }\n }\n \n-// { dg-final { scan-tree-dump-not \"m_initialized\" \"cddce3\" } }\n+// { dg-final { scan-tree-dump-not \"m_initialized\" \"dce7\" } }"}, {"sha": "7d4a1383ca4f78f019396deda8118f3ec5451871", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030808-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030808-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030808-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030808-1.c?ref=be2c74fdcd0e8d66c3667008ba2561ab5dcc379b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-cddce3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dce7\" } */\n       \n extern void abort (void);\n \n@@ -33,8 +33,8 @@ delete_dead_jumptables ()\n /* There should be no loads of ->code.  If any exist, then we failed to\n    optimize away all the IF statements and the statements feeding\n    their conditions.  */\n-/* { dg-final { scan-tree-dump-times \"->code\" 0 \"cddce3\"} } */\n+/* { dg-final { scan-tree-dump-times \"->code\" 0 \"dce7\"} } */\n    \n /* There should be no IF statements.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"cddce3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce7\"} } */\n "}, {"sha": "187d58bdd37d4f1db4ce1237467fc9059092dcc2", "filename": "gcc/tree-ssa-dce.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b/gcc%2Ftree-ssa-dce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2c74fdcd0e8d66c3667008ba2561ab5dcc379b/gcc%2Ftree-ssa-dce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.cc?ref=be2c74fdcd0e8d66c3667008ba2561ab5dcc379b", "patch": "@@ -2005,14 +2005,25 @@ class pass_dce : public gimple_opt_pass\n {\n public:\n   pass_dce (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_dce, ctxt)\n+    : gimple_opt_pass (pass_data_dce, ctxt), update_address_taken_p (false)\n   {}\n \n   /* opt_pass methods: */\n   opt_pass * clone () final override { return new pass_dce (m_ctxt); }\n+  void set_pass_param (unsigned n, bool param) final override\n+    {\n+      gcc_assert (n == 0);\n+      update_address_taken_p = param;\n+    }\n   bool gate (function *) final override { return flag_tree_dce != 0; }\n-  unsigned int execute (function *) final override { return tree_ssa_dce (); }\n+  unsigned int execute (function *) final override\n+    {\n+      return (tree_ssa_dce ()\n+\t      | (update_address_taken_p ? TODO_update_address_taken : 0));\n+    }\n \n+private:\n+  bool update_address_taken_p;\n }; // class pass_dce\n \n } // anon namespace"}]}