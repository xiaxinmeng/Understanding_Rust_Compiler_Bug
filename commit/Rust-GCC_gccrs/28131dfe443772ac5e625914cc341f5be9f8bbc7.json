{"sha": "28131dfe443772ac5e625914cc341f5be9f8bbc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxMzFkZmU0NDM3NzJhYzVlNjI1OTE0Y2MzNDFmNWJlOWY4YmJjNw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-11-29T17:51:40Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-11-29T17:51:40Z"}, "message": "re PR target/55073 (Wrong Neon code generation at -O2 caused by -fschedule-insns)\n\n\tPR target/55073\n\t* arm/neon.md (neon_vtrn<mode>_internal): Split into expand\n\tand insn patterns.  Re-order insn arguments to tie inputs to\n\toutputs.\n\t(neon_vzip<mode>_internal): Likewise.\n\t(neon_vuzp<mode>_internal): Likewise.\n\n\t* gcc.target/arm/pr55073.C: New test.\n\nFrom-SVN: r193943", "tree": {"sha": "0453edaac611d759afad05d1d702d72031be7ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0453edaac611d759afad05d1d702d72031be7ee3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28131dfe443772ac5e625914cc341f5be9f8bbc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28131dfe443772ac5e625914cc341f5be9f8bbc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28131dfe443772ac5e625914cc341f5be9f8bbc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28131dfe443772ac5e625914cc341f5be9f8bbc7/comments", "author": null, "committer": null, "parents": [{"sha": "1d029889864ac29255b9baeba93decb6afaf4bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d029889864ac29255b9baeba93decb6afaf4bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d029889864ac29255b9baeba93decb6afaf4bf9"}], "stats": {"total": 157, "additions": 142, "deletions": 15}, "files": [{"sha": "7560e28eb8768d0b94e8cf832b01ec4d339a96ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28131dfe443772ac5e625914cc341f5be9f8bbc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28131dfe443772ac5e625914cc341f5be9f8bbc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28131dfe443772ac5e625914cc341f5be9f8bbc7", "patch": "@@ -1,3 +1,12 @@\n+2012-11-29  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/55073\n+\t* arm/neon.md (neon_vtrn<mode>_internal): Split into expand\n+\tand insn patterns.  Re-order insn arguments to tie inputs to\n+\toutputs.\n+\t(neon_vzip<mode>_internal): Likewise.\n+\t(neon_vuzp<mode>_internal): Likewise.\n+\n 2012-11-29  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/53094"}, {"sha": "0822049a3e9387f16a43a0f6b64c1c6cbe69bdab", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 54, "deletions": 15, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28131dfe443772ac5e625914cc341f5be9f8bbc7/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28131dfe443772ac5e625914cc341f5be9f8bbc7/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=28131dfe443772ac5e625914cc341f5be9f8bbc7", "patch": "@@ -4411,16 +4411,29 @@\n   [(set_attr \"neon_type\" \"neon_bp_3cycle\")]\n )\n \n-(define_insn \"neon_vtrn<mode>_internal\"\n+(define_expand \"neon_vtrn<mode>_internal\"\n+  [(parallel\n+    [(set (match_operand:VDQW 0 \"s_register_operand\" \"\")\n+\t  (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"\")\n+\t\t\t(match_operand:VDQW 2 \"s_register_operand\" \"\")]\n+\t   UNSPEC_VTRN1))\n+     (set (match_operand:VDQW 3 \"s_register_operand\" \"\")\n+          (unspec:VDQW [(match_dup 1) (match_dup 2)] UNSPEC_VTRN2))])]\n+  \"TARGET_NEON\"\n+  \"\"\n+)\n+\n+;; Note: Different operand numbering to handle tied registers correctly.\n+(define_insn \"*neon_vtrn<mode>_insn\"\n   [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n         (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-                      (match_operand:VDQW 2 \"s_register_operand\" \"w\")]\n+                      (match_operand:VDQW 3 \"s_register_operand\" \"2\")]\n                      UNSPEC_VTRN1))\n-   (set (match_operand:VDQW 3 \"s_register_operand\" \"=2\")\n-         (unspec:VDQW [(match_dup 1) (match_dup 2)]\n+   (set (match_operand:VDQW 2 \"s_register_operand\" \"=w\")\n+         (unspec:VDQW [(match_dup 1) (match_dup 3)]\n                      UNSPEC_VTRN2))]\n   \"TARGET_NEON\"\n-  \"vtrn.<V_sz_elem>\\t%<V_reg>0, %<V_reg>3\"\n+  \"vtrn.<V_sz_elem>\\t%<V_reg>0, %<V_reg>2\"\n   [(set (attr \"neon_type\")\n       (if_then_else (match_test \"<Is_d_reg>\")\n                     (const_string \"neon_bp_simple\")\n@@ -4438,16 +4451,29 @@\n   DONE;\n })\n \n-(define_insn \"neon_vzip<mode>_internal\"\n+(define_expand \"neon_vzip<mode>_internal\"\n+  [(parallel\n+    [(set (match_operand:VDQW 0 \"s_register_operand\" \"\")\n+\t  (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"\")\n+\t  \t        (match_operand:VDQW 2 \"s_register_operand\" \"\")]\n+\t\t       UNSPEC_VZIP1))\n+    (set (match_operand:VDQW 3 \"s_register_operand\" \"\")\n+\t (unspec:VDQW [(match_dup 1) (match_dup 2)] UNSPEC_VZIP2))])]\n+  \"TARGET_NEON\"\n+  \"\"\n+)\n+\n+;; Note: Different operand numbering to handle tied registers correctly.\n+(define_insn \"*neon_vzip<mode>_insn\"\n   [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n         (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-                      (match_operand:VDQW 2 \"s_register_operand\" \"w\")]\n+                      (match_operand:VDQW 3 \"s_register_operand\" \"2\")]\n                      UNSPEC_VZIP1))\n-   (set (match_operand:VDQW 3 \"s_register_operand\" \"=2\")\n-        (unspec:VDQW [(match_dup 1) (match_dup 2)]\n+   (set (match_operand:VDQW 2 \"s_register_operand\" \"=w\")\n+        (unspec:VDQW [(match_dup 1) (match_dup 3)]\n                      UNSPEC_VZIP2))]\n   \"TARGET_NEON\"\n-  \"vzip.<V_sz_elem>\\t%<V_reg>0, %<V_reg>3\"\n+  \"vzip.<V_sz_elem>\\t%<V_reg>0, %<V_reg>2\"\n   [(set (attr \"neon_type\")\n       (if_then_else (match_test \"<Is_d_reg>\")\n                     (const_string \"neon_bp_simple\")\n@@ -4465,16 +4491,29 @@\n   DONE;\n })\n \n-(define_insn \"neon_vuzp<mode>_internal\"\n+(define_expand \"neon_vuzp<mode>_internal\"\n+  [(parallel\n+    [(set (match_operand:VDQW 0 \"s_register_operand\" \"\")\n+\t  (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"\")\n+\t\t\t(match_operand:VDQW 2 \"s_register_operand\" \"\")]\n+\t   UNSPEC_VUZP1))\n+     (set (match_operand:VDQW 3 \"s_register_operand\" \"\")\n+\t  (unspec:VDQW [(match_dup 1) (match_dup 2)] UNSPEC_VUZP2))])]\n+  \"TARGET_NEON\"\n+  \"\"\n+)\n+\n+;; Note: Different operand numbering to handle tied registers correctly.\n+(define_insn \"*neon_vuzp<mode>_insn\"\n   [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n         (unspec:VDQW [(match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-                      (match_operand:VDQW 2 \"s_register_operand\" \"w\")]\n+                      (match_operand:VDQW 3 \"s_register_operand\" \"2\")]\n                      UNSPEC_VUZP1))\n-   (set (match_operand:VDQW 3 \"s_register_operand\" \"=2\")\n-        (unspec:VDQW [(match_dup 1) (match_dup 2)]\n+   (set (match_operand:VDQW 2 \"s_register_operand\" \"=w\")\n+        (unspec:VDQW [(match_dup 1) (match_dup 3)]\n                      UNSPEC_VUZP2))]\n   \"TARGET_NEON\"\n-  \"vuzp.<V_sz_elem>\\t%<V_reg>0, %<V_reg>3\"\n+  \"vuzp.<V_sz_elem>\\t%<V_reg>0, %<V_reg>2\"\n   [(set (attr \"neon_type\")\n       (if_then_else (match_test \"<Is_d_reg>\")\n                     (const_string \"neon_bp_simple\")"}, {"sha": "996347b764f7a926c2ef3aef3d61f2e5801d00e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28131dfe443772ac5e625914cc341f5be9f8bbc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28131dfe443772ac5e625914cc341f5be9f8bbc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28131dfe443772ac5e625914cc341f5be9f8bbc7", "patch": "@@ -1,3 +1,8 @@\n+2012-11-29  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/55073\n+\t* gcc.target/arm/pr55073.C: New test.\n+\n 2012-11-29  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/53094"}, {"sha": "5575cf77911a6bd7663eb6a8a6b4c9ece17e17df", "filename": "gcc/testsuite/gcc.target/arm/pr55073.C", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28131dfe443772ac5e625914cc341f5be9f8bbc7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr55073.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28131dfe443772ac5e625914cc341f5be9f8bbc7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr55073.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr55073.C?ref=28131dfe443772ac5e625914cc341f5be9f8bbc7", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+#include <stdlib.h>\n+\n+struct __attribute__((aligned(16))) _v16u8_ {\n+\tuint8x16_t val;\n+\t_v16u8_() { }\n+\n+\t_v16u8_( const  uint8x16_t &src) { val = src; }\n+\t_v16u8_( const   int16x8_t &src) { val = vreinterpretq_u8_s16(src); }\n+\t_v16u8_( const  uint32x4_t &src) { val = vreinterpretq_u8_u32(src); }\n+\n+\toperator  uint8x16_t () const { return val; }\n+\toperator   int8x16_t () const { return vreinterpretq_s8_u8 (val); }\n+\toperator   int16x8_t () const { return vreinterpretq_s16_u8(val); }\n+\toperator  uint32x4_t () const { return vreinterpretq_u32_u8(val); }\n+\toperator   int32x4_t () const { return vreinterpretq_s32_u8(val); }\n+};\n+typedef struct _v16u8_ v16u8;\n+typedef const v16u8 cv16u8;\n+\n+typedef v16u8 v16i8;\n+typedef v16u8 v8i16;\n+typedef v16u8 v4u32;\n+\n+inline v16u8 __attribute__((always_inline)) mergelo( const v16u8 & s, const v16u8 & t )\n+{\n+\tuint8x8x2_t r = vzip_u8( vget_low_u8(s), vget_low_u8(t) );\n+\treturn vcombine_u8( r.val[0], r.val[1] );\n+}\n+\n+inline v8i16 __attribute__((always_inline)) unpacklo(const v16i8 & s)\n+{\n+\treturn vmovl_s8( vget_low_s8( s ) );\n+}\n+\n+const uint32_t __attribute__((aligned(16))) _InA [4] = { 0xFF020001, 0xFF020001, 0xFF000101, 0xFF000101 } ;\n+const uint32_t __attribute__((aligned(16))) _InB [4] = { 0xFF050002, 0xFF050002, 0xFF000303, 0xFF000203 } ;\n+\n+__attribute__((noinline)) v16i8 test_func(void)\n+{\n+\tv16u8 A = vld1q_u8( (uint8_t*) _InA );\n+\tv16u8 B = vld1q_u8( (uint8_t*) _InB );\n+\tv8i16 r   = vdupq_n_s16(2);\n+\n+\tv16u8 _0 = mergelo( A, B );\n+\tv16u8 _1 = mergelo( B, A );\n+\n+\tv16u8 _2 = mergelo( _0, _1 );\n+\tv16u8 _3 = mergelo( _1, _0 );\n+\n+\tv8i16 _4 = vsubq_s16( unpacklo( _2 ), r );\n+\tv8i16 _5 = vsubq_s16( unpacklo( _3 ), r );\n+\n+\tv8i16 ret = vaddq_s16( _4, _5 );\n+\n+\treturn ( ret );\n+}\n+\n+int main (int argc, char **argv)\n+{\n+\tv16u8 val = test_func();\n+\n+\tif (vgetq_lane_u32( val, 0 ) != 0xffffffff\n+\t    || vgetq_lane_u32( val, 1 ) != 0xffffffff\n+\t    || vgetq_lane_u32( val, 2 ) != 0xfffcfffc\n+\t    || vgetq_lane_u32( val, 3 ) != 0xfffcfffc)\n+\t  abort ();\n+\texit (0);\n+}"}]}