{"sha": "6009ee7b4164ad1ee395b6fe013b7c7037932e57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAwOWVlN2I0MTY0YWQxZWUzOTViNmZlMDEzYjdjNzAzNzkzMmU1Nw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2009-12-01T10:51:07Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2009-12-01T10:51:07Z"}, "message": "cgraph.h (struct cgraph_edge): Reorder fields.\n\n2009-12-01  Martin Jambor  <mjambor@suse.cz>\n\n        * cgraph.h (struct cgraph_edge): Reorder fields.  Make loop_nest\n\tunsigned short int.\n\t* ipa-prop.h (struct ipa_param_call_note): Likewise.\n\t* ipa-prop.c (ipa_note_param_call): Initialize note->loop_nest.\n\nFrom-SVN: r154872", "tree": {"sha": "c416cb92cfa79f0d551e6d09d45f92af9210fd36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c416cb92cfa79f0d551e6d09d45f92af9210fd36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6009ee7b4164ad1ee395b6fe013b7c7037932e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6009ee7b4164ad1ee395b6fe013b7c7037932e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6009ee7b4164ad1ee395b6fe013b7c7037932e57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6009ee7b4164ad1ee395b6fe013b7c7037932e57/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b27dc43154de9c221e0b66b0591b310fe9761be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27dc43154de9c221e0b66b0591b310fe9761be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27dc43154de9c221e0b66b0591b310fe9761be1"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "f4cd2813c32f49e8a58899b3820f41254d23f4d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6009ee7b4164ad1ee395b6fe013b7c7037932e57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6009ee7b4164ad1ee395b6fe013b7c7037932e57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6009ee7b4164ad1ee395b6fe013b7c7037932e57", "patch": "@@ -1,3 +1,10 @@\n+2009-12-01  Martin Jambor  <mjambor@suse.cz>\n+\n+        * cgraph.h (struct cgraph_edge): Reorder fields.  Make loop_nest\n+\tunsigned short int.\n+\t* ipa-prop.h (struct ipa_param_call_note): Likewise.\n+\t* ipa-prop.c (ipa_note_param_call): Initialize note->loop_nest.\n+\n 2009-12-01  Richard Guenther  <rguenther@suse.de>\n \n \t* final.c (rest_of_clean_state): If -fcompare-debug is"}, {"sha": "d79d3e4d86b52604488abf500b15e4a89b7446af", "filename": "gcc/cgraph.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6009ee7b4164ad1ee395b6fe013b7c7037932e57/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6009ee7b4164ad1ee395b6fe013b7c7037932e57/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=6009ee7b4164ad1ee395b6fe013b7c7037932e57", "patch": "@@ -310,36 +310,36 @@ typedef enum {\n } cgraph_inline_failed_t;\n \n struct GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"))) cgraph_edge {\n+  /* Expected number of executions: calculated in profile.c.  */\n+  gcov_type count;\n   struct cgraph_node *caller;\n   struct cgraph_node *callee;\n   struct cgraph_edge *prev_caller;\n   struct cgraph_edge *next_caller;\n   struct cgraph_edge *prev_callee;\n   struct cgraph_edge *next_callee;\n   gimple call_stmt;\n-  /* The stmt_uid of this call stmt.  This is used by LTO to recover\n-     the call_stmt when the function is serialized in.  */\n-  unsigned int lto_stmt_uid;\n   PTR GTY ((skip (\"\"))) aux;\n   /* When equal to CIF_OK, inline this call.  Otherwise, points to the\n      explanation why function was not inlined.  */\n   cgraph_inline_failed_t inline_failed;\n-  /* Expected number of executions: calculated in profile.c.  */\n-  gcov_type count;\n+  /* The stmt_uid of call_stmt.  This is used by LTO to recover the call_stmt\n+     when the function is serialized in.  */\n+  unsigned int lto_stmt_uid;\n   /* Expected frequency of executions within the function.\n      When set to CGRAPH_FREQ_BASE, the edge is expected to be called once\n      per function call.  The range is 0 to CGRAPH_FREQ_MAX.  */\n   int frequency;\n+  /* Unique id of the edge.  */\n+  int uid;\n   /* Depth of loop nest, 1 means no loop nest.  */\n-  unsigned int loop_nest : 30;\n+  unsigned short int loop_nest;\n   /* Whether this edge describes a call that was originally indirect.  */\n   unsigned int indirect_call : 1;\n   /* True if the corresponding CALL stmt cannot be inlined.  */\n   unsigned int call_stmt_cannot_inline_p : 1;\n   /* Can this call throw externally?  */\n   unsigned int can_throw_external : 1;\n-  /* Unique id of the edge.  */\n-  int uid;\n };\n \n #define CGRAPH_FREQ_BASE 1000"}, {"sha": "9387f0e0779ab8f9a2a368d62ee98a35b74d83d1", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6009ee7b4164ad1ee395b6fe013b7c7037932e57/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6009ee7b4164ad1ee395b6fe013b7c7037932e57/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=6009ee7b4164ad1ee395b6fe013b7c7037932e57", "patch": "@@ -754,6 +754,7 @@ ipa_note_param_call (struct ipa_node_params *info, int formal_id,\n   note->lto_stmt_uid = gimple_uid (stmt);\n   note->count = bb->count;\n   note->frequency = compute_call_stmt_bb_frequency (current_function_decl, bb);\n+  note->loop_nest = bb->loop_depth;\n \n   note->next = info->param_calls;\n   info->param_calls = note;"}, {"sha": "90055e124bc2ffb94f4ae1edd0a6137de24ecd89", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6009ee7b4164ad1ee395b6fe013b7c7037932e57/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6009ee7b4164ad1ee395b6fe013b7c7037932e57/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=6009ee7b4164ad1ee395b6fe013b7c7037932e57", "patch": "@@ -139,6 +139,8 @@ struct ipcp_lattice\n    are linked in a list.  */\n struct ipa_param_call_note\n {\n+  /* Expected number of executions: calculated in profile.c.  */\n+  gcov_type count;\n   /* Linked list's next */\n   struct ipa_param_call_note *next;\n   /* Statement that contains the call to the parameter above.  */\n@@ -147,13 +149,11 @@ struct ipa_param_call_note\n   unsigned int lto_stmt_uid;\n   /* Index of the parameter that is called.  */\n   int formal_id;\n-  /* Expected number of executions: calculated in profile.c.  */\n-  gcov_type count;\n   /* Expected frequency of executions within the function. see cgraph_edge in\n      cgraph.h for more on this. */\n   int frequency;\n   /* Depth of loop nest, 1 means no loop nest.  */\n-  int loop_nest;\n+  unsigned short int loop_nest;\n   /* Set when we have already found the target to be a compile time constant\n      and turned this into an edge or when the note was found unusable for some\n      reason.  */"}]}