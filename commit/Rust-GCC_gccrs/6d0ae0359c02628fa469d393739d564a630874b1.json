{"sha": "6d0ae0359c02628fa469d393739d564a630874b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwYWUwMzU5YzAyNjI4ZmE0NjlkMzkzNzM5ZDU2NGE2MzA4NzRiMQ==", "commit": {"author": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2012-11-05T17:48:46Z"}, "committer": {"name": "Florian Weimer", "email": "fw@gcc.gnu.org", "date": "2012-11-05T17:48:46Z"}, "message": "Detect overflow in size calculations in __cxa_vec_new{2,3}\n\n2012-11-03  Florian Weimer  <fweimer@redhat.com>\n\n\t* libsupc++/vec.cc (compute_size): New.\n\t(__cxa_vec_new2, __cxa_vec_new3): Use it.\n\t* testsuite/18_support/cxa_vec.cc: New.\n\nFrom-SVN: r193174", "tree": {"sha": "9a13f9e7ac82123b90ffc03ec641ccc88a9e23ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a13f9e7ac82123b90ffc03ec641ccc88a9e23ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0ae0359c02628fa469d393739d564a630874b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0ae0359c02628fa469d393739d564a630874b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0ae0359c02628fa469d393739d564a630874b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0ae0359c02628fa469d393739d564a630874b1/comments", "author": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0be1a5898f27445828da307df1c8cd62c800be03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be1a5898f27445828da307df1c8cd62c800be03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be1a5898f27445828da307df1c8cd62c800be03"}], "stats": {"total": 92, "additions": 88, "deletions": 4}, "files": [{"sha": "2f02107bb637f7d1a45a16eb735540f0f28e840d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0ae0359c02628fa469d393739d564a630874b1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0ae0359c02628fa469d393739d564a630874b1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6d0ae0359c02628fa469d393739d564a630874b1", "patch": "@@ -1,3 +1,9 @@\n+2012-11-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* libsupc++/vec.cc (compute_size): New.\n+\t(__cxa_vec_new2, __cxa_vec_new3): Use it.\n+\t* testsuite/18_support/cxa_vec.cc: New.\n+\n 2012-11-03  Robert Mason  <rbmj@verizon.net>\n \n \t* config/os/vxworks/os_defines.h:"}, {"sha": "f9afd39df9b544e1b9d54deb1345dde1f2bbb20e", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0ae0359c02628fa469d393739d564a630874b1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0ae0359c02628fa469d393739d564a630874b1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=6d0ae0359c02628fa469d393739d564a630874b1", "patch": "@@ -1,7 +1,6 @@\n // New abi Support -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2003, 2004, 2009, 2011\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2000-2012 Free Software Foundation, Inc.\n //  \n // This file is part of GCC.\n //\n@@ -59,6 +58,19 @@ namespace __cxxabiv1\n       globals->caughtExceptions = p->nextException;\n       globals->uncaughtExceptions += 1;\n     }\n+\n+    // Compute the total size with overflow checking.\n+    std::size_t compute_size(std::size_t element_count,\n+\t\t\t     std::size_t element_size,\n+\t\t\t     std::size_t padding_size)\n+    {\n+      if (element_size && element_count > std::size_t(-1) / element_size)\n+\tthrow std::bad_alloc();\n+      std::size_t size = element_count * element_size;\n+      if (size + padding_size < size)\n+\tthrow std::bad_alloc();\n+      return size + padding_size;\n+    }\n   }\n \n   // Allocate and construct array.\n@@ -83,7 +95,8 @@ namespace __cxxabiv1\n \t\t void *(*alloc) (std::size_t),\n \t\t void (*dealloc) (void *))\n   {\n-    std::size_t size = element_count * element_size + padding_size;\n+    std::size_t size\n+      = compute_size(element_count, element_size, padding_size);\n     char *base = static_cast <char *> (alloc (size));\n     if (!base)\n       return base;\n@@ -124,7 +137,8 @@ namespace __cxxabiv1\n \t\t void *(*alloc) (std::size_t),\n \t\t void (*dealloc) (void *, std::size_t))\n   {\n-    std::size_t size = element_count * element_size + padding_size;\n+    std::size_t size\n+      = compute_size(element_count, element_size, padding_size);\n     char *base = static_cast<char *>(alloc (size));\n     if (!base)\n       return base;"}, {"sha": "08713f16894dd51b8f2ef6491c29bd97a50f6ecf", "filename": "libstdc++-v3/testsuite/18_support/cxa_vec.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0ae0359c02628fa469d393739d564a630874b1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcxa_vec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0ae0359c02628fa469d393739d564a630874b1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcxa_vec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcxa_vec.cc?ref=6d0ae0359c02628fa469d393739d564a630874b1", "patch": "@@ -0,0 +1,64 @@\n+// { dg-do run }\n+// Avoid use of none-overridable new/delete operators in shared\n+// { dg-options \"-static\" { target *-*-mingw* } }\n+// Test __cxa_vec routines\n+// Copyright (C) 2000-2012 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 7 Apr 2000 <nathan@nathan@codesourcery.com>\n+\n+#include <cxxabi.h>\n+#include <stdio.h>\n+#include <new>\n+#include <stdlib.h>\n+#include <setjmp.h>\n+\n+// Allocate enough padding to hold an array cookie.\n+#ifdef __ARM_EABI__\n+static const size_t padding = 8;\n+#else\n+static const size_t padding = (sizeof (std::size_t));\n+#endif\n+\n+// our pseudo ctors and dtors\n+static abi::__cxa_cdtor_return_type ctor (void *x)\n+{\n+  abort ();\n+}\n+\n+static abi::__cxa_cdtor_return_type dtor (void *x)\n+{\n+  abort ();\n+}\n+\n+// allocate an array whose size causes an overflow during multiplication\n+void test1 ()\n+{\n+  static const std::size_t large_size =\n+    std::size_t(1) << (sizeof(std::size_t) * 8 - 2);\n+  try\n+    {\n+      abi::__cxa_vec_new (large_size, 8, 0, ctor, dtor);\n+      abort ();\n+    }\n+  catch (std::bad_alloc &)\n+    {\n+    }\n+}\n+\n+// allocate an array whose size causes an overflow during addition\n+void test2 ()\n+{\n+  try\n+    {\n+      abi::__cxa_vec_new (std::size_t(-1) / 4, 4, padding, ctor, dtor);\n+      abort ();\n+    }\n+  catch (std::bad_alloc &)\n+    {\n+    }\n+}\n+\n+int main ()\n+{\n+  test1 ();\n+  test2 ();\n+}"}]}