{"sha": "d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUyYTk4NDc4MzMwMTllNGQ2MWE0YjJlZDJjM2RjYjE0NGE2MTViMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-06-11T19:20:20Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-11T19:20:20Z"}, "message": "ostream.tcc (ostream::seekp): Add error checking as per DR 129.\n\n\n2001-06-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/3114\n\t* include/bits/ostream.tcc (ostream::seekp): Add error checking as\n\tper DR 129.\n\t* include/bits/istream.tcc (istream::seekg): Same.\n\t* testsuite/27_io/istream_seeks.cc: Fix.\n\n\tlibstdc++/3113\n\t* include/bits/stl_function.h (binder2nd): Fix as per DR 109.\n\t(binder1st): Same.\n\t* include/bits/std_queue.h: Add c++config.h.\n\t* testsuite/20_util/binders.cc: New test.\n\nFrom-SVN: r43201", "tree": {"sha": "5f88fa75f0de65a7ba5623c98d7af9c8e8d7bb89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f88fa75f0de65a7ba5623c98d7af9c8e8d7bb89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/comments", "author": null, "committer": null, "parents": [{"sha": "353e51f8e5da990ea163d43b6ce6c828848f4891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353e51f8e5da990ea163d43b6ce6c828848f4891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/353e51f8e5da990ea163d43b6ce6c828848f4891"}], "stats": {"total": 113, "additions": 107, "deletions": 6}, "files": [{"sha": "d21f28fba969288e14eacae99db32ad426283499", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "patch": "@@ -1,3 +1,17 @@\n+2001-06-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tlibstdc++/3114\n+\t* include/bits/ostream.tcc (ostream::seekp): Add error checking as\n+\tper DR 129.\n+\t* include/bits/istream.tcc (istream::seekg): Same.\n+\t* testsuite/27_io/istream_seeks.cc: Fix.\n+\t\n+\tlibstdc++/3113\n+\t* include/bits/stl_function.h (binder2nd): Fix as per DR 109.\n+\t(binder1st): Same.\n+\t* include/bits/std_queue.h: Add c++config.h.\n+\t* testsuite/20_util/binders.cc: New test.\n+\t\n 2001-06-11  Matthias Klose  <doko@debian.org>\n             Phil Edwards  <pme@sources.redhat.com>\n "}, {"sha": "e794fe33060cdbb22901c262680f450ed355c5bf", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "patch": "@@ -959,7 +959,11 @@ namespace std\n \t    {\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n-\t      this->rdbuf()->pubseekpos(__pos, ios_base::in);\n+\t      pos_type __err = this->rdbuf()->pubseekpos(__pos, ios_base::in);\n+\n+// 129. Need error indication from seekp() and seekg()\n+\t      if (__err == pos_type(off_type(-1)))\n+\t\tthis->setstate(failbit);\n #endif\n \t    }\n \t  catch(exception& __fail)\n@@ -987,7 +991,12 @@ namespace std\n \t    {\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n-\t      this->rdbuf()->pubseekoff(__off, __dir, ios_base::in);\n+\t      pos_type __err = this->rdbuf()->pubseekoff(__off, __dir, \n+\t\t\t\t\t\t\t ios_base::in);\n+\n+// 129. Need error indication from seekp() and seekg()\n+\t      if (__err == pos_type(off_type(-1)))\n+\t\tthis->setstate(failbit);\n #endif\n \t    }\n \t  catch(exception& __fail)"}, {"sha": "c3cb5d2dced688e26d765369d157ba76be27b34b", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "patch": "@@ -411,10 +411,16 @@ namespace std\n       bool __testok = this->fail() != true;\n       \n       if (__testok)\n+\t{\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n-\tthis->rdbuf()->pubseekpos(__pos, ios_base::out);\n+\t  pos_type __err = this->rdbuf()->pubseekpos(__pos, ios_base::out);\n+\n+// 129. Need error indication from seekp() and seekg()\n+\t  if (__err == pos_type(off_type(-1)))\n+\t    this->setstate(failbit);\n #endif\n+\t}\n       return *this;\n     }\n \n@@ -426,9 +432,16 @@ namespace std\n       bool __testok = this->fail() != true;\n       \n       if (__testok)\n+\t{\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n-\tthis->rdbuf()->pubseekoff(__off, __d, ios_base::out);\n+\t  pos_type __err = this->rdbuf()->pubseekoff(__off, __d, \n+\t\t\t\t\t\t     ios_base::out);\n+\n+// 129. Need error indication from seekp() and seekg()\n+\t  if (__err == pos_type(off_type(-1)))\n+\t    this->setstate(failbit);\n+\t}\n #endif\n       return *this;\n     }"}, {"sha": "b3b80abd724991ce293c41d032d600ce0a9ccc93", "filename": "libstdc++-v3/include/bits/std_queue.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_queue.h?ref=d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "patch": "@@ -28,7 +28,7 @@\n #define _CPP_QUEUE 1\n \n #pragma GCC system_header\n-\n+#include <bits/c++config.h>\n #include <bits/stl_algobase.h>\n #include <bits/stl_alloc.h>\n #include <bits/stl_construct.h>"}, {"sha": "43bf93296b6c2e7ed31ad08402a434918b105d51", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "patch": "@@ -199,6 +199,13 @@ class binder1st\n   operator()(const typename _Operation::second_argument_type& __x) const {\n     return op(value, __x); \n   }\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+  // 109. Missing binders for non-const sequence elements\n+  typename _Operation::result_type\n+  operator()(typename _Operation::second_argument_type& __x) const {\n+    return op(value, __x); \n+  }\n+#endif\n };\n \n template <class _Operation, class _Tp>\n@@ -224,6 +231,13 @@ class binder2nd\n   operator()(const typename _Operation::first_argument_type& __x) const {\n     return op(__x, value); \n   }\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+  // 109. Missing binders for non-const sequence elements\n+  typename _Operation::result_type\n+  operator()(typename _Operation::first_argument_type& __x) const {\n+    return op(__x, value); \n+  }\n+#endif\n };\n \n template <class _Operation, class _Tp>"}, {"sha": "6dd45e3ff96f9547a6573fdd3fbdf0b5afa6f686", "filename": "libstdc++-v3/testsuite/20_util/binders.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbinders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbinders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbinders.cc?ref=d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "patch": "@@ -0,0 +1,51 @@\n+// 2001-06-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.3.6 Binders\n+\n+#include <vector>\n+#include <algorithm> // for_each\n+#include <functional>\n+\n+class Elem \n+{ \n+public: \n+  void print(int i) const { } \n+  void modify(int i) { } \n+}; \n+\n+// libstdc++/3113\n+void test01()\n+{ \n+  std::vector<Elem> coll(2); \n+  // OK \n+  std::for_each(coll.begin(), coll.end(), \n+\t   std::bind2nd(std::mem_fun_ref(&Elem::print), 42));\n+  // OK\n+  std::for_each(coll.begin(), coll.end(), \n+\t   std::bind2nd(std::mem_fun_ref(&Elem::modify), 42));\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "97ef01b121cb9a36d48c9d58b9b0c8b42ed8e77b", "filename": "libstdc++-v3/testsuite/27_io/istream_seeks.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52a9847833019e4d61a4b2ed2c3dcb144a615b1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc?ref=d52a9847833019e4d61a4b2ed2c3dcb144a615b1", "patch": "@@ -249,7 +249,7 @@ void test05(void)\n   state02 = is03.rdstate();\n   pos05 = is03.tellg(); \n   VERIFY( pos05 == pos06 ); // as only out buffer \n-  VERIFY( state01 == state02 );\n+  VERIFY( state01 != state02 );\n   pos06 = is03.tellg(); \n   VERIFY( pos05 == pos06 ); \n "}]}