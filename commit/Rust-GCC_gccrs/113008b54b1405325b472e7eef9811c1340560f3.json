{"sha": "113008b54b1405325b472e7eef9811c1340560f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzMDA4YjU0YjE0MDUzMjViNDcyZTdlZWY5ODExYzEzNDA1NjBmMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-04-11T01:11:56Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-04-11T01:11:56Z"}, "message": "cc_hash_max_collision_check_resize_trigger_imp.hpp: Qualify namespace std members.\n\n2007-04-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/pb_ds/detail/resize_policy/\n\tcc_hash_max_collision_check_resize_trigger_imp.hpp: Qualify\n\tnamespace std members.\t\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tcounter_lu_metadata.hpp: Same.\n\t* include/ext/throw_allocator.h: Same.\n\t* include/ext/pod_char_traits.h: Same.\n\t* include/ext/malloc_allocator.h: Same.\n\t* libsupc++/del_op.cc: Same, simplify.\n\n\t* include/bits/c++config: Adjust macro name.\n\t\n\t* include/c_global/cstring: Alphabetize.\n\t* include/c_global/cwctype: Same.\n\nFrom-SVN: r123710", "tree": {"sha": "5d9d229c2cc4878453751b14c926f66621ec5898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d9d229c2cc4878453751b14c926f66621ec5898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113008b54b1405325b472e7eef9811c1340560f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113008b54b1405325b472e7eef9811c1340560f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113008b54b1405325b472e7eef9811c1340560f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113008b54b1405325b472e7eef9811c1340560f3/comments", "author": null, "committer": null, "parents": [{"sha": "e9793dae58b5eaa6bf0a939be473f98dd83719f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9793dae58b5eaa6bf0a939be473f98dd83719f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9793dae58b5eaa6bf0a939be473f98dd83719f6"}], "stats": {"total": 112, "additions": 64, "deletions": 48}, "files": [{"sha": "68f0447bb7104083b6b6e67c69d38976a34d2e5b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -1,3 +1,20 @@\n+2007-04-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\tcc_hash_max_collision_check_resize_trigger_imp.hpp: Qualify\n+\tnamespace std members.\t\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tcounter_lu_metadata.hpp: Same.\n+\t* include/ext/throw_allocator.h: Same.\n+\t* include/ext/pod_char_traits.h: Same.\n+\t* include/ext/malloc_allocator.h: Same.\n+\t* libsupc++/del_op.cc: Same, simplify.\n+\n+\t* include/bits/c++config: Adjust macro name.\n+\t\n+\t* include/c_global/cstring: Alphabetize.\n+\t* include/c_global/cwctype: Same.\n+\t\n 2007-04-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/cmath: Include <bits/stl_algobase.h> instead of"}, {"sha": "f4e951c50ab64610cd61fc543be8341ec2faba62", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -51,7 +51,7 @@\n // includes that inject C90/C99 names into the global namespace.\n // XXX May not be necessary\n #if __cplusplus == 199711L\n-# define _GLIBCXX_NAMESPACE_C 1\n+# define _GLIBCXX_NAMESPACE_GLOBAL_INJECTION 1\n #endif\n \n // Macros for visibility."}, {"sha": "c41df692cdf1932b7a896cc9a337dc808ab737f8", "filename": "libstdc++-v3/include/c_global/cstring", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -52,50 +52,49 @@\n #define _GLIBCXX_CSTRING 1\n \n // Get rid of those macros defined in <string.h> in lieu of real functions.\n+#undef memchr\n+#undef memcmp\n #undef memcpy\n #undef memmove\n-#undef strcpy\n-#undef strncpy\n+#undef memset\n #undef strcat\n-#undef strncat\n-#undef memcmp\n+#undef strchr\n #undef strcmp\n #undef strcoll\n-#undef strncmp\n-#undef strxfrm\n-#undef memchr\n-#undef strchr\n+#undef strcpy\n #undef strcspn\n+#undef strerror\n+#undef strlen\n+#undef strncat\n+#undef strncmp\n+#undef strncpy\n #undef strpbrk\n #undef strrchr\n #undef strspn\n #undef strstr\n #undef strtok\n-#undef memset\n-#undef strerror\n-#undef strlen\n+#undef strxfrm\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  using ::memchr;\n+  using ::memcmp;\n   using ::memcpy;\n   using ::memmove;\n-  using ::strcpy;\n-  using ::strncpy;\n+  using ::memset;\n   using ::strcat;\n-  using ::strncat;\n-  using ::memcmp;\n   using ::strcmp;\n   using ::strcoll;\n-  using ::strncmp;\n-  using ::strxfrm;\n+  using ::strcpy;\n   using ::strcspn;\n-  using ::strspn;\n-  using ::strtok;\n-  using ::memset;\n   using ::strerror;\n   using ::strlen;\n-\n-  using ::memchr;\n+  using ::strncat;\n+  using ::strncmp;\n+  using ::strncpy;\n+  using ::strspn;\n+  using ::strtok;\n+  using ::strxfrm;\n \n   inline void*\n   memchr(void* __p, int __c, size_t __n)"}, {"sha": "5c8d59846b3bbc3b72a8e31f31090e63c91c7a02", "filename": "libstdc++-v3/include/c_global/cwctype", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -79,10 +79,9 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  using ::wint_t;\t  // cwchar\n-\n-  using ::wctype_t;\n   using ::wctrans_t;\n+  using ::wctype_t;\n+  using ::wint_t;\n \n   using ::iswalnum;\n   using ::iswalpha;"}, {"sha": "531045b632538aa6ce8670a3e4c35f23ede97c72", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -1,6 +1,7 @@\n // Allocator that wraps \"C\" malloc -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -89,7 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \tif (__builtin_expect(__n > this->max_size(), false))\n \t  std::__throw_bad_alloc();\n \n-\tpointer __ret = static_cast<_Tp*>(malloc(__n * sizeof(_Tp)));\n+\tpointer __ret = static_cast<_Tp*>(std::malloc(__n * sizeof(_Tp)));\n \tif (!__ret)\n \t  std::__throw_bad_alloc();\n \treturn __ret;\n@@ -98,7 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // __p is not permitted to be a null pointer.\n       void\n       deallocate(pointer __p, size_type)\n-      { free(static_cast<void*>(__p)); }\n+      { std::free(static_cast<void*>(__p)); }\n \n       size_type\n       max_size() const throw() "}, {"sha": "e02c6fbfe49fbfc7607478109054301d5d8daeb8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/counter_lu_metadata.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_metadata.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_metadata.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_metadata.hpp?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -76,7 +76,7 @@ namespace pb_ds\n \n       counter_lu_metadata<size_type>\n       operator()(size_type max_size) const\n-      { return counter_lu_metadata<Size_Type>(rand() % max_size); }\n+      { return counter_lu_metadata<Size_Type>(std::rand() % max_size); }\n \n       template<typename Metadata_Reference>\n       bool"}, {"sha": "fa3a056f1fc3235ac1813f835e007ea1b15c4aec", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/cc_hash_max_collision_check_resize_trigger_imp.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fcc_hash_max_collision_check_resize_trigger_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fcc_hash_max_collision_check_resize_trigger_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fcc_hash_max_collision_check_resize_trigger_imp.hpp?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -161,8 +161,8 @@ PB_DS_CLASS_C_DEC::\n calc_max_num_coll()\n {\n   // max_col <-- \\sqrt{2 load \\ln( 2 m \\ln( m ) ) }\n-  const double ln_arg = 2 * m_size * ::log(double(m_size));\n-  m_max_col = size_type(::ceil(::sqrt(2 * m_load * ::log(ln_arg))));\n+  const double ln_arg = 2 * m_size * std::log(double(m_size));\n+  m_max_col = size_type(std::ceil(std::sqrt(2 * m_load * std::log(ln_arg))));\n \n #ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n   std::cerr << \"chmccrt::calc_max_num_coll \" "}, {"sha": "ab3d99e12efe62a2bd9f5deb3967d039af4e810a", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -1,6 +1,6 @@\n // POD character, std::char_traits specialization -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,7 +46,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   // int_type to properly hold the full range of char_type values as\n   // well as EOF.\n   /// @brief A POD class that serves as a character abstraction class.\n-  template<typename V, typename I, typename S = mbstate_t>\n+  template<typename V, typename I, typename S = std::mbstate_t>\n     struct character\n     {\n       typedef V\t\t\t\tvalue_type;"}, {"sha": "869aa4245ec5230880fd0f249b4383e5dbeb745e", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -109,7 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       : _M_throw_prob_orig(_S_throw_prob)\n       {\n \t_S_throw_prob =\n-\t  1 - ::pow(double(1 - _S_throw_prob), double(0.5 / (size + 1)));\n+\t  1 - std::pow(double(1 - _S_throw_prob), double(0.5 / (size + 1)));\n       }\n \n       ~group_throw_prob_adjustor()"}, {"sha": "e4bbffaba305f015688d1c8aa271ccb10510fb3e", "filename": "libstdc++-v3/libsupc++/del_op.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113008b54b1405325b472e7eef9811c1340560f3/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc?ref=113008b54b1405325b472e7eef9811c1340560f3", "patch": "@@ -1,6 +1,6 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2004 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2007 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -29,22 +29,22 @@\n // the GNU General Public License.\n \n #include <bits/c++config.h>\n-#include \"new\"\n-#if _GLIBCXX_HOSTED\n-#include <cstdlib>\n-#endif\n \n-#if _GLIBCXX_HOSTED\n-using std::free;\n-#else\n+#if !_GLIBCXX_HOSTED\n // A freestanding C runtime may not provide \"free\" -- but there is no\n // other reasonable way to implement \"operator delete\".\n-extern \"C\" void free(void *);\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+  extern \"C\" void free(void*);\n+_GLIBCXX_END_NAMESPACE\n+#else\n+# include <cstdlib>\n #endif\n \n+#include \"new\"\n+\n _GLIBCXX_WEAK_DEFINITION void\n-operator delete (void *ptr) throw ()\n+operator delete(void* ptr) throw ()\n {\n   if (ptr)\n-    free (ptr);\n+    std::free(ptr);\n }"}]}