{"sha": "6124f4248888484f419671f4f7bd40d253d3de06", "node_id": "C_kwDOANBUbNoAKDYxMjRmNDI0ODg4ODQ4NGY0MTk2NzFmNGY3YmQ0MGQyNTNkM2RlMDY", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2022-06-03T08:22:25Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2022-06-03T08:22:25Z"}, "message": "configure: arrange to use appropriate objcopy\n\nUsing the system objcopy is wrong when other configure checks have\nprobed a different set of binutils (I've noticed the problem on a system\nwhere the base objcopy can't deal with compressed debug sections).\nArrange for the matching one to be picked up, first and foremost if an\n\"in tree\" one is available, by mirroring respective logic already\npresent for nm.\n\ngcc/\n\n\t* Makefile.in (ORIGINAL_OBJCOPY_FOR_TARGET): New.\n\t* configure.ac: Check for objcopy, producing\n\tORIGINAL_OBJCOPY_FOR_TARGET.\n\t* configure: Update accordingly.\n\t* exec-tool.in (ORIGINAL_OBJCOPY_FOR_TARGET): New.\n\tHandle objcopy.", "tree": {"sha": "7cc681c73410c6031e7a800bc82886c596311c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cc681c73410c6031e7a800bc82886c596311c73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6124f4248888484f419671f4f7bd40d253d3de06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6124f4248888484f419671f4f7bd40d253d3de06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6124f4248888484f419671f4f7bd40d253d3de06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6124f4248888484f419671f4f7bd40d253d3de06/comments", "author": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4630b65d12046ecc477d382f5a2094b8250b21b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4630b65d12046ecc477d382f5a2094b8250b21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4630b65d12046ecc477d382f5a2094b8250b21b"}], "stats": {"total": 120, "additions": 119, "deletions": 1}, "files": [{"sha": "eea996c6c9b3a2dd35c8e994ba7fc196d88eea2d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6124f4248888484f419671f4f7bd40d253d3de06/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6124f4248888484f419671f4f7bd40d253d3de06/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6124f4248888484f419671f4f7bd40d253d3de06", "patch": "@@ -499,6 +499,7 @@ RANLIB_FOR_TARGET := $(shell \\\n ORIGINAL_LD_FOR_TARGET = @ORIGINAL_LD_FOR_TARGET@\n ORIGINAL_NM_FOR_TARGET = @ORIGINAL_NM_FOR_TARGET@\n NM_FOR_TARGET = ./nm\n+ORIGINAL_OBJCOPY_FOR_TARGET = @ORIGINAL_OBJCOPY_FOR_TARGET@\n STRIP_FOR_TARGET := $(shell \\\n   if [ -f $(objdir)/../binutils/strip-new ] ; then \\\n     echo $(objdir)/../binutils/strip-new ; \\"}, {"sha": "095065ed01a33322c1dcdab71b26f53cab3167d9", "filename": "gcc/configure", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6124f4248888484f419671f4f7bd40d253d3de06/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6124f4248888484f419671f4f7bd40d253d3de06/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6124f4248888484f419671f4f7bd40d253d3de06", "patch": "@@ -733,6 +733,8 @@ gcc_cv_readelf\n gcc_cv_objdump\n ORIGINAL_NM_FOR_TARGET\n gcc_cv_nm\n+ORIGINAL_OBJCOPY_FOR_TARGET\n+gcc_cv_objcopy\n ORIGINAL_LD_GOLD_FOR_TARGET\n ORIGINAL_LD_BFD_FOR_TARGET\n ORIGINAL_LD_FOR_TARGET\n@@ -23436,6 +23438,83 @@ case \"$ORIGINAL_NM_FOR_TARGET\" in\n  ;;\n esac\n \n+# Figure out what objcopy we will be using.\n+if ${gcc_cv_objcopy+:} false; then :\n+\n+else\n+\n+if test -f $gcc_cv_binutils_srcdir/configure.ac \\\n+     && test -f ../binutils/Makefile \\\n+     && test x$build = x$host; then\n+\tgcc_cv_objcopy=../binutils/objcopy$build_exeext\n+elif test -x objcopy$build_exeext; then\n+\tgcc_cv_objcopy=./objcopy$build_exeext\n+elif ( set dummy $OBJCOPY_FOR_TARGET; test -x $2 ); then\n+        gcc_cv_objcopy=\"$OBJCOPY_FOR_TARGET\"\n+else\n+        # Extract the first word of \"$OBJCOPY_FOR_TARGET\", so it can be a program name with args.\n+set dummy $OBJCOPY_FOR_TARGET; ac_word=$2\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n+$as_echo_n \"checking for $ac_word... \" >&6; }\n+if ${ac_cv_path_gcc_cv_objcopy+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  case $gcc_cv_objcopy in\n+  [\\\\/]* | ?:[\\\\/]*)\n+  ac_cv_path_gcc_cv_objcopy=\"$gcc_cv_objcopy\" # Let the user override the test with a path.\n+  ;;\n+  *)\n+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n+for as_dir in $PATH\n+do\n+  IFS=$as_save_IFS\n+  test -z \"$as_dir\" && as_dir=.\n+    for ac_exec_ext in '' $ac_executable_extensions; do\n+  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n+    ac_cv_path_gcc_cv_objcopy=\"$as_dir/$ac_word$ac_exec_ext\"\n+    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n+    break 2\n+  fi\n+done\n+  done\n+IFS=$as_save_IFS\n+\n+  ;;\n+esac\n+fi\n+gcc_cv_objcopy=$ac_cv_path_gcc_cv_objcopy\n+if test -n \"$gcc_cv_objcopy\"; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_objcopy\" >&5\n+$as_echo \"$gcc_cv_objcopy\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+\n+\n+fi\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking what objcopy to use\" >&5\n+$as_echo_n \"checking what objcopy to use... \" >&6; }\n+if test \"$gcc_cv_objcopy\" = ../binutils/objcopy$build_exeext; then\n+\t# Single tree build which includes binutils.\n+\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: newly built objcopy\" >&5\n+$as_echo \"newly built objcopy\" >&6; }\n+\tin_tree_objcopy=yes\n+else\n+\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_objcopy\" >&5\n+$as_echo \"$gcc_cv_objcopy\" >&6; }\n+\tin_tree_objcopy=no\n+fi\n+\n+ORIGINAL_OBJCOPY_FOR_TARGET=$gcc_cv_objcopy\n+\n+case \"$ORIGINAL_OBJCOPY_FOR_TARGET\" in\n+  ./objcopy | ./objcopy$build_exeext) ;;\n+  *) ac_config_files=\"$ac_config_files objcopy:exec-tool.in\"\n+ ;;\n+esac\n \n # Figure out what objdump we will be using.\n if ${gcc_cv_objdump+:} false; then :\n@@ -33176,6 +33255,7 @@ do\n     \"as\") CONFIG_FILES=\"$CONFIG_FILES as:exec-tool.in\" ;;\n     \"collect-ld\") CONFIG_FILES=\"$CONFIG_FILES collect-ld:exec-tool.in\" ;;\n     \"nm\") CONFIG_FILES=\"$CONFIG_FILES nm:exec-tool.in\" ;;\n+    \"objcopy\") CONFIG_FILES=\"$CONFIG_FILES objcopy:exec-tool.in\" ;;\n     \"dsymutil\") CONFIG_FILES=\"$CONFIG_FILES dsymutil:exec-tool.in\" ;;\n     \"clearcap.map\") CONFIG_LINKS=\"$CONFIG_LINKS clearcap.map:${srcdir}/config/$clearcap_map\" ;;\n     \"$all_outputs\") CONFIG_FILES=\"$CONFIG_FILES $all_outputs\" ;;\n@@ -33811,6 +33891,7 @@ $as_echo \"$as_me: executing $ac_file commands\" >&6;}\n     \"as\":F) chmod +x as ;;\n     \"collect-ld\":F) chmod +x collect-ld ;;\n     \"nm\":F) chmod +x nm ;;\n+    \"objcopy\":F) chmod +x objcopy ;;\n     \"dsymutil\":F) chmod +x dsymutil ;;\n     \"default\":C)\n case ${CONFIG_HEADERS} in"}, {"sha": "e098b9056221963b2a6d2ca66efa37f946eb21bc", "filename": "gcc/configure.ac", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6124f4248888484f419671f4f7bd40d253d3de06/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6124f4248888484f419671f4f7bd40d253d3de06/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=6124f4248888484f419671f4f7bd40d253d3de06", "patch": "@@ -2815,6 +2815,36 @@ case \"$ORIGINAL_NM_FOR_TARGET\" in\n   *) AC_CONFIG_FILES(nm:exec-tool.in, [chmod +x nm]) ;;\n esac\n \n+# Figure out what objcopy we will be using.\n+AS_VAR_SET_IF(gcc_cv_objcopy,, [\n+if test -f $gcc_cv_binutils_srcdir/configure.ac \\\n+     && test -f ../binutils/Makefile \\\n+     && test x$build = x$host; then\n+\tgcc_cv_objcopy=../binutils/objcopy$build_exeext\n+elif test -x objcopy$build_exeext; then\n+\tgcc_cv_objcopy=./objcopy$build_exeext\n+elif ( set dummy $OBJCOPY_FOR_TARGET; test -x $[2] ); then\n+        gcc_cv_objcopy=\"$OBJCOPY_FOR_TARGET\"\n+else\n+        AC_PATH_PROG(gcc_cv_objcopy, $OBJCOPY_FOR_TARGET)\n+fi])\n+\n+AC_MSG_CHECKING(what objcopy to use)\n+if test \"$gcc_cv_objcopy\" = ../binutils/objcopy$build_exeext; then\n+\t# Single tree build which includes binutils.\n+\tAC_MSG_RESULT(newly built objcopy)\n+\tin_tree_objcopy=yes\n+else\n+\tAC_MSG_RESULT($gcc_cv_objcopy)\n+\tin_tree_objcopy=no\n+fi\n+\n+ORIGINAL_OBJCOPY_FOR_TARGET=$gcc_cv_objcopy\n+AC_SUBST(ORIGINAL_OBJCOPY_FOR_TARGET)\n+case \"$ORIGINAL_OBJCOPY_FOR_TARGET\" in\n+  ./objcopy | ./objcopy$build_exeext) ;;\n+  *) AC_CONFIG_FILES(objcopy:exec-tool.in, [chmod +x objcopy]) ;;\n+esac\n \n # Figure out what objdump we will be using.\n AS_VAR_SET_IF(gcc_cv_objdump,, ["}, {"sha": "3a0fefa70c9e4ec98e02af259cbfafe814ed7362", "filename": "gcc/exec-tool.in", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6124f4248888484f419671f4f7bd40d253d3de06/gcc%2Fexec-tool.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6124f4248888484f419671f4f7bd40d253d3de06/gcc%2Fexec-tool.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexec-tool.in?ref=6124f4248888484f419671f4f7bd40d253d3de06", "patch": "@@ -17,14 +17,15 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Invoke as, ld or nm from the build tree.\n+# Invoke as, ld, nm, or objcopy from the build tree.\n \n ORIGINAL_AS_FOR_TARGET=\"@ORIGINAL_AS_FOR_TARGET@\"\n ORIGINAL_LD_FOR_TARGET=\"@ORIGINAL_LD_FOR_TARGET@\"\n ORIGINAL_LD_BFD_FOR_TARGET=\"@ORIGINAL_LD_BFD_FOR_TARGET@\"\n ORIGINAL_LD_GOLD_FOR_TARGET=\"@ORIGINAL_LD_GOLD_FOR_TARGET@\"\n ORIGINAL_PLUGIN_LD_FOR_TARGET=\"@ORIGINAL_PLUGIN_LD_FOR_TARGET@\"\n ORIGINAL_NM_FOR_TARGET=\"@ORIGINAL_NM_FOR_TARGET@\"\n+ORIGINAL_OBJCOPY_FOR_TARGET=\"@ORIGINAL_OBJCOPY_FOR_TARGET@\"\n ORIGINAL_DSYMUTIL_FOR_TARGET=\"@ORIGINAL_DSYMUTIL_FOR_TARGET@\"\n exeext=@host_exeext@\n fast_install=@enable_fast_install@\n@@ -72,6 +73,11 @@ case \"$invoked\" in\n     prog=nm-new$exeext\n     dir=binutils\n     ;;\n+  objcopy)\n+    original=$ORIGINAL_OBJCOPY_FOR_TARGET\n+    prog=objcopy$exeext\n+    dir=binutils\n+    ;;\n   dsymutil)\n     original=$ORIGINAL_DSYMUTIL_FOR_TARGET\n     # We do not build this in tree - but still want to be able to execute"}]}