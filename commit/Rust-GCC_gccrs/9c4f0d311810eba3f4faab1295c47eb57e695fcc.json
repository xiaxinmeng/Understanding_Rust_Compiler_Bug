{"sha": "9c4f0d311810eba3f4faab1295c47eb57e695fcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM0ZjBkMzExODEwZWJhM2Y0ZmFhYjEyOTVjNDdlYjU3ZTY5NWZjYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-15T13:25:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-20T08:48:42Z"}, "message": "tree-optimization/93094 pass down VECTORIZED_CALL to versioning\n\nWhen versioning is run the IL is already mangled and finding\na VECTORIZED_CALL IFN can fail.\n\n2020-01-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/93094\n\t* tree-vectorizer.h (vect_loop_versioning): Adjust.\n\t(vect_transform_loop): Likewise.\n\t* tree-vectorizer.c (try_vectorize_loop_1): Pass down\n\tloop_vectorized_call to vect_transform_loop.\n\t* tree-vect-loop.c (vect_transform_loop): Pass down\n\tloop_vectorized_call to vect_loop_versioning.\n\t* tree-vect-loop-manip.c (vect_loop_versioning): Use\n\tthe earlier discovered loop_vectorized_call.\n\n\t* gcc.dg/vect/pr93094.c: New testcase.", "tree": {"sha": "e3106f187f8e8c8c359cf9ae58aa14038749a0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3106f187f8e8c8c359cf9ae58aa14038749a0be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c4f0d311810eba3f4faab1295c47eb57e695fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4f0d311810eba3f4faab1295c47eb57e695fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4f0d311810eba3f4faab1295c47eb57e695fcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4f0d311810eba3f4faab1295c47eb57e695fcc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4d83eba60b5b1292a7cae660f03a2377e92a845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d83eba60b5b1292a7cae660f03a2377e92a845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4d83eba60b5b1292a7cae660f03a2377e92a845"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "9d493cc4386f08dda07e6ec66dfeaee8b18fd0fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c4f0d311810eba3f4faab1295c47eb57e695fcc", "patch": "@@ -1,3 +1,15 @@\n+2020-01-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93094\n+\t* tree-vectorizer.h (vect_loop_versioning): Adjust.\n+\t(vect_transform_loop): Likewise.\n+\t* tree-vectorizer.c (try_vectorize_loop_1): Pass down\n+\tloop_vectorized_call to vect_transform_loop.\n+\t* tree-vect-loop.c (vect_transform_loop): Pass down\n+\tloop_vectorized_call to vect_loop_versioning.\n+\t* tree-vect-loop-manip.c (vect_loop_versioning): Use\n+\tthe earlier discovered loop_vectorized_call.\n+\n 2020-01-19  Eric S. Raymond <esr@thyrsus.com>\n \n \t* doc/contribute.texi: Update for SVN -> Git transition."}, {"sha": "cae0c163e39f84e66f157e321967a5f9bf47bc4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c4f0d311810eba3f4faab1295c47eb57e695fcc", "patch": "@@ -1,3 +1,8 @@\n+2020-01-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93094\n+\t* gcc.dg/vect/pr93094.c: New testcase.\n+\n 2020-01-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/CVE-2005-1689-dedupe-issue.c: Ensure that all"}, {"sha": "79c3e891db100ef985bad0224834672517ddb7e7", "filename": "gcc/testsuite/gcc.dg/vect/pr93094.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93094.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93094.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93094.c?ref=9c4f0d311810eba3f4faab1295c47eb57e695fcc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3 -fno-tree-pre\" } */\n+/* { dg-additional-options \"-mavx512bw\" { target x86_64-*-* i?86-*-* } } */\n+\n+void\n+ll (char *un, char *rr, int te, int fp, int nb)\n+{\n+  const int xe = nb & 1;\n+\n+  while (fp-- != 0)\n+    {\n+      if ((rr[0] & xe) == 0)\n+        un[0] = 0;\n+\n+      un += te;\n+      rr += te;\n+    }\n+}"}, {"sha": "0ee1ab45c07d548d8938ae75f5c655b504b74f1e", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=9c4f0d311810eba3f4faab1295c47eb57e695fcc", "patch": "@@ -3205,7 +3205,8 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo, tree * cond_expr)\n    *COND_EXPR_STMT_LIST.  */\n \n class loop *\n-vect_loop_versioning (loop_vec_info loop_vinfo)\n+vect_loop_versioning (loop_vec_info loop_vinfo,\n+\t\t      gimple *loop_vectorized_call)\n {\n   class loop *loop = LOOP_VINFO_LOOP (loop_vinfo), *nloop;\n   class loop *scalar_loop = LOOP_VINFO_SCALAR_LOOP (loop_vinfo);\n@@ -3339,18 +3340,18 @@ vect_loop_versioning (loop_vec_info loop_vinfo)\n      if-conversion re-use that.  Note we cannot re-use the copy of\n      an if-converted outer-loop when vectorizing the inner loop only.  */\n   gcond *cond;\n-  gimple *call;\n   if ((!loop_to_version->inner || loop == loop_to_version)\n-      && (call = vect_loop_vectorized_call (loop_to_version, &cond)))\n+      && loop_vectorized_call)\n     {\n       gcc_assert (scalar_loop);\n-      condition_bb = gimple_bb (cond);\n+      condition_bb = gimple_bb (loop_vectorized_call);\n+      cond = as_a <gcond *> (last_stmt (condition_bb));\n       gimple_cond_set_condition_from_tree (cond, cond_expr);\n       update_stmt (cond);\n \n       if (cond_expr_stmt_list)\n \t{\n-\t  cond_exp_gsi = gsi_for_stmt (call);\n+\t  cond_exp_gsi = gsi_for_stmt (loop_vectorized_call);\n \t  gsi_insert_seq_before (&cond_exp_gsi, cond_expr_stmt_list,\n \t\t\t\t GSI_SAME_STMT);\n \t}"}, {"sha": "b4cfad875ab1dad18a325401b0648bef155056ec", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=9c4f0d311810eba3f4faab1295c47eb57e695fcc", "patch": "@@ -8487,7 +8487,7 @@ update_epilogue_loop_vinfo (class loop *epilogue, tree advance)\n    Returns scalar epilogue loop if any.  */\n \n class loop *\n-vect_transform_loop (loop_vec_info loop_vinfo)\n+vect_transform_loop (loop_vec_info loop_vinfo, gimple *loop_vectorized_call)\n {\n   class loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   class loop *epilogue = NULL;\n@@ -8538,7 +8538,7 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n   if (LOOP_REQUIRES_VERSIONING (loop_vinfo))\n     {\n       class loop *sloop\n-\t= vect_loop_versioning (loop_vinfo);\n+\t= vect_loop_versioning (loop_vinfo, loop_vectorized_call);\n       sloop->force_vectorize = false;\n       check_profitability = false;\n     }"}, {"sha": "8f9444d58a3248c028a192625c22ce1650fc9027", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=9c4f0d311810eba3f4faab1295c47eb57e695fcc", "patch": "@@ -986,7 +986,8 @@ try_vectorize_loop_1 (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n \t\t\t \"loop vectorized using variable length vectors\\n\");\n     }\n \n-  loop_p new_loop = vect_transform_loop (loop_vinfo);\n+  loop_p new_loop = vect_transform_loop (loop_vinfo,\n+\t\t\t\t\t loop_vectorized_call);\n   (*num_vectorized_loops)++;\n   /* Now that the loop has been vectorized, allow it to be unrolled\n      etc.  */"}, {"sha": "f7becb34ab41c645e5e76065377d78f2af39a09a", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f0d311810eba3f4faab1295c47eb57e695fcc/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=9c4f0d311810eba3f4faab1295c47eb57e695fcc", "patch": "@@ -1682,7 +1682,7 @@ extern void vect_set_loop_condition (class loop *, loop_vec_info,\n extern bool slpeel_can_duplicate_loop_p (const class loop *, const_edge);\n class loop *slpeel_tree_duplicate_loop_to_edge_cfg (class loop *,\n \t\t\t\t\t\t     class loop *, edge);\n-class loop *vect_loop_versioning (loop_vec_info);\n+class loop *vect_loop_versioning (loop_vec_info, gimple *);\n extern class loop *vect_do_peeling (loop_vec_info, tree, tree,\n \t\t\t\t    tree *, tree *, tree *, int, bool, bool,\n \t\t\t\t    tree *);\n@@ -1821,7 +1821,7 @@ extern tree vect_get_loop_mask (gimple_stmt_iterator *, vec_loop_masks *,\n extern stmt_vec_info info_for_reduction (stmt_vec_info);\n \n /* Drive for loop transformation stage.  */\n-extern class loop *vect_transform_loop (loop_vec_info);\n+extern class loop *vect_transform_loop (loop_vec_info, gimple *);\n extern opt_loop_vec_info vect_analyze_loop_form (class loop *,\n \t\t\t\t\t\t vec_info_shared *);\n extern bool vectorizable_live_operation (stmt_vec_info, gimple_stmt_iterator *,"}]}