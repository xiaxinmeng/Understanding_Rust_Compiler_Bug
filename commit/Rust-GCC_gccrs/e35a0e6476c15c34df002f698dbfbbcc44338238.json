{"sha": "e35a0e6476c15c34df002f698dbfbbcc44338238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1YTBlNjQ3NmMxNWMzNGRmMDAyZjY5OGRiZmJiY2M0NDMzODIzOA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-02-08T16:41:18Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-02-08T16:41:18Z"}, "message": "trans-stmt.c (gfc_trans_forall_1): Optimize the cases where the mask expression is a compile-time constant...\n\n\n\t* trans-stmt.c (gfc_trans_forall_1): Optimize the cases where the\n\tmask expression is a compile-time constant (\".true.\" or \".false.\").\n\n\t* gfortran.dg/forall_8.f90: New test case.\n\t* gfortran.dg/forall_9.f90: Likewise.\n\nFrom-SVN: r121714", "tree": {"sha": "75e0d7456cf8fa5760ed4e45b9344dabaa89e88e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75e0d7456cf8fa5760ed4e45b9344dabaa89e88e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e35a0e6476c15c34df002f698dbfbbcc44338238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35a0e6476c15c34df002f698dbfbbcc44338238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35a0e6476c15c34df002f698dbfbbcc44338238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35a0e6476c15c34df002f698dbfbbcc44338238/comments", "author": null, "committer": null, "parents": [{"sha": "f3062b0d1f9cc6f8fdf31fc9e00617e1319d20fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3062b0d1f9cc6f8fdf31fc9e00617e1319d20fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3062b0d1f9cc6f8fdf31fc9e00617e1319d20fa"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "59636dbc6c4f2cf1775c34cde95a1ccb6c3f77ca", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e35a0e6476c15c34df002f698dbfbbcc44338238", "patch": "@@ -1,3 +1,8 @@\n+2007-02-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* trans-stmt.c (gfc_trans_forall_1): Optimize the cases where the\n+\tmask expression is a compile-time constant (\".true.\" or \".false.\").\n+\n 2007-02-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/30611"}, {"sha": "db92c02d3d46ca1fcbefa21eb123f863826567df", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=e35a0e6476c15c34df002f698dbfbbcc44338238", "patch": "@@ -2458,6 +2458,13 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n   gfc_saved_var *saved_vars;\n   iter_info *this_forall;\n   forall_info *info;\n+  bool need_mask;\n+\n+  /* Do nothing if the mask is false.  */\n+  if (code->expr\n+      && code->expr->expr_type == EXPR_CONSTANT\n+      && !code->expr->value.logical)\n+    return build_empty_stmt ();\n \n   n = 0;\n   /* Count the FORALL index number.  */\n@@ -2557,8 +2564,20 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n   info->nvar = nvar;\n   info->size = size;\n \n-  /* First we need to allocate the mask.  */\n   if (code->expr)\n+    {\n+      /* If the mask is .true., consider the FORALL unconditional.  */\n+      if (code->expr->expr_type == EXPR_CONSTANT\n+\t  && code->expr->value.logical)\n+\tneed_mask = false;\n+      else\n+\tneed_mask = true;\n+    }\n+  else\n+    need_mask = false;\n+\n+  /* First we need to allocate the mask.  */\n+  if (need_mask)\n     {\n       /* As the mask array can be very big, prefer compact boolean types.  */\n       tree mask_type = gfc_get_logical_type (gfc_logical_kinds[0].kind);\n@@ -2583,7 +2602,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n \n   /* Copy the mask into a temporary variable if required.\n      For now we assume a mask temporary is needed.  */\n-  if (code->expr)\n+  if (need_mask)\n     {\n       /* As the mask array can be very big, prefer compact boolean types.  */\n       tree mask_type = gfc_get_logical_type (gfc_logical_kinds[0].kind);"}, {"sha": "8454452f30362e3d3968a3c959709cf56ebf216b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e35a0e6476c15c34df002f698dbfbbcc44338238", "patch": "@@ -1,3 +1,8 @@\n+2007-02-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.dg/forall_8.f90: New test case.\n+\t* gfortran.dg/forall_9.f90: Likewise.\n+\n 2007-02-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/builtins-20.c: Add some -~ complex cases."}, {"sha": "b06f3028a0f5a3153db88e38aef9984e452041c3", "filename": "gcc/testsuite/gfortran.dg/forall_8.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_8.f90?ref=e35a0e6476c15c34df002f698dbfbbcc44338238", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+  integer a(100)\n+  forall (i=1:100,.true.)\n+      a(i) = 0\n+  end forall\n+  end\n+! { dg-final { scan-tree-dump-times \"temp\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "12084b1674464b5abeb3fd6aa3a4d657a1e092d8", "filename": "gcc/testsuite/gfortran.dg/forall_9.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35a0e6476c15c34df002f698dbfbbcc44338238/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_9.f90?ref=e35a0e6476c15c34df002f698dbfbbcc44338238", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+  integer a(100)\n+  forall (i=1:100,.false.)\n+      a(i) = 0\n+  end forall\n+  end\n+! { dg-final { scan-tree-dump-times \"temp\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}