{"sha": "24a71ba8ccba19820c0ac4358c46b5d9bbd825b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRhNzFiYThjY2JhMTk4MjBjMGFjNDM1OGM0NmI1ZDliYmQ4MjViOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-05-18T21:16:08Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-05-18T21:16:08Z"}, "message": "ipa.c (update_visibility_by_resolution_info): New function.\n\n\t* ipa.c (update_visibility_by_resolution_info): New function.\n\t(function_and_variable_visibility): Use it.\n\nFrom-SVN: r210592", "tree": {"sha": "aee22104f1c906424fa7c6d5419c00c6dde1ea0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aee22104f1c906424fa7c6d5419c00c6dde1ea0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24a71ba8ccba19820c0ac4358c46b5d9bbd825b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a71ba8ccba19820c0ac4358c46b5d9bbd825b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a71ba8ccba19820c0ac4358c46b5d9bbd825b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a71ba8ccba19820c0ac4358c46b5d9bbd825b8/comments", "author": null, "committer": null, "parents": [{"sha": "40e63ada2b6776980230aa4575e301aafda960d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e63ada2b6776980230aa4575e301aafda960d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e63ada2b6776980230aa4575e301aafda960d1"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "56bf5ce2ffce62e63c91dc9f8387ecac2291107c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a71ba8ccba19820c0ac4358c46b5d9bbd825b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a71ba8ccba19820c0ac4358c46b5d9bbd825b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24a71ba8ccba19820c0ac4358c46b5d9bbd825b8", "patch": "@@ -1,3 +1,8 @@\n+2014-05-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa.c (update_visibility_by_resolution_info): New function.\n+\t(function_and_variable_visibility): Use it.\n+\n 2014-05-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.h (symtab_first_defined_symbol, symtab_next_defined_symbol):"}, {"sha": "ef544615a4a924fbc7365c1e822707a3dbf1caf3", "filename": "gcc/ipa.c", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a71ba8ccba19820c0ac4358c46b5d9bbd825b8/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a71ba8ccba19820c0ac4358c46b5d9bbd825b8/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=24a71ba8ccba19820c0ac4358c46b5d9bbd825b8", "patch": "@@ -978,6 +978,50 @@ can_replace_by_local_alias (symtab_node *node)\n \t  && !symtab_can_be_discarded (node));\n }\n \n+/* In LTO we can remove COMDAT groups and weak symbols.\n+   Either turn them into normal symbols or external symbol depending on \n+   resolution info.  */\n+\n+static void\n+update_visibility_by_resolution_info (symtab_node * node)\n+{\n+  bool define;\n+\n+  if (!node->externally_visible\n+      || (!DECL_WEAK (node->decl) && !DECL_ONE_ONLY (node->decl))\n+      || node->resolution == LDPR_UNKNOWN)\n+    return;\n+\n+  define = (node->resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t    || node->resolution == LDPR_PREVAILING_DEF\n+\t    || node->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP);\n+\n+  /* The linker decisions ought to agree in the whole group.  */\n+  if (node->same_comdat_group)\n+    for (symtab_node *next = node->same_comdat_group;\n+\t next != node; next = next->same_comdat_group)\n+      gcc_assert (!node->externally_visible\n+\t\t  || define == (next->resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t\t\t        || next->resolution == LDPR_PREVAILING_DEF\n+\t\t\t        || next->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP));\n+\n+  if (node->same_comdat_group)\n+    for (symtab_node *next = node->same_comdat_group;\n+\t next != node; next = next->same_comdat_group)\n+      {\n+\tDECL_COMDAT_GROUP (next->decl) = NULL;\n+\tDECL_WEAK (next->decl) = false;\n+\tif (next->externally_visible\n+\t    && !define)\n+\t  DECL_EXTERNAL (next->decl) = true;\n+      }\n+  DECL_COMDAT_GROUP (node->decl) = NULL;\n+  DECL_WEAK (node->decl) = false;\n+  if (!define)\n+    DECL_EXTERNAL (node->decl) = true;\n+  symtab_dissolve_same_comdat_group_list (node);\n+}\n+\n /* Mark visibility of all functions.\n \n    A local function is one whose calls can occur only in the current\n@@ -1116,38 +1160,7 @@ function_and_variable_visibility (bool whole_program)\n \t    DECL_EXTERNAL (node->decl) = 1;\n \t}\n \n-      /* If whole comdat group is used only within LTO code, we can dissolve it,\n-\t we handle the unification ourselves.\n-\t We keep COMDAT and weak so visibility out of DSO does not change.\n-\t Later we may bring the symbols static if they are not exported.  */\n-      if (DECL_ONE_ONLY (node->decl)\n-\t  && (node->resolution == LDPR_PREVAILING_DEF_IRONLY\n-\t      || node->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP))\n-\t{\n-\t  symtab_node *next = node;\n-\n-\t  if (node->same_comdat_group)\n-\t    for (next = node->same_comdat_group;\n-\t\t next != node;\n-\t\t next = next->same_comdat_group)\n-\t      if (next->externally_visible\n-\t\t  && (next->resolution != LDPR_PREVAILING_DEF_IRONLY\n-\t\t      && next->resolution != LDPR_PREVAILING_DEF_IRONLY_EXP))\n-\t\tbreak;\n-\t  if (node == next)\n-\t    {\n-\t      if (node->same_comdat_group)\n-\t        for (next = node->same_comdat_group;\n-\t\t     next != node;\n-\t\t     next = next->same_comdat_group)\n-\t\t{\n-\t\t  DECL_COMDAT_GROUP (next->decl) = NULL;\n-\t\t  DECL_WEAK (next->decl) = false;\n-\t\t}\n-\t      DECL_COMDAT_GROUP (node->decl) = NULL;\n-\t      symtab_dissolve_same_comdat_group_list (node);\n-\t    }\n-\t}\n+      update_visibility_by_resolution_info (node);\n     }\n   FOR_EACH_DEFINED_FUNCTION (node)\n     {\n@@ -1234,6 +1247,7 @@ function_and_variable_visibility (bool whole_program)\n \t    symtab_dissolve_same_comdat_group_list (vnode);\n \t  vnode->resolution = LDPR_PREVAILING_DEF_IRONLY;\n \t}\n+      update_visibility_by_resolution_info (vnode);\n     }\n \n   if (dump_file)"}]}