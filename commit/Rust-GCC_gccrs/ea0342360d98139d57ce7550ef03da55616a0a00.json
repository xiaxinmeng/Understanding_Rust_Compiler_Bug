{"sha": "ea0342360d98139d57ce7550ef03da55616a0a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEwMzQyMzYwZDk4MTM5ZDU3Y2U3NTUwZWYwM2RhNTU2MTZhMGEwMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T09:14:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T09:14:01Z"}, "message": "[multiple changes]\n\n2010-10-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* einfo.ads (Declaration_Node): Clarify documentation, in particular\n\tregarding what is returned for subprogram entities.\n\n2010-10-22  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_attr.adb (Make_Range_Test): Generate a Range node instead of\n\texplicit comparisons, generates simpler expanded code.\n\t* a-except-2005.adb (Rcheck_06_Ext): New.\n\t* gcc-interface/trans.c (gigi, gnat_to_gnu): Handle validity checks\n\tlike range checks.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\n2010-10-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb (Array_Type_Declaration): Error for subtype wi predicate\n\tfor index type\n\t(Constrain_Index): Error of subtype wi predicate in index constraint\n\t* sem_ch9.adb (Analyze_Entry_Declaration): Error of subtype wi\n\tpredicate in entry family.\n\t* sem_res.adb (Resolve_Slice): Error of type wi predicate in slice.\n\n2010-10-22  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Collect_Parents): New subprogram.\n\t(Original_Corresponding_Operation): New subprogram.\n\t(Visible_Ancestors): New subprogram.\n\t* sem_ch6.adb (New_Overloaded_Entity): Handle new case of dispatching\n\toperation that overrides a hidden inherited primitive.\n\t* sem_disp.adb (Find_Hidden_Overridden_Primitive): New subprogram.\n\t(Check_Dispatching_Operation): if the new dispatching operation\n\tdoes not override a visible primtive then check if it overrides\n\tsome hidden inherited primitive.\n\n2010-10-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Analyze_With_Clause): If the parent_unit_name in a with\n\tclause is a child unit that denotes a renaming, replace the\n\tparent_unit_name with a reference to the renamed unit, because the\n\tprefix is irrelevant to subsequent visibility..\n\nFrom-SVN: r165805", "tree": {"sha": "68ee505f7271ae15789c7e40fdda95b33df813b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68ee505f7271ae15789c7e40fdda95b33df813b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea0342360d98139d57ce7550ef03da55616a0a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0342360d98139d57ce7550ef03da55616a0a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0342360d98139d57ce7550ef03da55616a0a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0342360d98139d57ce7550ef03da55616a0a00/comments", "author": null, "committer": null, "parents": [{"sha": "2d4e055322196532ea62b73ae61fd61defde54ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4e055322196532ea62b73ae61fd61defde54ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d4e055322196532ea62b73ae61fd61defde54ca"}], "stats": {"total": 465, "additions": 415, "deletions": 50}, "files": [{"sha": "07ce0f5cfc33c45ccc93dd85dc2cc4062e8e797e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -1,3 +1,45 @@\n+2010-10-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* einfo.ads (Declaration_Node): Clarify documentation, in particular\n+\tregarding what is returned for subprogram entities.\n+\n+2010-10-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_attr.adb (Make_Range_Test): Generate a Range node instead of\n+\texplicit comparisons, generates simpler expanded code.\n+\t* a-except-2005.adb (Rcheck_06_Ext): New.\n+\t* gcc-interface/trans.c (gigi, gnat_to_gnu): Handle validity checks\n+\tlike range checks.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n+2010-10-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb (Array_Type_Declaration): Error for subtype wi predicate\n+\tfor index type\n+\t(Constrain_Index): Error of subtype wi predicate in index constraint\n+\t* sem_ch9.adb (Analyze_Entry_Declaration): Error of subtype wi\n+\tpredicate in entry family.\n+\t* sem_res.adb (Resolve_Slice): Error of type wi predicate in slice.\n+\n+2010-10-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Collect_Parents): New subprogram.\n+\t(Original_Corresponding_Operation): New subprogram.\n+\t(Visible_Ancestors): New subprogram.\n+\t* sem_ch6.adb (New_Overloaded_Entity): Handle new case of dispatching\n+\toperation that overrides a hidden inherited primitive.\n+\t* sem_disp.adb (Find_Hidden_Overridden_Primitive): New subprogram.\n+\t(Check_Dispatching_Operation): if the new dispatching operation\n+\tdoes not override a visible primtive then check if it overrides\n+\tsome hidden inherited primitive.\n+\n+2010-10-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Analyze_With_Clause): If the parent_unit_name in a with\n+\tclause is a child unit that denotes a renaming, replace the\n+\tparent_unit_name with a reference to the renamed unit, because the\n+\tprefix is irrelevant to subsequent visibility..\n+\n 2010-10-22  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads, einfo.adb (Has_Predicates): Flag is now on all entities"}, {"sha": "b53560794b0d880f6205b01f33ae98ec1aee2aa8", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -469,6 +469,8 @@ package body Ada.Exceptions is\n      (File : System.Address; Line, Column : Integer);\n    procedure Rcheck_05_Ext\n      (File : System.Address; Line, Column, Index, First, Last : Integer);\n+   procedure Rcheck_06_Ext\n+     (File : System.Address; Line, Column, Index, First, Last : Integer);\n    procedure Rcheck_12_Ext\n      (File : System.Address; Line, Column, Index, First, Last : Integer);\n \n@@ -509,6 +511,7 @@ package body Ada.Exceptions is\n \n    pragma Export (C, Rcheck_00_Ext, \"__gnat_rcheck_00_ext\");\n    pragma Export (C, Rcheck_05_Ext, \"__gnat_rcheck_05_ext\");\n+   pragma Export (C, Rcheck_06_Ext, \"__gnat_rcheck_06_ext\");\n    pragma Export (C, Rcheck_12_Ext, \"__gnat_rcheck_12_ext\");\n \n    --  None of these procedures ever returns (they raise an exception!). By\n@@ -551,6 +554,7 @@ package body Ada.Exceptions is\n \n    pragma No_Return (Rcheck_00_Ext);\n    pragma No_Return (Rcheck_05_Ext);\n+   pragma No_Return (Rcheck_06_Ext);\n    pragma No_Return (Rcheck_12_Ext);\n \n    ---------------------------------------------\n@@ -1236,6 +1240,17 @@ package body Ada.Exceptions is\n       Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n    end Rcheck_05_Ext;\n \n+   procedure Rcheck_06_Ext\n+     (File : System.Address; Line, Column, Index, First, Last : Integer)\n+   is\n+      Msg : constant String :=\n+              Rmsg_06 (Rmsg_06'First .. Rmsg_06'Last - 1) & ASCII.LF &\n+              \"value \" & Image (Index) & \" not in \" & Image (First) &\n+              \"..\" & Image (Last) & ASCII.NUL;\n+   begin\n+      Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n+   end Rcheck_06_Ext;\n+\n    procedure Rcheck_12_Ext\n      (File : System.Address; Line, Column, Index, First, Last : Integer)\n    is"}, {"sha": "e45d3d7c2f65c1aee5c74639b223761378287eae", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -692,13 +692,15 @@ package Einfo is\n --       details of the use of this field.\n \n --    Declaration_Node (synthesized)\n---       Applies to all entities. Returns the tree node for the declaration\n---       that declared the entity. Normally this is just the Parent of the\n---       entity. One exception arises with child units, where the parent of\n---       the entity is a selected component or a defining program unit name.\n---       Another exception is that if the entity is an incomplete type that\n---       has been completed, then we obtain the declaration node denoted by\n---       the full type, i.e. the full type declaration node.\n+--       Applies to all entities. Returns the tree node for the construct that\n+--       declared the entity. Normally this is just the Parent of the entity.\n+--       One exception arises with child units, where the parent of the entity\n+--       is a selected component/defining program unit name. Another exception\n+--       is that if the entity is an incomplete type that has been completed,\n+--       then we obtain the declaration node denoted by the full type, i.e. the\n+--       full type declaration node. Also note that for subprograms, this\n+--       returns the {function,procedure}_specification, not the subprogram_\n+--       declaration.\n \n --    Default_Expr_Function (Node21)\n --       Present in parameters. It holds the entity of the parameterless"}, {"sha": "2e1073bacdc354e45fab09e82239ae87660d33bb", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -4711,9 +4711,7 @@ package body Exp_Attr is\n \n          function Make_Range_Test return Node_Id;\n          --  Build the code for a range test of the form\n-         --    Btyp!(Pref) >= Btyp!(Ptyp'First)\n-         --      and then\n-         --    Btyp!(Pref) <= Btyp!(Ptyp'Last)\n+         --    Btyp!(Pref) in Btyp!(Ptyp'First) .. Btyp!(Ptyp'Last)\n \n          ---------------------\n          -- Make_Range_Test --\n@@ -4732,24 +4730,17 @@ package body Exp_Attr is\n             end if;\n \n             return\n-              Make_And_Then (Loc,\n-                Left_Opnd =>\n-                  Make_Op_Ge (Loc,\n-                    Left_Opnd =>\n-                      Unchecked_Convert_To (Btyp, Temp),\n-\n-                    Right_Opnd =>\n+              Make_In (Loc,\n+                Left_Opnd  =>\n+                  Unchecked_Convert_To (Btyp, Temp),\n+                Right_Opnd =>\n+                  Make_Range (Loc,\n+                    Low_Bound =>\n                       Unchecked_Convert_To (Btyp,\n                         Make_Attribute_Reference (Loc,\n                           Prefix => New_Occurrence_Of (Ptyp, Loc),\n-                          Attribute_Name => Name_First))),\n-\n-                Right_Opnd =>\n-                  Make_Op_Le (Loc,\n-                    Left_Opnd =>\n-                      Unchecked_Convert_To (Btyp, Temp),\n-\n-                    Right_Opnd =>\n+                          Attribute_Name => Name_First)),\n+                    High_Bound =>\n                       Unchecked_Convert_To (Btyp,\n                         Make_Attribute_Reference (Loc,\n                           Prefix => New_Occurrence_Of (Ptyp, Loc),"}, {"sha": "693619e57e58e60e6ef55d40d6c65a8d638f6aaf", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -1797,20 +1797,21 @@ ada/exp_ch12.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n ada/exp_ch13.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\\n    ada/atree.adb ada/casing.ads ada/checks.ads ada/debug.ads ada/einfo.ads \\\n-   ada/einfo.adb ada/elists.ads ada/elists.adb ada/exp_ch13.ads \\\n-   ada/exp_ch13.adb ada/exp_ch3.ads ada/exp_ch6.ads ada/exp_imgv.ads \\\n-   ada/exp_tss.ads ada/exp_util.ads ada/gnat.ads ada/g-htable.ads \\\n-   ada/hostparm.ads ada/namet.ads ada/nlists.ads ada/nlists.adb \\\n-   ada/nmake.ads ada/nmake.adb ada/opt.ads ada/output.ads ada/rtsfind.ads \\\n-   ada/sem.ads ada/sem_aux.ads ada/sem_ch3.ads ada/sem_ch7.ads \\\n-   ada/sem_ch8.ads ada/sem_eval.ads ada/sem_util.ads ada/sinfo.ads \\\n-   ada/sinfo.adb ada/sinput.ads ada/snames.ads ada/stand.ads \\\n-   ada/system.ads ada/s-exctab.ads ada/s-htable.ads ada/s-imenne.ads \\\n-   ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-stalib.ads \\\n-   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n-   ada/table.ads ada/table.adb ada/tbuild.ads ada/tree_io.ads \\\n-   ada/types.ads ada/uintp.ads ada/uintp.adb ada/unchconv.ads \\\n-   ada/unchdeal.ads ada/urealp.ads ada/validsw.ads \n+   ada/einfo.adb ada/elists.ads ada/elists.adb ada/err_vars.ads \\\n+   ada/errout.ads ada/erroutc.ads ada/exp_ch13.ads ada/exp_ch13.adb \\\n+   ada/exp_ch3.ads ada/exp_ch6.ads ada/exp_imgv.ads ada/exp_tss.ads \\\n+   ada/exp_util.ads ada/gnat.ads ada/g-htable.ads ada/hostparm.ads \\\n+   ada/namet.ads ada/nlists.ads ada/nlists.adb ada/nmake.ads ada/nmake.adb \\\n+   ada/opt.ads ada/output.ads ada/rtsfind.ads ada/sem.ads ada/sem_aux.ads \\\n+   ada/sem_ch3.ads ada/sem_ch7.ads ada/sem_ch8.ads ada/sem_eval.ads \\\n+   ada/sem_util.ads ada/sinfo.ads ada/sinfo.adb ada/sinput.ads \\\n+   ada/snames.ads ada/stand.ads ada/system.ads ada/s-exctab.ads \\\n+   ada/s-htable.ads ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads \\\n+   ada/s-parame.ads ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads \\\n+   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n+   ada/tbuild.ads ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n+   ada/uintp.adb ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \\\n+   ada/validsw.ads \n \n ada/exp_ch2.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\"}, {"sha": "f1598364a7b13a57bacb1d6d667f95058163e9c6", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -482,8 +482,9 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \tgnat_raise_decls_ext[i]\n \t  = build_raise_check (i, t,\n \t\t\t       i == CE_Index_Check_Failed\n-\t\t\t       || i == CE_Range_Check_Failed ?\n-\t\t\t       exception_range : exception_column);\n+\t\t\t       || i == CE_Range_Check_Failed\n+\t\t\t       || i == CE_Invalid_Data\n+\t\t\t       ? exception_range : exception_column);\n     }\n \n   /* Set the types that GCC and Gigi use from the front end.  */\n@@ -5518,7 +5519,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\tgnu_result = build_call_raise_column (reason, gnat_node);\n \t      }\n \t    else if ((reason == CE_Index_Check_Failed\n-\t\t      || reason == CE_Range_Check_Failed)\n+\t\t      || reason == CE_Range_Check_Failed\n+\t\t      || reason == CE_Invalid_Data)\n \t\t     && Nkind (cond) == N_Op_Not\n \t\t     && Nkind (Right_Opnd (cond)) == N_In\n \t\t     && Nkind (Right_Opnd (Right_Opnd (cond))) == N_Range)"}, {"sha": "9ddde90459e87235bdb8d6b43876e7b9ec9a8ee1", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -2556,6 +2556,22 @@ package body Sem_Ch10 is\n          Par_Name := Scope (E_Name);\n          while Nkind (Pref) = N_Selected_Component loop\n             Change_Selected_Component_To_Expanded_Name (Pref);\n+\n+            if Present (Entity (Selector_Name (Pref)))\n+              and then\n+                Present (Renamed_Entity (Entity (Selector_Name (Pref))))\n+              and then Entity (Selector_Name (Pref)) /= Par_Name\n+            then\n+\n+            --  The prefix is a child unit that denotes a renaming\n+            --  declaration. Replace the prefix directly with the renamed\n+            --  unit, because the rest of the prefix is irrelevant to the\n+            --  visibility of the real unit.\n+\n+               Rewrite (Pref, New_Occurrence_Of (Par_Name, Sloc (Pref)));\n+               exit;\n+            end if;\n+\n             Set_Entity_With_Style_Check (Pref, Par_Name);\n \n             Generate_Reference (Par_Name, Pref);"}, {"sha": "22d2fdf551ef0c54c53b3e7e8d0a1a0dbf0be7f2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -446,7 +446,7 @@ package body Sem_Ch3 is\n       Related_Id   : Entity_Id;\n       Suffix       : Character;\n       Suffix_Index : Nat);\n-   --  Process an index constraint in a constrained array declaration. The\n+   --  Process an index constraint S in a constrained array declaration. The\n    --  constraint can be a subtype name, or a range with or without an explicit\n    --  subtype mark. The index is the corresponding index of the unconstrained\n    --  array. The Related_Id and Suffix parameters are used to build the\n@@ -4424,6 +4424,17 @@ package body Sem_Ch3 is\n          end if;\n \n          Make_Index (Index, P, Related_Id, Nb_Index);\n+\n+         --  Check error of subtype with predicate for index type\n+\n+         if Has_Predicates (Etype (Index)) then\n+            Error_Msg_NE\n+              (\"subtype& has predicate, not allowed as index subtype\",\n+               Index, Etype (Index));\n+         end if;\n+\n+         --  Move to next index\n+\n          Next_Index (Index);\n          Nb_Index := Nb_Index + 1;\n       end loop;\n@@ -11332,6 +11343,13 @@ package body Sem_Ch3 is\n \n             elsif Base_Type (Entity (S)) /= Base_Type (T) then\n                Wrong_Type (S, Base_Type (T));\n+\n+            --  Check error of subtype with predicate in index constraint\n+\n+            elsif Has_Predicates (Entity (S)) then\n+               Error_Msg_NE\n+                 (\"subtype& has predicate, not allowed in index consraint\",\n+                  S, Entity (S));\n             end if;\n \n             return;"}, {"sha": "f5853685f0bb5785d9b7dd79193f316e6b7993cd", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -7824,6 +7824,20 @@ package body Sem_Ch6 is\n \n          if Comes_From_Source (S) then\n             Check_Synchronized_Overriding (S, Overridden_Subp);\n+\n+            --  (Ada 2012: AI05-0125-1): If S is a dispatching operation then\n+            --  it may have overridden some hidden inherited primitive. Update\n+            --  Overriden_Subp to avoid spurious errors when checking the\n+            --  overriding indicator.\n+\n+            if Ada_Version >= Ada_2012\n+              and then No (Overridden_Subp)\n+              and then Is_Dispatching_Operation (S)\n+              and then Is_Overriding_Operation (S)\n+            then\n+               Overridden_Subp := Overridden_Operation (S);\n+            end if;\n+\n             Check_Overriding_Indicator\n               (S, Overridden_Subp, Is_Primitive => Is_Primitive_Subp);\n          end if;"}, {"sha": "42297a114e9145f904732035ecea2649be19fa3d", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -879,19 +879,36 @@ package body Sem_Ch9 is\n       Generate_Definition (Def_Id);\n       Tasking_Used := True;\n \n+      --  Case of no discrete subtype definition\n+\n       if No (D_Sdef) then\n          Set_Ekind (Def_Id, E_Entry);\n+\n+      --  Processing for discrete subtype definition present\n+\n       else\n          Enter_Name (Def_Id);\n          Set_Ekind (Def_Id, E_Entry_Family);\n          Analyze (D_Sdef);\n          Make_Index (D_Sdef, N, Def_Id);\n+\n+         --  Check subtype with predicate in entry family\n+\n+         if Has_Predicates (Etype (D_Sdef)) then\n+            Error_Msg_NE\n+              (\"subtype& has predicate, not allowed in entry family\",\n+               D_Sdef, Etype (D_Sdef));\n+         end if;\n       end if;\n \n+      --  Decorate Def_Id\n+\n       Set_Etype          (Def_Id, Standard_Void_Type);\n       Set_Convention     (Def_Id, Convention_Entry);\n       Set_Accept_Address (Def_Id, New_Elmt_List);\n \n+      --  Process formals\n+\n       if Present (Formals) then\n          Set_Scope (Def_Id, Current_Scope);\n          Push_Scope (Def_Id);"}, {"sha": "774c2affc7c9621e7fe5f9fbbe3d6bc80864b934", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 113, "deletions": 6, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -72,6 +72,18 @@ package body Sem_Disp is\n    --  (returning the designated tagged type in the case of an access\n    --  parameter); otherwise returns empty.\n \n+   function Find_Hidden_Overridden_Primitive (S : Entity_Id) return Entity_Id;\n+   --  [Ada 2012:AI-0125] Find an inherited hidden primitive of the dispatching\n+   --  type of S that has the same name of S, a type-conformant profile, an\n+   --  original corresponding operation O that is a primitive of a visible\n+   --  ancestor of the dispatching type of S and O is visible at the point of\n+   --  of declaration of S. If the entity is found the Alias of S is set to the\n+   --  original corresponding operation S and its Overridden_Operation is set\n+   --  to the found entity; otherwise return Empty.\n+   --\n+   --  This routine does not search for non-hidden primitives since they are\n+   --  covered by the normal Ada 2005 rules.\n+\n    -------------------------------\n    -- Add_Dispatching_Operation --\n    -------------------------------\n@@ -741,8 +753,9 @@ package body Sem_Disp is\n \n    procedure Check_Dispatching_Operation (Subp, Old_Subp : Entity_Id) is\n       Tagged_Type            : Entity_Id;\n-      Has_Dispatching_Parent : Boolean := False;\n-      Body_Is_Last_Primitive : Boolean := False;\n+      Has_Dispatching_Parent : Boolean   := False;\n+      Body_Is_Last_Primitive : Boolean   := False;\n+      Ovr_Subp               : Entity_Id := Empty;\n \n    begin\n       if not Ekind_In (Subp, E_Procedure, E_Function) then\n@@ -1078,14 +1091,25 @@ package body Sem_Disp is\n \n       Check_Controlling_Formals (Tagged_Type, Subp);\n \n+      Ovr_Subp := Old_Subp;\n+\n+      --  [Ada 2012:AI-0125]: Search for inherited hidden primitive that may be\n+      --  overridden by Subp\n+\n+      if No (Ovr_Subp)\n+        and then Ada_Version >= Ada_2012\n+      then\n+         Ovr_Subp := Find_Hidden_Overridden_Primitive (Subp);\n+      end if;\n+\n       --  Now it should be a correct primitive operation, put it in the list\n \n-      if Present (Old_Subp) then\n+      if Present (Ovr_Subp) then\n \n          --  If the type has interfaces we complete this check after we set\n          --  attribute Is_Dispatching_Operation.\n \n-         Check_Subtype_Conformant (Subp, Old_Subp);\n+         Check_Subtype_Conformant (Subp, Ovr_Subp);\n \n          if (Chars (Subp) = Name_Initialize\n            or else Chars (Subp) = Name_Adjust\n@@ -1114,7 +1138,7 @@ package body Sem_Disp is\n             end if;\n \n          else\n-            Override_Dispatching_Operation (Tagged_Type, Old_Subp, Subp);\n+            Override_Dispatching_Operation (Tagged_Type, Ovr_Subp, Subp);\n             Set_Is_Overriding_Operation (Subp);\n \n             --  Ada 2005 (AI-251): In case of late overriding of a primitive\n@@ -1183,7 +1207,7 @@ package body Sem_Disp is\n       --  subtype conformance against all the interfaces covered by this\n       --  primitive.\n \n-      if Present (Old_Subp)\n+      if Present (Ovr_Subp)\n         and then Has_Interfaces (Tagged_Type)\n       then\n          declare\n@@ -1649,6 +1673,89 @@ package body Sem_Disp is\n       return Empty;\n    end Find_Dispatching_Type;\n \n+   --------------------------------------\n+   -- Find_Hidden_Overridden_Primitive --\n+   --------------------------------------\n+\n+   function Find_Hidden_Overridden_Primitive (S : Entity_Id) return Entity_Id\n+   is\n+      Tag_Typ   : constant Entity_Id := Find_Dispatching_Type (S);\n+      Elmt      : Elmt_Id;\n+      Orig_Prim : Entity_Id;\n+      Prim      : Entity_Id;\n+      Vis_List  : Elist_Id;\n+\n+   begin\n+      --  This Ada 2012 rule is valid only for type extensions or private\n+      --  extensions\n+\n+      if No (Tag_Typ)\n+        or else not Is_Record_Type (Tag_Typ)\n+        or else Etype (Tag_Typ) = Tag_Typ\n+      then\n+         return Empty;\n+      end if;\n+\n+      --  Collect the list of visible ancestor of the tagged type\n+\n+      Vis_List := Visible_Ancestors (Tag_Typ);\n+\n+      Elmt := First_Elmt (Primitive_Operations (Tag_Typ));\n+      while Present (Elmt) loop\n+         Prim := Node (Elmt);\n+\n+         --  Find an inherited hidden dispatching primitive with the name of S\n+         --  and a type-conformant profile\n+\n+         if Present (Alias (Prim))\n+           and then Is_Hidden (Alias (Prim))\n+           and then Find_Dispatching_Type (Alias (Prim)) /= Tag_Typ\n+           and then Primitive_Names_Match (S, Prim)\n+           and then Type_Conformant (S, Prim)\n+         then\n+            declare\n+               Vis_Ancestor : Elmt_Id;\n+               Elmt         : Elmt_Id;\n+\n+            begin\n+               --  The original corresponding operation of Prim must be an\n+               --  operation of a visible ancestor of the dispatching type\n+               --  of S, and the original corresponding operation of S2 must\n+               --  be visible.\n+\n+               Orig_Prim := Original_Corresponding_Operation (Prim);\n+\n+               if Orig_Prim /= Prim\n+                 and then Is_Immediately_Visible (Orig_Prim)\n+               then\n+                  Vis_Ancestor := First_Elmt (Vis_List);\n+\n+                  while Present (Vis_Ancestor) loop\n+                     Elmt :=\n+                       First_Elmt (Primitive_Operations (Node (Vis_Ancestor)));\n+                     while Present (Elmt) loop\n+                        if Node (Elmt) = Orig_Prim then\n+                           Set_Overridden_Operation (S, Prim);\n+                           Set_Alias (Prim, Orig_Prim);\n+\n+                           return Prim;\n+                        end if;\n+\n+                        Next_Elmt (Elmt);\n+                     end loop;\n+\n+                     Next_Elmt (Vis_Ancestor);\n+                  end loop;\n+               end if;\n+            end;\n+         end if;\n+\n+         Next_Elmt (Elmt);\n+      end loop;\n+\n+      return Empty;\n+   end Find_Hidden_Overridden_Primitive;\n+\n    ---------------------------------------\n    -- Find_Primitive_Covering_Interface --\n    ---------------------------------------"}, {"sha": "6df474133d2cb64d78ec6302b768148b6f90fe24", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -8478,7 +8478,16 @@ package body Sem_Res is\n \n       Set_Slice_Subtype (N);\n \n-      if Nkind (Drange) = N_Range then\n+      --  Check bad use of type with predicates\n+\n+      if Has_Predicates (Etype (Drange)) then\n+         Error_Msg_NE\n+           (\"subtype& has predicate, not allowed in slice\",\n+            Drange, Etype (Drange));\n+\n+      --  Otherwise here is where we check suspicious indexes\n+\n+      elsif Nkind (Drange) = N_Range then\n          Warn_On_Suspicious_Index (Name, Low_Bound  (Drange));\n          Warn_On_Suspicious_Index (Name, High_Bound (Drange));\n       end if;"}, {"sha": "676051d379ce5309f4167fca67f5f6f7b9c88220", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -1679,6 +1679,44 @@ package body Sem_Util is\n       end loop;\n    end Collect_Interfaces_Info;\n \n+   ---------------------\n+   -- Collect_Parents --\n+   ---------------------\n+\n+   procedure Collect_Parents\n+     (T             : Entity_Id;\n+      List          : out Elist_Id;\n+      Use_Full_View : Boolean := True)\n+   is\n+      Current_Typ : Entity_Id := T;\n+      Parent_Typ  : Entity_Id;\n+\n+   begin\n+      List := New_Elmt_List;\n+\n+      --  No action if the if the type has no parents\n+\n+      if T = Etype (T) then\n+         return;\n+      end if;\n+\n+      loop\n+         Parent_Typ := Etype (Current_Typ);\n+\n+         if Is_Private_Type (Parent_Typ)\n+           and then Present (Full_View (Parent_Typ))\n+           and then Use_Full_View\n+         then\n+            Parent_Typ := Full_View (Base_Type (Parent_Typ));\n+         end if;\n+\n+         Append_Elmt (Parent_Typ, List);\n+\n+         exit when Parent_Typ = Current_Typ;\n+         Current_Typ := Parent_Typ;\n+      end loop;\n+   end Collect_Parents;\n+\n    ----------------------------------\n    -- Collect_Primitive_Operations --\n    ----------------------------------\n@@ -9790,6 +9828,38 @@ package body Sem_Util is\n       end if;\n    end Object_Access_Level;\n \n+   --------------------------------------\n+   -- Original_Corresponding_Operation --\n+   --------------------------------------\n+\n+   function Original_Corresponding_Operation (S : Entity_Id) return Entity_Id\n+   is\n+      Typ : constant Entity_Id := Find_Dispatching_Type (S);\n+\n+   begin\n+      --  If S is an inherited primitive S2 the original corresponding\n+      --  operation of S is the original corresponding operation of S2\n+\n+      if Present (Alias (S))\n+        and then Find_Dispatching_Type (Alias (S)) /= Typ\n+      then\n+         return Original_Corresponding_Operation (Alias (S));\n+\n+      --  If S overrides an inherted subprogram S2 the original corresponding\n+      --  operation of S is the original corresponding operation of S2\n+\n+      elsif Is_Overriding_Operation (S)\n+        and then Present (Overridden_Operation (S))\n+      then\n+         return Original_Corresponding_Operation (Overridden_Operation (S));\n+\n+      --  otherwise it is S itself\n+\n+      else\n+         return S;\n+      end if;\n+   end Original_Corresponding_Operation;\n+\n    -----------------------\n    -- Private_Component --\n    -----------------------\n@@ -11387,6 +11457,47 @@ package body Sem_Util is\n       end if;\n    end Unqualify;\n \n+   -----------------------\n+   -- Visible_Ancestors --\n+   -----------------------\n+\n+   function Visible_Ancestors (Typ : Entity_Id) return Elist_Id is\n+      List_1 : Elist_Id;\n+      List_2 : Elist_Id;\n+      Elmt   : Elmt_Id;\n+\n+   begin\n+      pragma Assert (Is_Record_Type (Typ)\n+        and then Is_Tagged_Type (Typ));\n+\n+      --  Collect all the parents and progenitors of Typ. If the full-view of\n+      --  private parents and progenitors is available then it is used to\n+      --  generate the list of visible ancestors; otherwise their partial\n+      --  view is added to the resulting list.\n+\n+      Collect_Parents\n+        (T               => Typ,\n+         List            => List_1,\n+         Use_Full_View   => True);\n+\n+      Collect_Interfaces\n+        (T               => Typ,\n+         Ifaces_List     => List_2,\n+         Exclude_Parents => True,\n+         Use_Full_View   => True);\n+\n+      --  Join the two lists. Avoid duplications because an interface may\n+      --  simultaneously be parent and progenitor of a type.\n+\n+      Elmt := First_Elmt (List_2);\n+      while Present (Elmt) loop\n+         Append_Unique_Elmt (Node (Elmt), List_1);\n+         Next_Elmt (Elmt);\n+      end loop;\n+\n+      return List_1;\n+   end Visible_Ancestors;\n+\n    ----------------------\n    -- Within_Init_Proc --\n    ----------------------"}, {"sha": "ec330992cd2eeeb4a24ac1fb7044f6767f3d17e7", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0342360d98139d57ce7550ef03da55616a0a00/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=ea0342360d98139d57ce7550ef03da55616a0a00", "patch": "@@ -197,6 +197,13 @@ package Sem_Util is\n    --  of elements, and elements at the same position on these tables provide\n    --  information on the same interface type.\n \n+   procedure Collect_Parents\n+     (T             : Entity_Id;\n+      List          : out Elist_Id;\n+      Use_Full_View : Boolean := True);\n+   --  Collect all the parents of Typ. Use_Full_View is used to collect them\n+   --  using the full-view of private parents (if available).\n+\n    function Collect_Primitive_Operations (T : Entity_Id) return Elist_Id;\n    --  Called upon type derivation and extension. We scan the declarative part\n    --  in which the type appears, and collect subprograms that have one\n@@ -1052,6 +1059,12 @@ package Sem_Util is\n    --  (e.g. target of assignment, or out parameter), and to False if the\n    --  modification is only potential (e.g. address of entity taken).\n \n+   function Original_Corresponding_Operation (S : Entity_Id) return Entity_Id;\n+   --  [Ada 2012: AI05-0125-1]: If S is an inherited dispatching primitive S2,\n+   --  or overrides an inherited dispatching primitive S2, the original\n+   --  corresponding operation of S is the original corresponding operation of\n+   --  S2. Otherwise, it is S itself.\n+\n    function Object_Access_Level (Obj : Node_Id) return Uint;\n    --  Return the accessibility level of the view of the object Obj.\n    --  For convenience, qualified expressions applied to object names\n@@ -1290,6 +1303,13 @@ package Sem_Util is\n    --  Removes any qualifications from Expr. For example, for T1'(T2'(X)), this\n    --  returns X. If Expr is not a qualified expression, returns Expr.\n \n+   function Visible_Ancestors (Typ : Entity_Id) return Elist_Id;\n+   --  [Ada 2012:AI-0125-1]: Collect all the visible parents and progenitors\n+   --  of a type extension or private extension declaration. If the full-view\n+   --  of private parents and progenitors is available then it is used to\n+   --  generate the list of visible ancestors; otherwise their partial\n+   --  view is added to the resulting list.\n+\n    function Within_Init_Proc return Boolean;\n    --  Determines if Current_Scope is within an init proc\n "}]}