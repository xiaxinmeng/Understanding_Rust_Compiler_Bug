{"sha": "74d98c1e9beaa02e00241d846d9053843acadbe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkOThjMWU5YmVhYTAyZTAwMjQxZDg0NmQ5MDUzODQzYWNhZGJlMQ==", "commit": {"author": {"name": "Anthony Brandon", "email": "anthony.brandon@gmail.com", "date": "2014-10-13T21:00:55Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-10-13T21:00:55Z"}, "message": "c-parser.c (c_parser_all_labels): New function to replace the duplicate code.\n\ngcc/c/ChangeLog:\n\n2014-10-13  Anthony Brandon  <anthony.brandon@gmail.com>\n\n        * c-parser.c (c_parser_all_labels): New function to replace\n\tthe duplicate code.\n        (c_parser_statement): Call the new function.\n\nFrom-SVN: r216165", "tree": {"sha": "bcdb10fc0f8256b0b399de36c10ee5a93e526f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcdb10fc0f8256b0b399de36c10ee5a93e526f44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74d98c1e9beaa02e00241d846d9053843acadbe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d98c1e9beaa02e00241d846d9053843acadbe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d98c1e9beaa02e00241d846d9053843acadbe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d98c1e9beaa02e00241d846d9053843acadbe1/comments", "author": {"login": "anarcobra", "id": 4075704, "node_id": "MDQ6VXNlcjQwNzU3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4075704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anarcobra", "html_url": "https://github.com/anarcobra", "followers_url": "https://api.github.com/users/anarcobra/followers", "following_url": "https://api.github.com/users/anarcobra/following{/other_user}", "gists_url": "https://api.github.com/users/anarcobra/gists{/gist_id}", "starred_url": "https://api.github.com/users/anarcobra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anarcobra/subscriptions", "organizations_url": "https://api.github.com/users/anarcobra/orgs", "repos_url": "https://api.github.com/users/anarcobra/repos", "events_url": "https://api.github.com/users/anarcobra/events{/privacy}", "received_events_url": "https://api.github.com/users/anarcobra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3dce09649d93c3465754c0b027574823607964ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dce09649d93c3465754c0b027574823607964ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dce09649d93c3465754c0b027574823607964ab"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "b4cc40a376229d80a5d022b74e0dc5e0b13c9ecb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d98c1e9beaa02e00241d846d9053843acadbe1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d98c1e9beaa02e00241d846d9053843acadbe1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=74d98c1e9beaa02e00241d846d9053843acadbe1", "patch": "@@ -1,3 +1,9 @@\n+2014-10-13  Anthony Brandon  <anthony.brandon@gmail.com>\n+\n+        * c-parser.c (c_parser_all_labels): New function to replace\n+\tthe duplicate code.\n+        (c_parser_statement): Call the new function.\n+\n 2014-10-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/63480"}, {"sha": "346448a149d7bea1b14b1b2702c116bb362e0c25", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d98c1e9beaa02e00241d846d9053843acadbe1/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d98c1e9beaa02e00241d846d9053843acadbe1/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=74d98c1e9beaa02e00241d846d9053843acadbe1", "patch": "@@ -4654,6 +4654,18 @@ c_parser_compound_statement_nostart (c_parser *parser)\n   mark_valid_location_for_stdc_pragma (save_valid_for_pragma);\n }\n \n+/* Parse all consecutive labels. */\n+\n+static void\n+c_parser_all_labels (c_parser *parser)\n+{\n+  while (c_parser_next_token_is_keyword (parser, RID_CASE)\n+\t || c_parser_next_token_is_keyword (parser, RID_DEFAULT)\n+\t || (c_parser_next_token_is (parser, CPP_NAME)\n+\t     && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n+    c_parser_label (parser);\n+}\n+\n /* Parse a label (C90 6.6.1, C99 6.8.1).\n \n    label:\n@@ -4854,11 +4866,7 @@ c_parser_label (c_parser *parser)\n static void\n c_parser_statement (c_parser *parser)\n {\n-  while (c_parser_next_token_is_keyword (parser, RID_CASE)\n-\t || c_parser_next_token_is_keyword (parser, RID_DEFAULT)\n-\t || (c_parser_next_token_is (parser, CPP_NAME)\n-\t     && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n-    c_parser_label (parser);\n+  c_parser_all_labels (parser);\n   c_parser_statement_after_labels (parser);\n }\n \n@@ -5090,11 +5098,7 @@ c_parser_if_body (c_parser *parser, bool *if_p)\n {\n   tree block = c_begin_compound_stmt (flag_isoc99);\n   location_t body_loc = c_parser_peek_token (parser)->location;\n-  while (c_parser_next_token_is_keyword (parser, RID_CASE)\n-\t || c_parser_next_token_is_keyword (parser, RID_DEFAULT)\n-\t || (c_parser_next_token_is (parser, CPP_NAME)\n-\t     && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n-    c_parser_label (parser);\n+  c_parser_all_labels (parser);\n   *if_p = c_parser_next_token_is_keyword (parser, RID_IF);\n   if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n     {\n@@ -5121,11 +5125,7 @@ c_parser_else_body (c_parser *parser)\n {\n   location_t else_loc = c_parser_peek_token (parser)->location;\n   tree block = c_begin_compound_stmt (flag_isoc99);\n-  while (c_parser_next_token_is_keyword (parser, RID_CASE)\n-\t || c_parser_next_token_is_keyword (parser, RID_DEFAULT)\n-\t || (c_parser_next_token_is (parser, CPP_NAME)\n-\t     && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n-    c_parser_label (parser);\n+  c_parser_all_labels (parser);\n   if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n     {\n       location_t loc = c_parser_peek_token (parser)->location;"}]}