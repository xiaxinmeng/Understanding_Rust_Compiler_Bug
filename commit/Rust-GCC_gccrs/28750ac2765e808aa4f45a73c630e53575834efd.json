{"sha": "28750ac2765e808aa4f45a73c630e53575834efd", "node_id": "C_kwDOANBUbNoAKDI4NzUwYWMyNzY1ZTgwOGFhNGY0NWE3M2M2MzBlNTM1NzU4MzRlZmQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-12T19:57:56Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-12T19:57:56Z"}, "message": "c++: give fold expressions a location\n\nThis improves diagnostic quality for unsatisfied atomic constraints\nthat consist of a fold expression, e.g. in concepts/diagnostic3.C\nthe \"evaluated to false\" diagnostic now points to the expression:\n\n  .../diagnostic3.C:10:22: note: the expression \u2018(foo<Ts> && ...) [with Ts = {int, char}]\u2019 evaluated to \u2018false\u2019\n     10 | requires (foo<Ts> && ...)\n        |          ~~~~~~~~~~~~^~~~\n\ngcc/cp/ChangeLog:\n\n\t* semantics.cc (finish_unary_fold_expr): Use input_location\n\tinstead of UNKNOWN_LOCATION.\n\t(finish_binary_fold_expr): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/concepts/diagnostic3.C: Adjusted expected location of\n\t\"evaluated to false\" diagnostics.", "tree": {"sha": "16a6f9a9b38211da1405e4e388b76c48f7bc4f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16a6f9a9b38211da1405e4e388b76c48f7bc4f81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28750ac2765e808aa4f45a73c630e53575834efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28750ac2765e808aa4f45a73c630e53575834efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28750ac2765e808aa4f45a73c630e53575834efd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28750ac2765e808aa4f45a73c630e53575834efd/comments", "author": null, "committer": null, "parents": [{"sha": "80fcc4b6afee72443bef551064826b3b4b6785e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80fcc4b6afee72443bef551064826b3b4b6785e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80fcc4b6afee72443bef551064826b3b4b6785e6"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "d5565ebe02d81bb2062c161f2424e858d6807fd3", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28750ac2765e808aa4f45a73c630e53575834efd/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28750ac2765e808aa4f45a73c630e53575834efd/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=28750ac2765e808aa4f45a73c630e53575834efd", "patch": "@@ -12197,7 +12197,7 @@ finish_unary_fold_expr (tree expr, int op, tree_code dir)\n \n   /* Build the fold expression.  */\n   tree code = build_int_cstu (integer_type_node, abs (op));\n-  tree fold = build_min_nt_loc (UNKNOWN_LOCATION, dir, code, pack);\n+  tree fold = build_min_nt_loc (input_location, dir, code, pack);\n   FOLD_EXPR_MODIFY_P (fold) = (op < 0);\n   TREE_TYPE (fold) = build_dependent_operator_type (NULL_TREE,\n \t\t\t\t\t\t    FOLD_EXPR_OP (fold),\n@@ -12226,7 +12226,7 @@ finish_binary_fold_expr (tree pack, tree init, int op, tree_code dir)\n {\n   pack = make_pack_expansion (pack);\n   tree code = build_int_cstu (integer_type_node, abs (op));\n-  tree fold = build_min_nt_loc (UNKNOWN_LOCATION, dir, code, pack, init);\n+  tree fold = build_min_nt_loc (input_location, dir, code, pack, init);\n   FOLD_EXPR_MODIFY_P (fold) = (op < 0);\n   TREE_TYPE (fold) = build_dependent_operator_type (NULL_TREE,\n \t\t\t\t\t\t    FOLD_EXPR_OP (fold),"}, {"sha": "410651a9c1adaeeb77b52d44df89f10cef0cd97c", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28750ac2765e808aa4f45a73c630e53575834efd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28750ac2765e808aa4f45a73c630e53575834efd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic3.C?ref=28750ac2765e808aa4f45a73c630e53575834efd", "patch": "@@ -7,18 +7,18 @@ template<typename T>\n   concept foo = (bool)(foo_v<T> | foo_v<T&>);\n \n template<typename... Ts>\n-requires (foo<Ts> && ...)\n+requires (foo<Ts> && ...) // { dg-message \"with Ts = .int, char... evaluated to .false.\" }\n void\n-bar() // { dg-message \"with Ts = .int, char... evaluated to .false.\" }\n+bar()\n { }\n \n template<int>\n struct S { };\n \n template<int... Is>\n-requires (foo<S<Is>> && ...)\n+requires (foo<S<Is>> && ...) // { dg-message \"with Is = .2, 3, 4... evaluated to .false.\" }\n void\n-baz() // { dg-message \"with Is = .2, 3, 4... evaluated to .false.\" }\n+baz()\n { }\n \n void"}]}