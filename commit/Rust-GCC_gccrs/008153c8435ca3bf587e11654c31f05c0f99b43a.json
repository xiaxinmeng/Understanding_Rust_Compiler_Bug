{"sha": "008153c8435ca3bf587e11654c31f05c0f99b43a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA4MTUzYzg0MzVjYTNiZjU4N2UxMTY1NGMzMWYwNWMwZjk5YjQzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-15T09:36:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-15T09:36:47Z"}, "message": "expr: Fix up VEC_PACK_TRUNC_EXPR expansion [PR101046]\n\nThe following testcase ICEs, because we have a mode mismatch.\nVEC_PACK_TRUNC_EXPR's operands have different modes from the result\n(same vector mode size but twice as large element),\nbut we were passing non-NULL subtarget with the mode of the result\nto the expansion of its arguments, so the VEC_PERM_EXPR in one of the\noperands which had V8SImode operands and result had V16HImode target.\n\nFixed by clearing the subtarget if we are changing mode.\n\n2021-06-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/101046\n\t* expr.c (expand_expr_real_2) <case VEC_PACK_FIX_TRUNC_EXPR,\n\tcase VEC_PACK_TRUNC_EXPR>: Clear subtarget when changing mode.\n\n\t* gcc.target/i386/pr101046.c: New test.", "tree": {"sha": "8f593a3242e9e03901cd75e7deec30f3a12754b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f593a3242e9e03901cd75e7deec30f3a12754b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/008153c8435ca3bf587e11654c31f05c0f99b43a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008153c8435ca3bf587e11654c31f05c0f99b43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008153c8435ca3bf587e11654c31f05c0f99b43a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008153c8435ca3bf587e11654c31f05c0f99b43a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfef1164b1c8d0b7abdf302f94d4be99a75ca791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfef1164b1c8d0b7abdf302f94d4be99a75ca791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfef1164b1c8d0b7abdf302f94d4be99a75ca791"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "231487f0d43792a798a878b125c16a5a784b046a", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008153c8435ca3bf587e11654c31f05c0f99b43a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008153c8435ca3bf587e11654c31f05c0f99b43a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=008153c8435ca3bf587e11654c31f05c0f99b43a", "patch": "@@ -9998,6 +9998,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n     case VEC_PACK_SAT_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n       mode = TYPE_MODE (TREE_TYPE (treeop0));\n+      subtarget = NULL_RTX;\n       goto binop;\n \n     case VEC_PACK_TRUNC_EXPR:\n@@ -10021,6 +10022,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t  return eops[0].value;\n \t}\n       mode = TYPE_MODE (TREE_TYPE (treeop0));\n+      subtarget = NULL_RTX;\n       goto binop;\n \n     case VEC_PACK_FLOAT_EXPR:"}, {"sha": "6ce4695da07d1cc08c6c193d1babecc7a9e717d6", "filename": "gcc/testsuite/gcc.target/i386/pr101046.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008153c8435ca3bf587e11654c31f05c0f99b43a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101046.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008153c8435ca3bf587e11654c31f05c0f99b43a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101046.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101046.c?ref=008153c8435ca3bf587e11654c31f05c0f99b43a", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/101046 */\n+/* { dg-do compile } */\n+/* { dg-options \"-ftree-ter -mavx512bw -mavx512vl\" } */\n+\n+typedef unsigned short __attribute__((__vector_size__(16))) U;\n+typedef unsigned int __attribute__((__vector_size__(16))) V;\n+typedef unsigned int __attribute__((__vector_size__(32))) W;\n+\n+U\n+foo (void)\n+{\n+  return __builtin_convertvector (__builtin_shufflevector ((V){}, (W){},\n+\t\t\t\t\t\t\t   0, 0, 1, 0,\n+\t\t\t\t\t\t\t   5, 5, 0, 2), U);\n+}"}]}