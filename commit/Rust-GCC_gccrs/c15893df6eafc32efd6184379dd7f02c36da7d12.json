{"sha": "c15893df6eafc32efd6184379dd7f02c36da7d12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE1ODkzZGY2ZWFmYzMyZWZkNjE4NDM3OWRkN2YwMmMzNmRhN2QxMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-25T12:43:28Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-27T15:13:01Z"}, "message": "aarch64: Add vector/vector vec_extract patterns [PR92822]\n\nPart of the problem in this PR is that we don't provide patterns\nto extract a 64-bit vector from one half of a 128-bit vector.\nAdding them fixes:\n\nFAIL: gcc.target/aarch64/fmul_intrinsic_1.c scan-assembler-times fmul\\\\td[0-9]+, d[0-9]+, d[0-9]+ 1\nFAIL: gcc.target/aarch64/fmul_intrinsic_1.c scan-assembler-times fmul\\\\tv[0-9]+.2d, v[0-9]+.2d, v[0-9]+.d\\\\[[0-9]+\\\\] 3\n\nThe 2s failures need target-independent changes, after which they rely\non these patterns too.\n\n2020-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR target/92822\n\t* config/aarch64/aarch64-simd.md (aarch64_get_half<mode>): New\n\texpander.\n\t(@aarch64_split_simd_mov<mode>): Use it.\n\t(aarch64_simd_mov_from_<mode>low): Add a GPR alternative.\n\tLeave the vec_extract patterns to handle 2-element vectors.\n\t(aarch64_simd_mov_from_<mode>high): Likewise.\n\t(vec_extract<VQMOV_NO2E:mode><Vhalf>): New expander.\n\t(vec_extractv2dfv1df): Likewise.", "tree": {"sha": "114a7cc1ef8219437dde14ca6b64724c5b99d063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/114a7cc1ef8219437dde14ca6b64724c5b99d063"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c15893df6eafc32efd6184379dd7f02c36da7d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c15893df6eafc32efd6184379dd7f02c36da7d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c15893df6eafc32efd6184379dd7f02c36da7d12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c15893df6eafc32efd6184379dd7f02c36da7d12/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a14becd6bdc68e1d2fbe084079f7472434488e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a14becd6bdc68e1d2fbe084079f7472434488e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a14becd6bdc68e1d2fbe084079f7472434488e"}], "stats": {"total": 99, "additions": 77, "deletions": 22}, "files": [{"sha": "c1ef611047787b2e4ce4dcbd763cf696a743ce07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15893df6eafc32efd6184379dd7f02c36da7d12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15893df6eafc32efd6184379dd7f02c36da7d12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c15893df6eafc32efd6184379dd7f02c36da7d12", "patch": "@@ -1,3 +1,15 @@\n+2020-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/92822\n+\t* config/aarch64/aarch64-simd.md (aarch64_get_half<mode>): New\n+\texpander.\n+\t(@aarch64_split_simd_mov<mode>): Use it.\n+\t(aarch64_simd_mov_from_<mode>low): Add a GPR alternative.\n+\tLeave the vec_extract patterns to handle 2-element vectors.\n+\t(aarch64_simd_mov_from_<mode>high): Likewise.\n+\t(vec_extract<VQMOV_NO2E:mode><Vhalf>): New expander.\n+\t(vec_extractv2dfv1df): Likewise.\n+\n 2020-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_if_then_else_costs): Match"}, {"sha": "5a58051cf7e558b43c0d110c00f53d50d2ff5080", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 65, "deletions": 22, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15893df6eafc32efd6184379dd7f02c36da7d12/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15893df6eafc32efd6184379dd7f02c36da7d12/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=c15893df6eafc32efd6184379dd7f02c36da7d12", "patch": "@@ -282,37 +282,51 @@\n         rtx dst_high_part = gen_highpart (<VHALF>mode, dst);\n \trtx lo = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n \trtx hi = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-\n-        emit_insn\n-          (gen_aarch64_simd_mov_from_<mode>low (dst_low_part, src, lo));\n-        emit_insn\n-          (gen_aarch64_simd_mov_from_<mode>high (dst_high_part, src, hi));\n+        emit_insn (gen_aarch64_get_half<mode> (dst_low_part, src, lo));\n+        emit_insn (gen_aarch64_get_half<mode> (dst_high_part, src, hi));\n       }\n     DONE;\n   }\n )\n \n-(define_insn \"aarch64_simd_mov_from_<mode>low\"\n-  [(set (match_operand:<VHALF> 0 \"register_operand\" \"=r\")\n+(define_expand \"aarch64_get_half<mode>\"\n+  [(set (match_operand:<VHALF> 0 \"register_operand\")\n         (vec_select:<VHALF>\n-          (match_operand:VQMOV 1 \"register_operand\" \"w\")\n-          (match_operand:VQMOV 2 \"vect_par_cnst_lo_half\" \"\")))]\n-  \"TARGET_SIMD && reload_completed\"\n-  \"umov\\t%0, %1.d[0]\"\n-  [(set_attr \"type\" \"neon_to_gp<q>\")\n-   (set_attr \"length\" \"4\")\n-  ])\n+          (match_operand:VQMOV 1 \"register_operand\")\n+          (match_operand 2 \"ascending_int_parallel\")))]\n+  \"TARGET_SIMD\"\n+)\n+\n+(define_insn_and_split \"aarch64_simd_mov_from_<mode>low\"\n+  [(set (match_operand:<VHALF> 0 \"register_operand\" \"=w,?r\")\n+        (vec_select:<VHALF>\n+          (match_operand:VQMOV_NO2E 1 \"register_operand\" \"w,w\")\n+          (match_operand:VQMOV_NO2E 2 \"vect_par_cnst_lo_half\" \"\")))]\n+  \"TARGET_SIMD\"\n+  \"@\n+   #\n+   umov\\t%0, %1.d[0]\"\n+  \"&& reload_completed && aarch64_simd_register (operands[0], <VHALF>mode)\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  {\n+    operands[1] = aarch64_replace_reg_mode (operands[1], <VHALF>mode);\n+  }\n+  [(set_attr \"type\" \"mov_reg,neon_to_gp<q>\")\n+   (set_attr \"length\" \"4\")]\n+)\n \n (define_insn \"aarch64_simd_mov_from_<mode>high\"\n-  [(set (match_operand:<VHALF> 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:<VHALF> 0 \"register_operand\" \"=w,?r\")\n         (vec_select:<VHALF>\n-          (match_operand:VQMOV 1 \"register_operand\" \"w\")\n-          (match_operand:VQMOV 2 \"vect_par_cnst_hi_half\" \"\")))]\n-  \"TARGET_SIMD && reload_completed\"\n-  \"umov\\t%0, %1.d[1]\"\n-  [(set_attr \"type\" \"neon_to_gp<q>\")\n-   (set_attr \"length\" \"4\")\n-  ])\n+          (match_operand:VQMOV_NO2E 1 \"register_operand\" \"w,w\")\n+          (match_operand:VQMOV_NO2E 2 \"vect_par_cnst_hi_half\" \"\")))]\n+  \"TARGET_SIMD\"\n+  \"@\n+   dup\\\\t%d0, %1.d[1]\n+   umov\\t%0, %1.d[1]\"\n+  [(set_attr \"type\" \"neon_dup<q>,neon_to_gp<q>\")\n+   (set_attr \"length\" \"4\")]\n+)\n \n (define_insn \"orn<mode>3\"\n  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n@@ -6140,6 +6154,35 @@\n     DONE;\n })\n \n+;; Extract a 64-bit vector from one half of a 128-bit vector.\n+(define_expand \"vec_extract<mode><Vhalf>\"\n+  [(match_operand:<VHALF> 0 \"register_operand\")\n+   (match_operand:VQMOV_NO2E 1 \"register_operand\")\n+   (match_operand 2 \"immediate_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  int start = INTVAL (operands[2]);\n+  if (start != 0 && start != <nunits> / 2)\n+    FAIL;\n+  rtx sel = aarch64_gen_stepped_int_parallel (<nunits> / 2, start, 1);\n+  emit_insn (gen_aarch64_get_half<mode> (operands[0], operands[1], sel));\n+  DONE;\n+})\n+\n+;; Extract a single-element 64-bit vector from one half of a 128-bit vector.\n+(define_expand \"vec_extractv2dfv1df\"\n+  [(match_operand:V1DF 0 \"register_operand\")\n+   (match_operand:V2DF 1 \"register_operand\")\n+   (match_operand 2 \"immediate_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  /* V1DF is rarely used by other patterns, so it should be better to hide\n+     it in a subreg destination of a normal DF op.  */\n+  rtx scalar0 = gen_lowpart (DFmode, operands[0]);\n+  emit_insn (gen_vec_extractv2dfdf (scalar0, operands[1], operands[2]));\n+  DONE;\n+})\n+\n ;; aes\n \n (define_insn \"aarch64_crypto_aes<aes_op>v16qi\""}]}