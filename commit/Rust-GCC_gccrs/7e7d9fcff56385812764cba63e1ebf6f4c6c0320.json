{"sha": "7e7d9fcff56385812764cba63e1ebf6f4c6c0320", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3ZDlmY2ZmNTYzODU4MTI3NjRjYmE2M2UxZWJmNmY0YzZjMDMyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-25T23:04:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-27T14:05:36Z"}, "message": "c++: Fix stdcall attribute in template. [PR95222]\n\nAnother case that breaks with my fix for PR90750: we shouldn't move type\nattributes in TYPENAME context either, as there's no decl for them to move\nto.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95222\n\t* decl.c (grokdeclarator): Don't shift attributes in TYPENAME\n\tcontext.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95222\n\t* g++.dg/ext/tmplattr10.C: New test.", "tree": {"sha": "03fd6be5b8acba5828f235a00df7b3cfb782f688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03fd6be5b8acba5828f235a00df7b3cfb782f688"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7d9fcff56385812764cba63e1ebf6f4c6c0320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7d9fcff56385812764cba63e1ebf6f4c6c0320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7d9fcff56385812764cba63e1ebf6f4c6c0320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7d9fcff56385812764cba63e1ebf6f4c6c0320/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac9face8d26ea4b6aa72902ecc22e89ef00763c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9face8d26ea4b6aa72902ecc22e89ef00763c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac9face8d26ea4b6aa72902ecc22e89ef00763c5"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "5476965996b1f58781225a570394f90b6f3acb99", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7d9fcff56385812764cba63e1ebf6f4c6c0320/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7d9fcff56385812764cba63e1ebf6f4c6c0320/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7e7d9fcff56385812764cba63e1ebf6f4c6c0320", "patch": "@@ -11951,7 +11951,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  if (declarator->kind == cdk_array)\n \t    attr_flags |= (int) ATTR_FLAG_ARRAY_NEXT;\n \t  tree late_attrs = NULL_TREE;\n-\t  if (decl_context != PARM)\n+\t  if (decl_context != PARM && decl_context != TYPENAME)\n \t    /* Assume that any attributes that get applied late to\n \t       templates will DTRT when applied to the declaration\n \t       as a whole.  */"}, {"sha": "3fb8c21ccbe0875e36dca38d65eaa9fae5700535", "filename": "gcc/testsuite/g++.dg/ext/tmplattr10.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7d9fcff56385812764cba63e1ebf6f4c6c0320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7d9fcff56385812764cba63e1ebf6f4c6c0320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr10.C?ref=7e7d9fcff56385812764cba63e1ebf6f4c6c0320", "patch": "@@ -0,0 +1,52 @@\n+// PR c++/95222\n+// { dg-do compile { target { { i?86-*-* x86_64-*-* } && ia32 } } }\n+\n+#if defined(_MSC_VER)\n+#define CC_FASTCALL __fastcall\n+#define CC_STDCALL __stdcall\n+#else\n+#define CC_FASTCALL __attribute__((fastcall))\n+#define CC_STDCALL __attribute__((stdcall))\n+#endif\n+\n+template <typename FuncT>\n+struct FuncResult;\n+\n+template <typename R, typename... Args>\n+struct FuncResult<R(*)(Args...)>\n+{\n+    using type = R;\n+};\n+\n+template <typename R, typename... Args>\n+struct FuncResult<R(CC_FASTCALL*)(Args...)>\n+{\n+    using type = R;\n+};\n+\n+template <typename R, typename... Args>\n+struct FuncResult<R(CC_STDCALL*)(Args...)>\n+{\n+    using type = R;\n+};\n+\n+template <typename FuncT>\n+auto wrap(FuncT f) -> typename FuncResult<FuncT>::type\n+{\n+    return f(1, 2, 3);\n+}\n+\n+int CC_FASTCALL func1(int x, int y, int z)\n+{\n+    return x + y + z;\n+}\n+\n+int CC_STDCALL func2(int x, int y, int z)\n+{\n+    return x + y + z;\n+}\n+\n+int main()\n+{\n+    return wrap(&func1) + wrap(&func2);\n+}"}]}