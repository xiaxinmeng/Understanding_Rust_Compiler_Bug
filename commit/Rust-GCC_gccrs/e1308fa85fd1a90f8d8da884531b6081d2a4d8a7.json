{"sha": "e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEzMDhmYTg1ZmQxYTkwZjhkOGRhODg0NTMxYjYwODFkMmE0ZDhhNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-23T08:30:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-23T08:30:37Z"}, "message": "[multiple changes]\n\n2012-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Check_Current_Instance): Issue an\n\terror when the prefix of 'Unchecked_Access or 'Access does not\n\tdenote a legal aliased view of a type.\n\t(Freeze_Record_Type): Do not halt the processing of record components\n\tonce the Has_Controlled_Component is set as this bypasses the remaining\n\tchecks.\n\t(Is_Aliased_View_Of_Type): New routine.\n\n2012-01-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* errout.ads, freeze.adb: Minor reformatting.\n\n2012-01-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch10.adb, sem_prag.adb: Remove redundant apostrophes in error\n\tmessages.\n\n2012-01-23  Olivier Hainque  <hainque@adacore.com>\n\n\t* adadecode.c (__gnat_decode): Deal with empty input early,\n\tpreventing potential erroneous memory access later on.\n\nFrom-SVN: r183407", "tree": {"sha": "7c32d49d1df71d989f2d62c9a87a67fc204c41ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c32d49d1df71d989f2d62c9a87a67fc204c41ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/comments", "author": null, "committer": null, "parents": [{"sha": "daecebc805c2bd20e1bd5addc0d6f77577ac0363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daecebc805c2bd20e1bd5addc0d6f77577ac0363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daecebc805c2bd20e1bd5addc0d6f77577ac0363"}], "stats": {"total": 176, "additions": 140, "deletions": 36}, "files": [{"sha": "2e90cfb98692dd7e1fda2ec506b7657cb980acf2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "patch": "@@ -1,3 +1,27 @@\n+2012-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Check_Current_Instance): Issue an\n+\terror when the prefix of 'Unchecked_Access or 'Access does not\n+\tdenote a legal aliased view of a type.\n+\t(Freeze_Record_Type): Do not halt the processing of record components\n+\tonce the Has_Controlled_Component is set as this bypasses the remaining\n+\tchecks.\n+\t(Is_Aliased_View_Of_Type): New routine.\n+\n+2012-01-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* errout.ads, freeze.adb: Minor reformatting.\n+\n+2012-01-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch10.adb, sem_prag.adb: Remove redundant apostrophes in error\n+\tmessages.\n+\n+2012-01-23  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* adadecode.c (__gnat_decode): Deal with empty input early,\n+\tpreventing potential erroneous memory access later on.\n+\n 2012-01-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/46192"}, {"sha": "25694819afc373ad11218cc222c03f0dec25ab68", "filename": "gcc/ada/adadecode.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Fadadecode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Fadadecode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadadecode.c?ref=e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *           Copyright (C) 2001-2011, Free Software Foundation, Inc.        *\n+ *           Copyright (C) 2001-2012, Free Software Foundation, Inc.        *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -42,7 +42,7 @@\n #include <stdio.h>\n #include <ctype.h>\n \n-#include \"adaint.h\"\n+#include \"adaint.h\"  /* for a macro version of xstrdup.  */\n \n #ifndef ISDIGIT\n #define ISDIGIT(c) isdigit(c)\n@@ -162,8 +162,20 @@ __gnat_decode (const char *coded_name, char *ada_name, int verbose)\n   int in_task = 0;\n   int body_nested = 0;\n \n+  /* Deal with empty input early.  This allows assuming non-null length\n+     later on, simplifying coding.  In principle, it should be our callers\n+     business not to call here for empty inputs.  It is easy enough to\n+     allow it, however, and might allow simplifications upstream so is not\n+     a bad thing per se.  We need a guard in any case.  */\n+\n+  if (*coded_name == '\\0')\n+    {\n+      *ada_name = '\\0';\n+      return;\n+    }\n+\n   /* Check for library level subprogram.  */\n-  if (has_prefix (coded_name, \"_ada_\"))\n+  else if (has_prefix (coded_name, \"_ada_\"))\n     {\n       strcpy (ada_name, coded_name + 5);\n       lib_subprog = 1;"}, {"sha": "dc444f04b811e9b95ad9fc1ed2c069f9402191e5", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -445,7 +445,7 @@ package Errout is\n \n    Error_Msg_Qual_Level : Int renames Err_Vars.Error_Msg_Qual_Level;\n    --  Number of levels of qualification required for type name (see the\n-   --  description of the } insertion character. Note that this value does\n+   --  description of the } insertion character). Note that this value does\n    --  note get reset by any Error_Msg call, so the caller is responsible\n    --  for resetting it.\n "}, {"sha": "974e08e227d57da2c6eab5930126b592bbaeb6db", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 93, "deletions": 25, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1592,14 +1592,93 @@ package body Freeze is\n \n       procedure Check_Current_Instance (Comp_Decl : Node_Id) is\n \n-         Rec_Type : constant Entity_Id :=\n-                      Scope (Defining_Identifier (Comp_Decl));\n-\n-         Decl : constant Node_Id := Parent (Rec_Type);\n+         function Is_Aliased_View_Of_Type (Typ : Entity_Id) return Boolean;\n+         --  Determine whether Typ is compatible with the rules for aliased\n+         --  views of types as defined in RM 3.10 in the various dialects.\n \n          function Process (N : Node_Id) return Traverse_Result;\n          --  Process routine to apply check to given node\n \n+         -----------------------------\n+         -- Is_Aliased_View_Of_Type --\n+         -----------------------------\n+\n+         function Is_Aliased_View_Of_Type (Typ : Entity_Id) return Boolean is\n+            Typ_Decl : constant Node_Id := Parent (Typ);\n+\n+         begin\n+            --  Common case\n+\n+            if Nkind (Typ_Decl) = N_Full_Type_Declaration\n+              and then Limited_Present (Type_Definition (Typ_Decl))\n+            then\n+               return True;\n+\n+            --  The following paragraphs describe what a legal aliased view of\n+            --  a type is in the various dialects of Ada.\n+\n+            --  Ada 95\n+\n+            --  The current instance of a limited type, and a formal parameter\n+            --  or generic formal object of a tagged type.\n+\n+            --  Ada 95 limited type\n+            --    * Type with reserved word \"limited\"\n+            --    * A protected or task type\n+            --    * A composite type with limited component\n+\n+            elsif Ada_Version <= Ada_95 then\n+               return Is_Limited_Type (Typ);\n+\n+            --  Ada 2005\n+\n+            --  The current instance of a limited tagged type, a protected\n+            --  type, a task type, or a type that has the reserved word\n+            --  \"limited\" in its full definition ... a formal parameter or\n+            --  generic formal object of a tagged type.\n+\n+            --  Ada 2005 limited type\n+            --    * Type with reserved word \"limited\", \"synchronized\", \"task\"\n+            --      or \"protected\"\n+            --    * A composite type with limited component\n+            --    * A derived type whose parent is a non-interface limited type\n+\n+            elsif Ada_Version = Ada_2005 then\n+               return\n+                 (Is_Limited_Type (Typ) and then Is_Tagged_Type (Typ))\n+                   or else\n+                     (Is_Derived_Type (Typ)\n+                       and then not Is_Interface (Etype (Typ))\n+                       and then Is_Limited_Type (Etype (Typ)));\n+\n+            --  Ada 2012 and beyond\n+\n+            --  The current instance of an immutably limited type ... a formal\n+            --  parameter or generic formal object of a tagged type.\n+\n+            --  Ada 2012 limited type\n+            --    * Type with reserved word \"limited\", \"synchronized\", \"task\"\n+            --      or \"protected\"\n+            --    * A composite type with limited component\n+            --    * A derived type whose parent is a non-interface limited type\n+            --    * An incomplete view\n+\n+            --  Ada 2012 immutably limited type\n+            --    * Explicitly limited record type\n+            --    * Record extension with \"limited\" present\n+            --    * Non-formal limited private type that is either tagged\n+            --      or has at least one access discriminant with a default\n+            --      expression\n+            --    * Task type, protected type or synchronized interface\n+            --    * Type derived from immutably limited type\n+\n+            else\n+               return\n+                 Is_Immutably_Limited_Type (Typ)\n+                   or else Is_Incomplete_Type (Typ);\n+            end if;\n+         end Is_Aliased_View_Of_Type;\n+\n          -------------\n          -- Process --\n          -------------\n@@ -1628,24 +1707,15 @@ package body Freeze is\n \n          procedure Traverse is new Traverse_Proc (Process);\n \n-      --  Start of processing for Check_Current_Instance\n-\n-      begin\n-         --  In Ada 95, the (imprecise) rule is that the current instance\n-         --  of a limited type is aliased. In Ada 2005, limitedness must be\n-         --  explicit: either a tagged type, or a limited record.\n+         --  Local variables\n \n-         if Is_Limited_Type (Rec_Type)\n-           and then (Ada_Version < Ada_2005 or else Is_Tagged_Type (Rec_Type))\n-         then\n-            return;\n+         Rec_Type : constant Entity_Id :=\n+                      Scope (Defining_Identifier (Comp_Decl));\n \n-         elsif Nkind (Decl) = N_Full_Type_Declaration\n-           and then Limited_Present (Type_Definition (Decl))\n-         then\n-            return;\n+      --  Start of processing for Check_Current_Instance\n \n-         else\n+      begin\n+         if not Is_Aliased_View_Of_Type (Rec_Type) then\n             Traverse (Comp_Decl);\n          end if;\n       end Check_Current_Instance;\n@@ -2158,18 +2228,16 @@ package body Freeze is\n                                           (Etype (Comp)))))\n                then\n                   Set_Has_Controlled_Component (Rec);\n-                  exit;\n                end if;\n \n                if Has_Unchecked_Union (Etype (Comp)) then\n                   Set_Has_Unchecked_Union (Rec);\n                end if;\n \n-               if Has_Per_Object_Constraint (Comp) then\n-\n-                  --  Scan component declaration for likely misuses of current\n-                  --  instance, either in a constraint or a default expression.\n+               --  Scan component declaration for likely misuses of current\n+               --  instance, either in a constraint or a default expression.\n \n+               if Has_Per_Object_Constraint (Comp) then\n                   Check_Current_Instance (Parent (Comp));\n                end if;\n "}, {"sha": "4d0514d6a8669e95678e2c610a22721e3e581ac2", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3339,7 +3339,7 @@ package body Sem_Ch10 is\n                   procedure License_Error is\n                   begin\n                      Error_Msg_N\n-                       (\"?license of with'ed unit & may be inconsistent\",\n+                       (\"?license of withed unit & may be inconsistent\",\n                         Name (Item));\n                   end License_Error;\n "}, {"sha": "d1e20b6852f4983f9f7e38d499194cc94c5b210f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1308fa85fd1a90f8d8da884531b6081d2a4d8a7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e1308fa85fd1a90f8d8da884531b6081d2a4d8a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -8256,7 +8256,7 @@ package body Sem_Prag is\n \n                if Citem = N then\n                   Error_Pragma_Arg\n-                    (\"argument of pragma% is not with'ed unit\", Arg);\n+                    (\"argument of pragma% is not withed unit\", Arg);\n                end if;\n \n                Next (Arg);\n@@ -8334,7 +8334,7 @@ package body Sem_Prag is\n                if Citem = N then\n                   Set_Error_Posted (N);\n                   Error_Pragma_Arg\n-                    (\"argument of pragma% is not with'ed unit\", Arg);\n+                    (\"argument of pragma% is not withed unit\", Arg);\n                end if;\n \n                Next (Arg);\n@@ -14203,7 +14203,7 @@ package body Sem_Prag is\n \n                   if Citem = N then\n                      Error_Pragma_Arg\n-                       (\"argument of pragma% is not with'ed unit\", Arg_Node);\n+                       (\"argument of pragma% is not withed unit\", Arg_Node);\n                   end if;\n \n                   Next (Arg_Node);"}]}