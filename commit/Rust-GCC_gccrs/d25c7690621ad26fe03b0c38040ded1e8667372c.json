{"sha": "d25c7690621ad26fe03b0c38040ded1e8667372c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1Yzc2OTA2MjFhZDI2ZmUwM2IwYzM4MDQwZGVkMWU4NjY3MzcyYw==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2016-01-20T16:25:23Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2016-01-20T16:25:23Z"}, "message": "re PR c/24293 (Undefined behaviour not diagnosed with -fsyntax-only)\n\n2016-01-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n        PR c/24293\n        * c-tree.h (incomplete_record_decls): Declare.\n        * c-parser.c (incomplete_record_decls): Define.\n        (c_parser_translation_unit): Iterate through incomplete_record_decls and\n        report error if any decl has zero size.\n        * c-decl.c (finish_decl): Append static decl with incomplete struct/union\n        or enum type to incomplete_record_decls.\n\ntestsuite/\n        * gcc.dg/pr24293.c: New test.\n        * gcc.dg/Wcxx-compat-8.c: Adjust to accept error due to\n        incomplete struct type.\n        * gcc.dg/declspec-1.c: Likewise.\n        * gcc.dg/pr63549.c: Likewise.\n\nFrom-SVN: r232622", "tree": {"sha": "8f34e243e6c141a45fea0369c0d2d05d4e2954cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f34e243e6c141a45fea0369c0d2d05d4e2954cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d25c7690621ad26fe03b0c38040ded1e8667372c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25c7690621ad26fe03b0c38040ded1e8667372c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25c7690621ad26fe03b0c38040ded1e8667372c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25c7690621ad26fe03b0c38040ded1e8667372c/comments", "author": null, "committer": null, "parents": [{"sha": "b235cdd5f50456368772692ce5ec139e2e09b360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b235cdd5f50456368772692ce5ec139e2e09b360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b235cdd5f50456368772692ce5ec139e2e09b360"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "697dd8dc806e9212f404f00a8a38bfc2be004773", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d25c7690621ad26fe03b0c38040ded1e8667372c", "patch": "@@ -1,3 +1,13 @@\n+2016-01-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR c/24293\n+\t* c-tree.h (incomplete_record_decls): Declare.\n+\t* c-parser.c (incomplete_record_decls): Define.\n+\t(c_parser_translation_unit): Iterate through incomplete_record_decls and\n+\treport error if any decl has zero size.\n+\t* c-decl.c (finish_decl): Append static decl with incomplete struct/union\n+\tor enum type to incomplete_record_decls.\n+\n 2016-01-14  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/68773"}, {"sha": "1ec60420db9c758c9f32cdf874ece697c7dc2c8b", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=d25c7690621ad26fe03b0c38040ded1e8667372c", "patch": "@@ -4791,6 +4791,12 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t   TREE_TYPE (decl) = error_mark_node;\n \t }\n \n+      if ((RECORD_OR_UNION_TYPE_P (TREE_TYPE (decl))\n+\t  || TREE_CODE (TREE_TYPE (decl)) == ENUMERAL_TYPE)\n+\t  && DECL_SIZE (decl) == NULL_TREE\n+\t  && TREE_STATIC (decl))\n+\tincomplete_record_decls.safe_push (decl);\n+\n       if (is_global_var (decl) && DECL_SIZE (decl) != 0)\n \t{\n \t  if (TREE_CODE (DECL_SIZE (decl)) == INTEGER_CST)"}, {"sha": "efac47b62bbc1828c6b487225a8de53a9770ad37", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=d25c7690621ad26fe03b0c38040ded1e8667372c", "patch": "@@ -59,6 +59,15 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-expr.h\"\n #include \"context.h\"\n \n+/* We need to walk over decls with incomplete struct/union/enum types\n+   after parsing the whole translation unit.\n+   In finish_decl(), if the decl is static, has incomplete\n+   struct/union/enum type, it is appeneded to incomplete_record_decls.\n+   In c_parser_translation_unit(), we iterate over incomplete_record_decls\n+   and report error if any of the decls are still incomplete.  */ \n+\n+vec<tree> incomplete_record_decls = vNULL;\n+\n void\n set_c_expr_source_range (c_expr *expr,\n \t\t\t location_t start, location_t finish)\n@@ -1421,6 +1430,16 @@ c_parser_translation_unit (c_parser *parser)\n \t}\n       while (c_parser_next_token_is_not (parser, CPP_EOF));\n     }\n+\n+  for (unsigned i = 0; i < incomplete_record_decls.length (); ++i)\n+    {\n+      tree decl = incomplete_record_decls[i];\n+      if (DECL_SIZE (decl) == NULL_TREE && TREE_TYPE (decl) != error_mark_node)\n+\t{\n+\t  error (\"storage size of %q+D isn%'t known\", decl);\n+\t  TREE_TYPE (decl) = error_mark_node;\n+\t}\n+    }\n }\n \n /* Parse an external declaration (C90 6.7, C99 6.9)."}, {"sha": "cf79ba71b156632b81e6f4671b523e4ec7936e81", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=d25c7690621ad26fe03b0c38040ded1e8667372c", "patch": "@@ -731,4 +731,6 @@ set_c_expr_source_range (c_expr *expr,\n /* In c-fold.c */\n extern tree decl_constant_value_for_optimization (tree);\n \n+extern vec<tree> incomplete_record_decls;\n+\n #endif /* ! GCC_C_TREE_H */"}, {"sha": "a2c9ba919dcdae76a048430577ab69bf8f1a7961", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d25c7690621ad26fe03b0c38040ded1e8667372c", "patch": "@@ -1,3 +1,12 @@\n+2016-01-20  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR c/24293\n+\t* gcc.dg/pr24293.c: New test.\n+\t* gcc.dg/Wcxx-compat-8.c: Adjust to accept error due to\n+\tincomplete struct type.\n+\t* gcc.dg/declspec-1.c: Likewise.\n+\t* gcc.dg/pr63549.c: Likewise.\n+\n 2016-01-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/66612"}, {"sha": "4e9ddc1b3974488bb71c3b49764ebdd3715e9dbe", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-8.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c?ref=d25c7690621ad26fe03b0c38040ded1e8667372c", "patch": "@@ -33,6 +33,7 @@ enum e3\n \n __typeof__ (struct s5 { int i; }) v5; /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n __typeof__ (struct t5) w5; /* { dg-bogus \"invalid in C\\[+\\]\\[+\\]\" } */\n+  /* { dg-error \"storage size of 'w5' isn't known\" \"\" { target *-*-* } 35 } */\n \n int\n f1 (struct s1 *p)\n@@ -64,4 +65,4 @@ f5 ()\n   return &((struct t8) { });  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n }\n \n-/* { dg-error \"invalid use of undefined type\" \"\" { target *-*-* } 64 } */\n+/* { dg-error \"invalid use of undefined type\" \"\" { target *-*-* } 65 } */"}, {"sha": "b0246011dd0cc834ebecb82ae015992f9a7af50c", "filename": "gcc/testsuite/gcc.dg/declspec-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-1.c?ref=d25c7690621ad26fe03b0c38040ded1e8667372c", "patch": "@@ -9,13 +9,15 @@ typedef int t;\n /* These should all be diagnosed, but only once, not for every\n    identifier declared.  */\n struct s0 int x0, /* { dg-error \"two or more data types\" } */\n-x1;\n+/* { dg-error \"storage size of 'x0' isn't known\" \"\" { target *-*-* } 11 } */\n+x1; /* { dg-error \"storage size of 'x1' isn't known\" } */ \n \n char union u0 x2, /* { dg-error \"two or more data types\" } */\n x3;\n \n enum e0 struct s1 x4, /* { dg-error \"two or more data types\" } */\n-x5;\n+ /* { dg-error \"storage size of 'x4' isn't known\" \"\" { target *-*-* } 18 } */\n+x5; /* { dg-error \"storage size of 'x5' isn't known\" } */\n \n short short x6, /* { dg-error \"duplicate\" } */\n x7;"}, {"sha": "5bf7ad17ef456bda157f26e73bac2b4df5656395", "filename": "gcc/testsuite/gcc.dg/pr24293.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24293.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24293.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24293.c?ref=d25c7690621ad26fe03b0c38040ded1e8667372c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsyntax-only\" } */\n+\n+static struct foo x;  /* { dg-error \"storage size of 'x' isn't known\" } */\n+static union bar y;  /* { dg-error \"storage size of 'y' isn't known\" } */\n+\n+typedef struct P p;\n+static p p_obj;  /* { dg-error \"storage size of 'p_obj' isn't known\" } */\n+\n+static enum e e_var; /* { dg-error \"storage size of 'e_var' isn't known\" } */\n+\n+extern struct undefined_object object;"}, {"sha": "bd0b70672679be6d7cce6f6fee3654e01336f6ac", "filename": "gcc/testsuite/gcc.dg/pr63549.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63549.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25c7690621ad26fe03b0c38040ded1e8667372c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63549.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63549.c?ref=d25c7690621ad26fe03b0c38040ded1e8667372c", "patch": "@@ -2,6 +2,6 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-enum E e;\n+enum E e;  /* { dg-error \"storage size of 'e' isn't known\" } */\n int a[10];\n int i = a[e]; /* { dg-error \"has an incomplete type\" } */"}]}