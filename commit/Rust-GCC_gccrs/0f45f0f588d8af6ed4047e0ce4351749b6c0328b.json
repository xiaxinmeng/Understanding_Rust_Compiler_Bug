{"sha": "0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY0NWYwZjU4OGQ4YWY2ZWQ0MDQ3ZTBjZTQzNTE3NDliNmMwMzI4Yg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-10-29T16:35:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-10-29T16:35:50Z"}, "message": "config.gcc (i[34567]86-*-linux*): Handle --enable-targets=all.\n\ngcc:\n\t* config.gcc (i[34567]86-*-linux*): Handle --enable-targets=all.\n\tHandle tuning for bi-arch i[34567]86-*-linux* like that for\n\ti[34567]86-*-solaris2.1[0-9]*.\n\t* config/i386/linux64.h (TARGET_VERSION, MULTILIB_DEFAULTS):\n\tDefine conditionally depending on TARGET_64BIT_DEFAULT.\n\t(SPEC_32, SPEC_64): Define.\n\t(LINK_SPEC): Use them.\n\t* doc/install.texi (--enable-targets=all): Document for x86-linux.\n\nlibcpp:\n\t* configure.ac (need_64bit_hwint): Set for i[34567]86-*-linux*\n\tdepending on --enable-targets=all.\n\t* configure: Regenerate.\n\nfixincludes:\n\t* inclhack.def (AAB_fd_zero_asm_posix_types_h): Bypass on x86_64.\n\t* fixincl.x: Regenerate.\n\nFrom-SVN: r118147", "tree": {"sha": "6dbe0080708b237eae8a1799f1ffc73557ea0f1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dbe0080708b237eae8a1799f1ffc73557ea0f1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "097f29642281e0efba439b0cd88a507b7c67a88f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097f29642281e0efba439b0cd88a507b7c67a88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097f29642281e0efba439b0cd88a507b7c67a88f"}], "stats": {"total": 115, "additions": 98, "deletions": 17}, "files": [{"sha": "51a66abcdd9522033711101b0eadf80497d4a9db", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -1,3 +1,8 @@\n+2006-10-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* inclhack.def (AAB_fd_zero_asm_posix_types_h): Bypass on x86_64.\n+\t* fixincl.x: Regenerate.\n+\n 2006-10-10  Brooks Moses  <bmoses@stanford.edu>\n \n \t* Makefile.in: Added empty \"pdf\" target."}, {"sha": "23ffffd154ebdd90b42960ccf2036cd9cd34a0b3", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Saturday October  7, 2006 at 12:32:06 PM EDT\n+ * It has been AutoGen-ed  Sunday October 29, 2006 at 04:32:11 PM UTC\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Sat Oct  7 12:32:07 EDT 2006\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Sun Oct 29 16:32:11 UTC 2006\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -26,18 +26,19 @@\n  *  \n  *  You may redistribute it and/or modify it under the terms of the\n  *  GNU General Public License, as published by the Free Software\n- *  Foundation; either version 2, or (at your option) any later version.\n+ *  Foundation; either version 2 of the License, or (at your option)\n+ *  any later version.\n  *  \n  *  inclhack is distributed in the hope that it will be useful,\n  *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n  *  See the GNU General Public License for more details.\n  *  \n  *  You should have received a copy of the GNU General Public License\n- *  along with inclhack.  See the file \"COPYING\".  If not,\n- *  write to:  The Free Software Foundation, Inc.,\n- *             59 Temple Place - Suite 330,\n- *             Boston,  MA  02111-1307, USA.\n+ *  along with inclhack.  If not, write to:\n+ *  \tThe Free Software Foundation, Inc.,\n+ *  \t51 Franklin Street, Fifth Floor\n+ *  \tBoston, MA  02110-1301, USA.\n  */\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -216,10 +217,13 @@ tSCC* apzAab_Fd_Zero_Asm_Posix_Types_HMachs[] = {\n  */\n tSCC zAab_Fd_Zero_Asm_Posix_Types_HBypass0[] =\n        \"} while\";\n+tSCC zAab_Fd_Zero_Asm_Posix_Types_HBypass1[] =\n+       \"x86_64\";\n \n-#define    AAB_FD_ZERO_ASM_POSIX_TYPES_H_TEST_CT  1\n+#define    AAB_FD_ZERO_ASM_POSIX_TYPES_H_TEST_CT  2\n static tTestDesc aAab_Fd_Zero_Asm_Posix_Types_HTests[] = {\n-  { TT_NEGREP,   zAab_Fd_Zero_Asm_Posix_Types_HBypass0, (regex_t*)NULL }, };\n+  { TT_NEGREP,   zAab_Fd_Zero_Asm_Posix_Types_HBypass0, (regex_t*)NULL },\n+  { TT_NEGREP,   zAab_Fd_Zero_Asm_Posix_Types_HBypass1, (regex_t*)NULL }, };\n \n /*\n  *  Fix Command Arguments for Aab_Fd_Zero_Asm_Posix_Types_H\n@@ -8183,7 +8187,7 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          243\n+#define REGEX_COUNT          244\n #define MACH_LIST_SIZE_LIMIT 261\n #define FIX_COUNT            201\n "}, {"sha": "b36a8f5b4ddfa10a83ae36236805aa52bd3d8c7b", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -140,6 +140,7 @@ fix = {\n     files    = asm/posix_types.h;\n     mach     = 'i[34567]86-*-linux*';\n     bypass   = '} while';\n+    bypass   = 'x86_64';\n \n     /*\n      * Define _POSIX_TYPES_H_WRAPPER at the end of the wrapper, not"}, {"sha": "431c7cd23b81b0137716cfbeb6067a2f544f4cc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -1,3 +1,14 @@\n+2006-10-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config.gcc (i[34567]86-*-linux*): Handle --enable-targets=all.\n+\tHandle tuning for bi-arch i[34567]86-*-linux* like that for\n+\ti[34567]86-*-solaris2.1[0-9]*.\n+\t* config/i386/linux64.h (TARGET_VERSION, MULTILIB_DEFAULTS):\n+\tDefine conditionally depending on TARGET_64BIT_DEFAULT.\n+\t(SPEC_32, SPEC_64): Define.\n+\t(LINK_SPEC): Use them.\n+\t* doc/install.texi (--enable-targets=all): Document for x86-linux.\n+\n 2006-10-29  Richard Guenther  <rguenther@suse.de>\n \n \t* config/i386/i386-protos.h (ix86_expand_round): Declare."}, {"sha": "bbe82f069c9b39f8355fa8c91e3e57a76d66d919", "filename": "gcc/config.gcc", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -1077,10 +1077,34 @@ i[34567]86-*-coff*)\n i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu)\n \t\t\t# Intel 80386's running GNU/*\n \t\t\t# with ELF format using glibc 2\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h i386/linux.h\"\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h\"\n \tcase ${target} in\n-\ti[34567]86-*-knetbsd*-gnu) tm_file=\"${tm_file} knetbsd-gnu.h i386/knetbsd-gnu.h\" ;;\n-\ti[34567]86-*-kfreebsd*-gnu) tm_file=\"${tm_file} kfreebsd-gnu.h i386/kfreebsd-gnu.h\" ;;\n+\ti[34567]86-*-linux*)\n+\t\tif test x$enable_targets = xall; then\n+\t\t\ttm_file=\"${tm_file} i386/x86-64.h i386/linux64.h\"\n+\t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n+\t\t\ttmake_file=\"${tmake_file} i386/t-linux64\"\n+\t\t\tneed_64bit_hwint=yes\n+\t\t\t# FIXME: -m64 for i[34567]86-*-* should be allowed just\n+\t\t\t# like -m32 for x86_64-*-*.\n+\t\t\tcase X\"${with_cpu}\" in\n+\t\t\tXgeneric|Xnocona|Xx86-64|Xk8|Xopteron|Xathlon64|Xathlon-fx)\n+\t\t\t\t;;\n+\t\t\tX)\n+\t\t\t\twith_cpu=generic\n+\t\t\t\t;;\n+\t\t\t*)\n+\t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n+\t\t\t\techo \"generic nocona x86-64 k8 opteron athlon64 athlon-fx\" 1>&2\n+\t\t\t\texit 1\n+\t\t\t\t;;\n+\t\t\tesac\n+\t\telse\n+\t\t\ttm_file=\"${tm_file} i386/linux.h\"\n+\t\tfi\n+\t\t;;\n+\ti[34567]86-*-knetbsd*-gnu) tm_file=\"${tm_file} i386/linux.h knetbsd-gnu.h i386/knetbsd-gnu.h\" ;;\n+\ti[34567]86-*-kfreebsd*-gnu) tm_file=\"${tm_file} i386/linux.h kfreebsd-gnu.h i386/kfreebsd-gnu.h\" ;;\n \tesac\n \ttmake_file=\"${tmake_file} i386/t-crtstuff i386/t-crtfm t-dfprules\"\n \t;;"}, {"sha": "2d0c7bf90f2677e11cbc3438235b4f8dbd97e4f0", "filename": "gcc/config/i386/linux64.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/gcc%2Fconfig%2Fi386%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/gcc%2Fconfig%2Fi386%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux64.h?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -19,7 +19,11 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n+#if TARGET_64BIT_DEFAULT\n #define TARGET_VERSION fprintf (stderr, \" (x86-64 Linux/ELF)\");\n+#else\n+#define TARGET_VERSION fprintf (stderr, \" (i386 Linux/ELF)\");\n+#endif\n \n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n@@ -52,14 +56,22 @@ Boston, MA 02110-1301, USA.  */\n #define GLIBC_DYNAMIC_LINKER32 \"/lib/ld-linux.so.2\"\n #define GLIBC_DYNAMIC_LINKER64 \"/lib64/ld-linux-x86-64.so.2\"\n \n+#if TARGET_64BIT_DEFAULT\n+#define SPEC_32 \"m32\"\n+#define SPEC_64 \"!m32\"\n+#else\n+#define SPEC_32 \"!m64\"\n+#define SPEC_64 \"m64\"\n+#endif\n+\n #undef\tLINK_SPEC\n-#define LINK_SPEC \"%{!m32:-m elf_x86_64} %{m32:-m elf_i386} \\\n+#define LINK_SPEC \"%{\" SPEC_64 \":-m elf_x86_64} %{\" SPEC_32 \":-m elf_i386} \\\n   %{shared:-shared} \\\n   %{!shared: \\\n     %{!static: \\\n       %{rdynamic:-export-dynamic} \\\n-      %{m32:%{!dynamic-linker:-dynamic-linker \" LINUX_DYNAMIC_LINKER32 \"}} \\\n-      %{!m32:%{!dynamic-linker:-dynamic-linker \" LINUX_DYNAMIC_LINKER64 \"}}} \\\n+      %{\" SPEC_32 \":%{!dynamic-linker:-dynamic-linker \" LINUX_DYNAMIC_LINKER32 \"}} \\\n+      %{\" SPEC_64 \":%{!dynamic-linker:-dynamic-linker \" LINUX_DYNAMIC_LINKER64 \"}}} \\\n     %{static:-static}}\"\n \n /* Similar to standard Linux, but adding -ffast-math support.  */\n@@ -68,7 +80,11 @@ Boston, MA 02110-1301, USA.  */\n   \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n    %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n \n+#if TARGET_64BIT_DEFAULT\n #define MULTILIB_DEFAULTS { \"m64\" }\n+#else\n+#define MULTILIB_DEFAULTS { \"m32\" }\n+#endif\n \n #undef NEED_INDICATE_EXEC_STACK\n #define NEED_INDICATE_EXEC_STACK 1"}, {"sha": "3bd6a5bc57b45044560792aa0388c3d35f573e47", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -1154,7 +1154,7 @@ powerpc-linux for powerpc64-linux, only generates 32-bit code.  This\n option enables the 32-bit target to be a bi-arch compiler, which is\n useful when you want a bi-arch compiler that defaults to 32-bit, and\n you are building a bi-arch or multi-arch binutils in a combined tree.\n-Currently, this option only affects powerpc-linux.\n+Currently, this option only affects powerpc-linux and x86-linux.\n \n @item --enable-secureplt\n This option enables @option{-msecure-plt} by default for powerpc-linux."}, {"sha": "b861abe3ea7359355da19ed917ea2fd454c02f8e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -1,3 +1,9 @@\n+2006-10-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* configure.ac (need_64bit_hwint): Set for i[34567]86-*-linux*\n+\tdepending on --enable-targets=all.\n+\t* configure: Regenerate.\n+\n 2006-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/28709"}, {"sha": "496f1fccf25a19770665f267bf15d4c6ad5c1343", "filename": "libcpp/configure", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -8246,6 +8246,13 @@ case $target in\n \tsparc-*-solaris2.[789] | sparc-*-solaris2.1[0-9]* | \\\n \tsh[123456789l]*-*-*)\n \t\tneed_64bit_hwint=yes ;;\n+\ti[34567]86-*-linux*)\n+\t\tif test \"x$enable_targets\" = xall; then\n+\t\t\tneed_64bit_hwint=yes\n+\t\telse\n+\t\t\tneed_64bit_hwint=no\n+\t\tfi\n+\t\t;;\n \t*)\n \t\tneed_64bit_hwint=no ;;\n esac"}, {"sha": "195d6261f1a145f3676d08d7f03f7491e98041c5", "filename": "libcpp/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f45f0f588d8af6ed4047e0ce4351749b6c0328b/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=0f45f0f588d8af6ed4047e0ce4351749b6c0328b", "patch": "@@ -130,6 +130,13 @@ case $target in\n \tsparc-*-solaris2.[789] | sparc-*-solaris2.1[0-9]* | \\\n \tsh[123456789l]*-*-*)\n \t\tneed_64bit_hwint=yes ;;\n+\ti[34567]86-*-linux*)\n+\t\tif test \"x$enable_targets\" = xall; then\n+\t\t\tneed_64bit_hwint=yes\n+\t\telse\n+\t\t\tneed_64bit_hwint=no\n+\t\tfi\n+\t\t;;\n \t*)\n \t\tneed_64bit_hwint=no ;;\n esac"}]}