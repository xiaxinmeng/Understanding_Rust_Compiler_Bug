{"sha": "95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmOTRiMzhiYmMxZjY1ZGRiNTI4N2I4ZmUxZTM1N2JmYmEzNmFlZg==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-01-17T19:44:45Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-01-17T19:44:45Z"}, "message": "fold-vec-mergehl-char.c: New.\n\n[testsuite]\n\n2018-01-17  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-mergehl-char.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-double.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-float.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-int.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-pixel.c: New.\n\t* gcc.target/powerpc/fold-vec-mergehl-short.c: New.\n\t* gcc.target/powerpc/builtins-1-be-folded.c: New.\n\t* gcc.target/powerpc/builtins-1-le-folded.c: New.\n\t* gcc.target/powerpc/builtins-1.fold.h: New.\n\nFrom-SVN: r256815", "tree": {"sha": "d6bb55b00bd21a37fceaefca6bda5d583b21f3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6bb55b00bd21a37fceaefca6bda5d583b21f3e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "355bae9212511c65172f1474f7905cfc669b8963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355bae9212511c65172f1474f7905cfc669b8963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355bae9212511c65172f1474f7905cfc669b8963"}], "stats": {"total": 536, "additions": 533, "deletions": 3}, "files": [{"sha": "a73d83bb0e0cf3a0820893a87623bc18b1d3b6cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -1,18 +1,20 @@\n 2018-01-17  Will Schmidt  <will_schmidt@vnet.ibm.com>\n-\n \t* gcc.target/powerpc/fold-vec-mergehl-char.c: New.\n \t* gcc.target/powerpc/fold-vec-mergehl-double.c: New.\n \t* gcc.target/powerpc/fold-vec-mergehl-float.c: New.\n \t* gcc.target/powerpc/fold-vec-mergehl-int.c: New.\n \t* gcc.target/powerpc/fold-vec-mergehl-longlong.c: New.\n \t* gcc.target/powerpc/fold-vec-mergehl-pixel.c: New.\n \t* gcc.target/powerpc/fold-vec-mergehl-short.c: New.\n-\t* gcc.target/powerpc/builtins-1-be.c: Disable gimple-folding.\n-\t* gcc.target/powerpc/builtins-1-le.c: Disable gimple-folding.\n \t* gcc.target/powerpc/builtins-1-be-folded.c: New.\n \t* gcc.target/powerpc/builtins-1-le-folded.c: New.\n \t* gcc.target/powerpc/builtins-1.fold.h: New.\n \n+2018-01-17  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-1-be.c: Disable gimple-folding.\n+\t* gcc.target/powerpc/builtins-1-le.c: Disable gimple-folding.\n+\n 2018-01-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/g2.c: Add -marm to dg-options."}, {"sha": "ecdd7ba6128f95799bb203bb2710d47e32c7f72d", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-be-folded.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be-folded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be-folded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be-folded.c?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { powerpc-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2 -mfold-gimple\" } */\n+\n+/* Based on builtins-1-le.c ; ensure that the power8 builtins are accepted by\n+   the compiler, at O2 with gimple folding enabled.  */\n+/* Test that a number of newly added builtin overloads are accepted\n+   by the compiler.  */\n+\n+/* The test code is in builtins-1.fold.h.  */\n+#include \"builtins-1.fold.h\""}, {"sha": "f8490b590bb32dcf71bb4eb9c1c190337b3b8ca6", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-le-folded.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le-folded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le-folded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le-folded.c?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2 -mfold-gimple\" } */\n+\n+/* Based on builtins-1-le.c ; ensure that the power8 builtins are accepted by\n+   the compiler, at O2 with gimple folding enabled.  */\n+/* Test that a number of newly added builtin overloads are accepted\n+   by the compiler.  */\n+\n+/* The test code is in builtins-1.fold.h.  */\n+#include \"builtins-1.fold.h\""}, {"sha": "8bc5f5e4336684f520cacd30d1cb6c11d18d98ce", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.fold.h", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.fold.h?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,232 @@\n+/* This test is included into builtins-1-be.c and builtins-1-le.c to test on\n+   Big Endian and Little Endian machines.  */\n+/* This file is based on builtins-1.h.  In this variant, most variables have\n+   been marked as extern to prevent optimization-away. */\n+\n+#include <altivec.h>\n+\n+vector double y = { 2.0, 4.0 };\n+extern vector double z;\n+\n+int main ()\n+{\n+  vector float fa = {1.0, 2.0, 3.0, -4.0};\n+  vector float fb = {-2.0, -3.0, -4.0, -5.0};\n+  extern vector float fd; fd = vec_and (fa, fb);\n+  extern vector float fc; fc = vec_cpsgn (fa, fb);\n+  extern vector float fe; fe = vec_mergeh (fa, fb);\n+  extern vector float ff; ff = vec_mergel (fa, fb);\n+\n+  vector double da = {1.0, 2.0};\n+  vector double db = {-2.0, -3.0};\n+  extern vector double dz; dz = vec_and (da, db);\n+\n+  vector long long la = {5L, 14L};\n+  vector long long lb = {3L, 86L};\n+  extern vector long long lc; lc = vec_and (la, lb);\n+  vector bool long long ld = {0, -1};\n+  extern vector long long le; le = vec_and (la, ld);\n+  extern vector long long lf; lf = vec_and (ld, lb);\n+\n+  vector unsigned long long ua = {5L, 14L};\n+  vector unsigned long long ub = {3L, 86L};\n+  extern vector unsigned long long uc; uc = vec_and (ua, ub);\n+  vector bool long long ud = {0, -1};\n+  extern vector unsigned long long ue; ue = vec_and (ua, ud);\n+  extern vector unsigned long long uf; uf = vec_and (ud, ub);\n+\n+  extern vector long long lg; lg = vec_andc (la, lb);\n+  extern vector long long lh; lh = vec_andc (la, ld);\n+  extern vector long long li; li = vec_andc (ld, lb);\n+\n+  extern vector unsigned long long ug; ug = vec_andc (ua, ub);\n+  extern vector unsigned long long uh; uh = vec_andc (ua, ud);\n+  extern vector unsigned long long ui; ui = vec_andc (ud, ub);\n+\n+  vector double de = {1.0, -4.0};\n+  vector double df = {-2.0, 5.0};\n+  extern vector double dg; dg = vec_cpsgn (de, df);\n+  extern vector double dzw; dzw = vec_mergeh (de, df);\n+  extern vector double dze; dze = vec_mergel (de, df);\n+\n+  extern vector long long lj; lj = vec_mergeh (la, lb);\n+  extern vector long long lk; lk = vec_mergeh (la, ld);\n+  extern vector long long ll; ll = vec_mergeh (ld, la);\n+\n+  extern vector unsigned long long uj; uj = vec_mergeh (ua, ub);\n+  extern vector unsigned long long uk; uk = vec_mergeh (ua, ud);\n+  extern vector unsigned long long ul; ul = vec_mergeh (ud, ua);\n+\n+  vector pixel pa = {9, 16, 25, 36, 1, 2, 3, 4};\n+  vector pixel pb = {25, 36, 1, 2, 45, 3, 4, 99};\n+  extern vector pixel pc; pc = vec_mergeh (pa, pb);\n+  extern vector pixel pd; pd = vec_mergel (pa, pb);\n+\n+  extern vector long long lm; lm = vec_mergel (la, lb);\n+  extern vector long long ln; ln = vec_mergel (la, ld);\n+  extern vector long long lo; lo = vec_mergel (ld, la);\n+\n+  extern vector unsigned long long um; um = vec_mergel (ua, ub);\n+  extern vector unsigned long long un; un = vec_mergel (ua, ud);\n+  extern vector unsigned long long uo; uo = vec_mergel (ud, ua);\n+\n+  extern vector long long lp; lp = vec_nor (la, lb);\n+  extern vector long long lq; lq = vec_nor (la, ld);\n+  extern vector long long lr; lr = vec_nor (ld, la);\n+\n+  extern vector unsigned long long up; up = vec_nor (ua, ub);\n+  extern vector unsigned long long uq; uq = vec_nor (ua, ud);\n+  extern vector unsigned long long ur; ur = vec_nor (ud, ua);\n+\n+  extern vector long long ls; ls = vec_or (la, lb);\n+  extern vector long long lt; lt = vec_or (la, ld);\n+  extern vector long long lu; lu = vec_or (ld, la);\n+\n+  extern vector unsigned long long us; us = vec_or (ua, ub);\n+  extern vector unsigned long long ut; ut = vec_or (ua, ud);\n+  extern vector unsigned long long uu; uu = vec_or (ud, ua);\n+\n+  vector unsigned char ca = {0,4,8,1,5,9,2,6,10,3,7,11,15,12,14,13};\n+  vector unsigned char cbb = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n+\n+  extern vector long long lv; lv = vec_perm (la, lb, ca);\n+\n+  extern vector unsigned char  ucm; ucm = vec_and (ca, cbb);\n+  extern vector unsigned char  ucn; ucn = vec_andc (ca, cbb);\n+  extern vector unsigned char  uco; uco = vec_mergel (ca, cbb);\n+\n+  extern vector unsigned long long uv; uv = vec_perm (ua, ub, ca);\n+\n+  extern vector long long lw; lw = vec_sel (la, lb, lc);\n+  extern vector long long lx; lx = vec_sel (la, lb, uc);\n+  extern vector long long ly; ly = vec_sel (la, lb, ld);\n+\n+  extern vector unsigned long long uw; uw = vec_sel (ua, ub, lc);\n+  extern vector unsigned long long ux; ux = vec_sel (ua, ub, uc);\n+  extern vector unsigned long long uy; uy = vec_sel (ua, ub, ld);\n+\n+  extern vector long long lz; lz = vec_xor (la, lb);\n+  extern vector long long l0; l0 = vec_xor (la, ld);\n+  extern vector long long l1; l1 = vec_xor (ld, la);\n+\n+  extern vector unsigned long long uz; uz = vec_xor (ua, ub);\n+  extern vector unsigned long long u0; u0 = vec_xor (ua, ud);\n+  extern vector unsigned long long u1; u1 = vec_xor (ud, ua);\n+\n+  extern int ia; ia = vec_all_eq (ua, ub);\n+  extern int ib; ib = vec_all_ge (ua, ub);\n+  extern int ic; ic = vec_all_gt (ua, ub);\n+  extern int id; id = vec_all_le (ua, ub);\n+  extern int ie; ie = vec_all_lt (ua, ub);\n+  extern int ig; ig = vec_all_ne (ua, ub);\n+\n+  extern int ih; ih = vec_any_eq (ua, ub);\n+  extern int ii; ii = vec_any_ge (ua, ub);\n+  extern int ij; ij = vec_any_gt (ua, ub);\n+  extern int ik; ik = vec_any_le (ua, ub);\n+  extern int il; il = vec_any_lt (ua, ub);\n+  extern int im; im = vec_any_ne (ua, ub);\n+\n+  vector short ssa = {9, 16, 25, 36, 1, 2, 3, 4};\n+  vector short ssb = {-8, -27, -64, -125, 2, 3, 5, 3};\n+  extern vector short sscc; sscc = vec_and (ssa, ssb);\n+  extern vector short sscd; sscd = vec_mergeh (ssa, ssb);\n+  extern vector short ssce; ssce = vec_mergel (ssa, ssb);\n+\n+  vector int sia = {9, 16, 25, 36};\n+  vector int sib = {-8, -27, -64, -125};\n+  extern vector int sicc; sicc = vec_and (sia, sib);\n+  extern vector int sicd; sicd = vec_andc (sia, sib);\n+  extern vector int sig; sig = vec_mergel (sia, sib);\n+\n+  vector unsigned int uia = {9, 16, 25, 36};\n+  vector unsigned int uib = {8, 27, 64, 125};\n+  extern vector unsigned int uicc; uicc = vec_and (uia, uib);\n+  extern vector unsigned int uidd; uidd = vec_andc (uia, uib);\n+  extern vector unsigned int uig; uig = vec_mergel (uia, uib);\n+\n+  vector bool char bca = {0, 1, 4, 7};\n+  vector bool char bcb = {-8, 9, 2, 9};\n+  extern vector bool char bcc; bcc= vec_and (bca, bcb);\n+  extern vector bool char bcd; bcd = vec_andc (bca, bcb);\n+  extern vector bool char bce; bce = vec_mergel (bca, bcb);\n+\n+  vector bool short bsa = {0, -1, -1, 0, 3, 4, 6, 7};\n+  vector bool short bsb = {-1, -1, 0, -1, 0, 0, 0, 0};\n+  extern vector bool short bscc; bscc = vec_and (bsa, bsb);\n+  extern vector bool short bscd; bscd = vec_andc (bsa, bsb);\n+  extern vector bool short bsce; bsce = vec_mergel (bsa, bsb);\n+\n+  vector bool int bia = {0, -1, -1, 0};\n+  vector bool int bib = {-1, -1, 0, -1};\n+  extern vector bool int bicc; bicc = vec_and (bia, bib);\n+  extern vector bool int bicd; bicd = vec_andc (bia, bib);\n+  extern vector bool int bide; bide = vec_mergel (bia, bib);\n+\n+  extern vector unsigned int uie; uie = vec_packsu (ua, ub);\n+\n+  extern vector long long l2; l2 = vec_cntlz (la);\n+  extern vector unsigned long long u2; u2 = vec_cntlz (ua);\n+  extern vector int sie; sie = vec_cntlz (sia);\n+  extern vector unsigned int uif; uif = vec_cntlz (uia);\n+  extern vector short sszz; sszz = vec_cntlz (ssa);\n+\n+  vector unsigned short usa = {81, 72, 63, 54, 45, 36, 27, 18};\n+  vector unsigned short usb = {81, 72, 63, 54, 45, 36, 27, 18};\n+  extern vector unsigned short usd; usd = vec_and (usa, usb);\n+  extern vector unsigned short use; use = vec_andc (usa, usb);\n+  extern vector unsigned short usc; usc = vec_cntlz (usa);\n+  extern vector unsigned short uscd; uscd = vec_mergeh (usa, usb);\n+  extern vector unsigned short usce; usce = vec_mergel (usa, usb);\n+\n+  vector signed char sca = {-4, 3, -9, 15, -31, 31, 0, 0,\n+\t\t            1, 117, -36, 99, 98, 97, 96, 95};\n+  extern vector signed char scb; scb = vec_cntlz (sca);\n+  extern vector signed char scc; scc = vec_mergel (sca, scb);\n+\n+  extern vector unsigned char cb; cb = vec_cntlz (ca);\n+\n+  extern vector double dd; dd = vec_xl (0, &y);\n+  vec_xst (dd, 0, &z);\n+\n+  extern vector double dzz; dzz = vec_round (dd);\n+  extern vector double dzz1; dzz1 = vec_rsqrt (dd);\n+  extern vector double dzz2; dzz2 = vec_rsqrte (dd);\n+\n+  extern vector double dff; dff = vec_splat (de, 0);\n+  extern vector double dgg; dgg = vec_splat (de, 1);\n+  extern vector long long l3; l3 = vec_splat (l2, 0);\n+  extern vector long long l4; l4 = vec_splat (l2, 1);\n+  extern vector unsigned long long u3; u3 = vec_splat (u2, 0);\n+  extern vector unsigned long long u4; u4 = vec_splat (u2, 1);\n+  extern vector bool long long l5; l5 = vec_splat (ld, 0);\n+  extern vector bool long long l6; l6 = vec_splat (ld, 1);\n+  extern vector bool long long l10; l10 = vec_mergee (ld, ld);\n+  extern vector bool long long l11; l11 = vec_mergeo (ld, ld);\n+\n+  extern vector long long l7; l7 = vec_div (l3, l4);\n+  extern vector unsigned long long u5; u5 = vec_div (u3, u4);\n+  extern vector long long l12; l12 = vec_mergee (la, lb);\n+  extern vector long long l13; l13 = vec_mergeo (la, lb);\n+  extern vector unsigned long long u8; u8 = vec_mergee (u3, u4);\n+  extern vector unsigned long long u9; u9 = vec_mergeo (u3, u4);\n+\n+  extern vector long long l8; l8 = vec_mul (l3, l4);\n+  extern vector unsigned long long u6; u6 = vec_mul (u3, u4);\n+\n+  extern vector double dh; dh = vec_ctf (la, -2);\n+  extern vector double di; di = vec_ctf (ua, 2);\n+  extern vector int sz; sz = vec_cts (fa, 0x1F);\n+  extern vector long long l9; l9 = vec_cts (dh, -2);\n+  extern vector unsigned long long u7; u7 = vec_ctu (di, 2);\n+  extern vector unsigned int usz; usz = vec_ctu (fa, 0x1F);\n+\n+  extern vector float f1; f1 = vec_mergee (fa, fb);\n+  extern vector float f2; f2 = vec_mergeo (fa, fb);\n+\n+  extern vector double d1; d1 = vec_mergee (da, db);\n+  extern vector double d2; d2 = vec_mergeo (da, db);\n+\n+  return 0;\n+}\n+"}, {"sha": "1762603ec7fe43a7d292d1678134ec27dc087dd2", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergehl-char.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-char.c?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,55 @@\n+/* Verify that overloaded built-ins for vec_merge* with char\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char \n+test_misc () {\n+\tvector signed char vsc1c = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+\tvector signed char vsc2c = {9,10,11,12,13,14,15,16,0,1,2,3,4,5,6,7};\n+\treturn vec_mergel (vsc1c, vsc2c);\n+}\n+\n+vector bool char\n+testbc_l (vector bool char vbc2, vector bool char vbc3)\n+{\n+  return vec_mergel (vbc2, vbc3);\n+}\n+\n+vector signed char\n+testsc_l (vector signed char vsc2, vector signed char vsc3)\n+{\n+  return vec_mergel (vsc2, vsc3);\n+}\n+\n+vector unsigned char\n+testuc_l (vector unsigned char vuc2, vector unsigned char vuc3)\n+{\n+  return vec_mergel (vuc2, vuc3);\n+}\n+\n+vector bool char\n+testbc_h (vector bool char vbc2, vector bool char vbc3)\n+{\n+  return vec_mergeh (vbc2, vbc3);\n+}\n+\n+vector signed char\n+testsc_h (vector signed char vsc2, vector signed char vsc3)\n+{\n+  return vec_mergeh (vsc2, vsc3);\n+}\n+\n+vector unsigned char\n+testuc_h (vector unsigned char vuc2, vector unsigned char vuc3)\n+{\n+  return vec_mergeh (vuc2, vuc3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmrghb\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vmrglb\" 3 } } */\n+"}, {"sha": "25f4bc6aa2074e95481b85eeae0682351634a174", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergehl-double.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-double.c?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,25 @@\n+/* Verify that overloaded built-ins for vec_splat with float and\n+   double inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector double\n+testd_l (vector double vd2, vector double vd3)\n+{\n+  return vec_mergel (vd2, vd3);\n+}\n+\n+vector double\n+testd_h (vector double vd2, vector double vd3)\n+{\n+  return vec_mergeh (vd2, vd3);\n+}\n+\n+/* vec_merge with doubles tend to just use xxpermdi (3 ea for BE, 1 ea for LE).  */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 2  { target { powerpc*le-*-* } }    } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 6  { target { powerpc-*-* } }     } } */\n+"}, {"sha": "989101635b0c3372f7acc6927ec000d64f09800a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergehl-float.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-float.c?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that overloaded built-ins for vec_splat with float\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+testf_l (vector float vf2, vector float vf3)\n+{\n+  return vec_mergel (vf2, vf3);\n+}\n+\n+vector float\n+testf_h (vector float vf2, vector float vf3)\n+{\n+  return vec_mergeh (vf2, vf3);\n+}\n+\n+/* mergeh with floats use xxmrgh{l,w} (1 ea) insns.  */\n+\n+/* { dg-final { scan-assembler-times \"xxmrghw|vmrghw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxmrglw|vmrglw\" 1 } } */\n+"}, {"sha": "4da09fd8411a1ef279c59b0069668357b3321290", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergehl-int.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-int.c?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,48 @@\n+/* Verify that overloaded built-ins for vec_merge* with int\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 \" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+testbi_l (vector bool int vbi2, vector bool int vbi3)\n+{\n+  return vec_mergel (vbi2, vbi3);\n+}\n+\n+vector signed int\n+testsi_l (vector signed int vsi2, vector signed int vsi3)\n+{\n+  return vec_mergel (vsi2, vsi3);\n+}\n+\n+vector unsigned int\n+testui_l (vector unsigned int vui2, vector unsigned int vui3)\n+{\n+  return vec_mergel (vui2, vui3);\n+}\n+\n+vector bool int\n+testbi_h (vector bool int vbi2, vector bool int vbi3)\n+{\n+  return vec_mergeh (vbi2, vbi3);\n+}\n+\n+vector signed int\n+testsi_h (vector signed int vsi2, vector signed int vsi3)\n+{\n+  return vec_mergeh (vsi2, vsi3);\n+}\n+\n+vector unsigned int\n+testui_h (vector unsigned int vui2, vector unsigned int vui3)\n+{\n+  return vec_mergeh (vui2, vui3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmrghw|xxmrghw\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vmrglw|xxmrglw\" 3 } } */\n+"}, {"sha": "3cb566c3007dda11884a116ca07b5e6996014ea3", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergehl-longlong.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-longlong.c?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,48 @@\n+/* Verify that overloaded built-ins for vec_merge* with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+testbl_l (vector bool long long vbl2, vector bool long long vbl3)\n+{\n+  return vec_mergel (vbl2, vbl3);\n+}\n+\n+vector signed long long\n+testsl_l (vector signed long long vsl2, vector signed long long vsl3)\n+{\n+  return vec_mergel (vsl2, vsl3);\n+}\n+\n+vector unsigned long long\n+testul_l (vector unsigned long long vul2, vector unsigned long long vul3)\n+{\n+  return vec_mergel (vul2, vul3);\n+}\n+\n+vector bool long long\n+testbl_h (vector bool long long vbl2, vector bool long long vbl3)\n+{\n+  return vec_mergeh (vbl2, vbl3);\n+}\n+\n+vector signed long long\n+testsl_h (vector signed long long vsl2, vector signed long long vsl3)\n+{\n+  return vec_mergeh (vsl2, vsl3);\n+}\n+\n+vector unsigned long long\n+testul_h (vector unsigned long long vul2, vector unsigned long long vul3)\n+{\n+  return vec_mergeh (vul2, vul3);\n+}\n+\n+/* mergeh with longlong types use xxpermdi (1 ea).  */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 6 } } */\n+"}, {"sha": "8c41bbfde2f97343ee8f463f2f4b00c2b0987852", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergehl-pixel.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-pixel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-pixel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-pixel.c?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,24 @@\n+/* Verify that overloaded built-ins for vec_splat with pixel\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector pixel\n+testf_el (vector pixel px2, vector pixel px3)\n+{\n+  return vec_mergel (px2, px3);\n+}\n+\n+vector pixel\n+testf_eh (vector pixel px2, vector pixel px3)\n+{\n+  return vec_mergeh (px2, px3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmrghh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmrglh\" 1 } } */\n+"}, {"sha": "b3a0362ee18a0d9b88f1f4cfe2c08e553760add4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergehl-short.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergehl-short.c?ref=95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "patch": "@@ -0,0 +1,48 @@\n+/* Verify that overloaded built-ins for vec_merge* with int\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+testbi_el (vector bool short vbs2, vector bool short vbs3)\n+{\n+  return vec_mergel (vbs2, vbs3);\n+}\n+\n+vector signed short\n+testsi_el (vector signed short vss2, vector signed short vss3)\n+{\n+  return vec_mergel (vss2, vss3);\n+}\n+\n+vector unsigned short\n+testui_el (vector unsigned short vus2, vector unsigned short vus3)\n+{\n+  return vec_mergel (vus2, vus3);\n+}\n+\n+vector bool short\n+testbi_eh (vector bool short vbs2, vector bool short vbs3)\n+{\n+  return vec_mergeh (vbs2, vbs3);\n+}\n+\n+vector signed short\n+testsi_eh (vector signed short vss2, vector signed short vss3)\n+{\n+  return vec_mergeh (vss2, vss3);\n+}\n+\n+vector unsigned short\n+testui_eh (vector unsigned short vus2, vector unsigned short vus3)\n+{\n+  return vec_mergeh (vus2, vus3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmrghh\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vmrglh\" 3 } } */\n+"}]}