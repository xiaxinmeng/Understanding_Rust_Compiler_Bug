{"sha": "053cf9940a4086500ebaa994d29b894e8f5ed71a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzY2Y5OTQwYTQwODY1MDBlYmFhOTk0ZDI5Yjg5NGU4ZjVlZDcxYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T12:04:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T12:04:02Z"}, "message": "[multiple changes]\n\n2012-05-15  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch4.adb (Has_Inferable_Discriminants): For a qualified\n\texpression, use correct node for test on the subtype denoted by\n\tthe subtype mark.\n\n2012-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* inline.adb (Scope_In_Main_Unit): Rename into...\n\t(In_Main_Unit_Or_Subunit): ...this.  Also return\n\ttrue if the subprogram is within a subunit of the\n\tmain unit.\n\t(Add_Inlined_Body): Adjust for above renaming.\n\t(Add_Inlined_Subprogram): Likewise.  Pass the subprogram directly.\n\t(Analyze_Inlined_Bodies): Really set aside inlined subprograms\n\tnot handled by Add_Inlined_Body.\n\nFrom-SVN: r187528", "tree": {"sha": "5ce8f11d14fa75ef1364f8589870440489aaec4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ce8f11d14fa75ef1364f8589870440489aaec4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053cf9940a4086500ebaa994d29b894e8f5ed71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053cf9940a4086500ebaa994d29b894e8f5ed71a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053cf9940a4086500ebaa994d29b894e8f5ed71a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053cf9940a4086500ebaa994d29b894e8f5ed71a/comments", "author": null, "committer": null, "parents": [{"sha": "8a49a499a558ea71160ccfa5330f6c65af92cf80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a49a499a558ea71160ccfa5330f6c65af92cf80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a49a499a558ea71160ccfa5330f6c65af92cf80"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "a68c95c08e81a8d23027a2c8b5432ca9c41b3e98", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cf9940a4086500ebaa994d29b894e8f5ed71a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cf9940a4086500ebaa994d29b894e8f5ed71a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=053cf9940a4086500ebaa994d29b894e8f5ed71a", "patch": "@@ -1,3 +1,20 @@\n+2012-05-15  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch4.adb (Has_Inferable_Discriminants): For a qualified\n+\texpression, use correct node for test on the subtype denoted by\n+\tthe subtype mark.\n+\n+2012-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Scope_In_Main_Unit): Rename into...\n+\t(In_Main_Unit_Or_Subunit): ...this.  Also return\n+\ttrue if the subprogram is within a subunit of the\n+\tmain unit.\n+\t(Add_Inlined_Body): Adjust for above renaming.\n+\t(Add_Inlined_Subprogram): Likewise.  Pass the subprogram directly.\n+\t(Analyze_Inlined_Bodies): Really set aside inlined subprograms\n+\tnot handled by Add_Inlined_Body.\n+\n 2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch10.adb (Expand_With_Clause): In the context of a generic"}, {"sha": "69c483a1d1d7800e94b1d332fd5fc55454178bb0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cf9940a4086500ebaa994d29b894e8f5ed71a/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cf9940a4086500ebaa994d29b894e8f5ed71a/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=053cf9940a4086500ebaa994d29b894e8f5ed71a", "patch": "@@ -10105,9 +10105,9 @@ package body Exp_Ch4 is\n       --  mark is a constrained Unchecked_Union subtype.\n \n       elsif Nkind (N) = N_Qualified_Expression then\n-         return Is_Unchecked_Union (Subtype_Mark (N))\n+         return Is_Unchecked_Union (Etype (Subtype_Mark (N)))\n                   and then\n-                Is_Constrained (Subtype_Mark (N));\n+                Is_Constrained (Etype (Subtype_Mark (N)));\n \n       end if;\n "}, {"sha": "2c849923e56bfefc7c95891c3c2dd6f62c2d6be9", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cf9940a4086500ebaa994d29b894e8f5ed71a/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cf9940a4086500ebaa994d29b894e8f5ed71a/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=053cf9940a4086500ebaa994d29b894e8f5ed71a", "patch": "@@ -138,8 +138,8 @@ package body Inline is\n    --  Return the entity node for the unit containing E. Always return\n    --  the spec for a package.\n \n-   function Scope_In_Main_Unit (Scop : Entity_Id) return Boolean;\n-   --  Return True if Scop is in the main unit or its spec\n+   function In_Main_Unit_Or_Subunit (E : Entity_Id) return Boolean;\n+   --  Return True if E is in the main unit or its spec or in a subunit\n \n    procedure Add_Call (Called : Entity_Id; Caller : Entity_Id := Empty);\n    --  Make two entries in Inlined table, for an inlined subprogram being\n@@ -341,7 +341,7 @@ package body Inline is\n \n                elsif not Is_Inlined (Pack)\n                  and then Comes_From_Source (E)\n-                 and then not Scope_In_Main_Unit (Pack)\n+                 and then not In_Main_Unit_Or_Subunit (Pack)\n                then\n                   Set_Is_Inlined (Pack);\n                   Inlined_Bodies.Increment_Last;\n@@ -433,7 +433,7 @@ package body Inline is\n         and then (Is_Inlined (Pack)\n                     or else Is_Generic_Instance (Pack)\n                     or else Is_Internal (E))\n-        and then not Scope_In_Main_Unit (Pack)\n+        and then not In_Main_Unit_Or_Subunit (E)\n         and then not Is_Nested (E)\n         and then not Has_Initialized_Type (E)\n       then\n@@ -746,7 +746,7 @@ package body Inline is\n                --  This means that Add_Inlined_Body added the subprogram to the\n                --  table but wasn't able to handle its code unit. Do nothing.\n \n-               null;\n+               Inlined.Table (Index).Processed := True;\n             elsif Inlined.Table (Index).Main_Call then\n                Pending_Inlined.Increment_Last;\n                Pending_Inlined.Table (Pending_Inlined.Last) := Index;\n@@ -767,9 +767,9 @@ package body Inline is\n \n             while S /= No_Succ loop\n                Subp := Successors.Table (S).Subp;\n-               Set_Is_Called (Inlined.Table (Subp).Name);\n \n                if not Inlined.Table (Subp).Processed then\n+                  Set_Is_Called (Inlined.Table (Subp).Name);\n                   Pending_Inlined.Increment_Last;\n                   Pending_Inlined.Table (Pending_Inlined.Last) := Subp;\n                   Inlined.Table (Subp).Processed := True;\n@@ -1156,23 +1156,27 @@ package body Inline is\n       end loop;\n    end Remove_Dead_Instance;\n \n-   ------------------------\n-   -- Scope_In_Main_Unit --\n-   ------------------------\n+   -----------------------------\n+   -- In_Main_Unit_Or_Subunit --\n+   -----------------------------\n \n-   function Scope_In_Main_Unit (Scop : Entity_Id) return Boolean is\n-      Comp : constant Node_Id := Cunit (Get_Code_Unit (Scop));\n+   function In_Main_Unit_Or_Subunit (E : Entity_Id) return Boolean is\n+      Comp : Node_Id := Cunit (Get_Code_Unit (E));\n \n    begin\n-      --  Check whether the scope of the subprogram to inline is within the\n-      --  main unit or within its spec. In either case there are no additional\n-      --  bodies to process. If the subprogram appears in a parent of the\n-      --  current unit, the check on whether inlining is possible is done in\n-      --  Analyze_Inlined_Bodies.\n+      --  Check whether the subprogram or package to inline is within the main\n+      --  unit or its spec or within a subunit. In either case there are no\n+      --  additional bodies to process. If the subprogram appears in a parent\n+      --  of the current unit, the check on whether inlining is possible is\n+      --  done in Analyze_Inlined_Bodies.\n+\n+      while Nkind (Unit (Comp)) = N_Subunit loop\n+         Comp := Library_Unit (Comp);\n+      end loop;\n \n       return\n         Comp = Cunit (Main_Unit)\n           or else Comp = Library_Unit (Cunit (Main_Unit));\n-   end Scope_In_Main_Unit;\n+   end In_Main_Unit_Or_Subunit;\n \n end Inline;"}]}