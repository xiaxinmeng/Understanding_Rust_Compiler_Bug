{"sha": "98e819b9b7517686db6f7a313a25e13486e4563c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThlODE5YjliNzUxNzY4NmRiNmY3YTMxM2EyNWUxMzQ4NmU0NTYzYw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-16T17:39:15Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-16T17:39:15Z"}, "message": "(ashlhi3_k, lshrhi3_m): new insn pattern.\n\n(lshrhi3, shl_sext_ext, shl_sext_sub):\nnew insn pattern with matching define_split.\n(and_shl_scratch): Likewise, but also with unnamed variants.\n\nFrom-SVN: r12725", "tree": {"sha": "6b8bd3ca4436a8c950f542ad803b40bb6b127a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b8bd3ca4436a8c950f542ad803b40bb6b127a7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98e819b9b7517686db6f7a313a25e13486e4563c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e819b9b7517686db6f7a313a25e13486e4563c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e819b9b7517686db6f7a313a25e13486e4563c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e819b9b7517686db6f7a313a25e13486e4563c/comments", "author": null, "committer": null, "parents": [{"sha": "e0040a8ede6f15e54a55e9e7bdddf6a66bffec2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0040a8ede6f15e54a55e9e7bdddf6a66bffec2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0040a8ede6f15e54a55e9e7bdddf6a66bffec2a"}], "stats": {"total": 278, "additions": 278, "deletions": 0}, "files": [{"sha": "9e9fd9481d474cfe634a4ed34f4f30600a8b26b7", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e819b9b7517686db6f7a313a25e13486e4563c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e819b9b7517686db6f7a313a25e13486e4563c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=98e819b9b7517686db6f7a313a25e13486e4563c", "patch": "@@ -783,6 +783,15 @@\n \tadd\t%0,%0\n \tshll%O2\t%0\")\n \n+(define_insn \"ashlhi3_k\"\n+  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r,r\")\n+\t(ashift:HI (match_operand:HI 1 \"arith_reg_operand\" \"0,0\")\n+\t\t   (match_operand:HI 2 \"const_int_operand\" \"M,K\")))]\n+  \"CONST_OK_FOR_K (INTVAL (operands[2]))\"\n+  \"@\n+\tadd\t%0,%0\n+\tshll%O2\t%0\")\n+\n (define_insn \"ashlsi3_n\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n@@ -830,6 +839,34 @@\n     FAIL;\n }\")\n \n+(define_insn \"ashlhi3\"\n+  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n+\t(ashift:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n+\t\t   (match_operand:HI 2 \"const_int_operand\" \"n\")))\n+   (clobber (reg:SI 18))]\n+  \"\"\n+  \"#\"\n+  [(set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"shift_insns_rtx (insn)\") (const_int 1))\n+\t       (const_string \"2\")\n+\t       (eq (symbol_ref \"shift_insns_rtx (insn)\") (const_int 2))\n+\t       (const_string \"4\")]\n+\t      (const_string \"6\")))\n+   (set_attr \"type\" \"arith\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"arith_reg_operand\" \"\")\n+\t(ashift:HI (match_operand:HI 1 \"arith_reg_operand\" \"\")\n+\t\t   (match_operand:HI 2 \"const_int_operand\" \"n\")))\n+   (clobber (reg:SI 18))]\n+  \"\"\n+  [(use (reg:SI 0))]\n+  \"\n+{\n+  gen_shifty_hi_op (ASHIFT, operands);\n+  DONE;\n+}\")\n+\n ;\n ; arithmetic shift right\n ;\n@@ -843,6 +880,15 @@\n   \"shar\t%0\"\n   [(set_attr \"type\" \"arith\")])\n \n+(define_insn \"ashrhi3_k\"\n+  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n+\t(ashiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n+\t\t     (match_operand:HI 2 \"const_int_operand\" \"M\")))\n+   (clobber (reg:SI 18))]\n+  \"INTVAL (operands[2]) == 1\"\n+  \"shar\t%0\"\n+  [(set_attr \"type\" \"arith\")])\n+\n ;; ??? This should be a define expand.\n \n (define_insn \"ashrsi2_16\"\n@@ -919,6 +965,22 @@\n    && ! CONST_OK_FOR_M (INTVAL (operands[2]))\"\n   \"shlr%O2\t%0\")\n \n+(define_insn \"lshrhi3_m\"\n+  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n+\t\t     (match_operand:HI 2 \"const_int_operand\" \"M\")))\n+   (clobber (reg:SI 18))]\n+  \"CONST_OK_FOR_M (INTVAL (operands[2]))\"\n+  \"shlr\t%0\")\n+\n+(define_insn \"lshrhi3_k\"\n+  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n+\t\t     (match_operand:HI 2 \"const_int_operand\" \"K\")))]\n+  \"CONST_OK_FOR_K (INTVAL (operands[2]))\n+   && ! CONST_OK_FOR_M (INTVAL (operands[2]))\"\n+  \"shlr%O2\t%0\")\n+\n (define_insn \"lshrsi3_n\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n@@ -968,6 +1030,35 @@\n     FAIL;\n }\")\n \n+(define_insn \"lshrhi3\"\n+  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n+\t\t     (match_operand:HI 2 \"const_int_operand\" \"n\")))\n+   (clobber (reg:SI 18))]\n+  \"\"\n+  \"#\"\n+;; ??? length attribute is sometimes six instead of four.\n+  [(set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"shift_insns_rtx (insn)\") (const_int 1))\n+\t       (const_string \"2\")\n+\t       (eq (symbol_ref \"shift_insns_rtx (insn)\") (const_int 2))\n+\t       (const_string \"4\")]\n+\t      (const_string \"6\")))\n+   (set_attr \"type\" \"arith\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"arith_reg_operand\" \"\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"\")\n+\t\t     (match_operand:HI 2 \"const_int_operand\" \"n\")))\n+   (clobber (reg:SI 18))]\n+  \"\"\n+  [(use (reg:SI 0))]\n+  \"\n+{\n+  gen_shifty_hi_op (LSHIFTRT, operands);\n+  DONE;\n+}\")\n+\n ;; ??? This should be a define expand.\n \n (define_insn \"ashldi3_k\"\n@@ -1027,6 +1118,193 @@\n   \"\"\n   \"{ if (GET_CODE (operands[2]) != CONST_INT\n \t || INTVAL (operands[2]) != 1) FAIL; } \")\n+\n+;; combined left/right shift\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))]\n+  \"(unsigned)INTVAL (operands[2]) < 32\"\n+  [(use (reg:SI 0))]\n+  \"if (gen_shl_and (operands[0], operands[2], operands[3], operands[1])) FAIL;\n+   DONE;\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))\n+   (clobber (reg:SI 18))]\n+  \"(unsigned)INTVAL (operands[2]) < 32\"\n+  [(use (reg:SI 0))]\n+  \"if (gen_shl_and (operands[0], operands[2], operands[3], operands[1])) FAIL;\n+   DONE;\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))\n+   (clobber (reg:SI 18))]\n+  \"shl_and_kind (operands[2], operands[3], 0) == 1\"\n+ \"#\"\n+  [(set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"shl_and_length (insn)\") (const_int 2))\n+\t       (const_string \"4\")\n+\t       (eq (symbol_ref \"shl_and_length (insn)\") (const_int 3))\n+\t       (const_string \"6\")\n+\t       (eq (symbol_ref \"shl_and_length (insn)\") (const_int 4))\n+\t       (const_string \"8\")\n+\t       (eq (symbol_ref \"shl_and_length (insn)\") (const_int 5))\n+\t       (const_string \"10\")\n+\t       (eq (symbol_ref \"shl_and_length (insn)\") (const_int 6))\n+\t       (const_string \"12\")\n+\t       (eq (symbol_ref \"shl_and_length (insn)\") (const_int 7))\n+\t       (const_string \"14\")\n+\t       (eq (symbol_ref \"shl_and_length (insn)\") (const_int 8))\n+\t       (const_string \"16\")]\n+\t      (const_string \"18\")))\n+   (set_attr \"type\" \"arith\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n+\t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))\n+   (clobber (reg:SI 18))]\n+  \"shl_and_kind (operands[2], operands[3], 0) == 2\"\n+ \"#\"\n+  [(set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"shl_and_length (insn)\") (const_int 2))\n+\t       (const_string \"4\")\n+\t       (eq (symbol_ref \"shl_and_length (insn)\") (const_int 3))\n+\t       (const_string \"6\")\n+\t       (eq (symbol_ref \"shl_and_length (insn)\") (const_int 4))\n+\t       (const_string \"8\")]\n+\t      (const_string \"10\")))\n+   (set_attr \"type\" \"arith\")])\n+\n+;; shift left / and combination with a scratch register: The combine pass\n+;; does not accept the individual instructions, even though they are\n+;; cheap.  But it needs a precise description so that it is usable after\n+;; reload.\n+(define_insn \"and_shl_scratch\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n+\t(lshiftrt:SI (ashift:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,0\")\n+\t\t\t\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"N,n\"))\n+\t\t\t\t\t(match_operand:SI 3 \"\" \"0,r\"))\n+\t\t\t\t(match_operand:SI 4 \"const_int_operand\" \"n,n\"))\n+\t\t     (match_operand:SI 5 \"const_int_operand\" \"n,n\")))\n+   (clobber (reg:SI 18))]\n+  \"\"\n+  \"#\"\n+  [(set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"shl_and_scr_length (insn)\") (const_int 2))\n+\t       (const_string \"4\")\n+\t       (eq (symbol_ref \"shl_and_scr_length (insn)\") (const_int 3))\n+\t       (const_string \"6\")\n+\t       (eq (symbol_ref \"shl_and_scr_length (insn)\") (const_int 4))\n+\t       (const_string \"6\")\n+\t       (eq (symbol_ref \"shl_and_scr_length (insn)\") (const_int 5))\n+\t       (const_string \"10\")]\n+\t      (const_string \"12\")))\n+   (set_attr \"type\" \"arith\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n+\t(lshiftrt:SI (ashift:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,0\")\n+\t\t\t\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"N,n\"))\n+\t\t\t\t\t(match_operand:SI 3 \"register_operand\" \"0,r\"))\n+\t\t\t\t(match_operand:SI 4 \"const_int_operand\" \"n,n\"))\n+\t\t     (match_operand:SI 5 \"const_int_operand\" \"n,n\")))\n+   (clobber (reg:SI 18))]\n+  \"\"\n+  [(use (reg:SI 0))]\n+  \"\n+{\n+  rtx and_source = operands[1];\n+\n+  if (INTVAL (operands[2]))\n+    {\n+      gen_shifty_op (LSHIFTRT, operands);\n+      and_source = operands[3];\n+    }\n+  emit_insn (gen_andsi3 (operands[0], operands[0], and_source));\n+  operands[2] = operands[4];\n+  gen_shifty_op (ASHIFT, operands);\n+  if (INTVAL (operands[5]))\n+    {\n+      operands[2] = operands[5];\n+      gen_shifty_op (LSHIFTRT, operands);\n+    }\n+  DONE;\n+}\")\n+\n+;; signed left/right shift combination.\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (sign_extract:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")\n+\t\t\t (const_int 0)))\n+   (clobber (reg:SI 18))]\n+  \"\"\n+  [(use (reg:SI 0))]\n+  \"if (gen_shl_sext (operands[0], operands[2], operands[3], operands[1])) FAIL;\n+   DONE;\")\n+\n+(define_insn \"shl_sext_ext\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (sign_extract:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")\n+\t\t\t (const_int 0)))\n+   (clobber (reg:SI 18))]\n+  \"shl_sext_kind (operands[2], operands[3], 0) <= 5\"\n+  \"#\"\n+  [(set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"shl_sext_length (insn)\") (const_int 1))\n+\t       (const_string \"2\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 2))\n+\t       (const_string \"4\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 3))\n+\t       (const_string \"6\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 4))\n+\t       (const_string \"8\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 5))\n+\t       (const_string \"10\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 6))\n+\t       (const_string \"12\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 7))\n+\t       (const_string \"14\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 8))\n+\t       (const_string \"16\")]\n+\t      (const_string \"18\")))\n+    (set_attr \"type\" \"arith\")])\n+\n+(define_insn \"shl_sext_sub\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n+        (sign_extract:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")\n+\t\t\t (const_int 0)))\n+   (clobber (reg:SI 18))]\n+  \"(shl_sext_kind (operands[2], operands[3], 0) & ~1) == 6\"\n+  \"#\"\n+  [(set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"shl_sext_length (insn)\") (const_int 3))\n+\t       (const_string \"6\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 4))\n+\t       (const_string \"8\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 5))\n+\t       (const_string \"10\")\n+\t       (eq (symbol_ref \"shl_sext_length (insn)\") (const_int 6))\n+\t       (const_string \"12\")]\n+\t      (const_string \"14\")))\n+    (set_attr \"type\" \"arith\")])\n+\n \f\n ;; -------------------------------------------------------------------------\n ;; Unary arithmetic"}]}