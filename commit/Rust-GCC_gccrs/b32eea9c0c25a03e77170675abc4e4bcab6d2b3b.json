{"sha": "b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyZWVhOWMwYzI1YTAzZTc3MTcwNjc1YWJjNGU0YmNhYjZkMmIzYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-11T17:41:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-11T17:41:37Z"}, "message": "libstdc++: Fix istream::ignore discarding too many chars (PR 94749)\n\nThe current code assumes that if the next character in the stream is\nequal to the delimiter then we stopped because we saw that delimiter,\nand so discards it.  But in the testcase for the PR we stop because we\nreached the maximum number of characters, and it's coincidence that the\nnext character equals the delimiter. We should not discard the next\ncharacter in that case.\n\nThe fix is to check that we haven't discarded __n characters already,\ninstead of checking whether the next character equals __delim. Because\nwe've already checked for EOF, if we haven't discarded __n yet then we\nknow we stopped because we saw the delimiter. On the other hand, if the\nnext character is the delimiter we don't know if that's why we stopped.\n\n\tPR libstdc++/94749\n\t* include/bits/istream.tcc (basic_istream::ignore(streamsize, CharT)):\n\tOnly discard an extra character if we didn't already reach the\n\tmaximum number.\n\t* src/c++98/istream.cc (istream::ignore(streamsiz, char))\n\t(wistream::ignore(streamsize, wchar_t)): Likewise.\n\t* testsuite/27_io/basic_istream/ignore/char/94749.cc: New test.\n\t* testsuite/27_io/basic_istream/ignore/wchar_t/94749.cc: New test.", "tree": {"sha": "9763a78fcc4c3eb8903f96ce5654a1b23752b8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9763a78fcc4c3eb8903f96ce5654a1b23752b8b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f896fe5cd5fd7162d2996d0c28a6e4647597c2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f896fe5cd5fd7162d2996d0c28a6e4647597c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f896fe5cd5fd7162d2996d0c28a6e4647597c2b"}], "stats": {"total": 170, "additions": 158, "deletions": 12}, "files": [{"sha": "d36374c707f40deaccf353a95ef3731b6a1e7bf6", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "patch": "@@ -601,11 +601,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n               if (traits_type::eq_int_type(__c, __eof))\n                 __err |= ios_base::eofbit;\n-\t      else if (traits_type::eq_int_type(__c, __delim))\n+\t      else if (_M_gcount < __n) // implies __c == __delim\n \t\t{\n-\t\t  if (_M_gcount\n-\t\t      < __gnu_cxx::__numeric_traits<streamsize>::__max)\n-\t\t    ++_M_gcount;\n+\t\t  ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n             }"}, {"sha": "d6fee1a0d66da04be497df2ffc65462e108777de", "filename": "libstdc++-v3/src/c++98/istream.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc?ref=b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "patch": "@@ -171,11 +171,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n-\t      else if (traits_type::eq_int_type(__c, __delim))\n+\t      else if (_M_gcount < __n) // implies __c == __delim\n \t\t{\n-\t\t  if (_M_gcount\n-\t\t      < __gnu_cxx::__numeric_traits<streamsize>::__max)\n-\t\t    ++_M_gcount;\n+\t\t  ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n \t    }\n@@ -413,11 +411,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n-\t      else if (traits_type::eq_int_type(__c, __delim))\n+\t      else if (_M_gcount < __n) // implies __c == __delim\n \t\t{\n-\t\t  if (_M_gcount\n-\t\t      < __gnu_cxx::__numeric_traits<streamsize>::__max)\n-\t\t    ++_M_gcount;\n+\t\t  ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n \t    }"}, {"sha": "03b5286b00e55425db807866229403a7f964364b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/char/94749.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F94749.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F94749.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F94749.cc?ref=b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+// PR libstdc++/94749\n+// basic_istream::ignore(n, c) discards n+1 if next character is equal to c.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+typedef char C;\n+\n+void\n+test01()\n+{\n+  std::basic_istringstream<C> s(\" +   -\");\n+  s.ignore(1, '+');\n+  VERIFY( s.get() == '+' );\n+  s.ignore(3, '-');\n+  VERIFY( s.get() == '-' );\n+}\n+\n+void\n+test02()\n+{\n+  std::basic_istringstream<C> s(\".+...-\");\n+  s.ignore(1, '+');\n+  VERIFY( s.get() == '+' );\n+  s.ignore(3, '-');\n+  VERIFY( s.get() == '-' );\n+}\n+\n+void\n+test03()\n+{\n+  std::basic_istringstream<C, __gnu_cxx::char_traits<C> > s(\" +   -\");\n+  s.ignore(1, '+');\n+  VERIFY( s.get() == '+' );\n+  s.ignore(3, '-');\n+  VERIFY( s.get() == '-' );\n+}\n+\n+void\n+test04()\n+{\n+  std::basic_istringstream<C, __gnu_cxx::char_traits<C> > s(\".+...-\");\n+  s.ignore(1, '+');\n+  VERIFY( s.get() == '+' );\n+  s.ignore(3, '-');\n+  VERIFY( s.get() == '-' );\n+}\n+\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "e5ec4e7d697a9c753c2d7719827672220ffb2946", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/wchar_t/94749.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F94749.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F94749.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F94749.cc?ref=b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+// PR libstdc++/94749\n+// basic_istream::ignore(n, c) discards n+1 if next character is equal to c.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+typedef wchar_t C;\n+\n+void\n+test01()\n+{\n+  std::basic_istringstream<C> s(L\" +   -\");\n+  s.ignore(1, L'+');\n+  VERIFY( s.get() == L'+' );\n+  s.ignore(3, L'-');\n+  VERIFY( s.get() == L'-' );\n+}\n+\n+void\n+test02()\n+{\n+  std::basic_istringstream<C> s(L\".+...-\");\n+  s.ignore(1, L'+');\n+  VERIFY( s.get() == L'+' );\n+  s.ignore(3, L'-');\n+  VERIFY( s.get() == L'-' );\n+}\n+\n+void\n+test03()\n+{\n+  std::basic_istringstream<C, __gnu_cxx::char_traits<C> > s(L\" +   -\");\n+  s.ignore(1, L'+');\n+  VERIFY( s.get() == L'+' );\n+  s.ignore(3, L'-');\n+  VERIFY( s.get() == L'-' );\n+}\n+\n+void\n+test04()\n+{\n+  std::basic_istringstream<C, __gnu_cxx::char_traits<C> > s(L\".+...-\");\n+  s.ignore(1, L'+');\n+  VERIFY( s.get() == L'+' );\n+  s.ignore(3, L'-');\n+  VERIFY( s.get() == L'-' );\n+}\n+\n+\n+int\n+main()\n+{\n+  // test01();\n+  // test02();\n+  test03();\n+  test04();\n+}"}]}