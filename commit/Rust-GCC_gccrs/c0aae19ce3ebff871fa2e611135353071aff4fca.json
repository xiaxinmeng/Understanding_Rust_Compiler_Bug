{"sha": "c0aae19ce3ebff871fa2e611135353071aff4fca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBhYWUxOWNlM2ViZmY4NzFmYTJlNjExMTM1MzUzMDcxYWZmNGZjYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-02-07T12:09:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-02-07T12:09:31Z"}, "message": "re PR tree-optimization/47621 (Missed dependencies in address-taken optimization)\n\n2011-02-07  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/47621\n\t* tree-ssa.c (non_rewritable_lvalue_p): New function, split out from\n\ttwo duplicates ...\n\t(execute_update_addresses_taken): ... here.  Make it more\n\tconservative in what we accept.\n\n\t* gcc.dg/torture/pr47621.c: New testcase.\n\nFrom-SVN: r169881", "tree": {"sha": "7df86d53ae12dd81938cfb2a94969c03feab1395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7df86d53ae12dd81938cfb2a94969c03feab1395"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0aae19ce3ebff871fa2e611135353071aff4fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0aae19ce3ebff871fa2e611135353071aff4fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0aae19ce3ebff871fa2e611135353071aff4fca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0aae19ce3ebff871fa2e611135353071aff4fca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6d926d7d35a8675134b34e02a2932451d81bf1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d926d7d35a8675134b34e02a2932451d81bf1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d926d7d35a8675134b34e02a2932451d81bf1d"}], "stats": {"total": 110, "additions": 66, "deletions": 44}, "files": [{"sha": "cc625d9a18a781ceb83cf2927daf09c3dbeabba2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aae19ce3ebff871fa2e611135353071aff4fca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aae19ce3ebff871fa2e611135353071aff4fca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0aae19ce3ebff871fa2e611135353071aff4fca", "patch": "@@ -1,3 +1,11 @@\n+2011-02-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47621\n+\t* tree-ssa.c (non_rewritable_lvalue_p): New function, split out from\n+\ttwo duplicates ...\n+\t(execute_update_addresses_taken): ... here.  Make it more\n+\tconservative in what we accept.\n+\n 2011-02-06  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/sparc/freebsd.h (ASM_SPEC): Define."}, {"sha": "558f1926dae470b7eafce74229a852324180df75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aae19ce3ebff871fa2e611135353071aff4fca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aae19ce3ebff871fa2e611135353071aff4fca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0aae19ce3ebff871fa2e611135353071aff4fca", "patch": "@@ -1,3 +1,8 @@\n+2011-02-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47621\n+\t* gcc.dg/torture/pr47621.c: New testcase.\n+\n 2011-02-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gfortran.dg/transpose_optimization_2.f90: Cleanup original dump."}, {"sha": "882e67f08e404c65157b5aa0bd78991653b2fde2", "filename": "gcc/testsuite/gcc.dg/torture/pr47621.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aae19ce3ebff871fa2e611135353071aff4fca/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47621.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aae19ce3ebff871fa2e611135353071aff4fca/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47621.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47621.c?ref=c0aae19ce3ebff871fa2e611135353071aff4fca", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int data = 1;\n+  struct ptr { int val; } *ptr = (struct ptr *) &data;\n+  ptr->val = 0;\n+  if (data != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "90fb5dd181132061829d039da8477b0415497b2e", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 39, "deletions": 44, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aae19ce3ebff871fa2e611135353071aff4fca/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aae19ce3ebff871fa2e611135353071aff4fca/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=c0aae19ce3ebff871fa2e611135353071aff4fca", "patch": "@@ -1885,6 +1885,34 @@ non_rewritable_mem_ref_base (tree ref)\n   return NULL_TREE;\n }\n \n+/* For an lvalue tree LHS return true if it cannot be rewritten into SSA form.\n+   Otherwise return true.  */\n+\n+static bool \n+non_rewritable_lvalue_p (tree lhs)\n+{\n+  /* A plain decl is always rewritable.  */\n+  if (DECL_P (lhs))\n+    return false;\n+\n+  /* A decl that is wrapped inside a MEM-REF that covers\n+     it full is also rewritable.\n+     ???  The following could be relaxed allowing component\n+     references that do not change the access size.  */ ;\n+  if (TREE_CODE (lhs) == MEM_REF\n+      && TREE_CODE (TREE_OPERAND (lhs, 0)) == ADDR_EXPR\n+      && integer_zerop (TREE_OPERAND (lhs, 1)))\n+    {\n+      tree decl = TREE_OPERAND (TREE_OPERAND (lhs, 0), 0);\n+      if (DECL_P (decl)\n+\t  && DECL_SIZE (decl) == TYPE_SIZE (TREE_TYPE (lhs))\n+\t  && (TREE_THIS_VOLATILE (decl) == TREE_THIS_VOLATILE (lhs)))\n+\treturn false;\n+    }\n+\n+  return true;\n+}\n+\n /* When possible, clear TREE_ADDRESSABLE bit or set DECL_GIMPLE_REG_P bit and\n    mark the variable VAR for conversion into SSA.  Return true when updating\n    stmts is required.  */\n@@ -1978,29 +2006,13 @@ execute_update_addresses_taken (void)\n \t  if (code == GIMPLE_ASSIGN || code == GIMPLE_CALL)\n \t    {\n               tree lhs = gimple_get_lhs (stmt);\n-\n-              /* A plain decl does not need it set.  */\n-              if (lhs && !DECL_P (lhs))\n+              if (lhs\n+\t\t  && TREE_CODE (lhs) != SSA_NAME\n+\t\t  && non_rewritable_lvalue_p (lhs))\n \t\t{\n-\t\t  tree orig_lhs = lhs;\n-\n-\t\t  while (handled_component_p (lhs))\n-\t\t    lhs = TREE_OPERAND (lhs, 0);\n-\n-                  if (DECL_P (lhs))\n-                    bitmap_set_bit (not_reg_needs, DECL_UID (lhs));\n-\t\t  else if (TREE_CODE (lhs) == MEM_REF\n-\t\t\t   && TREE_CODE (TREE_OPERAND (lhs, 0)) == ADDR_EXPR)\n-\t\t    {\n-\t\t      decl = TREE_OPERAND (TREE_OPERAND (lhs, 0), 0);\n-\t\t      if (DECL_P (decl)\n-\t\t\t  && (!integer_zerop (TREE_OPERAND (lhs, 1))\n-\t\t\t      || (DECL_SIZE (decl)\n-\t\t\t\t  != TYPE_SIZE (TREE_TYPE (orig_lhs)))\n-\t\t\t      || (TREE_THIS_VOLATILE (lhs)\n-\t\t\t\t  != TREE_THIS_VOLATILE (decl))))\n-\t\t\tbitmap_set_bit (not_reg_needs, DECL_UID (decl));\n-\t\t    }\n+\t\t  decl = get_base_address (lhs);\n+\t\t  if (DECL_P (decl))\n+\t\t    bitmap_set_bit (not_reg_needs, DECL_UID (decl));\n                 }\n \t    }\n \n@@ -2027,29 +2039,12 @@ execute_update_addresses_taken (void)\n \t\t{\n \t\t  tree link = gimple_asm_output_op (stmt, i);\n \t\t  tree lhs = TREE_VALUE (link);\n-\n-\t\t  /* A plain decl does not need it set.  */\n-\t\t  if (!DECL_P (lhs))\n+\t\t  if (TREE_CODE (lhs) != SSA_NAME\n+\t\t      && non_rewritable_lvalue_p (lhs))\n \t\t    {\n-\t\t      tree orig_lhs = lhs;\n-\n-\t\t      while (handled_component_p (lhs))\n-\t\t\tlhs = TREE_OPERAND (lhs, 0);\n-\t\t  \n-\t\t      if (DECL_P (lhs))\n-\t\t\tbitmap_set_bit (not_reg_needs, DECL_UID (lhs));\n-\t\t      else if (TREE_CODE (lhs) == MEM_REF\n-\t\t\t       && TREE_CODE (TREE_OPERAND (lhs, 0)) == ADDR_EXPR)\n-\t\t\t{\n-\t\t\t  decl = TREE_OPERAND (TREE_OPERAND (lhs, 0), 0);\n-\t\t\t  if (DECL_P (decl)\n-\t\t\t      && (!integer_zerop (TREE_OPERAND (lhs, 1))\n-\t\t\t\t  || (TYPE_MAIN_VARIANT (TREE_TYPE (decl))\n-\t\t\t\t      != TYPE_MAIN_VARIANT (TREE_TYPE (orig_lhs)))\n-\t\t\t\t  || (TREE_THIS_VOLATILE (lhs)\n-\t\t\t\t      != TREE_THIS_VOLATILE (decl))))\n-\t\t\t    bitmap_set_bit (not_reg_needs, DECL_UID (decl));\n-\t\t\t}\n+\t\t      decl = get_base_address (lhs);\n+\t\t      if (DECL_P (decl))\n+\t\t\tbitmap_set_bit (not_reg_needs, DECL_UID (decl));\n \t\t    }\n \t\t}\n \t      for (i = 0; i < gimple_asm_ninputs (stmt); ++i)"}]}