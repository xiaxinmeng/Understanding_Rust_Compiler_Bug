{"sha": "2ce7461bd00a2b5941a0311e11affe766ffbd7af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNlNzQ2MWJkMDBhMmI1OTQxYTAzMTFlMTFhZmZlNzY2ZmZiZDdhZg==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@sigma6.com", "date": "2000-01-16T21:33:46Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-01-16T21:33:46Z"}, "message": "StreamTokenizer.java (nextToken): Avoid unread(TT_EOF).\n\n2000-01-16  Jeff Sturm  <jsturm@sigma6.com>\n\n\t* java/io/StreamTokenizer.java (nextToken): Avoid unread(TT_EOF).\n\nFrom-SVN: r31449", "tree": {"sha": "a8b8f7e69bbbc5d3afd0b3ceb1c0e3d9a8ee0ae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8b8f7e69bbbc5d3afd0b3ceb1c0e3d9a8ee0ae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ce7461bd00a2b5941a0311e11affe766ffbd7af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce7461bd00a2b5941a0311e11affe766ffbd7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce7461bd00a2b5941a0311e11affe766ffbd7af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce7461bd00a2b5941a0311e11affe766ffbd7af/comments", "author": null, "committer": null, "parents": [{"sha": "ed4c3661d5112ad7e18e2e6a8dda277a990e7c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4c3661d5112ad7e18e2e6a8dda277a990e7c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4c3661d5112ad7e18e2e6a8dda277a990e7c2a"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "d126cd18d9b4d6e1dc365ce833d91d200d1162ba", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce7461bd00a2b5941a0311e11affe766ffbd7af/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce7461bd00a2b5941a0311e11affe766ffbd7af/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2ce7461bd00a2b5941a0311e11affe766ffbd7af", "patch": "@@ -1,3 +1,7 @@\n+2000-01-16  Jeff Sturm  <jsturm@sigma6.com>\n+\n+\t* java/io/StreamTokenizer.java (nextToken): Avoid unread(TT_EOF).\n+\n 2000-01-13  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/natClassLoader.cc (_Jv_FindClass): Register `loader',"}, {"sha": "b5fc595f63885462f554f35bfbc26f462baf3866", "filename": "libjava/java/io/StreamTokenizer.java", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce7461bd00a2b5941a0311e11affe766ffbd7af/libjava%2Fjava%2Fio%2FStreamTokenizer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce7461bd00a2b5941a0311e11affe766ffbd7af/libjava%2Fjava%2Fio%2FStreamTokenizer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStreamTokenizer.java?ref=2ce7461bd00a2b5941a0311e11affe766ffbd7af", "patch": "@@ -179,7 +179,10 @@ public int nextToken() throws IOException\n \n \t  // Throw away \\n if in combination with \\r.\n \t  if (ch == '\\r' && (ch = in.read()) != '\\n')\n-\t    in.unread(ch);\n+\t    {\n+\t      if (ch != TT_EOF)\n+\t\tin.unread(ch);\n+\t    }\n \t  if (eolSignificant)\n \t    return (ttype = TT_EOL);\n \t}\n@@ -192,7 +195,8 @@ else if (isNumeric(ch))\n \t  {\n \t    // Read ahead to see if this is an ordinary '-' rather than numeric.\n \t    ch = in.read();\n-\t    in.unread(ch);\n+\t    if (ch != TT_EOF)\n+\t      in.unread(ch);\n \t    if (isNumeric(ch) && ch != '-')\n \t      ch = '-';\n \t    else\n@@ -209,7 +213,8 @@ else if (isNumeric(ch))\n \t  else\n \t    tokbuf.append((char) ch);\n \n-\tin.unread(ch);\n+\tif (ch != TT_EOF)\n+\t  in.unread(ch);\n \tttype = TT_NUMBER;\n \tnval = Double.valueOf(tokbuf.toString()).doubleValue();\n       }\n@@ -219,7 +224,8 @@ else if (isAlphabetic(ch))\n \ttokbuf.append((char) ch);\n \twhile (isAlphabetic(ch = in.read()) || isNumeric(ch))\n \t  tokbuf.append((char) ch);\n-\tin.unread(ch);\n+\tif (ch != TT_EOF)\n+\t  in.unread(ch);\n \tttype = TT_WORD;\n \tsval = tokbuf.toString();\n \tif (lowerCase)\n@@ -229,7 +235,8 @@ else if (isComment(ch))\n       {\n \twhile ((ch = in.read()) != '\\n' && ch != '\\r' && ch != TT_EOF)\n \t  ;\n-\tin.unread(ch);\n+\tif (ch != TT_EOF)\n+\t  in.unread(ch);\n \treturn nextToken();\t// Recursive, but not too deep in normal cases.\n       }\n     else if (isQuote(ch))\n@@ -277,14 +284,15 @@ else if (isQuote(ch))\n \t\t\t  }\n \t\t      }\n \n-\t\t    in.unread(nextch);\n+\t\t    if (nextch != TT_EOF)\n+\t\t      in.unread(nextch);\n \t\t}\n \n \t    tokbuf.append((char) ch);\n \t  }\n \n \t// Throw away matching quote char.\n-\tif (ch != ttype)\n+\tif (ch != ttype && ch != TT_EOF)\n \t  in.unread(ch);\n \n \tsval = tokbuf.toString();\n@@ -296,7 +304,8 @@ else if (isQuote(ch))\n \t    {\n \t      while ((ch = in.read()) != '\\n' && ch != '\\r' && ch != TT_EOF)\n \t\t;\n-\t      in.unread(ch);\n+\t      if (ch != TT_EOF)\n+\t\tin.unread(ch);\n \t      return nextToken(); // Recursive, but not too deep in normal cases\n \t    }\n \t  else if (ch == '*' && slashStar) \n@@ -305,27 +314,32 @@ else if (ch == '*' && slashStar)\n \t\t{\n \t          ch = in.read();\n \t\t  if (ch == '*')\n-\t\t    if ((ch = in.read()) == '/')\n-\t\t      break;\n-\t\t    else\n-\t\t      in.unread(ch);\n+\t\t    {\n+\t\t      if ((ch = in.read()) == '/')\n+\t\t\tbreak;\n+\t\t      else if (ch != TT_EOF)\n+\t\t\tin.unread(ch);\n+\t\t    }\n \t\t  else if (ch == '\\n' || ch == '\\r')\n \t\t    {\n \t\t      lineNumber++;\n \t\t      if (ch == '\\r' && (ch = in.read()) != '\\n')\n-\t\t\tin.unread(ch);\n+\t\t\t{\n+\t\t          if (ch != TT_EOF)\n+\t\t\t    in.unread(ch);\n+\t\t\t}\n \t\t    }\n \t\t  else if (ch == TT_EOF)\n \t\t    {\n-\t\t      in.unread(ch);\n \t\t      break;\n \t\t    }\n \t\t}\n \t      return nextToken(); // Recursive, but not too deep in normal cases\n \t    }\n \t  else\n \t    {\n-\t      in.unread(ch);\n+\t      if (ch != TT_EOF)\n+\t\tin.unread(ch);\n \t      ch = '/';\n \t    }\n "}]}