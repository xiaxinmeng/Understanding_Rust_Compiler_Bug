{"sha": "14628700040505e0a14342dd5bd1d1e1060ddc01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2Mjg3MDAwNDA1MDVlMGExNDM0MmRkNWJkMWQxZTEwNjBkZGMwMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-10-24T11:20:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-24T11:20:55Z"}, "message": "locale_facets.tcc (money_get::do_get(..., string_type&): Disregard the previous commit...\n\n2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (money_get::do_get(...,\n\tstring_type&): Disregard the previous commit: doesn't hurt but\n\tdoesn't accomplish anything useful either. This is the right\n\tone, speeding up greatly the function in case of early fail.\n\nFrom-SVN: r72888", "tree": {"sha": "7c80c4dc55c9b793e8dae24023afb7f0cc776837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c80c4dc55c9b793e8dae24023afb7f0cc776837"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14628700040505e0a14342dd5bd1d1e1060ddc01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14628700040505e0a14342dd5bd1d1e1060ddc01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14628700040505e0a14342dd5bd1d1e1060ddc01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14628700040505e0a14342dd5bd1d1e1060ddc01/comments", "author": null, "committer": null, "parents": [{"sha": "cdd5cf72556fdbe77877c7a50c5f184ef28eda4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "7842ab56f7819cf322ffec05425906ae7415c4a4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14628700040505e0a14342dd5bd1d1e1060ddc01/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14628700040505e0a14342dd5bd1d1e1060ddc01/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=14628700040505e0a14342dd5bd1d1e1060ddc01", "patch": "@@ -1,3 +1,10 @@\n+2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (money_get::do_get(...,\n+\tstring_type&): Disregard the previous commit: doesn't hurt but\n+\tdoesn't accomplish anything useful either. This is the right\n+\tone, speeding up greatly the function in case of early fail.\n+\n 2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (money_get::do_get(...,"}, {"sha": "f025c5125a944ab59a76b9441d2ea9fbb6110034", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 41, "deletions": 38, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14628700040505e0a14342dd5bd1d1e1060ddc01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14628700040505e0a14342dd5bd1d1e1060ddc01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=14628700040505e0a14342dd5bd1d1e1060ddc01", "patch": "@@ -1270,44 +1270,6 @@ namespace std\n \t\t}\n \t}\n \n-      const char_type __zero = __ctype.widen('0');\n-\n-      // Strip leading zeros.\n-      if (__tmp_units.size() > 1)\n-\t{\n-\t  const size_type __first = __tmp_units.find_first_not_of(__zero);\n-\t  const bool __only_zeros = __first == string_type::npos;\n-\t  if (__first)\n-\t    __tmp_units.erase(0, __only_zeros  ? __tmp_units.size() - 1\n-\t\t\t                       : __first);\n-\t}\n-\n-      if (__tmp_units.size())\n-\t{\n-\t  // 22.2.6.1.2, p4\n-\t  if (__sign.size() && __sign == __neg_sign\n-\t      && __tmp_units[0] != __zero)\n-\t    __tmp_units.insert(__tmp_units.begin(), __ctype.widen('-'));      \n-\n-\t  // Test for grouping fidelity.\n-\t  if (__grouping.size() && __grouping_tmp.size())\n-\t    {\n-\t      if (!std::__verify_grouping(__grouping, __grouping_tmp))\n-\t\t__testvalid = false;\n-\t    }\n-\n-\t  // Iff not enough digits were supplied after the decimal-point.\n-\t  if (__testdecfound)\n-\t    {\n-\t      const int __frac = __intl ? __mpt.frac_digits() \n-\t\t                        : __mpf.frac_digits();\n-\t      if (__frac > 0 && __sep_pos != __frac)\n-\t\t__testvalid = false;\n-\t    }\n-\t}\n-      else\n-\t__testvalid = false;\n-\n       // Need to get the rest of the sign characters, if they exist.\n       const char_type __eof = static_cast<char_type>(char_traits<char_type>::eof());\n       if (__sign.size() > 1)\n@@ -1322,6 +1284,47 @@ namespace std\n \t    __testvalid = false;\n \t}\n \n+      if (__testvalid)\n+\t{\n+\t  const char_type __zero = __ctype.widen('0');\n+\n+\t  // Strip leading zeros.\n+\t  if (__tmp_units.size() > 1)\n+\t    {\n+\t      const size_type __first = __tmp_units.find_first_not_of(__zero);\n+\t      const bool __only_zeros = __first == string_type::npos;\n+\t      if (__first)\n+\t\t__tmp_units.erase(0, __only_zeros ? __tmp_units.size() - 1\n+\t\t\t\t                  : __first);\n+\t    }\n+\n+\t  if (__tmp_units.size())\n+\t    {\n+\t      // 22.2.6.1.2, p4\n+\t      if (__sign.size() && __sign == __neg_sign\n+\t\t  && __tmp_units[0] != __zero)\n+\t\t__tmp_units.insert(__tmp_units.begin(), __ctype.widen('-'));      \n+\t      \n+\t      // Test for grouping fidelity.\n+\t      if (__grouping.size() && __grouping_tmp.size())\n+\t\t{\n+\t\t  if (!std::__verify_grouping(__grouping, __grouping_tmp))\n+\t\t    __testvalid = false;\n+\t\t}\n+\n+\t      // Iff not enough digits were supplied after the decimal-point.\n+\t      if (__testdecfound)\n+\t\t{\n+\t\t  const int __frac = __intl ? __mpt.frac_digits() \n+\t\t                            : __mpf.frac_digits();\n+\t\t  if (__frac > 0 && __sep_pos != __frac)\n+\t\t    __testvalid = false;\n+\t\t}\n+\t    }\n+\t  else\n+\t    __testvalid = false;\n+\t}\n+\n       // Iff no more characters are available.      \n       if (__c == __eof)\n \t__err |= ios_base::eofbit;"}]}