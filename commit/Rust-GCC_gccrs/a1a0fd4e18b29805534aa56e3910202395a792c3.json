{"sha": "a1a0fd4e18b29805534aa56e3910202395a792c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhMGZkNGUxOGIyOTgwNTUzNGFhNTZlMzkxMDIwMjM5NWE3OTJjMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-12-06T17:58:23Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-12-06T17:58:23Z"}, "message": "tree.c (get_callee_fndecl): Move DECL_ABSTRACT_ORIGIN-following...\n\n* tree.c (get_callee_fndecl): Move DECL_ABSTRACT_ORIGIN-following...\n* tree-inline.c (expand_call_inline): ... here.\n\nFrom-SVN: r47725", "tree": {"sha": "342c2184b8a04c1adf1d194029cf16c2c08e77bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/342c2184b8a04c1adf1d194029cf16c2c08e77bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a0fd4e18b29805534aa56e3910202395a792c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a0fd4e18b29805534aa56e3910202395a792c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a0fd4e18b29805534aa56e3910202395a792c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a0fd4e18b29805534aa56e3910202395a792c3/comments", "author": null, "committer": null, "parents": [{"sha": "441f30d998ed4cc2e7806b80918d8e11fecd6dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441f30d998ed4cc2e7806b80918d8e11fecd6dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441f30d998ed4cc2e7806b80918d8e11fecd6dd6"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "1714191b0785ccf6a51a2159d2c47a2ddf55f024", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a0fd4e18b29805534aa56e3910202395a792c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a0fd4e18b29805534aa56e3910202395a792c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1a0fd4e18b29805534aa56e3910202395a792c3", "patch": "@@ -1,3 +1,8 @@\n+2001-12-06  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* tree.c (get_callee_fndecl): Move DECL_ABSTRACT_ORIGIN-following...\n+\t* tree-inline.c (expand_call_inline): ... here.\n+\n 2001-12-06  H.J. Lu <hjl@gnu.org>\n \n \t* Makefile.in (.po.gmo): Use \"-mkdir po\" for parallel build."}, {"sha": "6cd1fbb5e15ba3a7aa61e4bb95601abfb5ed9a03", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a0fd4e18b29805534aa56e3910202395a792c3/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a0fd4e18b29805534aa56e3910202395a792c3/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a1a0fd4e18b29805534aa56e3910202395a792c3", "patch": "@@ -807,6 +807,18 @@ expand_call_inline (tp, walk_subtrees, data)\n   if (!fn)\n     return NULL_TREE;\n \n+  /* If fn is a declaration of a function in a nested scope that was\n+     globally declared inline, we don't set its DECL_INITIAL.\n+     However, we can't blindly follow DECL_ABSTRACT_ORIGIN because the\n+     C++ front-end uses it for cdtors to refer to their internal\n+     declarations, that are not real functions.  Fortunately those\n+     don't have trees to be saved, so we can tell by checking their\n+     DECL_SAVED_TREE.  */\n+  if (! DECL_INITIAL (fn)\n+      && DECL_ABSTRACT_ORIGIN (fn)\n+      && DECL_SAVED_TREE (DECL_ABSTRACT_ORIGIN (fn)))\n+    fn = DECL_ABSTRACT_ORIGIN (fn);\n+\n   /* Don't try to inline functions that are not well-suited to\n      inlining.  */\n   if (!inlinable_function_p (fn, id))"}, {"sha": "b60fdc74b81138df9da0a60b21cc718bd492016e", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a0fd4e18b29805534aa56e3910202395a792c3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a0fd4e18b29805534aa56e3910202395a792c3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a1a0fd4e18b29805534aa56e3910202395a792c3", "patch": "@@ -4382,23 +4382,7 @@ get_callee_fndecl (call)\n      that `f' is being called.  */\n   if (TREE_CODE (addr) == ADDR_EXPR\n       && TREE_CODE (TREE_OPERAND (addr, 0)) == FUNCTION_DECL)\n-    {\n-      tree fn = TREE_OPERAND (addr, 0);\n-\n-      /* If fn is a declaration of a function in a nested scope that\n-         was globally declared inline, we don't set its DECL_INITIAL.\n-         However, we can't blindly follow DECL_ABSTRACT_ORIGIN because\n-         the C++ front-end uses it for cdtors to refer to their\n-         internal declarations, that are not real functions.\n-         Fortunately those don't have trees to be saved, so we can tell by\n-         checking their DECL_SAVED_TREE.  */\n-      if (! DECL_INITIAL (fn)\n-\t  && DECL_ABSTRACT_ORIGIN (fn)\n-\t  && DECL_SAVED_TREE (DECL_ABSTRACT_ORIGIN (fn)))\n-\tfn = DECL_ABSTRACT_ORIGIN (fn);\n-\n-      return fn;\n-    }\n+    return TREE_OPERAND (addr, 0);\n \n   /* We couldn't figure out what was being called.  */\n   return NULL_TREE;"}]}