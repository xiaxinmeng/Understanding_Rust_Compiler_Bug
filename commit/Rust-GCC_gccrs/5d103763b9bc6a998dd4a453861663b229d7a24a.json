{"sha": "5d103763b9bc6a998dd4a453861663b229d7a24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQxMDM3NjNiOWJjNmE5OThkZDRhNDUzODYxNjYzYjIyOWQ3YTI0YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-03T14:52:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-03T14:56:33Z"}, "message": "Fix PR middle-end/98082\n\nthis fixes an ICE introduced by the fix for PR middle-end/97078 where\nuse_register_for_decl was changed to return true at -O0 for a parameter\nof a thunk.  It turns out that we need to do the same for a result in\nthis case.\n\ngcc/ChangeLog:\n\tPR middle-end/98082\n\t* function.c (use_register_for_decl): Also return true for a result\n\tif cfun->tail_call_marked is true.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/cpp2a/pr98082.C: New test.", "tree": {"sha": "7f4a3acf42b2db48df4669313ff31cc03e5e1b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4a3acf42b2db48df4669313ff31cc03e5e1b49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d103763b9bc6a998dd4a453861663b229d7a24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d103763b9bc6a998dd4a453861663b229d7a24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d103763b9bc6a998dd4a453861663b229d7a24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d103763b9bc6a998dd4a453861663b229d7a24a/comments", "author": null, "committer": null, "parents": [{"sha": "896048cf43d5eb21ab7c16553bb9d13b0f890b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896048cf43d5eb21ab7c16553bb9d13b0f890b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896048cf43d5eb21ab7c16553bb9d13b0f890b81"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "af9618e18dff567ff96c68020152d3ebd624b2da", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d103763b9bc6a998dd4a453861663b229d7a24a/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d103763b9bc6a998dd4a453861663b229d7a24a/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=5d103763b9bc6a998dd4a453861663b229d7a24a", "patch": "@@ -2206,13 +2206,15 @@ use_register_for_decl (const_tree decl)\n       /* Otherwise, if RESULT_DECL is DECL_BY_REFERENCE, it will take\n \t the function_result_decl's assignment.  Since it's a pointer,\n \t we can short-circuit a number of the tests below, and we must\n-\t duplicat e them because we don't have the\n-\t function_result_decl to test.  */\n+\t duplicate them because we don't have the function_result_decl\n+\t to test.  */\n       if (!targetm.calls.allocate_stack_slots_for_args ())\n \treturn true;\n       /* We don't set DECL_IGNORED_P for the function_result_decl.  */\n       if (optimize)\n \treturn true;\n+      if (cfun->tail_call_marked)\n+\treturn true;\n       /* We don't set DECL_REGISTER for the function_result_decl.  */\n       return false;\n     }"}, {"sha": "b2caacb55df8bfb2a95d8b83bbddcfeba9c02d1c", "filename": "gcc/testsuite/g++.dg/cpp2a/pr98082.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d103763b9bc6a998dd4a453861663b229d7a24a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fpr98082.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d103763b9bc6a998dd4a453861663b229d7a24a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fpr98082.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fpr98082.C?ref=5d103763b9bc6a998dd4a453861663b229d7a24a", "patch": "@@ -0,0 +1,14 @@\n+/* PR middle-end/98082 */\n+/* Reported by Martin Liska <marxin@gcc.gnu.org> */\n+\n+/* { dg-do compile { target c++20 } } */\n+/* { dg-options \"-fipa-icf\" } */\n+\n+class GoodIter {\n+public:\n+  GoodIter();\n+  GoodIter(GoodIter &);\n+};\n+\n+GoodIter operator-(int, GoodIter) { return GoodIter(); }\n+GoodIter operator+(int, GoodIter) { return GoodIter(); }"}]}