{"sha": "c357082f8e632d4fdf9a55db763c9ec67bc65c82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM1NzA4MmY4ZTYzMmQ0ZmRmOWE1NWRiNzYzYzllYzY3YmM2NWM4Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-06-19T01:33:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-06-19T01:33:32Z"}, "message": "function.c (put_var_into_stack): Don't reference DECL_ fields if input is a SAVE_EXPR.\n\n\t* function.c (put_var_into_stack): Don't reference DECL_ fields\n\tif input is a SAVE_EXPR.\n\tUse set_mem_attributes in COMPLEX case.\n\nFrom-SVN: r34591", "tree": {"sha": "3ae6892cafa23140427a09c3d325573ebf0d07e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ae6892cafa23140427a09c3d325573ebf0d07e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c357082f8e632d4fdf9a55db763c9ec67bc65c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c357082f8e632d4fdf9a55db763c9ec67bc65c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c357082f8e632d4fdf9a55db763c9ec67bc65c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c357082f8e632d4fdf9a55db763c9ec67bc65c82/comments", "author": null, "committer": null, "parents": [{"sha": "d4d17e95f1b281a9db1c727870350206c77f0103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d17e95f1b281a9db1c727870350206c77f0103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d17e95f1b281a9db1c727870350206c77f0103"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "3a5e0f8ea3cb3f4b8189ad720695b17704276426", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c357082f8e632d4fdf9a55db763c9ec67bc65c82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c357082f8e632d4fdf9a55db763c9ec67bc65c82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c357082f8e632d4fdf9a55db763c9ec67bc65c82", "patch": "@@ -1,3 +1,9 @@\n+Sun Jun 18 21:42:15 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* function.c (put_var_into_stack): Don't reference DECL_ fields\n+\tif input is a SAVE_EXPR.\n+\tUse set_mem_attributes in COMPLEX case.\n+\n 2000-06-18  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/ia64-protos.h (process_for_unwind_directive): Declare."}, {"sha": "ac8d03ac488099885d110e2a9418feff705caecd", "filename": "gcc/function.c", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c357082f8e632d4fdf9a55db763c9ec67bc65c82/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c357082f8e632d4fdf9a55db763c9ec67bc65c82/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c357082f8e632d4fdf9a55db763c9ec67bc65c82", "patch": "@@ -1335,6 +1335,9 @@ put_var_into_stack (decl)\n   struct function *function = 0;\n   tree context;\n   int can_use_addressof;\n+  int volatilep = TREE_CODE (decl) != SAVE_EXPR && TREE_THIS_VOLATILE (decl);\n+  int usedp = (TREE_USED (decl)\n+\t       || (TREE_CODE (decl) != SAVE_EXPR && DECL_INITIAL (decl) != 0));\n \n   context = decl_function_context (decl);\n \n@@ -1362,7 +1365,7 @@ put_var_into_stack (decl)\n \n   /* If this is a variable-size object with a pseudo to address it,\n      put that pseudo into the stack, if the var is nonlocal.  */\n-  if (DECL_NONLOCAL (decl)\n+  if (TREE_CODE (decl) != SAVE_EXPR && DECL_NONLOCAL (decl)\n       && GET_CODE (reg) == MEM\n       && GET_CODE (XEXP (reg, 0)) == REG\n       && REGNO (XEXP (reg, 0)) > LAST_VIRTUAL_REGISTER)\n@@ -1397,15 +1400,8 @@ put_var_into_stack (decl)\n       if (can_use_addressof)\n \tgen_mem_addressof (reg, decl);\n       else\n-\tput_reg_into_stack (function, reg, TREE_TYPE (decl),\n-\t\t\t    promoted_mode, decl_mode,\n-\t\t\t    (TREE_CODE (decl) != SAVE_EXPR\n-\t\t\t     && TREE_THIS_VOLATILE (decl)),\n-\t\t\t    0,\n-\t\t\t    (TREE_USED (decl)\n-\t\t\t     || (TREE_CODE (decl) != SAVE_EXPR\n-\t\t\t\t && DECL_INITIAL (decl) != 0)),\n-\t\t\t    0);\n+\tput_reg_into_stack (function, reg, TREE_TYPE (decl), promoted_mode,\n+\t\t\t    decl_mode, volatilep, 0, usedp, 0);\n     }\n   else if (GET_CODE (reg) == CONCAT)\n     {\n@@ -1416,29 +1412,19 @@ put_var_into_stack (decl)\n #ifdef FRAME_GROWS_DOWNWARD\n       /* Since part 0 should have a lower address, do it second.  */\n       put_reg_into_stack (function, XEXP (reg, 1), part_type, part_mode,\n-\t\t\t  part_mode, TREE_SIDE_EFFECTS (decl), 0,\n-\t\t\t  TREE_USED (decl) || DECL_INITIAL (decl) != 0,\n-\t\t\t  0);\n+\t\t\t  part_mode, volatilep, 0, usedp, 0);\n       put_reg_into_stack (function, XEXP (reg, 0), part_type, part_mode,\n-\t\t\t  part_mode, TREE_SIDE_EFFECTS (decl), 0,\n-\t\t\t  TREE_USED (decl) || DECL_INITIAL (decl) != 0,\n-\t\t\t  0);\n+\t\t\t  part_mode, volatilep, 0, usedp, 0);\n #else\n       put_reg_into_stack (function, XEXP (reg, 0), part_type, part_mode,\n-\t\t\t  part_mode, TREE_SIDE_EFFECTS (decl), 0,\n-\t\t\t  TREE_USED (decl) || DECL_INITIAL (decl) != 0,\n-\t\t\t  0);\n+\t\t\t  part_mode, volatilep, 0, usedp, 0);\n       put_reg_into_stack (function, XEXP (reg, 1), part_type, part_mode,\n-\t\t\t  part_mode, TREE_SIDE_EFFECTS (decl), 0,\n-\t\t\t  TREE_USED (decl) || DECL_INITIAL (decl) != 0,\n-\t\t\t  0);\n+\t\t\t  part_mode, volatilep, 0, usedp, 0);\n #endif\n \n       /* Change the CONCAT into a combined MEM for both parts.  */\n       PUT_CODE (reg, MEM);\n-      MEM_VOLATILE_P (reg) = MEM_VOLATILE_P (XEXP (reg, 0));\n-      MEM_ALIAS_SET (reg) = get_alias_set (decl);\n-      MEM_SET_IN_STRUCT_P (reg, AGGREGATE_TYPE_P (TREE_TYPE (decl)));\n+      set_mem_attributes (reg, decl, 1);\n \n       /* The two parts are in memory order already.\n \t Use the lower parts address as ours.  */"}]}