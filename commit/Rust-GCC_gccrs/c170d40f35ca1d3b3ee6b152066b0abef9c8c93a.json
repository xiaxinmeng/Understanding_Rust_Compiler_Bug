{"sha": "c170d40f35ca1d3b3ee6b152066b0abef9c8c93a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3MGQ0MGYzNWNhMWQzYjNlZTZiMTUyMDY2YjBhYmVmOWM4YzkzYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-08-10T07:52:23Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-08-10T07:52:23Z"}, "message": "re PR middle-end/54146 (Very slow compile with attribute((flatten)))\n\n\n\tPR middle-end/54146\n\t* ipa-inline-transform.c (inline_call): Add UPDATE_OVERALL_SUMMARY\n\tparameter; honnor it.\n\t* ipa-inline.c (recursive_inlining): Update call\n\tof inline_call.\n\t(inline_small_functions): Likewise.\n\t(ipa_inline): Likewise.\n\t(inline_always_inline_functions): Likewise.\n\t(early_inline_small_functions): Likewise.\n\t(flatten_function): Do separate update of summary info.\n\t* ipa-inline.h (inline_update_overall_summary): Declare.\n\t(inline_call): Update.\n\t* ipa-inline-analysis.c (inline_merge_summary): Break out\n\tupdating code to ...\n\t(inline_update_overall_summary): Likewise.\n\nFrom-SVN: r190283", "tree": {"sha": "a4119dbf7cb9f4c8a3b1dcd3719430eb66b2d714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4119dbf7cb9f4c8a3b1dcd3719430eb66b2d714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/comments", "author": null, "committer": null, "parents": [{"sha": "938ff79ae799ad8e961c6562b31d20899c6a132b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938ff79ae799ad8e961c6562b31d20899c6a132b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938ff79ae799ad8e961c6562b31d20899c6a132b"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "f610bed02910306567437be4ee9e712766f60c69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c170d40f35ca1d3b3ee6b152066b0abef9c8c93a", "patch": "@@ -1,3 +1,21 @@\n+2012-08-09  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/54146\n+\t* ipa-inline-transform.c (inline_call): Add UPDATE_OVERALL_SUMMARY\n+\tparameter; honnor it.\n+\t* ipa-inline.c (recursive_inlining): Update call\n+\tof inline_call.\n+\t(inline_small_functions): Likewise.\n+\t(ipa_inline): Likewise.\n+\t(inline_always_inline_functions): Likewise.\n+\t(early_inline_small_functions): Likewise.\n+\t(flatten_function): Do separate update of summary info.\n+\t* ipa-inline.h (inline_update_overall_summary): Declare.\n+\t(inline_call): Update.\n+\t* ipa-inline-analysis.c (inline_merge_summary): Break out\n+\tupdating code to ...\n+\t(inline_update_overall_summary): Likewise.\n+\n 2012-08-09  Richard Henderson  <rth@redhat.com>\n \n \t* config/s390/s390.c (s390_expand_insv): Use VOIDmode in gen_rtx_SET."}, {"sha": "a444e916f9cc23c863414e27479a248c3a2a5381", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=c170d40f35ca1d3b3ee6b152066b0abef9c8c93a", "patch": "@@ -2680,13 +2680,6 @@ inline_merge_summary (struct cgraph_edge *edge)\n     }\n   remap_edge_summaries (edge, edge->callee, info, callee_info, operand_map,\n \t\t\tclause, &toplev_predicate);\n-  info->size = 0;\n-  info->time = 0;\n-  for (i = 0; VEC_iterate (size_time_entry, info->entry, i, e); i++)\n-    info->size += e->size, info->time += e->time;\n-  estimate_calls_size_and_time (to, &info->size, &info->time,\n-\t\t\t\t~(clause_t)(1 << predicate_false_condition),\n-\t\t\t\tNULL, NULL);\n \n   inline_update_callee_summaries (edge->callee,\n \t\t\t\t  inline_edge_summary (edge)->loop_depth);\n@@ -2696,12 +2689,29 @@ inline_merge_summary (struct cgraph_edge *edge)\n   /* Similarly remove param summaries.  */\n   VEC_free (inline_param_summary_t, heap, es->param);\n   VEC_free (int, heap, operand_map);\n+}\n+\n+/* For performance reasons inline_merge_summary is not updating overall size\n+   and time.  Recompute it.  */\n \n+void\n+inline_update_overall_summary (struct cgraph_node *node)\n+{\n+  struct inline_summary *info = inline_summary (node);\n+  size_time_entry *e;\n+  int i;\n+\n+  info->size = 0;\n+  info->time = 0;\n+  for (i = 0; VEC_iterate (size_time_entry, info->entry, i, e); i++)\n+    info->size += e->size, info->time += e->time;\n+  estimate_calls_size_and_time (node, &info->size, &info->time,\n+\t\t\t\t~(clause_t)(1 << predicate_false_condition),\n+\t\t\t\tNULL, NULL);\n   info->time = (info->time + INLINE_TIME_SCALE / 2) / INLINE_TIME_SCALE;\n   info->size = (info->size + INLINE_SIZE_SCALE / 2) / INLINE_SIZE_SCALE;\n }\n \n-\n /* Estimate the time cost for the caller when inlining EDGE.\n    Only to be called via estimate_edge_time, that handles the\n    caching mechanism."}, {"sha": "53c468717c7d2655217b253f33dc989569cb8035", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=c170d40f35ca1d3b3ee6b152066b0abef9c8c93a", "patch": "@@ -193,13 +193,17 @@ clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n /* Mark edge E as inlined and update callgraph accordingly.  UPDATE_ORIGINAL\n    specify whether profile of original function should be updated.  If any new\n    indirect edges are discovered in the process, add them to NEW_EDGES, unless\n-   it is NULL.  Return true iff any new callgraph edges were discovered as a\n+   it is NULL. If UPDATE_OVERALL_SUMMARY is false, do not bother to recompute overall\n+   size of caller after inlining. Caller is required to eventually do it via\n+   inline_update_overall_summary.\n+\n+   Return true iff any new callgraph edges were discovered as a\n    result of inlining.  */\n \n bool\n inline_call (struct cgraph_edge *e, bool update_original,\n \t     VEC (cgraph_edge_p, heap) **new_edges,\n-\t     int *overall_size)\n+\t     int *overall_size, bool update_overall_summary)\n {\n   int old_size = 0, new_size = 0;\n   struct cgraph_node *to = NULL;\n@@ -244,6 +248,8 @@ inline_call (struct cgraph_edge *e, bool update_original,\n \n   old_size = inline_summary (to)->size;\n   inline_merge_summary (e);\n+  if (update_overall_summary)\n+   inline_update_overall_summary (to);\n   new_size = inline_summary (to)->size;\n   if (overall_size)\n     *overall_size += new_size - old_size;"}, {"sha": "d8b66e673061c7157adcf7a2eafc18d2d71a30d1", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=c170d40f35ca1d3b3ee6b152066b0abef9c8c93a", "patch": "@@ -1209,7 +1209,7 @@ recursive_inlining (struct cgraph_edge *edge,\n \t}\n \n       cgraph_redirect_edge_callee (curr, master_clone);\n-      inline_call (curr, false, new_edges, &overall_size);\n+      inline_call (curr, false, new_edges, &overall_size, true);\n       lookup_recursive_calls (node, curr->callee, heap);\n       n++;\n     }\n@@ -1480,7 +1480,7 @@ inline_small_functions (void)\n \t    fprintf (dump_file, \" Peeling recursion with depth %i\\n\", depth);\n \n \t  gcc_checking_assert (!callee->global.inlined_to);\n-\t  inline_call (edge, true, &new_indirect_edges, &overall_size);\n+\t  inline_call (edge, true, &new_indirect_edges, &overall_size, true);\n \t  if (flag_indirect_inlining)\n \t    add_new_edges_to_heap (heap, new_indirect_edges);\n \n@@ -1602,7 +1602,7 @@ flatten_function (struct cgraph_node *node, bool early)\n \t\t xstrdup (cgraph_node_name (callee)),\n \t\t xstrdup (cgraph_node_name (e->caller)));\n       orig_callee = callee;\n-      inline_call (e, true, NULL, NULL);\n+      inline_call (e, true, NULL, NULL, false);\n       if (e->callee != orig_callee)\n \torig_callee->symbol.aux = (void *) node;\n       flatten_function (e->callee, early);\n@@ -1611,6 +1611,8 @@ flatten_function (struct cgraph_node *node, bool early)\n     }\n \n   node->symbol.aux = NULL;\n+  if (!node->global.inlined_to)\n+    inline_update_overall_summary (node);\n }\n \n /* Decide on the inlining.  We do so in the topological order to avoid\n@@ -1710,7 +1712,7 @@ ipa_inline (void)\n \t\t\t       inline_summary (node->callers->caller)->size);\n \t\t    }\n \n-\t\t  inline_call (node->callers, true, NULL, NULL);\n+\t\t  inline_call (node->callers, true, NULL, NULL, true);\n \t\t  if (dump_file)\n \t\t    fprintf (dump_file,\n \t\t\t     \" Inlined into %s which now has %i size\\n\",\n@@ -1768,9 +1770,11 @@ inline_always_inline_functions (struct cgraph_node *node)\n \tfprintf (dump_file, \"  Inlining %s into %s (always_inline).\\n\",\n \t\t xstrdup (cgraph_node_name (e->callee)),\n \t\t xstrdup (cgraph_node_name (e->caller)));\n-      inline_call (e, true, NULL, NULL);\n+      inline_call (e, true, NULL, NULL, false);\n       inlined = true;\n     }\n+  if (inlined)\n+    inline_update_overall_summary (node);\n \n   return inlined;\n }\n@@ -1818,7 +1822,7 @@ early_inline_small_functions (struct cgraph_node *node)\n \tfprintf (dump_file, \" Inlining %s into %s.\\n\",\n \t\t xstrdup (cgraph_node_name (callee)),\n \t\t xstrdup (cgraph_node_name (e->caller)));\n-      inline_call (e, true, NULL, NULL);\n+      inline_call (e, true, NULL, NULL, true);\n       inlined = true;\n     }\n "}, {"sha": "fbd0b9982b7cbf022a0bafa94fb2b7012728e1dc", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c170d40f35ca1d3b3ee6b152066b0abef9c8c93a/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=c170d40f35ca1d3b3ee6b152066b0abef9c8c93a", "patch": "@@ -173,14 +173,15 @@ void estimate_ipcp_clone_size_and_time (struct cgraph_node *,\n \t\t\t\t\tint *, int *);\n int do_estimate_growth (struct cgraph_node *);\n void inline_merge_summary (struct cgraph_edge *edge);\n+void inline_update_overall_summary (struct cgraph_node *node);\n int do_estimate_edge_growth (struct cgraph_edge *edge);\n int do_estimate_edge_time (struct cgraph_edge *edge);\n void initialize_growth_caches (void);\n void free_growth_caches (void);\n void compute_inline_parameters (struct cgraph_node *, bool);\n \n /* In ipa-inline-transform.c  */\n-bool inline_call (struct cgraph_edge *, bool, VEC (cgraph_edge_p, heap) **, int *);\n+bool inline_call (struct cgraph_edge *, bool, VEC (cgraph_edge_p, heap) **, int *, bool);\n unsigned int inline_transform (struct cgraph_node *);\n void clone_inlined_nodes (struct cgraph_edge *e, bool, bool, int *);\n "}]}