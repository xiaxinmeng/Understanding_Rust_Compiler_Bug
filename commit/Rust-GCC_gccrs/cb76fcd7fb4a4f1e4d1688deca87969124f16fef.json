{"sha": "cb76fcd7fb4a4f1e4d1688deca87969124f16fef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3NmZjZDdmYjRhNGYxZTRkMTY4OGRlY2E4Nzk2OTEyNGYxNmZlZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-04-23T20:25:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-04-23T20:28:02Z"}, "message": "Fix segfault with -O2 -fnon-call-exceptions -ftracer\n\nThe GIMPLE SSA store merging pass blows up when it is rewriting the\nstores because it didn't realize that they don't belong to the same\nEH region.  Fixed by refusing to merge them.\n\n\tPR tree-optimization/94717\n\t* gimple-ssa-store-merging.c (try_coalesce_bswap): Return false if\n\tone of the stores doesn't have the same landing pad number as the\n\tfirst.\n\t(coalesce_immediate_stores): Do not try to coalesce the store using\n\tbswap if it doesn't have the same landing pad number as the first.", "tree": {"sha": "e88afac8754c40f70acbb0ebce17d70724c25505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e88afac8754c40f70acbb0ebce17d70724c25505"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb76fcd7fb4a4f1e4d1688deca87969124f16fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb76fcd7fb4a4f1e4d1688deca87969124f16fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb76fcd7fb4a4f1e4d1688deca87969124f16fef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb76fcd7fb4a4f1e4d1688deca87969124f16fef/comments", "author": null, "committer": null, "parents": [{"sha": "431ee3581584c533acc77ab840d9ad71f45b9831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431ee3581584c533acc77ab840d9ad71f45b9831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/431ee3581584c533acc77ab840d9ad71f45b9831"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "e8d397a37137f7e44f7c7d7e232804aee5152a99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb76fcd7fb4a4f1e4d1688deca87969124f16fef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb76fcd7fb4a4f1e4d1688deca87969124f16fef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb76fcd7fb4a4f1e4d1688deca87969124f16fef", "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/94717\n+\t* gimple-ssa-store-merging.c (try_coalesce_bswap): Return false if one\n+\tof the stores doesn't have the same landing pad number as the first.\n+\t(coalesce_immediate_stores): Do not try to coalesce the store using\n+\tbswap if it doesn't have the same landing pad number as the first.\n+\n 2020-04-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* gcc/doc/extend.texi (PowerPC AltiVec/VSX Built-in Functions):"}, {"sha": "25753517cc67d9fbb0c36c373d3da2f50c9f4170", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb76fcd7fb4a4f1e4d1688deca87969124f16fef/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb76fcd7fb4a4f1e4d1688deca87969124f16fef/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=cb76fcd7fb4a4f1e4d1688deca87969124f16fef", "patch": "@@ -2435,6 +2435,7 @@ imm_store_chain_info::try_coalesce_bswap (merged_store_group *merged_store,\n   for (unsigned int i = first + 1; i < len; ++i)\n     {\n       if (m_store_info[i]->bitpos != m_store_info[first]->bitpos + width\n+\t  || m_store_info[i]->lp_nr != merged_store->lp_nr\n \t  || m_store_info[i]->ins_stmt == NULL)\n \treturn false;\n       width += m_store_info[i]->bitsize;\n@@ -2682,6 +2683,7 @@ imm_store_chain_info::coalesce_immediate_stores ()\n       if (info->bitpos == merged_store->start + merged_store->width\n \t  && merged_store->stores.length () == 1\n \t  && merged_store->stores[0]->ins_stmt != NULL\n+\t  && info->lp_nr == merged_store->lp_nr\n \t  && info->ins_stmt != NULL)\n \t{\n \t  unsigned int try_size;"}, {"sha": "f9ab061922e5729061b252a843f03b428af0004c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb76fcd7fb4a4f1e4d1688deca87969124f16fef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb76fcd7fb4a4f1e4d1688deca87969124f16fef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb76fcd7fb4a4f1e4d1688deca87969124f16fef", "patch": "@@ -1,3 +1,7 @@\n+2019-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/opt/store-merging-4.C: New test.\n+\n 2020-04-23 Iain Sandoe <iain@sandoe.co.uk>\n \n \tPR c++/94288"}, {"sha": "8a51dcd4c06a107da5479448eed506f5ab30cba9", "filename": "gcc/testsuite/g++.dg/opt/store-merging-4.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb76fcd7fb4a4f1e4d1688deca87969124f16fef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fstore-merging-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb76fcd7fb4a4f1e4d1688deca87969124f16fef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fstore-merging-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fstore-merging-4.C?ref=cb76fcd7fb4a4f1e4d1688deca87969124f16fef", "patch": "@@ -0,0 +1,29 @@\n+// PR tree-optimization/94717\n+// Reported by Zdenek Sojka <zsojka@seznam.cz>\n+\n+// { dg-do compile }\n+// { dg-options \"-O2 -fnon-call-exceptions -ftracer\" }\n+\n+int abs (int);\n+\n+static inline void\n+bar (int d)\n+{\n+  d && abs (d);\n+}\n+\n+struct S\n+{\n+  int a;\n+  int b;\n+  int c;\n+  S (unsigned a, unsigned b) : a (a), b (b) { }\n+};\n+\n+void\n+foo (S *x)\n+{\n+  bar (x->c);\n+  new S (x->a, x->b);\n+  bar (0);\n+}"}]}