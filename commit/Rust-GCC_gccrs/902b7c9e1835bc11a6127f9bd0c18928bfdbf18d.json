{"sha": "902b7c9e1835bc11a6127f9bd0c18928bfdbf18d", "node_id": "C_kwDOANBUbNoAKDkwMmI3YzllMTgzNWJjMTFhNjEyN2Y5YmQwYzE4OTI4YmZkYmYxOGQ", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-12T17:33:01Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-12T17:33:01Z"}, "message": "aarch64: Get floatness from stmt_info\n\nThis patch gets the floatness of a memory access from the data\nreference rather than the vectype.  This makes it more suitable\nfor use in scalar costing code.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_dr_type): New function.\n\t(aarch64_vector_costs::count_ops): Use it rather than the\n\tvectype to determine floatness.", "tree": {"sha": "8aada874d1cc61f2e85c5bc417a8ddf6c7462fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aada874d1cc61f2e85c5bc417a8ddf6c7462fd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/902b7c9e1835bc11a6127f9bd0c18928bfdbf18d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902b7c9e1835bc11a6127f9bd0c18928bfdbf18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/902b7c9e1835bc11a6127f9bd0c18928bfdbf18d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902b7c9e1835bc11a6127f9bd0c18928bfdbf18d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26122469dff16a15f7f0eaa9bc7757d53b253f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26122469dff16a15f7f0eaa9bc7757d53b253f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26122469dff16a15f7f0eaa9bc7757d53b253f8b"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "d8bbc66c226ea4fc7c81516ba49049f1f2584515", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902b7c9e1835bc11a6127f9bd0c18928bfdbf18d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902b7c9e1835bc11a6127f9bd0c18928bfdbf18d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=902b7c9e1835bc11a6127f9bd0c18928bfdbf18d", "patch": "@@ -14920,6 +14920,16 @@ aarch64_simd_vec_costs_for_flags (unsigned int flags)\n   return costs->advsimd;\n }\n \n+/* If STMT_INFO is a memory reference, return the scalar memory type,\n+   otherwise return null.  */\n+static tree\n+aarch64_dr_type (stmt_vec_info stmt_info)\n+{\n+  if (auto dr = STMT_VINFO_DATA_REF (stmt_info))\n+    return TREE_TYPE (DR_REF (dr));\n+  return NULL_TREE;\n+}\n+\n /* Decide whether to use the unrolling heuristic described above\n    m_unrolled_advsimd_niters, updating that field if so.  LOOP_VINFO\n    describes the loop that we're vectorizing.  */\n@@ -15649,15 +15659,15 @@ aarch64_vector_costs::count_ops (unsigned int count, vect_cost_for_stmt kind,\n \t    prev_count = num_copies;\n \t}\n       ops->loads += num_copies;\n-      if (vec_flags || FLOAT_TYPE_P (vectype))\n+      if (vec_flags || FLOAT_TYPE_P (aarch64_dr_type (stmt_info)))\n \tops->general_ops += base_issue->fp_simd_load_general_ops * num_copies;\n       break;\n \n     case vector_store:\n     case unaligned_store:\n     case scalar_store:\n       ops->stores += num_copies;\n-      if (vec_flags || FLOAT_TYPE_P (vectype))\n+      if (vec_flags || FLOAT_TYPE_P (aarch64_dr_type (stmt_info)))\n \tops->general_ops += base_issue->fp_simd_store_general_ops * num_copies;\n       break;\n     }"}]}