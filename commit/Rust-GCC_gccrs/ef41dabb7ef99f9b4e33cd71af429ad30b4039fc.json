{"sha": "ef41dabb7ef99f9b4e33cd71af429ad30b4039fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0MWRhYmI3ZWY5OWY5YjRlMzNjZDcxYWY0MjlhZDMwYjQwMzlmYw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-04-27T09:26:21Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-04-27T09:26:21Z"}, "message": "* sh.h (LEGITIMIZE_RELOAD_ADDRESS): Define.\n\nFrom-SVN: r19424", "tree": {"sha": "4975af022cb2edaa05df0c6573112da887991fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4975af022cb2edaa05df0c6573112da887991fdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef41dabb7ef99f9b4e33cd71af429ad30b4039fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef41dabb7ef99f9b4e33cd71af429ad30b4039fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef41dabb7ef99f9b4e33cd71af429ad30b4039fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef41dabb7ef99f9b4e33cd71af429ad30b4039fc/comments", "author": null, "committer": null, "parents": [{"sha": "22c4957e6b744aed9b442a6e0075fbb70f469b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c4957e6b744aed9b442a6e0075fbb70f469b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c4957e6b744aed9b442a6e0075fbb70f469b47"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "b71f1ad6196797588ec69f13cd36dfd1a4c78a63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef41dabb7ef99f9b4e33cd71af429ad30b4039fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef41dabb7ef99f9b4e33cd71af429ad30b4039fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef41dabb7ef99f9b4e33cd71af429ad30b4039fc", "patch": "@@ -1,3 +1,7 @@\n+Mon Apr 27 17:22:48 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* sh.h (LEGITIMIZE_RELOAD_ADDRESS): Define.\n+\n Mon Apr 27 08:55:23 1998  Michael Meissner  <meissner@cygnus.com>\n \n \t* system.h (abort): If abort is not defined, and neither is"}, {"sha": "b4e921c1c0bf0b7174a487f332db11ba53971ee9", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef41dabb7ef99f9b4e33cd71af429ad30b4039fc/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef41dabb7ef99f9b4e33cd71af429ad30b4039fc/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=ef41dabb7ef99f9b4e33cd71af429ad30b4039fc", "patch": "@@ -1213,6 +1213,66 @@ extern struct rtx_def *sh_builtin_saveregs ();\n     }\t\t\t\t\t\t\t\t\\\n }\n \n+/* A C compound statement that attempts to replace X, which is an address\n+   that needs reloading, with a valid memory address for an operand of\n+   mode MODE.  WIN is a C statement label elsewhere in the code.\n+\n+   Like for LEGITIMIZE_ADDRESS, for the SH we try to get a normal form\n+   of the address.  That will allow inheritance of the address reloads.  */\n+\n+#define LEGITIMIZE_RELOAD_ADDRESS(X,MODE,OPNUM,TYPE,IND_LEVELS,WIN)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (GET_CODE (X) == PLUS\t\t\t\t\t\t\\\n+      && (GET_MODE_SIZE (MODE) == 4 || GET_MODE_SIZE (MODE) == 8)\t\\\n+      && GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\t\\\n+      && BASE_REGISTER_RTX_P (XEXP (X, 0))\t\t\t\t\\\n+      && ! (TARGET_SH3E && MODE == SFmode))\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rtx index_rtx = XEXP (X, 1);\t\t\t\t\t\\\n+      HOST_WIDE_INT offset = INTVAL (index_rtx), offset_base;\t\t\\\n+      rtx sum;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      /* Instead of offset_base 128..131 use 124..127, so that\t\t\\\n+\t simple add suffices.  */\t\t\t\t\t\\\n+      if (offset > 127)\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  offset_base = ((offset + 4) & ~60) - 4;\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\toffset_base = offset & ~60;\t\t\t\t\t\\\n+      /* Sometimes the normal form does not suit DImode.  We\t\t\\\n+\t could avoid that by using smaller ranges, but that\t\t\\\n+\t would give less optimized code when SImode is\t\t\t\\\n+\t prevalent.  */\t\t\t\t\t\t\t\\\n+      if (GET_MODE_SIZE (MODE) + offset - offset_base <= 64)\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  sum = gen_rtx (PLUS, Pmode, XEXP (X, 0),\t\t\t\\\n+\t\t\t GEN_INT (offset_base));\t\t\t\\\n+\t  X = gen_rtx (PLUS, Pmode, sum, GEN_INT (offset - offset_base));\\\n+\t  push_reload (sum, NULL_RTX, &XEXP (X, 0), NULL_PTR,\t\\\n+\t\t       BASE_REG_CLASS, Pmode, VOIDmode, 0, 0, (OPNUM),\t\\\n+\t\t       (TYPE));\t\t\t\t\t\t\\\n+\t  goto WIN;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  /* We must re-recognize what we created before.  */\t\t\t\\\n+  else if (GET_CODE (X) == PLUS\t\t\t\t\t\t\\\n+\t   && (GET_MODE_SIZE (MODE) == 4 || GET_MODE_SIZE (MODE) == 8)\t\\\n+\t   && GET_CODE (XEXP (X, 0)) == PLUS\t\t\t\t\\\n+\t   && GET_CODE (XEXP (XEXP (X, 0), 1)) == CONST_INT\t\t\\\n+\t   && BASE_REGISTER_RTX_P (XEXP (XEXP (X, 0), 0))\t\t\\\n+\t   && GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\\\n+\t   && ! (TARGET_SH3E && MODE == SFmode))\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      /* Because this address is so complex, we know it must have\t\\\n+\t been created by LEGITIMIZE_RELOAD_ADDRESS before; thus,\t\\\n+\t it is already unshared, and needs no further unsharing.  */\t\\\n+      push_reload (XEXP ((X), 0), NULL_RTX, &XEXP ((X), 0), NULL_PTR,\t\\\n+\t\t   BASE_REG_CLASS, Pmode, VOIDmode, 0, 0, (OPNUM), (TYPE));\\\n+      goto WIN;\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.\n "}]}