{"sha": "47be3d6d5c316a2adb3b053206e5277bd9c65315", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdiZTNkNmQ1YzMxNmEyYWRiM2IwNTMyMDZlNTI3N2JkOWM2NTMxNQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-03-27T19:43:13Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-03-27T19:43:13Z"}, "message": "mips.h (LIBCALL_VALUE, [...]): Remove macros.\n\n        * config/mips/mips.h (LIBCALL_VALUE, FUNCTION_VALUE,\n\tFUNCTION_VALUE_REGNO_P): Remove macros.\n        * config/mips/mips-protos.h (mips_function_value): Remove.\n        * config/mips/mips.c (mips_function_value): Rename to...\n\t(mips_function_value_1): ... this. Make static.  Handle receiving\n\tthe function type in 'fn_decl_or_type' argument.\n\t(mips_function_value, mips_libcall_value,\n\tmips_function_value_regno_p): New function.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n\nFrom-SVN: r171580", "tree": {"sha": "c1ea1d0150cc0702c0ba3c19c5f718c2abf2970c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ea1d0150cc0702c0ba3c19c5f718c2abf2970c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47be3d6d5c316a2adb3b053206e5277bd9c65315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47be3d6d5c316a2adb3b053206e5277bd9c65315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47be3d6d5c316a2adb3b053206e5277bd9c65315", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47be3d6d5c316a2adb3b053206e5277bd9c65315/comments", "author": null, "committer": null, "parents": [{"sha": "c29301d6b19c28277b5a419e74297261d66e719e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29301d6b19c28277b5a419e74297261d66e719e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29301d6b19c28277b5a419e74297261d66e719e"}], "stats": {"total": 86, "additions": 66, "deletions": 20}, "files": [{"sha": "159cc114f9c506dc2a278ebe26cb6ba9364420a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47be3d6d5c316a2adb3b053206e5277bd9c65315/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47be3d6d5c316a2adb3b053206e5277bd9c65315/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47be3d6d5c316a2adb3b053206e5277bd9c65315", "patch": "@@ -1,3 +1,16 @@\n+2011-03-27  Anatoly Sokolov  <aesok@post.ru>\n+\n+        * config/mips/mips.h (LIBCALL_VALUE, FUNCTION_VALUE,\n+\tFUNCTION_VALUE_REGNO_P): Remove macros.\n+        * config/mips/mips-protos.h (mips_function_value): Remove.\n+        * config/mips/mips.c (mips_function_value): Rename to...\n+\t(mips_function_value_1): ... this. Make static.  Handle receiving\n+\tthe function type in 'fn_decl_or_type' argument.\n+\t(mips_function_value, mips_libcall_value,\n+\tmips_function_value_regno_p): New function.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\n 2011-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (flag_opts): Add -mavx256-split-unaligned-load"}, {"sha": "cda66861d5f089883c7aaf00e34abaeff323e9fb", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47be3d6d5c316a2adb3b053206e5277bd9c65315/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47be3d6d5c316a2adb3b053206e5277bd9c65315/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=47be3d6d5c316a2adb3b053206e5277bd9c65315", "patch": "@@ -277,7 +277,6 @@ extern void mips_expand_prologue (void);\n extern void mips_expand_before_return (void);\n extern void mips_expand_epilogue (bool);\n extern bool mips_can_use_return_insn (void);\n-extern rtx mips_function_value (const_tree, const_tree, enum machine_mode);\n \n extern bool mips_cannot_change_mode_class (enum machine_mode,\n \t\t\t\t\t   enum machine_mode, enum reg_class);"}, {"sha": "0692902e8458ac0c0d0191c2dc0180ac2042e7ec", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47be3d6d5c316a2adb3b053206e5277bd9c65315/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47be3d6d5c316a2adb3b053206e5277bd9c65315/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=47be3d6d5c316a2adb3b053206e5277bd9c65315", "patch": "@@ -5247,17 +5247,24 @@ mips_return_fpr_pair (enum machine_mode mode,\n \n }\n \n-/* Implement FUNCTION_VALUE and LIBCALL_VALUE.  For normal calls,\n-   VALTYPE is the return type and MODE is VOIDmode.  For libcalls,\n-   VALTYPE is null and MODE is the mode of the return value.  */\n+/* Implement TARGET_FUNCTION_VALUE and TARGET_LIBCALL_VALUE.\n+   For normal calls, VALTYPE is the return type and MODE is VOIDmode.\n+   For libcalls, VALTYPE is null and MODE is the mode of the return value.  */\n \n-rtx\n-mips_function_value (const_tree valtype, const_tree func, enum machine_mode mode)\n+static rtx\n+mips_function_value_1 (const_tree valtype, const_tree fn_decl_or_type,\n+\t\t       enum machine_mode mode)\n {\n   if (valtype)\n     {\n       tree fields[2];\n       int unsigned_p;\n+      const_tree func;\n+\n+      if (fn_decl_or_type && DECL_P (fn_decl_or_type))\n+\tfunc = fn_decl_or_type;\n+      else\n+\tfunc = NULL;\n \n       mode = TYPE_MODE (valtype);\n       unsigned_p = TYPE_UNSIGNED (valtype);\n@@ -5324,6 +5331,41 @@ mips_function_value (const_tree valtype, const_tree func, enum machine_mode mode\n   return gen_rtx_REG (mode, GP_RETURN);\n }\n \n+/* Implement TARGET_FUNCTION_VALUE.  */\n+\n+static rtx\n+mips_function_value (const_tree valtype, const_tree fn_decl_or_type,\n+\t\t     bool outgoing ATTRIBUTE_UNUSED)\n+{\n+  return mips_function_value_1 (valtype, fn_decl_or_type, VOIDmode);\n+}\n+\n+/* Implement TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+mips_libcall_value (enum machine_mode mode, const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return mips_function_value_1 (NULL_TREE, NULL_TREE, mode);\n+}\n+\n+/* Implement TARGET_FUNCTION_VALUE_REGNO_P.\n+\n+   On the MIPS, R2 R3 and F0 F2 are the only register thus used.\n+   Currently, R2 and F0 are only implemented here (C has no complex type).  */\n+\n+static bool\n+mips_function_value_regno_p (const unsigned int regno)\n+{\n+  if (regno == GP_RETURN\n+      || regno == FP_RETURN\n+      || (LONG_DOUBLE_TYPE_SIZE == 128\n+\t  && FP_RETURN != GP_RETURN\n+\t  && regno == FP_RETURN + 2))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Implement TARGET_RETURN_IN_MEMORY.  Under the o32 and o64 ABIs,\n    all BLKmode objects are returned in memory.  Under the n32, n64\n    and embedded ABIs, small structures are returned in a register.\n@@ -16481,6 +16523,12 @@ mips_shift_truncation_mask (enum machine_mode mode)\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE mips_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE mips_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P mips_function_value_regno_p\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY mips_return_in_memory\n #undef TARGET_RETURN_IN_MSB"}, {"sha": "55bdec8be067bd865f5887ff93703b5138b37181", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47be3d6d5c316a2adb3b053206e5277bd9c65315/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47be3d6d5c316a2adb3b053206e5277bd9c65315/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=47be3d6d5c316a2adb3b053206e5277bd9c65315", "patch": "@@ -2150,20 +2150,6 @@ enum reg_class\n #define FP_ARG_FIRST (FP_REG_FIRST + 12)\n #define FP_ARG_LAST  (FP_ARG_FIRST + MAX_ARGS_IN_REGISTERS - 1)\n \n-#define LIBCALL_VALUE(MODE) \\\n-  mips_function_value (NULL_TREE, NULL_TREE, MODE)\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  mips_function_value (VALTYPE, FUNC, VOIDmode)\n-\n-/* 1 if N is a possible register number for a function value.\n-   On the MIPS, R2 R3 and F0 F2 are the only register thus used.\n-   Currently, R2 and F0 are only implemented here (C has no complex type)  */\n-\n-#define FUNCTION_VALUE_REGNO_P(N) ((N) == GP_RETURN || (N) == FP_RETURN \\\n-  || (LONG_DOUBLE_TYPE_SIZE == 128 && FP_RETURN != GP_RETURN \\\n-      && (N) == FP_RETURN + 2))\n-\n /* 1 if N is a possible register number for function argument passing.\n    We have no FP argument registers when soft-float.  When FP registers\n    are 32 bits, we can't directly reference the odd numbered ones.  */"}]}