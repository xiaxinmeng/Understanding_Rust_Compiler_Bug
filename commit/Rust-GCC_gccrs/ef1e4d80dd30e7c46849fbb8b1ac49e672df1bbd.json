{"sha": "ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "node_id": "C_kwDOANBUbNoAKGVmMWU0ZDgwZGQzMGU3YzQ2ODQ5ZmJiOGIxYWM0OWU2NzJkZjFiYmQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-11T00:16:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-11T00:16:21Z"}, "message": "Daily bump.", "tree": {"sha": "4c690c1efdab306e7f4919d5098e16ab84bfe2d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c690c1efdab306e7f4919d5098e16ab84bfe2d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/comments", "author": null, "committer": null, "parents": [{"sha": "343d83c7a89d0c7a78139e685395228115a28f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343d83c7a89d0c7a78139e685395228115a28f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343d83c7a89d0c7a78139e685395228115a28f6e"}], "stats": {"total": 164, "additions": 163, "deletions": 1}, "files": [{"sha": "e748cfd7f1742535551ccd095df82878c666683c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "patch": "@@ -1,3 +1,12 @@\n+2022-06-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/7061\n+\t* expr.cc (emit_group_store): For groups that consist of a single\n+\tscalar integer register that hold a complex mode value, use\n+\tgen_lowpart to generate a SUBREG to \"view_convert\" to the complex\n+\tmode.  For modes of different sizes, first convert to an integer\n+\tmode of the appropriate size.\n+\n 2022-06-09  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n \n \t* config/xtensa/xtensa.md (clrsbsi2): New insn pattern."}, {"sha": "11ff5fbe522cd24fa598862295280d8bf4904d8d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "patch": "@@ -1 +1 @@\n-20220610\n+20220611"}, {"sha": "459aaeae95e688350da4802a5e2f5067eaf1ed7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "patch": "@@ -1,3 +1,68 @@\n+2022-06-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/65328\n+\t* decl.cc (typename_hasher::hash): Add extra overloads.\n+\tUse iterative_hash_object instead of htab_hash_pointer.\n+\tHash TYPENAME_TYPE_FULLNAME instead of TYPE_IDENTIFIER.\n+\t(build_typename_type): Use typename_hasher::hash.\n+\t* pt.cc (spec_hasher::hash): Add two-parameter overload.\n+\tSet comparing_specializations around the call to\n+\thash_tmpl_and_args.\n+\t(iterative_hash_template_arg) <case TYPENAME_TYPE>:\n+\tWhen comparing_specializations, hash the TYPE_CONTEXT\n+\tand TYPENAME_TYPE_FULLNAME.\n+\t(tsubst_function_decl): Use spec_hasher::hash instead of\n+\thash_tmpl_and_args.\n+\t(tsubst_template_decl): Likewise.\n+\t(tsubst_decl): Likewise.\n+\n+2022-06-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.cc (instantiate_template): Don't substitute the context\n+\tof the most general template if that of the partially\n+\tinstantiated template is already non-dependent.\n+\n+2022-06-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.cc (lookup_template_class): Remove dead stores to\n+\tcontext parameter.  Don't substitute the context of the\n+\tmost general template if that of the partially instantiated\n+\ttemplate is already non-dependent.  Check the specializations\n+\ttable again after completing the context of a nested dependent\n+\tspecialization.\n+\t(tsubst_aggr_type) <case RECORD_TYPE>: Don't substitute\n+\tTYPE_CONTEXT or pass it to lookup_template_class.\n+\t(tsubst_decl) <case TYPE_DECL, case TYPE_DECL>: Avoid substituting\n+\tthe TREE_TYPE for DECL_SELF_REFERENCE_P.  Avoid template argument\n+\tsubstitution or coercion in some cases.\n+\n+2022-06-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (fini_modules): Add some parameters.\n+\t(finish_module_processing): Return an opaque pointer.\n+\t* decl2.cc (c_parse_final_cleanups): Propagate a cookie from\n+\tfinish_module_processing to fini_modules.\n+\t* module.cc (struct module_processing_cookie): New.\n+\t(finish_module_processing): Return a heap-allocated cookie.\n+\t(late_finish_module): New.  Finish out the module writing.\n+\t(fini_modules): Adjust.\n+\n+2022-06-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (module_has_import_init): Rename to ...\n+\t(module_determined_import_inits): ... here.\n+\t* decl2.cc (start_objects): Do not handle module initializers\n+\there.\n+\t(c_parse_final_cleanups): Generate a separate module\n+\tinitializer calling function and add it to the list.  Shrink\n+\tthe c-lang region.\n+\t* module.cc (num_init_calls_needed): Delete.\n+\t (module_has_import_init): Rename to ...\n+\t(module_determined_import_inits): ... here. Do the\n+\tcalculation here ...\n+\t(finish_module_processing): ... rather than here.\n+\t(module_add_import_initializers): Reformat.\n+\n 2022-06-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/105871"}, {"sha": "4cb2d011a72927428967f4f30e71afb2e0b0a3ce", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "patch": "@@ -1,3 +1,9 @@\n+2022-06-10  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/105829\n+\t* libgccjit.cc: Add support for floating-point types in\n+\tgcc_jit_type_get_size.\n+\n 2022-06-08  Yang Yujie  <yangyujie@loongson.cn>\n \n \t* Make-lang.in: only link objects from $(EXTRA_GCC_OBJS)"}, {"sha": "604f4e3b0a84da91c251e0abb0391f578b70fed5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "patch": "@@ -1,3 +1,20 @@\n+2022-06-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/init-3_a.C: New.\n+\t* g++.dg/modules/init-3_b.C: New.\n+\t* g++.dg/modules/init-3_c.C: New.\n+\n+2022-06-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/7061\n+\t* gcc.target/i386/pr7061-1.c: New test case.\n+\t* gcc.target/i386/pr7061-2.c: New test case.\n+\n+2022-06-10  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/105829\n+\t* jit.dg/test-types.c: Add tests for gcc_jit_type_get_size.\n+\n 2022-06-09  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n \n \t* gcc.target/xtensa/check_zero_byte.c: New."}, {"sha": "79db01d59c183fd5d9c3d2728544a8ef7406babf", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "patch": "@@ -1,3 +1,23 @@\n+2022-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* allocator.c (gomp_init_memkind): Call dlopen with \"libmemkind.so.0\"\n+\trather than \"libmemkind.so\".\n+\n+2022-06-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/Makefrag.am: Evaluate 'if PLUGIN_NVPTX_DYNAMIC' to true.\n+\t* plugin/configfrag.ac (--with-cuda-driver)\n+\t(--with-cuda-driver-include, --with-cuda-driver-lib)\n+\t(CUDA_DRIVER_INCLUDE, CUDA_DRIVER_LIB, PLUGIN_NVPTX_CPPFLAGS)\n+\t(PLUGIN_NVPTX_LDFLAGS, PLUGIN_NVPTX_LIBS, PLUGIN_NVPTX_DYNAMIC):\n+\tRemove.\n+\t* testsuite/libgomp-test-support.exp.in (cuda_driver_include)\n+\t(cuda_driver_lib): Remove.\n+\t* testsuite/lib/libgomp.exp (libgomp_init): Don't consider these.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n 2022-06-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/linux/allocator.c: Fix up #include directive."}, {"sha": "a5597e04886edab740a78256e974f177fe627c24", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ef1e4d80dd30e7c46849fbb8b1ac49e672df1bbd", "patch": "@@ -1,3 +1,48 @@\n+2022-06-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105844\n+\t* include/experimental/numeric (experimental::gcd): Simplify\n+\tassertions. Use __abs_r instead of __absu.\n+\t(experimental::lcm): Likewise. Remove use of __detail::__lcm so\n+\toverflow can be detected.\n+\t* include/std/numeric (__detail::__absu): Rename to __abs_r and\n+\tchange to allow signed result type, so overflow can be detected.\n+\t(__detail::__lcm): Remove.\n+\t(gcd): Simplify assertions. Use __abs_r instead of __absu.\n+\t(lcm): Likewise. Remove use of __detail::__lcm so overflow can\n+\tbe detected.\n+\t* testsuite/26_numerics/gcd/gcd_neg.cc: Adjust dg-error lines.\n+\t* testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.\n+\t* testsuite/26_numerics/gcd/105844.cc: New test.\n+\t* testsuite/26_numerics/lcm/105844.cc: New test.\n+\n+2022-06-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105880\n+\t* libsupc++/eh_globals.cc (eh_globals): Ensure constant init and\n+\tprevent destruction during termination.\n+\t(__eh_globals_init::_M_init): Replace with static member _S_init.\n+\t(__cxxabiv1::__cxa_get_globals_fast): Update.\n+\t(__cxxabiv1::__cxa_get_globals): Likewise.\n+\n+2022-06-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (__hash_str_base): New class\n+\ttemplate.\n+\t(hash<basic_string<C, char_traits<C>, A>>): Define partial\n+\tspecialization for each of the standard character types.\n+\t(hash<string>, hash<wstring>, hash<u8string>, hash<u16string>)\n+\t(hash<u32string>): Remove explicit specializations.\n+\t* include/std/string (__hash_string_base): Remove class\n+\ttemplate.\n+\t(hash<pmr::string>, hash<pmr::wstring>, hash<pmr::u8string>)\n+\t(hash<pmr::u16string>, hash<pmr::u32string>): Remove explicit\n+\tspecializations.\n+\t* testsuite/21_strings/basic_string/hash/hash.cc: Test with\n+\tcustom allocators.\n+\t* testsuite/21_strings/basic_string/hash/hash_char8_t.cc:\n+\tLikewise.\n+\n 2022-05-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/105671"}]}