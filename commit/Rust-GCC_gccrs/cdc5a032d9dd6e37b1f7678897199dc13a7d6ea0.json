{"sha": "cdc5a032d9dd6e37b1f7678897199dc13a7d6ea0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjNWEwMzJkOWRkNmUzN2IxZjc2Nzg4OTcxOTlkYzEzYTdkNmVhMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-31T08:32:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-31T08:32:47Z"}, "message": "(build_index_type): Leave TYPE_MAX_VALUE as -1 if it was;\n\ndon't truncate the high bits.\n\n(size_in_bytes): Call force_fit_type with end result.\n(int_size_in_bytes): Avoid overflow as long as result fits.\nReturn type is now unsigned int.\n\nFrom-SVN: r3006", "tree": {"sha": "13a0ea447ddc2c1304796c0e1c6634d7eb577e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13a0ea447ddc2c1304796c0e1c6634d7eb577e66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdc5a032d9dd6e37b1f7678897199dc13a7d6ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc5a032d9dd6e37b1f7678897199dc13a7d6ea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc5a032d9dd6e37b1f7678897199dc13a7d6ea0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc5a032d9dd6e37b1f7678897199dc13a7d6ea0/comments", "author": null, "committer": null, "parents": [{"sha": "7d27b36c31fd19c6a68d45466e32c31b74b8d842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d27b36c31fd19c6a68d45466e32c31b74b8d842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d27b36c31fd19c6a68d45466e32c31b74b8d842"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "f2ea2e481b8616fb393803d22960803ee219caad", "filename": "gcc/tree.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc5a032d9dd6e37b1f7678897199dc13a7d6ea0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc5a032d9dd6e37b1f7678897199dc13a7d6ea0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=cdc5a032d9dd6e37b1f7678897199dc13a7d6ea0", "patch": "@@ -1692,6 +1692,8 @@ tree\n size_in_bytes (type)\n      tree type;\n {\n+  tree t;\n+\n   if (type == error_mark_node)\n     return integer_zero_node;\n   type = TYPE_MAIN_VARIANT (type);\n@@ -1700,25 +1702,33 @@ size_in_bytes (type)\n       incomplete_type_error (NULL_TREE, type);\n       return integer_zero_node;\n     }\n-  return size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type),\n-\t\t     size_int (BITS_PER_UNIT));\n+  t = size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type),\n+\t\t  size_int (BITS_PER_UNIT));\n+  force_fit_type (t);\n+  return t;\n }\n \n /* Return the size of TYPE (in bytes) as an integer,\n    or return -1 if the size can vary.  */\n \n-int\n+unsigned int\n int_size_in_bytes (type)\n      tree type;\n {\n-  int size;\n+  unsigned int size;\n   if (type == error_mark_node)\n     return 0;\n   type = TYPE_MAIN_VARIANT (type);\n   if (TYPE_SIZE (type) == 0)\n     return -1;\n   if (TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n     return -1;\n+  if (TREE_INT_CST_HIGH (TYPE_SIZE (type)) != 0)\n+    {\n+      tree t = size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type),\n+\t\t\t   size_int (BITS_PER_UNIT));\n+      return TREE_INT_CST_LOW (t);\n+    }\n   size = TREE_INT_CST_LOW (TYPE_SIZE (type));\n   return (size + BITS_PER_UNIT - 1) / BITS_PER_UNIT;\n }\n@@ -2676,6 +2686,13 @@ build_index_type (maxval)\n   if (TREE_CODE (maxval) == INTEGER_CST)\n     {\n       int maxint = (int) TREE_INT_CST_LOW (maxval);\n+      /* If the domain should be empty, make sure the maxval\n+\t remains -1 and is not spoiled by truncation.  */\n+      if (INT_CST_LT (maxval, integer_zero_node))\n+\t{\n+\t  TYPE_MAX_VALUE (itype) = build_int_2 (-1, -1);\n+\t  TREE_TYPE (TYPE_MAX_VALUE (itype)) = sizetype;\n+\t}\n       return type_hash_canon (maxint < 0 ? ~maxint : maxint, itype);\n     }\n   else"}]}