{"sha": "330e765e13717fc4a294302419355a393f000428", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMwZTc2NWUxMzcxN2ZjNGEyOTQzMDI0MTkzNTVhMzkzZjAwMDQyOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-07-27T16:55:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-07-27T16:55:31Z"}, "message": "re PR tree-optimization/36830 (STORAGE_ERROR raised compiling s-os_lib.adb)\n\n\tPR tree-optimization/36830\n\t* tree-ssa-sccvn.c (vn_reference_op_compute_hash): Hash operand #2.\n\t(expressions_equal_p): Return false if only one operand is null.\n\nFrom-SVN: r138191", "tree": {"sha": "1164d8811a512f6c990e1fdadef69dffac7eef4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1164d8811a512f6c990e1fdadef69dffac7eef4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/330e765e13717fc4a294302419355a393f000428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330e765e13717fc4a294302419355a393f000428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330e765e13717fc4a294302419355a393f000428", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330e765e13717fc4a294302419355a393f000428/comments", "author": null, "committer": null, "parents": [{"sha": "82ca2a5146075d5ef502616c672f20d9893d976d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ca2a5146075d5ef502616c672f20d9893d976d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ca2a5146075d5ef502616c672f20d9893d976d"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "c69e60ebd5e9d818417201849eac0b6cf31d1aed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330e765e13717fc4a294302419355a393f000428/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330e765e13717fc4a294302419355a393f000428/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=330e765e13717fc4a294302419355a393f000428", "patch": "@@ -1,3 +1,9 @@\n+2008-07-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/36830\n+\t* tree-ssa-sccvn.c (vn_reference_op_compute_hash): Hash operand #2.\n+\t(expressions_equal_p): Return false if only one operand is null.\n+\n 2008-07-26  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (powerpc-*-netbsd*): Remove redundant texinfo"}, {"sha": "85ceb7e935c935eaf6c6e3b942d06399068666ee", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330e765e13717fc4a294302419355a393f000428/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330e765e13717fc4a294302419355a393f000428/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=330e765e13717fc4a294302419355a393f000428", "patch": "@@ -319,7 +319,8 @@ static hashval_t\n vn_reference_op_compute_hash (const vn_reference_op_t vro1)\n {\n   return iterative_hash_expr (vro1->op0, vro1->opcode)\n-    + iterative_hash_expr (vro1->op1, vro1->opcode);\n+    + iterative_hash_expr (vro1->op1, vro1->opcode)\n+    + iterative_hash_expr (vro1->op2, vro1->opcode);\n }\n \n /* Return the hashcode for a given reference operation P1.  */\n@@ -2587,22 +2588,24 @@ get_next_value_id (void)\n }\n \n \n-/* Compare two expressions E1 and E2 and return true if they are\n-   equal.  */\n+/* Compare two expressions E1 and E2 and return true if they are equal.  */\n \n bool\n expressions_equal_p (tree e1, tree e2)\n {\n-  tree te1, te2;\n-\n+  /* The obvious case.  */\n   if (e1 == e2)\n     return true;\n \n-  te1 = TREE_TYPE (e1);\n-  te2 = TREE_TYPE (e2);\n-  if (te1 != te2)\n+  /* If only one of them is null, they cannot be equal.  */\n+  if (!e1 || !e2)\n+    return false;\n+\n+  /* Likewise if they are not of the same type.  */\n+  if (TREE_TYPE (e1) != TREE_TYPE (e2))\n     return false;\n \n+  /* Recurse on elements of lists.  */\n   if (TREE_CODE (e1) == TREE_LIST && TREE_CODE (e2) == TREE_LIST)\n     {\n       tree lop1 = e1;\n@@ -2617,10 +2620,11 @@ expressions_equal_p (tree e1, tree e2)\n \t    return false;\n \t}\n       return true;\n-\n     }\n-  else if (TREE_CODE (e1) == TREE_CODE (e2)\n-\t   && operand_equal_p (e1, e2, OEP_PURE_SAME))\n+\n+  /* Now perform the actual comparison.  */\n+  if (TREE_CODE (e1) == TREE_CODE (e2)\n+      && operand_equal_p (e1, e2, OEP_PURE_SAME))\n     return true;\n \n   return false;"}]}