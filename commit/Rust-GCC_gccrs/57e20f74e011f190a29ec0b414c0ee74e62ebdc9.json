{"sha": "57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlMjBmNzRlMDExZjE5MGEyOWVjMGI0MTRjMGVlNzRlNjJlYmRjOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-03-21T20:19:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-21T20:19:33Z"}, "message": "re PR c++/84961 (ICE error: SSA_NAME_DEF_STMT is wrong)\n\n\tPR c++/84961\n\t* cp-tree.h (genericize_compound_lvalue): Declare.\n\t* typeck.c (genericize_compound_lvalue): New function.\n\t(unary_complex_lvalue, cp_build_modify_expr): Use it.\n\t* semantics.c (finish_asm_stmt): Replace MODIFY_EXPR, PREINCREMENT_EXPR\n\tand PREDECREMENT_EXPR in output and \"m\" constrained input operands with\n\tCOMPOUND_EXPR.  Call cxx_mark_addressable on the rightmost\n\tCOMPOUND_EXPR operand.\n\n\t* c-c++-common/pr43690.c: Don't expect errors on \"m\" (--x) and\n\t\"m\" (++x) in C++.\n\t* g++.dg/torture/pr84961-1.C: New test.\n\t* g++.dg/torture/pr84961-2.C: New test.\n\nFrom-SVN: r258741", "tree": {"sha": "f41cf51616f80f3c15202210cfdc0de3ca0b3ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f41cf51616f80f3c15202210cfdc0de3ca0b3ac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2595987bd320849de932cd2bcf83d2faf5f3ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2595987bd320849de932cd2bcf83d2faf5f3ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2595987bd320849de932cd2bcf83d2faf5f3ee8"}], "stats": {"total": 150, "additions": 125, "deletions": 25}, "files": [{"sha": "fd2f371e836f56630e0c3b419d017f25738ef9ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "patch": "@@ -1,3 +1,14 @@\n+2018-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84961\n+\t* cp-tree.h (genericize_compound_lvalue): Declare.\n+\t* typeck.c (genericize_compound_lvalue): New function.\n+\t(unary_complex_lvalue, cp_build_modify_expr): Use it.\n+\t* semantics.c (finish_asm_stmt): Replace MODIFY_EXPR, PREINCREMENT_EXPR\n+\tand PREDECREMENT_EXPR in output and \"m\" constrained input operands with\n+\tCOMPOUND_EXPR.  Call cxx_mark_addressable on the rightmost\n+\tCOMPOUND_EXPR operand.\n+\n 2018-03-21  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/85008"}, {"sha": "c07aaa5781ac4225595f63d4759bdd527aa50279", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "patch": "@@ -7145,6 +7145,7 @@ extern tree cp_build_addressof\t\t\t(location_t, tree,\n extern tree cp_build_addr_expr\t\t\t(tree, tsubst_flags_t);\n extern tree cp_build_unary_op                   (enum tree_code, tree, bool,\n                                                  tsubst_flags_t);\n+extern tree genericize_compound_lvalue\t\t(tree);\n extern tree unary_complex_lvalue\t\t(enum tree_code, tree);\n extern tree build_x_conditional_expr\t\t(location_t, tree, tree, tree, \n                                                  tsubst_flags_t);"}, {"sha": "4b9fc27743621a0b1f88afb3c777bc1ceaa22ffe", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "patch": "@@ -1512,6 +1512,21 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t\t      && C_TYPE_FIELDS_READONLY (TREE_TYPE (operand)))))\n \t    cxx_readonly_error (operand, lv_asm);\n \n+\t  tree *op = &operand;\n+\t  while (TREE_CODE (*op) == COMPOUND_EXPR)\n+\t    op = &TREE_OPERAND (*op, 1);\n+\t  switch (TREE_CODE (*op))\n+\t    {\n+\t    case PREINCREMENT_EXPR:\n+\t    case PREDECREMENT_EXPR:\n+\t    case MODIFY_EXPR:\n+\t      *op = genericize_compound_lvalue (*op);\n+\t      op = &TREE_OPERAND (*op, 1);\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\n \t  constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n \t  oconstraints[i] = constraint;\n \n@@ -1520,7 +1535,7 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t    {\n \t      /* If the operand is going to end up in memory,\n \t\t mark it addressable.  */\n-\t      if (!allows_reg && !cxx_mark_addressable (operand))\n+\t      if (!allows_reg && !cxx_mark_addressable (*op))\n \t\toperand = error_mark_node;\n \t    }\n \t  else\n@@ -1562,7 +1577,23 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t\t  /* Strip the nops as we allow this case.  FIXME, this really\n \t\t     should be rejected or made deprecated.  */\n \t\t  STRIP_NOPS (operand);\n-\t\t  if (!cxx_mark_addressable (operand))\n+\n+\t\t  tree *op = &operand;\n+\t\t  while (TREE_CODE (*op) == COMPOUND_EXPR)\n+\t\t    op = &TREE_OPERAND (*op, 1);\n+\t\t  switch (TREE_CODE (*op))\n+\t\t    {\n+\t\t    case PREINCREMENT_EXPR:\n+\t\t    case PREDECREMENT_EXPR:\n+\t\t    case MODIFY_EXPR:\n+\t\t      *op = genericize_compound_lvalue (*op);\n+\t\t      op = &TREE_OPERAND (*op, 1);\n+\t\t      break;\n+\t\t    default:\n+\t\t      break;\n+\t\t    }\n+\n+\t\t  if (!cxx_mark_addressable (*op))\n \t\t    operand = error_mark_node;\n \t\t}\n \t      else if (!allows_reg && !allows_mem)"}, {"sha": "d3183b5321d357254c9f633be3f77f97d439a737", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "patch": "@@ -6357,6 +6357,25 @@ build_unary_op (location_t /*location*/,\n   return cp_build_unary_op (code, xarg, noconvert, tf_warning_or_error);\n }\n \n+/* Adjust LVALUE, an MODIFY_EXPR, PREINCREMENT_EXPR or PREDECREMENT_EXPR,\n+   so that it is a valid lvalue even for GENERIC by replacing\n+   (lhs = rhs) with ((lhs = rhs), lhs)\n+   (--lhs) with ((--lhs), lhs)\n+   (++lhs) with ((++lhs), lhs)\n+   and if lhs has side-effects, calling cp_stabilize_reference on it, so\n+   that it can be evaluated multiple times.  */\n+\n+tree\n+genericize_compound_lvalue (tree lvalue)\n+{\n+  if (TREE_SIDE_EFFECTS (TREE_OPERAND (lvalue, 0)))\n+    lvalue = build2 (TREE_CODE (lvalue), TREE_TYPE (lvalue),\n+\t\t     cp_stabilize_reference (TREE_OPERAND (lvalue, 0)),\n+\t\t     TREE_OPERAND (lvalue, 1));\n+  return build2 (COMPOUND_EXPR, TREE_TYPE (TREE_OPERAND (lvalue, 0)),\n+\t\t lvalue, TREE_OPERAND (lvalue, 0));\n+}\n+\n /* Apply unary lvalue-demanding operator CODE to the expression ARG\n    for certain kinds of expressions which are not really lvalues\n    but which we can accept as lvalues.\n@@ -6391,17 +6410,7 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n   if (TREE_CODE (arg) == MODIFY_EXPR\n       || TREE_CODE (arg) == PREINCREMENT_EXPR\n       || TREE_CODE (arg) == PREDECREMENT_EXPR)\n-    {\n-      tree lvalue = TREE_OPERAND (arg, 0);\n-      if (TREE_SIDE_EFFECTS (lvalue))\n-\t{\n-\t  lvalue = cp_stabilize_reference (lvalue);\n-\t  arg = build2 (TREE_CODE (arg), TREE_TYPE (arg),\n-\t\t\tlvalue, TREE_OPERAND (arg, 1));\n-\t}\n-      return unary_complex_lvalue\n-\t(code, build2 (COMPOUND_EXPR, TREE_TYPE (lvalue), arg, lvalue));\n-    }\n+    return unary_complex_lvalue (code, genericize_compound_lvalue (arg));\n \n   if (code != ADDR_EXPR)\n     return NULL_TREE;\n@@ -7887,11 +7896,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n     case PREINCREMENT_EXPR:\n       if (compound_side_effects_p)\n \tnewrhs = rhs = stabilize_expr (rhs, &preeval);\n-      if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n-\tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n-\t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n-\t\t      TREE_OPERAND (lhs, 1));\n-      lhs = build2 (COMPOUND_EXPR, lhstype, lhs, TREE_OPERAND (lhs, 0));\n+      lhs = genericize_compound_lvalue (lhs);\n     maybe_add_compound:\n       /* If we had (bar, --foo) = 5; or (bar, (baz, --foo)) = 5;\n \t and looked through the COMPOUND_EXPRs, readd them now around\n@@ -7914,11 +7919,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n     case MODIFY_EXPR:\n       if (compound_side_effects_p)\n \tnewrhs = rhs = stabilize_expr (rhs, &preeval);\n-      if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n-\tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n-\t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n-\t\t      TREE_OPERAND (lhs, 1));\n-      lhs = build2 (COMPOUND_EXPR, lhstype, lhs, TREE_OPERAND (lhs, 0));\n+      lhs = genericize_compound_lvalue (lhs);\n       goto maybe_add_compound;\n \n     case MIN_EXPR:"}, {"sha": "4e787c5f8fb86daa5f74597c8d4b79ab244958bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "patch": "@@ -1,3 +1,11 @@\n+2018-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84961\n+\t* c-c++-common/pr43690.c: Don't expect errors on \"m\" (--x) and\n+\t\"m\" (++x) in C++.\n+\t* g++.dg/torture/pr84961-1.C: New test.\n+\t* g++.dg/torture/pr84961-2.C: New test.\n+\n 2018-03-21  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/85008"}, {"sha": "8d10744903f28ed4d9916d201fca1778755d5f93", "filename": "gcc/testsuite/c-c++-common/pr43690.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43690.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43690.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43690.c?ref=57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "patch": "@@ -6,8 +6,8 @@ void\n foo (char *x)\n {\n   asm (\"\" : : \"m\" (x++));\t/* { dg-error \"is not directly addressable\" } */\n-  asm (\"\" : : \"m\" (++x));\t/* { dg-error \"is not directly addressable\" } */\n+  asm (\"\" : : \"m\" (++x));\t/* { dg-error \"is not directly addressable\" \"\" { target c } } */\n   asm (\"\" : : \"m\" (x--));\t/* { dg-error \"is not directly addressable\" } */\n-  asm (\"\" : : \"m\" (--x));\t/* { dg-error \"is not directly addressable\" } */\n+  asm (\"\" : : \"m\" (--x));\t/* { dg-error \"is not directly addressable\" \"\" { target c } } */\n   asm (\"\" : : \"m\" (x + 1));\t/* { dg-error \"is not directly addressable\" } */\n }"}, {"sha": "6a72ad5134fc30cdd0930f0af7027a6ce808d24b", "filename": "gcc/testsuite/g++.dg/torture/pr84961-1.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr84961-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr84961-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr84961-1.C?ref=57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/84961\n+// { dg-do compile }\n+\n+short a;\n+volatile int b;\n+int c, d;\n+\n+void\n+foo ()\n+{\n+  asm volatile (\"\" : \"=r\" (b = a));\n+}\n+\n+void\n+bar ()\n+{\n+  asm volatile (\"\" : \"=r\" (++c, ++d, b = a));\n+}\n+\n+void\n+baz ()\n+{\n+  asm volatile (\"\" : \"=r\" (--b));\n+}"}, {"sha": "0909eedb7f964e8167a292ffa45f36acf6332663", "filename": "gcc/testsuite/g++.dg/torture/pr84961-2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr84961-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e20f74e011f190a29ec0b414c0ee74e62ebdc9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr84961-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr84961-2.C?ref=57e20f74e011f190a29ec0b414c0ee74e62ebdc9", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/84961\n+// { dg-do compile }\n+\n+short a;\n+volatile int b;\n+int c, d;\n+\n+void\n+foo ()\n+{\n+  asm volatile (\"\" : : \"m\" (b = a));\n+}\n+\n+void\n+bar ()\n+{\n+  asm volatile (\"\" : : \"m\" (++c, ++d, b = a));\n+}\n+\n+void\n+baz ()\n+{\n+  asm volatile (\"\" : : \"m\" (--b));\n+}"}]}