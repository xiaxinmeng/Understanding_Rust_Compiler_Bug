{"sha": "cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YwM2ZkNjNjZDdmZDg3YzRhZmI3ZmEwYmZlZGFkYWQwMjM0N2VkZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-07-08T05:25:39Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-07-08T05:25:39Z"}, "message": "Makefile.in: Update.\n\n\t* Makefile.in: Update.\n\t* c-opts.c (c_common_handle_option): opt_text now contains the '-'.\n\t* c.opt: Update documentation.\n\t* common.opt: Add some help text.\n\t* opts.c: Include intl.h.\n\t(wrap_help, print_help): New.\n\t(find_opt, handle_option, common_handle_option): opt_text now\n\tcontains the '-'.  Use print_help to output help.\n\t* opts.h (struct cl_option): New member \"help\".\n\t* opts.sh: Update to handle help text output and to prepend\n\toptions with '-'.\n\t* toplev.c (display_help): Remove some help text.\n\nFrom-SVN: r69068", "tree": {"sha": "795cec94203bc9cbd2c0c078978129faa9d33ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/795cec94203bc9cbd2c0c078978129faa9d33ea5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/comments", "author": null, "committer": null, "parents": [{"sha": "690e3ffd330682dcff4a22e74fc0dfdb7a440dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690e3ffd330682dcff4a22e74fc0dfdb7a440dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/690e3ffd330682dcff4a22e74fc0dfdb7a440dc9"}], "stats": {"total": 193, "additions": 145, "deletions": 48}, "files": [{"sha": "79c02e58feae85712dc9794e48e139ec010e87ad", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "patch": "@@ -1414,7 +1414,7 @@ s-specs : Makefile\n \t$(SHELL) $(srcdir)/move-if-change tmp-specs.h specs.h\n \t$(STAMP) s-specs\n \n-options.c: $(lang_opt_files) $(srcdir)/opts.sh options.h\n+options.c: $(lang_opt_files) $(srcdir)/opts.sh options.h intl.h\n \n options.h: $(lang_opt_files) $(srcdir)/opts.sh\n \tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh options.c options.h \\\n@@ -1481,7 +1481,7 @@ diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n    input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(TM_H) $(LANGHOOKS_H) $(GGC_H) $(RTL_H) \\\n-\toutput.h diagnostic.h $(TM_P_H) $(INSN_ATTR_H)\n+\toutput.h diagnostic.h $(TM_P_H) $(INSN_ATTR_H) intl.h\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    function.h flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h diagnostic.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\"}, {"sha": "a12ced1f06efc2a86d0c71c4cd99c9618b7a76b4", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "patch": "@@ -675,7 +675,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_fthis_is_variable:\n     case OPT_fvtable_thunks:\n     case OPT_fxref:\n-      warning (\"switch \\\"-%s\\\" is no longer supported\", option->opt_text);\n+      warning (\"switch \\\"%s\\\" is no longer supported\", option->opt_text);\n       break;\n \n     case OPT_fabi_version_:\n@@ -691,7 +691,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       if (value)\n \tflag_external_templates = true;\n     cp_deprecated:\n-      warning (\"switch \\\"-%s\\\" is deprecated, please see documentation \"\n+      warning (\"switch \\\"%s\\\" is deprecated, please see documentation \"\n \t       \"for details\", option->opt_text);\n       break;\n "}, {"sha": "64e9fe02ddd0989a07f8c25425e4105b6571cda0", "filename": "gcc/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "patch": "@@ -38,6 +38,14 @@\n ; decoder will convert the argument for you, or complain to the user\n ; if the argument is invalid.\n \n+; The third field is the help text to output with --help.  This is\n+; automatically line-wrapped on output.  Normally the switch is output\n+; automatically, with the help text on the right hand side of the\n+; output.  However, if the help text contains a tab character, the\n+; text to the left of the tab is output instead of the switch, and the\n+; text to its right forms the help.  This is useful for elaborating on\n+; what type of argument a switch takes, for example.\n+\n ; Comments can appear on their own line anwhere in the file, preceded\n ; by a semicolon.  Whitespace is permitted before the semicolon.\n "}, {"sha": "e1228c0672cf3ab9886df28301657f909849849a", "filename": "gcc/common.opt", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "patch": "@@ -24,6 +24,7 @@\n \n -help\n Common\n+Display this information\n \n -param\n Common Separate\n@@ -36,12 +37,15 @@ Common\n \n G\n Common Joined Separate UInteger\n+-G<number>\tPut global and static data smaller than <number> bytes into a special section (on some targets)\n \n O\n Common JoinedOrMissing\n+-O<number>\tSet optimization level to <number>\n \n Os\n Common\n+Optimize for space rather than speed\n \n W\n Common RejectNegative\n@@ -63,12 +67,14 @@ Common\n \n Wextra\n Common\n+Print extra (possibly unwanted) warnings\n \n Winline\n Common\n \n Wlarger-than-\n Common RejectNegative Joined UInteger\n+-Wlarger-than-<number>\tWarn if an object is larger than <number> bytes\n \n Wmissing-noreturn\n Common\n@@ -105,6 +111,7 @@ Common\n \n Wunused\n Common\n+Enable all -Wunused- warnings\n \n Wunused-function\n Common\n@@ -123,6 +130,7 @@ Common\n \n aux-info\n Common Separate\n+-aux-info <file>\tEmit declaration information into <file>\n \n aux-info=\n Common Joined\n@@ -135,9 +143,11 @@ Common Separate\n \n d\n Common Joined\n+-d<letters>\tEnable dumps from specific passes of the compiler\n \n dumpbase\n Common Separate\n+-dumpbase <file>\tSet the file basename to be used for dumps\n \n fPIC\n Common\n@@ -198,9 +208,11 @@ Common\n \n fcall-saved-\n Common Joined RejectNegative\n+-fcall-saved-<register>\tMark <register> as being preserved across functions\n \n fcall-used-\n Common Joined RejectNegative\n+-fcall-used-<register>\tMark <register> as being corrupted by function calls\n \n fcaller-saves\n Common\n@@ -234,6 +246,7 @@ Common\n \n fdiagnostics-show-location=\n Common Joined RejectNegative\n+-fdiagnostics-show-location=[once|every-line]\tHow often to emit source location at the beginning of line-wrapped diagnostics\n \n fdump-unnumbered\n Common\n@@ -261,6 +274,7 @@ Common\n \n ffixed-\n Common Joined RejectNegative\n+-ffixed-<register>\tMark <register> as being unavailable to the compiler\n \n ffloat-store\n Common\n@@ -315,6 +329,7 @@ Common RejectNegative Joined UInteger\n \n finline-limit=\n Common RejectNegative Joined UInteger\n+-finline-limit=<number>\tLimit the size of inlined functions to <number>\n \n finstrument-functions\n Common\n@@ -345,6 +360,7 @@ Common\n \n fmessage-length=\n Common RejectNegative Joined UInteger\n+-fmessage-length=<number>\tLimit diagnostics to <number> characters per line.  0 suppresses line-wrapping\n \n fmove-all-movables\n Common\n@@ -405,6 +421,7 @@ Common\n \n frandom-seed=\n Common Joined RejectNegative\n+-frandom-seed=<string>\tMake compile reproducible using <string>\n \n freduce-all-givs\n Common\n@@ -444,6 +461,7 @@ Common\n \n fsched-verbose=\n Common RejectNegative Joined\n+-fsched-verbose=<number>\tSet the verbosity level of the scheduler\n \n fsched2-use-superblocks\n Common\n@@ -483,9 +501,11 @@ Common\n \n fstack-limit-register=\n Common RejectNegative Joined\n+-fstack-limit-register=<register>\tTrap if the stack goes past <register>\n \n fstack-limit-symbol=\n Common RejectNegative Joined\n+-fstack-limit-symbol=<name>\tTrap if the stack goes past symbol <name>\n \n fstrength-reduce\n Common\n@@ -507,6 +527,7 @@ Common\n \n ftls-model=\n Common Joined RejectNegative\n+-ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec]\tSet the default thread-local storage code generation model\n \n ftracer\n Common\n@@ -555,23 +576,30 @@ Common Joined\n \n o\n Common Joined Separate\n+-o <file>\tPlace output into <file>\n \n p\n Common\n+Enable function profiling\n \n pedantic\n Common\n+Issue warnings needed for strict compliance to the standard\n \n pedantic-errors\n Common\n+Like -pedantic but issue them as errors\n \n quiet\n Common\n+Do not display functions compiled or elapsed time\n \n version\n Common\n+Display the compiler's version\n \n w\n Common\n+Suppress warnings\n \n ; This comment is to ensure we retain the blank line above."}, {"sha": "ec8af200406acadbd4504390cb986a4a809ec735", "filename": "gcc/opts.c", "status": "modified", "additions": 87, "deletions": 4, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "patch": "@@ -21,6 +21,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"intl.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n@@ -136,6 +137,8 @@ static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const char *, const struct cl_option *,\n \t\t\t\t unsigned int lang_mask);\n static void handle_options (unsigned int, const char **, unsigned int);\n+static void wrap_help (const char *help, const char *item, size_t item_width);\n+static void print_help (void);\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and N_OPTS\n@@ -177,7 +180,7 @@ find_opt (const char *input, int lang_mask)\n     {\n       md = (mn + mx) / 2;\n       opt_len = cl_options[md].opt_len;\n-      comp = strncmp (input, cl_options[md].opt_text, opt_len);\n+      comp = strncmp (input, cl_options[md].opt_text + 1, opt_len);\n \n       if (comp < 0)\n \tmx = md;\n@@ -197,7 +200,7 @@ find_opt (const char *input, int lang_mask)\n       const struct cl_option *opt = &cl_options[mn];\n \n       /* Is this switch a prefix of the input?  */\n-      if (!strncmp (input, opt->opt_text, opt->opt_len))\n+      if (!strncmp (input, opt->opt_text + 1, opt->opt_len))\n \t{\n \t  /* If language is OK, and the match is exact or the switch\n \t     takes a joined argument, return it.  */\n@@ -374,7 +377,7 @@ handle_option (const char **argv, unsigned int lang_mask)\n       value = integral_argument (arg);\n       if (value == -1)\n \t{\n-\t  error (\"argument to \\\"-%s\\\" should be a non-negative integer\",\n+\t  error (\"argument to \\\"%s\\\" should be a non-negative integer\",\n \t\t option->opt_text);\n \t  goto done;\n \t}\n@@ -612,7 +615,7 @@ common_handle_option (size_t scode, const char *arg,\n       abort ();\n \n     case OPT__help:\n-      display_help ();\n+      print_help ();\n       exit_after_options = true;\n       break;\n \n@@ -1477,3 +1480,83 @@ fast_math_flags_set_p (void)\n \t  && flag_finite_math_only\n \t  && !flag_errno_math);\n }\n+\n+/* Output --help text.  */\n+static void\n+print_help (void)\n+{\n+  size_t i, len;\n+\n+  printf (_(\"\\nThe following options are language-independent:\\n\"));\n+\n+  for (i = 0; i < cl_options_count; i++)\n+    {\n+      const char *help = cl_options[i].help;\n+      const char *opt, *tab;\n+\n+      /* During transition, ignore switches with no help.  */\n+      if (!help)\n+\tcontinue;\n+\n+      /* Get the translation.  */\n+      help = _(help);\n+\n+      tab = strchr (help, '\\t');\n+      if (tab)\n+\t{\n+\t  len = tab - help;\n+\t  opt = help;\n+\t  help = tab + 1;\n+\t}\n+      else\n+\t{\n+\t  opt = cl_options[i].opt_text;\n+\t  len = strlen (opt);\n+\t}\n+\n+      wrap_help (help, opt, len);\n+    }\n+\n+  puts ( \"\\n\" );\n+  display_help ();\n+}\n+\n+/* Output ITEM, of length ITEM_WIDTH, in the left column, followed by\n+   word-wrapped HELP in a second column.  */\n+static void\n+wrap_help (const char *help, const char *item, size_t item_width)\n+{\n+  const size_t columns = 80, col_width = 27;\n+  size_t remaining, room, len;\n+\n+  remaining = strlen (help);\n+\n+  do\n+    {\n+      room = columns - 3 - MAX (col_width, item_width);\n+      len = remaining;\n+\n+      if (room < len)\n+\t{\n+\t  size_t i;\n+\n+\t  for (i = 0; help[i]; i++)\n+\t    {\n+\t      if (i >= room && len != remaining)\n+\t\tbreak;\n+\t      if (help[i] == ' ')\n+\t\tlen = i;\n+\t      else if (help[i] == '-')\n+\t\tlen = i + 1;\n+\t    }\n+\t}\n+\n+      printf( \"  %-*.*s %.*s\\n\", col_width, item_width, item, len, help);\n+      item_width = 0;\n+      while (help[len] == ' ')\n+\tlen++;\n+      help += len;\n+      remaining -= len;\n+    }\n+  while (remaining);\n+}"}, {"sha": "cffeeba98cc9e741973057e6fa31c97aa49775a4", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "patch": "@@ -26,6 +26,7 @@ extern void decode_options (unsigned int argc, const char **argv);\n struct cl_option\n {\n   const char *opt_text;\n+  const char *help;\n   unsigned short back_chain;\n   unsigned char opt_len;\n   unsigned int flags;"}, {"sha": "985cf9668c21833640c940dc907865c28a7bcedb", "filename": "gcc/opts.sh", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fopts.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Fopts.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.sh?ref=cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "patch": "@@ -37,7 +37,13 @@ ${AWK} '\n \t# Ignore comments and blank lines\n \t/^[ \\t]*(;|$)/\t{ next }\n \t# Note that RS=\"\" falls foul of gawk 3.1.2 bugs\n-\t/^[^ \\t]/       { getline tmp; print $0 \"\\034\" tmp}\n+\t/^[^ \\t]/       { record = $0\n+\t\t\t  do { getline tmp;\n+\t\t\t       if (tmp != \"\" )\n+\t\t\t          record = record \"\\034\" tmp\n+\t\t\t  } while (tmp != \"\")\n+\t\t\t  print record\n+\t\t\t}\n ' \"$@\" | ${SORT} | ${AWK} '\n     function switch_flags (flags,   result)\n     {\n@@ -74,6 +80,7 @@ ${AWK} '\n \t} else {\n \t\topts[n_opts] = $1\n \t\tflags[n_opts] = $2\n+\t\thelp[n_opts] = $3\n \t\tn_opts++;\n \t}\n     }\n@@ -86,6 +93,7 @@ ${AWK} '\n \tcomma = \",\"\n \n \tprint \"/* This file is auto-generated by opts.sh.  */\\n\" > c_file\n+\tprint \"#include <intl.h>\"\t\t\t>> c_file\n \tprint \"#include \\\"\" h_file \"\\\"\"\t\t\t>> c_file\n \tprint \"#include \\\"opts.h\\\"\\n\"\t\t\t>> c_file\n \tprint \"const char * const lang_names[] =\\n{\"\t>> c_file\n@@ -140,10 +148,15 @@ ${AWK} '\n \t    if (i + 1 == n_opts)\n \t\tcomma = \"\"\n \n+\t    if (help[i] == \"\")\n+\t\thlp = \"0\"\n+\t    else\n+\t    \thlp = \"N_(\\\"\" help[i] \"\\\")\";\n+\n \t    printf(\"  %s,%s/* -%s */\\n\", enum, s, opts[i]) >> h_file\n-\t    printf(\"  { \\\"%s\\\", (unsigned short) %s, %u,\\n\\t%s }%s\\n\",\n-\t\t   opts[i], back_chain[i], len, switch_flags(flags[i]),\n-\t\t   comma) >> c_file\n+\t    printf(\"  { \\\"-%s\\\",\\n    %s,\\n    %s, %u, %s }%s\\n\",\n+\t\t   opts[i], hlp, back_chain[i], len,\n+\t\t   switch_flags(flags[i]), comma)\t>> c_file\n \t}\n \n \tprint \"  N_OPTS\\n};\"\t\t\t\t>> h_file"}, {"sha": "383744671813821a146e5d0db2c7ddf811e71bc9", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf03fd63cd7fd87c4afb7fa0bfedadad02347ede/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=cf03fd63cd7fd87c4afb7fa0bfedadad02347ede", "patch": "@@ -3942,18 +3942,6 @@ display_help (void)\n   unsigned long i;\n   const char *lang;\n \n-  printf (_(\"  -ffixed-<register>      Mark <register> as being unavailable to the compiler\\n\"));\n-  printf (_(\"  -fcall-used-<register>  Mark <register> as being corrupted by function calls\\n\"));\n-  printf (_(\"  -fcall-saved-<register> Mark <register> as being preserved across functions\\n\"));\n-  printf (_(\"  -finline-limit=<number> Limits the size of inlined functions to <number>\\n\"));\n-  printf (_(\"  -fmessage-length=<number> Limits diagnostics messages lengths to <number> characters per line.  0 suppresses line-wrapping\\n\"));\n-  printf (_(\"  -fdiagnostics-show-location=[once | every-line] Indicates how often source location information should be emitted, as prefix, at the beginning of diagnostics when line-wrapping\\n\"));\n-  printf (_(\"  -ftls-model=[global-dynamic | local-dynamic | initial-exec | local-exec] Indicates the default thread-local storage code generation model\\n\"));\n-  printf (_(\"  -fstack-limit-register=<register>  Trap if the stack goes past <register>\\n\"));\n-  printf (_(\"  -fstack-limit-symbol=<name>  Trap if the stack goes past symbol <name>\\n\"));\n-  printf (_(\"  -frandom-seed=<string>  Make compile reproducible using <string>\\n\"));\n-\n-\n   for (i = ARRAY_SIZE (f_options); i--;)\n     {\n       const char *description = f_options[i].description;\n@@ -3963,8 +3951,6 @@ display_help (void)\n \t\tf_options[i].string, _(description));\n     }\n \n-  printf (_(\"  -O[number]              Set optimization level to [number]\\n\"));\n-  printf (_(\"  -Os                     Optimize for space rather than speed\\n\"));\n   for (i = LAST_PARAM; i--;)\n     {\n       const char *description = compiler_params[i].help;\n@@ -3976,9 +3962,6 @@ display_help (void)\n \t\tlength > 0 ? length : 1, \"                     \",\n \t\t_(description));\n     }\n-  printf (_(\"  -pedantic               Issue warnings needed by strict compliance to ISO C\\n\"));\n-  printf (_(\"  -pedantic-errors        Like -pedantic except that errors are produced\\n\"));\n-  printf (_(\"  -w                      Suppress warnings\\n\"));\n \n   for (i = ARRAY_SIZE (W_options); i--;)\n     {\n@@ -3989,32 +3972,13 @@ display_help (void)\n \t\tW_options[i].string, _(description));\n     }\n \n-  printf (_(\"  -Wextra                 Print extra (possibly unwanted) warnings\\n\"));\n-  printf (_(\"  -Wunused                Enable unused warnings\\n\"));\n-  printf (_(\"  -Wlarger-than-<number>  Warn if an object is larger than <number> bytes\\n\"));\n-  printf (_(\"  -p                      Enable function profiling\\n\"));\n-  printf (_(\"  -o <file>               Place output into <file> \\n\"));\n-  printf (_(\"\\\n-  -G <number>             Put global and static data smaller than <number>\\n\\\n-                          bytes into a special section (on some targets)\\n\"));\n-\n   for (i = ARRAY_SIZE (debug_args); i--;)\n     {\n       if (debug_args[i].description != NULL)\n \tprintf (\"  -g%-21s %s\\n\",\n \t\tdebug_args[i].arg, _(debug_args[i].description));\n     }\n \n-  printf (_(\"  -aux-info <file>        Emit declaration info into <file>\\n\"));\n-  printf (_(\"  -quiet                  Do not display functions compiled or elapsed time\\n\"));\n-  printf (_(\"  -version                Display the compiler's version\\n\"));\n-  printf (_(\"  -d[letters]             Enable dumps from specific passes of the compiler\\n\"));\n-  printf (_(\"  -dumpbase <file>        Base name to be used for dumps from specific passes\\n\"));\n-#if defined INSN_SCHEDULING\n-  printf (_(\"  -fsched-verbose=<number> Set the verbosity level of the scheduler\\n\"));\n-#endif\n-  printf (_(\"  --help                  Display this information\\n\"));\n-\n   undoc = 0;\n   lang  = \"language\";\n "}]}