{"sha": "f5938dcd3993e5f8239d67078e6bf292d14dd3d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU5MzhkY2QzOTkzZTVmODIzOWQ2NzA3OGU2YmYyOTJkMTRkZDNkMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-06-19T18:57:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-06-19T18:57:28Z"}, "message": "ggc-page.c (extra_order_size_tab): Add entries with size of struct function and basic_block.\n\n2006-06-19  Richard Guenther  <rguenther@suse.de>\n\n\t* ggc-page.c (extra_order_size_tab): Add entries with\n\tsize of struct function and basic_block.\n\t(size_lookup): Extend to cover sizes up to 511.\n\t(ggc_alloc_stat): Adjust user.\n\t(ggc_pch_count_object): Likewise.\n\t(ggc_pch_alloc_object): Likewise.\n\t(ggc_pch_write_object): Likewise.\n\nFrom-SVN: r114783", "tree": {"sha": "3adcf0d1e3be8e762c7a7dd7b1813c29b00baa9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3adcf0d1e3be8e762c7a7dd7b1813c29b00baa9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5938dcd3993e5f8239d67078e6bf292d14dd3d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5938dcd3993e5f8239d67078e6bf292d14dd3d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5938dcd3993e5f8239d67078e6bf292d14dd3d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5938dcd3993e5f8239d67078e6bf292d14dd3d3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20fb52af9359cdf66e245f1779bbcd6f1a41de8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fb52af9359cdf66e245f1779bbcd6f1a41de8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fb52af9359cdf66e245f1779bbcd6f1a41de8b"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "50d8902a7152d51c930e5998ef95920f61b49100", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5938dcd3993e5f8239d67078e6bf292d14dd3d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5938dcd3993e5f8239d67078e6bf292d14dd3d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5938dcd3993e5f8239d67078e6bf292d14dd3d3", "patch": "@@ -1,3 +1,13 @@\n+2006-06-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* ggc-page.c (extra_order_size_tab): Add entries with\n+\tsize of struct function and basic_block.\n+\t(size_lookup): Extend to cover sizes up to 511.\n+\t(ggc_alloc_stat): Adjust user.\n+\t(ggc_pch_count_object): Likewise.\n+\t(ggc_pch_alloc_object): Likewise.\n+\t(ggc_pch_write_object): Likewise.\n+\n 2006-06-19  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-niter.c (implies_ge_p): New function."}, {"sha": "7b1415b785fab75fe59f942855af2a1bbe393943", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5938dcd3993e5f8239d67078e6bf292d14dd3d3/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5938dcd3993e5f8239d67078e6bf292d14dd3d3/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=f5938dcd3993e5f8239d67078e6bf292d14dd3d3", "patch": "@@ -191,6 +191,8 @@ static const size_t extra_order_size_table[] = {\n   sizeof (struct tree_parm_decl),\n   sizeof (struct tree_var_decl),\n   sizeof (struct tree_list),\n+  sizeof (struct function),\n+  sizeof (struct basic_block_def),\n   TREE_EXP_SIZE (2),\n   RTL_SIZE (2),\t\t\t/* MEM, PLUS, etc.  */\n   RTL_SIZE (9),\t\t\t/* INSN */\n@@ -1022,7 +1024,7 @@ release_pages (void)\n /* This table provides a fast way to determine ceil(log_2(size)) for\n    allocation requests.  The minimum allocation size is eight bytes.  */\n \n-static unsigned char size_lookup[257] =\n+static unsigned char size_lookup[511] =\n {\n   3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4,\n   4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n@@ -1040,7 +1042,22 @@ static unsigned char size_lookup[257] =\n   8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n   8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n   8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n-  8\n+  8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n+  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\n };\n \n /* Typed allocation function.  Does nothing special in this collector.  */\n@@ -1061,14 +1078,14 @@ ggc_alloc_stat (size_t size MEM_STAT_DECL)\n   struct page_entry *entry;\n   void *result;\n \n-  if (size <= 256)\n+  if (size < 512)\n     {\n       order = size_lookup[size];\n       object_size = OBJECT_SIZE (order);\n     }\n   else\n     {\n-      order = 9;\n+      order = 10;\n       while (size > (object_size = OBJECT_SIZE (order)))\n \torder++;\n     }\n@@ -2023,11 +2040,11 @@ ggc_pch_count_object (struct ggc_pch_data *d, void *x ATTRIBUTE_UNUSED,\n {\n   unsigned order;\n \n-  if (size <= 256)\n+  if (size < 512)\n     order = size_lookup[size];\n   else\n     {\n-      order = 9;\n+      order = 10;\n       while (size > OBJECT_SIZE (order))\n \torder++;\n     }\n@@ -2068,11 +2085,11 @@ ggc_pch_alloc_object (struct ggc_pch_data *d, void *x ATTRIBUTE_UNUSED,\n   unsigned order;\n   char *result;\n \n-  if (size <= 256)\n+  if (size < 512)\n     order = size_lookup[size];\n   else\n     {\n-      order = 9;\n+      order = 10;\n       while (size > OBJECT_SIZE (order))\n \torder++;\n     }\n@@ -2097,11 +2114,11 @@ ggc_pch_write_object (struct ggc_pch_data *d ATTRIBUTE_UNUSED,\n   unsigned order;\n   static const char emptyBytes[256];\n \n-  if (size <= 256)\n+  if (size < 512)\n     order = size_lookup[size];\n   else\n     {\n-      order = 9;\n+      order = 10;\n       while (size > OBJECT_SIZE (order))\n \torder++;\n     }"}]}