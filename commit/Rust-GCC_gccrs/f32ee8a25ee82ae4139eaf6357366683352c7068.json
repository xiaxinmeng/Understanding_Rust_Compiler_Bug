{"sha": "f32ee8a25ee82ae4139eaf6357366683352c7068", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyZWU4YTI1ZWU4MmFlNDEzOWVhZjYzNTczNjY2ODMzNTJjNzA2OA==", "commit": {"author": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2019-06-07T22:01:16Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgertq@gcc.gnu.org", "date": "2019-06-07T22:01:16Z"}, "message": "Synchronize libstdc++ PSTL with upstream LLVM PSTL\n\n\tRename PSTL macro's consistent with libstdc++ (and llvm upstream\n\tproject) standards.\n\t* include/bits/c++config: Rename all macros of the form __PSTL* to\n\t_PSTL*.\n\t* include/std/algorithm: Likewise.\n\t* include/std/execution: Likewise.\n\t* include/std/numeric: Likewise.\n\t* include/std/memory: Likewise.\n\t* include/pstl/glue_memory_impl.h: Likewise.\n\t* include/pstl/numeric_impl.h: Likewise.\n\t* include/pstl/glue_memory_defs.h: Likewise.\n\t* include/pstl/execution_defs.h: Likewise.\n\t* include/pstl/utils.h: Likewise.\n\t* include/pstl/algorithm_fwd.h: Likewise.\n\t* include/pstl/unseq_backend_simd.h: Likewise.\n\t* include/pstl/glue_execution_defs.h: Likewise.\n\t* include/pstl/algorithm_impl.h: Likewise.\n\t* include/pstl/parallel_impl.h: Likewise.\n\t* include/pstl/memory_impl.h: Likewise.\n\t* include/pstl/glue_numeric_defs.h: Likewise.\n\t* include/pstl/parallel_backend_utils.h: Likewise.\n\t* include/pstl/glue_algorithm_defs.h: Likewise.\n\t* include/pstl/parallel_backend.h: Likewise.\n\t* include/pstl/glue_numeric_impl.h: Likewise.\n\t* include/pstl/parallel_backend_tbb.h: Likewise.\n\t* include/pstl/numeric_fwd.h: Likewise.\n\t* include/pstl/glue_algorithm_impl.h: Likewise.\n\t* include/pstl/execution_impl.h: Likewise.\n\t* include/pstl/pstl_config.h: Likewise.\n\t* testsuite/util/pstl/pstl_test_config.h: Likewise.\n\t* testsuite/util/pstl/test_utils.h: Likewise.\n\t* testsuite/20_util/specialized_algorithms/pstl/uninitialized_construct.cc:\n\tLikewise.\n\t* testsuite/20_util/specialized_algorithms/pstl/uninitialized_copy_move.cc:\n\tLikewise.\n\t* testsuite/26_numerics/pstl/numeric_ops/adjacent_difference.cc:\n\tLikewise.\n\t* testsuite/26_numerics/pstl/numeric_ops/scan.cc: Likewise.\n\t* testsuite/26_numerics/pstl/numeric_ops/transform_scan.cc: Likewise.\n\t* testsuite/26_numerics/pstl/numeric_ops/reduce.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/reverse.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/nth_element.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/find_end.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/find_if.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/none_of.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/count.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/reverse_copy.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/equal.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/search_n.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/find.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/all_of.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/find_first_of.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_sorting/is_heap.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_sorting/partial_sort.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_sorting/partial_sort_copy.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_sorting/lexicographical_compare.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_merge/inplace_merge.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_merge/merge.cc: Likewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/unique_copy_equal.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/replace_copy.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/is_partitioned.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/rotate_copy.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/remove.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/copy_if.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/partition_copy.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/partition.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/copy_move.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/unique.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_modifying_operations/rotate.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/pstl/alg_nonmodifying/any_of.cc: Likewise.\n\n\tRename header guards to be consistent with upstream project's\n\tconventions.\n\t* include/pstl/glue_memory_impl.h: Rename all macros of the form\n\t_PSTL_(.*)_H to _PSTL_\\U\\1_H.\n\t* include/pstl/numeric_impl.h: Likewise.\n\t* include/pstl/glue_memory_defs.h: Likewise.\n\t* include/pstl/execution_defs.h: Likewise.\n\t* include/pstl/utils.h: Likewise.\n\t* include/pstl/algorithm_fwd.h: Likewise.\n\t* include/pstl/unseq_backend_simd.h: Likewise.\n\t* include/pstl/glue_execution_defs.h: Likewise.\n\t* include/pstl/algorithm_impl.h: Likewise.\n\t* include/pstl/parallel_impl.h: Likewise.\n\t* include/pstl/memory_impl.h: Likewise.\n\t* include/pstl/glue_numeric_defs.h: Likewise.\n\t* include/pstl/parallel_backend_utils.h: Likewise.\n\t* include/pstl/glue_algorithm_defs.h: Likewise.\n\t* include/pstl/parallel_backend.h: Likewise.\n\t* include/pstl/glue_numeric_impl.h: Likewise.\n\t* include/pstl/parallel_backend_tbb.h: Likewise.\n\t* include/pstl/numeric_fwd.h: Likewise.\n\t* include/pstl/glue_algorithm_impl.h: Likewise.\n\t* include/pstl/execution_impl.h: Likewise.\n\t* include/pstl/pstl_config.h: Likewise.\n\t* testsuite/util/pstl/pstl_test_config.h: Likewise.\n\n\tSynchronize libstdc++ parallel algorithms with upstream\n\tproject.\n\t* include/pstl/algorithm_fwd.h: Synchronize with\n\tupstream PSTL project.\n\t* include/pstl/algorithm_impl.h: Likewise.\n\t* include/pstl/execution_defs.h: Likewise.\n\t* include/pstl/execution_impl.h: Likewise.\n\t* include/pstl/glue_algorithm_impl.h: Likewise.\n\t* include/pstl/glue_execution_defs.h: Likewise.\n\t* include/pstl/numeric_fwd.h: Likewise.\n\t* include/pstl/numeric_impl.h: Likewise.\n\t* include/pstl/parallel_backend.h: Likewise.\n\t* include/pstl/pstl_config.h: Likewise.\n\t* include/pstl/unseq_backend_simd.h: Likewise.\n\t* include/pstl/parallel_backend_serial.h: New file.\n\t* include/Makefile.am (pstl_headers): Add\n\tparallel_backend_serial.h.\n\t* include/Makefile.in: Regenerate.\n\n\tClean up non-conforming names\n\t* include/pstl/algorithm_impl.h (__parallel_set_union_op):\n\tUglfiy copy_range1 and copy_range2\n\t(__pattern_walk2_n): Rename local n to __n\n\t* include/pstl/parallel_backend_tbb.h (struct __binary_no_op):\n\tRename parameter _T to _Tp.\n\n\tIntegrate non-TBB serial backend support\n\t* include/bits/c++config: Adjust TBB detection logic to select serial\n\tPSTL backend if no TBB present.\n\t* testsuite/utils/pstl/test_utils.h: Remove check for\n\t_PSTL_USE_PAR_POLICIES\n\nFrom-SVN: r272056", "tree": {"sha": "7cb05be0f8a1b8ecf05cca79375405dabc293766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cb05be0f8a1b8ecf05cca79375405dabc293766"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f32ee8a25ee82ae4139eaf6357366683352c7068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32ee8a25ee82ae4139eaf6357366683352c7068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32ee8a25ee82ae4139eaf6357366683352c7068", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32ee8a25ee82ae4139eaf6357366683352c7068/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1afab7a878555956f4842dcbed19bfe3c1c28a6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afab7a878555956f4842dcbed19bfe3c1c28a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1afab7a878555956f4842dcbed19bfe3c1c28a6e"}], "stats": {"total": 1855, "additions": 967, "deletions": 888}, "files": [{"sha": "e20d0b654c3862f0b4e6dbb96fa0f217f7dd621a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -1,3 +1,150 @@\n+2019-06-07  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\tRename PSTL macro's consistent with libstdc++ (and llvm upstream\n+\tproject) standards.\n+\t* include/bits/c++config: Rename all macros of the form __PSTL* to\n+\t_PSTL*.\n+\t* include/std/algorithm: Likewise.\n+\t* include/std/execution: Likewise.\n+\t* include/std/numeric: Likewise.\n+\t* include/std/memory: Likewise.\n+\t* include/pstl/glue_memory_impl.h: Likewise.\n+\t* include/pstl/numeric_impl.h: Likewise.\n+\t* include/pstl/glue_memory_defs.h: Likewise.\n+\t* include/pstl/execution_defs.h: Likewise.\n+\t* include/pstl/utils.h: Likewise.\n+\t* include/pstl/algorithm_fwd.h: Likewise.\n+\t* include/pstl/unseq_backend_simd.h: Likewise.\n+\t* include/pstl/glue_execution_defs.h: Likewise.\n+\t* include/pstl/algorithm_impl.h: Likewise.\n+\t* include/pstl/parallel_impl.h: Likewise.\n+\t* include/pstl/memory_impl.h: Likewise.\n+\t* include/pstl/glue_numeric_defs.h: Likewise.\n+\t* include/pstl/parallel_backend_utils.h: Likewise.\n+\t* include/pstl/glue_algorithm_defs.h: Likewise.\n+\t* include/pstl/parallel_backend.h: Likewise.\n+\t* include/pstl/glue_numeric_impl.h: Likewise.\n+\t* include/pstl/parallel_backend_tbb.h: Likewise.\n+\t* include/pstl/numeric_fwd.h: Likewise.\n+\t* include/pstl/glue_algorithm_impl.h: Likewise.\n+\t* include/pstl/execution_impl.h: Likewise.\n+\t* include/pstl/pstl_config.h: Likewise.\n+\t* testsuite/util/pstl/pstl_test_config.h: Likewise.\n+\t* testsuite/util/pstl/test_utils.h: Likewise.\n+\t* testsuite/20_util/specialized_algorithms/pstl/uninitialized_construct.cc:\n+\tLikewise.\n+\t* testsuite/20_util/specialized_algorithms/pstl/uninitialized_copy_move.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/pstl/numeric_ops/adjacent_difference.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/pstl/numeric_ops/scan.cc: Likewise.\n+\t* testsuite/26_numerics/pstl/numeric_ops/transform_scan.cc: Likewise.\n+\t* testsuite/26_numerics/pstl/numeric_ops/reduce.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/reverse.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/nth_element.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/find_end.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/find_if.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/none_of.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/count.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/reverse_copy.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/equal.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/search_n.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/find.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/all_of.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/find_first_of.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_sorting/is_heap.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_sorting/partial_sort.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_sorting/partial_sort_copy.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_sorting/lexicographical_compare.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_merge/inplace_merge.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_merge/merge.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/unique_copy_equal.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/replace_copy.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/is_partitioned.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/rotate_copy.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/remove.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/copy_if.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/partition_copy.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/partition.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/copy_move.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/unique.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_modifying_operations/rotate.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/pstl/alg_nonmodifying/any_of.cc: Likewise.\n+\n+\tRename header guards to be consistent with upstream project's\n+\tconventions.\n+\t* include/pstl/glue_memory_impl.h: Rename all macros of the form\n+\t_PSTL_(.*)_H to _PSTL_\\U\\1_H.\n+\t* include/pstl/numeric_impl.h: Likewise.\n+\t* include/pstl/glue_memory_defs.h: Likewise.\n+\t* include/pstl/execution_defs.h: Likewise.\n+\t* include/pstl/utils.h: Likewise.\n+\t* include/pstl/algorithm_fwd.h: Likewise.\n+\t* include/pstl/unseq_backend_simd.h: Likewise.\n+\t* include/pstl/glue_execution_defs.h: Likewise.\n+\t* include/pstl/algorithm_impl.h: Likewise.\n+\t* include/pstl/parallel_impl.h: Likewise.\n+\t* include/pstl/memory_impl.h: Likewise.\n+\t* include/pstl/glue_numeric_defs.h: Likewise.\n+\t* include/pstl/parallel_backend_utils.h: Likewise.\n+\t* include/pstl/glue_algorithm_defs.h: Likewise.\n+\t* include/pstl/parallel_backend.h: Likewise.\n+\t* include/pstl/glue_numeric_impl.h: Likewise.\n+\t* include/pstl/parallel_backend_tbb.h: Likewise.\n+\t* include/pstl/numeric_fwd.h: Likewise.\n+\t* include/pstl/glue_algorithm_impl.h: Likewise.\n+\t* include/pstl/execution_impl.h: Likewise.\n+\t* include/pstl/pstl_config.h: Likewise.\n+\t* testsuite/util/pstl/pstl_test_config.h: Likewise.\n+\n+\tSynchronize libstdc++ parallel algorithms with upstream\n+\tproject.\n+\t* include/pstl/algorithm_fwd.h: Synchronize with\n+\tupstream PSTL project.\n+\t* include/pstl/algorithm_impl.h: Likewise.\n+\t* include/pstl/execution_defs.h: Likewise.\n+\t* include/pstl/execution_impl.h: Likewise.\n+\t* include/pstl/glue_algorithm_impl.h: Likewise.\n+\t* include/pstl/glue_execution_defs.h: Likewise.\n+\t* include/pstl/numeric_fwd.h: Likewise.\n+\t* include/pstl/numeric_impl.h: Likewise.\n+\t* include/pstl/parallel_backend.h: Likewise.\n+\t* include/pstl/pstl_config.h: Likewise.\n+\t* include/pstl/unseq_backend_simd.h: Likewise.\n+\t* include/pstl/parallel_backend_serial.h: New file.\n+\t* include/Makefile.am (pstl_headers): Add\n+\tparallel_backend_serial.h.\n+\t* include/Makefile.in: Regenerate.\n+\n+\tClean up non-conforming names\n+\t* include/pstl/algorithm_impl.h (__parallel_set_union_op):\n+\tUglfiy copy_range1 and copy_range2\n+\t(__pattern_walk2_n): Rename local n to __n\n+\t* include/pstl/parallel_backend_tbb.h (struct __binary_no_op):\n+\tRename parameter _T to _Tp.\n+\n+\tIntegrate non-TBB serial backend support\n+\t* include/bits/c++config: Adjust TBB detection logic to select serial\n+\tPSTL backend if no TBB present.\n+\t* testsuite/utils/pstl/test_utils.h: Remove check for\n+\t_PSTL_USE_PAR_POLICIES\n+\t\n 2019-06-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/24_iterators/container_access.cc: Move dg-options before"}, {"sha": "92975b1ddc13e3f950f5cec31542bbddccd98f9a", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -246,6 +246,7 @@ pstl_headers = \\\n \t${pstl_srcdir}/numeric_impl.h \\\n \t${pstl_srcdir}/parallel_backend.h \\\n \t${pstl_srcdir}/parallel_backend_tbb.h \\\n+\t${pstl_srcdir}/parallel_backend_serial.h \\\n \t${pstl_srcdir}/parallel_backend_utils.h \\\n \t${pstl_srcdir}/parallel_impl.h \\\n \t${pstl_srcdir}/pstl_config.h \\"}, {"sha": "58c56f7a0f832c59c28456d0eed300c5950f2cd9", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -591,6 +591,7 @@ pstl_headers = \\\n \t${pstl_srcdir}/numeric_impl.h \\\n \t${pstl_srcdir}/parallel_backend.h \\\n \t${pstl_srcdir}/parallel_backend_tbb.h \\\n+\t${pstl_srcdir}/parallel_backend_serial.h \\\n \t${pstl_srcdir}/parallel_backend_utils.h \\\n \t${pstl_srcdir}/parallel_impl.h \\\n \t${pstl_srcdir}/pstl_config.h \\"}, {"sha": "746e35efbfc893153ec65dc85ebe8ade30d24222", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -656,21 +656,21 @@ namespace std\n \n #if __cplusplus >= 201703L\n // Preserved here so we have some idea which version of upstream we've pulled in\n-// #define PSTL_VERSION 104\n-// #define PSTL_VERSION_MAJOR (PSTL_VERSION/100)\n-// #define PSTL_VERSION_MINOR (PSTL_VERSION - PSTL_VERSION_MAJOR * 100)\n+// #define PSTL_VERSION 9000\n \n // For now this defaults to being based on the presence of Thread Building Blocks\n # ifndef _GLIBCXX_USE_TBB_PAR_BACKEND\n #  define _GLIBCXX_USE_TBB_PAR_BACKEND __has_include(<tbb/tbb.h>)\n # endif\n // This section will need some rework when a new (default) backend type is added\n # if _GLIBCXX_USE_TBB_PAR_BACKEND\n-#  define __PSTL_USE_PAR_POLICIES 1\n+#  define _PSTL_PAR_BACKEND_TBB\n+# else\n+#  define _PSTL_PAR_BACKEND_SERIAL\n # endif\n \n-# define __PSTL_ASSERT(_Condition) __glibcxx_assert(_Condition)\n-# define __PSTL_ASSERT_MSG(_Condition, _Message) __glibcxx_assert(_Condition)\n+# define _PSTL_ASSERT(_Condition) __glibcxx_assert(_Condition)\n+# define _PSTL_ASSERT_MSG(_Condition, _Message) __glibcxx_assert(_Condition)\n \n #include <pstl/pstl_config.h>\n "}, {"sha": "814356b38fb74560d2d176a6718ae4b2c8c50c89", "filename": "libstdc++-v3/include/pstl/algorithm_fwd.h", "status": "modified", "additions": 31, "deletions": 113, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_fwd.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_algorithm_fwd_H\n-#define __PSTL_algorithm_fwd_H\n+#ifndef _PSTL_ALGORITHM_FWD_H\n+#define _PSTL_ALGORITHM_FWD_H\n \n #include <type_traits>\n #include <utility>\n@@ -37,12 +37,10 @@ bool\n __pattern_any_of(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Pred, _IsVector,\n                  /*parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Pred, class _IsVector>\n bool\n __pattern_any_of(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Pred, _IsVector,\n                  /*parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // walk1 (pseudo)\n@@ -63,24 +61,20 @@ void\n __pattern_walk1(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Function, _IsVector,\n                 /*parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Function, class _IsVector>\n void\n __pattern_walk1(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Function, _IsVector,\n                 /*parallel=*/std::true_type);\n-#endif\n \n template <class _ExecutionPolicy, class _ForwardIterator, class _Brick>\n void\n __pattern_walk_brick(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Brick,\n                      /*parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Brick>\n void\n __pattern_walk_brick(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Brick,\n                      /*parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // walk1_n\n@@ -99,24 +93,20 @@ _ForwardIterator\n __pattern_walk1_n(_ExecutionPolicy&&, _ForwardIterator, _Size, _Function, _IsVector,\n                   /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Size, class _Function, class _IsVector>\n _RandomAccessIterator\n __pattern_walk1_n(_ExecutionPolicy&&, _RandomAccessIterator, _Size, _Function, _IsVector,\n                   /*is_parallel=*/std::true_type);\n-#endif\n \n template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Brick>\n _ForwardIterator\n __pattern_walk_brick_n(_ExecutionPolicy&&, _ForwardIterator, _Size, _Brick,\n                        /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Size, class _Brick>\n _RandomAccessIterator\n __pattern_walk_brick_n(_ExecutionPolicy&&, _RandomAccessIterator, _Size, _Brick,\n                        /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // walk2 (pseudo)\n@@ -145,51 +135,43 @@ _ForwardIterator2\n __pattern_walk2(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, _IsVector,\n                 /*parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Function, class _IsVector>\n _ForwardIterator2\n __pattern_walk2(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, _IsVector,\n                 /*parallel=*/std::true_type);\n-#endif\n \n template <class _ExecutionPolicy, class _ForwardIterator1, class _Size, class _ForwardIterator2, class _Function,\n           class _IsVector>\n _ForwardIterator2\n __pattern_walk2_n(_ExecutionPolicy&&, _ForwardIterator1, _Size, _ForwardIterator2, _Function, _IsVector,\n                   /*parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _Size, class _RandomAccessIterator2,\n           class _Function, class _IsVector>\n _RandomAccessIterator2\n __pattern_walk2_n(_ExecutionPolicy&&, _RandomAccessIterator1, _Size, _RandomAccessIterator2, _Function, _IsVector,\n                   /*parallel=*/std::true_type);\n-#endif\n \n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Brick>\n _ForwardIterator2\n __pattern_walk2_brick(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Brick,\n                       /*parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _Brick>\n _RandomAccessIterator2\n __pattern_walk2_brick(_ExecutionPolicy&&, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2,\n                       _Brick,\n                       /*parallel=*/std::true_type);\n-#endif\n \n template <class _ExecutionPolicy, class _ForwardIterator1, class _Size, class _ForwardIterator2, class _Brick>\n _ForwardIterator2\n __pattern_walk2_brick_n(_ExecutionPolicy&&, _ForwardIterator1, _Size, _ForwardIterator2, _Brick,\n                         /*parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _Size, class _RandomAccessIterator2, class _Brick>\n _RandomAccessIterator2\n __pattern_walk2_brick_n(_ExecutionPolicy&&, _RandomAccessIterator1, _Size, _RandomAccessIterator2, _Brick,\n                         /*parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // walk3 (pseudo)\n@@ -213,21 +195,19 @@ __pattern_walk3(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _Forwa\n                 _Function, _IsVector,\n                 /*parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2,\n           class _RandomAccessIterator3, class _Function, class _IsVector>\n _RandomAccessIterator3\n __pattern_walk3(_ExecutionPolicy&&, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2,\n                 _RandomAccessIterator3, _Function, _IsVector, /*parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // equal\n //------------------------------------------------------------------------\n \n template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\n bool __brick_equal(_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _BinaryPredicate,\n-                   /* IsVector = */ std::false_type) noexcept;\n+                   /* is_vector = */ std::false_type) noexcept;\n \n template <class _RandomAccessIterator1, class _RandomAccessIterator2, class _BinaryPredicate>\n bool __brick_equal(_RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _BinaryPredicate,\n@@ -237,17 +217,33 @@ template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterato\n           class _IsVector>\n bool\n __pattern_equal(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _BinaryPredicate,\n-                _IsVector,\n-                /* is_parallel = */ std::false_type) noexcept;\n+                _IsVector, /* is_parallel = */ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _BinaryPredicate,\n           class _IsVector>\n bool\n __pattern_equal(_ExecutionPolicy&&, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2,\n-                _BinaryPredicate, _IsVector,\n-                /*is_parallel=*/std::true_type);\n-#endif\n+                _BinaryPredicate, _IsVector, /* is_parallel = */ std::true_type);\n+\n+template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\n+bool __brick_equal(_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate,\n+                   /* is_vector = */ std::false_type) noexcept;\n+\n+template <class _RandomAccessIterator1, class _RandomAccessIterator2, class _BinaryPredicate>\n+bool __brick_equal(_RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator2,\n+                   _BinaryPredicate, /* is_vector = */ std::true_type) noexcept;\n+\n+template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate,\n+          class _IsVector>\n+bool\n+__pattern_equal(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n+                _BinaryPredicate, _IsVector, /* is_parallel = */ std::false_type) noexcept;\n+\n+template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _BinaryPredicate,\n+          class _IsVector>\n+bool\n+__pattern_equal(_ExecutionPolicy&&, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2,\n+                _RandomAccessIterator2, _BinaryPredicate, _IsVector, /* is_parallel = */ std::true_type);\n \n //------------------------------------------------------------------------\n // find_if\n@@ -266,12 +262,10 @@ _ForwardIterator\n __pattern_find_if(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Predicate, _IsVector,\n                   /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate, class _IsVector>\n _ForwardIterator\n __pattern_find_if(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Predicate, _IsVector,\n                   /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // find_end\n@@ -294,14 +288,12 @@ __pattern_find_end(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _Fo\n                    _BinaryPredicate, _IsVector,\n                    /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate,\n           class _IsVector>\n _ForwardIterator1\n __pattern_find_end(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                    _BinaryPredicate, _IsVector,\n                    /*is_parallel=*/std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // find_first_of\n@@ -323,13 +315,11 @@ _ForwardIterator1\n __pattern_find_first_of(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                         _BinaryPredicate, _IsVector, /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate,\n           class _IsVector>\n _ForwardIterator1\n __pattern_find_first_of(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                         _BinaryPredicate, _IsVector, /*is_parallel=*/std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // search\n@@ -352,14 +342,12 @@ __pattern_search(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _Forw\n                  _BinaryPredicate, _IsVector,\n                  /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate,\n           class _IsVector>\n _ForwardIterator1\n __pattern_search(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                  _BinaryPredicate, _IsVector,\n                  /*is_parallel=*/std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // search_n\n@@ -382,14 +370,12 @@ __pattern_search_n(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Size\n                    IsVector,\n                    /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Size, class _Tp, class _BinaryPredicate,\n           class IsVector>\n _RandomAccessIterator\n __pattern_search_n(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _Size, const _Tp&,\n                    _BinaryPredicate, IsVector,\n                    /*is_parallel=*/std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // copy_n\n@@ -486,13 +472,11 @@ _OutputIterator\n __pattern_copy_if(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryPredicate, _IsVector,\n                   /*parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator, class _UnaryPredicate,\n           class _IsVector>\n _OutputIterator\n __pattern_copy_if(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _UnaryPredicate,\n                   _IsVector, /*parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // count\n@@ -513,12 +497,10 @@ typename std::iterator_traits<_ForwardIterator>::difference_type\n __pattern_count(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Predicate,\n                 /* is_parallel */ std::false_type, _IsVector) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate, class _IsVector>\n typename std::iterator_traits<_ForwardIterator>::difference_type\n __pattern_count(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Predicate,\n                 /* is_parallel */ std::true_type, _IsVector);\n-#endif\n \n //------------------------------------------------------------------------\n // unique\n@@ -537,12 +519,10 @@ _ForwardIterator\n __pattern_unique(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _BinaryPredicate, _IsVector,\n                  /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _BinaryPredicate, class _IsVector>\n _ForwardIterator\n __pattern_unique(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _BinaryPredicate, _IsVector,\n                  /*is_parallel=*/std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // unique_copy\n@@ -556,9 +536,11 @@ template <class _RandomAccessIterator, class _OutputIterator, class _BinaryPredi\n _OutputIterator __brick_unique_copy(_RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _BinaryPredicate,\n                                     /*vector=*/std::true_type) noexcept;\n \n-template <class _ExecutionPolicy, class _ForwardIterator, class OutputIterator, class _BinaryPredicate, class _IsVector>\n-OutputIterator __pattern_unique_copy(_ForwardIterator, _ForwardIterator, OutputIterator, _BinaryPredicate, _IsVector,\n-                                     /*parallel=*/std::false_type) noexcept;\n+template <class _ExecutionPolicy, class _ForwardIterator, class _OutputIterator, class _BinaryPredicate,\n+          class _IsVector>\n+_OutputIterator\n+__pattern_unique_copy(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryPredicate,\n+                      _IsVector, /*parallel=*/std::false_type) noexcept;\n \n template <class _ExecutionPolicy, class _DifferenceType, class _RandomAccessIterator, class _BinaryPredicate>\n _DifferenceType\n@@ -570,13 +552,11 @@ _DifferenceType\n __brick_calc_mask_2(_RandomAccessIterator, _RandomAccessIterator, bool* __restrict, _BinaryPredicate,\n                     /*vector=*/std::true_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator, class _BinaryPredicate,\n           class _IsVector>\n _OutputIterator\n __pattern_unique_copy(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator,\n                       _BinaryPredicate, _IsVector, /*parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // reverse\n@@ -603,12 +583,10 @@ void\n __pattern_reverse(_ExecutionPolicy&&, _BidirectionalIterator, _BidirectionalIterator, _IsVector,\n                   /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _BidirectionalIterator, class _IsVector>\n void\n __pattern_reverse(_ExecutionPolicy&&, _BidirectionalIterator, _BidirectionalIterator, _IsVector,\n                   /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // reverse_copy\n@@ -627,12 +605,10 @@ _OutputIterator\n __pattern_reverse_copy(_ExecutionPolicy&&, _BidirectionalIterator, _BidirectionalIterator, _OutputIterator, _IsVector,\n                        /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _BidirectionalIterator, class _OutputIterator, class _IsVector>\n _OutputIterator\n __pattern_reverse_copy(_ExecutionPolicy&&, _BidirectionalIterator, _BidirectionalIterator, _OutputIterator, _IsVector,\n                        /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // rotate\n@@ -651,12 +627,10 @@ _ForwardIterator\n __pattern_rotate(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _ForwardIterator, _IsVector,\n                  /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _IsVector>\n _ForwardIterator\n __pattern_rotate(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _ForwardIterator, _IsVector,\n                  /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // rotate_copy\n@@ -676,13 +650,11 @@ __pattern_rotate_copy(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _F\n                       _IsVector,\n                       /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _OutputIterator, class _IsVector>\n _OutputIterator\n __pattern_rotate_copy(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _ForwardIterator, _OutputIterator,\n                       _IsVector,\n                       /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // is_partitioned\n@@ -701,12 +673,10 @@ bool\n __pattern_is_partitioned(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector,\n                          /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate, class _IsVector>\n bool\n __pattern_is_partitioned(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector,\n                          /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // partition\n@@ -725,12 +695,10 @@ _ForwardIterator\n __pattern_partition(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector,\n                     /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate, class _IsVector>\n _ForwardIterator\n __pattern_partition(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector,\n                     /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // stable_partition\n@@ -750,13 +718,11 @@ __pattern_stable_partition(_ExecutionPolicy&&, _BidirectionalIterator, _Bidirect\n                            _IsVector,\n                            /*is_parallelization=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _BidirectionalIterator, class _UnaryPredicate, class _IsVector>\n _BidirectionalIterator\n __pattern_stable_partition(_ExecutionPolicy&&, _BidirectionalIterator, _BidirectionalIterator, _UnaryPredicate,\n                            _IsVector,\n                            /*is_parallelization=*/std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // partition_copy\n@@ -779,14 +745,12 @@ __pattern_partition_copy(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator,\n                          _UnaryPredicate, _IsVector,\n                          /*is_parallelization=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator1, class _OutputIterator2,\n           class _UnaryPredicate, class _IsVector>\n std::pair<_OutputIterator1, _OutputIterator2>\n __pattern_partition_copy(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator1,\n                          _OutputIterator2, _UnaryPredicate, _IsVector,\n                          /*is_parallelization=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // sort\n@@ -798,13 +762,11 @@ void\n __pattern_sort(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector /*is_vector*/,\n                /*is_parallel=*/std::false_type, _IsMoveConstructible) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n void\n __pattern_sort(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector /*is_vector*/,\n                /*is_parallel=*/std::true_type,\n                /*is_move_constructible=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // stable_sort\n@@ -816,13 +778,11 @@ __pattern_stable_sort(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIt\n                       _IsVector /*is_vector*/,\n                       /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n void\n __pattern_stable_sort(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _Compare,\n                       _IsVector /*is_vector*/,\n                       /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // partial_sort\n@@ -834,13 +794,11 @@ __pattern_partial_sort(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessI\n                        _Compare, _IsVector,\n                        /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n void\n __pattern_partial_sort(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator,\n                        _Compare, _IsVector,\n                        /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // partial_sort_copy\n@@ -852,13 +810,11 @@ __pattern_partial_sort_copy(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterat\n                             _RandomAccessIterator, _Compare, _IsVector,\n                             /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _RandomAccessIterator, class _Compare, class _IsVector>\n _RandomAccessIterator\n __pattern_partial_sort_copy(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _RandomAccessIterator,\n                             _RandomAccessIterator, _Compare, _IsVector,\n                             /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // adjacent_find\n@@ -879,12 +835,10 @@ _ForwardIterator\n __pattern_adjacent_find(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _BinaryPredicate,\n                         /* is_parallel */ std::false_type, _IsVector, bool) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _BinaryPredicate, class _IsVector>\n _RandomAccessIterator\n __pattern_adjacent_find(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _BinaryPredicate,\n                         /* is_parallel */ std::true_type, _IsVector, bool);\n-#endif\n \n //------------------------------------------------------------------------\n // nth_element\n@@ -895,13 +849,11 @@ __pattern_nth_element(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIt\n                       _IsVector,\n                       /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n void\n __pattern_nth_element(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare,\n                       _IsVector,\n                       /*is_parallel=*/std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // fill, fill_n\n@@ -921,12 +873,10 @@ void\n __pattern_fill(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const _Tp&,\n                /*is_parallel=*/std::false_type, _IsVector) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Tp, class _IsVector>\n _ForwardIterator\n __pattern_fill(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const _Tp&,\n                /*is_parallel=*/std::true_type, _IsVector);\n-#endif\n \n template <class _OutputIterator, class _Size, class _Tp>\n _OutputIterator\n@@ -943,12 +893,10 @@ _OutputIterator\n __pattern_fill_n(_ExecutionPolicy&&, _OutputIterator, _Size, const _Tp&,\n                  /*is_parallel=*/std::false_type, _IsVector) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _OutputIterator, class _Size, class _Tp, class _IsVector>\n _OutputIterator\n __pattern_fill_n(_ExecutionPolicy&&, _OutputIterator, _Size, const _Tp&,\n                  /*is_parallel=*/std::true_type, _IsVector);\n-#endif\n \n //------------------------------------------------------------------------\n // generate, generate_n\n@@ -967,12 +915,10 @@ void\n __pattern_generate(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Generator,\n                    /*is_parallel=*/std::false_type, _IsVector) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Generator, class _IsVector>\n _ForwardIterator\n __pattern_generate(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Generator,\n                    /*is_parallel=*/std::true_type, _IsVector);\n-#endif\n \n template <class OutputIterator, class Size, class _Generator>\n OutputIterator __brick_generate_n(OutputIterator, Size, _Generator,\n@@ -987,12 +933,10 @@ OutputIterator\n __pattern_generate_n(_ExecutionPolicy&&, OutputIterator, Size, _Generator,\n                      /*is_parallel=*/std::false_type, _IsVector) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class OutputIterator, class Size, class _Generator, class _IsVector>\n OutputIterator\n __pattern_generate_n(_ExecutionPolicy&&, OutputIterator, Size, _Generator,\n                      /*is_parallel=*/std::true_type, _IsVector);\n-#endif\n \n //------------------------------------------------------------------------\n // remove\n@@ -1010,12 +954,10 @@ _ForwardIterator\n __pattern_remove_if(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector,\n                     /*is_parallel*/ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate, class _IsVector>\n _ForwardIterator\n __pattern_remove_if(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector,\n                     /*is_parallel*/ std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // merge\n@@ -1037,14 +979,12 @@ _OutputIterator\n __pattern_merge(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                 _OutputIterator, _Compare, _IsVector, /* is_parallel = */ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n __pattern_merge(_ExecutionPolicy&&, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2,\n                 _RandomAccessIterator2, _OutputIterator, _Compare, _IsVector,\n                 /* is_parallel = */ std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // inplace_merge\n@@ -1064,13 +1004,11 @@ __pattern_inplace_merge(_ExecutionPolicy&&, _BidirectionalIterator, _Bidirection\n                         _Compare, _IsVector,\n                         /* is_parallel = */ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _BidirectionalIterator, class _Compare, class _IsVector>\n void\n __pattern_inplace_merge(_ExecutionPolicy&&, _BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator,\n                         _Compare, _IsVector,\n                         /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // includes\n@@ -1082,13 +1020,11 @@ __pattern_includes(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _Fo\n                    _Compare, _IsVector,\n                    /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Compare, class _IsVector>\n bool\n __pattern_includes(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                    _Compare, _IsVector,\n                    /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // set_union\n@@ -1110,13 +1046,11 @@ _OutputIterator\n __pattern_set_union(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                     _OutputIterator, _Compare, _IsVector, /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n __pattern_set_union(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                     _OutputIterator, _Compare, _IsVector, /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // set_intersection\n@@ -1139,13 +1073,11 @@ __pattern_set_intersection(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterat\n                            _ForwardIterator2, _OutputIterator, _Compare, _IsVector,\n                            /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n __pattern_set_intersection(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2,\n                            _ForwardIterator2, _OutputIterator, _Compare, _IsVector, /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // set_difference\n@@ -1167,13 +1099,11 @@ _OutputIterator\n __pattern_set_difference(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                          _OutputIterator, _Compare, _IsVector, /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n __pattern_set_difference(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n                          _OutputIterator, _Compare, _IsVector, /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // set_symmetric_difference\n@@ -1196,14 +1126,12 @@ __pattern_set_symmetric_difference(_ExecutionPolicy&&, _ForwardIterator1, _Forwa\n                                    _ForwardIterator2, _OutputIterator, _Compare, _IsVector,\n                                    /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n __pattern_set_symmetric_difference(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2,\n                                    _ForwardIterator2, _OutputIterator, _Compare, _IsVector,\n                                    /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // is_heap_until\n@@ -1222,12 +1150,10 @@ _RandomAccessIterator\n __pattern_is_heap_until(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector,\n                         /* is_parallel = */ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n _RandomAccessIterator\n __pattern_is_heap_until(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector,\n                         /* is_parallel = */ std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // min_element\n@@ -1246,12 +1172,10 @@ _ForwardIterator\n __pattern_min_element(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Compare, _IsVector,\n                       /* is_parallel = */ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <typename _ExecutionPolicy, typename _RandomAccessIterator, typename _Compare, typename _IsVector>\n _RandomAccessIterator\n __pattern_min_element(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector,\n                       /* is_parallel = */ std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // minmax_element\n@@ -1270,12 +1194,10 @@ std::pair<_ForwardIterator, _ForwardIterator>\n __pattern_minmax_element(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Compare, _IsVector,\n                          /* is_parallel = */ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <typename _ExecutionPolicy, typename _ForwardIterator, typename _Compare, typename _IsVector>\n std::pair<_ForwardIterator, _ForwardIterator>\n __pattern_minmax_element(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Compare, _IsVector,\n                          /* is_parallel = */ std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // mismatch\n@@ -1297,13 +1219,11 @@ __pattern_mismatch(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _Fo\n                    _Predicate, _IsVector,\n                    /* is_parallel = */ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _Predicate,\n           class _IsVector>\n std::pair<_RandomAccessIterator1, _RandomAccessIterator2>\n __pattern_mismatch(_ExecutionPolicy&&, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2,\n                    _RandomAccessIterator2, _Predicate, _IsVector, /* is_parallel = */ std::true_type) noexcept;\n-#endif\n \n //------------------------------------------------------------------------\n // lexicographical_compare\n@@ -1324,13 +1244,11 @@ bool\n __pattern_lexicographical_compare(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2,\n                                   _ForwardIterator2, _Compare, _IsVector, /* is_parallel = */ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Compare, class _IsVector>\n bool\n __pattern_lexicographical_compare(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2,\n                                   _ForwardIterator2, _Compare, _IsVector, /* is_parallel = */ std::true_type) noexcept;\n-#endif\n \n } // namespace __internal\n } // namespace __pstl\n-#endif /* __PSTL_algorithm_fwd_H */\n+#endif /* _PSTL_ALGORITHM_FWD_H */"}, {"sha": "0a78b33f2a0b62532233ab1c5e2782ce3446aebf", "filename": "libstdc++-v3/include/pstl/algorithm_impl.h", "status": "modified", "additions": 208, "deletions": 299, "changes": 507, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_algorithm_impl_H\n-#define __PSTL_algorithm_impl_H\n+#ifndef _PSTL_ALGORITHM_IMPL_H\n+#define _PSTL_ALGORITHM_IMPL_H\n \n #include <iterator>\n #include <type_traits>\n@@ -19,12 +19,10 @@\n #include \"execution_impl.h\"\n #include \"memory_impl.h\"\n #include \"parallel_backend_utils.h\"\n-#include \"unseq_backend_simd.h\"\n-\n-#if __PSTL_USE_PAR_POLICIES\n #include \"parallel_backend.h\"\n #include \"parallel_impl.h\"\n-#endif\n+#include \"unseq_backend_simd.h\"\n+\n \n namespace __pstl\n {\n@@ -59,20 +57,18 @@ __pattern_any_of(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterator\n     return __internal::__brick_any_of(__first, __last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Pred, class _IsVector>\n bool\n __pattern_any_of(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Pred __pred,\n                  _IsVector __is_vector, /*parallel=*/std::true_type)\n {\n     return __internal::__except_handler([&]() {\n-       return __internal::__parallel_or(std::forward<_ExecutionPolicy>(__exec), __first, __last,\n-                             [__pred, __is_vector](_ForwardIterator __i, _ForwardIterator __j) {\n-                                 return __internal::__brick_any_of(__i, __j, __pred, __is_vector);\n-                             });\n+        return __internal::__parallel_or(std::forward<_ExecutionPolicy>(__exec), __first, __last,\n+                                         [__pred, __is_vector](_ForwardIterator __i, _ForwardIterator __j) {\n+                                             return __internal::__brick_any_of(__i, __j, __pred, __is_vector);\n+                                         });\n     });\n }\n-#endif\n \n // [alg.foreach]\n // for_each_n with no policy\n@@ -115,7 +111,6 @@ __pattern_walk1(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterator _\n     __internal::__brick_walk1(__first, __last, __f, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Function, class _IsVector>\n void\n __pattern_walk1(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Function __f,\n@@ -129,7 +124,6 @@ __pattern_walk1(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIte\n                                       });\n     });\n }\n-#endif\n \n template <class _ExecutionPolicy, class _ForwardIterator, class _Brick>\n void\n@@ -139,7 +133,6 @@ __pattern_walk_brick(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardItera\n     __brick(__first, __last);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Brick>\n void\n __pattern_walk_brick(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Brick __brick,\n@@ -150,7 +143,6 @@ __pattern_walk_brick(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Forwa\n                                       [__brick](_ForwardIterator __i, _ForwardIterator __j) { __brick(__i, __j); });\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // walk1_n\n@@ -160,7 +152,7 @@ _ForwardIterator\n __brick_walk1_n(_ForwardIterator __first, _Size __n, _Function __f, /*_IsVectorTag=*/std::false_type)\n {\n     return __internal::__for_each_n_it_serial(__first, __n,\n-                                  [&__f](_ForwardIterator __it) { __f(*__it); }); // calling serial version\n+                                              [&__f](_ForwardIterator __it) { __f(*__it); }); // calling serial version\n }\n \n template <class _RandomAccessIterator, class _DifferenceType, class _Function>\n@@ -179,17 +171,16 @@ __pattern_walk1_n(_ExecutionPolicy&&, _ForwardIterator __first, _Size __n, _Func\n     return __internal::__brick_walk1_n(__first, __n, __f, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Size, class _Function, class _IsVector>\n _RandomAccessIterator\n __pattern_walk1_n(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _Size __n, _Function __f,\n                   _IsVector __is_vector,\n                   /*is_parallel=*/std::true_type)\n {\n-    __internal::__pattern_walk1(std::forward<_ExecutionPolicy>(__exec), __first, __first + __n, __f, __is_vector, std::true_type());\n+    __internal::__pattern_walk1(std::forward<_ExecutionPolicy>(__exec), __first, __first + __n, __f, __is_vector,\n+                                std::true_type());\n     return __first + __n;\n }\n-#endif\n \n template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Brick>\n _ForwardIterator\n@@ -199,7 +190,6 @@ __pattern_walk_brick_n(_ExecutionPolicy&&, _ForwardIterator __first, _Size __n,\n     return __brick(__first, __n);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Size, class _Brick>\n _RandomAccessIterator\n __pattern_walk_brick_n(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _Size __n, _Brick __brick,\n@@ -212,7 +202,6 @@ __pattern_walk_brick_n(_ExecutionPolicy&& __exec, _RandomAccessIterator __first,\n         return __first + __n;\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // walk2 (pseudo)\n@@ -263,7 +252,6 @@ __pattern_walk2(_ExecutionPolicy&&, _ForwardIterator1 __first1, _ForwardIterator\n     return __internal::__brick_walk2(__first1, __last1, __first2, __f, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Function, class _IsVector>\n _ForwardIterator2\n __pattern_walk2(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,\n@@ -278,15 +266,14 @@ __pattern_walk2(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardI\n         return __first2 + (__last1 - __first1);\n     });\n }\n-#endif\n \n template <class _ExecutionPolicy, class _ForwardIterator1, class _Size, class _ForwardIterator2, class _Function,\n           class _IsVector>\n _ForwardIterator2\n __pattern_walk2_n(_ExecutionPolicy&&, _ForwardIterator1 __first1, _Size __n, _ForwardIterator2 __first2, _Function __f,\n-                  _IsVector is_vector, /*parallel=*/std::false_type) noexcept\n+                  _IsVector __is_vector, /*parallel=*/std::false_type) noexcept\n {\n-    return __internal::__brick_walk2_n(__first1, __n, __first2, __f, is_vector);\n+    return __internal::__brick_walk2_n(__first1, __n, __first2, __f, __is_vector);\n }\n \n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _Size, class _RandomAccessIterator2,\n@@ -307,7 +294,6 @@ __pattern_walk2_brick(_ExecutionPolicy&&, _ForwardIterator1 __first1, _ForwardIt\n     return __brick(__first1, __last1, __first2);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _Brick>\n _RandomAccessIterator2\n __pattern_walk2_brick(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1,\n@@ -322,9 +308,7 @@ __pattern_walk2_brick(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1\n         return __first2 + (__last1 - __first1);\n     });\n }\n-#endif\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _Size, class _RandomAccessIterator2, class _Brick>\n _RandomAccessIterator2\n __pattern_walk2_brick_n(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _Size __n,\n@@ -339,7 +323,6 @@ __pattern_walk2_brick_n(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __firs\n         return __first2 + __n;\n     });\n }\n-#endif\n \n template <class _ExecutionPolicy, class _ForwardIterator1, class _Size, class _ForwardIterator2, class _Brick>\n _ForwardIterator2\n@@ -381,7 +364,6 @@ __pattern_walk3(_ExecutionPolicy&&, _ForwardIterator1 __first1, _ForwardIterator\n     return __internal::__brick_walk3(__first1, __last1, __first2, __first3, __f, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2,\n           class _RandomAccessIterator3, class _Function, class _IsVector>\n _RandomAccessIterator3\n@@ -393,12 +375,12 @@ __pattern_walk3(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _Ran\n         __par_backend::__parallel_for(\n             std::forward<_ExecutionPolicy>(__exec), __first1, __last1,\n             [__f, __first1, __first2, __first3, __is_vector](_RandomAccessIterator1 __i, _RandomAccessIterator1 __j) {\n-                __internal::__brick_walk3(__i, __j, __first2 + (__i - __first1), __first3 + (__i - __first1), __f, __is_vector);\n+                __internal::__brick_walk3(__i, __j, __first2 + (__i - __first1), __first3 + (__i - __first1), __f,\n+                                          __is_vector);\n             });\n         return __first3 + (__last1 - __first1);\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // equal\n@@ -435,7 +417,6 @@ __pattern_equal(_ExecutionPolicy&&, _ForwardIterator1 __first1, _ForwardIterator\n     return __internal::__brick_equal(__first1, __last1, __first2, __last2, __p, __is_vector);\n }\n \n-#if _PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _BinaryPredicate,\n           class _IsVector>\n bool\n@@ -455,7 +436,6 @@ __pattern_equal(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _Ran\n             });\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // equal version for sequences with equal length\n@@ -487,7 +467,6 @@ __pattern_equal(_ExecutionPolicy&&, _ForwardIterator1 __first1, _ForwardIterator\n     return __internal::__brick_equal(__first1, __last1, __first2, __p, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _BinaryPredicate,\n           class _IsVector>\n bool\n@@ -503,7 +482,6 @@ __pattern_equal(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _Ran\n             });\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // find_if\n@@ -536,23 +514,22 @@ __pattern_find_if(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterator\n     return __internal::__brick_find_if(__first, __last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate, class _IsVector>\n _ForwardIterator\n __pattern_find_if(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred,\n                   _IsVector __is_vector,\n                   /*is_parallel=*/std::true_type)\n {\n     return __internal::__except_handler([&]() {\n-\t\t\treturn __internal::__parallel_find(std::forward<_ExecutionPolicy>(__exec), __first, __last,\n-                               [__pred, __is_vector](_ForwardIterator __i, _ForwardIterator __j) {\n-                                   return __internal::__brick_find_if(__i, __j, __pred, __is_vector);\n-                               },\n-                               std::less<typename std::iterator_traits<_ForwardIterator>::difference_type>(),\n-                               /*is_first=*/true);\n+        return __internal::__parallel_find(\n+            std::forward<_ExecutionPolicy>(__exec), __first, __last,\n+            [__pred, __is_vector](_ForwardIterator __i, _ForwardIterator __j) {\n+                return __internal::__brick_find_if(__i, __j, __pred, __is_vector);\n+            },\n+            std::less<typename std::iterator_traits<_ForwardIterator>::difference_type>(),\n+            /*is_first=*/true);\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // find_end\n@@ -584,8 +561,8 @@ __find_subrange(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _\n     while (__first != __last && (__global_last - __first >= __n2))\n     {\n         // find position of *s_first in [first, last) (it can be start of subsequence)\n-        __first = __internal::__brick_find_if(__first, __last,\n-                                  __equal_value_by_pred<_ValueType, _BinaryPredicate>(*__s_first, __pred), __is_vector);\n+        __first = __internal::__brick_find_if(\n+            __first, __last, __equal_value_by_pred<_ValueType, _BinaryPredicate>(*__s_first, __pred), __is_vector);\n \n         // if position that was found previously is the start of subsequence\n         // then we can exit the loop (b_first == true) or keep the position\n@@ -635,8 +612,8 @@ __find_subrange(_RandomAccessIterator __first, _RandomAccessIterator __last, _Ra\n \n         // check that all of elements in [first+1, first+count) equal to value\n         if (__first != __last && (__global_last - __first >= __count) &&\n-            !__internal::__brick_any_of(__first + 1, __first + __count, __not_pred<decltype(__unary_pred)>(__unary_pred),\n-                            __is_vector))\n+            !__internal::__brick_any_of(__first + 1, __first + __count,\n+                                        __not_pred<decltype(__unary_pred)>(__unary_pred), __is_vector))\n         {\n             return __first;\n         }\n@@ -678,7 +655,6 @@ __pattern_find_end(_ExecutionPolicy&&, _ForwardIterator1 __first, _ForwardIterat\n     return __internal::__brick_find_end(__first, __last, __s_first, __s_last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate,\n           class _IsVector>\n _ForwardIterator1\n@@ -688,23 +664,23 @@ __pattern_find_end(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _Forwar\n {\n     if (__last - __first == __s_last - __s_first)\n     {\n-        const bool __res = __internal::__pattern_equal(std::forward<_ExecutionPolicy>(__exec), __first, __last, __s_first, __pred,\n-                                           __is_vector, std::true_type());\n+        const bool __res = __internal::__pattern_equal(std::forward<_ExecutionPolicy>(__exec), __first, __last,\n+                                                       __s_first, __pred, __is_vector, std::true_type());\n         return __res ? __first : __last;\n     }\n     else\n     {\n         return __internal::__except_handler([&]() {\n-           return __internal::__parallel_find(\n+            return __internal::__parallel_find(\n                 std::forward<_ExecutionPolicy>(__exec), __first, __last,\n                 [__last, __s_first, __s_last, __pred, __is_vector](_ForwardIterator1 __i, _ForwardIterator1 __j) {\n-                    return __internal::__find_subrange(__i, __j, __last, __s_first, __s_last, __pred, false, __is_vector);\n+                    return __internal::__find_subrange(__i, __j, __last, __s_first, __s_last, __pred, false,\n+                                                       __is_vector);\n                 },\n                 std::greater<typename std::iterator_traits<_ForwardIterator1>::difference_type>(), /*is_first=*/false);\n         });\n     }\n }\n-#endif\n \n //------------------------------------------------------------------------\n // find_first_of\n@@ -735,7 +711,6 @@ __pattern_find_first_of(_ExecutionPolicy&&, _ForwardIterator1 __first, _ForwardI\n     return __internal::__brick_find_first_of(__first, __last, __s_first, __s_last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate,\n           class _IsVector>\n _ForwardIterator1\n@@ -744,15 +719,14 @@ __pattern_find_first_of(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _F\n                         _IsVector __is_vector, /*is_parallel=*/std::true_type) noexcept\n {\n     return __internal::__except_handler([&]() {\n-         return __internal::__parallel_find(\n+        return __internal::__parallel_find(\n             std::forward<_ExecutionPolicy>(__exec), __first, __last,\n             [__s_first, __s_last, __pred, __is_vector](_ForwardIterator1 __i, _ForwardIterator1 __j) {\n                 return __internal::__brick_find_first_of(__i, __j, __s_first, __s_last, __pred, __is_vector);\n             },\n             std::less<typename std::iterator_traits<_ForwardIterator1>::difference_type>(), /*is_first=*/true);\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // search\n@@ -783,7 +757,6 @@ __pattern_search(_ExecutionPolicy&&, _ForwardIterator1 __first, _ForwardIterator\n     return __internal::__brick_search(__first, __last, __s_first, __s_last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate,\n           class _IsVector>\n _ForwardIterator1\n@@ -794,8 +767,8 @@ __pattern_search(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardI\n {\n     if (__last - __first == __s_last - __s_first)\n     {\n-        const bool __res = __internal::__pattern_equal(std::forward<_ExecutionPolicy>(__exec), __first, __last, __s_first, __pred,\n-                                           __is_vector, std::true_type());\n+        const bool __res = __internal::__pattern_equal(std::forward<_ExecutionPolicy>(__exec), __first, __last,\n+                                                       __s_first, __pred, __is_vector, std::true_type());\n         return __res ? __first : __last;\n     }\n     else\n@@ -804,13 +777,13 @@ __pattern_search(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardI\n             return __internal::__parallel_find(\n                 std::forward<_ExecutionPolicy>(__exec), __first, __last,\n                 [__last, __s_first, __s_last, __pred, __is_vector](_ForwardIterator1 __i, _ForwardIterator1 __j) {\n-                    return __internal::__find_subrange(__i, __j, __last, __s_first, __s_last, __pred, true, __is_vector);\n+                    return __internal::__find_subrange(__i, __j, __last, __s_first, __s_last, __pred, true,\n+                                                       __is_vector);\n                 },\n                 std::less<typename std::iterator_traits<_ForwardIterator1>::difference_type>(), /*is_first=*/true);\n         });\n     }\n }\n-#endif\n \n //------------------------------------------------------------------------\n // search_n\n@@ -841,7 +814,6 @@ __pattern_search_n(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterato\n     return __internal::__brick_search_n(__first, __last, __count, __value, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Size, class _Tp, class _BinaryPredicate,\n           class _IsVector>\n _RandomAccessIterator\n@@ -851,10 +823,10 @@ __pattern_search_n(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _Ra\n {\n     if (__last - __first == __count)\n     {\n-        const bool __result =\n-            !__internal::__pattern_any_of(std::forward<_ExecutionPolicy>(__exec), __first, __last,\n-                              [&__value, &__pred](const _Tp& __val) { return !__pred(__val, __value); }, __is_vector,\n-                              /*is_parallel*/ std::true_type());\n+        const bool __result = !__internal::__pattern_any_of(\n+            std::forward<_ExecutionPolicy>(__exec), __first, __last,\n+            [&__value, &__pred](const _Tp& __val) { return !__pred(__val, __value); }, __is_vector,\n+            /*is_parallel*/ std::true_type());\n         return __result ? __first : __last;\n     }\n     else\n@@ -869,7 +841,6 @@ __pattern_search_n(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _Ra\n         });\n     }\n }\n-#endif\n \n //------------------------------------------------------------------------\n // copy_n\n@@ -969,7 +940,7 @@ _OutputIterator\n __brick_copy_if(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryPredicate __pred,\n                 /*vector=*/std::true_type) noexcept\n {\n-#if (__PSTL_MONOTONIC_PRESENT)\n+#if (_PSTL_MONOTONIC_PRESENT)\n     return __unseq_backend::__simd_copy_if(__first, __last - __first, __result, __pred);\n #else\n     return std::copy_if(__first, __last, __result, __pred);\n@@ -1028,7 +999,7 @@ void\n __brick_copy_by_mask(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result,\n                      bool* __restrict __mask, _Assigner __assigner, /*vector=*/std::true_type) noexcept\n {\n-#if (__PSTL_MONOTONIC_PRESENT)\n+#if (_PSTL_MONOTONIC_PRESENT)\n     __unseq_backend::__simd_copy_by_mask(__first, __last - __first, __result, __mask, __assigner);\n #else\n     __internal::__brick_copy_by_mask(__first, __last, __result, __mask, __assigner, std::false_type());\n@@ -1060,7 +1031,7 @@ void\n __brick_partition_by_mask(_RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator1 __out_true,\n                           _OutputIterator2 __out_false, bool* __mask, /*vector=*/std::true_type) noexcept\n {\n-#if (__PSTL_MONOTONIC_PRESENT)\n+#if (_PSTL_MONOTONIC_PRESENT)\n     __unseq_backend::__simd_partition_by_mask(__first, __last - __first, __out_true, __out_false, __mask);\n #else\n     __internal::__brick_partition_by_mask(__first, __last, __out_true, __out_false, __mask, std::false_type());\n@@ -1075,7 +1046,6 @@ __pattern_copy_if(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterator\n     return __internal::__brick_copy_if(__first, __last, __result, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator, class _UnaryPredicate,\n           class _IsVector>\n _OutputIterator\n@@ -1093,15 +1063,15 @@ __pattern_copy_if(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _Ran\n             __par_backend::__parallel_strict_scan(\n                 std::forward<_ExecutionPolicy>(__exec), __n, _DifferenceType(0),\n                 [=](_DifferenceType __i, _DifferenceType __len) { // Reduce\n-                    return __internal::__brick_calc_mask_1<_DifferenceType>(__first + __i, __first + (__i + __len), __mask + __i,\n-                                                                __pred, __is_vector)\n+                    return __internal::__brick_calc_mask_1<_DifferenceType>(__first + __i, __first + (__i + __len),\n+                                                                            __mask + __i, __pred, __is_vector)\n                         .first;\n                 },\n                 std::plus<_DifferenceType>(),                                                // Combine\n                 [=](_DifferenceType __i, _DifferenceType __len, _DifferenceType __initial) { // Scan\n-                    __internal::__brick_copy_by_mask(__first + __i, __first + (__i + __len), __result + __initial, __mask + __i,\n-                                         [](_RandomAccessIterator __x, _OutputIterator __z) { *__z = *__x; },\n-                                         __is_vector);\n+                    __internal::__brick_copy_by_mask(\n+                        __first + __i, __first + (__i + __len), __result + __initial, __mask + __i,\n+                        [](_RandomAccessIterator __x, _OutputIterator __z) { *__z = *__x; }, __is_vector);\n                 },\n                 [&__m](_DifferenceType __total) { __m = __total; });\n             return __result + __m;\n@@ -1110,7 +1080,6 @@ __pattern_copy_if(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _Ran\n     // trivial sequence - use serial algorithm\n     return __internal::__brick_copy_if(__first, __last, __result, __pred, __is_vector);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // count\n@@ -1139,7 +1108,6 @@ __pattern_count(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterator _\n     return __internal::__brick_count(__first, __last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate, class _IsVector>\n typename std::iterator_traits<_ForwardIterator>::difference_type\n __pattern_count(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred,\n@@ -1155,7 +1123,6 @@ __pattern_count(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIte\n             std::plus<_SizeType>());\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // unique\n@@ -1174,7 +1141,7 @@ _ForwardIterator\n __brick_unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred,\n                /*is_vector=*/std::true_type) noexcept\n {\n-    __PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n+    _PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n     return std::unique(__first, __last, __pred);\n }\n \n@@ -1186,13 +1153,12 @@ __pattern_unique(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterator\n     return __internal::__brick_unique(__first, __last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n // That function is shared between two algorithms - remove_if (__pattern_remove_if) and unique (pattern unique). But a mask calculation is different.\n // So, a caller passes _CalcMask brick into remove_elements.\n template <class _ExecutionPolicy, class _ForwardIterator, class _CalcMask, class _IsVector>\n _ForwardIterator\n __remove_elements(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _CalcMask __calc_mask,\n-                _IsVector __is_vector)\n+                  _IsVector __is_vector)\n {\n     typedef typename std::iterator_traits<_ForwardIterator>::difference_type _DifferenceType;\n     typedef typename std::iterator_traits<_ForwardIterator>::value_type _Tp;\n@@ -1214,8 +1180,8 @@ __remove_elements(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardI\n                     return __local_min;\n                 }\n                 // find first iterator that should be removed\n-                bool* __result =\n-                    __internal::__brick_find_if(__mask + __i, __mask + __j, [](bool __val) { return !__val; }, __is_vector);\n+                bool* __result = __internal::__brick_find_if(__mask + __i, __mask + __j,\n+                                                             [](bool __val) { return !__val; }, __is_vector);\n                 if (__result - __mask == __j)\n                 {\n                     return __local_min;\n@@ -1242,16 +1208,18 @@ __remove_elements(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardI\n         __par_backend::__parallel_strict_scan(\n             std::forward<_ExecutionPolicy>(__exec), __n, _DifferenceType(0),\n             [__mask, __is_vector](_DifferenceType __i, _DifferenceType __len) {\n-                return __internal::__brick_count(__mask + __i, __mask + __i + __len, [](bool __val) { return __val; }, __is_vector);\n+                return __internal::__brick_count(__mask + __i, __mask + __i + __len, [](bool __val) { return __val; },\n+                                                 __is_vector);\n             },\n             std::plus<_DifferenceType>(),\n             [=](_DifferenceType __i, _DifferenceType __len, _DifferenceType __initial) {\n-                __internal::__brick_copy_by_mask(__first + __i, __first + __i + __len, __result + __initial, __mask + __i,\n-                                     [](_ForwardIterator __x, _Tp* __z) {\n-                                         __internal::__invoke_if_else(std::is_trivial<_Tp>(), [&]() { *__z = std::move(*__x); },\n-                                                          [&]() { ::new (std::addressof(*__z)) _Tp(std::move(*__x)); });\n-                                     },\n-                                     __is_vector);\n+                __internal::__brick_copy_by_mask(\n+                    __first + __i, __first + __i + __len, __result + __initial, __mask + __i,\n+                    [](_ForwardIterator __x, _Tp* __z) {\n+                        __internal::__invoke_if_else(std::is_trivial<_Tp>(), [&]() { *__z = std::move(*__x); },\n+                                                     [&]() { ::new (std::addressof(*__z)) _Tp(std::move(*__x)); });\n+                    },\n+                    __is_vector);\n             },\n             [&__m](_DifferenceType __total) { __m = __total; });\n \n@@ -1263,9 +1231,7 @@ __remove_elements(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardI\n         return __first + __m;\n     });\n }\n-#endif\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _BinaryPredicate, class _IsVector>\n _ForwardIterator\n __pattern_unique(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred,\n@@ -1285,13 +1251,12 @@ __pattern_unique(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIt\n     return __internal::__remove_elements(\n         std::forward<_ExecutionPolicy>(__exec), ++__first, __last,\n         [&__pred, __is_vector](bool* __b, bool* __e, _ForwardIterator __it) {\n-            __internal::__brick_walk3(__b, __e, __it - 1, __it,\n-                          [&__pred](bool& __x, _ReferenceType __y, _ReferenceType __z) { __x = !__pred(__y, __z); },\n-                          __is_vector);\n+            __internal::__brick_walk3(\n+                __b, __e, __it - 1, __it,\n+                [&__pred](bool& __x, _ReferenceType __y, _ReferenceType __z) { __x = !__pred(__y, __z); }, __is_vector);\n         },\n         __is_vector);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // unique_copy\n@@ -1310,7 +1275,7 @@ OutputIterator\n __brick_unique_copy(_RandomAccessIterator __first, _RandomAccessIterator __last, OutputIterator __result,\n                     _BinaryPredicate __pred, /*vector=*/std::true_type) noexcept\n {\n-#if (__PSTL_MONOTONIC_PRESENT)\n+#if (_PSTL_MONOTONIC_PRESENT)\n     return __unseq_backend::__simd_unique_copy(__first, __last - __first, __result, __pred);\n #else\n     return std::unique_copy(__first, __last, __result, __pred);\n@@ -1348,7 +1313,6 @@ __brick_calc_mask_2(_RandomAccessIterator __first, _RandomAccessIterator __last,\n     return __unseq_backend::__simd_calc_mask_2(__first, __last - __first, __mask, __pred);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator, class _BinaryPredicate,\n           class _IsVector>\n _OutputIterator\n@@ -1380,15 +1344,15 @@ __pattern_unique_copy(_ExecutionPolicy&& __exec, _RandomAccessIterator __first,\n                             ++__extra;\n                         }\n                         return __internal::__brick_calc_mask_2<_DifferenceType>(__first + __i, __first + (__i + __len),\n-                                                                    __mask + __i, __pred, __is_vector) +\n+                                                                                __mask + __i, __pred, __is_vector) +\n                                __extra;\n                     },\n                     std::plus<_DifferenceType>(),                                                // Combine\n                     [=](_DifferenceType __i, _DifferenceType __len, _DifferenceType __initial) { // Scan\n                         // Phase 2 is same as for __pattern_copy_if\n-                        __internal::__brick_copy_by_mask(__first + __i, __first + (__i + __len), __result + __initial, __mask + __i,\n-                                             [](_RandomAccessIterator __x, _OutputIterator __z) { *__z = *__x; },\n-                                             __is_vector);\n+                        __internal::__brick_copy_by_mask(\n+                            __first + __i, __first + (__i + __len), __result + __initial, __mask + __i,\n+                            [](_RandomAccessIterator __x, _OutputIterator __z) { *__z = *__x; }, __is_vector);\n                     },\n                     [&__m](_DifferenceType __total) { __m = __total; });\n                 return __result + __m;\n@@ -1398,7 +1362,6 @@ __pattern_unique_copy(_ExecutionPolicy&& __exec, _RandomAccessIterator __first,\n     // trivial sequence - use serial algorithm\n     return __internal::__brick_unique_copy(__first, __last, __result, __pred, __is_vector);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // reverse\n@@ -1461,7 +1424,6 @@ __pattern_reverse(_ExecutionPolicy&&, _BidirectionalIterator __first, _Bidirecti\n     __internal::__brick_reverse(__first, __last, _is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _BidirectionalIterator, class _IsVector>\n void\n __pattern_reverse(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __last,\n@@ -1473,7 +1435,6 @@ __pattern_reverse(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _Bi\n             __internal::__brick_reverse(__inner_first, __inner_last, __last - (__inner_first - __first), __is_vector);\n         });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // reverse_copy\n@@ -1507,7 +1468,6 @@ __pattern_reverse_copy(_ExecutionPolicy&&, _BidirectionalIterator __first, _Bidi\n     return __internal::__brick_reverse_copy(__first, __last, __d_first, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _BidirectionalIterator, class _OutputIterator, class _IsVector>\n _OutputIterator\n __pattern_reverse_copy(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __last,\n@@ -1518,11 +1478,11 @@ __pattern_reverse_copy(_ExecutionPolicy&& __exec, _BidirectionalIterator __first\n                                   [__is_vector, __first, __len, __d_first](_BidirectionalIterator __inner_first,\n                                                                            _BidirectionalIterator __inner_last) {\n                                       __internal::__brick_reverse_copy(__inner_first, __inner_last,\n-                                                           __d_first + (__len - (__inner_last - __first)), __is_vector);\n+                                                                       __d_first + (__len - (__inner_last - __first)),\n+                                                                       __is_vector);\n                                   });\n     return __d_first + __len;\n }\n-#endif\n \n //------------------------------------------------------------------------\n // rotate\n@@ -1532,7 +1492,7 @@ _ForwardIterator\n __brick_rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last,\n                /*is_vector=*/std::false_type) noexcept\n {\n-#if __PSTL_CPP11_STD_ROTATE_BROKEN\n+#if _PSTL_CPP11_STD_ROTATE_BROKEN\n     std::rotate(__first, __middle, __last);\n     return std::next(__first, std::distance(__middle, __last));\n #else\n@@ -1589,7 +1549,6 @@ __pattern_rotate(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterator\n     return __internal::__brick_rotate(__first, __middle, __last, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _IsVector>\n _ForwardIterator\n __pattern_rotate(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __middle,\n@@ -1611,12 +1570,14 @@ __pattern_rotate(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIt\n \n             __par_backend::__parallel_for(std::forward<_ExecutionPolicy>(__exec), __first, __middle,\n                                           [__last, __middle, __is_vector](_ForwardIterator __b, _ForwardIterator __e) {\n-                                              __internal::__brick_move(__b, __e, __b + (__last - __middle), __is_vector);\n+                                              __internal::__brick_move(__b, __e, __b + (__last - __middle),\n+                                                                       __is_vector);\n                                           });\n \n             __par_backend::__parallel_for(std::forward<_ExecutionPolicy>(__exec), __result, __result + (__n - __m),\n                                           [__first, __result, __is_vector](_Tp* __b, _Tp* __e) {\n-                                              __internal::__brick_move(__b, __e, __first + (__b - __result), __is_vector);\n+                                              __internal::__brick_move(__b, __e, __first + (__b - __result),\n+                                                                       __is_vector);\n                                           });\n \n             return __first + (__last - __middle);\n@@ -1629,26 +1590,26 @@ __pattern_rotate(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIt\n             _Tp* __result = __buf.get();\n             __par_backend::__parallel_for(std::forward<_ExecutionPolicy>(__exec), __first, __middle,\n                                           [__first, __result, __is_vector](_ForwardIterator __b, _ForwardIterator __e) {\n-                                              __internal::__brick_uninitialized_move(__b, __e, __result + (__b - __first),\n-                                                                         __is_vector);\n+                                              __internal::__brick_uninitialized_move(\n+                                                  __b, __e, __result + (__b - __first), __is_vector);\n                                           });\n \n             __par_backend::__parallel_for(std::forward<_ExecutionPolicy>(__exec), __middle, __last,\n                                           [__first, __middle, __is_vector](_ForwardIterator __b, _ForwardIterator __e) {\n-                                              __internal::__brick_move(__b, __e, __first + (__b - __middle), __is_vector);\n+                                              __internal::__brick_move(__b, __e, __first + (__b - __middle),\n+                                                                       __is_vector);\n                                           });\n \n             __par_backend::__parallel_for(std::forward<_ExecutionPolicy>(__exec), __result, __result + __m,\n                                           [__n, __m, __first, __result, __is_vector](_Tp* __b, _Tp* __e) {\n-                                              __internal::__brick_move(__b, __e, __first + ((__n - __m) + (__b - __result)),\n-                                                           __is_vector);\n+                                              __internal::__brick_move(\n+                                                  __b, __e, __first + ((__n - __m) + (__b - __result)), __is_vector);\n                                           });\n \n             return __first + (__last - __middle);\n         });\n     }\n }\n-#endif\n \n //------------------------------------------------------------------------\n // rotate_copy\n@@ -1679,7 +1640,6 @@ __pattern_rotate_copy(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIter\n     return __internal::__brick_rotate_copy(__first, __middle, __last, __result, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _OutputIterator, class _IsVector>\n _OutputIterator\n __pattern_rotate_copy(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __middle,\n@@ -1709,7 +1669,6 @@ __pattern_rotate_copy(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Forw\n         });\n     return __result + (__last - __first);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // is_partitioned\n@@ -1758,7 +1717,6 @@ __pattern_is_partitioned(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardI\n     return __internal::__brick_is_partitioned(__first, __last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate, class _IsVector>\n bool\n __pattern_is_partitioned(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last,\n@@ -1855,7 +1813,6 @@ __pattern_is_partitioned(_ExecutionPolicy&& __exec, _ForwardIterator __first, _F\n         });\n     }\n }\n-#endif\n \n //------------------------------------------------------------------------\n // partition\n@@ -1874,7 +1831,7 @@ _ForwardIterator\n __brick_partition(_ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred,\n                   /*is_vector=*/std::true_type) noexcept\n {\n-    __PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n+    _PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n     return std::partition(__first, __last, __pred);\n }\n \n@@ -1886,7 +1843,6 @@ __pattern_partition(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterat\n     return __internal::__brick_partition(__first, __last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate, class _IsVector>\n _ForwardIterator\n __pattern_partition(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last,\n@@ -1923,7 +1879,8 @@ __pattern_partition(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Forwar\n                 __par_backend::__parallel_for(\n                     std::forward<_ExecutionPolicy>(__exec), __val1.__pivot, __val1.__pivot + __size1,\n                     [__val1, __val2, __size1, __is_vector](_ForwardIterator __i, _ForwardIterator __j) {\n-                        __internal::__brick_swap_ranges(__i, __j, (__val2.__pivot - __size1) + (__i - __val1.__pivot), __is_vector);\n+                        __internal::__brick_swap_ranges(__i, __j, (__val2.__pivot - __size1) + (__i - __val1.__pivot),\n+                                                        __is_vector);\n                     });\n                 return {__new_begin, __val2.__pivot - __size1, __val2.__end};\n             }\n@@ -1953,7 +1910,6 @@ __pattern_partition(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Forwar\n         return __result.__pivot;\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // stable_partition\n@@ -1972,7 +1928,7 @@ _BidirectionalIterator\n __brick_stable_partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _UnaryPredicate __pred,\n                          /*__is_vector=*/std::true_type) noexcept\n {\n-    __PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n+    _PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n     return std::stable_partition(__first, __last, __pred);\n }\n \n@@ -1985,7 +1941,6 @@ __pattern_stable_partition(_ExecutionPolicy&&, _BidirectionalIterator __first, _\n     return __internal::__brick_stable_partition(__first, __last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _BidirectionalIterator, class _UnaryPredicate, class _IsVector>\n _BidirectionalIterator\n __pattern_stable_partition(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __last,\n@@ -2037,7 +1992,6 @@ __pattern_stable_partition(_ExecutionPolicy&& __exec, _BidirectionalIterator __f\n         return __result.__pivot;\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // partition_copy\n@@ -2056,7 +2010,7 @@ std::pair<_OutputIterator1, _OutputIterator2>\n __brick_partition_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator1 __out_true,\n                        _OutputIterator2 __out_false, _UnaryPredicate __pred, /*is_vector=*/std::true_type) noexcept\n {\n-#if (__PSTL_MONOTONIC_PRESENT)\n+#if (_PSTL_MONOTONIC_PRESENT)\n     return __unseq_backend::__simd_partition_copy(__first, __last - __first, __out_true, __out_false, __pred);\n #else\n     return std::partition_copy(__first, __last, __out_true, __out_false, __pred);\n@@ -2073,7 +2027,6 @@ __pattern_partition_copy(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardI\n     return __internal::__brick_partition_copy(__first, __last, __out_true, __out_false, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator1, class _OutputIterator2,\n           class _UnaryPredicate, class _IsVector>\n std::pair<_OutputIterator1, _OutputIterator2>\n@@ -2087,21 +2040,23 @@ __pattern_partition_copy(_ExecutionPolicy&& __exec, _RandomAccessIterator __firs\n     if (_DifferenceType(1) < __n)\n     {\n         __par_backend::__buffer<bool> __mask_buf(__n);\n-        return __internal::__except_handler([&__exec, __n, __first, __out_true, __out_false, __is_vector, __pred, &__mask_buf]() {\n+        return __internal::__except_handler([&__exec, __n, __first, __out_true, __out_false, __is_vector, __pred,\n+                                             &__mask_buf]() {\n             bool* __mask = __mask_buf.get();\n             _ReturnType __m{};\n             __par_backend::__parallel_strict_scan(\n                 std::forward<_ExecutionPolicy>(__exec), __n, std::make_pair(_DifferenceType(0), _DifferenceType(0)),\n                 [=](_DifferenceType __i, _DifferenceType __len) { // Reduce\n-                    return __internal::__brick_calc_mask_1<_DifferenceType>(__first + __i, __first + (__i + __len), __mask + __i,\n-                                                                __pred, __is_vector);\n+                    return __internal::__brick_calc_mask_1<_DifferenceType>(__first + __i, __first + (__i + __len),\n+                                                                            __mask + __i, __pred, __is_vector);\n                 },\n                 [](const _ReturnType& __x, const _ReturnType& __y) -> _ReturnType {\n                     return std::make_pair(__x.first + __y.first, __x.second + __y.second);\n                 },                                                                       // Combine\n                 [=](_DifferenceType __i, _DifferenceType __len, _ReturnType __initial) { // Scan\n-                    __internal::__brick_partition_by_mask(__first + __i, __first + (__i + __len), __out_true + __initial.first,\n-                                              __out_false + __initial.second, __mask + __i, __is_vector);\n+                    __internal::__brick_partition_by_mask(__first + __i, __first + (__i + __len),\n+                                                          __out_true + __initial.first, __out_false + __initial.second,\n+                                                          __mask + __i, __is_vector);\n                 },\n                 [&__m](_ReturnType __total) { __m = __total; });\n             return std::make_pair(__out_true + __m.first, __out_false + __m.second);\n@@ -2110,7 +2065,6 @@ __pattern_partition_copy(_ExecutionPolicy&& __exec, _RandomAccessIterator __firs\n     // trivial sequence - use serial algorithm\n     return __internal::__brick_partition_copy(__first, __last, __out_true, __out_false, __pred, __is_vector);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // sort\n@@ -2125,7 +2079,6 @@ __pattern_sort(_ExecutionPolicy&&, _RandomAccessIterator __first, _RandomAccessI\n     std::sort(__first, __last, __comp);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n void\n __pattern_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp,\n@@ -2138,7 +2091,6 @@ __pattern_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _Random\n                                               __last - __first);\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // stable_sort\n@@ -2152,7 +2104,6 @@ __pattern_stable_sort(_ExecutionPolicy&&, _RandomAccessIterator __first, _Random\n     std::stable_sort(__first, __last, __comp);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n void\n __pattern_stable_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last,\n@@ -2164,7 +2115,6 @@ __pattern_stable_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first,\n                                                  _Compare __comp) { std::stable_sort(__first, __last, __comp); });\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // partial_sort\n@@ -2179,7 +2129,6 @@ __pattern_partial_sort(_ExecutionPolicy&&, _RandomAccessIterator __first, _Rando\n     std::partial_sort(__first, __middle, __last, __comp);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n void\n __pattern_partial_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __middle,\n@@ -2198,7 +2147,6 @@ __pattern_partial_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first,\n             __n);\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // partial_sort_copy\n@@ -2213,7 +2161,6 @@ __pattern_partial_sort_copy(_ExecutionPolicy&&, _ForwardIterator __first, _Forwa\n     return std::partial_sort_copy(__first, __last, __d_first, __d_last, __comp);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _RandomAccessIterator, class _Compare, class _IsVector>\n _RandomAccessIterator\n __pattern_partial_sort_copy(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last,\n@@ -2237,11 +2184,11 @@ __pattern_partial_sort_copy(_ExecutionPolicy&& __exec, _ForwardIterator __first,\n                     _ForwardIterator __j1 = __first + (__j - __d_first);\n \n                 // 1. Copy elements from input to output\n-#if !__PSTL_ICC_18_OMP_SIMD_BROKEN\n+#    if !_PSTL_ICC_18_OMP_SIMD_BROKEN\n                     __internal::__brick_copy(__i1, __j1, __i, __is_vector);\n-#else\n+#    else\n                     std::copy(__i1, __j1, __i);\n-#endif\n+#    endif\n                     // 2. Sort elements in output sequence\n                     std::sort(__i, __j, __comp);\n                 },\n@@ -2282,7 +2229,6 @@ __pattern_partial_sort_copy(_ExecutionPolicy&& __exec, _ForwardIterator __first,\n         }\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // adjacent_find\n@@ -2311,7 +2257,6 @@ __pattern_adjacent_find(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIt\n     return __internal::__brick_adjacent_find(__first, __last, __pred, __is_vector, __or_semantic);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _BinaryPredicate, class _IsVector>\n _RandomAccessIterator\n __pattern_adjacent_find(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last,\n@@ -2357,7 +2302,6 @@ __pattern_adjacent_find(_ExecutionPolicy&& __exec, _RandomAccessIterator __first\n         );\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // nth_element\n@@ -2372,7 +2316,6 @@ __pattern_nth_element(_ExecutionPolicy&&, _RandomAccessIterator __first, _Random\n     std::nth_element(__first, __nth, __last, __comp);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n void\n __pattern_nth_element(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __nth,\n@@ -2390,8 +2333,9 @@ __pattern_nth_element(_ExecutionPolicy&& __exec, _RandomAccessIterator __first,\n     do\n     {\n         __x = __internal::__pattern_partition(std::forward<_ExecutionPolicy>(__exec), __first + 1, __last,\n-                                  [&__comp, __first](const _Tp& __x) { return __comp(__x, *__first); }, __is_vector,\n-                                  /*is_parallel=*/std::true_type());\n+                                              [&__comp, __first](const _Tp& __x) { return __comp(__x, *__first); },\n+                                              __is_vector,\n+                                              /*is_parallel=*/std::true_type());\n         --__x;\n         if (__x != __first)\n         {\n@@ -2418,7 +2362,6 @@ __pattern_nth_element(_ExecutionPolicy&& __exec, _RandomAccessIterator __first,\n         }\n     } while (__x != __nth);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // fill, fill_n\n@@ -2447,7 +2390,6 @@ __pattern_fill(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterator __\n     __internal::__brick_fill(__first, __last, __value, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Tp, class _IsVector>\n _ForwardIterator\n __pattern_fill(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value,\n@@ -2461,7 +2403,6 @@ __pattern_fill(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIter\n         return __last;\n     });\n }\n-#endif\n \n template <class _OutputIterator, class _Size, class _Tp>\n _OutputIterator\n@@ -2490,8 +2431,8 @@ _OutputIterator\n __pattern_fill_n(_ExecutionPolicy&& __exec, _OutputIterator __first, _Size __count, const _Tp& __value,\n                  /*is_parallel=*/std::true_type, _IsVector __is_vector)\n {\n-    return __internal::__pattern_fill(std::forward<_ExecutionPolicy>(__exec), __first, __first + __count, __value, std::true_type(),\n-                          __is_vector);\n+    return __internal::__pattern_fill(std::forward<_ExecutionPolicy>(__exec), __first, __first + __count, __value,\n+                                      std::true_type(), __is_vector);\n }\n \n //------------------------------------------------------------------------\n@@ -2521,7 +2462,6 @@ __pattern_generate(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterato\n     __internal::__brick_generate(__first, __last, __g, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Generator, class _IsVector>\n _ForwardIterator\n __pattern_generate(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Generator __g,\n@@ -2535,7 +2475,6 @@ __pattern_generate(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Forward\n         return __last;\n     });\n }\n-#endif\n \n template <class OutputIterator, class Size, class _Generator>\n OutputIterator\n@@ -2559,18 +2498,16 @@ __pattern_generate_n(_ExecutionPolicy&&, _OutputIterator __first, _Size __count,\n     return __internal::__brick_generate_n(__first, __count, __g, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _OutputIterator, class _Size, class _Generator, class _IsVector>\n _OutputIterator\n __pattern_generate_n(_ExecutionPolicy&& __exec, _OutputIterator __first, _Size __count, _Generator __g,\n                      /*is_parallel=*/std::true_type, _IsVector __is_vector)\n {\n     static_assert(__is_random_access_iterator<_OutputIterator>::value,\n                   \"Pattern-brick error. Should be a random access iterator.\");\n-    return __internal::__pattern_generate(std::forward<_ExecutionPolicy>(__exec), __first, __first + __count, __g, std::true_type(),\n-                              __is_vector);\n+    return __internal::__pattern_generate(std::forward<_ExecutionPolicy>(__exec), __first, __first + __count, __g,\n+                                          std::true_type(), __is_vector);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // remove\n@@ -2589,7 +2526,7 @@ _RandomAccessIterator\n __brick_remove_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _UnaryPredicate __pred,\n                   /* __is_vector = */ std::true_type) noexcept\n {\n-#if __PSTL_MONOTONIC_PRESENT\n+#if _PSTL_MONOTONIC_PRESENT\n     return __unseq_backend::__simd_remove_if(__first, __last - __first, __pred);\n #else\n     return std::remove_if(__first, __last, __pred);\n@@ -2604,7 +2541,6 @@ __pattern_remove_if(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIterat\n     return __internal::__brick_remove_if(__first, __last, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate, class _IsVector>\n _ForwardIterator\n __pattern_remove_if(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last,\n@@ -2618,15 +2554,14 @@ __pattern_remove_if(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Forwar\n         return __internal::__brick_remove_if(__first, __last, __pred, __is_vector);\n     }\n \n-    return __internal::__remove_elements(std::forward<_ExecutionPolicy>(__exec), __first, __last,\n-                           [&__pred, __is_vector](bool* __b, bool* __e, _ForwardIterator __it) {\n-                               __internal::__brick_walk2(__b, __e, __it,\n-                                             [&__pred](bool& __x, _ReferenceType __y) { __x = !__pred(__y); },\n-                                             __is_vector);\n-                           },\n-                           __is_vector);\n+    return __internal::__remove_elements(\n+        std::forward<_ExecutionPolicy>(__exec), __first, __last,\n+        [&__pred, __is_vector](bool* __b, bool* __e, _ForwardIterator __it) {\n+            __internal::__brick_walk2(__b, __e, __it, [&__pred](bool& __x, _ReferenceType __y) { __x = !__pred(__y); },\n+                                      __is_vector);\n+        },\n+        __is_vector);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // merge\n@@ -2647,7 +2582,7 @@ __brick_merge(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIte\n               _ForwardIterator2 __last2, _OutputIterator __d_first, _Compare __comp,\n               /* __is_vector = */ std::true_type) noexcept\n {\n-    __PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n+    _PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n     return std::merge(__first1, __last1, __first2, __last2, __d_first, __comp);\n }\n \n@@ -2661,7 +2596,6 @@ __pattern_merge(_ExecutionPolicy&&, _ForwardIterator1 __first1, _ForwardIterator\n     return __internal::__brick_merge(__first1, __last1, __first2, __last2, __d_first, __comp, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n@@ -2672,11 +2606,11 @@ __pattern_merge(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _Ran\n     __par_backend::__parallel_merge(\n         std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __last2, __d_first, __comp,\n         [__is_vector](_RandomAccessIterator1 __f1, _RandomAccessIterator1 __l1, _RandomAccessIterator2 __f2,\n-                      _RandomAccessIterator2 __l2, _OutputIterator __f3,\n-                      _Compare __comp) { return __internal::__brick_merge(__f1, __l1, __f2, __l2, __f3, __comp, __is_vector); });\n+                      _RandomAccessIterator2 __l2, _OutputIterator __f3, _Compare __comp) {\n+            return __internal::__brick_merge(__f1, __l1, __f2, __l2, __f3, __comp, __is_vector);\n+        });\n     return __d_first + (__last1 - __first1) + (__last2 - __first2);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // inplace_merge\n@@ -2694,7 +2628,7 @@ void\n __brick_inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last,\n                       _Compare __comp, /* __is_vector = */ std::true_type) noexcept\n {\n-    __PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\")\n+    _PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\")\n     std::inplace_merge(__first, __middle, __last, __comp);\n }\n \n@@ -2707,7 +2641,6 @@ __pattern_inplace_merge(_ExecutionPolicy&&, _BidirectionalIterator __first, _Bid\n     __internal::__brick_inplace_merge(__first, __middle, __last, __comp, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _BidirectionalIterator, class _Compare, class _IsVector>\n void\n __pattern_inplace_merge(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __middle,\n@@ -2724,8 +2657,8 @@ __pattern_inplace_merge(_ExecutionPolicy&& __exec, _BidirectionalIterator __firs\n     _Tp* __r = __buf.get();\n     __internal::__except_handler([&]() {\n         auto __move_values = [](_BidirectionalIterator __x, _Tp* __z) {\n-                                 __internal::__invoke_if_else(std::is_trivial<_Tp>(), [&]() { *__z = std::move(*__x); },\n-                                                              [&]() { ::new (std::addressof(*__z)) _Tp(std::move(*__x)); });\n+            __internal::__invoke_if_else(std::is_trivial<_Tp>(), [&]() { *__z = std::move(*__x); },\n+                                         [&]() { ::new (std::addressof(*__z)) _Tp(std::move(*__x)); });\n         };\n \n         auto __move_sequences = [](_BidirectionalIterator __first1, _BidirectionalIterator __last1, _Tp* __first2) {\n@@ -2749,7 +2682,6 @@ __pattern_inplace_merge(_ExecutionPolicy&& __exec, _BidirectionalIterator __firs\n                                       });\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // includes\n@@ -2764,7 +2696,6 @@ __pattern_includes(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _Forwa\n     return std::includes(__first1, __last1, __first2, __last2, __comp);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Compare, class _IsVector>\n bool\n __pattern_includes(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,\n@@ -2785,11 +2716,11 @@ __pattern_includes(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _Forwa\n         return !__comp(*__first1, *__first2) && !__comp(*__first2, *__first1);\n \n     return __internal::__except_handler([&]() {\n-         return !__internal::__parallel_or(\n+        return !__internal::__parallel_or(\n             std::forward<_ExecutionPolicy>(__exec), __first2, __last2,\n             [__first1, __last1, __first2, __last2, &__comp](_ForwardIterator2 __i, _ForwardIterator2 __j) {\n-                __PSTL_ASSERT(__j > __i);\n-                //__PSTL_ASSERT(__j - __i > 1);\n+                _PSTL_ASSERT(__j > __i);\n+                //assert(__j - __i > 1);\n \n                 //1. moving boundaries to \"consume\" subsequence of equal elements\n                 auto __is_equal = [&__comp](_ForwardIterator2 __a, _ForwardIterator2 __b) -> bool {\n@@ -2813,17 +2744,15 @@ __pattern_includes(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _Forwa\n                 //2. testing is __a subsequence of the second range included into the first range\n                 auto __b = std::lower_bound(__first1, __last1, *__i, __comp);\n \n-                __PSTL_ASSERT(!__comp(*(__last1 - 1), *__b));\n-                __PSTL_ASSERT(!__comp(*(__j - 1), *__i));\n+                _PSTL_ASSERT(!__comp(*(__last1 - 1), *__b));\n+                _PSTL_ASSERT(!__comp(*(__j - 1), *__i));\n                 return !std::includes(__b, __last1, __i, __j, __comp);\n             });\n     });\n }\n-#endif\n \n constexpr auto __set_algo_cut_off = 1000;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _IsVector, class _SizeFunction, class _SetOP>\n _OutputIterator\n@@ -2849,14 +2778,14 @@ __parallel_set_op(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _Forwar\n \n     __par_backend::__buffer<_T> __buf(__size_func(__n1, __n2));\n \n-    return __internal::__except_handler([&__exec, __n1, __first1, __last1, __first2, __last2, __result, __is_vector, __comp,\n-                             __size_func, __set_op, &__buf]() {\n+    return __internal::__except_handler([&__exec, __n1, __first1, __last1, __first2, __last2, __result, __is_vector,\n+                                         __comp, __size_func, __set_op, &__buf]() {\n         auto __buffer = __buf.get();\n         _DifferenceType __m{};\n         auto __scan = [=](_DifferenceType, _DifferenceType, const _SetRange& __s) { // Scan\n             if (!__s.empty())\n-                __internal::__brick_move(__buffer + __s.__buf_pos, __buffer + (__s.__buf_pos + __s.__len), __result + __s.__pos,\n-                             __is_vector);\n+                __internal::__brick_move(__buffer + __s.__buf_pos, __buffer + (__s.__buf_pos + __s.__len),\n+                                         __result + __s.__pos, __is_vector);\n         };\n         __par_backend::__parallel_strict_scan(\n             std::forward<_ExecutionPolicy>(__exec), __n1, _SetRange{0, 0, 0}, //-1, 0},\n@@ -2912,55 +2841,53 @@ __parallel_set_op(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _Forwar\n         return __result + __m;\n     });\n }\n-#endif\n \n-#if __PSTL_USE_PAR_POLICIES\n //a shared parallel pattern for '__pattern_set_union' and '__pattern_set_symmetric_difference'\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _SetUnionOp, class _IsVector>\n _OutputIterator\n __parallel_set_union_op(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,\n-                      _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp,\n-                      _SetUnionOp __set_union_op, _IsVector __is_vector)\n+                        _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result,\n+                        _Compare __comp, _SetUnionOp __set_union_op, _IsVector __is_vector)\n {\n     typedef typename std::iterator_traits<_ForwardIterator1>::difference_type _DifferenceType;\n \n     const auto __n1 = __last1 - __first1;\n     const auto __n2 = __last2 - __first2;\n \n-    auto copy_range1 = [__is_vector](_ForwardIterator1 __begin, _ForwardIterator1 __end, _OutputIterator __res) {\n+    auto __copy_range1 = [__is_vector](_ForwardIterator1 __begin, _ForwardIterator1 __end, _OutputIterator __res) {\n         return __internal::__brick_copy(__begin, __end, __res, __is_vector);\n     };\n-    auto copy_range2 = [__is_vector](_ForwardIterator2 __begin, _ForwardIterator2 __end, _OutputIterator __res) {\n+    auto __copy_range2 = [__is_vector](_ForwardIterator2 __begin, _ForwardIterator2 __end, _OutputIterator __res) {\n         return __internal::__brick_copy(__begin, __end, __res, __is_vector);\n     };\n \n     // {1} {}: parallel copying just first sequence\n     if (__n2 == 0)\n-        return __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __result, copy_range1,\n-                                     std::true_type());\n+        return __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __result,\n+                                                 __copy_range1, std::true_type());\n \n     // {} {2}: parallel copying justmake  second sequence\n     if (__n1 == 0)\n-        return __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first2, __last2, __result, copy_range2,\n-                                     std::true_type());\n+        return __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first2, __last2, __result,\n+                                                 __copy_range2, std::true_type());\n \n     // testing  whether the sequences are intersected\n     _ForwardIterator1 __left_bound_seq_1 = std::lower_bound(__first1, __last1, *__first2, __comp);\n \n     if (__left_bound_seq_1 == __last1)\n     {\n         //{1} < {2}: seq2 is wholly greater than seq1, so, do parallel copying seq1 and seq2\n-        __par_backend::__parallel_invoke(std::forward<_ExecutionPolicy>(__exec),\n-                                         [=] {\n-                                             __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first1,\n-                                                                   __last1, __result, copy_range1, std::true_type());\n-                                         },\n-                                         [=] {\n-                                             __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first2,\n-                                                                   __last2, __result + __n1, copy_range2,\n-                                                                   std::true_type());\n-                                         });\n+        __par_backend::__parallel_invoke(\n+            std::forward<_ExecutionPolicy>(__exec),\n+            [=] {\n+                __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __result,\n+                                                  __copy_range1, std::true_type());\n+            },\n+            [=] {\n+                __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first2, __last2,\n+                                                  __result + __n1, __copy_range2, std::true_type());\n+            });\n         return __result + __n1 + __n2;\n     }\n \n@@ -2970,16 +2897,16 @@ __parallel_set_union_op(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _\n     if (__left_bound_seq_2 == __last2)\n     {\n         //{2} < {1}: seq2 is wholly greater than seq1, so, do parallel copying seq1 and seq2\n-        __par_backend::__parallel_invoke(std::forward<_ExecutionPolicy>(__exec),\n-                                         [=] {\n-                                             __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first2,\n-                                                                   __last2, __result, copy_range2, std::true_type());\n-                                         },\n-                                         [=] {\n-                                             __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first1,\n-                                                                   __last1, __result + __n2, copy_range1,\n-                                                                   std::true_type());\n-                                         });\n+        __par_backend::__parallel_invoke(\n+            std::forward<_ExecutionPolicy>(__exec),\n+            [=] {\n+                __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first2, __last2, __result,\n+                                                  __copy_range2, std::true_type());\n+            },\n+            [=] {\n+                __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first1, __last1,\n+                                                  __result + __n2, __copy_range1, std::true_type());\n+            });\n         return __result + __n1 + __n2;\n     }\n \n@@ -2992,20 +2919,20 @@ __parallel_set_union_op(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _\n             std::forward<_ExecutionPolicy>(__exec),\n             //do parallel copying of [first1; left_bound_seq_1)\n             [=] {\n-                __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first1, __left_bound_seq_1, __res_or,\n-                                      copy_range1, std::true_type());\n+                __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first1, __left_bound_seq_1,\n+                                                  __res_or, __copy_range1, std::true_type());\n             },\n             [=, &__result] {\n-                __result = __internal::__parallel_set_op(std::forward<_ExecutionPolicy>(__exec), __left_bound_seq_1, __last1,\n-                                             __first2, __last2, __result, __comp,\n-                                             [](_DifferenceType __n, _DifferenceType __m) { return __n + __m; },\n-                                             __set_union_op, __is_vector);\n+                __result = __internal::__parallel_set_op(\n+                    std::forward<_ExecutionPolicy>(__exec), __left_bound_seq_1, __last1, __first2, __last2, __result,\n+                    __comp, [](_DifferenceType __n, _DifferenceType __m) { return __n + __m; }, __set_union_op,\n+                    __is_vector);\n             });\n         return __result;\n     }\n \n     const auto __m2 = __left_bound_seq_2 - __first2;\n-    __PSTL_ASSERT(__m1 == 0 || __m2 == 0);\n+    _PSTL_ASSERT(__m1 == 0 || __m2 == 0);\n     if (__m2 > __set_algo_cut_off)\n     {\n         auto __res_or = __result;\n@@ -3014,23 +2941,22 @@ __parallel_set_union_op(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _\n             std::forward<_ExecutionPolicy>(__exec),\n             //do parallel copying of [first2; left_bound_seq_2)\n             [=] {\n-                __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first2, __left_bound_seq_2, __res_or,\n-                                      copy_range2, std::true_type());\n+                __internal::__pattern_walk2_brick(std::forward<_ExecutionPolicy>(__exec), __first2, __left_bound_seq_2,\n+                                                  __res_or, __copy_range2, std::true_type());\n             },\n             [=, &__result] {\n-                __result = __internal::__parallel_set_op(std::forward<_ExecutionPolicy>(__exec), __first1, __last1,\n-                                             __left_bound_seq_2, __last2, __result, __comp,\n-                                             [](_DifferenceType __n, _DifferenceType __m) { return __n + __m; },\n-                                             __set_union_op, __is_vector);\n+                __result = __internal::__parallel_set_op(\n+                    std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __left_bound_seq_2, __last2, __result,\n+                    __comp, [](_DifferenceType __n, _DifferenceType __m) { return __n + __m; }, __set_union_op,\n+                    __is_vector);\n             });\n         return __result;\n     }\n \n-    return __internal::__parallel_set_op(std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __last2, __result,\n-                             __comp, [](_DifferenceType __n, _DifferenceType __m) { return __n + __m; }, __set_union_op,\n-                             __is_vector);\n+    return __internal::__parallel_set_op(\n+        std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __last2, __result, __comp,\n+        [](_DifferenceType __n, _DifferenceType __m) { return __n + __m; }, __set_union_op, __is_vector);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // set_union\n@@ -3051,7 +2977,7 @@ __brick_set_union(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _Forwar\n                   _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp,\n                   /*__is_vector=*/std::true_type) noexcept\n {\n-    __PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n+    _PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n     return std::set_union(__first1, __last1, __first2, __last2, __result, __comp);\n }\n \n@@ -3066,7 +2992,6 @@ __pattern_set_union(_ExecutionPolicy&&, _ForwardIterator1 __first1, _ForwardIter\n     return __internal::__brick_set_union(__first1, __last1, __first2, __last2, __result, __comp, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n@@ -3083,15 +3008,13 @@ __pattern_set_union(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _Forw\n         return std::set_union(__first1, __last1, __first2, __last2, __result, __comp);\n \n     typedef typename std::iterator_traits<_OutputIterator>::value_type _T;\n-    return __internal::__parallel_set_union_op(std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __last2, __result,\n-                                 __comp,\n-                                 [](_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,\n-                                    _ForwardIterator2 __last2, _T* __result, _Compare __comp) {\n-                                     return std::set_union(__first1, __last1, __first2, __last2, __result, __comp);\n-                                 },\n-                                 __is_vector);\n+    return __internal::__parallel_set_union_op(\n+        std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __last2, __result, __comp,\n+        [](_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n+           _T* __result,\n+           _Compare __comp) { return std::set_union(__first1, __last1, __first2, __last2, __result, __comp); },\n+        __is_vector);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // set_intersection\n@@ -3112,7 +3035,7 @@ __brick_set_intersection(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n                          _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp,\n                          /*__is_vector=*/std::true_type) noexcept\n {\n-    __PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n+    _PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n     return std::set_intersection(__first1, __last1, __first2, __last2, __result, __comp);\n }\n \n@@ -3126,7 +3049,6 @@ __pattern_set_intersection(_ExecutionPolicy&&, _ForwardIterator1 __first1, _Forw\n     return __internal::__brick_set_intersection(__first1, __last1, __first2, __last2, __result, __comp, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n@@ -3188,7 +3110,6 @@ __pattern_set_intersection(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1\n     // [left_bound_seq_1; last1) and [left_bound_seq_2; last2) - use serial algorithm\n     return std::set_intersection(__left_bound_seq_1, __last1, __left_bound_seq_2, __last2, __result, __comp);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // set_difference\n@@ -3209,7 +3130,7 @@ __brick_set_difference(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _F\n                        _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp,\n                        /*__is_vector=*/std::true_type) noexcept\n {\n-    __PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n+    _PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n     return std::set_difference(__first1, __last1, __first2, __last2, __result, __comp);\n }\n \n@@ -3223,7 +3144,6 @@ __pattern_set_difference(_ExecutionPolicy&&, _ForwardIterator1 __first1, _Forwar\n     return __internal::__brick_set_difference(__first1, __last1, __first2, __last2, __result, __comp, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n@@ -3273,18 +3193,17 @@ __pattern_set_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1,\n             std::true_type());\n \n     if (__n1 + __n2 > __set_algo_cut_off)\n-        return __internal::__parallel_set_op(std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __last2, __result,\n-                                 __comp, [](_DifferenceType __n, _DifferenceType __m) { return __n; },\n-                                 [](_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,\n-                                    _ForwardIterator2 __last2, _T* __result, _Compare __comp) {\n-                                     return std::set_difference(__first1, __last1, __first2, __last2, __result, __comp);\n-                                 },\n-                                 __is_vector);\n+        return __internal::__parallel_set_op(\n+            std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __last2, __result, __comp,\n+            [](_DifferenceType __n, _DifferenceType __m) { return __n; },\n+            [](_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,\n+               _ForwardIterator2 __last2, _T* __result,\n+               _Compare __comp) { return std::set_difference(__first1, __last1, __first2, __last2, __result, __comp); },\n+            __is_vector);\n \n     // use serial algorithm\n     return std::set_difference(__first1, __last1, __first2, __last2, __result, __comp);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // set_symmetric_difference\n@@ -3305,7 +3224,7 @@ __brick_set_symmetric_difference(_ForwardIterator1 __first1, _ForwardIterator1 _\n                                  _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp,\n                                  /*__is_vector=*/std::true_type) noexcept\n {\n-    __PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n+    _PSTL_PRAGMA_MESSAGE(\"Vectorized algorithm unimplemented, redirected to serial\");\n     return std::set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __comp);\n }\n \n@@ -3316,10 +3235,10 @@ __pattern_set_symmetric_difference(_ExecutionPolicy&&, _ForwardIterator1 __first\n                                    _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result,\n                                    _Compare __comp, _IsVector __is_vector, /*is_parallel=*/std::false_type) noexcept\n {\n-    return __internal::__brick_set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __comp, __is_vector);\n+    return __internal::__brick_set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __comp,\n+                                                        __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _OutputIterator,\n           class _Compare, class _IsVector>\n _OutputIterator\n@@ -3344,7 +3263,6 @@ __pattern_set_symmetric_difference(_ExecutionPolicy&& __exec, _ForwardIterator1\n         },\n         __is_vector);\n }\n-#endif\n \n //------------------------------------------------------------------------\n // is_heap_until\n@@ -3382,7 +3300,7 @@ __pattern_is_heap_until(_ExecutionPolicy&&, _RandomAccessIterator __first, _Rand\n template <class _RandomAccessIterator, class _DifferenceType, class _Compare>\n _RandomAccessIterator\n __is_heap_until_local(_RandomAccessIterator __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp,\n-                    /* __is_vector = */ std::false_type) noexcept\n+                      /* __is_vector = */ std::false_type) noexcept\n {\n     _DifferenceType __i = __begin;\n     for (; __i < __end; ++__i)\n@@ -3398,14 +3316,13 @@ __is_heap_until_local(_RandomAccessIterator __first, _DifferenceType __begin, _D\n template <class _RandomAccessIterator, class _DifferenceType, class _Compare>\n _RandomAccessIterator\n __is_heap_until_local(_RandomAccessIterator __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp,\n-                    /* __is_vector = */ std::true_type) noexcept\n+                      /* __is_vector = */ std::true_type) noexcept\n {\n     return __unseq_backend::__simd_first(\n         __first, __begin, __end,\n         [&__comp](_RandomAccessIterator __it, _DifferenceType __i) { return __comp(__it[(__i - 1) / 2], __it[__i]); });\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare, class _IsVector>\n _RandomAccessIterator\n __pattern_is_heap_until(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last,\n@@ -3423,7 +3340,6 @@ __pattern_is_heap_until(_ExecutionPolicy&& __exec, _RandomAccessIterator __first\n             std::less<typename std::iterator_traits<_RandomAccessIterator>::difference_type>(), /*is_first=*/true);\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // min_element\n@@ -3442,7 +3358,7 @@ _ForwardIterator\n __brick_min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp,\n                     /* __is_vector = */ std::true_type) noexcept\n {\n-#if __PSTL_UDR_PRESENT\n+#if _PSTL_UDR_PRESENT\n     return __unseq_backend::__simd_min_element(__first, __last - __first, __comp);\n #else\n     return std::min_element(__first, __last, __comp);\n@@ -3457,7 +3373,6 @@ __pattern_min_element(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardIter\n     return __internal::__brick_min_element(__first, __last, __comp, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <typename _ExecutionPolicy, typename _RandomAccessIterator, typename _Compare, typename _IsVector>\n _RandomAccessIterator\n __pattern_min_element(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last,\n@@ -3471,15 +3386,15 @@ __pattern_min_element(_ExecutionPolicy&& __exec, _RandomAccessIterator __first,\n             std::forward<_ExecutionPolicy>(__exec), __first + 1, __last, __first,\n             [=](_RandomAccessIterator __begin, _RandomAccessIterator __end,\n                 _RandomAccessIterator __init) -> _RandomAccessIterator {\n-                const _RandomAccessIterator subresult = __internal::__brick_min_element(__begin, __end, __comp, __is_vector);\n+                const _RandomAccessIterator subresult =\n+                    __internal::__brick_min_element(__begin, __end, __comp, __is_vector);\n                 return __internal::__cmp_iterators_by_values(__init, subresult, __comp);\n             },\n             [=](_RandomAccessIterator __it1, _RandomAccessIterator __it2) -> _RandomAccessIterator {\n                 return __internal::__cmp_iterators_by_values(__it1, __it2, __comp);\n             });\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // minmax_element\n@@ -3498,7 +3413,7 @@ std::pair<_ForwardIterator, _ForwardIterator>\n __brick_minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp,\n                        /* __is_vector = */ std::true_type) noexcept\n {\n-#if __PSTL_UDR_PRESENT\n+#if _PSTL_UDR_PRESENT\n     return __unseq_backend::__simd_minmax_element(__first, __last - __first, __comp);\n #else\n     return std::minmax_element(__first, __last, __comp);\n@@ -3513,7 +3428,6 @@ __pattern_minmax_element(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardI\n     return __internal::__brick_minmax_element(__first, __last, __comp, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <typename _ExecutionPolicy, typename _ForwardIterator, typename _Compare, typename _IsVector>\n std::pair<_ForwardIterator, _ForwardIterator>\n __pattern_minmax_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp,\n@@ -3529,9 +3443,9 @@ __pattern_minmax_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _F\n             std::forward<_ExecutionPolicy>(__exec), __first + 1, __last, std::make_pair(__first, __first),\n             [=](_ForwardIterator __begin, _ForwardIterator __end, _Result __init) -> _Result {\n                 const _Result __subresult = __internal::__brick_minmax_element(__begin, __end, __comp, __is_vector);\n-                return std::make_pair(\n-                    __internal::__cmp_iterators_by_values(__subresult.first, __init.first, __comp),\n-                    __internal::__cmp_iterators_by_values(__init.second, __subresult.second, __not_pred<_Compare>(__comp)));\n+                return std::make_pair(__internal::__cmp_iterators_by_values(__subresult.first, __init.first, __comp),\n+                                      __internal::__cmp_iterators_by_values(__init.second, __subresult.second,\n+                                                                            __not_pred<_Compare>(__comp)));\n             },\n             [=](_Result __p1, _Result __p2) -> _Result {\n                 return std::make_pair(\n@@ -3540,7 +3454,6 @@ __pattern_minmax_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _F\n             });\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // mismatch\n@@ -3550,7 +3463,7 @@ std::pair<_ForwardIterator1, _ForwardIterator2>\n __mismatch_serial(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,\n                   _ForwardIterator2 __last2, _BinaryPredicate __pred)\n {\n-#if __PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT\n+#if _PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT\n     return std::mismatch(__first1, __last1, __first2, __last2, __pred);\n #else\n     for (; __first1 != __last1 && __first2 != __last2 && __pred(*__first1, *__first2); ++__first1, ++__first2)\n@@ -3586,7 +3499,6 @@ __pattern_mismatch(_ExecutionPolicy&&, _ForwardIterator1 __first1, _ForwardItera\n     return __internal::__brick_mismatch(__first1, __last1, __first2, __last2, __pred, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _Predicate,\n           class _IsVector>\n std::pair<_RandomAccessIterator1, _RandomAccessIterator2>\n@@ -3599,15 +3511,14 @@ __pattern_mismatch(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _\n         auto __result = __internal::__parallel_find(\n             std::forward<_ExecutionPolicy>(__exec), __first1, __first1 + __n,\n             [__first1, __first2, __pred, __is_vector](_RandomAccessIterator1 __i, _RandomAccessIterator1 __j) {\n-                return __internal::__brick_mismatch(__i, __j, __first2 + (__i - __first1), __first2 + (__j - __first1), __pred,\n-                                        __is_vector)\n+                return __internal::__brick_mismatch(__i, __j, __first2 + (__i - __first1), __first2 + (__j - __first1),\n+                                                    __pred, __is_vector)\n                     .first;\n             },\n             std::less<typename std::iterator_traits<_RandomAccessIterator1>::difference_type>(), /*is_first=*/true);\n         return std::make_pair(__result, __first2 + (__result - __first1));\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // lexicographical_compare\n@@ -3667,7 +3578,6 @@ __pattern_lexicographical_compare(_ExecutionPolicy&&, _ForwardIterator1 __first1\n     return __internal::__brick_lexicographical_compare(__first1, __last1, __first2, __last2, __comp, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Compare, class _IsVector>\n bool\n __pattern_lexicographical_compare(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,\n@@ -3693,10 +3603,10 @@ __pattern_lexicographical_compare(_ExecutionPolicy&& __exec, _ForwardIterator1 _\n             std::forward<_ExecutionPolicy>(__exec), __first1, __first1 + __n,\n             [__first1, __first2, &__comp, __is_vector](_ForwardIterator1 __i, _ForwardIterator1 __j) {\n                 return __internal::__brick_mismatch(__i, __j, __first2 + (__i - __first1), __first2 + (__j - __first1),\n-                                        [&__comp](const _RefType1 __x, const _RefType2 __y) {\n-                                            return !__comp(__x, __y) && !__comp(__y, __x);\n-                                        },\n-                                        __is_vector)\n+                                                    [&__comp](const _RefType1 __x, const _RefType2 __y) {\n+                                                        return !__comp(__x, __y) && !__comp(__y, __x);\n+                                                    },\n+                                                    __is_vector)\n                     .first;\n             },\n             std::less<typename std::iterator_traits<_ForwardIterator1>::difference_type>(), /*is_first=*/true);\n@@ -3711,9 +3621,8 @@ __pattern_lexicographical_compare(_ExecutionPolicy&& __exec, _ForwardIterator1 _\n         }\n     }\n }\n-#endif\n \n } // namespace __internal\n } // namespace __pstl\n \n-#endif /* __PSTL_algorithm_impl_H */\n+#endif /* _PSTL_ALGORITHM_IMPL_H */"}, {"sha": "13b002931e8f97db262dcb6e774938b03c9253f6", "filename": "libstdc++-v3/include/pstl/execution_defs.h", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_defs.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_execution_policy_defs_H\n-#define __PSTL_execution_policy_defs_H\n+#ifndef _PSTL_EXECUTION_POLICY_DEFS_H\n+#define _PSTL_EXECUTION_POLICY_DEFS_H\n \n #include <type_traits>\n \n@@ -41,7 +41,6 @@ class sequenced_policy\n     }\n };\n \n-#if __PSTL_USE_PAR_POLICIES\n // 2.5, Parallel execution policy\n class parallel_policy\n {\n@@ -85,7 +84,6 @@ class parallel_unsequenced_policy\n         return std::true_type{};\n     }\n };\n-#endif\n \n class unsequenced_policy\n {\n@@ -110,10 +108,8 @@ class unsequenced_policy\n \n // 2.8, Execution policy objects\n constexpr sequenced_policy seq{};\n-#if __PSTL_USE_PAR_POLICIES\n constexpr parallel_policy par{};\n constexpr parallel_unsequenced_policy par_unseq{};\n-#endif\n constexpr unsequenced_policy unseq{};\n \n // 2.3, Execution policy type trait\n@@ -126,7 +122,6 @@ template <>\n struct is_execution_policy<__pstl::execution::sequenced_policy> : std::true_type\n {\n };\n-#if __PSTL_USE_PAR_POLICIES\n template <>\n struct is_execution_policy<__pstl::execution::parallel_policy> : std::true_type\n {\n@@ -135,13 +130,12 @@ template <>\n struct is_execution_policy<__pstl::execution::parallel_unsequenced_policy> : std::true_type\n {\n };\n-#endif\n template <>\n struct is_execution_policy<__pstl::execution::unsequenced_policy> : std::true_type\n {\n };\n \n-#if __PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT\n+#if _PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT\n template <class _Tp>\n constexpr bool is_execution_policy_v = __pstl::execution::is_execution_policy<_Tp>::value;\n #endif\n@@ -165,4 +159,4 @@ using __enable_if_execution_policy =\n \n } // namespace __pstl\n \n-#endif /* __PSTL_execution_policy_defs_H */\n+#endif /* _PSTL_EXECUTION_POLICY_DEFS_H */"}, {"sha": "d53fd6ffd327fe7416643074ec6394af375f9ead", "filename": "libstdc++-v3/include/pstl/execution_impl.h", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_impl.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_execution_impl_H\n-#define __PSTL_execution_impl_H\n+#ifndef _PSTL_EXECUTION_IMPL_H\n+#define _PSTL_EXECUTION_IMPL_H\n \n #include <iterator>\n #include <type_traits>\n@@ -54,8 +54,8 @@ __lazy_or(_Tp __a, std::false_type)\n template <typename _IteratorType, typename... _OtherIteratorTypes>\n struct __is_random_access_iterator\n {\n-    static constexpr bool value =\n-      __internal::__is_random_access_iterator<_IteratorType>::value && __internal::__is_random_access_iterator<_OtherIteratorTypes...>::value;\n+    static constexpr bool value = __internal::__is_random_access_iterator<_IteratorType>::value &&\n+                                  __internal::__is_random_access_iterator<_OtherIteratorTypes...>::value;\n     typedef std::integral_constant<bool, value> type;\n };\n \n@@ -87,7 +87,6 @@ struct __policy_traits<unsequenced_policy>\n     typedef std::true_type allow_vector;\n };\n \n-#if __PSTL_USE_PAR_POLICIES\n template <>\n struct __policy_traits<parallel_policy>\n {\n@@ -103,53 +102,60 @@ struct __policy_traits<parallel_unsequenced_policy>\n     typedef std::true_type allow_unsequenced;\n     typedef std::true_type allow_vector;\n };\n-#endif\n \n template <typename _ExecutionPolicy>\n-using __collector_t = typename __internal::__policy_traits<typename std::decay<_ExecutionPolicy>::type>::__collector_type;\n+using __collector_t =\n+    typename __internal::__policy_traits<typename std::decay<_ExecutionPolicy>::type>::__collector_type;\n \n template <typename _ExecutionPolicy>\n-using __allow_vector = typename __internal::__policy_traits<typename std::decay<_ExecutionPolicy>::type>::__allow_vector;\n+using __allow_vector =\n+    typename __internal::__policy_traits<typename std::decay<_ExecutionPolicy>::type>::__allow_vector;\n \n template <typename _ExecutionPolicy>\n-using __allow_unsequenced = typename __internal::__policy_traits<typename std::decay<_ExecutionPolicy>::type>::__allow_unsequenced;\n+using __allow_unsequenced =\n+    typename __internal::__policy_traits<typename std::decay<_ExecutionPolicy>::type>::__allow_unsequenced;\n \n template <typename _ExecutionPolicy>\n-using __allow_parallel = typename __internal::__policy_traits<typename std::decay<_ExecutionPolicy>::type>::__allow_parallel;\n+using __allow_parallel =\n+    typename __internal::__policy_traits<typename std::decay<_ExecutionPolicy>::type>::__allow_parallel;\n \n template <typename _ExecutionPolicy, typename... _IteratorTypes>\n auto\n __is_vectorization_preferred(_ExecutionPolicy&& __exec)\n-    -> decltype(__internal::__lazy_and(__exec.__allow_vector(), typename __internal::__is_random_access_iterator<_IteratorTypes...>::type()))\n+    -> decltype(__internal::__lazy_and(__exec.__allow_vector(),\n+                                       typename __internal::__is_random_access_iterator<_IteratorTypes...>::type()))\n {\n-    return __internal::__lazy_and(__exec.__allow_vector(), typename __internal::__is_random_access_iterator<_IteratorTypes...>::type());\n+    return __internal::__lazy_and(__exec.__allow_vector(),\n+                                  typename __internal::__is_random_access_iterator<_IteratorTypes...>::type());\n }\n \n template <typename _ExecutionPolicy, typename... _IteratorTypes>\n auto\n __is_parallelization_preferred(_ExecutionPolicy&& __exec)\n-    -> decltype(__internal::__lazy_and(__exec.__allow_parallel(), typename __internal::__is_random_access_iterator<_IteratorTypes...>::type()))\n+    -> decltype(__internal::__lazy_and(__exec.__allow_parallel(),\n+                                       typename __internal::__is_random_access_iterator<_IteratorTypes...>::type()))\n {\n-    return __internal::__lazy_and(__exec.__allow_parallel(), typename __internal::__is_random_access_iterator<_IteratorTypes...>::type());\n+    return __internal::__lazy_and(__exec.__allow_parallel(),\n+                                  typename __internal::__is_random_access_iterator<_IteratorTypes...>::type());\n }\n \n template <typename policy, typename... _IteratorTypes>\n struct __prefer_unsequenced_tag\n {\n-    static constexpr bool value =\n-        __internal::__allow_unsequenced<policy>::value && __internal::__is_random_access_iterator<_IteratorTypes...>::value;\n+    static constexpr bool value = __internal::__allow_unsequenced<policy>::value &&\n+                                  __internal::__is_random_access_iterator<_IteratorTypes...>::value;\n     typedef std::integral_constant<bool, value> type;\n };\n \n template <typename policy, typename... _IteratorTypes>\n struct __prefer_parallel_tag\n {\n-    static constexpr bool value =\n-        __internal::__allow_parallel<policy>::value && __internal::__is_random_access_iterator<_IteratorTypes...>::value;\n+    static constexpr bool value = __internal::__allow_parallel<policy>::value &&\n+                                  __internal::__is_random_access_iterator<_IteratorTypes...>::value;\n     typedef std::integral_constant<bool, value> type;\n };\n \n } // namespace __internal\n } // namespace __pstl\n \n-#endif /* __PSTL_execution_impl_H */\n+#endif /* _PSTL_EXECUTION_IMPL_H */"}, {"sha": "48bc56ae4019ffb80b709915711237a90a33a4cf", "filename": "libstdc++-v3/include/pstl/glue_algorithm_defs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_defs.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_glue_algorithm_defs_H\n-#define __PSTL_glue_algorithm_defs_H\n+#ifndef _PSTL_GLUE_ALGORITHM_DEFS_H\n+#define _PSTL_GLUE_ALGORITHM_DEFS_H\n \n #include <functional>\n \n@@ -548,4 +548,4 @@ lexicographical_compare(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _\n                         _ForwardIterator2 __first2, _ForwardIterator2 __last2);\n \n } // namespace std\n-#endif /* __PSTL_glue_algorithm_defs_H */\n+#endif /* _PSTL_GLUE_ALGORITHM_DEFS_H */"}, {"sha": "379de4033ec285e1ad7c15f725a3115ba5897de2", "filename": "libstdc++-v3/include/pstl/glue_algorithm_impl.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_impl.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_glue_algorithm_impl_H\n-#define __PSTL_glue_algorithm_impl_H\n+#ifndef _PSTL_GLUE_ALGORITHM_IMPL_H\n+#define _PSTL_GLUE_ALGORITHM_IMPL_H\n \n #include <functional>\n \n@@ -745,11 +745,11 @@ __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>\n equal(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,\n       _ForwardIterator2 __last2, _BinaryPredicate __p)\n {\n-    //TODO: to get rid of \"distance\"\n-    if (std::distance(__first1, __last1) == std::distance(__first2, __last2))\n-        return std::equal(__first1, __last1, __first2, __p);\n-    else\n-        return false;\n+    using namespace __pstl;\n+    return __internal::__pattern_equal(\n+        std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __last2, __p,\n+        __internal::__is_vectorization_preferred<_ExecutionPolicy, _ForwardIterator1>(__exec),\n+        __internal::__is_parallelization_preferred<_ExecutionPolicy, _ForwardIterator1>(__exec));\n }\n \n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>\n@@ -1179,4 +1179,4 @@ lexicographical_compare(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _\n \n } // namespace std\n \n-#endif /* __PSTL_glue_algorithm_impl_H */\n+#endif /* _PSTL_GLUE_ALGORITHM_IMPL_H */"}, {"sha": "24ede331ac186deee7d61b3594f5b992af379e43", "filename": "libstdc++-v3/include/pstl/glue_execution_defs.h", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_execution_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_execution_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_execution_defs.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_glue_execution_defs_H\n-#define __PSTL_glue_execution_defs_H\n+#ifndef _PSTL_GLUE_EXECUTION_DEFS_H\n+#define _PSTL_GLUE_EXECUTION_DEFS_H\n \n #include <type_traits>\n \n@@ -18,29 +18,27 @@ namespace std\n {\n // Type trait\n using __pstl::execution::is_execution_policy;\n-#if __PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT\n-#if __INTEL_COMPILER\n+#if _PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT\n+#    if __INTEL_COMPILER\n template <class T>\n constexpr bool is_execution_policy_v = is_execution_policy<T>::value;\n-#else\n+#    else\n using __pstl::execution::is_execution_policy_v;\n-#endif\n+#    endif\n #endif\n \n namespace execution\n {\n // Standard C++ policy classes\n-using __pstl::execution::sequenced_policy;\n-#if __PSTL_USE_PAR_POLICIES\n using __pstl::execution::parallel_policy;\n using __pstl::execution::parallel_unsequenced_policy;\n-#endif\n+using __pstl::execution::sequenced_policy;\n+\n // Standard predefined policy instances\n-using __pstl::execution::seq;\n-#if __PSTL_USE_PAR_POLICIES\n using __pstl::execution::par;\n using __pstl::execution::par_unseq;\n-#endif\n+using __pstl::execution::seq;\n+\n // Implementation-defined names\n // Unsequenced policy is not yet standard, but for consistency\n // we include it into namespace std::execution as well\n@@ -53,4 +51,4 @@ using __pstl::execution::unsequenced_policy;\n #include \"numeric_impl.h\"\n #include \"parallel_backend.h\"\n \n-#endif /* __PSTL_glue_execution_defs_H */\n+#endif /* _PSTL_GLUE_EXECUTION_DEFS_H */"}, {"sha": "6729319a51b60b2434477ebd4bb78ca987cf0fad", "filename": "libstdc++-v3/include/pstl/glue_memory_defs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_memory_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_memory_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_memory_defs.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_glue_memory_defs_H\n-#define __PSTL_glue_memory_defs_H\n+#ifndef _PSTL_GLUE_MEMORY_DEFS_H\n+#define _PSTL_GLUE_MEMORY_DEFS_H\n \n #include \"execution_defs.h\"\n \n@@ -76,4 +76,4 @@ __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardItera\n uninitialized_value_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);\n \n } //  namespace std\n-#endif /* __PSTL_glue_memory_defs_H */\n+#endif /* _PSTL_GLUE_MEMORY_DEFS_H */"}, {"sha": "52ae75f5055c0b82428c9a01aa49efd23230efa3", "filename": "libstdc++-v3/include/pstl/glue_memory_impl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_memory_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_memory_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_memory_impl.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_glue_memory_impl_H\n-#define __PSTL_glue_memory_impl_H\n+#ifndef _PSTL_GLUE_MEMORY_IMPL_H\n+#define _PSTL_GLUE_MEMORY_IMPL_H\n \n #include \"utils.h\"\n #include \"algorithm_fwd.h\"\n@@ -355,4 +355,4 @@ uninitialized_value_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __fi\n \n } // namespace std\n \n-#endif /* __PSTL_glue_memory_imple_H */\n+#endif /* _PSTL_GLUE_MEMORY_IMPL_H */"}, {"sha": "cc5a94e801ab1536f7e475cc6836bd75f653f84b", "filename": "libstdc++-v3/include/pstl/glue_numeric_defs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_numeric_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_numeric_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_numeric_defs.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_glue_numeric_defs_H\n-#define __PSTL_glue_numeric_defs_H\n+#ifndef _PSTL_GLUE_NUMERIC_DEFS_H\n+#define _PSTL_GLUE_NUMERIC_DEFS_H\n \n #include \"execution_defs.h\"\n \n@@ -113,4 +113,4 @@ adjacent_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _Forwa\n                     _ForwardIterator2 __d_first);\n \n } // namespace std\n-#endif /* __PSTL_glue_numeric_defs_H */\n+#endif /* _PSTL_GLUE_NUMERIC_DEFS_H */"}, {"sha": "b1786fd387e8a6520c624b1b2ec95f2591c249a6", "filename": "libstdc++-v3/include/pstl/glue_numeric_impl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_numeric_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_numeric_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_numeric_impl.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_glue_numeric_impl_H\n-#define __PSTL_glue_numeric_impl_H\n+#ifndef _PSTL_GLUE_NUMERIC_IMPL_H\n+#define _PSTL_GLUE_NUMERIC_IMPL_H\n \n #include <functional>\n \n@@ -221,4 +221,4 @@ adjacent_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _Forwa\n \n } // namespace std\n \n-#endif /* __PSTL_glue_numeric_impl_H_ */\n+#endif /* _PSTL_GLUE_NUMERIC_IMPL_H_ */"}, {"sha": "d96f021b5efb146b6ab009fd6758a6c0ae8480e3", "filename": "libstdc++-v3/include/pstl/memory_impl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fmemory_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fmemory_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fmemory_impl.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_memory_impl_H\n-#define __PSTL_memory_impl_H\n+#ifndef _PSTL_MEMORY_IMPL_H\n+#define _PSTL_MEMORY_IMPL_H\n \n #include <iterator>\n \n@@ -53,4 +53,4 @@ __brick_uninitialized_move(_ForwardIterator __first, _ForwardIterator __last, _O\n } // namespace __internal\n } // namespace __pstl\n \n-#endif /* __PSTL_memory_impl_H */\n+#endif /* _PSTL_MEMORY_IMPL_H */"}, {"sha": "d92cacb764477a9cb8448208411b414801290114", "filename": "libstdc++-v3/include/pstl/numeric_fwd.h", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_fwd.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_numeric_fwd_H\n-#define __PSTL_numeric_fwd_H\n+#ifndef _PSTL_NUMERIC_FWD_H\n+#define _PSTL_NUMERIC_FWD_H\n \n #include <type_traits>\n #include <utility>\n@@ -39,14 +39,12 @@ __pattern_transform_reduce(_ExecutionPolicy&&, _ForwardIterator1, _ForwardIterat\n                            _BinaryOperation1, _BinaryOperation2, _IsVector,\n                            /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _Tp,\n           class _BinaryOperation1, class _BinaryOperation2, class _IsVector>\n _Tp\n __pattern_transform_reduce(_ExecutionPolicy&&, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2,\n                            _Tp, _BinaryOperation1, _BinaryOperation2, _IsVector __is_vector,\n                            /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // transform_reduce (version with unary and binary functions)\n@@ -67,14 +65,12 @@ __pattern_transform_reduce(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterato\n                            _UnaryOperation, _IsVector,\n                            /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Tp, class _BinaryOperation, class _UnaryOperation,\n           class _IsVector>\n _Tp\n __pattern_transform_reduce(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Tp, _BinaryOperation,\n                            _UnaryOperation, _IsVector,\n                            /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // transform_exclusive_scan\n@@ -99,21 +95,17 @@ __pattern_transform_scan(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator,\n                          _BinaryOperation, _Inclusive, _IsVector,\n                          /*is_parallel=*/std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator, class _UnaryOperation, class _Tp,\n           class _BinaryOperation, class _Inclusive, class _IsVector>\n typename std::enable_if<!std::is_floating_point<_Tp>::value, _OutputIterator>::type\n __pattern_transform_scan(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator,\n                          _UnaryOperation, _Tp, _BinaryOperation, _Inclusive, _IsVector, /*is_parallel=*/std::true_type);\n-#endif\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator, class _UnaryOperation, class _Tp,\n           class _BinaryOperation, class _Inclusive, class _IsVector>\n typename std::enable_if<std::is_floating_point<_Tp>::value, _OutputIterator>::type\n __pattern_transform_scan(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator,\n                          _UnaryOperation, _Tp, _BinaryOperation, _Inclusive, _IsVector, /*is_parallel=*/std::true_type);\n-#endif\n \n //------------------------------------------------------------------------\n // adjacent_difference\n@@ -133,14 +125,12 @@ _OutputIterator\n __pattern_adjacent_difference(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryOperation,\n                               _IsVector, /*is_parallel*/ std::false_type) noexcept;\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _OutputIterator, class _BinaryOperation,\n           class _IsVector>\n _OutputIterator\n __pattern_adjacent_difference(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryOperation,\n                               _IsVector, /*is_parallel*/ std::true_type);\n-#endif\n \n } // namespace __internal\n } // namespace __pstl\n-#endif /* __PSTL_numeric_fwd_H */\n+#endif /* _PSTL_NUMERIC_FWD_H */"}, {"sha": "c5760b0f92eac240a275969756326378e18a4a8d", "filename": "libstdc++-v3/include/pstl/numeric_impl.h", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,21 +7,19 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_numeric_impl_H\n-#define __PSTL_numeric_impl_H\n+#ifndef _PSTL_NUMERIC_IMPL_H\n+#define _PSTL_NUMERIC_IMPL_H\n \n #include <iterator>\n #include <type_traits>\n #include <numeric>\n \n+#include \"parallel_backend.h\"\n+#include \"pstl_config.h\"\n #include \"execution_impl.h\"\n #include \"unseq_backend_simd.h\"\n #include \"algorithm_fwd.h\"\n \n-#if __PSTL_USE_PAR_POLICIES\n-#include \"parallel_backend.h\"\n-#endif\n-\n namespace __pstl\n {\n namespace __internal\n@@ -63,7 +61,6 @@ __pattern_transform_reduce(_ExecutionPolicy&&, _ForwardIterator1 __first1, _Forw\n     return __brick_transform_reduce(__first1, __last1, __first2, __init, __binary_op1, __binary_op2, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _Tp,\n           class _BinaryOperation1, class _BinaryOperation2, class _IsVector>\n _Tp\n@@ -82,11 +79,10 @@ __pattern_transform_reduce(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __f\n             [__first1, __first2, __binary_op1, __binary_op2,\n              __is_vector](_RandomAccessIterator1 __i, _RandomAccessIterator1 __j, _Tp __init) -> _Tp {\n                 return __internal::__brick_transform_reduce(__i, __j, __first2 + (__i - __first1), __init, __binary_op1,\n-                                                __binary_op2, __is_vector);\n+                                                            __binary_op2, __is_vector);\n             });\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // transform_reduce (version with unary and binary functions)\n@@ -125,7 +121,6 @@ __pattern_transform_reduce(_ExecutionPolicy&&, _ForwardIterator __first, _Forwar\n     return __internal::__brick_transform_reduce(__first, __last, __init, __binary_op, __unary_op, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator, class _Tp, class _BinaryOperation, class _UnaryOperation,\n           class _IsVector>\n _Tp\n@@ -142,7 +137,6 @@ __pattern_transform_reduce(_ExecutionPolicy&& __exec, _ForwardIterator __first,\n             });\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // transform_exclusive_scan\n@@ -160,7 +154,7 @@ __brick_transform_scan(_ForwardIterator __first, _ForwardIterator __last, _Outpu\n     for (; __first != __last; ++__first, ++__result)\n     {\n         *__result = __init;\n-        __PSTL_PRAGMA_FORCEINLINE\n+        _PSTL_PRAGMA_FORCEINLINE\n         __init = __binary_op(__init, __unary_op(*__first));\n     }\n     return std::make_pair(__result, __init);\n@@ -175,7 +169,7 @@ __brick_transform_scan(_ForwardIterator __first, _ForwardIterator __last, _Outpu\n {\n     for (; __first != __last; ++__first, ++__result)\n     {\n-        __PSTL_PRAGMA_FORCEINLINE\n+        _PSTL_PRAGMA_FORCEINLINE\n         __init = __binary_op(__init, __unary_op(*__first));\n         *__result = __init;\n     }\n@@ -196,13 +190,13 @@ __brick_transform_scan(_ForwardIterator __first, _ForwardIterator __last, _Outpu\n                        _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, _Inclusive,\n                        /*is_vector=*/std::true_type) noexcept\n {\n-#if (__PSTL_UDS_PRESENT)\n+#if (_PSTL_UDS_PRESENT)\n     return __unseq_backend::__simd_scan(__first, __last - __first, __result, __unary_op, __init, __binary_op,\n                                         _Inclusive());\n #else\n     // We need to call serial brick here to call function for inclusive and exclusive scan that depends on _Inclusive() value\n     return __internal::__brick_transform_scan(__first, __last, __result, __unary_op, __init, __binary_op, _Inclusive(),\n-                                  /*is_vector=*/std::false_type());\n+                                              /*is_vector=*/std::false_type());\n #endif\n }\n \n@@ -214,7 +208,7 @@ __brick_transform_scan(_ForwardIterator __first, _ForwardIterator __last, _Outpu\n                        /*is_vector=*/std::true_type) noexcept\n {\n     return __internal::__brick_transform_scan(__first, __last, __result, __unary_op, __init, __binary_op, _Inclusive(),\n-                                  /*is_vector=*/std::false_type());\n+                                              /*is_vector=*/std::false_type());\n }\n \n template <class _ExecutionPolicy, class _ForwardIterator, class _OutputIterator, class _UnaryOperation, class _Tp,\n@@ -224,11 +218,11 @@ __pattern_transform_scan(_ExecutionPolicy&&, _ForwardIterator __first, _ForwardI\n                          _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op,\n                          _Inclusive, _IsVector __is_vector, /*is_parallel=*/std::false_type) noexcept\n {\n-    return __internal::__brick_transform_scan(__first, __last, __result, __unary_op, __init, __binary_op, _Inclusive(), __is_vector)\n+    return __internal::__brick_transform_scan(__first, __last, __result, __unary_op, __init, __binary_op, _Inclusive(),\n+                                              __is_vector)\n         .first;\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator, class _UnaryOperation, class _Tp,\n           class _BinaryOperation, class _Inclusive, class _IsVector>\n typename std::enable_if<!std::is_floating_point<_Tp>::value, _OutputIterator>::type\n@@ -245,21 +239,20 @@ __pattern_transform_scan(_ExecutionPolicy&& __exec, _RandomAccessIterator __firs\n             __binary_op,\n             [__first, __unary_op, __binary_op](_DifferenceType __i, _DifferenceType __j, _Tp __init) {\n                 // Execute serial __brick_transform_reduce, due to the explicit SIMD vectorization (reduction) requires a commutative operation for the guarantee of correct scan.\n-                return __internal::__brick_transform_reduce(__first + __i, __first + __j, __init, __binary_op, __unary_op,\n-                                                /*__is_vector*/ std::false_type());\n+                return __internal::__brick_transform_reduce(__first + __i, __first + __j, __init, __binary_op,\n+                                                            __unary_op,\n+                                                            /*__is_vector*/ std::false_type());\n             },\n             [__first, __unary_op, __binary_op, __result, __is_vector](_DifferenceType __i, _DifferenceType __j,\n                                                                       _Tp __init) {\n-                return __internal::__brick_transform_scan(__first + __i, __first + __j, __result + __i, __unary_op, __init,\n-                                              __binary_op, _Inclusive(), __is_vector)\n+                return __internal::__brick_transform_scan(__first + __i, __first + __j, __result + __i, __unary_op,\n+                                                          __init, __binary_op, _Inclusive(), __is_vector)\n                     .second;\n             });\n         return __result + (__last - __first);\n     });\n }\n-#endif\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _RandomAccessIterator, class _OutputIterator, class _UnaryOperation, class _Tp,\n           class _BinaryOperation, class _Inclusive, class _IsVector>\n typename std::enable_if<std::is_floating_point<_Tp>::value, _OutputIterator>::type\n@@ -278,15 +271,15 @@ __pattern_transform_scan(_ExecutionPolicy&& __exec, _RandomAccessIterator __firs\n         __par_backend::__parallel_strict_scan(\n             std::forward<_ExecutionPolicy>(__exec), __n, __init,\n             [__first, __unary_op, __binary_op, __result, __is_vector](_DifferenceType __i, _DifferenceType __len) {\n-                return __internal::__brick_transform_scan(__first + __i, __first + (__i + __len), __result + __i, __unary_op, _Tp{},\n-                                              __binary_op, _Inclusive(), __is_vector)\n+                return __internal::__brick_transform_scan(__first + __i, __first + (__i + __len), __result + __i,\n+                                                          __unary_op, _Tp{}, __binary_op, _Inclusive(), __is_vector)\n                     .second;\n             },\n             __binary_op,\n             [__result, &__binary_op](_DifferenceType __i, _DifferenceType __len, _Tp __initial) {\n                 return *(std::transform(__result + __i, __result + __i + __len, __result + __i,\n                                         [&__initial, &__binary_op](const _Tp& __x) {\n-                                            __PSTL_PRAGMA_FORCEINLINE\n+                                            _PSTL_PRAGMA_FORCEINLINE\n                                             return __binary_op(__initial, __x);\n                                         }) -\n                          1);\n@@ -295,7 +288,6 @@ __pattern_transform_scan(_ExecutionPolicy&& __exec, _RandomAccessIterator __firs\n         return __result + (__last - __first);\n     });\n }\n-#endif\n \n //------------------------------------------------------------------------\n // adjacent_difference\n@@ -314,7 +306,7 @@ _ForwardIterator2\n __brick_adjacent_difference(_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first,\n                             BinaryOperation __op, /*is_vector=*/std::true_type) noexcept\n {\n-    __PSTL_ASSERT(__first != __last);\n+    _PSTL_ASSERT(__first != __last);\n \n     typedef typename std::iterator_traits<_ForwardIterator1>::reference _ReferenceType1;\n     typedef typename std::iterator_traits<_ForwardIterator2>::reference _ReferenceType2;\n@@ -336,15 +328,14 @@ __pattern_adjacent_difference(_ExecutionPolicy&&, _ForwardIterator __first, _For\n     return __internal::__brick_adjacent_difference(__first, __last, __d_first, __op, __is_vector);\n }\n \n-#if __PSTL_USE_PAR_POLICIES\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryOperation,\n           class _IsVector>\n _ForwardIterator2\n __pattern_adjacent_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last,\n                               _ForwardIterator2 __d_first, _BinaryOperation __op, _IsVector __is_vector,\n                               /*is_parallel=*/std::true_type)\n {\n-    __PSTL_ASSERT(__first != __last);\n+    _PSTL_ASSERT(__first != __last);\n     typedef typename std::iterator_traits<_ForwardIterator1>::reference _ReferenceType1;\n     typedef typename std::iterator_traits<_ForwardIterator2>::reference _ReferenceType2;\n \n@@ -360,9 +351,8 @@ __pattern_adjacent_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __fir\n         });\n     return __d_first + (__last - __first);\n }\n-#endif\n \n } // namespace __internal\n } // namespace __pstl\n \n-#endif /* __PSTL_numeric_impl_H */\n+#endif /* _PSTL_NUMERIC_IMPL_H */"}, {"sha": "85d2d4b478a1e1ec62805c08be570db828c1491d", "filename": "libstdc++-v3/include/pstl/parallel_backend.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,13 +7,15 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_parallel_backend_H\n-#define __PSTL_parallel_backend_H\n+#ifndef _PSTL_PARALLEL_BACKEND_H\n+#define _PSTL_PARALLEL_BACKEND_H\n \n-#if __PSTL_PAR_BACKEND_TBB\n-#include \"parallel_backend_tbb.h\"\n+#if defined(_PSTL_PAR_BACKEND_SERIAL)\n+#    include \"parallel_backend_serial.h\"\n+#elif defined(_PSTL_PAR_BACKEND_TBB)\n+#    include \"parallel_backend_tbb.h\"\n #else\n-__PSTL_PRAGMA_MESSAGE(\"Parallel backend was not specified\");\n+_PSTL_PRAGMA_MESSAGE(\"Parallel backend was not specified\");\n #endif\n \n-#endif /* __PSTL_parallel_backend_H */\n+#endif /* _PSTL_PARALLEL_BACKEND_H */"}, {"sha": "e4b3a700d1f8dec8108f4250d5d8c443a83e5cb9", "filename": "libstdc++-v3/include/pstl/parallel_backend_serial.h", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_serial.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_serial.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_serial.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -0,0 +1,138 @@\n+// -*- C++ -*-\n+//===-- parallel_backend_serial.h -----------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef _PSTL_PARALLEL_BACKEND_SERIAL_H\n+#define _PSTL_PARALLEL_BACKEND_SERIAL_H\n+\n+#include <algorithm>\n+#include <cstddef>\n+#include <memory>\n+#include <numeric>\n+#include <utility>\n+\n+namespace __pstl\n+{\n+namespace __serial\n+{\n+\n+template <typename _Tp>\n+class __buffer\n+{\n+    std::allocator<_Tp> __allocator_;\n+    _Tp* __ptr_;\n+    const std::size_t __buf_size_;\n+    __buffer(const __buffer&) = delete;\n+    void\n+    operator=(const __buffer&) = delete;\n+\n+  public:\n+    __buffer(std::size_t __n) : __allocator_(), __ptr_(__allocator_.allocate(__n)), __buf_size_(__n) {}\n+\n+    operator bool() const { return __ptr_ != nullptr; }\n+    _Tp*\n+    get() const\n+    {\n+        return __ptr_;\n+    }\n+    ~__buffer() { __allocator_.deallocate(__ptr_, __buf_size_); }\n+};\n+\n+inline void\n+__cancel_execution()\n+{\n+}\n+\n+template <class _ExecutionPolicy, class _Index, class _Fp>\n+void\n+__parallel_for(_ExecutionPolicy&&, _Index __first, _Index __last, _Fp __f)\n+{\n+    __f(__first, __last);\n+}\n+\n+template <class _ExecutionPolicy, class _Value, class _Index, typename _RealBody, typename _Reduction>\n+_Value\n+__parallel_reduce(_ExecutionPolicy&&, _Index __first, _Index __last, const _Value& __identity,\n+                  const _RealBody& __real_body, const _Reduction&)\n+{\n+    if (__first == __last)\n+    {\n+        return __identity;\n+    }\n+    else\n+    {\n+        return __real_body(__first, __last, __identity);\n+    }\n+}\n+\n+template <class _ExecutionPolicy, class _Index, class _UnaryOp, class _Tp, class _BinaryOp, class _Reduce>\n+_Tp\n+__parallel_transform_reduce(_ExecutionPolicy&&, _Index __first, _Index __last, _UnaryOp, _Tp __init, _BinaryOp,\n+                            _Reduce __reduce)\n+{\n+    return __reduce(__first, __last, __init);\n+}\n+\n+template <class _ExecutionPolicy, typename _Index, typename _Tp, typename _Rp, typename _Cp, typename _Sp, typename _Ap>\n+void\n+__parallel_strict_scan(_ExecutionPolicy&&, _Index __n, _Tp __initial, _Rp __reduce, _Cp __combine, _Sp __scan,\n+                       _Ap __apex)\n+{\n+    _Tp __sum = __initial;\n+    if (__n)\n+        __sum = __combine(__sum, __reduce(_Index(0), __n));\n+    __apex(__sum);\n+    if (__n)\n+        __scan(_Index(0), __n, __initial);\n+}\n+\n+template <class _ExecutionPolicy, class _Index, class _UnaryOp, class _Tp, class _BinaryOp, class _Reduce, class _Scan>\n+_Tp\n+__parallel_transform_scan(_ExecutionPolicy&&, _Index __n, _UnaryOp, _Tp __init, _BinaryOp, _Reduce, _Scan __scan)\n+{\n+    return __scan(_Index(0), __n, __init);\n+}\n+\n+template <class _ExecutionPolicy, typename _RandomAccessIterator, typename _Compare, typename _LeafSort>\n+void\n+__parallel_stable_sort(_ExecutionPolicy&&, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp,\n+                       _LeafSort __leaf_sort, std::size_t = 0)\n+{\n+    __leaf_sort(__first, __last, __comp);\n+}\n+\n+template <class _ExecutionPolicy, typename _RandomAccessIterator1, typename _RandomAccessIterator2,\n+          typename _RandomAccessIterator3, typename _Compare, typename _LeafMerge>\n+void\n+__parallel_merge(_ExecutionPolicy&&, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1,\n+                 _RandomAccessIterator2 __first2, _RandomAccessIterator2 __last2, _RandomAccessIterator3 __out,\n+                 _Compare __comp, _LeafMerge __leaf_merge)\n+{\n+    __leaf_merge(__first1, __last1, __first2, __last2, __out, __comp);\n+}\n+\n+template <class _ExecutionPolicy, typename _F1, typename _F2>\n+void\n+__parallel_invoke(_ExecutionPolicy&&, _F1&& __f1, _F2&& __f2)\n+{\n+    std::forward<_F1>(__f1)();\n+    std::forward<_F2>(__f2)();\n+}\n+\n+} // namespace __serial\n+} // namespace __pstl\n+\n+namespace __pstl\n+{\n+namespace __par_backend\n+{\n+using namespace __pstl::__serial;\n+}\n+} // namespace __pstl\n+\n+#endif /* _PSTL_PARALLEL_BACKEND_SERIAL_H */"}, {"sha": "9c05ade0532c8baf0a208ea32f06df05abdbdb3a", "filename": "libstdc++-v3/include/pstl/parallel_backend_tbb.h", "status": "modified", "additions": 45, "deletions": 39, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_parallel_backend_tbb_H\n-#define __PSTL_parallel_backend_tbb_H\n+#ifndef _PSTL_PARALLEL_BACKEND_TBB_H\n+#define _PSTL_PARALLEL_BACKEND_TBB_H\n \n #include <algorithm>\n #include <type_traits>\n@@ -25,7 +25,7 @@\n #include <tbb/tbb_allocator.h>\n \n #if TBB_INTERFACE_VERSION < 10000\n-#error Intel(R) Threading Building Blocks 2018 is required; older versions are not supported.\n+#    error Intel(R) Threading Building Blocks 2018 is required; older versions are not supported.\n #endif\n \n namespace __pstl\n@@ -138,7 +138,7 @@ struct __par_trans_red_body\n     _Tp&\n     sum()\n     {\n-        __PSTL_ASSERT_MSG(_M_has_sum, \"sum expected\");\n+        _PSTL_ASSERT_MSG(_M_has_sum, \"sum expected\");\n         return *(_Tp*)_M_sum_storage;\n     }\n     __par_trans_red_body(_Up __u, _Tp __init, _Cp __c, _Rp __r)\n@@ -172,7 +172,7 @@ struct __par_trans_red_body\n         _Index __j = __range.end();\n         if (!_M_has_sum)\n         {\n-            __PSTL_ASSERT_MSG(__range.size() > 1, \"there should be at least 2 elements\");\n+            _PSTL_ASSERT_MSG(__range.size() > 1, \"there should be at least 2 elements\");\n             new (&_M_sum_storage)\n                 _Tp(_M_combine(_M_u(__i), _M_u(__i + 1))); // The condition i+1 < j is provided by the grain size of 3\n             _M_has_sum = true;\n@@ -232,7 +232,7 @@ class __trans_scan_body\n     _Tp&\n     sum() const\n     {\n-        __PSTL_ASSERT_MSG(_M_has_sum, \"sum expected\");\n+        _PSTL_ASSERT_MSG(_M_has_sum, \"sum expected\");\n         return *const_cast<_Tp*>(reinterpret_cast<_Tp const*>(_M_sum_storage));\n     }\n \n@@ -303,8 +303,10 @@ __upsweep(_Index __i, _Index __m, _Index __tilesize, _Tp* __r, _Index __lastsize\n     {\n         _Index __k = __split(__m);\n         tbb::parallel_invoke(\n-\t    [=] { __par_backend::__upsweep(__i, __k, __tilesize, __r, __tilesize, __reduce, __combine); },\n-            [=] { __par_backend::__upsweep(__i + __k, __m - __k, __tilesize, __r + __k, __lastsize, __reduce, __combine); });\n+            [=] { __par_backend::__upsweep(__i, __k, __tilesize, __r, __tilesize, __reduce, __combine); },\n+            [=] {\n+                __par_backend::__upsweep(__i + __k, __m - __k, __tilesize, __r + __k, __lastsize, __reduce, __combine);\n+            });\n         if (__m == 2 * __k)\n             __r[__m - 1] = __combine(__r[__k - 1], __r[__m - 1]);\n     }\n@@ -320,13 +322,14 @@ __downsweep(_Index __i, _Index __m, _Index __tilesize, _Tp* __r, _Index __lastsi\n     else\n     {\n         const _Index __k = __split(__m);\n-        tbb::parallel_invoke([=] { __par_backend::__downsweep(__i, __k, __tilesize, __r, __tilesize, __initial, __combine, __scan); },\n-                             // Assumes that __combine never throws.\n-                             //TODO: Consider adding a requirement for user functors to be constant.\n-                             [=, &__combine] {\n-                                 __par_backend::__downsweep(__i + __k, __m - __k, __tilesize, __r + __k, __lastsize,\n-                                             __combine(__initial, __r[__k - 1]), __combine, __scan);\n-                             });\n+        tbb::parallel_invoke(\n+            [=] { __par_backend::__downsweep(__i, __k, __tilesize, __r, __tilesize, __initial, __combine, __scan); },\n+            // Assumes that __combine never throws.\n+            //TODO: Consider adding a requirement for user functors to be constant.\n+            [=, &__combine] {\n+                __par_backend::__downsweep(__i + __k, __m - __k, __tilesize, __r + __k, __lastsize,\n+                                           __combine(__initial, __r[__k - 1]), __combine, __scan);\n+            });\n     }\n }\n \n@@ -358,7 +361,8 @@ __parallel_strict_scan(_ExecutionPolicy&&, _Index __n, _Tp __initial, _Rp __redu\n             _Index __m = (__n - 1) / __tilesize;\n             __buffer<_Tp> __buf(__m + 1);\n             _Tp* __r = __buf.get();\n-            __par_backend::__upsweep(_Index(0), _Index(__m + 1), __tilesize, __r, __n - __m * __tilesize, __reduce, __combine);\n+            __par_backend::__upsweep(_Index(0), _Index(__m + 1), __tilesize, __r, __n - __m * __tilesize, __reduce,\n+                                     __combine);\n \n             // When __apex is a no-op and __combine has no side effects, a good optimizer\n             // should be able to eliminate all code between here and __apex.\n@@ -369,8 +373,8 @@ __parallel_strict_scan(_ExecutionPolicy&&, _Index __n, _Tp __initial, _Rp __redu\n             while ((__k &= __k - 1))\n                 __t = __combine(__r[__k - 1], __t);\n             __apex(__combine(__initial, __t));\n-            __par_backend::__downsweep(_Index(0), _Index(__m + 1), __tilesize, __r, __n - __m * __tilesize, __initial, __combine,\n-                        __scan);\n+            __par_backend::__downsweep(_Index(0), _Index(__m + 1), __tilesize, __r, __n - __m * __tilesize, __initial,\n+                                       __combine, __scan);\n             return;\n         }\n         // Fewer than 2 elements in sequence, or out of memory.  Handle has single block.\n@@ -427,7 +431,7 @@ class __merge_task : public tbb::task\n     }\n };\n \n-#define __PSTL_MERGE_CUT_OFF 2000\n+#define _PSTL_MERGE_CUT_OFF 2000\n \n template <typename _RandomAccessIterator1, typename _RandomAccessIterator2, typename _RandomAccessIterator3,\n           typename __M_Compare, typename _Cleanup, typename _LeafMerge>\n@@ -439,7 +443,7 @@ __merge_task<_RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterat\n     typedef typename std::iterator_traits<_RandomAccessIterator2>::difference_type _DifferenceType2;\n     typedef typename std::common_type<_DifferenceType1, _DifferenceType2>::type _SizeType;\n     const _SizeType __n = (_M_xe - _M_xs) + (_M_ye - _M_ys);\n-    const _SizeType __merge_cut_off = __PSTL_MERGE_CUT_OFF;\n+    const _SizeType __merge_cut_off = _PSTL_MERGE_CUT_OFF;\n     if (__n <= __merge_cut_off)\n     {\n         _M_leaf_merge(_M_xs, _M_xe, _M_ys, _M_ye, _M_zs, _M_comp);\n@@ -504,21 +508,21 @@ class __stable_sort_task : public tbb::task\n //! Binary operator that does nothing\n struct __binary_no_op\n {\n-    template <typename _T>\n-    void operator()(_T, _T)\n+    template <typename _Tp>\n+    void operator()(_Tp, _Tp)\n     {\n     }\n };\n \n-#define __PSTL_STABLE_SORT_CUT_OFF 500\n+#define _PSTL_STABLE_SORT_CUT_OFF 500\n \n template <typename _RandomAccessIterator1, typename _RandomAccessIterator2, typename _Compare, typename _LeafSort>\n tbb::task*\n __stable_sort_task<_RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort>::execute()\n {\n     const _SizeType __n = _M_xe - _M_xs;\n     const _SizeType __nmerge = _M_nsort > 0 ? _M_nsort : __n;\n-    const _SizeType __sort_cut_off = __PSTL_STABLE_SORT_CUT_OFF;\n+    const _SizeType __sort_cut_off = _PSTL_STABLE_SORT_CUT_OFF;\n     if (__n <= __sort_cut_off)\n     {\n         _M_leaf_sort(_M_xs, _M_xe, _M_comp);\n@@ -536,20 +540,21 @@ __stable_sort_task<_RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Le\n         auto __move_sequences = [](_RandomAccessIterator2 __first1, _RandomAccessIterator2 __last1,\n                                    _RandomAccessIterator1 __first2) { return std::move(__first1, __last1, __first2); };\n         if (_M_inplace == 2)\n-\t    __m = new (tbb::task::allocate_continuation())\n+            __m = new (tbb::task::allocate_continuation())\n                 __merge_task<_RandomAccessIterator2, _RandomAccessIterator2, _RandomAccessIterator1, _Compare,\n                              __serial_destroy,\n                              __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>>(\n                     _M_zs, __zm, __zm, __ze, _M_xs, _M_comp, __serial_destroy(),\n-                    __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>(__nmerge, __move_values,\n-                                                                                             __move_sequences));\n+                    __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>(\n+                        __nmerge, __move_values, __move_sequences));\n         else if (_M_inplace)\n             __m = new (tbb::task::allocate_continuation())\n                 __merge_task<_RandomAccessIterator2, _RandomAccessIterator2, _RandomAccessIterator1, _Compare,\n-                             __par_backend::__binary_no_op, __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>>(\n+                             __par_backend::__binary_no_op,\n+                             __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>>(\n                     _M_zs, __zm, __zm, __ze, _M_xs, _M_comp, __par_backend::__binary_no_op(),\n-                    __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>(__nmerge, __move_values,\n-                                                                                             __move_sequences));\n+                    __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>(\n+                        __nmerge, __move_values, __move_sequences));\n         else\n         {\n             auto __move_values = [](_RandomAccessIterator1 __x, _RandomAccessIterator2 __z) { *__z = std::move(*__x); };\n@@ -559,16 +564,17 @@ __stable_sort_task<_RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Le\n             };\n             __m = new (tbb::task::allocate_continuation())\n                 __merge_task<_RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _Compare,\n-                             __par_backend::__binary_no_op, __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>>(\n+                             __par_backend::__binary_no_op,\n+                             __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>>(\n                     _M_xs, __xm, __xm, _M_xe, _M_zs, _M_comp, __par_backend::__binary_no_op(),\n-                    __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>(__nmerge, __move_values,\n-                                                                                             __move_sequences));\n+                    __par_backend::__serial_move_merge<decltype(__move_values), decltype(__move_sequences)>(\n+                        __nmerge, __move_values, __move_sequences));\n         }\n         __m->set_ref_count(2);\n         task* __right = new (__m->allocate_child())\n             __stable_sort_task(__xm, _M_xe, __zm, !_M_inplace, _M_comp, _M_leaf_sort, __nmerge);\n-\ttbb::task::spawn(*__right);\n-\ttbb::task::recycle_as_child_of(*__m);\n+        tbb::task::spawn(*__right);\n+        tbb::task::recycle_as_child_of(*__m);\n         _M_xe = __xm;\n         _M_inplace = !_M_inplace;\n     }\n@@ -588,10 +594,10 @@ __parallel_stable_sort(_ExecutionPolicy&&, _RandomAccessIterator __xs, _RandomAc\n         if (__nsort == 0)\n             __nsort = __n;\n \n-        const _DifferenceType __sort_cut_off = __PSTL_STABLE_SORT_CUT_OFF;\n+        const _DifferenceType __sort_cut_off = _PSTL_STABLE_SORT_CUT_OFF;\n         if (__n > __sort_cut_off)\n         {\n-            __PSTL_ASSERT(__nsort > 0 && __nsort <= __n);\n+            _PSTL_ASSERT(__nsort > 0 && __nsort <= __n);\n             __buffer<_ValueType> __buf(__n);\n             using tbb::task;\n             task::spawn_root_and_wait(*new (task::allocate_root())\n@@ -619,7 +625,7 @@ __parallel_merge(_ExecutionPolicy&&, _RandomAccessIterator1 __xs, _RandomAccessI\n     typedef typename std::iterator_traits<_RandomAccessIterator2>::difference_type _DifferenceType2;\n     typedef typename std::common_type<_DifferenceType1, _DifferenceType2>::type _SizeType;\n     const _SizeType __n = (__xe - __xs) + (__ye - __ys);\n-    const _SizeType __merge_cut_off = __PSTL_MERGE_CUT_OFF;\n+    const _SizeType __merge_cut_off = _PSTL_MERGE_CUT_OFF;\n     if (__n <= __merge_cut_off)\n     {\n         // Fall back on serial merge\n@@ -651,4 +657,4 @@ __parallel_invoke(_ExecutionPolicy&&, _F1&& __f1, _F2&& __f2)\n } // namespace __par_backend\n } // namespace __pstl\n \n-#endif /* __PSTL_parallel_backend_tbb_H */\n+#endif /* _PSTL_PARALLEL_BACKEND_TBB_H */"}, {"sha": "4c3b3a5076424a430add4fd289712c0951d21f29", "filename": "libstdc++-v3/include/pstl/parallel_backend_utils.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_utils.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_parallel_backend_utils_H\n-#define __PSTL_parallel_backend_utils_H\n+#ifndef _PSTL_PARALLEL_BACKEND_UTILS_H\n+#define _PSTL_PARALLEL_BACKEND_UTILS_H\n \n #include <iterator>\n #include <utility>\n@@ -53,7 +53,7 @@ struct __serial_move_merge\n                _RandomAccessIterator2 __ye, _RandomAccessIterator3 __zs, _Compare __comp)\n     {\n         auto __n = _M_nmerge;\n-        __PSTL_ASSERT(__n > 0);\n+        _PSTL_ASSERT(__n > 0);\n         if (__xs != __xe)\n         {\n             if (__ys != __ye)\n@@ -145,7 +145,7 @@ class __stack\n \n     ~__stack()\n     {\n-        __PSTL_ASSERT(size() <= _M_maxsize);\n+        _PSTL_ASSERT(size() <= _M_maxsize);\n         while (!empty())\n             pop();\n     }\n@@ -158,20 +158,20 @@ class __stack\n     size_t\n     size() const\n     {\n-        __PSTL_ASSERT(_M_ptr - _M_buf.get() <= _M_maxsize);\n-        __PSTL_ASSERT(_M_ptr - _M_buf.get() >= 0);\n+        _PSTL_ASSERT(_M_ptr - _M_buf.get() <= _M_maxsize);\n+        _PSTL_ASSERT(_M_ptr - _M_buf.get() >= 0);\n         return _M_ptr - _M_buf.get();\n     }\n     bool\n     empty() const\n     {\n-        __PSTL_ASSERT(_M_ptr >= _M_buf.get());\n+        _PSTL_ASSERT(_M_ptr >= _M_buf.get());\n         return _M_ptr == _M_buf.get();\n     }\n     void\n     push(const _ValueType& __v)\n     {\n-        __PSTL_ASSERT(size() < _M_maxsize);\n+        _PSTL_ASSERT(size() < _M_maxsize);\n         new (_M_ptr) _ValueType(__v);\n         ++_M_ptr;\n     }\n@@ -183,7 +183,7 @@ class __stack\n     void\n     pop()\n     {\n-        __PSTL_ASSERT(_M_ptr > _M_buf.get());\n+        _PSTL_ASSERT(_M_ptr > _M_buf.get());\n         --_M_ptr;\n         (*_M_ptr).~_ValueType();\n     }\n@@ -192,4 +192,4 @@ class __stack\n } // namespace __par_backend\n } // namespace __pstl\n \n-#endif /* __PSTL_parallel_backend_utils_H */\n+#endif /* _PSTL_PARALLEL_BACKEND_UTILS_H */"}, {"sha": "46560c642ea73f8ef5f2f51e5700e3d6b2a11f5c", "filename": "libstdc++-v3/include/pstl/parallel_impl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_impl.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_parallel_impl_H\n-#define __PSTL_parallel_impl_H\n+#ifndef _PSTL_PARALLEL_IMPL_H\n+#define _PSTL_PARALLEL_IMPL_H\n \n #include <atomic>\n // This header defines the minimum set of parallel routines required to support Parallel STL,\n@@ -78,4 +78,4 @@ __parallel_or(_ExecutionPolicy&& __exec, _Index __first, _Index __last, _Brick _\n } // namespace __internal\n } // namespace __pstl\n \n-#endif /* __PSTL_parallel_impl_H */\n+#endif /* _PSTL_PARALLEL_IMPL_H */"}, {"sha": "a6867cac40cc2771e261c9bf1751f3f739b31566", "filename": "libstdc++-v3/include/pstl/pstl_config.h", "status": "modified", "additions": 76, "deletions": 87, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fpstl_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fpstl_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fpstl_config.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,124 +7,113 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_config_H\n-#define __PSTL_config_H\n-\n-#define PSTL_VERSION 203\n-#define PSTL_VERSION_MAJOR (PSTL_VERSION / 100)\n-#define PSTL_VERSION_MINOR (PSTL_VERSION - PSTL_VERSION_MAJOR * 100)\n-\n-// Check the user-defined macro for parallel policies\n-#if defined(PSTL_USE_PARALLEL_POLICIES)\n-#undef __PSTL_USE_PAR_POLICIES\n-#define __PSTL_USE_PAR_POLICIES PSTL_USE_PARALLEL_POLICIES\n-// Check the internal macro for parallel policies\n-#elif !defined(__PSTL_USE_PAR_POLICIES)\n-#define __PSTL_USE_PAR_POLICIES 1\n-#endif\n+#ifndef _PSTL_CONFIG_H\n+#define _PSTL_CONFIG_H\n \n-#if __PSTL_USE_PAR_POLICIES\n-#if !defined(__PSTL_PAR_BACKEND_TBB)\n-#define __PSTL_PAR_BACKEND_TBB 1\n-#endif\n-#else\n-#undef __PSTL_PAR_BACKEND_TBB\n+// The version is XYYZ, where X is major, YY is minor, and Z is patch (i.e. X.YY.Z)\n+#define _PSTL_VERSION 9000\n+#define _PSTL_VERSION_MAJOR (_PSTL_VERSION / 1000)\n+#define _PSTL_VERSION_MINOR ((_PSTL_VERSION % 1000) / 10)\n+#define _PSTL_VERSION_PATCH (_PSTL_VERSION % 10)\n+\n+#if !defined(_PSTL_PAR_BACKEND_SERIAL) && !defined(_PSTL_PAR_BACKEND_TBB)\n+#    error \"The parallel backend is neither serial nor TBB\"\n #endif\n \n // Check the user-defined macro for warnings\n #if defined(PSTL_USAGE_WARNINGS)\n-#undef __PSTL_USAGE_WARNINGS\n-#define __PSTL_USAGE_WARNINGS PSTL_USAGE_WARNINGS\n+#    undef _PSTL_USAGE_WARNINGS\n+#    define _PSTL_USAGE_WARNINGS PSTL_USAGE_WARNINGS\n // Check the internal macro for warnings\n-#elif !defined(__PSTL_USAGE_WARNINGS)\n-#define __PSTL_USAGE_WARNINGS 0\n+#elif !defined(_PSTL_USAGE_WARNINGS)\n+#    define _PSTL_USAGE_WARNINGS 0\n #endif\n \n // Portability \"#pragma\" definition\n #ifdef _MSC_VER\n-#define __PSTL_PRAGMA(x) __pragma(x)\n+#    define _PSTL_PRAGMA(x) __pragma(x)\n #else\n-#define __PSTL_PRAGMA(x) _Pragma(#x)\n+#    define _PSTL_PRAGMA(x) _Pragma(#    x)\n #endif\n \n-#define __PSTL_STRING_AUX(x) #x\n-#define __PSTL_STRING(x) __PSTL_STRING_AUX(x)\n-#define __PSTL_STRING_CONCAT(x, y) x #y\n+#define _PSTL_STRING_AUX(x) #x\n+#define _PSTL_STRING(x) _PSTL_STRING_AUX(x)\n+#define _PSTL_STRING_CONCAT(x, y) x #y\n \n-// note that when ICC or Clang is in use, __PSTL_GCC_VERSION might not fully match\n+// note that when ICC or Clang is in use, _PSTL_GCC_VERSION might not fully match\n // the actual GCC version on the system.\n-#define __PSTL_GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)\n+#define _PSTL_GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)\n \n #if __clang__\n // according to clang documentation, version can be vendor specific\n-#define __PSTL_CLANG_VERSION (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__)\n+#    define _PSTL_CLANG_VERSION (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__)\n #endif\n \n // Enable SIMD for compilers that support OpenMP 4.0\n-#if (_OPENMP >= 201307) || (__INTEL_COMPILER >= 1600) || (!defined(__INTEL_COMPILER) && __PSTL_GCC_VERSION >= 40900)\n-#define __PSTL_PRAGMA_SIMD __PSTL_PRAGMA(omp simd)\n-#define __PSTL_PRAGMA_DECLARE_SIMD __PSTL_PRAGMA(omp declare simd)\n-#define __PSTL_PRAGMA_SIMD_REDUCTION(PRM) __PSTL_PRAGMA(omp simd reduction(PRM))\n+#if (_OPENMP >= 201307) || (__INTEL_COMPILER >= 1600) || (!defined(__INTEL_COMPILER) && _PSTL_GCC_VERSION >= 40900)\n+#    define _PSTL_PRAGMA_SIMD _PSTL_PRAGMA(omp simd)\n+#    define _PSTL_PRAGMA_DECLARE_SIMD _PSTL_PRAGMA(omp declare simd)\n+#    define _PSTL_PRAGMA_SIMD_REDUCTION(PRM) _PSTL_PRAGMA(omp simd reduction(PRM))\n #elif !defined(_MSC_VER) //#pragma simd\n-#define __PSTL_PRAGMA_SIMD __PSTL_PRAGMA(simd)\n-#define __PSTL_PRAGMA_DECLARE_SIMD\n-#define __PSTL_PRAGMA_SIMD_REDUCTION(PRM) __PSTL_PRAGMA(simd reduction(PRM))\n+#    define _PSTL_PRAGMA_SIMD _PSTL_PRAGMA(simd)\n+#    define _PSTL_PRAGMA_DECLARE_SIMD\n+#    define _PSTL_PRAGMA_SIMD_REDUCTION(PRM) _PSTL_PRAGMA(simd reduction(PRM))\n #else //no simd\n-#define __PSTL_PRAGMA_SIMD\n-#define __PSTL_PRAGMA_DECLARE_SIMD\n-#define __PSTL_PRAGMA_SIMD_REDUCTION(PRM)\n+#    define _PSTL_PRAGMA_SIMD\n+#    define _PSTL_PRAGMA_DECLARE_SIMD\n+#    define _PSTL_PRAGMA_SIMD_REDUCTION(PRM)\n #endif //Enable SIMD\n \n #if (__INTEL_COMPILER)\n-#define __PSTL_PRAGMA_FORCEINLINE __PSTL_PRAGMA(forceinline)\n+#    define _PSTL_PRAGMA_FORCEINLINE _PSTL_PRAGMA(forceinline)\n #else\n-#define __PSTL_PRAGMA_FORCEINLINE\n+#    define _PSTL_PRAGMA_FORCEINLINE\n #endif\n \n #if (__INTEL_COMPILER >= 1900)\n-#define __PSTL_PRAGMA_SIMD_SCAN(PRM) __PSTL_PRAGMA(omp simd reduction(inscan, PRM))\n-#define __PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(PRM) __PSTL_PRAGMA(omp scan inclusive(PRM))\n-#define __PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(PRM) __PSTL_PRAGMA(omp scan exclusive(PRM))\n+#    define _PSTL_PRAGMA_SIMD_SCAN(PRM) _PSTL_PRAGMA(omp simd reduction(inscan, PRM))\n+#    define _PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(PRM) _PSTL_PRAGMA(omp scan inclusive(PRM))\n+#    define _PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(PRM) _PSTL_PRAGMA(omp scan exclusive(PRM))\n #else\n-#define __PSTL_PRAGMA_SIMD_SCAN(PRM)\n-#define __PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(PRM)\n-#define __PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(PRM)\n+#    define _PSTL_PRAGMA_SIMD_SCAN(PRM)\n+#    define _PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(PRM)\n+#    define _PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(PRM)\n #endif\n \n // Should be defined to 1 for environments with a vendor implementation of C++17 execution policies\n-#define __PSTL_CPP17_EXECUTION_POLICIES_PRESENT (_MSC_VER >= 1912)\n+#define _PSTL_CPP17_EXECUTION_POLICIES_PRESENT (_MSC_VER >= 1912)\n \n-#define __PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT                                                                     \\\n+#define _PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT                                                                      \\\n     (_MSC_VER >= 1900 || __cplusplus >= 201300L || __cpp_lib_robust_nonmodifying_seq_ops == 201304)\n-#define __PSTL_CPP14_MAKE_REVERSE_ITERATOR_PRESENT                                                                     \\\n+#define _PSTL_CPP14_MAKE_REVERSE_ITERATOR_PRESENT                                                                      \\\n     (_MSC_VER >= 1900 || __cplusplus >= 201402L || __cpp_lib_make_reverse_iterator == 201402)\n-#define __PSTL_CPP14_INTEGER_SEQUENCE_PRESENT (_MSC_VER >= 1900 || __cplusplus >= 201402L)\n-#define __PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT                                                                        \\\n+#define _PSTL_CPP14_INTEGER_SEQUENCE_PRESENT (_MSC_VER >= 1900 || __cplusplus >= 201402L)\n+#define _PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT                                                                         \\\n     (!__INTEL_COMPILER || __INTEL_COMPILER >= 1700) && (_MSC_FULL_VER >= 190023918 || __cplusplus >= 201402L)\n \n-#define __PSTL_EARLYEXIT_PRESENT (__INTEL_COMPILER >= 1800)\n-#define __PSTL_MONOTONIC_PRESENT (__INTEL_COMPILER >= 1800)\n+#define _PSTL_EARLYEXIT_PRESENT (__INTEL_COMPILER >= 1800)\n+#define _PSTL_MONOTONIC_PRESENT (__INTEL_COMPILER >= 1800)\n \n-#if (__INTEL_COMPILER >= 1900 || !defined(__INTEL_COMPILER) && __PSTL_GCC_VERSION >= 40900 || _OPENMP >= 201307)\n-#define __PSTL_UDR_PRESENT 1\n+#if (__INTEL_COMPILER >= 1900 || !defined(__INTEL_COMPILER) && _PSTL_GCC_VERSION >= 40900 || _OPENMP >= 201307)\n+#    define _PSTL_UDR_PRESENT 1\n #else\n-#define __PSTL_UDR_PRESENT 0\n+#    define _PSTL_UDR_PRESENT 0\n #endif\n \n-#define __PSTL_UDS_PRESENT (__INTEL_COMPILER >= 1900 && __INTEL_COMPILER_BUILD_DATE >= 20180626)\n+#define _PSTL_UDS_PRESENT (__INTEL_COMPILER >= 1900 && __INTEL_COMPILER_BUILD_DATE >= 20180626)\n \n-#if __PSTL_EARLYEXIT_PRESENT\n-#define __PSTL_PRAGMA_SIMD_EARLYEXIT __PSTL_PRAGMA(omp simd early_exit)\n+#if _PSTL_EARLYEXIT_PRESENT\n+#    define _PSTL_PRAGMA_SIMD_EARLYEXIT _PSTL_PRAGMA(omp simd early_exit)\n #else\n-#define __PSTL_PRAGMA_SIMD_EARLYEXIT\n+#    define _PSTL_PRAGMA_SIMD_EARLYEXIT\n #endif\n \n-#if __PSTL_MONOTONIC_PRESENT\n-#define __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(PRM) __PSTL_PRAGMA(omp ordered simd monotonic(PRM))\n-#define __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(PRM1, PRM2) __PSTL_PRAGMA(omp ordered simd monotonic(PRM1, PRM2))\n+#if _PSTL_MONOTONIC_PRESENT\n+#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(PRM) _PSTL_PRAGMA(omp ordered simd monotonic(PRM))\n+#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(PRM1, PRM2) _PSTL_PRAGMA(omp ordered simd monotonic(PRM1, PRM2))\n #else\n-#define __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(PRM)\n-#define __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(PRM1, PRM2)\n+#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(PRM)\n+#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(PRM1, PRM2)\n #endif\n \n // Declaration of reduction functor, where\n@@ -134,41 +123,41 @@\n // omp_out - refers to the final value of the combiner operator\n // omp_priv - refers to the private copy of the initial value\n // omp_orig - refers to the original variable to be reduced\n-#define __PSTL_PRAGMA_DECLARE_REDUCTION(NAME, OP)                                                                      \\\n-    __PSTL_PRAGMA(omp declare reduction(NAME : OP : omp_out(omp_in)) initializer(omp_priv = omp_orig))\n+#define _PSTL_PRAGMA_DECLARE_REDUCTION(NAME, OP)                                                                       \\\n+    _PSTL_PRAGMA(omp declare reduction(NAME:OP : omp_out(omp_in)) initializer(omp_priv = omp_orig))\n \n #if (__INTEL_COMPILER >= 1600)\n-#define __PSTL_PRAGMA_VECTOR_UNALIGNED __PSTL_PRAGMA(vector unaligned)\n+#    define _PSTL_PRAGMA_VECTOR_UNALIGNED _PSTL_PRAGMA(vector unaligned)\n #else\n-#define __PSTL_PRAGMA_VECTOR_UNALIGNED\n+#    define _PSTL_PRAGMA_VECTOR_UNALIGNED\n #endif\n \n // Check the user-defined macro to use non-temporal stores\n #if defined(PSTL_USE_NONTEMPORAL_STORES) && (__INTEL_COMPILER >= 1600)\n-#define __PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED __PSTL_PRAGMA(vector nontemporal)\n+#    define _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED _PSTL_PRAGMA(vector nontemporal)\n #else\n-#define __PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED\n+#    define _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED\n #endif\n \n #if _MSC_VER || __INTEL_COMPILER //the preprocessors don't type a message location\n-#define __PSTL_PRAGMA_LOCATION __FILE__ \":\" __PSTL_STRING(__LINE__) \": [Parallel STL message]: \"\n+#    define _PSTL_PRAGMA_LOCATION __FILE__ \":\" _PSTL_STRING(__LINE__) \": [Parallel STL message]: \"\n #else\n-#define __PSTL_PRAGMA_LOCATION \" [Parallel STL message]: \"\n+#    define _PSTL_PRAGMA_LOCATION \" [Parallel STL message]: \"\n #endif\n \n-#define __PSTL_PRAGMA_MESSAGE_IMPL(x) __PSTL_PRAGMA(message(__PSTL_STRING_CONCAT(__PSTL_PRAGMA_LOCATION, x)))\n+#define _PSTL_PRAGMA_MESSAGE_IMPL(x) _PSTL_PRAGMA(message(_PSTL_STRING_CONCAT(_PSTL_PRAGMA_LOCATION, x)))\n \n-#if __PSTL_USAGE_WARNINGS\n-#define __PSTL_PRAGMA_MESSAGE(x) __PSTL_PRAGMA_MESSAGE_IMPL(x)\n-#define __PSTL_PRAGMA_MESSAGE_POLICIES(x) __PSTL_PRAGMA_MESSAGE_IMPL(x)\n+#if _PSTL_USAGE_WARNINGS\n+#    define _PSTL_PRAGMA_MESSAGE(x) _PSTL_PRAGMA_MESSAGE_IMPL(x)\n+#    define _PSTL_PRAGMA_MESSAGE_POLICIES(x) _PSTL_PRAGMA_MESSAGE_IMPL(x)\n #else\n-#define __PSTL_PRAGMA_MESSAGE(x)\n-#define __PSTL_PRAGMA_MESSAGE_POLICIES(x)\n+#    define _PSTL_PRAGMA_MESSAGE(x)\n+#    define _PSTL_PRAGMA_MESSAGE_POLICIES(x)\n #endif\n \n // broken macros\n-#define __PSTL_CPP11_STD_ROTATE_BROKEN ((__GLIBCXX__ && __GLIBCXX__ < 20150716) || (_MSC_VER && _MSC_VER < 1800))\n+#define _PSTL_CPP11_STD_ROTATE_BROKEN ((__GLIBCXX__ && __GLIBCXX__ < 20150716) || (_MSC_VER && _MSC_VER < 1800))\n \n-#define __PSTL_ICC_18_OMP_SIMD_BROKEN (__INTEL_COMPILER == 1800)\n+#define _PSTL_ICC_18_OMP_SIMD_BROKEN (__INTEL_COMPILER == 1800)\n \n-#endif /* __PSTL_config_H */\n+#endif /* _PSTL_CONFIG_H */"}, {"sha": "6f11b95bac1288906a362101a5fa5b3f96975c7b", "filename": "libstdc++-v3/include/pstl/unseq_backend_simd.h", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Funseq_backend_simd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Funseq_backend_simd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Funseq_backend_simd.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_unseq_backend_simd_H\n-#define __PSTL_unseq_backend_simd_H\n+#ifndef _PSTL_UNSEQ_BACKEND_SIMD_H\n+#define _PSTL_UNSEQ_BACKEND_SIMD_H\n \n #include <type_traits>\n \n@@ -28,7 +28,7 @@ template <class _Iterator, class _DifferenceType, class _Function>\n _Iterator\n __simd_walk_1(_Iterator __first, _DifferenceType __n, _Function __f) noexcept\n {\n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n         __f(__first[__i]);\n \n@@ -39,7 +39,7 @@ template <class _Iterator1, class _DifferenceType, class _Iterator2, class _Func\n _Iterator2\n __simd_walk_2(_Iterator1 __first1, _DifferenceType __n, _Iterator2 __first2, _Function __f) noexcept\n {\n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n         __f(__first1[__i], __first2[__i]);\n     return __first2 + __n;\n@@ -50,7 +50,7 @@ _Iterator3\n __simd_walk_3(_Iterator1 __first1, _DifferenceType __n, _Iterator2 __first2, _Iterator3 __first3,\n               _Function __f) noexcept\n {\n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n         __f(__first1[__i], __first2[__i], __first3[__i]);\n     return __first3 + __n;\n@@ -61,10 +61,10 @@ template <class _Index, class _DifferenceType, class _Pred>\n bool\n __simd_or(_Index __first, _DifferenceType __n, _Pred __pred) noexcept\n {\n-#if __PSTL_EARLYEXIT_PRESENT\n+#if _PSTL_EARLYEXIT_PRESENT\n     _DifferenceType __i;\n-    __PSTL_PRAGMA_VECTOR_UNALIGNED\n-    __PSTL_PRAGMA_SIMD_EARLYEXIT\n+    _PSTL_PRAGMA_VECTOR_UNALIGNED\n+    _PSTL_PRAGMA_SIMD_EARLYEXIT\n     for (__i = 0; __i < __n; ++__i)\n         if (__pred(__first[__i]))\n             break;\n@@ -75,7 +75,7 @@ __simd_or(_Index __first, _DifferenceType __n, _Pred __pred) noexcept\n     while (__last != __first)\n     {\n         int32_t __flag = 1;\n-        __PSTL_PRAGMA_SIMD_REDUCTION(& : __flag)\n+        _PSTL_PRAGMA_SIMD_REDUCTION(& : __flag)\n         for (_DifferenceType __i = 0; __i < __block_size; ++__i)\n             if (__pred(*(__first + __i)))\n                 __flag = 0;\n@@ -101,10 +101,10 @@ template <class _Index, class _DifferenceType, class _Compare>\n _Index\n __simd_first(_Index __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp) noexcept\n {\n-#if __PSTL_EARLYEXIT_PRESENT\n+#if _PSTL_EARLYEXIT_PRESENT\n     _DifferenceType __i = __begin;\n-    __PSTL_PRAGMA_VECTOR_UNALIGNED // Do not generate peel loop part\n-        __PSTL_PRAGMA_SIMD_EARLYEXIT for (; __i < __end; ++__i)\n+    _PSTL_PRAGMA_VECTOR_UNALIGNED // Do not generate peel loop part\n+        _PSTL_PRAGMA_SIMD_EARLYEXIT for (; __i < __end; ++__i)\n     {\n         if (__comp(__first, __i))\n         {\n@@ -119,10 +119,10 @@ __simd_first(_Index __first, _DifferenceType __begin, _DifferenceType __end, _Co\n     while (__end - __begin >= __block_size)\n     {\n         _DifferenceType __found = 0;\n-        __PSTL_PRAGMA_VECTOR_UNALIGNED // Do not generate peel loop part\n-            __PSTL_PRAGMA_SIMD_REDUCTION(|\n-                                         : __found) for (_DifferenceType __i = __begin; __i < __begin + __block_size;\n-                                                         ++__i)\n+        _PSTL_PRAGMA_VECTOR_UNALIGNED // Do not generate peel loop part\n+            _PSTL_PRAGMA_SIMD_REDUCTION(|\n+                                        : __found) for (_DifferenceType __i = __begin; __i < __begin + __block_size;\n+                                                        ++__i)\n         {\n             const _DifferenceType __t = __comp(__first, __i);\n             __lane[__i - __begin] = __t;\n@@ -154,17 +154,17 @@ __simd_first(_Index __first, _DifferenceType __begin, _DifferenceType __end, _Co\n         ++__begin;\n     }\n     return __first + __end;\n-#endif //__PSTL_EARLYEXIT_PRESENT\n+#endif //_PSTL_EARLYEXIT_PRESENT\n }\n \n template <class _Index1, class _DifferenceType, class _Index2, class _Pred>\n std::pair<_Index1, _Index2>\n __simd_first(_Index1 __first1, _DifferenceType __n, _Index2 __first2, _Pred __pred) noexcept\n {\n-#if __PSTL_EARLYEXIT_PRESENT\n+#if _PSTL_EARLYEXIT_PRESENT\n     _DifferenceType __i = 0;\n-    __PSTL_PRAGMA_VECTOR_UNALIGNED\n-    __PSTL_PRAGMA_SIMD_EARLYEXIT\n+    _PSTL_PRAGMA_VECTOR_UNALIGNED\n+    _PSTL_PRAGMA_SIMD_EARLYEXIT\n     for (; __i < __n; ++__i)\n         if (__pred(__first1[__i], __first2[__i]))\n             break;\n@@ -179,8 +179,8 @@ __simd_first(_Index1 __first1, _DifferenceType __n, _Index2 __first2, _Pred __pr\n     {\n         _DifferenceType __found = 0;\n         _DifferenceType __i;\n-        __PSTL_PRAGMA_VECTOR_UNALIGNED // Do not generate peel loop part\n-            __PSTL_PRAGMA_SIMD_REDUCTION(|\n+        _PSTL_PRAGMA_VECTOR_UNALIGNED // Do not generate peel loop part\n+            _PSTL_PRAGMA_SIMD_REDUCTION(|\n                                          : __found) for (__i = 0; __i < __block_size; ++__i)\n         {\n             const _DifferenceType __t = __pred(__first1[__i], __first2[__i]);\n@@ -208,15 +208,15 @@ __simd_first(_Index1 __first1, _DifferenceType __n, _Index2 __first2, _Pred __pr\n             return std::make_pair(__first1, __first2);\n \n     return std::make_pair(__last1, __last2);\n-#endif //__PSTL_EARLYEXIT_PRESENT\n+#endif //_PSTL_EARLYEXIT_PRESENT\n }\n \n template <class _Index, class _DifferenceType, class _Pred>\n _DifferenceType\n __simd_count(_Index __index, _DifferenceType __n, _Pred __pred) noexcept\n {\n     _DifferenceType __count = 0;\n-    __PSTL_PRAGMA_SIMD_REDUCTION(+ : __count)\n+    _PSTL_PRAGMA_SIMD_REDUCTION(+ : __count)\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n         if (__pred(*(__index + __i)))\n             ++__count;\n@@ -235,10 +235,10 @@ __simd_unique_copy(_InputIterator __first, _DifferenceType __n, _OutputIterator\n     _DifferenceType __cnt = 1;\n     __result[0] = __first[0];\n \n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 1; __i < __n; ++__i)\n     {\n-        __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(__cnt : 1)\n+        _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(__cnt : 1)\n         if (!__pred(__first[__i], __first[__i - 1]))\n         {\n             __result[__cnt] = __first[__i];\n@@ -252,8 +252,8 @@ template <class _InputIterator, class _DifferenceType, class _OutputIterator, cl\n _OutputIterator\n __simd_assign(_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _Assigner __assigner) noexcept\n {\n-    __PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED\n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n         __assigner(__first + __i, __result + __i);\n     return __result + __n;\n@@ -265,10 +265,10 @@ __simd_copy_if(_InputIterator __first, _DifferenceType __n, _OutputIterator __re\n {\n     _DifferenceType __cnt = 0;\n \n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n     {\n-        __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(__cnt : 1)\n+        _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(__cnt : 1)\n         if (__pred(__first[__i]))\n         {\n             __result[__cnt] = __first[__i];\n@@ -284,7 +284,7 @@ __simd_calc_mask_2(_InputIterator __first, _DifferenceType __n, bool* __mask, _B\n {\n     _DifferenceType __count = 0;\n \n-    __PSTL_PRAGMA_SIMD_REDUCTION(+ : __count)\n+    _PSTL_PRAGMA_SIMD_REDUCTION(+ : __count)\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n     {\n         __mask[__i] = !__pred(__first[__i], __first[__i - 1]);\n@@ -299,7 +299,7 @@ __simd_calc_mask_1(_InputIterator __first, _DifferenceType __n, bool* __mask, _U\n {\n     _DifferenceType __count = 0;\n \n-    __PSTL_PRAGMA_SIMD_REDUCTION(+ : __count)\n+    _PSTL_PRAGMA_SIMD_REDUCTION(+ : __count)\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n     {\n         __mask[__i] = __pred(__first[__i]);\n@@ -314,12 +314,12 @@ __simd_copy_by_mask(_InputIterator __first, _DifferenceType __n, _OutputIterator\n                     _Assigner __assigner) noexcept\n {\n     _DifferenceType __cnt = 0;\n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n     {\n         if (__mask[__i])\n         {\n-            __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(__cnt : 1)\n+            _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(__cnt : 1)\n             {\n                 __assigner(__first + __i, __result + __cnt);\n                 ++__cnt;\n@@ -334,10 +334,10 @@ __simd_partition_by_mask(_InputIterator __first, _DifferenceType __n, _OutputIte\n                          _OutputIterator2 __out_false, bool* __mask) noexcept\n {\n     _DifferenceType __cnt_true = 0, __cnt_false = 0;\n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n     {\n-        __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(__cnt_true : 1, __cnt_false : 1)\n+        _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(__cnt_true : 1, __cnt_false : 1)\n         if (__mask[__i])\n         {\n             __out_true[__cnt_true] = __first[__i];\n@@ -355,8 +355,8 @@ template <class _Index, class _DifferenceType, class _Tp>\n _Index\n __simd_fill_n(_Index __first, _DifferenceType __n, const _Tp& __value) noexcept\n {\n-    __PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED\n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n         __first[__i] = __value;\n     return __first + __n;\n@@ -366,8 +366,8 @@ template <class _Index, class _DifferenceType, class _Generator>\n _Index\n __simd_generate_n(_Index __first, _DifferenceType __size, _Generator __g) noexcept\n {\n-    __PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED\n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __size; ++__i)\n         __first[__i] = __g();\n     return __first + __size;\n@@ -383,11 +383,11 @@ __simd_adjacent_find(_Index __first, _Index __last, _BinaryPredicate __pred, boo\n     typedef typename std::iterator_traits<_Index>::difference_type _DifferenceType;\n     _DifferenceType __i = 0;\n \n-#if __PSTL_EARLYEXIT_PRESENT\n+#if _PSTL_EARLYEXIT_PRESENT\n     //Some compiler versions fail to compile the following loop when iterators are used. Indices are used instead\n     const _DifferenceType __n = __last - __first - 1;\n-    __PSTL_PRAGMA_VECTOR_UNALIGNED\n-    __PSTL_PRAGMA_SIMD_EARLYEXIT\n+    _PSTL_PRAGMA_VECTOR_UNALIGNED\n+    _PSTL_PRAGMA_SIMD_EARLYEXIT\n     for (; __i < __n; ++__i)\n         if (__pred(__first[__i], __first[__i + 1]))\n             break;\n@@ -401,8 +401,8 @@ __simd_adjacent_find(_Index __first, _Index __last, _BinaryPredicate __pred, boo\n     while (__last - __first >= __block_size)\n     {\n         _DifferenceType __found = 0;\n-        __PSTL_PRAGMA_VECTOR_UNALIGNED // Do not generate peel loop part\n-            __PSTL_PRAGMA_SIMD_REDUCTION(|\n+        _PSTL_PRAGMA_VECTOR_UNALIGNED // Do not generate peel loop part\n+            _PSTL_PRAGMA_SIMD_REDUCTION(|\n                                          : __found) for (__i = 0; __i < __block_size - 1; ++__i)\n         {\n             //TODO: to improve SIMD vectorization\n@@ -446,7 +446,7 @@ template <typename _DifferenceType, typename _Tp, typename _BinaryOperation, typ\n typename std::enable_if<is_arithmetic_plus<_Tp, _BinaryOperation>::value, _Tp>::type\n __simd_transform_reduce(_DifferenceType __n, _Tp __init, _BinaryOperation, _UnaryOperation __f) noexcept\n {\n-    __PSTL_PRAGMA_SIMD_REDUCTION(+ : __init)\n+    _PSTL_PRAGMA_SIMD_REDUCTION(+ : __init)\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n         __init += __f(__i);\n     return __init;\n@@ -463,7 +463,7 @@ __simd_transform_reduce(_Size __n, _Tp __init, _BinaryOperation __binary_op, _Un\n         _Tp* __lane = reinterpret_cast<_Tp*>(__lane_);\n \n         // initializer\n-        __PSTL_PRAGMA_SIMD\n+        _PSTL_PRAGMA_SIMD\n         for (_Size __i = 0; __i < __block_size; ++__i)\n         {\n             ::new (__lane + __i) _Tp(__binary_op(__f(__i), __f(__block_size + __i)));\n@@ -473,14 +473,14 @@ __simd_transform_reduce(_Size __n, _Tp __init, _BinaryOperation __binary_op, _Un\n         const _Size last_iteration = __block_size * (__n / __block_size);\n         for (; __i < last_iteration; __i += __block_size)\n         {\n-            __PSTL_PRAGMA_SIMD\n+            _PSTL_PRAGMA_SIMD\n             for (_Size __j = 0; __j < __block_size; ++__j)\n             {\n                 __lane[__j] = __binary_op(__lane[__j], __f(__i + __j));\n             }\n         }\n         // remainder\n-        __PSTL_PRAGMA_SIMD\n+        _PSTL_PRAGMA_SIMD\n         for (_Size __j = 0; __j < __n - last_iteration; ++__j)\n         {\n             __lane[__j] = __binary_op(__lane[__j], __f(last_iteration + __j));\n@@ -491,7 +491,7 @@ __simd_transform_reduce(_Size __n, _Tp __init, _BinaryOperation __binary_op, _Un\n             __init = __binary_op(__init, __lane[__i]);\n         }\n         // destroyer\n-        __PSTL_PRAGMA_SIMD\n+        _PSTL_PRAGMA_SIMD\n         for (_Size __i = 0; __i < __block_size; ++__i)\n         {\n             __lane[__i].~_Tp();\n@@ -514,11 +514,11 @@ typename std::enable_if<is_arithmetic_plus<_Tp, _BinaryOperation>::value, std::p\n __simd_scan(_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init,\n             _BinaryOperation, /*Inclusive*/ std::false_type)\n {\n-    __PSTL_PRAGMA_SIMD_SCAN(+ : __init)\n+    _PSTL_PRAGMA_SIMD_SCAN(+ : __init)\n     for (_Size __i = 0; __i < __n; ++__i)\n     {\n         __result[__i] = __init;\n-        __PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(__init)\n+        _PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(__init)\n         __init += __unary_op(__first[__i]);\n     }\n     return std::make_pair(__result + __n, __init);\n@@ -552,14 +552,14 @@ __simd_scan(_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryO\n     typedef _Combiner<_Tp, _BinaryOperation> _CombinerType;\n     _CombinerType __init_{__init, &__binary_op};\n \n-    __PSTL_PRAGMA_DECLARE_REDUCTION(__bin_op, _CombinerType)\n+    _PSTL_PRAGMA_DECLARE_REDUCTION(__bin_op, _CombinerType)\n \n-    __PSTL_PRAGMA_SIMD_SCAN(__bin_op : __init_)\n+    _PSTL_PRAGMA_SIMD_SCAN(__bin_op : __init_)\n     for (_Size __i = 0; __i < __n; ++__i)\n     {\n         __result[__i] = __init_.__value;\n-        __PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(__init_)\n-        __PSTL_PRAGMA_FORCEINLINE\n+        _PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(__init_)\n+        _PSTL_PRAGMA_FORCEINLINE\n         __init_.__value = __binary_op(__init_.__value, __unary_op(__first[__i]));\n     }\n     return std::make_pair(__result + __n, __init_.__value);\n@@ -572,11 +572,11 @@ typename std::enable_if<is_arithmetic_plus<_Tp, _BinaryOperation>::value, std::p\n __simd_scan(_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init,\n             _BinaryOperation, /*Inclusive*/ std::true_type)\n {\n-    __PSTL_PRAGMA_SIMD_SCAN(+ : __init)\n+    _PSTL_PRAGMA_SIMD_SCAN(+ : __init)\n     for (_Size __i = 0; __i < __n; ++__i)\n     {\n         __init += __unary_op(__first[__i]);\n-        __PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(__init)\n+        _PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(__init)\n         __result[__i] = __init;\n     }\n     return std::make_pair(__result + __n, __init);\n@@ -592,14 +592,14 @@ __simd_scan(_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryO\n     typedef _Combiner<_Tp, _BinaryOperation> _CombinerType;\n     _CombinerType __init_{__init, &__binary_op};\n \n-    __PSTL_PRAGMA_DECLARE_REDUCTION(__bin_op, _CombinerType)\n+    _PSTL_PRAGMA_DECLARE_REDUCTION(__bin_op, _CombinerType)\n \n-    __PSTL_PRAGMA_SIMD_SCAN(__bin_op : __init_)\n+    _PSTL_PRAGMA_SIMD_SCAN(__bin_op : __init_)\n     for (_Size __i = 0; __i < __n; ++__i)\n     {\n-        __PSTL_PRAGMA_FORCEINLINE\n+        _PSTL_PRAGMA_FORCEINLINE\n         __init_.__value = __binary_op(__init_.__value, __unary_op(__first[__i]));\n-        __PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(__init_)\n+        _PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(__init_)\n         __result[__i] = __init_.__value;\n     }\n     return std::make_pair(__result + __n, __init_.__value);\n@@ -633,7 +633,7 @@ __simd_min_element(_ForwardIterator __first, _Size __n, _Compare __comp) noexcep\n         {\n         }\n \n-        __PSTL_PRAGMA_DECLARE_SIMD\n+        _PSTL_PRAGMA_DECLARE_SIMD\n         void\n         operator()(const _ComplexType& __obj)\n         {\n@@ -648,9 +648,9 @@ __simd_min_element(_ForwardIterator __first, _Size __n, _Compare __comp) noexcep\n \n     _ComplexType __init{*__first, &__comp};\n \n-    __PSTL_PRAGMA_DECLARE_REDUCTION(__min_func, _ComplexType)\n+    _PSTL_PRAGMA_DECLARE_REDUCTION(__min_func, _ComplexType)\n \n-    __PSTL_PRAGMA_SIMD_REDUCTION(__min_func : __init)\n+    _PSTL_PRAGMA_SIMD_REDUCTION(__min_func : __init)\n     for (_Size __i = 1; __i < __n; ++__i)\n     {\n         const _ValueType __min_val = __init.__min_val;\n@@ -727,9 +727,9 @@ __simd_minmax_element(_ForwardIterator __first, _Size __n, _Compare __comp) noex\n \n     _ComplexType __init{*__first, *__first, &__comp};\n \n-    __PSTL_PRAGMA_DECLARE_REDUCTION(__min_func, _ComplexType);\n+    _PSTL_PRAGMA_DECLARE_REDUCTION(__min_func, _ComplexType);\n \n-    __PSTL_PRAGMA_SIMD_REDUCTION(__min_func : __init)\n+    _PSTL_PRAGMA_SIMD_REDUCTION(__min_func : __init)\n     for (_Size __i = 1; __i < __n; ++__i)\n     {\n         auto __min_val = __init.__min_val;\n@@ -757,10 +757,10 @@ __simd_partition_copy(_InputIterator __first, _DifferenceType __n, _OutputIterat\n {\n     _DifferenceType __cnt_true = 0, __cnt_false = 0;\n \n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 0; __i < __n; ++__i)\n     {\n-        __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(__cnt_true : 1, __cnt_false : 1)\n+        _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(__cnt_true : 1, __cnt_false : 1)\n         if (__pred(__first[__i]))\n         {\n             __out_true[__cnt_true] = __first[__i];\n@@ -837,10 +837,10 @@ __simd_remove_if(_RandomAccessIterator __first, _DifferenceType __n, _UnaryPredi\n     }\n \n     _DifferenceType __cnt = 0;\n-    __PSTL_PRAGMA_SIMD\n+    _PSTL_PRAGMA_SIMD\n     for (_DifferenceType __i = 1; __i < __n; ++__i)\n     {\n-        __PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(__cnt : 1)\n+        _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(__cnt : 1)\n         if (!__pred(__current[__i]))\n         {\n             __current[__cnt] = std::move(__current[__i]);\n@@ -852,4 +852,4 @@ __simd_remove_if(_RandomAccessIterator __first, _DifferenceType __n, _UnaryPredi\n } // namespace __unseq_backend\n } // namespace __pstl\n \n-#endif /* __PSTL_unseq_backend_simd_H */\n+#endif /* _PSTL_UNSEQ_BACKEND_SIMD_H */"}, {"sha": "1711f292678855d60248dff37baf21c2bceaa512", "filename": "libstdc++-v3/include/pstl/utils.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Futils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Futils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Futils.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,8 +7,8 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_utils_H\n-#define __PSTL_utils_H\n+#ifndef _PSTL_UTILS_H\n+#define _PSTL_UTILS_H\n \n #include <new>\n #include <iterator>\n@@ -219,4 +219,4 @@ __cmp_iterators_by_values(_ForwardIterator __a, _ForwardIterator __b, _Compare _\n } // namespace __internal\n } // namespace __pstl\n \n-#endif /* __PSTL_utils_H */\n+#endif /* _PSTL_UTILS_H */"}, {"sha": "18182965fb191eb654b9972c03ae0c404801d0d4", "filename": "libstdc++-v3/include/std/algorithm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fstd%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fstd%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Falgorithm?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -63,13 +63,13 @@\n \n #if __cplusplus > 201402L\n // Parallel STL algorithms\n-# if __PSTL_EXECUTION_POLICIES_DEFINED\n+# if _PSTL_EXECUTION_POLICIES_DEFINED\n // If <execution> has already been included, pull in implementations\n #  include <pstl/glue_algorithm_impl.h>\n #  else\n // Otherwise just pull in forward declarations\n #    include <pstl/glue_algorithm_defs.h>\n-#    define __PSTL_ALGORITHM_FORWARD_DECLARED 1\n+#    define _PSTL_ALGORITHM_FORWARD_DECLARED 1\n #  endif\n \n // Feature test macro for parallel algorithms"}, {"sha": "e161864d24bd3a3f94cdf6b2bcd57b121b748add", "filename": "libstdc++-v3/include/std/execution", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fexecution", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fexecution", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fexecution?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -31,20 +31,20 @@\n # include <bits/c++config.h>\n # include <pstl/glue_execution_defs.h>\n \n-# define __PSTL_EXECUTION_POLICIES_DEFINED 1\n+# define _PSTL_EXECUTION_POLICIES_DEFINED 1\n \n // Algorithm implementation\n-# if __PSTL_ALGORITHM_FORWARD_DECLARED\n+# if _PSTL_ALGORITHM_FORWARD_DECLARED\n #  include <pstl/glue_algorithm_impl.h>\n # endif\n \n // Numeric implementation\n-# if __PSTL_NUMERIC_FORWARD_DECLARED\n+# if _PSTL_NUMERIC_FORWARD_DECLARED\n #  include <pstl/glue_numeric_impl.h>\n # endif\n \n // Memory implementation\n-# if __PSTL_NUMERIC_FORWARD_DECLARED\n+# if _PSTL_NUMERIC_FORWARD_DECLARED\n #  include <pstl/glue_memory_impl.h>\n # endif\n "}, {"sha": "1fb4a5f956c9c447afaeda9cf9b440c4c3dd6a39", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -398,7 +398,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L\n // Parallel STL algorithms\n-# if __PSTL_EXECUTION_POLICIES_DEFINED\n+# if _PSTL_EXECUTION_POLICIES_DEFINED\n // If <execution> has already been included, pull in implementations\n #  include <pstl/glue_memory_impl.h>\n # else"}, {"sha": "def1debf754dc8fccba7d2084f1c70f8ddb6b967", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -206,13 +206,13 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L\n // Parallel STL algorithms\n-# if __PSTL_EXECUTION_POLICIES_DEFINED\n+# if _PSTL_EXECUTION_POLICIES_DEFINED\n // If <execution> has already been included, pull in implementations\n #  include <pstl/glue_numeric_impl.h>\n # else\n // Otherwise just pull in forward declarations\n #  include <pstl/glue_numeric_defs.h>\n-#  define __PSTL_NUMERIC_FORWARD_DECLARED 1\n+#  define _PSTL_NUMERIC_FORWARD_DECLARED 1\n # endif\n \n // Feature test macro for parallel algorithms"}, {"sha": "4f1911e51f325ef2983c996ea558550935a15414", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/pstl/uninitialized_construct.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fpstl%2Funinitialized_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fpstl%2Funinitialized_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fpstl%2Funinitialized_construct.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -116,7 +116,7 @@ main()\n {\n \n     // for user-defined types\n-#if !__PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN\n+#if !_PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN\n     test_uninit_construct_by_type<Wrapper<int32_t>>();\n     test_uninit_construct_by_type<Wrapper<std::vector<std::string>>>();\n #endif"}, {"sha": "2ecfde28591eb1df657f6eceead11ef6790dc419", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/pstl/uninitialized_copy_move.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fpstl%2Funinitialized_copy_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fpstl%2Funinitialized_copy_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fpstl%2Funinitialized_copy_move.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -80,7 +80,7 @@ struct test_uninitialized_copy_move\n         std::destroy_n(exec, out_first, n);\n     }\n \n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN || __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN || _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN\n     template <typename InputIterator, typename OutputIterator>\n     void\n     operator()(pstl::execution::unsequenced_policy, InputIterator first, InputIterator last, OutputIterator out_first,\n@@ -142,8 +142,8 @@ main()\n     test_uninitialized_copy_move_by_type<float64_t>();\n \n     // for user-defined types\n-#if !__PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN && !__PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN &&   \\\n-    !__PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN\n+#if !_PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN && !_PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN &&   \\\n+    !_PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN\n     test_uninitialized_copy_move_by_type<Wrapper<int8_t>>();\n #endif\n "}, {"sha": "a20bdf9afa68f36d8d8658f3eb19bc5d60fbb526", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_merge/inplace_merge.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_merge%2Finplace_merge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_merge%2Finplace_merge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_merge%2Finplace_merge.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -29,8 +29,8 @@ using namespace TestUtils;\n \n struct test_one_policy\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n     template <typename BiDirIt1, typename Size, typename Generator1, typename Generator2, typename Compare>\n     void\n     operator()(pstl::execution::unsequenced_policy, BiDirIt1 first1, BiDirIt1 last1, BiDirIt1 first2, BiDirIt1 last2,"}, {"sha": "3d450b9721020635e490e7278f1fa915866a1b9e", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_merge/merge.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_merge%2Fmerge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_merge%2Fmerge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_merge%2Fmerge.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -111,7 +111,7 @@ main()\n     test_merge_by_type<int32_t>([](size_t v) { return (v % 2 == 0 ? v : -v) * 3; }, [](size_t v) { return v * 2; });\n     test_merge_by_type<float64_t>([](size_t v) { return float64_t(v); }, [](size_t v) { return float64_t(v - 100); });\n \n-#if !__PSTL_ICC_16_17_TEST_64_TIMEOUT\n+#if !_PSTL_ICC_16_17_TEST_64_TIMEOUT\n     test_merge_by_type<Wrapper<int16_t>>([](size_t v) { return Wrapper<int16_t>(v % 100); },\n                                          [](size_t v) { return Wrapper<int16_t>(v % 10); });\n #endif"}, {"sha": "fa4104a0092b3716b4e2c37d3acdcd03eaf3d3b3", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/copy_if.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fcopy_if.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fcopy_if.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fcopy_if.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -28,7 +28,7 @@ using namespace TestUtils;\n \n struct run_copy_if\n {\n-#if __PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN // dummy specializations to skip testing in case of broken configuration\n+#if _PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN // dummy specializations to skip testing in case of broken configuration\n     template <typename InputIterator, typename OutputIterator, typename OutputIterator2, typename Size,\n               typename Predicate, typename T>\n     void\n@@ -139,11 +139,11 @@ main()\n     test<int32_t>(-666, [](const int32_t& x) { return x != 42; },\n                   [](size_t j) { return ((j + 1) % 5 & 2) != 0 ? int32_t(j + 1) : 42; });\n \n-#if !__PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n+#if !_PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n     test<Number>(Number(42, OddTag()), IsMultiple(3, OddTag()), [](int32_t j) { return Number(j, OddTag()); });\n #endif\n \n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n     test<int32_t>(-666, [](const int32_t& x) { return true; }, [](size_t j) { return j; }, false);\n #endif\n "}, {"sha": "f711b90f8f6d53e31c5ea595e20ac61083151e3b", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/copy_move.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fcopy_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fcopy_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fcopy_move.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -30,8 +30,8 @@ using namespace TestUtils;\n struct run_copy\n {\n \n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename InputIterator, typename OutputIterator, typename OutputIterator2, typename Size, typename T>\n     void\n     operator()(pstl::execution::unsequenced_policy, InputIterator first, InputIterator last, OutputIterator out_first,\n@@ -83,8 +83,8 @@ template <typename T>\n struct run_move\n {\n \n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename InputIterator, typename OutputIterator, typename OutputIterator2, typename Size>\n     void\n     operator()(pstl::execution::unsequenced_policy, InputIterator first, InputIterator last, OutputIterator out_first,\n@@ -126,8 +126,8 @@ template <typename T>\n struct run_move<Wrapper<T>>\n {\n \n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename InputIterator, typename OutputIterator, typename OutputIterator2, typename Size>\n     void\n     operator()(pstl::execution::unsequenced_policy, InputIterator first, InputIterator last, OutputIterator out_first,\n@@ -199,7 +199,7 @@ main()\n     test<int32_t>(-666, [](size_t j) { return int32_t(j); });\n     test<Wrapper<float64_t>>(Wrapper<float64_t>(-666.0), [](int32_t j) { return Wrapper<float64_t>(j); });\n \n-#if !__PSTL_ICC_16_17_TEST_64_TIMEOUT\n+#if !_PSTL_ICC_16_17_TEST_64_TIMEOUT\n     test<float64_t>(-666.0, [](size_t j) { return float64_t(j); });\n     test<Number>(Number(42, OddTag()), [](int32_t j) { return Number(j, OddTag()); });\n #endif"}, {"sha": "86c03412aee11f52a82879f103768b777b11eb3e", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/is_partitioned.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fis_partitioned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fis_partitioned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fis_partitioned.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -28,7 +28,7 @@ using namespace TestUtils;\n struct test_one_policy\n {\n     //dummy specialization by policy type, in case of broken configuration\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN || __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN || _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN\n \n     template <typename Iterator1, typename Predicate>\n     void\n@@ -97,7 +97,7 @@ main()\n     test<float64_t>([](const float64_t x) { return x < 0; });\n     test<int32_t>([](const int32_t x) { return x > 1000; });\n     test<uint16_t>([](const uint16_t x) { return x % 5 < 3; });\n-#if !__PSTL_ICC_18_TEST_EARLY_EXIT_MONOTONIC_RELEASE_BROKEN && !__PSTL_ICC_19_TEST_IS_PARTITIONED_RELEASE_BROKEN\n+#if !_PSTL_ICC_18_TEST_EARLY_EXIT_MONOTONIC_RELEASE_BROKEN && !_PSTL_ICC_19_TEST_IS_PARTITIONED_RELEASE_BROKEN\n     test<LocalWrapper<float64_t>>([](const LocalWrapper<float64_t>& x) { return true; });\n #endif\n "}, {"sha": "beff2b920ddec907924c27f6015f97b4b69e90af", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/partition.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fpartition.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fpartition.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fpartition.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -72,8 +72,8 @@ is_equal(Iterator first, Iterator last, Iterator d_first)\n \n struct test_one_policy\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specializations to skip testing in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specializations to skip testing in case of broken configuration\n     template <typename BiDirIt, typename Size, typename UnaryOp, typename Generator>\n     void\n     operator()(__pstl::execution::unsequenced_policy, BiDirIt first, BiDirIt last, BiDirIt exp_first, BiDirIt exp_last,\n@@ -87,7 +87,7 @@ struct test_one_policy\n                BiDirIt exp_last, Size n, UnaryOp unary_op, Generator generator)\n     {\n     }\n-#elif __PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN //dummy specializations to skip testing in case of broken configuration\n+#elif _PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN //dummy specializations to skip testing in case of broken configuration\n     template <typename BiDirIt, typename Size, typename UnaryOp, typename Generator>\n     void\n     operator()(__pstl::execution::parallel_policy, BiDirIt first, BiDirIt last, BiDirIt exp_first, BiDirIt exp_last,\n@@ -172,7 +172,7 @@ struct test_non_const\n int32_t\n main()\n {\n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n     test_by_type<int32_t>([](int32_t i) { return i; }, [](int32_t) { return true; });\n #endif\n     test_by_type<float64_t>([](int32_t i) { return -i; }, [](const float64_t x) { return x < 0; });"}, {"sha": "b10fa64ab097e8aa9d51283b36964a663c55eb0d", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/partition_copy.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fpartition_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fpartition_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fpartition_copy.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -48,7 +48,7 @@ struct test_partition_copy\n     }\n \n     //dummy specialization by iterator type and policy type, in case of broken configuration\n-#if __PSTL_ICC_1800_TEST_MONOTONIC_RELEASE_64_BROKEN\n+#if _PSTL_ICC_1800_TEST_MONOTONIC_RELEASE_64_BROKEN\n     template <typename InputIterator, typename OutputIterator, typename OutputIterator2, typename UnaryOp>\n     void\n     operator()(pstl::execution::unsequenced_policy, std::reverse_iterator<InputIterator> first,\n@@ -110,7 +110,7 @@ main()\n {\n     test<int32_t>([](const int32_t value) { return value % 2; });\n \n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n     test<int32_t>([](const int32_t value) { return true; });\n #endif\n "}, {"sha": "c99e40c99fcccaaf18527d5de1c94bd0e585191e", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/remove.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fremove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fremove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Fremove.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -28,8 +28,8 @@ using namespace TestUtils;\n \n struct run_remove\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename InputIterator, typename OutputIterator, typename Size, typename T>\n     void\n     operator()(pstl::execution::unsequenced_policy, InputIterator first, InputIterator last, OutputIterator out_first,\n@@ -66,8 +66,8 @@ struct run_remove\n \n struct run_remove_if\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename InputIterator, typename OutputIterator, typename Size, typename Predicate>\n     void\n     operator()(pstl::execution::unsequenced_policy, InputIterator first, InputIterator last, OutputIterator out_first,\n@@ -140,7 +140,7 @@ struct test_non_const\n int32_t\n main()\n {\n-#if !__PSTL_ICC_18_TEST_EARLY_EXIT_MONOTONIC_RELEASE_BROKEN\n+#if !_PSTL_ICC_18_TEST_EARLY_EXIT_MONOTONIC_RELEASE_BROKEN\n     test<int32_t>(666, 42, [](int32_t val) { return true; }, [](size_t j) { return j; });\n #endif\n \n@@ -149,7 +149,7 @@ main()\n     test<float64_t>(-666.0, 8.5, [](const float64_t& val) { return val != 8.5; },\n                     [](size_t j) { return ((j + 1) % 7 & 2) != 0 ? 8.5 : float64_t(j % 32 + j); });\n \n-#if !__PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n+#if !_PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n     test<Number>(Number(-666, OddTag()), Number(42, OddTag()), IsMultiple(3, OddTag()),\n                  [](int32_t j) { return Number(j, OddTag()); });\n #endif"}, {"sha": "b36ce9af4b960bc9789788a92d5254ff7cd04c7c", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/replace_copy.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Freplace_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Freplace_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Freplace_copy.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -100,7 +100,7 @@ main()\n     test<int32_t>(-666, 42, 99, [](const int32_t& x) { return x != 42; },\n                   [](size_t j) { return ((j + 1) % 5 & 2) != 0 ? 42 : -1 - int32_t(j); });\n \n-#if !__PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n+#if !_PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n     test<Number>(Number(42, OddTag()), Number(2001, OddTag()), Number(2017, OddTag()), IsMultiple(3, OddTag()),\n                  [](int32_t j) { return ((j + 1) % 3 & 2) != 0 ? Number(2001, OddTag()) : Number(j, OddTag()); });\n #endif"}, {"sha": "228293ff7b3166705f11011c99251ae9c6dd1577", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/rotate.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Frotate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Frotate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Frotate.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -82,8 +82,8 @@ struct compare<wrapper<T>>\n struct test_one_policy\n {\n \n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specializations to skip testing in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specializations to skip testing in case of broken configuration\n     template <typename Iterator, typename Size>\n     void\n     operator()(__pstl::execution::unsequenced_policy, Iterator data_b, Iterator data_e, Iterator actual_b,"}, {"sha": "802b7cb4ed55df0797c7c30a6bab9dc849521ff4", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/rotate_copy.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Frotate_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Frotate_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Frotate_copy.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -77,8 +77,8 @@ struct comparator\n struct test_one_policy\n {\n \n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator1, typename Iterator2>\n     typename std::enable_if<is_same_iterator_category<Iterator1, std::random_access_iterator_tag>::value, void>::type\n     operator()(pstl::execution::unsequenced_policy, Iterator1 data_b, Iterator1 data_e, Iterator2 actual_b,"}, {"sha": "0c35179c59f6a9b732920afda47ebea2a0a4803d", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/unique.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Funique.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Funique.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Funique.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -28,8 +28,8 @@ using namespace TestUtils;\n \n struct run_unique\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename ForwardIt, typename Generator>\n     void\n     operator()(pstl::execution::unsequenced_policy, ForwardIt first1, ForwardIt last1, ForwardIt first2,\n@@ -146,7 +146,7 @@ struct test_non_const\n int32_t\n main()\n {\n-#if !__PSTL_ICC_16_17_18_TEST_UNIQUE_MASK_RELEASE_BROKEN\n+#if !_PSTL_ICC_16_17_18_TEST_UNIQUE_MASK_RELEASE_BROKEN\n     test<int32_t>([](size_t j) { return j / 3; },\n                   [](const int32_t& val1, const int32_t& val2) { return val1 * val1 == val2 * val2; });\n     test<float64_t>([](size_t) { return float64_t(1); },"}, {"sha": "2bbd104f5e45c7a5eeab0a612a244890434baa73", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_modifying_operations/unique_copy_equal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Funique_copy_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Funique_copy_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_modifying_operations%2Funique_copy_equal.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -28,7 +28,7 @@ using namespace TestUtils;\n \n struct run_unique_copy\n {\n-#if __PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN // dummy specializations to skip testing in case of broken configuration\n+#if _PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN // dummy specializations to skip testing in case of broken configuration\n     template <typename InputIterator, typename OutputIterator, typename OutputIterator2, typename Size,\n               typename Predicate, typename T>\n     void\n@@ -130,7 +130,7 @@ main(int32_t argc, char* argv[])\n \n     test<float32_t>(float32_t(42), std::equal_to<float32_t>(),\n                     [](int32_t j) { return float32_t(5 * j / 23 ^ (j / 7)); });\n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n     test<float32_t>(float32_t(42), [](float32_t x, float32_t y) { return false; },\n                     [](int32_t j) { return float32_t(j); }, false);\n #endif"}, {"sha": "c9cd76cc7e481b150126bf3c543bb2a8f7056a2b", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/all_of.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fall_of.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fall_of.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fall_of.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -113,7 +113,7 @@ main()\n     test<int32_t>(8 * sizeof(int32_t));\n     test<uint16_t>(8 * sizeof(uint16_t));\n     test<float64_t>(53);\n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n     test<bool>(1);\n #endif\n "}, {"sha": "dba66415eed23324e6a1b66e934129944f39a3c3", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/any_of.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fany_of.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fany_of.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fany_of.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -99,7 +99,7 @@ main()\n     test<int32_t>(8 * sizeof(int32_t));\n     test<uint16_t>(8 * sizeof(uint16_t));\n     test<float64_t>(53);\n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n     test<bool>(1);\n #endif\n "}, {"sha": "6f3916851642e07d9faa7b2303e1e73a93ef3a6e", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/count.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fcount.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fcount.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fcount.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -101,7 +101,7 @@ int32_t\n main()\n {\n     test<int32_t>(42, IsEqual<int32_t>(50, OddTag()), [](int32_t j) { return j; });\n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN\n     test<int32_t>(42, [](const int32_t& x) { return true; }, [](int32_t j) { return j; });\n #endif\n     test<float64_t>(42, IsEqual<float64_t>(50, OddTag()), [](int32_t j) { return float64_t(j); });"}, {"sha": "e4dece259df747f01eeb27157c49b4f0101a4d08", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fequal.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -163,7 +163,7 @@ main()\n     test<int32_t>(8 * sizeof(int32_t));\n     test<uint16_t>(8 * sizeof(uint16_t));\n     test<float64_t>(53);\n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n     test<bool>(1);\n #endif\n     test<UserType>(256);"}, {"sha": "1aad79f39bf0031d6f03b1eb1bbcf8906b7e6322", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/find.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -28,8 +28,8 @@ using namespace TestUtils;\n \n struct test_find\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator, typename Value>\n     void\n     operator()(pstl::execution::unsequenced_policy, Iterator first, Iterator last, Value value)"}, {"sha": "0959b96bde37f62a5a1c1f34f9678f8832fcf8d5", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/find_end.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_end.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_end.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_end.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -27,8 +27,8 @@ using namespace TestUtils;\n \n struct test_one_policy\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator1, typename Iterator2, typename Predicate>\n     void\n     operator()(pstl::execution::unsequenced_policy, Iterator1 b, Iterator1 e, Iterator2 bsub, Iterator2 esub,\n@@ -119,7 +119,7 @@ main()\n     test<int32_t>(8 * sizeof(int32_t));\n     test<uint16_t>(8 * sizeof(uint16_t));\n     test<float64_t>(53);\n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n     test<bool>(1);\n #endif\n "}, {"sha": "e0b1344d1bffc9abc9fbb2ab6478256eb34169cb", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/find_first_of.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_first_of.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_first_of.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_first_of.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -27,8 +27,8 @@ using namespace TestUtils;\n \n struct test_one_policy\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator1, typename Iterator2, typename Predicate>\n     void\n     operator()(pstl::execution::unsequenced_policy, Iterator1 b, Iterator1 e, Iterator2 bsub, Iterator2 esub,"}, {"sha": "b4ecdb0db4a095fe29a1eb80d704aee19a687aed", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/find_if.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_if.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_if.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Ffind_if.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -28,8 +28,8 @@ using namespace TestUtils;\n \n struct test_find_if\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator, typename Predicate, typename NotPredicate>\n     void\n     operator()(pstl::execution::unsequenced_policy, Iterator first, Iterator last, Predicate pred,\n@@ -99,7 +99,7 @@ struct test_non_const\n int32_t\n main()\n {\n-#if !__PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n+#if !_PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n     // Note that the \"hit\" and \"miss\" functions here avoid overflow issues.\n     test<Number>(IsMultiple(5, OddTag()), [](int32_t j) { return Number(j - j % 5, OddTag()); }, // hit\n                  [](int32_t j) { return Number(j % 5 == 0 ? j ^ 1 : j, OddTag()); });            // miss"}, {"sha": "9d34da827e05d016e524b94233a8749251e88f9a", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/none_of.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fnone_of.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fnone_of.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fnone_of.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -97,7 +97,7 @@ main()\n     test<int32_t>(8 * sizeof(int32_t));\n     test<uint16_t>(8 * sizeof(uint16_t));\n     test<float64_t>(53);\n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n     test<bool>(1);\n #endif\n "}, {"sha": "54fd817e8e6e563bb6798fb205496a90d49c1da3", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/nth_element.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fnth_element.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fnth_element.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fnth_element.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -77,8 +77,8 @@ is_equal(const T& x, const T& y)\n \n struct test_one_policy\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator1, typename Size, typename Generator1, typename Generator2, typename Compare>\n     typename std::enable_if<is_same_iterator_category<Iterator1, std::random_access_iterator_tag>::value, void>::type\n     operator()(pstl::execution::unsequenced_policy, Iterator1 first1, Iterator1 last1, Iterator1 first2,"}, {"sha": "ec41df3bf067099bd284ed0ccc354c17d9c57ff3", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/reverse.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Freverse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Freverse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Freverse.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -29,8 +29,8 @@ using namespace TestUtils;\n \n struct test_one_policy\n {\n-#if __PSTL_ICC_18_VC141_TEST_SIMD_LAMBDA_RELEASE_BROKEN || __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||     \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_18_VC141_TEST_SIMD_LAMBDA_RELEASE_BROKEN || _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||     \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator1, typename Iterator2>\n     typename std::enable_if<is_same_iterator_category<Iterator1, std::random_access_iterator_tag>::value, void>::type\n     operator()(pstl::execution::unsequenced_policy, Iterator1 data_b, Iterator1 data_e, Iterator2 actual_b,\n@@ -103,7 +103,7 @@ main()\n     test<int32_t>();\n     test<uint16_t>();\n     test<float64_t>();\n-#if !__PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n+#if !_PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN\n     test<wrapper<float64_t>>();\n #endif\n "}, {"sha": "efd16a9104ee6680e6a74b17ddb8f815b2b33732", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/reverse_copy.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Freverse_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Freverse_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Freverse_copy.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -69,8 +69,8 @@ struct test_one_policy\n     Iterator data_e;\n     test_one_policy(Iterator b, Iterator e) : data_b(b), data_e(e) {}\n \n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator1>\n     typename std::enable_if<is_same_iterator_category<Iterator1, std::random_access_iterator_tag>::value, void>::type\n     operator()(pstl::execution::unsequenced_policy, Iterator1 actual_b, Iterator1 actual_e)"}, {"sha": "f587bba71721219ab1ecb44a70d6965a194516f4", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_nonmodifying/search_n.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fsearch_n.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fsearch_n.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_nonmodifying%2Fsearch_n.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -27,8 +27,8 @@ using namespace TestUtils;\n \n struct test_one_policy\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator, typename Size, typename T, typename Predicate>\n     void\n     operator()(pstl::execution::unsequenced_policy, Iterator b, Iterator e, Size count, const T& value, Predicate pred)\n@@ -105,7 +105,7 @@ main()\n     test<int32_t>();\n     test<uint16_t>();\n     test<float64_t>();\n-#if !__PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n+#if !_PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN\n     test<bool>();\n #endif\n "}, {"sha": "76c1081ee8a9bdccda3e79fd80aa17e312f7a0c0", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_sorting/is_heap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Fis_heap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Fis_heap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Fis_heap.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -42,8 +42,8 @@ struct WithCmpOp\n \n struct test_is_heap\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator, typename Predicate>\n     typename std::enable_if<is_same_iterator_category<Iterator, std::random_access_iterator_tag>::value, void>::type\n     operator()(pstl::execution::unsequenced_policy, Iterator first, Iterator last, Predicate pred)"}, {"sha": "5fce08bd674948d777fcc26744644990656f459f", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_sorting/lexicographical_compare.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Flexicographical_compare.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Flexicographical_compare.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Flexicographical_compare.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -169,7 +169,7 @@ main()\n {\n     test<uint16_t, float64_t>(std::less<float64_t>());\n     test<float32_t, int32_t>(std::greater<float32_t>());\n-#if !__PSTL_ICC_18_TEST_EARLY_EXIT_AVX_RELEASE_BROKEN\n+#if !_PSTL_ICC_18_TEST_EARLY_EXIT_AVX_RELEASE_BROKEN\n     test<float64_t, int32_t>([](const float64_t x, const int32_t y) { return x * x < y * y; });\n #endif\n     test<LocalWrapper<int32_t>, LocalWrapper<int32_t>>("}, {"sha": "e99f5931257f57b057d438ab50a49b052aad75db", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_sorting/partial_sort.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Fpartial_sort.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Fpartial_sort.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Fpartial_sort.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -90,7 +90,7 @@ struct test_brick_partial_sort\n             if (m1 - first > 1)\n             {\n                 auto complex = std::ceil(n * std::log(float32_t(m1 - first)));\n-#if __PSTL_USE_PAR_POLICIES\n+#if _PSTL_USE_PAR_POLICIES\n                 auto p = tbb::this_task_arena::max_concurrency();\n #else\n                 auto p = 1;"}, {"sha": "fde44d5399e5f5d1e1420531669caf9b4eded556", "filename": "libstdc++-v3/testsuite/25_algorithms/pstl/alg_sorting/partial_sort_copy.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Fpartial_sort_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Fpartial_sort_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpstl%2Falg_sorting%2Fpartial_sort_copy.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -63,8 +63,8 @@ struct test_one_policy\n         : d_first(b1), d_last(e1), exp_first(b2), exp_last(e2)\n     {\n     }\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n     template <typename InputIterator, typename Size, typename T, typename Compare>\n     void\n     operator()(pstl::execution::unsequenced_policy, InputIterator first, InputIterator last, Size n1, Size n2,"}, {"sha": "14246d8f0d0e13951e3e6ae1fb462b87e488edc6", "filename": "libstdc++-v3/testsuite/26_numerics/pstl/numeric_ops/adjacent_difference.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Fadjacent_difference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Fadjacent_difference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Fadjacent_difference.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -101,8 +101,8 @@ compute_and_check(Iterator1 first, Iterator1 last, Iterator2 d_first, T, Functio\n \n struct test_one_policy\n {\n-#if __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n-    __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN ||                                                            \\\n+    _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN // dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator1, typename Iterator2, typename T, typename Function>\n     typename std::enable_if<is_same_iterator_category<Iterator1, std::random_access_iterator_tag>::value, void>::type\n     operator()(pstl::execution::unsequenced_policy, Iterator1 data_b, Iterator1 data_e, Iterator2 actual_b,"}, {"sha": "266af3a32cd67a6de90a980fd628545e0e77bf09", "filename": "libstdc++-v3/testsuite/26_numerics/pstl/numeric_ops/reduce.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Freduce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Freduce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Freduce.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -61,7 +61,7 @@ test_long_form(T init, BinaryOp binary_op, F f)\n struct test_two_short_forms\n {\n \n-#if __PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN //dummy specialization by policy type, in case of broken configuration\n+#if _PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN //dummy specialization by policy type, in case of broken configuration\n     template <typename Iterator>\n     void\n     operator()(__pstl::execution::parallel_policy, Iterator first, Iterator last, Sum init, Sum expected)"}, {"sha": "c47eb23427ad0703fe8e912c1e85b7ed0f556784", "filename": "libstdc++-v3/testsuite/26_numerics/pstl/numeric_ops/scan.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Fscan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Fscan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Fscan.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -191,7 +191,7 @@ main()\n     for (int32_t mode = 0; mode < 2; ++mode)\n     {\n         inclusive = mode != 0;\n-#if !__PSTL_ICC_19_TEST_SIMD_UDS_WINDOWS_RELEASE_BROKEN\n+#if !_PSTL_ICC_19_TEST_SIMD_UDS_WINDOWS_RELEASE_BROKEN\n         // Test with highly restricted type and associative but not commutative operation\n         test_matrix<Matrix2x2<int32_t>, Matrix2x2<int32_t>>(Matrix2x2<int32_t>(), multiply_matrix<int32_t>,\n                                                             Matrix2x2<int32_t>(-666, 666));"}, {"sha": "eb2694e73c3120ff8c6a405e9cf9cc0e0f46c32a", "filename": "libstdc++-v3/testsuite/26_numerics/pstl/numeric_ops/transform_scan.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Ftransform_scan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Ftransform_scan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpstl%2Fnumeric_ops%2Ftransform_scan.cc?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -172,7 +172,7 @@ main()\n     for (int32_t mode = 0; mode < 2; ++mode)\n     {\n         inclusive = mode != 0;\n-#if !__PSTL_ICC_19_TEST_SIMD_UDS_WINDOWS_RELEASE_BROKEN\n+#if !_PSTL_ICC_19_TEST_SIMD_UDS_WINDOWS_RELEASE_BROKEN\n         test_matrix<Matrix2x2<int32_t>, Matrix2x2<int32_t>>([](const Matrix2x2<int32_t> x) { return x; },\n                                                             Matrix2x2<int32_t>(), multiply_matrix<int32_t>,\n                                                             Matrix2x2<int32_t>(-666, 666));"}, {"sha": "5bbad8588c4dfee6678842996480e8a3485547be", "filename": "libstdc++-v3/testsuite/util/pstl/pstl_test_config.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fpstl%2Fpstl_test_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fpstl%2Fpstl_test_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fpstl%2Fpstl_test_config.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -7,43 +7,43 @@\n //\n //===----------------------------------------------------------------------===//\n \n-#ifndef __PSTL_TEST_config_H\n-#define __PSTL_TEST_config_H\n+#ifndef _PSTL_TEST_CONFIG_H\n+#define _PSTL_TEST_CONFIG_H\n \n #if defined(_MSC_VER) && defined(_DEBUG)\n #define _SCL_SECURE_NO_WARNINGS //to prevent the compilation warning. Microsoft STL implementation has specific checking of an iterator range in DEBUG mode for the containers from the standard library.\n #endif\n \n-#define __PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN                                                    \\\n+#define _PSTL_ICC_16_17_TEST_REDUCTION_BOOL_TYPE_RELEASE_64_BROKEN                                                    \\\n     (__x86_64 && !_DEBUG && __INTEL_COMPILER && __INTEL_COMPILER <= 1700 && !__APPLE__)\n-#define __PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN                                                                 \\\n+#define _PSTL_ICC_16_17_TEST_REDUCTION_RELEASE_BROKEN                                                                 \\\n     (!_DEBUG && __INTEL_COMPILER &&                                                                                    \\\n      (__INTEL_COMPILER < 1800 || (__INTEL_COMPILER == 1800 && __INTEL_COMPILER_UPDATE < 1)))\n-#define __PSTL_ICC_1800_TEST_MONOTONIC_RELEASE_64_BROKEN                                                               \\\n+#define _PSTL_ICC_1800_TEST_MONOTONIC_RELEASE_64_BROKEN                                                               \\\n     (__x86_64 && !_DEBUG && __INTEL_COMPILER && __INTEL_COMPILER == 1800 && __INTEL_COMPILER_UPDATE < 1)\n-#define __PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN                                                                       \\\n+#define _PSTL_ICC_17_TEST_MAC_RELEASE_32_BROKEN                                                                       \\\n     (__i386__ && !_DEBUG && __INTEL_COMPILER >= 1700 && __INTEL_COMPILER < 1800 && __APPLE__)\n-#define __PSTL_ICC_18_VC141_TEST_SIMD_LAMBDA_RELEASE_BROKEN                                                            \\\n+#define _PSTL_ICC_18_VC141_TEST_SIMD_LAMBDA_RELEASE_BROKEN                                                            \\\n     (!_DEBUG && __INTEL_COMPILER >= 1800 && __INTEL_COMPILER < 1900 && _MSC_VER == 1910)\n-#define __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN                                                           \\\n+#define _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN                                                           \\\n     (_M_IX86 && _DEBUG && __INTEL_COMPILER >= 1700 && __INTEL_COMPILER < 1800 && _MSC_VER >= 1900)\n-#define __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN                                                            \\\n+#define _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN                                                            \\\n     (_M_IX86 && _DEBUG && __INTEL_COMPILER >= 1600 && __INTEL_COMPILER < 1700 && _MSC_VER == 1900)\n-#define __PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN                                                           \\\n-    (__PSTL_USE_PAR_POLICIES && ((_M_X64 && _MSC_VER == 1900) || __x86_64) && !_DEBUG && __INTEL_COMPILER < 1700)\n-#define __PSTL_ICC_16_17_TEST_64_TIMEOUT (__x86_64 && __INTEL_COMPILER && __INTEL_COMPILER < 1800 && !__APPLE__)\n-#define __PSTL_ICC_18_TEST_EARLY_EXIT_MONOTONIC_RELEASE_BROKEN (!_DEBUG && __INTEL_COMPILER && __INTEL_COMPILER == 1800)\n-#define __PSTL_CLANG_TEST_BIG_OBJ_DEBUG_32_BROKEN                                                                      \\\n-    (__i386__ && PSTL_USE_DEBUG && __clang__ && __PSTL_CLANG_VERSION <= 90000)\n-#define __PSTL_ICC_16_17_18_TEST_UNIQUE_MASK_RELEASE_BROKEN                                                            \\\n+#define _PSTL_ICC_16_VC14_TEST_PAR_TBB_RT_RELEASE_64_BROKEN                                                           \\\n+    (_PSTL_USE_PAR_POLICIES && ((_M_X64 && _MSC_VER == 1900) || __x86_64) && !_DEBUG && __INTEL_COMPILER < 1700)\n+#define _PSTL_ICC_16_17_TEST_64_TIMEOUT (__x86_64 && __INTEL_COMPILER && __INTEL_COMPILER < 1800 && !__APPLE__)\n+#define _PSTL_ICC_18_TEST_EARLY_EXIT_MONOTONIC_RELEASE_BROKEN (!_DEBUG && __INTEL_COMPILER && __INTEL_COMPILER == 1800)\n+#define _PSTL_CLANG_TEST_BIG_OBJ_DEBUG_32_BROKEN                                                                      \\\n+    (__i386__ && PSTL_USE_DEBUG && __clang__ && _PSTL_CLANG_VERSION <= 90000)\n+#define _PSTL_ICC_16_17_18_TEST_UNIQUE_MASK_RELEASE_BROKEN                                                            \\\n     (!_DEBUG && __INTEL_COMPILER &&                                                                                    \\\n      (__INTEL_COMPILER < 1800 || (__INTEL_COMPILER == 1800 && __INTEL_COMPILER_UPDATE < 3)))\n-#define __PSTL_ICC_18_TEST_EARLY_EXIT_AVX_RELEASE_BROKEN                                                               \\\n+#define _PSTL_ICC_18_TEST_EARLY_EXIT_AVX_RELEASE_BROKEN                                                               \\\n     (!_DEBUG && __INTEL_COMPILER == 1800 && __AVX__ && !__AVX2__ && !__AVX512__)\n-#define __PSTL_ICC_19_TEST_IS_PARTITIONED_RELEASE_BROKEN                                                               \\\n+#define _PSTL_ICC_19_TEST_IS_PARTITIONED_RELEASE_BROKEN                                                               \\\n     (!PSTL_USE_DEBUG && (__linux__ || __APPLE__) && __INTEL_COMPILER == 1900)\n-#define __PSTL_ICL_19_VC14_VC141_TEST_SCAN_RELEASE_BROKEN                                                              \\\n+#define _PSTL_ICL_19_VC14_VC141_TEST_SCAN_RELEASE_BROKEN                                                              \\\n     (__INTEL_COMPILER == 1900 && _MSC_VER >= 1900 && _MSC_VER <= 1910)\n-#define __PSTL_ICC_19_TEST_SIMD_UDS_WINDOWS_RELEASE_BROKEN (__INTEL_COMPILER == 1900 && _MSC_VER && !_DEBUG)\n+#define _PSTL_ICC_19_TEST_SIMD_UDS_WINDOWS_RELEASE_BROKEN (__INTEL_COMPILER == 1900 && _MSC_VER && !_DEBUG)\n \n-#endif /* __PSTL_TEST_config_H */\n+#endif /* _PSTL_TEST_CONFIG_H */"}, {"sha": "6547d931c294ff16d50b917c4c24dbfdd1e9e8b8", "filename": "libstdc++-v3/testsuite/util/pstl/test_utils.h", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fpstl%2Ftest_utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32ee8a25ee82ae4139eaf6357366683352c7068/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fpstl%2Ftest_utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fpstl%2Ftest_utils.h?ref=f32ee8a25ee82ae4139eaf6357366683352c7068", "patch": "@@ -10,14 +10,15 @@\n // File contains common utilities that tests rely on\n \n // Do not #include <algorithm>, because if we do we will not detect accidental dependencies.\n-#include <sstream>\n-#include <iostream>\n+#include <atomic>\n+#include <cstdint>\n+#include <cstdlib>\n #include <cstring>\n+#include <iostream>\n #include <iterator>\n-#include <vector>\n-#include <atomic>\n #include <memory>\n-#include <cstdint>\n+#include <sstream>\n+#include <vector>\n \n #include \"pstl_test_config.h\"\n \n@@ -38,32 +39,30 @@ template <typename T>\n class Sequence;\n \n // Handy macros for error reporting\n-#define EXPECT_TRUE(condition, message) TestUtils::expect<true>(condition, __FILE__, __LINE__, message)\n-#define EXPECT_FALSE(condition, message) TestUtils::expect<false>(condition, __FILE__, __LINE__, message)\n+#define EXPECT_TRUE(condition, message) ::TestUtils::expect(true, condition, __FILE__, __LINE__, message)\n+#define EXPECT_FALSE(condition, message) ::TestUtils::expect(false, condition, __FILE__, __LINE__, message)\n \n // Check that expected and actual are equal and have the same type.\n-#define EXPECT_EQ(expected, actual, message) TestUtils::expect_equal(expected, actual, __FILE__, __LINE__, message)\n+#define EXPECT_EQ(expected, actual, message) ::TestUtils::expect_equal(expected, actual, __FILE__, __LINE__, message)\n \n // Check that sequences started with expected and actual and have had size n are equal and have the same type.\n #define EXPECT_EQ_N(expected, actual, n, message)                                                                      \\\n-    TestUtils::expect_equal(expected, actual, n, __FILE__, __LINE__, message)\n+    ::TestUtils::expect_equal(expected, actual, n, __FILE__, __LINE__, message)\n \n // Issue error message from outstr, adding a newline.\n // Real purpose of this routine is to have a place to hang a breakpoint.\n-static void\n+inline void\n issue_error_message(std::stringstream& outstr)\n {\n     outstr << std::endl;\n     std::cerr << outstr.str();\n+    std::exit(EXIT_FAILURE);\n }\n \n-template <bool B>\n-void\n-expect(bool condition, const char* file, int32_t line, const char* message)\n+inline void\n+expect(bool expected, bool condition, const char* file, int32_t line, const char* message)\n {\n-    // Templating this function is somewhat silly, but avoids the need to declare it static\n-    // or have a separate translation unit.\n-    if (condition != B)\n+    if (condition != expected)\n     {\n         std::stringstream outstr;\n         outstr << \"error at \" << file << \":\" << line << \" - \" << message;\n@@ -573,7 +572,7 @@ struct Matrix2x2\n     T a[2][2];\n     Matrix2x2() : a{{1, 0}, {0, 1}} {}\n     Matrix2x2(T x, T y) : a{{0, x}, {x, y}} {}\n-#if !__PSTL_ICL_19_VC14_VC141_TEST_SCAN_RELEASE_BROKEN\n+#if !_PSTL_ICL_19_VC14_VC141_TEST_SCAN_RELEASE_BROKEN\n     Matrix2x2(const Matrix2x2& m) : a{{m.a[0][0], m.a[0][1]}, {m.a[1][0], m.a[1][1]}} {}\n     Matrix2x2&\n     operator=(const Matrix2x2& m)\n@@ -607,13 +606,6 @@ multiply_matrix(const Matrix2x2<T>& left, const Matrix2x2<T>& right)\n     return result;\n }\n \n-// Check that Intel(R) Threading Building Blocks header files are not used when parallel policies are off\n-#if !__PSTL_USE_PAR_POLICIES\n-#if defined(TBB_INTERFACE_VERSION)\n-#error The parallel backend is used while it should not (__PSTL_USE_PAR_POLICIES==0)\n-#endif\n-#endif\n-\n //============================================================================\n // Adapters for creating different types of iterators.\n //\n@@ -659,7 +651,7 @@ struct ReverseAdapter\n     iterator_type\n     operator()(Iterator it)\n     {\n-#if __PSTL_CPP14_MAKE_REVERSE_ITERATOR_PRESENT\n+#if _PSTL_CPP14_MAKE_REVERSE_ITERATOR_PRESENT\n         return std::make_reverse_iterator(it);\n #else\n         return iterator_type(it);\n@@ -1052,10 +1044,8 @@ invoke_on_all_policies(Op op, T&&... rest)\n     // Try static execution policies\n     invoke_on_all_iterator_types()(seq, op, std::forward<T>(rest)...);\n     invoke_on_all_iterator_types()(unseq, op, std::forward<T>(rest)...);\n-#if __PSTL_USE_PAR_POLICIES\n     invoke_on_all_iterator_types()(par, op, std::forward<T>(rest)...);\n     invoke_on_all_iterator_types()(par_unseq, op, std::forward<T>(rest)...);\n-#endif\n }\n \n template <typename F>\n@@ -1201,7 +1191,7 @@ transform_reduce_serial(InputIterator first, InputIterator last, T init, BinaryO\n static const char*\n done()\n {\n-#if __PSTL_TEST_SUCCESSFUL_KEYWORD\n+#if _PSTL_TEST_SUCCESSFUL_KEYWORD\n     return \"done\";\n #else\n     return \"passed\";\n@@ -1238,7 +1228,7 @@ template <typename Policy, typename F>\n static void\n invoke_if(Policy&& p, F f)\n {\n-#if __PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN || __PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN\n+#if _PSTL_ICC_16_VC14_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN || _PSTL_ICC_17_VC141_TEST_SIMD_LAMBDA_DEBUG_32_BROKEN\n     __pstl::__internal::invoke_if_not(__pstl::__internal::allow_unsequenced<Policy>(), f);\n #else\n     f();"}]}