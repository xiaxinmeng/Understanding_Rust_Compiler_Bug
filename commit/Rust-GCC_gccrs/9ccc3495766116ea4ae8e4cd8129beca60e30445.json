{"sha": "9ccc3495766116ea4ae8e4cd8129beca60e30445", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNjYzM0OTU3NjYxMTZlYTRhZThlNGNkODEyOWJlY2E2MGUzMDQ0NQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-28T15:47:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-28T15:47:26Z"}, "message": "c++: Check constraints before instantiation from mark_used [PR95132]\n\nThis makes mark_used check constraints of a function _before_ calling\nmaybe_instantiate_decl, so that we don't try instantiating a function\n(as part of return type deduction) with unsatisfied constraints.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95132\n\t* decl2.c (mark_used): Move up the constraints_satisfied_p check\n\tso that we check constraints before calling maybe_instantiate_decl.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95132\n\t* g++.dg/cpp2a/concepts-fn7.C: New test.", "tree": {"sha": "622bad79f4db558f58a19afcb464d5fa90c51590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622bad79f4db558f58a19afcb464d5fa90c51590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ccc3495766116ea4ae8e4cd8129beca60e30445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccc3495766116ea4ae8e4cd8129beca60e30445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ccc3495766116ea4ae8e4cd8129beca60e30445", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccc3495766116ea4ae8e4cd8129beca60e30445/comments", "author": null, "committer": null, "parents": [{"sha": "7d5f38e49e59a09140473aa592133360428a1d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5f38e49e59a09140473aa592133360428a1d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5f38e49e59a09140473aa592133360428a1d83"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "71107e03010983602e66bf0179acda0198eec276", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccc3495766116ea4ae8e4cd8129beca60e30445/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccc3495766116ea4ae8e4cd8129beca60e30445/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9ccc3495766116ea4ae8e4cd8129beca60e30445", "patch": "@@ -5588,16 +5588,6 @@ mark_used (tree decl, tsubst_flags_t complain)\n   if (DECL_ODR_USED (decl))\n     return true;\n \n-  /* Normally, we can wait until instantiation-time to synthesize DECL.\n-     However, if DECL is a static data member initialized with a constant\n-     or a constexpr function, we need it right now because a reference to\n-     such a data member or a call to such function is not value-dependent.\n-     For a function that uses auto in the return type, we need to instantiate\n-     it to find out its type.  For OpenMP user defined reductions, we need\n-     them instantiated for reduction clauses which inline them by hand\n-     directly.  */\n-  maybe_instantiate_decl (decl);\n-\n   if (flag_concepts && TREE_CODE (decl) == FUNCTION_DECL\n       && !constraints_satisfied_p (decl))\n     {\n@@ -5613,6 +5603,16 @@ mark_used (tree decl, tsubst_flags_t complain)\n       return false;\n     }\n \n+  /* Normally, we can wait until instantiation-time to synthesize DECL.\n+     However, if DECL is a static data member initialized with a constant\n+     or a constexpr function, we need it right now because a reference to\n+     such a data member or a call to such function is not value-dependent.\n+     For a function that uses auto in the return type, we need to instantiate\n+     it to find out its type.  For OpenMP user defined reductions, we need\n+     them instantiated for reduction clauses which inline them by hand\n+     directly.  */\n+  maybe_instantiate_decl (decl);\n+\n   if (processing_template_decl || in_template_function ())\n     return true;\n "}, {"sha": "62111df310efb9ded9f9c5b481b9b18c249ab54f", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-fn7.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccc3495766116ea4ae8e4cd8129beca60e30445/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccc3495766116ea4ae8e4cd8129beca60e30445/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn7.C?ref=9ccc3495766116ea4ae8e4cd8129beca60e30445", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/95132\n+// { dg-do compile { target c++20 } }\n+\n+template <class T> struct A {\n+  static auto f() requires false { return T::fail; }\n+};\n+\n+template <class T>\n+concept C = requires { A<T>::f(); };\n+\n+static_assert(!C<int>);"}]}