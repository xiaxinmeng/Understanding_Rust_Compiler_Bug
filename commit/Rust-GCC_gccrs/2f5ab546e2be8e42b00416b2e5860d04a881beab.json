{"sha": "2f5ab546e2be8e42b00416b2e5860d04a881beab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY1YWI1NDZlMmJlOGU0MmIwMDQxNmIyZTU4NjBkMDRhODgxYmVhYg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-06-11T07:43:40Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-06-11T07:43:40Z"}, "message": "rs6000: Support more short/char to float conversion\n\nFor some cases that when we load unsigned char/short values from\nthe appropriate unsigned char/short memories and convert them to\ndouble/single precision floating point value, there would be\nimplicit conversions to int first.  It makes GCC not leverage the\nP9 instructions lxsibzx/lxsihzx.  This patch is to add the related\ndefine_insn_and_split to support this kind of scenario.\n\nBootstrapped/regtested on powerpc64le-linux-gnu P9 and\npowerpc64-linux-gnu P8.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.md\n\t(floatsi<SFDF:mode>2_lfiwax_<QHI:mode>_mem_zext): New\n\tdefine_insn_and_split.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/p9-fpcvt-3.c: New test.", "tree": {"sha": "79f25bdb5d52ac9094f39b98bf00d5ed464922cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79f25bdb5d52ac9094f39b98bf00d5ed464922cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f5ab546e2be8e42b00416b2e5860d04a881beab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5ab546e2be8e42b00416b2e5860d04a881beab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f5ab546e2be8e42b00416b2e5860d04a881beab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5ab546e2be8e42b00416b2e5860d04a881beab/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d322ced1433da8e7c69243cfa941ea462d6290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d322ced1433da8e7c69243cfa941ea462d6290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d322ced1433da8e7c69243cfa941ea462d6290"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "510dbffda1d5426c5dfb63f976a6eeb7ca87c7ab", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5ab546e2be8e42b00416b2e5860d04a881beab/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5ab546e2be8e42b00416b2e5860d04a881beab/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2f5ab546e2be8e42b00416b2e5860d04a881beab", "patch": "@@ -5524,6 +5524,27 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"fpload\")])\n \n+(define_insn_and_split \"floatsi<SFDF:mode>2_lfiwax_<QHI:mode>_mem_zext\"\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=d,<Fv>\")\n+\t(float:SFDF\n+\t (zero_extend:SI\n+\t  (match_operand:QHI 1 \"indexed_or_indirect_operand\" \"Z,Z\"))))\n+   (clobber (match_scratch:DI 2 \"=d,wa\"))]\n+  \"TARGET_HARD_FLOAT && <SI_CONVERT_FP> && TARGET_P9_VECTOR\n+   && TARGET_POWERPC64 && TARGET_DIRECT_MOVE\"\n+  \"#\"\n+  \"&& 1\"\n+  [(pc)]\n+{\n+  if (GET_CODE (operands[2]) == SCRATCH)\n+    operands[2] = gen_reg_rtx (DImode);\n+  emit_insn (gen_zero_extendhidi2 (operands[2], operands[1]));\n+  emit_insn (gen_floatdi<SFDF:mode>2 (operands[0], operands[2]));\n+  DONE;\n+}\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"fpload\")])\n+\n (define_insn \"lfiwzx\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wa,wa,wa\")\n \t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wa\")]"}, {"sha": "19701c84addb680b59ef74e76c4949956f3a6b7a", "filename": "gcc/testsuite/gcc.target/powerpc/p9-fpcvt-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5ab546e2be8e42b00416b2e5860d04a881beab/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-fpcvt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5ab546e2be8e42b00416b2e5860d04a881beab/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-fpcvt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-fpcvt-3.c?ref=2f5ab546e2be8e42b00416b2e5860d04a881beab", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2\" } */\n+\n+/* Note that for unsigned cases, the differences from those ones in\n+   p9-fpcvt-2.c is that they will be converted to int implicitly first\n+   and then to floating point.  */\n+\n+double sc_df (signed char    *p, double df) { return *p + df; }\n+double uc_df (unsigned char  *p, double df) { return *p + df; }\n+double ss_df (signed short   *p, double df) { return *p + df; }\n+double us_df (unsigned short *p, double df) { return *p + df; }\n+\n+float sc_sf (signed char    *p, float sf) { return *p + sf; }\n+float uc_sf (unsigned char  *p, float sf) { return *p + sf; }\n+float ss_sf (signed short   *p, float sf) { return *p + sf; }\n+float us_sf (unsigned short *p, float sf) { return *p + sf; }\n+\n+/* { dg-final { scan-assembler     {\\mlxsibzx\\M}  } } */\n+/* { dg-final { scan-assembler     {\\mlxsihzx\\M}  } } */\n+/* { dg-final { scan-assembler     {\\mvextsb2d\\M} } } */\n+/* { dg-final { scan-assembler     {\\mvextsh2d\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mm[tf]vsr}   } } */"}]}