{"sha": "e8ee694a14382f4b2cea7ec5622e2be5329d581d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThlZTY5NGExNDM4MmY0YjJjZWE3ZWM1NjIyZTJiZTUzMjlkNTgxZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-05-09T18:16:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-05-09T18:16:18Z"}, "message": "DR 587 PR c++/51317\n\n\tDR 587\n\tPR c++/51317\n\t* call.c (build_conditional_expr_1, conditional_conversion): Handle\n\tnon-class lvalues and xvalues that differ only in cv-qualifiers.\n\nFrom-SVN: r210285", "tree": {"sha": "a46b7e14b2418d4d41841748d0690d5f66ef478c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a46b7e14b2418d4d41841748d0690d5f66ef478c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8ee694a14382f4b2cea7ec5622e2be5329d581d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ee694a14382f4b2cea7ec5622e2be5329d581d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ee694a14382f4b2cea7ec5622e2be5329d581d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ee694a14382f4b2cea7ec5622e2be5329d581d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfa589517b23a771d285e1a0e7cb701b46c63d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa589517b23a771d285e1a0e7cb701b46c63d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa589517b23a771d285e1a0e7cb701b46c63d95"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "228fe959822f2ccb12cc443e98082bc92799b78a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e8ee694a14382f4b2cea7ec5622e2be5329d581d", "patch": "@@ -1,5 +1,10 @@\n 2014-05-09  Jason Merrill  <jason@redhat.com>\n \n+\tDR 587\n+\tPR c++/51317\n+\t* call.c (build_conditional_expr_1, conditional_conversion): Handle\n+\tnon-class lvalues and xvalues that differ only in cv-qualifiers.\n+\n \tDR 5\n \tPR c++/60019\n \t* call.c (build_user_type_conversion_1): The copy-init temporary"}, {"sha": "9e83c4a8b73ae8b0cbe8f657e2901cb5cc6e911e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e8ee694a14382f4b2cea7ec5622e2be5329d581d", "patch": "@@ -4382,20 +4382,31 @@ conditional_conversion (tree e1, tree e2, tsubst_flags_t complain)\n      If E2 is an lvalue: E1 can be converted to match E2 if E1 can be\n      implicitly converted (clause _conv_) to the type \"lvalue reference to\n      T2\", subject to the constraint that in the conversion the\n-     reference must bind directly (_dcl.init.ref_) to an lvalue.  */\n-  if (real_lvalue_p (e2))\n+     reference must bind directly (_dcl.init.ref_) to an lvalue.\n+\n+     If E2 is an xvalue: E1 can be converted to match E2 if E1 can be\n+     implicitly converted to the type \"rvalue reference to T2\", subject to\n+     the constraint that the reference must bind directly.  */\n+  if (lvalue_or_rvalue_with_address_p (e2))\n     {\n-      conv = implicit_conversion (build_reference_type (t2),\n+      tree rtype = cp_build_reference_type (t2, !real_lvalue_p (e2));\n+      conv = implicit_conversion (rtype,\n \t\t\t\t  t1,\n \t\t\t\t  e1,\n \t\t\t\t  /*c_cast_p=*/false,\n \t\t\t\t  LOOKUP_NO_TEMP_BIND|LOOKUP_NO_RVAL_BIND\n \t\t\t\t  |LOOKUP_ONLYCONVERTING,\n \t\t\t\t  complain);\n-      if (conv)\n+      if (conv && !conv->bad_p)\n \treturn conv;\n     }\n \n+  /* If E2 is a prvalue or if neither of the conversions above can be done\n+     and at least one of the operands has (possibly cv-qualified) class\n+     type: */\n+  if (!CLASS_TYPE_P (t1) && !CLASS_TYPE_P (t2))\n+    return NULL;\n+\n   /* [expr.cond]\n \n      If E1 and E2 have class type, and the underlying class types are\n@@ -4690,10 +4701,17 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n   /* [expr.cond]\n \n      Otherwise, if the second and third operand have different types,\n-     and either has (possibly cv-qualified) class type, an attempt is\n-     made to convert each of those operands to the type of the other.  */\n+     and either has (possibly cv-qualified) class type, or if both are\n+     glvalues of the same value category and the same type except for\n+     cv-qualification, an attempt is made to convert each of those operands\n+     to the type of the other.  */\n   else if (!same_type_p (arg2_type, arg3_type)\n-\t   && (CLASS_TYPE_P (arg2_type) || CLASS_TYPE_P (arg3_type)))\n+\t    && (CLASS_TYPE_P (arg2_type) || CLASS_TYPE_P (arg3_type)\n+\t\t|| (same_type_ignoring_top_level_qualifiers_p (arg2_type,\n+\t\t\t\t\t\t\t       arg3_type)\n+\t\t    && lvalue_or_rvalue_with_address_p (arg2)\n+\t\t    && lvalue_or_rvalue_with_address_p (arg3)\n+\t\t    && real_lvalue_p (arg2) == real_lvalue_p (arg3))))\n     {\n       conversion *conv2;\n       conversion *conv3;"}, {"sha": "e231b11e1a6dc67a283b0d1d9df566e45fcb51ca", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-cond2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cond2.C?ref=e8ee694a14382f4b2cea7ec5622e2be5329d581d", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <class T, class U> struct ST;\n+template <class T> struct ST<T,T> {};\n+\n+int&& f();\n+const int&& g();\n+\n+void h(bool b) {\n+  ST<decltype(b ? f() : g()),const int&&>();\n+}"}, {"sha": "5276287942122550456cfa8a5f5afca287867da3", "filename": "gcc/testsuite/g++.dg/expr/cond14.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond14.C?ref=e8ee694a14382f4b2cea7ec5622e2be5329d581d", "patch": "@@ -0,0 +1,6 @@\n+// DR 587\n+// PR c++/51317\n+\n+int x = 1;\n+int const y = 2;\n+int const *p = &(1 ? x : y); // error: lvalue required as unary '&' operand"}, {"sha": "710e87c8cbdfd2ba27c74f41d05f328898920fda", "filename": "gcc/testsuite/g++.dg/warn/return-reference.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Freturn-reference.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ee694a14382f4b2cea7ec5622e2be5329d581d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Freturn-reference.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Freturn-reference.C?ref=e8ee694a14382f4b2cea7ec5622e2be5329d581d", "patch": "@@ -7,7 +7,7 @@ foo1()\n {\n   static int empty;\n   const int* x = bar();\n-  return (x ? *x : empty);      // { dg-bogus \".*\" \"\" { xfail *-*-* } }\n+  return (x ? *x : empty);      // { dg-bogus \".*\" }\n }\n \n const int&"}]}