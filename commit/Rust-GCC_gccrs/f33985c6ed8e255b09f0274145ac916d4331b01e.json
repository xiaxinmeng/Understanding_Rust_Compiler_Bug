{"sha": "f33985c6ed8e255b09f0274145ac916d4331b01e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzOTg1YzZlZDhlMjU1YjA5ZjAyNzQxNDVhYzkxNmQ0MzMxYjAxZQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-02-23T22:23:33Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-02-23T22:23:33Z"}, "message": "rs6000.h (RETURN_ADDR_RTX): Add definition to support __builtin_return_address and __builtin_frame_address...\n\n        * rs6000.h/rs6000.h (RETURN_ADDR_RTX): Add definition to support\n        __builtin_return_address and __builtin_frame_address on the\n        rs6000.  This is necessary to support exception handling in g++ on\n        the rs6000.\nFixes eh6.C on rs6000.\n\nFrom-SVN: r9054", "tree": {"sha": "28c1d5335799e1214dda4af061066938ee9d16b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28c1d5335799e1214dda4af061066938ee9d16b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33985c6ed8e255b09f0274145ac916d4331b01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33985c6ed8e255b09f0274145ac916d4331b01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33985c6ed8e255b09f0274145ac916d4331b01e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33985c6ed8e255b09f0274145ac916d4331b01e/comments", "author": null, "committer": null, "parents": [{"sha": "d14a6d05b224eeba4b3352e993e12226b9205784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14a6d05b224eeba4b3352e993e12226b9205784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d14a6d05b224eeba4b3352e993e12226b9205784"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "2a7ddf6f4ede142d251f25911b1f7ab1b80d93f7", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33985c6ed8e255b09f0274145ac916d4331b01e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33985c6ed8e255b09f0274145ac916d4331b01e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f33985c6ed8e255b09f0274145ac916d4331b01e", "patch": "@@ -1151,6 +1151,27 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n \t\t  force_reg (SImode, (CXT)));\t\t\t\\\n }\n \f\n+/* Definitions for __builtin_return_address and __builtin_frame_address.\n+   __builtin_return_address (0) should give link register (65), enable\n+   this. */\n+/* This should be uncommented, so that the link register is used, but\n+   currently this would result in unmatched insns and spilling fixed\n+   registers so we'll leave it for another day.  When these problems are\n+   taken care of one additional fetch will be necessary in RETURN_ADDR_RTX.\n+   (mrs) */\n+/* #define RETURN_ADDR_IN_PREVIOUS_FRAME */\n+/* The current return address is in link register (65).  The return address\n+   of anything farther back is accessed normally at an offset of 8 from the\n+   frame pointer.  */\n+#define RETURN_ADDR_RTX(count, frame)\t\t\t\\\n+  ((count == -1)\t\t\t\t\t\\\n+   ? gen_rtx (REG, Pmode, 65)\t\t\t\t\\\n+   : copy_to_reg (gen_rtx (MEM, Pmode,\t\t\t\\\n+\t\t\t   memory_address (Pmode, \t\\\n+\t\t\t\t\t   plus_constant (copy_to_reg (gen_rtx (MEM, Pmode, \\\n+\t\t\t\t\t\t\t\t\t\tmemory_address (Pmode, frame))), \\\n+\t\t\t\t\t\t\t  8)))))\n+\f\n /* Definitions for register eliminations.\n \n    We have two registers that can be eliminated on the RS/6000.  First, the"}]}