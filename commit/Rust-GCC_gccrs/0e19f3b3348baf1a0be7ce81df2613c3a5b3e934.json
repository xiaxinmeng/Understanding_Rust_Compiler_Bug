{"sha": "0e19f3b3348baf1a0be7ce81df2613c3a5b3e934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxOWYzYjMzNDhiYWYxYTBiZTdjZTgxZGYyNjEzYzNhNWIzZTkzNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-05-06T15:54:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-05-06T15:54:15Z"}, "message": "tree-ssa-coalesce.c (gimple_can_coalesce_p): In the optimized case, allow coalescing if the types are compatible.\n\n\t* tree-ssa-coalesce.c (gimple_can_coalesce_p): In the optimized case,\n\tallow coalescing if the types are compatible.\n\nFrom-SVN: r235980", "tree": {"sha": "d93512d1d1010352b41cce884495773abf91b190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d93512d1d1010352b41cce884495773abf91b190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e19f3b3348baf1a0be7ce81df2613c3a5b3e934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e19f3b3348baf1a0be7ce81df2613c3a5b3e934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e19f3b3348baf1a0be7ce81df2613c3a5b3e934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e19f3b3348baf1a0be7ce81df2613c3a5b3e934/comments", "author": null, "committer": null, "parents": [{"sha": "ccd88fb795b3f133ca2bc4b9fd41e5143b5a95a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd88fb795b3f133ca2bc4b9fd41e5143b5a95a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd88fb795b3f133ca2bc4b9fd41e5143b5a95a8"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "0870dfbe7e6861c4aec08d5119f507d8b41caf02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e19f3b3348baf1a0be7ce81df2613c3a5b3e934/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e19f3b3348baf1a0be7ce81df2613c3a5b3e934/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e19f3b3348baf1a0be7ce81df2613c3a5b3e934", "patch": "@@ -1,3 +1,8 @@\n+2016-05-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-coalesce.c (gimple_can_coalesce_p): In the optimized case,\n+\tallow coalescing if the types are compatible.\n+\n 2016-05-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* pass_manager.h (pass_manager::register_pass_name): New method."}, {"sha": "34c3fa16ccf852343589377e69cf7edaefdf1d29", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e19f3b3348baf1a0be7ce81df2613c3a5b3e934/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e19f3b3348baf1a0be7ce81df2613c3a5b3e934/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=0e19f3b3348baf1a0be7ce81df2613c3a5b3e934", "patch": "@@ -1569,17 +1569,24 @@ gimple_can_coalesce_p (tree name1, tree name2)\n \t\t\t    var2 ? LOCAL_DECL_ALIGNMENT (var2) : TYPE_ALIGN (t2)))\n     return false;\n \n-  /* If the types are not the same, check for a canonical type match.  This\n+  /* If the types are not the same, see whether they are compatible.  This\n      (for example) allows coalescing when the types are fundamentally the\n-     same, but just have different names. \n-\n-     Note pointer types with different address spaces may have the same\n-     canonical type.  Those are rejected for coalescing by the\n-     types_compatible_p check.  */\n-  if (TYPE_CANONICAL (t1)\n-      && TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2)\n-      && types_compatible_p (t1, t2))\n-    goto check_modes;\n+     same, but just have different names.\n+\n+     In the non-optimized case, we must first test TYPE_CANONICAL because\n+     we use it to compute the partition_to_base_index of the map.  */\n+  if (flag_tree_coalesce_vars)\n+    {\n+      if (types_compatible_p (t1, t2))\n+\tgoto check_modes;\n+    }\n+  else\n+    {\n+      if (TYPE_CANONICAL (t1)\n+\t  && TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2)\n+\t  && types_compatible_p (t1, t2))\n+\tgoto check_modes;\n+    }\n \n   return false;\n }"}]}