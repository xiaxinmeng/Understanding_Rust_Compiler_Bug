{"sha": "c873934cd90496aa07712b257b6ae6e8027d952f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg3MzkzNGNkOTA0OTZhYTA3NzEyYjI1N2I2YWU2ZTgwMjdkOTUyZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-01-24T19:07:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-01-24T19:07:24Z"}, "message": "re PR c++/51973 ([C++11] Template parameter deduction fails for overloaded functions when template parameters have defaulted arguments)\n\n\tPR c++/51973\n\t* tree.c (called_fns_equal): Check template args.\n\t(cp_tree_equal): Call it.\n\nFrom-SVN: r183487", "tree": {"sha": "5dc59caab5d354a1061165ba45e9184371131f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dc59caab5d354a1061165ba45e9184371131f42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c873934cd90496aa07712b257b6ae6e8027d952f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c873934cd90496aa07712b257b6ae6e8027d952f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c873934cd90496aa07712b257b6ae6e8027d952f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c873934cd90496aa07712b257b6ae6e8027d952f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5535633407a3c84b4f19b9c2f88be92cb51ba8e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5535633407a3c84b4f19b9c2f88be92cb51ba8e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5535633407a3c84b4f19b9c2f88be92cb51ba8e3"}], "stats": {"total": 82, "additions": 60, "deletions": 22}, "files": [{"sha": "a79320c37feeafbbf8951019bdadeb1eb1e3c393", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c873934cd90496aa07712b257b6ae6e8027d952f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c873934cd90496aa07712b257b6ae6e8027d952f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c873934cd90496aa07712b257b6ae6e8027d952f", "patch": "@@ -1,3 +1,9 @@\n+2012-01-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51973\n+\t* tree.c (called_fns_equal): Check template args.\n+\t(cp_tree_equal): Call it.\n+\n 2012-01-24  Aldy Hernandez  <aldyh@redhat.com>\n \t    Patrick Marlier  <patrick.marlier@gmail.com>\n "}, {"sha": "b80b52a8e50edbe35cfd1684cc7b8f3279ae9e1e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c873934cd90496aa07712b257b6ae6e8027d952f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c873934cd90496aa07712b257b6ae6e8027d952f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c873934cd90496aa07712b257b6ae6e8027d952f", "patch": "@@ -2174,6 +2174,33 @@ decl_anon_ns_mem_p (const_tree decl)\n     }\n }\n \n+/* Subroutine of cp_tree_equal: t1 and t2 are the CALL_EXPR_FNs of two\n+   CALL_EXPRS.  Return whether they are equivalent.  */\n+\n+static bool\n+called_fns_equal (tree t1, tree t2)\n+{\n+  /* Core 1321: dependent names are equivalent even if the overload sets\n+     are different.  But do compare explicit template arguments.  */\n+  tree name1 = dependent_name (t1);\n+  tree name2 = dependent_name (t2);\n+  if (name1 || name2)\n+    {\n+      tree targs1 = NULL_TREE, targs2 = NULL_TREE;\n+\n+      if (name1 != name2)\n+\treturn false;\n+\n+      if (TREE_CODE (t1) == TEMPLATE_ID_EXPR)\n+\ttargs1 = TREE_OPERAND (t1, 1);\n+      if (TREE_CODE (t2) == TEMPLATE_ID_EXPR)\n+\ttargs2 = TREE_OPERAND (t2, 1);\n+      return cp_tree_equal (targs1, targs2);\n+    }\n+  else\n+    return cp_tree_equal (t1, t2);\n+}\n+\n /* Return truthvalue of whether T1 is the same tree structure as T2.\n    Return 1 if they are the same. Return 0 if they are different.  */\n \n@@ -2261,12 +2288,7 @@ cp_tree_equal (tree t1, tree t2)\n       {\n \ttree arg1, arg2;\n \tcall_expr_arg_iterator iter1, iter2;\n-\t/* Core 1321: dependent names are equivalent even if the\n-\t   overload sets are different.  */\n-\ttree name1 = dependent_name (CALL_EXPR_FN (t1));\n-\ttree name2 = dependent_name (CALL_EXPR_FN (t2));\n-\tif (!(name1 && name2 && name1 == name2)\n-\t    && !cp_tree_equal (CALL_EXPR_FN (t1), CALL_EXPR_FN (t2)))\n+\tif (!called_fns_equal (CALL_EXPR_FN (t1), CALL_EXPR_FN (t2)))\n \t  return false;\n \tfor (arg1 = first_call_expr_arg (t1, &iter1),\n \t       arg2 = first_call_expr_arg (t2, &iter2);\n@@ -2354,26 +2376,18 @@ cp_tree_equal (tree t1, tree t2)\n \t\t\t      TREE_TYPE (TEMPLATE_PARM_DECL (t2))));\n \n     case TEMPLATE_ID_EXPR:\n+      return (cp_tree_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0))\n+\t      && cp_tree_equal (TREE_OPERAND (t1, 1), TREE_OPERAND (t2, 1)));\n+\n+    case TREE_VEC:\n       {\n \tunsigned ix;\n-\ttree vec1, vec2;\n-\n-\tif (!cp_tree_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0)))\n+\tif (TREE_VEC_LENGTH (t1) != TREE_VEC_LENGTH (t2))\n \t  return false;\n-\tvec1 = TREE_OPERAND (t1, 1);\n-\tvec2 = TREE_OPERAND (t2, 1);\n-\n-\tif (!vec1 || !vec2)\n-\t  return !vec1 && !vec2;\n-\n-\tif (TREE_VEC_LENGTH (vec1) != TREE_VEC_LENGTH (vec2))\n-\t  return false;\n-\n-\tfor (ix = TREE_VEC_LENGTH (vec1); ix--;)\n-\t  if (!cp_tree_equal (TREE_VEC_ELT (vec1, ix),\n-\t\t\t      TREE_VEC_ELT (vec2, ix)))\n+\tfor (ix = TREE_VEC_LENGTH (t1); ix--;)\n+\t  if (!cp_tree_equal (TREE_VEC_ELT (t1, ix),\n+\t\t\t      TREE_VEC_ELT (t2, ix)))\n \t    return false;\n-\n \treturn true;\n       }\n "}, {"sha": "b34ea63af36563efd51f84c8f3bd1f0fafb56310", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c873934cd90496aa07712b257b6ae6e8027d952f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c873934cd90496aa07712b257b6ae6e8027d952f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c873934cd90496aa07712b257b6ae6e8027d952f", "patch": "@@ -1,3 +1,8 @@\n+2012-01-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51973\n+\t* g++.dg/cpp0x/sfinae31.C: New.\n+\n 2012-01-24  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.dg/memcpy-4.c: Don't expect /s on MEMs."}, {"sha": "ea151fe6490b49f4cc0b3be21f3022f6d5b93720", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae31.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c873934cd90496aa07712b257b6ae6e8027d952f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c873934cd90496aa07712b257b6ae6e8027d952f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae31.C?ref=c873934cd90496aa07712b257b6ae6e8027d952f", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/51973\n+// { dg-options -std=c++0x }\n+\n+template <class T>\n+void f(T t) { };\n+\n+template <class T> decltype(f<T>(0)) g();\n+template <class T> decltype(f<T*>(0)) g();\n+\n+int main()\n+{\n+  g<void>();\n+}"}]}