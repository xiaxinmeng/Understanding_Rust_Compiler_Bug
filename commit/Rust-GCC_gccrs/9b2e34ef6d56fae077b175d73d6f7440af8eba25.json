{"sha": "9b2e34ef6d56fae077b175d73d6f7440af8eba25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyZTM0ZWY2ZDU2ZmFlMDc3YjE3NWQ3M2Q2Zjc0NDBhZjhlYmEyNQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2018-06-21T11:05:36Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2018-06-21T11:05:36Z"}, "message": "[ARM] Use __ARM_ARCH and __ARM_FEATURE_LDREX instead of __ARM_ARCH__\n\n2018-06-21  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tlibatomic/\n\t* config/arm/arm-config.h (__ARM_ARCH__): Remove definitions, use\n\t__ARM_ARCH instead. Use __ARM_FEATURE_LDREX to define HAVE_STREX\n\tand HAVE_STREXBHD\n\n\tlibgcc/\n\t* config/arm/lib1funcs.S (__ARM_ARCH__): Remove definitions, use\n\t__ARM_ARCH and __ARM_FEATURE_CLZ instead.\n\t(HAVE_ARM_CLZ): Remove definition, use __ARM_FEATURE_CLZ instead.\n\t* config/arm/ieee754-df.S: Use __ARM_FEATURE_CLZ instead of\n\t__ARM_ARCH__.\n\t* config/arm/ieee754-sf.S: Likewise.\n\t* config/arm/libunwind.S: Use __ARM_ARCH instead of __ARM_ARCH__.\n\nFrom-SVN: r261841", "tree": {"sha": "078e50444aca70b367b54be4b7f3a51c4c824f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/078e50444aca70b367b54be4b7f3a51c4c824f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b2e34ef6d56fae077b175d73d6f7440af8eba25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2e34ef6d56fae077b175d73d6f7440af8eba25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2e34ef6d56fae077b175d73d6f7440af8eba25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2e34ef6d56fae077b175d73d6f7440af8eba25/comments", "author": null, "committer": null, "parents": [{"sha": "d1b0dd54ab096ebd088025215230c968ec6ac4f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b0dd54ab096ebd088025215230c968ec6ac4f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1b0dd54ab096ebd088025215230c968ec6ac4f8"}], "stats": {"total": 172, "additions": 48, "deletions": 124}, "files": [{"sha": "41c5273141571d1c4e6ecad5771b5df6e1f4f7e2", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=9b2e34ef6d56fae077b175d73d6f7440af8eba25", "patch": "@@ -1,3 +1,9 @@\n+2018-06-21  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm-config.h (__ARM_ARCH__): Remove definitions, use\n+\t__ARM_ARCH instead. Use __ARM_FEATURE_LDREX to define HAVE_STREX\n+\tand HAVE_STREXBHD\n+\n 2018-05-23  Florian Weimer  <fweimer@redhat.com>\n \n \tPR libgcc/60790"}, {"sha": "b4783ad63bcf312abcea2fdb790cb97d420fcde3", "filename": "libatomic/config/arm/arm-config.h", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libatomic%2Fconfig%2Farm%2Farm-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libatomic%2Fconfig%2Farm%2Farm-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Farm%2Farm-config.h?ref=9b2e34ef6d56fae077b175d73d6f7440af8eba25", "patch": "@@ -23,57 +23,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \n-#if defined(__ARM_ARCH_2__)\n-# define __ARM_ARCH__ 2\n-#endif\n-\n-#if defined(__ARM_ARCH_3__)\n-# define __ARM_ARCH__ 3\n-#endif\n-\n-#if defined(__ARM_ARCH_3M__) || defined(__ARM_ARCH_4__) \\\n-\t|| defined(__ARM_ARCH_4T__)\n-/* We use __ARM_ARCH__ set to 4 here, but in reality it's any processor with\n-   long multiply instructions.  That includes v3M.  */\n-# define __ARM_ARCH__ 4\n-#endif\n-\t\n-#if defined(__ARM_ARCH_5__) || defined(__ARM_ARCH_5T__) \\\n-\t|| defined(__ARM_ARCH_5E__) || defined(__ARM_ARCH_5TE__) \\\n-\t|| defined(__ARM_ARCH_5TEJ__)\n-# define __ARM_ARCH__ 5\n-#endif\n-\n-#if defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) \\\n-\t|| defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) \\\n-\t|| defined(__ARM_ARCH_6ZK__) || defined(__ARM_ARCH_6T2__) \\\n-\t|| defined(__ARM_ARCH_6M__)\n-# define __ARM_ARCH__ 6\n-#endif\n-\n-#if defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_7A__) \\\n-\t|| defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) \\\n-\t|| defined(__ARM_ARCH_7EM__)\n-# define __ARM_ARCH__ 7\n-#endif\n-\n-#if defined(__ARM_ARCH_8A__)\n-# define __ARM_ARCH__ 8\n-#endif\n-\n-#ifndef __ARM_ARCH__\n-#error Unable to determine architecture.\n-#endif\n-\n-#if __ARM_ARCH__ >= 7 || defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6ZK__)\n+#if __ARM_FEATURE_LDREX & 4\n # define HAVE_STREX\t1\n+#endif\n+#if (__ARM_FEATURE_LDREX & 0xF) == 0xF\n # define HAVE_STREXBHD\t1\n-#elif __ARM_ARCH__ == 6\n-# define HAVE_STREX\t1\n #endif\n \n-#if __ARM_ARCH__ >= 7\n+#if __ARM_ARCH >= 7\n # define HAVE_DMB\t1\n-#elif __ARM_ARCH__ == 6\n+#elif __ARM_ARCH == 6\n # define HAVE_DMB_MCR\t1\n #endif"}, {"sha": "356721ba86630a8b2c76c028cf449017716e2261", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9b2e34ef6d56fae077b175d73d6f7440af8eba25", "patch": "@@ -1,3 +1,13 @@\n+2018-06-21  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/lib1funcs.S (__ARM_ARCH__): Remove definitions, use\n+\t__ARM_ARCH and __ARM_FEATURE_CLZ instead.\n+\t(HAVE_ARM_CLZ): Remove definition, use __ARM_FEATURE_CLZ instead.\n+\t* config/arm/ieee754-df.S: Use __ARM_FEATURE_CLZ instead of\n+\t__ARM_ARCH__.\n+\t* config/arm/ieee754-sf.S: Likewise.\n+\t* config/arm/libunwind.S: Use __ARM_ARCH instead of __ARM_ARCH__.\n+\n 2018-06-21  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* config/arm/ieee754-df.S: Remove code for __ARM_ARCH__ < 4, no"}, {"sha": "8741aa99245cb626b006fb07b18c3d0efbc9922b", "filename": "libgcc/config/arm/ieee754-df.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2Fconfig%2Farm%2Fieee754-df.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2Fconfig%2Farm%2Fieee754-df.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fieee754-df.S?ref=9b2e34ef6d56fae077b175d73d6f7440af8eba25", "patch": "@@ -245,7 +245,7 @@ LSYM(Lad_a):\n \t@ No rounding necessary since ip will always be 0 at this point.\n LSYM(Lad_l):\n \n-#if __ARM_ARCH__ < 5\n+#if !defined (__ARM_FEATURE_CLZ)\n \n \tteq\txh, #0\n \tmovne\tr3, #20"}, {"sha": "d80d5e9080c43f622445704717731035ed02fc5f", "filename": "libgcc/config/arm/ieee754-sf.S", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2Fconfig%2Farm%2Fieee754-sf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2Fconfig%2Farm%2Fieee754-sf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fieee754-sf.S?ref=9b2e34ef6d56fae077b175d73d6f7440af8eba25", "patch": "@@ -175,7 +175,7 @@ LSYM(Lad_a):\n \t@ No rounding necessary since r1 will always be 0 at this point.\n LSYM(Lad_l):\n \n-#if __ARM_ARCH__ < 5\n+#if !defined (__ARM_FEATURE_CLZ)\n \n \tmovs\tip, r0, lsr #12\n \tmoveq\tr0, r0, lsl #12\n@@ -370,7 +370,7 @@ ARM_FUNC_ALIAS aeabi_l2f floatdisf\n \tsubeq\tr3, r3, #(32 << 23)\n 2:\tsub\tr3, r3, #(1 << 23)\n \n-#if __ARM_ARCH__ < 5\n+#if !defined (__ARM_FEATURE_CLZ)\n \n \tmov\tr2, #23\n \tcmp\tip, #(1 << 16)"}, {"sha": "b9919aa966de7a771a1745183aba7609dc52e75a", "filename": "libgcc/config/arm/lib1funcs.S", "status": "modified", "additions": 23, "deletions": 73, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flib1funcs.S?ref=9b2e34ef6d56fae077b175d73d6f7440af8eba25", "patch": "@@ -74,49 +74,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Function end macros.  Variants for interworking.  */\n \n-#if defined(__ARM_ARCH_2__)\n-# define __ARM_ARCH__ 2\n-#endif\n-\n-#if defined(__ARM_ARCH_3__)\n-# define __ARM_ARCH__ 3\n-#endif\n-\n-#if defined(__ARM_ARCH_3M__) || defined(__ARM_ARCH_4__) \\\n-\t|| defined(__ARM_ARCH_4T__)\n-/* We use __ARM_ARCH__ set to 4 here, but in reality it's any processor with\n-   long multiply instructions.  That includes v3M.  */\n-# define __ARM_ARCH__ 4\n-#endif\n-\t\n-#if defined(__ARM_ARCH_5__) || defined(__ARM_ARCH_5T__) \\\n-\t|| defined(__ARM_ARCH_5E__) || defined(__ARM_ARCH_5TE__) \\\n-\t|| defined(__ARM_ARCH_5TEJ__)\n-# define __ARM_ARCH__ 5\n-#endif\n-\n-#if defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) \\\n-\t|| defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) \\\n-\t|| defined(__ARM_ARCH_6ZK__) || defined(__ARM_ARCH_6T2__) \\\n-\t|| defined(__ARM_ARCH_6M__)\n-# define __ARM_ARCH__ 6\n-#endif\n-\n-#if defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_7A__) \\\n-\t|| defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) \\\n-\t|| defined(__ARM_ARCH_7EM__)\n-# define __ARM_ARCH__ 7\n-#endif\n-\n-#if defined(__ARM_ARCH_8A__) || defined(__ARM_ARCH_8M_BASE__) \\\n-\t|| defined(__ARM_ARCH_8M_MAIN__) || defined(__ARM_ARCH_8R__)\n-# define __ARM_ARCH__ 8\n-#endif\n-\n-#ifndef __ARM_ARCH__\n-#error Unable to determine architecture.\n-#endif\n-\n /* There are times when we might prefer Thumb1 code even if ARM code is\n    permitted, for example, the code might be smaller, or there might be\n    interworking problems with switching to ARM state if interworking is\n@@ -135,13 +92,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* How to return from a function call depends on the architecture variant.  */\n \n-#if (__ARM_ARCH__ > 4) || defined(__ARM_ARCH_4T__)\n+#if (__ARM_ARCH > 4) || defined(__ARM_ARCH_4T__)\n \n # define RET\t\tbx\tlr\n # define RETc(x)\tbx##x\tlr\n \n /* Special precautions for interworking on armv4t.  */\n-# if (__ARM_ARCH__ == 4)\n+# if (__ARM_ARCH == 4)\n \n /* Always use bx, not ldr pc.  */\n #  if (defined(__thumb__) || defined(__THUMB_INTERWORK__))\n@@ -544,7 +501,7 @@ pc\t\t.req\tr15\n /* ------------------------------------------------------------------------ */\t\n .macro ARM_DIV_BODY dividend, divisor, result, curbit\n \n-#if __ARM_ARCH__ >= 5 && ! defined (__OPTIMIZE_SIZE__)\n+#if defined (__ARM_FEATURE_CLZ) && ! defined (__OPTIMIZE_SIZE__)\n \n #if defined (__thumb2__)\n \tclz\t\\curbit, \\dividend\n@@ -584,8 +541,8 @@ pc\t\t.req\tr15\n \t.endr\n #endif\n \n-#else /* __ARM_ARCH__ < 5 || defined (__OPTIMIZE_SIZE__) */\n-#if __ARM_ARCH__ >= 5\n+#else /* !defined (__ARM_FEATURE_CLZ) || defined (__OPTIMIZE_SIZE__) */\n+#if defined (__ARM_FEATURE_CLZ)\n \n \tclz\t\\curbit, \\divisor\n \tclz\t\\result, \\dividend\n@@ -595,7 +552,7 @@ pc\t\t.req\tr15\n \tmov\t\\curbit, \\curbit, lsl \\result\n \tmov\t\\result, #0\n \t\n-#else /* __ARM_ARCH__ < 5 */\n+#else /* !defined (__ARM_FEATURE_CLZ) */\n \n \t@ Initially shift the divisor left 3 bits if possible,\n \t@ set curbit accordingly.  This allows for curbit to be located\n@@ -626,7 +583,7 @@ pc\t\t.req\tr15\n \n \tmov\t\\result, #0\n \n-#endif /* __ARM_ARCH__ < 5 */\n+#endif /* !defined (__ARM_FEATURE_CLZ) */\n \n \t@ Division loop\n 1:\tcmp\t\\dividend, \\divisor\n@@ -651,13 +608,13 @@ pc\t\t.req\tr15\n \tmovne\t\\divisor,  \\divisor, lsr #4\n \tbne\t1b\n \n-#endif /* __ARM_ARCH__ < 5 || defined (__OPTIMIZE_SIZE__) */\n+#endif /* !defined (__ARM_FEATURE_CLZ) || defined (__OPTIMIZE_SIZE__) */\n \n .endm\n /* ------------------------------------------------------------------------ */\t\n .macro ARM_DIV2_ORDER divisor, order\n \n-#if __ARM_ARCH__ >= 5\n+#if defined (__ARM_FEATURE_CLZ)\n \n \tclz\t\\order, \\divisor\n \trsb\t\\order, \\order, #31\n@@ -687,7 +644,7 @@ pc\t\t.req\tr15\n /* ------------------------------------------------------------------------ */\n .macro ARM_MOD_BODY dividend, divisor, order, spare\n \n-#if __ARM_ARCH__ >= 5 && ! defined (__OPTIMIZE_SIZE__)\n+#if defined(__ARM_FEATURE_CLZ) && ! defined (__OPTIMIZE_SIZE__)\n \n \tclz\t\\order, \\divisor\n \tclz\t\\spare, \\dividend\n@@ -702,15 +659,15 @@ pc\t\t.req\tr15\n \tsubcs\t\\dividend, \\dividend, \\divisor, lsl #shift\n \t.endr\n \n-#else /* __ARM_ARCH__ < 5 || defined (__OPTIMIZE_SIZE__) */\n-#if __ARM_ARCH__ >= 5\n+#else /* !defined (__ARM_FEATURE_CLZ) || defined (__OPTIMIZE_SIZE__) */\n+#if defined (__ARM_FEATURE_CLZ)\n \n \tclz\t\\order, \\divisor\n \tclz\t\\spare, \\dividend\n \tsub\t\\order, \\order, \\spare\n \tmov\t\\divisor, \\divisor, lsl \\order\n \t\n-#else /* __ARM_ARCH__ < 5 */\n+#else /* !defined (__ARM_FEATURE_CLZ) */\n \n \tmov\t\\order, #0\n \n@@ -732,7 +689,7 @@ pc\t\t.req\tr15\n \taddlo\t\\order, \\order, #1\n \tblo\t1b\n \n-#endif /* __ARM_ARCH__ < 5 */\n+#endif /* !defined (__ARM_FEATURE_CLZ) */\n \n \t@ Perform all needed substractions to keep only the reminder.\n \t@ Do comparisons in batch of 4 first.\n@@ -770,7 +727,7 @@ pc\t\t.req\tr15\n \tsubhs\t\\dividend, \\dividend, \\divisor\n 5:\n \n-#endif /* __ARM_ARCH__ < 5 || defined (__OPTIMIZE_SIZE__) */\n+#endif /* !defined (__ARM_FEATURE_CLZ) || defined (__OPTIMIZE_SIZE__) */\n \n .endm\n /* ------------------------------------------------------------------------ */\n@@ -1560,7 +1517,7 @@ LSYM(Lover12):\n @ EABI GNU/Linux call to cacheflush syscall.\n \tARM_FUNC_START clear_cache\n \tdo_push\t{r7}\n-#if __ARM_ARCH__ >= 7 || defined(__ARM_ARCH_6T2__)\n+#if __ARM_ARCH >= 7 || defined(__ARM_ARCH_6T2__)\n \tmovw\tr7, #2\n \tmovt\tr7, #0xf\n #else\n@@ -1699,13 +1656,6 @@ LSYM(Lover12):\n \n #endif /* __symbian__ */\n \n-#if (__ARM_ARCH_ISA_THUMB == 2\t\\\n-     || (__ARM_ARCH_ISA_ARM\t\\\n-\t && (__ARM_ARCH__ > 5\t\\\n-\t     || (__ARM_ARCH__ == 5 && __ARM_ARCH_ISA_THUMB))))\n-#define HAVE_ARM_CLZ 1\n-#endif\n-\n #ifdef L_clzsi2\n #ifdef NOT_ISA_TARGET_32BIT\n FUNC_START clzsi2\n@@ -1736,7 +1686,7 @@ FUNC_START clzsi2\n \tFUNC_END clzsi2\n #else\n ARM_FUNC_START clzsi2\n-# if defined(HAVE_ARM_CLZ)\n+# if defined (__ARM_FEATURE_CLZ)\n \tclz\tr0, r0\n \tRET\n # else\n@@ -1760,13 +1710,13 @@ ARM_FUNC_START clzsi2\n .align 2\n 1:\n .byte 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0\n-# endif /* !HAVE_ARM_CLZ */\n+# endif /* !defined (__ARM_FEATURE_CLZ) */\n \tFUNC_END clzsi2\n #endif\n #endif /* L_clzsi2 */\n \n #ifdef L_clzdi2\n-#if !defined(HAVE_ARM_CLZ)\n+#if !defined (__ARM_FEATURE_CLZ)\n \n # ifdef NOT_ISA_TARGET_32BIT\n FUNC_START clzdi2\n@@ -1800,7 +1750,7 @@ ARM_FUNC_START clzdi2\n # endif\n \tFUNC_END clzdi2\n \n-#else /* HAVE_ARM_CLZ */\n+#else /* defined (__ARM_FEATURE_CLZ) */\n \n ARM_FUNC_START clzdi2\n \tcmp\txxh, #0\n@@ -1848,7 +1798,7 @@ FUNC_START ctzsi2\n ARM_FUNC_START ctzsi2\n \trsb\tr1, r0, #0\n \tand\tr0, r0, r1\n-# if defined(HAVE_ARM_CLZ)\n+# if defined (__ARM_FEATURE_CLZ)\n \tclz\tr0, r0\n \trsb\tr0, r0, #31\n \tRET\n@@ -1873,7 +1823,7 @@ ARM_FUNC_START ctzsi2\n .align 2\n 1:\n .byte\t27, 28, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31\n-# endif /* !HAVE_ARM_CLZ */\n+# endif /* !defined (__ARM_FEATURE_CLZ) */\n \tFUNC_END ctzsi2\n #endif\n #endif /* L_clzsi2 */\n@@ -1887,7 +1837,7 @@ ARM_FUNC_START ctzsi2\n    not support Thumb instructions.  (This can be a multilib option).  */\n #if defined __ARM_ARCH_4T__ || defined __ARM_ARCH_5T__\\\n       || defined __ARM_ARCH_5TE__ || defined __ARM_ARCH_5TEJ__ \\\n-      || __ARM_ARCH__ >= 6\n+      || __ARM_ARCH >= 6\n \n #if defined L_call_via_rX\n "}, {"sha": "50c58dc9b21aa534790eca5e99cec46850210869", "filename": "libgcc/config/arm/libunwind.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2Fconfig%2Farm%2Flibunwind.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2e34ef6d56fae077b175d73d6f7440af8eba25/libgcc%2Fconfig%2Farm%2Flibunwind.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flibunwind.S?ref=9b2e34ef6d56fae077b175d73d6f7440af8eba25", "patch": "@@ -46,7 +46,7 @@\n \tEQUIV SYM (\\name), SYM (__\\name)\n .endm\n \n-#if (__ARM_ARCH__ == 4)\n+#if (__ARM_ARCH == 4)\n /* Some coprocessors require armv5t.  We know this code will never be run on\n    other cpus.  Tell gas to allow armv5t, but only mark the objects as armv4.\n  */"}]}