{"sha": "07b7486e2c27a83e5809b246b8c9797c5e69ae72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiNzQ4NmUyYzI3YTgzZTU4MDliMjQ2YjhjOTc5N2M1ZTY5YWU3Mg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-24T15:40:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-24T15:40:08Z"}, "message": "Merge #524\n\n524: Change unit-type from void_type_node to a zero sized unsigned integer r=philberty a=philberty\n\nFunctions with return type of unit are still using void_type_node as there is an ICE in GCC:\r\n\r\n```\r\ntest.rs: In function \u2018main\u2019:                                                                                                                                                                                                                           \r\ntest.rs:16:1: internal compiler error: in min_value, at wide-int.cc:346                                                                                                                                                                                \r\n   16 | fn main() {                                                                                                                                                                                                                                    \r\n      | ^                                                                                                                                                                                                                                              \r\n0x1d551d5 wi::min_value(unsigned int, signop)                                                                                                                                                                                                          \r\n        ../../gccrs/gcc/wide-int.cc:346                                                                                                                                                                                                                \r\n0x1146ca5 irange::set_varying(tree_node*)                                                                                  \r\n        ../../gccrs/gcc/value-range.h:476                                                                                                                                                                                                              \r\n0x1ce5970 value_range_equiv::set_varying(tree_node*)                                                                                                                                                                                                   \r\n        ../../gccrs/gcc/value-range-equiv.cc:71                                                                            \r\n0x1d3da07 vr_values::set_def_to_varying(tree_node const*)                                                                  \r\n        ../../gccrs/gcc/vr-values.c:230                                                                                    \r\n0x1d3da70 vr_values::set_defs_to_varying(gimple*)                                                                          \r\n        ../../gccrs/gcc/vr-values.c:241                                                                                                                                                                                                                \r\n0x1c78b2f vrp_prop::visit_stmt(gimple*, edge_def**, tree_node**)                                                                                                                                                                                       \r\n        ../../gccrs/gcc/tree-vrp.c:4001                                                                                                                                                                                                                \r\n0x1ad8519 ssa_propagation_engine::simulate_stmt(gimple*)                                                                                                                                                                                               \r\n        ../../gccrs/gcc/tree-ssa-propagate.c:230                                                                                                                                                                                                       \r\n0x1ad8a0e ssa_propagation_engine::simulate_block(basic_block_def*)                                                                                                                                                                                     \r\n        ../../gccrs/gcc/tree-ssa-propagate.c:337                                                                                                                                                                                                       \r\n0x1ad9f2e ssa_propagation_engine::ssa_propagate()                                                                                                                                                                                                      \r\n        ../../gccrs/gcc/tree-ssa-propagate.c:800                                                                                                                                                                                                       \r\n0x1c7a0b0 execute_vrp                                                                                                                                                                                                                                  \r\n        ../../gccrs/gcc/tree-vrp.c:4512                                                                                                                                                                                                                \r\n0x1c7a3e4 execute                                                                                                                                                                                                                                      \r\n        ../../gccrs/gcc/tree-vrp.c:4620                                                                                                                                                                                                                \r\nPlease submit a full bug report,\r\n```\r\n\r\nAddresses #155\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "84d12952ec7c8c9830337dd48f3b452f320353bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84d12952ec7c8c9830337dd48f3b452f320353bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07b7486e2c27a83e5809b246b8c9797c5e69ae72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg1KdYCRBK7hj4Ov3rIwAAuWwIAAz2mc3AIXACtQ560EZQ4w0W\nwY3m4c52i5zrnWM7Xo4Sb21EVmPxIR2RjI5C7b87pujnGZidxWSW4N5oWyCaxPdI\nfa5wQShTsjLlP9tux7v0HoEUIpRyPodbp+OMr9kIOgfSvV6OYQAgr7hVQ8efMaXg\nxYFWoB4IujeJmYBoRIUG7L9ZFuKUzUKnJQZDXI3IRSfyfA3AeQDmOxsIHnCcVczj\nkwXR1W4V6g4c9TTKKmGyrCFgx8ORD/NlbAoRftcqa4I77ulkVL24gNuHY6oH79zt\n3GkvuCdpcKNeYB8QUeu6nWaNPuIxeCbc93/vbk85HtxBaxfqxwTqbjKrdk7/tP8=\n=zY8T\n-----END PGP SIGNATURE-----\n", "payload": "tree 84d12952ec7c8c9830337dd48f3b452f320353bb\nparent c87f2c72dcfa67f1a78fafacaf49043f11c7df6a\nparent 71c644f430edbae114396c075baab330889c698c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624549208 +0000\ncommitter GitHub <noreply@github.com> 1624549208 +0000\n\nMerge #524\n\n524: Change unit-type from void_type_node to a zero sized unsigned integer r=philberty a=philberty\n\nFunctions with return type of unit are still using void_type_node as there is an ICE in GCC:\r\n\r\n```\r\ntest.rs: In function \u2018main\u2019:                                                                                                                                                                                                                           \r\ntest.rs:16:1: internal compiler error: in min_value, at wide-int.cc:346                                                                                                                                                                                \r\n   16 | fn main() {                                                                                                                                                                                                                                    \r\n      | ^                                                                                                                                                                                                                                              \r\n0x1d551d5 wi::min_value(unsigned int, signop)                                                                                                                                                                                                          \r\n        ../../gccrs/gcc/wide-int.cc:346                                                                                                                                                                                                                \r\n0x1146ca5 irange::set_varying(tree_node*)                                                                                  \r\n        ../../gccrs/gcc/value-range.h:476                                                                                                                                                                                                              \r\n0x1ce5970 value_range_equiv::set_varying(tree_node*)                                                                                                                                                                                                   \r\n        ../../gccrs/gcc/value-range-equiv.cc:71                                                                            \r\n0x1d3da07 vr_values::set_def_to_varying(tree_node const*)                                                                  \r\n        ../../gccrs/gcc/vr-values.c:230                                                                                    \r\n0x1d3da70 vr_values::set_defs_to_varying(gimple*)                                                                          \r\n        ../../gccrs/gcc/vr-values.c:241                                                                                                                                                                                                                \r\n0x1c78b2f vrp_prop::visit_stmt(gimple*, edge_def**, tree_node**)                                                                                                                                                                                       \r\n        ../../gccrs/gcc/tree-vrp.c:4001                                                                                                                                                                                                                \r\n0x1ad8519 ssa_propagation_engine::simulate_stmt(gimple*)                                                                                                                                                                                               \r\n        ../../gccrs/gcc/tree-ssa-propagate.c:230                                                                                                                                                                                                       \r\n0x1ad8a0e ssa_propagation_engine::simulate_block(basic_block_def*)                                                                                                                                                                                     \r\n        ../../gccrs/gcc/tree-ssa-propagate.c:337                                                                                                                                                                                                       \r\n0x1ad9f2e ssa_propagation_engine::ssa_propagate()                                                                                                                                                                                                      \r\n        ../../gccrs/gcc/tree-ssa-propagate.c:800                                                                                                                                                                                                       \r\n0x1c7a0b0 execute_vrp                                                                                                                                                                                                                                  \r\n        ../../gccrs/gcc/tree-vrp.c:4512                                                                                                                                                                                                                \r\n0x1c7a3e4 execute                                                                                                                                                                                                                                      \r\n        ../../gccrs/gcc/tree-vrp.c:4620                                                                                                                                                                                                                \r\nPlease submit a full bug report,\r\n```\r\n\r\nAddresses #155\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b7486e2c27a83e5809b246b8c9797c5e69ae72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b7486e2c27a83e5809b246b8c9797c5e69ae72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b7486e2c27a83e5809b246b8c9797c5e69ae72/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87f2c72dcfa67f1a78fafacaf49043f11c7df6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c87f2c72dcfa67f1a78fafacaf49043f11c7df6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c87f2c72dcfa67f1a78fafacaf49043f11c7df6a"}, {"sha": "71c644f430edbae114396c075baab330889c698c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c644f430edbae114396c075baab330889c698c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c644f430edbae114396c075baab330889c698c"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "e0c9352bd21141f861101caa6eeebc9e171122e4", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=07b7486e2c27a83e5809b246b8c9797c5e69ae72", "patch": "@@ -423,7 +423,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n   {\n     if (type.num_fields () == 0)\n       {\n-\ttranslated = ctx->get_backend ()->void_type ();\n+\ttranslated = ctx->get_backend ()->unit_type ();\n \treturn;\n       }\n \n@@ -544,7 +544,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::NeverType &) override\n   {\n-    translated = ctx->get_backend ()->void_type ();\n+    translated = ctx->get_backend ()->unit_type ();\n   }\n \n private:"}, {"sha": "857623577f7bc7cb24e8629b855d048a52d822ca", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=07b7486e2c27a83e5809b246b8c9797c5e69ae72", "patch": "@@ -42,8 +42,6 @@ class TyTyCompile : public TyTy::TyVisitor\n     return compiler.translated;\n   }\n \n-  ~TyTyCompile () {}\n-\n   void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n \n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n@@ -53,7 +51,7 @@ class TyTyCompile : public TyTy::TyVisitor\n   void visit (TyTy::TupleType &type) override\n   {\n     if (type.num_fields () == 0)\n-      translated = backend->void_type ();\n+      translated = backend->unit_type ();\n     else\n       gcc_unreachable ();\n   }\n@@ -224,7 +222,7 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::NeverType &) override\n   {\n-    translated = backend->void_type ();\n+    translated = backend->unit_type ();\n   }\n \n private:"}, {"sha": "35271b60f43843a2d9638778c6d47128252bcfba", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=07b7486e2c27a83e5809b246b8c9797c5e69ae72", "patch": "@@ -109,6 +109,9 @@ class Backend\n   // unsafe.Pointer is represented as *void.\n   virtual Btype *void_type () = 0;\n \n+  // get unit-type\n+  virtual Btype *unit_type () = 0;\n+\n   // Get the unnamed boolean type.\n   virtual Btype *bool_type () = 0;\n "}, {"sha": "794660ec07034526a07a6fff9d35aa82109f23d3", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=07b7486e2c27a83e5809b246b8c9797c5e69ae72", "patch": "@@ -171,6 +171,19 @@ class Gcc_backend : public Backend\n \n   Btype *void_type () { return this->make_type (void_type_node); }\n \n+  Btype *unit_type ()\n+  {\n+    static Btype *unit_type;\n+    if (unit_type == nullptr)\n+      {\n+\tauto unit_type_node = integer_type (true, 0);\n+\tunit_type = named_type (\"()\", unit_type_node,\n+\t\t\t\t::Linemap::predeclared_location ());\n+      }\n+\n+    return unit_type;\n+  }\n+\n   Btype *bool_type () { return this->make_type (boolean_type_node); }\n \n   Btype *char_type () { return this->make_type (char_type_node); }\n@@ -297,7 +310,10 @@ class Gcc_backend : public Backend\n     return this->make_expression (null_pointer_node);\n   }\n \n-  Bexpression *unit_expression () { return this->make_expression (void_node); }\n+  Bexpression *unit_expression ()\n+  {\n+    return this->make_expression (integer_zero_node);\n+  }\n \n   Bexpression *var_expression (Bvariable *var, Location);\n "}, {"sha": "c134d51b8d64dcc6092981e8ed2647b22eff4854", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=07b7486e2c27a83e5809b246b8c9797c5e69ae72", "patch": "@@ -54,7 +54,7 @@ class ConstFoldType : public TyTy::TyVisitor\n   void visit (TyTy::TupleType &type) override\n   {\n     if (type.num_fields () == 0)\n-      translated = backend->void_type ();\n+      translated = backend->unit_type ();\n     else\n       gcc_unreachable ();\n   }"}, {"sha": "b5f925907d8ff205c20ec821724ea911ce691a54", "filename": "gcc/testsuite/rust/compile/torture/unit_type2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7486e2c27a83e5809b246b8c9797c5e69ae72/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type2.rs?ref=07b7486e2c27a83e5809b246b8c9797c5e69ae72", "patch": "@@ -0,0 +1,8 @@\n+fn test(a: ()) -> () {\n+    a\n+}\n+\n+fn main() {\n+    let a;\n+    a = test(());\n+}"}]}