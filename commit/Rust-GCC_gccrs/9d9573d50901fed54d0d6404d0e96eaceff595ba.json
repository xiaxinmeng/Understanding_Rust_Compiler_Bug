{"sha": "9d9573d50901fed54d0d6404d0e96eaceff595ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5NTczZDUwOTAxZmVkNTRkMGQ2NDA0ZDBlOTZlYWNlZmY1OTViYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-05-26T14:45:59Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-05-26T14:45:59Z"}, "message": "Simplify usage of some TDF_* flags.\n\n2017-05-26  Martin Liska  <mliska@suse.cz>\n\n\t* cfg.c (check_bb_profile): Do not use TDF_COMMENT and print\n\talways leading ';; '.\n\t(dump_bb_info): Likewise.\n\t(brief_dump_cfg): Likewise.\n\t* cfgrtl.c (print_rtl_with_bb): Do not use TDF_COMMENT.\n\t* dumpfile.c: Remove usage of TDF_VERBOSE.\n\t* dumpfile.h (enum dump_kind): Likewise.\n\t(dump_gimple_bb_header): Do not use TDF_COMMENT.\n\t* print-tree.c (debug_verbose): Remove.\n\t* tree-cfg.c (gimple_dump_cfg): Do not use TDF_COMMENT.\n\t(dump_function_to_file): Remove dumps guarded with TDF_VERBOSE.\n\t* tree-diagnostic.c (default_tree_printer): Replace\n\tTDF_DIAGNOSTIC with TDF_SLIM.\n\nFrom-SVN: r248514", "tree": {"sha": "b33f0e1b60f77c896c3606a32f60f305bb200053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b33f0e1b60f77c896c3606a32f60f305bb200053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d9573d50901fed54d0d6404d0e96eaceff595ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9573d50901fed54d0d6404d0e96eaceff595ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d9573d50901fed54d0d6404d0e96eaceff595ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9573d50901fed54d0d6404d0e96eaceff595ba/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8d0706b24ff84eb0adfa161819e71a80f5a918a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d0706b24ff84eb0adfa161819e71a80f5a918a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d0706b24ff84eb0adfa161819e71a80f5a918a"}], "stats": {"total": 119, "additions": 47, "deletions": 72}, "files": [{"sha": "401620d49d4d80eb7582a8b7cf3ac9244b5c2370", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d9573d50901fed54d0d6404d0e96eaceff595ba", "patch": "@@ -1,3 +1,19 @@\n+2017-05-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* cfg.c (check_bb_profile): Do not use TDF_COMMENT and print\n+\talways leading ';; '.\n+\t(dump_bb_info): Likewise.\n+\t(brief_dump_cfg): Likewise.\n+\t* cfgrtl.c (print_rtl_with_bb): Do not use TDF_COMMENT.\n+\t* dumpfile.c: Remove usage of TDF_VERBOSE.\n+\t* dumpfile.h (enum dump_kind): Likewise.\n+\t(dump_gimple_bb_header): Do not use TDF_COMMENT.\n+\t* print-tree.c (debug_verbose): Remove.\n+\t* tree-cfg.c (gimple_dump_cfg): Do not use TDF_COMMENT.\n+\t(dump_function_to_file): Remove dumps guarded with TDF_VERBOSE.\n+\t* tree-diagnostic.c (default_tree_printer): Replace\n+\tTDF_DIAGNOSTIC with TDF_SLIM.\n+\n 2017-05-26  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-vect-loop-manip.c (create_intersect_range_checks_index): Pass"}, {"sha": "aef053f5d22cd522fc6e068b481c247e93c1c937", "filename": "gcc/cfg.c", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=9d9573d50901fed54d0d6404d0e96eaceff595ba", "patch": "@@ -396,7 +396,7 @@ clear_bb_flags (void)\n    It is still practical to have them reported for debugging of simple\n    testcases.  */\n static void\n-check_bb_profile (basic_block bb, FILE * file, int indent, dump_flags_t flags)\n+check_bb_profile (basic_block bb, FILE * file, int indent)\n {\n   edge e;\n   int sum = 0;\n@@ -425,17 +425,17 @@ check_bb_profile (basic_block bb, FILE * file, int indent, dump_flags_t flags)\n       if (found)\n \t{\n \t  if (EDGE_COUNT (bb->succs) && abs (sum - REG_BR_PROB_BASE) > 100)\n-\t    fprintf (file, \"%s%sInvalid sum of outgoing probabilities %.1f%%\\n\",\n-\t\t     (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent,\n-\t\t     sum * 100.0 / REG_BR_PROB_BASE);\n+\t    fprintf (file,\n+\t\t     \";; %sInvalid sum of outgoing probabilities %.1f%%\\n\",\n+\t\t     s_indent, sum * 100.0 / REG_BR_PROB_BASE);\n \t  lsum = 0;\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    lsum += e->count;\n \t  if (EDGE_COUNT (bb->succs)\n \t      && (lsum - bb->count > 100 || lsum - bb->count < -100))\n-\t    fprintf (file, \"%s%sInvalid sum of outgoing counts %i, should be %i\\n\",\n-\t\t     (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent,\n-\t\t     (int) lsum, (int) bb->count);\n+\t    fprintf (file,\n+\t\t     \";; %sInvalid sum of outgoing counts %i, should be %i\\n\",\n+\t\t     s_indent, (int) lsum, (int) bb->count);\n \t}\n     }\n     if (bb != ENTRY_BLOCK_PTR_FOR_FN (fun))\n@@ -445,30 +445,28 @@ check_bb_profile (basic_block bb, FILE * file, int indent, dump_flags_t flags)\n \tsum += EDGE_FREQUENCY (e);\n       if (abs (sum - bb->frequency) > 100)\n \tfprintf (file,\n-\t\t \"%s%sInvalid sum of incoming frequencies %i, should be %i\\n\",\n-\t\t (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent,\n-\t\t sum, bb->frequency);\n+\t\t \";; %sInvalid sum of incoming frequencies %i, should be %i\\n\",\n+\t\t s_indent, sum, bb->frequency);\n       lsum = 0;\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \tlsum += e->count;\n       if (lsum - bb->count > 100 || lsum - bb->count < -100)\n-\tfprintf (file, \"%s%sInvalid sum of incoming counts %i, should be %i\\n\",\n-\t\t (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent,\n-\t\t (int) lsum, (int) bb->count);\n+\tfprintf (file, \";; %sInvalid sum of incoming counts %i, should be %i\\n\",\n+\t\t s_indent, (int) lsum, (int) bb->count);\n     }\n   if (BB_PARTITION (bb) == BB_COLD_PARTITION)\n     {\n       /* Warn about inconsistencies in the partitioning that are\n          currently caused by profile insanities created via optimization.  */\n       if (!probably_never_executed_bb_p (fun, bb))\n-        fprintf (file, \"%s%sBlock in cold partition with hot count\\n\",\n-                 (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent);\n+\tfprintf (file, \";; %sBlock in cold partition with hot count\\n\",\n+\t\t s_indent);\n       FOR_EACH_EDGE (e, ei, bb->preds)\n         {\n           if (!probably_never_executed_edge_p (fun, e))\n             fprintf (file,\n-                     \"%s%sBlock in cold partition with incoming hot edge\\n\",\n-                     (flags & TDF_COMMENT) ? \";; \" : \"\", s_indent);\n+\t\t     \";; %sBlock in cold partition with incoming hot edge\\n\",\n+\t\t     s_indent);\n         }\n     }\n }\n@@ -737,8 +735,7 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, dump_flags_t flags,\n     {\n       unsigned i;\n \n-      if (flags & TDF_COMMENT)\n-\tfputs (\";; \", outf);\n+      fputs (\";; \", outf);\n       fprintf (outf, \"%sbasic block %d, loop depth %d\",\n \t       s_indent, bb->index, bb_loop_depth (bb));\n       if (flags & TDF_DETAILS)\n@@ -756,9 +753,8 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, dump_flags_t flags,\n \n       if (flags & TDF_DETAILS)\n \t{\n-\t  check_bb_profile (bb, outf, indent, flags);\n-\t  if (flags & TDF_COMMENT)\n-\t    fputs (\";; \", outf);\n+\t  check_bb_profile (bb, outf, indent);\n+\t  fputs (\";; \", outf);\n \t  fprintf (outf, \"%s prev block \", s_indent);\n \t  if (bb->prev_bb)\n \t    fprintf (outf, \"%d\", bb->prev_bb->index);\n@@ -787,16 +783,14 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, dump_flags_t flags,\n \t  fputc ('\\n', outf);\n \t}\n \n-      if (flags & TDF_COMMENT)\n-\tfputs (\";; \", outf);\n+      fputs (\";; \", outf);\n       fprintf (outf, \"%s pred:      \", s_indent);\n       first = true;\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \t{\n \t  if (! first)\n \t    {\n-\t      if (flags & TDF_COMMENT)\n-\t\tfputs (\";; \", outf);\n+\t      fputs (\";; \", outf);\n \t      fprintf (outf, \"%s            \", s_indent);\n \t    }\n \t  first = false;\n@@ -809,16 +803,14 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, dump_flags_t flags,\n \n   if (do_footer)\n     {\n-      if (flags & TDF_COMMENT)\n-\tfputs (\";; \", outf);\n+      fputs (\";; \", outf);\n       fprintf (outf, \"%s succ:      \", s_indent);\n       first = true;\n       FOR_EACH_EDGE (e, ei, bb->succs)\n         {\n \t  if (! first)\n \t    {\n-\t      if (flags & TDF_COMMENT)\n-\t\tfputs (\";; \", outf);\n+\t      fputs (\";; \", outf);\n \t      fprintf (outf, \"%s            \", s_indent);\n \t    }\n \t  first = false;\n@@ -839,9 +831,7 @@ brief_dump_cfg (FILE *file, dump_flags_t flags)\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      dump_bb_info (file, bb, 0,\n-\t\t    flags & (TDF_COMMENT | TDF_DETAILS),\n-\t\t    true, true);\n+      dump_bb_info (file, bb, 0, flags & TDF_DETAILS, true, true);\n     }\n }\n "}, {"sha": "fffc4b070cd951a35815ccc4d3df65cd513c1a8f", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=9d9573d50901fed54d0d6404d0e96eaceff595ba", "patch": "@@ -2207,7 +2207,7 @@ print_rtl_with_bb (FILE *outf, const rtx_insn *rtx_first, dump_flags_t flags)\n \t      bb = start[INSN_UID (tmp_rtx)];\n \t      if (bb != NULL)\n \t\t{\n-\t\t  dump_bb_info (outf, bb, 0, dump_flags | TDF_COMMENT, true, false);\n+\t\t  dump_bb_info (outf, bb, 0, dump_flags, true, false);\n \t\t  if (df && (flags & TDF_DETAILS))\n \t\t    df_dump_top (bb, outf);\n \t\t}\n@@ -2234,7 +2234,7 @@ print_rtl_with_bb (FILE *outf, const rtx_insn *rtx_first, dump_flags_t flags)\n \t      bb = end[INSN_UID (tmp_rtx)];\n \t      if (bb != NULL)\n \t\t{\n-\t\t  dump_bb_info (outf, bb, 0, dump_flags | TDF_COMMENT, false, true);\n+\t\t  dump_bb_info (outf, bb, 0, dump_flags, false, true);\n \t\t  if (df && (flags & TDF_DETAILS))\n \t\t    df_dump_bottom (bb, outf);\n \t\t  putc ('\\n', outf);"}, {"sha": "233e6b1991618ebbee07c5086cd7e7914723a5ed", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=9d9573d50901fed54d0d6404d0e96eaceff595ba", "patch": "@@ -111,7 +111,6 @@ static const struct dump_option_value_info dump_options[] =\n   {\"uid\", TDF_UID},\n   {\"stmtaddr\", TDF_STMTADDR},\n   {\"memsyms\", TDF_MEMSYMS},\n-  {\"verbose\", TDF_VERBOSE},\n   {\"eh\", TDF_EH},\n   {\"alias\", TDF_ALIAS},\n   {\"nouid\", TDF_NOUID},\n@@ -123,8 +122,7 @@ static const struct dump_option_value_info dump_options[] =\n   {\"missed\", MSG_MISSED_OPTIMIZATION},\n   {\"note\", MSG_NOTE},\n   {\"optall\", MSG_ALL},\n-  {\"all\", ~(TDF_RAW | TDF_SLIM | TDF_LINENO\n-\t    | TDF_STMTADDR | TDF_GRAPH | TDF_DIAGNOSTIC | TDF_VERBOSE\n+  {\"all\", ~(TDF_RAW | TDF_SLIM | TDF_LINENO | TDF_GRAPH | TDF_STMTADDR\n \t    | TDF_RHS_ONLY | TDF_NOUID | TDF_ENUMERATE_LOCALS | TDF_SCEV\n \t    | TDF_GIMPLE)},\n   {NULL, 0}"}, {"sha": "dc2d44971e2da335accd5c5b7c28a9f2346d2dfa", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=9d9573d50901fed54d0d6404d0e96eaceff595ba", "patch": "@@ -70,16 +70,12 @@ enum dump_kind\n #define TDF_LINENO\t(1 << 10)\t/* display statement line numbers */\n #define TDF_UID\t\t(1 << 11)\t/* display decl UIDs */\n \n-#define TDF_STMTADDR\t(1 << 12)\t/* Address of stmt.  */\n+#define TDF_STMTADDR\t(1 << 12)       /* Address of stmt.  */\n \n #define TDF_GRAPH\t(1 << 13)\t/* a graph dump is being emitted */\n #define TDF_MEMSYMS\t(1 << 14)\t/* display memory symbols in expr.\n \t\t\t\t\t   Implies TDF_VOPS.  */\n \n-#define TDF_DIAGNOSTIC\t(1 << 15)\t/* A dump to be put in a diagnostic\n-\t\t\t\t\t   message.  */\n-#define TDF_VERBOSE\t(1 << 16)\t/* A dump that uses the full tree\n-\t\t\t\t\t   dumper to print stmts.  */\n #define TDF_RHS_ONLY\t(1 << 17)\t/* a flag to only print the RHS of\n \t\t\t\t\t   a gimple stmt.  */\n #define TDF_ASMNAME\t(1 << 18)\t/* display asm names of decls  */\n@@ -90,7 +86,6 @@ enum dump_kind\n #define TDF_ENUMERATE_LOCALS (1 << 22)\t/* Enumerate locals by uid.  */\n #define TDF_CSELIB\t(1 << 23)\t/* Dump cselib details.  */\n #define TDF_SCEV\t(1 << 24)\t/* Dump SCEV details.  */\n-#define TDF_COMMENT\t(1 << 25)\t/* Dump lines with prefix \";;\"  */\n #define TDF_GIMPLE\t(1 << 26)\t/* Dump in GIMPLE FE syntax  */\n #define TDF_FOLDING\t(1 << 27)\t/* Dump folding details.  */\n #define MSG_OPTIMIZED_LOCATIONS\t (1 << 27)  /* -fopt-info optimized sources */"}, {"sha": "5ff63a167a1b5ba6e900ec792bf79a7c7a1ebac3", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=9d9573d50901fed54d0d6404d0e96eaceff595ba", "patch": "@@ -2641,8 +2641,7 @@ dump_gimple_bb_header (FILE *outf, basic_block bb, int indent,\n \t{\n \t  gimple_stmt_iterator gsi;\n \n-\t  if (flags & TDF_COMMENT)\n-\t    fputs (\";; \", outf);\n+\t  fputs (\";; \", outf);\n \n \t  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t    if (!is_gimple_debug (gsi_stmt (gsi))"}, {"sha": "ea26a0b022ef4c767054d76dc7ad1639b37532c8", "filename": "gcc/print-tree.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=9d9573d50901fed54d0d6404d0e96eaceff595ba", "patch": "@@ -1037,21 +1037,6 @@ debug (const tree_node *ptr)\n     fprintf (stderr, \"<nil>\\n\");\n }\n \n-DEBUG_FUNCTION void\n-debug_verbose (const tree_node &ref)\n-{\n-  dump_tree_via_hooks (&ref, TDF_VERBOSE);\n-}\n-\n-DEBUG_FUNCTION void\n-debug_verbose (const tree_node *ptr)\n-{\n-  if (ptr)\n-    debug_verbose (*ptr);\n-  else\n-    fprintf (stderr, \"<nil>\\n\");\n-}\n-\n DEBUG_FUNCTION void\n debug_head (const tree_node &ref)\n {"}, {"sha": "6cb03ede7645334cda32c115c00b8cf15d9d2235", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9d9573d50901fed54d0d6404d0e96eaceff595ba", "patch": "@@ -2401,7 +2401,7 @@ gimple_dump_cfg (FILE *file, dump_flags_t flags)\n \t       n_basic_blocks_for_fn (cfun), n_edges_for_fn (cfun),\n \t       last_basic_block_for_fn (cfun));\n \n-      brief_dump_cfg (file, flags | TDF_COMMENT);\n+      brief_dump_cfg (file, flags);\n       fprintf (file, \"\\n\");\n     }\n \n@@ -7591,17 +7591,12 @@ dump_function_to_file (tree fndecl, FILE *file, dump_flags_t flags)\n       print_generic_expr (file, TREE_TYPE (arg), dump_flags);\n       fprintf (file, \" \");\n       print_generic_expr (file, arg, dump_flags);\n-      if (flags & TDF_VERBOSE)\n-\tprint_node (file, \"\", arg, 4);\n       if (DECL_CHAIN (arg))\n \tfprintf (file, \", \");\n       arg = DECL_CHAIN (arg);\n     }\n   fprintf (file, \")\\n\");\n \n-  if (flags & TDF_VERBOSE)\n-    print_node (file, \"\", fndecl, 2);\n-\n   dsf = DECL_STRUCT_FUNCTION (fndecl);\n   if (dsf && (flags & TDF_EH))\n     dump_eh_tree (file, dsf);\n@@ -7654,8 +7649,6 @@ dump_function_to_file (tree fndecl, FILE *file, dump_flags_t flags)\n \tFOR_EACH_LOCAL_DECL (fun, ix, var)\n \t  {\n \t    print_generic_decl (file, var, flags);\n-\t    if (flags & TDF_VERBOSE)\n-\t      print_node (file, \"\", var, 4);\n \t    fprintf (file, \"\\n\");\n \n \t    any_var = true;\n@@ -7691,7 +7684,7 @@ dump_function_to_file (tree fndecl, FILE *file, dump_flags_t flags)\n \tfprintf (file, \"\\n\");\n \n       FOR_EACH_BB_FN (bb, fun)\n-\tdump_bb (file, bb, 2, flags | TDF_COMMENT);\n+\tdump_bb (file, bb, 2, flags);\n \n       fprintf (file, \"}\\n\");\n     }"}, {"sha": "1009c78ab3cf1a48b221f10475b60db6aea7d5cf", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9573d50901fed54d0d6404d0e96eaceff595ba/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=9d9573d50901fed54d0d6404d0e96eaceff595ba", "patch": "@@ -26,7 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"tree-pretty-print.h\"\n #include \"tree-diagnostic.h\"\n-#include \"dumpfile.h\" /* TDF_DIAGNOSTIC */\n #include \"langhooks.h\"\n #include \"intl.h\"\n \n@@ -294,7 +293,7 @@ default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n       pp_string (pp, n);\n     }\n   else\n-    dump_generic_node (pp, t, 0, TDF_DIAGNOSTIC, 0);\n+    dump_generic_node (pp, t, 0, TDF_SLIM, 0);\n \n   return true;\n }"}]}