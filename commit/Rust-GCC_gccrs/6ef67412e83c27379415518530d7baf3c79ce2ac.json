{"sha": "6ef67412e83c27379415518530d7baf3c79ce2ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVmNjc0MTJlODNjMjczNzk0MTU1MTg1MzBkN2JhZjNjNzljZTJhYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-06-27T10:24:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-06-27T10:24:38Z"}, "message": "genattrtab.c (write_attr_value): Do not abort for CONST_INT operands.\n\n\t* genattrtab.c (write_attr_value): Do not abort for CONST_INT operands.\n\t* i386.c (ix86_attr_length_default): Kill.\n\t(ix86_attr_length_immediate_default, ix86_attr_length_address_default):\n\tNew.\n\t* i386-protos.h (ix86_attr_length_default): Kill\n\t(ix86_attr_length_immediate_default, ix86_attr_length_address_default):\n\tAdd prototype\n\t* i386.md (attribute type): Add \"test\".\n\t(attribute length_prefix): Kill.\n\t(attribute length_opcode): Kill.\n\t(attribute i387, mode, length_immediate, length_address, prefix_data16,\n\tprefix_rep, prefix_0f, modrm): New.\n\t(attribute length): Compute using the new attributes.\n\t(attribute pent_prefix): New.\n\t(attribute pent_pair): Compute using pent_prefix.\n\t(all insn patterns): Set mode,modrm and immediate_length attributes where\n\tneeded.\n\t(cmpsi patterns): Compute sizes propertly for test instruction.\n\t(movsi, movhi patterns): Compute sizes propertly for eax shortcuts.\n\t(movstricthi_xor, movstrictqi_xor): New patterns.\n\t(andsi/andhi): Use splitters to generate xor instructions.\n\t(xorqi_ext_1): New pattern.\n\t(movstricthi->movstricthi_xor peep2): New.\n\nFrom-SVN: r34731", "tree": {"sha": "9f0681adec250159830c4c0f6be2564d0cef9162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f0681adec250159830c4c0f6be2564d0cef9162"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ef67412e83c27379415518530d7baf3c79ce2ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef67412e83c27379415518530d7baf3c79ce2ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef67412e83c27379415518530d7baf3c79ce2ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef67412e83c27379415518530d7baf3c79ce2ac/comments", "author": null, "committer": null, "parents": [{"sha": "638f9bae602acab0bf5f4103795fcbb74f0b2daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638f9bae602acab0bf5f4103795fcbb74f0b2daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638f9bae602acab0bf5f4103795fcbb74f0b2daf"}], "stats": {"total": 1513, "additions": 958, "deletions": 555}, "files": [{"sha": "748c5f1d572c6d64fb79877d3716fcfbe6870825", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ef67412e83c27379415518530d7baf3c79ce2ac", "patch": "@@ -1,3 +1,29 @@\n+Tue Jun 27 12:14:12 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* genattrtab.c (write_attr_value): Do not abort for CONST_INT operands.\n+\t* i386.c (ix86_attr_length_default): Kill.\n+\t(ix86_attr_length_immediate_default, ix86_attr_length_address_default):\n+\tNew.\n+\t* i386-protos.h (ix86_attr_length_default): Kill\n+\t(ix86_attr_length_immediate_default, ix86_attr_length_address_default):\n+\tAdd prototype\n+\t* i386.md (attribute type): Add \"test\".\n+\t(attribute length_prefix): Kill.\n+\t(attribute length_opcode): Kill.\n+\t(attribute i387, mode, length_immediate, length_address, prefix_data16,\n+\tprefix_rep, prefix_0f, modrm): New.\n+\t(attribute length): Compute using the new attributes.\n+\t(attribute pent_prefix): New.\n+\t(attribute pent_pair): Compute using pent_prefix.\n+\t(all insn patterns): Set mode,modrm and immediate_length attributes where\n+\tneeded.\n+\t(cmpsi patterns): Compute sizes propertly for test instruction.\n+\t(movsi, movhi patterns): Compute sizes propertly for eax shortcuts.\n+\t(movstricthi_xor, movstrictqi_xor): New patterns.\n+\t(andsi/andhi): Use splitters to generate xor instructions.\n+\t(xorqi_ext_1): New pattern.\n+\t(movstricthi->movstricthi_xor peep2): New.\n+\n Tue Jun 27 12:03:03 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (addqi_low_1): Remove."}, {"sha": "18b258bb362b952b2ce385f5bddbe91caf685441", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=6ef67412e83c27379415518530d7baf3c79ce2ac", "patch": "@@ -113,7 +113,8 @@ extern void ix86_expand_strlensi_unroll_1 PARAMS ((rtx, rtx, rtx));\n extern int ix86_address_cost PARAMS ((rtx));\n \n extern rtx assign_386_stack_local PARAMS ((enum machine_mode, int));\n-extern int ix86_attr_length_default PARAMS ((rtx));\n+extern int ix86_attr_length_immediate_default PARAMS ((rtx, int));\n+extern int ix86_attr_length_address_default PARAMS ((rtx));\n \n extern int ix86_issue_rate PARAMS ((void));\n extern int ix86_adjust_cost PARAMS ((rtx, rtx, rtx, int));"}, {"sha": "061d693c0fbe40306f10f7fcd38b11bc402fb577", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 101, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6ef67412e83c27379415518530d7baf3c79ce2ac", "patch": "@@ -6156,119 +6156,59 @@ memory_address_length (addr)\n   return len;\n }\n \n+/* Compute default value for \"length_immediate\" attribute.  When SHORTFORM is set\n+   expect that insn have 8bit immediate alternative.  */\n int\n-ix86_attr_length_default (insn)\n+ix86_attr_length_immediate_default (insn, shortform)\n      rtx insn;\n+     int shortform;\n {\n-  enum attr_type type;\n-  int len = 0, i;\n-\n-  type = get_attr_type (insn);\n+  int len = 0;\n+  int i;\n   extract_insn (insn);\n-  switch (type)\n-    {\n-    case TYPE_INCDEC:\n-    case TYPE_SETCC:\n-    case TYPE_ICMOV:\n-    case TYPE_FMOV:\n-    case TYPE_FOP:\n-    case TYPE_FCMP:\n-    case TYPE_FOP1:\n-    case TYPE_FMUL:\n-    case TYPE_FDIV:\n-    case TYPE_FSGN:\n-    case TYPE_FPSPC:\n-    case TYPE_FCMOV:\n-    case TYPE_IBR:\n-      break;\n-    case TYPE_STR:\n-    case TYPE_CLD:\n-      len = 0;\n-\n-    case TYPE_ALU1:\n-    case TYPE_NEGNOT:\n-    case TYPE_ALU:\n-    case TYPE_ICMP:\n-    case TYPE_IMOVX:\n-    case TYPE_ISHIFT:\n-    case TYPE_IMUL:\n-    case TYPE_IDIV:\n-    case TYPE_PUSH:\n-    case TYPE_POP:\n-      for (i = recog_data.n_operands - 1; i >= 0; --i)\n-        if (CONSTANT_P (recog_data.operand[i]))\n-\t  {\n-\t    if (GET_CODE (recog_data.operand[i]) == CONST_INT\n-\t\t&& CONST_OK_FOR_LETTER_P (INTVAL (recog_data.operand[i]), 'K'))\n-\t      len += 1;\n-\t    else\n-\t      len += GET_MODE_SIZE (GET_MODE (recog_data.operand[0]));\n-\t  }\n-      break;\n-\n-    case TYPE_IMOV:\n-      if (CONSTANT_P (recog_data.operand[1]))\n-        len += GET_MODE_SIZE (GET_MODE (recog_data.operand[0]));\n-      break;\n-\n-    case TYPE_CALL:\n-      if (constant_call_address_operand (recog_data.operand[0],\n-\t\t\t\t\t GET_MODE (recog_data.operand[0])))\n-\treturn 5;\n-      break;\n-\n-    case TYPE_CALLV:\n-      if (constant_call_address_operand (recog_data.operand[1],\n-\t\t\t\t\t GET_MODE (recog_data.operand[1])))\n-\treturn 5;\n-      break;\n-\n-    case TYPE_LEA:\n+  for (i = recog_data.n_operands - 1; i >= 0; --i)\n+    if (CONSTANT_P (recog_data.operand[i]))\n       {\n-        /* Irritatingly, single_set doesn't work with REG_UNUSED present,\n-\t   as we'll get from running life_analysis during reg-stack when\n-\t   not optimizing.  Not that it matters anyway, now that\n-\t   pro_epilogue_adjust_stack uses lea, and is by design not\n-\t   single_set. */\n-        rtx set = PATTERN (insn);\n-        if (GET_CODE (set) == SET)\n-\t  ;\n-\telse if (GET_CODE (set) == PARALLEL\n-\t\t && GET_CODE (XVECEXP (set, 0, 0)) == SET)\n-\t  set = XVECEXP (set, 0, 0);\n-\telse\n+\tif (len)\n \t  abort ();\n-\n-\tlen += memory_address_length (SET_SRC (set));\n-\tgoto just_opcode;\n+\tif (shortform\n+\t    && GET_CODE (recog_data.operand[i]) == CONST_INT\n+\t    && CONST_OK_FOR_LETTER_P (INTVAL (recog_data.operand[i]), 'K'))\n+\t  len = 1;\n+\telse\n+\t  {\n+\t    switch (get_attr_mode (insn))\n+\t      {\n+\t\tcase MODE_QI:\n+\t\t  len+=1;\n+\t\t  break;\n+\t\tcase MODE_HI:\n+\t\t  len+=2;\n+\t\t  break;\n+\t\tcase MODE_SI:\n+\t\t  len+=4;\n+\t\t  break;\n+\t\tdefault:\n+\t\t  fatal_insn (\"Unknown insn mode\", insn);\n+\t      }\n+\t  }\n       }\n-\n-    case TYPE_OTHER: \n-    case TYPE_MULTI:\n-      return 15;\n-\n-    case TYPE_FXCH:\n-      if (STACK_TOP_P (recog_data.operand[0]))\n-\treturn 2 + (REGNO (recog_data.operand[1]) != FIRST_STACK_REG + 1);\n-      else\n-\treturn 2 + (REGNO (recog_data.operand[0]) != FIRST_STACK_REG + 1);\n-\n-    default:\n-      abort ();\n-    }\n-\n+  return len;\n+}\n+/* Compute default value for \"length_address\" attribute.  */\n+int\n+ix86_attr_length_address_default (insn)\n+     rtx insn;\n+{\n+  int i;\n+  extract_insn (insn);\n   for (i = recog_data.n_operands - 1; i >= 0; --i)\n     if (GET_CODE (recog_data.operand[i]) == MEM)\n       {\n-\tlen += memory_address_length (XEXP (recog_data.operand[i], 0));\n+\treturn memory_address_length (XEXP (recog_data.operand[i], 0));\n \tbreak;\n       }\n-\n-just_opcode:\n-  len += get_attr_length_opcode (insn);\n-  len += get_attr_length_prefix (insn);\n-\n-  return len;\n+  return 0;\n }\n \f\n /* Return the maximum number of instructions a cpu can issue.  */"}, {"sha": "f08464502947cabc9f096a094b22be5f91f26464", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 885, "deletions": 453, "changes": 1338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6ef67412e83c27379415518530d7baf3c79ce2ac"}, {"sha": "5b4d656d0b10db8359d92f59957cde2adc14aeef", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef67412e83c27379415518530d7baf3c79ce2ac/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=6ef67412e83c27379415518530d7baf3c79ce2ac", "patch": "@@ -5310,6 +5310,10 @@ write_attr_value (attr, value)\n       write_attr_valueq (attr, XSTR (value, 0));\n       break;\n \n+    case CONST_INT:\n+      printf (HOST_WIDE_INT_PRINT_DEC, INTVAL (value));\n+      break;\n+\n     case SYMBOL_REF:\n       fputs (XSTR (value, 0), stdout);\n       break;"}]}