{"sha": "6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwNWI0MGY0YTZjZmEwYmI1MTk0YzMwNjJjYWI0YWYxMGU0M2RkNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-09T00:16:57Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-09T00:16:57Z"}, "message": "Daily bump.", "tree": {"sha": "c49e6223e81771d1e213e17d4dfc20853d27330d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c49e6223e81771d1e213e17d4dfc20853d27330d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/comments", "author": null, "committer": null, "parents": [{"sha": "ee73fb57131f3b496d1b6b56d7ecaa103c6f86d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee73fb57131f3b496d1b6b56d7ecaa103c6f86d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee73fb57131f3b496d1b6b56d7ecaa103c6f86d4"}], "stats": {"total": 219, "additions": 218, "deletions": 1}, "files": [{"sha": "c022b4d095c569ec23c406f90b8780e1e5b7efd3", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "patch": "@@ -1,3 +1,7 @@\n+2021-03-08  Jeff Law  <law@redhat.com>\n+\n+\t* MAINTAINERS: Update my email address\n+\n 2021-02-23  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* config.guess: Import latest upstream."}, {"sha": "896c77a1a099407f5a53c5dd699c66a9e7ee8511", "filename": "gcc/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "patch": "@@ -1,3 +1,82 @@\n+2021-03-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/98266\n+\t* gimple-array-bounds.cc (inbounds_vbase_memaccess_p): New function.\n+\t(array_bounds_checker::check_array_bounds): Call it.\n+\n+2021-03-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97631\n+\t* tree-ssa-strlen.c (maybe_warn_overflow): Test rawmem.\n+\t(handle_builtin_stxncpy_strncat): Rename locals.  Determine\n+\tdestination size from allocation calls.  Issue a more appropriate\n+\tkind of warning.\n+\t(handle_builtin_memcpy): Pass true as rawmem to maybe_warn_overflow.\n+\t(handle_builtin_memset): Same.\n+\n+2021-03-08  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/98959\n+\t* config/rs6000/rs6000.c (rs6000_emit_le_vsx_permute): Add an assert\n+\tto ensure we do not have an Altivec style address.\n+\t* config/rs6000/vsx.md (*vsx_le_perm_load_<mode>): Disable if passed\n+\tan Altivec style address.\n+\t(*vsx_le_perm_store_<mode>): Likewise.\n+\t(splitters after *vsx_le_perm_store_<mode>): Likewise.\n+\t(vsx_load_<mode>): Disable special expander if passed an Altivec\n+\tstyle address.\n+\t(vsx_store_<mode>): Likewise.\n+\n+2021-03-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/99437\n+\t* config/aarch64/predicates.md (aarch64_simd_shift_imm_vec_qi): Define.\n+\t(aarch64_simd_shift_imm_vec_hi): Likewise.\n+\t(aarch64_simd_shift_imm_vec_si): Likewise.\n+\t(aarch64_simd_shift_imm_vec_di): Likewise.\n+\t* config/aarch64/aarch64-simd.md (aarch64_shrn<mode>_insn_le): Use\n+\tpredicate from above.\n+\t(aarch64_shrn<mode>_insn_be): Likewise.\n+\t(aarch64_rshrn<mode>_insn_le): Likewise.\n+\t(aarch64_rshrn<mode>_insn_be): Likewise.\n+\t(aarch64_shrn2<mode>_insn_le): Likewise.\n+\t(aarch64_shrn2<mode>_insn_be): Likewise.\n+\t(aarch64_rshrn2<mode>_insn_le): Likewise.\n+\t(aarch64_rshrn2<mode>_insn_be): Likewise.\n+\n+2021-03-08  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99422\n+\t* lra-constraints.c (skip_contraint_modifiers): New function.\n+\t(process_address_1): Use it before lookup_constraint call.\n+\n+2021-03-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/99463\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tEnable UINTR and HRESET for -march that supports it.\n+\n+2021-03-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.c (f_constraint_p): New function.\n+\t(s390_md_asm_adjust): Implement TARGET_MD_ASM_ADJUST.\n+\t(TARGET_MD_ASM_ADJUST): Likewise.\n+\n+2021-03-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97927\n+\t* tree-nested.c (convert_local_reference_stmt): Avoid calling\n+\tlookup_field_for_decl for Fortran module (= namespace context).\n+\n+2021-03-08  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_vec_compare): Implement <0\n+\tcomparison with arithmetic right shift.\n+\t(s390_expand_vcond): No need for a force_reg anymore.\n+\ts390_vec_compare will do it.\n+\t* config/s390/vector.md (\"vec_cmp<mode><tointvec>\"): Accept also\n+\timmediate operands.\n+\n 2021-03-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/99321"}, {"sha": "2bc7b52a84ea8d947516fe88b0e3c0d2065d1caf", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "patch": "@@ -1 +1 @@\n-20210308\n+20210309"}, {"sha": "42cfbaf75c0ad34de33c02ac19e4b6a30765e718", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "patch": "@@ -1,3 +1,27 @@\n+2021-03-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99436\n+\t* name-lookup.c (get_cxx_dialect_name): Add cxx23.\n+\n+2021-03-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lex.c (module_token_filter::resume): Ignore module-decls inside\n+\theader-unit.\n+\t* parser.c (cp_parser_module_declaration): Reject in header-unit.\n+\n+2021-03-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99285\n+\t* cp-tree.h (match_mergeable_specialization)\n+\t(add_mergeable_specialization): Adjust parms.\n+\t* module.cc (trees_in::decl_value): Adjust\n+\tadd_mergeable_specialization calls.\n+\t(trees_out::key_mergeable): Adjust match_mergeable_specialization\n+\tcalls.\n+\t(specialization_add): Likewise.\n+\t* pt.c (match_mergeable_specialization): Do not insert.\n+\t(add_mergeable_specialization): Add to hash table here.\n+\n 2021-03-06  Patrick Palka  <ppalka@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "eb0eb038778d5362038bcf521334116c0b9a7e7a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "patch": "@@ -1,3 +1,9 @@\n+2021-03-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/49278\n+\t* data.c (gfc_assign_data_value): Reject variable with PARAMETER\n+\tattribute in DATA statement.\n+\n 2021-03-05  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/99355"}, {"sha": "2fce3ac990377ef6dc8bd69efc1ad9619ddfd3b1", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "patch": "@@ -1,3 +1,7 @@\n+2021-03-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* de.po, sv.po: Update.\n+\n 2021-02-28  Joseph Myers  <joseph@codesourcery.com>\n \n \t* de.po, sv.po: Update."}, {"sha": "dcaebda19c4c0572e719574dfc3fec9e0be5a812", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "patch": "@@ -1,3 +1,86 @@\n+2021-03-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/49278\n+\t* gfortran.dg/parameter_data.f90: New test.\n+\n+2021-03-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/98266\n+\t* g++.dg/warn/Warray-bounds-15.C: New test.\n+\t* g++.dg/warn/Warray-bounds-18.C: New test.\n+\t* g++.dg/warn/Warray-bounds-19.C: New test.\n+\t* g++.dg/warn/Warray-bounds-20.C: New test.\n+\t* g++.dg/warn/Warray-bounds-21.C: New test.\n+\n+2021-03-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97631\n+\t* c-c++-common/Wstringop-overflow.c: Remove unexpected warnings.\n+\tAdd an xfail.\n+\t* c-c++-common/Wstringop-truncation.c: Add expected warnings.\n+\t* gcc.dg/Wstringop-overflow-10.c: Also enable -Wstringop-truncation.\n+\t* gcc.dg/Wstringop-overflow-66.c: New test.\n+\t* gcc.dg/tree-ssa/strncpy-2.c: Adjust expected warning.\n+\n+2021-03-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96268\n+\t* g++.dg/cpp2a/nontype-class41.C: New test.\n+\n+2021-03-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99436\n+\t* g++.dg/modules/modules.exp (MOD_STD_LIST): Add 2b.\n+\n+2021-03-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/pr99468.H: New.\n+\n+2021-03-08  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/98959\n+\t* gcc.target/powerpc/pr98959.c: New test.\n+\n+2021-03-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99285\n+\t* g++.dg/modules/pr99285_a.H: New.\n+\t* g++.dg/modules/pr99285_b.H: New.\n+\n+2021-03-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/99437\n+\t* gcc.target/aarch64/simd/pr99437.c: New test.\n+\n+2021-03-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/98920\n+\t* c-c++-common/asan/pr98920.c: New test.\n+\n+2021-03-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/99463\n+\t* gcc.target/i386/pr99463-2.c: New test.\n+\t* gcc.target/i386/pr99463.c: New test.\n+\n+2021-03-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/long-double-asm-commutative.c: New\n+\ttest.\n+\t* gcc.target/s390/vector/long-double-asm-earlyclobber.c: New\n+\ttest.\n+\t* gcc.target/s390/vector/long-double-asm-in-out.c: New test.\n+\t* gcc.target/s390/vector/long-double-asm-inout.c: New test.\n+\t* gcc.target/s390/vector/long-double-asm-matching.c: New test.\n+\t* gcc.target/s390/vector/long-double-asm-regmem.c: New test.\n+\t* gcc.target/s390/vector/long-double-volatile-from-i64.c: New\n+\ttest.\n+\n+2021-03-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97927\n+\t* gfortran.dg/module_variable_3.f90: New test.\n+\n 2021-03-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/99321"}, {"sha": "8a338a57c07b2293778143893e16926c9737e734", "filename": "libcpp/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/libcpp%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/libcpp%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpo%2FChangeLog?ref=6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "patch": "@@ -1,3 +1,7 @@\n+2021-03-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* eo.po: Update.\n+\n 2021-02-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* be.po, ca.po, da.po, de.po, el.po, eo.po, es.po, fi.po, fr.po,"}, {"sha": "463a65b6f7f81c078290f966a2c5b8d79e34d36b", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405b40f4a6cfa0bb5194c3062cab4af10e43dd7/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=6405b40f4a6cfa0bb5194c3062cab4af10e43dd7", "patch": "@@ -1,3 +1,16 @@\n+2021-03-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/98920\n+\t* asan/asan_interceptors.cpp (COMMON_INTERCEPT_FUNCTION_VER):\n+\tCherry pick.\n+\t(COMMON_INTERCEPT_FUNCTION_VER_UNVERSIONED_FALLBACK): Likewise.\n+\t* asan/asan_interceptors.h (ASAN_INTERCEPT_FUNC_VER_UNVERSIONED_FALLBACK): Likewise.\n+\t* sanitizer_common/sanitizer_common_interceptors.inc\n+\t(COMMON_INTERCEPT_FUNCTION_GLIBC_VER_MIN): Likewise.\n+\t(INIT_REGEX): Likewise.\n+\t* tsan/tsan_interceptors_posix.cpp (COMMON_INTERCEPT_FUNCTION_VER_UNVERSIONED_FALLBACK):\n+\tLikewise.\n+\n 2021-01-26  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/98828"}]}