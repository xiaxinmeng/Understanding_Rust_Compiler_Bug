{"sha": "98cbc7e489ced8092e110777c119751f245ad116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjYmM3ZTQ4OWNlZDgwOTJlMTEwNzc3YzExOTc1MWYyNDVhZDExNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-20T09:48:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:48:33Z"}, "message": "[Ada] Get rid of linear searches in Lib\n\nThis change is aimed at removing a couple of linear searches in the\nunits management code that can become problematic performance-wise when\nthe number of loaded units is in the several hundreds, which can happen\nfor large files even at -O0 without any inlining.\n\nIt introduces an auxiliary hash table to record a mapping between the\nname of units and their entry in the units table, and then replaces the\nlinear searches by lookups in this names table.  This can save up to 2%\nof the compilation time spent in the front-end in some cases.\n\nThere should be no functional changes, except in the error message\nissued for circular unit dependencies in very peculiar and convoluted\ncases.\n\n2019-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* lib.ads: Add with clause for GNAT.HTable.\n\tAdd pragma Inline for Is_Loaded and alphabetize the list.\n\t(Unit_Name_Table_Size): New constant.\n\t(Unit_Name_Header_Num): New subtype.\n\t(Unit_Name_Hash): New function declaration.\n\t(Unit_Names): New simple hash table.\n\t(Init_Unit_Name): New procedure declaration.\n\t* lib.adb (Set_Unit_Name): Unregister the old name in the table,\n\tif any, and then register the new name.\n\t(Init_Unit_Name): New procedure.\n\t(Is_Loaded): Reimplement using a lookup in the names table.\n\t(Remove_Unit): Unregister the name.\n\t(Unit_Name_Hash): New function.\n\t* lib-load.adb (Create_Dummy_Package_Unit): Call Init_Unit_Name.\n\t(Load_Unit): Use a lookup in the names table to find out whether\n\tthe unit has already been loaded.  Call Init_Unit_Name and then\n\tRemove_Unit if the loading has failed.\n\t(Make_Child_Decl_Unit): Call Init_Unit_Name.\n\t(Make_Instance_Unit): Likewise.\n\t* lib-writ.adb (Ensure_System_Dependency): Likewise.\n\nFrom-SVN: r274720", "tree": {"sha": "ab6094d07f2fb6054eb06f98d82d1bf1d63ad42f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab6094d07f2fb6054eb06f98d82d1bf1d63ad42f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98cbc7e489ced8092e110777c119751f245ad116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cbc7e489ced8092e110777c119751f245ad116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98cbc7e489ced8092e110777c119751f245ad116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cbc7e489ced8092e110777c119751f245ad116/comments", "author": null, "committer": null, "parents": [{"sha": "a89a0dd3b7ae2180dbfdc609fc9d7c61f250b32c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89a0dd3b7ae2180dbfdc609fc9d7c61f250b32c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89a0dd3b7ae2180dbfdc609fc9d7c61f250b32c"}], "stats": {"total": 142, "additions": 116, "deletions": 26}, "files": [{"sha": "a91b8f51ddc2b430001126dae71a1d6052b65189", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=98cbc7e489ced8092e110777c119751f245ad116", "patch": "@@ -1,3 +1,26 @@\n+2019-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lib.ads: Add with clause for GNAT.HTable.\n+\tAdd pragma Inline for Is_Loaded and alphabetize the list.\n+\t(Unit_Name_Table_Size): New constant.\n+\t(Unit_Name_Header_Num): New subtype.\n+\t(Unit_Name_Hash): New function declaration.\n+\t(Unit_Names): New simple hash table.\n+\t(Init_Unit_Name): New procedure declaration.\n+\t* lib.adb (Set_Unit_Name): Unregister the old name in the table,\n+\tif any, and then register the new name.\n+\t(Init_Unit_Name): New procedure.\n+\t(Is_Loaded): Reimplement using a lookup in the names table.\n+\t(Remove_Unit): Unregister the name.\n+\t(Unit_Name_Hash): New function.\n+\t* lib-load.adb (Create_Dummy_Package_Unit): Call Init_Unit_Name.\n+\t(Load_Unit): Use a lookup in the names table to find out whether\n+\tthe unit has already been loaded.  Call Init_Unit_Name and then\n+\tRemove_Unit if the loading has failed.\n+\t(Make_Child_Decl_Unit): Call Init_Unit_Name.\n+\t(Make_Instance_Unit): Likewise.\n+\t* lib-writ.adb (Ensure_System_Dependency): Likewise.\n+\n 2019-08-20  Bob Duff  <duff@adacore.com>\n \n \t* sem_ch13.adb (Record_Hole_Check): Initialize After_Last."}, {"sha": "25c87943e15fc7fdeeef50df8f3ac907cdcc5286", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=98cbc7e489ced8092e110777c119751f245ad116", "patch": "@@ -245,6 +245,8 @@ package body Lib.Load is\n          Version                => 0,\n          OA_Setting             => 'O');\n \n+      Init_Unit_Name (Unum, Spec_Name);\n+\n       Set_Comes_From_Source_Default (Save_CS);\n       Set_Error_Posted (Cunit_Entity);\n       Set_Error_Posted (Cunit);\n@@ -607,11 +609,10 @@ package body Lib.Load is\n \n       --  See if we already have an entry for this unit\n \n-      Unum := Main_Unit;\n-      while Unum <= Units.Last loop\n-         exit when Uname_Actual = Units.Table (Unum).Unit_Name;\n-         Unum := Unum + 1;\n-      end loop;\n+      Unum := Unit_Names.Get (Uname_Actual);\n+      if Unum = No_Unit then\n+         Unum := Units.Last + 1;\n+      end if;\n \n       --  Whether or not the entry was found, Unum is now the right value,\n       --  since it is one more than Units.Last (i.e. the index of the new\n@@ -727,7 +728,7 @@ package body Lib.Load is\n          --  found case to print the dependency chain including the last entry\n \n          Units.Increment_Last;\n-         Units.Table (Unum).Unit_Name := Uname_Actual;\n+         Init_Unit_Name (Unum, Uname_Actual);\n \n          --  File was found\n \n@@ -893,14 +894,14 @@ package body Lib.Load is\n                --  subsequent missing files.\n \n                Load_Stack.Decrement_Last;\n-               Units.Decrement_Last;\n+               Remove_Unit (Unum);\n \n             --  If unit not required, remove load stack entry and the junk\n             --  file table entry, and return No_Unit to indicate not found,\n \n             else\n                Load_Stack.Decrement_Last;\n-               Units.Decrement_Last;\n+               Remove_Unit (Unum);\n             end if;\n \n             Unum := No_Unit;\n@@ -921,17 +922,17 @@ package body Lib.Load is\n    --------------------------\n \n    procedure Make_Child_Decl_Unit (N : Node_Id) is\n-      Unit_Decl : constant Node_Id := Library_Unit (N);\n+      Unit_Decl : constant Node_Id          := Library_Unit (N);\n+      Unit_Num  : constant Unit_Number_Type := Get_Cunit_Unit_Number (N);\n \n    begin\n       Units.Increment_Last;\n-      Units.Table (Units.Last) := Units.Table (Get_Cunit_Unit_Number (N));\n-      Units.Table (Units.Last).Unit_Name :=\n-        Get_Spec_Name (Unit_Name (Get_Cunit_Unit_Number (N)));\n+      Units.Table (Units.Last) := Units.Table (Unit_Num);\n       Units.Table (Units.Last).Cunit := Unit_Decl;\n       Units.Table (Units.Last).Cunit_Entity  :=\n         Defining_Identifier\n           (Defining_Unit_Name (Specification (Unit (Unit_Decl))));\n+      Init_Unit_Name (Units.Last, Get_Spec_Name (Unit_Name (Unit_Num)));\n \n       --  The library unit created for of a child subprogram unit plays no\n       --  role in code generation and binding, so label it accordingly.\n@@ -963,11 +964,13 @@ package body Lib.Load is\n          Units.Table (Units.Last)               := Units.Table (Main_Unit);\n          Units.Table (Units.Last).Cunit         := Library_Unit (N);\n          Units.Table (Units.Last).Generate_Code := True;\n+         Init_Unit_Name (Units.Last, Unit_Name (Main_Unit));\n+\n          Units.Table (Main_Unit).Cunit          := N;\n-         Units.Table (Main_Unit).Unit_Name      :=\n-           Get_Body_Name\n-             (Unit_Name (Get_Cunit_Unit_Number (Library_Unit (N))));\n          Units.Table (Main_Unit).Version        := Source_Checksum (Sind);\n+         Init_Unit_Name (Main_Unit,\n+           Get_Body_Name\n+             (Unit_Name (Get_Cunit_Unit_Number (Library_Unit (N)))));\n \n       else\n          --  Duplicate information from instance unit, for the body. The unit"}, {"sha": "d877e7bd51c96d23e815faebae0d8122320a18b8", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=98cbc7e489ced8092e110777c119751f245ad116", "patch": "@@ -189,6 +189,7 @@ package body Lib.Writ is\n          Version                => 0,\n          Error_Location         => No_Location,\n          OA_Setting             => 'O');\n+      Init_Unit_Name (Units.Last, System_Uname);\n \n       --  Parse system.ads so that the checksum is set right. Style checks are\n       --  not applied. The Ekind is set to ensure that this reference is always"}, {"sha": "d04f0a4960ccb1a0e5e0099d6ad3aa76f54675c8", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=98cbc7e489ced8092e110777c119751f245ad116", "patch": "@@ -277,8 +277,24 @@ package body Lib is\n    end Set_OA_Setting;\n \n    procedure Set_Unit_Name (U : Unit_Number_Type; N : Unit_Name_Type) is\n+      Old_N : constant Unit_Name_Type := Units.Table (U).Unit_Name;\n+\n    begin\n+      --  First unregister the old name, if any\n+\n+      if Old_N /= No_Unit_Name and then Unit_Names.Get (Old_N) = U then\n+         Unit_Names.Set (Old_N, No_Unit);\n+      end if;\n+\n+      --  Then set the new name\n+\n       Units.Table (U).Unit_Name := N;\n+\n+      --  Finally register the new name\n+\n+      if Unit_Names.Get (N) = No_Unit then\n+         Unit_Names.Set (N, U);\n+      end if;\n    end Set_Unit_Name;\n \n    ------------------------------\n@@ -1068,6 +1084,16 @@ package body Lib is\n       return TSN;\n    end Increment_Serial_Number;\n \n+   ----------------------\n+   --  Init_Unit_Name  --\n+   ----------------------\n+\n+   procedure Init_Unit_Name (U : Unit_Number_Type; N : Unit_Name_Type) is\n+   begin\n+      Units.Table (U).Unit_Name := N;\n+      Unit_Names.Set (N, U);\n+   end Init_Unit_Name;\n+\n    ----------------\n    -- Initialize --\n    ----------------\n@@ -1087,13 +1113,7 @@ package body Lib is\n \n    function Is_Loaded (Uname : Unit_Name_Type) return Boolean is\n    begin\n-      for Unum in Units.First .. Units.Last loop\n-         if Uname = Unit_Name (Unum) then\n-            return True;\n-         end if;\n-      end loop;\n-\n-      return False;\n+      return Unit_Names.Get (Uname) /= No_Unit;\n    end Is_Loaded;\n \n    ---------------\n@@ -1141,6 +1161,7 @@ package body Lib is\n    procedure Remove_Unit (U : Unit_Number_Type) is\n    begin\n       if U = Units.Last then\n+         Unit_Names.Set (Unit_Name (U), No_Unit);\n          Units.Decrement_Last;\n       end if;\n    end Remove_Unit;\n@@ -1277,6 +1298,15 @@ package body Lib is\n       end loop;\n    end Tree_Write;\n \n+   --------------------\n+   -- Unit_Name_Hash --\n+   --------------------\n+\n+   function Unit_Name_Hash (Id : Unit_Name_Type) return Unit_Name_Header_Num is\n+   begin\n+      return Unit_Name_Header_Num (Id mod Unit_Name_Table_Size);\n+   end Unit_Name_Hash;\n+\n    ------------\n    -- Unlock --\n    ------------"}, {"sha": "7665f86db89f8c3ec1b12c74e7d28ba5fa300d5b", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cbc7e489ced8092e110777c119751f245ad116/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=98cbc7e489ced8092e110777c119751f245ad116", "patch": "@@ -37,6 +37,8 @@ with Namet; use Namet;\n with Table;\n with Types; use Types;\n \n+with GNAT.HTable;\n+\n package Lib is\n \n    type Unit_Ref_Table is array (Pos range <>) of Unit_Number_Type;\n@@ -823,21 +825,22 @@ private\n    pragma Inline (Increment_Primary_Stack_Count);\n    pragma Inline (Increment_Sec_Stack_Count);\n    pragma Inline (Increment_Serial_Number);\n+   pragma Inline (Is_Internal_Unit);\n+   pragma Inline (Is_Loaded);\n+   pragma Inline (Is_Predefined_Renaming);\n+   pragma Inline (Is_Predefined_Unit);\n    pragma Inline (Loading);\n    pragma Inline (Main_CPU);\n    pragma Inline (Main_Priority);\n    pragma Inline (Munit_Index);\n    pragma Inline (No_Elab_Code_All);\n    pragma Inline (OA_Setting);\n+   pragma Inline (Primary_Stack_Count);\n    pragma Inline (Set_Cunit);\n    pragma Inline (Set_Cunit_Entity);\n    pragma Inline (Set_Fatal_Error);\n    pragma Inline (Set_Generate_Code);\n    pragma Inline (Set_Has_RACW);\n-   pragma Inline (Is_Predefined_Renaming);\n-   pragma Inline (Is_Internal_Unit);\n-   pragma Inline (Is_Predefined_Unit);\n-   pragma Inline (Primary_Stack_Count);\n    pragma Inline (Sec_Stack_Count);\n    pragma Inline (Set_Loading);\n    pragma Inline (Set_Main_CPU);\n@@ -930,6 +933,36 @@ private\n      Table_Increment      => Alloc.Units_Increment,\n      Table_Name           => \"Units\");\n \n+   --  The following table records a mapping between a name and the entry in\n+   --  the units table whose Unit_Name is this name. It is used to speed up\n+   --  the Is_Loaded function, whose original implementation (linear search)\n+   --  could account for 2% of the time spent in the front end. Note that, in\n+   --  the case of source files containing multiple units, the units table may\n+   --  temporarily contain two entries with the same Unit_Name during parsing,\n+   --  which means that the mapping must be to the first entry in the table.\n+\n+   Unit_Name_Table_Size : constant := 257;\n+   --  Number of headers in hash table\n+\n+   subtype Unit_Name_Header_Num is Integer range 0 .. Unit_Name_Table_Size - 1;\n+   --  Range of headers in hash table\n+\n+   function Unit_Name_Hash (Id : Unit_Name_Type) return Unit_Name_Header_Num;\n+   --  Simple hash function for Unit_Name_Types\n+\n+   package Unit_Names is new GNAT.Htable.Simple_HTable\n+     (Header_Num => Unit_Name_Header_Num,\n+      Element    => Unit_Number_Type,\n+      No_Element => No_Unit,\n+      Key        => Unit_Name_Type,\n+      Hash       => Unit_Name_Hash,\n+      Equal      => \"=\");\n+\n+   procedure Init_Unit_Name (U : Unit_Number_Type; N : Unit_Name_Type);\n+   pragma Inline (Init_Unit_Name);\n+   --  Both set the Unit_Name for the given units table entry and register a\n+   --  mapping between this name and the entry.\n+\n    --  The following table stores strings from pragma Linker_Option lines\n \n    type Linker_Option_Entry is record"}]}