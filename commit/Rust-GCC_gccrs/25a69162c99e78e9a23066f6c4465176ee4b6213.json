{"sha": "25a69162c99e78e9a23066f6c4465176ee4b6213", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVhNjkxNjJjOTllNzhlOWEyMzA2NmY2YzQ0NjUxNzZlZTRiNjIxMw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-07-14T09:10:05Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-07-14T09:10:05Z"}, "message": "Implement P0032R3, Homogeneous interface for variant, any and optional,\n\n\tfor the parts concerning any and optional.\n\t* include/std/any (_Storage()): Make constexpr and have it\n\tinitialize _M_ptr.\n\t(any()): Make constexpr.\n\t(any(const any&)): Adjust.\n\t(any(any&&)): Likewise.\n\t(__any_constructible_t): New.\n\t(any(_ValueType&&)): Constrain.\n\t(any(in_place_type_t<_Tp>, _Args&&...)): New.\n\t(any(in_place_type_t<_Tp>, initializer_list<_Up>, _Args&&...)):\n\tLikewise.\n\t(~any()): Adjust.\n\t(operator=(const any&)): Likewise.\n\t(operator=(any&&)): Likewise.\n\t(operator=(_ValueType&&)): Constrain.\n\t(emplace(_Args&&...)): New.\n\t(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n\t(clear()): Remove.\n\t(reset()): New.\n\t(swap(any&)): Adjust.\n\t(empty()): Remove.\n\t(has_value()): New.\n\t(type()): Adjust.\n\t(_Manager_internal::_S_create(_Storage&, _Args&&...)): New.\n\t(_Manager_external::_S_create(_Storage&, _Args&&...)): Likewise.\n\t(make_any(_Args&&...)): Likewise.\n\t(make_any(initializer_list<_Up>, _Args&&...)): Likewise.\n\t* include/std/optional (in_place_t, in_place): Remove.\n\t(bad_optional_access): Add a comment referring to LEWG 72.\n\t(emplace(_Args&&...)): Constrain.\n\t(has_value()): New.\n\t(reset()): Likewise.\n\t(make_optional(_Args&&...)): Likewise.\n\t(make_optional(initializer_list<_Up>, _Args&&...)): Likewise.\n\t* include/std/utility (in_place_tag): New.\n\t(__in_place, __in_place_type, __in_place_index): Likewise.\n\t(in_place_t, in_place_type_t, in_place_index_t): Likewise.\n\t(in_place(__in_place*)): Likewise.\n\t(in_place(__in_place_type<_Tp>*)): Likewise.\n\t(in_place(__in_place_index<_Idx>*)): Likewise.\n\t* testsuite/20_util/any/assign/1.cc: Adjust.\n\t* testsuite/20_util/any/assign/emplace.cc: New.\n\t* testsuite/20_util/any/assign/self.cc: Adjust.\n\t* testsuite/20_util/any/cons/1.cc: Likewise.\n\t* testsuite/20_util/any/cons/in_place.cc: New.\n\t* testsuite/20_util/any/make_any.cc: Likewise.\n\t* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n\t* testsuite/20_util/any/misc/swap.cc: Likewise.\n\t* testsuite/20_util/any/modifiers/1.cc: Likewise.\n\t* testsuite/20_util/any/requirements.cc: New.\n\t* testsuite/20_util/in_place/requirements.cc: Likewise.\n\t* testsuite/20_util/optional/constexpr/in_place.cc: Adjust.\n\t* testsuite/20_util/optional/in_place.cc: Likewise.\n\t* testsuite/20_util/optional/make_optional.cc: Add tests for\n\tthe new overloads of make_optional.\n\nFrom-SVN: r238329", "tree": {"sha": "55dbc3ec38b350b3bd5207f535070577e1812ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55dbc3ec38b350b3bd5207f535070577e1812ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25a69162c99e78e9a23066f6c4465176ee4b6213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a69162c99e78e9a23066f6c4465176ee4b6213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a69162c99e78e9a23066f6c4465176ee4b6213", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a69162c99e78e9a23066f6c4465176ee4b6213/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0d31471bade3deb8f1d7e3110e0d40c1555f849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d31471bade3deb8f1d7e3110e0d40c1555f849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d31471bade3deb8f1d7e3110e0d40c1555f849"}], "stats": {"total": 627, "additions": 538, "deletions": 89}, "files": [{"sha": "a34ca2187975147ca56fc3f3cdf46b5bf21ee821", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -1,3 +1,62 @@\n+2016-07-14  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement P0032R3, Homogeneous interface for variant, any and optional,\n+\tfor the parts concerning any and optional.\n+\t* include/std/any (_Storage()): Make constexpr and have it\n+\tinitialize _M_ptr.\n+\t(any()): Make constexpr.\n+\t(any(const any&)): Adjust.\n+\t(any(any&&)): Likewise.\n+\t(__any_constructible_t): New.\n+\t(any(_ValueType&&)): Constrain.\n+\t(any(in_place_type_t<_Tp>, _Args&&...)): New.\n+\t(any(in_place_type_t<_Tp>, initializer_list<_Up>, _Args&&...)):\n+\tLikewise.\n+\t(~any()): Adjust.\n+\t(operator=(const any&)): Likewise.\n+\t(operator=(any&&)): Likewise.\n+\t(operator=(_ValueType&&)): Constrain.\n+\t(emplace(_Args&&...)): New.\n+\t(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t(clear()): Remove.\n+\t(reset()): New.\n+\t(swap(any&)): Adjust.\n+\t(empty()): Remove.\n+\t(has_value()): New.\n+\t(type()): Adjust.\n+\t(_Manager_internal::_S_create(_Storage&, _Args&&...)): New.\n+\t(_Manager_external::_S_create(_Storage&, _Args&&...)): Likewise.\n+\t(make_any(_Args&&...)): Likewise.\n+\t(make_any(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t* include/std/optional (in_place_t, in_place): Remove.\n+\t(bad_optional_access): Add a comment referring to LEWG 72.\n+\t(emplace(_Args&&...)): Constrain.\n+\t(has_value()): New.\n+\t(reset()): Likewise.\n+\t(make_optional(_Args&&...)): Likewise.\n+\t(make_optional(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t* include/std/utility (in_place_tag): New.\n+\t(__in_place, __in_place_type, __in_place_index): Likewise.\n+\t(in_place_t, in_place_type_t, in_place_index_t): Likewise.\n+\t(in_place(__in_place*)): Likewise.\n+\t(in_place(__in_place_type<_Tp>*)): Likewise.\n+\t(in_place(__in_place_index<_Idx>*)): Likewise.\n+\t* testsuite/20_util/any/assign/1.cc: Adjust.\n+\t* testsuite/20_util/any/assign/emplace.cc: New.\n+\t* testsuite/20_util/any/assign/self.cc: Adjust.\n+\t* testsuite/20_util/any/cons/1.cc: Likewise.\n+\t* testsuite/20_util/any/cons/in_place.cc: New.\n+\t* testsuite/20_util/any/make_any.cc: Likewise.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n+\t* testsuite/20_util/any/misc/swap.cc: Likewise.\n+\t* testsuite/20_util/any/modifiers/1.cc: Likewise.\n+\t* testsuite/20_util/any/requirements.cc: New.\n+\t* testsuite/20_util/in_place/requirements.cc: Likewise.\n+\t* testsuite/20_util/optional/constexpr/in_place.cc: Adjust.\n+\t* testsuite/20_util/optional/in_place.cc: Likewise.\n+\t* testsuite/20_util/optional/make_optional.cc: Add tests for\n+\tthe new overloads of make_optional.\n+\n 2016-07-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement P0307R2, Making Optional Greater Equal Again."}, {"sha": "54882d797e20414655ce3c1c299db73921bbcd9a", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 110, "deletions": 32, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -79,8 +79,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Holds either pointer to a heap object or the contained object itself.\n     union _Storage\n     {\n-      // This constructor intentionally doesn't initialize anything.\n-      _Storage() = default;\n+      constexpr _Storage() : _M_ptr{nullptr} {}\n \n       // Prevent trivial copies of this type, buffer might hold a non-POD.\n       _Storage(const _Storage&) = delete;\n@@ -113,12 +112,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // construct/destruct\n \n     /// Default constructor, creates an empty object.\n-    any() noexcept : _M_manager(nullptr) { }\n+    constexpr any() noexcept : _M_manager(nullptr) { }\n \n     /// Copy constructor, copies the state of @p __other\n     any(const any& __other)\n     {\n-      if (__other.empty())\n+      if (!__other.has_value())\n \t_M_manager = nullptr;\n       else\n \t{\n@@ -131,11 +130,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /**\n      * @brief Move constructor, transfer the state from @p __other\n      *\n-     * @post @c __other.empty() (this postcondition is a GNU extension)\n+     * @post @c !__other.has_value() (this postcondition is a GNU extension)\n      */\n     any(any&& __other) noexcept\n     {\n-      if (__other.empty())\n+      if (!__other.has_value())\n \t_M_manager = nullptr;\n       else\n \t{\n@@ -145,45 +144,71 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+    template <typename _Tp, typename... _Args>\n+    using __any_constructible_t =\n+      enable_if_t<__and_<is_copy_constructible<_Tp>,\n+\t\t\t is_constructible<_Tp, _Args...>>::value,\n+\t\t  bool>;\n+\n     /// Construct with a copy of @p __value as the contained object.\n     template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n-              typename enable_if<is_constructible<_Tp, _ValueType&&>::value,\n-                                 bool>::type = true>\n+              __any_constructible_t<_Tp, _ValueType&&> = true>\n       any(_ValueType&& __value)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n         _Mgr::_S_create(_M_storage, std::forward<_ValueType>(__value));\n-\tstatic_assert(is_copy_constructible<_Tp>::value,\n-\t\t      \"The contained object must be CopyConstructible\");\n       }\n \n     /// Construct with a copy of @p __value as the contained object.\n     template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n-              typename enable_if<!is_constructible<_Tp, _ValueType&&>::value,\n-                                 bool>::type = false>\n+              enable_if_t<__and_<is_copy_constructible<_Tp>,\n+\t\t\t\t __not_<\n+\t\t\t\t   is_constructible<_Tp,\n+\t\t\t\t\t\t    _ValueType&&>>>::value,\n+\t\t\t  bool> = false>\n       any(_ValueType&& __value)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n         _Mgr::_S_create(_M_storage, __value);\n-\tstatic_assert(is_copy_constructible<_Tp>::value,\n-\t\t      \"The contained object must be CopyConstructible\");\n       }\n \n-    /// Destructor, calls @c clear()\n-    ~any() { clear(); }\n+    /// Construct with an object created from @p __args as the contained object.\n+    template <typename _Tp, typename... _Args,\n+\t      typename _Mgr = _Manager<_Tp>,\n+              __any_constructible_t<_Tp, _Args&&...> = false>\n+      any(in_place_type_t<_Tp>, _Args&&... __args)\n+      : _M_manager(&_Mgr::_S_manage)\n+      {\n+        _Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);\n+      }\n+\n+    /// Construct with an object created from @p __il and @p __args as\n+    /// the contained object.\n+    template <typename _Tp, typename _Up, typename... _Args,\n+\t      typename _Mgr = _Manager<_Tp>,\n+              __any_constructible_t<_Tp, initializer_list<_Up>,\n+\t\t\t\t    _Args&&...> = false>\n+      any(in_place_type_t<_Tp>, initializer_list<_Up> __il, _Args&&... __args)\n+      : _M_manager(&_Mgr::_S_manage)\n+      {\n+        _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n+      }\n+\n+    /// Destructor, calls @c reset()\n+    ~any() { reset(); }\n \n     // assignments\n \n     /// Copy the state of another object.\n     any& operator=(const any& __rhs)\n     {\n-      if (__rhs.empty())\n-\tclear();\n+      if (!__rhs.has_value())\n+\treset();\n       else if (this != &__rhs)\n \t{\n-\t  if (!empty())\n+\t  if (has_value())\n \t    _M_manager(_Op_destroy, this, nullptr);\n \t  _Arg __arg;\n \t  __arg._M_any = this;\n@@ -195,15 +220,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /**\n      * @brief Move assignment operator\n      *\n-     * @post @c __rhs.empty() (not guaranteed for other implementations)\n+     * @post @c !__rhs.has_value() (not guaranteed for other implementations)\n      */\n     any& operator=(any&& __rhs) noexcept\n     {\n-      if (__rhs.empty())\n-\tclear();\n+      if (!__rhs.has_value())\n+\treset();\n       else if (this != &__rhs)\n \t{\n-\t  if (!empty())\n+\t  if (has_value())\n \t    _M_manager(_Op_destroy, this, nullptr);\n \t  _Arg __arg;\n \t  __arg._M_any = this;\n@@ -214,19 +239,44 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// Store a copy of @p __rhs as the contained object.\n     template<typename _ValueType>\n-      enable_if_t<!is_same<any, decay_t<_ValueType>>::value, any&>\n+    enable_if_t<__and_<__not_<is_same<any, decay_t<_ValueType>>>,\n+\t\t       is_copy_constructible<_ValueType>>::value, any&>\n       operator=(_ValueType&& __rhs)\n       {\n \t*this = any(std::forward<_ValueType>(__rhs));\n \treturn *this;\n       }\n \n+    /// Emplace with an object created from @p __args as the contained object.\n+    template <typename _Tp, typename... _Args,\n+\t      typename _Mgr = _Manager<_Tp>,\n+              __any_constructible_t<_Tp, _Args&&...> = false>\n+      void emplace(_Args&&... __args)\n+      {\n+\treset();\n+\t_M_manager = &_Mgr::_S_manage;\n+        _Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);\n+      }\n+\n+    /// Emplace with an object created from @p __il and @p __args as\n+    /// the contained object.\n+    template <typename _Tp, typename _Up, typename... _Args,\n+\t      typename _Mgr = _Manager<_Tp>,\n+              __any_constructible_t<_Tp, initializer_list<_Up>,\n+\t\t\t\t    _Args&&...> = false>\n+      void emplace(initializer_list<_Up> __il, _Args&&... __args)\n+      {\n+\treset();\n+\t_M_manager = &_Mgr::_S_manage;\n+        _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n+      }\n+\n     // modifiers\n \n     /// If not empty, destroy the contained object.\n-    void clear() noexcept\n+    void reset() noexcept\n     {\n-      if (!empty())\n+      if (has_value())\n       {\n \t_M_manager(_Op_destroy, this, nullptr);\n \t_M_manager = nullptr;\n@@ -236,10 +286,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /// Exchange state with another object.\n     void swap(any& __rhs) noexcept\n     {\n-      if (empty() && __rhs.empty())\n+      if (!has_value() && !__rhs.has_value())\n \treturn;\n \n-      if (!empty() && !__rhs.empty())\n+      if (has_value() && __rhs.has_value())\n \t{\n \t  if (this == &__rhs)\n \t    return;\n@@ -255,8 +305,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       else\n \t{\n-\t  any* __empty = empty() ? this : &__rhs;\n-\t  any* __full = empty() ? &__rhs : this;\n+\t  any* __empty = !has_value() ? this : &__rhs;\n+\t  any* __full = !has_value() ? &__rhs : this;\n \t  _Arg __arg;\n \t  __arg._M_any = __empty;\n \t  __full->_M_manager(_Op_xfer, __full, &__arg);\n@@ -266,13 +316,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // observers\n \n     /// Reports whether there is a contained object or not.\n-    bool empty() const noexcept { return _M_manager == nullptr; }\n+    bool has_value() const noexcept { return _M_manager != nullptr; }\n \n #if __cpp_rtti\n     /// The @c typeid of the contained object, or @c typeid(void) if empty.\n     const type_info& type() const noexcept\n     {\n-      if (empty())\n+      if (!has_value())\n \treturn typeid(void);\n       _Arg __arg;\n       _M_manager(_Op_get_type_info, this, &__arg);\n@@ -316,6 +366,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    void* __addr = &__storage._M_buffer;\n \t    ::new (__addr) _Tp(std::forward<_Up>(__value));\n \t  }\n+\n+\ttemplate<typename... _Args>\n+\t  static void\n+\t  _S_create(_Storage& __storage, _Args&&... __args)\n+\t  {\n+\t    void* __addr = &__storage._M_buffer;\n+\t    ::new (__addr) _Tp(std::forward<_Args>(__args)...);\n+\t  }\n       };\n \n     // Manage external contained object.\n@@ -331,12 +389,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  {\n \t    __storage._M_ptr = new _Tp(std::forward<_Up>(__value));\n \t  }\n+\ttemplate<typename... _Args>\n+\t  static void\n+\t  _S_create(_Storage& __storage, _Args&&... __args)\n+\t  {\n+\t    __storage._M_ptr = new _Tp(std::forward<_Args>(__args)...);\n+\t  }\n       };\n   };\n \n   /// Exchange the states of two @c any objects.\n   inline void swap(any& __x, any& __y) noexcept { __x.swap(__y); }\n \n+  /// Create an any holding a @c _Tp constructed from @c __args.\n+  template <typename _Tp, typename... _Args>\n+    any make_any(_Args&&... __args)\n+    {\n+      return any(in_place<_Tp>, std::forward<_Args>(__args)...);\n+    }\n+\n+  /// Create an any holding a @c _Tp constructed from @c __il and @c __args.\n+  template <typename _Tp, typename _Up, typename... _Args>\n+    any make_any(initializer_list<_Up> __il, _Args&&... __args)\n+    {\n+      return any(in_place<_Tp>, __il, std::forward<_Args>(__args)...);\n+    }\n+\n   /**\n    * @brief Access the contained object.\n    *"}, {"sha": "2ea4fddb31d7c742d3081c2a4402a72ca0aa1623", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -57,13 +57,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     class optional;\n \n-  // [X.Y.5]\n-  /// Tag type for in-place construction.\n-  struct in_place_t { };\n-\n-  /// Tag for in-place construction.\n-  constexpr in_place_t in_place { };\n-\n   // [X.Y.6]\n   /// Tag type to disengage optional objects.\n   struct nullopt_t\n@@ -91,9 +84,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   class bad_optional_access : public logic_error\n   {\n+    // XXX See LEWG 72, https://issues.isocpp.org/show_bug.cgi?id=72\n   public:\n     bad_optional_access() : logic_error(\"bad optional access\") { }\n-\n     // XXX This constructor is non-standard. Should not be inline\n     explicit bad_optional_access(const char* __arg) : logic_error(__arg) { }\n \n@@ -641,18 +634,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         }\n \n       template<typename... _Args>\n-\tvoid\n+\tenable_if_t<is_constructible<_Tp, _Args&&...>::value>\n \templace(_Args&&... __args)\n \t{\n-\t  static_assert(is_constructible<_Tp, _Args&&...>(),\n-\t\t\t\"Cannot emplace value type from arguments\");\n-\n \t  this->_M_reset();\n \t  this->_M_construct(std::forward<_Args>(__args)...);\n \t}\n \n       template<typename _Up, typename... _Args>\n-        enable_if_t<is_constructible<_Tp, initializer_list<_Up>&,\n+\tenable_if_t<is_constructible<_Tp, initializer_list<_Up>&,\n \t\t\t\t     _Args&&...>::value>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n@@ -712,6 +702,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr explicit operator bool() const noexcept\n       { return this->_M_is_engaged(); }\n \n+      constexpr bool has_value() const noexcept\n+      { return this->_M_is_engaged(); }\n+\n       constexpr const _Tp&\n       value() const&\n       {\n@@ -777,6 +770,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    ? std::move(this->_M_get())\n \t    : static_cast<_Tp>(std::forward<_Up>(__u));\n \t}\n+      void reset() { this->_M_reset(); }\n     };\n \n   template<typename _Tp>\n@@ -980,6 +974,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     make_optional(_Tp&& __t)\n     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }\n \n+  template<typename _Tp, typename ..._Args>\n+    constexpr optional<_Tp>\n+    make_optional(_Args&&... __args)\n+    { return optional<_Tp> { in_place, std::forward<_Args>(__args)... }; }\n+\n+  template<typename _Tp, typename _Up, typename ..._Args>\n+    constexpr optional<_Tp>\n+    make_optional(initializer_list<_Up> __il, _Args&&... __args)\n+    { return optional<_Tp> { in_place, __il, std::forward<_Args>(__args)... }; }\n+\n   // [X.Y.12]\n   template<typename _Tp>\n     struct hash<optional<_Tp>>"}, {"sha": "106ba4dfcf3bbb3ebfabbb8832c5b2eceae253e2", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -75,6 +75,10 @@\n #include <bits/move.h>\n #include <initializer_list>\n \n+#if __cplusplus > 201402L\n+#include <exception>\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -330,6 +334,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using index_sequence_for = make_index_sequence<sizeof...(_Types)>;\n #endif\n \n+#if __cplusplus > 201402L\n+\n+  struct in_place_tag {\n+    in_place_tag() = delete;\n+  };\n+\n+  struct __in_place;\n+  template<typename _Tp> struct __in_place_type;\n+  template<size_t _Idx> struct __in_place_index;\n+\n+  using in_place_t = in_place_tag(&)(__in_place*);\n+  template <class _Tp>\n+    using in_place_type_t = in_place_tag(&)(__in_place_type<_Tp>*);\n+  template <int _Idx>\n+    using in_place_index_t = in_place_tag(&)(__in_place_index<_Idx>*);\n+\n+  inline in_place_tag in_place(__in_place*) {terminate();}\n+  template <class _Tp>\n+    in_place_tag in_place(__in_place_type<_Tp>*) {terminate();}\n+  template <size_t _Idx>\n+    in_place_tag in_place(__in_place_index<_Idx>*) {terminate();}\n+\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "5e3ffa70ce6b4a54beaacb865efdf51209238617", "filename": "libstdc++-v3/testsuite/20_util/any/assign/1.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F1.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -28,29 +28,29 @@ void test01()\n   any x;\n   any y;\n   y = x;\n-  VERIFY( x.empty() );\n-  VERIFY( y.empty() );\n+  VERIFY( !x.has_value() );\n+  VERIFY( !y.has_value() );\n \n   y = std::move(x);\n-  VERIFY( x.empty() );\n-  VERIFY( y.empty() );\n+  VERIFY( !x.has_value() );\n+  VERIFY( !y.has_value() );\n }\n \n void test02()\n {\n   any x(1);\n   any y;\n   y = x;\n-  VERIFY( !x.empty() );\n-  VERIFY( !y.empty() );\n+  VERIFY( x.has_value() );\n+  VERIFY( y.has_value() );\n \n   x = std::move(y);\n-  VERIFY( !x.empty() );\n-  VERIFY( y.empty() );\n+  VERIFY( x.has_value() );\n+  VERIFY( !y.has_value() );\n \n   x = y;\n-  VERIFY( x.empty() );\n-  VERIFY( y.empty() );\n+  VERIFY( !x.has_value() );\n+  VERIFY( !y.has_value() );\n }\n \n int main()"}, {"sha": "663bae27f38eefe678e87be33ebd38db027d20c9", "filename": "libstdc++-v3/testsuite/20_util/any/assign/emplace.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+#include <vector>\n+#include <tuple>\n+\n+struct combined {\n+  std::vector<int> v;\n+  std::tuple<int, int> t;\n+  template<class... Args>\n+  combined(std::initializer_list<int> il, Args&&... args)\n+    : v(il), t(std::forward<Args>(args)...)\n+  {\n+  }\n+};\n+\n+int main()\n+{\n+  const int i = 42;\n+  std::any o;\n+  o.emplace<int>(i);\n+  int& i2 = std::any_cast<int&>(o);\n+  VERIFY( i2 == 42 );\n+  VERIFY( &i2 != &i );\n+  std::any o2;\n+  o2.emplace<std::tuple<int, int>>(1, 2);\n+  std::tuple<int, int>& t = std::any_cast<std::tuple<int, int>&>(o2);\n+  VERIFY( std::get<0>(t) == 1 && std::get<1>(t) == 2);\n+  std::any o3;\n+  o3.emplace<std::vector<int>>({42, 666});\n+  std::vector<int>& v = std::any_cast<std::vector<int>&>(o3);\n+  VERIFY(v[0] == 42 && v[1] == 666);\n+  std::any o4;\n+  o4.emplace<combined>({42, 666});\n+  combined& c = std::any_cast<combined&>(o4);\n+  VERIFY(c.v[0] == 42 && c.v[1] == 666\n+\t && std::get<0>(c.t) == 0 && std::get<1>(c.t) == 0 );\n+  std::any o5;\n+  o5.emplace<combined>({1, 2}, 3, 4);\n+  combined& c2 = std::any_cast<combined&>(o5);\n+  VERIFY(c2.v[0] == 1 && c2.v[1] == 2\n+\t && std::get<0>(c2.t) == 3 && std::get<1>(c2.t) == 4 );\n+}"}, {"sha": "f0bf12838c7cd6c7c9640930ae667ffa425fd5b4", "filename": "libstdc++-v3/testsuite/20_util/any/assign/self.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Fself.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Fself.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Fself.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -36,13 +36,13 @@ test01()\n \n   any a;\n   a = a;\n-  VERIFY( a.empty() );\n+  VERIFY( !a.has_value() );\n \n   a = A{};\n   a = a;\n-  VERIFY( !a.empty() );\n+  VERIFY( a.has_value() );\n \n-  a.clear();\n+  a.reset();\n   VERIFY( live_objects.empty() );\n }\n \n@@ -57,13 +57,13 @@ test02()\n \n   X x;\n   std::swap(x, x); // results in \"self-move-assignment\" of X::a\n-  VERIFY( x.a.empty() );\n+  VERIFY( !x.a.has_value() );\n \n   x.a = A{};\n   std::swap(x, x); // results in \"self-move-assignment\" of X::a\n-  VERIFY( !x.a.empty() );\n+  VERIFY( x.a.has_value() );\n \n-  x.a.clear();\n+  x.a.reset();\n   VERIFY( live_objects.empty() );\n }\n \n@@ -74,13 +74,13 @@ test03()\n \n   any a;\n   a.swap(a);\n-  VERIFY( a.empty() );\n+  VERIFY( !a.has_value() );\n \n   a = A{};\n   a.swap(a);\n-  VERIFY( !a.empty() );\n+  VERIFY( a.has_value() );\n \n-  a.clear();\n+  a.reset();\n   VERIFY( live_objects.empty() );\n }\n "}, {"sha": "59af878a60c19d5e051845ea840c78d99b2dab43", "filename": "libstdc++-v3/testsuite/20_util/any/cons/1.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F1.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -26,29 +26,29 @@ using std::any;\n void test01()\n {\n   any x;\n-  VERIFY( x.empty() );\n+  VERIFY( !x.has_value() );\n \n   any y(x);\n-  VERIFY( x.empty() );\n-  VERIFY( y.empty() );\n+  VERIFY( !x.has_value() );\n+  VERIFY( !y.has_value() );\n \n   any z(std::move(y));\n-  VERIFY( y.empty() );\n-  VERIFY( z.empty() );\n+  VERIFY( !y.has_value() );\n+  VERIFY( !z.has_value() );\n }\n \n void test02()\n {\n   any x(1);\n-  VERIFY( !x.empty() );\n+  VERIFY( x.has_value() );\n \n   any y(x);\n-  VERIFY( !x.empty() );\n-  VERIFY( !y.empty() );\n+  VERIFY( x.has_value() );\n+  VERIFY( y.has_value() );\n \n   any z(std::move(y));\n-  VERIFY( y.empty() );\n-  VERIFY( !z.empty() );\n+  VERIFY( !y.has_value() );\n+  VERIFY( z.has_value() );\n }\n \n int main()"}, {"sha": "2368b83d250a3aaad027913118a115a516811ca8", "filename": "libstdc++-v3/testsuite/20_util/any/cons/in_place.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+#include <vector>\n+#include <tuple>\n+\n+struct combined {\n+  std::vector<int> v;\n+  std::tuple<int, int> t;\n+  template<class... Args>\n+  combined(std::initializer_list<int> il, Args&&... args)\n+    : v(il), t(std::forward<Args>(args)...)\n+  {\n+  }\n+};\n+\n+int main()\n+{\n+  const int i = 42;\n+  std::any o(std::in_place<int>, i);\n+  int& i2 = std::any_cast<int&>(o);\n+  VERIFY( i2 == 42 );\n+  VERIFY( &i2 != &i );\n+  std::any o2(std::in_place<std::tuple<int, int>>, 1, 2);\n+  std::tuple<int, int>& t = std::any_cast<std::tuple<int, int>&>(o2);\n+  VERIFY( std::get<0>(t) == 1 && std::get<1>(t) == 2);\n+  std::any o3(std::in_place<std::vector<int>>, {42, 666});\n+  std::vector<int>& v = std::any_cast<std::vector<int>&>(o3);\n+  VERIFY(v[0] == 42 && v[1] == 666);\n+  std::any o4(std::in_place<combined>, {42, 666});\n+  combined& c = std::any_cast<combined&>(o4);\n+  VERIFY(c.v[0] == 42 && c.v[1] == 666\n+\t && std::get<0>(c.t) == 0 && std::get<1>(c.t) == 0 );\n+  std::any o5(std::in_place<combined>, {1, 2}, 3, 4);\n+  combined& c2 = std::any_cast<combined&>(o5);\n+  VERIFY(c2.v[0] == 1 && c2.v[1] == 2\n+\t && std::get<0>(c2.t) == 3 && std::get<1>(c2.t) == 4 );\n+}"}, {"sha": "4ec245bfdaec4211960b72a276c968444740dccf", "filename": "libstdc++-v3/testsuite/20_util/any/make_any.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmake_any.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmake_any.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmake_any.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+#include <vector>\n+#include <tuple>\n+\n+struct combined {\n+  std::vector<int> v;\n+  std::tuple<int, int> t;\n+  template<class... Args>\n+  combined(std::initializer_list<int> il, Args&&... args)\n+    : v(il), t(std::forward<Args>(args)...)\n+  {\n+  }\n+};\n+\n+int main()\n+{\n+  const int i = 42;\n+  auto o = std::make_any<int>(i);\n+  int& i2 = std::any_cast<int&>(o);\n+  VERIFY( i2 == 42 );\n+  VERIFY( &i2 != &i );\n+  auto o2 = std::make_any<std::tuple<int, int>>(1, 2);\n+  std::tuple<int, int>& t = std::any_cast<std::tuple<int, int>&>(o2);\n+  VERIFY( std::get<0>(t) == 1 && std::get<1>(t) == 2);\n+  auto o3 = std::make_any<std::vector<int>>({42, 666});\n+  std::vector<int>& v = std::any_cast<std::vector<int>&>(o3);\n+  VERIFY(v[0] == 42 && v[1] == 666);\n+  auto o4 = std::make_any<combined>({42, 666});\n+  combined& c = std::any_cast<combined&>(o4);\n+  VERIFY(c.v[0] == 42 && c.v[1] == 666\n+\t && std::get<0>(c.t) == 0 && std::get<1>(c.t) == 0 );\n+  auto o5 = std::make_any<combined>({1, 2}, 3, 4);\n+  combined& c2 = std::any_cast<combined&>(o5);\n+  VERIFY(c2.v[0] == 1 && c2.v[1] == 2\n+\t && std::get<0>(c2.t) == 3 && std::get<1>(c2.t) == 4 );\n+}"}, {"sha": "32b4e767fd2a7e3250509a88ec59dba95e9e5f83", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 357 }\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 435 }\n }"}, {"sha": "26a86dd5cfc3877d7e2354f19f42d1c0f58675b4", "filename": "libstdc++-v3/testsuite/20_util/any/misc/swap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fswap.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -28,8 +28,8 @@ void test01()\n   any x(1);\n   any y;\n   swap(x, y);\n-  VERIFY( x.empty() );\n-  VERIFY( !y.empty() );\n+  VERIFY( !x.has_value() );\n+  VERIFY( y.has_value() );\n }\n \n int main()"}, {"sha": "39cbe96fd8d3c01b8bdc0ed55e3353ee5ac8c5ee", "filename": "libstdc++-v3/testsuite/20_util/any/modifiers/1.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F1.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -28,14 +28,14 @@ void test01()\n   any x(1);\n   any y;\n   x.swap(y);\n-  VERIFY( x.empty() );\n-  VERIFY( !y.empty() );\n+  VERIFY( !x.has_value() );\n+  VERIFY( y.has_value() );\n   x.swap(y);\n-  VERIFY( !x.empty() );\n-  VERIFY( y.empty() );\n+  VERIFY( x.has_value() );\n+  VERIFY( !y.has_value() );\n \n-  x.clear();\n-  VERIFY( x.empty() );\n+  x.reset();\n+  VERIFY( !x.has_value() );\n }\n \n int main()"}, {"sha": "67e4253c557b16459a2a4867ffb41f5db1db5cfd", "filename": "libstdc++-v3/testsuite/20_util/any/requirements.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Frequirements.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+#include <memory>\n+\n+using std::any;\n+using std::unique_ptr;\n+\n+static_assert(std::is_assignable<any&, int>::value);\n+static_assert(!std::is_assignable<any&, unique_ptr<int>>::value);\n+static_assert(std::is_constructible<any, int>::value);\n+static_assert(!std::is_constructible<any, unique_ptr<int>>::value);\n+"}, {"sha": "fc141d862fdd26697fb3fca51ede55917725b3a3", "filename": "libstdc++-v3/testsuite/20_util/in_place/requirements.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fin_place%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fin_place%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fin_place%2Frequirements.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+using std::in_place_t;\n+using std::in_place_type_t;\n+using std::in_place_index_t;\n+\n+float f(in_place_type_t<float>);\n+double f(in_place_type_t<double>);\n+char f(in_place_index_t<0>);\n+unsigned int f(in_place_index_t<1>);\n+int f(in_place_t);\n+\n+static_assert(std::is_same<decltype(f(in_place_t(std::in_place))), int>::value);\n+static_assert(std::is_same<decltype(f(std::in_place<float>)), float>::value);\n+static_assert(std::is_same<decltype(f(std::in_place<double>)), double>::value);\n+static_assert(std::is_same<decltype(f(std::in_place<0>)), char>::value);\n+static_assert(std::is_same<decltype(f(std::in_place<1>)), unsigned int>::value);\n+\n+template <class T, class... Args> float h(in_place_type_t<T>, Args&&...);\n+template <size_t N, class... Args> int h(in_place_index_t<N>, Args&&...);\n+template <class T> double h(in_place_t, T&&);\n+\n+static_assert(std::is_same<decltype(h(std::in_place, 1)), double>::value);\n+static_assert(std::is_same<decltype(h(std::in_place<float>, 1)), float>::value);\n+static_assert(std::is_same<decltype(h(std::in_place<0>, 1)), int>::value);"}, {"sha": "6db03ea5138d5e77df6cabc91f5c37a17af14599", "filename": "libstdc++-v3/testsuite/20_util/optional/constexpr/in_place.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fin_place.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fin_place.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fin_place.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -24,9 +24,6 @@\n int main()\n {\n   // [20.5.5] In-place construction\n-  static_assert( std::is_same<decltype(std::in_place), const std::in_place_t>(), \"\" );\n-  static_assert( std::is_empty<std::in_place_t>(), \"\" );\n-\n   {\n     constexpr std::optional<int> o { std::in_place };\n     static_assert( o, \"\" );"}, {"sha": "53059dbba7f183d50908ccbe011c74d9af59c43f", "filename": "libstdc++-v3/testsuite/20_util/optional/in_place.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fin_place.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fin_place.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fin_place.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -26,9 +26,6 @@\n int main()\n {\n   // [20.5.5] In-place construction\n-  static_assert( std::is_same<decltype(std::in_place), const std::in_place_t>(), \"\" );\n-  static_assert( std::is_empty<std::in_place_t>(), \"\" );\n-\n   {\n     std::optional<int> o { std::in_place };\n     VERIFY( o );"}, {"sha": "b288a250bd56e2ca92ba863ac6f638c26a62d6ee", "filename": "libstdc++-v3/testsuite/20_util/optional/make_optional.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fmake_optional.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a69162c99e78e9a23066f6c4465176ee4b6213/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fmake_optional.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fmake_optional.cc?ref=25a69162c99e78e9a23066f6c4465176ee4b6213", "patch": "@@ -20,6 +20,18 @@\n \n #include <optional>\n #include <testsuite_hooks.h>\n+#include <vector>\n+#include <tuple>\n+\n+struct combined {\n+  std::vector<int> v;\n+  std::tuple<int, int> t;\n+  template<class... Args>\n+  combined(std::initializer_list<int> il, Args&&... args)\n+    : v(il), t(std::forward<Args>(args)...)\n+  {\n+  }\n+};\n \n int main()\n {\n@@ -28,4 +40,22 @@ int main()\n   static_assert( std::is_same<decltype(o), std::optional<int>>(), \"\" );\n   VERIFY( o && *o == 42 );\n   VERIFY( &*o != &i );\n+  auto o2 = std::make_optional<std::tuple<int, int>>(1, 2);\n+  static_assert( std::is_same<decltype(o2),\n+\t\t std::optional<std::tuple<int, int>>>(), \"\" );\n+  VERIFY( o2 && std::get<0>(*o2) == 1 && std::get<1>(*o2) == 2);\n+  auto o3 = std::make_optional<std::vector<int>>({42, 666});\n+  static_assert( std::is_same<decltype(o3),\n+\t\t std::optional<std::vector<int>>>(), \"\" );\n+  VERIFY(o3 && (*o3)[0] == 42 && (*o3)[1] == 666);\n+  auto o4 = std::make_optional<combined>({42, 666});\n+  static_assert( std::is_same<decltype(o4),\n+\t\t std::optional<combined>>(), \"\" );\n+  VERIFY(o4 && (o4->v)[0] == 42 && (o4->v)[1] == 666\n+\t && std::get<0>(o4->t) == 0 && std::get<1>(o4->t) == 0 );\n+  auto o5 = std::make_optional<combined>({1, 2}, 3, 4);\n+  static_assert( std::is_same<decltype(o5),\n+\t\t std::optional<combined>>(), \"\" );\n+  VERIFY(o4 && (o5->v)[0] == 1 && (o5->v)[1] == 2\n+\t && std::get<0>(o5->t) == 3 && std::get<1>(o5->t) == 4 );\n }"}]}