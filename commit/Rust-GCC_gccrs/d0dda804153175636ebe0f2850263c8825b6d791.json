{"sha": "d0dda804153175636ebe0f2850263c8825b6d791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBkZGE4MDQxNTMxNzU2MzZlYmUwZjI4NTAyNjNjODgyNWI2ZDc5MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-09-13T14:07:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-09-13T14:07:44Z"}, "message": "PR libstdc++/81468 constrain std::chrono::time_point constructor\n\n\tPR libstdc++/81468\n\t* include/std/chrono (__enable_if_is_duration)\n\t(__disable_if_is_duration): New alias templates to simplify SFINAE.\n\t(duration_cast, floor, ceil): Use __enable_if_is_duration.\n\t(duration::__is_float, duration::__is_harmonic): New alias templates\n\tto simplify SFINAE.\n\t(duration::duration(const _Rep2&)): Use _Require, __is_float and\n\t__is_harmonic.\n\t(duration::duration(const duration<_Rep2, _Period2>&)): Likewise.\n\t(__common_rep_type): Remove, replace with ...\n\t(__common_rep_t): New alias template.\n\t(operator*, operator/, operator%): Use __common_rep_t and\n\t__disable_if_is_duration.\n\t(time_point::time_point(const time_point<clock, _Dur2>&)): Add missing\n\tconstraint from LWG DR 1177.\n\t* testsuite/20_util/duration/cons/dr1177.cc: New.\n\t* testsuite/20_util/duration/literals/range.cc: Update dg-error line.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n\t* testsuite/20_util/time_point/cons/81468.cc: New.\n\nFrom-SVN: r252085", "tree": {"sha": "926b06259620243860b4786932acb6d2cb1eb98b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/926b06259620243860b4786932acb6d2cb1eb98b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0dda804153175636ebe0f2850263c8825b6d791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0dda804153175636ebe0f2850263c8825b6d791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0dda804153175636ebe0f2850263c8825b6d791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0dda804153175636ebe0f2850263c8825b6d791/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f0027d1635c52d0deae174bfc68022dc1217c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f0027d1635c52d0deae174bfc68022dc1217c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f0027d1635c52d0deae174bfc68022dc1217c8b"}], "stats": {"total": 180, "additions": 144, "deletions": 36}, "files": [{"sha": "36a9744fb4a844959d66456328027e98fb9439d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d0dda804153175636ebe0f2850263c8825b6d791", "patch": "@@ -1,5 +1,27 @@\n 2017-09-13  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/81468\n+\t* include/std/chrono (__enable_if_is_duration)\n+\t(__disable_if_is_duration): New alias templates to simplify SFINAE.\n+\t(duration_cast, floor, ceil): Use __enable_if_is_duration.\n+\t(duration::__is_float, duration::__is_harmonic): New alias templates\n+\tto simplify SFINAE.\n+\t(duration::duration(const _Rep2&)): Use _Require, __is_float and\n+\t__is_harmonic.\n+\t(duration::duration(const duration<_Rep2, _Period2>&)): Likewise.\n+\t(__common_rep_type): Remove, replace with ...\n+\t(__common_rep_t): New alias template.\n+\t(operator*, operator/, operator%): Use __common_rep_t and\n+\t__disable_if_is_duration.\n+\t(time_point::time_point(const time_point<clock, _Dur2>&)): Add missing\n+\tconstraint from LWG DR 1177.\n+\t* testsuite/20_util/duration/cons/dr1177.cc: New.\n+\t* testsuite/20_util/duration/literals/range.cc: Update dg-error line.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n+\t* testsuite/20_util/time_point/cons/81468.cc: New.\n+\n \t* doc/doxygen/mainpage.html: Fix broken URLs.\n \n \tPR libstdc++/81835"}, {"sha": "fc058fcd8d8c7982688c5191b176cb9c8206448d", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=d0dda804153175636ebe0f2850263c8825b6d791", "patch": "@@ -179,10 +179,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : std::true_type\n       { };\n \n+    template<typename _Tp>\n+      using __enable_if_is_duration\n+\t= typename enable_if<__is_duration<_Tp>::value, _Tp>::type;\n+\n+    template<typename _Tp>\n+      using __disable_if_is_duration\n+\t= typename enable_if<!__is_duration<_Tp>::value, _Tp>::type;\n+\n     /// duration_cast\n     template<typename _ToDur, typename _Rep, typename _Period>\n-      constexpr typename enable_if<__is_duration<_ToDur>::value,\n-\t\t\t\t   _ToDur>::type\n+      constexpr __enable_if_is_duration<_ToDur>\n       duration_cast(const duration<_Rep, _Period>& __d)\n       {\n \ttypedef typename _ToDur::period\t\t\t\t__to_period;\n@@ -211,7 +218,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n # define __cpp_lib_chrono 201510\n \n     template<typename _ToDur, typename _Rep, typename _Period>\n-      constexpr enable_if_t<__is_duration<_ToDur>::value, _ToDur>\n+      constexpr __enable_if_is_duration<_ToDur>\n       floor(const duration<_Rep, _Period>& __d)\n       {\n \tauto __to = chrono::duration_cast<_ToDur>(__d);\n@@ -221,7 +228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     template<typename _ToDur, typename _Rep, typename _Period>\n-      constexpr enable_if_t<__is_duration<_ToDur>::value, _ToDur>\n+      constexpr __enable_if_is_duration<_ToDur>\n       ceil(const duration<_Rep, _Period>& __d)\n       {\n \tauto __to = chrono::duration_cast<_ToDur>(__d);\n@@ -294,6 +301,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Rep, typename _Period>\n       struct duration\n       {\n+      private:\n+\ttemplate<typename _Rep2>\n+\t  using __is_float = treat_as_floating_point<_Rep2>;\n+\n+\t// _Period2 is an exact multiple of _Period\n+\ttemplate<typename _Period2>\n+\t  using __is_harmonic\n+\t    = __bool_constant<ratio_divide<_Period2, _Period>::den == 1>;\n+\n+      public:\n+\n \ttypedef _Rep\t\t\t\t\t\trep;\n \ttypedef _Period \t\t\t\t\tperiod;\n \n@@ -305,22 +323,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// 20.11.5.1 construction / copy / destroy\n \tconstexpr duration() = default;\n \n-\t// NB: Make constexpr implicit. This cannot be explicitly\n-\t// constexpr, as any UDT that is not a literal type with a\n-\t// constexpr copy constructor will be ill-formed.\n \tduration(const duration&) = default;\n \n-\ttemplate<typename _Rep2, typename = typename\n-\t       enable_if<is_convertible<_Rep2, rep>::value\n-\t\t\t && (treat_as_floating_point<rep>::value\n-\t\t\t     || !treat_as_floating_point<_Rep2>::value)>::type>\n+\ttemplate<typename _Rep2, typename = _Require<\n+\t\t is_convertible<_Rep2, rep>,\n+\t\t __or_<__is_float<rep>, __not_<__is_float<_Rep2>>>>>\n \t  constexpr explicit duration(const _Rep2& __rep)\n \t  : __r(static_cast<rep>(__rep)) { }\n \n-\ttemplate<typename _Rep2, typename _Period2, typename = typename\n-\t       enable_if<treat_as_floating_point<rep>::value\n-\t\t\t || (ratio_divide<_Period2, period>::den == 1\n-\t\t\t     && !treat_as_floating_point<_Rep2>::value)>::type>\n+\ttemplate<typename _Rep2, typename _Period2, typename = _Require<\n+\t\t __or_<__is_float<rep>,\n+\t\t       __and_<__is_harmonic<_Period2>,\n+\t\t\t      __not_<__is_float<_Rep2>>>>>>\n \t  constexpr duration(const duration<_Rep2, _Period2>& __d)\n \t  : __r(duration_cast<duration>(__d).count()) { }\n \n@@ -455,18 +469,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __cd(__cd(__lhs).count() - __cd(__rhs).count());\n       }\n \n-    template<typename _Rep1, typename _Rep2, bool =\n-\t     is_convertible<_Rep2,\n-\t\t\t    typename common_type<_Rep1, _Rep2>::type>::value>\n-      struct __common_rep_type { };\n-\n-    template<typename _Rep1, typename _Rep2>\n-      struct __common_rep_type<_Rep1, _Rep2, true>\n-      { typedef typename common_type<_Rep1, _Rep2>::type type; };\n+    // SFINAE helper to obtain common_type<_Rep1, _Rep2> only if _Rep2\n+    // is implicitly convertible to it.\n+    template<typename _Rep1, typename _Rep2,\n+\t     typename _CRep = typename common_type<_Rep1, _Rep2>::type>\n+      using __common_rep_t\n+\t= typename enable_if<is_convertible<_Rep2, _CRep>::value, _CRep>::type;\n \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      constexpr\n-      duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>\n+      constexpr duration<__common_rep_t<_Rep1, _Rep2>, _Period>\n       operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n \ttypedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n@@ -475,14 +486,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     template<typename _Rep1, typename _Rep2, typename _Period>\n-      constexpr\n-      duration<typename __common_rep_type<_Rep2, _Rep1>::type, _Period>\n+      constexpr duration<__common_rep_t<_Rep2, _Rep1>, _Period>\n       operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)\n       { return __d * __s; }\n \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      constexpr duration<typename __common_rep_type<_Rep1, typename\n-\tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n+      constexpr\n+      duration<__common_rep_t<_Rep1, __disable_if_is_duration<_Rep2>>, _Period>\n       operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n \ttypedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n@@ -504,8 +514,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // DR 934.\n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      constexpr duration<typename __common_rep_type<_Rep1, typename\n-\tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n+      constexpr\n+      duration<__common_rep_t<_Rep1, __disable_if_is_duration<_Rep2>>, _Period>\n       operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n \ttypedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>\n@@ -614,7 +624,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n \t// conversions\n-\ttemplate<typename _Dur2>\n+\ttemplate<typename _Dur2,\n+\t\t typename = _Require<is_convertible<_Dur2, _Dur>>>\n \t  constexpr time_point(const time_point<clock, _Dur2>& __t)\n \t  : __d(__t.time_since_epoch())\n \t  { }"}, {"sha": "28c881ccc796e35af1a276d59c0407989312d1b9", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/dr1177.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2Fdr1177.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2Fdr1177.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2Fdr1177.cc?ref=d0dda804153175636ebe0f2850263c8825b6d791", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <chrono>\n+#include <type_traits>\n+\n+using namespace std;\n+using namespace std::chrono;\n+\n+// DR 1177\n+static_assert(is_constructible<duration<float>, duration<double>>{},\n+    \"can convert duration with one floating point rep to another\");\n+static_assert(is_constructible<duration<float>, duration<int>>{},\n+    \"can convert duration with integral rep to one with floating point rep\");\n+static_assert(!is_constructible<duration<int>, duration<float>>{},\n+    \"cannot convert duration with floating point rep to one with integral rep\");\n+static_assert(is_constructible<duration<int>, duration<long>>{},\n+    \"can convert duration with one integral rep to another\");\n+\n+static_assert(!is_constructible<duration<int>, duration<int, ratio<2,3>>>{},\n+    \"cannot convert duration to one with different period\");\n+static_assert(is_constructible<duration<float>, duration<int, ratio<2,3>>>{},\n+    \"unless it has a floating-point representation\");\n+static_assert(is_constructible<duration<float>, duration<int, ratio<1,3>>>{},\n+    \"or a period that is an integral multiple of the original\");"}, {"sha": "36e71eea72be186492d250943d813b60c112e73e", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc?ref=d0dda804153175636ebe0f2850263c8825b6d791", "patch": "@@ -26,6 +26,6 @@ test01()\n \n   // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n   auto h = 9223372036854775808h;\n-  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 880 }\n+  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 891 }\n }\n // { dg-prune-output \"in constexpr expansion\" } // needed for -O0"}, {"sha": "d57f6dedd6674c3f86caca1c94f6b27d9c8b093f", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=d0dda804153175636ebe0f2850263c8825b6d791", "patch": "@@ -30,4 +30,4 @@ void test01()\n   test_type d; // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 300 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 318 }"}, {"sha": "39283b2cb74c6c7af8cb77397b4a1538706d0ac8", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=d0dda804153175636ebe0f2850263c8825b6d791", "patch": "@@ -31,5 +31,5 @@ void test01()\n   test_type d;\t\t\t// { dg-error \"required from here\" }\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 301 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 319 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "9beaa83fbfa03f6f2132f63508709bbf99220548", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=d0dda804153175636ebe0f2850263c8825b6d791", "patch": "@@ -32,4 +32,4 @@ void test01()\n   test_type d;  // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 303 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 321 }"}, {"sha": "30d1c4a5ac73398ef30af1e9db6f4ac9e72f5891", "filename": "libstdc++-v3/testsuite/20_util/time_point/cons/81468.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Fcons%2F81468.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dda804153175636ebe0f2850263c8825b6d791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Fcons%2F81468.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Fcons%2F81468.cc?ref=d0dda804153175636ebe0f2850263c8825b6d791", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <chrono>\n+#include <type_traits>\n+\n+using namespace std;\n+using namespace std::chrono;\n+\n+template <class Duration>\n+    using sys_time = time_point<system_clock, Duration>;\n+\n+static_assert(is_constructible<sys_time<milliseconds>, sys_time<seconds>>{},\n+    \"Can construct time_point from one with lower precision duration\");\n+\n+// PR libstdc++/81468 - DR 1177\n+static_assert(!is_constructible<sys_time<seconds>, sys_time<milliseconds>>{},\n+    \"Cannot construct time_point from one with higher precision duration\");"}]}