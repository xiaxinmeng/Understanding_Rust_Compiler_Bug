{"sha": "ff3809b459db881e80f627e81ec946e7bbd7041d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzODA5YjQ1OWRiODgxZTgwZjYyN2U4MWVjOTQ2ZTdiYmQ3MDQxZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-05-14T09:05:42Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-05-14T14:31:25Z"}, "message": "aarch64: Make sqdmlal2 patterns match canonical RTL\n\nThe sqdmlal2 patterns are hidden beneath the SBINQOPS iterator and unfortunately they don't match\ncanonical RTL because the simple accumulate operand comes in the first arm of the SS_PLUS.\nThis patch splits the SS_PLUS and SS_MINUS forms with the SS_PLUS operands set up to match\nthe canonical form, where the complex operand comes first.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_sqdml<SBINQOPS:as>l2_lane<mode>_internal): Split into...\n\t(aarch64_sqdmlsl2_lane<mode>_internal): ... This...\n\t(aarch64_sqdmlal2_lane<mode>_internal): ... And this.\n\t(aarch64_sqdml<SBINQOPS:as>l2_laneq<mode>_internal): Split into ...\n\t(aarch64_sqdmlsl2_laneq<mode>_internal): ... This...\n\t(aarch64_sqdmlal2_laneq<mode>_internal): ... And this.\n\t(aarch64_sqdml<SBINQOPS:as>l2_n<mode>_internal): Split into...\n\t(aarch64_sqdmlsl2_n<mode>_internal): ... This...\n\t(aarch64_sqdmlal2_n<mode>_internal): ... And this.", "tree": {"sha": "b02afb0aa23c6027c346c5cd5fcc94b1bb3e0889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b02afb0aa23c6027c346c5cd5fcc94b1bb3e0889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff3809b459db881e80f627e81ec946e7bbd7041d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3809b459db881e80f627e81ec946e7bbd7041d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff3809b459db881e80f627e81ec946e7bbd7041d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3809b459db881e80f627e81ec946e7bbd7041d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4206171605de65df9674a14dd9db75bf4f4ed037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4206171605de65df9674a14dd9db75bf4f4ed037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4206171605de65df9674a14dd9db75bf4f4ed037"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "e59bc7b4583bf3797647ac8dfc4fb6a640ead210", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 80, "deletions": 9, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3809b459db881e80f627e81ec946e7bbd7041d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3809b459db881e80f627e81ec946e7bbd7041d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=ff3809b459db881e80f627e81ec946e7bbd7041d", "patch": "@@ -5374,9 +5374,9 @@\n \n ;; vqdml[sa]l2_lane\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l2_lane<mode>_internal\"\n+(define_insn \"aarch64_sqdmlsl2_lane<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t      (mult:<VWIDE>\n@@ -5395,14 +5395,40 @@\n   {\n     operands[4] = aarch64_endian_lane_rtx (<VCOND>mode, INTVAL (operands[4]));\n     return\n-     \"sqdml<SBINQOPS:as>l2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+     \"sqdmlsl2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmlal2_lane<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_plus:<VWIDE>\n+\t  (ss_ashift:<VWIDE>\n+\t      (mult:<VWIDE>\n+\t\t(sign_extend:<VWIDE>\n+                  (vec_select:<VHALF>\n+                    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+                    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n+\t\t(sign_extend:<VWIDE>\n+                  (vec_duplicate:<VHALF>\n+\t\t    (vec_select:<VEL>\n+\t\t      (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n+\t\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])\n+\t\t    ))))\n+\t      (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<VCOND>mode, INTVAL (operands[4]));\n+    return\n+     \"sqdmlal2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n   }\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l2_laneq<mode>_internal\"\n+(define_insn \"aarch64_sqdmlsl2_laneq<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t      (mult:<VWIDE>\n@@ -5421,7 +5447,33 @@\n   {\n     operands[4] = aarch64_endian_lane_rtx (<VCONQ>mode, INTVAL (operands[4]));\n     return\n-     \"sqdml<SBINQOPS:as>l2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+     \"sqdmlsl2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmlal2_laneq<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_plus:<VWIDE>\n+\t  (ss_ashift:<VWIDE>\n+\t      (mult:<VWIDE>\n+\t\t(sign_extend:<VWIDE>\n+                  (vec_select:<VHALF>\n+                    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+                    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n+\t\t(sign_extend:<VWIDE>\n+                  (vec_duplicate:<VHALF>\n+\t\t    (vec_select:<VEL>\n+\t\t      (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n+\t\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])\n+\t\t    ))))\n+\t      (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<VCONQ>mode, INTVAL (operands[4]));\n+    return\n+     \"sqdmlal2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n   }\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n@@ -5460,9 +5512,9 @@\n   DONE;\n })\n \n-(define_insn \"aarch64_sqdml<SBINQOPS:as>l2_n<mode>_internal\"\n+(define_insn \"aarch64_sqdmlsl2_n<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (SBINQOPS:<VWIDE>\n+        (ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t    (mult:<VWIDE>\n@@ -5475,7 +5527,26 @@\n \t\t  (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n \t    (const_int 1))))]\n   \"TARGET_SIMD\"\n-  \"sqdml<SBINQOPS:as>l2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[0]\"\n+  \"sqdmlsl2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmlal2_n<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_plus:<VWIDE>\n+\t  (ss_ashift:<VWIDE>\n+\t    (mult:<VWIDE>\n+\t      (sign_extend:<VWIDE>\n+                (vec_select:<VHALF>\n+                  (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+                  (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t      (sign_extend:<VWIDE>\n+                (vec_duplicate:<VHALF>\n+\t\t  (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n+\t    (const_int 1))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"sqdmlal2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[0]\"\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n "}]}