{"sha": "4acc4c2be84d66075d60736623c3a7134d129eaa", "node_id": "C_kwDOANBUbNoAKDRhY2M0YzJiZTg0ZDY2MDc1ZDYwNzM2NjIzYzNhNzEzNGQxMjllYWE", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-10-25T09:10:23Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-11-01T05:34:32Z"}, "message": "Fix incorrect digit constraint\n\nMatching constraints are used in these circumstances. More precisely,\nthe two operands that match must include one input-only operand and\none output-only operand. Moreover, the digit must be a smaller number\nthan the number of the operand that uses it in the constraint.\n\nIn pr107057, the 2 operands in the pattern are both input operands.\n\ngcc/ChangeLog:\n\n\tPR target/107057\n\t* config/i386/sse.md (*vec_interleave_highv2df): Remove\n\tconstraint 1.\n\t(*vec_interleave_lowv2df): Ditto.\n\t(vec_concatv2df): Ditto.\n\t(*avx512f_unpcklpd512<mask_name>): Ditto and renamed to ..\n\t(avx512f_unpcklpd512<mask_name>): .. this.\n\t(avx512f_movddup512<mask_name>): Change to define_insn.\n\t(avx_movddup256<mask_name>): Ditto.\n\t(*avx_unpcklpd256<mask_name>): Remove constraint 1 and renamed\n\tto ..\n\t(avx_unpcklpd256<mask_name>): .. this.\n\t* config/i386/i386.cc (ix86_vec_interleave_v2df_operator_ok):\n\tDisallow MEM_P (op1) && MEM_P (op2).\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr107057.c: New test.", "tree": {"sha": "88f4d3f3ff43e34ed23cce670360364552efbca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88f4d3f3ff43e34ed23cce670360364552efbca1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4acc4c2be84d66075d60736623c3a7134d129eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acc4c2be84d66075d60736623c3a7134d129eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4acc4c2be84d66075d60736623c3a7134d129eaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acc4c2be84d66075d60736623c3a7134d129eaa/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5ef2f9ab545b680cd4bb6c540a9dadb12ead86"}], "stats": {"total": 161, "additions": 77, "deletions": 84}, "files": [{"sha": "f8586499cd10e4ad5706fe01e8fc2a847c592451", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acc4c2be84d66075d60736623c3a7134d129eaa/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acc4c2be84d66075d60736623c3a7134d129eaa/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=4acc4c2be84d66075d60736623c3a7134d129eaa", "patch": "@@ -15657,7 +15657,7 @@ ix86_vec_interleave_v2df_operator_ok (rtx operands[3], bool high)\n   if (MEM_P (operands[0]))\n     return rtx_equal_p (operands[0], operands[1 + high]);\n   if (MEM_P (operands[1]) && MEM_P (operands[2]))\n-    return TARGET_SSE3 && rtx_equal_p (operands[1], operands[2]);\n+    return false;\n   return true;\n }\n "}, {"sha": "fa93ae7bf21574f862133f16b7ac3aa544a69f8e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 57, "deletions": 83, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acc4c2be84d66075d60736623c3a7134d129eaa/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acc4c2be84d66075d60736623c3a7134d129eaa/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4acc4c2be84d66075d60736623c3a7134d129eaa", "patch": "@@ -12168,107 +12168,88 @@\n })\n \n (define_insn \"*vec_interleave_highv2df\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,v,v,x,v,m\")\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,v,x,v,m\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,v,o,o,o,v\")\n-\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \" x,v,1,0,v,0\"))\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,v,o,o,v\")\n+\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \" x,v,0,v,0\"))\n \t  (parallel [(const_int 1)\n \t\t     (const_int 3)])))]\n   \"TARGET_SSE2 && ix86_vec_interleave_v2df_operator_ok (operands, 1)\"\n   \"@\n    unpckhpd\\t{%2, %0|%0, %2}\n    vunpckhpd\\t{%2, %1, %0|%0, %1, %2}\n-   %vmovddup\\t{%H1, %0|%0, %H1}\n    movlpd\\t{%H1, %0|%0, %H1}\n    vmovlpd\\t{%H1, %2, %0|%0, %2, %H1}\n    %vmovhpd\\t{%1, %0|%q0, %1}\"\n-  [(set_attr \"isa\" \"noavx,avx,sse3,noavx,avx,*\")\n-   (set_attr \"type\" \"sselog,sselog,sselog,ssemov,ssemov,ssemov\")\n+  [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n+   (set_attr \"type\" \"sselog,sselog,ssemov,ssemov,ssemov\")\n    (set (attr \"prefix_data16\")\n-     (if_then_else (eq_attr \"alternative\" \"3,5\")\n+     (if_then_else (eq_attr \"alternative\" \"2,4\")\n \t\t   (const_string \"1\")\n \t\t   (const_string \"*\")))\n-   (set_attr \"prefix\" \"orig,maybe_evex,maybe_vex,orig,maybe_evex,maybe_vex\")\n-   (set_attr \"mode\" \"V2DF,V2DF,DF,V1DF,V1DF,V1DF\")])\n+   (set_attr \"prefix\" \"orig,maybe_evex,orig,maybe_evex,maybe_vex\")\n+   (set_attr \"mode\" \"V2DF,V2DF,V1DF,V1DF,V1DF\")])\n \n-(define_expand \"avx512f_movddup512<mask_name>\"\n-  [(set (match_operand:V8DF 0 \"register_operand\")\n+(define_insn \"avx512f_movddup512<mask_name>\"\n+  [(set (match_operand:V8DF 0 \"register_operand\" \"=v\")\n \t(vec_select:V8DF\n \t  (vec_concat:V16DF\n-\t    (match_operand:V8DF 1 \"nonimmediate_operand\")\n+\t    (match_operand:V8DF 1 \"nonimmediate_operand\" \"m\")\n \t    (match_dup 1))\n \t  (parallel [(const_int 0) (const_int 8)\n \t\t     (const_int 2) (const_int 10)\n \t\t     (const_int 4) (const_int 12)\n \t\t     (const_int 6) (const_int 14)])))]\n-  \"TARGET_AVX512F\")\n-\n-(define_expand \"avx512f_unpcklpd512<mask_name>\"\n-  [(set (match_operand:V8DF 0 \"register_operand\")\n-\t(vec_select:V8DF\n-\t  (vec_concat:V16DF\n-\t    (match_operand:V8DF 1 \"register_operand\")\n-\t    (match_operand:V8DF 2 \"nonimmediate_operand\"))\n-\t  (parallel [(const_int 0) (const_int 8)\n-\t\t     (const_int 2) (const_int 10)\n-\t\t     (const_int 4) (const_int 12)\n-\t\t     (const_int 6) (const_int 14)])))]\n-  \"TARGET_AVX512F\")\n+  \"TARGET_AVX512F\"\n+  \"vmovddup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V8DF\")])\n \n-(define_insn \"*avx512f_unpcklpd512<mask_name>\"\n-  [(set (match_operand:V8DF 0 \"register_operand\" \"=v,v\")\n+(define_insn \"avx512f_unpcklpd512<mask_name>\"\n+  [(set (match_operand:V8DF 0 \"register_operand\" \"=v\")\n \t(vec_select:V8DF\n \t  (vec_concat:V16DF\n-\t    (match_operand:V8DF 1 \"nonimmediate_operand\" \"vm, v\")\n-\t    (match_operand:V8DF 2 \"nonimmediate_operand\" \"1 ,vm\"))\n+\t    (match_operand:V8DF 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8DF 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 0) (const_int 8)\n \t\t     (const_int 2) (const_int 10)\n \t\t     (const_int 4) (const_int 12)\n \t\t     (const_int 6) (const_int 14)])))]\n   \"TARGET_AVX512F\"\n-  \"@\n-   vmovddup\\t{%1, %0<mask_operand3>|%0<mask_operand3>, %1}\n-   vunpcklpd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  \"vunpcklpd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V8DF\")])\n \n ;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n-(define_expand \"avx_movddup256<mask_name>\"\n-  [(set (match_operand:V4DF 0 \"register_operand\")\n+(define_insn \"avx_movddup256<mask_name>\"\n+  [(set (match_operand:V4DF 0 \"register_operand\" \"=v\")\n \t(vec_select:V4DF\n \t  (vec_concat:V8DF\n-\t    (match_operand:V4DF 1 \"nonimmediate_operand\")\n+\t    (match_operand:V4DF 1 \"nonimmediate_operand\" \"m\")\n \t    (match_dup 1))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 2) (const_int 6)])))]\n-  \"TARGET_AVX && <mask_avx512vl_condition>\")\n-\n-(define_expand \"avx_unpcklpd256<mask_name>\"\n-  [(set (match_operand:V4DF 0 \"register_operand\")\n-\t(vec_select:V4DF\n-\t  (vec_concat:V8DF\n-\t    (match_operand:V4DF 1 \"register_operand\")\n-\t    (match_operand:V4DF 2 \"nonimmediate_operand\"))\n-\t  (parallel [(const_int 0) (const_int 4)\n-\t\t     (const_int 2) (const_int 6)])))]\n-  \"TARGET_AVX && <mask_avx512vl_condition>\")\n+  \"TARGET_AVX && <mask_avx512vl_condition>\"\n+  \"vmovddup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"<mask_prefix>\")\n+   (set_attr \"mode\" \"V4DF\")])\n \n-(define_insn \"*avx_unpcklpd256<mask_name>\"\n-  [(set (match_operand:V4DF 0 \"register_operand\"         \"=v,v\")\n+(define_insn \"avx_unpcklpd256<mask_name>\"\n+  [(set (match_operand:V4DF 0 \"register_operand\"         \"=v\")\n \t(vec_select:V4DF\n \t  (vec_concat:V8DF\n-\t    (match_operand:V4DF 1 \"nonimmediate_operand\" \" v,m\")\n-\t    (match_operand:V4DF 2 \"nonimmediate_operand\" \"vm,1\"))\n+\t    (match_operand:V4DF 1 \"register_operand\" \" v\")\n+\t    (match_operand:V4DF 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 2) (const_int 6)])))]\n   \"TARGET_AVX && <mask_avx512vl_condition>\"\n-  \"@\n-   vunpcklpd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\n-   vmovddup\\t{%1, %0<mask_operand3>|%0<mask_operand3>, %1}\"\n+  \"vunpcklpd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"<mask_prefix>\")\n    (set_attr \"mode\" \"V4DF\")])\n \n (define_expand \"vec_interleave_lowv4df\"\n@@ -12330,29 +12311,28 @@\n })\n \n (define_insn \"*vec_interleave_lowv2df\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,v,v,x,v,o\")\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,v,x,v,o\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,v,m,0,v,0\")\n-\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \" x,v,1,m,m,v\"))\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,v,0,v,0\")\n+\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \" x,v,m,m,v\"))\n \t  (parallel [(const_int 0)\n \t\t     (const_int 2)])))]\n   \"TARGET_SSE2 && ix86_vec_interleave_v2df_operator_ok (operands, 0)\"\n   \"@\n    unpcklpd\\t{%2, %0|%0, %2}\n    vunpcklpd\\t{%2, %1, %0|%0, %1, %2}\n-   %vmovddup\\t{%1, %0|%0, %q1}\n    movhpd\\t{%2, %0|%0, %q2}\n    vmovhpd\\t{%2, %1, %0|%0, %1, %q2}\n    %vmovlpd\\t{%2, %H0|%H0, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx,sse3,noavx,avx,*\")\n-   (set_attr \"type\" \"sselog,sselog,sselog,ssemov,ssemov,ssemov\")\n+  [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n+   (set_attr \"type\" \"sselog,sselog,ssemov,ssemov,ssemov\")\n    (set (attr \"prefix_data16\")\n-     (if_then_else (eq_attr \"alternative\" \"3,5\")\n+     (if_then_else (eq_attr \"alternative\" \"2,4\")\n \t\t   (const_string \"1\")\n \t\t   (const_string \"*\")))\n-   (set_attr \"prefix\" \"orig,maybe_evex,maybe_vex,orig,maybe_evex,maybe_vex\")\n-   (set_attr \"mode\" \"V2DF,V2DF,DF,V1DF,V1DF,V1DF\")])\n+   (set_attr \"prefix\" \"orig,maybe_evex,orig,maybe_evex,maybe_vex\")\n+   (set_attr \"mode\" \"V2DF,V2DF,V1DF,V1DF,V1DF\")])\n \n (define_split\n   [(set (match_operand:V2DF 0 \"memory_operand\")\n@@ -13558,56 +13538,50 @@\n    (set_attr \"mode\" \"V2DF,DF,DF\")])\n \n (define_insn \"vec_concatv2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,x,v,x,v,x,x, v,x,x\")\n+  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,x,v,x,x, v,x,x\")\n \t(vec_concat:V2DF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,x,v,m,m,0,x,vm,0,0\")\n-\t  (match_operand:DF 2 \"nonimm_or_0_operand\"  \" x,x,v,1,1,m,m, C,x,m\")))]\n-  \"TARGET_SSE\n-   && (!(MEM_P (operands[1]) && MEM_P (operands[2]))\n-       || (TARGET_SSE3 && rtx_equal_p (operands[1], operands[2])))\"\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,x,v,0,x,vm,0,0\")\n+\t  (match_operand:DF 2 \"nonimm_or_0_operand\"  \" x,x,v,m,m, C,x,m\")))]\n+  \"TARGET_SSE && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    unpcklpd\\t{%2, %0|%0, %2}\n    vunpcklpd\\t{%2, %1, %0|%0, %1, %2}\n    vunpcklpd\\t{%2, %1, %0|%0, %1, %2}\n-   %vmovddup\\t{%1, %0|%0, %1}\n-   vmovddup\\t{%1, %0|%0, %1}\n    movhpd\\t{%2, %0|%0, %2}\n    vmovhpd\\t{%2, %1, %0|%0, %1, %2}\n    %vmovq\\t{%1, %0|%0, %1}\n    movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\"\n   [(set (attr \"isa\")\n-     (cond [(eq_attr \"alternative\" \"0,5\")\n+     (cond [(eq_attr \"alternative\" \"0,3\")\n \t      (const_string \"sse2_noavx\")\n-\t    (eq_attr \"alternative\" \"1,6\")\n+\t    (eq_attr \"alternative\" \"1,4\")\n \t      (const_string \"avx\")\n-\t    (eq_attr \"alternative\" \"2,4\")\n+\t    (eq_attr \"alternative\" \"2\")\n \t      (const_string \"avx512vl\")\n-\t    (eq_attr \"alternative\" \"3\")\n-\t      (const_string \"sse3\")\n-\t    (eq_attr \"alternative\" \"7\")\n+\t    (eq_attr \"alternative\" \"5\")\n \t      (const_string \"sse2\")\n \t   ]\n \t   (const_string \"noavx\")))\n    (set (attr \"type\")\n      (if_then_else\n-       (eq_attr \"alternative\" \"0,1,2,3,4\")\n+       (eq_attr \"alternative\" \"0,1,2\")\n        (const_string \"sselog\")\n        (const_string \"ssemov\")))\n    (set (attr \"prefix_data16\")\n-\t(if_then_else (eq_attr \"alternative\" \"5\")\n+\t(if_then_else (eq_attr \"alternative\" \"3\")\n \t\t      (const_string \"1\")\n \t\t      (const_string \"*\")))\n    (set (attr \"prefix\")\n-     (cond [(eq_attr \"alternative\" \"1,6\")\n+     (cond [(eq_attr \"alternative\" \"1,4\")\n \t      (const_string \"vex\")\n-\t    (eq_attr \"alternative\" \"2,4\")\n+\t    (eq_attr \"alternative\" \"2\")\n \t      (const_string \"evex\")\n-\t    (eq_attr \"alternative\" \"3,7\")\n+\t    (eq_attr \"alternative\" \"5\")\n \t      (const_string \"maybe_vex\")\n \t   ]\n \t   (const_string \"orig\")))\n-   (set_attr \"mode\" \"V2DF,V2DF,V2DF, DF, DF, V1DF,V1DF,DF,V4SF,V2SF\")])\n+   (set_attr \"mode\" \"V2DF,V2DF,V2DF,V1DF,V1DF,DF,V4SF,V2SF\")])\n \n ;; vmovq clears also the higher bits.\n (define_insn \"vec_set<mode>_0\""}, {"sha": "40b49ac21ecb489a8608d0ab37e3e26176fb9344", "filename": "gcc/testsuite/gcc.target/i386/pr107057.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acc4c2be84d66075d60736623c3a7134d129eaa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107057.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acc4c2be84d66075d60736623c3a7134d129eaa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107057.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107057.c?ref=4acc4c2be84d66075d60736623c3a7134d129eaa", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx -mcmodel=large -O3\" } */\n+\n+typedef double v2df __attribute__ ((vector_size (16)));\n+v2df f (double a, double b)\n+{\n+  v2df v;\n+  double *c = (double *)&v;\n+  *c = a;\n+  *(c+1) = b;\n+  return v;\n+}\n+void g ()\n+{\n+  v2df x = f (1.0, 1.0);\n+  v2df y = f (2.0, 2.0);\n+  for (;*(double *)&x<=8; x+=y)\n+    g ();\n+}"}]}