{"sha": "1e156882fad89fc2661abdf85e64a62d51815668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUxNTY4ODJmYWQ4OWZjMjY2MWFiZGY4NWU2NGE2MmQ1MTgxNTY2OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-05T11:11:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-05T11:11:48Z"}, "message": "istream.cc (basic_istream<char>::ignore(streamsize), [...]): At the end, first check _M_gcount vs __n.\n\n2005-01-05  Paolo Carlini  <pcarlini@suse.de>\n\n\t* src/istream.cc (basic_istream<char>::ignore(streamsize),\n\tbasic_istream<char>::ignore(streamsize, int_type),\n\tbasic_istream<wchar_t>::ignore(streamsize),\n\tbasic_istream<wchar_t>::ignore(streamsize, int_type)): At the end,\n\tfirst check _M_gcount vs __n.\n\t* include/bits/istream.tcc (ignore(streamsize), ignore(streamsize,\n\tint_type)): Likewise.\n\t* testsuite/27_io/basic_istream/ignore/char/4.cc: New.\n\t* testsuite/27_io/basic_istream/ignore/wchar_t/4.cc: Likewise.\n\nFrom-SVN: r92947", "tree": {"sha": "080e0c96b4e24522fb5299998ff72b047a27e916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/080e0c96b4e24522fb5299998ff72b047a27e916"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e156882fad89fc2661abdf85e64a62d51815668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e156882fad89fc2661abdf85e64a62d51815668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e156882fad89fc2661abdf85e64a62d51815668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e156882fad89fc2661abdf85e64a62d51815668/comments", "author": null, "committer": null, "parents": [{"sha": "4514aa8c6728182bf47343a8acbcec44e326f78e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4514aa8c6728182bf47343a8acbcec44e326f78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4514aa8c6728182bf47343a8acbcec44e326f78e"}], "stats": {"total": 165, "additions": 155, "deletions": 10}, "files": [{"sha": "8322d5f9efc80e63ddbc47c2eed9d7bfa445fb5d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1e156882fad89fc2661abdf85e64a62d51815668", "patch": "@@ -1,3 +1,15 @@\n+2005-01-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* src/istream.cc (basic_istream<char>::ignore(streamsize),\n+\tbasic_istream<char>::ignore(streamsize, int_type),\n+\tbasic_istream<wchar_t>::ignore(streamsize),\n+\tbasic_istream<wchar_t>::ignore(streamsize, int_type)): At the end,\n+\tfirst check _M_gcount vs __n. \t\n+\t* include/bits/istream.tcc (ignore(streamsize), ignore(streamsize,\n+\tint_type)): Likewise.\n+\t* testsuite/27_io/basic_istream/ignore/char/4.cc: New.\n+\t* testsuite/27_io/basic_istream/ignore/wchar_t/4.cc: Likewise.\n+\n 2005-01-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/testsuite_hooks.cc: Use __throw_exception_again"}, {"sha": "876f626acfcf5066e1a02a27224b318219fd2e6f", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=1e156882fad89fc2661abdf85e64a62d51815668", "patch": "@@ -685,6 +685,13 @@ namespace std\n               __streambuf_type* __sb = this->rdbuf();\n               int_type __c = __sb->sgetc();\n \n+\t      // N.B. On LFS-enabled platforms streamsize is still 32 bits\n+\t      // wide: if we want to implement the standard mandated behavior\n+\t      // for n == max() (see 27.6.1.3/24) we are at risk of signed\n+\t      // integer overflow: thus these contortions. Also note that,\n+\t      // by definition, when more than 2G chars are actually ignored,\n+\t      // _M_gcount (the return value of gcount, that is) cannot be\n+\t      // really correct, being unavoidably too small.\n \t      while (true)\n \t\t{\n \t\t  while (_M_gcount < __n\n@@ -700,7 +707,7 @@ namespace std\n \t\t    break;\n \t\t}\n \n-\t      if (traits_type::eq_int_type(__c, __eof))\n+\t      if (_M_gcount < __n)\n                 __err |= ios_base::eofbit;\n             }\n           catch(...)\n@@ -730,6 +737,7 @@ namespace std\n               __streambuf_type* __sb = this->rdbuf();\n               int_type __c = __sb->sgetc();\n \n+\t      // See comment above.\n \t      while (true)\n \t\t{\n \t\t  while (_M_gcount < __n\n@@ -747,9 +755,11 @@ namespace std\n \t\t    break;\n \t\t}\n \n-              if (traits_type::eq_int_type(__c, __eof))\n+\t      if (_M_gcount == __n)\n+\t\t;\n+              else if (traits_type::eq_int_type(__c, __eof))\n                 __err |= ios_base::eofbit;\n-\t      else if (traits_type::eq_int_type(__c, __delim))\n+\t      else\n \t\t{\n \t\t  ++_M_gcount;\n \t\t  __sb->sbumpc();"}, {"sha": "dc99051a022eb69607e90f61d75a4dc0052c1dec", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=1e156882fad89fc2661abdf85e64a62d51815668", "patch": "@@ -123,7 +123,8 @@ namespace std\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n-\t      \n+\n+\t      // See comment in istream.tcc.\n \t      while (true)\n \t\t{\n \t\t  while (_M_gcount < __n\n@@ -151,7 +152,7 @@ namespace std\n \t\t    break;\n \t\t}\n \n-\t      if (traits_type::eq_int_type(__c, __eof))\n+\t      if (_M_gcount < __n)\n \t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n@@ -216,9 +217,11 @@ namespace std\n \t\t    break;\n \t\t}\n \n-\t      if (traits_type::eq_int_type(__c, __eof))\n+\t      if (_M_gcount == __n)\n+\t\t;\n+\t      else if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n-\t      else if (traits_type::eq_int_type(__c, __delim))\n+\t      else\n \t\t{\n \t\t  ++_M_gcount;\n \t\t  __sb->sbumpc();\n@@ -429,7 +432,7 @@ namespace std\n \t\t    break;\n \t\t}\n \n-\t      if (traits_type::eq_int_type(__c, __eof))\n+\t      if (_M_gcount < __n)\n \t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n@@ -494,9 +497,11 @@ namespace std\n \t\t    break;\n \t\t}\n \n-\t      if (traits_type::eq_int_type(__c, __eof))\n+\t      if (_M_gcount == __n)\n+\t\t;\n+\t      else if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n-\t      else if (traits_type::eq_int_type(__c, __delim))\n+\t      else\n \t\t{\n \t\t  ++_M_gcount;\n \t\t  __sb->sbumpc();"}, {"sha": "474f6a9d04c8c8ab1d28bf5fc218083c7803fa4f", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/char/4.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F4.cc?ref=1e156882fad89fc2661abdf85e64a62d51815668", "patch": "@@ -0,0 +1,59 @@\n+// 2005-01-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const string str_01(\"Gesang der junglinge\");\n+  ios_base::iostate state1, state2;\n+\n+  stringbuf isbuf_01(str_01, ios_base::in);\n+  istream is_01(&isbuf_01);\n+\n+  state1 = is_01.rdstate();\n+  VERIFY( state1 == ios_base::goodbit );\n+\n+  is_01.ignore(11, 'j');\n+  VERIFY( is_01.gcount() == 11 );\n+  state2 = is_01.rdstate();\n+  VERIFY( state2 == state1 );\n+  VERIFY( is_01.peek() == 'j' );\n+\n+  is_01.ignore(9);\n+  VERIFY( is_01.gcount() == 9 );\n+  state2 = is_01.rdstate();\n+  VERIFY( state2 == state1 );\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "361811754ce18b75b01e62b6310e8435cebfca81", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/wchar_t/4.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e156882fad89fc2661abdf85e64a62d51815668/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F4.cc?ref=1e156882fad89fc2661abdf85e64a62d51815668", "patch": "@@ -0,0 +1,59 @@\n+// 2005-01-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const wstring str_01(L\"Gesang der junglinge\");\n+  ios_base::iostate state1, state2;\n+\n+  wstringbuf isbuf_01(str_01, ios_base::in);\n+  wistream is_01(&isbuf_01);\n+\n+  state1 = is_01.rdstate();\n+  VERIFY( state1 == ios_base::goodbit );\n+\n+  is_01.ignore(11, L'j');\n+  VERIFY( is_01.gcount() == 11 );\n+  state2 = is_01.rdstate();\n+  VERIFY( state2 == state1 );\n+  VERIFY( is_01.peek() == L'j' );\n+\n+  is_01.ignore(9);\n+  VERIFY( is_01.gcount() == 9 );\n+  state2 = is_01.rdstate();\n+  VERIFY( state2 == state1 );\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}