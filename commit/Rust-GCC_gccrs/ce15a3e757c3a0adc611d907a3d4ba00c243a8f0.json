{"sha": "ce15a3e757c3a0adc611d907a3d4ba00c243a8f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UxNWEzZTc1N2MzYTBhZGM2MTFkOTA3YTNkNGJhMDBjMjQzYThmMA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-08-28T18:21:21Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-08-29T15:19:02Z"}, "message": "d: Convert convert_for_rvalue switch statement into if condition\n\ngcc/d/ChangeLog:\n\n\t* d-convert.cc (convert_for_rvalue): Convert switch statement into if\n\tcondition.", "tree": {"sha": "f049e0d05bc945f6caaaf3bd0a1fd8d056a05a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f049e0d05bc945f6caaaf3bd0a1fd8d056a05a40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce15a3e757c3a0adc611d907a3d4ba00c243a8f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce15a3e757c3a0adc611d907a3d4ba00c243a8f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce15a3e757c3a0adc611d907a3d4ba00c243a8f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce15a3e757c3a0adc611d907a3d4ba00c243a8f0/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1925e514b4abb0c393cd729dde7e63c2b302cea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1925e514b4abb0c393cd729dde7e63c2b302cea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1925e514b4abb0c393cd729dde7e63c2b302cea5"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "3b4790298a5ae78c747a31f05de510ce0dc84e3f", "filename": "gcc/d/d-convert.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce15a3e757c3a0adc611d907a3d4ba00c243a8f0/gcc%2Fd%2Fd-convert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce15a3e757c3a0adc611d907a3d4ba00c243a8f0/gcc%2Fd%2Fd-convert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-convert.cc?ref=ce15a3e757c3a0adc611d907a3d4ba00c243a8f0", "patch": "@@ -613,9 +613,8 @@ convert_for_rvalue (tree expr, Type *etype, Type *totype)\n   Type *ebtype = etype->toBasetype ();\n   Type *tbtype = totype->toBasetype ();\n \n-  switch (ebtype->ty)\n+  if (ebtype->ty == Tbool)\n     {\n-    case Tbool:\n       /* If casting from bool, the result is either 0 or 1, any other value\n \t violates @safe code, so enforce that it is never invalid.  */\n       if (CONSTANT_CLASS_P (expr))\n@@ -633,7 +632,6 @@ convert_for_rvalue (tree expr, Type *etype, Type *totype)\n \t}\n \n       result = convert (build_ctype (tbtype), result);\n-      break;\n     }\n \n   return result ? result : convert_expr (expr, etype, totype);"}]}