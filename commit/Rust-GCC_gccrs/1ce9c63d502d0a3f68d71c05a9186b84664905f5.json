{"sha": "1ce9c63d502d0a3f68d71c05a9186b84664905f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlOWM2M2Q1MDJkMGEzZjY4ZDcxYzA1YTkxODZiODQ2NjQ5MDVmNQ==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-11T15:50:34Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-11T15:50:34Z"}, "message": "[multiple changes]\n\n2004-03-11  Dalibor Topic  <robilad@kaffe.org>\n\n\t* java/text/AttributedString.java\n\t(addAttribute(AttributedCharacterIterator.Attribute,Object,int,int)):\n\tUse HashMap instead of Hashtable since value can be null, and\n\tyou can not store a null value in a Hashtable.\n\n2004-03-11  Guilhem Lavaux <guilhem@kaffe.org>\n\n\t* java/text/AttributedStringIterator.java\n\t(getAllAttributesKey): Return only keys concerned\n\tby the current iterator.\n\t(getAttributes): Use strict inequality for\n\tend_index.\n\nFrom-SVN: r79329", "tree": {"sha": "5ffe3337a96b462774d05d08e29a368e25801fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ffe3337a96b462774d05d08e29a368e25801fa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ce9c63d502d0a3f68d71c05a9186b84664905f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce9c63d502d0a3f68d71c05a9186b84664905f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce9c63d502d0a3f68d71c05a9186b84664905f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce9c63d502d0a3f68d71c05a9186b84664905f5/comments", "author": null, "committer": null, "parents": [{"sha": "c21a266bf28b4171bae0c953e2eb51b0012eb4f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21a266bf28b4171bae0c953e2eb51b0012eb4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21a266bf28b4171bae0c953e2eb51b0012eb4f6"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "2d741cf4468c87bf7c875b0e1d1dc9c851881cff", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce9c63d502d0a3f68d71c05a9186b84664905f5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce9c63d502d0a3f68d71c05a9186b84664905f5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1ce9c63d502d0a3f68d71c05a9186b84664905f5", "patch": "@@ -1,3 +1,18 @@\n+2004-03-11  Dalibor Topic  <robilad@kaffe.org>\n+\n+\t* java/text/AttributedString.java\n+\t(addAttribute(AttributedCharacterIterator.Attribute,Object,int,int)):\n+\tUse HashMap instead of Hashtable since value can be null, and\n+\tyou can not store a null value in a Hashtable.\n+\n+2004-03-11  Guilhem Lavaux <guilhem@kaffe.org>\n+\n+\t* java/text/AttributedStringIterator.java\n+\t(getAllAttributesKey): Return only keys concerned\n+\tby the current iterator.\n+\t(getAttributes): Use strict inequality for\n+\tend_index. \n+\n 2004-03-11  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/HttpURLConnection.java:"}, {"sha": "a8eede813fc83286021a7f1faa5305599c1d44fa", "filename": "libjava/java/text/AttributedString.java", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce9c63d502d0a3f68d71c05a9186b84664905f5/libjava%2Fjava%2Ftext%2FAttributedString.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce9c63d502d0a3f68d71c05a9186b84664905f5/libjava%2Fjava%2Ftext%2FAttributedString.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FAttributedString.java?ref=1ce9c63d502d0a3f68d71c05a9186b84664905f5", "patch": "@@ -1,5 +1,5 @@\n /* AttributedString.java -- Models text with attributes\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,6 +39,7 @@\n package java.text;\n \n import java.util.Iterator;\n+import java.util.HashMap;\n import java.util.Hashtable;\n import java.util.HashSet;\n import java.util.Map;\n@@ -329,7 +330,7 @@\n   * of the string.\n   *\n   * @param attrib The attribute to add.\n-  * @param value The value of the attribute.\n+  * @param value The value of the attribute, which may be null.\n   * @param begin_index The beginning index of the subrange.\n   * @param end_index The ending index of the subrange.\n   *\n@@ -342,10 +343,10 @@\n   if (attrib == null)\n     throw new IllegalArgumentException(\"null attribute\");\n \n-  Hashtable ht = new Hashtable();\n-  ht.put(attrib, value);\n+  HashMap hm = new HashMap();\n+  hm.put(attrib, value);\n \n-  addAttributes(ht, begin_index, end_index);\n+  addAttributes(hm, begin_index, end_index);\n }\n \n /*************************************************************************/"}, {"sha": "77c5981703d6ba99db35bdfa928312346c2de22c", "filename": "libjava/java/text/AttributedStringIterator.java", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce9c63d502d0a3f68d71c05a9186b84664905f5/libjava%2Fjava%2Ftext%2FAttributedStringIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce9c63d502d0a3f68d71c05a9186b84664905f5/libjava%2Fjava%2Ftext%2FAttributedStringIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FAttributedStringIterator.java?ref=1ce9c63d502d0a3f68d71c05a9186b84664905f5", "patch": "@@ -179,8 +179,12 @@ class AttributedStringIterator implements AttributedCharacterIterator\n   if (attribs == null)\n     return(s);\n \n-  for (int i = 0; i < attribs.length; i++)\n+    for (int i = 0; i < attribs.length; i++)\n     {\n+      if (attribs[i].begin_index > getEndIndex()\n+\t  || attribs[i].end_index <= getBeginIndex())\n+\tcontinue;\n+\n       Set key_set = attribs[i].attribs.keySet();\n       Iterator iter = key_set.iterator();\n       while (iter.hasNext())\n@@ -327,7 +331,7 @@ else if (!hit_beginning)\n           // Check for attribute match and range match\n           if (obj.equals(attrib))\n             if ((ci.getIndex() >= attribs[i].begin_index) &&\n-                (ci.getIndex() <= attribs[i].end_index))\n+                (ci.getIndex() < attribs[i].end_index))\n               return(attribs[i].attribs.get(obj));\n         }\n     }\n@@ -351,7 +355,7 @@ else if (!hit_beginning)\n   for (int i = 0; i < attribs.length; i++)\n     {\n        if ((ci.getIndex() >= attribs[i].begin_index) &&\n-           (ci.getIndex() <= attribs[i].end_index))\n+           (ci.getIndex() < attribs[i].end_index))\n          m.putAll(attribs[i].attribs);\n     }\n "}]}