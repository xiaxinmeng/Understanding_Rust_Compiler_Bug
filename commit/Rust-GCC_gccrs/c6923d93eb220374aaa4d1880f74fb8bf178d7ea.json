{"sha": "c6923d93eb220374aaa4d1880f74fb8bf178d7ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY5MjNkOTNlYjIyMDM3NGFhYTRkMTg4MGY3NGZiOGJmMTc4ZDdlYQ==", "commit": {"author": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-01-31T23:25:39Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-01-31T23:25:39Z"}, "message": "jvmti-int.h (JVMTI): Declare member \"enabled\".\n\n        * include/jvmti-int.h (JVMTI): Declare member \"enabled\".\n        * jvmti.cc (JVMTI): Add member \"enabled\".\n        (_Jv_GetJVMTIEnv): Mark JVMTI enabled.\n        * interpret.cc (_Jv_InterpMethod::ncode): Use JVMTI::enabled\n        instead of gnu::classpath::jdwp::Jdwp::isDebugging.\n        (_Jv_CompileMethod): If JVMTI is enabled, use run_debug\n        instead of run to compile the method.\n\n        * interpret-run.cc [DEBUG] (NEXT_INSN): Add JVMTI single step\n        notification.\n\nFrom-SVN: r121442", "tree": {"sha": "eb4277ca347ad0027cd2c3b4f8f751b457bc9b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb4277ca347ad0027cd2c3b4f8f751b457bc9b47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6923d93eb220374aaa4d1880f74fb8bf178d7ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6923d93eb220374aaa4d1880f74fb8bf178d7ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6923d93eb220374aaa4d1880f74fb8bf178d7ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6923d93eb220374aaa4d1880f74fb8bf178d7ea/comments", "author": null, "committer": null, "parents": [{"sha": "f6671c9376c836de05883c3520d25e8f35a0fa1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6671c9376c836de05883c3520d25e8f35a0fa1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6671c9376c836de05883c3520d25e8f35a0fa1f"}], "stats": {"total": 88, "additions": 70, "deletions": 18}, "files": [{"sha": "f868655734ae3d62065aaccc1e0e29a6d69b828f", "filename": "libjava/include/jvmti-int.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6923d93eb220374aaa4d1880f74fb8bf178d7ea/libjava%2Finclude%2Fjvmti-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6923d93eb220374aaa4d1880f74fb8bf178d7ea/libjava%2Finclude%2Fjvmti-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvmti-int.h?ref=c6923d93eb220374aaa4d1880f74fb8bf178d7ea", "patch": "@@ -37,6 +37,10 @@ executable file might be covered by the GNU General Public License. */\n    False means no JVMTI environment requested that event type. */\n namespace JVMTI\n {\n+  // Is JVMTI enabled? (i.e., any jvmtiEnv created?)\n+  extern bool enabled;\n+\n+  // Event notifications\n   extern bool VMInit;\n   extern bool VMDeath;\n   extern bool ThreadStart;"}, {"sha": "12d0b9a5683031f0f50db0d7bf700aefd3fe3ad2", "filename": "libjava/interpret-run.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6923d93eb220374aaa4d1880f74fb8bf178d7ea/libjava%2Finterpret-run.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6923d93eb220374aaa4d1880f74fb8bf178d7ea/libjava%2Finterpret-run.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret-run.cc?ref=c6923d93eb220374aaa4d1880f74fb8bf178d7ea", "patch": "@@ -248,7 +248,27 @@ details.  */\n \n #ifdef DIRECT_THREADED\n \n+#ifdef DEBUG\n+#undef NEXT_INSN\n+#define NEXT_INSN\t\t\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (JVMTI_REQUESTED_EVENT (SingleStep))\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  JNIEnv *env = _Jv_GetCurrentJNIEnv ();\t\t\t\\\n+\t  jmethodID method = meth->self;\t\t\t\t\\\n+\t  jlocation loc = meth->insn_index (pc);\t\t\t\\\n+\t  _Jv_JVMTI_PostEvent (JVMTI_EVENT_SINGLE_STEP, thread,\t\t\\\n+\t\t\t       env, method, loc);\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      goto *((pc++)->insn);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+#else\n+#undef NEXT_INSN\n #define NEXT_INSN goto *((pc++)->insn)\n+#endif\n+\n #define INTVAL() ((pc++)->int_val)\n #define AVAL() ((pc++)->datum)\n \n@@ -281,7 +301,22 @@ details.  */\n \n #else\n \n+#ifdef DEBUG\n+#define NEXT_INSN\t\t\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (JVMTI_REQUESTED_EVENT (SingleStep))\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  JNIEnv *env = _Jv_GetCurrentJNIEnv ();\t\t\t\\\n+\t  jmethodID method = meth->self;\t\t\t\t\\\n+\t  jlocation loc = meth->insn_index (pc);\t\t\t\\\n+\t  _Jv_JVMTI_PostEvent (JVMTI_EVENT_SINGLE_STEP, thread,\t\t\\\n+\t\t\t       env, method, loc);\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      goto *(insn_target[*pc++])\n+#else\n #define NEXT_INSN goto *(insn_target[*pc++])\n+#endif\n \n #define GET1S() get1s (pc++)\n #define GET2S() (pc += 2, get2s (pc- 2))"}, {"sha": "7e7d36d4e01c98b4534fe537de3c7ee5ee5109a8", "filename": "libjava/interpret.cc", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6923d93eb220374aaa4d1880f74fb8bf178d7ea/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6923d93eb220374aaa4d1880f74fb8bf178d7ea/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=c6923d93eb220374aaa4d1880f74fb8bf178d7ea", "patch": "@@ -1297,34 +1297,34 @@ _Jv_InterpMethod::ncode ()\n     {\n       if (staticp)\n         {\n-        if (::gnu::classpath::jdwp::Jdwp::isDebugging)\n-\t\t  fun = (ffi_closure_fun)&_Jv_InterpMethod::run_synch_class_debug;\n-\t\telse\n-\t\t  fun = (ffi_closure_fun)&_Jv_InterpMethod::run_synch_class;\n+\t  if (JVMTI::enabled)\n+\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_synch_class_debug;\n+\t  else\n+\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_synch_class;\n         }\n       else\n         {\n-\t      if (::gnu::classpath::jdwp::Jdwp::isDebugging)\n-\t\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_synch_object_debug;\n-\t\t  else\n-\t\t  \tfun = (ffi_closure_fun)&_Jv_InterpMethod::run_synch_object;\n-        } \n+\t  if (JVMTI::enabled)\n+\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_synch_object_debug;\n+\t  else\n+\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_synch_object;\n+        }\n     }\n   else\n     {\n       if (staticp)\n         {\n-\t      if (::gnu::classpath::jdwp::Jdwp::isDebugging)\n-\t\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_class_debug;\n-\t\t  else\n-\t\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_class;\n+\t  if (JVMTI::enabled)\n+\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_class_debug;\n+\t  else\n+\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_class;\n         }\n       else\n         {\n-\t      if (::gnu::classpath::jdwp::Jdwp::isDebugging)\n-\t\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_normal_debug;\n-\t\t  else\n-\t\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_normal;\n+\t  if (JVMTI::enabled)\n+\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_normal_debug;\n+\t  else\n+\t    fun = (ffi_closure_fun)&_Jv_InterpMethod::run_normal;\n         }\n     }\n \n@@ -1680,7 +1680,12 @@ void\n _Jv_CompileMethod (_Jv_InterpMethod* method)\n {\n   if (method->prepared == NULL)\n-    _Jv_InterpMethod::run (NULL, NULL, method);\n+    {\n+      if (JVMTI::enabled)\n+\t_Jv_InterpMethod::run_debug (NULL, NULL, method);\n+      else\n+      _Jv_InterpMethod::run (NULL, NULL, method);\n+    }\n }\n #endif // DIRECT_THREADED\n "}, {"sha": "2e32634b2020dcdea6f643fd3256116c9d06a5bd", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6923d93eb220374aaa4d1880f74fb8bf178d7ea/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6923d93eb220374aaa4d1880f74fb8bf178d7ea/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=c6923d93eb220374aaa4d1880f74fb8bf178d7ea", "patch": "@@ -44,6 +44,10 @@ static void check_enabled_event (jvmtiEvent);\n \n namespace JVMTI\n {\n+  // Is JVMTI enabled? (i.e., any jvmtiEnv created?)\n+  bool enabled;\n+\n+  // Event notifications\n   bool VMInit = false;\n   bool VMDeath = false;\n   bool ThreadStart = false;\n@@ -1754,6 +1758,10 @@ _Jv_GetJVMTIEnv (void)\n       }\n   }\n \n+  /* Mark JVMTI active. This is used to force the interpreter\n+     to use either debugging or non-debugging code. Once JVMTI\n+     has been enabled, the non-debug interpreter cannot be used. */\n+  JVMTI::enabled = true;\n   return env;\n }\n "}]}