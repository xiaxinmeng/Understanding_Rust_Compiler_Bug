{"sha": "dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQxYzFmOGNiNWU0ZjQwNWQyYjZmNjkzZWY0MmIzMmU0N2Y3MGI1Mg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-01-30T05:35:52Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-01-30T05:35:52Z"}, "message": "re PR target/64580 (very high rs6000_stack_info() usage during LTO Firefox build on ppc64)\n\n\tPR target/64580\n\t* config.rs6000/rs6000.c (compute_vrsave_mask): Reverse loop order.\n\t(rs6000_stack_info): Add assert.\n\t(rs6000_output_savres_externs): New function, split off from...\n\t(rs6000_output_function_prologue): ... here.  Do not call it for\n\tthunks.\n\nFrom-SVN: r220272", "tree": {"sha": "029d27375e3b76ebd01e9bf8dcf5f538dabc6a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/029d27375e3b76ebd01e9bf8dcf5f538dabc6a5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52/comments", "author": null, "committer": null, "parents": [{"sha": "2e29434de909a71522122f18fc66efd40c23ce8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e29434de909a71522122f18fc66efd40c23ce8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e29434de909a71522122f18fc66efd40c23ce8b"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "a44ff5b3d7b9ce6aba1acee89c3257b6c5ea2f0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52", "patch": "@@ -1,6 +1,15 @@\n+2015-01-29  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/64580\n+\t* config.rs6000/rs6000.c (compute_vrsave_mask): Reverse loop order.\n+\t(rs6000_stack_info): Add assert.\n+\t(rs6000_output_savres_externs): New function, split off from...\n+\t(rs6000_output_function_prologue): ... here.  Do not call it for\n+\tthunks.\n+\n 2015-01-29  Jeff Law  <law@redhat.com>\n \n-\tPR target/15184 \n+\tPR target/15184\n \t* combine.c (try_combine): If I0 is a memory load and I3 a store\n \tto a related address, increase the \"goodness\" of doing a 4-insn\n \tcombination with I0-I3."}, {"sha": "40facd926f1f98088034758b59cdf78f2a4f137d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dd1c1f8cb5e4f405d2b6f693ef42b32e47f70b52", "patch": "@@ -21145,7 +21145,7 @@ compute_vrsave_mask (void)\n      them in again.  More importantly, the mask we compute here is\n      used to generate CLOBBERs in the set_vrsave insn, and we do not\n      wish the argument registers to die.  */\n-  for (i = crtl->args.info.vregno - 1; i >= ALTIVEC_ARG_MIN_REG; --i)\n+  for (i = ALTIVEC_ARG_MIN_REG; i < (unsigned) crtl->args.info.vregno; i++)\n     mask &= ~ALTIVEC_REG_BIT (i);\n \n   /* Similarly, remove the return value from the set.  */\n@@ -21554,6 +21554,9 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n static rs6000_stack_t *\n rs6000_stack_info (void)\n {\n+  /* We should never be called for thunks, we are not set up for that.  */\n+  gcc_assert (!cfun->is_thunk);\n+\n   rs6000_stack_t *info_ptr = &stack_info;\n   int reg_size = TARGET_32BIT ? 4 : 8;\n   int ehrd_size;\n@@ -24275,11 +24278,10 @@ rs6000_emit_prologue (void)\n     }\n }\n \n-/* Write function prologue.  */\n+/* Output .extern statements for the save/restore routines we use.  */\n \n static void\n-rs6000_output_function_prologue (FILE *file,\n-\t\t\t\t HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+rs6000_output_savres_externs (FILE *file)\n {\n   rs6000_stack_t *info = rs6000_stack_info ();\n \n@@ -24311,6 +24313,16 @@ rs6000_output_function_prologue (FILE *file,\n \t  fprintf (file, \"\\t.extern %s\\n\", name);\n \t}\n     }\n+}\n+\n+/* Write function prologue.  */\n+\n+static void\n+rs6000_output_function_prologue (FILE *file,\n+\t\t\t\t HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+{\n+  if (!cfun->is_thunk)\n+    rs6000_output_savres_externs (file);\n \n   /* ELFv2 ABI r2 setup code and local entry point.  This must follow\n      immediately after the global entry point label.  */"}]}