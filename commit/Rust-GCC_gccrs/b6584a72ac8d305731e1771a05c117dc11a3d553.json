{"sha": "b6584a72ac8d305731e1771a05c117dc11a3d553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1ODRhNzJhYzhkMzA1NzMxZTE3NzFhMDVjMTE3ZGMxMWEzZDU1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-03-04T17:19:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-03-04T17:19:55Z"}, "message": "re PR libstdc++/64797 (22_locale/conversions/string/2.cc FAILs)\n\n\tPR libstdc++/64797\n\t* include/bits/locale_conv.h (wstring_convert::_M_conv): Handle\n\tincomplete multibyte sequences correctly.\n\t* include/std/codecvt (codecvt_utf8, codecvt_utf16,\n\tcodecvt_utf8_utf16): Limit _Maxcode to maximum Unicode code point.\n\t* src/c++11/codecvt.cc (invalid_mb_sequence, incomplete_mb_character):\n\tDefine constants.\n\t(is_high_surrogate, is_low_surrogate, surrogate_pair_to_code_point):\n\tDefine convenience functions.\n\t(read_utf8_code_point): Return relevant constant to distinguish\n\tincomplete characters from invalid sequences.\n\t(read_utf16_code_point): Likewise. Check for invalid sequences.\n\t(ucs4_in, utf16_in): Use incomplete_mb_character constant.\n\t(utf16_out): Check for invalid sequences.\n\t(utf16_span): Fix condition.\n\t(ucs2_out): Use is_high_surrogate.\n\t(ucs2_in): Use incomplete_mb_character constant and fix condition.\n\t* testsuite/22_locale/codecvt/char16_t.cc: Fix whitespace.\n\t* testsuite/22_locale/conversions/buffer/1.cc: New.\n\t* testsuite/22_locale/conversions/string/2.cc: Use char16_t and\n\tchar32_t instead of wchar_t.\n\t* testsuite/22_locale/conversions/string/3.cc: New.\n\nFrom-SVN: r221189", "tree": {"sha": "51d24fd829c29cb8633b241a2c12b9fdd9596f15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d24fd829c29cb8633b241a2c12b9fdd9596f15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6584a72ac8d305731e1771a05c117dc11a3d553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6584a72ac8d305731e1771a05c117dc11a3d553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6584a72ac8d305731e1771a05c117dc11a3d553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6584a72ac8d305731e1771a05c117dc11a3d553/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d50a26f2bad59ba73c52694190aac02e90423bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50a26f2bad59ba73c52694190aac02e90423bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50a26f2bad59ba73c52694190aac02e90423bbd"}], "stats": {"total": 326, "additions": 272, "deletions": 54}, "files": [{"sha": "16760dade1e73e72fc2b4c051a7da00eaa3ed226", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b6584a72ac8d305731e1771a05c117dc11a3d553", "patch": "@@ -1,3 +1,28 @@\n+2015-03-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/64797\n+\t* include/bits/locale_conv.h (wstring_convert::_M_conv): Handle\n+\tincomplete multibyte sequences correctly.\n+\t* include/std/codecvt (codecvt_utf8, codecvt_utf16,\n+\tcodecvt_utf8_utf16): Limit _Maxcode to maximum Unicode code point.\n+\t* src/c++11/codecvt.cc (invalid_mb_sequence, incomplete_mb_character):\n+\tDefine constants.\n+\t(is_high_surrogate, is_low_surrogate, surrogate_pair_to_code_point):\n+\tDefine convenience functions.\n+\t(read_utf8_code_point): Return relevant constant to distinguish\n+\tincomplete characters from invalid sequences.\n+\t(read_utf16_code_point): Likewise. Check for invalid sequences.\n+\t(ucs4_in, utf16_in): Use incomplete_mb_character constant.\n+\t(utf16_out): Check for invalid sequences.\n+\t(utf16_span): Fix condition.\n+\t(ucs2_out): Use is_high_surrogate.\n+\t(ucs2_in): Use incomplete_mb_character constant and fix condition.\n+\t* testsuite/22_locale/codecvt/char16_t.cc: Fix whitespace.\n+\t* testsuite/22_locale/conversions/buffer/1.cc: New.\n+\t* testsuite/22_locale/conversions/string/2.cc: Use char16_t and\n+\tchar32_t instead of wchar_t.\n+\t* testsuite/22_locale/conversions/string/3.cc: New.\n+\n 2015-03-03  Iain Sandoe  <iain@codesourcery.com>\n \n \tPR libstdc++/64883"}, {"sha": "b53754d154153e5683b0f506e448f8b13d5135ef", "filename": "libstdc++-v3/include/bits/locale_conv.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_conv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_conv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_conv.h?ref=b6584a72ac8d305731e1771a05c117dc11a3d553", "patch": "@@ -198,18 +198,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  auto __outstr = __err ? _OutStr(__err->get_allocator()) : _OutStr();\n \t  size_t __outchars = 0;\n \t  auto __next = __first;\n+\t  const auto __maxlen = _M_cvt->max_length();\n \n \t  codecvt_base::result __result;\n \t  do\n \t    {\n-\t      __outstr.resize(__outstr.size() + (__last - __next));\n+\t      __outstr.resize(__outstr.size() + (__last - __next) + __maxlen);\n \t      auto __outnext = &__outstr.front() + __outchars;\n \t      auto const __outlast = &__outstr.back() + 1;\n \t      __result = ((*_M_cvt).*__memfn)(_M_state, __next, __last, __next,\n \t\t\t\t\t    __outnext, __outlast, __outnext);\n \t      __outchars = __outnext - &__outstr.front();\n \t    }\n-\t  while (__result == codecvt_base::partial && __next != __last);\n+\t  while (__result == codecvt_base::partial && __next != __last\n+\t\t && (__outstr.size() - __outchars) < __maxlen);\n \n \t  __outstr.resize(__outchars);\n \t  _M_count = __next - __first;\n@@ -428,7 +430,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      return _M_put(__next, __pending);\n \n \t    if (!_M_put(__outbuf, __outnext - __outbuf))\n-\t\treturn false;\n+\t      return false;\n \t  }\n \twhile (__next != __last && __next != __start);\n "}, {"sha": "e4a7d5bbb60491b1c5900203eb33b56a0c10fbe3", "filename": "libstdc++-v3/include/std/codecvt", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcodecvt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcodecvt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcodecvt?ref=b6584a72ac8d305731e1771a05c117dc11a3d553", "patch": "@@ -148,7 +148,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public: \\\n       explicit \\\n       _NAME(size_t __refs = 0) \\\n-      : __ ## _NAME ## _base<_ELEM>(_Maxcode, _Mode, __refs) { } \\\n+      : __ ## _NAME ## _base<_ELEM>(std::min(_Maxcode, 0x10fffful), \\\n+\t\t\t\t    _Mode, __refs) \\\n+      { } \\\n     }\n \n   template<typename _Elem> class __codecvt_utf8_base;"}, {"sha": "83ee6e06831103957e546a7bc70341a2c610fe0a", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 73, "deletions": 40, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=b6584a72ac8d305731e1771a05c117dc11a3d553", "patch": "@@ -35,8 +35,14 @@ namespace\n {\n   // Largest code point that fits in a single UTF-16 code unit.\n   const char32_t max_single_utf16_unit = 0xFFFF;\n+\n   const char32_t max_code_point = 0x10FFFF;\n \n+  // The functions below rely on maxcode < incomplete_mb_character\n+  // (which is enforced by the codecvt_utf* classes on construction).\n+  const char32_t incomplete_mb_character = char32_t(-2);\n+  const char32_t invalid_mb_sequence = char32_t(-1);\n+\n   template<typename Elem>\n     struct range\n     {\n@@ -131,13 +137,13 @@ namespace\n \n   // Read a codepoint from a UTF-8 multibyte sequence.\n   // Updates from.next if the codepoint is not greater than maxcode.\n-  // Returns -1 if there is an invalid or incomplete multibyte character.\n+  // Returns invalid_mb_sequence, incomplete_mb_character or the code point.\n   char32_t\n   read_utf8_code_point(range<const char>& from, unsigned long maxcode)\n   {\n-    size_t avail = from.size();\n+    const size_t avail = from.size();\n     if (avail == 0)\n-      return -1;\n+      return incomplete_mb_character;\n     unsigned char c1 = from.next[0];\n     // https://en.wikipedia.org/wiki/UTF-8#Sample_code\n     if (c1 < 0x80)\n@@ -146,14 +152,14 @@ namespace\n       return c1;\n     }\n     else if (c1 < 0xC2) // continuation or overlong 2-byte sequence\n-      return -1;\n+      return invalid_mb_sequence;\n     else if (c1 < 0xE0) // 2-byte sequence\n     {\n       if (avail < 2)\n-\treturn -1;\n+\treturn incomplete_mb_character;\n       unsigned char c2 = from.next[1];\n       if ((c2 & 0xC0) != 0x80)\n-\treturn -1;\n+\treturn invalid_mb_sequence;\n       char32_t c = (c1 << 6) + c2 - 0x3080;\n       if (c <= maxcode)\n \tfrom.next += 2;\n@@ -162,15 +168,15 @@ namespace\n     else if (c1 < 0xF0) // 3-byte sequence\n     {\n       if (avail < 3)\n-\treturn -1;\n+\treturn incomplete_mb_character;\n       unsigned char c2 = from.next[1];\n       if ((c2 & 0xC0) != 0x80)\n-\treturn -1;\n+\treturn invalid_mb_sequence;\n       if (c1 == 0xE0 && c2 < 0xA0) // overlong\n-\treturn -1;\n+\treturn invalid_mb_sequence;\n       unsigned char c3 = from.next[2];\n       if ((c3 & 0xC0) != 0x80)\n-\treturn -1;\n+\treturn invalid_mb_sequence;\n       char32_t c = (c1 << 12) + (c2 << 6) + c3 - 0xE2080;\n       if (c <= maxcode)\n \tfrom.next += 3;\n@@ -179,27 +185,27 @@ namespace\n     else if (c1 < 0xF5) // 4-byte sequence\n     {\n       if (avail < 4)\n-\treturn -1;\n+\treturn incomplete_mb_character;\n       unsigned char c2 = from.next[1];\n       if ((c2 & 0xC0) != 0x80)\n-\treturn -1;\n+\treturn invalid_mb_sequence;\n       if (c1 == 0xF0 && c2 < 0x90) // overlong\n-\treturn -1;\n+\treturn invalid_mb_sequence;\n       if (c1 == 0xF4 && c2 >= 0x90) // > U+10FFFF\n-      return -1;\n+      return invalid_mb_sequence;\n       unsigned char c3 = from.next[2];\n       if ((c3 & 0xC0) != 0x80)\n-\treturn -1;\n+\treturn invalid_mb_sequence;\n       unsigned char c4 = from.next[3];\n       if ((c4 & 0xC0) != 0x80)\n-\treturn -1;\n+\treturn invalid_mb_sequence;\n       char32_t c = (c1 << 18) + (c2 << 12) + (c3 << 6) + c4 - 0x3C82080;\n       if (c <= maxcode)\n \tfrom.next += 4;\n       return c;\n     }\n     else // > U+10FFFF\n-      return -1;\n+      return invalid_mb_sequence;\n   }\n \n   bool\n@@ -250,27 +256,54 @@ namespace\n #endif\n   }\n \n+  // Return true if c is a high-surrogate (aka leading) code point.\n+  inline bool\n+  is_high_surrogate(char32_t c)\n+  {\n+    return c >= 0xD800 && c <= 0xDBFF;\n+  }\n+\n+  // Return true if c is a low-surrogate (aka trailing) code point.\n+  inline bool\n+  is_low_surrogate(char32_t c)\n+  {\n+    return c >= 0xDC00 && c <= 0xDFFF;\n+  }\n+\n+  inline char32_t\n+  surrogate_pair_to_code_point(char32_t high, char32_t low)\n+  {\n+    return (high << 10) + low - 0x35FDC00;\n+  }\n+\n   // Read a codepoint from a UTF-16 multibyte sequence.\n   // The sequence's endianness is indicated by (mode & little_endian).\n   // Updates from.next if the codepoint is not greater than maxcode.\n-  // Returns -1 if there is an incomplete multibyte character.\n+  // Returns invalid_mb_sequence, incomplete_mb_character or the code point.\n   char32_t\n   read_utf16_code_point(range<const char16_t>& from, unsigned long maxcode,\n \t\t\tcodecvt_mode mode)\n   {\n+    const size_t avail = from.size();\n+    if (avail == 0)\n+      return incomplete_mb_character;\n     int inc = 1;\n     char32_t c = adjust_byte_order(from.next[0], mode);\n-    if (c >= 0xD800 && c <= 0xDBFF)\n+    if (is_high_surrogate(c))\n       {\n-\tif (from.size() < 2)\n-\t  return -1;\n+\tif (avail < 2)\n+\t  return incomplete_mb_character;\n \tconst char16_t c2 = adjust_byte_order(from.next[1], mode);\n-\tif (c2 >= 0xDC00 && c2 <= 0xDFFF)\n+\tif (is_low_surrogate(c2))\n \t  {\n-\t    c = (c << 10) + c2 - 0x35FDC00;\n+\t    c = surrogate_pair_to_code_point(c, c2);\n \t    inc = 2;\n \t  }\n+\telse\n+\t  return invalid_mb_sequence;\n       }\n+    else if (is_low_surrogate(c))\n+      return invalid_mb_sequence;\n     if (c <= maxcode)\n       from.next += inc;\n     return c;\n@@ -314,8 +347,8 @@ namespace\n     while (from.size() && to.size())\n       {\n \tconst char32_t codepoint = read_utf8_code_point(from, maxcode);\n-\tif (codepoint == char32_t(-1))\n-\t  break;\n+\tif (codepoint == incomplete_mb_character)\n+\t  return codecvt_base::partial;\n \tif (codepoint > maxcode)\n \t  return codecvt_base::error;\n \t*to.next++ = codepoint;\n@@ -352,8 +385,8 @@ namespace\n     while (from.size() && to.size())\n       {\n \tconst char32_t codepoint = read_utf16_code_point(from, maxcode, mode);\n-\tif (codepoint == char32_t(-1))\n-\t  break;\n+\tif (codepoint == incomplete_mb_character)\n+\t  return codecvt_base::partial;\n \tif (codepoint > maxcode)\n \t  return codecvt_base::error;\n \t*to.next++ = codepoint;\n@@ -389,11 +422,9 @@ namespace\n     read_utf8_bom(from, mode);\n     while (from.size() && to.size())\n       {\n-\tconst char* first = from.next;\n-\tif ((unsigned char)*first >= 0xF0 && to.size() < 2)\n-\t  return codecvt_base::partial;\n+\tconst char* const first = from.next;\n \tconst char32_t codepoint = read_utf8_code_point(from, maxcode);\n-\tif (codepoint == char32_t(-1))\n+\tif (codepoint == incomplete_mb_character)\n \t  return codecvt_base::partial;\n \tif (codepoint > maxcode)\n \t  return codecvt_base::error;\n@@ -418,20 +449,22 @@ namespace\n       {\n \tchar32_t c = from.next[0];\n \tint inc = 1;\n-\tif (c >= 0xD800 && c <= 0xDBFF) // start of surrogate pair\n+\tif (is_high_surrogate(c))\n \t  {\n \t    if (from.size() < 2)\n \t      return codecvt_base::ok; // stop converting at this point\n \n \t    const char32_t c2 = from.next[1];\n-\t    if (c2 >= 0xDC00 && c2 <= 0xDFFF)\n+\t    if (is_low_surrogate(c2))\n \t      {\n+\t\tc = surrogate_pair_to_code_point(c, c2);\n \t\tinc = 2;\n-\t\tc = (c << 10) + c2 - 0x35FDC00;\n \t      }\n \t    else\n \t      return codecvt_base::error;\n \t  }\n+\telse if (is_low_surrogate(c))\n+\t  return codecvt_base::error;\n \tif (c > maxcode)\n \t  return codecvt_base::error;\n \tif (!write_utf8_code_point(to, c))\n@@ -452,8 +485,8 @@ namespace\n     while (count+1 < max)\n       {\n \tchar32_t c = read_utf8_code_point(from, maxcode);\n-\tif (c == char32_t(-1))\n-\t  break;\n+\tif (c > maxcode)\n+\t  return from.next;\n \telse if (c > max_single_utf16_unit)\n \t  ++count;\n \t++count;\n@@ -489,7 +522,7 @@ namespace\n     while (from.size() && to.size())\n       {\n \tchar16_t c = from.next[0];\n-\tif (c >= 0xD800 && c <= 0xDBFF) // start of surrogate pair\n+\tif (is_high_surrogate(c))\n \t  return codecvt_base::error;\n \tif (c > maxcode)\n \t  return codecvt_base::error;\n@@ -510,9 +543,9 @@ namespace\n     while (from.size() && to.size())\n       {\n \tconst char32_t c = read_utf16_code_point(from, maxcode, mode);\n-\tif (c == char32_t(-1))\n-\t  break;\n-\tif (c >= maxcode)\n+\tif (c == incomplete_mb_character)\n+\t  return codecvt_base::partial;\n+\tif (c > maxcode)\n \t  return codecvt_base::error;\n \t*to.next++ = c;\n       }"}, {"sha": "a21a8385629fec110b06eb6d181d56ed82a32066", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/char16_t.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc?ref=b6584a72ac8d305731e1771a05c117dc11a3d553", "patch": "@@ -79,8 +79,7 @@ test01()\n \n     codecvt_c16::state_type state01;\n     state01 = {};\n-    codecvt_base::result res = cvt->out(state01, u16dat, u16dat_end,\n-from_next,\n+    codecvt_base::result res = cvt->out(state01, u16dat, u16dat_end, from_next,\n                                         buffer, buffer_end, to_next);\n \n     VERIFY(res == codecvt_base::ok);"}, {"sha": "f008f5a1111a59d20aa2503e503cf76abcfa1ce8", "filename": "libstdc++-v3/testsuite/22_locale/conversions/buffer/1.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fbuffer%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fbuffer%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fbuffer%2F1.cc?ref=b6584a72ac8d305731e1771a05c117dc11a3d553", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.3.3.2.3  Buffer conversions\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+template<typename Elem>\n+struct cvt : std::codecvt<Elem, char, std::mbstate_t> { };\n+\n+template<typename Elem>\n+using buf_conv = std::wbuffer_convert<cvt<Elem>, Elem>;\n+\n+using std::string;\n+using std::stringstream;\n+using std::wstring;\n+using std::wstringstream;\n+\n+void test01()\n+{\n+  buf_conv<wchar_t> buf;\n+  std::stringbuf sbuf;\n+  VERIFY( buf.rdbuf() == nullptr );\n+  VERIFY( buf.rdbuf(&sbuf) == nullptr );\n+  VERIFY( buf.rdbuf() == &sbuf );\n+  VERIFY( buf.rdbuf(nullptr) == &sbuf );\n+}\n+\n+void test02()\n+{\n+  std::stringbuf sbuf;\n+  buf_conv<char> buf(&sbuf);  // noconv\n+\n+  stringstream ss;\n+  ss.std::ios::rdbuf(&buf);\n+  string input = \"King for a day...\";\n+  ss << input << std::flush;\n+  string output = sbuf.str();\n+  VERIFY( input == output );\n+}\n+\n+void test03()\n+{\n+  std::stringbuf sbuf;\n+  buf_conv<wchar_t> buf(&sbuf);\n+\n+  wstringstream ss;\n+  ss.std::wios::rdbuf(&buf);\n+  wstring input = L\"Fool for a lifetime\";\n+  ss << input << std::flush;\n+  string output = sbuf.str();\n+  VERIFY( output == \"Fool for a lifetime\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "07d2b520e978cab7b75bf50564ee4a8a08e603c1", "filename": "libstdc++-v3/testsuite/22_locale/conversions/string/2.cc", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F2.cc?ref=b6584a72ac8d305731e1771a05c117dc11a3d553", "patch": "@@ -30,31 +30,49 @@ template<typename Elem>\n using str_conv = std::wstring_convert<cvt<Elem>, Elem>;\n \n using std::string;\n-using std::wstring;\n+using std::u16string;\n+using std::u32string;\n \n // test conversion errors, with and without error strings\n \n void test01()\n {\n-  typedef str_conv<wchar_t> sc;\n+  typedef str_conv<char16_t> sc;\n \n   const sc::byte_string berr = \"invalid wide string\";\n-  const sc::wide_string werr = L\"invalid byte string\";\n+  const sc::wide_string werr = u\"invalid byte string\";\n \n   sc c(berr, werr);\n   string input = \"Stop\";\n+  input += char(0xFF);\n+  u16string woutput = c.from_bytes(input);\n+  VERIFY( werr == woutput );\n+  u16string winput = u\"Stop\";\n+  winput += char16_t(0xDC00);\n+  string output = c.to_bytes(winput);\n+  VERIFY( berr == output );\n+}\n+\n+void test02()\n+{\n+  typedef str_conv<char32_t> sc;\n+\n+  const sc::byte_string berr = \"invalid wide string\";\n+  const sc::wide_string werr = U\"invalid byte string\";\n+\n+  sc c(berr, werr);\n+  string input = \"Halt\";\n   input += char(0xff);\n-  input += char(0xff);\n-  wstring woutput = c.from_bytes(input);\n+  u32string woutput = c.from_bytes(input);\n   VERIFY( werr == woutput );\n-  wstring winput = L\"Stop\";\n-  winput += wchar_t(0xff);\n-  winput += wchar_t(0xff);\n+  u32string winput = U\"Halt\";\n+  winput += char32_t(-1);\n   string output = c.to_bytes(winput);\n   VERIFY( berr == output );\n }\n \n int main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "7c4ac207cd86983510d073f57d4258c562c6fd10", "filename": "libstdc++-v3/testsuite/22_locale/conversions/string/3.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6584a72ac8d305731e1771a05c117dc11a3d553/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F3.cc?ref=b6584a72ac8d305731e1771a05c117dc11a3d553", "patch": "@@ -0,0 +1,61 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.3.3.2.2  String conversions\n+\n+#include <locale>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+template<typename Elem>\n+struct cvt : std::codecvt<Elem, char, std::mbstate_t> { };\n+\n+template<typename Elem>\n+using str_conv = std::wstring_convert<cvt<Elem>, Elem>;\n+\n+using std::string;\n+using std::u32string;\n+\n+// test construction with state, for partial conversions\n+\n+void test01()\n+{\n+  typedef str_conv<char32_t> wsc;\n+\n+  wsc c;\n+  string input = u8\"\\u00a3 shillings pence\";\n+  u32string woutput = c.from_bytes(input.substr(0, 1));\n+  auto partial_state = c.state();\n+  auto partial_count = c.converted();\n+\n+  auto woutput2 = c.from_bytes(\"state reset on next conversion\");\n+  VERIFY( woutput2 == U\"state reset on next conversion\" );\n+\n+  wsc c2(new cvt<char32_t>, partial_state);\n+  woutput += c2.from_bytes(input.substr(partial_count));\n+  VERIFY( U\"\\u00a3 shillings pence\" == woutput );\n+\n+  string roundtrip = c2.to_bytes(woutput);\n+  VERIFY( input == roundtrip );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}