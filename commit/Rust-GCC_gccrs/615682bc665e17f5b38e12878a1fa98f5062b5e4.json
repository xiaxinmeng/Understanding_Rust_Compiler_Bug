{"sha": "615682bc665e17f5b38e12878a1fa98f5062b5e4", "node_id": "C_kwDOANBUbNoAKDYxNTY4MmJjNjY1ZTE3ZjViMzhlMTI4NzhhMWZhOThmNTA2MmI1ZTQ", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2022-05-17T12:22:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-02T09:06:42Z"}, "message": "[Ada] Refine previous changes on making symbols public/private\n\nInline_Always procedures should be kept public for proper inter unit\ninlining.\n\ngcc/ada/\n\n\t* sem_ch7.adb (Set_Referencer_Of_Non_Subprograms): New local\n\tprocedure, used for code refactoring. Also take into account\n\tInline_Always pragma when deciding to make a symbol public for\n\tC generation.", "tree": {"sha": "89d1f895502a56236054c7021b4c69b08552f363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89d1f895502a56236054c7021b4c69b08552f363"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/615682bc665e17f5b38e12878a1fa98f5062b5e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/615682bc665e17f5b38e12878a1fa98f5062b5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/615682bc665e17f5b38e12878a1fa98f5062b5e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/615682bc665e17f5b38e12878a1fa98f5062b5e4/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017f48682c2498b4cde79cf6a1c2e09b6ad51e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017f48682c2498b4cde79cf6a1c2e09b6ad51e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017f48682c2498b4cde79cf6a1c2e09b6ad51e02"}], "stats": {"total": 85, "additions": 44, "deletions": 41}, "files": [{"sha": "31c04ad077da07f8c79b22f829a59482080fc6ab", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 44, "deletions": 41, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/615682bc665e17f5b38e12878a1fa98f5062b5e4/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/615682bc665e17f5b38e12878a1fa98f5062b5e4/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=615682bc665e17f5b38e12878a1fa98f5062b5e4", "patch": "@@ -304,6 +304,46 @@ package body Sem_Ch7 is\n             Decl_Id     : Entity_Id;\n             In_Instance : Boolean;\n             Spec        : Node_Id;\n+            Ignore      : Boolean;\n+\n+            function Set_Referencer_Of_Non_Subprograms return Boolean;\n+            --  Set Has_Referencer_Of_Non_Subprograms and call\n+            --  Scan_Subprogram_Refs if relevant.\n+            --  Return whether Scan_Subprogram_Refs was called.\n+\n+            ---------------------------------------\n+            -- Set_Referencer_Of_Non_Subprograms --\n+            ---------------------------------------\n+\n+            function Set_Referencer_Of_Non_Subprograms return Boolean is\n+            begin\n+               --  An inlined subprogram body acts as a referencer\n+               --  unless we generate C code since inlining is then\n+               --  handled by the C compiler.\n+\n+               --  Note that we test Has_Pragma_Inline here in addition\n+               --  to Is_Inlined. We are doing this for a client, since\n+               --  we are computing which entities should be public, and\n+               --  it is the client who will decide if actual inlining\n+               --  should occur, so we need to catch all cases where the\n+               --  subprogram may be inlined by the client.\n+\n+               if (not CCG_Mode or else Has_Pragma_Inline_Always (Decl_Id))\n+                 and then (Is_Inlined (Decl_Id)\n+                            or else Has_Pragma_Inline (Decl_Id))\n+               then\n+                  Has_Referencer_Of_Non_Subprograms := True;\n+\n+                  --  Inspect the statements of the subprogram body\n+                  --  to determine whether the body references other\n+                  --  subprograms.\n+\n+                  Scan_Subprogram_Refs (Decl);\n+                  return True;\n+               else\n+                  return False;\n+               end if;\n+            end Set_Referencer_Of_Non_Subprograms;\n \n          begin\n             if No (Decls) then\n@@ -398,54 +438,17 @@ package body Sem_Ch7 is\n                         return True;\n                      end if;\n \n-                     --  An inlined subprogram body acts as a referencer\n-                     --  unless we generate C code since inlining is then\n-                     --  handled by the C compiler.\n-\n-                     --  Note that we test Has_Pragma_Inline here in addition\n-                     --  to Is_Inlined. We are doing this for a client, since\n-                     --  we are computing which entities should be public, and\n-                     --  it is the client who will decide if actual inlining\n-                     --  should occur, so we need to catch all cases where the\n-                     --  subprogram may be inlined by the client.\n-\n-                     if not CCG_Mode\n-                       and then (Is_Inlined (Decl_Id)\n-                                  or else Has_Pragma_Inline (Decl_Id))\n-                     then\n-                        Has_Referencer_Of_Non_Subprograms := True;\n-\n-                        --  Inspect the statements of the subprogram body\n-                        --  to determine whether the body references other\n-                        --  subprograms.\n-\n-                        Scan_Subprogram_Refs (Decl);\n-                     end if;\n+                     Ignore := Set_Referencer_Of_Non_Subprograms;\n \n                   --  Otherwise this is a stand alone subprogram body\n \n                   else\n                      Decl_Id := Defining_Entity (Decl);\n \n-                     --  An inlined subprogram body acts as a referencer\n-                     --  unless we generate C code since inlining is then\n-                     --  handled by the C compiler.\n-\n-                     if not CCG_Mode\n-                       and then (Is_Inlined (Decl_Id)\n-                                  or else Has_Pragma_Inline (Decl_Id))\n+                     if not Set_Referencer_Of_Non_Subprograms\n+                       and then not Subprogram_Table.Get (Decl_Id)\n                      then\n-                        Has_Referencer_Of_Non_Subprograms := True;\n-\n-                        --  Inspect the statements of the subprogram body\n-                        --  to determine whether the body references other\n-                        --  subprograms.\n-\n-                        Scan_Subprogram_Refs (Decl);\n-\n-                     --  Otherwise we can reset Is_Public right away\n-\n-                     elsif not Subprogram_Table.Get (Decl_Id) then\n+                        --  We can reset Is_Public right away\n                         Set_Is_Public (Decl_Id, False);\n                      end if;\n                   end if;"}]}