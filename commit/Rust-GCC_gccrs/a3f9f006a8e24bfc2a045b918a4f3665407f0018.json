{"sha": "a3f9f006a8e24bfc2a045b918a4f3665407f0018", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmOWYwMDZhOGUyNGJmYzJhMDQ1YjkxOGE0ZjM2NjU0MDdmMDAxOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-03-11T13:58:44Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-03-11T13:58:44Z"}, "message": "Wrap option names in gcc internal messages with %< and %>.\n\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* check-internal-format-escaping.py: New file.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* builtins.c (expand_builtin_thread_pointer): Wrap an option name\n\tin a string format message and fix GNU coding style.\n\t(expand_builtin_set_thread_pointer): Likewise.\n\t* common/config/aarch64/aarch64-common.c (aarch64_rewrite_selected_cpu): Likewise.\n\t* common/config/alpha/alpha-common.c (alpha_handle_option): Likewise.\n\t* common/config/arc/arc-common.c (arc_handle_option): Likewise.\n\t* common/config/arm/arm-common.c (arm_parse_fpu_option): Likewise.\n\t* common/config/bfin/bfin-common.c (bfin_handle_option): Likewise.\n\t* common/config/i386/i386-common.c (ix86_handle_option): Likewise.\n\t* common/config/ia64/ia64-common.c (ia64_handle_option): Likewise.\n\t* common/config/m68k/m68k-common.c (m68k_handle_option): Likewise.\n\t* common/config/msp430/msp430-common.c (msp430_handle_option): Likewise.\n\t* common/config/nds32/nds32-common.c (nds32_handle_option): Likewise.\n\t* common/config/powerpcspe/powerpcspe-common.c (rs6000_handle_option): Likewise.\n\t* common/config/riscv/riscv-common.c (riscv_subset_list::parsing_subset_version): Likewise.\n\t(riscv_subset_list::parse_std_ext): Likewise.\n\t(riscv_subset_list::parse_sv_or_non_std_ext): Likewise.\n\t(riscv_subset_list::parse): Likewise.\n\t* common/config/rs6000/rs6000-common.c (rs6000_handle_option): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_parse_one_option_token): Likewise.\n\t(aarch64_override_options_internal): Likewise.\n\t(aarch64_validate_mcpu): Likewise.\n\t(aarch64_validate_march): Likewise.\n\t(aarch64_validate_mtune): Likewise.\n\t(aarch64_override_options): Likewise.\n\t* config/alpha/alpha.c (alpha_option_override): Likewise.\n\t* config/arc/arc.c (arc_init): Likewise.\n\t(parse_mrgf_banked_regs_option): Likewise.\n\t(arc_override_options): Likewise.\n\t(arc_expand_builtin_aligned): Likewise.\n\t* config/arm/arm-builtins.c (arm_expand_neon_builtin): Likewise.\n\t(arm_expand_builtin): Likewise.\n\t* config/arm/arm.c (arm_option_check_internal): Likewise.\n\t(arm_configure_build_target): Likewise.\n\t(arm_option_override): Likewise.\n\t(arm_options_perform_arch_sanity_checks): Likewise.\n\t(arm_handle_cmse_nonsecure_entry): Likewise.\n\t(arm_handle_cmse_nonsecure_call): Likewise.\n\t(arm_tls_referenced_p): Likewise.\n\t(thumb1_expand_prologue): Likewise.\n\t* config/avr/avr.c (avr_option_override): Likewise.\n\t* config/bfin/bfin.c (bfin_option_override): Likewise.\n\t* config/c6x/c6x.c (c6x_option_override): Likewise.\n\t* config/cr16/cr16.c (cr16_override_options): Likewise.\n\t* config/cris/cris.c (cris_option_override): Likewise.\n\t* config/csky/csky.c (csky_handle_isr_attribute): Likewise.\n\t* config/darwin-c.c (macosx_version_as_macro): Likewise.\n\t* config/darwin.c (darwin_override_options): Likewise.\n\t* config/frv/frv.c (frv_expand_builtin): Likewise.\n\t* config/h8300/h8300.c (h8300_option_override): Likewise.\n\t* config/i386/i386.c (parse_mtune_ctrl_str): Likewise.\n\t(ix86_option_override_internal): Likewise.\n\t(warn_once_call_ms2sysv_xlogues): Likewise.\n\t(ix86_expand_prologue): Likewise.\n\t(split_stack_prologue_scratch_regno): Likewise.\n\t(ix86_warn_parameter_passing_abi): Likewise.\n\t* config/ia64/ia64.c (fix_range): Likewise.\n\t* config/m68k/m68k.c (m68k_option_override): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_option_override): Likewise.\n\t* config/mips/mips.c (mips_emit_probe_stack_range): Likewise.\n\t(mips_set_compression_mode): Likewise.\n\t* config/mmix/mmix.c (mmix_option_override): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_option_override): Likewise.\n\t* config/msp430/msp430.c (msp430_option_override): Likewise.\n\t* config/nds32/nds32.c (nds32_option_override): Likewise.\n\t* config/nios2/nios2.c (nios2_custom_check_insns): Likewise.\n\t(nios2_option_override): Likewise.\n\t(nios2_expand_custom_builtin): Likewise.\n\t* config/nvptx/mkoffload.c (main): Likewise.\n\t* config/nvptx/nvptx.c (diagnose_openacc_conflict): Likewise.\n\t* config/pa/pa.c (fix_range): Likewise.\n\t(pa_option_override): Likewise.\n\t* config/riscv/riscv.c (riscv_parse_cpu): Likewise.\n\t(riscv_option_override): Likewise.\n\t* config/rl78/rl78.c (rl78_option_override): Likewise.\n\t* config/rs6000/aix61.h: Likewise.\n\t* config/rs6000/aix71.h: Likewise.\n\t* config/rs6000/aix72.h: Likewise.\n\t* config/rs6000/driver-rs6000.c (elf_platform): Likewise.\n\t* config/rs6000/freebsd64.h: Likewise.\n\t* config/rs6000/linux64.h: Likewise.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Likewise.\n\t(rs6000_expand_zeroop_builtin): Likewise.\n\t(rs6000_expand_mtfsb_builtin): Likewise.\n\t(rs6000_expand_set_fpscr_rn_builtin): Likewise.\n\t(rs6000_expand_set_fpscr_drn_builtin): Likewise.\n\t(rs6000_invalid_builtin): Likewise.\n\t(rs6000_expand_split_stack_prologue): Likewise.\n\t* config/rs6000/rtems.h: Likewise.\n\t* config/rx/rx.c (valid_psw_flag): Likewise.\n\t(rx_expand_builtin): Likewise.\n\t* config/s390/s390-c.c (s390_resolve_overloaded_builtin): Likewise.\n\t* config/s390/s390.c (s390_expand_builtin): Likewise.\n\t(s390_function_profiler): Likewise.\n\t(s390_option_override_internal): Likewise.\n\t(s390_option_override): Likewise.\n\t* config/sh/sh.c (sh_option_override): Likewise.\n\t(sh_builtin_saveregs): Likewise.\n\t(sh_fix_range): Likewise.\n\t* config/sh/vxworks.h: Likewise.\n\t* config/sparc/sparc.c (sparc_option_override): Likewise.\n\t* config/spu/spu.c (spu_option_override): Likewise.\n\t(fix_range): Likewise.\n\t* config/visium/visium.c (visium_option_override): Likewise.\n\t(visium_handle_interrupt_attr): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_option_override): Likewise.\n\t* dbgcnt.c (dbg_cnt_set_limit_by_name): Likewise.\n\t(dbg_cnt_process_opt): Likewise.\n\t* dwarf2out.c (output_dwarf_version): Likewise.\n\t* except.c (expand_eh_return): Likewise.\n\t* gcc.c (defined): Likewise.\n\t(driver_handle_option): Likewise.\n\t(process_command): Likewise.\n\t(compare_files): Likewise.\n\t(driver::prepare_infiles): Likewise.\n\t(driver::do_spec_on_infiles): Likewise.\n\t(driver::maybe_run_linker): Likewise.\n\t* omp-offload.c (oacc_parse_default_dims): Likewise.\n\t* opts-global.c (handle_common_deferred_options): Likewise.\n\t* opts.c (parse_sanitizer_options): Likewise.\n\t(common_handle_option): Likewise.\n\t(enable_warning_as_error): Likewise.\n\t* passes.c (enable_disable_pass): Likewise.\n\t* plugin.c (parse_plugin_arg_opt): Likewise.\n\t(default_plugin_dir_name): Likewise.\n\t* targhooks.c (default_expand_builtin_saveregs): Likewise.\n\t(default_pch_valid_p): Likewise.\n\t* toplev.c (init_asm_output): Likewise.\n\t(process_options): Likewise.\n\t(toplev::run_self_tests): Likewise.\n\t* tree-cfg.c (verify_gimple_call): Likewise.\n\t* tree-inline.c (inline_forbidden_p_stmt): Likewise.\n\t(tree_inlinable_function_p): Likewise.\n\t* var-tracking.c (vt_find_locations): Likewise.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* gcc-interface/misc.c (gnat_post_options) Wrap an option name\n\tin a string format message and fix GNU coding style.:\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* c-attribs.c (handle_nocf_check_attribute): Wrap an option name\n\tin a string format message and fix GNU coding style.\n\t* c-common.c (vector_types_convertible_p): Likewise.\n\t(c_build_vec_perm_expr): Likewise.\n\t* c-indentation.c (get_visual_column): Likewise.\n\t* c-opts.c (c_common_handle_option): Likewise.\n\t(c_common_post_options): Likewise.\n\t(sanitize_cpp_opts): Likewise.\n\t* c-pch.c (c_common_pch_pragma): Likewise.\n\t* c-pragma.c (handle_pragma_pack): Likewise.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* c-decl.c (check_for_loop_decls): Wrap an option name\n\tin a string format message and fix GNU coding style.\n\t* c-parser.c (c_parser_declspecs): Likewise.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* call.c (convert_arg_to_ellipsis): Wrap an option name\n\tin a string format message and fix GNU coding style.\n\t(build_over_call): Likewise.\n\t* class.c (check_field_decl): Likewise.\n\t(layout_nonempty_base_or_field): Likewise.\n\t* constexpr.c (cxx_eval_loop_expr): Likewise.\n\t* cvt.c (type_promotes_to): Likewise.\n\t* decl.c (cxx_init_decl_processing): Likewise.\n\t(mark_inline_variable): Likewise.\n\t(grokdeclarator): Likewise.\n\t* decl2.c (record_mangling): Likewise.\n\t* error.c (maybe_warn_cpp0x): Likewise.\n\t* except.c (doing_eh): Likewise.\n\t* mangle.c (maybe_check_abi_tags): Likewise.\n\t* parser.c (cp_parser_diagnose_invalid_type_name): Likewise.\n\t(cp_parser_userdef_numeric_literal): Likewise.\n\t(cp_parser_primary_expression): Likewise.\n\t(cp_parser_unqualified_id): Likewise.\n\t(cp_parser_pseudo_destructor_name): Likewise.\n\t(cp_parser_builtin_offsetof): Likewise.\n\t(cp_parser_lambda_expression): Likewise.\n\t(cp_parser_lambda_introducer): Likewise.\n\t(cp_parser_lambda_declarator_opt): Likewise.\n\t(cp_parser_selection_statement): Likewise.\n\t(cp_parser_init_statement): Likewise.\n\t(cp_parser_decomposition_declaration): Likewise.\n\t(cp_parser_function_specifier_opt): Likewise.\n\t(cp_parser_static_assert): Likewise.\n\t(cp_parser_simple_type_specifier): Likewise.\n\t(cp_parser_namespace_definition): Likewise.\n\t(cp_parser_using_declaration): Likewise.\n\t(cp_parser_ctor_initializer_opt_and_function_body): Likewise.\n\t(cp_parser_initializer_list): Likewise.\n\t(cp_parser_type_parameter_key): Likewise.\n\t(cp_parser_member_declaration): Likewise.\n\t(cp_parser_try_block): Likewise.\n\t(cp_parser_std_attribute_spec): Likewise.\n\t(cp_parser_requires_clause_opt): Likewise.\n\t* pt.c (check_template_variable): Likewise.\n\t(check_default_tmpl_args): Likewise.\n\t(push_tinst_level_loc): Likewise.\n\t(instantiate_pending_templates): Likewise.\n\t(invalid_nontype_parm_type_p): Likewise.\n\t* repo.c (get_base_filename): Likewise.\n\t* rtti.c (typeid_ok_p): Likewise.\n\t(build_dynamic_cast_1): Likewise.\n\t* tree.c (maybe_warn_parm_abi): Likewise.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* decl.c (match_record_decl): Wrap an option name\n\tin a string format message and fix GNU coding style.\n\t(gfc_match_pointer): Likewise.\n\t* expr.c (find_array_section): Likewise.\n\t* intrinsic.c (gfc_is_intrinsic): Likewise.\n\t* options.c (gfc_post_options): Likewise.\n\t* primary.c (match_integer_constant): Likewise.\n\t* trans-common.c (translate_common): Likewise.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* lto-lang.c (lto_post_options): Wrap an option name\n\tin a string format message and fix GNU coding style.\n\t* lto-symtab.c (lto_symtab_merge_decls_2): Likewise.\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* g++.dg/conversion/simd3.C (foo): Wrap option names\n\twith apostrophe character.\n\t* g++.dg/cpp1z/decomp3.C (test): Likewise.\n\t(test3): Likewise.\n\t* g++.dg/cpp1z/decomp4.C (test): Likewise.\n\t* g++.dg/cpp1z/decomp44.C (foo): Likewise.\n\t* g++.dg/cpp1z/decomp45.C (f): Likewise.\n\t* g++.dg/opt/pr34036.C: Likewise.\n\t* g++.dg/spellcheck-c++-11-keyword.C: Likewise.\n\t* gcc.dg/c90-fordecl-1.c (foo): Likewise.\n\t* gcc.dg/cpp/dir-only-4.c: Likewise.\n\t* gcc.dg/cpp/dir-only-5.c: Likewise.\n\t* gcc.dg/cpp/pr71591.c: Likewise.\n\t* gcc.dg/format/opt-1.c: Likewise.\n\t* gcc.dg/format/opt-2.c: Likewise.\n\t* gcc.dg/format/opt-3.c: Likewise.\n\t* gcc.dg/format/opt-4.c: Likewise.\n\t* gcc.dg/format/opt-5.c: Likewise.\n\t* gcc.dg/format/opt-6.c: Likewise.\n\t* gcc.dg/pr22231.c: Likewise.\n\t* gcc.dg/pr33007.c: Likewise.\n\t* gcc.dg/simd-1.c (hanneke): Likewise.\n\t* gcc.dg/simd-5.c: Likewise.\n\t* gcc.dg/simd-6.c: Likewise.\n\t* gcc.dg/spellcheck-options-14.c: Likewise.\n\t* gcc.dg/spellcheck-options-15.c: Likewise.\n\t* gcc.dg/spellcheck-options-16.c: Likewise.\n\t* gcc.dg/spellcheck-options-17.c: Likewise.\n\t* gcc.dg/tree-ssa/pr23109.c: Likewise.\n\t* gcc.dg/tree-ssa/recip-5.c: Likewise.\n\t* gcc.target/i386/cet-notrack-1a.c (func): Likewise.\n\t(__attribute__): Likewise.\n\t* gcc.target/i386/cet-notrack-icf-1.c (fn3): Likewise.\n\t* gcc.target/i386/cet-notrack-icf-3.c (__attribute__): Likewise.\n\t* gcc.target/powerpc/warn-1.c: Likewise.\n\t* gcc.target/powerpc/warn-2.c: Likewise.\n\nFrom-SVN: r269586", "tree": {"sha": "0681cfed14dcbfd9b59a61ace8c6b34b885c20fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0681cfed14dcbfd9b59a61ace8c6b34b885c20fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3f9f006a8e24bfc2a045b918a4f3665407f0018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f9f006a8e24bfc2a045b918a4f3665407f0018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f9f006a8e24bfc2a045b918a4f3665407f0018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f9f006a8e24bfc2a045b918a4f3665407f0018/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "355d4eb36aeb970743537e2f9b98d4c53c9e0eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355d4eb36aeb970743537e2f9b98d4c53c9e0eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355d4eb36aeb970743537e2f9b98d4c53c9e0eab"}], "stats": {"total": 1509, "additions": 951, "deletions": 558}, "files": [{"sha": "cd5a983ee7d478c921f1aa1547a34c8308794f60", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,7 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* check-internal-format-escaping.py: New file.\n+\n 2019-03-10  Tommy Nguyen  <remyabel@gmail.com>\n \n \tPR contrib/82704"}, {"sha": "5513b762271f9214a809a3bfcd52696a9dbacfee", "filename": "contrib/check-internal-format-escaping.py", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/contrib%2Fcheck-internal-format-escaping.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/contrib%2Fcheck-internal-format-escaping.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fcheck-internal-format-escaping.py?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -0,0 +1,64 @@\n+#!/usr/bin/env python3\n+#\n+# Check gcc.pot file for gcc-internal-format and print all strings\n+# that contain an option that is not wrapped by %<-option_name%>.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.  */\n+#\n+#\n+#\n+\n+import argparse\n+import re\n+\n+parser = argparse.ArgumentParser(description='')\n+parser.add_argument('file', help = 'pot file')\n+\n+args = parser.parse_args()\n+\n+origin = None\n+internal = False\n+\n+lines = open(args.file).readlines()\n+for i, l in enumerate(lines):\n+    l = l.strip()\n+    s = 'msgid '\n+    if l.startswith('#: '):\n+        origin = l\n+    elif '#, gcc-internal-format' in l:\n+        internal = True\n+    if l.startswith(s) and origin and internal:\n+        j = 0\n+        while not lines[i + j].startswith('msgstr'):\n+            l = lines[i + j]\n+            if l.startswith(s):\n+                l = l[len(s):]\n+            text = l.strip('\"').strip()\n+            if text:\n+                parts = text.split(' ')\n+                for p in parts:\n+                    if p.startswith('-'):\n+                        if len(p) >= 2 and (p[1].isalpha() and p != '-INF'):\n+                            print('%s: %s' % (origin, text))\n+                    elif p.startswith('__builtin_'):\n+                        print('%s: %s' % (origin, text))\n+#                    if re.search(\"[a-zA-Z]'[a-zA-Z]\", p):\n+#                        print('%s: %s' % (origin, text))\n+            j += 1\n+\n+        origin = None\n+        internal = False"}, {"sha": "dd070969d644d981c064befcff69b72e45438a53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,140 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* builtins.c (expand_builtin_thread_pointer): Wrap an option name\n+\tin a string format message and fix GNU coding style.\n+\t(expand_builtin_set_thread_pointer): Likewise.\n+\t* common/config/aarch64/aarch64-common.c (aarch64_rewrite_selected_cpu): Likewise.\n+\t* common/config/alpha/alpha-common.c (alpha_handle_option): Likewise.\n+\t* common/config/arc/arc-common.c (arc_handle_option): Likewise.\n+\t* common/config/arm/arm-common.c (arm_parse_fpu_option): Likewise.\n+\t* common/config/bfin/bfin-common.c (bfin_handle_option): Likewise.\n+\t* common/config/i386/i386-common.c (ix86_handle_option): Likewise.\n+\t* common/config/ia64/ia64-common.c (ia64_handle_option): Likewise.\n+\t* common/config/m68k/m68k-common.c (m68k_handle_option): Likewise.\n+\t* common/config/msp430/msp430-common.c (msp430_handle_option): Likewise.\n+\t* common/config/nds32/nds32-common.c (nds32_handle_option): Likewise.\n+\t* common/config/powerpcspe/powerpcspe-common.c (rs6000_handle_option): Likewise.\n+\t* common/config/riscv/riscv-common.c (riscv_subset_list::parsing_subset_version): Likewise.\n+\t(riscv_subset_list::parse_std_ext): Likewise.\n+\t(riscv_subset_list::parse_sv_or_non_std_ext): Likewise.\n+\t(riscv_subset_list::parse): Likewise.\n+\t* common/config/rs6000/rs6000-common.c (rs6000_handle_option): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_parse_one_option_token): Likewise.\n+\t(aarch64_override_options_internal): Likewise.\n+\t(aarch64_validate_mcpu): Likewise.\n+\t(aarch64_validate_march): Likewise.\n+\t(aarch64_validate_mtune): Likewise.\n+\t(aarch64_override_options): Likewise.\n+\t* config/alpha/alpha.c (alpha_option_override): Likewise.\n+\t* config/arc/arc.c (arc_init): Likewise.\n+\t(parse_mrgf_banked_regs_option): Likewise.\n+\t(arc_override_options): Likewise.\n+\t(arc_expand_builtin_aligned): Likewise.\n+\t* config/arm/arm-builtins.c (arm_expand_neon_builtin): Likewise.\n+\t(arm_expand_builtin): Likewise.\n+\t* config/arm/arm.c (arm_option_check_internal): Likewise.\n+\t(arm_configure_build_target): Likewise.\n+\t(arm_option_override): Likewise.\n+\t(arm_options_perform_arch_sanity_checks): Likewise.\n+\t(arm_handle_cmse_nonsecure_entry): Likewise.\n+\t(arm_handle_cmse_nonsecure_call): Likewise.\n+\t(arm_tls_referenced_p): Likewise.\n+\t(thumb1_expand_prologue): Likewise.\n+\t* config/avr/avr.c (avr_option_override): Likewise.\n+\t* config/bfin/bfin.c (bfin_option_override): Likewise.\n+\t* config/c6x/c6x.c (c6x_option_override): Likewise.\n+\t* config/cr16/cr16.c (cr16_override_options): Likewise.\n+\t* config/cris/cris.c (cris_option_override): Likewise.\n+\t* config/csky/csky.c (csky_handle_isr_attribute): Likewise.\n+\t* config/darwin-c.c (macosx_version_as_macro): Likewise.\n+\t* config/darwin.c (darwin_override_options): Likewise.\n+\t* config/frv/frv.c (frv_expand_builtin): Likewise.\n+\t* config/h8300/h8300.c (h8300_option_override): Likewise.\n+\t* config/i386/i386.c (parse_mtune_ctrl_str): Likewise.\n+\t(ix86_option_override_internal): Likewise.\n+\t(warn_once_call_ms2sysv_xlogues): Likewise.\n+\t(ix86_expand_prologue): Likewise.\n+\t(split_stack_prologue_scratch_regno): Likewise.\n+\t(ix86_warn_parameter_passing_abi): Likewise.\n+\t* config/ia64/ia64.c (fix_range): Likewise.\n+\t* config/m68k/m68k.c (m68k_option_override): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_option_override): Likewise.\n+\t* config/mips/mips.c (mips_emit_probe_stack_range): Likewise.\n+\t(mips_set_compression_mode): Likewise.\n+\t* config/mmix/mmix.c (mmix_option_override): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_option_override): Likewise.\n+\t* config/msp430/msp430.c (msp430_option_override): Likewise.\n+\t* config/nds32/nds32.c (nds32_option_override): Likewise.\n+\t* config/nios2/nios2.c (nios2_custom_check_insns): Likewise.\n+\t(nios2_option_override): Likewise.\n+\t(nios2_expand_custom_builtin): Likewise.\n+\t* config/nvptx/mkoffload.c (main): Likewise.\n+\t* config/nvptx/nvptx.c (diagnose_openacc_conflict): Likewise.\n+\t* config/pa/pa.c (fix_range): Likewise.\n+\t(pa_option_override): Likewise.\n+\t* config/riscv/riscv.c (riscv_parse_cpu): Likewise.\n+\t(riscv_option_override): Likewise.\n+\t* config/rl78/rl78.c (rl78_option_override): Likewise.\n+\t* config/rs6000/aix61.h: Likewise.\n+\t* config/rs6000/aix71.h: Likewise.\n+\t* config/rs6000/aix72.h: Likewise.\n+\t* config/rs6000/driver-rs6000.c (elf_platform): Likewise.\n+\t* config/rs6000/freebsd64.h: Likewise.\n+\t* config/rs6000/linux64.h: Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Likewise.\n+\t(rs6000_expand_zeroop_builtin): Likewise.\n+\t(rs6000_expand_mtfsb_builtin): Likewise.\n+\t(rs6000_expand_set_fpscr_rn_builtin): Likewise.\n+\t(rs6000_expand_set_fpscr_drn_builtin): Likewise.\n+\t(rs6000_invalid_builtin): Likewise.\n+\t(rs6000_expand_split_stack_prologue): Likewise.\n+\t* config/rs6000/rtems.h: Likewise.\n+\t* config/rx/rx.c (valid_psw_flag): Likewise.\n+\t(rx_expand_builtin): Likewise.\n+\t* config/s390/s390-c.c (s390_resolve_overloaded_builtin): Likewise.\n+\t* config/s390/s390.c (s390_expand_builtin): Likewise.\n+\t(s390_function_profiler): Likewise.\n+\t(s390_option_override_internal): Likewise.\n+\t(s390_option_override): Likewise.\n+\t* config/sh/sh.c (sh_option_override): Likewise.\n+\t(sh_builtin_saveregs): Likewise.\n+\t(sh_fix_range): Likewise.\n+\t* config/sh/vxworks.h: Likewise.\n+\t* config/sparc/sparc.c (sparc_option_override): Likewise.\n+\t* config/spu/spu.c (spu_option_override): Likewise.\n+\t(fix_range): Likewise.\n+\t* config/visium/visium.c (visium_option_override): Likewise.\n+\t(visium_handle_interrupt_attr): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_option_override): Likewise.\n+\t* dbgcnt.c (dbg_cnt_set_limit_by_name): Likewise.\n+\t(dbg_cnt_process_opt): Likewise.\n+\t* dwarf2out.c (output_dwarf_version): Likewise.\n+\t* except.c (expand_eh_return): Likewise.\n+\t* gcc.c (defined): Likewise.\n+\t(driver_handle_option): Likewise.\n+\t(process_command): Likewise.\n+\t(compare_files): Likewise.\n+\t(driver::prepare_infiles): Likewise.\n+\t(driver::do_spec_on_infiles): Likewise.\n+\t(driver::maybe_run_linker): Likewise.\n+\t* omp-offload.c (oacc_parse_default_dims): Likewise.\n+\t* opts-global.c (handle_common_deferred_options): Likewise.\n+\t* opts.c (parse_sanitizer_options): Likewise.\n+\t(common_handle_option): Likewise.\n+\t(enable_warning_as_error): Likewise.\n+\t* passes.c (enable_disable_pass): Likewise.\n+\t* plugin.c (parse_plugin_arg_opt): Likewise.\n+\t(default_plugin_dir_name): Likewise.\n+\t* targhooks.c (default_expand_builtin_saveregs): Likewise.\n+\t(default_pch_valid_p): Likewise.\n+\t* toplev.c (init_asm_output): Likewise.\n+\t(process_options): Likewise.\n+\t(toplev::run_self_tests): Likewise.\n+\t* tree-cfg.c (verify_gimple_call): Likewise.\n+\t* tree-inline.c (inline_forbidden_p_stmt): Likewise.\n+\t(tree_inlinable_function_p): Likewise.\n+\t* var-tracking.c (vt_find_locations): Likewise.\n+\n 2019-03-11  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/s390.c (s390_expand_builtin): Do the copy_to_reg not"}, {"sha": "1863f5bd48c8176ebe1e02d89e034c7d5df167cd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,8 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-interface/misc.c (gnat_post_options) Wrap an option name\n+\tin a string format message and fix GNU coding style.:\n+\n 2019-02-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu) <N_Aggregate>: Minor tweak."}, {"sha": "5737165949e470e4d24dc1763f52e6b66411061b", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -256,7 +256,7 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n {\n   /* Excess precision other than \"fast\" requires front-end support.  */\n   if (flag_excess_precision_cmdline == EXCESS_PRECISION_STANDARD)\n-    sorry (\"-fexcess-precision=standard for Ada\");\n+    sorry (\"%<-fexcess-precision=standard%> for Ada\");\n   flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n \n   /* No psABI change warnings for Ada.  */"}, {"sha": "a65eb88bc492d898718d90874092e92f8fec5aef", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -6889,7 +6889,7 @@ expand_builtin_thread_pointer (tree exp, rtx target)\n       expand_insn (icode, 1, &op);\n       return target;\n     }\n-  error (\"__builtin_thread_pointer is not supported on this target\");\n+  error (\"%<__builtin_thread_pointer%> is not supported on this target\");\n   return const0_rtx;\n }\n \n@@ -6909,7 +6909,7 @@ expand_builtin_set_thread_pointer (tree exp)\n       expand_insn (icode, 1, &op);\n       return;\n     }\n-  error (\"__builtin_set_thread_pointer is not supported on this target\");\n+  error (\"%<__builtin_set_thread_pointer%> is not supported on this target\");\n }\n \n \f"}, {"sha": "e529538d8ff7f1557db51e14139cab131f279942", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,16 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-attribs.c (handle_nocf_check_attribute): Wrap an option name\n+\tin a string format message and fix GNU coding style.\n+\t* c-common.c (vector_types_convertible_p): Likewise.\n+\t(c_build_vec_perm_expr): Likewise.\n+\t* c-indentation.c (get_visual_column): Likewise.\n+\t* c-opts.c (c_common_handle_option): Likewise.\n+\t(c_common_post_options): Likewise.\n+\t(sanitize_cpp_opts): Likewise.\n+\t* c-pch.c (c_common_pch_pragma): Likewise.\n+\t* c-pragma.c (handle_pragma_pack): Likewise.\n+\n 2019-03-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/89550"}, {"sha": "e559d3b55d205f22bb6f0f7599e529a8b46fe049", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1072,7 +1072,8 @@ handle_nocf_check_attribute (tree *node, tree name,\n   else if (!(flag_cf_protection & CF_BRANCH))\n     {\n       warning (OPT_Wattributes, \"%qE attribute ignored. Use \"\n-\t\t\t\t\"-fcf-protection option to enable it\", name);\n+\t\t\t\t\"%<-fcf-protection%> option to enable it\",\n+\t\t\t\tname);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "019f108292272fc026101cbd31632606a8fd6428", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -976,7 +976,7 @@ vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note)\n   if (emit_lax_note && !emitted_lax_note)\n     {\n       emitted_lax_note = true;\n-      inform (input_location, \"use -flax-vector-conversions to permit \"\n+      inform (input_location, \"use %<-flax-vector-conversions%> to permit \"\n               \"conversions between vectors with differing \"\n               \"element types or numbers of subparts\");\n     }\n@@ -1016,7 +1016,7 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask,\n   if (!VECTOR_INTEGER_TYPE_P (TREE_TYPE (mask)))\n     {\n       if (complain)\n-\terror_at (loc, \"__builtin_shuffle last argument must \"\n+\terror_at (loc, \"%<__builtin_shuffle%> last argument must \"\n \t\t       \"be an integer vector\");\n       return error_mark_node;\n     }\n@@ -1025,14 +1025,14 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask,\n       || !VECTOR_TYPE_P (TREE_TYPE (v1)))\n     {\n       if (complain)\n-\terror_at (loc, \"__builtin_shuffle arguments must be vectors\");\n+\terror_at (loc, \"%<__builtin_shuffle%> arguments must be vectors\");\n       return error_mark_node;\n     }\n \n   if (TYPE_MAIN_VARIANT (TREE_TYPE (v0)) != TYPE_MAIN_VARIANT (TREE_TYPE (v1)))\n     {\n       if (complain)\n-\terror_at (loc, \"__builtin_shuffle argument vectors must be of \"\n+\terror_at (loc, \"%<__builtin_shuffle%> argument vectors must be of \"\n \t\t       \"the same type\");\n       return error_mark_node;\n     }\n@@ -1043,7 +1043,7 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask,\n \t\t   TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask))))\n     {\n       if (complain)\n-\terror_at (loc, \"__builtin_shuffle number of elements of the \"\n+\terror_at (loc, \"%<__builtin_shuffle%> number of elements of the \"\n \t\t       \"argument vector(s) and the mask vector should \"\n \t\t       \"be the same\");\n       return error_mark_node;\n@@ -1053,7 +1053,7 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask,\n       != GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (TREE_TYPE (mask)))))\n     {\n       if (complain)\n-\terror_at (loc, \"__builtin_shuffle argument vector(s) inner type \"\n+\terror_at (loc, \"%<__builtin_shuffle%> argument vector(s) inner type \"\n \t\t       \"must have the same size as inner type of the mask\");\n       return error_mark_node;\n     }"}, {"sha": "e6431255cabaa6017832126f8a02ab952cb901e4", "filename": "gcc/c-family/c-indentation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-indentation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-indentation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-indentation.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -64,7 +64,7 @@ get_visual_column (expanded_location exploc, location_t loc,\n \t  /* Notify the user the first time this happens.  */\n \t  issued_note = true;\n \t  inform (loc,\n-\t\t  \"-Wmisleading-indentation is disabled from this point\"\n+\t\t  \"%<-Wmisleading-indentation%> is disabled from this point\"\n \t\t  \" onwards, since column-tracking was disabled due to\"\n \t\t  \" the size of the code/headers\");\n \t}"}, {"sha": "3233fdb9775c9fb75c062fccf6baccf485ebac03", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -327,7 +327,8 @@ c_common_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \t    error (\"-I- specified twice\");\n \t  quote_chain_split = true;\n \t  split_quote_chain ();\n-\t  inform (input_location, \"obsolete option -I- used, please use -iquote instead\");\n+\t  inform (input_location, \"obsolete option %<-I-%> used, \"\n+\t\t  \"please use %<-iquote%> instead\");\n \t}\n       break;\n \n@@ -796,7 +797,7 @@ c_common_post_options (const char **pfilename)\n   if (c_dialect_cxx ())\n     {\n       if (flag_excess_precision_cmdline == EXCESS_PRECISION_STANDARD)\n-\tsorry (\"-fexcess-precision=standard for C++\");\n+\tsorry (\"%<-fexcess-precision=standard%> for C++\");\n       flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n     }\n   else if (flag_excess_precision_cmdline == EXCESS_PRECISION_DEFAULT)\n@@ -831,7 +832,7 @@ c_common_post_options (const char **pfilename)\n   if (flag_gnu89_inline == -1)\n     flag_gnu89_inline = !flag_isoc99;\n   else if (!flag_gnu89_inline && !flag_isoc99)\n-    error (\"-fno-gnu89-inline is only supported in GNU99 or C99 mode\");\n+    error (\"%<-fno-gnu89-inline%> is only supported in GNU99 or C99 mode\");\n \n   /* Default to ObjC sjlj exception handling if NeXT runtime.  */\n   if (flag_objc_sjlj_exceptions < 0)\n@@ -877,17 +878,17 @@ c_common_post_options (const char **pfilename)\n   if (!warn_format)\n     {\n       warning (OPT_Wformat_y2k,\n-\t       \"-Wformat-y2k ignored without -Wformat\");\n+\t       \"%<-Wformat-y2k%> ignored without %<-Wformat%>\");\n       warning (OPT_Wformat_extra_args,\n-\t       \"-Wformat-extra-args ignored without -Wformat\");\n+\t       \"%<-Wformat-extra-args%> ignored without %<-Wformat%>\");\n       warning (OPT_Wformat_zero_length,\n-\t       \"-Wformat-zero-length ignored without -Wformat\");\n+\t       \"%<-Wformat-zero-length%> ignored without %<-Wformat%>\");\n       warning (OPT_Wformat_nonliteral,\n-\t       \"-Wformat-nonliteral ignored without -Wformat\");\n+\t       \"%<-Wformat-nonliteral%> ignored without %<-Wformat%>\");\n       warning (OPT_Wformat_contains_nul,\n-\t       \"-Wformat-contains-nul ignored without -Wformat\");\n+\t       \"%<-Wformat-contains-nul%> ignored without %<-Wformat%>\");\n       warning (OPT_Wformat_security,\n-\t       \"-Wformat-security ignored without -Wformat\");\n+\t       \"%<-Wformat-security%> ignored without %<-Wformat%>\");\n     }\n \n   /* -Wimplicit-function-declaration is enabled by default for C99.  */\n@@ -944,12 +945,12 @@ c_common_post_options (const char **pfilename)\n       if (flag_abi_version == latest_abi_version)\n \t{\n \t  auto_diagnostic_group d;\n-\t  if (warning (OPT_Wabi, \"-Wabi won't warn about anything\"))\n+\t  if (warning (OPT_Wabi, \"%<-Wabi%> won't warn about anything\"))\n \t    {\n-\t      inform (input_location, \"-Wabi warns about differences \"\n+\t      inform (input_location, \"%<-Wabi%> warns about differences \"\n \t\t      \"from the most up-to-date ABI, which is also used \"\n \t\t      \"by default\");\n-\t      inform (input_location, \"use e.g. -Wabi=11 to warn about \"\n+\t      inform (input_location, \"use e.g. %<-Wabi=11%> to warn about \"\n \t\t      \"changes from GCC 7\");\n \t    }\n \t  flag_abi_compat_version = abi_compat_default;\n@@ -1304,7 +1305,8 @@ sanitize_cpp_opts (void)\n   /* If we don't know what style of dependencies to output, complain\n      if any other dependency switches have been given.  */\n   if (deps_seen && cpp_opts->deps.style == DEPS_NONE)\n-    error (\"to generate dependencies you must specify either -M or -MM\");\n+    error (\"to generate dependencies you must specify either %<-M%> \"\n+\t   \"or %<-MM%>\");\n \n   /* -dM and dependencies suppress normal output; do it here so that\n      the last -d[MDN] switch overrides earlier ones.  */\n@@ -1327,7 +1329,7 @@ sanitize_cpp_opts (void)\n       flag_no_line_commands = 1;\n     }\n   else if (cpp_opts->deps.missing_files)\n-    error (\"-MG may only be used with -M or -MM\");\n+    error (\"%<-MG%> may only be used with %<-M%> or %<-MM%>\");\n \n   cpp_opts->unsigned_char = !flag_signed_char;\n   cpp_opts->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n@@ -1360,9 +1362,10 @@ sanitize_cpp_opts (void)\n   if (cpp_opts->directives_only)\n     {\n       if (cpp_warn_unused_macros)\n-\terror (\"-fdirectives-only is incompatible with -Wunused_macros\");\n+\terror (\"%<-fdirectives-only%> is incompatible \"\n+\t       \"with %<-Wunused-macros%>\");\n       if (cpp_opts->traditional)\n-\terror (\"-fdirectives-only is incompatible with -traditional\");\n+\terror (\"%<-fdirectives-only%> is incompatible with %<-traditional%>\");\n     }\n }\n "}, {"sha": "316fb84f429a2c3f19710db8d4a850f80e14fd2f", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -406,7 +406,8 @@ c_common_pch_pragma (cpp_reader *pfile, const char *name)\n \n   if (!cpp_get_options (pfile)->preprocessed)\n     {\n-      error (\"pch_preprocess pragma should only be used with -fpreprocessed\");\n+      error (\"pch_preprocess pragma should only be used \"\n+\t     \"with %<-fpreprocessed%>\");\n       inform (input_location, \"use #include instead\");\n       return;\n     }\n@@ -418,7 +419,7 @@ c_common_pch_pragma (cpp_reader *pfile, const char *name)\n   if (c_common_valid_pch (pfile, name, fd) != 1)\n     {\n       if (!cpp_get_options (pfile)->warn_invalid_pch)\n-\tinform (input_location, \"use -Winvalid-pch for more information\");\n+\tinform (input_location, \"use %<-Winvalid-pch%> for more information\");\n       fatal_error (input_location, \"%s: PCH file was invalid\", name);\n     }\n "}, {"sha": "fbc734a047bdc4216b6170e2394a65612b3c0077", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -196,7 +196,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n     warning (OPT_Wpragmas, \"junk at end of %<#pragma pack%>\");\n \n   if (flag_pack_struct)\n-    GCC_BAD (\"#pragma pack has no effect with -fpack-struct - ignored\");\n+    GCC_BAD (\"#pragma pack has no effect with %<-fpack-struct%> - ignored\");\n \n   if (action != pop)\n     switch (align)"}, {"sha": "5859f5bbb9203ca833b66b2907388fbfda1de3da", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,9 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-decl.c (check_for_loop_decls): Wrap an option name\n+\tin a string format message and fix GNU coding style.\n+\t* c-parser.c (c_parser_declspecs): Likewise.\n+\n 2019-03-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/89550"}, {"sha": "d8fa10966b2890017305058e8fe76938adf578dc", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -9786,8 +9786,8 @@ check_for_loop_decls (location_t loc, bool turn_off_iso_c99_error)\n       if (hint)\n \t{\n \t  inform (loc,\n-\t\t  \"use option -std=c99, -std=gnu99, -std=c11 or -std=gnu11 \"\n-\t\t  \"to compile your code\");\n+\t\t  \"use option %<-std=c99%>, %<-std=gnu99%>, %<-std=c11%> or \"\n+\t\t  \"%<-std=gnu11%> to compile your code\");\n \t  hint = false;\n \t}\n       return NULL_TREE;"}, {"sha": "5134e95a92127528aead50f96c478ffd9ef2bfba", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2880,7 +2880,7 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t  break;\n \tcase RID_GIMPLE:\n \t  if (! flag_gimple)\n-\t    error_at (loc, \"%<__GIMPLE%> only valid with -fgimple\");\n+\t    error_at (loc, \"%<__GIMPLE%> only valid with %<-fgimple%>\");\n \t  c_parser_consume_token (parser);\n \t  specs->gimple_p = true;\n \t  specs->locations[cdw_gimple] = loc;"}, {"sha": "bab3ab3fa36c66906d1b4367e2b7bfb1bf6aa08c", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -536,7 +536,7 @@ aarch64_rewrite_selected_cpu (const char *name)\n      found does not map to an architecture we understand.  */\n   if (p_to_a->arch == aarch64_no_arch\n       || a_to_an->arch == aarch64_no_arch)\n-    fatal_error (input_location, \"unknown value %qs for -mcpu\", name);\n+    fatal_error (input_location, \"unknown value %qs for %<-mcpu%>\", name);\n \n   unsigned long extensions = p_to_a->flags;\n   aarch64_parse_extension (extension_str.c_str (), &extensions, NULL);"}, {"sha": "05fdf81d16977325660a2b6a4d883defca94d70a", "filename": "gcc/common/config/alpha/alpha-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Falpha%2Falpha-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Falpha%2Falpha-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Falpha%2Falpha-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -72,7 +72,7 @@ alpha_handle_option (struct gcc_options *opts,\n \n     case OPT_mtls_size_:\n       if (value != 16 && value != 32 && value != 64)\n-\terror_at (loc, \"bad value %qs for -mtls-size switch\", arg);\n+\terror_at (loc, \"bad value %qs for %<-mtls-size%> switch\", arg);\n       break;\n     }\n "}, {"sha": "e10e1618f0c74ff0038930770260850f4ca8a7f6", "filename": "gcc/common/config/arc/arc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -84,7 +84,7 @@ arc_handle_option (struct gcc_options *opts,\n \t our caller, so comparing arc_cpu with PROCESSOR_NONE is pointless.  */\n \n       if (mcpu_seen != PROCESSOR_NONE && mcpu_seen != value)\n-\twarning_at (loc, 0, \"multiple -mcpu= options specified.\");\n+\twarning_at (loc, 0, \"multiple %<-mcpu=%> options specified.\");\n       mcpu_seen = value;\n       break;\n "}, {"sha": "41a920f6dc96833e778faa8dbcc19beac483734c", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -458,7 +458,7 @@ arm_parse_fpu_option (const char *opt)\n \treturn all_fpus + i;\n     }\n \n-  error_at (input_location, \"unrecognized -mfpu target: %s\", opt);\n+  error_at (input_location, \"unrecognized %<-mfpu%> target: %s\", opt);\n   arm_print_hint_for_fpu_option (opt);\n   return NULL;\n }"}, {"sha": "10910f39cec4fd520e97e9566affefc67ce7ee80", "filename": "gcc/common/config/bfin/bfin-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fbfin%2Fbfin-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fbfin%2Fbfin-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fbfin%2Fbfin-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -301,7 +301,7 @@ bfin_handle_option (struct gcc_options *opts,\n     {\n     case OPT_mshared_library_id_:\n       if (value > MAX_LIBRARY_ID)\n-\terror_at (loc, \"-mshared-library-id=%s is not between 0 and %d\",\n+\terror_at (loc, \"%<-mshared-library-id=%s%> is not between 0 and %d\",\n \t\t  arg, MAX_LIBRARY_ID);\n       return true;\n \n@@ -320,7 +320,7 @@ bfin_handle_option (struct gcc_options *opts,\n \n \tif (p == NULL)\n \t  {\n-\t    error_at (loc, \"-mcpu=%s is not valid\", arg);\n+\t    error_at (loc, \"%<-mcpu=%s%> is not valid\", arg);\n \t    return false;\n \t  }\n \n@@ -356,7 +356,8 @@ bfin_handle_option (struct gcc_options *opts,\n \t\t|| si_major > 0xff || si_minor > 0xff)\n \t      {\n \t      invalid_silicon_revision:\n-\t\terror_at (loc, \"-mcpu=%s has invalid silicon revision\", arg);\n+\t\terror_at (loc, \"%<-mcpu=%s%> has invalid silicon revision\",\n+\t\t\t  arg);\n \t\treturn false;\n \t      }\n "}, {"sha": "ee725a4202c6de09a14fce7e75054f3384f9a4aa", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1337,28 +1337,31 @@ ix86_handle_option (struct gcc_options *opts,\n \n \n     case OPT_malign_loops_:\n-      warning_at (loc, 0, \"-malign-loops is obsolete, use -falign-loops\");\n+      warning_at (loc, 0, \"%<-malign-loops%> is obsolete, \"\n+\t\t  \"use %<-falign-loops%>\");\n       if (value > MAX_CODE_ALIGN)\n-\terror_at (loc, \"-malign-loops=%d is not between 0 and %d\",\n+\terror_at (loc, \"%<-malign-loops=%d%> is not between 0 and %d\",\n \t\t  value, MAX_CODE_ALIGN);\n       else\n \tset_malign_value (&opts->x_str_align_loops, value);\n       return true;\n \n     case OPT_malign_jumps_:\n-      warning_at (loc, 0, \"-malign-jumps is obsolete, use -falign-jumps\");\n+      warning_at (loc, 0, \"%<-malign-jumps%> is obsolete, \"\n+\t\t  \"use %<-falign-jumps%>\");\n       if (value > MAX_CODE_ALIGN)\n-\terror_at (loc, \"-malign-jumps=%d is not between 0 and %d\",\n+\terror_at (loc, \"%<-malign-jumps=%d%> is not between 0 and %d\",\n \t\t  value, MAX_CODE_ALIGN);\n       else\n \tset_malign_value (&opts->x_str_align_jumps, value);\n       return true;\n \n     case OPT_malign_functions_:\n       warning_at (loc, 0,\n-\t\t  \"-malign-functions is obsolete, use -falign-functions\");\n+\t\t  \"%<-malign-functions%> is obsolete, \"\n+\t\t  \"use %<-falign-functions%>\");\n       if (value > MAX_CODE_ALIGN)\n-\terror_at (loc, \"-malign-functions=%d is not between 0 and %d\",\n+\terror_at (loc, \"%<-malign-functions=%d%> is not between 0 and %d\",\n \t\t  value, MAX_CODE_ALIGN);\n       else\n \tset_malign_value (&opts->x_str_align_functions, value);\n@@ -1367,7 +1370,7 @@ ix86_handle_option (struct gcc_options *opts,\n     case OPT_mbranch_cost_:\n       if (value > 5)\n \t{\n-\t  error_at (loc, \"-mbranch-cost=%d is not between 0 and 5\", value);\n+\t  error_at (loc, \"%<-mbranch-cost=%d%> is not between 0 and 5\", value);\n \t  opts->x_ix86_branch_cost = 5;\n \t}\n       return true;"}, {"sha": "02e297ad69bbc3591a15b7e4373986c71fef51db", "filename": "gcc/common/config/ia64/ia64-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -55,7 +55,7 @@ ia64_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n     {\n     case OPT_mtls_size_:\n       if (value != 14 && value != 22 && value != 64)\n-\terror_at (loc, \"bad value %<%s%> for -mtls-size= switch\", arg);\n+\terror_at (loc, \"bad value %<%s%> for %<-mtls-size=%> switch\", arg);\n       return true;\n \n     default:"}, {"sha": "f13e0f9d24b8ec98d1d58b9299488d92a96c7184", "filename": "gcc/common/config/m68k/m68k-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fm68k%2Fm68k-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fm68k%2Fm68k-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fm68k%2Fm68k-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -57,7 +57,7 @@ m68k_handle_option (struct gcc_options *opts,\n \n     case OPT_mshared_library_id_:\n       if (value > MAX_LIBRARY_ID)\n-\terror_at (loc, \"-mshared-library-id=%s is not between 0 and %d\",\n+\terror_at (loc, \"%<-mshared-library-id=%s%> is not between 0 and %d\",\n \t\t  arg, MAX_LIBRARY_ID);\n       else\n         {"}, {"sha": "166abf7d8704472a191e65bbec3dbea185003e85", "filename": "gcc/common/config/msp430/msp430-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -54,7 +54,7 @@ msp430_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n \t}\n       else\n \t{\n-\t  error (\"unrecognized argument of -mcpu: %s\", decoded->arg);\n+\t  error (\"unrecognized argument of %<-mcpu%>: %s\", decoded->arg);\n \t  return false;\n \t}\n       break;"}, {"sha": "85f672ff0807c076ba5bb5c729bcc10574f045c5", "filename": "gcc/common/config/nds32/nds32-common.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fnds32%2Fnds32-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fnds32%2Fnds32-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fnds32%2Fnds32-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -46,8 +46,7 @@ nds32_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n       /* Check the valid vector size: 4 or 16.  */\n       if (value != 4 && value != 16)\n \t{\n-\t  error_at (loc, \"for the option -misr-vector-size=X, the valid X \"\n-\t\t\t \"must be: 4 or 16\");\n+\t  error_at (loc, \"%<-misr-vector-size=%d%> argument must be 4 or 16\", value);\n \t  return false;\n \t}\n \n@@ -57,8 +56,8 @@ nds32_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n       /* Check the valid security level: 0 1 2 3.  */\n       if (value < 0 || value > 3)\n \t{\n-\t  error_at (loc, \"for the option -misr-secure=X, the valid X \"\n-\t\t\t \"must be: 0, 1, 2, or 3\");\n+\t  error_at (loc, \"%<-misr-secure=%d%> argument not in between 0 and 3\",\n+\t\t    value);\n \t  return false;\n \t}\n       return true;\n@@ -67,7 +66,7 @@ nds32_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n       /* Check valid value: 4 8 16 32 64 128 256 512.  */\n       if (exact_log2 (value) < 2 || exact_log2 (value) > 9)\n \t{\n-\t  error_at (loc, \"for the option -mcache-block-size=X, the valid X \"\n+\t  error_at (loc, \"for the option %<-mcache-block-size=X%>, the valid X \"\n \t\t\t \"must be: 4, 8, 16, 32, 64, 128, 256, or 512\");\n \t  return false;\n \t}"}, {"sha": "c949a601f578c2fb7dabbe8a80250c922eaf5c3d", "filename": "gcc/common/config/powerpcspe/powerpcspe-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -170,7 +170,7 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t  else if (! strcmp (q, \"builtin\"))\n \t    mask = MASK_DEBUG_BUILTIN;\n \t  else\n-\t    error_at (loc, \"unknown -mdebug-%s switch\", q);\n+\t    error_at (loc, \"unknown %<-mdebug-%s%> switch\", q);\n \n \t  if (invert)\n \t    opts->x_rs6000_debug &= ~mask;\n@@ -218,7 +218,7 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n     case OPT_mlong_double_:\n       if (value != 64 && value != 128)\n \t{\n-\t  error_at (loc, \"unknown switch -mlong-double-%s\", arg);\n+\t  error_at (loc, \"unknown switch %<-mlong-double-%s%>\", arg);\n \t  opts->x_rs6000_long_double_type_size\n \t    = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n \t  return false;\n@@ -228,7 +228,7 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n     case OPT_msingle_float:\n       if (!TARGET_SINGLE_FPU) \n \twarning_at (loc, 0,\n-\t\t    \"-msingle-float option equivalent to -mhard-float\");\n+\t\t    \"%<-msingle-float%> option equivalent to %<-mhard-float%>\");\n       /* -msingle-float implies -mno-double-float and TARGET_HARD_FLOAT. */\n       opts->x_rs6000_double_float = 0;\n       opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n@@ -244,7 +244,7 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \n     case OPT_msimple_fpu:\n       if (!TARGET_SINGLE_FPU) \n-\twarning_at (loc, 0, \"-msimple-fpu option ignored\");\n+\twarning_at (loc, 0, \"%<-msimple-fpu%> option ignored\");\n       break;\n \n     case OPT_mhard_float:"}, {"sha": "72c43c69b2392a77e57c9ed420bfaed20c4284e9", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -250,7 +250,7 @@ riscv_subset_list::parsing_subset_version (const char *p,\n \t\t}\n \t      else\n \t\t{\n-\t\t  error_at (m_loc, \"-march=%s: Expect number after `%dp'.\",\n+\t\t  error_at (m_loc, \"%<-march=%s%>: Expect number after `%dp'.\",\n \t\t\t    m_arch, version);\n \t\t  return NULL;\n \t\t}\n@@ -326,8 +326,8 @@ riscv_subset_list::parse_std_ext (const char *p)\n \n       if (m_xlen > 32)\n \t{\n-\t  error_at (m_loc, \"-march=%s: rv%de is not a valid base ISA\", m_arch,\n-\t\t    m_xlen);\n+\t  error_at (m_loc, \"%<-march=%s%>: rv%de is not a valid base ISA\",\n+\t\t    m_arch, m_xlen);\n \t  return NULL;\n \t}\n       break;\n@@ -348,8 +348,8 @@ riscv_subset_list::parse_std_ext (const char *p)\n       break;\n \n     default:\n-      error_at (m_loc, \"-march=%s: first ISA subset must be `e', `i' or `g'\",\n-\t\tm_arch);\n+      error_at (m_loc, \"%<-march=%s%>: first ISA subset must be `e', \"\n+\t\t\"`i' or `g'\", m_arch);\n       return NULL;\n     }\n \n@@ -375,12 +375,12 @@ riscv_subset_list::parse_std_ext (const char *p)\n       if (std_ext != *std_exts)\n \t{\n \t  if (strchr (all_std_exts, std_ext) == NULL)\n-\t    error_at (m_loc, \"-march=%s: unsupported ISA subset `%c'\",\n+\t    error_at (m_loc, \"%<-march=%s%>: unsupported ISA subset `%c'\",\n \t\t      m_arch, *p);\n \t  else\n \t    error_at (m_loc,\n-\t\t      \"-march=%s: ISA string is not in canonical order. `%c'\",\n-\t\t      m_arch, *p);\n+\t\t      \"%<-march=%s%>: ISA string is not in canonical order. \"\n+\t\t      \"`%c'\", m_arch, *p);\n \t  return NULL;\n \t}\n \n@@ -455,7 +455,7 @@ riscv_subset_list::parse_sv_or_non_std_ext (const char *p,\n \n       if (*p != '\\0' && *p != '_')\n \t{\n-\t  error_at (m_loc, \"-march=%s: %s must separate with _\",\n+\t  error_at (m_loc, \"%<-march=%s%>: %s must separate with _\",\n \t\t    m_arch, ext_type_str);\n \t  return NULL;\n \t}\n@@ -483,7 +483,7 @@ riscv_subset_list::parse (const char *arch, location_t loc)\n     }\n   else\n     {\n-      error_at (loc, \"-march=%s: ISA string must begin with rv32 or rv64\",\n+      error_at (loc, \"%<-march=%s%>: ISA string must begin with rv32 or rv64\",\n \t\tarch);\n       goto fail;\n     }"}, {"sha": "9857b54f69f31c6c1b83b55c1aa6e1aac62df7e4", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -178,7 +178,7 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t  else if (! strcmp (q, \"builtin\"))\n \t    mask = MASK_DEBUG_BUILTIN;\n \t  else\n-\t    error_at (loc, \"unknown -mdebug-%s switch\", q);\n+\t    error_at (loc, \"unknown %<-mdebug-%s%> switch\", q);\n \n \t  if (invert)\n \t    opts->x_rs6000_debug &= ~mask;\n@@ -217,7 +217,7 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n     case OPT_mlong_double_:\n       if (value != 64 && value != 128)\n \t{\n-\t  error_at (loc, \"unknown switch -mlong-double-%s\", arg);\n+\t  error_at (loc, \"unknown switch %<-mlong-double-%s%>\", arg);\n \t  opts->x_rs6000_long_double_type_size\n \t    = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n \t  return false;"}, {"sha": "252bed7f0e57b6b88f9890a6999ee80053024e89", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -11151,7 +11151,7 @@ aarch64_parse_one_option_token (const char *token,\n \treturn flag->flag;\n     }\n \n-  error (\"unknown flag passed in -moverride=%s (%s)\", option_name, token);\n+  error (\"unknown flag passed in %<-moverride=%s%> (%s)\", option_name, token);\n   return 0;\n }\n \n@@ -11454,18 +11454,18 @@ aarch64_override_options_internal (struct gcc_options *opts)\n   if (aarch64_stack_protector_guard == SSP_GLOBAL\n       && opts->x_aarch64_stack_protector_guard_offset_str)\n     {\n-      error (\"incompatible options -mstack-protector-guard=global and\"\n-\t     \"-mstack-protector-guard-offset=%qs\",\n+      error (\"incompatible options %<-mstack-protector-guard=global%> and\"\n+\t     \"%<-mstack-protector-guard-offset=%qs%>\",\n \t     aarch64_stack_protector_guard_offset_str);\n     }\n \n   if (aarch64_stack_protector_guard == SSP_SYSREG\n       && !(opts->x_aarch64_stack_protector_guard_offset_str\n \t   && opts->x_aarch64_stack_protector_guard_reg_str))\n     {\n-      error (\"both -mstack-protector-guard-offset and \"\n-\t     \"-mstack-protector-guard-reg must be used \"\n-\t     \"with -mstack-protector-guard=sysreg\");\n+      error (\"both %<-mstack-protector-guard-offset%> and \"\n+\t     \"%<-mstack-protector-guard-reg%> must be used \"\n+\t     \"with %<-mstack-protector-guard=sysreg%>\");\n     }\n \n   if (opts->x_aarch64_stack_protector_guard_reg_str)\n@@ -11482,7 +11482,7 @@ aarch64_override_options_internal (struct gcc_options *opts)\n       long offs = strtol (aarch64_stack_protector_guard_offset_str, &end, 0);\n       if (!*str || *end || errno)\n \terror (\"%qs is not a valid offset in %qs\", str,\n-\t       \"-mstack-protector-guard-offset=\");\n+\t       \"%<-mstack-protector-guard-offset=%>\");\n       aarch64_stack_protector_guard_offset = offs;\n     }\n \n@@ -11687,7 +11687,7 @@ aarch64_validate_mcpu (const char *str, const struct processor **res,\n \terror (\"missing cpu name in %<-mcpu=%s%>\", str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"unknown value %qs for -mcpu\", str);\n+\terror (\"unknown value %qs for %<-mcpu%>\", str);\n \taarch64_print_hint_for_core (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n@@ -11828,7 +11828,7 @@ aarch64_validate_march (const char *str, const struct processor **res,\n \terror (\"missing arch name in %<-march=%s%>\", str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"unknown value %qs for -march\", str);\n+\terror (\"unknown value %qs for %<-march%>\", str);\n \taarch64_print_hint_for_arch (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n@@ -11863,7 +11863,7 @@ aarch64_validate_mtune (const char *str, const struct processor **res)\n \terror (\"missing cpu name in %<-mtune=%s%>\", str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"unknown value %qs for -mtune\", str);\n+\terror (\"unknown value %qs for %<-mtune%>\", str);\n \taarch64_print_hint_for_core (str);\n \tbreak;\n       default:\n@@ -11988,7 +11988,7 @@ aarch64_override_options (void)\n     {\n       if (selected_arch->arch != selected_cpu->arch)\n \t{\n-\t  warning (0, \"switch -mcpu=%s conflicts with -march=%s switch\",\n+\t  warning (0, \"switch %<-mcpu=%s%> conflicts with %<-march=%s%> switch\",\n \t\t       all_architectures[selected_cpu->arch].name,\n \t\t       selected_arch->name);\n \t}\n@@ -12044,14 +12044,14 @@ aarch64_override_options (void)\n   /* The compiler may have been configured with 2.23.* binutils, which does\n      not have support for ILP32.  */\n   if (TARGET_ILP32)\n-    error (\"assembler does not support -mabi=ilp32\");\n+    error (\"assembler does not support %<-mabi=ilp32%>\");\n #endif\n \n   /* Convert -msve-vector-bits to a VG count.  */\n   aarch64_sve_vg = aarch64_convert_sve_vector_bits (aarch64_sve_vector_bits);\n \n   if (aarch64_ra_sign_scope != AARCH64_FUNCTION_NONE && TARGET_ILP32)\n-    sorry (\"return address signing is only supported for -mabi=lp64\");\n+    sorry (\"return address signing is only supported for %<-mabi=lp64%>\");\n \n   /* Make sure we properly set up the explicit options.  */\n   if ((aarch64_cpu_string && valid_cpu)\n@@ -12119,7 +12119,7 @@ initialize_aarch64_code_model (struct gcc_options *opts)\n #endif\n \t   break;\n \t case AARCH64_CMODEL_LARGE:\n-\t   sorry (\"code model %qs with -f%s\", \"large\",\n+\t   sorry (\"code model %qs with %<-f%s%>\", \"large\",\n \t\t  opts->x_flag_pic > 1 ? \"PIC\" : \"pic\");\n \t   break;\n \t default:"}, {"sha": "984540f0b5309b2c1b48753b85d879551af36113", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -417,7 +417,8 @@ alpha_option_override (void)\n       else if (! strcmp (alpha_tp_string, \"i\"))\n \talpha_tp = ALPHA_TP_INSN;\n       else\n-\terror (\"bad value %qs for -mtrap-precision switch\", alpha_tp_string);\n+\terror (\"bad value %qs for %<-mtrap-precision%> switch\",\n+\t       alpha_tp_string);\n     }\n \n   if (alpha_fprm_string)\n@@ -431,7 +432,7 @@ alpha_option_override (void)\n       else if (! strcmp (alpha_fprm_string,\"d\"))\n \talpha_fprm = ALPHA_FPRM_DYN;\n       else\n-\terror (\"bad value %qs for -mfp-rounding-mode switch\",\n+\terror (\"bad value %qs for %<-mfp-rounding-mode%> switch\",\n \t       alpha_fprm_string);\n     }\n \n@@ -446,7 +447,8 @@ alpha_option_override (void)\n       else if (strcmp (alpha_fptm_string, \"sui\") == 0)\n \talpha_fptm = ALPHA_FPTM_SUI;\n       else\n-\terror (\"bad value %qs for -mfp-trap-mode switch\", alpha_fptm_string);\n+\terror (\"bad value %qs for %<-mfp-trap-mode%> switch\",\n+\t       alpha_fptm_string);\n     }\n \n   if (alpha_cpu_string)\n@@ -463,7 +465,7 @@ alpha_option_override (void)\n \t    break;\n \t  }\n       if (i == ct_size)\n-\terror (\"bad value %qs for -mcpu switch\", alpha_cpu_string);\n+\terror (\"bad value %qs for %<-mcpu%> switch\", alpha_cpu_string);\n     }\n \n   if (alpha_tune_string)\n@@ -478,7 +480,7 @@ alpha_option_override (void)\n \t    break;\n \t  }\n       if (i == ct_size)\n-\terror (\"bad value %qs for -mtune switch\", alpha_tune_string);\n+\terror (\"bad value %qs for %<-mtune%> switch\", alpha_tune_string);\n     }\n \n   if (line_size)\n@@ -499,7 +501,7 @@ alpha_option_override (void)\n   if ((alpha_fptm == ALPHA_FPTM_SU || alpha_fptm == ALPHA_FPTM_SUI)\n       && alpha_tp != ALPHA_TP_INSN && alpha_cpu != PROCESSOR_EV6)\n     {\n-      warning (0, \"fp software completion requires -mtrap-precision=i\");\n+      warning (0, \"fp software completion requires %<-mtrap-precision=i%>\");\n       alpha_tp = ALPHA_TP_INSN;\n     }\n \n@@ -567,7 +569,8 @@ alpha_option_override (void)\n       }\n     else\n       {\n-\twarning (0, \"bad value %qs for -mmemory-latency\", alpha_mlat_string);\n+\twarning (0, \"bad value %qs for %<-mmemory-latency%>\",\n+\t\t alpha_mlat_string);\n \tlat = 3;\n       }\n "}, {"sha": "581833b5aed70b41269aaa98b2bd0a9fb4824d39", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -933,10 +933,10 @@ arc_init (void)\n \n   /* MPY instructions valid only for ARC700 or ARCv2.  */\n   if (TARGET_NOMPY_SET && TARGET_ARC600_FAMILY)\n-      error (\"-mno-mpy supported only for ARC700 or ARCv2\");\n+      error (\"%<-mno-mpy%> supported only for ARC700 or ARCv2\");\n \n   if (!TARGET_DPFP && TARGET_DPFP_DISABLE_LRSR)\n-      error (\"-mno-dpfp-lrsr supported only with -mdpfp\");\n+      error (\"%<-mno-dpfp-lrsr%> supported only with %<-mdpfp%>\");\n \n   /* FPX-1. No fast and compact together.  */\n   if ((TARGET_DPFP_FAST_SET && TARGET_DPFP_COMPACT_SET)\n@@ -945,7 +945,7 @@ arc_init (void)\n \n   /* FPX-2. No fast-spfp for arc600 or arc601.  */\n   if (TARGET_SPFP_FAST_SET && TARGET_ARC600_FAMILY)\n-    error (\"-mspfp_fast not available on ARC600 or ARC601\");\n+    error (\"%<-mspfp_fast%> not available on ARC600 or ARC601\");\n \n   /* FPX-4.  No FPX extensions mixed with FPU extensions.  */\n   if ((TARGET_DPFP_FAST_SET || TARGET_DPFP_COMPACT_SET || TARGET_SPFP)\n@@ -1110,7 +1110,7 @@ parse_mrgf_banked_regs_option (const char *arg)\n   if (errno != 0 || *arg == '\\0' || *end_ptr != '\\0'\n       || (val != 0 && val != 4 && val != 8 && val != 16 && val != 32))\n     {\n-      error (\"invalid number in -mrgf-banked-regs=%s \"\n+      error (\"invalid number in %<-mrgf-banked-regs=%s%> \"\n \t     \"valid values are 0, 4, 8, 16, or 32\", arg);\n       return;\n     }\n@@ -1172,15 +1172,17 @@ arc_override_options (void)\n \t      irq_range (opt->arg);\n \t    else\n \t      warning (OPT_mirq_ctrl_saved_,\n-\t\t       \"option -mirq-ctrl-saved valid only for ARC v2 processors\");\n+\t\t       \"option %<-mirq-ctrl-saved%> valid only \"\n+\t\t       \"for ARC v2 processors\");\n \t    break;\n \n \t  case OPT_mrgf_banked_regs_:\n \t    if (TARGET_V2)\n \t      parse_mrgf_banked_regs_option (opt->arg);\n \t    else\n \t      warning (OPT_mrgf_banked_regs_,\n-\t\t       \"option -mrgf-banked-regs valid only for ARC v2 processors\");\n+\t\t       \"option %<-mrgf-banked-regs%> valid only for \"\n+\t\t       \"ARC v2 processors\");\n \t    break;\n \n \t  default:\n@@ -6791,15 +6793,15 @@ arc_expand_builtin_aligned (tree exp)\n       /* If we can't fold the alignment to a constant integer\n \t whilst optimizing, this is probably a user error.  */\n       if (optimize)\n-\twarning (0, \"__builtin_arc_aligned with non-constant alignment\");\n+\twarning (0, \"%<__builtin_arc_aligned%> with non-constant alignment\");\n     }\n   else\n     {\n       HOST_WIDE_INT alignTest = INTVAL (op1);\n       /* Check alignTest is positive, and a power of two.  */\n       if (alignTest <= 0 || alignTest != (alignTest & -alignTest))\n \t{\n-\t  error (\"invalid alignment value for __builtin_arc_aligned\");\n+\t  error (\"invalid alignment value for %<__builtin_arc_aligned%>\");\n \t  return NULL_RTX;\n \t}\n "}, {"sha": "55bbb48709765f17b962b99cf97ff1865270a52e", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2514,7 +2514,7 @@ arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n     {\n       fatal_error (input_location,\n \t\t   \"You must enable NEON instructions\"\n-\t\t   \" (e.g. -mfloat-abi=softfp -mfpu=neon)\"\n+\t\t   \" (e.g. %<-mfloat-abi=softfp%> %<-mfpu=neon%>)\"\n \t\t   \" to use these intrinsics.\");\n       return const0_rtx;\n     }\n@@ -2612,7 +2612,8 @@ arm_expand_builtin (tree exp,\n     {\n       fatal_error (input_location,\n \t\t   \"You must enable crypto instructions\"\n-\t\t   \" (e.g. include -mfloat-abi=softfp -mfpu=crypto-neon...)\"\n+\t\t   \" (e.g. include %<-mfloat-abi=softfp%> \"\n+\t\t   \"%<-mfpu=crypto-neon%>)\"\n \t\t   \" to use these intrinsics.\");\n       return const0_rtx;\n     }"}, {"sha": "67f1a9c8e2d2d7a0cbbe6bd38e4ac4d259b25df7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2884,14 +2884,15 @@ arm_option_check_internal (struct gcc_options *opts)\n       && write_symbols != NO_DEBUG\n       && !TARGET_APCS_FRAME\n       && (TARGET_DEFAULT & MASK_APCS_FRAME))\n-    warning (0, \"-g with -mno-apcs-frame may not give sensible debugging\");\n+    warning (0, \"%<-g%> with %<-mno-apcs-frame%> may not give sensible \"\n+\t     \"debugging\");\n \n   /* iWMMXt unsupported under Thumb mode.  */\n   if (TARGET_THUMB_P (flags) && TARGET_IWMMXT)\n     error (\"iWMMXt unsupported under Thumb mode\");\n \n   if (TARGET_HARD_TP && TARGET_THUMB1_P (flags))\n-    error (\"cannot use -mtp=cp15 with 16-bit Thumb\");\n+    error (\"cannot use %<-mtp=cp15%> with 16-bit Thumb\");\n \n   if (TARGET_THUMB_P (flags) && TARGET_VXWORKS_RTP && flag_pic)\n     {\n@@ -2913,7 +2914,7 @@ arm_option_check_internal (struct gcc_options *opts)\n       /* Cannot load addresses: -mslow-flash-data forbids literal pool and\n \t -mword-relocations forbids relocation of MOVT/MOVW.  */\n       if (target_word_relocations)\n-\terror (\"%s incompatible with -mword-relocations\", flag);\n+\terror (\"%s incompatible with %<-mword-relocations%>\", flag);\n     }\n }\n \n@@ -3181,7 +3182,8 @@ arm_configure_build_target (struct arm_build_target *target,\n \t  if (!bitmap_empty_p (isa_delta))\n \t    {\n \t      if (warn_compatible)\n-\t\twarning (0, \"switch -mcpu=%s conflicts with -march=%s switch\",\n+\t\twarning (0, \"switch %<-mcpu=%s%> conflicts \"\n+\t\t\t \"with %<-march=%s%> switch\",\n \t\t\t arm_selected_cpu->common.name,\n \t\t\t arm_selected_arch->common.name);\n \t      /* -march wins for code generation.\n@@ -3406,15 +3408,16 @@ arm_option_override (void)\n \n   if (TARGET_APCS_STACK && !TARGET_APCS_FRAME)\n     {\n-      warning (0, \"-mapcs-stack-check incompatible with -mno-apcs-frame\");\n+      warning (0, \"%<-mapcs-stack-check%> incompatible with \"\n+\t       \"%<-mno-apcs-frame%>\");\n       target_flags |= MASK_APCS_FRAME;\n     }\n \n   if (TARGET_POKE_FUNCTION_NAME)\n     target_flags |= MASK_APCS_FRAME;\n \n   if (TARGET_APCS_REENT && flag_pic)\n-    error (\"-fpic and -mapcs-reent are incompatible\");\n+    error (\"%<-fpic%> and %<-mapcs-reent%> are incompatible\");\n \n   if (TARGET_APCS_REENT)\n     warning (0, \"APCS reentrant code not supported.  Ignored\");\n@@ -3475,7 +3478,7 @@ arm_option_override (void)\n   if (flag_pic && TARGET_SINGLE_PIC_BASE)\n     {\n       if (TARGET_VXWORKS_RTP)\n-\twarning (0, \"RTP PIC is incompatible with -msingle-pic-base\");\n+\twarning (0, \"RTP PIC is incompatible with %<-msingle-pic-base%>\");\n       arm_pic_register = (TARGET_APCS_STACK || TARGET_AAPCS_BASED) ? 9 : 10;\n     }\n \n@@ -3487,7 +3490,7 @@ arm_option_override (void)\n       int pic_register = decode_reg_name (arm_pic_register_string);\n \n       if (!flag_pic)\n-\twarning (0, \"-mpic-register= is useless without -fpic\");\n+\twarning (0, \"%<-mpic-register=%> is useless without %<-fpic%>\");\n \n       /* Prevent the user from choosing an obviously stupid PIC register.  */\n       else if (pic_register < 0 || call_used_regs[pic_register]\n@@ -3518,7 +3521,8 @@ arm_option_override (void)\n   if (flag_reorder_blocks_and_partition)\n     {\n       inform (input_location,\n-\t      \"-freorder-blocks-and-partition not supported on this architecture\");\n+\t      \"%<-freorder-blocks-and-partition%> not supported \"\n+\t      \"on this architecture\");\n       flag_reorder_blocks_and_partition = 0;\n       flag_reorder_blocks = 1;\n     }\n@@ -3733,10 +3737,10 @@ arm_options_perform_arch_sanity_checks (void)\n   if (TARGET_AAPCS_BASED)\n     {\n       if (TARGET_CALLER_INTERWORKING)\n-\terror (\"AAPCS does not support -mcaller-super-interworking\");\n+\terror (\"AAPCS does not support %<-mcaller-super-interworking%>\");\n       else\n \tif (TARGET_CALLEE_INTERWORKING)\n-\t  error (\"AAPCS does not support -mcallee-super-interworking\");\n+\t  error (\"AAPCS does not support %<-mcallee-super-interworking%>\");\n     }\n \n   /* __fp16 support currently assumes the core has ldrh.  */\n@@ -3760,15 +3764,15 @@ arm_options_perform_arch_sanity_checks (void)\n \t{\n \t  arm_pcs_default = ARM_PCS_AAPCS_VFP;\n \t  if (!bitmap_bit_p (arm_active_target.isa, isa_bit_vfpv2))\n-\t    error (\"-mfloat-abi=hard: selected processor lacks an FPU\");\n+\t    error (\"%<-mfloat-abi=hard%>: selected processor lacks an FPU\");\n \t}\n       else\n \tarm_pcs_default = ARM_PCS_AAPCS;\n     }\n   else\n     {\n       if (arm_float_abi == ARM_FLOAT_ABI_HARD)\n-\tsorry (\"-mfloat-abi=hard and VFP\");\n+\tsorry (\"%<-mfloat-abi=hard%> and VFP\");\n \n       if (arm_abi == ARM_ABI_APCS)\n \tarm_pcs_default = ARM_PCS_APCS;\n@@ -7039,8 +7043,8 @@ arm_handle_cmse_nonsecure_entry (tree *node, tree name,\n   if (!use_cmse)\n     {\n       *no_add_attrs = true;\n-      warning (OPT_Wattributes, \"%qE attribute ignored without -mcmse option.\",\n-\t       name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored without %<-mcmse%> \"\n+\t       \"option.\", name);\n       return NULL_TREE;\n     }\n \n@@ -7091,8 +7095,8 @@ arm_handle_cmse_nonsecure_call (tree *node, tree name,\n   if (!use_cmse)\n     {\n       *no_add_attrs = true;\n-      warning (OPT_Wattributes, \"%qE attribute ignored without -mcmse option.\",\n-\t       name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored without %<-mcmse%> \"\n+\t       \"option.\", name);\n       return NULL_TREE;\n     }\n \n@@ -8882,7 +8886,7 @@ arm_tls_referenced_p (rtx x)\n \t     currently implement these if a literal pool is disabled.  */\n \t  if (arm_disable_literal_pool)\n \t    sorry (\"accessing thread-local storage is not currently supported \"\n-\t\t   \"with -mpure-code or -mslow-flash-data\");\n+\t\t   \"with %<-mpure-code%> or %<-mslow-flash-data%>\");\n \n \t  return true;\n \t}\n@@ -25414,7 +25418,7 @@ thumb1_expand_prologue (void)\n   if ((flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n        || flag_stack_clash_protection)\n       && size)\n-    sorry (\"-fstack-check=specific for Thumb-1\");\n+    sorry (\"%<-fstack-check=specific%> for Thumb-1\");\n \n   amount = offsets->outgoing_args - offsets->saved_regs;\n   amount -= 4 * thumb1_extra_regs_pushed (offsets, true);"}, {"sha": "a9f72b314c2d397d2892a624c87e076682bcac09", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -762,13 +762,13 @@ avr_option_override (void)\n     }\n \n   if (flag_pic == 1)\n-    warning (OPT_fpic, \"-fpic is not supported\");\n+    warning (OPT_fpic, \"%<-fpic%> is not supported\");\n   if (flag_pic == 2)\n-    warning (OPT_fPIC, \"-fPIC is not supported\");\n+    warning (OPT_fPIC, \"%<-fPIC%> is not supported\");\n   if (flag_pie == 1)\n-    warning (OPT_fpie, \"-fpie is not supported\");\n+    warning (OPT_fpie, \"%<-fpie%> is not supported\");\n   if (flag_pie == 2)\n-    warning (OPT_fPIE, \"-fPIE is not supported\");\n+    warning (OPT_fPIE, \"%<-fPIE%> is not supported\");\n \n #if !defined (HAVE_AS_AVR_MGCCISR_OPTION)\n   avr_gasisr_prologues = 0;"}, {"sha": "97c2c12d5ce9f75dc320595a84689ea998463987", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2379,16 +2379,19 @@ bfin_option_override (void)\n \n #ifdef SUBTARGET_FDPIC_NOT_SUPPORTED\n   if (TARGET_FDPIC)\n-    error (\"-mfdpic is not supported, please use a bfin-linux-uclibc target\");\n+    error (\"%<-mfdpic%> is not supported, please use a bfin-linux-uclibc \"\n+\t   \"target\");\n #endif\n \n   /* Library identification */\n   if (global_options_set.x_bfin_library_id && ! TARGET_ID_SHARED_LIBRARY)\n-    error (\"-mshared-library-id= specified without -mid-shared-library\");\n+    error (\"%<-mshared-library-id=%> specified without \"\n+\t   \"%<-mid-shared-library%>\");\n \n   if (stack_limit_rtx && TARGET_FDPIC)\n     {\n-      warning (0, \"-fstack-limit- options are ignored with -mfdpic; use -mstack-check-l1\");\n+      warning (0, \"%<-fstack-limit-%> options are ignored with %<-mfdpic%>; \"\n+\t       \"use %<-mstack-check-l1%>\");\n       stack_limit_rtx = NULL_RTX;\n     }\n \n@@ -2401,7 +2404,7 @@ bfin_option_override (void)\n   /* Don't allow the user to specify -mid-shared-library and -msep-data\n      together, as it makes little sense from a user's point of view...  */\n   if (TARGET_SEP_DATA && TARGET_ID_SHARED_LIBRARY)\n-    error (\"cannot specify both -msep-data and -mid-shared-library\");\n+    error (\"cannot specify both %<-msep-data%> and %<-mid-shared-library%>\");\n   /* ... internally, however, it's nearly the same.  */\n   if (TARGET_SEP_DATA)\n     target_flags |= MASK_ID_SHARED_LIBRARY | MASK_LEAF_ID_SHARED_LIBRARY;\n@@ -2421,16 +2424,16 @@ bfin_option_override (void)\n     flag_pic = 0;\n \n   if (TARGET_MULTICORE && bfin_cpu_type != BFIN_CPU_BF561)\n-    error (\"-mmulticore can only be used with BF561\");\n+    error (\"%<-mmulticore%> can only be used with BF561\");\n \n   if (TARGET_COREA && !TARGET_MULTICORE)\n-    error (\"-mcorea should be used with -mmulticore\");\n+    error (\"%<-mcorea%> should be used with %<-mmulticore%>\");\n \n   if (TARGET_COREB && !TARGET_MULTICORE)\n-    error (\"-mcoreb should be used with -mmulticore\");\n+    error (\"%<-mcoreb%> should be used with %<-mmulticore%>\");\n \n   if (TARGET_COREA && TARGET_COREB)\n-    error (\"-mcorea and -mcoreb can%'t be used together\");\n+    error (\"%<-mcorea%> and %<-mcoreb%> can%'t be used together\");\n \n   flag_schedule_insns = 0;\n "}, {"sha": "9a07c4013659c58ae98353b85361a7c8568e3053", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -239,7 +239,8 @@ c6x_option_override (void)\n \n   if (flag_pic && !TARGET_DSBT)\n     {\n-      error (\"-fpic and -fPIC not supported without -mdsbt on this target\");\n+      error (\"%<-fpic%> and %<-fPIC%> not supported without %<-mdsbt%> \"\n+\t     \"on this target\");\n       flag_pic = 0;\n     }\n   c6x_initial_flag_pic = flag_pic;"}, {"sha": "42b9e041fd06dc03223f47ed77c992c8e87c19a3", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -306,7 +306,8 @@ cr16_override_options (void)\n \t    error (\"data-model=far not valid for cr16c architecture\");\n \t}\n       else\n-\terror (\"invalid data model option -mdata-model=%s\", cr16_data_model);\n+\terror (\"invalid data model option %<-mdata-model=%s%>\",\n+\t       cr16_data_model);\n     }\n   else\n     data_model = DM_DEFAULT;"}, {"sha": "591941b771b835d932583987fd56ac1d8f2d696b", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2651,7 +2651,8 @@ cris_option_override (void)\n \n       /* Do some sanity checking.  */\n       if (cris_max_stackframe < 0 || cris_max_stackframe > 0x20000000)\n-\tinternal_error (\"-max-stackframe=%d is not usable, not between 0 and %d\",\n+\tinternal_error (\"%<-max-stackframe=%d%> is not usable, \"\n+\t\t\t\"not between 0 and %d\",\n \t\t\tcris_max_stackframe, 0x20000000);\n     }\n \n@@ -2679,8 +2680,8 @@ cris_option_override (void)\n \tcris_cpu_version = 10;\n \n       if (cris_cpu_version < 0 || cris_cpu_version > 32)\n-\terror (\"unknown CRIS version specification in -march= or -mcpu= : %s\",\n-\t       cris_cpu_str);\n+\terror (\"unknown CRIS version specification in %<-march=%> or \"\n+\t       \"%<-mcpu=%> : %s\", cris_cpu_str);\n \n       /* Set the target flags.  */\n       if (cris_cpu_version >= CRIS_CPU_ETRAX4)\n@@ -2715,7 +2716,7 @@ cris_option_override (void)\n \tcris_tune = 10;\n \n       if (cris_tune < 0 || cris_tune > 32)\n-\terror (\"unknown CRIS cpu version specification in -mtune= : %s\",\n+\terror (\"unknown CRIS cpu version specification in %<-mtune=%> : %s\",\n \t       cris_tune_str);\n \n       if (cris_tune >= CRIS_CPU_SVINTO)\n@@ -2736,7 +2737,8 @@ cris_option_override (void)\n \t further errors.  */\n       if (! TARGET_LINUX)\n \t{\n-\t  error (\"-fPIC and -fpic are not supported in this configuration\");\n+\t  error (\"%<-fPIC%> and %<-fpic%> are not supported \"\n+\t\t \"in this configuration\");\n \t  flag_pic = 0;\n \t}\n "}, {"sha": "e4ac93323c0287d8d3d8191d51260983490fcac1", "filename": "gcc/config/csky/csky.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fcsky%2Fcsky.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fcsky%2Fcsky.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -6035,7 +6035,7 @@ csky_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \n   if (!TARGET_ISTACK)\n     {\n-      warning (OPT_Wattributes, \"%qE attribute ignored without -mistack\",\n+      warning (OPT_Wattributes, \"%qE attribute ignored without %<-mistack%>\",\n \t       name);\n       *no_add_attrs = true;\n       return NULL_TREE;"}, {"sha": "d74d9a5873525e94fdb4be0f9006469394f74ed0", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -715,7 +715,7 @@ macosx_version_as_macro (void)\n   return version_macro;\n \n  fail:\n-  error (\"unknown value %qs of -mmacosx-version-min\",\n+  error (\"unknown value %qs of %<-mmacosx-version-min%>\",\n          darwin_macosx_version_min);\n   return \"1000\";\n }"}, {"sha": "f62f1c79bdd98c303f72a061f0d22067b9977112", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3173,7 +3173,7 @@ darwin_override_options (void)\n   if (global_options_set.x_dwarf_split_debug_info)\n     {\n       inform (input_location,\n-\t      \"-gsplit-dwarf is not supported on this platform, ignored\");\n+\t      \"%<-gsplit-dwarf%> is not supported on this platform, ignored\");\n       dwarf_split_debug_info = 0;\n       global_options_set.x_dwarf_split_debug_info = 0;\n     }\n@@ -3203,8 +3203,8 @@ darwin_override_options (void)\n \t       && !global_options_set.x_flag_asynchronous_unwind_tables)))\n     {\n       inform (input_location,\n-\t      \"-freorder-blocks-and-partition does not work with exceptions \"\n-\t      \"on this architecture\");\n+\t      \"%<-freorder-blocks-and-partition%> does not work with \"\n+\t      \"exceptions on this architecture\");\n       flag_reorder_blocks_and_partition = 0;\n       flag_reorder_blocks = 1;\n     }"}, {"sha": "71bf819ee7d316462b32245a4644e33d0a44e735", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -9115,7 +9115,7 @@ frv_expand_builtin (tree exp,\n \n   if (fcode < FRV_BUILTIN_FIRST_NONMEDIA && !TARGET_MEDIA)\n     {\n-      error (\"media functions are not available unless -mmedia is used\");\n+      error (\"media functions are not available unless %<-mmedia%> is used\");\n       return NULL_RTX;\n     }\n "}, {"sha": "b68ee395a0798e0d6fd04c08e85c60c72943a132", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -326,7 +326,7 @@ h8300_option_override (void)\n #ifndef OBJECT_FORMAT_ELF\n   if (TARGET_H8300SX)\n     {\n-      error (\"-msx is not supported in coff\");\n+      error (\"%<-msx%> is not supported in coff\");\n       target_flags |= MASK_H8300S;\n     }\n #endif\n@@ -348,44 +348,44 @@ h8300_option_override (void)\n \n   if (!TARGET_H8300S && TARGET_MAC)\n     {\n-      error (\"-ms2600 is used without -ms\");\n+      error (\"%<-ms2600%> is used without %<-ms%>\");\n       target_flags |= MASK_H8300S_1;\n     }\n \n   if (TARGET_H8300 && TARGET_NORMAL_MODE)\n     {\n-      error (\"-mn is used without -mh or -ms or -msx\");\n+      error (\"%<-mn%> is used without %<-mh%> or %<-ms%> or %<-msx%>\");\n       target_flags ^= MASK_NORMAL_MODE;\n     }\n \n   if (! TARGET_H8300S &&  TARGET_EXR)\n     {\n-      error (\"-mexr is used without -ms\");\n+      error (\"%<-mexr%> is used without %<-ms%>\");\n       target_flags |= MASK_H8300S_1;\n     }\n \n   if (TARGET_H8300 && TARGET_INT32)\n    {\n-      error (\"-mint32 is not supported for H8300 and H8300L targets\");\n+      error (\"%<-mint32%> is not supported for H8300 and H8300L targets\");\n       target_flags ^= MASK_INT32;\n    }\n \n  if ((!TARGET_H8300S  &&  TARGET_EXR) && (!TARGET_H8300SX && TARGET_EXR))\n    {\n-      error (\"-mexr is used without -ms or -msx\");\n+      error (\"%<-mexr%> is used without %<-ms%> or %<-msx%>\");\n       target_flags |= MASK_H8300S_1;\n    }\n \n  if ((!TARGET_H8300S  &&  TARGET_NEXR) && (!TARGET_H8300SX && TARGET_NEXR))\n    {\n-      warning (OPT_mno_exr, \"-mno-exr valid only with -ms or -msx    \\\n-               - Option ignored!\");\n+      warning (OPT_mno_exr, \"%<-mno-exr%> valid only with %<-ms%> or \"\n+\t       \"%<-msx%> - Option ignored!\");\n    }\n \n #ifdef H8300_LINUX \n  if ((TARGET_NORMAL_MODE))\n    {\n-      error (\"-mn is not supported for linux targets\");\n+      error (\"%<-mn%> is not supported for linux targets\");\n       target_flags ^= MASK_NORMAL_MODE;\n    }\n #endif"}, {"sha": "a4a7fbcfbe02ab320619b77a9c0892c1b2b5a683", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3553,8 +3553,8 @@ parse_mtune_ctrl_str (bool dump)\n             }\n         }\n       if (i == X86_TUNE_LAST)\n-        error (\"unknown parameter to option -mtune-ctrl: %s\",\n-               clear ? curr_feature_string - 1 : curr_feature_string);\n+\terror (\"unknown parameter to option %<-mtune-ctrl%>: %s\",\n+\t       clear ? curr_feature_string - 1 : curr_feature_string);\n       curr_feature_string = next_feature_string;\n     }\n   while (curr_feature_string);\n@@ -3750,7 +3750,7 @@ ix86_option_override_internal (bool main_args_p,\n       && !TARGET_64BIT_P (opts->x_ix86_isa_flags))\n     {\n       /* rep; movq isn't available in 32-bit code.  */\n-      error (\"-mstringop-strategy=rep_8byte not supported for 32-bit code\");\n+      error (\"%<-mstringop-strategy=rep_8byte%> not supported for 32-bit code\");\n       opts->x_ix86_stringop_alg = no_stringop;\n     }\n \n@@ -3779,7 +3779,7 @@ ix86_option_override_internal (bool main_args_p,\n     opts->x_ix86_abi = DEFAULT_ABI;\n \n   if (opts->x_ix86_abi == MS_ABI && TARGET_X32_P (opts->x_ix86_isa_flags))\n-    error (\"-mabi=ms not supported with X32 ABI\");\n+    error (\"%<-mabi=ms%> not supported with X32 ABI\");\n   gcc_assert (opts->x_ix86_abi == SYSV_ABI || opts->x_ix86_abi == MS_ABI);\n \n   if ((opts->x_flag_sanitize & SANITIZE_USER_ADDRESS) && opts->x_ix86_abi == MS_ABI)\n@@ -3871,7 +3871,7 @@ ix86_option_override_internal (bool main_args_p,\n     }\n   if (TARGET_MACHO && opts->x_ix86_asm_dialect == ASM_INTEL)\n     {\n-      error (\"-masm=intel not supported in this configuration\");\n+      error (\"%<-masm=intel%> not supported in this configuration\");\n       opts->x_ix86_asm_dialect = ASM_ATT;\n     }\n   if ((TARGET_64BIT_P (opts->x_ix86_isa_flags) != 0)\n@@ -4326,12 +4326,12 @@ ix86_option_override_internal (bool main_args_p,\n   if (opts_set->x_ix86_regparm)\n     {\n       if (TARGET_64BIT_P (opts->x_ix86_isa_flags))\n-\twarning (0, \"-mregparm is ignored in 64-bit mode\");\n+\twarning (0, \"%<-mregparm%> is ignored in 64-bit mode\");\n       else if (TARGET_IAMCU_P (opts->x_target_flags))\n-\twarning (0, \"-mregparm is ignored for Intel MCU psABI\");\n+\twarning (0, \"%<-mregparm%> is ignored for Intel MCU psABI\");\n       if (opts->x_ix86_regparm > REGPARM_MAX)\n \t{\n-\t  error (\"-mregparm=%d is not between 0 and %d\",\n+\t  error (\"%<-mregparm=%d%> is not between 0 and %d\",\n \t\t opts->x_ix86_regparm, REGPARM_MAX);\n \t  opts->x_ix86_regparm = 0;\n \t}\n@@ -4439,10 +4439,10 @@ ix86_option_override_internal (bool main_args_p,\n \t  || opts->x_ix86_preferred_stack_boundary_arg > max)\n \t{\n \t  if (min == max)\n-\t    error (\"-mpreferred-stack-boundary is not supported \"\n+\t    error (\"%<-mpreferred-stack-boundary%> is not supported \"\n \t\t   \"for this target\");\n \t  else\n-\t    error (\"-mpreferred-stack-boundary=%d is not between %d and %d\",\n+\t    error (\"%<-mpreferred-stack-boundary=%d%> is not between %d and %d\",\n \t\t   opts->x_ix86_preferred_stack_boundary_arg, min, max);\n \t}\n       else\n@@ -4465,7 +4465,7 @@ ix86_option_override_internal (bool main_args_p,\n \n       if (opts->x_ix86_incoming_stack_boundary_arg < min\n \t  || opts->x_ix86_incoming_stack_boundary_arg > 12)\n-\terror (\"-mincoming-stack-boundary=%d is not between %d and 12\",\n+\terror (\"%<-mincoming-stack-boundary=%d%> is not between %d and 12\",\n \t       opts->x_ix86_incoming_stack_boundary_arg, min);\n       else\n \t{\n@@ -4478,10 +4478,10 @@ ix86_option_override_internal (bool main_args_p,\n \n #ifndef NO_PROFILE_COUNTERS\n   if (flag_nop_mcount)\n-    error (\"-mnop-mcount is not compatible with this target\");\n+    error (\"%<-mnop-mcount%> is not compatible with this target\");\n #endif\n   if (flag_nop_mcount && flag_pic)\n-    error (\"-mnop-mcount is not implemented for -fPIC\");\n+    error (\"%<-mnop-mcount%> is not implemented for %<-fPIC%>\");\n \n   /* Accept -msseregparm only if at least SSE support is enabled.  */\n   if (TARGET_SSEREGPARM_P (opts->x_target_flags)\n@@ -4683,14 +4683,14 @@ ix86_option_override_internal (bool main_args_p,\n     {\n       if (!TARGET_64BIT_P (opts->x_ix86_isa_flags) && opts->x_flag_pic\n \t  && opts->x_flag_fentry)\n-\tsorry (\"-mfentry isn%'t supported for 32-bit in combination \"\n-\t       \"with -fpic\");\n+\tsorry (\"%<-mfentry%> isn%'t supported for 32-bit in combination \"\n+\t       \"with %<-fpic%>\");\n       else if (TARGET_SEH && !opts->x_flag_fentry)\n-\tsorry (\"-mno-fentry isn%'t compatible with SEH\");\n+\tsorry (\"%<-mno-fentry%> isn%'t compatible with SEH\");\n     }\n \n   if (TARGET_SEH && TARGET_CALL_MS2SYSV_XLOGUES)\n-    sorry (\"-mcall-ms2sysv-xlogues isn%'t currently supported with SEH\");\n+    sorry (\"%<-mcall-ms2sysv-xlogues%> isn%'t currently supported with SEH\");\n \n   if (!(opts_set->x_target_flags & MASK_VZEROUPPER)\n       && TARGET_EMIT_VZEROUPPER)\n@@ -4755,7 +4755,7 @@ ix86_option_override_internal (bool main_args_p,\n \n \t      if (i == ARRAY_SIZE (recip_options))\n \t\t{\n-\t\t  error (\"unknown option for -mrecip=%s\", q);\n+\t\t  error (\"unknown option for %<-mrecip=%s%>\", q);\n \t\t  invert = false;\n \t\t  mask = RECIP_MASK_NONE;\n \t\t}\n@@ -4815,12 +4815,12 @@ ix86_option_override_internal (bool main_args_p,\n \n       if (!*str || *endp || errno)\n \terror (\"%qs is not a valid number \"\n-\t       \"in -mstack-protector-guard-offset=\", str);\n+\t       \"in %<-mstack-protector-guard-offset=%>\", str);\n \n       if (!IN_RANGE (offset, HOST_WIDE_INT_C (-0x80000000),\n \t\t     HOST_WIDE_INT_C (0x7fffffff)))\n \terror (\"%qs is not a valid offset \"\n-\t       \"in -mstack-protector-guard-offset=\", str);\n+\t       \"in %<-mstack-protector-guard-offset=%>\", str);\n \n       opts->x_ix86_stack_protector_guard_offset = offset;\n     }\n@@ -4848,7 +4848,7 @@ ix86_option_override_internal (bool main_args_p,\n \n       if (seg == ADDR_SPACE_GENERIC)\n \terror (\"%qs is not a valid base register \"\n-\t       \"in -mstack-protector-guard-reg=\",\n+\t       \"in %<-mstack-protector-guard-reg=%>\",\n \t       opts->x_ix86_stack_protector_guard_reg_str);\n \n       opts->x_ix86_stack_protector_guard_reg = seg;\n@@ -11336,7 +11336,7 @@ static void warn_once_call_ms2sysv_xlogues (const char *feature)\n   static bool warned_once = false;\n   if (!warned_once)\n     {\n-      warning (0, \"-mcall-ms2sysv-xlogues is not compatible with %s\",\n+      warning (0, \"%<-mcall-ms2sysv-xlogues%> is not compatible with %s\",\n \t       feature);\n       warned_once = true;\n     }\n@@ -13336,7 +13336,7 @@ ix86_expand_prologue (void)\n          prologue variant. If so sorry.  */\n       if (crtl->profile && flag_fentry != 0)\n         sorry (\"ms_hook_prologue attribute isn%'t compatible \"\n-\t       \"with -mfentry for 32-bit\");\n+\t       \"with %<-mfentry%> for 32-bit\");\n \n       /* In ix86_asm_output_function_label we emitted:\n \t 8b ff     movl.s %edi,%edi\n@@ -14715,7 +14715,7 @@ split_stack_prologue_scratch_regno (void)\n \t{\n \t  if (DECL_STATIC_CHAIN (cfun->decl))\n \t    {\n-\t      sorry (\"-fsplit-stack does not support fastcall with \"\n+\t      sorry (\"%<-fsplit-stack%> does not support fastcall with \"\n \t\t     \"nested function\");\n \t      return INVALID_REGNUM;\n \t    }\n@@ -14735,7 +14735,7 @@ split_stack_prologue_scratch_regno (void)\n \t    {\n \t      if (regparm >= 2)\n \t\t{\n-\t\t  sorry (\"-fsplit-stack does not support 2 register \"\n+\t\t  sorry (\"%<-fsplit-stack%> does not support 2 register \"\n \t\t\t \"parameters for a nested function\");\n \t\t  return INVALID_REGNUM;\n \t\t}\n@@ -14746,7 +14746,7 @@ split_stack_prologue_scratch_regno (void)\n \t{\n \t  /* FIXME: We could make this work by pushing a register\n \t     around the addition and comparison.  */\n-\t  sorry (\"-fsplit-stack does not support 3 register parameters\");\n+\t  sorry (\"%<-fsplit-stack%> does not support 3 register parameters\");\n \t  return INVALID_REGNUM;\n \t}\n     }\n@@ -29779,7 +29779,7 @@ ix86_warn_parameter_passing_abi (cumulative_args_t cum_v, tree type)\n     return;\n \n   warning (OPT_Wabi, \"empty class %qT parameter passing ABI \"\n-\t   \"changes in -fabi-version=12 (GCC 8)\", type);\n+\t   \"changes in %<-fabi-version=12%> (GCC 8)\", type);\n \n   /* Only warn once.  */\n   cum->warn_empty = false;"}, {"sha": "e8d905e2249400d70ef5dfedeb9839d7ae7b5292", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -6024,7 +6024,7 @@ fix_range (const char *const_str)\n       dash = strchr (str, '-');\n       if (!dash)\n \t{\n-\t  warning (0, \"value of -mfixed-range must have form REG1-REG2\");\n+\t  warning (0, \"value of %<-mfixed-range%> must have form REG1-REG2\");\n \t  return;\n \t}\n       *dash = '\\0';"}, {"sha": "7a0d6f7c62b4c3fd93fe0e6e6985b879854b7810", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -524,7 +524,7 @@ m68k_option_override (void)\n       if (m68k_arch_entry\n \t  && (m68k_arch_entry->microarch != m68k_cpu_entry->microarch\n \t      || (m68k_arch_entry->flags & ~m68k_cpu_entry->flags) != 0))\n-\twarning (0, \"-mcpu=%s conflicts with -march=%s\",\n+\twarning (0, \"%<-mcpu=%s%> conflicts with %<-march=%s%>\",\n \t\t m68k_cpu_entry->name, m68k_arch_entry->name);\n \n       entry = m68k_cpu_entry;\n@@ -583,7 +583,7 @@ m68k_option_override (void)\n    * both specified together.  Doing so simply doesn't make sense.\n    */\n   if (TARGET_SEP_DATA && TARGET_ID_SHARED_LIBRARY)\n-    error (\"cannot specify both -msep-data and -mid-shared-library\");\n+    error (\"cannot specify both %<-msep-data%> and %<-mid-shared-library%>\");\n \n   /* If we're generating code for a separate A5 relative data segment,\n    * we've got to enable -fPIC as well.  This might be relaxable to\n@@ -595,7 +595,7 @@ m68k_option_override (void)\n   /* -mpcrel -fPIC uses 32-bit pc-relative displacements.  Raise an\n      error if the target does not support them.  */\n   if (TARGET_PCREL && !TARGET_68020 && flag_pic == 2)\n-    error (\"-mpcrel -fPIC is not currently supported on selected cpu\");\n+    error (\"%<-mpcrel%> %<-fPIC%> is not currently supported on selected cpu\");\n \n   /* ??? A historic way of turning on pic, or is this intended to\n      be an embedded thing that doesn't have the same name binding\n@@ -659,22 +659,22 @@ m68k_option_override (void)\n   int label_alignment = align_labels.levels[0].get_value ();\n   if (label_alignment > 2)\n     {\n-      warning (0, \"-falign-labels=%d is not supported\", label_alignment);\n+      warning (0, \"%<-falign-labels=%d%> is not supported\", label_alignment);\n       str_align_labels = \"1\";\n     }\n \n   int loop_alignment = align_loops.levels[0].get_value ();\n   if (loop_alignment > 2)\n     {\n-      warning (0, \"-falign-loops=%d is not supported\", loop_alignment);\n+      warning (0, \"%<-falign-loops=%d%> is not supported\", loop_alignment);\n       str_align_loops = \"1\";\n     }\n #endif\n \n   if ((opt_fstack_limit_symbol_arg != NULL || opt_fstack_limit_register_no >= 0)\n       && !TARGET_68020)\n     {\n-      warning (0, \"-fstack-limit- options are not supported on this cpu\");\n+      warning (0, \"%<-fstack-limit-%> options are not supported on this cpu\");\n       opt_fstack_limit_symbol_arg = NULL;\n       opt_fstack_limit_register_no = -1;\n     }"}, {"sha": "70910fd1ddec4b23da9ceb5b5a764b5145fd9fe1", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1759,7 +1759,7 @@ microblaze_option_override (void)\n       flag_pic = 2;\n       if (!TARGET_SUPPORTS_PIC)\n         {\n-          error (\"-fPIC/-fpic not supported for this target\");\n+\t  error (\"%<-fPIC%>/%<-fpic%> not supported for this target\");\n           /* Clear it to avoid further errors.  */\n           flag_pic = 0;\n         }\n@@ -1771,7 +1771,7 @@ microblaze_option_override (void)\n   ver = microblaze_version_to_int (microblaze_select_cpu);\n   if (ver == -1)\n     {\n-      error (\"%qs is an invalid argument to -mcpu=\", microblaze_select_cpu);\n+      error (\"%qs is an invalid argument to %<-mcpu=%>\", microblaze_select_cpu);\n     }\n \n   ver = MICROBLAZE_VERSION_COMPARE (microblaze_select_cpu, \"v3.00.a\");\n@@ -1820,7 +1820,8 @@ microblaze_option_override (void)\n     {\n       if (TARGET_MULTIPLY_HIGH)\n \twarning (0,\n-\t\t \"-mxl-multiply-high can be used only with -mcpu=v6.00.a or greater\");\n+\t\t \"%<-mxl-multiply-high%> can be used only with \"\n+\t\t \"%<-mcpu=v6.00.a%> or greater\");\n     }\n \n   ver = MICROBLAZE_VERSION_COMPARE (microblaze_select_cpu, \"v8.10.a\");\n@@ -1836,18 +1837,20 @@ microblaze_option_override (void)\n   if (ver < 0)\n     {\n         if (TARGET_REORDER == 1)\n-          warning (0, \"-mxl-reorder can be used only with -mcpu=v8.30.a or greater\");\n+\t  warning (0, \"%<-mxl-reorder%> can be used only with \"\n+\t\t   \"%<-mcpu=v8.30.a%> or greater\");\n         TARGET_REORDER = 0;\n     }\n   else if ((ver == 0) && !TARGET_PATTERN_COMPARE)\n     {\n         if (TARGET_REORDER == 1)\n-          warning (0, \"-mxl-reorder requires -mxl-pattern-compare for -mcpu=v8.30.a\");\n+\t  warning (0, \"%<-mxl-reorder%> requires %<-mxl-pattern-compare%> for \"\n+\t\t   \"%<-mcpu=v8.30.a%>\");\n         TARGET_REORDER = 0;\n     }\n \n   if (TARGET_MULTIPLY_HIGH && TARGET_SOFT_MUL)\n-    error (\"-mxl-multiply-high requires -mno-xl-soft-mul\");\n+    error (\"%<-mxl-multiply-high%> requires %<-mno-xl-soft-mul%>\");\n \n   /* Always use DFA scheduler.  */\n   microblaze_sched_use_dfa = 1;"}, {"sha": "4b42077a3365fe6c7a69482cbe8486fe368e6d7f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -11951,7 +11951,7 @@ static void\n mips_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n {\n   if (TARGET_MIPS16)\n-    sorry (\"-fstack-check=specific not implemented for MIPS16\");\n+    sorry (\"%<-fstack-check=specific%> not implemented for MIPS16\");\n \n   /* See if we have a constant small number of probes to generate.  If so,\n      that's the easy case.  */\n@@ -19598,7 +19598,7 @@ mips_set_compression_mode (unsigned int compression_mode)\n \tsorry (\"MIPS16 PIC for ABIs other than o32 and o64\");\n \n       if (TARGET_XGOT)\n-\tsorry (\"MIPS16 -mxgot code\");\n+\tsorry (\"MIPS16 %<-mxgot%> code\");\n \n       if (TARGET_HARD_FLOAT_ABI && !TARGET_OLDABI)\n \tsorry (\"hard-float MIPS16 code for ABIs other than o32 and o64\");"}, {"sha": "c2136e223053b679ba89161e67b7538cb381b196", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -317,7 +317,8 @@ mmix_option_override (void)\n      labels.  */\n   if (flag_pic)\n     {\n-      warning (0, \"-f%s not supported: ignored\", (flag_pic > 1) ? \"PIC\" : \"pic\");\n+      warning (0, \"%<-f%s%> not supported: ignored\",\n+\t       (flag_pic > 1) ? \"PIC\" : \"pic\");\n       flag_pic = 0;\n     }\n }"}, {"sha": "51116f5c1bbd7174e2a0aabf1b2c230c6c9f0212", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -104,7 +104,7 @@ mn10300_option_override (void)\n       else if (strcasecmp (mn10300_tune_string, \"am34\") == 0)\n \tmn10300_tune_cpu = PROCESSOR_AM34;\n       else\n-\terror (\"-mtune= expects mn10300, am33, am33-2, or am34\");\n+\terror (\"%<-mtune=%> expects mn10300, am33, am33-2, or am34\");\n     }\n }\n "}, {"sha": "48d16a4d2ec7df45a343ddbe10b73928b947cb17", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -797,26 +797,31 @@ msp430_option_override (void)\n \t    if (msp430_warn_mcu)\n \t      {\n \t\tif (target_cpu&& msp430x != xisa)\n-\t\t  warning (0, \"MCU '%s' supports %s ISA but -mcpu option is set to %s\",\n+\t\t  warning (0, \"MCU '%s' supports %s ISA but %<-mcpu%> option \"\n+\t\t\t   \"is set to %s\",\n \t\t\t   target_mcu, xisa ? \"430X\" : \"430\", msp430x ? \"430X\" : \"430\");\n \n \t\tif (msp430_mcu_data[i].hwmpy == 0\n \t\t    && msp430_hwmult_type != MSP430_HWMULT_AUTO\n \t\t    && msp430_hwmult_type != MSP430_HWMULT_NONE)\n-\t\t  warning (0, \"MCU '%s' does not have hardware multiply support, but -mhwmult is set to %s\",\n+\t\t  warning (0, \"MCU '%s' does not have hardware multiply \"\n+\t\t\t   \"support, but %<-mhwmult%> is set to %s\",\n \t\t\t   target_mcu,\n \t\t\t   msp430_hwmult_type == MSP430_HWMULT_SMALL ? \"16-bit\"\n \t\t\t   : msp430_hwmult_type == MSP430_HWMULT_LARGE ? \"32-bit\" : \"f5series\");\n \t\telse if (msp430_hwmult_type == MSP430_HWMULT_SMALL\n \t\t    && msp430_mcu_data[i].hwmpy != 1\n \t\t    && msp430_mcu_data[i].hwmpy != 2 )\n-\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, but -mhwmult is set to 16-bit\",\n+\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, \"\n+\t\t\t   \"but %<-mhwmult%> is set to 16-bit\",\n \t\t\t   target_mcu, hwmult_name (msp430_mcu_data[i].hwmpy));\n \t\telse if (msp430_hwmult_type == MSP430_HWMULT_LARGE && msp430_mcu_data[i].hwmpy != 4)\n-\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, but -mhwmult is set to 32-bit\",\n+\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, \"\n+\t\t\t   \"but %<-mhwmult%> is set to 32-bit\",\n \t\t\t   target_mcu, hwmult_name (msp430_mcu_data[i].hwmpy));\n \t\telse if (msp430_hwmult_type == MSP430_HWMULT_F5SERIES && msp430_mcu_data[i].hwmpy != 8)\n-\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, but -mhwmult is set to f5series\",\n+\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, \"\n+\t\t\t   \"but %<-mhwmult%> is set to f5series\",\n \t\t\t   target_mcu, hwmult_name (msp430_mcu_data[i].hwmpy));\n \t      }\n \n@@ -834,13 +839,13 @@ msp430_option_override (void)\n \t\t    warning (0,\n \t\t\t     \"Unrecognized MCU name '%s', assuming that it is \"\n \t\t\t     \"just a MSP430 with no hardware multiply.\\n\"\n-\t\t\t     \"Use the -mcpu and -mhwmult options to set \"\n-\t\t\t     \"these explicitly.\",\n+\t\t\t     \"Use the %<-mcpu%> and %<-mhwmult%> options to \"\n+\t\t\t     \"set these explicitly.\",\n \t\t\t     target_mcu);\n \t\t  else\n \t\t    warning (0,\n \t\t\t     \"Unrecognized MCU name '%s', assuming that it \"\n-\t\t\t     \"has no hardware multiply.\\nUse the -mhwmult \"\n+\t\t\t     \"has no hardware multiply.\\nUse the %<-mhwmult%> \"\n \t\t\t     \"option to set this explicitly.\",\n \t\t\t     target_mcu);\n \t\t}\n@@ -852,8 +857,8 @@ msp430_option_override (void)\n \t      if (msp430_warn_mcu)\n \t\twarning (0,\n \t\t\t \"Unrecognized MCU name '%s', assuming that it just \"\n-\t\t\t \"supports the MSP430 ISA.\\nUse the -mcpu option to \"\n-\t\t\t \"set the ISA explicitly.\",\n+\t\t\t \"supports the MSP430 ISA.\\nUse the %<-mcpu%> option \"\n+\t\t\t \"to set the ISA explicitly.\",\n \t\t\t target_mcu);\n \n \t      msp430x = false;\n@@ -868,12 +873,12 @@ msp430_option_override (void)\n     msp430x = true;\n \n   if (TARGET_LARGE && !msp430x)\n-    error (\"-mlarge requires a 430X-compatible -mmcu=\");\n+    error (\"%<-mlarge%> requires a 430X-compatible %<-mmcu=%>\");\n \n   if (msp430_code_region == MSP430_REGION_UPPER && ! msp430x)\n-    error (\"-mcode-region=upper requires 430X-compatible cpu\");\n+    error (\"%<-mcode-region=upper%> requires 430X-compatible cpu\");\n   if (msp430_data_region == MSP430_REGION_UPPER && ! msp430x)\n-    error (\"-mdata-region=upper requires 430X-compatible cpu\");\n+    error (\"%<-mdata-region=upper%> requires 430X-compatible cpu\");\n \n   if (flag_exceptions || flag_non_call_exceptions\n       || flag_unwind_tables || flag_asynchronous_unwind_tables)"}, {"sha": "8bee154a429feed43b5964944d24501225c18ac7", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4141,7 +4141,7 @@ nds32_option_override (void)\n       target_flags &= ~MASK_EXT_STRING;\n \n       if (flag_pic)\n-\terror (\"not support -fpic option for v3m toolchain\");\n+\terror (\"not support %<-fpic%> option for v3m toolchain\");\n     }\n \n   /* See if we are using reduced-set registers:"}, {"sha": "1f00b8abbda6721d852b9a365e9474716e6cf835", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1193,7 +1193,8 @@ nios2_custom_check_insns (void)\n     for (i = 0; i < ARRAY_SIZE (nios2_fpu_insn); i++)\n       if (N2FPU_ENABLED_P (i) && N2FPU_UNSAFE_P (i))\n \twarning (0, \"switch %<-mcustom-%s%> has no effect unless \"\n-\t\t \"-funsafe-math-optimizations is specified\", N2FPU_NAME (i));\n+\t\t \"%<-funsafe-math-optimizations%> is specified\",\n+\t\t N2FPU_NAME (i));\n \n   /* Warn if the user is trying to use -mcustom-fmins et. al, that won't\n      get used without -ffinite-math-only.  See fold_builtin_fmin_fmax ()\n@@ -1202,7 +1203,7 @@ nios2_custom_check_insns (void)\n     for (i = 0; i < ARRAY_SIZE (nios2_fpu_insn); i++)\n       if (N2FPU_ENABLED_P (i) && N2FPU_FINITE_P (i))\n \twarning (0, \"switch %<-mcustom-%s%> has no effect unless \"\n-\t\t \"-ffinite-math-only is specified\", N2FPU_NAME (i));\n+\t\t \"%<-ffinite-math-only%> is specified\", N2FPU_NAME (i));\n \n   /* Warn if the user is trying to use a custom rounding instruction\n      that won't get used without -fno-math-errno.  See\n@@ -1211,12 +1212,12 @@ nios2_custom_check_insns (void)\n     for (i = 0; i < ARRAY_SIZE (nios2_fpu_insn); i++)\n       if (N2FPU_ENABLED_P (i) && N2FPU_NO_ERRNO_P (i))\n \twarning (0, \"switch %<-mcustom-%s%> has no effect unless \"\n-\t\t \"-fno-math-errno is specified\", N2FPU_NAME (i));\n+\t\t \"%<-fno-math-errno%> is specified\", N2FPU_NAME (i));\n \n   if (errors || custom_code_conflict)\n     fatal_error (input_location,\n-\t\t \"conflicting use of -mcustom switches, target attributes, \"\n-\t\t \"and/or __builtin_custom_ functions\");\n+\t\t \"conflicting use of %<-mcustom%> switches, target attributes, \"\n+\t\t \"and/or %<__builtin_custom_%> functions\");\n }\n \n static void\n@@ -1362,7 +1363,7 @@ nios2_option_override (void)\n     sorry (\"position-independent code requires the Linux ABI\");\n   if (flag_pic && stack_limit_rtx\n       && GET_CODE (stack_limit_rtx) == SYMBOL_REF)\n-    sorry (\"PIC support for -fstack-limit-symbol\");\n+    sorry (\"PIC support for %<-fstack-limit-symbol%>\");\n \n   /* Function to allocate machine-dependent function status.  */\n   init_machine_status = &nios2_init_machine_status;\n@@ -1384,25 +1385,25 @@ nios2_option_override (void)\n   if (flag_pic)\n     {\n       if (nios2_gpopt_option != gpopt_none)\n-\terror (\"-mgpopt not supported with PIC.\");\n+\terror (\"%<-mgpopt%> not supported with PIC.\");\n       if (nios2_gprel_sec)\n-\terror (\"-mgprel-sec= not supported with PIC.\");\n+\terror (\"%<-mgprel-sec=%> not supported with PIC.\");\n       if (nios2_r0rel_sec)\n-\terror (\"-mr0rel-sec= not supported with PIC.\");\n+\terror (\"%<-mr0rel-sec=%> not supported with PIC.\");\n     }\n \n   /* Process -mgprel-sec= and -m0rel-sec=.  */\n   if (nios2_gprel_sec)\n     {\n       if (regcomp (&nios2_gprel_sec_regex, nios2_gprel_sec, \n \t\t   REG_EXTENDED | REG_NOSUB))\n-\terror (\"-mgprel-sec= argument is not a valid regular expression.\");\n+\terror (\"%<-mgprel-sec=%> argument is not a valid regular expression.\");\n     }\n   if (nios2_r0rel_sec)\n     {\n       if (regcomp (&nios2_r0rel_sec_regex, nios2_r0rel_sec, \n \t\t   REG_EXTENDED | REG_NOSUB))\n-\terror (\"-mr0rel-sec= argument is not a valid regular expression.\");\n+\terror (\"%<-mr0rel-sec=%> argument is not a valid regular expression.\");\n     }\n \n   /* If we don't have mul, we don't have mulx either!  */\n@@ -3699,7 +3700,7 @@ nios2_expand_custom_builtin (tree exp, unsigned int index, rtx target)\n \t{\n \t  if (!custom_insn_opcode (value, VOIDmode))\n \t    error (\"custom instruction opcode must be compile time \"\n-\t\t   \"constant in the range 0-255 for __builtin_custom_%s\",\n+\t\t   \"constant in the range 0-255 for %<__builtin_custom_%s%>\",\n \t\t   custom_builtin_name[index]);\n \t}\n       else"}, {"sha": "3770f7295af6b18035d2b3833fb9a468671bfaa4", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -488,7 +488,8 @@ main (int argc, char **argv)\n \tverbose = true;\n     }\n   if (!(fopenacc ^ fopenmp))\n-    fatal_error (input_location, \"either -fopenacc or -fopenmp must be set\");\n+    fatal_error (input_location, \"either %<-fopenacc%> or %<-fopenmp%> \"\n+\t\t \"must be set\");\n \n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);"}, {"sha": "a28099ac89dde182f48ec3bb10becf4a3441c64b", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -194,7 +194,7 @@ static void\n diagnose_openacc_conflict (bool optval, const char *optname)\n {\n   if (flag_openacc && optval)\n-    error (\"option %s is not supported together with -fopenacc\", optname);\n+    error (\"option %s is not supported together with %<-fopenacc%>\", optname);\n }\n \n /* Implement TARGET_OPTION_OVERRIDE.  */"}, {"sha": "532046cff552e51f1fd2add000507cbaa0de1956", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -453,7 +453,7 @@ fix_range (const char *const_str)\n       dash = strchr (str, '-');\n       if (!dash)\n \t{\n-\t  warning (0, \"value of -mfixed-range must have form REG1-REG2\");\n+\t  warning (0, \"value of %<-mfixed-range%> must have form REG1-REG2\");\n \t  return;\n \t}\n       *dash = '\\0';\n@@ -539,8 +539,8 @@ pa_option_override (void)\n \n   if (! TARGET_GAS && write_symbols != NO_DEBUG)\n     {\n-      warning (0, \"-g is only supported when using GAS on this processor,\");\n-      warning (0, \"-g option disabled\");\n+      warning (0, \"%<-g%> is only supported when using GAS on this processor,\");\n+      warning (0, \"%<-g%> option disabled\");\n       write_symbols = NO_DEBUG;\n     }\n \n@@ -554,8 +554,8 @@ pa_option_override (void)\n   if (flag_reorder_blocks_and_partition)\n     {\n       inform (input_location,\n-              \"-freorder-blocks-and-partition does not work \"\n-              \"on this architecture\");\n+\t      \"%<-freorder-blocks-and-partition%> does not work \"\n+\t      \"on this architecture\");\n       flag_reorder_blocks_and_partition = 0;\n       flag_reorder_blocks = 1;\n     }"}, {"sha": "8881f80e18fcdef9ae0eb5e51b671047ac6efb2a", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -329,7 +329,7 @@ riscv_parse_cpu (const char *cpu_string)\n     if (strcmp (riscv_cpu_info_table[i].name, cpu_string) == 0)\n       return riscv_cpu_info_table + i;\n \n-  error (\"unknown cpu %qs for -mtune\", cpu_string);\n+  error (\"unknown cpu %qs for %<-mtune%>\", cpu_string);\n   return riscv_cpu_info_table;\n }\n \n@@ -4316,7 +4316,7 @@ riscv_option_override (void)\n   if (TARGET_MUL && (target_flags_explicit & MASK_DIV) == 0)\n     target_flags |= MASK_DIV;\n   else if (!TARGET_MUL && TARGET_DIV)\n-    error (\"-mdiv requires -march to subsume the %<M%> extension\");\n+    error (\"%<-mdiv%> requires %<-march%> to subsume the %<M%> extension\");\n \n   /* Likewise floating-point division and square root.  */\n   if (TARGET_HARD_FLOAT && (target_flags_explicit & MASK_FDIV) == 0)\n@@ -4356,15 +4356,15 @@ riscv_option_override (void)\n \n   /* Require that the ISA supports the requested floating-point ABI.  */\n   if (UNITS_PER_FP_ARG > (TARGET_HARD_FLOAT ? UNITS_PER_FP_REG : 0))\n-    error (\"requested ABI requires -march to subsume the %qc extension\",\n+    error (\"requested ABI requires %<-march%> to subsume the %qc extension\",\n \t   UNITS_PER_FP_ARG > 8 ? 'Q' : (UNITS_PER_FP_ARG > 4 ? 'D' : 'F'));\n \n   if (TARGET_RVE && riscv_abi != ABI_ILP32E)\n     error (\"rv32e requires ilp32e ABI\");\n \n   /* We do not yet support ILP32 on RV64.  */\n   if (BITS_PER_WORD != POINTER_SIZE)\n-    error (\"ABI requires -march=rv%d\", POINTER_SIZE);\n+    error (\"ABI requires %<-march=rv%d%>\", POINTER_SIZE);\n \n   /* Validate -mpreferred-stack-boundary= value.  */\n   riscv_stack_boundary = ABI_STACK_BOUNDARY;\n@@ -4374,7 +4374,7 @@ riscv_option_override (void)\n       int max = 8;\n \n       if (!IN_RANGE (riscv_preferred_stack_boundary_arg, min, max))\n-\terror (\"-mpreferred-stack-boundary=%d must be between %d and %d\",\n+\terror (\"%<-mpreferred-stack-boundary=%d%> must be between %d and %d\",\n \t       riscv_preferred_stack_boundary_arg, min, max);\n \n       riscv_stack_boundary = 8 << riscv_preferred_stack_boundary_arg;\n@@ -4387,8 +4387,8 @@ riscv_option_override (void)\n     riscv_emit_attribute_p = 0;\n \n   if (riscv_emit_attribute_p)\n-    error (\"-mriscv-attribute RISC-V ELF attribute requires GNU as 2.32\"\n-\t   \" [-mriscv-attribute]\");\n+    error (\"%<-mriscv-attribute%> RISC-V ELF attribute requires GNU as 2.32\"\n+\t   \" [%<-mriscv-attribute%>]\");\n #endif\n }\n "}, {"sha": "c127c50657013672ae5180b7bf30a6fcf8acd36b", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -372,7 +372,7 @@ rl78_option_override (void)\n       /* Compiling with -flto results in a language of GNU GIMPLE being used... */\n       && strcmp (lang_hooks.name, \"GNU GIMPLE\"))\n     /* Address spaces are currently only supported by C.  */\n-    error (\"-mes0 can only be used with C\");\n+    error (\"%<-mes0%> can only be used with C\");\n \n   if (TARGET_SAVE_MDUC_REGISTERS && !(TARGET_G13 || RL78_MUL_G13))\n     warning (0, \"mduc registers only saved for G13 target\");\n@@ -390,8 +390,10 @@ rl78_option_override (void)\n \t{\n \tcase MUL_UNINIT: rl78_mul_type = MUL_NONE; break;\n \tcase MUL_NONE:   break;\n-\tcase MUL_G13:  \t error (\"-mmul=g13 cannot be used with -mcpu=g10\"); break;\n-\tcase MUL_G14:  \t error (\"-mmul=g14 cannot be used with -mcpu=g10\"); break;\n+\tcase MUL_G13:  \t error (\"%<-mmul=g13%> cannot be used with \"\n+\t\t\t\t\"%<-mcpu=g10%>\"); break;\n+\tcase MUL_G14:  \t error (\"%<-mmul=g14%> cannot be used with \"\n+\t\t\t\t\"%<-mcpu=g10%>\"); break;\n \t}\n       break;\n \n@@ -402,7 +404,8 @@ rl78_option_override (void)\n \tcase MUL_NONE:   break;\n \tcase MUL_G13:  \tbreak;\n \t  /* The S2 core does not have mul/div instructions.  */\n-\tcase MUL_G14: \terror (\"-mmul=g14 cannot be used with -mcpu=g13\"); break;\n+\tcase MUL_G14: \terror (\"%<-mmul=g14%> cannot be used with \"\n+\t\t\t       \"%<-mcpu=g13%>\"); break;\n \t}\n       break;\n \n@@ -414,7 +417,8 @@ rl78_option_override (void)\n \tcase MUL_G14:  \tbreak;\n \t/* The G14 core does not have the hardware multiply peripheral used by the\n \t   G13 core, hence you cannot use G13 multipliy routines on G14 hardware.  */\n-\tcase MUL_G13: \terror (\"-mmul=g13 cannot be used with -mcpu=g14\"); break;\n+\tcase MUL_G13: \terror (\"%<-mmul=g13%> cannot be used with \"\n+\t\t\t       \"%<-mcpu=g14%>\"); break;\n \t}\n       break;\n     }"}, {"sha": "57ea9ecfc4733e81333c07b3aae71e71d916844d", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -27,7 +27,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n-      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+      warning (0, \"%<-maix64%> requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -37,14 +37,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+      error (\"%<-maix64%> required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if ((rs6000_isa_flags_explicit\t\t\t\t\t\\\n        & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (global_options_set.x_rs6000_current_cmodel\t\t\t\\\n \t  && rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\\\n-\terror (\"-mcmodel incompatible with other toc options\"); \t\\\n+\terror (\"%<-mcmodel%> incompatible with other toc options\"); \t\\\n       SET_CMODEL (CMODEL_SMALL);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\t\\"}, {"sha": "b30e71941d81adf94bde5525a97402fc6b342368", "filename": "gcc/config/rs6000/aix71.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Faix71.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Faix71.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix71.h?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -27,7 +27,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n-      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+      warning (0, \"%<-maix64%> requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -37,14 +37,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+      error (\"%<-maix64%> required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if ((rs6000_isa_flags_explicit\t\t\t\t\t\\\n        & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (global_options_set.x_rs6000_current_cmodel\t\t\t\\\n \t  && rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\\\n-\terror (\"-mcmodel incompatible with other toc options\"); \t\\\n+\terror (\"%<-mcmodel%> incompatible with other toc options\"); \t\\\n       SET_CMODEL (CMODEL_SMALL);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\t\\"}, {"sha": "9f02aeacd511739e2076004d38c0f5b7e578b78d", "filename": "gcc/config/rs6000/aix72.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Faix72.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Faix72.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix72.h?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -27,7 +27,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n-      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+      warning (0, \"%<-maix64%> requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -37,14 +37,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+      error (\"%<-maix64%> required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if ((rs6000_isa_flags_explicit\t\t\t\t\t\\\n        & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (global_options_set.x_rs6000_current_cmodel\t\t\t\\\n \t  && rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\\\n-\terror (\"-mcmodel incompatible with other toc options\"); \t\\\n+\terror (\"%<-mcmodel%> incompatible with other toc options\"); \t\\\n       SET_CMODEL (CMODEL_SMALL);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\t\\"}, {"sha": "b290eea4bdd373b61f8cb2d529039cd19f50f406", "filename": "gcc/config/rs6000/driver-rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -265,7 +265,8 @@ elf_platform (void)\n \t  candidates_list_and_hint (cpu, s, candidates);\n \t  fatal_error (\n \t    input_location,\n-\t    \"Unsupported cpu name returned from kernel for -mcpu=native: %s\\n\"\n+\t    \"Unsupported cpu name returned from kernel for \"\n+\t    \"%<-mcpu=native%>: %s\\n\"\n \t    \"Please use an explicit cpu name.  Valid cpu names are: %s\",\n \t    cpu, s);\n \t}"}, {"sha": "7e819d102f982b4363cc1a6f07ed7635702a8c86", "filename": "gcc/config/rs6000/freebsd64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -95,7 +95,7 @@ extern int dot_symbols;\n \t    {\t\t\t\t\t\t\t\\\n \t      rs6000_current_abi = ABI_ELFv2;\t\t\t\\\n \t      if (dot_symbols)\t\t\t\t\t\\\n-\t\terror (\"-mcall-aixdesc incompatible with -mabi=elfv2\"); \\\n+\t\terror (\"%<-mcall-aixdesc%> incompatible with %<-mabi=elfv2%>\"); \\\n \t    }\t\t\t\t\t\t\t\\\n \t  if (rs6000_isa_flags & OPTION_MASK_EABI)\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n@@ -110,14 +110,14 @@ extern int dot_symbols;\n \t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n-\t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n+\t      error (\"%<-m64%> requires a PowerPC64 cpu\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t   if ((rs6000_isa_flags_explicit\t\t\t\\\n \t\t& OPTION_MASK_MINIMAL_TOC) != 0)\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      if (global_options_set.x_rs6000_current_cmodel\t\\\n \t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n-\t\terror (\"-mcmodel incompatible with other toc options\"); \\\n+\t\terror (\"%<-mcmodel%> incompatible with other toc options\"); \\\n \t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\\"}, {"sha": "5380f6a6a6f1cb3e8d9734f5037646ecafa02fee", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -112,7 +112,7 @@ extern int dot_symbols;\n \t    {\t\t\t\t\t\t\t\\\n \t      rs6000_current_abi = ABI_ELFv2;\t\t\t\\\n \t      if (dot_symbols)\t\t\t\t\t\\\n-\t\terror (\"-mcall-aixdesc incompatible with -mabi=elfv2\"); \\\n+\t\terror (\"%<-mcall-aixdesc%> incompatible with %<-mabi=elfv2%>\"); \\\n \t    }\t\t\t\t\t\t\t\\\n \t  if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)\t\\\n \t    {\t\t\t\t\t\t\t\\\n@@ -132,14 +132,14 @@ extern int dot_symbols;\n \t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n-\t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n+\t      error (\"%<-m64%> requires a PowerPC64 cpu\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  if ((rs6000_isa_flags_explicit\t\t\t\\\n \t       & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      if (global_options_set.x_rs6000_current_cmodel\t\\\n \t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n-\t\terror (\"-mcmodel incompatible with other toc options\"); \\\n+\t\terror (\"%<-mcmodel incompatible with other toc options%>\"); \\\n \t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\\"}, {"sha": "a21f4f71727d364958f5ea8d1df7cc1e4fddaaa8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3992,22 +3992,22 @@ rs6000_option_override_internal (bool global_init_p)\n       if (!TARGET_HARD_FLOAT)\n \t{\n \t  if (rs6000_isa_flags_explicit & OPTION_MASK_VSX)\n-\t    msg = N_(\"-mvsx requires hardware floating point\");\n+\t    msg = N_(\"%<-mvsx%> requires hardware floating point\");\n \t  else\n \t    {\n \t      rs6000_isa_flags &= ~ OPTION_MASK_VSX;\n \t      rs6000_isa_flags_explicit |= OPTION_MASK_VSX;\n \t    }\n \t}\n       else if (TARGET_AVOID_XFORM > 0)\n-\tmsg = N_(\"-mvsx needs indexed addressing\");\n+\tmsg = N_(\"%<-mvsx%> needs indexed addressing\");\n       else if (!TARGET_ALTIVEC && (rs6000_isa_flags_explicit\n \t\t\t\t   & OPTION_MASK_ALTIVEC))\n         {\n \t  if (rs6000_isa_flags_explicit & OPTION_MASK_VSX)\n-\t    msg = N_(\"-mvsx and -mno-altivec are incompatible\");\n+\t    msg = N_(\"%<-mvsx%> and %<-mno-altivec%> are incompatible\");\n \t  else\n-\t    msg = N_(\"-mno-altivec disables vsx\");\n+\t    msg = N_(\"%<-mno-altivec%> disables vsx\");\n         }\n \n       if (msg)\n@@ -4133,10 +4133,10 @@ rs6000_option_override_internal (bool global_init_p)\n   if ((TARGET_QUAD_MEMORY || TARGET_QUAD_MEMORY_ATOMIC) && !TARGET_POWERPC64)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_QUAD_MEMORY) != 0)\n-\twarning (0, N_(\"-mquad-memory requires 64-bit mode\"));\n+\twarning (0, N_(\"%<-mquad-memory%> requires 64-bit mode\"));\n \n       if ((rs6000_isa_flags_explicit & OPTION_MASK_QUAD_MEMORY_ATOMIC) != 0)\n-\twarning (0, N_(\"-mquad-memory-atomic requires 64-bit mode\"));\n+\twarning (0, N_(\"%<-mquad-memory-atomic%> requires 64-bit mode\"));\n \n       rs6000_isa_flags &= ~(OPTION_MASK_QUAD_MEMORY\n \t\t\t    | OPTION_MASK_QUAD_MEMORY_ATOMIC);\n@@ -4148,7 +4148,7 @@ rs6000_option_override_internal (bool global_init_p)\n   if (TARGET_QUAD_MEMORY && !WORDS_BIG_ENDIAN)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_QUAD_MEMORY) != 0)\n-\twarning (0, N_(\"-mquad-memory is not available in little endian \"\n+\twarning (0, N_(\"%<-mquad-memory%> is not available in little endian \"\n \t\t       \"mode\"));\n \n       rs6000_isa_flags &= ~OPTION_MASK_QUAD_MEMORY;\n@@ -4338,7 +4338,7 @@ rs6000_option_override_internal (bool global_init_p)\n       if (!TARGET_VSX)\n \t{\n \t  if ((rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_KEYWORD) != 0)\n-\t    error (\"%qs requires VSX support\", \"-mfloat128\");\n+\t    error (\"%qs requires VSX support\", \"%<-mfloat128%>\");\n \n \t  TARGET_FLOAT128_TYPE = 0;\n \t  rs6000_isa_flags &= ~(OPTION_MASK_FLOAT128_KEYWORD\n@@ -4347,7 +4347,7 @@ rs6000_option_override_internal (bool global_init_p)\n       else if (!TARGET_FLOAT128_TYPE)\n \t{\n \t  TARGET_FLOAT128_TYPE = 1;\n-\t  warning (0, \"The -mfloat128 option may not be fully supported\");\n+\t  warning (0, \"The %<-mfloat128%> option may not be fully supported\");\n \t}\n     }\n \n@@ -4370,15 +4370,15 @@ rs6000_option_override_internal (bool global_init_p)\n       && (rs6000_isa_flags & ISA_3_0_MASKS_IEEE) != ISA_3_0_MASKS_IEEE)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_HW) != 0)\n-\terror (\"%qs requires full ISA 3.0 support\", \"-mfloat128-hardware\");\n+\terror (\"%qs requires full ISA 3.0 support\", \"%<-mfloat128-hardware%>\");\n \n       rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n     }\n \n   if (TARGET_FLOAT128_HW && !TARGET_64BIT)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_HW) != 0)\n-\terror (\"%qs requires %qs\", \"-mfloat128-hardware\", \"-m64\");\n+\terror (\"%qs requires %qs\", \"%<-mfloat128-hardware%>\", \"-m64\");\n \n       rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n     }\n@@ -13346,7 +13346,7 @@ rs6000_expand_zeroop_builtin (enum insn_code icode, rtx target)\n   if (icode == CODE_FOR_rs6000_mffsl\n       && rs6000_isa_flags & OPTION_MASK_SOFT_FLOAT)\n     {\n-      error (\"__builtin_mffsl() not supported with -msoft-float\");\n+      error (\"%<__builtin_mffsl%> not supported with %<-msoft-float%>\");\n       return const0_rtx;\n     }\n \n@@ -13418,7 +13418,8 @@ rs6000_expand_mtfsb_builtin (enum insn_code icode, tree exp)\n \n   if (rs6000_isa_flags & OPTION_MASK_SOFT_FLOAT)\n     {\n-      error (\"__builtin_mtfsb0 and __builtin_mtfsb1 not supported with -msoft-float\");\n+      error (\"%<__builtin_mtfsb0%> and %<__builtin_mtfsb1%> not supported with \"\n+\t     \"%<-msoft-float%>\");\n       return const0_rtx;\n     }\n \n@@ -13455,7 +13456,7 @@ rs6000_expand_set_fpscr_rn_builtin (enum insn_code icode, tree exp)\n \n   if (rs6000_isa_flags & OPTION_MASK_SOFT_FLOAT)\n     {\n-      error (\"__builtin_set_fpscr_rn not supported with -msoft-float\");\n+      error (\"%<__builtin_set_fpscr_rn%> not supported with %<-msoft-float%>\");\n       return const0_rtx;\n     }\n \n@@ -13495,11 +13496,12 @@ rs6000_expand_set_fpscr_drn_builtin (enum insn_code icode, tree exp)\n   if (TARGET_32BIT)\n     /* Builtin not supported in 32-bit mode.  */\n     fatal_error (input_location,\n-\t\t \"__builtin_set_fpscr_drn is not supported in 32-bit mode.\");\n+\t\t \"%<__builtin_set_fpscr_drn%> is not supported \"\n+\t\t \"in 32-bit mode.\");\n \n   if (rs6000_isa_flags & OPTION_MASK_SOFT_FLOAT)\n     {\n-      error (\"__builtin_set_fpscr_drn not supported with -msoft-float\");\n+      error (\"%<__builtin_set_fpscr_drn%> not supported with %<-msoft-float%>\");\n       return const0_rtx;\n     }\n \n@@ -15236,7 +15238,8 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n     error (\"builtin function %qs requires ISA 3.0 IEEE 128-bit floating point\",\n \t   name);\n   else if ((fnmask & RS6000_BTM_FLOAT128) != 0)\n-    error (\"builtin function %qs requires the %qs option\", name, \"-mfloat128\");\n+    error (\"builtin function %qs requires the %qs option\", name,\n+\t   \"%<-mfloat128%>\");\n   else if ((fnmask & (RS6000_BTM_POPCNTD | RS6000_BTM_POWERPC64))\n \t   == (RS6000_BTM_POPCNTD | RS6000_BTM_POWERPC64))\n     error (\"builtin function %qs requires the %qs (or newer), and \"\n@@ -29320,15 +29323,16 @@ rs6000_expand_split_stack_prologue (void)\n \n   if (global_regs[29])\n     {\n-      error (\"%qs uses register r29\", \"-fsplit-stack\");\n+      error (\"%qs uses register r29\", \"%<-fsplit-stack%>\");\n       inform (DECL_SOURCE_LOCATION (global_regs_decl[29]),\n \t      \"conflicts with %qD\", global_regs_decl[29]);\n     }\n \n   allocate = info->total_size;\n   if (allocate > (unsigned HOST_WIDE_INT) 1 << 31)\n     {\n-      sorry (\"Stack frame larger than 2G is not supported for -fsplit-stack\");\n+      sorry (\"Stack frame larger than 2G is not supported for \"\n+\t     \"%<-fsplit-stack%>\");\n       return;\n     }\n   if (morestack_ref == NULL_RTX)"}, {"sha": "401077d8057f7c00fff0ef8052ae23c296239b5b", "filename": "gcc/config/rs6000/rtems.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frs6000%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frtems.h?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -111,14 +111,14 @@\n \t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n-\t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n+\t      error (\"%<-m64%> requires a PowerPC64 cpu\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  if ((rs6000_isa_flags_explicit\t\t\t\\\n \t\t& OPTION_MASK_MINIMAL_TOC) != 0)\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      if (global_options_set.x_rs6000_current_cmodel\t\\\n \t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n-\t\terror (\"-mcmodel incompatible with other toc options\"); \\\n+\t\terror (\"%<-mcmodel%> incompatible with other toc options\"); \\\n \t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\\"}, {"sha": "dac05db895ac5f676c04710f6a21ee2ce68c50a5", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2593,9 +2593,9 @@ valid_psw_flag (rtx op, const char *which)\n \treturn 1;\n       }\n \n-  error (\"__builtin_rx_%s takes 'C', 'Z', 'S', 'O', 'I', or 'U'\", which);\n+  error (\"%<__builtin_rx_%s%> takes 'C', 'Z', 'S', 'O', 'I', or 'U'\", which);\n   if (!mvtc_inform_done)\n-    error (\"use __builtin_rx_mvtc (0, ... ) to write arbitrary values to PSW\");\n+    error (\"use %<__builtin_rx_mvtc%> (0, ... ) to write arbitrary values to PSW\");\n   mvtc_inform_done = 1;\n \n   return 0;\n@@ -2642,7 +2642,8 @@ rx_expand_builtin (tree exp,\n       if (rx_allow_string_insns)\n \temit_insn (gen_rmpa ());\n       else\n-\terror (\"-mno-allow-string-insns forbids the generation of the RMPA instruction\");\n+\terror (\"%<-mno-allow-string-insns%> forbids the generation \"\n+\t       \"of the RMPA instruction\");\n       return NULL_RTX;\n     case RX_BUILTIN_MVFC:    return rx_expand_builtin_mvfc (arg, target);\n     case RX_BUILTIN_MVTC:    return rx_expand_builtin_mvtc (exp);"}, {"sha": "aafe346eea86d5702cc790844843349c66e3a52b", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -889,7 +889,7 @@ s390_resolve_overloaded_builtin (location_t loc,\n \n   if (!TARGET_VX && (ob_flags & B_VX))\n     {\n-      error_at (loc, \"%qF requires -mvx\", ob_fndecl);\n+      error_at (loc, \"%qF requires %<-mvx%>\", ob_fndecl);\n       return error_mark_node;\n     }\n "}, {"sha": "23255efab6b6231639f201484ed14fda236e646f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -799,14 +799,14 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       bflags = bflags_for_builtin (fcode);\n       if ((bflags & B_HTM) && !TARGET_HTM)\n \t{\n-\t  error (\"builtin %qF is not supported without -mhtm \"\n-\t\t \"(default with -march=zEC12 and higher).\", fndecl);\n+\t  error (\"builtin %qF is not supported without %<-mhtm%> \"\n+\t\t \"(default with %<-march=zEC12%> and higher).\", fndecl);\n \t  return const0_rtx;\n \t}\n       if (((bflags & B_VX) || (bflags & B_VXE)) && !TARGET_VX)\n \t{\n-\t  error (\"builtin %qF requires -mvx \"\n-\t\t \"(default with -march=z13 and higher).\", fndecl);\n+\t  error (\"builtin %qF requires %<-mvx%> \"\n+\t\t \"(default with %<-march=z13%> and higher).\", fndecl);\n \t  return const0_rtx;\n \t}\n \n@@ -12656,7 +12656,7 @@ s390_function_profiler (FILE *file, int labelno)\n \toutput_asm_nops (\"-mnop-mcount\", /* brasl */ 3);\n       else if (cfun->static_chain_decl)\n \twarning (OPT_Wcannot_profile, \"nested functions cannot be profiled \"\n-\t\t \"with -mfentry on s390\");\n+\t\t \"with %<-mfentry%> on s390\");\n       else\n \toutput_asm_insn (\"brasl\\t0,%4\", op);\n     }\n@@ -14829,7 +14829,7 @@ s390_option_override_internal (struct gcc_options *opts,\n       || opts->x_s390_function_return == indirect_branch_thunk_inline\n       || opts->x_s390_function_return_reg == indirect_branch_thunk_inline\n       || opts->x_s390_function_return_mem == indirect_branch_thunk_inline)\n-    error (\"thunk-inline is only supported with -mindirect-branch-jump\");\n+    error (\"thunk-inline is only supported with %<-mindirect-branch-jump%>\");\n \n   if (opts->x_s390_indirect_branch != indirect_branch_keep)\n     {\n@@ -14867,7 +14867,8 @@ s390_option_override_internal (struct gcc_options *opts,\n \t    error (\"hardware vector support not available on %s\",\n \t\t   processor_table[(int)opts->x_s390_arch].name);\n \t  if (TARGET_SOFT_FLOAT_P (opts->x_target_flags))\n-\t    error (\"hardware vector support not available with -msoft-float\");\n+\t    error (\"hardware vector support not available with \"\n+\t\t   \"%<-msoft-float%>\");\n \t}\n     }\n   else\n@@ -14911,16 +14912,17 @@ s390_option_override_internal (struct gcc_options *opts,\n     {\n       if (TARGET_HARD_DFP_P (opts_set->x_target_flags)\n \t  && TARGET_HARD_DFP_P (opts->x_target_flags))\n-\terror (\"-mhard-dfp can%'t be used in conjunction with -msoft-float\");\n+\terror (\"%<-mhard-dfp%> can%'t be used in conjunction with \"\n+\t       \"%<-msoft-float%>\");\n \n       opts->x_target_flags &= ~MASK_HARD_DFP;\n     }\n \n   if (TARGET_BACKCHAIN_P (opts->x_target_flags)\n       && TARGET_PACKED_STACK_P (opts->x_target_flags)\n       && TARGET_HARD_FLOAT_P (opts->x_target_flags))\n-    error (\"-mbackchain -mpacked-stack -mhard-float are not supported \"\n-\t   \"in combination\");\n+    error (\"%<-mbackchain%> %<-mpacked-stack%> %<-mhard-float%> are not \"\n+\t   \"supported in combination\");\n \n   if (opts->x_s390_stack_size)\n     {\n@@ -14930,7 +14932,7 @@ s390_option_override_internal (struct gcc_options *opts,\n \terror (\"stack size must not be greater than 64k\");\n     }\n   else if (opts->x_s390_stack_guard)\n-    error (\"-mstack-guard implies use of -mstack-size\");\n+    error (\"%<-mstack-guard%> implies use of %<-mstack-size%>\");\n \n   /* Our implementation of the stack probe requires the probe interval\n      to be used as displacement in an address operand.  The maximum\n@@ -15007,7 +15009,7 @@ s390_option_override_internal (struct gcc_options *opts,\n      because 31-bit PLT stubs assume that %r12 contains GOT address, which is\n      not the case when the code runs before the prolog. */\n   if (opts->x_flag_fentry && !TARGET_64BIT)\n-    error (\"-mfentry is supported only for 64-bit CPUs\");\n+    error (\"%<-mfentry%> is supported only for 64-bit CPUs\");\n }\n \n static void\n@@ -15080,7 +15082,8 @@ s390_option_override (void)\n     flag_prefetch_loop_arrays = 1;\n \n   if (!s390_pic_data_is_text_relative && !flag_pic)\n-    error (\"-mno-pic-data-is-text-relative cannot be used without -fpic/-fPIC\");\n+    error (\"%<-mno-pic-data-is-text-relative%> cannot be used without \"\n+\t   \"%<-fpic%>/%<-fPIC%>\");\n \n   if (TARGET_TPF)\n     {"}, {"sha": "8dc79a764df46e738d9e29fe68af622bbbb2e68f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -933,7 +933,7 @@ sh_option_override (void)\n       else if (flag_exceptions)\n \t{\n \t  if (flag_schedule_insns && global_options_set.x_flag_schedule_insns)\n-\t    warning (0, \"ignoring -fschedule-insns because of exception \"\n+\t    warning (0, \"ignoring %<-fschedule-insns%> because of exception \"\n \t\t\t\"handling bug\");\n \t  flag_schedule_insns = 0;\n \t}\n@@ -951,7 +951,7 @@ sh_option_override (void)\n       && flag_omit_frame_pointer && !TARGET_ACCUMULATE_OUTGOING_ARGS)\n     {\n       warning (0, \"unwind tables currently require either a frame pointer \"\n-\t       \"or -maccumulate-outgoing-args for correctness\");\n+\t       \"or %<-maccumulate-outgoing-args%> for correctness\");\n       TARGET_ACCUMULATE_OUTGOING_ARGS = 1;\n     }\n \n@@ -7413,7 +7413,7 @@ sh_builtin_saveregs (void)\n \n   if (!TARGET_FPU_ANY)\n     {\n-      error (\"__builtin_saveregs not supported by this subtarget\");\n+      error (\"%<__builtin_saveregs%> not supported by this subtarget\");\n       return const0_rtx;\n     }\n \n@@ -8279,7 +8279,7 @@ sh_fix_range (const char *const_str)\n       char* dash = strchr (str, '-');\n       if (!dash)\n \t{\n-\t  warning (0, \"value of -mfixed-range must have form REG1-REG2\");\n+\t  warning (0, \"value of %<-mfixed-range%> must have form REG1-REG2\");\n \t  return;\n \t}\n       *dash = '\\0';"}, {"sha": "1ea24e06d5ef84abc41ee06b94e2b663b8482af0", "filename": "gcc/config/sh/vxworks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fsh%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fsh%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fvxworks.h?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -40,7 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n \t appear in shared libraries, so relaxation is OK\t\\\n \t for RTP PIC.  */\t\t\t\t\t\\\n       if (TARGET_RELAX && !(TARGET_VXWORKS_RTP && flag_pic))\t\\\n-\terror (\"-mrelax is only supported for RTP PIC\");\t\\\n+\terror (\"%<-mrelax%> is only supported for RTP PIC\");\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "93479ab6bdceed1eb78c9f04731e27b0a1d99a22", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1740,7 +1740,7 @@ sparc_option_override (void)\n \t  else if (! strcmp (q, \"options\"))\n \t    mask = MASK_DEBUG_OPTIONS;\n \t  else\n-\t    error (\"unknown -mdebug-%s switch\", q);\n+\t    error (\"unknown %<-mdebug-%s%> switch\", q);\n \n \t  if (invert)\n \t    sparc_debug &= ~mask;\n@@ -1774,15 +1774,15 @@ sparc_option_override (void)\n   /* We force all 64bit archs to use 128 bit long double */\n   if (TARGET_ARCH64 && !TARGET_LONG_DOUBLE_128)\n     {\n-      error (\"-mlong-double-64 not allowed with -m64\");\n+      error (\"%<-mlong-double-64%> not allowed with %<-m64%>\");\n       target_flags |= MASK_LONG_DOUBLE_128;\n     }\n \n   /* Check that -fcall-saved-REG wasn't specified for out registers.  */\n   for (i = 8; i < 16; i++)\n     if (!call_used_regs [i])\n       {\n-\terror (\"-fcall-saved-REG is not supported for out registers\");\n+\terror (\"%<-fcall-saved-REG%> is not supported for out registers\");\n         call_used_regs [i] = 1;\n       }\n \n@@ -1906,7 +1906,7 @@ sparc_option_override (void)\n   if (global_options_set.x_sparc_code_model)\n     {\n       if (TARGET_ARCH32)\n-\terror (\"-mcmodel= is not supported in 32-bit mode\");\n+\terror (\"%<-mcmodel=%> is not supported in 32-bit mode\");\n     }\n   else\n     {"}, {"sha": "8d7439e697a64ac881a3c9e71d007bde171e7282", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -259,7 +259,7 @@ spu_option_override (void)\n       else if (strcmp (&spu_arch_string[0], \"celledp\") == 0)\n         spu_arch = PROCESSOR_CELLEDP;\n       else\n-        error (\"bad value (%s) for -march= switch\", spu_arch_string);\n+\terror (\"bad value (%s) for %<-march=%> switch\", spu_arch_string);\n     }\n \n   /* Determine processor to tune for.  */\n@@ -270,7 +270,7 @@ spu_option_override (void)\n       else if (strcmp (&spu_tune_string[0], \"celledp\") == 0)\n         spu_tune = PROCESSOR_CELLEDP;\n       else\n-        error (\"bad value (%s) for -mtune= switch\", spu_tune_string);\n+\terror (\"bad value (%s) for %<-mtune=%> switch\", spu_tune_string);\n     }\n \n   /* Change defaults according to the processor architecture.  */\n@@ -4917,7 +4917,7 @@ fix_range (const char *const_str)\n       dash = strchr (str, '-');\n       if (!dash)\n \t{\n-\t  warning (0, \"value of -mfixed-range must have form REG1-REG2\");\n+\t  warning (0, \"value of %<-mfixed-range%> must have form REG1-REG2\");\n \t  return;\n \t}\n       *dash = '\\0';"}, {"sha": "431f64cfcad3351f39dd42c38d1d72e2f68b6f35", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -419,9 +419,9 @@ static void\n visium_option_override (void)\n {\n   if (flag_pic == 1)\n-    warning (OPT_fpic, \"-fpic is not supported\");\n+    warning (OPT_fpic, \"%<-fpic%> is not supported\");\n   if (flag_pic == 2)\n-    warning (OPT_fPIC, \"-fPIC is not supported\");\n+    warning (OPT_fPIC, \"%<-fPIC%> is not supported\");\n \n   /* MCM is the default in the GR5/GR6 era.  */\n   target_flags |= MASK_MCM;\n@@ -728,7 +728,7 @@ visium_handle_interrupt_attr (tree *node, tree name,\n     }\n   else if (!TARGET_SV_MODE)\n     {\n-      error (\"an interrupt handler cannot be compiled with -muser-mode\");\n+      error (\"an interrupt handler cannot be compiled with %<-muser-mode%>\");\n       *no_add_attrs = true;\n     }\n "}, {"sha": "19bd616d67f60f8f15efa20521998a374b996a22", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2256,7 +2256,7 @@ xtensa_option_override (void)\n   /* Check PIC settings.  PIC is only supported when using L32R\n      instructions, and some targets need to always use PIC.  */\n   if (flag_pic && TARGET_CONST16)\n-    error (\"-f%s is not supported with CONST16 instructions\",\n+    error (\"%<-f%s%> is not supported with CONST16 instructions\",\n \t   (flag_pic > 1 ? \"PIC\" : \"pic\"));\n   else if (TARGET_FORCE_NO_PIC)\n     flag_pic = 0;"}, {"sha": "fd983475384cb7b3b8c6ae5885452f5f588e8836", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,53 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* call.c (convert_arg_to_ellipsis): Wrap an option name\n+\tin a string format message and fix GNU coding style.\n+\t(build_over_call): Likewise.\n+\t* class.c (check_field_decl): Likewise.\n+\t(layout_nonempty_base_or_field): Likewise.\n+\t* constexpr.c (cxx_eval_loop_expr): Likewise.\n+\t* cvt.c (type_promotes_to): Likewise.\n+\t* decl.c (cxx_init_decl_processing): Likewise.\n+\t(mark_inline_variable): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t* decl2.c (record_mangling): Likewise.\n+\t* error.c (maybe_warn_cpp0x): Likewise.\n+\t* except.c (doing_eh): Likewise.\n+\t* mangle.c (maybe_check_abi_tags): Likewise.\n+\t* parser.c (cp_parser_diagnose_invalid_type_name): Likewise.\n+\t(cp_parser_userdef_numeric_literal): Likewise.\n+\t(cp_parser_primary_expression): Likewise.\n+\t(cp_parser_unqualified_id): Likewise.\n+\t(cp_parser_pseudo_destructor_name): Likewise.\n+\t(cp_parser_builtin_offsetof): Likewise.\n+\t(cp_parser_lambda_expression): Likewise.\n+\t(cp_parser_lambda_introducer): Likewise.\n+\t(cp_parser_lambda_declarator_opt): Likewise.\n+\t(cp_parser_selection_statement): Likewise.\n+\t(cp_parser_init_statement): Likewise.\n+\t(cp_parser_decomposition_declaration): Likewise.\n+\t(cp_parser_function_specifier_opt): Likewise.\n+\t(cp_parser_static_assert): Likewise.\n+\t(cp_parser_simple_type_specifier): Likewise.\n+\t(cp_parser_namespace_definition): Likewise.\n+\t(cp_parser_using_declaration): Likewise.\n+\t(cp_parser_ctor_initializer_opt_and_function_body): Likewise.\n+\t(cp_parser_initializer_list): Likewise.\n+\t(cp_parser_type_parameter_key): Likewise.\n+\t(cp_parser_member_declaration): Likewise.\n+\t(cp_parser_try_block): Likewise.\n+\t(cp_parser_std_attribute_spec): Likewise.\n+\t(cp_parser_requires_clause_opt): Likewise.\n+\t* pt.c (check_template_variable): Likewise.\n+\t(check_default_tmpl_args): Likewise.\n+\t(push_tinst_level_loc): Likewise.\n+\t(instantiate_pending_templates): Likewise.\n+\t(invalid_nontype_parm_type_p): Likewise.\n+\t* repo.c (get_base_filename): Likewise.\n+\t* rtti.c (typeid_ok_p): Likewise.\n+\t(build_dynamic_cast_1): Likewise.\n+\t* tree.c (maybe_warn_parm_abi): Likewise.\n+\n 2019-03-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/80058"}, {"sha": "98aa5ee89f72e6ed0d3f9ff5749945ca3fcb3033", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -7499,7 +7499,7 @@ convert_arg_to_ellipsis (tree arg, tsubst_flags_t complain)\n \t      && TYPE_MODE (TREE_TYPE (prom)) != TYPE_MODE (arg_type)\n \t      && (complain & tf_warning))\n \t    warning_at (loc, OPT_Wabi, \"scoped enum %qT passed through ... as \"\n-\t\t\t\"%qT before -fabi-version=6, %qT after\", arg_type,\n+\t\t\t\"%qT before %<-fabi-version=6%>, %qT after\", arg_type,\n \t\t\tTREE_TYPE (prom), ENUM_UNDERLYING_TYPE (arg_type));\n \t  if (!abi_version_at_least (6))\n \t    arg = prom;\n@@ -8335,7 +8335,8 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t      pedwarn (DECL_SOURCE_LOCATION (cand->fn), 0,\n \t\t       \"  in call to %qD\", cand->fn);\n \t      pedwarn (input_location, 0,\n-\t\t       \"  (you can disable this with -fno-deduce-init-list)\");\n+\t\t       \"  (you can disable this with \"\n+\t\t       \"%<-fno-deduce-init-list%>)\");\n \t    }\n \t}\n "}, {"sha": "712169ce7e766ebf5e7a3e35a18704e50b9a2d0b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3330,7 +3330,7 @@ check_field_decl (tree field,\n \t  if (!warned && errorcount > oldcount)\n \t    {\n \t      inform (DECL_SOURCE_LOCATION (field), \"unrestricted unions \"\n-\t\t      \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t      \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \t      warned = true;\n \t    }\n \t}\n@@ -4143,11 +4143,12 @@ layout_nonempty_base_or_field (record_layout_info rli,\n \t    {\n \t      if (abi_version_at_least (9))\n \t\twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wabi,\n-\t\t\t    \"alignment of %qD increased in -fabi-version=9 \"\n+\t\t\t    \"alignment of %qD increased in %<-fabi-version=9%> \"\n \t\t\t    \"(GCC 5.2)\", decl);\n \t      else\n \t\twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wabi, \"alignment \"\n-\t\t\t    \"of %qD will increase in -fabi-version=9\", decl);\n+\t\t\t    \"of %qD will increase in %<-fabi-version=9%>\",\n+\t\t\t    decl);\n \t    }\n \t  break;\n \t}"}, {"sha": "b2b575d6467c45b7556ae8968e9b8538c39e8ba9", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4243,7 +4243,7 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n \t  if (!ctx->quiet)\n \t    error_at (cp_expr_loc_or_loc (t, input_location),\n \t\t      \"%<constexpr%> loop iteration count exceeds limit of %d \"\n-\t\t      \"(use -fconstexpr-loop-limit= to increase the limit)\",\n+\t\t      \"(use %<-fconstexpr-loop-limit=%> to increase the limit)\",\n \t\t      constexpr_loop_limit);\n \t  *non_constant_p = true;\n \t  break;"}, {"sha": "c10db92bd6f31ecf2aabf38025502bf62682fcbc", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1923,7 +1923,7 @@ type_promotes_to (tree type)\n \t  if (abi_version_crosses (6)\n \t      && TYPE_MODE (prom) != TYPE_MODE (type))\n \t    warning (OPT_Wabi, \"scoped enum %qT passed through ... as \"\n-\t\t     \"%qT before -fabi-version=6, %qT after\",\n+\t\t     \"%qT before %<-fabi-version=6%>, %qT after\",\n \t\t     type, prom, ENUM_UNDERLYING_TYPE (type));\n \t  if (!abi_version_at_least (6))\n \t    type = prom;"}, {"sha": "89edfe8ed01c32530cbb81c81252b43d67baf2a2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4267,7 +4267,8 @@ cxx_init_decl_processing (void)\n   if (aligned_new_threshold > 1\n       && !pow2p_hwi (aligned_new_threshold))\n     {\n-      error (\"-faligned-new=%d is not a power of two\", aligned_new_threshold);\n+      error (\"%<-faligned-new=%d%> is not a power of two\",\n+\t     aligned_new_threshold);\n       aligned_new_threshold = 1;\n     }\n   if (aligned_new_threshold == -1)\n@@ -10170,7 +10171,7 @@ mark_inline_variable (tree decl, location_t loc)\n     }\n   else if (cxx_dialect < cxx17)\n     pedwarn (loc, 0, \"inline variables are only available \"\n-\t     \"with -std=c++17 or -std=gnu++17\");\n+\t     \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n   if (inlinep)\n     {\n       retrofit_lang_decl (decl);\n@@ -10963,8 +10964,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t  gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n \t  richloc.add_range (declspecs->locations[ds_constexpr]);\n \t  pedwarn (&richloc, OPT_Wpedantic, \"member %qD can be declared both \"\n-\t\t   \"%<virtual%> and %<constexpr%> only in -std=c++2a or \"\n-\t\t   \"-std=gnu++2a\", dname);\n+\t\t   \"%<virtual%> and %<constexpr%> only in %<-std=c++2a%> or \"\n+\t\t   \"%<-std=gnu++2a%>\", dname);\n \t}\n     }\n   friendp = decl_spec_seq_has_spec_p (declspecs, ds_friend);\n@@ -11331,7 +11332,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t\t      \"trailing return type\", name);\n \t\t\t    inform (typespec_loc,\n \t\t\t\t    \"deduced return type only available \"\n-\t\t\t\t    \"with -std=c++14 or -std=gnu++14\");\n+\t\t\t\t    \"with %<-std=c++14%> or %<-std=gnu++14%>\");\n \t\t\t  }\n \t\t\telse if (virtualp)\n \t\t\t  {\n@@ -11402,7 +11403,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t always be an error.  */\n \t\t      error_at (typespec_loc,\n \t\t\t\t\"trailing return type only available \"\n-\t\t\t\t\"with -std=c++11 or -std=gnu++11\");\n+\t\t\t\t\"with %<-std=c++11%> or %<-std=gnu++11%>\");\n \t\t    else\n \t\t      error_at (typespec_loc, \"%qs function with trailing \"\n \t\t\t\t\"return type not declared with %<auto%> \""}, {"sha": "f8637da77daafa24050d8bc35109214f642beb61", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4608,7 +4608,7 @@ record_mangling (tree decl, bool need_warning)\n       inform (DECL_SOURCE_LOCATION (*slot),\n \t      \"previous mangling %q#D\", *slot);\n       inform (DECL_SOURCE_LOCATION (decl),\n-\t      \"a later -fabi-version= (or =0)\"\n+\t      \"a later %<-fabi-version=%> (or =0)\"\n \t      \" avoids this error with a change in mangling\");\n       *slot = decl;\n     }"}, {"sha": "4a0aed2b7256de2f91128020c6953de0ec1ff732", "filename": "gcc/cp/error.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4148,75 +4148,77 @@ maybe_warn_cpp0x (cpp0x_warn_str str)\n       case CPP0X_INITIALIZER_LISTS:\n \tpedwarn (input_location, 0, \n \t\t \"extended initializer lists \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_EXPLICIT_CONVERSION:\n \tpedwarn (input_location, 0,\n \t\t \"explicit conversion operators \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_VARIADIC_TEMPLATES:\n \tpedwarn (input_location, 0,\n \t\t \"variadic templates \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_LAMBDA_EXPR:\n \tpedwarn (input_location, 0,\n \t\t \"lambda expressions \"\n-\t\t  \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t  \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_AUTO:\n \tpedwarn (input_location, 0,\n-\t\t \"C++11 auto only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"C++11 auto only available with %<-std=c++11%> or \"\n+\t\t \"%<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_SCOPED_ENUMS:\n \tpedwarn (input_location, 0,\n-\t\t \"scoped enums only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"scoped enums only available with %<-std=c++11%> or \"\n+\t\t \"%<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_DEFAULTED_DELETED:\n \tpedwarn (input_location, 0,\n \t\t \"defaulted and deleted functions \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_INLINE_NAMESPACES:\n \tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"inline namespaces \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_OVERRIDE_CONTROLS:\n \tpedwarn (input_location, 0,\n \t\t \"override controls (override/final) \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_NSDMI:\n \tpedwarn (input_location, 0,\n \t\t \"non-static data member initializers \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_USER_DEFINED_LITERALS:\n \tpedwarn (input_location, 0,\n \t\t \"user-defined literals \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_DELEGATING_CTORS:\n \tpedwarn (input_location, 0,\n \t\t \"delegating constructors \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_INHERITING_CTORS:\n \tpedwarn (input_location, 0,\n \t\t \"inheriting constructors \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_ATTRIBUTES:\n \tpedwarn (input_location, 0,\n \t\t \"c++11 attributes \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_REF_QUALIFIER:\n \tpedwarn (input_location, 0,\n \t\t \"ref-qualifiers \"\n-\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       default:\n \tgcc_unreachable ();"}, {"sha": "40e973fad66b4e7559d2d1c1847554581215b50c", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -415,7 +415,7 @@ doing_eh (void)\n       static int warned = 0;\n       if (! warned)\n \t{\n-\t  error (\"exception handling disabled, use -fexceptions to enable\");\n+\t  error (\"exception handling disabled, use %<-fexceptions%> to enable\");\n \t  warned = 1;\n \t}\n       return 0;"}, {"sha": "f40c3e16c5d0d83029e1ebf51b52442394b6f352", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4155,18 +4155,18 @@ maybe_check_abi_tags (tree t, tree for_decl, int ver)\n       if (for_decl && DECL_THUNK_P (for_decl))\n \twarning_at (DECL_SOURCE_LOCATION (t), OPT_Wabi,\n \t\t    \"the mangled name of a thunk for %qD changes between \"\n-\t\t    \"-fabi-version=%d and -fabi-version=%d\",\n+\t\t    \"%<-fabi-version=%d%> and %<-fabi-version=%d%>\",\n \t\t    t, flag_abi_version, warn_abi_version);\n       else if (for_decl)\n \twarning_at (DECL_SOURCE_LOCATION (for_decl), OPT_Wabi,\n \t\t    \"the mangled name of %qD changes between \"\n-\t\t    \"-fabi-version=%d and -fabi-version=%d\",\n+\t\t    \"%<-fabi-version=%d%> and %<-fabi-version=%d%>\",\n \t\t    for_decl, flag_abi_version, warn_abi_version);\n       else\n \twarning_at (DECL_SOURCE_LOCATION (t), OPT_Wabi,\n \t\t    \"the mangled name of the initialization guard variable \"\n-\t\t    \"for %qD changes between -fabi-version=%d and \"\n-\t\t    \"-fabi-version=%d\",\n+\t\t    \"for %qD changes between %<-fabi-version=%d%> and \"\n+\t\t    \"%<-fabi-version=%d%>\",\n \t\t    t, flag_abi_version, warn_abi_version);\n     }\n }"}, {"sha": "f95111169ed3ebfe1c6ac42c2f33882faed2ff49", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 44, "deletions": 43, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3288,7 +3288,7 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t\tdecl);\n       if (DECL_CLASS_TEMPLATE_P (decl) && cxx_dialect < cxx17)\n \tinform (location, \"class template argument deduction is only available \"\n-\t\t\"with -std=c++17 or -std=gnu++17\");\n+\t\t\"with %<-std=c++17%> or %<-std=gnu++17%>\");\n       inform (DECL_SOURCE_LOCATION (decl), \"%qD declared here\", decl);\n     }\n   else if (TREE_CODE (id) == BIT_NOT_EXPR)\n@@ -3322,17 +3322,17 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t The user should have said \"typename A<T>::X\".  */\n       if (cxx_dialect < cxx11 && id == ridpointers[(int)RID_CONSTEXPR])\n \tinform (location, \"C++11 %<constexpr%> only available with \"\n-\t\t\"-std=c++11 or -std=gnu++11\");\n+\t\t\"%<-std=c++11%> or %<-std=gnu++11%>\");\n       else if (cxx_dialect < cxx11 && id == ridpointers[(int)RID_NOEXCEPT])\n \tinform (location, \"C++11 %<noexcept%> only available with \"\n-\t\t\"-std=c++11 or -std=gnu++11\");\n+\t\t\"%<-std=c++11%> or %<-std=gnu++11%>\");\n       else if (cxx_dialect < cxx11\n \t       && TREE_CODE (id) == IDENTIFIER_NODE\n \t       && id_equal (id, \"thread_local\"))\n \tinform (location, \"C++11 %<thread_local%> only available with \"\n-\t\t\"-std=c++11 or -std=gnu++11\");\n+\t\t\"%<-std=c++11%> or %<-std=gnu++11%>\");\n       else if (!flag_concepts && id == ridpointers[(int)RID_CONCEPT])\n-\tinform (location, \"%<concept%> only available with -fconcepts\");\n+\tinform (location, \"%<concept%> only available with %<-fconcepts%>\");\n       else if (processing_template_decl && current_class_type\n \t       && TYPE_BINFO (current_class_type))\n \t{\n@@ -4551,7 +4551,7 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n \t\t\"GNU built-in suffix\");\n     }\n   else if (!ext)\n-    inform (token->location, \"use -fext-numeric-literals \"\n+    inform (token->location, \"use %<-fext-numeric-literals%> \"\n \t    \"to enable more built-in suffixes\");\n \n   if (kind == DK_ERROR)\n@@ -5331,7 +5331,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t&& cxx_dialect < cxx17\n \t\t&& !in_system_header_at (input_location))\n \t      pedwarn (input_location, 0, \"fold-expressions only available \"\n-\t\t       \"with -std=c++17 or -std=gnu++17\");\n+\t\t       \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n \t  }\n \telse\n \t  /* Let the front end know that this expression was\n@@ -6069,7 +6069,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t    if (cxx_dialect < cxx14)\n \t      pedwarn (loc, 0,\n \t\t       \"%<~auto%> only available with \"\n-\t\t       \"-std=c++14 or -std=gnu++14\");\n+\t\t       \"%<-std=c++14%> or %<-std=gnu++14%>\");\n \t    cp_lexer_consume_token (parser->lexer);\n \t    return cp_expr (build_nt (BIT_NOT_EXPR, make_auto (), loc));\n \t  }\n@@ -8003,7 +8003,7 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n       if (cxx_dialect < cxx14)\n \tpedwarn (input_location, 0,\n \t\t \"%<~auto%> only available with \"\n-\t\t \"-std=c++14 or -std=gnu++14\");\n+\t\t \"%<-std=c++14%> or %<-std=gnu++14%>\");\n       cp_lexer_consume_token (parser->lexer);\n       cp_lexer_consume_token (parser->lexer);\n       *scope = NULL_TREE;\n@@ -10100,7 +10100,7 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n   {\n     const char *saved_message = parser->type_definition_forbidden_message;\n     parser->type_definition_forbidden_message\n-      = G_(\"types may not be defined within __builtin_offsetof\");\n+      = G_(\"types may not be defined within %<__builtin_offsetof%>\");\n     type = cp_parser_type_id (parser);\n     parser->type_definition_forbidden_message = saved_message;\n   }\n@@ -10390,7 +10390,7 @@ cp_parser_lambda_expression (cp_parser* parser)\n \t{\n \t  error_at (LAMBDA_EXPR_LOCATION (lambda_expr),\n \t\t    \"lambda-expression in unevaluated context\"\n-\t\t    \" only available with -std=c++2a or -std=gnu++2a\");\n+\t\t    \" only available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n \t  token->error_reported = true;\n \t}\n       ok = false;\n@@ -10400,7 +10400,7 @@ cp_parser_lambda_expression (cp_parser* parser)\n       if (!token->error_reported)\n \t{\n \t  error_at (token->location, \"lambda-expression in template-argument\"\n-\t\t    \" only available with -std=c++2a or -std=gnu++2a\");\n+\t\t    \" only available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n \t  token->error_reported = true;\n \t}\n       ok = false;\n@@ -10597,7 +10597,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n \t  if (cxx_dialect < cxx17)\n \t    pedwarn (loc, 0, \"%<*this%> capture only available with \"\n-\t\t\t     \"-std=c++17 or -std=gnu++17\");\n+\t\t\t     \"%<-std=c++17%> or %<-std=gnu++17%>\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t  cp_lexer_consume_token (parser->lexer);\n \t  add_capture (lambda_expr,\n@@ -10614,7 +10614,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n \t  if (cxx_dialect < cxx2a)\n \t    pedwarn (loc, 0, \"pack init-capture only available with \"\n-\t\t\t     \"-std=c++2a or -std=gnu++2a\");\n+\t\t\t     \"%<-std=c++2a%> or %<-std=gnu++2a%>\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t  init_pack_expansion = true;\n \t}\n@@ -10653,7 +10653,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t  if (cxx_dialect < cxx14)\n \t    pedwarn (input_location, 0,\n \t\t     \"lambda capture initializers \"\n-\t\t     \"only available with -std=c++14 or -std=gnu++14\");\n+\t\t     \"only available with %<-std=c++14%> or %<-std=gnu++14%>\");\n \t  capture_init_expr = cp_parser_initializer (parser, &direct,\n \t\t\t\t\t\t     &non_constant, true);\n \t  explicit_init_p = true;\n@@ -10791,11 +10791,11 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       if (cxx_dialect < cxx14)\n \tpedwarn (parser->lexer->next_token->location, 0,\n \t\t \"lambda templates are only available with \"\n-\t\t \"-std=c++14 or -std=gnu++14\");\n+\t\t \"%<-std=c++14%> or %<-std=gnu++14%>\");\n       else if (cxx_dialect < cxx2a)\n \tpedwarn (parser->lexer->next_token->location, OPT_Wpedantic,\n \t\t \"lambda templates are only available with \"\n-\t\t \"-std=c++2a or -std=gnu++2a\");\n+\t\t \"%<-std=c++2a%> or %<-std=gnu++2a%>\");\n \n       cp_lexer_consume_token (parser->lexer);\n \n@@ -10890,7 +10890,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \t    = lambda_specs.locations[ds_constexpr];\n \telse\n \t  error_at (lambda_specs.locations[ds_constexpr], \"%<constexpr%> \"\n-\t\t    \"lambda only available with -std=c++17 or -std=gnu++17\");\n+\t\t    \"lambda only available with %<-std=c++17%> or \"\n+\t\t    \"%<-std=gnu++17%>\");\n       }\n \n     p = obstack_alloc (&declarator_obstack, 0);\n@@ -11714,7 +11715,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t    cp_token *tok = cp_lexer_consume_token (parser->lexer);\n \t    if (cxx_dialect < cxx17 && !in_system_header_at (tok->location))\n \t      pedwarn (tok->location, 0, \"%<if constexpr%> only available \"\n-\t\t       \"with -std=c++17 or -std=gnu++17\");\n+\t\t       \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n \t  }\n \n \t/* Look for the `('.  */\n@@ -11741,7 +11742,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t    if (cxx_dialect < cxx17)\n \t      pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n \t\t       \"init-statement in selection statements only available \"\n-\t\t       \"with -std=c++17 or -std=gnu++17\");\n+\t\t       \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n \t    cp_parser_init_statement (parser, &decl);\n \t  }\n \n@@ -12728,7 +12729,7 @@ cp_parser_init_statement (cp_parser *parser, tree *decl)\n \t    {\n \t      pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n \t\t       \"range-based %<for%> loops with initializer only \"\n-\t\t       \"available with -std=c++2a or -std=gnu++2a\");\n+\t\t       \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n \t      *decl = error_mark_node;\n \t    }\n \t}\n@@ -12752,7 +12753,7 @@ cp_parser_init_statement (cp_parser *parser, tree *decl)\n \t  if (cxx_dialect < cxx11)\n \t    pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n \t\t     \"range-based %<for%> loops only available with \"\n-\t\t     \"-std=c++11 or -std=gnu++11\");\n+\t\t     \"%<-std=c++11%> or %<-std=gnu++11%>\");\n \t}\n       else\n \t/* The ';' is not consumed yet because we told\n@@ -13694,7 +13695,7 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n \n   if (cxx_dialect < cxx17)\n     pedwarn (loc, 0, \"structured bindings only available with \"\n-\t\t     \"-std=c++17 or -std=gnu++17\");\n+\t\t     \"%<-std=c++17%> or %<-std=gnu++17%>\");\n \n   tree pushed_scope;\n   cp_declarator *declarator = make_declarator (cdk_decomp);\n@@ -14231,8 +14232,8 @@ cp_parser_function_specifier_opt (cp_parser* parser,\n \n \t    if (cxx_dialect < cxx2a)\n \t      pedwarn (token->location, 0,\n-\t\t       \"%<explicit(bool)%> only available with -std=c++2a \"\n-\t\t       \"or -std=gnu++2a\");\n+\t\t       \"%<explicit(bool)%> only available with %<-std=c++2a%> \"\n+\t\t       \"or %<-std=gnu++2a%>\");\n \n \t    /* Parse the constant-expression.  */\n \t    expr = cp_parser_constant_expression (parser);\n@@ -14400,7 +14401,7 @@ cp_parser_static_assert(cp_parser *parser, bool member_p)\n       if (cxx_dialect < cxx17)\n \tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"static_assert without a message \"\n-\t\t \"only available with -std=c++17 or -std=gnu++17\");\n+\t\t \"only available with %<-std=c++17%> or %<-std=gnu++17%>\");\n       /* Eat the ')'  */\n       cp_lexer_consume_token (parser->lexer);\n       message = build_string (1, \"\");\n@@ -17642,17 +17643,17 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t\terror_at (token->location,\n \t\t\t \"use of %<auto%> in lambda parameter declaration \"\n \t\t\t \"only available with \"\n-\t\t\t \"-std=c++14 or -std=gnu++14\");\n+\t\t\t \"%<-std=c++14%> or %<-std=gnu++14%>\");\n \t    }\n \t  else if (cxx_dialect < cxx14)\n \t    error_at (token->location,\n \t\t     \"use of %<auto%> in parameter declaration \"\n \t\t     \"only available with \"\n-\t\t     \"-std=c++14 or -std=gnu++14\");\n+\t\t     \"%<-std=c++14%> or %<-std=gnu++14%>\");\n \t  else if (!flag_concepts)\n \t    pedwarn (token->location, 0,\n \t\t     \"use of %<auto%> in parameter declaration \"\n-\t\t     \"only available with -fconcepts\");\n+\t\t     \"only available with %<-fconcepts%>\");\n \t}\n       else\n \ttype = make_auto ();\n@@ -19178,7 +19179,7 @@ cp_parser_namespace_definition (cp_parser* parser)\n \t  if (cxx_dialect < cxx2a)\n \t    pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n \t\t     OPT_Wpedantic, \"nested inline namespace definitions only \"\n-\t\t     \"available with -std=c++2a or -std=gnu++2a\");\n+\t\t     \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t}\n \n@@ -19207,8 +19208,8 @@ cp_parser_namespace_definition (cp_parser* parser)\n   \n       if (!nested_definition_count && cxx_dialect < cxx17)\n         pedwarn (input_location, OPT_Wpedantic,\n-                 \"nested namespace definitions only available with \"\n-                 \"-std=c++17 or -std=gnu++17\");\n+\t\t \"nested namespace definitions only available with \"\n+\t\t \"%<-std=c++17%> or %<-std=gnu++17%>\");\n \n       /* Nested namespace names can create new namespaces (unlike\n \t other qualified-ids).  */\n@@ -19444,7 +19445,7 @@ cp_parser_using_declaration (cp_parser* parser,\n \t  && !in_system_header_at (ell->location))\n \tpedwarn (ell->location, 0,\n \t\t \"pack expansion in using-declaration only available \"\n-\t\t \"with -std=c++17 or -std=gnu++17\");\n+\t\t \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n       qscope = make_pack_expansion (qscope);\n     }\n \n@@ -19506,7 +19507,7 @@ cp_parser_using_declaration (cp_parser* parser,\n       if (cxx_dialect < cxx17)\n \tpedwarn (comma->location, 0,\n \t\t \"comma-separated list in using-declaration only available \"\n-\t\t \"with -std=c++17 or -std=gnu++17\");\n+\t\t \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n       goto again;\n     }\n \n@@ -22618,11 +22619,11 @@ cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,\n       if (DECL_CONSTRUCTOR_P (current_function_decl))\n \tpedwarn (input_location, 0,\n \t\t \"function-try-block body of %<constexpr%> constructor only \"\n-\t\t \"available with -std=c++2a or -std=gnu++2a\");\n+\t\t \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n       else\n \tpedwarn (input_location, 0,\n \t\t \"function-try-block body of %<constexpr%> function only \"\n-\t\t \"available with -std=c++2a or -std=gnu++2a\");\n+\t\t \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n     }\n \n   /* Begin the function body.  */\n@@ -22943,7 +22944,7 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p,\n \t  if (cxx_dialect < cxx2a)\n \t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"C++ designated initializers only available with \"\n-\t\t     \"-std=c++2a or -std=gnu++2a\");\n+\t\t     \"%<-std=c++2a%> or %<-std=gnu++2a%>\");\n \t  /* Consume the `.'.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  /* Consume the identifier.  */\n@@ -24160,7 +24161,7 @@ cp_parser_type_parameter_key (cp_parser* parser)\n \t   by the standard until C++17.  */\n \tpedwarn (token->location, OPT_Wpedantic, \n \t\t \"ISO C++ forbids typename key in template template parameter;\"\n-\t\t \" use -std=c++17 or -std=gnu++17\");\n+\t\t \" use %<-std=c++17%> or %<-std=gnu++17%>\");\n     }\n   else\n     cp_parser_error (parser, \"expected %<class%> or %<typename%>\");\n@@ -24546,8 +24547,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t      && identifier != NULL_TREE)\n \t\t    pedwarn (loc, 0,\n \t\t\t     \"default member initializers for bit-fields \"\n-\t\t\t     \"only available with -std=c++2a or \"\n-\t\t\t     \"-std=gnu++2a\");\n+\t\t\t     \"only available with %<-std=c++2a%> or \"\n+\t\t\t     \"%<-std=gnu++2a%>\");\n \n \t\t  initializer = cp_parser_save_nsdmi (parser);\n \t\t  if (identifier == NULL_TREE)\n@@ -25371,7 +25372,7 @@ cp_parser_try_block (cp_parser* parser)\n       && cxx_dialect < cxx2a)\n     pedwarn (input_location, 0,\n \t     \"%<try%> in %<constexpr%> function only \"\n-\t     \"available with -std=c++2a or -std=gnu++2a\");\n+\t     \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n \n   try_block = begin_try_block ();\n   cp_parser_compound_statement (parser, NULL, BCS_TRY_BLOCK, false);\n@@ -26250,7 +26251,7 @@ cp_parser_std_attribute_spec (cp_parser *parser)\n \t\t  && !in_system_header_at (input_location))\n \t\tpedwarn (input_location, 0,\n \t\t\t \"attribute using prefix only available \"\n-\t\t\t \"with -std=c++17 or -std=gnu++17\");\n+\t\t\t \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n \n \t      cp_lexer_consume_token (parser->lexer);\n \t      cp_lexer_consume_token (parser->lexer);\n@@ -26573,7 +26574,7 @@ cp_parser_requires_clause_opt (cp_parser *parser)\n \t  && tok->u.value == ridpointers[RID_REQUIRES])\n \t{\n \t  error_at (cp_lexer_peek_token (parser->lexer)->location,\n-\t\t    \"%<requires%> only available with -fconcepts\");\n+\t\t    \"%<requires%> only available with %<-fconcepts%>\");\n \t  /* Parse and discard the requires-clause.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  cp_parser_requires_clause (parser);"}, {"sha": "f48f4605b0feac6d6ccc052e081ce2de2b7c8227", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2616,8 +2616,8 @@ check_template_variable (tree decl)\n     {\n       if (cxx_dialect < cxx14)\n         pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n-                 \"variable templates only available with \"\n-                 \"-std=c++14 or -std=gnu++14\");\n+\t\t \"variable templates only available with \"\n+\t\t \"%<-std=c++14%> or %<-std=gnu++14%>\");\n \n       // Namespace-scope variable templates should have a template header.\n       ++wanted;\n@@ -5292,7 +5292,7 @@ check_default_tmpl_args (tree decl, tree parms, bool is_primary,\n \t     \"friend declarations\");\n   else if (TREE_CODE (decl) == FUNCTION_DECL && (cxx_dialect == cxx98))\n     msg = G_(\"default template arguments may not be used in function templates \"\n-\t     \"without -std=c++11 or -std=gnu++11\");\n+\t     \"without %<-std=c++11%> or %<-std=gnu++11%>\");\n   else if (is_partial)\n     msg = G_(\"default template arguments may not be used in \"\n \t     \"partial specializations\");\n@@ -10191,7 +10191,7 @@ push_tinst_level_loc (tree tldcl, tree targs, location_t loc)\n       at_eof = 2;\n       fatal_error (input_location,\n \t\t   \"template instantiation depth exceeds maximum of %d\"\n-                   \" (use -ftemplate-depth= to increase the maximum)\",\n+\t\t   \" (use %<-ftemplate-depth=%> to increase the maximum)\",\n                    max_tinst_depth);\n       return false;\n     }\n@@ -24727,9 +24727,9 @@ instantiate_pending_templates (int retries)\n \n       fatal_error (input_location,\n \t\t   \"template instantiation depth exceeds maximum of %d\"\n-                   \" instantiating %q+D, possibly from virtual table generation\"\n-                   \" (use -ftemplate-depth= to increase the maximum)\",\n-                   max_tinst_depth, decl);\n+\t\t   \" instantiating %q+D, possibly from virtual table generation\"\n+\t\t   \" (use %<-ftemplate-depth=%> to increase the maximum)\",\n+\t\t   max_tinst_depth, decl);\n       if (TREE_CODE (decl) == FUNCTION_DECL)\n \t/* Pretend that we defined it.  */\n \tDECL_INITIAL (decl) = error_mark_node;\n@@ -25102,7 +25102,7 @@ invalid_nontype_parm_type_p (tree type, tsubst_flags_t complain)\n       if (cxx_dialect < cxx2a)\n \t{\n \t  error (\"non-type template parameters of class type only available \"\n-\t\t \"with -std=c++2a or -std=gnu++2a\");\n+\t\t \"with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n \t  return true;\n \t}\n       if (!complete_type_or_else (type, NULL_TREE))"}, {"sha": "5588e6abdc55075574b0ead730c15555075765ff", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -110,7 +110,7 @@ get_base_filename (const char *filename)\n \n   if (p && ! compiling)\n     {\n-      warning (0, \"-frepo must be used with -c\");\n+      warning (0, \"%<-frepo%> must be used with %<-c%>\");\n       flag_use_repository = 0;\n       return NULL;\n     }"}, {"sha": "3ca2b5e7b886fd60dd33aa9e8c8f5ae3ba264ae3", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -310,7 +310,7 @@ typeid_ok_p (void)\n {\n   if (! flag_rtti)\n     {\n-      error (\"cannot use %<typeid%> with -fno-rtti\");\n+      error (\"cannot use %<typeid%> with %<-fno-rtti%>\");\n       return false;\n     }\n \n@@ -719,7 +719,7 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t  if (!flag_rtti)\n \t    {\n               if (complain & tf_error)\n-                error (\"%<dynamic_cast%> not permitted with -fno-rtti\");\n+\t\terror (\"%<dynamic_cast%> not permitted with %<-fno-rtti%>\");\n \t      return error_mark_node;\n \t    }\n "}, {"sha": "af077e795cfba32050da934bf56d0590b17731c4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3990,11 +3990,11 @@ maybe_warn_parm_abi (tree t, location_t loc)\n       bool w;\n       auto_diagnostic_group d;\n       if (flag_abi_version > 12)\n-\tw = warning_at (loc, OPT_Wabi, \"-fabi-version=13 (GCC 8.2) fixes the \"\n-\t\t\t\"calling convention for %qT, which was accidentally \"\n-\t\t\t\"changed in 8.1\", t);\n+\tw = warning_at (loc, OPT_Wabi, \"%<-fabi-version=13%> (GCC 8.2) fixes \"\n+\t\t\t\"the calling convention for %qT, which was \"\n+\t\t\t\"accidentally changed in 8.1\", t);\n       else\n-\tw = warning_at (loc, OPT_Wabi, \"-fabi-version=12 (GCC 8.1) accident\"\n+\tw = warning_at (loc, OPT_Wabi, \"%<-fabi-version=12%> (GCC 8.1) accident\"\n \t\t\t\"ally changes the calling convention for %qT\", t);\n       if (w)\n \tinform (location_of (t), \" declared here\");\n@@ -4003,7 +4003,7 @@ maybe_warn_parm_abi (tree t, location_t loc)\n \n   auto_diagnostic_group d;\n   if (warning_at (loc, OPT_Wabi, \"the calling convention for %qT changes in \"\n-\t\t  \"-fabi-version=13 (GCC 8.2)\", t))\n+\t\t  \"%<-fabi-version=13%> (GCC 8.2)\", t))\n     inform (location_of (t), \" because all of its copy and move \"\n \t    \"constructors are deleted\");\n }"}, {"sha": "ebaa310821c0da35c6ef3ba28d76c1e59e0a7817", "filename": "gcc/dbgcnt.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fdbgcnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fdbgcnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -91,22 +91,22 @@ dbg_cnt_set_limit_by_name (const char *name, int low, int high)\n {\n   if (high < low)\n     {\n-      error (\"-fdbg-cnt=%s:%d:%d has smaller upper limit than the lower\",\n+      error (\"%<-fdbg-cnt=%s:%d:%d%> has smaller upper limit than the lower\",\n \t     name, low, high);\n       return false;\n     }\n \n   if (low < 0)\n     {\n-      error (\"Lower limit %d of -fdbg-cnt=%s must be a non-negative number\", low,\n-\t     name);\n+      error (\"Lower limit %d of %<-fdbg-cnt=%s%> must be a non-negative \"\n+\t     \"number\", low, name);\n       return false;\n     }\n \n   if (high < 0)\n     {\n-      error (\"Upper limit %d of -fdbg-cnt=%s must be a non-negative number\", high,\n-\t     name);\n+      error (\"Upper limit %d of %<-fdbg-cnt=%s%> must be a non-negative \"\n+\t     \"number\", high, name);\n       return false;\n     }\n \n@@ -173,7 +173,7 @@ dbg_cnt_process_opt (const char *arg)\n        char *buffer = XALLOCAVEC (char, start + 2);\n        sprintf (buffer, \"%*c\", start + 1, '^');\n        error (\"cannot find a valid counter:value pair:\");\n-       error (\"-fdbg-cnt=%s\", next);\n+       error (\"%<-fdbg-cnt=%s%>\", next);\n        error (\"          %s\", buffer);\n      }\n }"}, {"sha": "83055556814476b23981c8bdecaca9c80d42d034", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -10982,8 +10982,8 @@ output_dwarf_version ()\n       static bool once;\n       if (!once)\n \t{\n-\t  warning (0,\n-\t\t   \"-gdwarf-6 is output as version 5 with incompatibilities\");\n+\t  warning (0, \"%<-gdwarf-6%> is output as version 5 with \"\n+\t\t   \"incompatibilities\");\n \t  once = true;\n \t}\n       dw2_asm_output_data (2, 5, \"DWARF version number\");"}, {"sha": "e760c4467ddeda935d6cc172effd7314589041d2", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2288,7 +2288,7 @@ expand_eh_return (void)\n       if (rtx handler = EH_RETURN_HANDLER_RTX)\n \temit_move_insn (handler, crtl->eh.ehr_handler);\n       else\n-\terror (\"__builtin_eh_return not supported on this target\");\n+\terror (\"%<__builtin_eh_return%> not supported on this target\");\n     }\n \n   emit_label (around_label);"}, {"sha": "1c738baedaa1c3c301757c49597120c7d17983e7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,14 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl.c (match_record_decl): Wrap an option name\n+\tin a string format message and fix GNU coding style.\n+\t(gfc_match_pointer): Likewise.\n+\t* expr.c (find_array_section): Likewise.\n+\t* intrinsic.c (gfc_is_intrinsic): Likewise.\n+\t* options.c (gfc_post_options): Likewise.\n+\t* primary.c (match_integer_constant): Likewise.\n+\t* trans-common.c (translate_common): Likewise.\n+\n 2019-03-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/66089"}, {"sha": "a29e2db0bd6aa1e532fcfa27107e17abbdb23121", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3440,7 +3440,7 @@ match_record_decl (char *name)\n             {\n                 gfc_current_locus = old_loc;\n                 gfc_error (\"RECORD at %C is an extension, enable it with \"\n-                           \"-fdec-structure\");\n+\t\t\t   \"%<-fdec-structure%>\");\n                 return MATCH_ERROR;\n             }\n           m = gfc_match (\" %n/\", name);\n@@ -8651,8 +8651,8 @@ gfc_match_pointer (void)\n     {\n       if (!flag_cray_pointer)\n \t{\n-\t  gfc_error (\"Cray pointer declaration at %C requires -fcray-pointer \"\n-\t\t     \"flag\");\n+\t  gfc_error (\"Cray pointer declaration at %C requires \"\n+\t\t     \"%<-fcray-pointer%> flag\");\n \t  return MATCH_ERROR;\n \t}\n       return cray_pointer_decl ();"}, {"sha": "08bd8e0263e538e4204adb2fdd74ea0af239a1ea", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1642,7 +1642,7 @@ find_array_section (gfc_expr *expr, gfc_ref *ref)\n         {\n \t  gfc_error (\"The number of elements in the array constructor \"\n \t\t     \"at %L requires an increase of the allowed %d \"\n-\t\t     \"upper limit.   See -fmax-array-constructor \"\n+\t\t     \"upper limit.  See %<-fmax-array-constructor%> \"\n \t\t     \"option\", &expr->where, flag_max_array_constructor);\n \t  return false;\n \t}"}, {"sha": "4797b3d95cfec181f01c250621bea5504ee0b963", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1125,8 +1125,8 @@ gfc_is_intrinsic (gfc_symbol* sym, int subroutine_flag, locus loc)\n \tgfc_warning_now (OPT_Wintrinsics_std, \"The intrinsic %qs at %L is not \"\n \t\t\t \"included in the selected standard but %s and %qs will\"\n \t\t\t \" be treated as if declared EXTERNAL.  Use an\"\n-\t\t\t \" appropriate -std=* option or define\"\n-\t\t\t \" -fall-intrinsics to allow this intrinsic.\",\n+\t\t\t \" appropriate %<-std=%>* option or define\"\n+\t\t\t \" %<-fall-intrinsics%> to allow this intrinsic.\",\n \t\t\t sym->name, &loc, symstd, sym->name);\n \n       return false;"}, {"sha": "02970d59066886b482b8697689b49c5334a70002", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -263,7 +263,7 @@ gfc_post_options (const char **pfilename)\n   /* Excess precision other than \"fast\" requires front-end\n      support.  */\n   if (flag_excess_precision_cmdline == EXCESS_PRECISION_STANDARD)\n-    sorry (\"-fexcess-precision=standard for Fortran\");\n+    sorry (\"%<-fexcess-precision=standard%> for Fortran\");\n   flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n \n   /* Fortran allows associative math - but we cannot reassociate if"}, {"sha": "5bfb90c5decc7ec89376beb05896c8ed8fe4ef2a", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -237,7 +237,7 @@ match_integer_constant (gfc_expr **result, int signflag)\n   if (gfc_range_check (e) != ARITH_OK)\n     {\n       gfc_error (\"Integer too big for its kind at %C. This check can be \"\n-\t\t \"disabled with the option -fno-range-check\");\n+\t\t \"disabled with the option %<-fno-range-check%>\");\n \n       gfc_free_expr (e);\n       return MATCH_ERROR;"}, {"sha": "debdbd98ac0820b927d2d4a43df4de88a25b4d1f", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1156,13 +1156,13 @@ translate_common (gfc_common_head *common, gfc_symbol *var_list)\n \t\t    gfc_warning (OPT_Walign_commons,\n \t\t\t\t \"Padding of %d bytes required before %qs in \"\n \t\t\t\t \"COMMON %qs at %L; reorder elements or use \"\n-\t\t\t\t \"-fno-align-commons\", (int)offset,\n+\t\t\t\t \"%<-fno-align-commons%>\", (int)offset,\n \t\t\t\t s->sym->name, common->name, &common->where);\n \t\t  else\n \t\t    gfc_warning (OPT_Walign_commons,\n \t\t\t\t \"Padding of %d bytes required before %qs in \"\n \t\t\t\t \"COMMON at %L; reorder elements or use \"\n-\t\t\t\t \"-fno-align-commons\", (int)offset,\n+\t\t\t\t \"%<-fno-align-commons%>\", (int)offset,\n \t\t\t\t s->sym->name, &common->where);\n \t\t}\n \t    }"}, {"sha": "4f57765b012ae07bd0c44ba740d439f965af3379", "filename": "gcc/gcc.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3075,7 +3075,7 @@ execute (void)\n     if (arg && strcmp (arg, \"|\") == 0)\n       {\t\t\t\t/* each command.  */\n #if defined (__MSDOS__) || defined (OS2) || defined (VMS)\n-\tfatal_error (input_location, \"-pipe not supported\");\n+\tfatal_error (input_location, \"%<-pipe%> not supported\");\n #endif\n \targbuf[i] = 0; /* Termination of\n \t\t\t\t\t\t     command args.  */\n@@ -4148,7 +4148,7 @@ driver_handle_option (struct gcc_options *opts,\n \t       || strcmp (arg, \"object\") == 0)\n \tsave_temps_flag = SAVE_TEMPS_OBJ;\n       else\n-\tfatal_error (input_location, \"%qs is an unknown -save-temps option\",\n+\tfatal_error (input_location, \"%qs is an unknown %<-save-temps%> option\",\n \t\t     decoded->orig_option_with_args_text);\n       break;\n \n@@ -4651,7 +4651,7 @@ process_command (unsigned int decoded_options_count,\n     {\n       /* -save-temps overrides -pipe, so that temp files are produced */\n       if (save_temps_flag)\n-\twarning (0, \"-pipe ignored because -save-temps specified\");\n+\twarning (0, \"%<-pipe%> ignored because %<-save-temps%> specified\");\n       use_pipes = 0;\n     }\n \n@@ -7243,7 +7243,7 @@ compare_files (char *cmpfile[])\n \n     if (!ret && length[0] != length[1])\n       {\n-\terror (\"%s: -fcompare-debug failure (length)\", gcc_input_filename);\n+\terror (\"%s: %<-fcompare-debug%> failure (length)\", gcc_input_filename);\n \tret = 1;\n       }\n \n@@ -7273,7 +7273,7 @@ compare_files (char *cmpfile[])\n       {\n \tif (memcmp (map[0], map[1], length[0]) != 0)\n \t  {\n-\t    error (\"%s: -fcompare-debug failure\", gcc_input_filename);\n+\t    error (\"%s: %<-fcompare-debug%> failure\", gcc_input_filename);\n \t    ret = 1;\n \t  }\n       }\n@@ -7310,7 +7310,7 @@ compare_files (char *cmpfile[])\n \n \tif (c0 != c1)\n \t  {\n-\t    error (\"%s: -fcompare-debug failure\",\n+\t    error (\"%s: %<-fcompare-debug%> failure\",\n \t\t   gcc_input_filename);\n \t    ret = 1;\n \t    break;\n@@ -8086,7 +8086,8 @@ driver::prepare_infiles ()\n \n   if (!combine_inputs && have_c && have_o && lang_n_infiles > 1)\n     fatal_error (input_location,\n-\t\t \"cannot specify -o with -c, -S or -E with multiple files\");\n+\t\t \"cannot specify %<-o%> with %<-c%>, %<-S%> or %<-E%> \"\n+\t\t \"with multiple files\");\n \n   /* No early exit needed from main; we can continue.  */\n   return false;\n@@ -8152,7 +8153,7 @@ driver::do_spec_on_infiles () const\n \t\t{\n \t\t  if (verbose_flag)\n \t\t    inform (UNKNOWN_LOCATION,\n-\t\t\t    \"recompiling with -fcompare-debug\");\n+\t\t\t    \"recompiling with %<-fcompare-debug%>\");\n \n \t\t  compare_debug = -compare_debug;\n \t\t  n_switches = n_switches_debug_check[1];\n@@ -8168,7 +8169,7 @@ driver::do_spec_on_infiles () const\n \n \t\t  if (value < 0)\n \t\t    {\n-\t\t      error (\"during -fcompare-debug recompilation\");\n+\t\t      error (\"during %<-fcompare-debug%> recompilation\");\n \t\t      this_file_error = 1;\n \t\t    }\n \n@@ -8294,7 +8295,7 @@ driver::maybe_run_linker (const char *argv0) const\n \t\t\t\t\t     false);\n \t      if (!temp_spec)\n \t\tfatal_error (input_location,\n-\t\t\t     \"-fuse-linker-plugin, but %s not found\",\n+\t\t\t     \"%<-fuse-linker-plugin%>, but %s not found\",\n \t\t\t     LTOPLUGINSONAME);\n \t      linker_plugin_file_spec = convert_white_space (temp_spec);\n \t    }"}, {"sha": "39c7b26266d48b0a78a3ededdd878767fb9d1b25", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,9 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-lang.c (lto_post_options): Wrap an option name\n+\tin a string format message and fix GNU coding style.\n+\t* lto-symtab.c (lto_symtab_merge_decls_2): Likewise.\n+\n 2019-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/79645"}, {"sha": "5a35d4794c244c42d2d57e197f68abf409e526c1", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -864,7 +864,7 @@ lto_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n {\n   /* -fltrans and -fwpa are mutually exclusive.  Check for that here.  */\n   if (flag_wpa && flag_ltrans)\n-    error (\"-fwpa and -fltrans are mutually exclusive\");\n+    error (\"%<-fwpa%> and %<-fltrans%> are mutually exclusive\");\n \n   if (flag_ltrans)\n     {\n@@ -898,7 +898,8 @@ lto_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n       lang_hooks.lto.append_data = lhd_append_data;\n       lang_hooks.lto.end_section = lhd_end_section;\n       if (flag_ltrans)\n-\terror (\"-flinker-output=rel and -fltrans are mutually exclussive\");\n+\terror (\"%<-flinker-output=rel%> and %<-fltrans%> are mutually \"\n+\t       \"exclussive\");\n       break;\n \n     case LTO_LINKER_OUTPUT_NOLTOREL: /* .o: incremental link producing asm  */"}, {"sha": "ea9d21d33ce6a4e67913a8c97ddbe0597afa3290", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -750,7 +750,7 @@ lto_symtab_merge_decls_2 (symtab_node *first, bool diagnosed_p)\n   if (tbaa_p)\n     inform (DECL_SOURCE_LOCATION (prevailing->decl),\n \t    \"code may be misoptimized unless \"\n-\t    \"-fno-strict-aliasing is used\");\n+\t    \"%<-fno-strict-aliasing is used%>\");\n \n   mismatches.release ();\n }"}, {"sha": "7c65b2b289026fd3893158bca629266a7577c6f2", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -639,7 +639,7 @@ oacc_parse_default_dims (const char *dims)\n \t{\n \tmalformed:\n \t  error_at (UNKNOWN_LOCATION,\n-\t\t    \"-fopenacc-dim operand is malformed at '%s'\", pos);\n+\t\t    \"%<-fopenacc-dim%> operand is malformed at '%s'\", pos);\n \t}\n     }\n "}, {"sha": "a5e9ef0237aac6fe191e2f4e68929ba6b8c4eeb9", "filename": "gcc/opts-global.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -448,8 +448,8 @@ handle_common_deferred_options (void)\n \n \tcase OPT_fasan_shadow_offset_:\n \t  if (!(flag_sanitize & SANITIZE_KERNEL_ADDRESS))\n-\t    error (\"-fasan-shadow-offset should only be used \"\n-\t\t   \"with -fsanitize=kernel-address\");\n+\t    error (\"%<-fasan-shadow-offset%> should only be used \"\n+\t\t   \"with %<-fsanitize=kernel-address%>\");\n \t  if (!set_asan_shadow_offset (opt->arg))\n \t     error (\"unrecognized shadow offset %qs\", opt->arg);\n \t  break;"}, {"sha": "3161e0b67533545436116a79e40469aa81bfc4bd", "filename": "gcc/opts.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1927,14 +1927,14 @@ parse_sanitizer_options (const char *p, location_t loc, int scode,\n \n \t  if (hint)\n \t    error_at (loc,\n-\t\t      \"unrecognized argument to -f%ssanitize%s= option: %q.*s;\"\n-\t\t      \" did you mean %qs?\",\n+\t\t      \"unrecognized argument to %<-f%ssanitize%s=%> \"\n+\t\t      \"option: %q.*s; did you mean %qs?\",\n \t\t      value ? \"\" : \"no-\",\n \t\t      suffix, (int) len, p, hint);\n \t  else\n \t    error_at (loc,\n-\t\t      \"unrecognized argument to -f%ssanitize%s= option: %q.*s\",\n-\t\t      value ? \"\" : \"no-\",\n+\t\t      \"unrecognized argument to %<-f%ssanitize%s=%> option: \"\n+\t\t      \"%q.*s\", value ? \"\" : \"no-\",\n \t\t      suffix, (int) len, p);\n \t}\n \n@@ -2677,9 +2677,9 @@ common_handle_option (struct gcc_options *opts,\n     case OPT_gdwarf:\n       if (arg && strlen (arg) != 0)\n         {\n-          error_at (loc, \"%<-gdwarf%s%> is ambiguous; \"\n-                    \"use %<-gdwarf-%s%> for DWARF version \"\n-                    \"or %<-gdwarf -g%s%> for debug level\", arg, arg, arg);\n+\t  error_at (loc, \"%<-gdwarf%s%> is ambiguous; \"\n+\t\t    \"use %<-gdwarf-%s%> for DWARF version \"\n+\t\t    \"or %<-gdwarf%> %<-g%s%> for debug level\", arg, arg, arg);\n           break;\n         }\n       else\n@@ -3079,10 +3079,10 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n   strcpy (new_option + 1, arg);\n   option_index = find_opt (new_option, lang_mask);\n   if (option_index == OPT_SPECIAL_unknown)\n-    error_at (loc, \"-Werror=%s: no option -%s\", arg, new_option);\n+    error_at (loc, \"%<-Werror=%s%>: no option -%s\", arg, new_option);\n   else if (!(cl_options[option_index].flags & CL_WARNING))\n-    error_at (loc, \"-Werror=%s: -%s is not an option that controls warnings\",\n-\t      arg, new_option);\n+    error_at (loc, \"%<-Werror=%s%>: -%s is not an option that controls \"\n+\t      \"warnings\", arg, new_option);\n   else\n     {\n       const diagnostic_t kind = value ? DK_ERROR : DK_WARNING;"}, {"sha": "02561f8bf1890b4c942cc6bc85edcb437e3cafb8", "filename": "gcc/passes.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1021,19 +1021,19 @@ enable_disable_pass (const char *arg, bool is_enable)\n   if (!*phase_name)\n     {\n       if (is_enable)\n-        error (\"unrecognized option -fenable\");\n+\terror (\"unrecognized option %<-fenable%>\");\n       else\n-        error (\"unrecognized option -fdisable\");\n+\terror (\"unrecognized option %<-fdisable%>\");\n       free (argstr);\n       return;\n     }\n   pass = g->get_passes ()->get_pass_by_name (phase_name);\n   if (!pass || pass->static_pass_number == -1)\n     {\n       if (is_enable)\n-        error (\"unknown pass %s specified in -fenable\", phase_name);\n+\terror (\"unknown pass %s specified in %<-fenable%>\", phase_name);\n       else\n-        error (\"unknown pass %s specified in -fdisable\", phase_name);\n+\terror (\"unknown pass %s specified in %<-fdisable%>\", phase_name);\n       free (argstr);\n       return;\n     }"}, {"sha": "2896c6a9392d9366e8f12c66657e6e945024c068", "filename": "gcc/plugin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -290,7 +290,7 @@ parse_plugin_arg_opt (const char *arg)\n \n   if (!key_start)\n     {\n-      error (\"malformed option -fplugin-arg-%s (missing -<key>[=<value>])\",\n+      error (\"malformed option %<-fplugin-arg-%s%> (missing -<key>[=<value>])\",\n              arg);\n       return;\n     }\n@@ -353,7 +353,7 @@ parse_plugin_arg_opt (const char *arg)\n       plugin->argv[plugin->argc - 1].value = value;\n     }\n   else\n-    error (\"plugin %s should be specified before -fplugin-arg-%s \"\n+    error (\"plugin %s should be specified before %<-fplugin-arg-%s%> \"\n            \"in the command line\", name, arg);\n \n   /* We don't need the plugin's name anymore. Just release it.  */\n@@ -1003,6 +1003,6 @@ default_plugin_dir_name (void)\n {\n   if (!plugindir_string)\n     fatal_error (input_location,\n-\t\t \"-iplugindir <dir> option not passed from the gcc driver\");\n+\t\t \"%<-iplugindir%> <dir> option not passed from the gcc driver\");\n   return plugindir_string;\n }"}, {"sha": "318f7e9784ad1d4c7535ffc0d256eb0747f1da37", "filename": "gcc/targhooks.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -188,7 +188,7 @@ default_const_not_ok_for_debug_p (rtx x)\n rtx\n default_expand_builtin_saveregs (void)\n {\n-  error (\"__builtin_saveregs not supported by this target\");\n+  error (\"%<__builtin_saveregs%> not supported by this target\");\n   return const0_rtx;\n }\n \n@@ -2031,9 +2031,9 @@ default_pch_valid_p (const void *data_p, size_t len)\n \n   /* -fpic and -fpie also usually make a PCH invalid.  */\n   if (data[0] != flag_pic)\n-    return _(\"created and used with different settings of -fpic\");\n+    return _(\"created and used with different settings of %<-fpic%>\");\n   if (data[1] != flag_pie)\n-    return _(\"created and used with different settings of -fpie\");\n+    return _(\"created and used with different settings of %<-fpie%>\");\n   data += 2;\n \n   /* Check target_flags.  */"}, {"sha": "aec924f27aacb724fc1833f372a6f78b559f5ea0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,42 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/conversion/simd3.C (foo): Wrap option names\n+\twith apostrophe character.\n+\t* g++.dg/cpp1z/decomp3.C (test): Likewise.\n+\t(test3): Likewise.\n+\t* g++.dg/cpp1z/decomp4.C (test): Likewise.\n+\t* g++.dg/cpp1z/decomp44.C (foo): Likewise.\n+\t* g++.dg/cpp1z/decomp45.C (f): Likewise.\n+\t* g++.dg/opt/pr34036.C: Likewise.\n+\t* g++.dg/spellcheck-c++-11-keyword.C: Likewise.\n+\t* gcc.dg/c90-fordecl-1.c (foo): Likewise.\n+\t* gcc.dg/cpp/dir-only-4.c: Likewise.\n+\t* gcc.dg/cpp/dir-only-5.c: Likewise.\n+\t* gcc.dg/cpp/pr71591.c: Likewise.\n+\t* gcc.dg/format/opt-1.c: Likewise.\n+\t* gcc.dg/format/opt-2.c: Likewise.\n+\t* gcc.dg/format/opt-3.c: Likewise.\n+\t* gcc.dg/format/opt-4.c: Likewise.\n+\t* gcc.dg/format/opt-5.c: Likewise.\n+\t* gcc.dg/format/opt-6.c: Likewise.\n+\t* gcc.dg/pr22231.c: Likewise.\n+\t* gcc.dg/pr33007.c: Likewise.\n+\t* gcc.dg/simd-1.c (hanneke): Likewise.\n+\t* gcc.dg/simd-5.c: Likewise.\n+\t* gcc.dg/simd-6.c: Likewise.\n+\t* gcc.dg/spellcheck-options-14.c: Likewise.\n+\t* gcc.dg/spellcheck-options-15.c: Likewise.\n+\t* gcc.dg/spellcheck-options-16.c: Likewise.\n+\t* gcc.dg/spellcheck-options-17.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr23109.c: Likewise.\n+\t* gcc.dg/tree-ssa/recip-5.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-1a.c (func): Likewise.\n+\t(__attribute__): Likewise.\n+\t* gcc.target/i386/cet-notrack-icf-1.c (fn3): Likewise.\n+\t* gcc.target/i386/cet-notrack-icf-3.c (__attribute__): Likewise.\n+\t* gcc.target/powerpc/warn-1.c: Likewise.\n+\t* gcc.target/powerpc/warn-2.c: Likewise.\n+\n 2019-03-11  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/zvector/vec-addc-u128.c: New test."}, {"sha": "959ad502f5de9f618e3cc809a321ef42c4375e0f", "filename": "gcc/testsuite/g++.dg/conversion/simd3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd3.C?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -10,6 +10,6 @@ unsigned int __attribute__((vector_size(16))) e;\n void foo()\n {\n \tb + d; /* { dg-error \"invalid operands to binary\" } */\n-\td += e; /* { dg-message \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts.*cannot convert '__vector.4. unsigned int' to '__vector.4. int' in assignment\" } */\n+\td += e; /* { dg-message \"use '-flax-vector-conversions' to permit conversions between vectors with differing element types or numbers of subparts.*cannot convert '__vector.4. unsigned int' to '__vector.4. int' in assignment\" } */\n \td2 += d;\n }"}, {"sha": "95e9f376dd22e27853ed19fb74c5b5815211abeb", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp3.C", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -10,35 +10,35 @@ void\n test (A &b, B c)\n {\n   int && [ d ] = c;\t\t\t// { dg-error \"structured binding declaration cannot have type 'int'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   char & [ e, f, ff ] { b };\t\t// { dg-error \"structured binding declaration cannot have type 'char'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n-  auto&[g,h,i]=b;\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n+  auto&[g,h,i]=b;\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } }\n   decltype (auto) [ j ] = c;\t\t// { dg-error \"structured binding declaration cannot have type 'decltype.auto.'\" \"\" { target c++14 } }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n \t\t\t\t\t// { dg-error \"expected primary-expression before 'decltype'\" \"\" { target c++11_down } .-2 }\n   auto & & && & [ m, n, o ] = b;\t// { dg-error \"multiple ref-qualifiers\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   constexpr auto [ p ] = c;\t\t// { dg-error \"structured binding declaration cannot be 'constexpr'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   friend auto [ q ] = c;\t\t// { dg-error \"'friend' used outside of class\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   typedef auto [ r ] = c;\t\t// { dg-error \"structured binding declaration cannot be 'typedef'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   inline auto [ s ] = c;\t\t// { dg-error \"structured binding declaration cannot be 'inline'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   __restrict auto [ t ] = c;\t\t// { dg-error \"invalid use of 'restrict'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   long long auto [ u ] = c;\t\t// { dg-error \"'long long' specified with 'auto'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   virtual auto [ v ] = c;\t\t// { dg-error \"'virtual' outside class declaration\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   explicit auto [ w ] = c;\t\t// { dg-error \"'explicit' outside class declaration\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   static auto [ x ] = c;\t\t// { dg-error \"structured binding declaration cannot be 'static'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   extern auto [ y ] { c };\t\t// { dg-error \"structured binding declaration cannot be 'extern'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n }\n \n void\n@@ -53,19 +53,19 @@ test3 (A &b, B c)\n {\n   auto [ d, e, f ] = arr;\t\t// { dg-error \"only 3 names provided\" }\n \t\t\t\t\t// { dg-message \"while 'int .4.' decomposes into 4 elements\" \"\" { target *-*-* } .-1 }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-2 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-2 }\n   auto & [ g, h, i, j, k ] = arr;\t// { dg-error \"5 names provided\" }\n \t\t\t\t\t// { dg-message \"while 'int .4.' decomposes into 4 elements\" \"\" { target *-*-* } .-1 }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-2 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-2 }\n   auto [ l, m ] = b;\t\t\t// { dg-error \"only 2 names provided\" }\n \t\t\t\t\t// { dg-message \"while 'A' decomposes into 3 elements\" \"\" { target *-*-* } .-1 }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-2 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-2 }\n   auto & [ n, o, p, q ] = b;\t\t// { dg-error \"4 names provided\" }\n \t\t\t\t\t// { dg-message \"while 'A' decomposes into 3 elements\" \"\" { target *-*-* } .-1 }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-2 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-2 }\n   auto [] { c };\t\t\t// { dg-error \"empty structured binding declaration\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   auto [ r, s ] = c;\t\t\t// { dg-error \"2 names provided\" }\n \t\t\t\t\t// { dg-message \"while 'B' decomposes into 1 element\" \"\" { target *-*-* } .-1 }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-2 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-2 }\n }"}, {"sha": "f2d491f628157a8fe75745a6bbad4ba0d3701cda", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp4.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp4.C?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -15,18 +15,18 @@ void\n test (A &a, B &b, C &c, D &d, E &e, F &f, G &g, H &h, I &i)\n {\n   auto [ j ] = a;\t\t\t// { dg-error \"cannot decompose class type 'A' because it has an anonymous struct member\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   auto [ k ] { b };\t\t\t// { dg-error \"cannot decompose class type 'B' because it has an anonymous union member\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   auto [ l, l2 ] = c;\t\t\t// { dg-error \"cannot decompose inaccessible member 'C::b' of 'C'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n-  auto [ m ] = d;\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n+  auto [ m ] = d;\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } }\n   auto [ n ] { e };\t\t\t// { dg-error \"cannot decompose inaccessible member 'E::a' of 'E'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n-  auto [ o ] { f };\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n+  auto [ o ] { f };\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } }\n   auto & [ p ] { g };\t\t\t// { dg-error \"cannot decompose class type 'G': both it and its base class 'F' have non-static data members\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n-  auto [ q ] { h };\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n+  auto [ q ] { h };\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } }\n   auto [ r ] { i };\t\t\t// { dg-error \"cannot decompose class type 'I': its base classes 'F' and 'H' have non-static data members\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n }"}, {"sha": "c797a1a6c7ce9c7a725e857ddb6d3bb96b20fa90", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp44.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp44.C?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -7,4 +7,4 @@ extern struct A a;\n template<int> void foo()\n {\n   auto[i] = a;  // { dg-warning \"incomplete\" }\n-}  // { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+}  // { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }"}, {"sha": "c79e7c97b6963d751fa3f9cd2168ff93b25bfb18", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp45.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp45.C?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -8,7 +8,7 @@ template<int>\n void f()\n {\n   auto [x] = a;  // { dg-warning \"incomplete\" }\n-}  // { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+}  // { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n \n struct A { int i; };\n "}, {"sha": "96f09cdd8368dd51015e29c2224b1873fce1c385", "filename": "gcc/testsuite/g++.dg/opt/pr34036.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr34036.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr34036.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr34036.C?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fnon-call-exceptions -ffast-math -fsignaling-nans\" } */\n-/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-fassociative-math' disabled\" \"\" { target *-*-* } 0 } */\n \n template <class T>\n class ggStaticArray {"}, {"sha": "46124cb56c24a4f4d4e37a6d40dedf7a7b8cfbe0", "filename": "gcc/testsuite/g++.dg/spellcheck-c++-11-keyword.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-c%2B%2B-11-keyword.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-c%2B%2B-11-keyword.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-c%2B%2B-11-keyword.C?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3,13 +3,13 @@\n // { dg-options \"-std=c++98\" }\n \n constexpr int a = 1; // { dg-bogus \"did you mean\" }\n-// { dg-error \".constexpr. does not name a type\" \"\" { target *-*-* } .-1 }\n-// { dg-message \"C\\\\+\\\\+11 .constexpr. only available with -std=c\\\\+\\\\+11 or -std=gnu\\\\+\\\\+11\" \"\" { target *-*-* } .-2 }\n+// { dg-error \"'constexpr' does not name a type\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"C\\\\+\\\\+11 'constexpr' only available with '-std=c\\\\+\\\\+11' or '-std=gnu\\\\+\\\\+11'\" \"\" { target *-*-* } .-2 }\n \n /* If the user typos \"constexpr\" (here as \"consexpr\"), don't offer it as a\n    spelling suggestion in C++98 mode.  */\n consexpr int a = 1; // { dg-bogus \"did you mean\" }\n-// { dg-error \".consexpr. does not name a type\" \"\" { target *-*-* } .-1 }\n+// { dg-error \"'consexpr' does not name a type\" \"\" { target *-*-* } .-1 }\n \n decltype i = 0; // { dg-bogus \"did you mean\" }\n-// { dg-error \".decltype. does not name a type\" \"\" { target *-*-* } .-1 }\n+// { dg-error \"'decltype' does not name a type\" \"\" { target *-*-* } .-1 }"}, {"sha": "46ba16abbc36bd9e6bdb1b5467d914ec89381efc", "filename": "gcc/testsuite/gcc.dg/c90-fordecl-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-fordecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-fordecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-fordecl-1.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -9,6 +9,6 @@ foo (void)\n   int j = 0;\n   for (int i = 1; i <= 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n     /* { dg-error \"'for' loop initial declarations are only allowed in C99 or C11 mode\" \"declaration in for loop\" { target *-*-* } .-1 } */\n-    /* { dg-message \"note: use option -std=c99, -std=gnu99, -std=c11 or -std=gnu11 to compile your code\" \"note\" { target *-*-* } .-2 }} */\n+    /* { dg-message \"note: use option '-std=c99', '-std=gnu99', '-std=c11' or '-std=gnu11' to compile your code\" \"note\" { target *-*-* } .-2 }} */\n     j += i;\n }"}, {"sha": "25f1b463b6db5c6e14bb2c5333072a5a2edf9095", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-4.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do preprocess } */\n /* { dg-options \"-fdirectives-only -Wunused-macros\" } */\n-/* { dg-error \"-fdirectives-only is incompatible with -Wunused_macros\\n\" \"-Wunused-macros check\" { target *-*-* } 0 } */\n+/* { dg-error \"'-fdirectives-only' is incompatible with '-Wunused-macros'\\n\" \"'-Wunused-macros' check\" { target *-*-* } 0 } */"}, {"sha": "ad8e11e5937a5592a740863f1f3718fc2531eb81", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-5.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do preprocess } */\n /* { dg-options \"-fdirectives-only -traditional\" } */\n-/* { dg-error \"-fdirectives-only is incompatible with -traditional\\n\" \"-traditional check\" { target *-*-* } 0 } */\n+/* { dg-error \"'-fdirectives-only' is incompatible with '-traditional'\\n\" \"'-traditional' check\" { target *-*-* } 0 } */"}, {"sha": "8553396fd0e16672e6ac5e8618ad22434dc1340f", "filename": "gcc/testsuite/gcc.dg/cpp/pr71591.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr71591.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr71591.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr71591.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2,4 +2,4 @@\n /* { dg-do preprocess } */\n /* { dg-options \"-fself-test=fake-value\" } */\n \n-/* { dg-message \"self-tests incompatible with -E\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"self-tests incompatible with '-E'\" \"\" { target *-*-* } 0 } */"}, {"sha": "8800454b034abd8c1b47c63838a264ab5b20a7f8", "filename": "gcc/testsuite/gcc.dg/format/opt-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-1.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-extra-args\" } */\n \n-/* { dg-warning \"-Wformat-extra-args ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-Wformat-extra-args' ignored without '-Wformat'\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "10367731fac682f339355be988adc69196b931b4", "filename": "gcc/testsuite/gcc.dg/format/opt-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-2.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-nonliteral\" } */\n \n-/* { dg-warning \"-Wformat-nonliteral ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-Wformat-nonliteral' ignored without '-Wformat'\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "64a924260f4f0d0a375d403a5c10a893afe0952d", "filename": "gcc/testsuite/gcc.dg/format/opt-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-3.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-security\" } */\n \n-/* { dg-warning \"-Wformat-security ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-Wformat-security' ignored without '-Wformat'\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "a82e41a56a2d92388710461a2561084a112f89ab", "filename": "gcc/testsuite/gcc.dg/format/opt-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-4.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-y2k\" } */\n \n-/* { dg-warning \"-Wformat-y2k ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-Wformat-y2k' ignored without '-Wformat'\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "d031a25eb2ca9dc9d7c82db69f1cad661624cd09", "filename": "gcc/testsuite/gcc.dg/format/opt-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-5.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-zero-length\" } */\n \n-/* { dg-warning \"-Wformat-zero-length ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-Wformat-zero-length' ignored without '-Wformat'\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "6cabd8186f56a6c85d0d6d50aeba2e71dcb76776", "filename": "gcc/testsuite/gcc.dg/format/opt-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wformat-contains-nul\" } */\n \n-/* { dg-warning \"-Wformat-contains-nul ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-Wformat-contains-nul' ignored without '-Wformat'\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "e87943588bc794ec872d09d9aed221b8b029c1ec", "filename": "gcc/testsuite/gcc.dg/pr22231.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fpr22231.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fpr22231.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr22231.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -2,6 +2,6 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-MG -MD -c\" } */\n-/* { dg-error \"may only be used with -M\" \"-MG incompatible with -c\" { target *-*-* } 0 } */\n+/* { dg-error \"may only be used with .-M.\" \".-MG. incompatible with .-c.\" { target *-*-* } 0 } */\n \n int anything;"}, {"sha": "c583ab6522cc366909c40a2a34ce966fdaaefb1f", "filename": "gcc/testsuite/gcc.dg/pr33007.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33007.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33007.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33007.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -ffast-math -ftrapping-math\" } */\n-/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".-fassociative-math. disabled\" \"\" { target *-*-* } 0 } */\n \n long\n foo (int i)"}, {"sha": "d77f2bb1af2222f74c369bc232e97b02e2798008", "filename": "gcc/testsuite/gcc.dg/simd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -32,7 +32,7 @@ hanneke ()\n   e = (typeof (e)) a;\n \n   /* Different signed SIMD assignment.  */\n-  f = a; /* { dg-message \"note: use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n+  f = a; /* { dg-message \"note: use .-flax-vector-conversions. to permit conversions between vectors with differing element types or numbers of subparts\" } */\n   /* { dg-error \"incompatible types when assigning\" \"\" { target *-*-* } .-1 } */\n \n   /* Casted different signed SIMD assignment.  */"}, {"sha": "f53e4abea3311010c1a6fda023e919eb7515c175", "filename": "gcc/testsuite/gcc.dg/simd-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4,5 +4,5 @@\n /* Ensure that we don't need a typedef to initialize a vector type.  */\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n-vector char y = (vector short) {1,2,3,4}; /* { dg-message \"note: use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-message \"note: use .-flax-vector-conversions. to permit conversions between vectors with differing element types or numbers of subparts\" } */\n   /* { dg-error \"incompatible types when initializing\" \"\" { target *-*-* } .-1 } */"}, {"sha": "ce5fcf5d8f6f886d0aa63bea6743f9e12adb1c25", "filename": "gcc/testsuite/gcc.dg/simd-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4,5 +4,5 @@\n /* Ensure that we don't need a typedef to initialize a vector type.  */\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n-vector char y = (vector short) {1,2,3,4}; /* { dg-message \"note: use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-message \"note: use .-flax-vector-conversions. to permit conversions between vectors with differing element types or numbers of subparts\" } */\n   /* { dg-error \"incompatible types when initializing\" \"\" { target *-*-* } .-1 } */"}, {"sha": "3cd38ce289044cfdc3a5c24d1433a03f9cf97f24", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-14.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-14.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3,6 +3,6 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-fsanitize=addres,nul,this-is-not-a-sanitizer-option\" } */\n-/* { dg-error \"unrecognized argument to -fsanitize= option: .addres.; did you mean .address.\" \"\" { target *-*-* } 0 } */\n-/* { dg-error \"unrecognized argument to -fsanitize= option: .nul.; did you mean .null.\" \"\" { target *-*-* } 0 } */\n-/* { dg-error \"unrecognized argument to -fsanitize= option: .this-is-not-a-sanitizer-option.\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized argument to '-fsanitize=' option: 'addres'; did you mean 'address'\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized argument to '-fsanitize=' option: 'nul'; did you mean 'null'\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized argument to '-fsanitize=' option: 'this-is-not-a-sanitizer-option'\" \"\" { target *-*-* } 0 } */"}, {"sha": "c1903345d0acf13f51aa0371901de49d0bcc8c03", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-15.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fsanitize=al\" } */\n /* { dg-bogus \"did you mean\" \"\" { target *-*-* } 0 } */\n-/* { dg-error \"unrecognized argument to -fsanitize= option: .al.\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized argument to '-fsanitize=' option: 'al'\" \"\" { target *-*-* } 0 } */"}, {"sha": "f802e61b662b9cea663919357e8ee2b1dbddbbaa", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-16.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -6,4 +6,4 @@\n /* Ensure we don't offer non-recoverable \"-fsanitize-recover=thread\"\n    as a suggestion.  */\n /* { dg-bogus \"did you mean\" \"\" { target *-*-* } 0 } */\n-/* { dg-error \"unrecognized argument to -fsanitize-recover= option: .threed.\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized argument to '-fsanitize-recover=' option: 'threed'\" \"\" { target *-*-* } 0 } */"}, {"sha": "6be5d271e0ed43da72f80c54a6e57843e0470ef8", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-17.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,3 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-fno-sanitize=threed\" } */\n-/* { dg-error \"unrecognized argument to -fno-sanitize= option: .threed.; did you mean .thread.\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized argument to '-fno-sanitize=' option: 'threed'; did you mean 'thread'\" \"\" { target *-*-* } 0 } */"}, {"sha": "7cdf1d05ee710a24254692a2283862d606a158fb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23109.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -funsafe-math-optimizations -ftrapping-math -fdump-tree-recip -fdump-tree-lim2\" } */\n-/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-fassociative-math' disabled\" \"\" { target *-*-* } 0 } */\n \n double F[2] = { 0., 0. }, e = 0.;\n "}, {"sha": "6ac0559bc7cc36e12177bc9f1aa8a5bed54a6b06", "filename": "gcc/testsuite/gcc.dg/tree-ssa/recip-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-5.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-O1 -funsafe-math-optimizations -ftrapping-math -fdump-tree-recip -fdump-tree-optimized\" } */\n /* { dg-do compile } */\n-/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-fassociative-math' disabled\" \"\" { target *-*-* } 0 } */\n \n /* Test the reciprocal optimizations together with trapping math.  */\n "}, {"sha": "427df5746d9b44ad89b51546afc4fe87c7301aea", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-1a.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-1a.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3,8 +3,8 @@\n /* { dg-final { scan-assembler-not \"endbr\" } } */\n /* { dg-final { scan-assembler-not \"notrack call\\[ \\t]+\" } } */\n \n-int func (int a) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n-int (*fptr) (int a) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+int func (int a) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use '-fcf-protection' option to enable it\" } */\n+int (*fptr) (int a) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use '-fcf-protection' option to enable it\" } */\n \n int foo (int arg)\n {\n@@ -16,7 +16,7 @@ int foo (int arg)\n \n int __attribute__ ((nocf_check))\n func (int arg)\n-{ /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n-  int (*fptrl) (int a) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+{ /* { dg-warning \"'nocf_check' attribute ignored. Use '-fcf-protection' option to enable it\" } */\n+  int (*fptrl) (int a) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use '-fcf-protection' option to enable it\" } */\n   return arg*(*fptrl)(arg);\n }"}, {"sha": "b90019f5e83e7e9d232616517259f67b0e0ea00e", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-icf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-1.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -20,7 +20,7 @@ fn2 (int x)\n \n static __attribute__((noinline, nocf_check)) int\n fn3 (int x)\n-{ /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+{ /* { dg-warning \"'nocf_check' attribute ignored. Use '-fcf-protection' option to enable it\" } */\n   return x + 12;\n }\n "}, {"sha": "3eec1e0ef8fe9fb566059ded1068917208c63e5b", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-icf-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-3.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -8,7 +8,7 @@\n \n int (*foo)(int);\n \n-typedef int (*type1_t) (int) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+typedef int (*type1_t) (int) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use '-fcf-protection' option to enable it\" } */\n typedef int (*type2_t) (int);\n \n static __attribute__((noinline)) int"}, {"sha": "76ac0c4e26e5192ec237420d25f8106f75860fc1", "filename": "gcc/testsuite/gcc.target/powerpc/warn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fwarn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fwarn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fwarn-1.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3,7 +3,7 @@\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-O -mvsx -mno-altivec\" } */\n \n-/* { dg-warning \"-mvsx and -mno-altivec are incompatible\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-mvsx' and '-mno-altivec' are incompatible\" \"\" { target *-*-* } 0 } */\n \n double\n foo (double *x, double *y)"}, {"sha": "29c6ce50cd71a7c5d6f43ac2fc8934fb1e33dedf", "filename": "gcc/testsuite/gcc.target/powerpc/warn-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fwarn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fwarn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fwarn-2.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3,7 +3,7 @@\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-O -mdejagnu-cpu=power7 -mno-altivec\" } */\n \n-/* { dg-warning \"-mno-altivec disables vsx\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"'-mno-altivec' disables vsx\" \"\" { target *-*-* } 0 } */\n \n double\n foo (double *x, double *y)"}, {"sha": "397a164068d2a1ede02d9407bd14d8323256c3fc", "filename": "gcc/toplev.c", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -901,7 +901,7 @@ init_asm_output (const char *name)\n \t    }\n \t  else\n \t    inform (UNKNOWN_LOCATION,\n-\t\t    \"-frecord-gcc-switches is not supported by \"\n+\t\t    \"%<-frecord-gcc-switches%> is not supported by \"\n \t\t    \"the current target\");\n \t}\n \n@@ -1367,8 +1367,8 @@ process_options (void)\n       || flag_graphite_identity\n       || flag_loop_parallelize_all)\n     sorry (\"Graphite loop optimizations cannot be used (isl is not available) \"\n-\t   \"(-fgraphite, -fgraphite-identity, -floop-nest-optimize, \"\n-\t   \"-floop-parallelize-all)\");\n+\t   \"(%<-fgraphite%>, %<-fgraphite-identity%>, \"\n+\t   \"%<-floop-nest-optimize%>, %<-floop-parallelize-all%>)\");\n #endif\n \n   if (flag_cf_protection != CF_NONE\n@@ -1452,7 +1452,7 @@ process_options (void)\n \t}\n       else\n \twarning_at (UNKNOWN_LOCATION, 0,\n-\t\t    \"-f%sleading-underscore not supported on this \"\n+\t\t    \"%<-f%sleading-underscore%> not supported on this \"\n \t\t    \"target machine\", flag_leading_underscore ? \"\" : \"no-\");\n     }\n \n@@ -1619,8 +1619,9 @@ process_options (void)\n   else if (debug_variable_location_views == -1 && dwarf_version != 5)\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"without -gdwarf-5, -gvariable-location-views=incompat5 \"\n-\t\t  \"is equivalent to -gvariable-location-views\");\n+\t\t  \"without %<-gdwarf-5%>, \"\n+\t\t  \"%<-gvariable-location-views=incompat5%> \"\n+\t\t  \"is equivalent to %<-gvariable-location-views%>\");\n       debug_variable_location_views = 1;\n     }\n \n@@ -1634,8 +1635,8 @@ process_options (void)\n \t   && !debug_variable_location_views)\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"-ginternal-reset-location-views is forced disabled \"\n-\t\t  \"without -gvariable-location-views\");\n+\t\t  \"%<-ginternal-reset-location-views%> is forced disabled \"\n+\t\t  \"without %<-gvariable-location-views%>\");\n       debug_internal_reset_location_views = 0;\n     }\n \n@@ -1644,8 +1645,8 @@ process_options (void)\n   else if (debug_inline_points && !debug_nonbind_markers_p)\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"-ginline-points is forced disabled without \"\n-\t\t  \"-gstatement-frontiers\");\n+\t\t  \"%<-ginline-points%> is forced disabled without \"\n+\t\t  \"%<-gstatement-frontiers%>\");\n       debug_inline_points = 0;\n     }\n \n@@ -1673,28 +1674,28 @@ process_options (void)\n       if (flag_function_sections)\n \t{\n \t  warning_at (UNKNOWN_LOCATION, 0,\n-\t\t      \"-ffunction-sections not supported for this target\");\n+\t\t      \"%<-ffunction-sections%> not supported for this target\");\n \t  flag_function_sections = 0;\n \t}\n       if (flag_data_sections)\n \t{\n \t  warning_at (UNKNOWN_LOCATION, 0,\n-\t\t      \"-fdata-sections not supported for this target\");\n+\t\t      \"%<-fdata-sections%> not supported for this target\");\n \t  flag_data_sections = 0;\n \t}\n     }\n \n   if (flag_prefetch_loop_arrays > 0 && !targetm.code_for_prefetch)\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"-fprefetch-loop-arrays not supported for this target\");\n+\t\t  \"%<-fprefetch-loop-arrays%> not supported for this target\");\n       flag_prefetch_loop_arrays = 0;\n     }\n   else if (flag_prefetch_loop_arrays > 0 && !targetm.have_prefetch ())\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"-fprefetch-loop-arrays not supported for this target \"\n-\t\t  \"(try -march switches)\");\n+\t\t  \"%<-fprefetch-loop-arrays%> not supported for this target \"\n+\t\t  \"(try %<-march%> switches)\");\n       flag_prefetch_loop_arrays = 0;\n     }\n \n@@ -1703,7 +1704,7 @@ process_options (void)\n   if (flag_prefetch_loop_arrays > 0 && optimize_size)\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"-fprefetch-loop-arrays is not supported with -Os\");\n+\t\t  \"%<-fprefetch-loop-arrays%> is not supported with %<-Os%>\");\n       flag_prefetch_loop_arrays = 0;\n     }\n \n@@ -1715,7 +1716,7 @@ process_options (void)\n   if (flag_associative_math && (flag_trapping_math || flag_signed_zeros))\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"-fassociative-math disabled; other options take \"\n+\t\t  \"%<-fassociative-math%> disabled; other options take \"\n \t\t  \"precedence\");\n       flag_associative_math = 0;\n     }\n@@ -1753,7 +1754,7 @@ process_options (void)\n   if (!FRAME_GROWS_DOWNWARD && flag_stack_protect)\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"-fstack-protector not supported for this target\");\n+\t\t  \"%<-fstack-protector%> not supported for this target\");\n       flag_stack_protect = 0;\n     }\n   if (!flag_stack_protect)\n@@ -1765,7 +1766,7 @@ process_options (void)\n       && !FRAME_GROWS_DOWNWARD)\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"-fsanitize=address and -fsanitize=kernel-address \"\n+\t\t  \"%<-fsanitize=address%> and %<-fsanitize=kernel-address%> \"\n \t\t  \"are not supported for this target\");\n       flag_sanitize &= ~SANITIZE_ADDRESS;\n     }\n@@ -1774,7 +1775,7 @@ process_options (void)\n       && targetm.asan_shadow_offset == NULL)\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"-fsanitize=address not supported for this target\");\n+\t\t  \"%<-fsanitize=address%> not supported for this target\");\n       flag_sanitize &= ~SANITIZE_ADDRESS;\n     }\n \n@@ -2255,7 +2256,7 @@ toplev::run_self_tests ()\n {\n   if (no_backend)\n     {\n-      error_at (UNKNOWN_LOCATION, \"self-tests incompatible with -E\");\n+      error_at (UNKNOWN_LOCATION, \"self-tests incompatible with %<-E%>\");\n       return;\n     }\n #if CHECKING_P"}, {"sha": "c8d6d1b12a951d7989f178b627a96d57b206ac2e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3444,8 +3444,8 @@ verify_gimple_call (gcall *stmt)\n \t\t __builtin_unreachable internally, for example when IPA figures\n \t\t out a call cannot happen in a legal program.  In such cases,\n \t\t we must make sure arguments are stripped off.  */\n-\t      error (\"__builtin_unreachable or __builtin_trap call with \"\n-\t\t     \"arguments\");\n+\t      error (\"%<__builtin_unreachable%> or %<__builtin_trap%> call \"\n+\t\t     \"with arguments\");\n \t      return true;\n \t    }\n \t  break;"}, {"sha": "829b984683ba2f16b07aa8c669b2357442270aee", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -3674,7 +3674,7 @@ inline_forbidden_p_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n \t       return from the function the inline has been inlined into.  */\n \t    inline_forbidden_reason\n \t      = G_(\"function %q+F can never be inlined because \"\n-\t\t   \"it uses __builtin_return or __builtin_apply_args\");\n+\t\t   \"it uses %<__builtin_return%> or %<__builtin_apply_args%>\");\n \t    *handled_ops_p = true;\n \t    return t;\n \n@@ -3794,8 +3794,8 @@ tree_inlinable_function_p (tree fn)\n       && always_inline == NULL)\n     {\n       if (do_warning)\n-        warning (OPT_Winline, \"function %q+F can never be inlined because it \"\n-                 \"is suppressed using -fno-inline\", fn);\n+\twarning (OPT_Winline, \"function %q+F can never be inlined because it \"\n+\t\t \"is suppressed using %<-fno-inline%>\", fn);\n       inlinable = false;\n     }\n "}, {"sha": "55ff354c37c74b269e7333a4451069be48a47f4a", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f9f006a8e24bfc2a045b918a4f3665407f0018/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=a3f9f006a8e24bfc2a045b918a4f3665407f0018", "patch": "@@ -7182,7 +7182,7 @@ vt_find_locations (void)\n \t\t  if (MAY_HAVE_DEBUG_BIND_INSNS)\n \t\t    inform (DECL_SOURCE_LOCATION (cfun->decl),\n \t\t\t    \"variable tracking size limit exceeded with \"\n-\t\t\t    \"-fvar-tracking-assignments, retrying without\");\n+\t\t\t    \"%<-fvar-tracking-assignments%>, retrying without\");\n \t\t  else\n \t\t    inform (DECL_SOURCE_LOCATION (cfun->decl),\n \t\t\t    \"variable tracking size limit exceeded\");"}]}