{"sha": "35f4cbd4489519983a4f64da846be8352f611879", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVmNGNiZDQ0ODk1MTk5ODNhNGY2NGRhODQ2YmU4MzUyZjYxMTg3OQ==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2016-12-21T19:15:32Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2016-12-21T19:15:32Z"}, "message": "re PR rtl-optimization/11488 (Pre-regalloc scheduling severely worsens performance)\n\n\tPR rtl-optimization/11488\n\t* common/config/rs6000/rs6000-common.c\n\t(rs6000_option_optimization_table): Enable -fsched-pressure.\n\t* config/rs6000/rs6000.c (TARGET_COMPUTE_PRESSURE_CLASSES): Define\n\ttarget hook.\n\t(rs6000_option_override_internal): Set default -fsched-pressure algorithm.\n\t(rs6000_compute_pressure_classes): Implement target hook.\n\nFrom-SVN: r243866", "tree": {"sha": "7c8dcd625b28a3db9ca014fc984ce8e24a152777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c8dcd625b28a3db9ca014fc984ce8e24a152777"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35f4cbd4489519983a4f64da846be8352f611879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f4cbd4489519983a4f64da846be8352f611879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f4cbd4489519983a4f64da846be8352f611879", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f4cbd4489519983a4f64da846be8352f611879/comments", "author": null, "committer": null, "parents": [{"sha": "0856b5d78d26690b2411053967aee57f37486d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0856b5d78d26690b2411053967aee57f37486d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0856b5d78d26690b2411053967aee57f37486d11"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "1454cce9c5d3b42ad66b0cd973b0657f5a5d2cb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f4cbd4489519983a4f64da846be8352f611879/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f4cbd4489519983a4f64da846be8352f611879/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35f4cbd4489519983a4f64da846be8352f611879", "patch": "@@ -1,3 +1,13 @@\n+2016-12-21  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\tPR rtl-optimization/11488\n+\t* common/config/rs6000/rs6000-common.c\n+\t(rs6000_option_optimization_table): Enable -fsched-pressure.\n+\t* config/rs6000/rs6000.c (TARGET_COMPUTE_PRESSURE_CLASSES): Define\n+\ttarget hook.\n+\t(rs6000_option_override_internal): Set default -fsched-pressure algorithm.\n+\t(rs6000_compute_pressure_classes): Implement target hook.\n+\n 2016-12-21  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \tPR sanitizer/65479"}, {"sha": "88e5ff62eb8304f77271c9627276f8010583a594", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f4cbd4489519983a4f64da846be8352f611879/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f4cbd4489519983a4f64da846be8352f611879/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=35f4cbd4489519983a4f64da846be8352f611879", "patch": "@@ -32,6 +32,8 @@\n static const struct default_options rs6000_option_optimization_table[] =\n   {\n     { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    /* Enable -fsched-pressure for first pass instruction scheduling.  */\n+    { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n "}, {"sha": "77bb54863923bf63f299cebc661907626bb7eb84", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f4cbd4489519983a4f64da846be8352f611879/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f4cbd4489519983a4f64da846be8352f611879/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=35f4cbd4489519983a4f64da846be8352f611879", "patch": "@@ -1807,6 +1807,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_LRA_P\n #define TARGET_LRA_P rs6000_lra_p\n \n+#undef TARGET_COMPUTE_PRESSURE_CLASSES\n+#define TARGET_COMPUTE_PRESSURE_CLASSES rs6000_compute_pressure_classes\n+\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE rs6000_can_eliminate\n \n@@ -5107,6 +5110,12 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t     global_options.x_param_values,\n \t\t\t     global_options_set.x_param_values);\n \n+      /* Use the 'model' -fsched-pressure algorithm by default.  */\n+      maybe_set_param_value (PARAM_SCHED_PRESSURE_ALGORITHM,\n+\t\t\t     SCHED_PRESSURE_MODEL,\n+\t\t\t     global_options.x_param_values,\n+\t\t\t     global_options_set.x_param_values);\n+\n       /* If using typedef char *va_list, signal that\n \t __builtin_va_start (&ap, 0) can be optimized to\n \t ap = __builtin_next_arg (0).  */\n@@ -37961,6 +37970,32 @@ rs6000_lra_p (void)\n   return TARGET_LRA;\n }\n \n+/* Compute register pressure classes.  We implement the target hook to avoid\n+   IRA picking something like NON_SPECIAL_REGS as a pressure class, which can\n+   lead to incorrect estimates of number of available registers and therefor\n+   increased register pressure/spill.   */\n+static int\n+rs6000_compute_pressure_classes (enum reg_class *pressure_classes)\n+{\n+  int n;\n+\n+  n = 0;\n+  pressure_classes[n++] = GENERAL_REGS;\n+  if (TARGET_VSX)\n+    pressure_classes[n++] = VSX_REGS;\n+  else\n+    {\n+      if (TARGET_ALTIVEC)\n+\tpressure_classes[n++] = ALTIVEC_REGS;\n+      if (TARGET_HARD_FLOAT && TARGET_FPRS)\n+\tpressure_classes[n++] = FLOAT_REGS;\n+    }\n+  pressure_classes[n++] = CR_REGS;\n+  pressure_classes[n++] = SPECIAL_REGS;\n+\n+  return n;\n+}\n+\n /* Given FROM and TO register numbers, say whether this elimination is allowed.\n    Frame pointer elimination is automatically handled.\n "}]}