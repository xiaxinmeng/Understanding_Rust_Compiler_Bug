{"sha": "f22b7039d8ad71c2ceaf754087e4e52b18801201", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyYjcwMzlkOGFkNzFjMmNlYWY3NTQwODdlNGU1MmIxODgwMTIwMQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2008-09-19T22:24:06Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-09-19T22:24:06Z"}, "message": "re PR tree-optimization/30930 (vector can cause to create an extra variable, DECL_GIMPLE_REG_P not recomputed)\n\n2008-09-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR tree-opt/30930\n        * tree-ssa.c (execute_update_addresses_taken): Also update\n        DECL_GIMPLE_REG_P for vector and complex types.\n\n\n2008-09-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR tree-opt/30930\n        * gcc.dg/tree-ssa/vector-2.c: New test.\n        * gcc.dg/tree-ssa/vector-3.c: New test.\n\nFrom-SVN: r140501", "tree": {"sha": "4ae3c868bf7b49aa4ef959bdc53b6374f3a03800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ae3c868bf7b49aa4ef959bdc53b6374f3a03800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f22b7039d8ad71c2ceaf754087e4e52b18801201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22b7039d8ad71c2ceaf754087e4e52b18801201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22b7039d8ad71c2ceaf754087e4e52b18801201", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22b7039d8ad71c2ceaf754087e4e52b18801201/comments", "author": null, "committer": null, "parents": [{"sha": "8c3b36006dbd2f067b1ee1e465eb8f6056213836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3b36006dbd2f067b1ee1e465eb8f6056213836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3b36006dbd2f067b1ee1e465eb8f6056213836"}], "stats": {"total": 132, "additions": 113, "deletions": 19}, "files": [{"sha": "efb74280321bfe6f963716fc0519591a9386849f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f22b7039d8ad71c2ceaf754087e4e52b18801201", "patch": "@@ -1,3 +1,9 @@\n+2008-09-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-opt/30930\n+\t* tree-ssa.c (execute_update_addresses_taken): Also update\n+\tDECL_GIMPLE_REG_P for vector and complex types.\n+\n 2008-09-19  Andrew MacLeod  <amacleod@redhat.com>\n \t    Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "1e5d4d4e04a6d4bc48862353d770044150e0a7ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f22b7039d8ad71c2ceaf754087e4e52b18801201", "patch": "@@ -1,3 +1,9 @@\n+2008-09-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-opt/30930\n+\t* gcc.dg/tree-ssa/vector-2.c: New test.\n+\t* gcc.dg/tree-ssa/vector-3.c: New test.\n+\n 2008-09-18  Bob Wilson  <bob.wilson@acm.org>\n \t\n \t* gcc.c-torture/compile/pr11832.c: xfail on xtensa*-*-*."}, {"sha": "2ce438899a5efe31e13126e0c8a87d3939ab5c8e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vector-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-2.c?ref=f22b7039d8ad71c2ceaf754087e4e52b18801201", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -O1 -fdump-tree-final_cleanup\" } */\n+\n+#define vector __attribute__(( vector_size(16) ))\n+\n+float f(vector float a, int b, vector float c)\n+{\n+  vector float dd = c*a;\n+  a = (vector float){0,0,0,0};\n+  c = (vector float){0,0,0,0};\n+  {\n+   float d = ((float*)&a)[0];\n+   float d1 = ((float*)&c)[0];\n+   return d*d1;\n+  }\n+}\n+\n+/* We should be able to optimize this to just \"return 0.0;\" */\n+/* { dg-final { scan-tree-dump-times \"BIT_FIELD_REF\" 0 \"final_cleanup\"} } */\n+/* { dg-final { scan-tree-dump-times \"0.0\" 1 \"final_cleanup\"} } */\n+\n+/* { dg-final { cleanup-tree-dump \"final_cleanup\" } } */"}, {"sha": "332e127ddcc0be8298e4c46e5e3ace2115606bf1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vector-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-3.c?ref=f22b7039d8ad71c2ceaf754087e4e52b18801201", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -O1 -fdump-tree-final_cleanup\" } */\n+\n+#define vector __attribute((vector_size(16) ))\n+vector float a;\n+\n+float f(float b)\n+{\n+  vector float c = {0, 0, 0, 0};\n+  vector float d = {0, 0, 0, 0};\n+  d += c;\n+  return ((float*)&c)[2];\n+}\n+\n+/* We should be able to optimize this to just \"return 0.0;\" */\n+/* { dg-final { scan-tree-dump-times \"BIT_FIELD_REF\" 0 \"final_cleanup\"} } */\n+/* { dg-final { scan-tree-dump-times \"0.0\" 1 \"final_cleanup\"} } */\n+\n+/* { dg-final { cleanup-tree-dump \"final_cleanup\" } } */\n+"}, {"sha": "073e1290b3cb475c58ee0bc7e5963bd5a739fb6d", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 59, "deletions": 19, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22b7039d8ad71c2ceaf754087e4e52b18801201/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f22b7039d8ad71c2ceaf754087e4e52b18801201", "patch": "@@ -1653,7 +1653,7 @@ struct gimple_opt_pass pass_late_warn_uninitialized =\n  }\n };\n \n-/* Compute TREE_ADDRESSABLE for local variables.  */\n+/* Compute TREE_ADDRESSABLE and DECL_GIMPLE_REG_P for local variables.  */\n \n static unsigned int\n execute_update_addresses_taken (void)\n@@ -1663,6 +1663,7 @@ execute_update_addresses_taken (void)\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n   bitmap addresses_taken = BITMAP_ALLOC (NULL);\n+  bitmap not_reg_needs = BITMAP_ALLOC (NULL);\n   bitmap vars_updated = BITMAP_ALLOC (NULL);\n   bool update_vops = false;\n \n@@ -1672,9 +1673,26 @@ execute_update_addresses_taken (void)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n-\t  bitmap taken = gimple_addresses_taken (gsi_stmt (gsi));\n+\t  const_gimple stmt = gsi_stmt (gsi);\n+\t  enum gimple_code code = gimple_code (stmt);\n+\t  bitmap taken = gimple_addresses_taken (stmt);\n+\t  \n \t  if (taken)\n \t    bitmap_ior_into (addresses_taken, taken);\n+\t  \n+\t  /* If we have a call or an assignment, see if the lhs contains\n+\t     a local decl that requires not to be a gimple register.  */\n+\t  if (code == GIMPLE_ASSIGN || code == GIMPLE_CALL)\n+\t    {\n+\t      tree lhs = gimple_get_lhs (stmt);\n+\t      /* A plain decl does not need it set.  */\n+\t      if (lhs && handled_component_p (lhs))\n+\t        {\n+\t\t  var = get_base_address (lhs);\n+\t\t  if (DECL_P (var))\n+\t\t    bitmap_set_bit (not_reg_needs, DECL_UID (var));\n+\t\t}\n+\t    }\n \t}\n \n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -1693,25 +1711,46 @@ execute_update_addresses_taken (void)\n \t}\n     }\n \n-  /* When possible, clear ADDRESSABLE bit and mark variable for conversion into\n-     SSA.  */\n+  /* When possible, clear ADDRESSABLE bit or set the REGISTER bit\n+     and mark variable for conversion into SSA.  */\n   FOR_EACH_REFERENCED_VAR (var, rvi)\n-    if (!is_global_var (var)\n-\t&& TREE_CODE (var) != RESULT_DECL\n-\t&& TREE_ADDRESSABLE (var)\n-\t&& !bitmap_bit_p (addresses_taken, DECL_UID (var)))\n-      {\n-        TREE_ADDRESSABLE (var) = 0;\n-\tif (is_gimple_reg (var))\n+    {\n+      /* Global Variables, result decls cannot be changed.  */\n+      if (is_global_var (var)\n+          || TREE_CODE (var) == RESULT_DECL\n+\t  || bitmap_bit_p (addresses_taken, DECL_UID (var)))\n+\tcontinue;\n+\t\n+      if (TREE_ADDRESSABLE (var))\n+\t{\n+\t  TREE_ADDRESSABLE (var) = 0;\n+\t  if (is_gimple_reg (var))\n+\t    mark_sym_for_renaming (var);\n+\t  update_vops = true;\n+\t  bitmap_set_bit (vars_updated, DECL_UID (var));\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"No longer having address taken \");\n+\t      print_generic_expr (dump_file, var, 0);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t}\n+      if (!DECL_GIMPLE_REG_P (var)\n+\t  && !bitmap_bit_p (not_reg_needs, DECL_UID (var))\n+\t  && (TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE\n+\t      || TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE))\n+\t{\n+\t  DECL_GIMPLE_REG_P (var) = 1;\n \t  mark_sym_for_renaming (var);\n-\tupdate_vops = true;\n-\tbitmap_set_bit (vars_updated, DECL_UID (var));\n-\tif (dump_file)\n-\t  {\n-\t    fprintf (dump_file, \"No longer having address taken \");\n-\t    print_generic_expr (dump_file, var, 0);\n-\t    fprintf (dump_file, \"\\n\");\n-\t  }\n+\t  update_vops = true;\n+\t  bitmap_set_bit (vars_updated, DECL_UID (var));\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"Decl is now a gimple register \");\n+\t      print_generic_expr (dump_file, var, 0);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t}\n       }\n \n   /* Operand caches needs to be recomputed for operands referencing the updated\n@@ -1728,6 +1767,7 @@ execute_update_addresses_taken (void)\n \t\t  && bitmap_intersect_p (gimple_stored_syms (stmt), vars_updated)))\n \t    update_stmt (stmt);\n \t}\n+  BITMAP_FREE (not_reg_needs);\n   BITMAP_FREE (addresses_taken);\n   BITMAP_FREE (vars_updated);\n   return 0;"}]}