{"sha": "92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhMWQxZTFkMGE5YzA3YzRmZjJjOTk3NGY5MGVkMWJhZWUxNWYyNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-10-13T12:20:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-10-13T12:20:06Z"}, "message": "[PATCH] Allow FSM to thread single block cases too\n\n\t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n\tAllow single block jump threading paths.\n\n\t* gcc.dg/tree-ssa/ssa-thread-13.c: New test.\n\nFrom-SVN: r228757", "tree": {"sha": "2b14e61a133ed9e22eae3170dba6234277df70d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b14e61a133ed9e22eae3170dba6234277df70d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27/comments", "author": null, "committer": null, "parents": [{"sha": "1f600feab05dc0737a6e11b871fe31b0698ba812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f600feab05dc0737a6e11b871fe31b0698ba812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f600feab05dc0737a6e11b871fe31b0698ba812"}], "stats": {"total": 83, "additions": 79, "deletions": 4}, "files": [{"sha": "caab5338ff61c2afaf505f5f31b75c2610eaeeb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27", "patch": "@@ -1,3 +1,8 @@\n+2015-10-13  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n+\tAllow single block jump threading paths.\n+\n 2015-10-13  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/67476"}, {"sha": "acf6df53b945709d07dfc275696e2331729b6083", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27", "patch": "@@ -1,3 +1,7 @@\n+2015-10-13  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-thread-13.c: New test.\n+\n 2015-10-12  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/ssa-thread-12.c: New test."}, {"sha": "5051d110d8ee4c606632a5e043c87bfe4f374252", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-13.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-13.c?ref=92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"vrp1\" } } */\n+\n+typedef struct rtx_def *rtx;\n+typedef const struct rtx_def *const_rtx;\n+enum rtx_code\n+{\n+  UNKNOWN, VALUE, DEBUG_EXPR, EXPR_LIST, INSN_LIST, SEQUENCE, ADDRESS,\n+    DEBUG_INSN, INSN, JUMP_INSN, CALL_INSN, BARRIER, CODE_LABEL, NOTE,\n+    COND_EXEC, PARALLEL, ASM_INPUT, ASM_OPERANDS, UNSPEC, UNSPEC_VOLATILE,\n+    ADDR_VEC, ADDR_DIFF_VEC, PREFETCH, SET, USE, CLOBBER, CALL, RETURN,\n+    EH_RETURN, TRAP_IF, CONST_INT, CONST_FIXED, CONST_DOUBLE, CONST_VECTOR,\n+    CONST_STRING, CONST, PC, REG, SCRATCH, SUBREG, STRICT_LOW_PART, CONCAT,\n+    CONCATN, MEM, LABEL_REF, SYMBOL_REF, CC0, IF_THEN_ELSE, COMPARE, PLUS,\n+    MINUS, NEG, MULT, SS_MULT, US_MULT, DIV, SS_DIV, US_DIV, MOD, UDIV, UMOD,\n+    AND, IOR, XOR, NOT, ASHIFT, ROTATE, ASHIFTRT, LSHIFTRT, ROTATERT, SMIN,\n+    SMAX, UMIN, UMAX, PRE_DEC, PRE_INC, POST_DEC, POST_INC, PRE_MODIFY,\n+    POST_MODIFY, NE, EQ, GE, GT, LE, LT, GEU, GTU, LEU, LTU, UNORDERED,\n+    ORDERED, UNEQ, UNGE, UNGT, UNLE, UNLT, LTGT, SIGN_EXTEND, ZERO_EXTEND,\n+    TRUNCATE, FLOAT_EXTEND, FLOAT_TRUNCATE, FLOAT, FIX, UNSIGNED_FLOAT,\n+    UNSIGNED_FIX, FRACT_CONVERT, UNSIGNED_FRACT_CONVERT, SAT_FRACT,\n+    UNSIGNED_SAT_FRACT, ABS, SQRT, BSWAP, FFS, CLZ, CTZ, POPCOUNT, PARITY,\n+    SIGN_EXTRACT, ZERO_EXTRACT, HIGH, LO_SUM, VEC_MERGE, VEC_SELECT,\n+    VEC_CONCAT, VEC_DUPLICATE, SS_PLUS, US_PLUS, SS_MINUS, SS_NEG, US_NEG,\n+    SS_ABS, SS_ASHIFT, US_ASHIFT, US_MINUS, SS_TRUNCATE, US_TRUNCATE, FMA,\n+    VAR_LOCATION, DEBUG_IMPLICIT_PTR, ENTRY_VALUE, LAST_AND_UNUSED_RTX_CODE\n+};\n+union rtunion_def\n+{\n+  rtx rt_rtx;\n+};\n+typedef union rtunion_def rtunion;\n+struct rtx_def\n+{\n+  __extension__ enum rtx_code code:16;\n+  union u\n+  {\n+    rtunion fld[1];\n+  }\n+  u;\n+};\n+\n+unsigned int rtx_cost (rtx, enum rtx_code, unsigned char);\n+rtx single_set_2 (const_rtx, rtx);\n+\n+unsigned\n+seq_cost (const_rtx seq, unsigned char speed)\n+{\n+  unsigned cost = 0;\n+  rtx set;\n+  for (; seq; seq = (((seq)->u.fld[2]).rt_rtx))\n+    {\n+      set =\n+\t(((((enum rtx_code) (seq)->code) == INSN)\n+\t  || (((enum rtx_code) (seq)->code) == DEBUG_INSN)\n+\t  || (((enum rtx_code) (seq)->code) == JUMP_INSN)\n+\t  || (((enum rtx_code) (seq)->code) ==\n+\t      CALL_INSN)) ? (((enum rtx_code) ((((seq)->u.fld[4]).rt_rtx))->\n+\t\t\t      code) ==\n+\t\t\t     SET ? (((seq)->u.fld[4]).\n+\t\t\t\t    rt_rtx) : single_set_2 (seq,\n+\t\t\t\t\t\t\t    (((seq)->u.\n+\t\t\t\t\t\t\t      fld[4]).\n+\t\t\t\t\t\t\t     rt_rtx))) : (rtx)\n+\t 0);\n+      if (set)\n+\tcost += rtx_cost (set, SET, speed);\n+    }\n+}"}, {"sha": "91280947ec320ca267f5db58343be7959a0da8bd", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=92a1d1e1d0a9c07c4ff2c9974f90ed1baee15f27", "patch": "@@ -211,10 +211,6 @@ fsm_find_control_statement_thread_paths (tree name,\n \tcontinue;\n \n       int path_length = path->length ();\n-      /* A path with less than 2 basic blocks should not be jump-threaded.  */\n-      if (path_length < 2)\n-\tcontinue;\n-\n       if (path_length > PARAM_VALUE (PARAM_MAX_FSM_THREAD_LENGTH))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))"}]}