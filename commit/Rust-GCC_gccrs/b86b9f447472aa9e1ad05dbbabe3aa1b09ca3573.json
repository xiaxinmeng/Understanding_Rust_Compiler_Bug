{"sha": "b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg2YjlmNDQ3NDcyYWE5ZTFhZDA1ZGJiYWJlM2FhMWIwOWNhMzU3Mw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2011-10-06T13:27:47Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-10-06T13:27:47Z"}, "message": "i386.opt (recip_mask, [...]): New variables and cl_target member.\n\n\t* i386/i386.opt (recip_mask, recip_mask_explicit,\n\tx_recip_mask_explicit): New variables and cl_target member.\n\t(mrecip=): New option.\n\t* i386/i386.h (RECIP_MASK_DIV, RECIP_MASK_SQRT, RECIP_MASK_VEC_DIV,\n\tRECIP_MASK_VEC_SQRT, RECIP_MASK_ALL, RECIP_MASK_NONE): New bitmasks.\n\t(TARGET_RECIP_DIV, TARGET_RECIP_SQRT, TARGET_RECIP_VEC_DIV,\n\tTARGET_RECIP_VEC_SQRT): New tests.\n\t* i386/i386.md (divsf3): Check TARGET_RECIP_DIV.\n\t(sqrt<mode>2): Check TARGET_RECIP_SQRT.\n\t* i386/sse.md (div<mode>3): Check TARGET_RECIP_VEC_DIV.\n\t(sqrt<mode>2): Check TARGET_RECIP_VEC_SQRT.\n\t* i386/i386.c (ix86_option_override_internal): Set recip_mask\n\tfor -mrecip and -mrecip=options.\n\t(ix86_function_specific_save): Save recip_mask_explicit.\n\t(ix86_function_specific_restore): Restore recip_mask_explicit.\n\n\t* doc/invoke.texi (ix86 Options): Document the new option.\n\nFrom-SVN: r179608", "tree": {"sha": "eb347aa6978471e390f71a0cd82bf907b8cf2484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb347aa6978471e390f71a0cd82bf907b8cf2484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16340e8601a250e5024d999e05a192b992b8475d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16340e8601a250e5024d999e05a192b992b8475d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16340e8601a250e5024d999e05a192b992b8475d"}], "stats": {"total": 150, "additions": 145, "deletions": 5}, "files": [{"sha": "7e6bf33416cfa362787ac238a7d729be160e2a92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "patch": "@@ -1,3 +1,23 @@\n+2011-10-06  Michael Matz  <matz@suse.de>\n+\n+\t* i386/i386.opt (recip_mask, recip_mask_explicit,\n+\tx_recip_mask_explicit): New variables and cl_target member.\n+\t(mrecip=): New option.\n+\t* i386/i386.h (RECIP_MASK_DIV, RECIP_MASK_SQRT, RECIP_MASK_VEC_DIV,\n+\tRECIP_MASK_VEC_SQRT, RECIP_MASK_ALL, RECIP_MASK_NONE): New bitmasks.\n+\t(TARGET_RECIP_DIV, TARGET_RECIP_SQRT, TARGET_RECIP_VEC_DIV,\n+\tTARGET_RECIP_VEC_SQRT): New tests.\n+\t* i386/i386.md (divsf3): Check TARGET_RECIP_DIV.\n+\t(sqrt<mode>2): Check TARGET_RECIP_SQRT.\n+\t* i386/sse.md (div<mode>3): Check TARGET_RECIP_VEC_DIV.\n+\t(sqrt<mode>2): Check TARGET_RECIP_VEC_SQRT.\n+\t* i386/i386.c (ix86_option_override_internal): Set recip_mask\n+\tfor -mrecip and -mrecip=options.\n+\t(ix86_function_specific_save): Save recip_mask_explicit.\n+\t(ix86_function_specific_restore): Restore recip_mask_explicit.\n+\n+\t* doc/invoke.texi (ix86 Options): Document the new option.\n+\n 2011-10-06  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/49049"}, {"sha": "688fba19c419b3b57ddb6d70dfbb8ac49666c652", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "patch": "@@ -3057,6 +3057,22 @@ ix86_option_override_internal (bool main_args_p)\n \tPTA_64BIT /* flags are only used for -march switch.  */ },\n     };\n \n+  /* -mrecip options.  */\n+  static struct\n+    {\n+      const char *string;           /* option name */\n+      unsigned int mask;            /* mask bits to set */\n+    }\n+  const recip_options[] =\n+    {\n+      { \"all\",       RECIP_MASK_ALL },\n+      { \"none\",      RECIP_MASK_NONE },\n+      { \"div\",       RECIP_MASK_DIV },\n+      { \"sqrt\",      RECIP_MASK_SQRT },\n+      { \"vec-div\",   RECIP_MASK_VEC_DIV },\n+      { \"vec-sqrt\",  RECIP_MASK_VEC_SQRT },\n+    };\n+\n   int const pta_size = ARRAY_SIZE (processor_alias_table);\n \n   /* Set up prefix/suffix so the error messages refer to either the command\n@@ -3814,6 +3830,56 @@ ix86_option_override_internal (bool main_args_p)\n       target_flags &= ~MASK_VZEROUPPER;\n     }\n \n+  if (ix86_recip_name)\n+    {\n+      char *p = ASTRDUP (ix86_recip_name);\n+      char *q;\n+      unsigned int mask, i;\n+      bool invert;\n+\n+      while ((q = strtok (p, \",\")) != NULL)\n+\t{\n+\t  p = NULL;\n+\t  if (*q == '!')\n+\t    {\n+\t      invert = true;\n+\t      q++;\n+\t    }\n+\t  else\n+\t    invert = false;\n+\n+\t  if (!strcmp (q, \"default\"))\n+\t    mask = RECIP_MASK_ALL;\n+\t  else\n+\t    {\n+\t      for (i = 0; i < ARRAY_SIZE (recip_options); i++)\n+\t\tif (!strcmp (q, recip_options[i].string))\n+\t\t  {\n+\t\t    mask = recip_options[i].mask;\n+\t\t    break;\n+\t\t  }\n+\n+\t      if (i == ARRAY_SIZE (recip_options))\n+\t\t{\n+\t\t  error (\"unknown option for -mrecip=%s\", q);\n+\t\t  invert = false;\n+\t\t  mask = RECIP_MASK_NONE;\n+\t\t}\n+\t    }\n+\n+\t  recip_mask_explicit |= mask;\n+\t  if (invert)\n+\t    recip_mask &= ~mask;\n+\t  else\n+\t    recip_mask |= mask;\n+\t}\n+    }\n+\n+  if (TARGET_RECIP)\n+    recip_mask |= RECIP_MASK_ALL & ~recip_mask_explicit;\n+  else if (target_flags_explicit & MASK_RECIP)\n+    recip_mask &= ~(RECIP_MASK_ALL & ~recip_mask_explicit);\n+\n   /* Save the initial options in case the user does function specific\n      options.  */\n   if (main_args_p)\n@@ -3946,6 +4012,7 @@ ix86_function_specific_save (struct cl_target_option *ptr)\n   ptr->arch_specified = ix86_arch_specified;\n   ptr->x_ix86_isa_flags_explicit = ix86_isa_flags_explicit;\n   ptr->ix86_target_flags_explicit = target_flags_explicit;\n+  ptr->x_recip_mask_explicit = recip_mask_explicit;\n \n   /* The fields are char but the variables are not; make sure the\n      values fit in the fields.  */\n@@ -3973,6 +4040,7 @@ ix86_function_specific_restore (struct cl_target_option *ptr)\n   ix86_arch_specified = ptr->arch_specified;\n   ix86_isa_flags_explicit = ptr->x_ix86_isa_flags_explicit;\n   target_flags_explicit = ptr->ix86_target_flags_explicit;\n+  recip_mask_explicit = ptr->x_recip_mask_explicit;\n \n   /* Recreate the arch feature tests if the arch changed */\n   if (old_arch != ix86_arch)"}, {"sha": "bd69ec2b5e35073f57ac7b27aa4cef3e28d5f749", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "patch": "@@ -2315,6 +2315,19 @@ extern void debug_dispatch_window (int);\n \t((FLAGS) & (IX86_CALLCVT_CDECL | IX86_CALLCVT_STDCALL \\\n \t\t    | IX86_CALLCVT_FASTCALL | IX86_CALLCVT_THISCALL))\n \n+#define RECIP_MASK_NONE\t\t0x00\n+#define RECIP_MASK_DIV\t\t0x01\n+#define RECIP_MASK_SQRT\t\t0x02\n+#define RECIP_MASK_VEC_DIV\t0x04\n+#define RECIP_MASK_VEC_SQRT\t0x08\n+#define RECIP_MASK_ALL\t(RECIP_MASK_DIV | RECIP_MASK_SQRT \\\n+\t\t\t | RECIP_MASK_VEC_DIV | RECIP_MASK_VEC_SQRT)\n+\n+#define TARGET_RECIP_DIV\t((recip_mask & RECIP_MASK_DIV) != 0)\n+#define TARGET_RECIP_SQRT\t((recip_mask & RECIP_MASK_SQRT) != 0)\n+#define TARGET_RECIP_VEC_DIV\t((recip_mask & RECIP_MASK_VEC_DIV) != 0)\n+#define TARGET_RECIP_VEC_SQRT\t((recip_mask & RECIP_MASK_VEC_SQRT) != 0)\n+\n /*\n Local variables:\n version-control: t"}, {"sha": "a11a71b6c2e6b356bf45d21f4a5827a1c358f1ca", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "patch": "@@ -7062,7 +7062,9 @@\n   \"(TARGET_80387 && X87_ENABLE_ARITH (SFmode))\n     || TARGET_SSE_MATH\"\n {\n-  if (TARGET_SSE_MATH && TARGET_RECIP && optimize_insn_for_speed_p ()\n+  if (TARGET_SSE_MATH\n+      && TARGET_RECIP_DIV\n+      && optimize_insn_for_speed_p ()\n       && flag_finite_math_only && !flag_trapping_math\n       && flag_unsafe_math_optimizations)\n     {\n@@ -13438,7 +13440,9 @@\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n {\n   if (<MODE>mode == SFmode\n-      && TARGET_SSE_MATH && TARGET_RECIP && !optimize_function_for_size_p (cfun)\n+      && TARGET_SSE_MATH\n+      && TARGET_RECIP_SQRT\n+      && !optimize_function_for_size_p (cfun)\n       && flag_finite_math_only && !flag_trapping_math\n       && flag_unsafe_math_optimizations)\n     {"}, {"sha": "43009a3c2a60fbdfc52d74f306aa8a8b698324b0", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "patch": "@@ -31,6 +31,15 @@ HOST_WIDE_INT ix86_isa_flags = TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_ISA_DEFAU\n Variable\n HOST_WIDE_INT ix86_isa_flags_explicit\n \n+TargetVariable\n+int recip_mask\n+\n+Variable\n+int recip_mask_explicit\n+\n+TargetSave\n+int x_recip_mask_explicit\n+\n ;; Definitions to add to the cl_target_option structure\n ;; -march= processor\n TargetSave\n@@ -373,6 +382,10 @@ mrecip\n Target Report Mask(RECIP) Save\n Generate reciprocals instead of divss and sqrtss.\n \n+mrecip=\n+Target Report RejectNegative Joined Var(ix86_recip_name)\n+Control generation of reciprocal estimates.\n+\n mcld\n Target Report Mask(CLD) Save\n Generate cld instruction in the function prologue."}, {"sha": "88f4d6c1f190086ba8c9b823733f72896af07f15", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "patch": "@@ -779,7 +779,9 @@\n {\n   ix86_fixup_binary_operands_no_copy (DIV, <MODE>mode, operands);\n \n-  if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_insn_for_size_p ()\n+  if (TARGET_SSE_MATH\n+      && TARGET_RECIP_VEC_DIV\n+      && !optimize_insn_for_size_p ()\n       && flag_finite_math_only && !flag_trapping_math\n       && flag_unsafe_math_optimizations)\n     {\n@@ -857,7 +859,9 @@\n \t(sqrt:VF1 (match_operand:VF1 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE\"\n {\n-  if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_insn_for_size_p ()\n+  if (TARGET_SSE_MATH\n+      && TARGET_RECIP_VEC_SQRT\n+      && !optimize_insn_for_size_p ()\n       && flag_finite_math_only && !flag_trapping_math\n       && flag_unsafe_math_optimizations)\n     {"}, {"sha": "ef7ac68ebf2ab392f4493ce31b1e973256fd081c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b86b9f447472aa9e1ad05dbbabe3aa1b09ca3573", "patch": "@@ -605,7 +605,9 @@ Objective-C and Objective-C++ Dialects}.\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num} @gol\n -mincoming-stack-boundary=@var{num} @gol\n--mcld -mcx16 -msahf -mmovbe -mcrc32 -mrecip -mvzeroupper @gol\n+-mcld -mcx16 -msahf -mmovbe -mcrc32 @gol\n+-mrecip -mrecip=@var{opt} @gol\n+-mvzeroupper @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -mavx2 -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n@@ -12871,6 +12873,22 @@ Note that GCC implements 1.0f/sqrtf(x) in terms of RSQRTSS (or RSQRTPS)\n already with @option{-ffast-math} (or the above option combination), and\n doesn't need @option{-mrecip}.\n \n+@item -mrecip=@var{opt}\n+@opindex mrecip=opt\n+This option allows to control which reciprocal estimate instructions\n+may be used.  @var{opt} is a comma separated list of options, that may\n+be preceded by a @code{!} to invert the option:\n+@code{all}: enable all estimate instructions,\n+@code{default}: enable the default instructions, equivalent to @option{-mrecip},\n+@code{none}: disable all estimate instructions, equivalent to @option{-mno-recip},\n+@code{div}: enable the approximation for scalar division,\n+@code{vec-div}: enable the approximation for vectorized division,\n+@code{sqrt}: enable the approximation for scalar square root,\n+@code{vec-sqrt}: enable the approximation for vectorized square root.\n+\n+So for example, @option{-mrecip=all,!sqrt} would enable\n+all of the reciprocal approximations, except for square root.\n+\n @item -mveclibabi=@var{type}\n @opindex mveclibabi\n Specifies the ABI type to use for vectorizing intrinsics using an"}]}