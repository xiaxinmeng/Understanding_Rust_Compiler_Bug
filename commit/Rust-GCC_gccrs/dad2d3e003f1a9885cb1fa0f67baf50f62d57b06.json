{"sha": "dad2d3e003f1a9885cb1fa0f67baf50f62d57b06", "node_id": "C_kwDOANBUbNoAKGRhZDJkM2UwMDNmMWE5ODg1Y2IxZmEwZjY3YmFmNTBmNjJkNTdiMDY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-26T14:06:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-26T14:06:20Z"}, "message": "libcpp: Implement P2362R3 - Remove non-encodable wide character literals and multicharacter [PR106647]\n\nMy understanding of the paper is that we just want to promote the CPP_WCHAR\n\"character constant too long for its type\" warning to error as it is already\nerror for u8, u and U literals.\n\n2022-08-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/106647\n\t* charset.cc (wide_str_to_charconst): Implement P2362R3 - Remove\n\tnon-encodable wide character literals and multicharacter.  For\n\tC++23 use CPP_DL_ERROR instead of CPP_DL_WARNING for\n\t\"character constant too long for its type\" diagnostics on CPP_WCHAR\n\tliterals.\n\n\t* g++.dg/cpp23/wchar-multi1.C: New test.\n\t* g++.dg/cpp23/wchar-multi2.C: New test.", "tree": {"sha": "dd09e97ddda8c8a0e00f8fc84c6df4de89c1dc8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd09e97ddda8c8a0e00f8fc84c6df4de89c1dc8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e08906973cc10748d956388c8ceefa726abc83c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e08906973cc10748d956388c8ceefa726abc83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e08906973cc10748d956388c8ceefa726abc83c"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "77fa3a606dc5448d0a841326c80d292c44562b2f", "filename": "gcc/testsuite/g++.dg/cpp23/wchar-multi1.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fwchar-multi1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fwchar-multi1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fwchar-multi1.C?ref=dad2d3e003f1a9885cb1fa0f67baf50f62d57b06", "patch": "@@ -0,0 +1,42 @@\n+// P2362R3 - Remove non-encodable wide character literals and multicharacter\n+// wide character literals.\n+// { dg-do compile }\n+\n+char a = 'a';\n+int b = 'ab';\t\t\t// { dg-warning \"multi-character character constant\" }\n+int c = '\\u05D9';\t\t// { dg-warning \"multi-character character constant\" }\n+#if __SIZEOF_INT__ > 2\n+int d = '\\U0001F525';\t\t// { dg-warning \"multi-character character constant\" \"\" { target int32 } }\n+#endif\n+int e = 'abcd';\t\t\t// { dg-warning \"multi-character character constant\" }\n+wchar_t f = L'f';\n+wchar_t g = L'gh';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++23 } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target c++20_down } .-1 }\n+wchar_t h = L'ijkl';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++23 } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target c++20_down } .-1 }\n+wchar_t i = L'\\U0001F525';\t// { dg-error \"character constant too long for its type\" \"\" { target { c++23 && { ! 4byte_wchar_t } } } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target { c++20_down && { ! 4byte_wchar_t } } } .-1 }\n+#ifdef __cpp_char8_t\n+typedef char8_t u8;\n+#else\n+typedef char u8;\n+#endif\n+#if __cpp_unicode_characters >= 201411 \n+u8 j = u8'j';\n+u8 k = u8'kl';\t\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++17 } }\n+u8 l = u8'\\U0001F525';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++17 }  }\n+#endif\n+#if __cpp_unicode_characters >= 200704\n+char16_t m = u'm';\n+char16_t n = u'no';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++11 } }\n+char16_t o = u'\\u05D9';\n+char16_t p = u'\\U0001F525';\t// { dg-error \"character constant too long for its type\" \"\" { target c++11 } }\n+char32_t q = U'm';\n+char32_t r = U'no';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++11 } }\n+char32_t s = U'\\u05D9';\n+char32_t t = U'\\U0001F525';\n+#endif\n+wchar_t u = L'\\u0065\\u0301';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++23 } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target c++20_down } .-1 }\n+wchar_t v = L'e\u0301';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++23 } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target c++20_down } .-1 }"}, {"sha": "a63e0fffe6014b94fde25a3985f79822db2ec846", "filename": "gcc/testsuite/g++.dg/cpp23/wchar-multi2.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fwchar-multi2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fwchar-multi2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fwchar-multi2.C?ref=dad2d3e003f1a9885cb1fa0f67baf50f62d57b06", "patch": "@@ -0,0 +1,43 @@\n+// P2362R3 - Remove non-encodable wide character literals and multicharacter\n+// wide character literals.\n+// { dg-do compile }\n+// { dg-options \"-fshort-wchar\" }\n+\n+char a = 'a';\n+int b = 'ab';\t\t\t// { dg-warning \"multi-character character constant\" }\n+int c = '\\u05D9';\t\t// { dg-warning \"multi-character character constant\" }\n+#if __SIZEOF_INT__ > 2\n+int d = '\\U0001F525';\t\t// { dg-warning \"multi-character character constant\" \"\" { target int32 } }\n+#endif\n+int e = 'abcd';\t\t\t// { dg-warning \"multi-character character constant\" }\n+wchar_t f = L'f';\n+wchar_t g = L'gh';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++23 } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target c++20_down } .-1 }\n+wchar_t h = L'ijkl';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++23 } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target c++20_down } .-1 }\n+wchar_t i = L'\\U0001F525';\t// { dg-error \"character constant too long for its type\" \"\" { target { c++23 } } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target { c++20_down } } .-1 }\n+#ifdef __cpp_char8_t\n+typedef char8_t u8;\n+#else\n+typedef char u8;\n+#endif\n+#if __cpp_unicode_characters >= 201411 \n+u8 j = u8'j';\n+u8 k = u8'kl';\t\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++17 } }\n+u8 l = u8'\\U0001F525';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++17 }  }\n+#endif\n+#if __cpp_unicode_characters >= 200704\n+char16_t m = u'm';\n+char16_t n = u'no';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++11 } }\n+char16_t o = u'\\u05D9';\n+char16_t p = u'\\U0001F525';\t// { dg-error \"character constant too long for its type\" \"\" { target c++11 } }\n+char32_t q = U'm';\n+char32_t r = U'no';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++11 } }\n+char32_t s = U'\\u05D9';\n+char32_t t = U'\\U0001F525';\n+#endif\n+wchar_t u = L'\\u0065\\u0301';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++23 } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target c++20_down } .-1 }\n+wchar_t v = L'e\u0301';\t\t// { dg-error \"character constant too long for its type\" \"\" { target c++23 } }\n+\t\t\t\t// { dg-warning \"character constant too long for its type\" \"\" { target c++20_down } .-1 }"}, {"sha": "d3c07d6c82d1cbcb516079c2f526c8965f6da93f", "filename": "libcpp/charset.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06/libcpp%2Fcharset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06/libcpp%2Fcharset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.cc?ref=dad2d3e003f1a9885cb1fa0f67baf50f62d57b06", "patch": "@@ -2593,7 +2593,11 @@ wide_str_to_charconst (cpp_reader *pfile, cpp_string str,\n      character constant is guaranteed to overflow.  */\n   if (str.len > nbwc * 2)\n     cpp_error (pfile, (CPP_OPTION (pfile, cplusplus)\n-\t\t       && (type == CPP_CHAR16 || type == CPP_CHAR32))\n+\t\t       && (type == CPP_CHAR16\n+\t\t\t   || type == CPP_CHAR32\n+\t\t\t   /* In C++23 this is error even for L'ab'.  */\n+\t\t\t   || (type == CPP_WCHAR\n+\t\t\t       && CPP_OPTION (pfile, size_t_literals))))\n \t\t      ? CPP_DL_ERROR : CPP_DL_WARNING,\n \t       \"character constant too long for its type\");\n "}]}