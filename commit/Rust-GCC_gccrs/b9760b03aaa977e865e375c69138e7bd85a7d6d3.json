{"sha": "b9760b03aaa977e865e375c69138e7bd85a7d6d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3NjBiMDNhYWE5NzdlODY1ZTM3NWM2OTEzOGU3YmQ4NWE3ZDZkMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-10-05T21:26:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-10-05T21:26:50Z"}, "message": "* call.c (convert_arg_to_ellipsis): Use the result of force_rvalue.\n\nFrom-SVN: r253465", "tree": {"sha": "1ca1727752fbf6c32ada1a350ec602cf4cd29bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ca1727752fbf6c32ada1a350ec602cf4cd29bf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9760b03aaa977e865e375c69138e7bd85a7d6d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9760b03aaa977e865e375c69138e7bd85a7d6d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9760b03aaa977e865e375c69138e7bd85a7d6d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9760b03aaa977e865e375c69138e7bd85a7d6d3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e58683fb9ffaa4dd19ee433742cf2170a76a82cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58683fb9ffaa4dd19ee433742cf2170a76a82cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58683fb9ffaa4dd19ee433742cf2170a76a82cc"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "c5c28f4fe92fcd98b5bd3873414cb0f5d21fdacb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9760b03aaa977e865e375c69138e7bd85a7d6d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9760b03aaa977e865e375c69138e7bd85a7d6d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9760b03aaa977e865e375c69138e7bd85a7d6d3", "patch": "@@ -1,3 +1,7 @@\n+2017-10-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (convert_arg_to_ellipsis): Use the result of force_rvalue.\n+\n 2017-10-05  Nathan Sidwell  <nathan@acm.org>\n \n \tWarn on MVP declarations"}, {"sha": "9d747be9d79b8a37cdc1a35d403063ffa9099169", "filename": "gcc/cp/call.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9760b03aaa977e865e375c69138e7bd85a7d6d3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9760b03aaa977e865e375c69138e7bd85a7d6d3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b9760b03aaa977e865e375c69138e7bd85a7d6d3", "patch": "@@ -7165,36 +7165,36 @@ convert_arg_to_ellipsis (tree arg, tsubst_flags_t complain)\n       /* In a template (or ill-formed code), we can have an incomplete type\n \t even after require_complete_type_sfinae, in which case we don't know\n \t whether it has trivial copy or not.  */\n-      && COMPLETE_TYPE_P (arg_type))\n+      && COMPLETE_TYPE_P (arg_type)\n+      && !cp_unevaluated_operand)\n     {\n-      /* Build up a real lvalue-to-rvalue conversion in case the\n-\t copy constructor is trivial but not callable.  */\n-      if (!cp_unevaluated_operand && CLASS_TYPE_P (arg_type))\n-\tforce_rvalue (arg, complain);\n-\n       /* [expr.call] 5.2.2/7:\n \t Passing a potentially-evaluated argument of class type (Clause 9)\n \t with a non-trivial copy constructor or a non-trivial destructor\n \t with no corresponding parameter is conditionally-supported, with\n \t implementation-defined semantics.\n \n-\t We support it as pass-by-invisible-reference to the caller's\n-\t object.  That's different to named by-value parameters, which\n-\t construct a copy and pass a reference to that.\n+\t We support it as pass-by-invisible-reference, just like a normal\n+\t value parameter.\n \n \t If the call appears in the context of a sizeof expression,\n \t it is not potentially-evaluated.  */\n-      if (cp_unevaluated_operand == 0\n-\t  && (type_has_nontrivial_copy_init (arg_type)\n-\t      || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (arg_type)))\n+      if (type_has_nontrivial_copy_init (arg_type)\n+\t  || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (arg_type))\n \t{\n+\t  arg = force_rvalue (arg, complain);\n \t  if (complain & tf_warning)\n \t    warning (OPT_Wconditionally_supported,\n \t\t     \"passing objects of non-trivially-copyable \"\n \t\t     \"type %q#T through %<...%> is conditionally supported\",\n \t\t     arg_type);\n \t  return cp_build_addr_expr (arg, complain);\n \t}\n+      /* Build up a real lvalue-to-rvalue conversion in case the\n+\t copy constructor is trivial but not callable.  */\n+      else if (CLASS_TYPE_P (arg_type))\n+\tforce_rvalue (arg, complain);\n+\n     }\n \n   return arg;"}, {"sha": "13ddf5bb5279eb58b77c81c885a6cbe2017d9da8", "filename": "gcc/testsuite/g++.dg/ext/varargs2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9760b03aaa977e865e375c69138e7bd85a7d6d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvarargs2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9760b03aaa977e865e375c69138e7bd85a7d6d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvarargs2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvarargs2.C?ref=b9760b03aaa977e865e375c69138e7bd85a7d6d3", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+\n+int c;\n+struct X { X() {}; X(const X&) { ++c; } };\n+void Foo (X, ...) {}\n+void bin (X &p)\n+{\n+  Foo (p, p);\n+}\n+\n+int main()\n+{\n+  X x;\n+  bin(x);\n+  if (c != 2)\n+    __builtin_abort();\n+}"}]}