{"sha": "9c0a30c366cd160bc8bd3589468dae18bd1b30ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwYTMwYzM2NmNkMTYwYmM4YmQzNTg5NDY4ZGFlMThiZDFiMzBlYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-02-01T07:22:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-02-01T07:22:19Z"}, "message": "Patch from Richard Sandiford <rsandifo@redhat.com>\n\t* reload1.c (choose_reload_regs): Prevent the find_equiv_reg() code\n\tfrom inheriting a subreg equivalence with a non-spill register.\n\n\t* tree.h (DECL_FUNCTION_CODE): Document that it is overloaded.\n\nFrom-SVN: r94529", "tree": {"sha": "a6a1a13b3bbed54f050188c868e50dbe5ca6fb56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6a1a13b3bbed54f050188c868e50dbe5ca6fb56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0a30c366cd160bc8bd3589468dae18bd1b30ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0a30c366cd160bc8bd3589468dae18bd1b30ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0a30c366cd160bc8bd3589468dae18bd1b30ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0a30c366cd160bc8bd3589468dae18bd1b30ec/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c94c75ae756f2f79911197da886e0b247f5fa05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c94c75ae756f2f79911197da886e0b247f5fa05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c94c75ae756f2f79911197da886e0b247f5fa05"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "343125f4113325f1f9b8ad62bcd3badee609a1f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0a30c366cd160bc8bd3589468dae18bd1b30ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0a30c366cd160bc8bd3589468dae18bd1b30ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c0a30c366cd160bc8bd3589468dae18bd1b30ec", "patch": "@@ -1,3 +1,11 @@\n+2005-02-01  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPatch from Richard Sandiford <rsandifo@redhat.com>\n+\t* reload1.c (choose_reload_regs): Prevent the find_equiv_reg() code\n+\tfrom inheriting a subreg equivalence with a non-spill register.\n+\n+\t* tree.h (DECL_FUNCTION_CODE): Document that it is overloaded.\n+\n 2005-02-01  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/frv/frv.c (movcc_fp_destination_operand): New."}, {"sha": "d4141be5aee29661e644428f24bdbc3bb552ba2b", "filename": "gcc/reload1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0a30c366cd160bc8bd3589468dae18bd1b30ec/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0a30c366cd160bc8bd3589468dae18bd1b30ec/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=9c0a30c366cd160bc8bd3589468dae18bd1b30ec", "patch": "@@ -5589,6 +5589,15 @@ choose_reload_regs (struct insn_chain *chain)\n \t\t      gcc_assert (GET_CODE (equiv) == SUBREG);\n \t\t      regno = subreg_regno (equiv);\n \t\t      equiv = gen_rtx_REG (rld[r].mode, regno);\n+\t\t      /* If we choose EQUIV as the reload register, but the\n+\t\t\t loop below decides to cancel the inheritance, we'll\n+\t\t\t end up reloading EQUIV in rld[r].mode, not the mode\n+\t\t\t it had originally.  That isn't safe when EQUIV isn't\n+\t\t\t available as a spill register since its value might\n+\t\t\t still be live at this point.  */\n+\t\t      for (i = regno; i < regno + (int) rld[r].nregs; i++)\n+\t\t\tif (TEST_HARD_REG_BIT (reload_reg_unavailable, i))\n+\t\t\t  equiv = 0;\n \t\t    }\n \t\t}\n "}, {"sha": "10012e406fd3a0eaeccc3b125d3b938ec1d6ff91", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0a30c366cd160bc8bd3589468dae18bd1b30ec/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0a30c366cd160bc8bd3589468dae18bd1b30ec/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9c0a30c366cd160bc8bd3589468dae18bd1b30ec", "patch": "@@ -2000,8 +2000,10 @@ struct tree_binfo GTY (())\n    that describes the status of this function.  */\n #define DECL_STRUCT_FUNCTION(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.u2.f)\n \n-/* For FUNCTION_DECL, if it is built-in,\n-   this identifies which built-in operation it is.  */\n+/* For FUNCTION_DECL, if it is built-in, this identifies which built-in\n+   operation it is.  Note, however, that this field is overloaded, with\n+   DECL_BUILT_IN_CLASS as the discriminant, so the latter must always be\n+   checked before any access to the former.  */\n #define DECL_FUNCTION_CODE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.u1.f)\n \n /* The DECL_VINDEX is used for FUNCTION_DECLS in two different ways."}]}