{"sha": "093b46f04f98d723c5930c5bec7f3206e552dff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkzYjQ2ZjA0Zjk4ZDcyM2M1OTMwYzViZWM3ZjMyMDZlNTUyZGZmNA==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2004-02-06T08:12:38Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2004-02-06T08:12:38Z"}, "message": "check_performance (CXX): Add -DNOTHREAD.\n\n\t* scripts/check_performance (CXX): Add -DNOTHREAD.\n\t* testsuite/performance/20_util/allocator/insert.cc: Integrate\n\tthreaded tests from insert_insert.cc.  Tweak iterations,\n\tremove special cases.\n\t* testsuite/performance/20_util/allocator/insert_insert.cc:\n\tMake all tests single-threaded. Tweak iterations.\n\t* testsuite/performance/20_util/allocator/map_thread.cc:\n\tTweak iterations.\n\t* testsuite/performance/20_util/allocator/producer_consumer.cc:\n\tLikewise.\n\nFrom-SVN: r77388", "tree": {"sha": "d582c6d7c9b333bc1d8a616a8f7d45a581a999b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d582c6d7c9b333bc1d8a616a8f7d45a581a999b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/093b46f04f98d723c5930c5bec7f3206e552dff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093b46f04f98d723c5930c5bec7f3206e552dff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/093b46f04f98d723c5930c5bec7f3206e552dff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093b46f04f98d723c5930c5bec7f3206e552dff4/comments", "author": null, "committer": null, "parents": [{"sha": "07711f53ae115806856082e2e8fe17263e61c499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07711f53ae115806856082e2e8fe17263e61c499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07711f53ae115806856082e2e8fe17263e61c499"}], "stats": {"total": 191, "additions": 118, "deletions": 73}, "files": [{"sha": "090dae87ff69d1c76f4cba46e084dc7b88a8693a", "filename": "libstdc++-v3/scripts/check_performance", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Fscripts%2Fcheck_performance", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Fscripts%2Fcheck_performance", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcheck_performance?ref=093b46f04f98d723c5930c5bec7f3206e552dff4", "patch": "@@ -31,7 +31,7 @@ SH_FLAG=\"-Wl,--rpath -Wl,$BUILD_DIR/../../gcc \\\n          -Wl,--rpath -Wl,$BUILD_DIR/src/.libs\"\n ST_FLAG=\"-static\"\n LINK=$SH_FLAG\n-CXX=\"$COMPILER $INCLUDES $FLAGS $LINK\"\n+CXX=\"$COMPILER $INCLUDES $FLAGS -DNOTHREAD $LINK\"\n CXX_THREAD=\"$COMPILER $INCLUDES $FLAGS $THREAD_FLAG $LINK\"\n \n "}, {"sha": "9c7975c8abe59c373cf88777ae69c3f5ef8c93a4", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/insert.cc", "status": "modified", "additions": 95, "deletions": 25, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert.cc?ref=093b46f04f98d723c5930c5bec7f3206e552dff4", "patch": "@@ -51,7 +51,7 @@ using namespace std;\n typedef int test_type;\n \n // The number of iterations to be performed.\n-int iterations = 100000;\n+int iterations = 10000;\n \n // The number of values to insert in the container, 32 will cause 5\n // (re)allocations to be performed (sizes 4, 8, 16, 32 and 64)\n@@ -71,30 +71,30 @@ template<typename TestType>\n   };\n \n template<typename Container>\n-  int\n-  do_loop(Container& obj)\n+  void\n+  do_loop()\n   {\n+    Container obj;\n     int test_iterations = 0;\n-    try\n-      {\n-\tvalue_type<test_type> test_value;\n-\twhile (test_iterations < iterations)\n-\t  {\n-\t    for (int j = 0; j < insert_values; ++j)\n-\t      obj.insert(obj.end(), ++test_value);\n-\t    ++test_iterations;\n-\t  }\n-      }\n-    catch(...)\n+    value_type<test_type> test_value;\n+    while (test_iterations < iterations)\n       {\n-\t// No point allocating all available memory, repeatedly.\t\n+\tfor (int j = 0; j < insert_values; ++j)\n+\t  obj.insert(obj.end(), ++test_value);\n+\t++test_iterations;\n       }\n-    return test_iterations;\n+  }\n+\n+template<typename Container>\n+  void*\n+  do_test(void* p = NULL)\n+  {\n+    do_loop<Container>();\n   }\n \n template<typename Container>\n   void\n-  test_container(Container obj)\n+  test_container(Container obj, bool run_threaded = false)\n   {\n     using namespace __gnu_test;\n     int status;\n@@ -103,11 +103,36 @@ template<typename Container>\n     resource_counter resource;\n     clear_counters(time, resource);\n     start_counters(time, resource);\n-    int test_iterations = do_loop(obj);\n+\n+    if (! run_threaded)\n+      {\n+\tdo_loop<Container>();\n+      }\n+    else\n+      {\n+#if defined (_GLIBCXX_GCC_GTHR_POSIX_H) && !defined (NOTHREAD)\n+\tpthread_t  t1, t2, t3, t4;\n+\tpthread_create(&t1, 0, &do_test<Container>, 0);\n+\tpthread_create(&t2, 0, &do_test<Container>, 0);\n+\tpthread_create(&t3, 0, &do_test<Container>, 0);\n+\tpthread_create(&t4, 0, &do_test<Container>, 0);\n+\n+\tpthread_join(t1, NULL);\n+\tpthread_join(t2, NULL);\n+\tpthread_join(t3, NULL);\n+\tpthread_join(t4, NULL);\n+#else\n+\treturn;\n+#endif\n+      }\n+\n     stop_counters(time, resource);\n  \n     std::ostringstream comment;\n-    comment << \"iterations: \" << test_iterations << '\\t';\n+    if (run_threaded)\n+      comment << \"4-way threaded iterations: \" << iterations*4 << '\\t';\n+    else\n+      comment << \"iterations: \" << iterations << '\\t';\n     comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n \t\t\t\t\t       0, 0, &status);\n     report_header(__FILE__, comment.str());\n@@ -154,30 +179,75 @@ int main(void)\n \n   typedef less<test_type> compare_type;\n #ifdef TEST_B9\n-  iterations = 50000;\n   test_container(map<test_type, test_type, compare_type, m_alloc_type>());\n #endif\n #ifdef TEST_B10\n-  iterations = 50000;\n   test_container(map<test_type, test_type, compare_type, n_alloc_type>());\n #endif\n #ifdef TEST_B11\n-  iterations = 50000;\n   test_container(map<test_type, test_type, compare_type, so_alloc_type>());\n #endif\n \n #ifdef TEST_B12\n-  iterations = 50000;\n   test_container(set<test_type, compare_type, m_alloc_type>());\n #endif\n #ifdef TEST_B13\n-  iterations = 50000;\n   test_container(set<test_type, compare_type, n_alloc_type>());\n #endif\n #ifdef TEST_B14\n-  iterations = 50000;\n   test_container(set<test_type, compare_type, so_alloc_type>());\n #endif\n \n+#ifdef TEST_T0\n+  test_container(vector<test_type, m_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T1\n+  test_container(vector<test_type, n_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T2\n+  test_container(vector<test_type, so_alloc_type>(), true);\n+#endif\n+\n+#ifdef TEST_T3\n+  test_container(list<test_type, m_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T4\n+  test_container(list<test_type, n_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T5\n+  test_container(list<test_type, so_alloc_type>(), true);\n+#endif\n+\n+#ifdef TEST_T6\n+  test_container(deque<test_type, m_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T7\n+  test_container(deque<test_type, n_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T8\n+  test_container(deque<test_type, so_alloc_type>(), true);\n+#endif\n+\n+  typedef less<test_type> compare_type;\n+#ifdef TEST_T9\n+  test_container(map<test_type, test_type, compare_type, m_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T10\n+  test_container(map<test_type, test_type, compare_type, n_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T11\n+  test_container(map<test_type, test_type, compare_type, so_alloc_type>(), true);\n+#endif\n+\n+#ifdef TEST_T12\n+  test_container(set<test_type, compare_type, m_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T13\n+  test_container(set<test_type, compare_type, n_alloc_type>(), true);\n+#endif\n+#ifdef TEST_T14\n+  test_container(set<test_type, compare_type, so_alloc_type>(), true);\n+#endif\n+\n   return 0;\n }"}, {"sha": "e0773f0ba15bfda24169ba392bb7c3b22f7733f2", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/insert_insert.cc", "status": "modified", "additions": 20, "deletions": 45, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert_insert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert_insert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert_insert.cc?ref=093b46f04f98d723c5930c5bec7f3206e552dff4", "patch": "@@ -40,7 +40,6 @@\n #include <set>\n #include <typeinfo>\n #include <sstream>\n-#include <pthread.h>\n #include <ext/mt_allocator.h>\n #include <ext/new_allocator.h>\n #include <ext/malloc_allocator.h>\n@@ -52,7 +51,7 @@ using namespace std;\n typedef int test_type;\n \n // The number of iterations to be performed.\n-int iterations = 25000;\n+int iterations = 10000;\n \n // The number of values to insert in the container, 32 will cause 5\n // (re)allocations to be performed (sizes 4, 8, 16, 32 and 64)\n@@ -86,21 +85,6 @@ template<typename Container>\n       }\n   }\n \n-template<typename Container>\n-  void*\n-  do_test(void* p = NULL)\n-  {\n-    try\n-      {\n-\tdo_loop<Container>();\n-\tdo_loop<Container>();\n-      }\n-    catch(...)\n-      {\n-\t// No point allocating all available memory, repeatedly.\n-      }\n-  }\n-\n template<typename Container>\n   void\n   test_container(Container obj)\n@@ -110,25 +94,16 @@ template<typename Container>\n \n     time_counter time;\n     resource_counter resource;\n-\n     clear_counters(time, resource);\n     start_counters(time, resource);\n-    \n-    pthread_t  t1, t2, t3, t4;\n-    pthread_create(&t1, 0, &do_test<Container>, 0);\n-    pthread_create(&t2, 0, &do_test<Container>, 0);\n-    pthread_create(&t3, 0, &do_test<Container>, 0);\n-    pthread_create(&t4, 0, &do_test<Container>, 0);\n-\n-    pthread_join(t1, NULL);\n-    pthread_join(t2, NULL);\n-    pthread_join(t3, NULL);\n-    pthread_join(t4, NULL);\n+\n+    do_loop<Container>();\n+    do_loop<Container>();\n \n     stop_counters(time, resource);\n  \n     std::ostringstream comment;\n-    comment << \"iterations: \" << iterations << '\\t';\n+    comment << \"repeated iterations: \" << iterations*2 << '\\t';\n     comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n \t\t\t\t\t       0, 0, &status);\n     report_header(__FILE__, comment.str());\n@@ -143,54 +118,54 @@ int main(void)\n   typedef __gnu_cxx::new_allocator<test_type> n_alloc_type;\n   typedef __gnu_cxx::__mt_alloc<test_type> so_alloc_type;\n \n-#ifdef TEST_T0\n+#ifdef TEST_S0\n   test_container(vector<test_type, m_alloc_type>());\n #endif\n-#ifdef TEST_T1\n+#ifdef TEST_S1\n   test_container(vector<test_type, n_alloc_type>());\n #endif\n-#ifdef TEST_T2\n+#ifdef TEST_S2\n   test_container(vector<test_type, so_alloc_type>());\n #endif\n \n-#ifdef TEST_T3\n+#ifdef TEST_S3\n   test_container(list<test_type, m_alloc_type>());\n #endif\n-#ifdef TEST_T4\n+#ifdef TEST_S4\n   test_container(list<test_type, n_alloc_type>());\n #endif\n-#ifdef TEST_T5\n+#ifdef TEST_S5\n   test_container(list<test_type, so_alloc_type>());\n #endif\n \n-#ifdef TEST_T6\n+#ifdef TEST_S6\n   test_container(deque<test_type, m_alloc_type>());\n #endif\n-#ifdef TEST_T7\n+#ifdef TEST_S7\n   test_container(deque<test_type, n_alloc_type>());\n #endif\n-#ifdef TEST_T8\n+#ifdef TEST_S8\n   test_container(deque<test_type, so_alloc_type>());\n #endif\n \n   typedef less<test_type> compare_type;\n-#ifdef TEST_T9\n+#ifdef TEST_S9\n   test_container(map<test_type, test_type, compare_type, m_alloc_type>());\n #endif\n-#ifdef TEST_T10\n+#ifdef TEST_S10\n   test_container(map<test_type, test_type, compare_type, n_alloc_type>());\n #endif\n-#ifdef TEST_T11\n+#ifdef TEST_S11\n   test_container(map<test_type, test_type, compare_type, so_alloc_type>());\n #endif\n \n-#ifdef TEST_T12\n+#ifdef TEST_S12\n   test_container(set<test_type, compare_type, m_alloc_type>());\n #endif\n-#ifdef TEST_T13\n+#ifdef TEST_S13\n   test_container(set<test_type, compare_type, n_alloc_type>());\n #endif\n-#ifdef TEST_T14\n+#ifdef TEST_S14\n   test_container(set<test_type, compare_type, so_alloc_type>());\n #endif\n "}, {"sha": "abceafa6decd16ea66403d63165cd1f1b5143a91", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/map_thread.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc?ref=093b46f04f98d723c5930c5bec7f3206e552dff4", "patch": "@@ -49,7 +49,7 @@ using __gnu_cxx::new_allocator;\n using __gnu_cxx::malloc_allocator;\n \n // The number of iterations to be performed.\n-int iterations = 25000;\n+int iterations = 10000;\n \n template<typename Container>\n   void*"}, {"sha": "951242e15830c6f93ca4a42a1933bee7687d7050", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/producer_consumer.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fproducer_consumer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093b46f04f98d723c5930c5bec7f3206e552dff4/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fproducer_consumer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fproducer_consumer.cc?ref=093b46f04f98d723c5930c5bec7f3206e552dff4", "patch": "@@ -58,7 +58,7 @@ typedef new_allocator<test_type> new_alloc_type;\n typedef __mt_alloc<test_type> so_alloc_type;\n \n // The number of iterations to be performed.\n-int iterations = 25000;\n+int iterations = 10000;\n \n // TODO - restore Stefan's comment?  i don't understand it.  -- fwy\n int insert_values = 128;"}]}