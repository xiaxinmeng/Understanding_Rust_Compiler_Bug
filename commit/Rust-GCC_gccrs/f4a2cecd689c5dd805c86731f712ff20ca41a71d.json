{"sha": "f4a2cecd689c5dd805c86731f712ff20ca41a71d", "node_id": "C_kwDOANBUbNoAKGY0YTJjZWNkNjg5YzVkZDgwNWM4NjczMWY3MTJmZjIwY2E0MWE3MWQ", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-15T19:59:07Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-15T19:59:57Z"}, "message": "i386: Improve and optimize ix86_expand_sse_movcc\n\nModernize ix86_expand_sse_movcc to use expand_simple_{unop,binop}\ninfrastructure to avoid manual twiddling with output registers.\nAlso fix a couple of inconsistent vector_all_ones_operand usages,\nbreak a couple of unnecessary else-if chains, eliminate common\nsubexpressions and do some general code simplifications.\n\n2022-01-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c (ix86_expand_sse_movcc): Use\n\texpand_simple_unop and expand_simple_binop instead of manually\n\tconstructing NOT, AND and IOR RTXes.  Use vector_all_ones_operand\n\tconsistently.  Eliminate common subexpressions and simplify code.\n\t* config/i386/sse.md (<any_logic:code><MODEF:mode>3): New expander.\n\t(<any_logic:code><MODEF:mode>3): Make public.", "tree": {"sha": "e9895c61313e030e2c93b1d54cc9ffb19af402b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9895c61313e030e2c93b1d54cc9ffb19af402b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4a2cecd689c5dd805c86731f712ff20ca41a71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a2cecd689c5dd805c86731f712ff20ca41a71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a2cecd689c5dd805c86731f712ff20ca41a71d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a2cecd689c5dd805c86731f712ff20ca41a71d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf8fe1eeab668a4d24bcc4baa3ad185dbf1b5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf8fe1eeab668a4d24bcc4baa3ad185dbf1b5e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcf8fe1eeab668a4d24bcc4baa3ad185dbf1b5e0"}], "stats": {"total": 140, "additions": 62, "deletions": 78}, "files": [{"sha": "138580da96e902e21709e6fe1dbc7e4f2afcd764", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 61, "deletions": 77, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2cecd689c5dd805c86731f712ff20ca41a71d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2cecd689c5dd805c86731f712ff20ca41a71d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=f4a2cecd689c5dd805c86731f712ff20ca41a71d", "patch": "@@ -3781,6 +3781,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n {\n   machine_mode mode = GET_MODE (dest);\n   machine_mode cmpmode = GET_MODE (cmp);\n+  rtx x;\n \n   /* Simplify trivial VEC_COND_EXPR to avoid ICE in pr97506.  */\n   if (rtx_equal_p (op_true, op_false))\n@@ -3789,8 +3790,6 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       return;\n     }\n \n-  rtx t2, t3, x;\n-\n   /* If we have an integer mask and FP value then we need\n      to cast mask to FP mode.  */\n   if (mode != cmpmode && VECTOR_MODE_P (cmpmode))\n@@ -3813,35 +3812,39 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \t\t  ? force_reg (mode, op_false) : op_false);\n       if (op_true == CONST0_RTX (mode))\n \t{\n-\t  rtx n = gen_reg_rtx (cmpmode);\n \t  if (cmpmode == E_DImode && !TARGET_64BIT)\n-\t    emit_insn (gen_knotdi (n, cmp));\n+\t    {\n+\t      x = gen_reg_rtx (cmpmode);\n+\t      emit_insn (gen_knotdi (x, cmp));\n+\t    }\n \t  else\n-\t    emit_insn (gen_rtx_SET (n, gen_rtx_fmt_e (NOT, cmpmode, cmp)));\n-\t  cmp = n;\n+\t    x = expand_simple_unop (cmpmode, NOT, cmp, NULL, 1);\n+\t  cmp = x;\n \t  /* Reverse op_true op_false.  */\n \t  std::swap (op_true, op_false);\n \t}\n \n       if (mode == HFmode)\n \temit_insn (gen_movhf_mask (dest, op_true, op_false, cmp));\n       else\n-\t{\n-\t  rtx vec_merge = gen_rtx_VEC_MERGE (mode, op_true, op_false, cmp);\n-\t  emit_insn (gen_rtx_SET (dest, vec_merge));\n-\t}\n+\temit_insn (gen_rtx_SET (dest,\n+\t\t\t\tgen_rtx_VEC_MERGE (mode,\n+\t\t\t\t\t\t   op_true, op_false, cmp)));\n       return;\n     }\n-  else if (vector_all_ones_operand (op_true, mode)\n-\t   && op_false == CONST0_RTX (mode))\n+\n+  if (vector_all_ones_operand (op_true, mode)\n+      && op_false == CONST0_RTX (mode))\n     {\n-      emit_insn (gen_rtx_SET (dest, cmp));\n+      emit_move_insn (dest, cmp);\n       return;\n     }\n   else if (op_false == CONST0_RTX (mode))\n     {\n-      op_true = force_reg (mode, op_true);\n-      ix86_emit_vec_binop (AND, mode, dest, cmp, op_true);\n+      x = expand_simple_binop (mode, AND, cmp, op_true,\n+\t\t\t       dest, 1, OPTAB_DIRECT);\n+      if (x != dest)\n+\temit_move_insn (dest, x);\n       return;\n     }\n   else if (op_true == CONST0_RTX (mode))\n@@ -3851,30 +3854,34 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       ix86_emit_vec_binop (AND, mode, dest, x, op_false);\n       return;\n     }\n-  else if (INTEGRAL_MODE_P (mode) && op_true == CONSTM1_RTX (mode))\n+  else if (vector_all_ones_operand (op_true, mode))\n     {\n-      op_false = force_reg (mode, op_false);\n-      ix86_emit_vec_binop (IOR, mode, dest, cmp, op_false);\n+      x = expand_simple_binop (mode, IOR, cmp, op_false,\n+\t\t\t       dest, 1, OPTAB_DIRECT);\n+      if (x != dest)\n+\temit_move_insn (dest, x);\n       return;\n     }\n-  else if (TARGET_XOP)\n+\n+  if (TARGET_XOP)\n     {\n       op_true = force_reg (mode, op_true);\n \n       if (GET_MODE_SIZE (mode) < 16\n \t  || !nonimmediate_operand (op_false, mode))\n \top_false = force_reg (mode, op_false);\n \n-      emit_insn (gen_rtx_SET (dest, gen_rtx_IF_THEN_ELSE (mode, cmp,\n-\t\t\t\t\t\t\t  op_true,\n-\t\t\t\t\t\t\t  op_false)));\n+      emit_insn (gen_rtx_SET (dest,\n+\t\t\t      gen_rtx_IF_THEN_ELSE (mode, cmp,\n+\t\t\t\t\t\t    op_true, op_false)));\n       return;\n     }\n \n   rtx (*gen) (rtx, rtx, rtx, rtx) = NULL;\n-  rtx d = dest;\n+  machine_mode blend_mode = mode;\n \n-  if (!vector_operand (op_true, mode))\n+  if (GET_MODE_SIZE (mode) < 16\n+      || !vector_operand (op_true, mode))\n     op_true = force_reg (mode, op_true);\n \n   op_false = force_reg (mode, op_false);\n@@ -3883,10 +3890,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n     {\n     case E_V2SFmode:\n       if (TARGET_SSE4_1)\n-\t{\n-\t  gen = gen_mmx_blendvps;\n-\t  op_true = force_reg (mode, op_true);\n-\t}\n+\tgen = gen_mmx_blendvps;\n       break;\n     case E_V4SFmode:\n       if (TARGET_SSE4_1)\n@@ -3898,54 +3902,32 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       break;\n     case E_SFmode:\n       if (TARGET_SSE4_1)\n-\t{\n-\t  gen = gen_sse4_1_blendvss;\n-\t  op_true = force_reg (mode, op_true);\n-\t}\n+\tgen = gen_sse4_1_blendvss;\n       break;\n     case E_DFmode:\n       if (TARGET_SSE4_1)\n-\t{\n-\t  gen = gen_sse4_1_blendvsd;\n-\t  op_true = force_reg (mode, op_true);\n-\t}\n+\tgen = gen_sse4_1_blendvsd;\n       break;\n     case E_V8QImode:\n     case E_V4HImode:\n     case E_V2SImode:\n       if (TARGET_SSE4_1)\n \t{\n-\t  op_true = force_reg (mode, op_true);\n-\n \t  gen = gen_mmx_pblendvb_v8qi;\n-\t  if (mode != V8QImode)\n-\t    d = gen_reg_rtx (V8QImode);\n-\t  op_false = gen_lowpart (V8QImode, op_false);\n-\t  op_true = gen_lowpart (V8QImode, op_true);\n-\t  cmp = gen_lowpart (V8QImode, cmp);\n+\t  blend_mode = V8QImode;\n \t}\n       break;\n     case E_V4QImode:\n     case E_V2HImode:\n       if (TARGET_SSE4_1)\n \t{\n-\t  op_true = force_reg (mode, op_true);\n-\n \t  gen = gen_mmx_pblendvb_v4qi;\n-\t  if (mode != V4QImode)\n-\t    d = gen_reg_rtx (V4QImode);\n-\t  op_false = gen_lowpart (V4QImode, op_false);\n-\t  op_true = gen_lowpart (V4QImode, op_true);\n-\t  cmp = gen_lowpart (V4QImode, cmp);\n+\t  blend_mode = V4QImode;\n \t}\n       break;\n     case E_V2QImode:\n       if (TARGET_SSE4_1)\n-\t{\n-\t  op_true = force_reg (mode, op_true);\n-\n-\t  gen = gen_mmx_pblendvb_v2qi;\n-\t}\n+\tgen = gen_mmx_pblendvb_v2qi;\n       break;\n     case E_V16QImode:\n     case E_V8HImode:\n@@ -3955,11 +3937,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       if (TARGET_SSE4_1)\n \t{\n \t  gen = gen_sse4_1_pblendvb;\n-\t  if (mode != V16QImode)\n-\t    d = gen_reg_rtx (V16QImode);\n-\t  op_false = gen_lowpart (V16QImode, op_false);\n-\t  op_true = gen_lowpart (V16QImode, op_true);\n-\t  cmp = gen_lowpart (V16QImode, cmp);\n+\t  blend_mode = V16QImode;\n \t}\n       break;\n     case E_V8SFmode:\n@@ -3978,11 +3956,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       if (TARGET_AVX2)\n \t{\n \t  gen = gen_avx2_pblendvb;\n-\t  if (mode != V32QImode)\n-\t    d = gen_reg_rtx (V32QImode);\n-\t  op_false = gen_lowpart (V32QImode, op_false);\n-\t  op_true = gen_lowpart (V32QImode, op_true);\n-\t  cmp = gen_lowpart (V32QImode, cmp);\n+\t  blend_mode = V32QImode;\n \t}\n       break;\n \n@@ -4014,26 +3988,36 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \n   if (gen != NULL)\n     {\n-      emit_insn (gen (d, op_false, op_true, cmp));\n-      if (d != dest)\n-\temit_move_insn (dest, gen_lowpart (GET_MODE (dest), d));\n+      if (blend_mode == mode)\n+\tx = dest;\n+      else\n+\t{\n+\t  x = gen_reg_rtx (blend_mode);\n+\t  op_false = gen_lowpart (blend_mode, op_false);\n+\t  op_true = gen_lowpart (blend_mode, op_true);\n+\t  cmp = gen_lowpart (blend_mode, cmp);\n+\t}\n+\n+      emit_insn (gen (x, op_false, op_true, cmp));\n+\n+      if (x != dest)\n+\temit_move_insn (dest, gen_lowpart (mode, x));\n     }\n   else\n     {\n-      op_true = force_reg (mode, op_true);\n-\n-      t2 = gen_reg_rtx (mode);\n-      if (optimize)\n-\tt3 = gen_reg_rtx (mode);\n-      else\n-\tt3 = dest;\n+      rtx t2, t3;\n \n-      ix86_emit_vec_binop (AND, mode, t2, op_true, cmp);\n+      t2 = expand_simple_binop (mode, AND, op_true, cmp,\n+\t\t\t\tNULL, 1, OPTAB_DIRECT);\n \n+      t3 = gen_reg_rtx (mode);\n       x = gen_rtx_NOT (mode, cmp);\n       ix86_emit_vec_binop (AND, mode, t3, x, op_false);\n \n-      ix86_emit_vec_binop (IOR, mode, dest, t3, t2);\n+      x = expand_simple_binop (mode, IOR, t3, t2,\n+\t\t\t       dest, 1, OPTAB_DIRECT);\n+      if (x != dest)\n+\temit_move_insn (dest, x);\n     }\n }\n "}, {"sha": "50dc5da9a383e812d2c83c7e6e5d2260c5b770c6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2cecd689c5dd805c86731f712ff20ca41a71d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2cecd689c5dd805c86731f712ff20ca41a71d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f4a2cecd689c5dd805c86731f712ff20ca41a71d", "patch": "@@ -4956,7 +4956,7 @@\n \t      ]\n \t      (const_string \"TI\")))])\n \n-(define_insn \"*<code><mode>3\"\n+(define_insn \"<code><mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,v,v\")\n \t(any_logic:MODEF\n \t  (match_operand:MODEF 1 \"register_operand\" \"%0,x,v,v\")"}]}