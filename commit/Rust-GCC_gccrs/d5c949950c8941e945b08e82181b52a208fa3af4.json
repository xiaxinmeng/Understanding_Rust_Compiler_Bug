{"sha": "d5c949950c8941e945b08e82181b52a208fa3af4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjOTQ5OTUwYzg5NDFlOTQ1YjA4ZTgyMTgxYjUyYTIwOGZhM2FmNA==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-08-13T10:31:17Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-08-13T10:31:17Z"}, "message": "MSP430: Read MCU data from external file\n\ngcc/ChangeLog:\n\n2019-08-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/driver-msp430.c (msp430_set_driver_var): New.\n\t* config/msp430/msp430-devices.c (canonicalize_path_dirsep): New.\n\t(msp430_check_path_for_devices): New.\n\t(parse_devices_csv_1): New.\n\t(parse_devices_csv): New.\n\t(msp430_extract_mcu_data): Try to find devices.csv and search for the\n\tMCU data in devices.csv before using the hard-coded data.\n\tWarn if devices.csv isn't found and the MCU wasn't found in the\n\thard-coded data either.\n\t* config/msp430/msp430.h (DRIVER_SELF_SPECS): Call\n\tmsp430_set_driver_var for -mno-warn-devices-csv and -mdevices-csv-loc.\n\tSearch for devices.csv on -I and -L paths.\n\t(EXTRA_SPEC_FUNCTIONS): Add msp430_check_path_for_devices and\n\tmsp430_set_driver_var.\n\t* config/msp430/msp430.opt: Add -mwarn-devices-csv and\n\t-mdevices-csv-loc=.\n\t* doc/invoke.texi (-mmcu): Document that -I and -L paths are\n\tsearched for devices.csv.\n\t(mwarn-devices-csv): Document option.\n\ngcc/testsuite/ChangeLog:\n\n2019-08-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* gcc.target/msp430/msp430.exp (msp430_device_permutations_runtest):\n\tHandle csv-* and bad-devices-* tests.\n\t* gcc.target/msp430/devices/README: Document how bad-devices-* tests\n\twork.\n\t* gcc.target/msp430/devices/bad-devices-1.c: New test.\n\t* gcc.target/msp430/devices/bad-devices-2.c: Likewise.\n\t* gcc.target/msp430/devices/bad-devices-3.c: Likewise.\n\t* gcc.target/msp430/devices/bad-devices-4.c: Likewise.\n\t* gcc.target/msp430/devices/bad-devices-5.c: Likewise.\n\t* gcc.target/msp430/devices/bad-devices-6.c: Likewise.\n\t* gcc.target/msp430/devices/csv-device-order.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_00.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_01.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_02.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_04.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_08.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_10.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_11.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_12.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_14.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_18.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_20.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_21.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_22.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_24.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430_28.c: Likewise.\n\t* gcc.target/msp430/devices/csv-msp430fr5969.c: Likewise.\n\t* gcc.target/msp430/devices/hard-foo.c: Likewise.\n\t* gcc.target/msp430/devices/bad-devices-1.csv: New test support file.\n\t* gcc.target/msp430/devices/bad-devices-2.csv: Likewise.\n\t* gcc.target/msp430/devices/bad-devices-3.csv: Likewise.\n\t* gcc.target/msp430/devices/bad-devices-4.csv: Likewise.\n\t* gcc.target/msp430/devices/bad-devices-5.csv: Likewise.\n\t* gcc.target/msp430/devices/bad-devices-6.csv: Likewise.\n\t* gcc.target/msp430/devices/devices.csv: Likewise.\n\nFrom-SVN: r274373", "tree": {"sha": "51cf70166889421fecd2420275c15f31a6aba84a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51cf70166889421fecd2420275c15f31a6aba84a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5c949950c8941e945b08e82181b52a208fa3af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c949950c8941e945b08e82181b52a208fa3af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c949950c8941e945b08e82181b52a208fa3af4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c949950c8941e945b08e82181b52a208fa3af4/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1044fa32e2b456b59b3cdc31b4f261145f1589cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1044fa32e2b456b59b3cdc31b4f261145f1589cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1044fa32e2b456b59b3cdc31b4f261145f1589cc"}], "stats": {"total": 615, "additions": 604, "deletions": 11}, "files": [{"sha": "3e05090eba1a3d47ad2d5b6a4da070927d30729d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -1,3 +1,25 @@\n+2019-08-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/driver-msp430.c (msp430_set_driver_var): New.\n+\t* config/msp430/msp430-devices.c (canonicalize_path_dirsep): New.\n+\t(msp430_check_path_for_devices): New.\n+\t(parse_devices_csv_1): New.\n+\t(parse_devices_csv): New.\n+\t(msp430_extract_mcu_data): Try to find devices.csv and search for the\n+\tMCU data in devices.csv before using the hard-coded data.\n+\tWarn if devices.csv isn't found and the MCU wasn't found in the\n+\thard-coded data either.\n+\t* config/msp430/msp430.h (DRIVER_SELF_SPECS): Call\n+\tmsp430_set_driver_var for -mno-warn-devices-csv and -mdevices-csv-loc.\n+\tSearch for devices.csv on -I and -L paths.\n+\t(EXTRA_SPEC_FUNCTIONS): Add msp430_check_path_for_devices and\n+\tmsp430_set_driver_var.\n+\t* config/msp430/msp430.opt: Add -mwarn-devices-csv and\n+\t-mdevices-csv-loc=.\n+\t* doc/invoke.texi (-mmcu): Document that -I and -L paths are\n+\tsearched for devices.csv.\n+\t(mwarn-devices-csv): Document option.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_output_ptrue): Delete.\n@@ -25,26 +47,26 @@\n \n 2019-08-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n-\t* gcc/config.gcc (msp430*-*-*): Add msp430-devices.o to extra_objs and\n+\t* config.gcc (msp430*-*-*): Add msp430-devices.o to extra_objs and\n \textra_gcc_objs.\n-\t* gcc/config/msp430/driver-msp430.c: Remove msp430_mcu_data.\n+\t* config/msp430/driver-msp430.c: Remove msp430_mcu_data.\n \t(msp430_select_cpu): New spec function.\n \t(msp430_select_hwmult_lib): Use msp430_extract_mcu_data to extract\n \tMCU data.\n-\t* gcc/config/msp430/msp430-devices.c: New file.\n-\t* gcc/config/msp430/msp430-devices.h: New file.\n-\t* gcc/config/msp430/msp430.c: Remove msp430_mcu_data.\n+\t* config/msp430/msp430-devices.c: New file.\n+\t* config/msp430/msp430-devices.h: New file.\n+\t* config/msp430/msp430.c: Remove msp430_mcu_data.\n \t(msp430_option_override): Use msp430_extract_mcu_data to extract\n \tMCU data.\n \t(msp430_use_f5_series_hwmult): Likewise.\n \t(use_32bit_hwmult): Likewise.\n \t(msp430_no_hwmult): Likewise.\n-\t* gcc/config/msp430/msp430.h (ASM_SPEC): Don't pass -mmcu to the\n+\t* config/msp430/msp430.h (ASM_SPEC): Don't pass -mmcu to the\n \tassembler.\n \t(DRIVER_SELF_SPECS): Call msp430_select_cpu if -mmcu is used without\n \tand -mcpu option.\n \t(EXTRA_SPEC_FUNCTIONS): Add msp430_select_cpu.\n-\t* gcc/config/msp430/t-msp430: Add rule to build msp430-devices.o.\n+\t* config/msp430/t-msp430: Add rule to build msp430-devices.o.\n \tRemove hard-coded MCU multilib data.\n \n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>"}, {"sha": "4fa70c6c2e15102428a935acb2459d5751baccb3", "filename": "gcc/config/msp430/driver-msp430.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -54,6 +54,29 @@ msp430_select_cpu (int argc, const char ** argv)\n   return NULL;\n }\n \n+/* Spec function to set a global variable to a specific value in the driver.\n+   The first argument is the variable name, and the second is the value to set\n+   it to.\n+   Currently only \"msp430_warn_devices_csv\" and \"msp430_devices_csv_loc\" are\n+   supported.\n+   The intention is that we can take a \"Target\" option and set the variable\n+   associated with it in the driver as well.  Whilst the driver sees \"Target\"\n+   options, it does not set the variables associated with that option.  */\n+const char *\n+msp430_set_driver_var (int argc, const char ** argv)\n+{\n+  if (argc != 2)\n+    error (\"%<msp430_set_driver_var%> expects 2 arguments\");\n+  else if (strcmp (argv[0], \"msp430_warn_devices_csv\") == 0)\n+    msp430_warn_devices_csv = atoi (argv[1]);\n+  else if (strcmp (argv[0], \"msp430_devices_csv_loc\") == 0)\n+    msp430_devices_csv_loc = argv[1];\n+  else\n+    error (\"unhandled arguments %qs and %qs to %<msp430_set_driver_var%>\",\n+\t   argv[0], argv[1]);\n+  return NULL;\n+}\n+\n /* Implement spec function `msp430_hwmult_lib\u00b4.  */\n \n const char *"}, {"sha": "0488a0f197c34ea305cfd7ed3d86cd43d35a1575", "filename": "gcc/config/msp430/msp430-devices.c", "status": "modified", "additions": 275, "deletions": 1, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-devices.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -35,19 +35,282 @@ struct t_msp430_mcu_data extracted_mcu_data;\n /* Initialized at the bottom of this file.  */\n extern struct t_msp430_mcu_data hard_msp430_mcu_data[605];\n \n+/* Set to the full path to devices.csv if it is found by searching the -I and\n+   -L paths.  */\n+char * derived_devices_csv_loc = NULL;\n+\n+/* This is to canonicalize the directory separators in the path.\n+   On Windows we could have a mix of '/' and '\\' in the path.  */\n+static void\n+canonicalize_path_dirsep (char **path)\n+{\n+  char *t_path = *path;\n+  int len = strlen (t_path);\n+  int i;\n+  for (i = 0; i < len; i++)\n+    if (IS_DIR_SEPARATOR (t_path[i]))\n+      t_path[i] = DIR_SEPARATOR;\n+}\n+\n+/* Spec function which searches the paths passed to the -I and -L options for\n+   the \"devices.csv\" file.  If it is found then the -mdevices-csv-loc option is\n+   placed on the command line so the compiler knows the location of the\n+   file.  */\n+const char *\n+msp430_check_path_for_devices (int argc, const char **argv)\n+{\n+  const char dirsep[2] = { DIR_SEPARATOR, 0 };\n+  FILE * devices_file = NULL;\n+  char * local_devices_csv_loc = NULL;\n+  int i;\n+  /* msp430_devices_csv_loc is set by -mdevices-csv-loc, derived_devices_csv_loc\n+     is set by this function only.  */\n+  if (msp430_devices_csv_loc || derived_devices_csv_loc)\n+    return NULL;\n+  for (i = 0; i < argc; i++)\n+    {\n+      char *inc_path = ASTRDUP (argv[i]);\n+      canonicalize_path_dirsep (&inc_path);\n+      if (!IS_DIR_SEPARATOR (inc_path[strlen (inc_path) - 1]))\n+\tinc_path = concat (inc_path, dirsep, NULL);\n+      local_devices_csv_loc = concat (inc_path, \"devices.csv\", NULL);\n+      devices_file = fopen (local_devices_csv_loc, \"r\");\n+      if (devices_file != NULL)\n+\t{\n+\t  fclose (devices_file);\n+\t  derived_devices_csv_loc = local_devices_csv_loc;\n+\t  return concat (\"-mdevices-csv-loc=\", local_devices_csv_loc, NULL);\n+\t}\n+    }\n+  return NULL;\n+}\n+\n+/* Search the devices.csv file for the given MCU name, and load the device\n+   data into extracted_mcu_data.\n+   Return 1 if MCU wasn't found in devices.csv, or the data couldn't be loaded\n+   into extracted_mcu_data.\n+   devices.csv has a specific format.  There is a row for column headings which\n+   begins with \"# Device Name\".  The column numbers for CPU_TYPE (MSP430 ISA)\n+   and MPY_TYPE (hwmult support) are extracted from this row and used later to\n+   extract the ISA and hwmult supported for the given device.\n+   The rows containing the MCU data are expected to begin immediately after the\n+   column headings.  */\n+static int\n+parse_devices_csv_1 (const char * real_devices_csv_loc, const char * mcu_name)\n+{\n+  FILE * devices_file = fopen (real_devices_csv_loc, \"r\");\n+  /* Some devices have a large number of errata, which means that MPY_TYPE\n+     isn't found until the ~100th character in the line.  line_buf_size is set\n+     to 200 to account for further possible additions to errata.  */\n+  const size_t line_buf_size = 200;\n+  char line[line_buf_size];\n+  char * res;\n+  bool found_headings = false;\n+  bool found_mcu = false;\n+  int cpu_type = -1;\n+  int mpy_type = -1;\n+  int cpu_type_column = -1;\n+  int mpy_type_column = -1;\n+  const char * device_name_heading = \"# Device Name\";\n+  const char * cpu_type_heading = \"CPU_TYPE\";\n+  const char * mpy_type_heading = \"MPY_TYPE\";\n+  /* devices_file should never be NULL at this stage.  */\n+  if (devices_file == NULL)\n+    {\n+      if (msp430_warn_devices_csv)\n+\twarning (0, \"unexpected error opening %<devices.csv%>\");\n+      return 1;\n+    }\n+  while (1)\n+    {\n+      res = fgets (line, line_buf_size, devices_file);\n+      if (res == NULL)\n+\t{\n+\t  /* The device has not been found in devices.csv.  Don't warn now in\n+\t     case it is in the hard-coded data.  We will warn later if the\n+\t     device was not found in the hard-coded data either.  */\n+\t  goto end;\n+\t}\n+      else if (!found_headings\n+\t       && strncmp (line, device_name_heading,\n+\t\t\t   strlen (device_name_heading)) == 0)\n+\t{\n+\t  int curr_column = 0;\n+\t  char * heading = strtok (line, \",\");\n+\t  found_headings = true;\n+\t  /* Find which column MPY_TYPE and CPU_TYPE are in.  */\n+\t  while (heading != NULL)\n+\t    {\n+\t      if (strncmp (heading, cpu_type_heading,\n+\t\t\t   strlen (cpu_type_heading)) == 0)\n+\t\t  cpu_type_column = curr_column;\n+\t      else if (strncmp (heading, mpy_type_heading,\n+\t\t\t   strlen (mpy_type_heading)) == 0)\n+\t\t  mpy_type_column = curr_column;\n+\t      if (cpu_type_column != -1 && mpy_type_column != -1)\n+\t\tbreak;\n+\t      heading = strtok (NULL, \",\");\n+\t      curr_column++;\n+\t    }\n+\t  if (cpu_type_column == -1 || mpy_type_column == -1)\n+\t    {\n+\t      if (msp430_warn_devices_csv)\n+\t\t{\n+\t\t  if (cpu_type_column == -1 && mpy_type_column != -1)\n+\t\t    warning (0, \"%<CPU_TYPE%> column heading is missing from \"\n+\t\t\t     \"%<devices.csv%>\");\n+\t\t  else if (mpy_type_column == -1 && cpu_type_column != -1)\n+\t\t    warning (0, \"%<MPY_TYPE%> column heading is missing from \"\n+\t\t\t     \"%<devices.csv%>\");\n+\t\t  else\n+\t\t    warning (0, \"%<CPU_TYPE%> and %<MPY_TYPE%> column headings \"\n+\t\t\t     \"are missing from %<devices.csv%>\");\n+\t\t}\n+\t      goto end;\n+\t    }\n+\t}\n+      else if (strncasecmp (line, mcu_name, strlen (mcu_name)) == 0\n+\t       && *(line + strlen (mcu_name)) == ',')\n+\t{\n+\t  if (!found_headings)\n+\t    {\n+\t      if (msp430_warn_devices_csv)\n+\t\twarning (0, \"format of column headings in %<devices.csv%> \"\n+\t\t\t \"is incorrect\");\n+\t      goto end;\n+\t    }\n+\t  char * val = strtok (line, \",\");\n+\t  int final_col_num = ((mpy_type_column > cpu_type_column)\n+\t\t\t       ? mpy_type_column : cpu_type_column);\n+\t  int curr_col;\n+\t  bool found_cpu = false;\n+\t  bool found_mpy = false;\n+\t  for (curr_col = 0; curr_col <= final_col_num; curr_col++)\n+\t    {\n+\t      /* Strip any new line characters from the last token.  */\n+\t      if (curr_col == final_col_num && strlen (val) > 1\n+\t\t  /* ASCII digit 10 == LF, 13 == CR.  */\n+\t\t  && (val[1] == 10 || val[1] == 13))\n+\t\t{\n+\t\t  /* Terminate the string after the first character.  */\n+\t\t  val[1] = 0;\n+\t\t}\n+\t      if (curr_col == cpu_type_column)\n+\t\t{\n+\t\t  cpu_type = atoi (val);\n+\t\t  /* Only a single '0', '1' or '2' is accepted.  */\n+\t\t  if (strlen (val) != 1\n+\t\t      /* atoi will return 0 if the string passed as an argument\n+\t\t\t is empty or contains only whitespace characters, so we\n+\t\t\t must error if 0 is returned but the first character in\n+\t\t\t the original string is not '0'.  */\n+\t\t      || (cpu_type == 0 && val[0] != '0')\n+\t\t      || cpu_type > 2 || cpu_type < 0)\n+\t\t    {\n+\t\t      if (msp430_warn_devices_csv)\n+\t\t\twarning (0, \"invalid %<CPU_TYPE%> value of %qs read \"\n+\t\t\t\t \"from %<devices.csv%> for %qs\", val, mcu_name);\n+\t\t      goto end;\n+\t\t    }\n+\t\t  extracted_mcu_data.revision = cpu_type;\n+\t\t  found_cpu = true;\n+\t\t}\n+\t      else if (curr_col == mpy_type_column)\n+\t\t{\n+\t\t  mpy_type = atoi (val);\n+\t\t  /* Only a single '0', '1', '2', '4' or '8' is accepted.  */\n+\t\t  if (strlen (val) != 1\n+\t\t      || (mpy_type == 0 && val[0] != '0')\n+\t\t      || !(mpy_type == 0\n+\t\t\t   || mpy_type == 1\n+\t\t\t   || mpy_type == 2\n+\t\t\t   || mpy_type == 4\n+\t\t\t   || mpy_type == 8))\n+\t\t    {\n+\t\t      if (msp430_warn_devices_csv)\n+\t\t\twarning (0, \"invalid %<MPY_TYPE%> value of %qs read \"\n+\t\t\t\t \"from %<devices.csv%> for %qs\", val, mcu_name);\n+\t\t      goto end;\n+\t\t    }\n+\t\t  extracted_mcu_data.hwmpy = mpy_type;\n+\t\t  found_mpy = true;\n+\t\t}\n+\t      if (found_cpu && found_mpy)\n+\t\t{\n+\t\t  extracted_mcu_data.name = mcu_name;\n+\t\t  found_mcu = true;\n+\t\t  goto end;\n+\t\t}\n+\t      val = strtok (NULL, \",\");\n+\t    }\n+\t  if (msp430_warn_devices_csv && (cpu_type == -1 || mpy_type == -1))\n+\t    warning (0, \"unknown error reading %s from \"\n+\t\t     \"%<devices.csv%>\",\n+\t\t     (cpu_type != -1 ? \"%<MPY_TYPE%>\"\n+\t\t      : (mpy_type != -1 ? \"%<CPU_TYPE%>\"\n+\t\t\t : \"%<CPU_TYPE%> and %<MPY_TYPE%>\")));\n+\t  goto end;\n+\t}\n+    }\n+end:\n+  fclose (devices_file);\n+  if (!found_mcu)\n+    return 1;\n+  return 0;\n+}\n+\n+/* Wrapper for the parse_devices_csv_1 work function.\n+   A return code of 0 indicates that the MCU data has been successfully\n+   extracted into extracted_mcu_data.\n+   A return code of 1 indicates that the specified MCU wasn't found in\n+   devices.csv.\n+   A return code of 2 indicates that devices.csv wasn't found at all.  */\n+static int\n+parse_devices_csv (const char * mcu_name)\n+{\n+  /* First check if the path to devices.csv was set by -mdevices-csv-loc.  */\n+  if (msp430_devices_csv_loc != NULL)\n+    return parse_devices_csv_1 (msp430_devices_csv_loc, mcu_name);\n+  /* Otherwise check if the path to devices.csv was found another way.  */\n+  else if (derived_devices_csv_loc != NULL)\n+    return parse_devices_csv_1 (derived_devices_csv_loc, mcu_name);\n+  /* devices.csv was not found.  */\n+  return 2;\n+}\n+\n /* Main entry point to load the MCU data for the given -mmcu into\n-   extracted_mcu_data.  hard_msp430_mcu_data (initialized at the bottom of this\n+   extracted_mcu_data.\n+   First, the \"devices.csv\" MCU data file is searched for, if it is found, and\n+   the MCU has a record in it, then that data is used.\n+   Otherwise, hard_msp430_mcu_data (initialized at the bottom of this\n    file) is searched for the MCU name.\n    This function only needs to be executed once, but it can be first called\n    from a number of different locations.  */\n void\n msp430_extract_mcu_data (const char * mcu_name)\n {\n   static int executed = 0;\n+  int devices_csv_not_found = 0;\n   int i;\n   if (mcu_name == NULL || executed == 1)\n     return;\n   executed = 1;\n+  /* If parse_devices_csv returns non-zero we need to use the\n+     hard-coded data.  */\n+  switch (parse_devices_csv (mcu_name))\n+    {\n+    case 0:\n+      return;\n+    case 1:\n+      /* MCU not found in devices.csv.  Warn later if it's not in the\n+\t hard-coded data either.  */\n+      break;\n+    case 2:\n+      devices_csv_not_found = 1;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   /* FIXME: This array is alpha sorted - we could use a binary search.  */\n   for (i = ARRAY_SIZE (hard_msp430_mcu_data); i--;)\n     if (strcasecmp (mcu_name, hard_msp430_mcu_data[i].name) == 0)\n@@ -82,6 +345,17 @@ msp430_extract_mcu_data (const char * mcu_name)\n \t\t       hard_msp430_mcu_data[i].revision);\n \t}\n     }\n+  else if (msp430_warn_devices_csv && devices_csv_not_found)\n+    warning (0, \"could not locate MCU data file %<devices.csv%>\");\n+  else if (msp430_warn_mcu && extracted_mcu_data.name == NULL)\n+    {\n+      /* FIXME: We should warn here that the MCU name is unrecognized, but\n+\t msp430_option_override will warn about an unrecognized MCU as well.\n+\t The benefit of warning here is that this is code common to both the\n+\t driver and compiler proper, so a warning will be emitted when\n+\t assembling/linking via the driver, whilst msp430_option_override will\n+\t only be called when preprocessing or compiling.  */\n+    }\n }\n \n /* The data in this structure has been extracted from version 1.194 of the"}, {"sha": "f23a460251ffc3d2713256bebb465eb27414a22a", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -75,14 +75,22 @@ extern bool msp430x;\n     \"%e-mcode-region requires the large memory model (-mlarge)}}\"\t\\\n   \" %{!mlarge:%{mdata-region=*:\"\t\\\n     \"%e-mdata-region requires the large memory model (-mlarge)}}\"\t\\\n+  \" %{mno-warn-devices-csv:%:msp430_set_driver_var(msp430_warn_devices_csv 0)}\"\\\n+  \" %{mdevices-csv-loc=*:%:msp430_set_driver_var(msp430_devices_csv_loc %*)}\"\\\n+  \" %{I*:%:msp430_check_path_for_devices(%{I*:%*})}\"       \\\n+  \" %{L*:%:msp430_check_path_for_devices(%{L*:%*})}\"       \\\n   \" %{!mcpu=*:%{mmcu=*:%:msp430_select_cpu(%{mmcu=*:%*})}}\"\n \n extern const char * msp430_select_hwmult_lib (int, const char **);\n extern const char * msp430_select_cpu (int, const char **);\n+extern const char * msp430_set_driver_var (int, const char **);\n+extern const char * msp430_check_path_for_devices (int, const char **);\n \n # define EXTRA_SPEC_FUNCTIONS\t\t\t\t\\\n   { \"msp430_hwmult_lib\", msp430_select_hwmult_lib },\t\\\n-  { \"msp430_select_cpu\", msp430_select_cpu },\n+  { \"msp430_select_cpu\", msp430_select_cpu },\t\t\\\n+  { \"msp430_set_driver_var\", msp430_set_driver_var },\t\t\\\n+  { \"msp430_check_path_for_devices\", msp430_check_path_for_devices },\n \n /* Specify the libraries to include on the linker command line.\n "}, {"sha": "cbbe0faa6a2d61879f100fb6fe656d844a62e4d2", "filename": "gcc/config/msp430/msp430.opt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -14,6 +14,10 @@ mwarn-mcu\n Target Report Var(msp430_warn_mcu) Init(1)\n Warn if an MCU name is unrecognized or conflicts with other options (default: on).\n \n+mwarn-devices-csv\n+Target Report Var(msp430_warn_devices_csv) Init(1)\n+Warn if devices.csv is not found or there are problem parsing it (default: on).\n+\n mcpu=\n Target Report Joined RejectNegative Var(target_cpu)\n Specify the ISA to build for: msp430, msp430x, msp430xv2.\n@@ -92,3 +96,8 @@ Passes on a request to the assembler to enable fixes for various silicon errata.\n msilicon-errata-warn=\n Target Joined RejectNegative Report ToLower\n Passes on a request to the assembler to warn about various silicon errata.\n+\n+mdevices-csv-loc=\n+Target Joined Var(msp430_devices_csv_loc) RejectNegative Report\n+The path to devices.csv.  The GCC driver can normally locate devices.csv itself\n+and pass this option to the compiler, so the user shouldn't need to pass this."}, {"sha": "ca111792885fa0ea52ead5d95d54265483163845", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -23044,7 +23044,12 @@ command line.  The script's name is the name of the MCU with\n command line defines the C preprocessor symbol @code{__XXX__} and\n cause the linker to search for a script called @file{xxx.ld}.\n \n-This option is also passed on to the assembler.\n+The ISA and hardware multiply supported for the different MCUs is hard-coded\n+into GCC.  However, an external @samp{devices.csv} file can be used to\n+extend device support beyond those that have been hard-coded.\n+\n+GCC searches for the @samp{devices.csv} file on the paths specified\n+with the @code{-I} and @code{-L} options.\n \n @item -mwarn-mcu\n @itemx -mno-warn-mcu\n@@ -23133,6 +23138,13 @@ the named silicon errata.\n This option passes on a request to the assembler to enable warning\n messages when a silicon errata might need to be applied.\n \n+@item -mwarn-devices-csv\n+@itemx -mno-warn-devices-csv\n+@opindex mwarn-devices-csv\n+@opindex mno-warn-devices-csv\n+Warn if @samp{devices.csv} is not found or there are problem parsing it\n+(default: on).\n+\n @end table\n \n @node NDS32 Options"}, {"sha": "29746939dc642538133a5e3e0fba3043a06d425e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -1,3 +1,41 @@\n+2019-08-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/msp430.exp (msp430_device_permutations_runtest):\n+\tHandle csv-* and bad-devices-* tests.\n+\t* gcc.target/msp430/devices/README: Document how bad-devices-* tests\n+\twork.\n+\t* gcc.target/msp430/devices/bad-devices-1.c: New test.\n+\t* gcc.target/msp430/devices/bad-devices-2.c: Likewise.\n+\t* gcc.target/msp430/devices/bad-devices-3.c: Likewise.\n+\t* gcc.target/msp430/devices/bad-devices-4.c: Likewise.\n+\t* gcc.target/msp430/devices/bad-devices-5.c: Likewise.\n+\t* gcc.target/msp430/devices/bad-devices-6.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-device-order.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_00.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_01.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_02.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_04.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_08.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_10.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_11.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_12.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_14.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_18.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_20.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_21.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_22.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_24.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430_28.c: Likewise.\n+\t* gcc.target/msp430/devices/csv-msp430fr5969.c: Likewise.\n+\t* gcc.target/msp430/devices/hard-foo.c: Likewise.\n+\t* gcc.target/msp430/devices/bad-devices-1.csv: New test support file.\n+\t* gcc.target/msp430/devices/bad-devices-2.csv: Likewise.\n+\t* gcc.target/msp430/devices/bad-devices-3.csv: Likewise.\n+\t* gcc.target/msp430/devices/bad-devices-4.csv: Likewise.\n+\t* gcc.target/msp430/devices/bad-devices-5.csv: Likewise.\n+\t* gcc.target/msp430/devices/bad-devices-6.csv: Likewise.\n+\t* gcc.target/msp430/devices/devices.csv: Likewise.\n+\n 2019-08-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.target/msp430/msp430.exp"}, {"sha": "9134b4c43205fa3366ecc1d130d69aacbbf9f816", "filename": "gcc/testsuite/gcc.target/msp430/devices/README", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2FREADME?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -10,3 +10,8 @@ The criteria for this torture style of testing is:\n \n Some of the options used to run the tests will produce warnings/errors for the\n mcus, so ensure the test has dg-warning and dg-error directives as appropriate.\n+\n+The \"bad-device-*.c\" tests expect a corresponding \"bad-devices-*.csv\", which\n+msp430.exp will pass as the argument to -mdevices-csv-loc=.  These tests are for\n+checking the warnings in msp430-devices.c about a corrupted devices.csv work as\n+expected."}, {"sha": "29ef85968d53745c0b428d185bf796b1359a1685", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-1.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_00 -mno-warn-mcu\" } */\n+/* { dg-warning \"'CPU_TYPE' column heading is missing from 'devices.csv'\" \"\" { target *-*-* } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "282fa7bb292c66ea2a2e2842a3b1fd970db3c4d2", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-1.csv", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-1.csv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-1.csv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-1.csv?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,3 @@\n+# Test warning for missing CPU_TYPE heading\n+# Device Name,FOO,MPY_TYPE\n+msp430_00,0,0"}, {"sha": "32e5cebd46e2cde50d791969703ae557f1276d83", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-2.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_00 -mno-warn-mcu\" } */\n+/* { dg-warning \"'MPY_TYPE' column heading is missing from 'devices.csv'\" \"\" { target *-*-* } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "3bead68a85e78667b73d27e521b8e194a4285a56", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-2.csv", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-2.csv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-2.csv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-2.csv?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,3 @@\n+# Test warning for missing MPY_TYPE heading\n+# Device Name,CPU_TYPE,FOO\n+msp430_00,0,0"}, {"sha": "c982c4a7de5935962e1e5a5f2cd8fdba00e51a1a", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-3.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_00 -mno-warn-mcu\" } */\n+/* { dg-warning \"'CPU_TYPE' and 'MPY_TYPE' column headings are missing from 'devices.csv'\" \"\" { target *-*-* } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "63b203005bd9285521848f25b60acde59e68adee", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-3.csv", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-3.csv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-3.csv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-3.csv?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,3 @@\n+# Test warning for missing CPU_TYPE and MPY_TYPE headings\n+# Device Name,FOO,BAR\n+msp430_00,0,0"}, {"sha": "89ebe61d179e13d37417d64beef4bcef264d64c8", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-4.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_00 -mno-warn-mcu\" } */\n+/* { dg-warning \"format of column headings in 'devices.csv' is incorrect\" \"\" { target *-*-* } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "4f25f93f2882e591a2688fe60892432d90a7b647", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-4.csv", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-4.csv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-4.csv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-4.csv?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,3 @@\n+# Test incorrectly formatted column headings\n+# DeviceName,CPU_TYPE,MPY_TYPE\n+msp430_00,0,0"}, {"sha": "e33bac06b425f3f9d4e60b34a1dc7750dff7562d", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-5.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-5.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_00 -mno-warn-mcu\" } */\n+/* { dg-warning \"invalid 'CPU_TYPE' value of '5' read from 'devices.csv' for 'msp430_00'\" \"\" { target *-*-* } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "32b70413a220bf8857af924d88f98b2325d7ac42", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-5.csv", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-5.csv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-5.csv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-5.csv?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,3 @@\n+# Test bad CPU_TYPE value\n+# Device Name,CPU_TYPE,MPY_TYPE\n+msp430_00,5,0"}, {"sha": "9dd9ed9e156c2ae7a5aa22c194507234b21440f6", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-6.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-6.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_00 -mno-warn-mcu\" } */\n+/* { dg-warning \"invalid 'MPY_TYPE' value of '3' read from 'devices.csv' for 'msp430_00'\" \"\" { target *-*-* } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "0ec7152c4750e256d8a98733e6457fcf9e37e86a", "filename": "gcc/testsuite/gcc.target/msp430/devices/bad-devices-6.csv", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-6.csv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-6.csv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fbad-devices-6.csv?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,3 @@\n+# Test bad MPY_TYPE value\n+# Device Name,CPU_TYPE,MPY_TYPE\n+msp430_00,0,3"}, {"sha": "172880321de1a4ec079434c3ae7b509f7997a785", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-device-order.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-device-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-device-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-device-order.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"MCU supports 430 ISA only\" { *-*-* } { \"-mlarge\" \"-mcpu=msp430x*\" } { \"\" } } */\n+/* { dg-additional-options \"-mmcu=msp430f012 -mcpu=msp430 -mhwmult=16bit\" } */\n+\n+/* Test that MCU names in devices.csv are only chosen if the full device name\n+   is matched exactly.\n+   msp430f0123 (with 430X ISA and f5series hwmult) appears before msp430f012 in\n+   devices.csv, but should not be matched.\n+   Errors and warnings will be emitted if msp430f0123 is wrongly matched.  */\n+\n+#include \"../devices-main.c\""}, {"sha": "8d56873140e6ebfd75160175509edce535a1b3ac", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_00.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_00.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_00.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_00.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_00\" } */\n+/* { dg-warning \"does not have hardware multiply\" \"\" { target msp430_hwmul_not_none } 0 } */\n+/* { dg-warning \"supports 430 ISA but\" \"\" { target msp430_430x_selected } 0 } */\n+/* { dg-error \"'-mlarge' requires a 430X-compatible '-mmcu='\" \"\" { target msp430_mlarge_selected } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "154511b6fea871ed8b0beddf1164d4c73621c165", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_01.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_01.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_01\" } */\n+/* { dg-warning \"supports 16-bit hardware multiply\" \"\" { target msp430_hwmul_not_16bit } 0 } */\n+/* { dg-warning \"supports 430 ISA but\" \"\" { target msp430_430x_selected } 0 } */\n+/* { dg-error \"'-mlarge' requires a 430X-compatible '-mmcu='\" \"\" { target msp430_mlarge_selected } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "4c72163890344911522b4fb300894ddb06005760", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_02.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_02.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_02\" } */\n+/* { dg-warning \"supports 16-bit hardware multiply\" \"\" { target msp430_hwmul_not_16bit } 0 } */\n+/* { dg-warning \"supports 430 ISA but\" \"\" { target msp430_430x_selected } 0 } */\n+/* { dg-error \"'-mlarge' requires a 430X-compatible '-mmcu='\" \"\" { target msp430_mlarge_selected } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "c8ed711eb1d318c26cb7d26cd0c107e52ff06e56", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_04.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_04.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_04.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_04.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_04\" } */\n+/* { dg-warning \"supports 32-bit hardware multiply\" \"\" { target msp430_hwmul_not_32bit } 0 } */\n+/* { dg-warning \"supports 430 ISA but\" \"\" { target msp430_430x_selected } 0 } */\n+/* { dg-error \"'-mlarge' requires a 430X-compatible '-mmcu='\" \"\" { target msp430_mlarge_selected } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "0214e636644965ca01024ef125efcd86ba1ef494", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_08.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_08.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_08.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_08.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_08\" } */\n+/* { dg-warning \"supports 32-bit .5xx. hardware multiply\" \"\" { target msp430_hwmul_not_f5 } 0 } */\n+/* { dg-warning \"supports 430 ISA but\" \"\" { target msp430_430x_selected } 0 } */\n+/* { dg-error \"'-mlarge' requires a 430X-compatible '-mmcu='\" \"\" { target msp430_mlarge_selected } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "86f89ed51cfe15d39034e2cff0b3c6b09b25123a", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_10.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_10.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_10\" } */\n+/* { dg-warning \"does not have hardware multiply\" \"\" { target msp430_hwmul_not_none } 0 } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "2923238e6b8007841fc78e0ec83499a33b483f9b", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_11.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_11.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_11\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports 16-bit hardware multiply\" \"\" { target msp430_hwmul_not_16bit } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "ed59ac890c152030e1cf167474f3f5c79e21b8ef", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_12.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_12.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_12\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports 16-bit hardware multiply\" \"\" { target msp430_hwmul_not_16bit } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "fb038a0d30fdc8dc3ccc93208836905751b70678", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_14.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_14.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_14\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports 32-bit hardware multiply\" \"\" { target msp430_hwmul_not_32bit } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "133f984d031773b74aa735f8a477dda6428a8037", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_18.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_18.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_18\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports 32-bit .5xx. hardware multiply\" \"\" { target msp430_hwmul_not_f5 } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "c7c94252b00d157a7180d51930b725da0710c5c3", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_20.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_20.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_20\" } */\n+/* { dg-warning \"does not have hardware multiply\" \"\" { target msp430_hwmul_not_none } 0 } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "8794f891db74abb5f5ad9244fa27101c945e54df", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_21.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_21.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_21\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports 16-bit hardware multiply\" \"\" { target msp430_hwmul_not_16bit } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "47d90f4f73097f1541b4142093b6610194a7e703", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_22.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_22.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_22\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports 16-bit hardware multiply\" \"\" { target msp430_hwmul_not_16bit } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "0a616307e86249fc61471032c0cde0a6e495cae9", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_24.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_24.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_24\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports 32-bit hardware multiply\" \"\" { target msp430_hwmul_not_32bit } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "1243f7527e396009b234d8bfb14317ad41cb8133", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430_28.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430_28.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430_28\" } */\n+/* { dg-warning \"supports 430X ISA but '-mcpu' option is set to 430\" \"\" { target msp430_430_selected } 0 } */\n+/* { dg-warning \"supports 32-bit .5xx. hardware multiply\" \"\" { target msp430_hwmul_not_f5 } 0 } */\n+\n+#include \"../devices-main.c\""}, {"sha": "636460756ad602fdacadcef7e89c73e18176a433", "filename": "gcc/testsuite/gcc.target/msp430/devices/csv-msp430fr5969.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430fr5969.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430fr5969.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fcsv-msp430fr5969.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mmcu=msp430fr5969\" } */\n+/* MSP430FR5969 has msp430x ISA and f5series hwmult in the hard-coded data,\n+   check that the different values for this device in devices.csv override it.\n+   */\n+/* { dg-warning \"does not have hardware multiply\" \"\" { target msp430_hwmul_not_none } 0 } */\n+/* { dg-warning \"supports 430 ISA but\" \"\" { target msp430_430x_selected } 0 } */\n+/* { dg-error \"'-mlarge' requires a 430X-compatible '-mmcu='\" \"\" { target msp430_mlarge_selected } 0 } */\n+\n+\n+#include \"../devices-main.c\""}, {"sha": "7a13ed9dac4997be560b47a9816e8e99fee9d781", "filename": "gcc/testsuite/gcc.target/msp430/devices/devices.csv", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fdevices.csv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fdevices.csv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fdevices.csv?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -0,0 +1,22 @@\n+# Text before \"#Device Name\" is ignored.\n+# We add arbitrary/empty fields in some records after the MPY_TYPE column to get\n+# more varied testing.\n+# Device Name,CPU_TYPE,MPY_TYPE\n+msp430_00,0,0\n+msp430_01,0,1,\n+msp430_02,0,2,1\n+msp430_04,0,4\n+msp430_08,0,8,\n+msp430_10,1,0,0,\n+msp430_11,1,1\n+msp430_12,1,2\n+msp430_14,1,4,,\n+msp430_18,1,8\n+msp430_20,2,0\n+msp430_21,2,1,4,\n+msp430_22,2,2\n+msp430_24,2,4\n+msp430_28,2,8,100,\n+msp430fr5969,0,0\n+msp430f0123,2,8\n+msp430f012,0,1"}, {"sha": "e13acb52c50c46c77542699265e97e8d3b913c69", "filename": "gcc/testsuite/gcc.target/msp430/devices/hard-foo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fhard-foo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fhard-foo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdevices%2Fhard-foo.c?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mmcu=msp430foo\" } */\n+/* { dg-warning \"could not locate MCU data file 'devices.csv'\" \"\" { target *-*-* } 0 } */\n /* { dg-warning \"Unrecognized MCU name 'msp430foo'.*\\n.*Use the\" \"\" { target *-*-* } 0 } */\n \n #include \"../devices-main.c\""}, {"sha": "b97f4dcdc166c9f4c5c15bea7ef0768f2579e1c8", "filename": "gcc/testsuite/gcc.target/msp430/msp430.exp", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmsp430.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c949950c8941e945b08e82181b52a208fa3af4/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmsp430.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmsp430.exp?ref=d5c949950c8941e945b08e82181b52a208fa3af4", "patch": "@@ -94,7 +94,21 @@ proc msp430_device_permutations_runtest { tests } {\n \t    continue\n \t}\n \tforeach { mcu_flags } [msp430_get_opts $test_file] {\n-\t    dg-runtest $test_file \"$mcu_flags\" \"$MSP430_DEFAULT_CFLAGS\"\n+\t    if { [string match \"csv-*\" [file tail $test_file]] } {\n+\t\t# Specify the path to devices.csv for devices/csv-* tests with -I.\n+\t\t# Note that the csv-* tests do not have dg-options directives,\n+\t\t# they only have dg-additional-options to pass -mmcu.  This is\n+\t\t# so we can set the path to devices.csv as a \"default\" flag\n+\t\t# with -I, and the path won't show up in the test results\n+\t\t# summary.  If there were dg-options directives, then these\n+\t\t# default flags passed as the 3rd argument to dg-runtest would\n+\t\t# not be used.\n+\t\tdg-runtest $test_file \"$mcu_flags\" \"-I[file dirname $test_file] $MSP430_DEFAULT_CFLAGS\"\n+\t    } elseif { [string match \"bad-devices*\" [file tail $test_file]] } {\n+\t\tdg-runtest $test_file \"$mcu_flags\" \"-mdevices-csv-loc=[file dirname $test_file]/[file tail $test_file]sv $MSP430_DEFAULT_CFLAGS\"\n+\t    } else {\n+\t\tdg-runtest $test_file \"$mcu_flags\" \"$MSP430_DEFAULT_CFLAGS\"\n+\t    }\n \t}\n     }\n }"}]}