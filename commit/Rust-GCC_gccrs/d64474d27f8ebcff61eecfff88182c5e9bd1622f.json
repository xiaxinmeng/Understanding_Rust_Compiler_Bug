{"sha": "d64474d27f8ebcff61eecfff88182c5e9bd1622f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY0NDc0ZDI3ZjhlYmNmZjYxZWVjZmZmODgxODJjNWU5YmQxNjIyZg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-13T13:17:55Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-13T13:17:55Z"}, "message": "re PR target/53513 ([SH] Add support for fpchg insn and improve fenv support)\n\ngcc/testsuite/\n\tPR target/53513\n\t* gcc.target/sh/attr-isr-nosave_low_regs.c: Fix matching of expected\n\tregister push/pop sequences.\n\t* gcc.target/sh/attr-isr.c: Likewise.\n\t* gcc.target/sh/attr-isr-trapa.c: Likewise.\n\t* gcc.target/sh/pragma-isr-nosave_low_regs.c: Likewise.\n\t* gcc.target/sh/pragma-isr-trapa.c: Likewise.\n\t* gcc.target/sh/pragma-isr-trapa2.c: Likewise.\n\nFrom-SVN: r218707", "tree": {"sha": "74531f1815fd12b40404ab9d0e61d29de9d5ca6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74531f1815fd12b40404ab9d0e61d29de9d5ca6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d64474d27f8ebcff61eecfff88182c5e9bd1622f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64474d27f8ebcff61eecfff88182c5e9bd1622f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d64474d27f8ebcff61eecfff88182c5e9bd1622f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64474d27f8ebcff61eecfff88182c5e9bd1622f/comments", "author": null, "committer": null, "parents": [{"sha": "42948a4343bf432678577a719456d5cbdd4dc099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42948a4343bf432678577a719456d5cbdd4dc099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42948a4343bf432678577a719456d5cbdd4dc099"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "a4e64b086ae2877e74b5813552ef1292f90d2c18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d64474d27f8ebcff61eecfff88182c5e9bd1622f", "patch": "@@ -1,3 +1,14 @@\n+2014-12-13  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53513\n+\t* gcc.target/sh/attr-isr-nosave_low_regs.c: Fix matching of expected\n+\tregister push/pop sequences.\n+\t* gcc.target/sh/attr-isr.c: Likewise.\n+\t* gcc.target/sh/attr-isr-trapa.c: Likewise.\n+\t* gcc.target/sh/pragma-isr-nosave_low_regs.c: Likewise.\n+\t* gcc.target/sh/pragma-isr-trapa.c: Likewise.\n+\t* gcc.target/sh/pragma-isr-trapa2.c: Likewise.\n+\n 2014-12-13  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* gcc.target/sh/sp-switch.c: Match zero or more underscores in"}, {"sha": "f1ad4cdad12d66896740640357ca11e8fc74be2b", "filename": "gcc/testsuite/gcc.target/sh/attr-isr-nosave_low_regs.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-nosave_low_regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-nosave_low_regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-nosave_low_regs.c?ref=d64474d27f8ebcff61eecfff88182c5e9bd1622f", "patch": "@@ -1,15 +1,14 @@\n /* A call will clobber all call-saved registers.\n    If #pragma nosave_low_regs is specified, do not save/restore r0..r7.\n    (On SH3* and SH4* r0..r7 are banked)\n-   One of these registers will also do fine to hold the function address.\n-   Call-saved registers r8..r13 also don't need to be restored.  */\n+   Call-saved registers r8..r13 also don't need to be restored.\n+   To test that we look for register push insns such as 'mov.l r0,@-r15'.  */\n /* { dg-do compile { target { { \"sh*-*-*\" } && nonpic } } }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1*\" \"-m2*\" \"-m5*\" } { \"\" } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler-times \"rte\" 1 } }  */\n-/* { dg-final { scan-assembler-not \"\\[^f\\]r\\[0-9\\]\\[ \\t\\]*,\" } }  */\n-/* { dg-final { scan-assembler-not \"\\[^f\\]r\\[89\\]\" } }  */\n-/* { dg-final { scan-assembler-not \"\\[^f\\]r1\\[,0-3\\]\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr\\[0-9\\],@-r15\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr1\\[0-4\\],@-r15\" } }  */\n /* { dg-final { scan-assembler-times \"macl\" 2 } }  */\n \n extern void bar (void);"}, {"sha": "3f850ac4686db7558774842f8bdce7a589df0490", "filename": "gcc/testsuite/gcc.target/sh/attr-isr-trapa.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-trapa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-trapa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-trapa.c?ref=d64474d27f8ebcff61eecfff88182c5e9bd1622f", "patch": "@@ -3,10 +3,8 @@\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler-times \"rte\" 1 } }  */\n-/* { dg-final { scan-assembler-not \"r\\[0-7\\]\\[ \\t,\\]\\[^\\n\\]*r15\" } }  */\n-/* { dg-final { scan-assembler-not \"@r15\\[^\\n\\]*r\\[0-7\\]\\n\" } }  */\n-/* { dg-final { scan-assembler-not \"r\\[8-9\\]\" } }  */\n-/* { dg-final { scan-assembler-not \"r1\\[,0-3\\]\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr\\[0-9\\],@-r15\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr1\\[0-4\\],@-r15\" } }  */\n /* { dg-final { scan-assembler-not \"macl\" } }  */\n \n extern void foo (void);"}, {"sha": "8e24aa2555d31dc611a03d64a5dd2974bfd68851", "filename": "gcc/testsuite/gcc.target/sh/attr-isr.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr.c?ref=d64474d27f8ebcff61eecfff88182c5e9bd1622f", "patch": "@@ -1,20 +1,18 @@\n+/* The call will clobber r0..r7, which will need not be saved/restored, but\n+   not the call-saved registers r8..r14.  Check this by counting the register\n+   push insns.  */\n /* { dg-do compile { target { { { sh-*-* sh[1234ble]*-*-* } && { ! sh2a*-*-* } } && nonpic } } } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m2a*\" } { \"\" } } */\n /* { dg-options \"-O\" } */\n+/* { dg-final { scan-assembler-times \"rte\" 1} } */\n+/* { dg-final { scan-assembler-times \"mov.l\\tr\\[0-7\\],@-r15\" 8 } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr\\[89\\],@-r15\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr1\\[0-4\\],@-r15\" } }  */\n+\n extern void foo ();\n \n void\n (__attribute ((interrupt_handler)) isr)()\n {\n   foo ();\n }\n-\n-/* { dg-final { scan-assembler-times \"rte\" 1} } */\n-/* The call will clobber r0..r7, which will need not be saved/restored.\n-   One of these registers will do fine to hold the function address,\n-   hence the all-saved registers r8..r13 don't need to be restored.  */\n-/* { dg-final { scan-assembler-times \"r15\\[+\\],\\[ \\t\\]*r\\[0-9\\]\\[ \\t\\]*\\n\" 8 } } */\n-/* { dg-final { scan-assembler-times \"\\[^f\\]r\\[0-9\\]\\[ \\t\\]*,\" 8 } } */\n-/* { dg-final { scan-assembler-not \"\\[^f\\]r1\\[0-3\\]\" } } */\n-/* { dg-final { scan-assembler-times \"macl\" 2} } */\n-/* { dg-final { scan-assembler-not \"rte.*\\n.*r15\\[+\\],r\\[0-7\\]\\n\" } } */"}, {"sha": "fffc4257b7edbb1d154f1dbe5f8cb9327b1af263", "filename": "gcc/testsuite/gcc.target/sh/pragma-isr-nosave_low_regs.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-nosave_low_regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-nosave_low_regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-nosave_low_regs.c?ref=d64474d27f8ebcff61eecfff88182c5e9bd1622f", "patch": "@@ -1,15 +1,14 @@\n /* A call will clobber all call-saved registers.\n    If #pragma nosave_low_regs is specified, do not save/restore r0..r7.\n    (On SH3* and SH4* r0..r7 are banked)\n-   One of these registers will also do fine to hold the function address.\n-   Call-saved registers r8..r13 also don't need to be restored.  */\n+   Call-saved registers r8..r14 also don't need to be restored.\n+   To test that we look for register push insns such as 'mov.l r0,@-r15'.  */\n /* { dg-do compile { target { { \"sh*-*-*\" } && nonpic } } }  */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1*\" \"-m2*\" \"-m5*\" } { \"\" } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler-times \"rte\" 1 } }  */\n-/* { dg-final { scan-assembler-not \"\\[^f\\]r\\[0-9\\]\\[ \\t\\]*,\" } }  */\n-/* { dg-final { scan-assembler-not \"\\[^f\\]r\\[89\\]\" } }  */\n-/* { dg-final { scan-assembler-not \"\\[^f\\]r1\\[,0-3\\]\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr\\[0-9\\],@-r15\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr1\\[0-4\\],@-r15\" } }  */\n /* { dg-final { scan-assembler-times \"macl\" 2 } }  */\n \n extern void foo (void);"}, {"sha": "b70be6e4adbd5647f3af915f6b5953d7b4c29ae1", "filename": "gcc/testsuite/gcc.target/sh/pragma-isr-trapa.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trapa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trapa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trapa.c?ref=d64474d27f8ebcff61eecfff88182c5e9bd1622f", "patch": "@@ -3,10 +3,8 @@\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler-times \"rte\" 1 } }  */\n-/* { dg-final { scan-assembler-not \"r\\[0-7\\]\\[ \\t,\\]\\[^\\n\\]*r15\" } }  */\n-/* { dg-final { scan-assembler-not \"@r15\\[^\\n\\]*r\\[0-7\\]\\n\" } }  */\n-/* { dg-final { scan-assembler-not \"r\\[8-9\\]\" } }  */\n-/* { dg-final { scan-assembler-not \"r1\\[,0-3\\]\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr\\[0-9\\],@-r15\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr1\\[0-4\\],@-r15\" } }  */\n /* { dg-final { scan-assembler-not \"macl\" } }  */\n \n extern void foo (void);"}, {"sha": "e2e69993fae3328496d51e6e4161cec15a5fad9c", "filename": "gcc/testsuite/gcc.target/sh/pragma-isr-trapa2.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trapa2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64474d27f8ebcff61eecfff88182c5e9bd1622f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trapa2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trapa2.c?ref=d64474d27f8ebcff61eecfff88182c5e9bd1622f", "patch": "@@ -6,13 +6,12 @@\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler-times \"rte\" 1 } }  */\n-/* { dg-final { scan-assembler-times \"r\\[0-7\\]\\n\" 3 } }  */\n-/* { dg-final { scan-assembler-not \"r\\[8-9\\]\" } }  */\n-/* { dg-final { scan-assembler-not \"r1\\[,0-3\\]\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr\\[0-9\\],@-r15\" } }  */\n+/* { dg-final { scan-assembler-not \"mov.l\\tr1\\[0-4\\],@-r15\" } }  */\n /* { dg-final { scan-assembler-not \"macl\" } }  */\n \n /* Expect that fpscr needs to be saved, loaded and restored.  */\n-/* { dg-final { scan-assembler-times \"\\[^_\\]fpscr\" 3 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^_\\]fpscr\" 4 } }  */\n \n extern void foo (void);\n "}]}