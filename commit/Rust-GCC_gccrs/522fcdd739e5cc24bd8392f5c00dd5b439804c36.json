{"sha": "522fcdd739e5cc24bd8392f5c00dd5b439804c36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyZmNkZDczOWU1Y2MyNGJkODM5MmY1YzAwZGQ1YjQzOTgwNGMzNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-03-06T13:58:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-06T13:58:01Z"}, "message": "re PR tree-optimization/79824 (Failure to peel for gaps leads to read beyond mapped memory)\n\n2017-03-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79824\n\t* tree-vect-stmts.c (get_group_load_store_type): Fix alignment\n\tcheck disabling peeling for gaps.\n\n\t* gcc.dg/vect/pr79824-1.c: New testcase.\n\t* gcc.dg/vect/pr79824-2.c: Likewise.\n\nFrom-SVN: r245922", "tree": {"sha": "45d204024fc3cb6ab2165a7431d5a081d8b7aa2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d204024fc3cb6ab2165a7431d5a081d8b7aa2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/522fcdd739e5cc24bd8392f5c00dd5b439804c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522fcdd739e5cc24bd8392f5c00dd5b439804c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522fcdd739e5cc24bd8392f5c00dd5b439804c36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522fcdd739e5cc24bd8392f5c00dd5b439804c36/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5464963112924aa64a0e82cd856275e2faa66436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5464963112924aa64a0e82cd856275e2faa66436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5464963112924aa64a0e82cd856275e2faa66436"}], "stats": {"total": 116, "additions": 113, "deletions": 3}, "files": [{"sha": "7c732a1dc77236c88074746de07153b4a994ad06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=522fcdd739e5cc24bd8392f5c00dd5b439804c36", "patch": "@@ -1,3 +1,9 @@\n+2017-03-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79824\n+\t* tree-vect-stmts.c (get_group_load_store_type): Fix alignment\n+\tcheck disabling peeling for gaps.\n+\n 2017-03-06  Toma Tabacu  <toma.tabacu@imgtec.com>\n \n \t* doc/sourcebuild.texi (Effective-Target Keywords, Environment"}, {"sha": "51432932bfedb50c65c3bca82fa5020c363ad3de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=522fcdd739e5cc24bd8392f5c00dd5b439804c36", "patch": "@@ -1,3 +1,9 @@\n+2017-03-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79824\n+\t* gcc.dg/vect/pr79824-1.c: New testcase.\n+\t* gcc.dg/vect/pr79824-2.c: Likewise.\n+\n 2017-03-06  Toma Tabacu  <toma.tabacu@imgtec.com>\n \n \t* gcc.dg/lto/pr60449_0.c: Add dg-require-effective-target for"}, {"sha": "e6b887b9d31df8dca94352c3a8e417d01029069a", "filename": "gcc/testsuite/gcc.dg/vect/pr79824-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr79824-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr79824-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr79824-1.c?ref=522fcdd739e5cc24bd8392f5c00dd5b439804c36", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-require-effective-target mmap } */\n+\n+#include <sys/mman.h>\n+#include <stdio.h>\n+#include \"tree-vect.h\"\n+\n+#define COUNT 320\n+#define MMAP_SIZE 0x10000\n+#define ADDRESS 0x1122000000\n+#define TYPE double\n+\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+\n+void __attribute__((noinline))\n+foo (TYPE *__restrict a, TYPE *__restrict b)\n+{\n+  int n;\n+\n+  b = __builtin_assume_aligned (b, sizeof (TYPE) * 2);\n+  a = __builtin_assume_aligned (a, sizeof (TYPE) * 2);\n+  for (n = 0; n < COUNT; n++)\n+    a[n] = b[n * 4];\n+}\n+\n+int\n+main (void)\n+{\n+  void *x;\n+  size_t b_offset;\n+\n+  check_vect ();\n+\n+  x = mmap ((void *) ADDRESS, MMAP_SIZE, PROT_READ | PROT_WRITE,\n+\t    MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  if (x == MAP_FAILED)\n+    {\n+      perror (\"mmap\");\n+      return 1;\n+    }\n+\n+  b_offset = MMAP_SIZE - (4 * COUNT - 2) * sizeof (TYPE);\n+  foo ((TYPE *) x, (TYPE *) ((char *) x + b_offset));\n+  return 0;\n+}"}, {"sha": "629b97e21b123041e9bbdaa3d0f1eb08c1e0d9d8", "filename": "gcc/testsuite/gcc.dg/vect/pr79824-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr79824-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr79824-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr79824-2.c?ref=522fcdd739e5cc24bd8392f5c00dd5b439804c36", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-require-effective-target mmap } */\n+\n+#include <sys/mman.h>\n+#include <stdio.h>\n+#include \"tree-vect.h\"\n+\n+#define COUNT 320\n+#define MMAP_SIZE 0x10000\n+#define ADDRESS 0x1122000000\n+#define TYPE double\n+\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+\n+void __attribute__((noinline))\n+foo (TYPE *__restrict a, TYPE *__restrict b)\n+{\n+  int n;\n+\n+  b = __builtin_assume_aligned (b, sizeof (TYPE) * 2);\n+  a = __builtin_assume_aligned (a, sizeof (TYPE) * 2);\n+  for (n = 0; n < COUNT; n++)\n+    {\n+      a[n] = b[n * 4] + b[n * 4 + 1];\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  void *x;\n+  size_t b_offset;\n+\n+  check_vect ();\n+\n+  x = mmap ((void *) ADDRESS, MMAP_SIZE, PROT_READ | PROT_WRITE,\n+\t    MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  if (x == MAP_FAILED)\n+    {\n+      perror (\"mmap\");\n+      return 1;\n+    }\n+\n+  b_offset = MMAP_SIZE - (4 * COUNT - 2) * sizeof (TYPE);\n+  foo ((TYPE *) x, (TYPE *) ((char *) x + b_offset));\n+  return 0;\n+}"}, {"sha": "9f28321280af53eb899b8381e48db566159f6fc8", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522fcdd739e5cc24bd8392f5c00dd5b439804c36/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=522fcdd739e5cc24bd8392f5c00dd5b439804c36", "patch": "@@ -1731,7 +1731,7 @@ get_group_load_store_type (gimple *stmt, tree vectype, bool slp,\n   bool single_element_p = (stmt == first_stmt\n \t\t\t   && !GROUP_NEXT_ELEMENT (stmt_info));\n   unsigned HOST_WIDE_INT gap = GROUP_GAP (vinfo_for_stmt (first_stmt));\n-  int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+  unsigned nunits = TYPE_VECTOR_SUBPARTS (vectype);\n \n   /* True if the vectorized statements would access beyond the last\n      statement in the group.  */\n@@ -1794,9 +1794,13 @@ get_group_load_store_type (gimple *stmt, tree vectype, bool slp,\n       /* If there is a gap at the end of the group then these optimizations\n \t would access excess elements in the last iteration.  */\n       bool would_overrun_p = (gap != 0);\n-      /* If the access is aligned an overrun is fine.  */\n+      /* If the access is aligned an overrun is fine, but only if the\n+         overrun is not inside an unused vector (if the gap is as large\n+\t or larger than a vector).  */\n       if (would_overrun_p\n-\t  && aligned_access_p (STMT_VINFO_DATA_REF (stmt_info)))\n+\t  && gap < nunits\n+\t  && aligned_access_p\n+\t\t(STMT_VINFO_DATA_REF (vinfo_for_stmt (first_stmt))))\n \twould_overrun_p = false;\n       if (!STMT_VINFO_STRIDED_P (stmt_info)\n \t  && (can_overrun_p || !would_overrun_p)"}]}