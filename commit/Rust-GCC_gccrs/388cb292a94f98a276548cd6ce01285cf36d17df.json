{"sha": "388cb292a94f98a276548cd6ce01285cf36d17df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg4Y2IyOTJhOTRmOThhMjc2NTQ4Y2Q2Y2UwMTI4NWNmMzZkMTdkZg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-13T06:20:43Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-21T04:48:41Z"}, "message": "Enable bitwise operation for type mask.\n\nEnable operator or/xor/and/andn/not for mask register, kxnor is not\nenabled since there's no corresponding instruction for general\nregisters.\n\ngcc/\n\tPR target/88808\n\t* config/i386/i386.c (ix86_preferred_reload_class): Allow\n\tQImode data go into mask registers.\n\t* config/i386/i386.md: (*movhi_internal): Adjust constraints\n\tfor mask registers.\n\t(*movqi_internal): Ditto.\n\t(*anddi_1): Support mask register operations\n\t(*and<mode>_1): Ditto.\n\t(*andqi_1): Ditto.\n\t(*andn<mode>_1): Ditto.\n\t(*<code><mode>_1): Ditto.\n\t(*<code>qi_1): Ditto.\n\t(*one_cmpl<mode>2_1): Ditto.\n\t(*one_cmplsi2_1_zext): Ditto.\n\t(*one_cmplqi2_1): Ditto.\n\t(define_peephole2): Move constant 0/-1 directly into mask\n\tregisters.\n\t* config/i386/predicates.md (mask_reg_operand): New predicate.\n\t* config/i386/sse.md (define_split): Add post-reload splitters\n\tthat would convert \"generic\" patterns to mask patterns.\n\t(*knotsi_1_zext): New define_insn.\n\ngcc/testsuite/\n\t* gcc.target/i386/bitwise_mask_op-1.c: New test.\n\t* gcc.target/i386/bitwise_mask_op-2.c: New test.\n\t* gcc.target/i386/bitwise_mask_op-3.c: New test.\n\t* gcc.target/i386/avx512bw-pr88465.c: New testcase.\n\t* gcc.target/i386/avx512bw-kunpckwd-1.c: Adjust testcase.\n\t* gcc.target/i386/avx512bw-kunpckwd-3.c: Ditto.\n\t* gcc.target/i386/avx512dq-kmovb-5.c: Ditto.\n\t* gcc.target/i386/avx512f-kmovw-5.c: Ditto.\n\t* gcc.target/i386/pr55342.c: Ditto.", "tree": {"sha": "86f0ece0f54c07db71a0fafb813f8809004fc97f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86f0ece0f54c07db71a0fafb813f8809004fc97f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/388cb292a94f98a276548cd6ce01285cf36d17df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/388cb292a94f98a276548cd6ce01285cf36d17df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/388cb292a94f98a276548cd6ce01285cf36d17df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/388cb292a94f98a276548cd6ce01285cf36d17df/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16516644d8f5c13e666251470d604778d347f796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16516644d8f5c13e666251470d604778d347f796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16516644d8f5c13e666251470d604778d347f796"}], "stats": {"total": 540, "additions": 472, "deletions": 68}, "files": [{"sha": "37e77ea9fddc8baf4c87d8d51cc4c1243b087304", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -18378,13 +18378,15 @@ ix86_preferred_reload_class (rtx x, reg_class_t regclass)\n     return INTEGER_CLASS_P (regclass) ? regclass : NO_REGS;\n \n   /* QImode constants are easy to load, but non-constant QImode data\n-     must go into Q_REGS.  */\n+     must go into Q_REGS or ALL_MASK_REGS.  */\n   if (GET_MODE (x) == QImode && !CONSTANT_P (x))\n     {\n       if (Q_CLASS_P (regclass))\n \treturn regclass;\n       else if (reg_class_subset_p (Q_REGS, regclass))\n \treturn Q_REGS;\n+      else if (MASK_CLASS_P (regclass))\n+\treturn regclass;\n       else\n \treturn NO_REGS;\n     }"}, {"sha": "446793b78db1e19f5f0b0ff2ffa44227431c9811", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 147, "deletions": 62, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -2403,8 +2403,8 @@\n \t   (symbol_ref \"true\")))])\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,k,k ,r,m,k\")\n-\t(match_operand:HI 1 \"general_operand\"      \"r ,rn,rm,rn,r,km,k,k,CBC\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,*k,*k ,*r,*m,*k\")\n+\t(match_operand:HI 1 \"general_operand\"      \"r ,rn,rm,rn,*r,*km,*k,*k,CBC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2491,9 +2491,9 @@\n \n (define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\"\n-\t\t\t\"=Q,R,r,q,q,r,r ,?r,m ,k,k,r,m,k,k,k\")\n+\t\t\t\"=Q,R,r,q,q,r,r ,?r,m ,*k,*k,*r,*m,*k,*k,*k\")\n \t(match_operand:QI 1 \"general_operand\"\n-\t\t\t\"Q ,R,r,n,m,q,rn, m,qn,r,k,k,k,m,C,BC\"))]\n+\t\t\t\"Q ,R,r,n,m,q,rn, m,qn,*r,*k,*k,*k,*m,C,BC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   char buf[128];\n@@ -2624,6 +2624,19 @@\n \t   ]\n \t   (const_string \"QI\")))])\n \n+/* Reload dislikes loading 0/-1 directly into mask registers.\n+   Try to tidy things up here.  */\n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"general_reg_operand\")\n+\t(match_operand:SWI 1 \"immediate_operand\"))\n+   (set (match_operand:SWI 2 \"mask_reg_operand\")\n+\t(match_dup 0))]\n+  \"peep2_reg_dead_p (2, operands[0])\n+   && (const0_operand (operands[1], <MODE>mode)\n+       || (constm1_operand (operands[1], <MODE>mode)\n+\t   && (<MODE_SIZE> > 1 || TARGET_AVX512DQ)))\"\n+  [(set (match_dup 2) (match_dup 1))])\n+\n ;; Stores and loads of ax to arbitrary constant address.\n ;; We fake an second form of instruction to force reload to load address\n ;; into register when rax is not available\n@@ -9044,27 +9057,29 @@\n })\n \n (define_insn \"*anddi_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r,r,k\")\n \t(and:DI\n-\t (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,qm\")\n-\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,m,L\")))\n+\t (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,qm,k\")\n+\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,m,L,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (AND, DImode, operands)\"\n   \"@\n    and{l}\\t{%k2, %k0|%k0, %k2}\n    and{q}\\t{%2, %0|%0, %2}\n    and{q}\\t{%2, %0|%0, %2}\n+   #\n    #\"\n-  [(set_attr \"type\" \"alu,alu,alu,imovx\")\n-   (set_attr \"length_immediate\" \"*,*,*,0\")\n+  [(set_attr \"isa\" \"x64,x64,x64,x64,avx512bw\")\n+   (set_attr \"type\" \"alu,alu,alu,imovx,msklog\")\n+   (set_attr \"length_immediate\" \"*,*,*,0,*\")\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n \t    (and (match_test \"INTVAL (operands[2]) == 0xff\")\n \t\t (match_operand 1 \"ext_QIreg_operand\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"mode\" \"SI,DI,DI,SI\")])\n+   (set_attr \"mode\" \"SI,DI,DI,SI,DI\")])\n \n (define_insn_and_split \"*anddi_1_btr\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n@@ -9130,38 +9145,54 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*and<mode>_1\"\n-  [(set (match_operand:SWI24 0 \"nonimmediate_operand\" \"=rm,r,Ya\")\n-\t(and:SWI24 (match_operand:SWI24 1 \"nonimmediate_operand\" \"%0,0,qm\")\n-\t\t   (match_operand:SWI24 2 \"<general_operand>\" \"r<i>,m,L\")))\n+  [(set (match_operand:SWI24 0 \"nonimmediate_operand\" \"=rm,r,Ya,k\")\n+\t(and:SWI24 (match_operand:SWI24 1 \"nonimmediate_operand\" \"%0,0,qm,k\")\n+\t\t   (match_operand:SWI24 2 \"<general_operand>\" \"r<i>,m,L,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, <MODE>mode, operands)\"\n   \"@\n    and{<imodesuffix>}\\t{%2, %0|%0, %2}\n    and{<imodesuffix>}\\t{%2, %0|%0, %2}\n+   #\n    #\"\n-  [(set_attr \"type\" \"alu,alu,imovx\")\n-   (set_attr \"length_immediate\" \"*,*,0\")\n+  [(set (attr \"isa\")\n+\t(cond [(eq_attr \"alternative\" \"3\")\n+\t\t (if_then_else (eq_attr \"mode\" \"SI\")\n+\t\t   (const_string \"avx512bw\")\n+\t\t   (const_string \"avx512f\"))\n+\t      ]\n+\t      (const_string \"*\")))\n+   (set_attr \"type\" \"alu,alu,imovx,msklog\")\n+   (set_attr \"length_immediate\" \"*,*,0,*\")\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n \t    (and (match_test \"INTVAL (operands[2]) == 0xff\")\n \t\t (match_operand 1 \"ext_QIreg_operand\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"mode\" \"<MODE>,<MODE>,SI\")])\n+   (set_attr \"mode\" \"<MODE>,<MODE>,SI,<MODE>\")])\n \n (define_insn \"*andqi_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r\")\n-\t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"qn,m,rn\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,k\")\n+\t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,k\")\n+\t\t(match_operand:QI 2 \"general_operand\" \"qn,m,rn,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, QImode, operands)\"\n   \"@\n    and{b}\\t{%2, %0|%0, %2}\n    and{b}\\t{%2, %0|%0, %2}\n-   and{l}\\t{%k2, %k0|%k0, %k2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"QI,QI,SI\")\n+   and{l}\\t{%k2, %k0|%k0, %k2}\n+   #\"\n+  [(set_attr \"type\" \"alu,alu,alu,msklog\")\n+   (set (attr \"mode\")\n+\t(cond [(eq_attr \"alternative\" \"2\")\n+\t\t (const_string \"SI\")\n+\t\t(and (eq_attr \"alternative\" \"3\")\n+\t\t     (match_test \"!TARGET_AVX512DQ\"))\n+\t\t (const_string \"HI\")\n+\t       ]\n+\t       (const_string \"QI\")))\n    ;; Potential partial reg stall on alternative 2.\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"2\")\n@@ -9539,28 +9570,42 @@\n })\n \n (define_insn \"*andn<mode>_1\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r,k\")\n \t(and:SWI48\n-\t  (not:SWI48 (match_operand:SWI48 1 \"register_operand\" \"r,r\"))\n-\t  (match_operand:SWI48 2 \"nonimmediate_operand\" \"r,m\")))\n+\t  (not:SWI48 (match_operand:SWI48 1 \"register_operand\" \"r,r,k\"))\n+\t  (match_operand:SWI48 2 \"nonimmediate_operand\" \"r,m,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_BMI\"\n-  \"andn\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"bitmanip\")\n-   (set_attr \"btver2_decode\" \"direct, double\")\n+  \"TARGET_BMI || TARGET_AVX512BW\"\n+  \"@\n+   andn\\t{%2, %1, %0|%0, %1, %2}\n+   andn\\t{%2, %1, %0|%0, %1, %2}\n+   #\"\n+  [(set_attr \"isa\" \"bmi,bmi,avx512bw\")\n+   (set_attr \"type\" \"bitmanip,bitmanip,msklog\")\n+   (set_attr \"btver2_decode\" \"direct, double,*\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*andn<mode>_1\"\n-  [(set (match_operand:SWI12 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"=r,k\")\n \t(and:SWI12\n-\t  (not:SWI12 (match_operand:SWI12 1 \"register_operand\" \"r\"))\n-\t  (match_operand:SWI12 2 \"register_operand\" \"r\")))\n+\t  (not:SWI12 (match_operand:SWI12 1 \"register_operand\" \"r,k\"))\n+\t  (match_operand:SWI12 2 \"register_operand\" \"r,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_BMI\"\n-  \"andn\\t{%k2, %k1, %k0|%k0, %k1, %k2}\"\n-  [(set_attr \"type\" \"bitmanip\")\n-   (set_attr \"btver2_decode\" \"direct\")\n-   (set_attr \"mode\" \"SI\")])\n+  \"TARGET_BMI || TARGET_AVX512BW\"\n+  \"@\n+   andn\\t{%k2, %k1, %k0|%k0, %k1, %k2}\n+   #\"\n+  [(set_attr \"isa\" \"bmi,avx512f\")\n+   (set_attr \"type\" \"bitmanip,msklog\")\n+   (set_attr \"btver2_decode\" \"direct,*\")\n+   (set (attr \"mode\")\n+\t(cond [(eq_attr \"alternative\" \"0\")\n+\t\t (const_string \"SI\")\n+\t       (and (eq_attr \"alternative\" \"1\")\n+\t\t    (match_test \"!TARGET_AVX512DQ\"))\n+\t\t  (const_string \"HI\")\n+\t      ]\n+\t      (const_string \"<MODE>\")))])\n \n (define_insn \"*andn_<mode>_ccno\"\n   [(set (reg FLAGS_REG)\n@@ -9631,14 +9676,24 @@\n })\n \n (define_insn \"*<code><mode>_1\"\n-  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm,r\")\n+  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm,r,k\")\n \t(any_or:SWI248\n-\t (match_operand:SWI248 1 \"nonimmediate_operand\" \"%0,0\")\n-\t (match_operand:SWI248 2 \"<general_operand>\" \"r<i>,m\")))\n+\t (match_operand:SWI248 1 \"nonimmediate_operand\" \"%0,0,k\")\n+\t (match_operand:SWI248 2 \"<general_operand>\" \"r<i>,m,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n+  \"@\n+   <logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\n+   <logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\n+   #\"\n+  [(set (attr \"isa\")\n+\t(cond [(eq_attr \"alternative\" \"2\")\n+\t\t (if_then_else (eq_attr \"mode\" \"SI,DI\")\n+\t\t   (const_string \"avx512bw\")\n+\t\t   (const_string \"avx512f\"))\n+\t      ]\n+\t      (const_string \"*\")))\n+   (set_attr \"type\" \"alu, alu, msklog\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn_and_split \"*iordi_1_bts\"\n@@ -9711,17 +9766,26 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*<code>qi_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r\")\n-\t(any_or:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qn,m,rn\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,k\")\n+\t(any_or:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,k\")\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qn,m,rn,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, QImode, operands)\"\n   \"@\n    <logic>{b}\\t{%2, %0|%0, %2}\n    <logic>{b}\\t{%2, %0|%0, %2}\n-   <logic>{l}\\t{%k2, %k0|%k0, %k2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"QI,QI,SI\")\n+   <logic>{l}\\t{%k2, %k0|%k0, %k2}\n+   #\"\n+  [(set_attr \"isa\" \"*,*,*,avx512f\")\n+   (set_attr \"type\" \"alu,alu,alu,msklog\")\n+   (set (attr \"mode\")\n+\t(cond [(eq_attr \"alternative\" \"2\")\n+\t\t (const_string \"SI\")\n+\t\t(and (eq_attr \"alternative\" \"3\")\n+\t\t     (match_test \"!TARGET_AVX512DQ\"))\n+\t\t (const_string \"HI\")\n+\t       ]\n+\t       (const_string \"QI\")))\n    ;; Potential partial reg stall on alternative 2.\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"2\")\n@@ -10370,31 +10434,52 @@\n   \"split_double_mode (DImode, &operands[0], 2, &operands[0], &operands[2]);\")\n \n (define_insn \"*one_cmpl<mode>2_1\"\n-  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm\")\n-\t(not:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"0\")))]\n+  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm,k\")\n+\t(not:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"0,k\")))]\n   \"ix86_unary_operator_ok (NOT, <MODE>mode, operands)\"\n-  \"not{<imodesuffix>}\\t%0\"\n-  [(set_attr \"type\" \"negnot\")\n+  \"@\n+   not{<imodesuffix>}\\t%0\n+   #\"\n+  [(set (attr \"isa\")\n+\t(cond [(eq_attr \"alternative\" \"2\")\n+\t\t (if_then_else (eq_attr \"mode\" \"SI,DI\")\n+\t\t   (const_string \"avx512bw\")\n+\t\t   (const_string \"avx512f\"))\n+\t      ]\n+\t      (const_string \"*\")))\n+   (set_attr \"type\" \"negnot,msklog\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*one_cmplsi2_1_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,k\")\n \t(zero_extend:DI\n-\t  (not:SI (match_operand:SI 1 \"register_operand\" \"0\"))))]\n+\t  (not:SI (match_operand:SI 1 \"register_operand\" \"0,k\"))))]\n   \"TARGET_64BIT && ix86_unary_operator_ok (NOT, SImode, operands)\"\n-  \"not{l}\\t%k0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"SI\")])\n+  \"@\n+   not{l}\\t%k0\n+   #\"\n+  [(set_attr \"isa\" \"x64,avx512bw\")\n+   (set_attr \"type\" \"negnot,msklog\")\n+   (set_attr \"mode\" \"SI,SI\")])\n \n (define_insn \"*one_cmplqi2_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r\")\n-\t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,k\")\n+\t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,k\")))]\n   \"ix86_unary_operator_ok (NOT, QImode, operands)\"\n   \"@\n    not{b}\\t%0\n-   not{l}\\t%k0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"QI,SI\")\n+   not{l}\\t%k0\n+   #\"\n+  [(set_attr \"isa\" \"*,*,avx512f\")\n+   (set_attr \"type\" \"negnot,negnot,msklog\")\n+   (set (attr \"mode\")\n+\t(cond [(eq_attr \"alternative\" \"1\")\n+\t\t (const_string \"SI\")\n+\t\t(and (eq_attr \"alternative\" \"2\")\n+\t\t     (match_test \"!TARGET_AVX512DQ\"))\n+\t\t (const_string \"HI\")\n+\t       ]\n+\t       (const_string \"QI\")))\n    ;; Potential partial reg stall on alternative 1.\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"1\")"}, {"sha": "b03f9cd1c8cf8f1ed47e136e9082af1234634bd3", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -87,6 +87,11 @@\n   (and (match_code \"reg\")\n        (match_test \"REGNO (op) == FLAGS_REG\")))\n \n+;; True if the operand is a MASK register.\n+(define_predicate \"mask_reg_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"MASK_REGNO_P (REGNO (op))\")))\n+\n ;; Match a DI, SI, HI or QImode nonimmediate_operand.\n (define_special_predicate \"int_nonimmediate_operand\"\n   (and (match_operand 0 \"nonimmediate_operand\")"}, {"sha": "6f1f7f79673b3845881cd972ef2df2c6ec225afe", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -1470,6 +1470,18 @@\n \t   ]\n \t   (const_string \"<MODE>\")))])\n \n+(define_split\n+  [(set (match_operand:SWI1248_AVX512BW 0 \"mask_reg_operand\")\n+\t(any_logic:SWI1248_AVX512BW\n+\t  (match_operand:SWI1248_AVX512BW 1 \"mask_reg_operand\")\n+\t  (match_operand:SWI1248_AVX512BW 2 \"mask_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_AVX512F && reload_completed\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (any_logic:SWI1248_AVX512BW (match_dup 1) (match_dup 2)))\n+      (unspec [(const_int 0)] UNSPEC_MASKOP)])])\n+\n (define_insn \"kandn<mode>\"\n   [(set (match_operand:SWI1248_AVX512BW 0 \"register_operand\" \"=k\")\n \t(and:SWI1248_AVX512BW\n@@ -1493,6 +1505,21 @@\n \t   ]\n \t   (const_string \"<MODE>\")))])\n \n+(define_split\n+  [(set (match_operand:SWI1248_AVX512BW 0 \"mask_reg_operand\")\n+\t(and:SWI1248_AVX512BW\n+\t  (not:SWI1248_AVX512BW\n+\t    (match_operand:SWI1248_AVX512BW 1 \"mask_reg_operand\"))\n+\t  (match_operand:SWI1248_AVX512BW 2 \"mask_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_AVX512F && reload_completed\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (and:SWI1248_AVX512BW\n+\t     (not:SWI1248_AVX512BW (match_dup 1))\n+\t     (match_dup 2)))\n+      (unspec [(const_int 0)] UNSPEC_MASKOP)])])\n+\n (define_insn \"kxnor<mode>\"\n   [(set (match_operand:SWI1248_AVX512BW 0 \"register_operand\" \"=k\")\n \t(not:SWI1248_AVX512BW\n@@ -1537,6 +1564,38 @@\n \t   ]\n \t   (const_string \"<MODE>\")))])\n \n+(define_split\n+  [(set (match_operand:SWI1248_AVX512BW 0 \"mask_reg_operand\")\n+\t(not:SWI1248_AVX512BW\n+\t  (match_operand:SWI1248_AVX512BW 1 \"mask_reg_operand\")))]\n+  \"TARGET_AVX512F && reload_completed\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (not:SWI1248_AVX512BW (match_dup 1)))\n+      (unspec [(const_int 0)] UNSPEC_MASKOP)])])\n+\n+(define_insn \"*knotsi_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=k\")\n+\t(zero_extend:DI\n+\t  (not:SI (match_operand:SI 1 \"register_operand\" \"k\"))))\n+   (unspec [(const_int 0)] UNSPEC_MASKOP)]\n+  \"TARGET_AVX512BW\"\n+  \"knotd\\t{%1, %0|%0, %1}\";\n+  [(set_attr \"type\" \"msklog\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"mask_reg_operand\")\n+\t(zero_extend:DI\n+\t  (not:DI (match_operand:SI 1 \"mask_reg_operand\"))))]\n+  \"TARGET_AVX512BW && reload_completed\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (zero_extend:DI\n+\t     (not:SI (match_dup 1))))\n+      (unspec [(const_int 0)] UNSPEC_MASKOP)])])\n+\n (define_insn \"kadd<mode>\"\n   [(set (match_operand:SWI1248_AVX512BWDQ2 0 \"register_operand\" \"=k\")\n \t(plus:SWI1248_AVX512BWDQ2"}, {"sha": "46d9351f27533568764d56832bae6fb90ff41429", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kunpckwd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-1.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -O2\" } */\n-/* { dg-final { scan-assembler-times \"kunpckwd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"kunpckwd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "fe13f4f33fc9b2e65fb4447b25fdf910f6fbf2ef", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kunpckwd-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-3.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -O2\" } */\n-/* { dg-final { scan-assembler-times \"kunpckwd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"kunpckwd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "8e34bf4536529a8f2edaa456176fb9bb65563579", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr88465.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr88465.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr88465.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr88465.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/88465 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"kxor\\[qd\\]\\[ \\t]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"kxnor\\[dq\\]\\[ \\t]\" 2 } } */\n+\n+void\n+foo (void)\n+{\n+  unsigned int k = 0;\n+  __asm volatile (\"\" : : \"k\" (k));\n+  k = -1;\n+  __asm volatile (\"\" : : \"k\" (k));\n+}\n+\n+void\n+bar (void)\n+{\n+  unsigned long long k = 0;\n+  __asm volatile (\"\" : : \"k\" (k));\n+  k = -1;\n+  __asm volatile (\"\" : : \"k\" (k));\n+}"}, {"sha": "114e03ee93dc5087ac18dd6ca4fb4ac37ffb46ff", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kmovb-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-5.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-options \"-mavx512dq -mno-avx512bw -O2\" } */\n /* { dg-final { scan-assembler-times \"kmovb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>"}, {"sha": "79d37394b36462c6fcdf8e2f2eb0434cfc81c6a7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kmovw-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-5.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-options \"-mavx512f -mno-avx512bw -O2\" } */\n /* { dg-final { scan-assembler-times \"kmovw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>"}, {"sha": "61f71ab8b23c616dabaa6d1219ecf2729e0211ff", "filename": "gcc/testsuite/gcc.target/i386/bitwise_mask_op-1.c", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-1.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -0,0 +1,178 @@\n+/* PR target/88808  */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mno-avx512dq -O2\" } */\n+\n+#include <immintrin.h>\n+__m512i\n+foo_orq (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask64 m1 = _mm512_cmpeq_epi8_mask (a, b);\n+  __mmask64 m2 = _mm512_cmpeq_epi8_mask (c, d);\n+  return _mm512_mask_add_epi8 (c, m1 | m2, a, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"korq\" \"1\" { target { ! ia32 } } } } */\n+\n+__m512i\n+foo_ord (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask32 m1 = _mm512_cmpeq_epi16_mask (a, b);\n+  __mmask32 m2 = _mm512_cmpeq_epi16_mask (c, d);\n+  return _mm512_mask_add_epi16 (c, m1 | m2, a, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"kord\" \"1\" } }  */\n+\n+__m512i\n+foo_orw (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask16 m1 = _mm512_cmpeq_epi32_mask (a, b);\n+  __mmask16 m2 = _mm512_cmpeq_epi32_mask (c, d);\n+  return _mm512_mask_add_epi32 (c, m1 | m2, a, d);\n+}\n+\n+__m512i\n+foo_orb (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask8 m1 = _mm512_cmpeq_epi64_mask (a, b);\n+  __mmask8 m2 = _mm512_cmpeq_epi64_mask (c, d);\n+  return _mm512_mask_add_epi64 (c, m1 | m2, a, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"korw\" \"2\" } }  */\n+\n+__m512i\n+foo_xorq (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask64 m1 = _mm512_cmpeq_epi8_mask (a, b);\n+  __mmask64 m2 = _mm512_cmpeq_epi8_mask (c, d);\n+  return _mm512_mask_add_epi8 (c, m1 ^ m2, a, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"kxorq\" \"1\" { target { ! ia32 } } } }  */\n+\n+__m512i\n+foo_xord (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask32 m1 = _mm512_cmpeq_epi16_mask (a, b);\n+  __mmask32 m2 = _mm512_cmpeq_epi16_mask (c, d);\n+  return _mm512_mask_add_epi16 (c, m1 ^ m2, a, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"kxord\" \"1\" } }  */\n+\n+__m512i\n+foo_xorw (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask16 m1 = _mm512_cmpeq_epi32_mask (a, b);\n+  __mmask16 m2 = _mm512_cmpeq_epi32_mask (c, d);\n+  return _mm512_mask_add_epi32 (c, m1 ^ m2, a, d);\n+}\n+\n+__m512i\n+foo_xorb (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask8 m1 = _mm512_cmpeq_epi64_mask (a, b);\n+  __mmask8 m2 = _mm512_cmpeq_epi64_mask (c, d);\n+  return _mm512_mask_add_epi64 (c, m1 ^ m2, a, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"korw\" \"2\" } }  */\n+\n+__m512i\n+foo_andq (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask64 m1 = _mm512_cmpeq_epi8_mask (a, b);\n+  __mmask64 m2 = _mm512_cmpeq_epi8_mask (c, d);\n+  return _mm512_mask_add_epi8 (c, m1 & m2, a, d);\n+}\n+\n+__m512i\n+foo_andd (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask32 m1 = _mm512_cmpeq_epi16_mask (a, b);\n+  __mmask32 m2 = _mm512_cmpeq_epi16_mask (c, d);\n+  return _mm512_mask_add_epi16 (c, m1 & m2, a, d);\n+}\n+\n+__m512i\n+foo_andw (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask16 m1 = _mm512_cmpeq_epi32_mask (a, b);\n+  __mmask16 m2 = _mm512_cmpeq_epi32_mask (c, d);\n+  return _mm512_mask_add_epi32 (c, m1 & m2, a, d);\n+}\n+\n+__m512i\n+foo_andb (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask8 m1 = _mm512_cmpeq_epi64_mask (a, b);\n+  __mmask8 m2 = _mm512_cmpeq_epi64_mask (c, d);\n+  return _mm512_mask_add_epi64 (c, m1 & m2, a, d);\n+}\n+\n+__m512i\n+foo_andnq (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask64 m1 = _mm512_cmpeq_epi8_mask (a, b);\n+  __mmask64 m2 = _mm512_cmpeq_epi8_mask (c, d);\n+  return _mm512_mask_add_epi8 (c, m1 & ~m2, a, d);\n+}\n+\n+__m512i\n+foo_andnd (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask32 m1 = _mm512_cmpeq_epi16_mask (a, b);\n+  __mmask32 m2 = _mm512_cmpeq_epi16_mask (c, d);\n+  return _mm512_mask_add_epi16 (c, m1 & ~m2, a, d);\n+}\n+\n+__m512i\n+foo_andnw (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask16 m1 = _mm512_cmpeq_epi32_mask (a, b);\n+  __mmask16 m2 = _mm512_cmpeq_epi32_mask (c, d);\n+  return _mm512_mask_add_epi32 (c, m1 & ~m2, a, d);\n+}\n+\n+__m512i\n+foo_andnb (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask8 m1 = _mm512_cmpeq_epi64_mask (a, b);\n+  __mmask8 m2 = _mm512_cmpeq_epi64_mask (c, d);\n+  return _mm512_mask_add_epi64 (c, m1 & ~m2, a, d);\n+}\n+\n+__m512i\n+foo_notq (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask64 m1 = _mm512_cmpeq_epi8_mask (a, b);\n+  return _mm512_mask_add_epi8 (c, ~m1, a, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"knotq\" \"2\" { target { ! ia32 } } } }  */\n+\n+__m512i\n+foo_notd (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask32 m1 = _mm512_cmpeq_epi16_mask (a, b);\n+  return _mm512_mask_add_epi16 (c, ~m1, a, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"knotd\" \"2\" { target { ! ia32 } } } }  */\n+\n+__m512i\n+foo_notw (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask16 m1 = _mm512_cmpeq_epi32_mask (a, b);\n+  return _mm512_mask_add_epi32 (c, ~m1, a, d);\n+}\n+\n+__m512i\n+foo_notb (__m512i a, __m512i b, __m512i c, __m512i d)\n+{\n+  __mmask8 m1 = _mm512_cmpeq_epi64_mask (a, b);\n+  return _mm512_mask_add_epi64 (c, ~m1, a, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"knotw\" \"4\" } }  */"}, {"sha": "850f0b42652c4870b099610c698be523c88d6364", "filename": "gcc/testsuite/gcc.target/i386/bitwise_mask_op-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-2.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/88808  */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"knotb\" \"2\" } }  */\n+/* { dg-final { scan-assembler-times \"korb\" \"1\" } }  */\n+/* { dg-final { scan-assembler-times \"kxorb\" \"1\" } }  */\n+#include \"bitwise_mask_op-1.c\"\n+"}, {"sha": "18bf4f0d7682b064fc7e17a5546df82bbbd485c5", "filename": "gcc/testsuite/gcc.target/i386/bitwise_mask_op-3.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-3.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -0,0 +1,44 @@\n+/* PR target/88808  */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512dq -O2\" } */\n+\n+#include <immintrin.h>\n+volatile __mmask8 foo;\n+void\n+foo_orb (__m512i a, __m512i b)\n+{\n+  __mmask8 m1 = _mm512_cmp_epi64_mask (a, b, 2);\n+  __mmask8 m2 = _mm512_cmp_epi64_mask (a, b, 4);\n+  foo = m1 | m2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"korb\\[\\t \\]\" \"1\" } }  */\n+\n+void\n+foo_xorb (__m512i a, __m512i b)\n+{\n+  __mmask8 m1 = _mm512_cmp_epi64_mask (a, b, 2);\n+  __mmask8 m2 = _mm512_cmp_epi64_mask (a, b, 4);\n+  foo = m1 ^ m2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"kxorb\\[\\t \\]\" \"1\" } }  */\n+\n+void\n+foo_andb (__m512i a, __m512i b)\n+{\n+  __mmask8 m1 = _mm512_cmp_epi64_mask (a, b, 2);\n+  __mmask8 m2 = _mm512_cmp_epi64_mask (a, b, 4);\n+  foo = m1 & m2;\n+}\n+\n+void\n+foo_andnb (__m512i a, __m512i b)\n+{\n+  __mmask8 m1 = _mm512_cmp_epi64_mask (a, b, 2);\n+  __mmask8 m2 = _mm512_cmp_epi64_mask (a, b, 4);\n+  foo = m1 & ~m2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"knotb\\[\\t \\]\" \"1\" } }  */\n+/* { dg-final { scan-assembler-times \"kmovb\\[\\t \\]\" \"4\"} }  */"}, {"sha": "3f8d306c1f602feb3b22858996c45212b4c67d9b", "filename": "gcc/testsuite/gcc.target/i386/pr55342.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55342.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388cb292a94f98a276548cd6ce01285cf36d17df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55342.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55342.c?ref=388cb292a94f98a276548cd6ce01285cf36d17df", "patch": "@@ -1,6 +1,6 @@\n /* PR rtl-optimization/55342 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mno-avx512dq\" } */\n /* { dg-final { scan-assembler-not \"notb\" } } */\n \n "}]}