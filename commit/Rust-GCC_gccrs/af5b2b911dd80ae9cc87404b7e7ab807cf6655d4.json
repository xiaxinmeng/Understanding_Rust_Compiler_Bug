{"sha": "af5b2b911dd80ae9cc87404b7e7ab807cf6655d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY1YjJiOTExZGQ4MGFlOWNjODc0MDRiN2U3YWI4MDdjZjY2NTVkNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-04T11:16:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-04T11:16:46Z"}, "message": "libstdc++: Do not use deduced return type for std::visit [PR 100384]\n\nThis avoids errors outside the immediate context when std::visit is an\noverload candidate because of ADL, but not actually viable.\n\nThe solution is to give std::visit a non-deduced return type. New\nhelpers are introduced for that, and existing ones refactored slightly.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100384\n\t* include/std/variant (__get_t): New alias template yielding the\n\treturn type of std::get<N> on a variant.\n\t(__visit_result_t): New alias template yielding the result of\n\tstd::visit.\n\t(__same_types): Move into namespace __detail::__variant.\n\t(__check_visitor_results): Likewise. Use __invoke_result_t and\n\t__get_t.\n\t(__check_visitor_result): Remove.\n\t(visit): Use __visit_result_t for return type.\n\t* testsuite/20_util/variant/100384.cc: New test.", "tree": {"sha": "b28d4349aad905b711cb7166bdcf7c50cf437efe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b28d4349aad905b711cb7166bdcf7c50cf437efe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad0a3be4df5eecc79075d899fd79179d0f61270e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0a3be4df5eecc79075d899fd79179d0f61270e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0a3be4df5eecc79075d899fd79179d0f61270e"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "9b2bc440841fbce34e3413b2e11f42dcb4bed6e4", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=af5b2b911dd80ae9cc87404b7e7ab807cf6655d4", "patch": "@@ -1063,6 +1063,25 @@ namespace __variant\n \t\t\t      std::index_sequence<__indices...>>\n     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };\n \n+  template<size_t _Np, typename _Variant>\n+    using __get_t = decltype(std::get<_Np>(std::declval<_Variant>()));\n+\n+  // Return type of std::visit.\n+  template<typename _Visitor, typename... _Variants>\n+    using __visit_result_t\n+      = invoke_result_t<_Visitor, __get_t<0, _Variants>...>;\n+\n+  template<typename _Tp, typename... _Types>\n+    constexpr inline bool __same_types = (is_same_v<_Tp, _Types> && ...);\n+\n+  template <typename _Visitor, typename _Variant, size_t... _Idxs>\n+    constexpr bool __check_visitor_results(std::index_sequence<_Idxs...>)\n+    {\n+      return __same_types<\n+\tinvoke_result_t<_Visitor, __get_t<_Idxs, _Variant>>...\n+\t>;\n+    }\n+\n } // namespace __variant\n } // namespace __detail\n \n@@ -1248,7 +1267,8 @@ namespace __variant\n #endif\n \n   template<typename _Visitor, typename... _Variants>\n-    constexpr decltype(auto) visit(_Visitor&&, _Variants&&...);\n+    constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>\n+    visit(_Visitor&&, _Variants&&...);\n \n   template<typename... _Types>\n     inline enable_if_t<(is_move_constructible_v<_Types> && ...)\n@@ -1715,41 +1735,21 @@ namespace __variant\n \t\t\t   std::forward<_Variants>(__variants)...);\n     }\n \n-  template<typename _Tp, typename... _Types>\n-     constexpr inline bool __same_types = (is_same_v<_Tp, _Types> && ...);\n-\n-  template <size_t _Idx, typename _Visitor, typename _Variant>\n-    decltype(auto)\n-    __check_visitor_result(_Visitor&& __vis, _Variant&& __variant)\n-    {\n-      return std::__invoke(std::forward<_Visitor>(__vis),\n-\t\t\t   std::get<_Idx>(std::forward<_Variant>(__variant)));\n-    }\n-\n-  template <typename _Visitor, typename _Variant, size_t... _Idxs>\n-    constexpr bool __check_visitor_results(std::index_sequence<_Idxs...>)\n-    {\n-      return __same_types<decltype(__check_visitor_result<_Idxs>(\n-\tstd::declval<_Visitor>(),\n-\tstd::declval<_Variant>()))...>;\n-    }\n-\n-\n   template<typename _Visitor, typename... _Variants>\n-    constexpr decltype(auto)\n+    constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>\n     visit(_Visitor&& __visitor, _Variants&&... __variants)\n     {\n       if ((__variants.valueless_by_exception() || ...))\n \t__throw_bad_variant_access(\"std::visit: variant is valueless\");\n \n-      using _Result_type = std::invoke_result_t<_Visitor,\n-\tdecltype(std::get<0>(std::declval<_Variants>()))...>;\n+      using _Result_type\n+\t= __detail::__variant::__visit_result_t<_Visitor, _Variants...>;\n \n       using _Tag = __detail::__variant::__deduce_visit_result<_Result_type>;\n \n       if constexpr (sizeof...(_Variants) == 1)\n \t{\n-\t  constexpr bool __visit_rettypes_match =\n+\t  constexpr bool __visit_rettypes_match = __detail::__variant::\n \t    __check_visitor_results<_Visitor, _Variants...>(\n \t      std::make_index_sequence<\n \t        std::variant_size<remove_reference_t<_Variants>...>::value>());"}, {"sha": "4866aa017ffe7b51002bf143d1fb484e450eb3a1", "filename": "libstdc++-v3/testsuite/20_util/variant/100384.cc", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F100384.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F100384.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F100384.cc?ref=af5b2b911dd80ae9cc87404b7e7ab807cf6655d4", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <variant>\n+\n+int visit(int*, std::true_type) { return 0; }\n+\n+const std::true_type dat;\n+\n+int i = visit(nullptr, dat);"}]}