{"sha": "17f24ff04d5e70fdf5c20df8957f7a8864b10dbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmMjRmZjA0ZDVlNzBmZGY1YzIwZGY4OTU3ZjdhODg2NGIxMGRiYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "2000-01-18T16:06:54Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-01-18T16:06:54Z"}, "message": "i386.h (BIGGEST_ALIGNMENT): Set to 128.\n\n\t* i386.h (BIGGEST_ALIGNMENT): Set to 128.\n\t(BIGGEST_FIELD_ALIGNMENT): Set to (TARGET_ALIGN_DOUBLE ? 64 : 32)\n\nFrom-SVN: r31489", "tree": {"sha": "96c1ed73d6d28ec5340114a98961ec2062f56553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96c1ed73d6d28ec5340114a98961ec2062f56553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17f24ff04d5e70fdf5c20df8957f7a8864b10dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f24ff04d5e70fdf5c20df8957f7a8864b10dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f24ff04d5e70fdf5c20df8957f7a8864b10dbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f24ff04d5e70fdf5c20df8957f7a8864b10dbb/comments", "author": null, "committer": null, "parents": [{"sha": "e2e52e1be7f47a95853b79d36c2e7c1b636e52f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e52e1be7f47a95853b79d36c2e7c1b636e52f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e52e1be7f47a95853b79d36c2e7c1b636e52f6"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "b724cc70488e9be93647e0a4037067df799f2e87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f24ff04d5e70fdf5c20df8957f7a8864b10dbb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f24ff04d5e70fdf5c20df8957f7a8864b10dbb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17f24ff04d5e70fdf5c20df8957f7a8864b10dbb", "patch": "@@ -1,5 +1,8 @@\n Tue Jan 18 16:19:55 MET 2000  Jan Hubicka  <hubicka@freesoft.cz>\n \n+\t* i386.h (BIGGEST_ALIGNMENT): Set to 128.\n+\t(BIGGEST_FIELD_ALIGNMENT): Set to (TARGET_ALIGN_DOUBLE ? 64 : 32)\n+\n \t* i386.md (memstr): Do not use rep stosb for counts divisible by 4\n \twhen optimize_size.\n \t(clrstrsi): Rewrite."}, {"sha": "9e45815089c2bd5057c04f9dd113314ffd134e93", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f24ff04d5e70fdf5c20df8957f7a8864b10dbb/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f24ff04d5e70fdf5c20df8957f7a8864b10dbb/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=17f24ff04d5e70fdf5c20df8957f7a8864b10dbb", "patch": "@@ -448,12 +448,18 @@ extern int ix86_arch;\n /* Minimum size in bits of the largest boundary to which any\n    and all fundamental data types supported by the hardware\n    might need to be aligned. No data type wants to be aligned\n-   rounder than this.  The i386 supports 64-bit floating point\n-   quantities, but these can be aligned on any 32-bit boundary.\n-   The published ABIs say that doubles should be aligned on word\n-   boundaries, but the Pentium gets better performance with them\n-   aligned on 64 bit boundaries. */\n-#define BIGGEST_ALIGNMENT (TARGET_ALIGN_DOUBLE ? 64 : 32)\n+   rounder than this.\n+   \n+   Pentium+ preferrs DFmode values to be alignmed to 64 bit boundary\n+   and Pentium Pro XFmode values at 128 bit boundaries.  */\n+\n+#define BIGGEST_ALIGNMENT 128\n+\n+/* The published ABIs say that doubles should be aligned on word\n+   boundaries, so lower the aligmnet for structure fields unless\n+   -malign_double is set.  */\n+\n+#define BIGGEST_FIELD_ALIGNMENT (TARGET_ALIGN_DOUBLE ? 64 : 32)\n \n /* If defined, a C expression to compute the alignment given to a\n    constant that is being placed in memory.  CONSTANT is the constant"}]}