{"sha": "1cc9f5f5f9bee93d16022839b10454929034585d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNjOWY1ZjVmOWJlZTkzZDE2MDIyODM5YjEwNDU0OTI5MDM0NTg1ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-26T16:35:44Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-26T16:35:44Z"}, "message": "arm.c (TARGET_SETUP_INCOMING_VARARGS): New.\n\n\t* config/arm/arm.c (TARGET_SETUP_INCOMING_VARARGS): New.\n\t(arm_setup_incoming_varargs): Likewise.\n\t* config/arm/arm.h (SETUP_INCOMING_VARARGS): Remove.\n\nFrom-SVN: r76643", "tree": {"sha": "a021ec8671c81d141c21190dd32e2ce8ae30b597", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a021ec8671c81d141c21190dd32e2ce8ae30b597"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cc9f5f5f9bee93d16022839b10454929034585d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc9f5f5f9bee93d16022839b10454929034585d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc9f5f5f9bee93d16022839b10454929034585d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc9f5f5f9bee93d16022839b10454929034585d/comments", "author": null, "committer": null, "parents": [{"sha": "558d352a12750bdd8230b8bb4bf7775f977433dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558d352a12750bdd8230b8bb4bf7775f977433dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558d352a12750bdd8230b8bb4bf7775f977433dd"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "a678fecd89b8cc3c8d54833224a0ad3ad307e75d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc9f5f5f9bee93d16022839b10454929034585d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc9f5f5f9bee93d16022839b10454929034585d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cc9f5f5f9bee93d16022839b10454929034585d", "patch": "@@ -1,3 +1,9 @@\n+2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arm/arm.c (TARGET_SETUP_INCOMING_VARARGS): New.\n+\t(arm_setup_incoming_varargs): Likewise.\n+\t* config/arm/arm.h (SETUP_INCOMING_VARARGS): Remove.\n+\n 2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/cris/cris.c (TARGET_SETUP_INCOMING_VARARGS): New."}, {"sha": "768678d1b51b6982af251c403a5e4c2b96a2b58a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc9f5f5f9bee93d16022839b10454929034585d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc9f5f5f9bee93d16022839b10454929034585d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1cc9f5f5f9bee93d16022839b10454929034585d", "patch": "@@ -151,6 +151,8 @@ static void aof_file_start (void);\n static void aof_file_end (void);\n #endif\n static rtx arm_struct_value_rtx (tree, int);\n+static void arm_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\ttree, int *, int);\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -242,6 +244,9 @@ static rtx arm_struct_value_rtx (tree, int);\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX arm_struct_value_rtx\n \n+#undef  TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS arm_setup_incoming_varargs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -13350,3 +13355,22 @@ arm_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n   return gen_rtx_REG (Pmode, ARG_REGISTER (1));\n #endif\n }\n+\n+/* Worker function for TARGET_SETUP_INCOMING_VARARGS.\n+\n+   On the ARM, PRETEND_SIZE is set in order to have the prologue push the last\n+   named arg and all anonymous args onto the stack.\n+   XXX I know the prologue shouldn't be pushing registers, but it is faster\n+   that way.  */\n+\n+static void\n+arm_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n+\t\t\t    enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t    tree type ATTRIBUTE_UNUSED,\n+\t\t\t    int *pretend_size,\n+\t\t\t    int second_time ATTRIBUTE_UNUSED)\n+{\n+  cfun->machine->uses_anonymous_args = 1;\n+  if (cum->nregs < NUM_ARG_REGS)\n+    *pretend_size = (NUM_ARG_REGS - cum->nregs) * UNITS_PER_WORD;\n+}"}, {"sha": "df71f64248cf686124020841d81b8d018f52cb35", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc9f5f5f9bee93d16022839b10454929034585d/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc9f5f5f9bee93d16022839b10454929034585d/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=1cc9f5f5f9bee93d16022839b10454929034585d", "patch": "@@ -1703,9 +1703,9 @@ typedef struct\n \n    On the ARM, normally the first 16 bytes are passed in registers r0-r3; all\n    other arguments are passed on the stack.  If (NAMED == 0) (which happens\n-   only in assign_parms, since SETUP_INCOMING_VARARGS is defined), say it is\n-   passed in the stack (function_prologue will indeed make it pass in the\n-   stack if necessary).  */\n+   only in assign_parms, since TARGET_SETUP_INCOMING_VARARGS is\n+   defined), say it is passed in the stack (function_prologue will\n+   indeed make it pass in the stack if necessary).  */\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   arm_function_arg (&(CUM), (MODE), (TYPE), (NAMED))\n \n@@ -1764,26 +1764,6 @@ typedef struct\n   arm_va_arg (valist, type)\n \n \f\n-/* Perform any actions needed for a function that is receiving a variable\n-   number of arguments.  CUM is as above.  MODE and TYPE are the mode and type\n-   of the current parameter.  PRETEND_SIZE is a variable that should be set to\n-   the amount of stack that must be pushed by the prolog to pretend that our\n-   caller pushed it.\n-\n-   Normally, this macro will push all remaining incoming registers on the\n-   stack and set PRETEND_SIZE to the length of the registers pushed.\n-\n-   On the ARM, PRETEND_SIZE is set in order to have the prologue push the last\n-   named arg and all anonymous args onto the stack.\n-   XXX I know the prologue shouldn't be pushing registers, but it is faster\n-   that way.  */\n-#define SETUP_INCOMING_VARARGS(CUM, MODE, TYPE, PRETEND_SIZE, NO_RTL)\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  cfun->machine->uses_anonymous_args = 1;\t\t\t\t\\\n-  if ((CUM).nregs < NUM_ARG_REGS)\t\t\t\t\t\\\n-    (PRETEND_SIZE) = (NUM_ARG_REGS - (CUM).nregs) * UNITS_PER_WORD;\t\\\n-}\n-\n /* If your target environment doesn't prefix user functions with an\n    underscore, you may wish to re-define this to prevent any conflicts.\n    e.g. AOF may prefix mcount with an underscore.  */"}]}