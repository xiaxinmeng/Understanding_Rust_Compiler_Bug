{"sha": "f9ad2367e7310567464929e1a78c5d9c31029585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhZDIzNjdlNzMxMDU2NzQ2NDkyOWUxYTc4YzVkOWMzMTAyOTU4NQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2001-08-26T04:51:54Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-08-26T04:51:54Z"}, "message": "mips.c (mips_function_value): Handle complex return values.\n\n        * config/mips/mips.c (mips_function_value): Handle complex return\n        values.\n\nFrom-SVN: r45178", "tree": {"sha": "08495893bf159949ca9c50b6ab47ac65cca86595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08495893bf159949ca9c50b6ab47ac65cca86595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ad2367e7310567464929e1a78c5d9c31029585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ad2367e7310567464929e1a78c5d9c31029585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ad2367e7310567464929e1a78c5d9c31029585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ad2367e7310567464929e1a78c5d9c31029585/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf728d61ac9eab580ca831f1e52584c5b828463a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf728d61ac9eab580ca831f1e52584c5b828463a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf728d61ac9eab580ca831f1e52584c5b828463a"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "278ca881f1b4360443827fa4d8261d34b60368b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad2367e7310567464929e1a78c5d9c31029585/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad2367e7310567464929e1a78c5d9c31029585/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9ad2367e7310567464929e1a78c5d9c31029585", "patch": "@@ -1,3 +1,8 @@\n+2001-08-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/mips/mips.c (mips_function_value): Handle complex return\n+        values.\n+\n 2001-08-25  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* reload1.c (reload): Make all entries in reg_equiv_memory_loc"}, {"sha": "952b260ff5fb20a792da3d69e0e39f43d8b4aeb7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad2367e7310567464929e1a78c5d9c31029585/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad2367e7310567464929e1a78c5d9c31029585/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f9ad2367e7310567464929e1a78c5d9c31029585", "patch": "@@ -7782,8 +7782,7 @@ mips_function_value (valtype, func)\n      just as PROMOTE_MODE does.  */\n   mode = promote_mode (valtype, mode, &unsignedp, 1);\n \n-  /* ??? How should we return complex float?  */\n-  if (mclass == MODE_FLOAT || mclass == MODE_COMPLEX_FLOAT)\n+  if (mclass == MODE_FLOAT)\n     {\n       if (TARGET_SINGLE_FLOAT\n \t  && (mclass == MODE_FLOAT\n@@ -7793,6 +7792,33 @@ mips_function_value (valtype, func)\n \treg = FP_RETURN;\n     }\n \n+  else if (mclass == MODE_COMPLEX_FLOAT)\n+    {\n+      if (TARGET_FLOAT64)\n+\treg = FP_RETURN;\n+      else if (mode == SCmode)\n+\t{\n+\t  /* When FP registers are 32 bits, we can't directly reference\n+\t     the odd numbered ones, so let's make a pair of evens.  */\n+\n+\t  enum machine_mode cmode = TYPE_MODE (TREE_TYPE (valtype));\n+\n+\t  return gen_rtx_PARALLEL\n+\t    (VOIDmode,\n+\t     gen_rtvec (2,\n+\t\t\tgen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t\t   gen_rtx_REG (cmode,\n+\t\t\t\t\t\t\tFP_RETURN),\n+\t\t\t\t\t   GEN_INT (0)),\n+\t\t\tgen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t\t   gen_rtx_REG (cmode,\n+\t\t\t\t\t\t\tFP_RETURN + 2),\n+\t\t\t\t\t   GEN_INT (4))));\n+\t}\n+      else\n+\treg = FP_RETURN;\n+    }\n+\n   else if (TREE_CODE (valtype) == RECORD_TYPE\n \t   && mips_abi != ABI_32\n \t   && mips_abi != ABI_O64"}]}