{"sha": "031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxYTI2YzViNzdiNTQ3NWFkODQzMGIwZGE0ZWQ0OWExYzNlODcwOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-03T18:33:14Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-03T18:33:14Z"}, "message": "linux.h: Fix comment formatting.\n\n\t* config/mips/linux.h: Fix comment formatting.\n\t* config/mips/mips.c: Likewise.\n\t* config/mips/mips.h: Likewise.\n\t* config/mips/mips.md: Likewise.\n\t* config/mips/netbsd.h: Likewise.\n\t* config/mips/windiss.h: Likewise.\n\nFrom-SVN: r75361", "tree": {"sha": "3dc7c658d50dc95587da36e2b1598b06882d7d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dc7c658d50dc95587da36e2b1598b06882d7d5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/comments", "author": null, "committer": null, "parents": [{"sha": "78a816a6ecbe42174ce11a548f4141f52903a8f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a816a6ecbe42174ce11a548f4141f52903a8f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a816a6ecbe42174ce11a548f4141f52903a8f7"}], "stats": {"total": 89, "additions": 49, "deletions": 40}, "files": [{"sha": "877775e945b56d928a4eff1852b8f3c380de5fda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "patch": "@@ -1,3 +1,12 @@\n+2004-01-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/mips/linux.h: Fix comment formatting.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/mips/mips.h: Likewise.\n+\t* config/mips/mips.md: Likewise.\n+\t* config/mips/netbsd.h: Likewise.\n+\t* config/mips/windiss.h: Likewise.\n+\n 2004-01-02  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.md (fp constant pool splitter): Reorg suppression"}, {"sha": "b10ec3a6ec6732cbef65c8efcf9837c1a36deebe", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "patch": "@@ -198,7 +198,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* The third parameter to the signal handler points to something with\n  * this structure defined in asm/ucontext.h, but the name clashes with\n- * struct ucontext from sys/ucontext.h so this private copy is used. */\n+ * struct ucontext from sys/ucontext.h so this private copy is used.  */\n typedef struct _sig_ucontext {\n     unsigned long         uc_flags;\n     struct _sig_ucontext  *uc_link;"}, {"sha": "a0b7c2644142c3538cd4de77aee2948f0e799d1a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "patch": "@@ -2352,7 +2352,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total)\n             *total = COSTS_N_INSNS (36);\n           return true;\n         }\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case UDIV:\n     case UMOD:\n@@ -2822,7 +2822,7 @@ gen_int_relational (enum rtx_code test_code, rtx result, rtx cmp0,\n \t    return 0;\n \t}\n \n-      /* allocate a pseudo to calculate the value in.  */\n+      /* Allocate a pseudo to calculate the value in.  */\n       result = gen_reg_rtx (mode);\n     }\n \n@@ -3854,7 +3854,7 @@ mips_setup_incoming_varargs (const CUMULATIVE_ARGS *cum,\n       if (fp_saved > 0)\n \t{\n \t  /* We can't use move_block_from_reg, because it will use\n-\t     the wrong mode. */\n+\t     the wrong mode.  */\n \t  enum machine_mode mode;\n \t  int off, i;\n \n@@ -4643,7 +4643,7 @@ override_options (void)\n \n   if (TARGET_SGI_O32_AS)\n     {\n-      /* They don't recognize `.[248]byte'. */\n+      /* They don't recognize `.[248]byte'.  */\n       targetm.asm_out.unaligned_op.hi = \"\\t.align 0\\n\\t.half\\t\";\n       targetm.asm_out.unaligned_op.si = \"\\t.align 0\\n\\t.word\\t\";\n       /* The IRIX 6 O32 assembler gives an error for `align 0; .dword',\n@@ -5065,7 +5065,7 @@ mips_conditional_register_usage (void)\n       for (regno = FP_REG_FIRST + 20; regno < FP_REG_FIRST + 24; regno++)\n \tcall_really_used_regs[regno] = call_used_regs[regno] = 1;\n     }\n-  /* odd registers from fp21 to fp31 are now caller saved.  */\n+  /* Odd registers from fp21 to fp31 are now caller saved.  */\n   if (mips_abi == ABI_N32)\n     {\n       int regno;\n@@ -5505,7 +5505,7 @@ print_operand_reloc (FILE *file, rtx op, const char **relocs)\n       fputc (')', file);\n }\n \f\n-/* Output address operand X to FILE.   */\n+/* Output address operand X to FILE.  */\n \n void\n print_operand_address (FILE *file, rtx x)\n@@ -7415,7 +7415,7 @@ mips_secondary_reload_class (enum reg_class class,\n     {\n       if (GET_CODE (x) == MEM)\n \t{\n-\t  /* In this case we can use lwc1, swc1, ldc1 or sdc1. */\n+\t  /* In this case we can use lwc1, swc1, ldc1 or sdc1.  */\n \t  return NO_REGS;\n \t}\n       else if (CONSTANT_P (x) && GET_MODE_CLASS (mode) == MODE_FLOAT)\n@@ -8807,15 +8807,15 @@ mips_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t  else\n \t    return 6;\n \t}\n-    }  /* from == HI_REG, etc. */\n+    }  /* from == HI_REG, etc.  */\n   else if (from == ST_REGS && GR_REG_CLASS_P (to))\n     return 4;\n   else if (COP_REG_CLASS_P (from))\n     {\n       return 5;\n     }  /* COP_REG_CLASS_P (from) */\n \n-  /* fallthru */\n+  /* Fall through.  */\n \n   return 12;\n }"}, {"sha": "651d322c0508f40ee13173d75277966809724948", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "patch": "@@ -169,7 +169,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define MASK_UNINIT_CONST_IN_RODATA \\\n \t\t\t   0x00800000\t/* Store uninitialized\n \t\t\t\t\t   consts in rodata */\n-#define MASK_FIX_SB1       0x01000000   /* Work around SB-1 errata. */\n+#define MASK_FIX_SB1       0x01000000   /* Work around SB-1 errata.  */\n \n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0\t\t/* unused */\n@@ -2661,7 +2661,7 @@ typedef struct mips_args {\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.\n-   ??? Using HImode in mips16 mode can cause overflow. */\n+   ??? Using HImode in mips16 mode can cause overflow.  */\n #define CASE_VECTOR_MODE \\\n   (TARGET_MIPS16 ? HImode : ptr_mode)\n \n@@ -2735,7 +2735,7 @@ typedef struct mips_args {\n    that the constraints of the insn are met.  Setting a cost of\n    other than 2 will allow reload to verify that the constraints are\n    met.  You should do this if the `movM' pattern's constraints do\n-   not allow such copying. */\n+   not allow such copying.  */\n \n #define REGISTER_MOVE_COST(MODE, FROM, TO)\t\t\t\t\\\n   mips_register_move_cost (MODE, FROM, TO)"}, {"sha": "2b39f3a05fde09686e136a42f1ee443a79aeca0e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "patch": "@@ -3841,7 +3841,7 @@ dsrl\\t%3,%3,1\\n\\\n \n   real_2expN (&offset, 31);\n \n-  if (reg1)\t\t\t/* turn off complaints about unreached code */\n+  if (reg1)\t\t\t/* Turn off complaints about unreached code.  */\n     {\n       emit_move_insn (reg1, CONST_DOUBLE_FROM_REAL_VALUE (offset, DFmode));\n       do_pending_stack_adjust ();\n@@ -3864,7 +3864,7 @@ dsrl\\t%3,%3,1\\n\\\n \n       emit_label (label2);\n \n-      /* allow REG_NOTES to be set on last insn (labels don't have enough\n+      /* Allow REG_NOTES to be set on last insn (labels don't have enough\n \t fields, and can't be used for REG_NOTES anyway).  */\n       emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n       DONE;\n@@ -3907,7 +3907,7 @@ dsrl\\t%3,%3,1\\n\\\n \n   emit_label (label2);\n \n-  /* allow REG_NOTES to be set on last insn (labels don't have enough\n+  /* Allow REG_NOTES to be set on last insn (labels don't have enough\n      fields, and can't be used for REG_NOTES anyway).  */\n   emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n   DONE;\n@@ -3949,7 +3949,7 @@ dsrl\\t%3,%3,1\\n\\\n \n   emit_label (label2);\n \n-  /* allow REG_NOTES to be set on last insn (labels don't have enough\n+  /* Allow REG_NOTES to be set on last insn (labels don't have enough\n      fields, and can't be used for REG_NOTES anyway).  */\n   emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n   DONE;\n@@ -3991,7 +3991,7 @@ dsrl\\t%3,%3,1\\n\\\n \n   emit_label (label2);\n \n-  /* allow REG_NOTES to be set on last insn (labels don't have enough\n+  /* Allow REG_NOTES to be set on last insn (labels don't have enough\n      fields, and can't be used for REG_NOTES anyway).  */\n   emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n   DONE;\n@@ -6868,7 +6868,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -6881,7 +6881,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n     operands[2] = force_reg (SImode, operands[2]);\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n \n@@ -6985,7 +6985,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -6998,7 +6998,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n     operands[2] = force_reg (SImode, operands[2]);\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n (define_insn \"sne_si_zero\"\n@@ -7081,7 +7081,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -7094,7 +7094,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) != 0)\n     operands[2] = force_reg (SImode, operands[2]);\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n (define_insn \"sgt_si\"\n@@ -7142,7 +7142,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -7152,7 +7152,7 @@ srl\\t%M0,%M1,%2\\n\\\n       DONE;\n     }\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n (define_insn \"sge_si\"\n@@ -7211,7 +7211,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -7221,7 +7221,7 @@ srl\\t%M0,%M1,%2\\n\\\n       DONE;\n     }\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n (define_insn \"slt_si\"\n@@ -7279,7 +7279,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -7292,7 +7292,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 32767)\n     operands[2] = force_reg (SImode, operands[2]);\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n (define_insn \"sle_si_const\"\n@@ -7405,7 +7405,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -7418,7 +7418,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) != 0)\n     operands[2] = force_reg (SImode, operands[2]);\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n (define_insn \"sgtu_si\"\n@@ -7466,7 +7466,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -7476,7 +7476,7 @@ srl\\t%M0,%M1,%2\\n\\\n       DONE;\n     }\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n (define_insn \"sgeu_si\"\n@@ -7535,7 +7535,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -7545,7 +7545,7 @@ srl\\t%M0,%M1,%2\\n\\\n       DONE;\n     }\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n (define_insn \"sltu_si\"\n@@ -7603,7 +7603,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -7616,7 +7616,7 @@ srl\\t%M0,%M1,%2\\n\\\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 32767)\n     operands[2] = force_reg (SImode, operands[2]);\n \n-  /* fall through and generate default code */\n+  /* Fall through and generate default code.  */\n })\n \n (define_insn \"sleu_si_const\""}, {"sha": "24c88139937bb720caf5ba02cafdec5c6a6dc02d", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "patch": "@@ -20,7 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-/* Define default target values. */\n+/* Define default target values.  */\n \n #undef MACHINE_TYPE\n #if TARGET_ENDIAN_DEFAULT != 0"}, {"sha": "32b92b61a3612cf7de979ea45c249c47e35cfaca", "filename": "gcc/config/mips/windiss.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fwindiss.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031a26c5b77b5475ad8430b0da4ed49a1c3e8709/gcc%2Fconfig%2Fmips%2Fwindiss.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fwindiss.h?ref=031a26c5b77b5475ad8430b0da4ed49a1c3e8709", "patch": "@@ -89,7 +89,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ENDFILE_SPEC\n #define ENDFILE_SPEC \"crtend.o%s\"\n \n-/* We have no shared libraries.  These two shouldn't be necessary. */\n+/* We have no shared libraries.  These two shouldn't be necessary.  */\n #undef LINK_SHLIB_SPEC\n #define LINK_SHLIB_SPEC \"\"\n #undef LINK_EH_SPEC"}]}