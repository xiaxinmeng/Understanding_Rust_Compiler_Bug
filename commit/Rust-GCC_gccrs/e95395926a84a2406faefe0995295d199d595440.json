{"sha": "e95395926a84a2406faefe0995295d199d595440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1Mzk1OTI2YTg0YTI0MDZmYWVmZTA5OTUyOTVkMTk5ZDU5NTQ0MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-06-18T18:12:48Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-06-18T18:12:48Z"}, "message": "i386: Fix mode of ZERO_EXTRACT RTXes, remove ext_register_operand predicate.\n\nThe mode of ZERO_EXTRACT RTX should match the mode of its LOC register\noperand.  The mode should be HI, SI or DImode to enable combine to synthesize\nextractions from HImode and DImode operands, in addition to existing SImode.\nFurther, these changes tighten allowed modes for extv, extzv and insv\nnamed patterns and finally enable removal of ext_register_operand\nspecial predicate.\n\n2020-18-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.md (*cmpqi_ext<mode>_1): Use SWI248 mode\n\titerator instead of SImode for ZERO_EXTRACT RTX.  Use SWI248\n\tmode iterator for the first operand of ZERO_EXTRACT RTX.\n\tChange ext_register_operand predicate to register_operand.\n\tRename from *cmpqi_ext_1.\n\t(*cmpqi_ext<mode>_2): Ditto.  Rename from *cmpqi_ext_2.\n\t(*cmpqi_ext<mode>_3): Ditto.  Rename from *cmpqi_ext_3.\n\t(*cmpqi_ext<mode>_4): Ditto.  Rename from *cmpqi_ext_4.\n\t(cmpi_ext_3): Use HImode instead of SImode for ZERO_EXTRACT RTX.\n\t(*extv<mode>): Use SWI24 mode iterator for the first operand\n\tof ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n\tto register_operand.\n\t(*extzv<mode>): Use SWI248 mode iterator for the first operand\n\tof ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n\tto register_operand.\n\t(*extzvqi): Use SWI248 mode iterator instead of SImode for\n\tZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first operand\n\tof ZERO_EXTRACT RTX.  Change ext_register_operand predicate to\n\tregister_operand.\n\t(*extzvqi_mem_rex64 and corresponding peephole2):  Use SWI248 mode\n\titerator instead of SImode for ZERO_EXTRACT RTX.  Use SWI248\n\tmode iterator for the first operand of ZERO_EXTRACT RTX.\n\tChange ext_register_operand predicate to register_operand.\n\t(@insv<mode>_1): Use SWI248 mode iterator for the first operand\n\tof ZERO_EXTRACT RTX.  Change ext_register_operand predicate to\n\tregister_operand.\n\t(*insvqi_1): Use SWI248 mode iterator instead of SImode\n\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the\n\tfirst operand of ZERO_EXTRACT RTX.  Change ext_register_operand\n\tpredicate to register_operand.\n\t(*insvqi_2): Ditto.\n\t(*insvqi_3): Ditto.\n\t(*insvqi_1_mem_rex64 and corresponding peephole2):  Use SWI248 mode\n\titerator instead of SImode for ZERO_EXTRACT RTX.  Use SWI248\n\tmode iterator for the first operand of ZERO_EXTRACT RTX.\n\tChange ext_register_operand predicate to register_operand.\n\t(addqi_ext_1): New expander.\n\t(*addqi_ext<mode>_1): Use SWI248 mode iterator instead of SImode\n\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first\n\toperand of ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n\tto register_operand.  Rename from *addqi_ext_1.\n\t(*addqi_ext<mode>_2): Ditto. Rename from *addqi_ext_2.\n\t(divmodqi4): Use HImode instead of SImode for ZERO_EXTRACT RTX.\n\t(udivmodqi4): Ditto.\n\t(testqi_ext_1): Use HImode instead of SImode for ZERO_EXTRACT RTX.\n\t(*testqi_ext<mode>_1): Use SWI248 mode iterator instead of SImode\n\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first\n\toperand of ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n\tto register_operand.  Rename from *testqi_ext_1.\n\t(*testqi_ext<mode>_2): Ditto.  Rename from *testqi_ext_2.\n\t(andqi_ext_1): New expander.\n\t(*andqi_ext<mode>_1): Use SWI248 mode iterator instead of SImode\n\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first\n\toperand of ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n\tto register_operand.  Rename from andqi_ext_1.\n\t(*andqi_ext<mode>_1_cc): Ditto.  Rename from *andqi_ext_1_cc.\n\t(*andqi_ext<mode>_2): Ditto.  Rename from *andqi_ext_2.\n\t(*<code>qi_ext<mode>_1): Ditto.  Rename from *<code>qi_ext_1.\n\t(*<code>qi_ext<mode>_2): Ditto.  Rename from *<code>qi_ext_2.\n\t(xorqi_ext_1_cc): Use HImode instead of SImode for ZERO_EXTRACT RTX.\n\t(*xorqi_ext<mode>_1_cc):  Use SWI248 mode iterator instead of SImode\n\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first\n\toperand of ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n\tto register_operand.  Rename from *xorqi_ext_1_cc.\n\t* config/i386/i386-expand.c (ix86_split_idivmod): Emit ZERO_EXTRACT\n\tin mode, matching its first operand.\n\t(promote_duplicated_reg): Update for renamed insv<mode>_1.\n\t* config/i386/predicates.md (ext_register_operand): Remove predicate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr78904-1a.c: New test.\n\t* gcc.target/i386/pr78904-1b.c: Ditto.\n\t* gcc.target/i386/pr78904-2a.c: Ditto.\n\t* gcc.target/i386/pr78904-2b.c: Ditto.\n\t* gcc.target/i386/pr78904-3a.c: Ditto.\n\t* gcc.target/i386/pr78904-3b.c: Ditto.\n\t* gcc.target/i386/pr78904-4a.c: Ditto.\n\t* gcc.target/i386/pr78904-4b.c: Ditto.\n\t* gcc.target/i386/pr78904-5a.c: Ditto.\n\t* gcc.target/i386/pr78904-5b.c: Ditto.\n\t* gcc.target/i386/pr78904-6a.c: Ditto.\n\t* gcc.target/i386/pr78904-6b.c: Ditto.\n\t* gcc.target/i386/pr78967-1a.c: Ditto.\n\t* gcc.target/i386/pr78967-1b.c: Ditto.\n\t* gcc.target/i386/pr78967-2a.c: Ditto.\n\t* gcc.target/i386/pr78967-2b.c: Ditto.", "tree": {"sha": "f74cbe8c782b094ca5c8635267af2d8f19656cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f74cbe8c782b094ca5c8635267af2d8f19656cf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e95395926a84a2406faefe0995295d199d595440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95395926a84a2406faefe0995295d199d595440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e95395926a84a2406faefe0995295d199d595440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95395926a84a2406faefe0995295d199d595440/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5acc654e380797bbf402bc3a0a67f9a6ac4c2a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acc654e380797bbf402bc3a0a67f9a6ac4c2a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acc654e380797bbf402bc3a0a67f9a6ac4c2a83"}], "stats": {"total": 986, "additions": 765, "deletions": 221}, "files": [{"sha": "d81dd73f034d179ee1aa993bd01e4ad01e9506fb", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -1179,9 +1179,8 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n   JUMP_LABEL (insn) = qimode_label;\n \n   /* Generate original signed/unsigned divimod.  */\n-  div = gen_divmod4_1 (operands[0], operands[1],\n-\t\t       operands[2], operands[3]);\n-  emit_insn (div);\n+  emit_insn (gen_divmod4_1 (operands[0], operands[1],\n+\t\t\t    operands[2], operands[3]));\n \n   /* Branch to the end.  */\n   emit_jump_insn (gen_jump (end_label));\n@@ -1215,18 +1214,10 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n     }\n \n   /* Extract remainder from AH.  */\n-  tmp1 = gen_rtx_ZERO_EXTRACT (GET_MODE (operands[1]),\n-\t\t\t       tmp0, GEN_INT (8), GEN_INT (8));\n-  if (REG_P (operands[1]))\n-    insn = emit_move_insn (operands[1], tmp1);\n-  else\n-    {\n-      /* Need a new scratch register since the old one has result\n-\t of 8bit divide.  */\n-      scratch = gen_reg_rtx (GET_MODE (operands[1]));\n-      emit_move_insn (scratch, tmp1);\n-      insn = emit_move_insn (operands[1], scratch);\n-    }\n+  scratch = gen_lowpart (GET_MODE (operands[1]), scratch);\n+  tmp1 = gen_rtx_ZERO_EXTRACT (GET_MODE (operands[1]), scratch,\n+\t\t\t       GEN_INT (8), GEN_INT (8));\n+  insn = emit_move_insn (operands[1], tmp1);\n   set_unique_reg_note (insn, REG_EQUAL, mod);\n \n   /* Zero extend quotient from AL.  */\n@@ -7060,10 +7051,7 @@ promote_duplicated_reg (machine_mode mode, rtx val)\n       rtx reg = convert_modes (mode, QImode, val, true);\n \n       if (!TARGET_PARTIAL_REG_STALL)\n-\tif (mode == SImode)\n-\t  emit_insn (gen_insvsi_1 (reg, reg));\n-\telse\n-\t  emit_insn (gen_insvdi_1 (reg, reg));\n+\temit_insn (gen_insv_1 (mode, reg, reg));\n       else\n \t{\n \t  tmp = expand_simple_binop (mode, ASHIFT, reg, GEN_INT (8),"}, {"sha": "d0ecd9eb6cf2ca46d834be8fbadba0a866a0b2b9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 256, "deletions": 194, "changes": 450, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -1355,13 +1355,13 @@\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*cmpqi_ext_1\"\n+(define_insn \"*cmpqi_ext<mode>_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (match_operand:QI 0 \"nonimmediate_operand\" \"QBc,m\")\n \t  (subreg:QI\n-\t    (zero_extract:SI\n-\t      (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n+\t    (zero_extract:SWI248\n+\t      (match_operand:SWI248 1 \"register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)))]\n   \"ix86_match_ccmode (insn, CCmode)\"\n@@ -1370,12 +1370,12 @@\n    (set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*cmpqi_ext_2\"\n+(define_insn \"*cmpqi_ext<mode>_2\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n-\t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\" \"Q\")\n+\t    (zero_extract:SWI248\n+\t      (match_operand:SWI248 0 \"register_operand\" \"Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n \t  (match_operand:QI 1 \"const0_operand\")))]\n@@ -1389,18 +1389,18 @@\n   [(set (reg:CC FLAGS_REG)\n \t(compare:CC\n \t  (subreg:QI\n-\t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\")\n+\t    (zero_extract:HI\n+\t      (match_operand:HI 0 \"register_operand\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n \t  (match_operand:QI 1 \"const_int_operand\")))])\n \n-(define_insn \"*cmpqi_ext_3\"\n+(define_insn \"*cmpqi_ext<mode>_3\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n-\t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\" \"Q,Q\")\n+\t    (zero_extract:SWI248\n+\t      (match_operand:SWI248 0 \"register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n \t  (match_operand:QI 1 \"general_operand\" \"QnBc,m\")))]\n@@ -1410,17 +1410,17 @@\n    (set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*cmpqi_ext_4\"\n+(define_insn \"*cmpqi_ext<mode>_4\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n-\t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\" \"Q\")\n+\t    (zero_extract:SWI248\n+\t      (match_operand:SWI248 0 \"register_operand\" \"Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n \t  (subreg:QI\n-\t    (zero_extract:SI\n-\t      (match_operand 1 \"ext_register_operand\" \"Q\")\n+\t    (zero_extract:SWI248\n+\t      (match_operand:SWI248 1 \"register_operand\" \"Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)))]\n   \"ix86_match_ccmode (insn, CCmode)\"\n@@ -2775,7 +2775,7 @@\n \n (define_insn \"*extv<mode>\"\n   [(set (match_operand:SWI24 0 \"register_operand\" \"=R\")\n-\t(sign_extract:SWI24 (match_operand 1 \"ext_register_operand\" \"Q\")\n+\t(sign_extract:SWI24 (match_operand:SWI24 1 \"register_operand\" \"Q\")\n \t\t\t    (const_int 8)\n \t\t\t    (const_int 8)))]\n   \"\"\n@@ -2807,17 +2807,18 @@\n (define_insn \"*extzvqi_mem_rex64\"\n   [(set (match_operand:QI 0 \"norex_memory_operand\" \"=Bn\")\n \t(subreg:QI\n-\t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q\")\n-\t\t\t   (const_int 8)\n-\t\t\t   (const_int 8)) 0))]\n+\t  (zero_extract:SWI248\n+\t    (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t    (const_int 8)\n+\t    (const_int 8)) 0))]\n   \"TARGET_64BIT && reload_completed\"\n   \"mov{b}\\t{%h1, %0|%0, %h1}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*extzv<mode>\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=R\")\n-\t(zero_extract:SWI248 (match_operand 1 \"ext_register_operand\" \"Q\")\n+\t(zero_extract:SWI248 (match_operand:SWI248 1 \"register_operand\" \"Q\")\n \t\t\t     (const_int 8)\n \t\t\t     (const_int 8)))]\n   \"\"\n@@ -2828,9 +2829,10 @@\n (define_insn \"*extzvqi\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=QBc,?R,m\")\n \t(subreg:QI\n-\t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n-\t\t\t   (const_int 8)\n-\t\t\t   (const_int 8)) 0))]\n+\t  (zero_extract:SWI248\n+\t    (match_operand:SWI248 1 \"register_operand\" \"Q,Q,Q\")\n+\t    (const_int 8)\n+\t    (const_int 8)) 0))]\n   \"\"\n {\n   switch (get_attr_type (insn))\n@@ -2856,17 +2858,17 @@\n (define_peephole2\n   [(set (match_operand:QI 0 \"register_operand\")\n \t(subreg:QI\n-\t  (zero_extract:SI (match_operand 1 \"ext_register_operand\")\n-\t\t\t   (const_int 8)\n-\t\t\t   (const_int 8)) 0))\n+\t  (zero_extract:SWI248 (match_operand:SWI248 1 \"register_operand\")\n+\t\t\t       (const_int 8)\n+\t\t\t       (const_int 8)) 0))\n    (set (match_operand:QI 2 \"norex_memory_operand\") (match_dup 0))]\n   \"TARGET_64BIT\n    && peep2_reg_dead_p (2, operands[0])\"\n   [(set (match_dup 2)\n \t(subreg:QI\n-\t  (zero_extract:SI (match_dup 1)\n-\t\t\t   (const_int 8)\n-\t\t\t   (const_int 8)) 0))])\n+\t  (zero_extract:SWI248 (match_dup 1)\n+\t\t\t       (const_int 8)\n+\t\t\t       (const_int 8)) 0))])\n \n (define_expand \"insv<mode>\"\n   [(set (zero_extract:SWI248 (match_operand:SWI248 0 \"register_operand\")\n@@ -2892,7 +2894,7 @@\n   else\n     dst = operands[0];\n \n-  emit_insn (gen_insv<mode>_1 (dst, operands[3]));\n+  emit_insn (gen_insv_1 (<MODE>mode, dst, operands[3]));\n \n   /* Fix up the destination if needed.  */\n   if (dst != operands[0])\n@@ -2902,20 +2904,22 @@\n })\n \n (define_insn \"*insvqi_1_mem_rex64\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (match_operand:QI 1 \"norex_memory_operand\" \"Bn\") 0))]\n   \"TARGET_64BIT && reload_completed\"\n   \"mov{b}\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"insv<mode>_1\"\n-  [(set (zero_extract:SWI248 (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n-\t\t\t     (const_int 8)\n-\t\t\t     (const_int 8))\n+(define_insn \"@insv<mode>_1\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n \t(match_operand:SWI248 1 \"general_operand\" \"QnBc,m\"))]\n   \"\"\n {\n@@ -2928,10 +2932,11 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*insvqi_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (match_operand:QI 1 \"general_operand\" \"QnBc,m\") 0))]\n   \"\"\n   \"mov{b}\\t{%1, %h0|%h0, %1}\"\n@@ -2942,37 +2947,41 @@\n (define_peephole2\n   [(set (match_operand:QI 0 \"register_operand\")\n \t(match_operand:QI 1 \"norex_memory_operand\"))\n-   (set (zero_extract:SI (match_operand 2 \"ext_register_operand\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI (match_dup 0) 0))]\n+   (set (zero_extract:SWI248 (match_operand:SWI248 2 \"register_operand\")\n+\t\t\t     (const_int 8)\n+\t\t\t     (const_int 8))\n+\t(subreg:SWI248 (match_dup 0) 0))]\n   \"TARGET_64BIT\n    && peep2_reg_dead_p (2, operands[0])\"\n-  [(set (zero_extract:SI (match_dup 2)\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t   (subreg:SI (match_dup 1) 0))])\n+  [(set (zero_extract:SWI248 (match_dup 2)\n+\t\t\t     (const_int 8)\n+\t\t\t     (const_int 8))\n+\t   (subreg:SWI248 (match_dup 1) 0))])\n \n (define_code_iterator any_extract [sign_extract zero_extract])\n \n (define_insn \"*insvqi_2\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(any_extract:SI (match_operand 1 \"ext_register_operand\" \"Q\")\n-\t\t\t(const_int 8)\n-\t\t\t(const_int 8)))]\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(any_extract:SWI248\n+\t  (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t  (const_int 8)\n+\t  (const_int 8)))]\n   \"\"\n   \"mov{b}\\t{%h1, %h0|%h0, %h1}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*insvqi_3\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(any_shiftrt:SI (match_operand:SI 1 \"register_operand\" \"Q\")\n-\t\t\t(const_int 8)))]\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(any_shiftrt:SWI248\n+\t  (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t  (const_int 8)))]\n   \"\"\n   \"mov{b}\\t{%h1, %h0|%h0, %h1}\"\n   [(set_attr \"type\" \"imov\")\n@@ -5835,16 +5844,32 @@\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"addqi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+(define_expand \"addqi_ext_1\"\n+  [(parallel\n+     [(set (zero_extract:HI (match_operand:HI 0 \"register_operand\")\n+\t\t\t    (const_int 8)\n+\t\t\t    (const_int 8))\n+\t   (subreg:HI\n+\t     (plus:QI\n+\t       (subreg:QI\n+\t\t (zero_extract:HI (match_operand:HI 1 \"register_operand\")\n+\t\t\t\t  (const_int 8)\n+\t\t\t\t  (const_int 8)) 0)\n+\t       (match_operand:QI 2 \"const_int_operand\")) 0))\n+      (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_insn \"*addqi_ext<mode>_1\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (plus:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n@@ -5872,20 +5897,23 @@\n \t(const_string \"alu\")))\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*addqi_ext_2\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+(define_insn \"*addqi_ext<mode>_2\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (plus:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"%0\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"%0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 2 \"ext_register_operand\" \"Q\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)) 0))\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)) 0))\n   (clobber (reg:CC FLAGS_REG))]\n   \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n    rtx_equal_p (operands[0], operands[1])\n@@ -8556,8 +8584,8 @@\n   emit_insn (gen_divmodhiqi3 (tmp0, tmp1, operands[2]));\n \n   /* Extract remainder from AH.  */\n-  tmp1 = gen_rtx_ZERO_EXTRACT (SImode, tmp0, GEN_INT (8), GEN_INT (8));\n-  tmp1 = lowpart_subreg (QImode, tmp1, SImode);\n+  tmp1 = gen_rtx_ZERO_EXTRACT (HImode, tmp0, GEN_INT (8), GEN_INT (8));\n+  tmp1 = lowpart_subreg (QImode, tmp1, HImode);\n   rtx_insn *insn = emit_move_insn (operands[3], tmp1);\n \n   mod = gen_rtx_MOD (QImode, operands[1], operands[2]);\n@@ -8593,8 +8621,8 @@\n   emit_insn (gen_udivmodhiqi3 (tmp0, tmp1, operands[2]));\n \n   /* Extract remainder from AH.  */\n-  tmp1 = gen_rtx_ZERO_EXTRACT (SImode, tmp0, GEN_INT (8), GEN_INT (8));\n-  tmp1 = lowpart_subreg (QImode, tmp1, SImode);\n+  tmp1 = gen_rtx_ZERO_EXTRACT (HImode, tmp0, GEN_INT (8), GEN_INT (8));\n+  tmp1 = lowpart_subreg (QImode, tmp1, HImode);\n   rtx_insn *insn = emit_move_insn (operands[3], tmp1);\n \n   mod = gen_rtx_UMOD (QImode, operands[1], operands[2]);\n@@ -8740,20 +8768,22 @@\n \t(compare:CCNO\n \t  (and:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 0 \"ext_register_operand\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n-\t      (match_operand 1 \"const_int_operand\"))\n+\t      (zero_extract:HI\n+\t        (match_operand:HI 0 \"register_operand\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n+\t      (match_operand:QI 1 \"const_int_operand\"))\n \t  (const_int 0)))])\n \n-(define_insn \"*testqi_ext_1\"\n+(define_insn \"*testqi_ext<mode>_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"Q,Q\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 0 \"register_operand\" \"Q,Q\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (match_operand:QI 1 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n@@ -8762,18 +8792,20 @@\n    (set_attr \"type\" \"test\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*testqi_ext_2\"\n+(define_insn \"*testqi_ext<mode>_2\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"Q\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 0 \"register_operand\" \"Q\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0))\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0))\n \t  (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\t{%h1, %h0|%h0, %h1}\"\n@@ -9312,16 +9344,32 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"andqi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+(define_expand \"andqi_ext_1\"\n+  [(parallel\n+     [(set (zero_extract:HI (match_operand:HI 0 \"register_operand\")\n+\t\t\t    (const_int 8)\n+\t\t\t    (const_int 8))\n+\t   (subreg:HI\n+\t     (and:QI\n+\t       (subreg:QI\n+\t\t (zero_extract:HI (match_operand:HI 1 \"register_operand\")\n+\t\t\t\t  (const_int 8)\n+\t\t\t\t  (const_int 8)) 0)\n+\t       (match_operand:QI 2 \"const_int_operand\")) 0))\n+      (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_insn \"*andqi_ext<mode>_1\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (and:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n@@ -9333,25 +9381,28 @@\n \n ;; Generated by peephole translating test to and.  This shows up\n ;; often in fp comparisons.\n-(define_insn \"*andqi_ext_1_cc\"\n+(define_insn \"*andqi_ext<mode>_1_cc\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n-   (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+   (set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (and:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_dup 1)\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_dup 1)\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (match_dup 2)) 0))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n@@ -9361,20 +9412,23 @@\n    (set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*andqi_ext_2\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+(define_insn \"*andqi_ext<mode>_2\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (and:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"%0\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"%0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 2 \"ext_register_operand\" \"Q\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)) 0))\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n    rtx_equal_p (operands[0], operands[1])\n@@ -9743,16 +9797,18 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<code>qi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+(define_insn \"*<code>qi_ext<mode>_1\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (any_or:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n@@ -9763,20 +9819,23 @@\n    (set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*<code>qi_ext_2\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+(define_insn \"*<code>qi_ext<mode>_2\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (any_or:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"%0\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"%0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 2 \"ext_register_operand\" \"Q\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)) 0))\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n@@ -9839,46 +9898,49 @@\n })\n \n (define_expand \"xorqi_ext_1_cc\"\n-  [(parallel [\n-     (set (reg:CCNO FLAGS_REG)\n-\t  (compare:CCNO\n-\t    (xor:QI\n-\t      (subreg:QI\n-\t\t(zero_extract:SI (match_operand 1 \"ext_register_operand\")\n-\t\t\t\t (const_int 8)\n-\t\t\t\t (const_int 8)) 0)\n-\t      (match_operand 2 \"const_int_operand\"))\n-\t    (const_int 0)))\n-     (set (zero_extract:SI (match_operand 0 \"ext_register_operand\")\n-\t\t\t   (const_int 8)\n-\t\t\t   (const_int 8))\n-\t  (subreg:SI\n-\t    (xor:QI\n-\t      (subreg:QI\n-\t\t(zero_extract:SI (match_dup 1)\n-\t\t\t\t (const_int 8)\n-\t\t\t\t (const_int 8)) 0)\n-\t    (match_dup 2)) 0))])])\n-\n-(define_insn \"*xorqi_ext_1_cc\"\n+  [(parallel\n+     [(set (reg:CCNO FLAGS_REG)\n+\t   (compare:CCNO\n+\t     (xor:QI\n+\t       (subreg:QI\n+\t\t (zero_extract:HI (match_operand:HI 1 \"register_operand\")\n+\t\t\t\t  (const_int 8)\n+\t\t\t\t  (const_int 8)) 0)\n+\t       (match_operand:QI 2 \"const_int_operand\"))\n+\t     (const_int 0)))\n+      (set (zero_extract:HI (match_operand:HI 0 \"register_operand\")\n+\t\t\t    (const_int 8)\n+\t\t\t    (const_int 8))\n+\t   (subreg:HI\n+\t     (xor:QI\n+\t       (subreg:QI\n+\t\t (zero_extract:HI (match_dup 1)\n+\t\t\t\t  (const_int 8)\n+\t\t\t\t  (const_int 8)) 0)\n+\t     (match_dup 2)) 0))])])\n+\n+(define_insn \"*xorqi_ext<mode>_1_cc\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (xor:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n-   (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n+   (set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n \t  (xor:QI\n \t    (subreg:QI\n-\t      (zero_extract:SI (match_dup 1)\n-\t\t\t       (const_int 8)\n-\t\t\t       (const_int 8)) 0)\n+\t      (zero_extract:SWI248\n+\t        (match_dup 1)\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n \t  (match_dup 2)) 0))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n@@ -19409,9 +19471,9 @@\n \t(match_operator 1 \"compare_operator\"\n \t  [(and:QI\n \t     (subreg:QI\n-\t       (zero_extract:SI (match_operand 2 \"QIreg_operand\")\n-\t\t\t\t(const_int 8)\n-\t\t\t\t(const_int 8)) 0)\n+\t       (zero_extract:SWI248 (match_operand:SWI248 2 \"QIreg_operand\")\n+\t\t\t\t    (const_int 8)\n+\t\t\t\t    (const_int 8)) 0)\n \t     (match_operand 3 \"const_int_operand\"))\n \t   (const_int 0)]))]\n   \"! TARGET_PARTIAL_REG_STALL\n@@ -19423,20 +19485,20 @@\n \t   (match_op_dup 1\n \t     [(and:QI\n \t\t(subreg:QI\n-\t\t  (zero_extract:SI (match_dup 2)\n-\t\t\t\t   (const_int 8)\n-\t\t\t\t   (const_int 8)) 0)\n+\t\t  (zero_extract:SWI248 (match_dup 2)\n+\t\t\t\t       (const_int 8)\n+\t\t\t\t       (const_int 8)) 0)\n \t\t(match_dup 3))\n \t      (const_int 0)]))\n-      (set (zero_extract:SI (match_dup 2)\n-\t\t\t    (const_int 8)\n-\t\t\t    (const_int 8))\n-\t   (subreg:SI\n+      (set (zero_extract:SWI248 (match_dup 2)\n+\t\t\t\t(const_int 8)\n+\t\t\t\t(const_int 8))\n+\t   (subreg:SWI248\n \t     (and:QI\n \t       (subreg:QI\n-\t\t (zero_extract:SI (match_dup 2)\n-\t\t\t\t  (const_int 8)\n-\t\t\t\t  (const_int 8)) 0)\n+\t\t (zero_extract:SWI248 (match_dup 2)\n+\t\t\t\t      (const_int 8)\n+\t\t\t\t      (const_int 8)) 0)\n \t       (match_dup 3)) 0))])])\n \n ;; Don't do logical operations with memory inputs."}, {"sha": "07e69d555c02618c53820931d7c45fe454cbafa0", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -87,14 +87,6 @@\n   (and (match_code \"reg\")\n        (match_test \"REGNO (op) == FLAGS_REG\")))\n \n-;; Match a DI, SI or HImode register for a zero_extract.\n-(define_special_predicate \"ext_register_operand\"\n-  (and (match_operand 0 \"register_operand\")\n-       (ior (and (match_test \"TARGET_64BIT\")\n-\t\t (match_test \"GET_MODE (op) == DImode\"))\n-\t    (match_test \"GET_MODE (op) == SImode\")\n-\t    (match_test \"GET_MODE (op) == HImode\"))))\n-\n ;; Match a DI, SI, HI or QImode nonimmediate_operand.\n (define_special_predicate \"int_nonimmediate_operand\"\n   (and (match_operand 0 \"nonimmediate_operand\")"}, {"sha": "7746477d745b41f3920ade365f26ca0f7b7b5bf3", "filename": "gcc/testsuite/gcc.target/i386/pr78904-1a.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-1a.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,47 @@\n+/* PR target/78904 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+/* { dg-final { scan-assembler-not \"movb\" } } */\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+};\n+\n+struct S1 test_and (struct S1 a, struct S1 b)\n+{\n+  a.val &= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]andb\" } } */\n+\n+struct S1 test_or (struct S1 a, struct S1 b)\n+{\n+  a.val |= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]orb\" } } */\n+\n+struct S1 test_xor (struct S1 a, struct S1 b)\n+{\n+  a.val ^= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xorb\" } } */\n+\n+struct S1 test_add (struct S1 a, struct S1 b)\n+{\n+  a.val += b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]addb\" } } */"}, {"sha": "20b677252ab5f1b0f61a8079b415385e9badda3a", "filename": "gcc/testsuite/gcc.target/i386/pr78904-1b.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-1b.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,49 @@\n+/* PR target/78904 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+/* { dg-final { scan-assembler-not \"movb\" } } */\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+  unsigned int pad3;\n+};\n+\n+struct S1 test_and (struct S1 a, struct S1 b)\n+{\n+  a.val &= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]andb\" } } */\n+\n+struct S1 test_or (struct S1 a, struct S1 b)\n+{\n+  a.val |= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]orb\" } } */\n+\n+struct S1 test_xor (struct S1 a, struct S1 b)\n+{\n+  a.val ^= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xorb\" } } */\n+\n+struct S1 test_add (struct S1 a, struct S1 b)\n+{\n+  a.val += b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]addb\" } } */"}, {"sha": "41eaa25915819b936805042222d248052365b960", "filename": "gcc/testsuite/gcc.target/i386/pr78904-2a.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2a.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,48 @@\n+/* PR target/78904 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target nonpic } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+};\n+\n+extern struct S1 t;\n+\n+struct S1 test_and (struct S1 a)\n+{\n+  a.val &= t.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]andb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */\n+\n+struct S1 test_or (struct S1 a)\n+{\n+  a.val |= t.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]orb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */\n+\n+struct S1 test_xor (struct S1 a)\n+{\n+  a.val ^= t.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xorb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */\n+\n+struct S1 test_add (struct S1 a)\n+{\n+  a.val += t.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]addb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */"}, {"sha": "23e975ac93ef2e38d601e5b4fb9167e5f00a39d9", "filename": "gcc/testsuite/gcc.target/i386/pr78904-2b.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2b.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,50 @@\n+/* PR target/78904 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target nonpic } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+  unsigned int pad3;\n+};\n+\n+extern struct S1 t;\n+\n+struct S1 test_and (struct S1 a)\n+{\n+  a.val &= t.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]andb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */\n+\n+struct S1 test_or (struct S1 a)\n+{\n+  a.val |= t.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]orb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */\n+\n+struct S1 test_xor (struct S1 a)\n+{\n+  a.val ^= t.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xorb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */\n+\n+struct S1 test_add (struct S1 a)\n+{\n+  a.val += t.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]addb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */"}, {"sha": "2827b380b6c8ef116616d433ecca03e33bdefb5f", "filename": "gcc/testsuite/gcc.target/i386/pr78904-3a.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-3a.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/78904 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+extern struct S1 t[256];\n+\n+struct S1 test_and (struct S1 a, size_t i)\n+{\n+  a.val &= t[i].val;\n+\n+  return a;\n+}\n+\n+struct S1 test_or (struct S1 a, size_t i)\n+{\n+  a.val |= t[i].val;\n+\n+  return a;\n+}\n+\n+struct S1 test_xor (struct S1 a, size_t i)\n+{\n+  a.val ^= t[i].val;\n+\n+  return a;\n+}\n+\n+struct S1 test_add (struct S1 a, size_t i)\n+{\n+  a.val += t[i].val;\n+\n+  return a;\n+}"}, {"sha": "0c73cbc2ec960e494b6dc9438abfb66e8eeaa49e", "filename": "gcc/testsuite/gcc.target/i386/pr78904-3b.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-3b.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,43 @@\n+/* PR target/78904 */\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+  unsigned int pad3;\n+};\n+\n+extern struct S1 t[256];\n+\n+struct S1 test_and (struct S1 a, size_t i)\n+{\n+  a.val &= t[i].val;\n+\n+  return a;\n+}\n+\n+struct S1 test_or (struct S1 a, size_t i)\n+{\n+  a.val |= t[i].val;\n+\n+  return a;\n+}\n+\n+struct S1 test_xor (struct S1 a, size_t i)\n+{\n+  a.val ^= t[i].val;\n+\n+  return a;\n+}\n+\n+struct S1 test_add (struct S1 a, size_t i)\n+{\n+  a.val += t[i].val;\n+\n+  return a;\n+}"}, {"sha": "5e6159a7648af6e22ccaa2e29f418d7cd8db0208", "filename": "gcc/testsuite/gcc.target/i386/pr78904-4a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4a.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/78904 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target nonpic } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+};\n+\n+extern unsigned char t[256];\n+\n+void foo (struct S1 a, size_t i)\n+{\n+  t[i] = a.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[\\t \\]+%.h, t\" } } */"}, {"sha": "ab7434f3de4c2ae941a5a996fa94798d47bb1448", "filename": "gcc/testsuite/gcc.target/i386/pr78904-4b.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4b.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/78904 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target nonpic } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+  unsigned int pad3;\n+};\n+\n+extern unsigned char t[256];\n+\n+void foo (struct S1 a, size_t i)\n+{\n+  t[i] = a.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[\\t \\]+%.h, t\" } } */"}, {"sha": "d078d79b73a57179293f0d6d27f62abc3775832e", "filename": "gcc/testsuite/gcc.target/i386/pr78904-5a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-5a.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/78904 */\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+};\n+\n+extern unsigned char t[256];\n+\n+void foo (struct S1 a, size_t i)\n+{\n+  register size_t _i __asm (\"r10\") = i;\n+\n+  asm volatile (\"\" : \"+r\" (_i));\n+  t[_i] = a.val;\n+}"}, {"sha": "9490030d772c4558e731fc272039763ce0849efc", "filename": "gcc/testsuite/gcc.target/i386/pr78904-5b.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-5b.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/78904 */\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+  unsigned int pad3;\n+};\n+\n+extern unsigned char t[256];\n+\n+void foo (struct S1 a, size_t i)\n+{\n+  register size_t _i __asm (\"r10\") = i;\n+\n+  asm volatile (\"\" : \"+r\" (_i));\n+  t[_i] = a.val;\n+}"}, {"sha": "ab296a2e1737e764b2e3617fbfdefaefe7d4308d", "filename": "gcc/testsuite/gcc.target/i386/pr78904-6a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-6a.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/78904 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target nonpic } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  char pad1;\n+  char val;\n+};\n+\n+extern char t[256];\n+\n+void foo (struct S1 a, size_t i)\n+{\n+  t[i] = a.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[\\t \\]*%.h, t\" } } */"}, {"sha": "235bfe7d0428cde852aafdad89ca271f0263202b", "filename": "gcc/testsuite/gcc.target/i386/pr78904-6b.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-6b.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/78904 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target nonpic } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  char pad1;\n+  char val;\n+  short pad2;\n+  int pad3;\n+};\n+\n+extern char t[256];\n+\n+void foo (struct S1 a, size_t i)\n+{\n+  t[i] = a.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[\\t \\]*%.h, t\" } } */"}, {"sha": "007c50646b68523950b62606a5364a38769e6705", "filename": "gcc/testsuite/gcc.target/i386/pr78967-1a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-1a.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/78967 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-additional-options \"-mregparm=3\" { target ia32 } } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+};\n+\n+struct S1 foo (struct S1 a, struct S1 b)\n+{\n+  a.val = b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[ \\t\\]+%.h, %.h\" } } */"}, {"sha": "7e7144379f3d95af0cdc1bd7e43826e2bf6ef499", "filename": "gcc/testsuite/gcc.target/i386/pr78967-1b.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-1b.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/78967 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+  unsigned int pad3;\n+};\n+\n+struct S1 foo (struct S1 a, struct S1 b)\n+{\n+  a.val = b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[ \\t\\]+%.h, %.h\" } } */"}, {"sha": "ce61cabf414eaf8d3ac0e4fb17e2a42bdecc7468", "filename": "gcc/testsuite/gcc.target/i386/pr78967-2a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-2a.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/78967 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-require-effective-target nonpic } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+};\n+\n+extern unsigned char t[256];\n+\n+struct S1 foo (struct S1 a, size_t i)\n+{\n+  a.val = t[i];\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */"}, {"sha": "ce38ac4d0bffe72dbb1987977cbe48e76ad47f77", "filename": "gcc/testsuite/gcc.target/i386/pr78967-2b.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95395926a84a2406faefe0995295d199d595440/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-2b.c?ref=e95395926a84a2406faefe0995295d199d595440", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/78967 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-require-effective-target nonpic } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+  unsigned int pad3;\n+};\n+\n+extern unsigned char t[256];\n+\n+struct S1 foo (struct S1 a, size_t i)\n+{\n+  a.val = t[i];\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */"}]}