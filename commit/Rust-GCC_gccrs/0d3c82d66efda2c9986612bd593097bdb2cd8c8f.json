{"sha": "0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQzYzgyZDY2ZWZkYTJjOTk4NjYxMmJkNTkzMDk3YmRiMmNkOGM4Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-04-07T13:08:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-04-07T13:08:24Z"}, "message": "invoke.texi (-fargument-alias, [...]): Remove.\n\n2010-04-07  Richard Guenther  <rguenther@suse.de>\n\n\t* doc/invoke.texi (-fargument-alias, -fargument-noalias,\n\t-fargument-noalias-global, -fargument-noalias-anything): Remove.\n\t* common.opt: Likewise.\n\t* tree-ssa-structalias.c (intra_create_variable_infos): Adjust\n\tcomment.\n\t* alias.c (base_alias_check): Remove flag_argument_noalias\n\thandling.\n\t(nonoverlapping_memrefs_p): Likewise.\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Likewise.\n\t* opts.c (common_handle_option): Handle OPT_fargument_alias,\n\tOPT_fargument_noalias, OPT_fargument_noalias_anything and\n\tOPT_fargument_noalias_global for backward compatibility.\n\n\tfortran/\n\t* options.c (gfc_init_options): Do not set.\n\nFrom-SVN: r158060", "tree": {"sha": "9913b9e1755325b176aaacb644c4fe572d4b95d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9913b9e1755325b176aaacb644c4fe572d4b95d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12bd5a1e9f42026f7ead1bad788f9cade67f88b7"}], "stats": {"total": 122, "additions": 35, "deletions": 87}, "files": [{"sha": "af2e371faa80452aec71d1e5c262684dc3ea19c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "patch": "@@ -1,3 +1,18 @@\n+2010-04-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (-fargument-alias, -fargument-noalias,\n+\t-fargument-noalias-global, -fargument-noalias-anything): Remove.\n+\t* common.opt: Likewise.\n+\t* tree-ssa-structalias.c (intra_create_variable_infos): Adjust\n+\tcomment.\n+\t* alias.c (base_alias_check): Remove flag_argument_noalias\n+\thandling.\n+\t(nonoverlapping_memrefs_p): Likewise.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Likewise.\n+\t* opts.c (common_handle_option): Handle OPT_fargument_alias,\n+\tOPT_fargument_noalias, OPT_fargument_noalias_anything and\n+\tOPT_fargument_noalias_global for backward compatibility.\n+\n 2010-04-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43270"}, {"sha": "c10b971e3df035447f3e7fcd457169ebab1319f2", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "patch": "@@ -1691,14 +1691,7 @@ base_alias_check (rtx x, rtx y, enum machine_mode x_mode,\n       || (GET_CODE (y_base) == ADDRESS && GET_MODE (y_base) == Pmode))\n     return 0;\n \n-  if (! flag_argument_noalias)\n-    return 1;\n-\n-  if (flag_argument_noalias > 1)\n-    return 0;\n-\n-  /* Weak noalias assertion (arguments are distinct, but may match globals).  */\n-  return ! (GET_MODE (x_base) == VOIDmode && GET_MODE (y_base) == VOIDmode);\n+  return 1;\n }\n \n /* Convert the address X into something we can use.  This is done by returning\n@@ -2189,13 +2182,6 @@ nonoverlapping_memrefs_p (const_rtx x, const_rtx y)\n \texprx = t;\n       }\n     }\n-  else if (INDIRECT_REF_P (exprx))\n-    {\n-      exprx = TREE_OPERAND (exprx, 0);\n-      if (flag_argument_noalias < 2\n-\t  || TREE_CODE (exprx) != PARM_DECL)\n-\treturn 0;\n-    }\n \n   moffsety = MEM_OFFSET (y);\n   if (TREE_CODE (expry) == COMPONENT_REF)\n@@ -2217,13 +2203,6 @@ nonoverlapping_memrefs_p (const_rtx x, const_rtx y)\n \texpry = t;\n       }\n     }\n-  else if (INDIRECT_REF_P (expry))\n-    {\n-      expry = TREE_OPERAND (expry, 0);\n-      if (flag_argument_noalias < 2\n-\t  || TREE_CODE (expry) != PARM_DECL)\n-\treturn 0;\n-    }\n \n   if (! DECL_P (exprx) || ! DECL_P (expry))\n     return 0;"}, {"sha": "2b8b6d7062019723ef11fe51a0be2b1d8eb08ae4", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "patch": "@@ -307,29 +307,21 @@ Align the start of loops\n falign-loops=\n Common RejectNegative Joined UInteger\n \n-; This flag is only tested if alias checking is enabled.\n-; 0 if pointer arguments may alias each other.  True in C.\n-; 1 if pointer arguments may not alias each other but may alias\n-;   global variables.\n-; 2 if pointer arguments may not alias each other and may not\n-;   alias global variables.\n-; 3 if pointer arguments may not alias anything.  True in Fortran.\n-;   Set by the front end.\n fargument-alias\n-Common Report Var(flag_argument_noalias,0) Optimization\n-Specify that arguments may alias each other and globals\n+Common\n+Does nothing. Preserved for backward compatibility.\n \n fargument-noalias\n-Common Report Var(flag_argument_noalias,1) VarExists Optimization\n-Assume arguments may alias globals but not each other\n+Common\n+Does nothing. Preserved for backward compatibility.\n \n fargument-noalias-global\n-Common Report Var(flag_argument_noalias,2) VarExists Optimization\n-Assume arguments alias neither each other nor globals\n+Common\n+Does nothing. Preserved for backward compatibility.\n \n fargument-noalias-anything\n-Common Report Var(flag_argument_noalias,3) VarExists Optimization\n-Assume arguments alias no other storage\n+Common\n+Does nothing. Preserved for backward compatibility.\n \n fasynchronous-unwind-tables\n Common Report Var(flag_asynchronous_unwind_tables) Optimization"}, {"sha": "76c424024e04adfe809114006ac1032607462706", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "patch": "@@ -916,8 +916,7 @@ See S/390 and zSeries Options.\n -fshort-double  -fshort-wchar @gol\n -fverbose-asm  -fpack-struct[=@var{n}]  -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n--fno-stack-limit  -fargument-alias  -fargument-noalias @gol\n--fargument-noalias-global  -fargument-noalias-anything @gol\n+-fno-stack-limit @gol\n -fleading-underscore  -ftls-model=@var{model} @gol\n -ftrapv  -fwrapv  -fbounds-check @gol\n -fvisibility}\n@@ -17444,31 +17443,6 @@ and grows downwards, you can use the flags\n @option{-Wl,--defsym,__stack_limit=0x7ffe0000} to enforce a stack limit\n of 128KB@.  Note that this may only work with the GNU linker.\n \n-@cindex aliasing of parameters\n-@cindex parameters, aliased\n-@item -fargument-alias\n-@itemx -fargument-noalias\n-@itemx -fargument-noalias-global\n-@itemx -fargument-noalias-anything\n-@opindex fargument-alias\n-@opindex fargument-noalias\n-@opindex fargument-noalias-global\n-@opindex fargument-noalias-anything\n-Specify the possible relationships among parameters and between\n-parameters and global data.\n-\n-@option{-fargument-alias} specifies that arguments (parameters) may\n-alias each other and may alias global storage.@*\n-@option{-fargument-noalias} specifies that arguments do not alias\n-each other, but may alias global storage.@*\n-@option{-fargument-noalias-global} specifies that arguments do not\n-alias each other and do not alias global storage.\n-@option{-fargument-noalias-anything} specifies that arguments do not\n-alias any other storage.\n-\n-Each language will automatically use whatever option is required by\n-the language standard.  You should not need to use these options yourself.\n-\n @item -fleading-underscore\n @opindex fleading-underscore\n This option and its counterpart, @option{-fno-leading-underscore}, forcibly"}, {"sha": "ab46195fcb9eeff05694ffa371c9059106392875", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "patch": "@@ -1751,14 +1751,6 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t\t the size we got from the type?  */\n \t    }\n \n-\t  else if (flag_argument_noalias > 1\n-\t\t   && (INDIRECT_REF_P (t2))\n-\t\t   && TREE_CODE (TREE_OPERAND (t2, 0)) == PARM_DECL)\n-\t    {\n-\t      expr = t2;\n-\t      offset = NULL;\n-\t    }\n-\n \t  /* If this is an indirect reference, record it.  */\n \t  else if (TREE_CODE (t) == INDIRECT_REF\n \t\t   || TREE_CODE (t) == MISALIGNED_INDIRECT_REF)\n@@ -1769,16 +1761,6 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t    }\n \t}\n \n-      /* If this is a Fortran indirect argument reference, record the\n-\t parameter decl.  */\n-      else if (flag_argument_noalias > 1\n-\t       && (INDIRECT_REF_P (t))\n-\t       && TREE_CODE (TREE_OPERAND (t, 0)) == PARM_DECL)\n-\t{\n-\t  expr = t;\n-\t  offset = NULL;\n-\t}\n-\n       /* If this is an indirect reference, record it.  */\n       else if (TREE_CODE (t) == INDIRECT_REF\n \t       || TREE_CODE (t) == MISALIGNED_INDIRECT_REF)"}, {"sha": "2b1aa30b4071945b4773eabe5d84656e2d89183f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "patch": "@@ -1,3 +1,7 @@\n+2010-04-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* options.c (gfc_init_options): Do not set.\n+\n 2010-04-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "bcbf69549b3ac75927396b2b9cb7dc7e5e56e460", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "patch": "@@ -132,9 +132,6 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.rtcheck = 0;\n   gfc_option.coarray = GFC_FCOARRAY_NONE;\n \n-  /* Argument pointers cannot point to anything but their argument.  */\n-  flag_argument_noalias = 3;\n-\n   flag_errno_math = 0;\n \n   set_default_std_flags ();"}, {"sha": "7c928bb4c0305e9169704ec35ba9afac409f0bc1", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "patch": "@@ -2127,6 +2127,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_ftree_salias:\n     case OPT_ftree_store_ccp:\n     case OPT_Wunreachable_code:\n+    case OPT_fargument_alias:\n+    case OPT_fargument_noalias:\n+    case OPT_fargument_noalias_anything:\n+    case OPT_fargument_noalias_global:\n       /* These are no-ops, preserved for backward compatibility.  */\n       break;\n "}, {"sha": "1516634b8713f9323c437c906bc2f0154daad3d2", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3c82d66efda2c9986612bd593097bdb2cd8c8f/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=0d3c82d66efda2c9986612bd593097bdb2cd8c8f", "patch": "@@ -4611,7 +4611,8 @@ intra_create_variable_infos (void)\n   tree t;\n \n   /* For each incoming pointer argument arg, create the constraint ARG\n-     = NONLOCAL or a dummy variable if flag_argument_noalias is set.  */\n+     = NONLOCAL or a dummy variable if it is a restrict qualified\n+     passed-by-reference argument.  */\n   for (t = DECL_ARGUMENTS (current_function_decl); t; t = TREE_CHAIN (t))\n     {\n       varinfo_t p;"}]}