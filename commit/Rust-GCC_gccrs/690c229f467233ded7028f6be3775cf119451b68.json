{"sha": "690c229f467233ded7028f6be3775cf119451b68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkwYzIyOWY0NjcyMzNkZWQ3MDI4ZjZiZTM3NzVjZjExOTQ1MWI2OA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2014-04-02T17:03:49Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2014-04-02T17:03:49Z"}, "message": "re PR target/60735 (GCC targeting E500 with SPE has errors with the _Decimal64 type)\n\n2014-04-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/60735\n\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): If we have\n\tsoftware floating point or no floating point registers, do not\n\tallow any type in the FPRs.  Eliminate a test for SPE SIMD types\n\tin GPRs that occurs after we tested for GPRs that would never be\n\ttrue.\n\n\t* config/rs6000/rs6000.md (mov<mode>_softfloat32, FMOVE64):\n\tRewrite tests to use TARGET_DOUBLE_FLOAT and TARGET_E500_DOUBLE,\n\tsince the FMOVE64 type is DFmode/DDmode.  If TARGET_E500_DOUBLE,\n\tspecifically allow DDmode, since that does not use the SPE SIMD\n\tinstructions.\n\nFrom-SVN: r209025", "tree": {"sha": "adc558ad63fb094a6801b55ad237732881f3f0bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adc558ad63fb094a6801b55ad237732881f3f0bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/690c229f467233ded7028f6be3775cf119451b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690c229f467233ded7028f6be3775cf119451b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/690c229f467233ded7028f6be3775cf119451b68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690c229f467233ded7028f6be3775cf119451b68/comments", "author": null, "committer": null, "parents": [{"sha": "7b59ff2d552e6aa8f923f45459bf98c5adc5cf66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b59ff2d552e6aa8f923f45459bf98c5adc5cf66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b59ff2d552e6aa8f923f45459bf98c5adc5cf66"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "31ff90d0aaeec447b8d44e80431bfe5a4d39fcc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690c229f467233ded7028f6be3775cf119451b68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690c229f467233ded7028f6be3775cf119451b68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=690c229f467233ded7028f6be3775cf119451b68", "patch": "@@ -1,3 +1,18 @@\n+2014-04-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/60735\n+\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): If we have\n+\tsoftware floating point or no floating point registers, do not\n+\tallow any type in the FPRs.  Eliminate a test for SPE SIMD types\n+\tin GPRs that occurs after we tested for GPRs that would never be\n+\ttrue.\n+\n+\t* config/rs6000/rs6000.md (mov<mode>_softfloat32, FMOVE64):\n+\tRewrite tests to use TARGET_DOUBLE_FLOAT and TARGET_E500_DOUBLE,\n+\tsince the FMOVE64 type is DFmode/DDmode.  If TARGET_E500_DOUBLE,\n+\tspecifically allow DDmode, since that does not use the SPE SIMD\n+\tinstructions.\n+\n 2014-04-02  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/60729"}, {"sha": "c50019198d6dd9da93cd1045a8f63df6a2c2fde4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690c229f467233ded7028f6be3775cf119451b68/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690c229f467233ded7028f6be3775cf119451b68/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=690c229f467233ded7028f6be3775cf119451b68", "patch": "@@ -1752,6 +1752,9 @@ rs6000_hard_regno_mode_ok (int regno, enum machine_mode mode)\n      modes and DImode.  */\n   if (FP_REGNO_P (regno))\n     {\n+      if (TARGET_SOFT_FLOAT || !TARGET_FPRS)\n+\treturn 0;\n+\n       if (SCALAR_FLOAT_MODE_P (mode)\n \t  && (mode != TDmode || (regno % 2) == 0)\n \t  && FP_REGNO_P (last_regno))\n@@ -1780,10 +1783,6 @@ rs6000_hard_regno_mode_ok (int regno, enum machine_mode mode)\n     return (VECTOR_MEM_ALTIVEC_OR_VSX_P (mode)\n \t    || mode == V1TImode);\n \n-  /* ...but GPRs can hold SIMD data on the SPE in one register.  */\n-  if (SPE_SIMD_REGNO_P (regno) && TARGET_SPE && SPE_VECTOR_MODE (mode))\n-    return 1;\n-\n   /* We cannot put non-VSX TImode or PTImode anywhere except general register\n      and it must be able to fit within the register set.  */\n "}, {"sha": "9e1df980813bb38a0709956fd59bd058ae80e760", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690c229f467233ded7028f6be3775cf119451b68/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690c229f467233ded7028f6be3775cf119451b68/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=690c229f467233ded7028f6be3775cf119451b68", "patch": "@@ -9394,8 +9394,9 @@\n   [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=Y,r,r,r,r,r\")\n \t(match_operand:FMOVE64 1 \"input_operand\" \"r,Y,r,G,H,F\"))]\n   \"! TARGET_POWERPC64 \n-   && ((TARGET_FPRS && TARGET_SINGLE_FLOAT) \n-       || TARGET_SOFT_FLOAT || TARGET_E500_SINGLE)\n+   && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) \n+       || TARGET_SOFT_FLOAT\n+       || (<MODE>mode == DDmode && TARGET_E500_DOUBLE))\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n   \"#\""}]}