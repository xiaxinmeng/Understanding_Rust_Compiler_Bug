{"sha": "ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU0OGI3NGNhMGMwYmEzM2QzOTZhNmViYWQ3YTFjMGE2ZGFkYjFmNw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-19T00:07:07Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-19T19:00:41Z"}, "message": "c++: Fix array new with value-initialization [PR97523]\n\nSince my r11-3092 the following is rejected with -std=c++20:\n\n  struct T { explicit T(); };\n  void fn(int n) {\n    new T[1]();\n  }\n\nwith \"would use explicit constructor 'T::T()'\".  It is because since\nthat change we go into the P1009 block in build_new (array_p is false,\nbut nelts is non-null and we're in C++20).  Since we only have (), we\nbuild a {} and continue to build_new_1, which then calls build_vec_init\nand then we error because the {} isn't CONSTRUCTOR_IS_DIRECT_INIT.\n\nFor (), which is value-initializing, we want to do what we were doing\nbefore: pass empty init and let build_value_init take care of it.\n\nFor various reasons I wanted to dig a little bit deeper into this,\nand as a result, I'm adding a test for [expr.new]/24 (and checked that\nout current behavior matches clang++).\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97523\n\t* init.c (build_new): When value-initializing an array new,\n\tleave the INIT as an empty vector.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97523\n\t* g++.dg/expr/anew5.C: New test.\n\t* g++.dg/expr/anew6.C: New test.", "tree": {"sha": "115dc14a237f248003d2f6e875dd29931a089ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/115dc14a237f248003d2f6e875dd29931a089ea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25056bdf94d5f3e66bef039702f7fae799ef16b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25056bdf94d5f3e66bef039702f7fae799ef16b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25056bdf94d5f3e66bef039702f7fae799ef16b9"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "0b98f338feb53c309a3ac9914666ae64bb37b134", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7", "patch": "@@ -3766,7 +3766,11 @@ build_new (location_t loc, vec<tree, va_gc> **placement, tree type,\n \n   /* P1009: Array size deduction in new-expressions.  */\n   const bool array_p = TREE_CODE (type) == ARRAY_TYPE;\n-  if (*init && (array_p || (nelts && cxx_dialect >= cxx20)))\n+  if (*init\n+      /* If ARRAY_P, we have to deduce the array bound.  For C++20 paren-init,\n+\t we have to process the parenthesized-list.  But don't do it for (),\n+\t which is value-initialization, and INIT should stay empty.  */\n+      && (array_p || (cxx_dialect >= cxx20 && nelts && !(*init)->is_empty ())))\n     {\n       /* This means we have 'new T[]()'.  */\n       if ((*init)->is_empty ())"}, {"sha": "d597caf548340560ce6aa4c6546ba2e8725b3bf5", "filename": "gcc/testsuite/g++.dg/expr/anew5.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew5.C?ref=ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/97523\n+// { dg-do compile }\n+// We were turning the () into {} which made it seem like\n+// aggregate-initialization (we are dealing with arrays here), which\n+// performs copy-initialization, which only accepts converting constructors.\n+\n+struct T {\n+  explicit T();\n+  T(int);\n+};\n+\n+void\n+fn (int n)\n+{\n+  new T[1]();\n+  new T[2]();\n+  new T[3]();\n+  new T[n]();\n+#if __cpp_aggregate_paren_init\n+  new T[]();\n+  new T[2](1, 2);\n+  // T[2] is initialized via copy-initialization, so we can't call\n+  // explicit T().\n+  new T[3](1, 2); // { dg-error \"explicit constructor\" \"\" { target c++20 } }\n+#endif\n+}"}, {"sha": "0542daac2759136e4d286e42938946f81c6fbebc", "filename": "gcc/testsuite/g++.dg/expr/anew6.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew6.C?ref=ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/97523\n+// { dg-do compile { target c++11 } }\n+\n+// [expr.new]/24: If the new-expression creates an object or an array of\n+// objects of class type, access and ambiguity control are done for the\n+// [...] constructor selected for the initialization (if any).\n+// NB: We only check for a default constructor if the array has a non-constant\n+// bound, or there are insufficient initializers.  Since an array is an\n+// aggregate, we perform aggregate-initialization, which performs\n+// copy-initialization, so we only accept converting constructors.\n+\n+struct T {\n+  explicit T();\n+  T(int);\n+};\n+\n+struct S {\n+  S(int);\n+};\n+\n+void\n+fn (int n)\n+{\n+  new T[1]{}; // { dg-error \"explicit constructor\" }\n+  new T[2]{1, 2};\n+  new T[3]{1, 2}; // { dg-error \"explicit constructor\" }\n+  new T[n]{}; // { dg-error \"explicit constructor\" }\n+\n+  new S[1]{}; // { dg-error \"could not convert\" }\n+  new S[2]{1, 2};\n+  new S[3]{1, 2}; // { dg-error \"could not convert\" }\n+  new S[n]{}; // { dg-error \"could not convert\" }\n+}"}]}