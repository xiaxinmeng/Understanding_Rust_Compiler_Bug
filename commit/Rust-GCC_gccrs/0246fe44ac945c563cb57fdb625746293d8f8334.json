{"sha": "0246fe44ac945c563cb57fdb625746293d8f8334", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI0NmZlNDRhYzk0NWM1NjNjYjU3ZmRiNjI1NzQ2MjkzZDhmODMzNA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-14T09:52:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-14T09:52:34Z"}, "message": "[Ada] Warn about unknown condition in Compile_Time_Warning\n\nThe compiler now warns if the condition in a pragma Compile_Time_Warning\nor Compile_Time_Error does not have a compile-time-known value. The\nwarning is not given for pragmas in a generic template, but is given for\npragmas in an instance.\n\nThe -gnatw_c and -gnatw_C switches turn the warning on and off. The\ndefault is on.\n\n2019-08-14  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.ads, sem_prag.adb\n\t(Process_Compile_Time_Warning_Or_Error): In parameterless\n\tversion, improve detection of whether we are in a generic unit\n\tto cover the case of an instance within a generic unit.\n\t(Process_Compile_Time_Warning_Or_Error): Rename the\n\ttwo-parameter version to be\n\tValidate_Compile_Time_Warning_Or_Error, and do not export it.\n\tIssue a warning if the condition is not known at compile time.\n\tThe key point is that the warning must be given only for pragmas\n\tdeferred to the back end, because the back end discovers\n\tadditional values that are known at compile time.  Previous\n\tchanges in this ticket have enabled this by deferring to the\n\tback end without checking for special cases such as 'Size.\n\t(Validate_Compile_Time_Warning_Or_Error): Rename to be\n\tDefer_Compile_Time_Warning_Error_To_BE.\n\t* warnsw.ads, warnsw.adb (Warn_On_Unknown_Compile_Time_Warning):\n\tAdd new switches -gnatw_c and -gnatw_C to control the above\n\twarning.\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n\tDocument new switches.\n\t* gnat_ugn.texi: Regenerate.\n\ngcc/testsuite/\n\n\t* gnat.dg/warn27.adb: New testcase.\n\nFrom-SVN: r274469", "tree": {"sha": "9db685731cb31ee14f9eb0699b9b078e15bd300d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9db685731cb31ee14f9eb0699b9b078e15bd300d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0246fe44ac945c563cb57fdb625746293d8f8334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0246fe44ac945c563cb57fdb625746293d8f8334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0246fe44ac945c563cb57fdb625746293d8f8334", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0246fe44ac945c563cb57fdb625746293d8f8334/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebf7f0abade68c85557af4f634fe68b86c34f751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf7f0abade68c85557af4f634fe68b86c34f751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebf7f0abade68c85557af4f634fe68b86c34f751"}], "stats": {"total": 618, "additions": 374, "deletions": 244}, "files": [{"sha": "370d943a6df0ebb40ae7ca4cf3d924dd44834e37", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0246fe44ac945c563cb57fdb625746293d8f8334", "patch": "@@ -1,3 +1,27 @@\n+2019-08-14  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.ads, sem_prag.adb\n+\t(Process_Compile_Time_Warning_Or_Error): In parameterless\n+\tversion, improve detection of whether we are in a generic unit\n+\tto cover the case of an instance within a generic unit.\n+\t(Process_Compile_Time_Warning_Or_Error): Rename the\n+\ttwo-parameter version to be\n+\tValidate_Compile_Time_Warning_Or_Error, and do not export it.\n+\tIssue a warning if the condition is not known at compile time.\n+\tThe key point is that the warning must be given only for pragmas\n+\tdeferred to the back end, because the back end discovers\n+\tadditional values that are known at compile time.  Previous\n+\tchanges in this ticket have enabled this by deferring to the\n+\tback end without checking for special cases such as 'Size.\n+\t(Validate_Compile_Time_Warning_Or_Error): Rename to be\n+\tDefer_Compile_Time_Warning_Error_To_BE.\n+\t* warnsw.ads, warnsw.adb (Warn_On_Unknown_Compile_Time_Warning):\n+\tAdd new switches -gnatw_c and -gnatw_C to control the above\n+\twarning.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tDocument new switches.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2019-08-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch12.adb (Might_Inline_Subp): Rework comment and restrict"}, {"sha": "913d6b9f3dd57636b2e2f607d4756088ebe82fe4", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=0246fe44ac945c563cb57fdb625746293d8f8334", "patch": "@@ -2972,7 +2972,7 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n   component for which no component clause is present.\n \n \n-.. index:: -gnatwC  (gcc)\n+.. index:: -gnatw.C  (gcc)\n \n :switch:`-gnatw.C`\n   *Suppress warnings on missing component clauses.*\n@@ -2981,6 +2981,30 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n   missing a component clause in the situation described above.\n \n \n+.. index:: -gnatw_c  (gcc)\n+\n+:switch:`-gnatw_c`\n+  *Activate warnings on unknown condition in Compile_Time_Warning.*\n+\n+  .. index:: Compile_Time_Warning\n+  .. index:: Compile_Time_Error\n+\n+  This switch activates warnings on a pragma Compile_Time_Warning\n+  or Compile_Time_Error whose condition has a value that is not\n+  known at compile time.\n+  The default is that such warnings are generated.\n+\n+\n+.. index:: -gnatw_C  (gcc)\n+\n+:switch:`-gnatw_C`\n+  *Suppress warnings on missing component clauses.*\n+\n+  This switch supresses warnings on a pragma Compile_Time_Warning\n+  or Compile_Time_Error whose condition has a value that is not\n+  known at compile time.\n+\n+\n .. index:: -gnatwd  (gcc)\n \n :switch:`-gnatwd`"}, {"sha": "3e0c857e432443b02d8266a2dd13704308d0d303", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0246fe44ac945c563cb57fdb625746293d8f8334", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Jul 31, 2019\n+GNAT User's Guide for Native Platforms , Aug 01, 2019\n \n AdaCore\n \n@@ -11208,7 +11208,7 @@ majority, but not all, of the components. A warning is given for each\n component for which no component clause is present.\n @end table\n \n-@geindex -gnatwC (gcc)\n+@geindex -gnatw.C (gcc)\n \n \n @table @asis\n@@ -11221,6 +11221,39 @@ This switch suppresses warnings for record components that are\n missing a component clause in the situation described above.\n @end table\n \n+@geindex -gnatw_c (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_c}\n+\n+@emph{Activate warnings on unknown condition in Compile_Time_Warning.}\n+\n+@geindex Compile_Time_Warning\n+\n+@geindex Compile_Time_Error\n+\n+This switch activates warnings on a pragma Compile_Time_Warning\n+or Compile_Time_Error whose condition has a value that is not\n+known at compile time.\n+The default is that such warnings are generated.\n+@end table\n+\n+@geindex -gnatw_C (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_C}\n+\n+@emph{Suppress warnings on missing component clauses.}\n+\n+This switch supresses warnings on a pragma Compile_Time_Warning\n+or Compile_Time_Error whose condition has a value that is not\n+known at compile time.\n+@end table\n+\n @geindex -gnatwd (gcc)\n \n \n@@ -20919,7 +20952,6 @@ This section presents several topics related to program performance.\n It first describes some of the tradeoffs that need to be considered\n and some of the techniques for making your program run faster.\n \n-\n It then documents the unused subprogram/data elimination feature,\n which can reduce the size of program executables.\n \n@@ -22274,9 +22306,8 @@ appropriate options.\n \n @geindex Checks (overflow)\n \n-\n @node Overflow Check Handling in GNAT,Performing Dimensionality Analysis in GNAT,Improving Performance,GNAT and Program Execution\n-@anchor{gnat_ugn/gnat_and_program_execution id50}@anchor{169}@anchor{gnat_ugn/gnat_and_program_execution overflow-check-handling-in-gnat}@anchor{27}\n+@anchor{gnat_ugn/gnat_and_program_execution id45}@anchor{169}@anchor{gnat_ugn/gnat_and_program_execution overflow-check-handling-in-gnat}@anchor{27}\n @section Overflow Check Handling in GNAT\n \n \n@@ -22292,7 +22323,7 @@ This section explains how to control the handling of overflow checks.\n @end menu\n \n @node Background,Management of Overflows in GNAT,,Overflow Check Handling in GNAT\n-@anchor{gnat_ugn/gnat_and_program_execution id51}@anchor{1bb}@anchor{gnat_ugn/gnat_and_program_execution background}@anchor{1bc}\n+@anchor{gnat_ugn/gnat_and_program_execution id46}@anchor{1bb}@anchor{gnat_ugn/gnat_and_program_execution background}@anchor{1bc}\n @subsection Background\n \n \n@@ -22418,7 +22449,7 @@ exception raised because of the intermediate overflow (and we really\n would prefer this precondition to be considered True at run time).\n \n @node Management of Overflows in GNAT,Specifying the Desired Mode,Background,Overflow Check Handling in GNAT\n-@anchor{gnat_ugn/gnat_and_program_execution management-of-overflows-in-gnat}@anchor{1bd}@anchor{gnat_ugn/gnat_and_program_execution id52}@anchor{1be}\n+@anchor{gnat_ugn/gnat_and_program_execution id47}@anchor{1bd}@anchor{gnat_ugn/gnat_and_program_execution management-of-overflows-in-gnat}@anchor{1be}\n @subsection Management of Overflows in GNAT\n \n \n@@ -22532,7 +22563,7 @@ out in the normal manner (with infinite values always failing all\n range checks).\n \n @node Specifying the Desired Mode,Default Settings,Management of Overflows in GNAT,Overflow Check Handling in GNAT\n-@anchor{gnat_ugn/gnat_and_program_execution specifying-the-desired-mode}@anchor{f8}@anchor{gnat_ugn/gnat_and_program_execution id53}@anchor{1bf}\n+@anchor{gnat_ugn/gnat_and_program_execution specifying-the-desired-mode}@anchor{f8}@anchor{gnat_ugn/gnat_and_program_execution id48}@anchor{1bf}\n @subsection Specifying the Desired Mode\n \n \n@@ -22656,7 +22687,7 @@ causing all intermediate operations to be computed using the base\n type (@code{STRICT} mode).\n \n @node Default Settings,Implementation Notes,Specifying the Desired Mode,Overflow Check Handling in GNAT\n-@anchor{gnat_ugn/gnat_and_program_execution id54}@anchor{1c0}@anchor{gnat_ugn/gnat_and_program_execution default-settings}@anchor{1c1}\n+@anchor{gnat_ugn/gnat_and_program_execution id49}@anchor{1c0}@anchor{gnat_ugn/gnat_and_program_execution default-settings}@anchor{1c1}\n @subsection Default Settings\n \n \n@@ -22703,7 +22734,7 @@ checking, but it has no effect on the method used for computing\n intermediate results.\n \n @node Implementation Notes,,Default Settings,Overflow Check Handling in GNAT\n-@anchor{gnat_ugn/gnat_and_program_execution id55}@anchor{1c2}@anchor{gnat_ugn/gnat_and_program_execution implementation-notes}@anchor{1c3}\n+@anchor{gnat_ugn/gnat_and_program_execution implementation-notes}@anchor{1c2}@anchor{gnat_ugn/gnat_and_program_execution id50}@anchor{1c3}\n @subsection Implementation Notes\n \n \n@@ -22751,7 +22782,7 @@ platforms for which @code{Long_Long_Integer} is 64-bits (nearly all GNAT\n platforms).\n \n @node Performing Dimensionality Analysis in GNAT,Stack Related Facilities,Overflow Check Handling in GNAT,GNAT and Program Execution\n-@anchor{gnat_ugn/gnat_and_program_execution id56}@anchor{16a}@anchor{gnat_ugn/gnat_and_program_execution performing-dimensionality-analysis-in-gnat}@anchor{28}\n+@anchor{gnat_ugn/gnat_and_program_execution performing-dimensionality-analysis-in-gnat}@anchor{28}@anchor{gnat_ugn/gnat_and_program_execution id51}@anchor{16a}\n @section Performing Dimensionality Analysis in GNAT\n \n \n@@ -23138,7 +23169,7 @@ passing (the dimension vector for the actual parameter must be equal to the\n dimension vector for the formal parameter).\n \n @node Stack Related Facilities,Memory Management Issues,Performing Dimensionality Analysis in GNAT,GNAT and Program Execution\n-@anchor{gnat_ugn/gnat_and_program_execution id57}@anchor{16b}@anchor{gnat_ugn/gnat_and_program_execution stack-related-facilities}@anchor{29}\n+@anchor{gnat_ugn/gnat_and_program_execution stack-related-facilities}@anchor{29}@anchor{gnat_ugn/gnat_and_program_execution id52}@anchor{16b}\n @section Stack Related Facilities\n \n \n@@ -23154,7 +23185,7 @@ particular, it deals with dynamic and static stack usage measurements.\n @end menu\n \n @node Stack Overflow Checking,Static Stack Usage Analysis,,Stack Related Facilities\n-@anchor{gnat_ugn/gnat_and_program_execution id58}@anchor{1c4}@anchor{gnat_ugn/gnat_and_program_execution stack-overflow-checking}@anchor{f4}\n+@anchor{gnat_ugn/gnat_and_program_execution id53}@anchor{1c4}@anchor{gnat_ugn/gnat_and_program_execution stack-overflow-checking}@anchor{f4}\n @subsection Stack Overflow Checking\n \n \n@@ -23199,7 +23230,7 @@ Consequently, to modify the size of the environment task please refer to your\n operating system documentation.\n \n @node Static Stack Usage Analysis,Dynamic Stack Usage Analysis,Stack Overflow Checking,Stack Related Facilities\n-@anchor{gnat_ugn/gnat_and_program_execution static-stack-usage-analysis}@anchor{f5}@anchor{gnat_ugn/gnat_and_program_execution id59}@anchor{1c5}\n+@anchor{gnat_ugn/gnat_and_program_execution id54}@anchor{1c5}@anchor{gnat_ugn/gnat_and_program_execution static-stack-usage-analysis}@anchor{f5}\n @subsection Static Stack Usage Analysis\n \n \n@@ -23248,7 +23279,7 @@ subprogram whose stack usage might be larger than the specified amount of\n bytes.  The wording is in keeping with the qualifier documented above.\n \n @node Dynamic Stack Usage Analysis,,Static Stack Usage Analysis,Stack Related Facilities\n-@anchor{gnat_ugn/gnat_and_program_execution dynamic-stack-usage-analysis}@anchor{122}@anchor{gnat_ugn/gnat_and_program_execution id60}@anchor{1c6}\n+@anchor{gnat_ugn/gnat_and_program_execution id55}@anchor{1c6}@anchor{gnat_ugn/gnat_and_program_execution dynamic-stack-usage-analysis}@anchor{122}\n @subsection Dynamic Stack Usage Analysis\n \n \n@@ -23327,7 +23358,7 @@ The package @code{GNAT.Task_Stack_Usage} provides facilities to get\n stack-usage reports at run time. See its body for the details.\n \n @node Memory Management Issues,,Stack Related Facilities,GNAT and Program Execution\n-@anchor{gnat_ugn/gnat_and_program_execution id61}@anchor{16c}@anchor{gnat_ugn/gnat_and_program_execution memory-management-issues}@anchor{2a}\n+@anchor{gnat_ugn/gnat_and_program_execution id56}@anchor{16c}@anchor{gnat_ugn/gnat_and_program_execution memory-management-issues}@anchor{2a}\n @section Memory Management Issues\n \n \n@@ -23343,7 +23374,7 @@ incorrect uses of access values (including 'dangling references').\n @end menu\n \n @node Some Useful Memory Pools,The GNAT Debug Pool Facility,,Memory Management Issues\n-@anchor{gnat_ugn/gnat_and_program_execution id62}@anchor{1c7}@anchor{gnat_ugn/gnat_and_program_execution some-useful-memory-pools}@anchor{1c8}\n+@anchor{gnat_ugn/gnat_and_program_execution id57}@anchor{1c7}@anchor{gnat_ugn/gnat_and_program_execution some-useful-memory-pools}@anchor{1c8}\n @subsection Some Useful Memory Pools\n \n \n@@ -23424,7 +23455,7 @@ for T1'Storage_Size use 10_000;\n @end quotation\n \n @node The GNAT Debug Pool Facility,,Some Useful Memory Pools,Memory Management Issues\n-@anchor{gnat_ugn/gnat_and_program_execution id63}@anchor{1c9}@anchor{gnat_ugn/gnat_and_program_execution the-gnat-debug-pool-facility}@anchor{1ca}\n+@anchor{gnat_ugn/gnat_and_program_execution id58}@anchor{1c9}@anchor{gnat_ugn/gnat_and_program_execution the-gnat-debug-pool-facility}@anchor{1ca}\n @subsection The GNAT Debug Pool Facility\n \n "}, {"sha": "035b0eee1f41daeeca80e6239c9c7d2aee80ca34", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0246fe44ac945c563cb57fdb625746293d8f8334", "patch": "@@ -299,11 +299,20 @@ package body Sem_Prag is\n    --  pragma. Entity name for unit and its parents is taken from item in\n    --  previous with_clause that mentions the unit.\n \n-   procedure Validate_Compile_Time_Warning_Error (N : Node_Id);\n+   procedure Validate_Compile_Time_Warning_Or_Error\n+     (N    : Node_Id;\n+      Eloc : Source_Ptr);\n+   --  Common processing for Compile_Time_Error and Compile_Time_Warning of\n+   --  pragma N. Called when the pragma is processed as part of its regular\n+   --  analysis but also called after calling the back end to validate these\n+   --  pragmas for size and alignment appropriateness.\n+\n+   procedure Defer_Compile_Time_Warning_Error_To_BE (N : Node_Id);\n    --  N is a pragma Compile_Time_Error or Compile_Warning_Error whose boolean\n-   --  expression is not known at compile time. This procedure makes an entry\n-   --  in a table. The actual checking is performed by Validate_Compile_Time_\n-   --  Warning_Errors, which is invoked after calling the back end.\n+   --  expression is not known at compile time during the front end. This\n+   --  procedure makes an entry in a table. The actual checking is performed by\n+   --  Validate_Compile_Time_Warning_Errors, which is invoked after calling the\n+   --  back end.\n \n    Dummy : Integer := 0;\n    pragma Volatile (Dummy);\n@@ -323,13 +332,13 @@ package body Sem_Prag is\n    --  pragma in the source program, a breakpoint on rv catches this place in\n    --  the source, allowing convenient stepping to the point of interest.\n \n-   ---------------------------------------------------\n-   -- Table for Validate_Compile_Time_Warning_Error --\n-   ---------------------------------------------------\n+   ------------------------------------------------------\n+   -- Table for Defer_Compile_Time_Warning_Error_To_BE --\n+   ------------------------------------------------------\n \n    --  The following table collects pragmas Compile_Time_Error and Compile_\n    --  Time_Warning for validation. Entries are made by calls to subprogram\n-   --  Validate_Compile_Time_Warning_Error, and the call to the procedure\n+   --  Defer_Compile_Time_Warning_Error_To_BE, and the call to the procedure\n    --  Validate_Compile_Time_Warning_Errors does the actual error checking\n    --  and posting of warning and error messages. The reason for this delayed\n    --  processing is to take advantage of back-annotations of attributes size\n@@ -7598,6 +7607,7 @@ package body Sem_Prag is\n       -------------------------------------------\n \n       procedure Process_Compile_Time_Warning_Or_Error is\n+         P : Node_Id := Parent (N);\n          Arg1x : constant Node_Id := Get_Pragma_Arg (Arg1);\n       begin\n          --  In GNATprove mode, pragmas Compile_Time_Error and\n@@ -7616,18 +7626,29 @@ package body Sem_Prag is\n          Check_Arg_Is_OK_Static_Expression (Arg2, Standard_String);\n          Analyze_And_Resolve (Arg1x, Standard_Boolean);\n \n-         --  If the condition is known at compile time (now), process it now.\n+         --  If the condition is known at compile time (now), validate it now.\n          --  Otherwise, register the expression for validation after the back\n          --  end has been called, because it might be known at compile time\n          --  then. For example, if the expression is \"Record_Type'Size /= 32\"\n          --  it might be known after the back end has determined the size of\n-         --  Record_Type. We do not defer processing if we're inside a generic\n+         --  Record_Type. We do not defer validation if we're inside a generic\n          --  unit, because we will have more information in the instances.\n \n          if Compile_Time_Known_Value (Arg1x) then\n-            Process_Compile_Time_Warning_Or_Error (N, Sloc (Arg1));\n-         elsif not Inside_A_Generic then\n-            Validate_Compile_Time_Warning_Error (N);\n+            Validate_Compile_Time_Warning_Or_Error (N, Sloc (Arg1));\n+         else\n+            while Present (P) and then Nkind (P) not in N_Generic_Declaration\n+            loop\n+               if Nkind_In (P, N_Package_Body, N_Subprogram_Body) then\n+                  P := Corresponding_Spec (P);\n+               else\n+                  P := Parent (P);\n+               end if;\n+            end loop;\n+\n+            if No (P) then\n+               Defer_Compile_Time_Warning_Error_To_BE (N);\n+            end if;\n          end if;\n       end Process_Compile_Time_Warning_Or_Error;\n \n@@ -31419,11 +31440,11 @@ package body Sem_Prag is\n \n    end Process_Compilation_Unit_Pragmas;\n \n-   -------------------------------------------\n-   -- Process_Compile_Time_Warning_Or_Error --\n-   -------------------------------------------\n+   --------------------------------------------\n+   -- Validate_Compile_Time_Warning_Or_Error --\n+   --------------------------------------------\n \n-   procedure Process_Compile_Time_Warning_Or_Error\n+   procedure Validate_Compile_Time_Warning_Or_Error\n      (N     : Node_Id;\n       Eloc  : Source_Ptr)\n    is\n@@ -31530,8 +31551,16 @@ package body Sem_Prag is\n                end loop;\n             end;\n          end if;\n+\n+      --  Arg1x is not known at compile time, so issue a warning. This can\n+      --  happen only if the pragma's processing was deferred until after the\n+      --  back end is run (see Process_Compile_Time_Warning_Or_Error).\n+      --  Note that the warning control switch applies to both pragmas.\n+\n+      elsif Warn_On_Unknown_Compile_Time_Warning then\n+         Error_Msg_N (\"?condition is not known at compile time\", Arg1x);\n       end if;\n-   end Process_Compile_Time_Warning_Or_Error;\n+   end Validate_Compile_Time_Warning_Or_Error;\n \n    ------------------------------------\n    -- Record_Possible_Body_Reference --\n@@ -32094,17 +32123,17 @@ package body Sem_Prag is\n    end Test_Case_Arg;\n \n    -----------------------------------------\n-   -- Validate_Compile_Time_Warning_Error --\n+   -- Defer_Compile_Time_Warning_Error_To_BE --\n    -----------------------------------------\n \n-   procedure Validate_Compile_Time_Warning_Error (N : Node_Id) is\n+   procedure Defer_Compile_Time_Warning_Error_To_BE (N : Node_Id) is\n       Arg1  : constant Node_Id := First (Pragma_Argument_Associations (N));\n    begin\n       Compile_Time_Warnings_Errors.Append\n         (New_Val => CTWE_Entry'(Eloc  => Sloc (Arg1),\n                                 Scope => Current_Scope,\n                                 Prag  => N));\n-   end Validate_Compile_Time_Warning_Error;\n+   end Defer_Compile_Time_Warning_Error_To_BE;\n \n    ------------------------------------------\n    -- Validate_Compile_Time_Warning_Errors --\n@@ -32158,7 +32187,7 @@ package body Sem_Prag is\n          begin\n             Set_Scope (T.Scope);\n             Reset_Analyzed_Flags (T.Prag);\n-            Process_Compile_Time_Warning_Or_Error (T.Prag, T.Eloc);\n+            Validate_Compile_Time_Warning_Or_Error (T.Prag, T.Eloc);\n             Unset_Scope (T.Scope);\n          end;\n       end loop;"}, {"sha": "88c103aa9d4cdd6a6c8fc8072de1343af6b9f7a4", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=0246fe44ac945c563cb57fdb625746293d8f8334", "patch": "@@ -499,14 +499,6 @@ package Sem_Prag is\n    --  Name_uInvariant, and Name_uType_Invariant (_Pre, _Post, _Invariant,\n    --  and _Type_Invariant).\n \n-   procedure Process_Compile_Time_Warning_Or_Error\n-     (N    : Node_Id;\n-      Eloc : Source_Ptr);\n-   --  Common processing for Compile_Time_Error and Compile_Time_Warning of\n-   --  pragma N. Called when the pragma is processed as part of its regular\n-   --  analysis but also called after calling the back end to validate these\n-   --  pragmas for size and alignment appropriateness.\n-\n    procedure Process_Compilation_Unit_Pragmas (N : Node_Id);\n    --  Called at the start of processing compilation unit N to deal with any\n    --  special issues regarding pragmas. In particular, we have to deal with"}, {"sha": "a7319073c15239f193037b5d9b33772c7e3c359e", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 156, "deletions": 145, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=0246fe44ac945c563cb57fdb625746293d8f8334", "patch": "@@ -43,53 +43,54 @@ package body Warnsw is\n \n    procedure All_Warnings (Setting : Boolean) is\n    begin\n-      Address_Clause_Overlay_Warnings     := Setting;\n-      Check_Unreferenced                  := Setting;\n-      Check_Unreferenced_Formals          := Setting;\n-      Check_Withs                         := Setting;\n-      Constant_Condition_Warnings         := Setting;\n-      Elab_Warnings                       := Setting;\n-      Implementation_Unit_Warnings        := Setting;\n-      Ineffective_Inline_Warnings         := Setting;\n-      List_Body_Required_Info             := Setting;\n-      List_Inherited_Aspects              := Setting;\n-      Warn_On_Ada_2005_Compatibility      := Setting;\n-      Warn_On_Ada_2012_Compatibility      := Setting;\n-      Warn_On_All_Unread_Out_Parameters   := Setting;\n-      Warn_On_Anonymous_Allocators        := Setting;\n-      Warn_On_Assertion_Failure           := Setting;\n-      Warn_On_Assumed_Low_Bound           := Setting;\n-      Warn_On_Atomic_Synchronization      := Setting;\n-      Warn_On_Bad_Fixed_Value             := Setting;\n-      Warn_On_Biased_Representation       := Setting;\n-      Warn_On_Constant                    := Setting;\n-      Warn_On_Deleted_Code                := Setting;\n-      Warn_On_Dereference                 := Setting;\n-      Warn_On_Export_Import               := Setting;\n-      Warn_On_Hiding                      := Setting;\n-      Warn_On_Late_Primitives             := Setting;\n-      Warn_On_Modified_Unread             := Setting;\n-      Warn_On_No_Value_Assigned           := Setting;\n-      Warn_On_Non_Local_Exception         := Setting;\n-      Warn_On_Object_Renames_Function     := Setting;\n-      Warn_On_Obsolescent_Feature         := Setting;\n-      Warn_On_Overlap                     := Setting;\n-      Warn_On_Overridden_Size             := Setting;\n-      Warn_On_Parameter_Order             := Setting;\n-      Warn_On_Questionable_Layout         := Setting;\n-      Warn_On_Questionable_Missing_Parens := Setting;\n-      Warn_On_Record_Holes                := Setting;\n-      Warn_On_Redundant_Constructs        := Setting;\n-      Warn_On_Reverse_Bit_Order           := Setting;\n-      Warn_On_Size_Alignment              := Setting;\n-      Warn_On_Standard_Redefinition       := Setting;\n-      Warn_On_Suspicious_Contract         := Setting;\n-      Warn_On_Suspicious_Modulus_Value    := Setting;\n-      Warn_On_Unchecked_Conversion        := Setting;\n-      Warn_On_Unordered_Enumeration_Type  := Setting;\n-      Warn_On_Unrecognized_Pragma         := Setting;\n-      Warn_On_Unrepped_Components         := Setting;\n-      Warn_On_Warnings_Off                := Setting;\n+      Address_Clause_Overlay_Warnings      := Setting;\n+      Check_Unreferenced                   := Setting;\n+      Check_Unreferenced_Formals           := Setting;\n+      Check_Withs                          := Setting;\n+      Constant_Condition_Warnings          := Setting;\n+      Elab_Warnings                        := Setting;\n+      Implementation_Unit_Warnings         := Setting;\n+      Ineffective_Inline_Warnings          := Setting;\n+      List_Body_Required_Info              := Setting;\n+      List_Inherited_Aspects               := Setting;\n+      Warn_On_Ada_2005_Compatibility       := Setting;\n+      Warn_On_Ada_2012_Compatibility       := Setting;\n+      Warn_On_All_Unread_Out_Parameters    := Setting;\n+      Warn_On_Anonymous_Allocators         := Setting;\n+      Warn_On_Assertion_Failure            := Setting;\n+      Warn_On_Assumed_Low_Bound            := Setting;\n+      Warn_On_Atomic_Synchronization       := Setting;\n+      Warn_On_Bad_Fixed_Value              := Setting;\n+      Warn_On_Biased_Representation        := Setting;\n+      Warn_On_Constant                     := Setting;\n+      Warn_On_Deleted_Code                 := Setting;\n+      Warn_On_Dereference                  := Setting;\n+      Warn_On_Export_Import                := Setting;\n+      Warn_On_Hiding                       := Setting;\n+      Warn_On_Late_Primitives              := Setting;\n+      Warn_On_Modified_Unread              := Setting;\n+      Warn_On_No_Value_Assigned            := Setting;\n+      Warn_On_Non_Local_Exception          := Setting;\n+      Warn_On_Object_Renames_Function      := Setting;\n+      Warn_On_Obsolescent_Feature          := Setting;\n+      Warn_On_Overlap                      := Setting;\n+      Warn_On_Overridden_Size              := Setting;\n+      Warn_On_Parameter_Order              := Setting;\n+      Warn_On_Questionable_Layout          := Setting;\n+      Warn_On_Questionable_Missing_Parens  := Setting;\n+      Warn_On_Record_Holes                 := Setting;\n+      Warn_On_Redundant_Constructs         := Setting;\n+      Warn_On_Reverse_Bit_Order            := Setting;\n+      Warn_On_Size_Alignment               := Setting;\n+      Warn_On_Standard_Redefinition        := Setting;\n+      Warn_On_Suspicious_Contract          := Setting;\n+      Warn_On_Suspicious_Modulus_Value     := Setting;\n+      Warn_On_Unchecked_Conversion         := Setting;\n+      Warn_On_Unknown_Compile_Time_Warning := Setting;\n+      Warn_On_Unordered_Enumeration_Type   := Setting;\n+      Warn_On_Unrecognized_Pragma          := Setting;\n+      Warn_On_Unrepped_Components          := Setting;\n+      Warn_On_Warnings_Off                 := Setting;\n    end All_Warnings;\n \n    ----------------------\n@@ -98,103 +99,105 @@ package body Warnsw is\n \n    procedure Restore_Warnings (W : Warning_Record) is\n    begin\n-      Address_Clause_Overlay_Warnings     :=\n+      Address_Clause_Overlay_Warnings      :=\n         W.Address_Clause_Overlay_Warnings;\n-      Check_Unreferenced                  :=\n+      Check_Unreferenced                   :=\n         W.Check_Unreferenced;\n-      Check_Unreferenced_Formals          :=\n+      Check_Unreferenced_Formals           :=\n         W.Check_Unreferenced_Formals;\n-      Check_Withs                         :=\n+      Check_Withs                          :=\n         W.Check_Withs;\n-      Constant_Condition_Warnings         :=\n+      Constant_Condition_Warnings          :=\n         W.Constant_Condition_Warnings;\n-      Elab_Warnings                       :=\n+      Elab_Warnings                        :=\n         W.Elab_Warnings;\n-      Elab_Info_Messages                  :=\n+      Elab_Info_Messages                   :=\n         W.Elab_Info_Messages;\n-      Implementation_Unit_Warnings        :=\n+      Implementation_Unit_Warnings         :=\n         W.Implementation_Unit_Warnings;\n-      Ineffective_Inline_Warnings         :=\n+      Ineffective_Inline_Warnings          :=\n         W.Ineffective_Inline_Warnings;\n-      List_Body_Required_Info             :=\n+      List_Body_Required_Info              :=\n         W.List_Body_Required_Info;\n-      List_Inherited_Aspects              :=\n+      List_Inherited_Aspects               :=\n         W.List_Inherited_Aspects;\n-      No_Warn_On_Non_Local_Exception      :=\n+      No_Warn_On_Non_Local_Exception       :=\n         W.No_Warn_On_Non_Local_Exception;\n-      Warning_Doc_Switch                  :=\n+      Warning_Doc_Switch                   :=\n         W.Warning_Doc_Switch;\n-      Warn_On_Ada_2005_Compatibility      :=\n+      Warn_On_Ada_2005_Compatibility       :=\n         W.Warn_On_Ada_2005_Compatibility;\n-      Warn_On_Ada_2012_Compatibility      :=\n+      Warn_On_Ada_2012_Compatibility       :=\n         W.Warn_On_Ada_2012_Compatibility;\n-      Warn_On_All_Unread_Out_Parameters   :=\n+      Warn_On_All_Unread_Out_Parameters    :=\n         W.Warn_On_All_Unread_Out_Parameters;\n-      Warn_On_Anonymous_Allocators        :=\n+      Warn_On_Anonymous_Allocators         :=\n         W.Warn_On_Anonymous_Allocators;\n-      Warn_On_Assertion_Failure           :=\n+      Warn_On_Assertion_Failure            :=\n         W.Warn_On_Assertion_Failure;\n-      Warn_On_Assumed_Low_Bound           :=\n+      Warn_On_Assumed_Low_Bound            :=\n         W.Warn_On_Assumed_Low_Bound;\n-      Warn_On_Atomic_Synchronization      :=\n+      Warn_On_Atomic_Synchronization       :=\n         W.Warn_On_Atomic_Synchronization;\n-      Warn_On_Bad_Fixed_Value             :=\n+      Warn_On_Bad_Fixed_Value              :=\n         W.Warn_On_Bad_Fixed_Value;\n-      Warn_On_Biased_Representation       :=\n+      Warn_On_Biased_Representation        :=\n         W.Warn_On_Biased_Representation;\n-      Warn_On_Constant                    :=\n+      Warn_On_Constant                     :=\n         W.Warn_On_Constant;\n-      Warn_On_Deleted_Code                :=\n+      Warn_On_Deleted_Code                 :=\n         W.Warn_On_Deleted_Code;\n-      Warn_On_Dereference                 :=\n+      Warn_On_Dereference                  :=\n         W.Warn_On_Dereference;\n-      Warn_On_Export_Import               :=\n+      Warn_On_Export_Import                :=\n         W.Warn_On_Export_Import;\n-      Warn_On_Hiding                      :=\n+      Warn_On_Hiding                       :=\n         W.Warn_On_Hiding;\n-      Warn_On_Late_Primitives             :=\n+      Warn_On_Late_Primitives              :=\n         W.Warn_On_Late_Primitives;\n-      Warn_On_Modified_Unread             :=\n+      Warn_On_Modified_Unread              :=\n         W.Warn_On_Modified_Unread;\n-      Warn_On_No_Value_Assigned           :=\n+      Warn_On_No_Value_Assigned            :=\n         W.Warn_On_No_Value_Assigned;\n-      Warn_On_Non_Local_Exception         :=\n+      Warn_On_Non_Local_Exception          :=\n         W.Warn_On_Non_Local_Exception;\n-      Warn_On_Object_Renames_Function     :=\n+      Warn_On_Object_Renames_Function      :=\n         W.Warn_On_Object_Renames_Function;\n-      Warn_On_Obsolescent_Feature         :=\n+      Warn_On_Obsolescent_Feature          :=\n         W.Warn_On_Obsolescent_Feature;\n-      Warn_On_Overlap                     :=\n+      Warn_On_Overlap                      :=\n         W.Warn_On_Overlap;\n-      Warn_On_Overridden_Size             :=\n+      Warn_On_Overridden_Size              :=\n         W.Warn_On_Overridden_Size;\n-      Warn_On_Parameter_Order             :=\n+      Warn_On_Parameter_Order              :=\n         W.Warn_On_Parameter_Order;\n-      Warn_On_Questionable_Layout         :=\n+      Warn_On_Questionable_Layout          :=\n         W.Warn_On_Questionable_Layout;\n-      Warn_On_Questionable_Missing_Parens :=\n+      Warn_On_Questionable_Missing_Parens  :=\n         W.Warn_On_Questionable_Missing_Parens;\n-      Warn_On_Record_Holes                :=\n+      Warn_On_Record_Holes                 :=\n         W.Warn_On_Record_Holes;\n-      Warn_On_Redundant_Constructs        :=\n+      Warn_On_Redundant_Constructs         :=\n         W.Warn_On_Redundant_Constructs;\n-      Warn_On_Reverse_Bit_Order           :=\n+      Warn_On_Reverse_Bit_Order            :=\n         W.Warn_On_Reverse_Bit_Order;\n-      Warn_On_Size_Alignment              :=\n+      Warn_On_Size_Alignment               :=\n         W.Warn_On_Size_Alignment;\n-      Warn_On_Standard_Redefinition       :=\n+      Warn_On_Standard_Redefinition        :=\n         W.Warn_On_Standard_Redefinition;\n-      Warn_On_Suspicious_Contract         :=\n+      Warn_On_Suspicious_Contract          :=\n         W.Warn_On_Suspicious_Contract;\n-      Warn_On_Unchecked_Conversion        :=\n+      Warn_On_Unchecked_Conversion         :=\n         W.Warn_On_Unchecked_Conversion;\n-      Warn_On_Unordered_Enumeration_Type  :=\n+      Warn_On_Unknown_Compile_Time_Warning :=\n+        W.Warn_On_Unknown_Compile_Time_Warning;\n+      Warn_On_Unordered_Enumeration_Type   :=\n         W.Warn_On_Unordered_Enumeration_Type;\n-      Warn_On_Unrecognized_Pragma         :=\n+      Warn_On_Unrecognized_Pragma          :=\n         W.Warn_On_Unrecognized_Pragma;\n-      Warn_On_Unrepped_Components         :=\n+      Warn_On_Unrepped_Components          :=\n         W.Warn_On_Unrepped_Components;\n-      Warn_On_Warnings_Off                :=\n+      Warn_On_Warnings_Off                 :=\n         W.Warn_On_Warnings_Off;\n    end Restore_Warnings;\n \n@@ -206,103 +209,105 @@ package body Warnsw is\n       W : Warning_Record;\n \n    begin\n-      W.Address_Clause_Overlay_Warnings     :=\n+      W.Address_Clause_Overlay_Warnings      :=\n         Address_Clause_Overlay_Warnings;\n-      W.Check_Unreferenced                  :=\n+      W.Check_Unreferenced                   :=\n         Check_Unreferenced;\n-      W.Check_Unreferenced_Formals          :=\n+      W.Check_Unreferenced_Formals           :=\n         Check_Unreferenced_Formals;\n-      W.Check_Withs                         :=\n+      W.Check_Withs                          :=\n         Check_Withs;\n-      W.Constant_Condition_Warnings         :=\n+      W.Constant_Condition_Warnings          :=\n         Constant_Condition_Warnings;\n-      W.Elab_Info_Messages                  :=\n+      W.Elab_Info_Messages                   :=\n         Elab_Info_Messages;\n-      W.Elab_Warnings                       :=\n+      W.Elab_Warnings                        :=\n         Elab_Warnings;\n-      W.Implementation_Unit_Warnings        :=\n+      W.Implementation_Unit_Warnings         :=\n         Implementation_Unit_Warnings;\n-      W.Ineffective_Inline_Warnings         :=\n+      W.Ineffective_Inline_Warnings          :=\n         Ineffective_Inline_Warnings;\n-      W.List_Body_Required_Info             :=\n+      W.List_Body_Required_Info              :=\n         List_Body_Required_Info;\n-      W.List_Inherited_Aspects              :=\n+      W.List_Inherited_Aspects               :=\n         List_Inherited_Aspects;\n-      W.No_Warn_On_Non_Local_Exception      :=\n+      W.No_Warn_On_Non_Local_Exception       :=\n         No_Warn_On_Non_Local_Exception;\n-      W.Warning_Doc_Switch                  :=\n+      W.Warning_Doc_Switch                   :=\n         Warning_Doc_Switch;\n-      W.Warn_On_Ada_2005_Compatibility      :=\n+      W.Warn_On_Ada_2005_Compatibility       :=\n         Warn_On_Ada_2005_Compatibility;\n-      W.Warn_On_Ada_2012_Compatibility      :=\n+      W.Warn_On_Ada_2012_Compatibility       :=\n         Warn_On_Ada_2012_Compatibility;\n-      W.Warn_On_All_Unread_Out_Parameters   :=\n+      W.Warn_On_All_Unread_Out_Parameters    :=\n         Warn_On_All_Unread_Out_Parameters;\n-      W.Warn_On_Anonymous_Allocators        :=\n+      W.Warn_On_Anonymous_Allocators         :=\n         Warn_On_Anonymous_Allocators;\n-      W.Warn_On_Assertion_Failure           :=\n+      W.Warn_On_Assertion_Failure            :=\n         Warn_On_Assertion_Failure;\n-      W.Warn_On_Assumed_Low_Bound           :=\n+      W.Warn_On_Assumed_Low_Bound            :=\n         Warn_On_Assumed_Low_Bound;\n-      W.Warn_On_Atomic_Synchronization      :=\n+      W.Warn_On_Atomic_Synchronization       :=\n         Warn_On_Atomic_Synchronization;\n-      W.Warn_On_Bad_Fixed_Value             :=\n+      W.Warn_On_Bad_Fixed_Value              :=\n         Warn_On_Bad_Fixed_Value;\n-      W.Warn_On_Biased_Representation       :=\n+      W.Warn_On_Biased_Representation        :=\n         Warn_On_Biased_Representation;\n-      W.Warn_On_Constant                    :=\n+      W.Warn_On_Constant                     :=\n         Warn_On_Constant;\n-      W.Warn_On_Deleted_Code                :=\n+      W.Warn_On_Deleted_Code                 :=\n         Warn_On_Deleted_Code;\n-      W.Warn_On_Dereference                 :=\n+      W.Warn_On_Dereference                  :=\n         Warn_On_Dereference;\n-      W.Warn_On_Export_Import               :=\n+      W.Warn_On_Export_Import                :=\n         Warn_On_Export_Import;\n-      W.Warn_On_Hiding                      :=\n+      W.Warn_On_Hiding                       :=\n         Warn_On_Hiding;\n-      W.Warn_On_Late_Primitives             :=\n+      W.Warn_On_Late_Primitives              :=\n         Warn_On_Late_Primitives;\n-      W.Warn_On_Modified_Unread             :=\n+      W.Warn_On_Modified_Unread              :=\n         Warn_On_Modified_Unread;\n-      W.Warn_On_No_Value_Assigned           :=\n+      W.Warn_On_No_Value_Assigned            :=\n         Warn_On_No_Value_Assigned;\n-      W.Warn_On_Non_Local_Exception         :=\n+      W.Warn_On_Non_Local_Exception          :=\n         Warn_On_Non_Local_Exception;\n-      W.Warn_On_Object_Renames_Function     :=\n+      W.Warn_On_Object_Renames_Function      :=\n         Warn_On_Object_Renames_Function;\n-      W.Warn_On_Obsolescent_Feature         :=\n+      W.Warn_On_Obsolescent_Feature          :=\n         Warn_On_Obsolescent_Feature;\n-      W.Warn_On_Overlap                     :=\n+      W.Warn_On_Overlap                      :=\n         Warn_On_Overlap;\n-      W.Warn_On_Overridden_Size             :=\n+      W.Warn_On_Overridden_Size              :=\n         Warn_On_Overridden_Size;\n-      W.Warn_On_Parameter_Order             :=\n+      W.Warn_On_Parameter_Order              :=\n         Warn_On_Parameter_Order;\n-      W.Warn_On_Questionable_Layout         :=\n+      W.Warn_On_Questionable_Layout          :=\n         Warn_On_Questionable_Layout;\n-      W.Warn_On_Questionable_Missing_Parens :=\n+      W.Warn_On_Questionable_Missing_Parens  :=\n         Warn_On_Questionable_Missing_Parens;\n-      W.Warn_On_Record_Holes                :=\n+      W.Warn_On_Record_Holes                 :=\n         Warn_On_Record_Holes;\n-      W.Warn_On_Redundant_Constructs        :=\n+      W.Warn_On_Redundant_Constructs         :=\n         Warn_On_Redundant_Constructs;\n-      W.Warn_On_Reverse_Bit_Order           :=\n+      W.Warn_On_Reverse_Bit_Order            :=\n         Warn_On_Reverse_Bit_Order;\n-      W.Warn_On_Size_Alignment              :=\n+      W.Warn_On_Size_Alignment               :=\n         Warn_On_Size_Alignment;\n-      W.Warn_On_Standard_Redefinition       :=\n+      W.Warn_On_Standard_Redefinition        :=\n         Warn_On_Standard_Redefinition;\n-      W.Warn_On_Suspicious_Contract         :=\n+      W.Warn_On_Suspicious_Contract          :=\n         Warn_On_Suspicious_Contract;\n-      W.Warn_On_Unchecked_Conversion        :=\n+      W.Warn_On_Unchecked_Conversion         :=\n         Warn_On_Unchecked_Conversion;\n-      W.Warn_On_Unordered_Enumeration_Type  :=\n+      W.Warn_On_Unknown_Compile_Time_Warning :=\n+        Warn_On_Unknown_Compile_Time_Warning;\n+      W.Warn_On_Unordered_Enumeration_Type   :=\n         Warn_On_Unordered_Enumeration_Type;\n-      W.Warn_On_Unrecognized_Pragma         :=\n+      W.Warn_On_Unrecognized_Pragma          :=\n         Warn_On_Unrecognized_Pragma;\n-      W.Warn_On_Unrepped_Components         :=\n+      W.Warn_On_Unrepped_Components          :=\n         Warn_On_Unrepped_Components;\n-      W.Warn_On_Warnings_Off                :=\n+      W.Warn_On_Warnings_Off                 :=\n         Warn_On_Warnings_Off;\n       return W;\n    end Save_Warnings;\n@@ -489,6 +494,12 @@ package body Warnsw is\n          when 'A' =>\n             Warn_On_Anonymous_Allocators := False;\n \n+         when 'c' =>\n+            Warn_On_Unknown_Compile_Time_Warning := True;\n+\n+         when 'C' =>\n+            Warn_On_Unknown_Compile_Time_Warning := False;\n+\n          when others =>\n             if Ignore_Unrecognized_VWY_Switches then\n                Write_Line (\"unrecognized switch -gnatw_\" & C & \" ignored\");"}, {"sha": "f96c11c3b80f1baad17ba8a61260a30bc4e3b3f9", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 55, "deletions": 50, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=0246fe44ac945c563cb57fdb625746293d8f8334", "patch": "@@ -48,6 +48,10 @@ package Warnsw is\n    --  Warn when tagged type public primitives are defined after its private\n    --  extensions.\n \n+   Warn_On_Unknown_Compile_Time_Warning : Boolean := True;\n+   --  Warn on a pragma Compile_Time_Warning or Compile_Time_Error whose\n+   --  condition has a value that is not known at compile time.\n+\n    Warn_On_Overridden_Size : Boolean := False;\n    --  Warn when explicit record component clause or array component_size\n    --  clause specifies a size that overrides a size for the type which was\n@@ -80,56 +84,57 @@ package Warnsw is\n    --  Type used to save and restore warnings\n \n    type Warning_Record is record\n-      Address_Clause_Overlay_Warnings     : Boolean;\n-      Check_Unreferenced                  : Boolean;\n-      Check_Unreferenced_Formals          : Boolean;\n-      Check_Withs                         : Boolean;\n-      Constant_Condition_Warnings         : Boolean;\n-      Elab_Info_Messages                  : Boolean;\n-      Elab_Warnings                       : Boolean;\n-      Implementation_Unit_Warnings        : Boolean;\n-      Ineffective_Inline_Warnings         : Boolean;\n-      List_Body_Required_Info             : Boolean;\n-      List_Inherited_Aspects              : Boolean;\n-      No_Warn_On_Non_Local_Exception      : Boolean;\n-      Warning_Doc_Switch                  : Boolean;\n-      Warn_On_Ada_2005_Compatibility      : Boolean;\n-      Warn_On_Ada_2012_Compatibility      : Boolean;\n-      Warn_On_All_Unread_Out_Parameters   : Boolean;\n-      Warn_On_Anonymous_Allocators        : Boolean;\n-      Warn_On_Assertion_Failure           : Boolean;\n-      Warn_On_Assumed_Low_Bound           : Boolean;\n-      Warn_On_Atomic_Synchronization      : Boolean;\n-      Warn_On_Bad_Fixed_Value             : Boolean;\n-      Warn_On_Biased_Representation       : Boolean;\n-      Warn_On_Constant                    : Boolean;\n-      Warn_On_Deleted_Code                : Boolean;\n-      Warn_On_Dereference                 : Boolean;\n-      Warn_On_Export_Import               : Boolean;\n-      Warn_On_Hiding                      : Boolean;\n-      Warn_On_Late_Primitives             : Boolean;\n-      Warn_On_Modified_Unread             : Boolean;\n-      Warn_On_No_Value_Assigned           : Boolean;\n-      Warn_On_Non_Local_Exception         : Boolean;\n-      Warn_On_Object_Renames_Function     : Boolean;\n-      Warn_On_Obsolescent_Feature         : Boolean;\n-      Warn_On_Overlap                     : Boolean;\n-      Warn_On_Overridden_Size             : Boolean;\n-      Warn_On_Parameter_Order             : Boolean;\n-      Warn_On_Questionable_Layout         : Boolean;\n-      Warn_On_Questionable_Missing_Parens : Boolean;\n-      Warn_On_Record_Holes                : Boolean;\n-      Warn_On_Redundant_Constructs        : Boolean;\n-      Warn_On_Reverse_Bit_Order           : Boolean;\n-      Warn_On_Size_Alignment              : Boolean;\n-      Warn_On_Standard_Redefinition       : Boolean;\n-      Warn_On_Suspicious_Contract         : Boolean;\n-      Warn_On_Suspicious_Modulus_Value    : Boolean;\n-      Warn_On_Unchecked_Conversion        : Boolean;\n-      Warn_On_Unordered_Enumeration_Type  : Boolean;\n-      Warn_On_Unrecognized_Pragma         : Boolean;\n-      Warn_On_Unrepped_Components         : Boolean;\n-      Warn_On_Warnings_Off                : Boolean;\n+      Address_Clause_Overlay_Warnings      : Boolean;\n+      Check_Unreferenced                   : Boolean;\n+      Check_Unreferenced_Formals           : Boolean;\n+      Check_Withs                          : Boolean;\n+      Constant_Condition_Warnings          : Boolean;\n+      Elab_Info_Messages                   : Boolean;\n+      Elab_Warnings                        : Boolean;\n+      Implementation_Unit_Warnings         : Boolean;\n+      Ineffective_Inline_Warnings          : Boolean;\n+      List_Body_Required_Info              : Boolean;\n+      List_Inherited_Aspects               : Boolean;\n+      No_Warn_On_Non_Local_Exception       : Boolean;\n+      Warning_Doc_Switch                   : Boolean;\n+      Warn_On_Ada_2005_Compatibility       : Boolean;\n+      Warn_On_Ada_2012_Compatibility       : Boolean;\n+      Warn_On_All_Unread_Out_Parameters    : Boolean;\n+      Warn_On_Anonymous_Allocators         : Boolean;\n+      Warn_On_Assertion_Failure            : Boolean;\n+      Warn_On_Assumed_Low_Bound            : Boolean;\n+      Warn_On_Atomic_Synchronization       : Boolean;\n+      Warn_On_Bad_Fixed_Value              : Boolean;\n+      Warn_On_Biased_Representation        : Boolean;\n+      Warn_On_Constant                     : Boolean;\n+      Warn_On_Deleted_Code                 : Boolean;\n+      Warn_On_Dereference                  : Boolean;\n+      Warn_On_Export_Import                : Boolean;\n+      Warn_On_Hiding                       : Boolean;\n+      Warn_On_Late_Primitives              : Boolean;\n+      Warn_On_Modified_Unread              : Boolean;\n+      Warn_On_No_Value_Assigned            : Boolean;\n+      Warn_On_Non_Local_Exception          : Boolean;\n+      Warn_On_Object_Renames_Function      : Boolean;\n+      Warn_On_Obsolescent_Feature          : Boolean;\n+      Warn_On_Overlap                      : Boolean;\n+      Warn_On_Overridden_Size              : Boolean;\n+      Warn_On_Parameter_Order              : Boolean;\n+      Warn_On_Questionable_Layout          : Boolean;\n+      Warn_On_Questionable_Missing_Parens  : Boolean;\n+      Warn_On_Record_Holes                 : Boolean;\n+      Warn_On_Redundant_Constructs         : Boolean;\n+      Warn_On_Reverse_Bit_Order            : Boolean;\n+      Warn_On_Size_Alignment               : Boolean;\n+      Warn_On_Standard_Redefinition        : Boolean;\n+      Warn_On_Suspicious_Contract          : Boolean;\n+      Warn_On_Suspicious_Modulus_Value     : Boolean;\n+      Warn_On_Unchecked_Conversion         : Boolean;\n+      Warn_On_Unknown_Compile_Time_Warning : Boolean;\n+      Warn_On_Unordered_Enumeration_Type   : Boolean;\n+      Warn_On_Unrecognized_Pragma          : Boolean;\n+      Warn_On_Unrepped_Components          : Boolean;\n+      Warn_On_Warnings_Off                 : Boolean;\n    end record;\n \n    function Save_Warnings return Warning_Record;"}, {"sha": "1b0c4a5d2b0e1d994f9ca9e9e2ebc3bd8a50812c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0246fe44ac945c563cb57fdb625746293d8f8334", "patch": "@@ -1,3 +1,7 @@\n+2019-08-14  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat.dg/warn27.adb: New testcase.\n+\n 2019-08-14  Bob Duff  <duff@adacore.com>\n \n \t* gnat.dg/inline19.adb, gnat.dg/inline19.ads: New testcase."}, {"sha": "d4b905917ecd868ec9698c49dca631bf0ca3b26b", "filename": "gcc/testsuite/gnat.dg/warn27.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn27.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0246fe44ac945c563cb57fdb625746293d8f8334/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn27.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn27.adb?ref=0246fe44ac945c563cb57fdb625746293d8f8334", "patch": "@@ -0,0 +1,10 @@\n+--  { dg-do compile }\n+\n+procedure Warn27 is\n+   Dummy : Boolean;\n+\n+   pragma Compile_Time_Warning (Dummy, \"warning\");  --  { dg-warning \"condition is not known at compile time\" }\n+   pragma Compile_Time_Error (Dummy, \"error\");  --  { dg-warning \"condition is not known at compile time\" }\n+begin\n+   pragma Unreferenced (Dummy);\n+end Warn27;"}]}