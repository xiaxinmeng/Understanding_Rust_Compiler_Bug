{"sha": "66825a3022e56e1bbe5308415c5b6cd9139597e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY4MjVhMzAyMmU1NmUxYmJlNTMwODQxNWM1YjZjZDkxMzk1OTdlOQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-12-19T14:31:03Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-12-19T14:31:03Z"}, "message": "commit_message\n\nFrom-SVN: r255823", "tree": {"sha": "c73cee064367a87e7df9711ba5b2fddb1f0a4b10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c73cee064367a87e7df9711ba5b2fddb1f0a4b10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66825a3022e56e1bbe5308415c5b6cd9139597e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66825a3022e56e1bbe5308415c5b6cd9139597e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66825a3022e56e1bbe5308415c5b6cd9139597e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66825a3022e56e1bbe5308415c5b6cd9139597e9/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b68a16895f0fc4497c314dbf61a02977b76206d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b68a16895f0fc4497c314dbf61a02977b76206d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b68a16895f0fc4497c314dbf61a02977b76206d0"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "f6af469c8562e840d40321ca34d4be4cb0617f4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66825a3022e56e1bbe5308415c5b6cd9139597e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66825a3022e56e1bbe5308415c5b6cd9139597e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66825a3022e56e1bbe5308415c5b6cd9139597e9", "patch": "@@ -1,3 +1,10 @@\n+2017-12-19  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (overriderregs): New variable.\n+\t(arc_override_options): Track fixed/call saved/call options.\n+\t(arc_conditional_register_usage): Check against overrideregs\n+\tvariable whenever we change register properties.\n+\n 2017-12-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* opts.c (finish_options): Don't prefix dump_base_name if it"}, {"sha": "3bf331e119f76264efb64a2992f250b4903f415c", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66825a3022e56e1bbe5308415c5b6cd9139597e9/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66825a3022e56e1bbe5308415c5b6cd9139597e9/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=66825a3022e56e1bbe5308415c5b6cd9139597e9", "patch": "@@ -73,6 +73,9 @@ along with GCC; see the file COPYING3.  If not see\n static char arc_cpu_name[10] = \"\";\n static const char *arc_cpu_string = arc_cpu_name;\n \n+/* Track which regs are set fixed/call saved/call used from commnad line.  */\n+HARD_REG_SET overrideregs;\n+\n /* Maximum size of a loop.  */\n #define ARC_MAX_LOOP_LENGTH 4095\n \n@@ -1099,6 +1102,30 @@ arc_override_options (void)\n \t  }\n       }\n \n+  CLEAR_HARD_REG_SET (overrideregs);\n+  if (common_deferred_options)\n+    {\n+      vec<cl_deferred_option> v =\n+\t*((vec<cl_deferred_option> *) common_deferred_options);\n+      int reg, nregs, j;\n+\n+      FOR_EACH_VEC_ELT (v, i, opt)\n+\t{\n+\t  switch (opt->opt_index)\n+\t    {\n+\t    case OPT_ffixed_:\n+\t    case OPT_fcall_used_:\n+\t    case OPT_fcall_saved_:\n+\t      if ((reg = decode_reg_name_and_count (opt->arg, &nregs)) >= 0)\n+\t\tfor (j = reg;  j < reg + nregs; j++)\n+\t\t  SET_HARD_REG_BIT (overrideregs, j);\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n   /* Set cpu flags accordingly to architecture/selected cpu.  The cpu\n      specific flags are set in arc-common.c.  The architecture forces\n      the default hardware configurations in, regardless what command\n@@ -1628,14 +1655,20 @@ arc_conditional_register_usage (void)\n       /* For ARCv2 the core register set is changed.  */\n       strcpy (rname29, \"ilink\");\n       strcpy (rname30, \"r30\");\n-      call_used_regs[30] = 1;\n-      fixed_regs[30] = 0;\n-\n-      arc_regno_reg_class[30] = WRITABLE_CORE_REGS;\n-      SET_HARD_REG_BIT (reg_class_contents[WRITABLE_CORE_REGS], 30);\n-      SET_HARD_REG_BIT (reg_class_contents[CHEAP_CORE_REGS], 30);\n-      SET_HARD_REG_BIT (reg_class_contents[GENERAL_REGS], 30);\n-      SET_HARD_REG_BIT (reg_class_contents[MPY_WRITABLE_CORE_REGS], 30);\n+\n+      if (!TEST_HARD_REG_BIT (overrideregs, 30))\n+\t{\n+\t  /* No user interference.  Set the r30 to be used by the\n+\t     compiler.  */\n+\t  call_used_regs[30] = 1;\n+\t  fixed_regs[30] = 0;\n+\n+\t  arc_regno_reg_class[30] = WRITABLE_CORE_REGS;\n+\t  SET_HARD_REG_BIT (reg_class_contents[WRITABLE_CORE_REGS], 30);\n+\t  SET_HARD_REG_BIT (reg_class_contents[CHEAP_CORE_REGS], 30);\n+\t  SET_HARD_REG_BIT (reg_class_contents[GENERAL_REGS], 30);\n+\t  SET_HARD_REG_BIT (reg_class_contents[MPY_WRITABLE_CORE_REGS], 30);\n+\t}\n    }\n \n   if (TARGET_MUL64_SET)\n@@ -1877,11 +1910,14 @@ arc_conditional_register_usage (void)\n     SET_HARD_REG_BIT (reg_class_contents[MPY_WRITABLE_CORE_REGS], ACCL_REGNO);\n     SET_HARD_REG_BIT (reg_class_contents[MPY_WRITABLE_CORE_REGS], ACCH_REGNO);\n \n-     /* Allow the compiler to freely use them.  */\n-    fixed_regs[ACCL_REGNO] = 0;\n-    fixed_regs[ACCH_REGNO] = 0;\n+    /* Allow the compiler to freely use them.  */\n+    if (!TEST_HARD_REG_BIT (overrideregs, ACCL_REGNO))\n+      fixed_regs[ACCL_REGNO] = 0;\n+    if (!TEST_HARD_REG_BIT (overrideregs, ACCH_REGNO))\n+      fixed_regs[ACCH_REGNO] = 0;\n \n-    arc_hard_regno_modes[ACC_REG_FIRST] = D_MODES;\n+    if (!fixed_regs[ACCH_REGNO] && !fixed_regs[ACCL_REGNO])\n+      arc_hard_regno_modes[ACC_REG_FIRST] = D_MODES;\n   }\n }\n "}]}