{"sha": "b646ba3f1c134c4fc22b000caff77725ccec1791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0NmJhM2YxYzEzNGM0ZmMyMmIwMDBjYWZmNzc3MjVjY2VjMTc5MQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-09-23T16:07:13Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-09-23T16:07:13Z"}, "message": "re PR debug/41065 (DW_TAG_enumeration_type+DW_TAG_enumerator is sometimes missing)\n\nFix PR debug/41065\n\ngcc/ChangeLog:\n\tPR debug/41065\n\t* function.h (types_used_by_vars_hash): Declare new hash table.\n\t(types_used_by_vars_eq, types_used_by_var_decl_insert): Declare\n\tequality and hash function for the hash table.\n\t(types_used_by_cur_var_decl): Declare a new global chained list.\n\t(types_used_by_var_decl_insert): Declare new function.\n\t* function.c (types_used_by_vars_hash): Define the hashtable ...\n\t(types_used_by_vars_eq, types_used_by_vars_do_hash): ... as well as\n\tits equality and hash functions.\n\t(hash_types_used_by_vars_entry): New hash helper.\n\t(types_used_by_cur_var_decl): Define the global chained list.\n\t(used_types_insert): Update the list of types used by the global\n\tvariable being parsed.\n\t(types_used_by_var_decl_insert): Define new function.\n\t* c-common.h (record_types_used_by_current_var_decl): Declare ...\n\t* c-common.c (record_types_used_by_current_var_decl): ... new\n\tfunction.\n\t* c-decl.c (finish_decl): Record the types used by the global\n\tvariable declaration we've just parsed.\n\t* dwarf2out.c (premark_used_types): Insert a new line between\n\tcomment and function.\n\t(premark_used_types_helper): Fix comment.\n\t(premark_types_used_by_global_vars_helper,\n\tpremark_types_used_by_global_vars): New functions.\n\t(prune_unused_types): Do not prune types used by global variables.\n\ngcc/cp/ChangeLog:\n\tPR debug/41065\n\t* decl.c (cp_finish_decl): Record the types used by the global\n\tvariable declaration we've just parsed.\n\ngcc/testsuite/ChangeLog:\n\tPR debug/41065\n\t* gcc.dg/debug/dwarf2/global-used-types.c: New test.\n\nFrom-SVN: r152085", "tree": {"sha": "716216bf133fc60984e49edb258a912ca31ba3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/716216bf133fc60984e49edb258a912ca31ba3e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b646ba3f1c134c4fc22b000caff77725ccec1791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b646ba3f1c134c4fc22b000caff77725ccec1791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b646ba3f1c134c4fc22b000caff77725ccec1791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b646ba3f1c134c4fc22b000caff77725ccec1791/comments", "author": null, "committer": null, "parents": [{"sha": "4c6858252cf0b39482c1a436f6d9dcd7cc0a44f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6858252cf0b39482c1a436f6d9dcd7cc0a44f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6858252cf0b39482c1a436f6d9dcd7cc0a44f9"}], "stats": {"total": 234, "additions": 232, "deletions": 2}, "files": [{"sha": "a9e12864010d17754f913e8e327a11603ed577d1", "filename": "gcc/c-common.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -9182,6 +9182,31 @@ is_typedef_decl (tree x)\n           && DECL_ORIGINAL_TYPE (x) != NULL_TREE);\n }\n \n+/* Record the types used by the current global variable declaration\n+   being parsed, so that we can decide later to emit their debug info.\n+   Those types are in types_used_by_cur_var_decl, and we are going to\n+   store them in the types_used_by_vars_hash hash table.\n+   DECL is the declaration of the global variable that has been parsed.  */\n+\n+void\n+record_types_used_by_current_var_decl (tree decl)\n+{\n+  gcc_assert (decl && DECL_P (decl) && TREE_STATIC (decl));\n+\n+  if (types_used_by_cur_var_decl)\n+    {\n+      tree node;\n+      for (node = types_used_by_cur_var_decl;\n+\t   node;\n+\t   node = TREE_CHAIN (node))\n+      {\n+\ttree type = TREE_PURPOSE (node);\n+\ttypes_used_by_var_decl_insert (type, decl);\n+      }\n+      types_used_by_cur_var_decl = NULL;\n+    }\n+}\n+\n /* The C and C++ parsers both use vectors to hold function arguments.\n    For efficiency, we keep a cache of unused vectors.  This is the\n    cache.  */"}, {"sha": "6a02e04620909412c6d53d9e6d578c77418b1e96", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -1130,6 +1130,7 @@ extern enum omp_clause_default_kind c_omp_predetermined_sharing (tree);\n /* Not in c-omp.c; provided by the front end.  */\n extern bool c_omp_sharing_predetermined (tree);\n extern tree c_omp_remap_decl (tree, bool);\n+extern void record_types_used_by_current_var_decl (tree);\n \n /* In order for the format checking to accept the C frontend\n    diagnostic framework extensions, you must include this file before"}, {"sha": "e237332f174f09d5769b1c65b0cc09990416d3c3", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -4064,6 +4064,13 @@ finish_decl (tree decl, location_t init_loc, tree init,\n   if (asmspec_tree)\n     asmspec = TREE_STRING_POINTER (asmspec_tree);\n \n+  if (TREE_CODE (decl) == VAR_DECL\n+      && TREE_STATIC (decl)\n+      && global_bindings_p ())\n+    /* So decl is a global variable. Record the types it uses\n+       so that we can decide later to emit debug info for them.  */\n+    record_types_used_by_current_var_decl (decl);\n+\n   /* If `start_decl' didn't like having an initialization, ignore it now.  */\n   if (init != 0 && DECL_INITIAL (decl) == 0)\n     init = 0;"}, {"sha": "338e725ca668eec71bbada2e83e6732a1e00155f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -1,3 +1,9 @@\n+2009-09-23  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/41065\n+\t* decl.c (cp_finish_decl): Record the types used by the global\n+\tvariable declaration we've just parsed.\n+\n 2009-09-22  Dodji Seketeli  <dodji@redhat.com>\n \n \t* cp-lang.c (LANG_HOOKS_FUNCTION_PARAMETER_PACK_P,"}, {"sha": "407f734bc4580a53d3accd1b609a2fc2ce6b7bf9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -5801,6 +5801,15 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t type.  */\n       else if (TREE_CODE (type) == ARRAY_TYPE)\n \tlayout_type (type);\n+\n+      if (!processing_template_decl\n+\t  && TREE_STATIC (decl)\n+\t  && !at_function_scope_p ()\n+\t  && current_function_decl == NULL)\n+\t/* So decl is a global variable or a static member of a\n+\t   non local class. Record the types it uses\n+\t   so that we can decide later to emit debug info for them.  */\n+\trecord_types_used_by_current_var_decl (decl);\n     }\n   else if (TREE_CODE (decl) == FIELD_DECL\n \t   && TYPE_FOR_JAVA (type) && MAYBE_CLASS_TYPE_P (type))"}, {"sha": "b8a043497ddfc1f42a898cd0f97ec76c38d4a15e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -15649,10 +15649,11 @@ dwarf2out_abstract_function (tree decl)\n }\n \n /* Helper function of premark_used_types() which gets called through\n-   htab_traverse_resize().\n+   htab_traverse.\n \n    Marks the DIE of a given type in *SLOT as perennial, so it never gets\n    marked as unused by prune_unused_types.  */\n+\n static int\n premark_used_types_helper (void **slot, void *data ATTRIBUTE_UNUSED)\n {\n@@ -15666,14 +15667,59 @@ premark_used_types_helper (void **slot, void *data ATTRIBUTE_UNUSED)\n   return 1;\n }\n \n+/* Helper function of premark_types_used_by_global_vars which gets called\n+   through htab_traverse.\n+\n+   Marks the DIE of a given type in *SLOT as perennial, so it never gets\n+   marked as unused by prune_unused_types. The DIE of the type is marked\n+   only if the global variable using the type will actually be emitted.  */\n+\n+static int\n+premark_types_used_by_global_vars_helper (void **slot,\n+\t\t\t\t\t  void *data ATTRIBUTE_UNUSED)\n+{\n+  struct types_used_by_vars_entry *entry;\n+  dw_die_ref die;\n+\n+  entry = (struct types_used_by_vars_entry *) *slot;\n+  gcc_assert (entry->type != NULL\n+\t      && entry->var_decl != NULL);\n+  die = lookup_type_die (entry->type);\n+  if (die)\n+    {\n+      /* Ask cgraph if the global variable really is to be emitted.\n+         If yes, then we'll keep the DIE of ENTRY->TYPE.  */\n+      struct varpool_node *node = varpool_node (entry->var_decl);\n+      if (node->needed)\n+\t{\n+\t  die->die_perennial_p = 1;\n+\t  /* Keep the parent DIEs as well.  */\n+\t  while ((die = die->die_parent) && die->die_perennial_p == 0)\n+\t    die->die_perennial_p = 1;\n+\t}\n+    }\n+  return 1;\n+}\n+\n /* Mark all members of used_types_hash as perennial.  */\n+\n static void\n premark_used_types (void)\n {\n   if (cfun && cfun->used_types_hash)\n     htab_traverse (cfun->used_types_hash, premark_used_types_helper, NULL);\n }\n \n+/* Mark all members of types_used_by_vars_entry as perennial.  */\n+\n+static void\n+premark_types_used_by_global_vars (void)\n+{\n+  if (types_used_by_vars_hash)\n+    htab_traverse (types_used_by_vars_hash,\n+\t\t   premark_types_used_by_global_vars_helper, NULL);\n+}\n+\n /* Generate a DIE to represent a declared function (either file-scope or\n    block-local).  */\n \n@@ -18776,6 +18822,9 @@ prune_unused_types (void)\n     verify_marks_clear (node->die);\n #endif /* ENABLE_ASSERT_CHECKING */\n \n+  /* Mark types that are used in global variables.  */\n+  premark_types_used_by_global_vars ();\n+\n   /* Set the mark on nodes that are actually used.  */\n   prune_unused_types_walk (comp_unit_die);\n   for (node = limbo_die_list; node; node = node->next)"}, {"sha": "aaed57a5de1b354bad4c495b28f69538cc475431", "filename": "gcc/function.c", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -130,6 +130,10 @@ static GTY((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n static GTY((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n   htab_t epilogue_insn_hash;\n \f\n+\n+htab_t types_used_by_vars_hash = NULL;\n+tree types_used_by_cur_var_decl = NULL;\n+\n /* Forward declarations.  */\n \n static struct temp_slot *find_temp_slot_from_address (rtx);\n@@ -5426,6 +5430,7 @@ rest_of_handle_check_leaf_regs (void)\n }\n \n /* Insert a TYPE into the used types hash table of CFUN.  */\n+\n static void\n used_types_insert_helper (tree type, struct function *func)\n {\n@@ -5450,7 +5455,81 @@ used_types_insert (tree t)\n     t = TREE_TYPE (t);\n   t = TYPE_MAIN_VARIANT (t);\n   if (debug_info_level > DINFO_LEVEL_NONE)\n-    used_types_insert_helper (t, cfun);\n+    {\n+      if (cfun)\n+\tused_types_insert_helper (t, cfun);\n+      else\n+\t/* So this might be a type referenced by a global variable.\n+\t   Record that type so that we can later decide to emit its debug\n+\t   information.  */\n+\ttypes_used_by_cur_var_decl =\n+\t  tree_cons (t, NULL, types_used_by_cur_var_decl);\n+\n+    }\n+}\n+\n+/* Helper to Hash a struct types_used_by_vars_entry.  */\n+\n+static hashval_t\n+hash_types_used_by_vars_entry (const struct types_used_by_vars_entry *entry)\n+{\n+  gcc_assert (entry && entry->var_decl && entry->type);\n+\n+  return iterative_hash_object (entry->type,\n+\t\t\t\titerative_hash_object (entry->var_decl, 0));\n+}\n+\n+/* Hash function of the types_used_by_vars_entry hash table.  */\n+\n+hashval_t\n+types_used_by_vars_do_hash (const void *x)\n+{\n+  const struct types_used_by_vars_entry *entry =\n+    (const struct types_used_by_vars_entry *) x;\n+\n+  return hash_types_used_by_vars_entry (entry);\n+}\n+\n+/*Equality function of the types_used_by_vars_entry hash table.  */\n+\n+int\n+types_used_by_vars_eq (const void *x1, const void *x2)\n+{\n+  const struct types_used_by_vars_entry *e1 =\n+    (const struct types_used_by_vars_entry *) x1;\n+  const struct types_used_by_vars_entry *e2 =\n+    (const struct types_used_by_vars_entry *)x2;\n+\n+  return (e1->var_decl == e2->var_decl && e1->type == e2->type);\n+}\n+\n+/* Inserts an entry into the types_used_by_vars_hash hash table. */\n+\n+void\n+types_used_by_var_decl_insert (tree type, tree var_decl)\n+{\n+  if (type != NULL && var_decl != NULL)\n+    {\n+      void **slot;\n+      struct types_used_by_vars_entry e;\n+      e.var_decl = var_decl;\n+      e.type = type;\n+      if (types_used_by_vars_hash == NULL)\n+\ttypes_used_by_vars_hash =\n+\t  htab_create_ggc (37, types_used_by_vars_do_hash,\n+\t\t\t   types_used_by_vars_eq, NULL);\n+      slot = htab_find_slot_with_hash (types_used_by_vars_hash, &e,\n+\t\t\t\t       hash_types_used_by_vars_entry (&e), INSERT);\n+      if (*slot == NULL)\n+\t{\n+\t  struct types_used_by_vars_entry *entry;\n+\t  entry = (struct types_used_by_vars_entry*) ggc_alloc\n+\t\t    (sizeof (struct types_used_by_vars_entry));\n+\t  entry->type = type;\n+\t  entry->var_decl = var_decl;\n+\t  *slot = entry;\n+\t}\n+    }\n }\n \n struct rtl_opt_pass pass_leaf_regs ="}, {"sha": "4825d16cf7f2cbe699ac5eeec922436b3286b8f4", "filename": "gcc/function.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -622,6 +622,28 @@ extern int virtuals_instantiated;\n /* Nonzero if at least one trampoline has been created.  */\n extern int trampolines_created;\n \n+struct GTY(()) types_used_by_vars_entry {\n+  tree type;\n+  tree var_decl;\n+};\n+\n+/* Hash table making the relationship between a global variable\n+   and the types it references in its initializer. The key of the\n+   entry is a referenced type, and the value is the DECL of the global\n+   variable. types_use_by_vars_do_hash and types_used_by_vars_eq below are\n+   the hash and equality functions to use for this hash table.  */\n+extern GTY((param_is (struct types_used_by_vars_entry))) htab_t\n+  types_used_by_vars_hash;\n+\n+hashval_t types_used_by_vars_do_hash (const void*);\n+int types_used_by_vars_eq (const void *, const void *);\n+void types_used_by_var_decl_insert (tree type, tree var_decl);\n+\n+/* During parsing of a global variable, this linked list points to\n+   the list of types referenced by the global variable.  */\n+extern GTY(()) tree types_used_by_cur_var_decl;\n+\n+\n /* cfun shouldn't be set directly; use one of these functions instead.  */\n extern void set_cfun (struct function *new_cfun);\n extern void push_cfun (struct function *new_cfun);"}, {"sha": "5fa33fdabd2b2ee120804efe512daee7edf5cf75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -1,3 +1,8 @@\n+ 2009-09-23  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/41065\n+\t* gcc.dg/debug/dwarf2/global-used-types.c: New test.\n+\n 2009-09-23  Andreas Schwab  <schwab@redhat.com>\n \n \t* lib/profopt.exp (profopt-get-options): Set tool_flags for"}, {"sha": "bad08ed5e51168c850ac29d66ab1198b6dfa77e2", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/global-used-types-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fglobal-used-types-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fglobal-used-types-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fglobal-used-types-1.C?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -0,0 +1,13 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// { dg-options \"-g -dA -fno-merge-debug-strings\" }\n+// { dg-do compile }\n+// { dg-final { scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_enumeration_type\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_enumerator\" 2 } }\n+// { dg-final { scan-assembler-times \"ascii \\\"a.0\\\"\\[\\t \\]+.*?DW_AT_name\" 1 } }\n+// { dg-final { scan-assembler-times \"ascii \\\"b.0\\\"\\[\\t \\]+.*?DW_AT_name\" 1 } }\n+\n+struct foo\n+{\n+  enum { a, b };\n+};\n+char s[foo::b];"}, {"sha": "1c2d40326d2399fa5170732146608ddf8d0cc72b", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/global-used-types.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fglobal-used-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646ba3f1c134c4fc22b000caff77725ccec1791/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fglobal-used-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fglobal-used-types.c?ref=b646ba3f1c134c4fc22b000caff77725ccec1791", "patch": "@@ -0,0 +1,14 @@\n+/*\n+ Contributed by Dodji Seketeli <dodji@redhat.com>\n+ { dg-options \"-g -dA -fno-merge-debug-strings\" }\n+ { dg-do compile }\n+ { dg-final { scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_enumeration_type\" 1 } }\n+ { dg-final { scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_enumerator\" 2 } }\n+ { dg-final { scan-assembler-times \"ascii \\\"a.0\\\"\\[\\t \\]+.*?DW_AT_name\" 1 } }\n+ { dg-final { scan-assembler-times \"ascii \\\"b.0\\\"\\[\\t \\]+.*?DW_AT_name\" 1 } }\n+ */\n+\n+enum { a, b };\n+\n+int v = a;\n+char s[b];"}]}