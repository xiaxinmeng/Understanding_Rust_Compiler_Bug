{"sha": "a2ae575258ffcad0546eaf76c7612e988521d14a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJhZTU3NTI1OGZmY2FkMDU0NmVhZjc2Yzc2MTJlOTg4NTIxZDE0YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-06-03T15:05:11Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-06-03T15:05:11Z"}, "message": "Convert leading spaces to tabs\n\nFrom-SVN: r237071", "tree": {"sha": "9441d98b1ddd16e69a2df2173c4724f8c37bafe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9441d98b1ddd16e69a2df2173c4724f8c37bafe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ae575258ffcad0546eaf76c7612e988521d14a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ae575258ffcad0546eaf76c7612e988521d14a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ae575258ffcad0546eaf76c7612e988521d14a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ae575258ffcad0546eaf76c7612e988521d14a/comments", "author": null, "committer": null, "parents": [{"sha": "b605f6639c14383eb274e90c4fa6f995af514fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b605f6639c14383eb274e90c4fa6f995af514fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b605f6639c14383eb274e90c4fa6f995af514fbc"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "0acae52f25de0ec2429c6aa946b2c3f9930f9264", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ae575258ffcad0546eaf76c7612e988521d14a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ae575258ffcad0546eaf76c7612e988521d14a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2ae575258ffcad0546eaf76c7612e988521d14a", "patch": "@@ -1,59 +1,59 @@\n 2016-06-03  Bernd Schmidt  <bschmidt@redhat.com>\n \n-        PR tree-optimization/52171\n-        * builtins.c (expand_cmpstrn_or_cmpmem): Delete, moved elsewhere.\n-        (expand_builtin_memcmp): New arg RESULT_EQ.  All callers changed.\n-        Look for constant strings.  Move some code to emit_block_cmp_hints\n-        and use it.\n-        * builtins.def (BUILT_IN_MEMCMP_EQ): New.\n-        * defaults.h (COMPARE_MAX_PIECES): New macro.\n-        * expr.c (move_by_pieces_d, store_by_pieces_d): Remove old structs.\n-        (move_by_pieces_1, store_by_pieces_1, store_by_pieces_2): Remvoe.\n-        (clear_by_pieces_1): Don't declare.  Move definition before use.\n-        (can_do_by_pieces): New static function.\n-        (can_move_by_pieces): Use it.  Return bool.\n-        (by_pieces_ninsns): Renamed from move_by_pieces_ninsns.  New arg\n-        OP.  All callers changed.  Handle COMPARE_BY_PIECES.\n-        (class pieces_addr); New.\n-        (pieces_addr::pieces_addr, pieces_addr::decide_autoinc,\n-        pieces_addr::adjust, pieces_addr::increment_address,\n-        pieces_addr::maybe_predec, pieces_addr::maybe_postinc): New member\n-        functions for it.\n-        (class op_by_pieces_d): New.\n-        (op_by_pieces_d::op_by_pieces_d, op_by_pieces_d::run): New member\n-        functions for it.\n-        (class move_by_pieces_d, class compare_by_pieces_d,\n-        class store_by_pieces_d): New subclasses of op_by_pieces_d.\n-        (move_by_pieces_d::prepare_mode, move_by_pieces_d::generate,\n-        move_by_pieces_d::finish_endp, store_by_pieces_d::prepare_mode,\n-        store_by_pieces_d::generate, store_by_pieces_d::finish_endp,\n-        compare_by_pieces_d::generate, compare_by_pieces_d::prepare_mode,\n-        compare_by_pieces_d::finish_mode): New member functions.\n-        (compare_by_pieces, emit_block_cmp_via_cmpmem): New static\n-        functions.\n-        (expand_cmpstrn_or_cmpmem): Moved here from builtins.c.\n-        (emit_block_cmp_hints): New function.\n-        (move_by_pieces, store_by_pieces, clear_by_pieces): Rewrite to just\n-        use the newly defined classes.\n-        * expr.h (by_pieces_constfn): New typedef.\n-        (can_store_by_pieces, store_by_pieces): Use it in arg declarations.\n-        (emit_block_cmp_hints, expand_cmpstrn_or_cmpmem): Declare.\n-        (move_by_pieces_ninsns): Don't declare.\n-        (can_move_by_pieces): Change return value to bool.\n-        * target.def (TARGET_USE_BY_PIECES_INFRASTRUCTURE_P): Update docs.\n-        (compare_by_pieces_branch_ratio): New hook.\n-        * target.h (enum by_pieces_operation): Add COMPARE_BY_PIECES.\n-        (by_pieces_ninsns): Declare.\n-        * targethooks.c (default_use_by_pieces_infrastructure_p): Handle\n-        COMPARE_BY_PIECES.\n-        (default_compare_by_pieces_branch_ratio): New function.\n-        * targhooks.h (default_compare_by_pieces_branch_ratio): Declare.\n-        * doc/tm.texi.in (STORE_MAX_PIECES, COMPARE_MAX_PIECES): Document.\n-        * doc/tm.texi: Regenerate.\n-        * tree-ssa-strlen.c: Include \"builtins.h\".\n-        (handle_builtin_memcmp): New static function.\n-        (strlen_optimize_stmt): Call it for BUILT_IN_MEMCMP.\n-        * tree.c (build_common_builtin_nodes): Create __builtin_memcmp_eq.\n+\tPR tree-optimization/52171\n+\t* builtins.c (expand_cmpstrn_or_cmpmem): Delete, moved elsewhere.\n+\t(expand_builtin_memcmp): New arg RESULT_EQ.  All callers changed.\n+\tLook for constant strings.  Move some code to emit_block_cmp_hints\n+\tand use it.\n+\t* builtins.def (BUILT_IN_MEMCMP_EQ): New.\n+\t* defaults.h (COMPARE_MAX_PIECES): New macro.\n+\t* expr.c (move_by_pieces_d, store_by_pieces_d): Remove old structs.\n+\t(move_by_pieces_1, store_by_pieces_1, store_by_pieces_2): Remvoe.\n+\t(clear_by_pieces_1): Don't declare.  Move definition before use.\n+\t(can_do_by_pieces): New static function.\n+\t(can_move_by_pieces): Use it.  Return bool.\n+\t(by_pieces_ninsns): Renamed from move_by_pieces_ninsns.  New arg\n+\tOP.  All callers changed.  Handle COMPARE_BY_PIECES.\n+\t(class pieces_addr); New.\n+\t(pieces_addr::pieces_addr, pieces_addr::decide_autoinc,\n+\tpieces_addr::adjust, pieces_addr::increment_address,\n+\tpieces_addr::maybe_predec, pieces_addr::maybe_postinc): New member\n+\tfunctions for it.\n+\t(class op_by_pieces_d): New.\n+\t(op_by_pieces_d::op_by_pieces_d, op_by_pieces_d::run): New member\n+\tfunctions for it.\n+\t(class move_by_pieces_d, class compare_by_pieces_d,\n+\tclass store_by_pieces_d): New subclasses of op_by_pieces_d.\n+\t(move_by_pieces_d::prepare_mode, move_by_pieces_d::generate,\n+\tmove_by_pieces_d::finish_endp, store_by_pieces_d::prepare_mode,\n+\tstore_by_pieces_d::generate, store_by_pieces_d::finish_endp,\n+\tcompare_by_pieces_d::generate, compare_by_pieces_d::prepare_mode,\n+\tcompare_by_pieces_d::finish_mode): New member functions.\n+\t(compare_by_pieces, emit_block_cmp_via_cmpmem): New static\n+\tfunctions.\n+\t(expand_cmpstrn_or_cmpmem): Moved here from builtins.c.\n+\t(emit_block_cmp_hints): New function.\n+\t(move_by_pieces, store_by_pieces, clear_by_pieces): Rewrite to just\n+\tuse the newly defined classes.\n+\t* expr.h (by_pieces_constfn): New typedef.\n+\t(can_store_by_pieces, store_by_pieces): Use it in arg declarations.\n+\t(emit_block_cmp_hints, expand_cmpstrn_or_cmpmem): Declare.\n+\t(move_by_pieces_ninsns): Don't declare.\n+\t(can_move_by_pieces): Change return value to bool.\n+\t* target.def (TARGET_USE_BY_PIECES_INFRASTRUCTURE_P): Update docs.\n+\t(compare_by_pieces_branch_ratio): New hook.\n+\t* target.h (enum by_pieces_operation): Add COMPARE_BY_PIECES.\n+\t(by_pieces_ninsns): Declare.\n+\t* targethooks.c (default_use_by_pieces_infrastructure_p): Handle\n+\tCOMPARE_BY_PIECES.\n+\t(default_compare_by_pieces_branch_ratio): New function.\n+\t* targhooks.h (default_compare_by_pieces_branch_ratio): Declare.\n+\t* doc/tm.texi.in (STORE_MAX_PIECES, COMPARE_MAX_PIECES): Document.\n+\t* doc/tm.texi: Regenerate.\n+\t* tree-ssa-strlen.c: Include \"builtins.h\".\n+\t(handle_builtin_memcmp): New static function.\n+\t(strlen_optimize_stmt): Call it for BUILT_IN_MEMCMP.\n+\t* tree.c (build_common_builtin_nodes): Create __builtin_memcmp_eq.\n \n 2016-06-03  Alan Hayward  <alan.hayward@arm.com>\n "}]}