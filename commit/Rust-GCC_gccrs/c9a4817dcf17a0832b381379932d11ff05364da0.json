{"sha": "c9a4817dcf17a0832b381379932d11ff05364da0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlhNDgxN2RjZjE3YTA4MzJiMzgxMzc5OTMyZDExZmYwNTM2NGRhMA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@gnat.com", "date": "2001-12-05T19:54:31Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-05T19:54:31Z"}, "message": "checks.adb (Determine_Range): Increase cache size for checks.\n\n\t* checks.adb (Determine_Range): Increase cache size for checks.\n\tMinor reformatting\n\n\t* exp_ch6.adb: Minor reformatting\n\t(Expand_N_Subprogram_Body): Reset Is_Pure for any subprogram that has\n\ta parameter whose root type is System.Address, since treating such\n\tsubprograms as pure in the code generator is almost surely a mistake\n\tthat will lead to unexpected results.\n\n\t* exp_util.adb (Remove_Side_Effects): Clean up old ??? comment and\n\tchange handling of conversions.\n\n\t* g-regexp.adb: Use System.IO instead of Ada.Text_IO.\n\nFrom-SVN: r47686", "tree": {"sha": "778c6e490bb446bbf9f01f0b4c60a5e158d7885b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/778c6e490bb446bbf9f01f0b4c60a5e158d7885b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9a4817dcf17a0832b381379932d11ff05364da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9a4817dcf17a0832b381379932d11ff05364da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9a4817dcf17a0832b381379932d11ff05364da0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9a4817dcf17a0832b381379932d11ff05364da0/comments", "author": null, "committer": null, "parents": [{"sha": "2514b8392d938188b558ec4f4716e9b1e210dcf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2514b8392d938188b558ec4f4716e9b1e210dcf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2514b8392d938188b558ec4f4716e9b1e210dcf6"}], "stats": {"total": 117, "additions": 83, "deletions": 34}, "files": [{"sha": "1f92e12c202827b1bf421708161b5767a3254e1e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c9a4817dcf17a0832b381379932d11ff05364da0", "patch": "@@ -1,3 +1,19 @@\n+2001-12-05  Robert Dewar <dewar@gnat.com>\n+\n+\t* checks.adb (Determine_Range): Increase cache size for checks. \n+\tMinor reformatting\n+\t\n+\t* exp_ch6.adb: Minor reformatting\n+\t(Expand_N_Subprogram_Body): Reset Is_Pure for any subprogram that has\n+\ta parameter whose root type is System.Address, since treating such\n+\tsubprograms as pure in the code generator is almost surely a mistake\n+\tthat will lead to unexpected results.\n+\t\n+\t* exp_util.adb (Remove_Side_Effects): Clean up old ??? comment and \n+\tchange handling of conversions.\n+\t\n+\t* g-regexp.adb: Use System.IO instead of Ada.Text_IO.\n+\n 2001-12-05  Ed Schonberg <schonber@gnat.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): If expression is an "}, {"sha": "67723b5b98654cd13e992c868c322715655b0444", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=c9a4817dcf17a0832b381379932d11ff05364da0", "patch": "@@ -1863,7 +1863,7 @@ package body Checks is\n    -- Determine_Range --\n    ---------------------\n \n-   Cache_Size : constant := 2 ** 6;\n+   Cache_Size : constant := 2 ** 10;\n    type Cache_Index is range 0 .. Cache_Size - 1;\n    --  Determine size of below cache (power of 2 is more efficient!)\n \n@@ -2705,7 +2705,7 @@ package body Checks is\n       --  validity checks on the validity checking code itself!\n \n       else\n-         Validity_Checks_On  := False;\n+         Validity_Checks_On := False;\n          Insert_Action\n            (Expr,\n             Make_Raise_Constraint_Error (Loc,"}, {"sha": "9930904d39d8130040c8ef29c9e11353e1af15c5", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c9a4817dcf17a0832b381379932d11ff05364da0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.1 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -150,9 +150,9 @@ package body Exp_Ch6 is\n    --  reference to the object itself, and the call becomes a call to the\n    --  corresponding protected subprogram.\n \n-   ---------------------------------\n-   --  Check_Overriding_Operation --\n-   ---------------------------------\n+   --------------------------------\n+   -- Check_Overriding_Operation --\n+   --------------------------------\n \n    procedure Check_Overriding_Operation (Subp : Entity_Id) is\n       Typ     : constant Entity_Id := Find_Dispatching_Type (Subp);\n@@ -2659,9 +2659,12 @@ package body Exp_Ch6 is\n \n    --  Initialize scalar out parameters if Initialize/Normalize_Scalars\n \n+   --  Reset Pure indication if any parameter has root type System.Address\n+\n    procedure Expand_N_Subprogram_Body (N : Node_Id) is\n       Loc      : constant Source_Ptr := Sloc (N);\n       H        : constant Node_Id    := Handled_Statement_Sequence (N);\n+      Body_Id  : Entity_Id;\n       Spec_Id  : Entity_Id;\n       Except_H : Node_Id;\n       Scop     : Entity_Id;\n@@ -2712,17 +2715,47 @@ package body Exp_Ch6 is\n \n       --  Find entity for subprogram\n \n+      Body_Id := Defining_Entity (N);\n+\n       if Present (Corresponding_Spec (N)) then\n          Spec_Id := Corresponding_Spec (N);\n       else\n-         Spec_Id := Defining_Entity (N);\n+         Spec_Id := Body_Id;\n+      end if;\n+\n+      --  If this is a Pure function which has any parameters whose root\n+      --  type is System.Address, reset the Pure indication, since it will\n+      --  likely cause incorrect code to be generated.\n+\n+      if Is_Pure (Spec_Id)\n+        and then Is_Subprogram (Spec_Id)\n+        and then not Has_Pragma_Pure_Function (Spec_Id)\n+      then\n+         declare\n+            F : Entity_Id := First_Formal (Spec_Id);\n+\n+         begin\n+            while Present (F) loop\n+               if Is_RTE (Root_Type (Etype (F)), RE_Address) then\n+                  Set_Is_Pure (Spec_Id, False);\n+\n+                  if Spec_Id /= Body_Id then\n+                     Set_Is_Pure (Body_Id, False);\n+                  end if;\n+\n+                  exit;\n+               end if;\n+\n+               Next_Formal (F);\n+            end loop;\n+         end;\n       end if;\n \n       --  Initialize any scalar OUT args if Initialize/Normalize_Scalars\n \n       if Init_Or_Norm_Scalars and then Is_Subprogram (Spec_Id) then\n          declare\n-            F : Entity_Id := First_Formal (Spec_Id);\n+            F : Entity_Id        := First_Formal (Spec_Id);\n             V : constant Boolean := Validity_Checks_On;\n \n          begin\n@@ -2881,7 +2914,6 @@ package body Exp_Ch6 is\n             Set_Privals (Dec, Next_Op, Loc);\n             Set_Discriminals (Dec, Next_Op, Loc);\n          end if;\n-\n       end if;\n \n       --  If subprogram contains a parameterless recursive call, then we may"}, {"sha": "8f64f1634fb78ac6a40f600fe0acbc1829eedda0", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c9a4817dcf17a0832b381379932d11ff05364da0", "patch": "@@ -2861,13 +2861,13 @@ package body Exp_Util is\n       --  circumstances: for change of representations, and also when this\n       --  is a view conversion to a smaller object, where gigi can end up\n       --  its own temporary of the wrong size.\n+\n       --  ??? this transformation is inhibited for elementary types that are\n       --  not involved in a change of representation because it causes\n       --  regressions that are not fully understood yet.\n \n       elsif Nkind (Exp) = N_Type_Conversion\n-        and then (not Is_Elementary_Type (Underlying_Type (Exp_Type))\n-                   or else Nkind (Parent (Exp)) = N_Assignment_Statement)\n+        and then not Name_Req\n       then\n          Remove_Side_Effects (Expression (Exp), Variable_Ref);\n          Scope_Suppress := Svg_Suppress;"}, {"sha": "360badc69ea431355f15d852a0cb9f012985766b", "filename": "gcc/ada/g-regexp.adb", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2Fg-regexp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a4817dcf17a0832b381379932d11ff05364da0/gcc%2Fada%2Fg-regexp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-regexp.adb?ref=c9a4817dcf17a0832b381379932d11ff05364da0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.27 $\n+--                            $Revision$\n --                                                                          --\n --            Copyright (C) 1999-2001 Ada Core Technologies, Inc.           --\n --                                                                          --\n@@ -32,7 +32,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Text_IO;\n+with System.IO;\n with Unchecked_Deallocation;\n with Ada.Exceptions;\n with GNAT.Case_Util;\n@@ -1226,8 +1226,8 @@ package body GNAT.Regexp is\n             end loop;\n \n             if Debug then\n-               Ada.Text_IO.New_Line;\n-               Ada.Text_IO.Put_Line (\"Secondary table : \");\n+               System.IO.New_Line;\n+               System.IO.Put_Line (\"Secondary table : \");\n                Print_Table (R.States, Nb_State, False);\n             end if;\n \n@@ -1267,39 +1267,39 @@ package body GNAT.Regexp is\n       begin\n          --  Print the header line\n \n-         Ada.Text_IO.Put (\"   [*]  \");\n+         System.IO.Put (\"   [*]  \");\n \n          for Column in 1 .. Alphabet_Size  loop\n-            Ada.Text_IO.Put (String'(1 .. 1 => Reverse_Mapping (Column))\n-                             & \"   \");\n+            System.IO.Put\n+              (String'(1 .. 1 => Reverse_Mapping (Column)) & \"   \");\n          end loop;\n \n          if Is_Primary then\n-            Ada.Text_IO.Put (\"closure....\");\n+            System.IO.Put (\"closure....\");\n          end if;\n \n-         Ada.Text_IO.New_Line;\n+         System.IO.New_Line;\n \n          --  Print every line\n \n          for State in 1 .. Num_States loop\n-            Ada.Text_IO.Put (State'Img);\n+            System.IO.Put (State'Img);\n \n             for K in 1 .. 3 - State'Img'Length loop\n-               Ada.Text_IO.Put (\" \");\n+               System.IO.Put (\" \");\n             end loop;\n \n             for K in 0 .. Alphabet_Size loop\n-               Ada.Text_IO.Put (Table (State, K)'Img & \"  \");\n+               System.IO.Put (Table (State, K)'Img & \"  \");\n             end loop;\n \n             for K in Alphabet_Size + 1 .. Table'Last (2) loop\n                if Table (State, K) /= 0 then\n-                  Ada.Text_IO.Put (Table (State, K)'Img & \",\");\n+                  System.IO.Put (Table (State, K)'Img & \",\");\n                end if;\n             end loop;\n \n-            Ada.Text_IO.New_Line;\n+            System.IO.New_Line;\n          end loop;\n \n       end Print_Table;\n@@ -1347,8 +1347,8 @@ package body GNAT.Regexp is\n \n          if Debug then\n             Print_Table (Table.all, Num_States);\n-            Ada.Text_IO.Put_Line (\"Start_State : \" & Start_State'Img);\n-            Ada.Text_IO.Put_Line (\"End_State   : \" & End_State'Img);\n+            System.IO.Put_Line (\"Start_State : \" & Start_State'Img);\n+            System.IO.Put_Line (\"End_State   : \" & End_State'Img);\n          end if;\n \n          --  Creates the secondary table\n@@ -1453,13 +1453,14 @@ package body GNAT.Regexp is\n          New_Table.all := (others => (others => 0));\n \n          if Debug then\n-            Ada.Text_IO.Put_Line (\"Reallocating table: Lines from \"\n-                                  & State_Index'Image (Table'Last (1)) & \" to \"\n-                                  & State_Index'Image (New_Lines));\n-            Ada.Text_IO.Put_Line (\"   and columns from \"\n-                                  & Column_Index'Image (Table'Last (2))\n-                                  & \" to \"\n-                                  & Column_Index'Image (New_Columns));\n+            System.IO.Put_Line (\"Reallocating table: Lines from \"\n+                                & State_Index'Image (Table'Last (1))\n+                                & \" to \"\n+                                & State_Index'Image (New_Lines));\n+            System.IO.Put_Line (\"   and columns from \"\n+                                & Column_Index'Image (Table'Last (2))\n+                                & \" to \"\n+                                & Column_Index'Image (New_Columns));\n          end if;\n \n          for J in Table'Range (1) loop"}]}