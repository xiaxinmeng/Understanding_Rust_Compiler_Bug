{"sha": "f5fe239ec90095b885aef70a8058fdfc03a74340", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVmZTIzOWVjOTAwOTViODg1YWVmNzBhODA1OGZkZmMwM2E3NDM0MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-06-21T13:47:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-06-21T13:47:48Z"}, "message": "lto-streamer-out.c (DFS::DFS_write_tree_body): Update outdated comment.\n\n2018-06-21  Richard Biener  <rguenther@suse.de>\n\n\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Update outdated\n\tcomment.  Follow BLOCK_ABSTRACT_ORIGIN unconditionally.\n\t* tree-streamer-in.c (lto_input_ts_block_tree_pointers): Update\n\tcomment.\n\t* tree-streamer-out.c (write_ts_block_tree_pointers): Stream\n\tBLOCK_ABSTRACT_ORIGIN unconditionally.\n\nFrom-SVN: r261847", "tree": {"sha": "02dd721152dc2268b7d933b8468064b3448c7a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02dd721152dc2268b7d933b8468064b3448c7a77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5fe239ec90095b885aef70a8058fdfc03a74340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fe239ec90095b885aef70a8058fdfc03a74340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fe239ec90095b885aef70a8058fdfc03a74340", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fe239ec90095b885aef70a8058fdfc03a74340/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e67343d7445768ef22523894ec589791f526234c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67343d7445768ef22523894ec589791f526234c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67343d7445768ef22523894ec589791f526234c"}], "stats": {"total": 47, "additions": 12, "deletions": 35}, "files": [{"sha": "829fe955c19232ca209576628b572b4efcb97e63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fe239ec90095b885aef70a8058fdfc03a74340/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fe239ec90095b885aef70a8058fdfc03a74340/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5fe239ec90095b885aef70a8058fdfc03a74340", "patch": "@@ -1,3 +1,12 @@\n+2018-06-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Update outdated\n+\tcomment.  Follow BLOCK_ABSTRACT_ORIGIN unconditionally.\n+\t* tree-streamer-in.c (lto_input_ts_block_tree_pointers): Update\n+\tcomment.\n+\t* tree-streamer-out.c (write_ts_block_tree_pointers): Stream\n+\tBLOCK_ABSTRACT_ORIGIN unconditionally.\n+\n 2018-06-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ipa-cp.c (ipcp_driver): Set edge_clone_summaries to NULL after"}, {"sha": "d9f85bb8108e9b9513b62e71c7d3909b7f0db30b", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fe239ec90095b885aef70a8058fdfc03a74340/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fe239ec90095b885aef70a8058fdfc03a74340/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=f5fe239ec90095b885aef70a8058fdfc03a74340", "patch": "@@ -801,10 +801,7 @@ DFS::DFS_write_tree_body (struct output_block *ob,\n \n       DFS_follow_tree_edge (DECL_ATTRIBUTES (expr));\n \n-      /* Do not follow DECL_ABSTRACT_ORIGIN.  We cannot handle debug information\n-\t for early inlining so drop it on the floor instead of ICEing in\n-\t dwarf2out.c.\n-\t We however use DECL_ABSTRACT_ORIGIN == error_mark_node to mark\n+      /* We use DECL_ABSTRACT_ORIGIN == error_mark_node to mark\n \t declarations which should be eliminated by decl merging. Be sure none\n \t leaks to this point.  */\n       gcc_assert (DECL_ABSTRACT_ORIGIN (expr) != error_mark_node);\n@@ -917,20 +914,8 @@ DFS::DFS_write_tree_body (struct output_block *ob,\n \t  DFS_follow_tree_edge (t);\n \n       DFS_follow_tree_edge (BLOCK_SUPERCONTEXT (expr));\n+      DFS_follow_tree_edge (BLOCK_ABSTRACT_ORIGIN (expr));\n \n-      /* Follow BLOCK_ABSTRACT_ORIGIN for the limited cases we can\n-\t handle - those that represent inlined function scopes.\n-\t For the drop rest them on the floor instead of ICEing\n-\t in dwarf2out.c, but keep the notion of whether the block\n-\t is an inlined block by refering to itself for the sake of\n-\t tree_nonartificial_location.  */\n-      if (inlined_function_outer_scope_p (expr))\n-\t{\n-\t  tree ultimate_origin = block_ultimate_origin (expr);\n-\t  DFS_follow_tree_edge (ultimate_origin);\n-\t}\n-      else if (BLOCK_ABSTRACT_ORIGIN (expr))\n-\tDFS_follow_tree_edge (expr);\n       /* Do not follow BLOCK_NONLOCALIZED_VARS.  We cannot handle debug\n \t information for early inlined BLOCKs so drop it on the floor instead\n \t of ICEing in dwarf2out.c.  */"}, {"sha": "9fd9e721b5ba5fd602d623cf1f05006b5434dcf4", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fe239ec90095b885aef70a8058fdfc03a74340/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fe239ec90095b885aef70a8058fdfc03a74340/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=f5fe239ec90095b885aef70a8058fdfc03a74340", "patch": "@@ -927,11 +927,6 @@ lto_input_ts_block_tree_pointers (struct lto_input_block *ib,\n   BLOCK_VARS (expr) = streamer_read_chain (ib, data_in);\n \n   BLOCK_SUPERCONTEXT (expr) = stream_read_tree (ib, data_in);\n-\n-  /* Stream BLOCK_ABSTRACT_ORIGIN and BLOCK_SOURCE_LOCATION for\n-     the limited cases we can handle - those that represent inlined\n-     function scopes.  For the rest them on the floor instead of ICEing in\n-     dwarf2out.c.  */\n   BLOCK_ABSTRACT_ORIGIN (expr) = stream_read_tree (ib, data_in);\n   /* Do not stream BLOCK_NONLOCALIZED_VARS.  We cannot handle debug information\n      for early inlined BLOCKs so drop it on the floor instead of ICEing in"}, {"sha": "29bf06499518658a6853d354484fb0c6b1f8c27a", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fe239ec90095b885aef70a8058fdfc03a74340/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fe239ec90095b885aef70a8058fdfc03a74340/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=f5fe239ec90095b885aef70a8058fdfc03a74340", "patch": "@@ -779,20 +779,8 @@ write_ts_block_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n   streamer_write_chain (ob, BLOCK_VARS (expr), ref_p);\n \n   stream_write_tree (ob, BLOCK_SUPERCONTEXT (expr), ref_p);\n+  stream_write_tree (ob, BLOCK_ABSTRACT_ORIGIN (expr), ref_p);\n \n-  /* Stream BLOCK_ABSTRACT_ORIGIN for the limited cases we can handle - those\n-     that represent inlined function scopes.\n-     For the rest them on the floor instead of ICEing in dwarf2out.c, but\n-     keep the notion of whether the block is an inlined block by refering\n-     to itself for the sake of tree_nonartificial_location.  */\n-  if (inlined_function_outer_scope_p (expr))\n-    {\n-      tree ultimate_origin = block_ultimate_origin (expr);\n-      stream_write_tree (ob, ultimate_origin, ref_p);\n-    }\n-  else\n-    stream_write_tree (ob, (BLOCK_ABSTRACT_ORIGIN (expr)\n-\t\t\t    ? expr : NULL_TREE), ref_p);\n   /* Do not stream BLOCK_NONLOCALIZED_VARS.  We cannot handle debug information\n      for early inlined BLOCKs so drop it on the floor instead of ICEing in\n      dwarf2out.c.  */"}]}