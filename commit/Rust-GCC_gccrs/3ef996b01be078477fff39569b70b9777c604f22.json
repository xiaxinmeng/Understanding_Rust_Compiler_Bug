{"sha": "3ef996b01be078477fff39569b70b9777c604f22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmOTk2YjAxYmUwNzg0NzdmZmYzOTU2OWI3MGI5Nzc3YzYwNGYyMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-11T00:18:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-11T00:18:02Z"}, "message": "gengenrtl.c (find_formats, genheader): Make i an unsigned int, remove cast of NUM_RTX_CODE.\n\n\t* gengenrtl.c (find_formats, genheader): Make i an unsigned\n\tint, remove cast of NUM_RTX_CODE.\n\t* machmode.h: Make the HAVE_MACHINE_MODES #ifdef encompass the\n\tentire file.  Remove the #ifs on GET_MODE_MASK etc and\n\tGET_MODE_WIDER_MODE etc.\n\nFrom-SVN: r72321", "tree": {"sha": "5269637c07816870a919120837e9ac717724d3fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5269637c07816870a919120837e9ac717724d3fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ef996b01be078477fff39569b70b9777c604f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef996b01be078477fff39569b70b9777c604f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef996b01be078477fff39569b70b9777c604f22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef996b01be078477fff39569b70b9777c604f22/comments", "author": null, "committer": null, "parents": [{"sha": "129c1f79ed4e7c1c06051973591d253f703cc1fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129c1f79ed4e7c1c06051973591d253f703cc1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129c1f79ed4e7c1c06051973591d253f703cc1fd"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "c0800b30343a423d59d2b6d0a463a98777031d9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef996b01be078477fff39569b70b9777c604f22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef996b01be078477fff39569b70b9777c604f22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ef996b01be078477fff39569b70b9777c604f22", "patch": "@@ -1,14 +1,22 @@\n+2003-10-10  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gengenrtl.c (find_formats, genheader): Make i an unsigned\n+\tint, remove cast of NUM_RTX_CODE.\n+\t* machmode.h: Make the HAVE_MACHINE_MODES #ifdef encompass the\n+\tentire file.  Remove the #ifs on GET_MODE_MASK etc and\n+\tGET_MODE_WIDER_MODE etc.\n+\n 2003-10-10  Eric Christopher  <echristo@redhat.com>\n \n-        * lcm.c (optimize_mode_switching): Change NORMAL_MODE\n-        to MODE_ENTRY and MODE_EXIT. Add MODE_AFTER for insns\n-        that set mode.\n-        * config/sh/sh.h (MODE_ENTRY): New macro.\n-        (MODE_EXIT): Ditto.\n-        (MODE_AFTER): Ditto.\n-        * config/sh/sh.md: Change for MODE_AFTER. Add\n-        fp_set attribute.\n-        * doc/tm.texi: Document MODE_AFTER, MODE_ENTRY, and MODE_EXIT.\n+\t* lcm.c (optimize_mode_switching): Change NORMAL_MODE\n+\tto MODE_ENTRY and MODE_EXIT. Add MODE_AFTER for insns\n+\tthat set mode.\n+\t* config/sh/sh.h (MODE_ENTRY): New macro.\n+\t(MODE_EXIT): Ditto.\n+\t(MODE_AFTER): Ditto.\n+\t* config/sh/sh.md: Change for MODE_AFTER. Add\n+\tfp_set attribute.\n+\t* doc/tm.texi: Document MODE_AFTER, MODE_ENTRY, and MODE_EXIT.\n \n 2003-10-10  Zack Weinberg  <zack@codesourcery.com>\n \n@@ -54,7 +62,7 @@\n \tas global.\n \t* config/ia64/ia64.h (ASM_APP_ON, ASM_APP_OFF): Add vers for not GAS.\n \t(ASM_OUTPUT_DEBUG_LABEL): Likewise.\n-\t\n+\n \t* stor-layout.c (compute_record_mode): Don't force BLKmode if\n \tfield is zero-length BLKmode.\n \t* expr.c (expand_expr, case COMPONENT_REF): Handle case of BLKmode"}, {"sha": "740128b8e9d097aa630e8fab124e3f8682e3da29", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef996b01be078477fff39569b70b9777c604f22/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef996b01be078477fff39569b70b9777c604f22/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=3ef996b01be078477fff39569b70b9777c604f22", "patch": "@@ -165,9 +165,9 @@ excluded_rtx (int idx)\n static void\n find_formats (void)\n {\n-  int i;\n+  unsigned int i;\n \n-  for (i = 0; i < (int)NUM_RTX_CODE; i++)\n+  for (i = 0; i < NUM_RTX_CODE; i++)\n     {\n       const char **f;\n \n@@ -296,7 +296,7 @@ genlegend (void)\n static void\n genheader (void)\n {\n-  int i;\n+  unsigned int i;\n   const char **fmt;\n \n   puts (\"#ifndef GCC_GENRTL_H\");\n@@ -307,7 +307,7 @@ genheader (void)\n \n   putchar ('\\n');\n \n-  for (i = 0; i < (int) NUM_RTX_CODE; i++)\n+  for (i = 0; i < NUM_RTX_CODE; i++)\n     if (! special_format (defs[i].format))\n       genmacro (i);\n "}, {"sha": "04b2de16753635bff78cf1b97b1487d3127b3883", "filename": "gcc/machmode.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef996b01be078477fff39569b70b9777c604f22/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef996b01be078477fff39569b70b9777c604f22/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=3ef996b01be078477fff39569b70b9777c604f22", "patch": "@@ -97,10 +97,6 @@ extern const unsigned char mode_unit_size[NUM_MACHINE_MODES];\n extern const unsigned short mode_bitsize[NUM_MACHINE_MODES];\n #define GET_MODE_BITSIZE(MODE)  mode_bitsize[MODE]\n \n-#endif /* not HAVE_MACHINE_MODES */\n-\n-#if defined HOST_WIDE_INT && ! defined GET_MODE_MASK\n-\n /* Get a bitmask containing 1 for all bits in a word\n    that fit within mode MODE.  */\n \n@@ -114,11 +110,6 @@ extern const unsigned char mode_inner[NUM_MACHINE_MODES];\n \n #define GET_MODE_INNER(MODE) mode_inner[MODE]\n \n-#endif /* defined (HOST_WIDE_INT) && ! defined GET_MODE_MASK */\n-\n-#if ! defined GET_MODE_WIDER_MODE || ! defined GET_MODE_ALIGNMENT \\\n-    || ! defined GET_CLASS_NARROWEST_MODE\n-\n /* Get the next wider natural mode (eg, QI -> HI -> SI -> DI -> TI).  */\n \n extern const unsigned char mode_wider[NUM_MACHINE_MODES];\n@@ -166,5 +157,4 @@ extern enum machine_mode byte_mode;\n extern enum machine_mode word_mode;\n extern enum machine_mode ptr_mode;\n \n-#endif /* ! defined GET_MODE_WIDER_MODE || ! defined GET_MODE_ALIGNMENT\n-\t  || ! defined GET_CLASS_NARROWEST_MODE */\n+#endif /* not HAVE_MACHINE_MODES */"}]}