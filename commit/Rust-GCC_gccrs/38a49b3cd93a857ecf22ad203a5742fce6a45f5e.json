{"sha": "38a49b3cd93a857ecf22ad203a5742fce6a45f5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhhNDliM2NkOTNhODU3ZWNmMjJhZDIwM2E1NzQyZmNlNmE0NWY1ZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-01-05T14:25:06Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-01-05T14:25:06Z"}, "message": "HSA: implement DIVMOD internal function call\n\n2017-01-05  Martin Liska  <mliska@suse.cz>\n\n\t* hsa-gen.c (gen_hsa_divmod): New function.\n\t(gen_hsa_insn_for_internal_fn_call): Use the function\n\tfor IFN_DIVMOD.\n\nFrom-SVN: r244104", "tree": {"sha": "7d4b2dc7fe1043a171e117adfdb3bb3ee9fd6dde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4b2dc7fe1043a171e117adfdb3bb3ee9fd6dde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38a49b3cd93a857ecf22ad203a5742fce6a45f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a49b3cd93a857ecf22ad203a5742fce6a45f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a49b3cd93a857ecf22ad203a5742fce6a45f5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a49b3cd93a857ecf22ad203a5742fce6a45f5e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd445b543ce675338249055ee7493cc54777307a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd445b543ce675338249055ee7493cc54777307a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd445b543ce675338249055ee7493cc54777307a"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "62884e82ebe8ae578a461ec62286e41c9443ab4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a49b3cd93a857ecf22ad203a5742fce6a45f5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a49b3cd93a857ecf22ad203a5742fce6a45f5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38a49b3cd93a857ecf22ad203a5742fce6a45f5e", "patch": "@@ -1,3 +1,9 @@\n+2017-01-05  Martin Liska  <mliska@suse.cz>\n+\n+\t* hsa-gen.c (gen_hsa_divmod): New function.\n+\t(gen_hsa_insn_for_internal_fn_call): Use the function\n+\tfor IFN_DIVMOD.\n+\n 2017-01-05  Martin Liska  <mliska@suse.cz>\n \n \tPR pch/78970"}, {"sha": "632561d5e45df6d2456c57feb1bb38820f20659e", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a49b3cd93a857ecf22ad203a5742fce6a45f5e/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a49b3cd93a857ecf22ad203a5742fce6a45f5e/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=38a49b3cd93a857ecf22ad203a5742fce6a45f5e", "patch": "@@ -4345,6 +4345,40 @@ gen_hsa_popcount (gcall *call, hsa_bb *hbb)\n   gen_hsa_popcount_to_dest (dest, arg, hbb);\n }\n \n+/* Emit instructions that implement DIVMOD builtin STMT.\n+   Instructions are appended to basic block HBB.  */\n+\n+static void\n+gen_hsa_divmod (gcall *call, hsa_bb *hbb)\n+{\n+  tree lhs = gimple_call_lhs (call);\n+  if (lhs == NULL_TREE)\n+    return;\n+\n+  tree rhs0 = gimple_call_arg (call, 0);\n+  tree rhs1 = gimple_call_arg (call, 1);\n+\n+  hsa_op_with_type *arg0 = hsa_reg_or_immed_for_gimple_op (rhs0, hbb);\n+  hsa_op_with_type *arg1 = hsa_reg_or_immed_for_gimple_op (rhs1, hbb);\n+\n+  hsa_op_reg *dest0 = new hsa_op_reg (arg0->m_type);\n+  hsa_op_reg *dest1 = new hsa_op_reg (arg1->m_type);\n+\n+  hsa_insn_basic *insn = new hsa_insn_basic (3, BRIG_OPCODE_DIV, dest0->m_type,\n+\t\t\t\t\t     dest0, arg0, arg1);\n+  hbb->append_insn (insn);\n+  insn = new hsa_insn_basic (3, BRIG_OPCODE_REM, dest1->m_type, dest1, arg0,\n+\t\t\t     arg1);\n+  hbb->append_insn (insn);\n+\n+  hsa_op_reg *dest = hsa_cfun->reg_for_gimple_ssa (lhs);\n+  BrigType16_t src_type = hsa_bittype_for_type (dest0->m_type);\n+\n+  insn = new hsa_insn_packed (3, BRIG_OPCODE_COMBINE, dest->m_type,\n+\t\t\t      src_type, dest, dest0, dest1);\n+  hbb->append_insn (insn);\n+}\n+\n /* Set VALUE to a shadow kernel debug argument and append a new instruction\n    to HBB basic block.  */\n \n@@ -5050,6 +5084,10 @@ gen_hsa_insn_for_internal_fn_call (gcall *stmt, hsa_bb *hbb)\n       gen_hsa_popcount (stmt, hbb);\n       break;\n \n+    case IFN_DIVMOD:\n+      gen_hsa_divmod (stmt, hbb);\n+      break;\n+\n     case IFN_ACOS:\n     case IFN_ASIN:\n     case IFN_ATAN:"}]}