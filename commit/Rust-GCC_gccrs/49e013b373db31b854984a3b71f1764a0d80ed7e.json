{"sha": "49e013b373db31b854984a3b71f1764a0d80ed7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDllMDEzYjM3M2RiMzFiODU0OTg0YTNiNzFmMTc2NGEwZDgwZWQ3ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-26T11:05:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-26T11:05:54Z"}, "message": "20030731-2.c: Scan dce1 dump.\n\n2008-03-26  Richard Guenther  <rguenther@suse.de>\n\n\t* gcc.dg/tree-ssa/20030731-2.c: Scan dce1 dump.\n\t* gcc.dg/tree-ssa/20030917-1.c: Scan optimized dump.\n\t* gcc.dg/tree-ssa/20030917-3.c: Scan ccp1 dump.\n\t* gcc.dg/tree-ssa/20040721-1.c: Test linking, do not disable DOM.\n\t* gcc.dg/tree-ssa/pr21574.c: Scan the fre dump.\n\t* gcc.dg/tree-ssa/ssa-ccp-1.c: Scan ccp1 dump.\n\t* gcc.dg/tree-ssa/ssa-ccp-3.c: Scan ccp2 dump.\n\nFrom-SVN: r133596", "tree": {"sha": "b8a4cdfcd485b3fe3a2978ea9e503ea36cb309ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8a4cdfcd485b3fe3a2978ea9e503ea36cb309ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49e013b373db31b854984a3b71f1764a0d80ed7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e013b373db31b854984a3b71f1764a0d80ed7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e013b373db31b854984a3b71f1764a0d80ed7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e013b373db31b854984a3b71f1764a0d80ed7e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "640bd0bfacb9655e7c826fe7fcb2dd27b4e28507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640bd0bfacb9655e7c826fe7fcb2dd27b4e28507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640bd0bfacb9655e7c826fe7fcb2dd27b4e28507"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "6c8c1902efdf28a6d2d340f956d38dba6b5c6b72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49e013b373db31b854984a3b71f1764a0d80ed7e", "patch": "@@ -1,3 +1,13 @@\n+2008-03-26  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/20030731-2.c: Scan dce1 dump.\n+\t* gcc.dg/tree-ssa/20030917-1.c: Scan optimized dump.\n+\t* gcc.dg/tree-ssa/20030917-3.c: Scan ccp1 dump.\n+\t* gcc.dg/tree-ssa/20040721-1.c: Test linking, do not disable DOM.\n+\t* gcc.dg/tree-ssa/pr21574.c: Scan the fre dump.\n+\t* gcc.dg/tree-ssa/ssa-ccp-1.c: Scan ccp1 dump.\n+\t* gcc.dg/tree-ssa/ssa-ccp-3.c: Scan ccp2 dump.\n+\n 2008-03-26  Douglas Gregor  <doug.gregor@gmail.com>\n \n        * g++.dg/cpp0x/variadic84.C: Update to reflect the change in"}, {"sha": "8300320c8cf36132247bce5fe514755fc78ee1dd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030731-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-2.c?ref=49e013b373db31b854984a3b71f1764a0d80ed7e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-store_ccp\" } */\n-  \n+/* { dg-options \"-O2 -fdump-tree-dce1\" } */\n \n+void\n bar (int i, int partial, int args_addr)\n {\n   int offset = 0;\n@@ -13,5 +13,5 @@ bar (int i, int partial, int args_addr)\n \n /* There should be only one IF conditional since the first does nothing\n    useful.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"store_ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dce1\"} } */\n+/* { dg-final { cleanup-tree-dump \"dce1\" } } */"}, {"sha": "eb1f5ec7d68a8c65edcc3bb5ea8b56cbe6cf94ff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030917-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030917-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030917-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030917-1.c?ref=49e013b373db31b854984a3b71f1764a0d80ed7e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-store_ccp\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n   \n \n extern int board[];\n@@ -15,5 +15,5 @@ findbestextension (int blah, int blah2)\n }\n \n /* The argument to \"foo\" should be a variable, not a constant.  */\n-/* { dg-final { scan-tree-dump-times \"foo .defval\" 1 \"store_ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"foo .defval\" 1 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "e74bd08da90578d67848cf64dd32d0e84b94ded0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030917-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030917-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030917-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030917-3.c?ref=49e013b373db31b854984a3b71f1764a0d80ed7e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-store_ccp\" } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n \n extern int printf (const char *, ...); \n \n@@ -20,5 +20,5 @@ main ()\n \n \n /* The argument to \"printf\" should be a constant, not a variable.  */\n-/* { dg-final { scan-tree-dump-times \"printf.*, 0\" 1 \"store_ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"printf.*, 0\" 1 \"ccp1\"} } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "1a6e36df8f10d24bf46ac9b2cfaa8d8cf547984b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040721-1.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040721-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040721-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040721-1.c?ref=49e013b373db31b854984a3b71f1764a0d80ed7e", "patch": "@@ -1,11 +1,14 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-store_ccp-vops\" } */\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n \n /* Test to check whether global variables are being\n    constant propagated. */\n \n+extern void link_error (void);\n+\n int G;\n \n+void\n foo (int i)\n {\n    if (i > 0)\n@@ -17,12 +20,10 @@ foo (int i)\n      link_error ();\n }\n \n+int\n main ()\n {\n    foo (0);\n    return 0;\n }\n \n-/* There should be no G on the RHS of an assignment. */\n-/* { dg-final { scan-tree-dump-times \"= G;\" 0 \"store_ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */"}, {"sha": "fc33d74e9ffeaf4a44592e4cc7aae374347ecf11", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21574.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21574.c?ref=49e013b373db31b854984a3b71f1764a0d80ed7e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-store_ccp\" } */\n+/* { dg-options \"-O -fdump-tree-fre-details\" } */\n \n int\n foo (int *p)\n@@ -8,6 +8,6 @@ foo (int *p)\n   return *p;\n }\n \n-/* The store to *p should be propagated to the return statement.  */\n-/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"store_ccp\" } } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* The store to *p should be propagated to the load statement.  */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\*p_.\\\\\\(D\\\\\\) with 0\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "82f37abc875f1f1e58a5ecdc74790e7748a4efc1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-1.c?ref=49e013b373db31b854984a3b71f1764a0d80ed7e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-store_ccp\" } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n \n extern void link_error (void);\n \n@@ -71,5 +71,5 @@ void test11111 (int p, int q, int r)\n \n /* There should be not link_error calls, if there is any the\n    optimization has failed */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"store_ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"ccp1\"} } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "86a706b80ef709684f483574ec91f0ba085538bc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-3.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e013b373db31b854984a3b71f1764a0d80ed7e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-3.c?ref=49e013b373db31b854984a3b71f1764a0d80ed7e", "patch": "@@ -1,10 +1,12 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-store_ccp\" } */\n+/* { dg-options \"-O -fdump-tree-ccp2\" } */\n \n extern void link_error (void);\n \n-/* some addresses clearly cannot be equal, check that some address\n-    expressions can be evaluated as constants */\n+/* Some addresses clearly cannot be equal, check that some address\n+   expressions can be evaluated as constants.\n+   Most of the tests are folding tests, but at least some require\n+   points-to analysis, so we scan the first CCP dump after PTA.  */\n \n char g1, g2;\n void test6 (char p1, char p2)\n@@ -131,5 +133,5 @@ int* test666 (int * __restrict__ rp1, int * __restrict__ rp2, int *p1)\n    optimization has failed */\n /* ??? While we indeed don't handle some of these, a couple of the\n    restrict tests are incorrect.  */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"store_ccp\" { xfail *-*-* } } } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"ccp2\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"ccp2\" } } */"}]}