{"sha": "b6680c2084521d2612c3a08aa01b274078c4f3e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2ODBjMjA4NDUyMWQyNjEyYzNhMDhhYTAxYjI3NDA3OGM0ZjNlMw==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-02-24T18:54:10Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-02-24T18:57:45Z"}, "message": "[PR99123] inline-asm: Don't use decompose_mem_address to find used hard regs\n\nInline asm in question has empty constraint which means anything\nincluding memory with invalid address.  To check used hard regs we\nused decompose_mem_address which assumes memory with valid address.\nThe patch implements the same semantics without assuming valid\naddresses.\n\ngcc/ChangeLog:\n\n\tPR inline-asm/99123\n\t* lra-constraints.c (uses_hard_regs_p): Don't use decompose_mem_address.\n\ngcc/testsuite/ChangeLog:\n\n\tPR inline-asm/99123\n\t* gcc.target/i386/pr99123.c: New.", "tree": {"sha": "ca3a63a64b37926ddc8fb28f657994a153154615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca3a63a64b37926ddc8fb28f657994a153154615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6680c2084521d2612c3a08aa01b274078c4f3e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6680c2084521d2612c3a08aa01b274078c4f3e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6680c2084521d2612c3a08aa01b274078c4f3e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6680c2084521d2612c3a08aa01b274078c4f3e3/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8265ab07f3bbeb672488fdfc6418e0bce89dff9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8265ab07f3bbeb672488fdfc6418e0bce89dff9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8265ab07f3bbeb672488fdfc6418e0bce89dff9c"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "51acf7f07013ff81e58fb40fab961f659773e65d", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6680c2084521d2612c3a08aa01b274078c4f3e3/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6680c2084521d2612c3a08aa01b274078c4f3e3/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=b6680c2084521d2612c3a08aa01b274078c4f3e3", "patch": "@@ -1904,16 +1904,6 @@ uses_hard_regs_p (rtx x, HARD_REG_SET set)\n       return (x_hard_regno >= 0\n \t      && overlaps_hard_reg_set_p (set, mode, x_hard_regno));\n     }\n-  if (MEM_P (x))\n-    {\n-      struct address_info ad;\n-\n-      decompose_mem_address (&ad, x);\n-      if (ad.base_term != NULL && uses_hard_regs_p (*ad.base_term, set))\n-\treturn true;\n-      if (ad.index_term != NULL && uses_hard_regs_p (*ad.index_term, set))\n-\treturn true;\n-    }\n   fmt = GET_RTX_FORMAT (code);\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {"}, {"sha": "4f32547d5b8a7f1bb00654126c15f23b9221386d", "filename": "gcc/testsuite/gcc.target/i386/pr99123.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6680c2084521d2612c3a08aa01b274078c4f3e3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99123.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6680c2084521d2612c3a08aa01b274078c4f3e3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99123.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99123.c?ref=b6680c2084521d2612c3a08aa01b274078c4f3e3", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+static inline void *\n+baz (void *s, unsigned long c, unsigned int count)\n+{\n+  int d0, d1;\n+  __asm__ __volatile__ (\"\"\n+                        : \"=&c\" (d0), \"=&D\" (d1)\n+                        :\"a\" (c), \"q\" (count), \"0\" (count / 4), \"\" ((long) s)   /// \"1\"\n+                        :\"memory\");\n+  return s;\n+}\n+\n+struct A\n+{\n+  unsigned long *a;\n+};\n+\n+inline static void *\n+bar (struct A *x, int y)\n+{\n+  char *ptr;\n+\n+  ptr = (void *) x->a[y >> 12];\n+  ptr += y % (1UL << 12);\n+  return (void *) ptr;\n+}\n+\n+int\n+foo (struct A *x, unsigned int *y, int z, int u)\n+{\n+  int a, b, c, d, e;\n+\n+  z += *y;\n+  c = z + u;\n+  a = (z >> 12) + 1;\n+  do\n+    {\n+      b = (a << 12);\n+      d = b - z;\n+      e = c - z;\n+      if (e < d)\n+        d = e;\n+      baz (bar (x, z), 0, d);\n+      z = b;\n+      a++;\n+    }\n+  while (z < c);\n+  return 0;\n+}"}]}