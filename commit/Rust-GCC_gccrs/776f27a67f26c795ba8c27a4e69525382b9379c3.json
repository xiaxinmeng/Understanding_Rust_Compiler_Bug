{"sha": "776f27a67f26c795ba8c27a4e69525382b9379c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc2ZjI3YTY3ZjI2Yzc5NWJhOGMyN2E0ZTY5NTI1MzgyYjkzNzljMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-01T03:02:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-01T03:02:13Z"}, "message": "compiler, runtime: More steps toward separating int and intgo.\n\nFrom-SVN: r193059", "tree": {"sha": "0285cca6b375a23d93c20efec03cb9adec30f0e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0285cca6b375a23d93c20efec03cb9adec30f0e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/776f27a67f26c795ba8c27a4e69525382b9379c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776f27a67f26c795ba8c27a4e69525382b9379c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776f27a67f26c795ba8c27a4e69525382b9379c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776f27a67f26c795ba8c27a4e69525382b9379c3/comments", "author": null, "committer": null, "parents": [{"sha": "79e0221796bf5897204e8077afc20e34f88dab3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e0221796bf5897204e8077afc20e34f88dab3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e0221796bf5897204e8077afc20e34f88dab3b"}], "stats": {"total": 631, "additions": 321, "deletions": 310}, "files": [{"sha": "8fe61462aee71043a38f544a0d30f098e5dc3af1", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 48, "deletions": 39, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -1832,11 +1832,9 @@ Integer_expression::do_get_tree(Translate_context* context)\n       // some reason.  Use a type which will fit the value.  We use <,\n       // not <=, because we need an extra bit for the sign bit.\n       int bits = mpz_sizeinbase(this->val_, 2);\n-      if (bits < INT_TYPE_SIZE)\n-\t{\n-\t  Type* t = Type::lookup_integer_type(\"int\");\n-\t  type = type_to_tree(t->get_backend(gogo));\n-\t}\n+      Type* int_type = Type::lookup_integer_type(\"int\");\n+      if (bits < int_type->integer_type()->bits())\n+\ttype = type_to_tree(int_type->get_backend(gogo));\n       else if (bits < 64)\n \t{\n \t  Type* t = Type::lookup_integer_type(\"int64\");\n@@ -3146,7 +3144,10 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n   else if (type->is_string_type()\n \t   && expr_type->integer_type() != NULL)\n     {\n-      expr_tree = fold_convert(integer_type_node, expr_tree);\n+      Type* int_type = Type::lookup_integer_type(\"int\");\n+      tree int_type_tree = type_to_tree(int_type->get_backend(gogo));\n+\n+      expr_tree = fold_convert(int_type_tree, expr_tree);\n       if (host_integerp(expr_tree, 0))\n \t{\n \t  HOST_WIDE_INT intval = tree_low_cst(expr_tree, 0);\n@@ -3162,20 +3163,24 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n \t\t\t       \"__go_int_to_string\",\n \t\t\t       1,\n \t\t\t       type_tree,\n-\t\t\t       integer_type_node,\n-\t\t\t       fold_convert(integer_type_node, expr_tree));\n+\t\t\t       int_type_tree,\n+\t\t\t       expr_tree);\n     }\n   else if (type->is_string_type() && expr_type->is_slice_type())\n     {\n       if (!DECL_P(expr_tree))\n \texpr_tree = save_expr(expr_tree);\n+\n+      Type* int_type = Type::lookup_integer_type(\"int\");\n+      tree int_type_tree = type_to_tree(int_type->get_backend(gogo));\n+\n       Array_type* a = expr_type->array_type();\n       Type* e = a->element_type()->forwarded();\n       go_assert(e->integer_type() != NULL);\n       tree valptr = fold_convert(const_ptr_type_node,\n \t\t\t\t a->value_pointer_tree(gogo, expr_tree));\n       tree len = a->length_tree(gogo, expr_tree);\n-      len = fold_convert_loc(this->location().gcc_location(), integer_type_node,\n+      len = fold_convert_loc(this->location().gcc_location(), int_type_tree,\n                              len);\n       if (e->integer_type()->is_byte())\n \t{\n@@ -3187,7 +3192,7 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n \t\t\t\t   type_tree,\n \t\t\t\t   const_ptr_type_node,\n \t\t\t\t   valptr,\n-\t\t\t\t   integer_type_node,\n+\t\t\t\t   int_type_tree,\n \t\t\t\t   len);\n \t}\n       else\n@@ -3201,7 +3206,7 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n \t\t\t\t   type_tree,\n \t\t\t\t   const_ptr_type_node,\n \t\t\t\t   valptr,\n-\t\t\t\t   integer_type_node,\n+\t\t\t\t   int_type_tree,\n \t\t\t\t   len);\n \t}\n     }\n@@ -3939,6 +3944,7 @@ Unary_expression::do_check_types(Gogo*)\n tree\n Unary_expression::do_get_tree(Translate_context* context)\n {\n+  Gogo* gogo = context->gogo();\n   Location loc = this->location();\n \n   // Taking the address of a set-and-use-temporary expression requires\n@@ -4103,7 +4109,7 @@ Unary_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t       expr,\n \t\t\t\t\t       fold_convert(TREE_TYPE(expr),\n \t\t\t\t\t\t\t    null_pointer_node));\n-\t\ttree crash = Gogo::runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE,\n+\t\ttree crash = gogo->runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE,\n \t\t\t\t\t\t loc);\n \t\texpr = fold_build2_loc(loc.gcc_location(), COMPOUND_EXPR,\n \t\t\t\t       TREE_TYPE(expr), build3(COND_EXPR,\n@@ -4119,7 +4125,7 @@ Unary_expression::do_get_tree(Translate_context* context)\n \tif (VOID_TYPE_P(target_type_tree))\n \t  {\n \t    Type* pt = this->expr_->type()->points_to();\n-\t    tree ind = type_to_tree(pt->get_backend(context->gogo()));\n+\t    tree ind = type_to_tree(pt->get_backend(gogo));\n \t    expr = fold_convert_loc(loc.gcc_location(),\n                                     build_pointer_type(ind), expr);\n \t  }\n@@ -5668,6 +5674,8 @@ Binary_expression::do_check_types(Gogo*)\n tree\n Binary_expression::do_get_tree(Translate_context* context)\n {\n+  Gogo* gogo = context->gogo();\n+\n   tree left = this->left_->get_tree(context);\n   tree right = this->right_->get_tree(context);\n \n@@ -5756,7 +5764,7 @@ Binary_expression::do_get_tree(Translate_context* context)\n     {\n       go_assert(this->op_ == OPERATOR_PLUS);\n       Type* st = Type::make_string_type();\n-      tree string_type = type_to_tree(st->get_backend(context->gogo()));\n+      tree string_type = type_to_tree(st->get_backend(gogo));\n       static tree string_plus_decl;\n       return Gogo::call_builtin(&string_plus_decl,\n \t\t\t\tthis->location(),\n@@ -5859,7 +5867,7 @@ Binary_expression::do_get_tree(Translate_context* context)\n \t  // __go_runtime_error(RUNTIME_ERROR_DIVISION_BY_ZERO), 0\n \t  int errcode = RUNTIME_ERROR_DIVISION_BY_ZERO;\n \t  tree panic = fold_build2_loc(gccloc, COMPOUND_EXPR, TREE_TYPE(ret),\n-\t\t\t\t       Gogo::runtime_error(errcode,\n+\t\t\t\t       gogo->runtime_error(errcode,\n \t\t\t\t\t\t\t   this->location()),\n \t\t\t\t       fold_convert_loc(gccloc, TREE_TYPE(ret),\n \t\t\t\t\t\t\tinteger_zero_node));\n@@ -6152,6 +6160,9 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t\t\t    Type* right_type, tree right_tree,\n \t\t\t    Location location)\n {\n+  Type* int_type = Type::lookup_integer_type(\"int\");\n+  tree int_type_tree = type_to_tree(int_type->get_backend(context->gogo()));\n+\n   enum tree_code code;\n   switch (op)\n     {\n@@ -6186,12 +6197,12 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t\t\t\t     location,\n \t\t\t\t     \"__go_strcmp\",\n \t\t\t\t     2,\n-\t\t\t\t     integer_type_node,\n+\t\t\t\t     int_type_tree,\n \t\t\t\t     string_type,\n \t\t\t\t     left_tree,\n \t\t\t\t     string_type,\n \t\t\t\t     right_tree);\n-      right_tree = build_int_cst_type(integer_type_node, 0);\n+      right_tree = build_int_cst_type(int_type_tree, 0);\n     }\n   else if ((left_type->interface_type() != NULL\n \t    && right_type->interface_type() == NULL\n@@ -6248,7 +6259,7 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t\t\t\t\t location,\n \t\t\t\t\t \"__go_empty_interface_value_compare\",\n \t\t\t\t\t 3,\n-\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t int_type_tree,\n \t\t\t\t\t TREE_TYPE(left_tree),\n \t\t\t\t\t left_tree,\n \t\t\t\t\t TREE_TYPE(descriptor),\n@@ -6267,7 +6278,7 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t\t\t\t\t location,\n \t\t\t\t\t \"__go_interface_value_compare\",\n \t\t\t\t\t 3,\n-\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t int_type_tree,\n \t\t\t\t\t TREE_TYPE(left_tree),\n \t\t\t\t\t left_tree,\n \t\t\t\t\t TREE_TYPE(descriptor),\n@@ -6279,7 +6290,7 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t  // This can panic if the type is not comparable.\n \t  TREE_NOTHROW(interface_value_compare_decl) = 0;\n \t}\n-      right_tree = build_int_cst_type(integer_type_node, 0);\n+      right_tree = build_int_cst_type(int_type_tree, 0);\n \n       if (make_tmp != NULL_TREE)\n \tleft_tree = build2(COMPOUND_EXPR, TREE_TYPE(left_tree), make_tmp,\n@@ -6296,7 +6307,7 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t\t\t\t\t location,\n \t\t\t\t\t \"__go_empty_interface_compare\",\n \t\t\t\t\t 2,\n-\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t int_type_tree,\n \t\t\t\t\t TREE_TYPE(left_tree),\n \t\t\t\t\t left_tree,\n \t\t\t\t\t TREE_TYPE(right_tree),\n@@ -6314,7 +6325,7 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t\t\t\t\t location,\n \t\t\t\t\t \"__go_interface_compare\",\n \t\t\t\t\t 2,\n-\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t int_type_tree,\n \t\t\t\t\t TREE_TYPE(left_tree),\n \t\t\t\t\t left_tree,\n \t\t\t\t\t TREE_TYPE(right_tree),\n@@ -6339,7 +6350,7 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t\t\t\t\t location,\n \t\t\t\t\t \"__go_interface_empty_compare\",\n \t\t\t\t\t 2,\n-\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t int_type_tree,\n \t\t\t\t\t TREE_TYPE(left_tree),\n \t\t\t\t\t left_tree,\n \t\t\t\t\t TREE_TYPE(right_tree),\n@@ -6350,7 +6361,7 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t  TREE_NOTHROW(interface_empty_compare_decl) = 0;\n \t}\n \n-      right_tree = build_int_cst_type(integer_type_node, 0);\n+      right_tree = build_int_cst_type(int_type_tree, 0);\n     }\n \n   if (left_type->is_nil_type()\n@@ -7869,6 +7880,9 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t    arg_tree = build_fold_indirect_ref(arg_tree);\n \t  }\n \n+\tType* int_type = Type::lookup_integer_type(\"int\");\n+\ttree int_type_tree = type_to_tree(int_type->get_backend(gogo));\n+\n \ttree val_tree;\n \tif (this->code_ == BUILTIN_LEN)\n \t  {\n@@ -7893,7 +7907,7 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t      location,\n \t\t\t\t\t      \"__go_map_len\",\n \t\t\t\t\t      1,\n-\t\t\t\t\t      integer_type_node,\n+\t\t\t\t\t      int_type_tree,\n \t\t\t\t\t      arg_type_tree,\n \t\t\t\t\t      arg_tree);\n \t      }\n@@ -7905,7 +7919,7 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t      location,\n \t\t\t\t\t      \"__go_chan_len\",\n \t\t\t\t\t      1,\n-\t\t\t\t\t      integer_type_node,\n+\t\t\t\t\t      int_type_tree,\n \t\t\t\t\t      arg_type_tree,\n \t\t\t\t\t      arg_tree);\n \t      }\n@@ -7934,23 +7948,16 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t      location,\n \t\t\t\t\t      \"__go_chan_cap\",\n \t\t\t\t\t      1,\n-\t\t\t\t\t      integer_type_node,\n+\t\t\t\t\t      int_type_tree,\n \t\t\t\t\t      arg_type_tree,\n \t\t\t\t\t      arg_tree);\n \t      }\n \t    else\n \t      go_unreachable();\n \t  }\n \n-\tif (val_tree == error_mark_node)\n-\t  return error_mark_node;\n-\n-\tType* int_type = Type::lookup_integer_type(\"int\");\n-\ttree type_tree = type_to_tree(int_type->get_backend(gogo));\n-\tif (type_tree == TREE_TYPE(val_tree))\n-\t  return val_tree;\n-\telse\n-\t  return fold(convert_to_integer(type_tree, val_tree));\n+\treturn fold_convert_loc(location.gcc_location(), int_type_tree,\n+\t\t\t\tval_tree);\n       }\n \n     case BUILTIN_PRINT:\n@@ -9872,7 +9879,7 @@ Array_index_expression::do_get_tree(Translate_context* context)\n \t      : (this->end_ == NULL\n \t\t ? RUNTIME_ERROR_SLICE_INDEX_OUT_OF_BOUNDS\n \t\t : RUNTIME_ERROR_SLICE_SLICE_OUT_OF_BOUNDS));\n-  tree crash = Gogo::runtime_error(code, loc);\n+  tree crash = gogo->runtime_error(code, loc);\n \n   if (this->end_ == NULL)\n     {\n@@ -10185,7 +10192,9 @@ String_index_expression::do_get_tree(Translate_context* context)\n \n   tree length_tree = String_type::length_tree(context->gogo(), string_tree);\n   length_tree = save_expr(length_tree);\n-  tree length_type = TREE_TYPE(length_tree);\n+\n+  Type* int_type = Type::lookup_integer_type(\"int\");\n+  tree length_type = type_to_tree(int_type->get_backend(context->gogo()));\n \n   tree bad_index = boolean_false_node;\n \n@@ -10205,7 +10214,7 @@ String_index_expression::do_get_tree(Translate_context* context)\n   int code = (this->end_ == NULL\n \t      ? RUNTIME_ERROR_STRING_INDEX_OUT_OF_BOUNDS\n \t      : RUNTIME_ERROR_STRING_SLICE_OUT_OF_BOUNDS);\n-  tree crash = Gogo::runtime_error(code, loc);\n+  tree crash = context->gogo()->runtime_error(code, loc);\n \n   if (this->end_ == NULL)\n     {"}, {"sha": "2b0c26f9bc10f6775c3916c38996ac4100866661", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -2331,14 +2331,17 @@ Gogo::call_builtin(tree* pdecl, Location location, const char* name,\n tree\n Gogo::runtime_error(int code, Location location)\n {\n+  Type* int32_type = Type::lookup_integer_type(\"int32\");\n+  tree int32_type_tree = type_to_tree(int32_type->get_backend(this));\n+\n   static tree runtime_error_fndecl;\n   tree ret = Gogo::call_builtin(&runtime_error_fndecl,\n \t\t\t\tlocation,\n \t\t\t\t\"__go_runtime_error\",\n \t\t\t\t1,\n \t\t\t\tvoid_type_node,\n-\t\t\t\tinteger_type_node,\n-\t\t\t\tbuild_int_cst(integer_type_node, code));\n+\t\t\t\tint32_type_tree,\n+\t\t\t\tbuild_int_cst(int32_type_tree, code));\n   if (ret == error_mark_node)\n     return error_mark_node;\n   // The runtime error function panics and does not return."}, {"sha": "8759d32b6c9c73df5d15d15906bf301646d9934d", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -558,7 +558,7 @@ class Gogo\n \t       tree rettype, ...);\n \n   // Build a call to the runtime error function.\n-  static tree\n+  tree\n   runtime_error(int code, Location);\n \n   // Build a builtin struct with a list of fields."}, {"sha": "059263db44e276a541751a54816773570fa5574a", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -30,7 +30,7 @@ enum Runtime_function_type\n   RFT_BOOL,\n   // Go type *bool, C type _Bool*.\n   RFT_BOOLPTR,\n-  // Go type int, C type int.\n+  // Go type int, C type intgo.\n   RFT_INT,\n   // Go type int32, C type int32_t.\n   RFT_INT32,"}, {"sha": "fc720cd9c094929c896c163724bfb975162e6bb0", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -198,7 +198,7 @@ DEF_GO_RUNTIME(CHECK_DEFER, \"__go_check_defer\", P1(BOOLPTR), R0())\n DEF_GO_RUNTIME(UNDEFER, \"__go_undefer\", P1(BOOLPTR), R0())\n \n // Panic with a runtime error.\n-DEF_GO_RUNTIME(RUNTIME_ERROR, \"__go_runtime_error\", P1(INT), R0())\n+DEF_GO_RUNTIME(RUNTIME_ERROR, \"__go_runtime_error\", P1(INT32), R0())\n \n \n // Close."}, {"sha": "8a9f7d15df7233d3cd3ecf885d7ca395ab04d3f2", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -2985,7 +2985,7 @@ String_type::length_tree(Gogo*, tree string)\n   tree length_field = DECL_CHAIN(TYPE_FIELDS(string_type));\n   go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(length_field)),\n \t\t    \"__length\") == 0);\n-  return fold_build3(COMPONENT_REF, integer_type_node, string,\n+  return fold_build3(COMPONENT_REF, TREE_TYPE(length_field), string,\n \t\t     length_field, NULL_TREE);\n }\n \n@@ -5524,7 +5524,9 @@ Array_type::get_length_tree(Gogo* gogo)\n \t  tree len = this->length_->get_tree(&context);\n \t  if (len != error_mark_node)\n \t    {\n-\t      len = convert_to_integer(integer_type_node, len);\n+\t      Type* int_type = Type::lookup_integer_type(\"int\");\n+\t      tree int_type_tree = type_to_tree(int_type->get_backend(gogo));\n+\t      len = convert_to_integer(int_type_tree, len);\n \t      len = save_expr(len);\n \t    }\n \t  this->length_tree_ = len;\n@@ -5663,10 +5665,12 @@ Array_type::length_tree(Gogo* gogo, tree array)\n   if (this->length_ != NULL)\n     {\n       if (TREE_CODE(array) == SAVE_EXPR)\n-\treturn fold_convert(integer_type_node, this->get_length_tree(gogo));\n+\treturn this->get_length_tree(gogo);\n       else\n-\treturn omit_one_operand(integer_type_node,\n-\t\t\t\tthis->get_length_tree(gogo), array);\n+\t{\n+\t  tree len = this->get_length_tree(gogo);\n+\t  return omit_one_operand(TREE_TYPE(len), len, array);\n+\t}\n     }\n \n   // This is an open array.  We need to read the length field.\n@@ -5690,8 +5694,10 @@ tree\n Array_type::capacity_tree(Gogo* gogo, tree array)\n {\n   if (this->length_ != NULL)\n-    return omit_one_operand(integer_type_node, this->get_length_tree(gogo),\n-\t\t\t    array);\n+    {\n+      tree len = this->get_length_tree(gogo);\n+      return omit_one_operand(TREE_TYPE(len), len, array);\n+    }\n \n   // This is an open array.  We need to read the capacity field.\n "}, {"sha": "9c72e611a80f02821ab55f5e2654c2fa9a1375bd", "filename": "libgo/go/bytes/indexbyte.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fgo%2Fbytes%2Findexbyte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fgo%2Fbytes%2Findexbyte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Findexbyte.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -6,6 +6,7 @@\n \n #include <stddef.h>\n \n+#include \"runtime.h\"\n #include \"array.h\"\n \n /* This is in C so that the compiler can optimize it appropriately."}, {"sha": "5ff0b09dbb7bfa54356ad44c4fc103229124cc32", "filename": "libgo/go/syscall/signame.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fgo%2Fsyscall%2Fsigname.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fgo%2Fsyscall%2Fsigname.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsigname.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -6,7 +6,6 @@\n \n #include <string.h>\n \n-#include \"config.h\"\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n@@ -19,7 +18,7 @@ Signame (int sig)\n   const char* s = NULL;\n   char buf[100];\n   size_t len;\n-  unsigned char *data;\n+  byte *data;\n   String ret;\n \n #if defined(HAVE_STRSIGNAL)\n@@ -34,7 +33,7 @@ Signame (int sig)\n   len = __builtin_strlen (s);\n   data = runtime_mallocgc (len, FlagNoPointers, 0, 0);\n   __builtin_memcpy (data, s, len);\n-  ret.__data = data;\n-  ret.__length = len;\n+  ret.str = data;\n+  ret.len = len;\n   return ret;\n }"}, {"sha": "14a9bb48ff0ae68e92ac069f4decc4220e81f8c9", "filename": "libgo/runtime/array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Farray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Farray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Farray.h?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -19,10 +19,10 @@ struct __go_open_array\n      enough to hold the size of any allocated object.  Using \"int\"\n      saves 8 bytes per slice header on a 64-bit system with 32-bit\n      ints.  */\n-  int __count;\n+  intgo __count;\n   /* The capacity of the array--the number of elements that can fit in\n      the __VALUES field.  */\n-  int __capacity;\n+  intgo __capacity;\n };\n \n #endif /* !defined(LIBGO_ARRAY_H) */"}, {"sha": "12fe876cb95e7b3a5b92018434c5c289f975686a", "filename": "libgo/runtime/go-append.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-append.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-append.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-append.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,10 +4,10 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-type.h\"\n+#include \"runtime.h\"\n #include \"go-panic.h\"\n+#include \"go-type.h\"\n #include \"array.h\"\n-#include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n "}, {"sha": "2510f9aef8b797f02a9341a319e6e2da4f2efc03", "filename": "libgo/runtime/go-assert-interface.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-assert-interface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-assert-interface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-assert-interface.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,11 +4,12 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n #include \"go-panic.h\"\n+#include \"go-type.h\"\n #include \"interface.h\"\n-#include \"runtime.h\"\n \n /* This is called by the compiler to implement a type assertion from\n    one interface type to another.  This returns the value that should"}, {"sha": "0cd63c76d8d1bace684013f0c9c4995de3608ee2", "filename": "libgo/runtime/go-byte-array-to-string.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-byte-array-to-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-byte-array-to-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-byte-array-to-string.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,22 +4,21 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-string.h\"\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n \n-struct __go_string\n-__go_byte_array_to_string (const void* p, int len)\n+String\n+__go_byte_array_to_string (const void* p, intgo len)\n {\n   const unsigned char *bytes;\n   unsigned char *retdata;\n-  struct __go_string ret;\n+  String ret;\n \n   bytes = (const unsigned char *) p;\n-  retdata = runtime_mallocgc (len, FlagNoPointers, 1, 0);\n+  retdata = runtime_mallocgc ((uintptr) len, FlagNoPointers, 1, 0);\n   __builtin_memcpy (retdata, bytes, len);\n-  ret.__data = retdata;\n-  ret.__length = len;\n+  ret.str = retdata;\n+  ret.len = len;\n   return ret;\n }"}, {"sha": "d73a408334f51feb91450247c3accfed33e9646d", "filename": "libgo/runtime/go-caller.c", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-caller.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-caller.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-caller.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -11,7 +11,6 @@\n #include \"backtrace.h\"\n \n #include \"runtime.h\"\n-#include \"go-string.h\"\n \n /* Get the function name, file name, and line number for a PC value.\n    We use the backtrace library to get this.  */\n@@ -20,9 +19,9 @@\n \n struct caller\n {\n-  struct __go_string fn;\n-  struct __go_string file;\n-  int line;\n+  String fn;\n+  String file;\n+  intgo line;\n };\n \n /* Collect file/line information for a PC value.  If this is called\n@@ -37,32 +36,32 @@ callback (void *data, uintptr_t pc __attribute__ ((unused)),\n \n   if (function == NULL)\n     {\n-      c->fn.__data = NULL;\n-      c->fn.__length = 0;\n+      c->fn.str = NULL;\n+      c->fn.len = 0;\n     }\n   else\n     {\n-      char *s;\n+      byte *s;\n \n-      c->fn.__length = __builtin_strlen (function);\n-      s = runtime_malloc (c->fn.__length);\n-      __builtin_memcpy (s, function, c->fn.__length);\n-      c->fn.__data = (unsigned char *) s;\n+      c->fn.len = __builtin_strlen (function);\n+      s = runtime_malloc (c->fn.len);\n+      __builtin_memcpy (s, function, c->fn.len);\n+      c->fn.str = s;\n     }\n \n   if (filename == NULL)\n     {\n-      c->file.__data = NULL;\n-      c->file.__length = 0;\n+      c->file.str = NULL;\n+      c->file.len = 0;\n     }\n   else\n     {\n-      char *s;\n+      byte *s;\n \n-      c->file.__length = __builtin_strlen (filename);\n-      s = runtime_malloc (c->file.__length);\n-      __builtin_memcpy (s, filename, c->file.__length);\n-      c->file.__data = (unsigned char *) s;\n+      c->file.len = __builtin_strlen (filename);\n+      s = runtime_malloc (c->file.len);\n+      __builtin_memcpy (s, filename, c->file.len);\n+      c->file.str = s;\n     }\n \n   c->line = lineno;\n@@ -111,8 +110,7 @@ __go_get_backtrace_state ()\n /* Return function/file/line information for PC.  */\n \n _Bool\n-__go_file_line (uintptr pc, struct __go_string *fn, struct __go_string *file,\n-\t\tint *line)\n+__go_file_line (uintptr pc, String *fn, String *file, intgo *line)\n {\n   struct caller c;\n \n@@ -122,7 +120,7 @@ __go_file_line (uintptr pc, struct __go_string *fn, struct __go_string *file,\n   *fn = c.fn;\n   *file = c.file;\n   *line = c.line;\n-  return c.file.__length > 0;\n+  return c.file.len > 0;\n }\n \n /* Collect symbol information.  */\n@@ -153,8 +151,8 @@ __go_symbol_value (uintptr_t pc, uintptr_t *val)\n struct caller_ret\n {\n   uintptr_t pc;\n-  struct __go_string file;\n-  int line;\n+  String file;\n+  intgo line;\n   _Bool ok;\n };\n \n@@ -170,7 +168,7 @@ Caller (int skip)\n   struct caller_ret ret;\n   uintptr pc;\n   int32 n;\n-  struct __go_string fn;\n+  String fn;\n \n   runtime_memclr (&ret, sizeof ret);\n   n = runtime_callers (skip + 1, &pc, 1);\n@@ -188,9 +186,9 @@ Func *\n FuncForPC (uintptr_t pc)\n {\n   Func *ret;\n-  struct __go_string fn;\n-  struct __go_string file;\n-  int line;\n+  String fn;\n+  String file;\n+  intgo line;\n   uintptr_t val;\n \n   if (!__go_file_line (pc, &fn, &file, &line))\n@@ -212,8 +210,8 @@ FuncForPC (uintptr_t pc)\n \n struct funcline_go_return\n {\n-  struct __go_string retfile;\n-  int retline;\n+  String retfile;\n+  intgo retline;\n };\n \n struct funcline_go_return\n@@ -224,7 +222,7 @@ struct funcline_go_return\n runtime_funcline_go (Func *f __attribute__((unused)), uintptr targetpc)\n {\n   struct funcline_go_return ret;\n-  struct __go_string fn;\n+  String fn;\n \n   if (!__go_file_line (targetpc, &fn, &ret.retfile,  &ret.retline))\n     runtime_memclr (&ret, sizeof ret);"}, {"sha": "1dd3e71c8efda563c7b434f5705cb69a4e0d9909", "filename": "libgo/runtime/go-callers.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-callers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-callers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-callers.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -9,6 +9,7 @@\n #include \"backtrace.h\"\n \n #include \"runtime.h\"\n+#include \"array.h\"\n \n /* Argument passed to callback function.  */\n "}, {"sha": "4de558077a7bc4fbdbee88f26465078915911f84", "filename": "libgo/runtime/go-can-convert-interface.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-can-convert-interface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-can-convert-interface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-can-convert-interface.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,7 +4,9 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-assert.h\"\n+#include \"go-string.h\"\n #include \"go-type.h\"\n #include \"interface.h\"\n "}, {"sha": "d0c89f29459ae729494f34f1b3299a10c5083d48", "filename": "libgo/runtime/go-cgo.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-cgo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-cgo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-cgo.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -8,7 +8,6 @@\n #include \"go-alloc.h\"\n #include \"interface.h\"\n #include \"go-panic.h\"\n-#include \"go-string.h\"\n \n /* Go memory allocated by code not written in Go.  We keep a linked\n    list of these allocations so that the garbage collector can see\n@@ -135,18 +134,18 @@ extern const struct __go_type_descriptor string_type_descriptor\n void\n _cgo_panic (const char *p)\n {\n-  int len;\n+  intgo len;\n   unsigned char *data;\n-  struct __go_string *ps;\n+  String *ps;\n   struct __go_empty_interface e;\n \n   runtime_exitsyscall ();\n   len = __builtin_strlen (p);\n   data = alloc_saved (len);\n   __builtin_memcpy (data, p, len);\n   ps = alloc_saved (sizeof *ps);\n-  ps->__data = data;\n-  ps->__length = len;\n+  ps->str = data;\n+  ps->len = len;\n   e.__type_descriptor = &string_type_descriptor;\n   e.__object = ps;\n "}, {"sha": "c29971adac283dcf1c30321ffa9f2881cd474f62", "filename": "libgo/runtime/go-check-interface.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-check-interface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-check-interface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-check-interface.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,9 +4,10 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-panic.h\"\n+#include \"go-type.h\"\n #include \"interface.h\"\n-#include \"runtime.h\"\n \n /* Check that an interface type matches for a conversion to a\n    non-interface type.  This panics if the types are bad.  The actual"}, {"sha": "4bd79d2005887b1c9032adfc305e215a11e398d9", "filename": "libgo/runtime/go-construct-map.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-construct-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-construct-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-construct-map.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -8,6 +8,7 @@\n #include <stdint.h>\n #include <stdlib.h>\n \n+#include \"runtime.h\"\n #include \"map.h\"\n \n struct __go_map *"}, {"sha": "3eee6bf4a8fd7ded8ab464e4b363db130c6d0e6c", "filename": "libgo/runtime/go-convert-interface.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-convert-interface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-convert-interface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-convert-interface.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,11 +4,13 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n #include \"go-panic.h\"\n+#include \"go-string.h\"\n+#include \"go-type.h\"\n #include \"interface.h\"\n-#include \"runtime.h\"\n \n /* This is called when converting one interface type into another\n    interface type.  LHS_DESCRIPTOR is the type descriptor of the"}, {"sha": "e738efced80a6bb2b31721894ba7ad70e696404e", "filename": "libgo/runtime/go-eface-compare.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-eface-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-eface-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-eface-compare.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -5,12 +5,13 @@\n    license that can be found in the LICENSE file.  */\n \n #include \"runtime.h\"\n+#include \"go-type.h\"\n #include \"interface.h\"\n \n /* Compare two interface values.  Return 0 for equal, not zero for not\n    equal (return value is like strcmp).  */\n \n-int\n+intgo\n __go_empty_interface_compare (struct __go_empty_interface left,\n \t\t\t      struct __go_empty_interface right)\n {"}, {"sha": "454ea3ebae9fe197dc5e14c0b97932a9ece3a07a", "filename": "libgo/runtime/go-eface-val-compare.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-eface-val-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-eface-val-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-eface-val-compare.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -11,7 +11,7 @@\n /* Compare an empty interface with a value.  Return 0 for equal, not\n    zero for not equal (return value is like strcmp).  */\n \n-int\n+intgo\n __go_empty_interface_value_compare (\n     struct __go_empty_interface left,\n     const struct __go_type_descriptor *right_descriptor,"}, {"sha": "3cb447e4ce886b3ad1d4d487543b2f686f2e1bde", "filename": "libgo/runtime/go-getgoroot.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-getgoroot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-getgoroot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-getgoroot.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -6,21 +6,21 @@\n \n #include <stdlib.h>\n \n-#include \"go-string.h\"\n+#include \"runtime.h\"\n \n-struct __go_string getgoroot (void) asm (\"runtime.getgoroot\");\n+String getgoroot (void) asm (\"runtime.getgoroot\");\n \n-struct __go_string\n+String\n getgoroot ()\n {\n   const char *p;\n-  struct __go_string ret;\n+  String ret;\n \n   p = getenv (\"GOROOT\");\n-  ret.__data = (const unsigned char *) p;\n-  if (ret.__data == NULL)\n-    ret.__length = 0;\n+  ret.str = (const byte *) p;\n+  if (ret.str == NULL)\n+    ret.len = 0;\n   else\n-    ret.__length = __builtin_strlen (p);\n+    ret.len = __builtin_strlen (p);\n   return ret;\n }"}, {"sha": "6cae2fd8ccbe335f19f7c44ca0cfddbf3362ad03", "filename": "libgo/runtime/go-int-array-to-string.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-int-array-to-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-int-array-to-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-int-array-to-string.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -5,31 +5,30 @@\n    license that can be found in the LICENSE file.  */\n \n #include \"go-assert.h\"\n-#include \"go-string.h\"\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n \n-struct __go_string\n-__go_int_array_to_string (const void* p, int len)\n+String\n+__go_int_array_to_string (const void* p, intgo len)\n {\n-  const int *ints;\n-  int slen;\n-  int i;\n+  const int32 *ints;\n+  intgo slen;\n+  intgo i;\n   unsigned char *retdata;\n-  struct __go_string ret;\n+  String ret;\n   unsigned char *s;\n \n-  ints = (const int *) p;\n+  ints = (const int32 *) p;\n \n   slen = 0;\n   for (i = 0; i < len; ++i)\n     {\n-      int v;\n+      int32 v;\n \n       v = ints[i];\n \n-      if (v > 0x10ffff)\n+      if (v < 0 || v > 0x10ffff)\n \tv = 0xfffd;\n \n       if (v <= 0x7f)\n@@ -42,20 +41,20 @@ __go_int_array_to_string (const void* p, int len)\n \tslen += 4;\n     }\n \n-  retdata = runtime_mallocgc (slen, FlagNoPointers, 1, 0);\n-  ret.__data = retdata;\n-  ret.__length = slen;\n+  retdata = runtime_mallocgc ((uintptr) slen, FlagNoPointers, 1, 0);\n+  ret.str = retdata;\n+  ret.len = slen;\n \n   s = retdata;\n   for (i = 0; i < len; ++i)\n     {\n-      int v;\n+      int32 v;\n \n       v = ints[i];\n \n       /* If V is out of range for UTF-8, substitute the replacement\n \t character.  */\n-      if (v > 0x10ffff)\n+      if (v < 0 || v > 0x10ffff)\n \tv = 0xfffd;\n \n       if (v <= 0x7f)"}, {"sha": "eb441674b6c5c42fc9c0de71efc5e3e7df032564", "filename": "libgo/runtime/go-int-to-string.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-int-to-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-int-to-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-int-to-string.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,18 +4,17 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-string.h\"\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n \n-struct __go_string\n-__go_int_to_string (int v)\n+String\n+__go_int_to_string (intgo v)\n {\n   char buf[4];\n   int len;\n   unsigned char *retdata;\n-  struct __go_string ret;\n+  String ret;\n \n   /* A negative value is not valid UTF-8; turn it into the replacement\n      character.  */\n@@ -63,8 +62,8 @@ __go_int_to_string (int v)\n \n   retdata = runtime_mallocgc (len, FlagNoPointers, 1, 0);\n   __builtin_memcpy (retdata, buf, len);\n-  ret.__data = retdata;\n-  ret.__length = len;\n+  ret.str = retdata;\n+  ret.len = len;\n \n   return ret;\n }"}, {"sha": "6374bd2fb428d72cec873939c234f4d7ac0ab8dd", "filename": "libgo/runtime/go-interface-compare.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-interface-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-interface-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-interface-compare.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,6 +4,10 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include <stddef.h>\n+\n+#include \"runtime.h\"\n+#include \"go-type.h\"\n #include \"interface.h\"\n \n /* Compare two interface values.  Return 0 for equal, not zero for not"}, {"sha": "bb81ff813a607a50919bc456370d404a2f359483", "filename": "libgo/runtime/go-interface-eface-compare.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-interface-eface-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-interface-eface-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-interface-eface-compare.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -5,13 +5,14 @@\n    license that can be found in the LICENSE file.  */\n \n #include \"runtime.h\"\n+#include \"go-type.h\"\n #include \"interface.h\"\n \n /* Compare a non-empty interface value with an empty interface value.\n    Return 0 for equal, not zero for not equal (return value is like\n    strcmp).  */\n \n-int\n+intgo\n __go_interface_empty_compare (struct __go_interface left,\n \t\t\t      struct __go_empty_interface right)\n {"}, {"sha": "e2dae6a1892b395f0c63c4860fa43f9456ea1dc3", "filename": "libgo/runtime/go-interface-val-compare.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-interface-val-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-interface-val-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-interface-val-compare.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,13 +4,14 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-type.h\"\n #include \"interface.h\"\n \n /* Compare two interface values.  Return 0 for equal, not zero for not\n    equal (return value is like strcmp).  */\n \n-int\n+intgo\n __go_interface_value_compare (\n     struct __go_interface left,\n     const struct __go_type_descriptor *right_descriptor,"}, {"sha": "97d140583502797eb8a9f9b47a2ab2e2070d59c8", "filename": "libgo/runtime/go-main.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-main.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -14,11 +14,9 @@\n #include <fpu_control.h>\n #endif\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"array.h\"\n-#include \"go-string.h\"\n-\n-#include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n "}, {"sha": "242c9bb72686bfd56ecc70563fadd01b051e66ef", "filename": "libgo/runtime/go-make-slice.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-make-slice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-make-slice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-make-slice.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -6,12 +6,12 @@\n \n #include <stdint.h>\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n #include \"go-panic.h\"\n #include \"go-type.h\"\n #include \"array.h\"\n-#include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n \n@@ -20,20 +20,20 @@ __go_make_slice2 (const struct __go_type_descriptor *td, uintptr_t len,\n \t\t  uintptr_t cap)\n {\n   const struct __go_slice_type* std;\n-  int ilen;\n-  int icap;\n+  intgo ilen;\n+  intgo icap;\n   uintptr_t size;\n   struct __go_open_array ret;\n   unsigned int flag;\n \n   __go_assert (td->__code == GO_SLICE);\n   std = (const struct __go_slice_type *) td;\n \n-  ilen = (int) len;\n+  ilen = (intgo) len;\n   if (ilen < 0 || (uintptr_t) ilen != len)\n     runtime_panicstring (\"makeslice: len out of range\");\n \n-  icap = (int) cap;\n+  icap = (intgo) cap;\n   if (cap < len\n       || (uintptr_t) icap != cap\n       || (std->__element_type->__size > 0"}, {"sha": "7da10c249437216aa3950f0febb31c38ac9b437a", "filename": "libgo/runtime/go-map-len.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-map-len.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-map-len.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-len.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -6,18 +6,20 @@\n \n #include <stddef.h>\n \n+#include \"runtime.h\"\n #include \"go-assert.h\"\n #include \"map.h\"\n \n /* Return the length of a map.  This could be done inline, of course,\n    but I'm doing it as a function for now to make it easy to change\n    the map structure.  */\n \n-int\n+intgo\n __go_map_len (struct __go_map *map)\n {\n   if (map == NULL)\n     return 0;\n-  __go_assert (map->__element_count == (uintptr_t) (int) map->__element_count);\n+  __go_assert (map->__element_count\n+\t       == (uintptr_t) (intgo) map->__element_count);\n   return map->__element_count;\n }"}, {"sha": "5dbb92ccb89aade9ed3ac11c6a13836b89ec3de2", "filename": "libgo/runtime/go-map-range.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-map-range.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-map-range.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-range.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,6 +4,7 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-assert.h\"\n #include \"map.h\"\n "}, {"sha": "096856e234c90d4cf45fbcd191500f4cb675dedf", "filename": "libgo/runtime/go-new-map.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-new-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-new-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-new-map.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -106,10 +106,10 @@ __go_map_next_prime (uintptr_t n)\n struct __go_map *\n __go_new_map (const struct __go_map_descriptor *descriptor, uintptr_t entries)\n {\n-  int ientries;\n+  intgo ientries;\n   struct __go_map *ret;\n \n-  ientries = (int) entries;\n+  ientries = (intgo) entries;\n   if (ientries < 0 || (uintptr_t) ientries != entries)\n     runtime_panicstring (\"map size out of range\");\n "}, {"sha": "530629ca3390cb319ed5d81b17b03646d348855c", "filename": "libgo/runtime/go-panic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-panic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-panic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -13,7 +13,6 @@\n #include \"go-alloc.h\"\n #include \"go-defer.h\"\n #include \"go-panic.h\"\n-#include \"go-string.h\"\n #include \"interface.h\"\n \n /* Print the panic stack.  This is used when there is no recover.  */"}, {"sha": "e7031d4040a242f57626ddb289b2a1385a80b8e3", "filename": "libgo/runtime/go-panic.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-panic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-panic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.h?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -9,7 +9,7 @@\n \n #include \"interface.h\"\n \n-struct __go_string;\n+struct String;\n struct __go_type_descriptor;\n struct __go_defer_stack;\n \n@@ -34,7 +34,7 @@ struct __go_panic_stack\n extern void __go_panic (struct __go_empty_interface)\n   __attribute__ ((noreturn));\n \n-extern void __go_print_string (struct __go_string);\n+extern void __go_print_string (struct String);\n \n extern struct __go_empty_interface __go_recover (void);\n "}, {"sha": "4c520de3ce5eb23bcd30f954ec95463664654cfa", "filename": "libgo/runtime/go-print.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-print.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -11,7 +11,6 @@\n #include \"runtime.h\"\n #include \"array.h\"\n #include \"go-panic.h\"\n-#include \"go-string.h\"\n #include \"interface.h\"\n \n /* This implements the various little functions which are called by"}, {"sha": "6455ff135674a56b5910122652a771547a077ad6", "filename": "libgo/runtime/go-reflect-call.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-reflect-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-reflect-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-call.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -8,12 +8,10 @@\n #include <stdint.h>\n #include <stdlib.h>\n \n-#include \"config.h\"\n-\n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n #include \"go-type.h\"\n-#include \"runtime.h\"\n \n #ifdef USE_LIBFFI\n \n@@ -77,13 +75,15 @@ go_slice_to_ffi (\n     const struct __go_slice_type *descriptor __attribute__ ((unused)))\n {\n   ffi_type *ret;\n+  ffi_type *intgo;\n \n   ret = (ffi_type *) __go_alloc (sizeof (ffi_type));\n   ret->type = FFI_TYPE_STRUCT;\n   ret->elements = (ffi_type **) __go_alloc (4 * sizeof (ffi_type *));\n   ret->elements[0] = &ffi_type_pointer;\n-  ret->elements[1] = &ffi_type_sint;\n-  ret->elements[2] = &ffi_type_sint;\n+  intgo = sizeof (intgo) == 4 ? &ffi_type_sint32 : &ffi_type_sint64;\n+  ret->elements[1] = intgo;\n+  ret->elements[2] = intgo;\n   ret->elements[3] = NULL;\n   return ret;\n }\n@@ -110,19 +110,21 @@ go_struct_to_ffi (const struct __go_struct_type *descriptor)\n   return ret;\n }\n \n-/* Return an ffi_type for a Go string type.  This describes the\n-   __go_string struct.  */\n+/* Return an ffi_type for a Go string type.  This describes the String\n+   struct.  */\n \n static ffi_type *\n go_string_to_ffi (void)\n {\n   ffi_type *ret;\n+  ffi_type *intgo;\n \n   ret = (ffi_type *) __go_alloc (sizeof (ffi_type));\n   ret->type = FFI_TYPE_STRUCT;\n   ret->elements = (ffi_type **) __go_alloc (3 * sizeof (ffi_type *));\n   ret->elements[0] = &ffi_type_pointer;\n-  ret->elements[1] = &ffi_type_sint;\n+  intgo = sizeof (intgo) == 4 ? &ffi_type_sint32 : &ffi_type_sint64;\n+  ret->elements[1] = intgo;\n   ret->elements[2] = NULL;\n   return ret;\n }\n@@ -199,7 +201,7 @@ go_type_to_ffi (const struct __go_type_descriptor *descriptor)\n     case GO_INT8:\n       return &ffi_type_sint8;\n     case GO_INT:\n-      return &ffi_type_sint;\n+      return sizeof (intgo) == 4 ? &ffi_type_sint32 : &ffi_type_sint64;\n     case GO_UINT16:\n       return &ffi_type_uint16;\n     case GO_UINT32:\n@@ -209,7 +211,7 @@ go_type_to_ffi (const struct __go_type_descriptor *descriptor)\n     case GO_UINT8:\n       return &ffi_type_uint8;\n     case GO_UINT:\n-      return &ffi_type_uint;\n+      return sizeof (uintgo) == 4 ? &ffi_type_uint32 : &ffi_type_uint64;\n     case GO_UINTPTR:\n       if (sizeof (void *) == 2)\n \treturn &ffi_type_uint16;"}, {"sha": "ba6d86c501fc0b169e7086233c42ab9d2454fc29", "filename": "libgo/runtime/go-rune.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-rune.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-rune.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-rune.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -6,6 +6,7 @@\n \n #include <stddef.h>\n \n+#include \"runtime.h\"\n #include \"go-string.h\"\n \n /* Get a character from the UTF-8 string STR, of length LEN.  Store"}, {"sha": "f5ab4f9196bbabc670bd7190423b49ceaee5fa89", "filename": "libgo/runtime/go-runtime-error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-runtime-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-runtime-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-runtime-error.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -55,7 +55,7 @@ enum\n extern void __go_runtime_error () __attribute__ ((noreturn));\n \n void\n-__go_runtime_error (int i)\n+__go_runtime_error (int32 i)\n {\n   switch (i)\n     {"}, {"sha": "41f14d4b7343c9acf2b5fbffe74e5342d3e70489", "filename": "libgo/runtime/go-setenv.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-setenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-setenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-setenv.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -10,51 +10,50 @@\n #include <stdlib.h>\n \n #include \"go-alloc.h\"\n-#include \"go-string.h\"\n+#include \"runtime.h\"\n \n /* Set the C environment from Go.  This is called by syscall.Setenv.  */\n \n-void setenv_c (struct __go_string, struct __go_string)\n-  __asm__ (\"syscall.setenv_c\");\n+void setenv_c (String, String) __asm__ (\"syscall.setenv_c\");\n \n void\n-setenv_c (struct __go_string k, struct __go_string v)\n+setenv_c (String k, String v)\n {\n-  const unsigned char *ks;\n+  const byte *ks;\n   unsigned char *kn;\n-  const unsigned char *vs;\n+  const byte *vs;\n   unsigned char *vn;\n \n-  ks = k.__data;\n+  ks = k.str;\n   kn = NULL;\n-  vs = v.__data;\n+  vs = v.str;\n   vn = NULL;\n \n #ifdef HAVE_SETENV\n \n-  if (ks[k.__length] != 0)\n+  if (ks[k.len] != 0)\n     {\n-      kn = __go_alloc (k.__length + 1);\n-      __builtin_memcpy (kn, ks, k.__length);\n+      kn = __go_alloc (k.len + 1);\n+      __builtin_memcpy (kn, ks, k.len);\n       ks = kn;\n     }\n \n-  if (vs[v.__length] != 0)\n+  if (vs[v.len] != 0)\n     {\n-      vn = __go_alloc (v.__length + 1);\n-      __builtin_memcpy (vn, vs, v.__length);\n+      vn = __go_alloc (v.len + 1);\n+      __builtin_memcpy (vn, vs, v.len);\n       vs = vn;\n     }\n \n   setenv ((const char *) ks, (const char *) vs, 1);\n \n #else /* !defined(HAVE_SETENV) */\n \n-  kn = __go_alloc (k.__length + v.__length + 2);\n-  __builtin_memcpy (kn, ks, k.__length);\n-  kn[k.__length] = '=';\n-  __builtin_memcpy (kn + k.__length + 1, vs, v.__length);\n-  kn[k.__length + v.__length + 1] = '\\0';\n+  kn = __go_alloc (k.len + v.len + 2);\n+  __builtin_memcpy (kn, ks, k.len);\n+  kn[k.len] = '=';\n+  __builtin_memcpy (kn + k.len + 1, vs, v.len);\n+  kn[k.len + v.len + 1] = '\\0';\n   putenv ((char *) kn);\n \n #endif /* !defined(HAVE_SETENV) */"}, {"sha": "bcc270bf8a57b0b56f9ba0f4549bde80a705e6c5", "filename": "libgo/runtime/go-strcmp.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-strcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-strcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-strcmp.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,23 +4,21 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-string.h\"\n+#include \"runtime.h\"\n \n-int\n-__go_strcmp(struct __go_string s1, struct __go_string s2)\n+intgo\n+__go_strcmp(String s1, String s2)\n {\n   int i;\n \n-  i = __builtin_memcmp(s1.__data, s2.__data,\n-\t\t       (s1.__length < s2.__length\n-\t\t\t? s1.__length\n-\t\t\t: s2.__length));\n+  i = __builtin_memcmp(s1.str, s2.str,\n+\t\t       (s1.len < s2.len ? s1.len : s2.len));\n   if (i != 0)\n     return i;\n \n-  if (s1.__length < s2.__length)\n+  if (s1.len < s2.len)\n     return -1;\n-  else if (s1.__length > s2.__length)\n+  else if (s1.len > s2.len)\n     return 1;\n   else\n     return 0;"}, {"sha": "75fac1dbfe6c5308cabe4a1f63dfb40792cd6bc3", "filename": "libgo/runtime/go-string-to-byte-array.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-string-to-byte-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-string-to-byte-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-string-to-byte-array.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,22 +4,21 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-string.h\"\n-#include \"array.h\"\n #include \"runtime.h\"\n+#include \"array.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n \n struct __go_open_array\n-__go_string_to_byte_array (struct __go_string str)\n+__go_string_to_byte_array (String str)\n {\n   unsigned char *data;\n   struct __go_open_array ret;\n \n-  data = (unsigned char *) runtime_mallocgc (str.__length, FlagNoPointers, 1, 0);\n-  __builtin_memcpy (data, str.__data, str.__length);\n+  data = (unsigned char *) runtime_mallocgc (str.len, FlagNoPointers, 1, 0);\n+  __builtin_memcpy (data, str.str, str.len);\n   ret.__values = (void *) data;\n-  ret.__count = str.__length;\n-  ret.__capacity = str.__length;\n+  ret.__count = str.len;\n+  ret.__capacity = str.len;\n   return ret;\n }"}, {"sha": "16970bdd042f3c2058cb9ae923ba1fcf79a82a77", "filename": "libgo/runtime/go-string-to-int-array.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-string-to-int-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-string-to-int-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-string-to-int-array.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,15 +4,15 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-string.h\"\n #include \"array.h\"\n-#include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n \n struct __go_open_array\n-__go_string_to_int_array (struct __go_string str)\n+__go_string_to_int_array (String str)\n {\n   size_t c;\n   const unsigned char *p;\n@@ -22,8 +22,8 @@ __go_string_to_int_array (struct __go_string str)\n   struct __go_open_array ret;\n \n   c = 0;\n-  p = str.__data;\n-  pend = p + str.__length;\n+  p = str.str;\n+  pend = p + str.len;\n   while (p < pend)\n     {\n       int rune;\n@@ -34,7 +34,7 @@ __go_string_to_int_array (struct __go_string str)\n \n   data = (uint32_t *) runtime_mallocgc (c * sizeof (uint32_t), FlagNoPointers,\n \t\t\t\t\t1, 0);\n-  p = str.__data;\n+  p = str.str;\n   pd = data;\n   while (p < pend)\n     {"}, {"sha": "f4c149bb54ef32a6972cf01036721a589a3d9ec8", "filename": "libgo/runtime/go-string.h", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-string.h?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -9,26 +9,15 @@\n \n #include <stddef.h>\n \n-/* A string is an instance of this structure.  */\n-\n-struct __go_string\n-{\n-  /* The bytes.  */\n-  const unsigned char *__data;\n-  /* The length.  */\n-  int __length;\n-};\n-\n static inline _Bool\n-__go_strings_equal (struct __go_string s1, struct __go_string s2)\n+__go_strings_equal (String s1, String s2)\n {\n-  return (s1.__length == s2.__length\n-\t  && __builtin_memcmp (s1.__data, s2.__data, s1.__length) == 0);\n+  return (s1.len == s2.len\n+\t  && __builtin_memcmp (s1.str, s2.str, s1.len) == 0);\n }\n \n static inline _Bool\n-__go_ptr_strings_equal (const struct __go_string *ps1,\n-\t\t\tconst struct __go_string *ps2)\n+__go_ptr_strings_equal (const String *ps1, const String *ps2)\n {\n   if (ps1 == NULL)\n     return ps2 == NULL;"}, {"sha": "d6e6df67fcef8109e7bdae17f1109de18fe01b58", "filename": "libgo/runtime/go-strplus.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-strplus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-strplus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-strplus.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,28 +4,27 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-string.h\"\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n \n-struct __go_string\n-__go_string_plus (struct __go_string s1, struct __go_string s2)\n+String\n+__go_string_plus (String s1, String s2)\n {\n   int len;\n-  unsigned char *retdata;\n-  struct __go_string ret;\n+  byte *retdata;\n+  String ret;\n \n-  if (s1.__length == 0)\n+  if (s1.len == 0)\n     return s2;\n-  else if (s2.__length == 0)\n+  else if (s2.len == 0)\n     return s1;\n \n-  len = s1.__length + s2.__length;\n+  len = s1.len + s2.len;\n   retdata = runtime_mallocgc (len, FlagNoPointers, 1, 0);\n-  __builtin_memcpy (retdata, s1.__data, s1.__length);\n-  __builtin_memcpy (retdata + s1.__length, s2.__data, s2.__length);\n-  ret.__data = retdata;\n-  ret.__length = len;\n+  __builtin_memcpy (retdata, s1.str, s1.len);\n+  __builtin_memcpy (retdata + s1.len, s2.str, s2.len);\n+  ret.str = retdata;\n+  ret.len = len;\n   return ret;\n }"}, {"sha": "21e1bc031daf29e4ce54da0a1c0941d0bbf4cf5b", "filename": "libgo/runtime/go-strslice.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-strslice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-strslice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-strslice.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,24 +4,23 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-string.h\"\n #include \"go-panic.h\"\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n \n-struct __go_string\n-__go_string_slice (struct __go_string s, int start, int end)\n+String\n+__go_string_slice (String s, intgo start, intgo end)\n {\n-  int len;\n-  struct __go_string ret;\n+  intgo len;\n+  String ret;\n \n-  len = s.__length;\n+  len = s.len;\n   if (end == -1)\n     end = len;\n   if (start > len || end < start || end > len)\n     runtime_panicstring (\"string index out of bounds\");\n-  ret.__data = s.__data + start;\n-  ret.__length = end - start;\n+  ret.str = s.str + start;\n+  ret.len = end - start;\n   return ret;\n }"}, {"sha": "4d5b61a4fd5bb850de826a6d3de1eb8434a406d7", "filename": "libgo/runtime/go-traceback.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-traceback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-traceback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-traceback.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -7,7 +7,6 @@\n #include \"config.h\"\n \n #include \"runtime.h\"\n-#include \"go-string.h\"\n \n /* Print a stack trace for the current goroutine.  */\n \n@@ -28,12 +27,12 @@ runtime_printtrace (uintptr *pcbuf, int32 c)\n \n   for (i = 0; i < c; ++i)\n     {\n-      struct __go_string fn;\n-      struct __go_string file;\n+      String fn;\n+      String file;\n       int line;\n \n       if (__go_file_line (pcbuf[i], &fn, &file, &line)\n-\t  && runtime_showframe (fn.__data))\n+\t  && runtime_showframe (fn.str))\n \t{\n \t  runtime_printf (\"%S\\n\", fn);\n \t  runtime_printf (\"\\t%S:%d\\n\", file, line);"}, {"sha": "ed510f75a725fa5f58f4ee48d08f4b7128767052", "filename": "libgo/runtime/go-type-identity.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-type-identity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-type-identity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-identity.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -6,13 +6,9 @@\n \n #include <stddef.h>\n \n-#include \"config.h\"\n+#include \"runtime.h\"\n #include \"go-type.h\"\n \n-/* The 64-bit type.  */\n-\n-typedef unsigned int DItype __attribute__ ((mode (DI)));\n-\n /* An identity hash function for a type.  This is used for types where\n    we can simply use the type value itself as a hash code.  This is\n    true of, e.g., integers and pointers.  */\n@@ -28,7 +24,7 @@ __go_type_hash_identity (const void *key, uintptr_t key_size)\n     {\n       union\n       {\n-\tDItype v;\n+\tuint64 v;\n \tunsigned char a[8];\n       } u;\n       u.v = 0;"}, {"sha": "9aad720085c5d8893fb08c2f8a7ec2548655845c", "filename": "libgo/runtime/go-type-interface.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-type-interface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-type-interface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-interface.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,6 +4,7 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"interface.h\"\n #include \"go-type.h\"\n "}, {"sha": "a96af0290b256e29963a1916e34b5c871728b891", "filename": "libgo/runtime/go-type-string.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-type-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-type-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-string.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,10 +4,9 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include <stddef.h>\n-\n-#include \"go-string.h\"\n+#include \"runtime.h\"\n #include \"go-type.h\"\n+#include \"go-string.h\"\n \n /* A string hash function for a map.  */\n \n@@ -16,15 +15,15 @@ __go_type_hash_string (const void *vkey,\n \t\t       uintptr_t key_size __attribute__ ((unused)))\n {\n   uintptr_t ret;\n-  const struct __go_string *key;\n-  int len;\n-  int i;\n-  const unsigned char *p;\n+  const String *key;\n+  intgo len;\n+  intgo i;\n+  const byte *p;\n \n   ret = 5381;\n-  key = (const struct __go_string *) vkey;\n-  len = key->__length;\n-  for (i = 0, p = key->__data; i < len; i++, p++)\n+  key = (const String *) vkey;\n+  len = key->len;\n+  for (i = 0, p = key->str; i < len; i++, p++)\n     ret = ret * 33 + *p;\n   return ret;\n }\n@@ -35,11 +34,10 @@ _Bool\n __go_type_equal_string (const void *vk1, const void *vk2,\n \t\t\tuintptr_t key_size __attribute__ ((unused)))\n {\n-  const struct __go_string *k1;\n-  const struct __go_string *k2;\n+  const String *k1;\n+  const String *k2;\n \n-  k1 = (const struct __go_string *) vk1;\n-  k2 = (const struct __go_string *) vk2;\n-  return (k1->__length == k2->__length\n-\t  && __builtin_memcmp (k1->__data, k2->__data, k1->__length) == 0);\n+  k1 = (const String *) vk1;\n+  k2 = (const String *) vk2;\n+  return __go_ptr_strings_equal (k1, k2);\n }"}, {"sha": "2269ae6339c5b4e5952ba32ee84dfe429733cb7b", "filename": "libgo/runtime/go-type.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type.h?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -10,9 +10,10 @@\n #include <stddef.h>\n #include <stdint.h>\n \n-#include \"go-string.h\"\n #include \"array.h\"\n \n+struct String;\n+\n /* Many of the types in this file must match the data structures\n    generated by the compiler, and must also match the Go types which\n    appear in go/runtime/type.go and go/reflect/type.go.  */\n@@ -94,7 +95,7 @@ struct __go_type_descriptor\n \n   /* A string describing this type.  This is only used for\n      debugging.  */\n-  const struct __go_string *__reflection;\n+  const struct String *__reflection;\n \n   /* A pointer to fields which are only used for some types.  */\n   const struct __go_uncommon_type *__uncommon;\n@@ -109,11 +110,11 @@ struct __go_type_descriptor\n struct __go_method\n {\n   /* The name of the method.  */\n-  const struct __go_string *__name;\n+  const struct String *__name;\n \n   /* This is NULL for an exported method, or the name of the package\n      where it lives.  */\n-  const struct __go_string *__pkg_path;\n+  const struct String *__pkg_path;\n \n   /* The type of the method, without the receiver.  This will be a\n      function type.  */\n@@ -134,10 +135,10 @@ struct __go_method\n struct __go_uncommon_type\n {\n   /* The name of the type.  */\n-  const struct __go_string *__name;\n+  const struct String *__name;\n \n   /* The type's package.  This is NULL for builtin types.  */\n-  const struct __go_string *__pkg_path;\n+  const struct String *__pkg_path;\n \n   /* The type's methods.  This is an array of struct __go_method.  */\n   struct __go_open_array __methods;\n@@ -216,11 +217,11 @@ struct __go_func_type\n struct __go_interface_method\n {\n   /* The name of the method.  */\n-  const struct __go_string *__name;\n+  const struct String *__name;\n \n   /* This is NULL for an exported method, or the name of the package\n      where it lives.  */\n-  const struct __go_string *__pkg_path;\n+  const struct String *__pkg_path;\n \n   /* The real type of the method.  */\n   struct __go_type_descriptor *__type;\n@@ -269,17 +270,17 @@ struct __go_ptr_type\n struct __go_struct_field\n {\n   /* The name of the field--NULL for an anonymous field.  */\n-  const struct __go_string *__name;\n+  const struct String *__name;\n \n   /* This is NULL for an exported method, or the name of the package\n      where it lives.  */\n-  const struct __go_string *__pkg_path;\n+  const struct String *__pkg_path;\n \n   /* The type of the field.  */\n   const struct __go_type_descriptor *__type;\n \n   /* The field tag, or NULL.  */\n-  const struct __go_string *__tag;\n+  const struct String *__tag;\n \n   /* The offset of the field in the struct.  */\n   uintptr_t __offset;"}, {"sha": "f8474fc9f6c64eab9ab036bc9d3ab7e50ebfab6e", "filename": "libgo/runtime/go-typedesc-equal.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-typedesc-equal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-typedesc-equal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-typedesc-equal.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,6 +4,7 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-string.h\"\n #include \"go-type.h\"\n "}, {"sha": "712c333e7cb94aac58ae9a917b70501b0979c0cf", "filename": "libgo/runtime/go-typestring.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-typestring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-typestring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-typestring.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,14 +4,13 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"interface.h\"\n #include \"go-type.h\"\n-#include \"go-string.h\"\n \n-struct __go_string typestring(struct __go_empty_interface)\n-  asm (\"runtime.typestring\");\n+String typestring(struct __go_empty_interface) asm (\"runtime.typestring\");\n \n-struct __go_string\n+String\n typestring (struct __go_empty_interface e)\n {\n   return *e.__type_descriptor->__reflection;"}, {"sha": "e3a55b4dfb241e377a2373e8f650e25a82c5f973", "filename": "libgo/runtime/go-unsafe-pointer.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-pointer.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -6,7 +6,7 @@\n \n #include <stddef.h>\n \n-#include \"go-string.h\"\n+#include \"runtime.h\"\n #include \"go-type.h\"\n \n /* This file provides the type descriptor for the unsafe.Pointer type.\n@@ -26,9 +26,9 @@ struct field_align\n \n /* The reflection string.  */\n #define REFLECTION \"unsafe.Pointer\"\n-static const struct __go_string reflection_string =\n+static const String reflection_string =\n {\n-  (const unsigned char *) REFLECTION,\n+  (const byte *) REFLECTION,\n   sizeof REFLECTION - 1\n };\n \n@@ -65,9 +65,9 @@ extern const struct __go_ptr_type pointer_unsafe_Pointer\n \n /* The reflection string.  */\n #define PREFLECTION \"*unsafe.Pointer\"\n-static const struct __go_string preflection_string =\n+static const String preflection_string =\n {\n-  (const unsigned char *) PREFLECTION,\n+  (const byte *) PREFLECTION,\n   sizeof PREFLECTION - 1,\n };\n "}, {"sha": "f3068a656fab84674e02c352ba2fa1f6320c1274", "filename": "libgo/runtime/interface.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Finterface.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Finterface.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Finterface.h?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -7,7 +7,7 @@\n #ifndef LIBGO_INTERFACE_H\n #define LIBGO_INTERFACE_H\n \n-#include \"go-type.h\"\n+struct __go_type_descriptor;\n \n /* A variable of interface type is an instance of this struct, if the\n    interface has any methods.  */"}, {"sha": "1a0afede2c184924fcd1fe9d09a491f577be3ae8", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -14,7 +14,6 @@ package runtime\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n-#include \"go-string.h\"\n #include \"interface.h\"\n #include \"go-type.h\"\n #include \"race.h\""}, {"sha": "1af9639245648d18c85005c356ca20dcc1a383c6", "filename": "libgo/runtime/panic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fpanic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fpanic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fpanic.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,6 +4,7 @@\n \n #include \"runtime.h\"\n #include \"go-defer.h\"\n+#include \"go-panic.h\"\n \n // Code related to defer, panic and recover.\n "}, {"sha": "42717bb951ad6f8d535397982537d7a1ad17748a", "filename": "libgo/runtime/print.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fprint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fprint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fprint.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -4,6 +4,7 @@\n \n #include <stdarg.h>\n #include \"runtime.h\"\n+#include \"array.h\"\n \n //static Lock debuglock;\n \n@@ -294,8 +295,8 @@ runtime_printstring(String v)\n \t//\tgwrite(\"[string too long]\", 17);\n \t//\treturn;\n \t// }\n-\tif(v.__length > 0)\n-\t\tgwrite(v.__data, v.__length);\n+\tif(v.len > 0)\n+\t\tgwrite(v.str, v.len);\n }\n \n void"}, {"sha": "8e82d1287817e556a3b416b0ecb720f44251fbdc", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -586,13 +586,13 @@ void\n runtime_goroutinetrailer(G *g)\n {\n \tif(g != nil && g->gopc != 0 && g->goid != 1) {\n-\t\tstruct __go_string fn;\n-\t\tstruct __go_string file;\n+\t\tString fn;\n+\t\tString file;\n \t\tint line;\n \n \t\tif(__go_file_line(g->gopc - 1, &fn, &file, &line)) {\n-\t\t\truntime_printf(\"created by %s\\n\", fn.__data);\n-\t\t\truntime_printf(\"\\t%s:%d\\n\", file.__data, line);\n+\t\t\truntime_printf(\"created by %S\\n\", fn);\n+\t\t\truntime_printf(\"\\t%S:%d\\n\", file, line);\n \t\t}\n \t}\n }"}, {"sha": "c798b269e0fd4f8e44576371f7a29b4a7ef1a128", "filename": "libgo/runtime/reflect.goc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Freflect.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Freflect.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Freflect.goc?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -3,9 +3,9 @@\n // license that can be found in the LICENSE file.\n \n package reflect\n+#include \"runtime.h\"\n #include \"go-type.h\"\n #include \"interface.h\"\n-#include \"runtime.h\"\n #include \"go-panic.h\"\n \n func ifaceE2I(inter *Type, e Eface, ret *Iface) {"}, {"sha": "3d4865a001a34d63d8363ba1c7a2ec4a2d9f8817", "filename": "libgo/runtime/runtime.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.c?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -9,7 +9,6 @@\n #include \"runtime.h\"\n #include \"array.h\"\n #include \"go-panic.h\"\n-#include \"go-string.h\"\n \n int32\n runtime_gotraceback(void)\n@@ -93,9 +92,9 @@ runtime_getenv(const char *s)\n \tenvv = (String*)syscall_Envs.__values;\n \tenvc = syscall_Envs.__count;\n \tfor(i=0; i<envc; i++){\n-\t\tif(envv[i].__length <= len)\n+\t\tif(envv[i].len <= len)\n \t\t\tcontinue;\n-\t\tv = (const byte*)envv[i].__data;\n+\t\tv = (const byte*)envv[i].str;\n \t\tfor(j=0; j<len; j++)\n \t\t\tif(bs[j] != v[j])\n \t\t\t\tgoto nomatch;"}, {"sha": "e6281eaf803b2e3b156c76a38533ebd044ce7f72", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -21,10 +21,8 @@\n #include <sys/mman.h>\n #endif\n \n-#include \"array.h\"\n+#include \"interface.h\"\n #include \"go-alloc.h\"\n-#include \"go-panic.h\"\n-#include \"go-string.h\"\n \n /* This file supports C files copied from the 6g runtime library.\n    This is a version of the 6g runtime.h rewritten for gccgo's version\n@@ -67,7 +65,7 @@ typedef struct\tParFor\t\tParFor;\n typedef struct\tParForThread\tParForThread;\n \n typedef\tstruct\t__go_open_array\t\tSlice;\n-typedef\tstruct\t__go_string\t\tString;\n+typedef\tstruct\tString\t\t\tString;\n typedef struct\t__go_interface\t\tIface;\n typedef\tstruct\t__go_empty_interface\tEface;\n typedef\tstruct\t__go_type_descriptor\tType;\n@@ -129,6 +127,11 @@ union\tNote\n \tuint32\tkey;\t// futex-based impl\n \tM*\twaitm;\t// waiting M (sema-based impl)\n };\n+struct String\n+{\n+\tconst byte*\tstr;\n+\tintgo\t\tlen;\n+};\n struct\tGCStats\n {\n \t// the struct must consist of only uint64's,"}, {"sha": "d3f0c2d4b9c405e7ccd3a044a74de5630913c995", "filename": "libgo/runtime/string.goc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fstring.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776f27a67f26c795ba8c27a4e69525382b9379c3/libgo%2Fruntime%2Fstring.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fstring.goc?ref=776f27a67f26c795ba8c27a4e69525382b9379c3", "patch": "@@ -6,10 +6,11 @@ package runtime\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n+#include \"go-string.h\"\n \n #define charntorune(pv, str, len) __go_get_rune(str, len, pv)\n \n-int32\n+intgo\n runtime_findnull(const byte *s)\n {\n \tif(s == nil)\n@@ -22,8 +23,8 @@ runtime_gostringnocopy(const byte *str)\n {\n \tString s;\n \t\n-\ts.__data = (const unsigned char *) str;\n-\ts.__length = runtime_findnull(str);\n+\ts.str = str;\n+\ts.len = runtime_findnull(str);\n \treturn s;\n }\n \n@@ -35,40 +36,40 @@ enum\n func stringiter(s String, k int) (retk int) {\n \tint32 l;\n \n-\tif(k >= s.__length) {\n+\tif(k >= s.len) {\n \t\t// retk=0 is end of iteration\n \t\tretk = 0;\n \t\tgoto out;\n \t}\n \n-\tl = s.__data[k];\n+\tl = s.str[k];\n \tif(l < Runeself) {\n \t\tretk = k+1;\n \t\tgoto out;\n \t}\n \n \t// multi-char rune\n-\tretk = k + charntorune(&l, s.__data+k, s.__length-k);\n+\tretk = k + charntorune(&l, s.str+k, s.len-k);\n \n out:\n }\n \n func stringiter2(s String, k int) (retk int, retv int) {\n-\tif(k >= s.__length) {\n+\tif(k >= s.len) {\n \t\t// retk=0 is end of iteration\n \t\tretk = 0;\n \t\tretv = 0;\n \t\tgoto out;\n \t}\n \n-\tretv = s.__data[k];\n+\tretv = s.str[k];\n \tif(retv < Runeself) {\n \t\tretk = k+1;\n \t\tgoto out;\n \t}\n \n \t// multi-char rune\n-\tretk = k + charntorune(&retv, s.__data+k, s.__length-k);\n+\tretk = k + charntorune(&retv, s.str+k, s.len-k);\n \n out:\n }"}]}