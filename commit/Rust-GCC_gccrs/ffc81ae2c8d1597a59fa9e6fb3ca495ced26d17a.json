{"sha": "ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZjODFhZTJjOGQxNTk3YTU5ZmE5ZTZmYjNjYTQ5NWNlZDI2ZDE3YQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2012-02-23T21:02:27Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2012-02-23T21:02:27Z"}, "message": "re PR libffi/52221 ([libffi] r183675,r184021 needs to be fixed.)\n\n        PR libffi/52221\n        * src/x86/ffi.c (ffi_closure_raw_THISCALL): New\n        prototype.\n        (ffi_prep_raw_closure_loc): Use ffi_closure_raw_THISCALL for\n        thiscall-convention.\n        (ffi_raw_call): Use ffi_prep_args_raw.\n        * src/x86/win32.S (ffi_closure_raw_THISCALL): Add\n        implementation for stub.\n\nFrom-SVN: r184526", "tree": {"sha": "a63608c539b89be3aacdd9570b46b31195388095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63608c539b89be3aacdd9570b46b31195388095"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a/comments", "author": null, "committer": null, "parents": [{"sha": "0253a8b1653e3ebd82cd814ce08ee6aee3149507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0253a8b1653e3ebd82cd814ce08ee6aee3149507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0253a8b1653e3ebd82cd814ce08ee6aee3149507"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "5b553f341fa410b5b5239a14cd16d5c0669afba5", "filename": "libffi/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a", "patch": "@@ -1,3 +1,14 @@\n+2012-02-22  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR libffi/52221\n+\t* src/x86/ffi.c (ffi_closure_raw_THISCALL): New\n+\tprototype.\n+\t(ffi_prep_raw_closure_loc): Use ffi_closure_raw_THISCALL for\n+\tthiscall-convention.\n+\t(ffi_raw_call): Use ffi_prep_args_raw.\n+\t* src/x86/win32.S (ffi_closure_raw_THISCALL): Add\n+\timplementation for stub.\n+\n 2012-02-13  Kai Tietz  <ktietz@redhat.com>\n \n \tPR libffi/52221"}, {"sha": "469578ea504955c31a68fb4897056f94ec6fe838", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a", "patch": "@@ -447,6 +447,8 @@ unsigned int FFI_HIDDEN ffi_closure_SYSV_inner (ffi_closure *, void **, void *)\n void FFI_HIDDEN ffi_closure_raw_SYSV (ffi_raw_closure *)\n      __attribute__ ((regparm(1)));\n #ifdef X86_WIN32\n+void FFI_HIDDEN ffi_closure_raw_THISCALL (ffi_raw_closure *)\n+     __attribute__ ((regparm(1)));\n void FFI_HIDDEN ffi_closure_STDCALL (ffi_closure *)\n      __attribute__ ((regparm(1)));\n void FFI_HIDDEN ffi_closure_THISCALL (ffi_closure *)\n@@ -747,7 +749,7 @@ ffi_prep_raw_closure_loc (ffi_raw_closure* closure,\n     }\n   else if (cif->abi == FFI_THISCALL)\n     {\n-      FFI_INIT_TRAMPOLINE_THISCALL (&closure->tramp[0], &ffi_closure_raw_SYSV,\n+      FFI_INIT_TRAMPOLINE_THISCALL (&closure->tramp[0], &ffi_closure_raw_THISCALL,\n \t\t\t\t    codeloc, cif->bytes);\n     }\n #endif\n@@ -795,7 +797,7 @@ ffi_raw_call(ffi_cif *cif, void (*fn)(void), void *rvalue, ffi_raw *fake_avalue)\n #ifdef X86_WIN32\n     case FFI_SYSV:\n     case FFI_STDCALL:\n-      ffi_call_win32(ffi_prep_args, &ecif, cif->abi, cif->bytes, cif->flags,\n+      ffi_call_win32(ffi_prep_args_raw, &ecif, cif->abi, cif->bytes, cif->flags,\n \t\t     ecif.rvalue, fn);\n       break;\n     case FFI_THISCALL:\n@@ -823,7 +825,7 @@ ffi_raw_call(ffi_cif *cif, void (*fn)(void), void *rvalue, ffi_raw *fake_avalue)\n \t  cif->abi = abi = FFI_THISCALL;\n \tif (passed_regs < 1 && abi == FFI_THISCALL)\n \t  cif->abi = abi = FFI_STDCALL;\n-        ffi_call_win32(ffi_prep_args, &ecif, abi, cif->bytes, cif->flags,\n+        ffi_call_win32(ffi_prep_args_raw, &ecif, abi, cif->bytes, cif->flags,\n                        ecif.rvalue, fn);\n       }\n       break;"}, {"sha": "deb4a0394d866246f87af6e9bd78f9eee0163d4d", "filename": "libffi/src/x86/win32.S", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a/libffi%2Fsrc%2Fx86%2Fwin32.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a/libffi%2Fsrc%2Fx86%2Fwin32.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fwin32.S?ref=ffc81ae2c8d1597a59fa9e6fb3ca495ced26d17a", "patch": "@@ -264,6 +264,18 @@ ffi_closure_SYSV ENDP\n #define RAW_CLOSURE_USER_DATA_OFFSET (RAW_CLOSURE_FUN_OFFSET + 4)\n #define CIF_FLAGS_OFFSET 20\n \n+ffi_closure_raw_THISCALL PROC NEAR\n+\tpush ebp\n+\tmov  ebp, esp\n+\tpush esi\n+\tsub esp, 36\n+\tmov  esi, [eax + RAW_CLOSURE_CIF_OFFSET]        ;; closure->cif\n+\tmov  edx, [eax + RAW_CLOSURE_USER_DATA_OFFSET]  ;; closure->user_data\n+\tmov [esp + 12], edx\n+\tlea edx, [ebp + 12], edx\n+\tjmp stubraw\n+ffi_closure_raw_SYSV ENDP\n+\n ffi_closure_raw_SYSV PROC NEAR USES esi\n     ;; the ffi_closure ctx is passed in eax by the trampoline.\n \n@@ -272,6 +284,7 @@ ffi_closure_raw_SYSV PROC NEAR USES esi\n         mov  edx, [eax + RAW_CLOSURE_USER_DATA_OFFSET]  ;; closure->user_data\n         mov  [esp + 12], edx                            ;; user_data\n         lea  edx, [ebp + 8]\n+stubraw:\n         mov  [esp + 8], edx                             ;; raw_args\n         lea  edx, [ebp - 24]\n         mov  [esp + 4], edx                             ;; &res\n@@ -722,7 +735,21 @@ _ffi_closure_SYSV:\n #define RAW_CLOSURE_FUN_OFFSET (RAW_CLOSURE_CIF_OFFSET + 4)\n #define RAW_CLOSURE_USER_DATA_OFFSET (RAW_CLOSURE_FUN_OFFSET + 4)\n #define CIF_FLAGS_OFFSET 20\n-\n+        .balign 16\n+\t.globl\t_ffi_closure_raw_THISCALL\n+#ifndef __OS2__\n+\t.def\t_ffi_closure_raw_THISCALL;\t.scl\t2;\t.type\t32;\t.endef\n+#endif\n+_ffi_closure_raw_THISCALL:\n+\tpushl\t%ebp\n+\tmovl\t%esp, %ebp\n+\tpushl\t%esi\n+\tsubl\t$36, %esp\n+\tmovl\tRAW_CLOSURE_CIF_OFFSET(%eax), %esi\t /* closure->cif */\n+\tmovl\tRAW_CLOSURE_USER_DATA_OFFSET(%eax), %edx /* closure->user_data */\n+\tmovl\t%edx, 12(%esp)\t/* user_data */\n+\tleal\t12(%ebp), %edx\t/* __builtin_dwarf_cfa () */\n+\tjmp\t.stubraw\n         # This assumes we are using gas.\n         .balign 16\n \t.globl\t_ffi_closure_raw_SYSV\n@@ -742,6 +769,7 @@ _ffi_closure_raw_SYSV:\n \tmovl\tRAW_CLOSURE_USER_DATA_OFFSET(%eax), %edx /* closure->user_data */\n \tmovl\t%edx, 12(%esp)\t/* user_data */\n \tleal\t8(%ebp), %edx\t/* __builtin_dwarf_cfa () */\n+.stubraw:\n \tmovl\t%edx, 8(%esp)\t/* raw_args */\n \tleal\t-24(%ebp), %edx\n \tmovl\t%edx, 4(%esp)\t/* &res */"}]}