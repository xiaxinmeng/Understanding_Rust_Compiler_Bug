{"sha": "b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "node_id": "C_kwDOANBUbNoAKGI0ZmI5ZjRmOWExMGQ4MjUzMDJjZmI1YTBlY2VmYTc5NjU3MGQ4YmM", "commit": {"author": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2022-05-16T08:02:50Z"}, "committer": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2022-05-16T08:02:50Z"}, "message": "OpenMP, C++: Add template support for the has_device_addr clause.\n\nThis patch adds support for list items in the has_device_addr clause which type\nis given by C++ template parameters.\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_omp_clauses): Added OMP_CLAUSE_HAS_DEVICE_ADDR.\n\t* semantics.cc (finish_omp_clauses): Added template decl processing.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.c++/target-has-device-addr-7.C: New test.\n\t* testsuite/libgomp.c++/target-has-device-addr-8.C: New test.\n\t* testsuite/libgomp.c++/target-has-device-addr-9.C: New test.", "tree": {"sha": "251a4b967b88d8dea7ae372690cee6d41273f795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/251a4b967b88d8dea7ae372690cee6d41273f795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/comments", "author": null, "committer": null, "parents": [{"sha": "ec69db6be6912e45fa5f54f2d231d56e52612f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec69db6be6912e45fa5f54f2d231d56e52612f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec69db6be6912e45fa5f54f2d231d56e52612f1d"}], "stats": {"total": 125, "additions": 123, "deletions": 2}, "files": [{"sha": "5037627b93f4a57e9e814c3f1767b1b06ec4e516", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "patch": "@@ -17722,6 +17722,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n+\tcase OMP_CLAUSE_HAS_DEVICE_ADDR:\n \tcase OMP_CLAUSE_INCLUSIVE:\n \tcase OMP_CLAUSE_EXCLUSIVE:\n \t  OMP_CLAUSE_DECL (nc)\n@@ -17867,6 +17868,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \t  case OMP_CLAUSE_USE_DEVICE_PTR:\n \t  case OMP_CLAUSE_USE_DEVICE_ADDR:\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n+\t  case OMP_CLAUSE_HAS_DEVICE_ADDR:\n \t  case OMP_CLAUSE_INCLUSIVE:\n \t  case OMP_CLAUSE_EXCLUSIVE:\n \t  case OMP_CLAUSE_ALLOCATE:"}, {"sha": "cd7a2818feb974b24a7cdafdf7f633c5f723524d", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "patch": "@@ -8575,14 +8575,20 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      else\n \t\t{\n \t\t  t = OMP_CLAUSE_DECL (c);\n+\t\t  while (TREE_CODE (t) == TREE_LIST)\n+\t\t    t = TREE_CHAIN (t);\n \t\t  while (TREE_CODE (t) == INDIRECT_REF\n \t\t\t || TREE_CODE (t) == ARRAY_REF)\n \t\t    t = TREE_OPERAND (t, 0);\n \t\t}\n \t    }\n-\t  bitmap_set_bit (&is_on_device_head, DECL_UID (t));\n \t  if (VAR_P (t) || TREE_CODE (t) == PARM_DECL)\n-\t    cxx_mark_addressable (t);\n+\t    {\n+\t      bitmap_set_bit (&is_on_device_head, DECL_UID (t));\n+\t      if (!processing_template_decl\n+\t\t  && !cxx_mark_addressable (t))\n+\t\tremove = true;\n+\t    }\n \t  goto check_dup_generic_t;\n \n \tcase OMP_CLAUSE_USE_DEVICE_ADDR:"}, {"sha": "2c4571be4555668b54f2d00d1f2eb00ec7f92fcf", "filename": "libgomp/testsuite/libgomp.c++/target-has-device-addr-7.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-has-device-addr-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-has-device-addr-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-has-device-addr-7.C?ref=b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "patch": "@@ -0,0 +1,36 @@\n+/* Testing 'has_device_addr' clause on the target construct with template.  */\n+\n+template <typename T>\n+void\n+foo (T x)\n+{\n+  x = 24;\n+  #pragma omp target data map(x) use_device_addr(x)\n+    #pragma omp target has_device_addr(x)\n+      x = 42;\n+\n+  if (x != 42)\n+    __builtin_abort ();\n+}\n+\n+template <typename T>\n+void\n+bar (T (&x)[])\n+{\n+  x[0] = 24;\n+  #pragma omp target data map(x[:2]) use_device_addr(x)\n+    #pragma omp target has_device_addr(x[:2])\n+      x[0] = 42;\n+\n+  if (x[0] != 42)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  int a[] = { 24, 42};\n+  foo <int> (42);\n+  bar <int> (a);\n+  return 0;\n+}"}, {"sha": "2adfd30296f08a826f0683579f086ae4136ddd8c", "filename": "libgomp/testsuite/libgomp.c++/target-has-device-addr-8.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-has-device-addr-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-has-device-addr-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-has-device-addr-8.C?ref=b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "patch": "@@ -0,0 +1,47 @@\n+/* Testing 'has_device_addr' clause on the target construct with template.  */\n+\n+#include <omp.h>\n+\n+template <typename T>\n+void\n+foo (T (&x)[])\n+{\n+  #pragma omp target has_device_addr(x)\n+    for (int i = 0; i < 15; i++)\n+      x[i] = 2 * i;\n+\n+  #pragma omp target has_device_addr(x[15:15])\n+    for (int i = 15; i < 30; i++)\n+      x[i] = 3 * i;\n+}\n+\n+int\n+main ()\n+{\n+  int *dp = (int*)omp_target_alloc (30*sizeof(int), 0);\n+\n+  #pragma omp target is_device_ptr(dp)\n+    for (int i = 0; i < 30; i++)\n+      dp[i] = i;\n+\n+  int (&x)[30] = *static_cast<int(*)[30]>(static_cast<void*>(dp));\n+\n+  foo <int> (x);\n+\n+  int y[30];\n+  for (int i = 0; i < 30; ++i)\n+    y[i] = 0;\n+  int h = omp_get_initial_device ();\n+  int t = omp_get_default_device ();\n+  omp_target_memcpy (&y, dp, 30 * sizeof(int), 0, 0, h, t);\n+  for (int i = 0; i < 15; ++i)\n+    if (y[i] != 2 * i)\n+      __builtin_abort ();\n+  for (int i = 15; i < 30; ++i)\n+    if (y[i] != 3 * i)\n+      __builtin_abort ();\n+\n+  omp_target_free (dp, 0);\n+\n+  return 0;\n+}"}, {"sha": "0c34cab56d2f4e1635c9c7158f75157b914d95b7", "filename": "libgomp/testsuite/libgomp.c++/target-has-device-addr-9.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-has-device-addr-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-has-device-addr-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-has-device-addr-9.C?ref=b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "patch": "@@ -0,0 +1,30 @@\n+/* Testing 'has_device_addr' clause on the target construct with template.  */\n+\n+#include <omp.h>\n+\n+template <typename T>\n+void\n+foo (T (&x))\n+{\n+  #pragma omp target has_device_addr(x)\n+    x = 24;\n+}\n+\n+int\n+main ()\n+{\n+  int *dp = (int*)omp_target_alloc (sizeof(int), 0);\n+  int &x = *dp;\n+\n+  foo <int> (x);\n+\n+  int y = 42;\n+  int h = omp_get_initial_device ();\n+  int t = omp_get_default_device ();\n+  omp_target_memcpy (&y, dp, sizeof(int), 0, 0, h, t);\n+  if (y != 24)\n+    __builtin_abort ();\n+\n+  omp_target_free (dp, 0);\n+  return 0;\n+}"}]}