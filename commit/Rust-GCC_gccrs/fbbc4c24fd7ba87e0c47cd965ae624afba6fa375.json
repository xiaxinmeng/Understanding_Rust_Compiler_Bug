{"sha": "fbbc4c24fd7ba87e0c47cd965ae624afba6fa375", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJiYzRjMjRmZDdiYTg3ZTBjNDdjZDk2NWFlNjI0YWZiYTZmYTM3NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-14T23:30:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-14T23:30:10Z"}, "message": "i386: Fix wrong-code x86 issue with avx512{f,vl} fma PR93009\n\nAs mentioned in the PR, the following testcase is miscompiled with avx512vl.\nThe reason is that the fma *_bcst_1 define_insns have two alternatives:\n\"=v,v\" \"0,v\" \"v,0\" \"m,m\" and use the same\nvfmadd213* %3<avx512bcst>, %2, %0<sd_mask_op4>\npattern.  If the first alternative is chosen, everything is ok, but if the\nsecond alternative is chosen, %2 and %0 are the same register, so instead\nof doing dest=dest*another+membcst we do dest=dest*dest+membcst.\nNow, to fix this, either we'd need separate:\n  \"vfmadd213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\n   vfmadd213<ssemodesuffix>\\t{%3<avx512bcst>, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3<avx512bcst>}\"\nwhere for the second alternative, we'd just use %1 instead of %2, but\nwhat I think is actually cleaner is just use a single alternative and\nmake the two multiplication operands commutative, which they really are.\n\n2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93009\n\t* config/i386/sse.md\n\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_1,\n\t*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1,\n\t*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1,\n\t*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_1): Use\n\tjust a single alternative instead of two, make operands 1 and 2\n\tcommutative.\n\n\t* gcc.target/i386/avx512vl-pr93009.c: New test.", "tree": {"sha": "8175b3ddc03ae580e8dde005c60d4b41c09c0aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8175b3ddc03ae580e8dde005c60d4b41c09c0aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f474fbd5e3cca37ebc886a4950827e93d1c665c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f474fbd5e3cca37ebc886a4950827e93d1c665c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f474fbd5e3cca37ebc886a4950827e93d1c665c8"}], "stats": {"total": 86, "additions": 70, "deletions": 16}, "files": [{"sha": "356bc63c6d0ace7c703099158ec045912712b89f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbbc4c24fd7ba87e0c47cd965ae624afba6fa375", "patch": "@@ -1,3 +1,14 @@\n+2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93009\n+\t* config/i386/sse.md\n+\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_1,\n+\t*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1,\n+\t*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1,\n+\t*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_1): Use\n+\tjust a single alternative instead of two, make operands 1 and 2\n+\tcommutative.\n+\n 2020-01-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR lto/91576"}, {"sha": "b8d41b7ed545b4d1d3fadc49d52f0bc6e87f6896", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fbbc4c24fd7ba87e0c47cd965ae624afba6fa375", "patch": "@@ -4172,12 +4172,12 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_1\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n \t(fma:VF_AVX512\n-\t  (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v,0\")\n+\t  (match_operand:VF_AVX512 1 \"register_operand\" \"%0\")\n+\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")\n \t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m,m\"))))]\n+\t    (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m\"))))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n   \"vfmadd213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n   [(set_attr \"type\" \"ssemuladd\")\n@@ -4289,13 +4289,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n \t(fma:VF_AVX512\n-\t  (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v,0\")\n+\t  (match_operand:VF_AVX512 1 \"register_operand\" \"%0\")\n+\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")\n \t  (neg:VF_AVX512\n \t    (vec_duplicate:VF_AVX512\n-\t      (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m,m\")))))]\n+\t      (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m\")))))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n   \"vfmsub213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n   [(set_attr \"type\" \"ssemuladd\")\n@@ -4411,13 +4411,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n \t(fma:VF_AVX512\n \t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\"))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v,0\")\n+\t    (match_operand:VF_AVX512 1 \"register_operand\" \"%0\"))\n+\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")\n \t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m,m\"))))]\n+\t    (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m\"))))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n   \"vfnmadd213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n   [(set_attr \"type\" \"ssemuladd\")\n@@ -4535,14 +4535,14 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_1\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n \t(fma:VF_AVX512\n \t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\"))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v,0\")\n+\t    (match_operand:VF_AVX512 1 \"register_operand\" \"%0\"))\n+\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")\n \t  (neg:VF_AVX512\n \t    (vec_duplicate:VF_AVX512\n-\t      (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m,m\")))))]\n+\t      (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m\")))))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n   \"vfnmsub213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n   [(set_attr \"type\" \"ssemuladd\")"}, {"sha": "ea37d69fa881fb4896dac172c89de537e06244a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbbc4c24fd7ba87e0c47cd965ae624afba6fa375", "patch": "@@ -1,3 +1,8 @@\n+2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93009\n+\t* gcc.target/i386/avx512vl-pr93009.c: New test.\n+\n 2020-01-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR lto/91576"}, {"sha": "4dfc4a9f3c38f4cdd016a46a03f5a52ea7f55e4f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr93009.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr93009.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbbc4c24fd7ba87e0c47cd965ae624afba6fa375/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr93009.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr93009.c?ref=fbbc4c24fd7ba87e0c47cd965ae624afba6fa375", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/93009 */\n+/* { dg-do run { target { avx512vl } } } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 512\n+#define AVX512F_LEN_HALF 256\n+\n+#include \"avx512f-check.h\"\n+\n+typedef double v2df __attribute__((vector_size (16)));\n+\n+__attribute__((noipa)) v2df\n+foo (v2df x, v2df y, double *z)\n+{\n+  return x * y + (v2df) { z[0], z[0] };\n+}\n+\n+__attribute__((noipa)) v2df\n+bar (v2df x, v2df y, double *z)\n+{\n+  return y * x + (v2df) { z[0], z[0] };\n+}\n+\n+static void\n+test_256 (void)\n+{\n+}\n+\n+static void\n+test_128 (void)\n+{\n+  double z = 5.0;\n+  v2df x = foo ((v2df) { 1.0, 2.0 }, (v2df) { 3.0, 4.0 }, &z);\n+  v2df y = bar ((v2df) { 6.0, 7.0 }, (v2df) { 8.0, 9.0 }, &z);\n+  if (x[0] != 8.0 || x[1] != 13.0 || y[0] != 53.0 || y[1] != 68.0)\n+    abort ();\n+}"}]}