{"sha": "067fe66c8ba9b16feacf66fce9ae668091e42821", "node_id": "C_kwDOANBUbNoAKDA2N2ZlNjZjOGJhOWIxNmZlYWNmNjZmY2U5YWU2NjgwOTFlNDI4MjE", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-05-09T09:48:00Z"}, "committer": {"name": "guojiufu", "email": "guojiufu@linux.ibm.com", "date": "2022-05-10T03:36:22Z"}, "message": "rs6000: avoid peeking eof after __vector\n\nThere is a rare corner case: where vector is followed only by one\nvalid identifer and the \";\" which is near the end of the file.\n\nLike the case in PR101168:\nusing vdbl =  __vector double;\n#define BREAK 1\n\nFor this case, \"vector double\" is followed by CPP_SEMICOLON and then\nEOF.  There is no more tokens need to check for this case.\n\n\tPR preprocessor/101168\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-c.cc (rs6000_macro_to_expand):\n\tAvoid empty identifier.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/powerpc/pr101168.C: New test.", "tree": {"sha": "190e8892ca7c27f8e4f765d1ebb01728ae3030a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/190e8892ca7c27f8e4f765d1ebb01728ae3030a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/067fe66c8ba9b16feacf66fce9ae668091e42821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067fe66c8ba9b16feacf66fce9ae668091e42821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/067fe66c8ba9b16feacf66fce9ae668091e42821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067fe66c8ba9b16feacf66fce9ae668091e42821/comments", "author": null, "committer": null, "parents": [{"sha": "bd022ff9752262a70f44b57808447f823392989e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd022ff9752262a70f44b57808447f823392989e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd022ff9752262a70f44b57808447f823392989e"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "9c8cbd7a66e43a08e1bb79f80d182a63ffe6097f", "filename": "gcc/config/rs6000/rs6000-c.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/067fe66c8ba9b16feacf66fce9ae668091e42821/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/067fe66c8ba9b16feacf66fce9ae668091e42821/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc?ref=067fe66c8ba9b16feacf66fce9ae668091e42821", "patch": "@@ -178,9 +178,8 @@ rid_int128(void)\n   return RID_MAX + 1;\n }\n \n-/* Called to decide whether a conditional macro should be expanded.\n-   Since we have exactly one such macro (i.e, 'vector'), we do not\n-   need to examine the 'tok' parameter.  */\n+/* Called to decide whether a conditional macro should be expanded\n+   by peeking two or more tokens(_bool/_pixel/int/long/double/...).  */\n \n static cpp_hashnode *\n rs6000_macro_to_expand (cpp_reader *pfile, const cpp_token *tok)\n@@ -282,7 +281,9 @@ rs6000_macro_to_expand (cpp_reader *pfile, const cpp_token *tok)\n \t\texpand_bool_pixel = __pixel_keyword;\n \t      else if (ident == C_CPP_HASHNODE (__bool_keyword))\n \t\texpand_bool_pixel = __bool_keyword;\n-\t      else\n+\n+\t      /* If there are more tokens to check.  */\n+\t      else if (ident)\n \t\t{\n \t\t  /* Try two tokens down, too.  */\n \t\t  do"}, {"sha": "284e77fdc889b0f30871889d777f747c337bf690", "filename": "gcc/testsuite/g++.target/powerpc/pr101168.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/067fe66c8ba9b16feacf66fce9ae668091e42821/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr101168.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/067fe66c8ba9b16feacf66fce9ae668091e42821/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr101168.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr101168.C?ref=067fe66c8ba9b16feacf66fce9ae668091e42821", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+using vdbl =  __vector double;\n+#define BREAK 1"}]}