{"sha": "445ba599cb4e9a766526d30216863e3e01586557", "node_id": "C_kwDOANBUbNoAKDQ0NWJhNTk5Y2I0ZTlhNzY2NTI2ZDMwMjE2ODYzZTNlMDE1ODY1NTc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-08T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-08T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "82abbd8cfa25c8251df1382e7ef033d7523a719d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82abbd8cfa25c8251df1382e7ef033d7523a719d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/445ba599cb4e9a766526d30216863e3e01586557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445ba599cb4e9a766526d30216863e3e01586557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445ba599cb4e9a766526d30216863e3e01586557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445ba599cb4e9a766526d30216863e3e01586557/comments", "author": null, "committer": null, "parents": [{"sha": "2005b9b888eeac078f2524b1521885f4b5453894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2005b9b888eeac078f2524b1521885f4b5453894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2005b9b888eeac078f2524b1521885f4b5453894"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "0c8e5af86df0ed154662408734846083685aebb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445ba599cb4e9a766526d30216863e3e01586557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445ba599cb4e9a766526d30216863e3e01586557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=445ba599cb4e9a766526d30216863e3e01586557", "patch": "@@ -1,3 +1,80 @@\n+2022-06-07  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/105090\n+\t* config/arm/arm.cc (arm_bfi_1_p): New function.\n+\t(arm_bfi_p): New function.\n+\t(arm_rtx_costs_internal): Add costs for BFI idioms.\n+\t(arm_print_operand [case 'V']): Format output for BFI/BFC masks.\n+\t* config/arm/constraints.md (Dj): New constraint.\n+\t* config/arm/arm.md (arm_andsi3_insn): Add alternative to use BFC.\n+\t(insv_zero): Convert to an insn with a split.\n+\t(*bfi, *bfi_alt1, *bfi_alt2, *bfi_alt3): New patterns.\n+\n+2022-06-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/105854\n+\t* config/i386/sse.md (ssse3_palignrdi): Change alternative 2\n+\tfrom Yv to Yw.\n+\n+2022-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/105853\n+\tPR target/105856\n+\t* calls.cc (load_register_parameters): Call store_constructor\n+\tand int_expr_size directly instead of expanding via expand_expr.\n+\t* expr.cc (static void store_constructor): Don't prototype here.\n+\t(static HOST_WIDE_INT int_expr_size): Likewise.\n+\t(store_constructor): No longer static.\n+\t(int_expr_size): Likewise, no longer static.\n+\t* expr.h (store_constructor): Prototype here.\n+\t(int_expr_size): Prototype here.\n+\n+2022-06-07  Jan Beulich  <jbeulich@suse.com>\n+\n+\tRevert:\n+\t2022-06-03  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* Makefile.in (ORIGINAL_OBJCOPY_FOR_TARGET): New.\n+\t* configure.ac: Check for objcopy, producing\n+\tORIGINAL_OBJCOPY_FOR_TARGET.\n+\t* configure: Update accordingly.\n+\t* exec-tool.in (ORIGINAL_OBJCOPY_FOR_TARGET): New.\n+\tHandle objcopy.\n+\n+2022-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (OMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER): Define.\n+\t* tree-pretty-print.cc (dump_omp_clause) <case OMP_CLAUSE_LINEAR>:\n+\tAdjust clause printing style depending on\n+\tOMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER.\n+\n+2022-06-07  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/i386/i386-builtin.def (__builtin_ia32_psadbw256):\n+\tChange type.\n+\t* config/i386/i386-builtin-types.def: New function type\n+\t(V4DI, V32QI, V32QI).\n+\t* config/i386/i386-expand.cc (ix86_expand_args_builtin): Handle\n+\tV4DI_FTYPE_V32QI_V32QI.\n+\n+2022-06-07  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/i386/i386.cc (ix86_attr_length_vex_default): Take REX.B\n+\tinto account for reg-only insns.\n+\n+2022-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.cc (ix86_rtx_costs): Add a new case for\n+\tIF_THEN_ELSE, and provide costs for TARGET_XOP's vpcmov and\n+\tTARGET_CMOVE's (scalar integer) conditional moves.\n+\t* config/i386/sse.md (define_split): Recognize XOP's vpcmov\n+\tfrom its equivalent (canonical) pxor;pand;pxor sequence.\n+\n+2022-06-07  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* machmode.def (VECTOR_MODES_WITH_PREFIX): Update document for\n+\tparameter ORDER.\n+\n 2022-06-06  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config.in: Regenerate."}, {"sha": "84385c310ad71b9d7af8089e5fec3eabc7d1d0ae", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445ba599cb4e9a766526d30216863e3e01586557/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445ba599cb4e9a766526d30216863e3e01586557/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=445ba599cb4e9a766526d30216863e3e01586557", "patch": "@@ -1 +1 @@\n-20220607\n+20220608"}, {"sha": "5be39413b623b235b051fa129ba23ef86df5d5fe", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445ba599cb4e9a766526d30216863e3e01586557/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445ba599cb4e9a766526d30216863e3e01586557/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=445ba599cb4e9a766526d30216863e3e01586557", "patch": "@@ -1,3 +1,13 @@\n+2022-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.cc (c_parser_omp_clause_linear): Parse OpenMP 5.2\n+\tstyle linear clause modifiers.  Set\n+\tOMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER flag on the clauses when\n+\told style modifiers are used.\n+\t* c-typeck.cc (c_finish_omp_clauses): Only reject linear clause\n+\twith val modifier on simd or for if the old style modifiers are\n+\tused.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-lang.cc (LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine."}, {"sha": "a0bcf6e0dbc8c735748f39b41596d490a2162de2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445ba599cb4e9a766526d30216863e3e01586557/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445ba599cb4e9a766526d30216863e3e01586557/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=445ba599cb4e9a766526d30216863e3e01586557", "patch": "@@ -1,3 +1,20 @@\n+2022-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.cc (cp_parser_omp_clause_linear): Parse OpenMP 5.2\n+\tstyle linear clause modifiers.  Set\n+\tOMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER flag on the clauses when\n+\told style modifiers are used.\n+\t* semantics.cc (finish_omp_clauses): Only reject linear clause\n+\twith val modifier on simd or for if the old style modifiers are\n+\tused.\n+\n+2022-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c++/96442\n+\t* decl.cc (start_enum): When emitting a \"must be integral\" error,\n+\tset ENUM_UNDERLYING_TYPE to integer_type_node, to avoid an ICE\n+\tdownstream in build_enumeration.\n+\n 2022-06-06  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/53164"}, {"sha": "7544847aaeadf64d9a570e61851431ff37c8389c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445ba599cb4e9a766526d30216863e3e01586557/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445ba599cb4e9a766526d30216863e3e01586557/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=445ba599cb4e9a766526d30216863e3e01586557", "patch": "@@ -1,3 +1,9 @@\n+2022-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-openmp.cc (gfc_trans_omp_clauses): Set\n+\tOMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER on OMP_CLAUSE_LINEAR\n+\tclauses unconditionally for now.\n+\n 2022-06-03  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* openmp.cc (OMP_SCOPE_CLAUSES): Add firstprivate and allocate."}, {"sha": "6d955a6cacdf52b063ebb7bafac2c46828c2245d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445ba599cb4e9a766526d30216863e3e01586557/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445ba599cb4e9a766526d30216863e3e01586557/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=445ba599cb4e9a766526d30216863e3e01586557", "patch": "@@ -1,3 +1,31 @@\n+2022-06-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr105854.c: New test.\n+\n+2022-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/105853\n+\tPR target/105856\n+\t* gcc.dg/pr105853.c: New test case.\n+\t* gcc.dg/pr105856.c: New test case.\n+\n+2022-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/linear-2.c: New test.\n+\t* c-c++-common/gomp/linear-3.c: New test.\n+\t* g++.dg/gomp/linear-3.C: New test.\n+\t* g++.dg/gomp/linear-4.C: New test.\n+\t* g++.dg/gomp/linear-5.C: New test.\n+\n+2022-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c++/96442\n+\t* g++.dg/parse/pr96442.C: New test case.\n+\n+2022-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/xop-pcmov3.c: New test case.\n+\n 2022-06-06  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/53164"}]}