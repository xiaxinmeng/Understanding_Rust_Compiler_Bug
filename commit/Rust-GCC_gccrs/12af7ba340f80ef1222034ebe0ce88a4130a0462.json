{"sha": "12af7ba340f80ef1222034ebe0ce88a4130a0462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhZjdiYTM0MGY4MGVmMTIyMjAzNGViZTBjZTg4YTQxMzBhMDQ2Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-04-08T19:39:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-04-08T19:39:59Z"}, "message": "re PR c++/20145 (template \"class has virtual functions ... \" is not suppressed with -isystem)\n\n\t* cp-tree.def (TINST_LEVEL): Document TINST_IN_SYSTEM_HEADER_P.\n\t* cp-tree.h (struct tinst_level): Add in_system_header_p.\n\t(TINST_IN_SYSTEM_HEADER_P): New macro.\n\t(make_tinst_level): Remove.\n\t* pt.c (lookup_template_class): Preserve DECL_IN_SYSTEM_HEADER on\n\tthe instantiated class.\n\t(push_tinst_level): Do not use make_tinst_level.  Set\n\tTINST_IN_SYSTEM_HEADER_P.\n\t(pop_tinst_level): Likewise.\n\t(instantiate_class_template): Set in_system_header.\n\t(instantiate_pending_templates): Likewise.\n\t* tree.c (make_tinst_level): Remove.\n\n\tPR c++/20145\n\t* g++.dg/warn/Wdtor1.C: New test.\n\nFrom-SVN: r97854", "tree": {"sha": "7269b44542fb5a413a12a9ea81b3d385f85036dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7269b44542fb5a413a12a9ea81b3d385f85036dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12af7ba340f80ef1222034ebe0ce88a4130a0462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12af7ba340f80ef1222034ebe0ce88a4130a0462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12af7ba340f80ef1222034ebe0ce88a4130a0462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12af7ba340f80ef1222034ebe0ce88a4130a0462/comments", "author": null, "committer": null, "parents": [{"sha": "01d87b6f3da40f38bfda6a538316fb8e6ce9a888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d87b6f3da40f38bfda6a538316fb8e6ce9a888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d87b6f3da40f38bfda6a538316fb8e6ce9a888"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "145d490df2c7333148236888ce43528695e4b35f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12af7ba340f80ef1222034ebe0ce88a4130a0462", "patch": "@@ -1,3 +1,18 @@\n+2005-04-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.def (TINST_LEVEL): Document TINST_IN_SYSTEM_HEADER_P.\n+\t* cp-tree.h (struct tinst_level): Add in_system_header_p.\n+\t(TINST_IN_SYSTEM_HEADER_P): New macro.\n+\t(make_tinst_level): Remove.\n+\t* pt.c (lookup_template_class): Preserve DECL_IN_SYSTEM_HEADER on\n+\tthe instantiated class.\n+\t(push_tinst_level): Do not use make_tinst_level.  Set\n+\tTINST_IN_SYSTEM_HEADER_P.\n+\t(pop_tinst_level): Likewise.\n+\t(instantiate_class_template): Set in_system_header.\n+\t(instantiate_pending_templates): Likewise.\n+\t* tree.c (make_tinst_level): Remove.\n+\n 2005-04-06  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* decl.c (start_decl): Apply pending #pragma weak regardless of"}, {"sha": "b7c580ab5b84afb517be560249ce457dc8e5c751", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=12af7ba340f80ef1222034ebe0ce88a4130a0462", "patch": "@@ -289,6 +289,7 @@ DEFTREECODE (TAG_DEFN, \"tag_defn\", tcc_expression, 0)\n \n    TINST_DECL contains the original DECL node.\n    TINST_LOCATION contains the location where the template is instantiated.\n+   TINST_IN_SYSTEM_HEADER_P is true if the location is in a system header.\n \n    A stack of template instantiation nodes is kept through the TREE_CHAIN\n    fields of these nodes.  */"}, {"sha": "1f773c0702aa000362260797fb811ed56d9ab67e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=12af7ba340f80ef1222034ebe0ce88a4130a0462", "patch": "@@ -221,6 +221,7 @@ struct tinst_level_s GTY(())\n   struct tree_common common;\n   tree decl;\n   location_t locus;\n+  int in_system_header_p;\n };\n typedef struct tinst_level_s * tinst_level_t;\n \n@@ -3121,6 +3122,8 @@ typedef enum unification_kind_t {\n   (((tinst_level_t) TINST_LEVEL_CHECK (NODE))->decl)\n #define TINST_LOCATION(NODE) \\\n   (((tinst_level_t) TINST_LEVEL_CHECK (NODE))->locus)\n+#define TINST_IN_SYSTEM_HEADER_P(NODE) \\\n+  (((tinst_level_t) TINST_LEVEL_CHECK (NODE))->in_system_header_p)\n \n /* in class.c */\n \n@@ -4244,7 +4247,6 @@ extern tree build_dummy_object\t\t\t(tree);\n extern tree maybe_dummy_object\t\t\t(tree, tree *);\n extern int is_dummy_object\t\t\t(tree);\n extern const struct attribute_spec cxx_attribute_table[];\n-extern tree make_tinst_level                    (tree, location_t);\n extern tree make_ptrmem_cst                     (tree, tree);\n extern tree cp_build_type_attribute_variant     (tree, tree);\n extern tree cp_build_qualified_type_real        (tree, int, tsubst_flags_t);"}, {"sha": "9418df4438bae7014db3c7ff6d1b6bbc9fbd2192", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=12af7ba340f80ef1222034ebe0ce88a4130a0462", "patch": "@@ -4609,6 +4609,8 @@ lookup_template_class (tree d1,\n \t= TREE_PRIVATE (TYPE_STUB_DECL (template_type));\n       TREE_PROTECTED (type_decl)\n \t= TREE_PROTECTED (TYPE_STUB_DECL (template_type));\n+      DECL_IN_SYSTEM_HEADER (type_decl)\n+\t= DECL_IN_SYSTEM_HEADER (template);\n \n       /* Set up the template information.  We have to figure out which\n \t template is the immediate parent if this is a full\n@@ -5001,7 +5003,10 @@ push_tinst_level (tree d)\n       return 0;\n     }\n \n-  new = make_tinst_level (d, input_location);\n+  new = make_node (TINST_LEVEL);\n+  TINST_DECL (new) = d;\n+  TINST_LOCATION (new) = input_location;\n+  TINST_IN_SYSTEM_HEADER_P (new) = in_system_header;\n   TREE_CHAIN (new) = current_tinst_level;\n   current_tinst_level = new;\n \n@@ -5026,6 +5031,7 @@ pop_tinst_level (void)\n   /* Restore the filename and line number stashed away when we started\n      this instantiation.  */\n   input_location = TINST_LOCATION (old);\n+  in_system_header = TINST_IN_SYSTEM_HEADER_P (old);\n   current_tinst_level = TREE_CHAIN (old);\n   --tinst_depth;\n   ++tinst_level_tick;\n@@ -5504,7 +5510,9 @@ instantiate_class_template (tree type)\n \n   /* Set the input location to the template definition. This is needed\n      if tsubsting causes an error.  */\n-  input_location = DECL_SOURCE_LOCATION (TYPE_NAME (pattern));\n+  typedecl = TYPE_MAIN_DECL (type);\n+  input_location = DECL_SOURCE_LOCATION (typedecl);\n+  in_system_header = DECL_IN_SYSTEM_HEADER (typedecl);\n \n   TYPE_HAS_CONSTRUCTOR (type) = TYPE_HAS_CONSTRUCTOR (pattern);\n   TYPE_HAS_NEW_OPERATOR (type) = TYPE_HAS_NEW_OPERATOR (pattern);\n@@ -5843,7 +5851,6 @@ instantiate_class_template (tree type)\n      the class itself.  This puts error messages involving generated\n      implicit functions at a predictable point, and the same point\n      that would be used for non-template classes.  */\n-  typedecl = TYPE_MAIN_DECL (type);\n   input_location = DECL_SOURCE_LOCATION (typedecl);\n \n   unreverse_member_declarations (type);\n@@ -11590,6 +11597,7 @@ instantiate_pending_templates (int retries)\n   tree last = NULL_TREE;\n   int reconsider;\n   location_t saved_loc = input_location;\n+  int saved_in_system_header = in_system_header;\n \n   /* Instantiating templates may trigger vtable generation.  This in turn\n      may require further template instantiations.  We place a limit here\n@@ -11674,6 +11682,7 @@ instantiate_pending_templates (int retries)\n   while (reconsider);\n \n   input_location = saved_loc;\n+  in_system_header = saved_in_system_header;\n }\n \n /* Substitute ARGVEC into T, which is a list of initializers for"}, {"sha": "44315f46eeff3aadd9afdca7100edaa523b126f9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=12af7ba340f80ef1222034ebe0ce88a4130a0462", "patch": "@@ -1851,17 +1851,6 @@ handle_init_priority_attribute (tree* node,\n     }\n }\n \n-/* Return a new TINST_LEVEL for DECL at location locus.  */\n-tree\n-make_tinst_level (tree decl, location_t locus)\n-{\n-  tree tinst_level = make_node (TINST_LEVEL);\n-  TREE_CHAIN (tinst_level) = NULL_TREE;\n-  TINST_DECL (tinst_level) = decl;\n-  TINST_LOCATION (tinst_level) = locus;\n-  return tinst_level;\n-}\n-\n /* Return a new PTRMEM_CST of the indicated TYPE.  The MEMBER is the\n    thing pointed to by the constant.  */\n "}, {"sha": "3ab431352b86dc3d92d4f748e765406b0871c95d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12af7ba340f80ef1222034ebe0ce88a4130a0462", "patch": "@@ -1,3 +1,8 @@\n+2005-04-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/20145\n+\t* g++.dg/warn/Wdtor1.C: New test.\n+\n 2005-04-06  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/17229"}, {"sha": "de1c0e7d39c06c5f7889d4591d7416fd3724fbd9", "filename": "gcc/testsuite/g++.dg/warn/Wdtor1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdtor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12af7ba340f80ef1222034ebe0ce88a4130a0462/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdtor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdtor1.C?ref=12af7ba340f80ef1222034ebe0ce88a4130a0462", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/20145\n+// { dg-options \"-Wnon-virtual-dtor\" }\n+# 1 \"t.cc\"\n+# 1 \"<built-in>\"\n+# 1 \"<command line>\"\n+# 1 \"t.cc\"\n+# 1 \"include/t.h\" 1 3 4\n+template <int> class t\n+{\n+  virtual void f();\n+};\n+# 2 \"t.cc\" 2\n+\n+void f(void)\n+{\n+  t<1> h;\n+}\n+"}]}