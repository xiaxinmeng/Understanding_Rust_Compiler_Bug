{"sha": "354ee867075b474b6f561a161b4140c7971fb2c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU0ZWU4NjcwNzViNDc0YjZmNTYxYTE2MWI0MTQwYzc5NzFmYjJjMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-31T17:27:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-31T17:27:02Z"}, "message": "[AArch64] Split gcc.target/aarch64/sve/vcond_4*\n\nvcond_4.c combined too much stuff into one test, so that when we needed\nto add XFAILs for one set of routines, we lost testing of others that\nused the same instructions.  This patch splits it into four:\n\nvcond_4.c:\n  The main test for selects between a vector and a scalar, with all\n  elements having the same size.\n\n  After Prathamesh's fix for PR91272, we are now guaranteed to use the\n  conditionally-loaded vector as the \"then\" value and the scalar as the\n  \"else\" value.\n\nvcond_4_zero.c:\n  Like vcond_4.c, but comparing with zero.\n\nvcond_4_sel.c:\n  Tests for selects between two scalars, with all elements having\n  the same size.  The optimisers can legitimately switch the \"then\"\n  and \"else\" order and adjust the comparison to match.\n\nvcond_4_costly.c:\n  Like vcnod_4.c, but with mixed element sizes.  The sequences tested\n  here will not be the preferred ones once we support mixtures of vector\n  sizes, but it still tests an important code path.\n\nThis means that vcond_4_run.c now only tests what's left in vcond_4.c,\nbut that seems OK, since the main point was to ensure correct exception\nbehaviour.\n\nSimilarly it means that vcond_5.c only tests what's left in vcond_4.c,\nbut that too is OK, since the point of the test was to compare the\ndefault handling of each comparison in vcond_4.c with the\n-fno-trapping-math equivalent.\n\n2019-10-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/vcond_4.c: Split parts out into...\n\t* gcc.target/aarch64/sve/vcond_4_costly.c,\n\t* gcc.target/aarch64/sve/vcond_4_sel.c,\n\t* gcc.target/aarch64/sve/vcond_4_zero.c: ...these new tests.\n\t* gcc.target/aarch64/sve/vcond_4_run.c: Adjust accordingly.\n\t* gcc.target/aarch64/sve/vcond_5.c: Likewise.\n\nFrom-SVN: r277682", "tree": {"sha": "9a55350094a707145c26797168d3abdf5606f181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a55350094a707145c26797168d3abdf5606f181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/354ee867075b474b6f561a161b4140c7971fb2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354ee867075b474b6f561a161b4140c7971fb2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354ee867075b474b6f561a161b4140c7971fb2c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354ee867075b474b6f561a161b4140c7971fb2c0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37115224b2ee1f03ce8d7816182c267c9ff9d545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37115224b2ee1f03ce8d7816182c267c9ff9d545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37115224b2ee1f03ce8d7816182c267c9ff9d545"}], "stats": {"total": 431, "additions": 299, "deletions": 132}, "files": [{"sha": "93e26dee8bd3106b73c3018b177c641008c92baf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=354ee867075b474b6f561a161b4140c7971fb2c0", "patch": "@@ -1,3 +1,12 @@\n+2019-10-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/vcond_4.c: Split parts out into...\n+\t* gcc.target/aarch64/sve/vcond_4_costly.c,\n+\t* gcc.target/aarch64/sve/vcond_4_sel.c,\n+\t* gcc.target/aarch64/sve/vcond_4_zero.c: ...these new tests.\n+\t* gcc.target/aarch64/sve/vcond_4_run.c: Adjust accordingly.\n+\t* gcc.target/aarch64/sve/vcond_5.c: Likewise.\n+\n 2019-10-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/reduc_strict_3.c: Split all but the"}, {"sha": "3ed5b14221421f035a552f8f743f88bd0d5dd9d7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_4.c", "status": "modified", "additions": 20, "deletions": 71, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4.c?ref=354ee867075b474b6f561a161b4140c7971fb2c0", "patch": "@@ -33,38 +33,12 @@\n   {\t\t\t\t\t\t\t\t\\\n     for (int i = 0; i < count; ++i)\t\t\t\t\\\n       dest[i] = CMP (a[i], b[i]) ? src[i] : fallback;\t\t\\\n-  }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  void __attribute__ ((noinline, noclone))\t\t\t\\\n-  test_##TYPE1##_##TYPE2##_##CMP##_zero (TYPE1 *restrict dest,\t\\\n-\t\t\t\t\t TYPE1 *restrict src,\t\\\n-\t\t\t\t\t TYPE1 fallback,\t\\\n-\t\t\t\t\t TYPE2 *restrict a,\t\\\n-\t\t\t\t\t int count)\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    for (int i = 0; i < count; ++i)\t\t\t\t\\\n-      dest[i] = CMP (a[i], 0) ? src[i] : fallback;\t\t\\\n-  }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  void __attribute__ ((noinline, noclone))\t\t\t\\\n-  test_##TYPE1##_##TYPE2##_##CMP##_sel (TYPE1 *restrict dest,\t\\\n-\t\t\t\t\tTYPE1 if_true,\t\t\\\n-\t\t\t\t\tTYPE1 if_false,\t\t\\\n-\t\t\t\t\tTYPE2 *restrict a,\t\\\n-\t\t\t\t\tTYPE2 b, int count)\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    for (int i = 0; i < count; ++i)\t\t\t\t\\\n-      dest[i] = CMP (a[i], b) ? if_true : if_false;\t\t\\\n   }\n \n #define TEST_CMP(CMP) \\\n   TEST_LOOP (int32_t, float, CMP) \\\n   TEST_LOOP (uint32_t, float, CMP) \\\n-  TEST_LOOP (int64_t, float, CMP) \\\n-  TEST_LOOP (uint64_t, float, CMP) \\\n   TEST_LOOP (float, float, CMP) \\\n-  TEST_LOOP (int32_t, double, CMP) \\\n-  TEST_LOOP (uint32_t, double, CMP) \\\n   TEST_LOOP (int64_t, double, CMP) \\\n   TEST_LOOP (uint64_t, double, CMP) \\\n   TEST_LOOP (double, double, CMP)\n@@ -88,54 +62,29 @@ TEST_CMP (nule)\n TEST_CMP (nuge)\n TEST_CMP (nugt)\n \n-/* See PR 86753 for the reason behind the XFAILs.  */\n-\n-/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 5 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 10 { xfail *-*-* } } } */\n-\n-/* 5 for ne, 5 for ueq and 5 for nueq.  */\n-/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 { xfail *-*-* } } } */\n-\n-/* 5 for lt, 5 for ult and 5 for nult.  */\n-/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 } } */\n-\n-/* 5 for le, 5 for ule and 5 for nule.  */\n-/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 } } */\n-\n-/* 5 for gt, 5 for ugt and 5 for nugt.  */\n-/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 } } */\n-\n-/* 5 for ge, 5 for uge and 5 for nuge.  */\n-/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 } } */\n-\n-/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} } } */\n-/* 3 loops * 5 invocations for all 12 unordered comparisons.  */\n-/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 180 } } */\n-\n-/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 7 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 14 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 { xfail *-*-* } } } */\n+/* 3 for ne, 3 for ueq and 3 for nueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 9 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 } } */\n+/* 3 for olt, 3 for ult and 3 for nult.  */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 9 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 } } */\n+/* 3 for ole, 3 for ule and 3 for nule.  */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 9 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 } } */\n+/* 3 for ogt, 3 for ugt and 3 for nugt.  */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 9 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 } } */\n+/* 3 for oge, 3 for uge and 3 for nuge.  */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 9 } } */\n \n-/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} } } */\n-/* 3 loops * 5 invocations, with 2 invocations having ncopies == 2,\n-   for all 12 unordered comparisons.  */\n-/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 252 } } */\n+/* 3 invocations for all 12 unordered comparisons.  */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 36 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 36 } } */"}, {"sha": "4aa567e3709897b9aefec1a3be8223fa73eef837", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_4_costly.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_costly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_costly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_costly.c?ref=354ee867075b474b6f561a161b4140c7971fb2c0", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#include <stdint.h>\n+\n+#define eq(A, B) ((A) == (B))\n+#define ne(A, B) ((A) != (B))\n+#define olt(A, B) ((A) < (B))\n+#define ole(A, B) ((A) <= (B))\n+#define oge(A, B) ((A) >= (B))\n+#define ogt(A, B) ((A) > (B))\n+#define ordered(A, B) (!__builtin_isunordered (A, B))\n+#define unordered(A, B) (__builtin_isunordered (A, B))\n+#define ueq(A, B) (!__builtin_islessgreater (A, B))\n+#define ult(A, B) (__builtin_isless (A, B))\n+#define ule(A, B) (__builtin_islessequal (A, B))\n+#define uge(A, B) (__builtin_isgreaterequal (A, B))\n+#define ugt(A, B) (__builtin_isgreater (A, B))\n+#define nueq(A, B) (__builtin_islessgreater (A, B))\n+#define nult(A, B) (!__builtin_isless (A, B))\n+#define nule(A, B) (!__builtin_islessequal (A, B))\n+#define nuge(A, B) (!__builtin_isgreaterequal (A, B))\n+#define nugt(A, B) (!__builtin_isgreater (A, B))\n+\n+#define TEST_LOOP(TYPE1, TYPE2, CMP)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##CMP##_var (TYPE1 *restrict dest,\t\\\n+\t\t\t\t\tTYPE1 *restrict src,\t\\\n+\t\t\t\t\tTYPE1 fallback,\t\t\\\n+\t\t\t\t\tTYPE2 *restrict a,\t\\\n+\t\t\t\t\tTYPE2 *restrict b,\t\\\n+\t\t\t\t\tint count)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\\\n+      dest[i] = CMP (a[i], b[i]) ? src[i] : fallback;\t\t\\\n+  }\n+\n+#define TEST_CMP(CMP) \\\n+  TEST_LOOP (int64_t, float, CMP) \\\n+  TEST_LOOP (uint64_t, float, CMP) \\\n+  TEST_LOOP (int32_t, double, CMP) \\\n+  TEST_LOOP (uint32_t, double, CMP)\n+\n+TEST_CMP (eq)\n+TEST_CMP (ne)\n+TEST_CMP (olt)\n+TEST_CMP (ole)\n+TEST_CMP (oge)\n+TEST_CMP (ogt)\n+TEST_CMP (ordered)\n+TEST_CMP (unordered)\n+TEST_CMP (ueq)\n+TEST_CMP (ult)\n+TEST_CMP (ule)\n+TEST_CMP (uge)\n+TEST_CMP (ugt)\n+TEST_CMP (nueq)\n+TEST_CMP (nult)\n+TEST_CMP (nule)\n+TEST_CMP (nuge)\n+TEST_CMP (nugt)\n+\n+/* 2 each for: eq, ne, ueq, nueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcm(?:eq|ne)\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 8 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcm(?:eq|ne)\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 16 { xfail *-*-* } } } */\n+\n+/* 2 each for: olt, ult, nult, ogt, ugt, nugt.  */\n+/* { dg-final { scan-assembler-times {\\tfcm[lg]t\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tfcm[lg]t\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 24 } } */\n+\n+/* 2 each for: ole, ule, nule, oge, uge, nuge.  */\n+/* { dg-final { scan-assembler-times {\\tfcm[lg]e\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tfcm[lg]e\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 24 } } */\n+\n+/* 2 invocations for all 12 unordered comparisons.  */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 24 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 48 } } */"}, {"sha": "abab3ee9f4e8f605d2af0c297ded2a6d105e096e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_4_run.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_run.c?ref=354ee867075b474b6f561a161b4140c7971fb2c0", "patch": "@@ -14,7 +14,7 @@\n \n #define RUN_LOOP(TYPE1, TYPE2, CMP, EXPECT_INVALID)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    TYPE1 dest1[N], dest2[N], dest3[N], src[N];\t\t\t\t\\\n+    TYPE1 dest[N], src[N];\t\t\t\t\t\t\\\n     TYPE2 a[N], b[N];\t\t\t\t\t\t\t\\\n     for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n@@ -34,31 +34,19 @@\n \tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     feclearexcept (FE_ALL_EXCEPT);\t\t\t\t\t\\\n-    test_##TYPE1##_##TYPE2##_##CMP##_var (dest1, src, 11, a, b, N);\t\\\n-    test_##TYPE1##_##TYPE2##_##CMP##_zero (dest2, src, 22, a, N);\t\\\n-    test_##TYPE1##_##TYPE2##_##CMP##_sel (dest3, 33, 44, a, 9, N);\t\\\n+    test_##TYPE1##_##TYPE2##_##CMP##_var (dest, src, 11, a, b, N);\t\\\n     if (TEST_EXCEPTIONS\t\t\t\t\t\t\t\\\n \t&& !fetestexcept (FE_INVALID) != !(EXPECT_INVALID))\t\t\\\n       __builtin_abort ();\t\t\t\t\t\t\\\n     for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tif (dest1[i] != (CMP (a[i], b[i]) ? src[i] : 11))\t\t\\\n-\t  __builtin_abort ();\t\t\t\t\t\t\\\n-\tif (dest2[i] != (CMP (a[i], 0) ? src[i] : 22))\t\t\t\\\n-\t  __builtin_abort ();\t\t\t\t\t\t\\\n-\tif (dest3[i] != (CMP (a[i], 9) ? 33 : 44))\t\t\t\\\n-\t  __builtin_abort ();\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n+      if (dest[i] != (CMP (a[i], b[i]) ? src[i] : 11))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\t\\\n   }\n \n #define RUN_CMP(CMP, EXPECT_INVALID) \\\n   RUN_LOOP (int32_t, float, CMP, EXPECT_INVALID) \\\n   RUN_LOOP (uint32_t, float, CMP, EXPECT_INVALID) \\\n-  RUN_LOOP (int64_t, float, CMP, EXPECT_INVALID) \\\n-  RUN_LOOP (uint64_t, float, CMP, EXPECT_INVALID) \\\n   RUN_LOOP (float, float, CMP, EXPECT_INVALID) \\\n-  RUN_LOOP (int32_t, double, CMP, EXPECT_INVALID) \\\n-  RUN_LOOP (uint32_t, double, CMP, EXPECT_INVALID) \\\n   RUN_LOOP (int64_t, double, CMP, EXPECT_INVALID) \\\n   RUN_LOOP (uint64_t, double, CMP, EXPECT_INVALID) \\\n   RUN_LOOP (double, double, CMP, EXPECT_INVALID)"}, {"sha": "b83490cfb9aff1d25532b4a04adc42da0df09871", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_4_sel.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_sel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_sel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_sel.c?ref=354ee867075b474b6f561a161b4140c7971fb2c0", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define eq(A, B) ((A) == (B))\n+#define ne(A, B) ((A) != (B))\n+#define olt(A, B) ((A) < (B))\n+#define ole(A, B) ((A) <= (B))\n+#define oge(A, B) ((A) >= (B))\n+#define ogt(A, B) ((A) > (B))\n+#define ordered(A, B) (!__builtin_isunordered (A, B))\n+#define unordered(A, B) (__builtin_isunordered (A, B))\n+#define ueq(A, B) (!__builtin_islessgreater (A, B))\n+#define ult(A, B) (__builtin_isless (A, B))\n+#define ule(A, B) (__builtin_islessequal (A, B))\n+#define uge(A, B) (__builtin_isgreaterequal (A, B))\n+#define ugt(A, B) (__builtin_isgreater (A, B))\n+#define nueq(A, B) (__builtin_islessgreater (A, B))\n+#define nult(A, B) (!__builtin_isless (A, B))\n+#define nule(A, B) (!__builtin_islessequal (A, B))\n+#define nuge(A, B) (!__builtin_isgreaterequal (A, B))\n+#define nugt(A, B) (!__builtin_isgreater (A, B))\n+\n+#define TEST_LOOP(TYPE1, TYPE2, CMP)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##CMP##_sel (TYPE1 *restrict dest,\t\\\n+\t\t\t\t\tTYPE1 if_true,\t\t\\\n+\t\t\t\t\tTYPE1 if_false,\t\t\\\n+\t\t\t\t\tTYPE2 *restrict a,\t\\\n+\t\t\t\t\tTYPE2 b, int count)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\\\n+      dest[i] = CMP (a[i], b) ? if_true : if_false;\t\t\\\n+  }\n+\n+#define TEST_CMP(CMP) \\\n+  TEST_LOOP (int32_t, float, CMP) \\\n+  TEST_LOOP (uint32_t, float, CMP) \\\n+  TEST_LOOP (float, float, CMP) \\\n+  TEST_LOOP (int64_t, double, CMP) \\\n+  TEST_LOOP (uint64_t, double, CMP) \\\n+  TEST_LOOP (double, double, CMP)\n+\n+TEST_CMP (eq)\n+TEST_CMP (ne)\n+TEST_CMP (olt)\n+TEST_CMP (ole)\n+TEST_CMP (oge)\n+TEST_CMP (ogt)\n+TEST_CMP (ordered)\n+TEST_CMP (unordered)\n+TEST_CMP (ueq)\n+TEST_CMP (ult)\n+TEST_CMP (ule)\n+TEST_CMP (uge)\n+TEST_CMP (ugt)\n+TEST_CMP (nueq)\n+TEST_CMP (nult)\n+TEST_CMP (nule)\n+TEST_CMP (nuge)\n+TEST_CMP (nugt)\n+\n+/* 3 each for: eq, ne, ueq, nueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcm(?:eq|ne)\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tfcm(?:eq|ne)\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 12 } } */\n+\n+/* 3 each for: olt, ult, nult, ogt, ugt, nugt.  */\n+/* { dg-final { scan-assembler-times {\\tfcm[lg]t\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 18 } } */\n+/* { dg-final { scan-assembler-times {\\tfcm[lg]t\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 18 } } */\n+\n+/* 3 each for: ole, ule, nule, oge, uge, nuge.  */\n+/* { dg-final { scan-assembler-times {\\tfcm[lg]e\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 18 } } */\n+/* { dg-final { scan-assembler-times {\\tfcm[lg]e\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 18 } } */\n+\n+/* 3 invocations for all 12 unordered comparisons.  */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 36 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 36 } } */"}, {"sha": "905cf9b37e21d0fd801e1458e6166186b852c51a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_4_zero.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_zero.c?ref=354ee867075b474b6f561a161b4140c7971fb2c0", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define eq(A, B) ((A) == (B))\n+#define ne(A, B) ((A) != (B))\n+#define olt(A, B) ((A) < (B))\n+#define ole(A, B) ((A) <= (B))\n+#define oge(A, B) ((A) >= (B))\n+#define ogt(A, B) ((A) > (B))\n+#define ordered(A, B) (!__builtin_isunordered (A, B))\n+#define unordered(A, B) (__builtin_isunordered (A, B))\n+#define ueq(A, B) (!__builtin_islessgreater (A, B))\n+#define ult(A, B) (__builtin_isless (A, B))\n+#define ule(A, B) (__builtin_islessequal (A, B))\n+#define uge(A, B) (__builtin_isgreaterequal (A, B))\n+#define ugt(A, B) (__builtin_isgreater (A, B))\n+#define nueq(A, B) (__builtin_islessgreater (A, B))\n+#define nult(A, B) (!__builtin_isless (A, B))\n+#define nule(A, B) (!__builtin_islessequal (A, B))\n+#define nuge(A, B) (!__builtin_isgreaterequal (A, B))\n+#define nugt(A, B) (!__builtin_isgreater (A, B))\n+\n+#define TEST_LOOP(TYPE1, TYPE2, CMP)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##CMP##_zero (TYPE1 *restrict dest,\t\\\n+\t\t\t\t\t TYPE1 *restrict src,\t\\\n+\t\t\t\t\t TYPE1 fallback,\t\\\n+\t\t\t\t\t TYPE2 *restrict a,\t\\\n+\t\t\t\t\t int count)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\\\n+      dest[i] = CMP (a[i], 0) ? src[i] : fallback;\t\t\\\n+  }\n+\n+#define TEST_CMP(CMP) \\\n+  TEST_LOOP (int32_t, float, CMP) \\\n+  TEST_LOOP (uint32_t, float, CMP) \\\n+  TEST_LOOP (float, float, CMP) \\\n+  TEST_LOOP (int64_t, double, CMP) \\\n+  TEST_LOOP (uint64_t, double, CMP) \\\n+  TEST_LOOP (double, double, CMP)\n+\n+TEST_CMP (eq)\n+TEST_CMP (ne)\n+TEST_CMP (olt)\n+TEST_CMP (ole)\n+TEST_CMP (oge)\n+TEST_CMP (ogt)\n+TEST_CMP (ordered)\n+TEST_CMP (unordered)\n+TEST_CMP (ueq)\n+TEST_CMP (ult)\n+TEST_CMP (ule)\n+TEST_CMP (uge)\n+TEST_CMP (ugt)\n+TEST_CMP (nueq)\n+TEST_CMP (nult)\n+TEST_CMP (nule)\n+TEST_CMP (nuge)\n+TEST_CMP (nugt)\n+\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 3 } } */\n+\n+/* 3 for ne, 3 for ueq and 3 for nueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 9 } } */\n+\n+/* 3 for olt, 3 for ult and 3 for nult.  */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 9 } } */\n+\n+/* 3 for ole, 3 for ule and 3 for nule.  */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 9 } } */\n+\n+/* 3 for ogt, 3 for ugt and 3 for nugt.  */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 9 } } */\n+\n+/* 3 for oge, 3 for uge and 3 for nuge.  */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 9 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} } } */\n+/* 3 invocations for all 12 unordered comparisons.  */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 36 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 36 } } */"}, {"sha": "ecf247d25345205144fd60d94235902a5c631a45", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_5.c", "status": "modified", "additions": 20, "deletions": 45, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354ee867075b474b6f561a161b4140c7971fb2c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_5.c?ref=354ee867075b474b6f561a161b4140c7971fb2c0", "patch": "@@ -5,54 +5,29 @@\n \n #include \"vcond_4.c\"\n \n-/* See PR 86753 for the reason behind the XFAILs.  */\n+/* 3 for eq, 3 for ueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 6 } } */\n \n-/* 5 for eqand 5 for ueq.  */\n-/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 10 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 20 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 5 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 10 { xfail *-*-* } } } */\n+/* 3 each for: olt, ult, nult and nueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 12 } } */\n \n-/* 5 for lt, 5 for ult, 5 for nueq and 5 for nult.  */\n-/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 20 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 40 { xfail *-*-* } } } */\n+/* 3 for ole, 3 for ule and 3 for nule.  */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 9 } } */\n \n-/* 5 for le, 5 for ule and 5 for nule.  */\n-/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 15 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 30 } } */\n+/* 3 each for: ogt, ugt, nugt and nueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 12 } } */\n \n-/* 5 for gt, 5 for ugt, 5 for nueq and 5 for nugt.  */\n-/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 20 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 40 { xfail *-*-* } } } */\n+/* 3 for oge, 3 for uge and 3 for nuge.  */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 9 } } */\n \n-/* 5 for ge, 5 for uge and 5 for nuge.  */\n-/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 15 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 30 } } */\n-\n-/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} } } */\n-/* 3 loops * 5 invocations for ordered, unordered amd ueq.  */\n-/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 45 { xfail *-*-* } } } */\n-\n-/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 14 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 28 { xfail *-*-* } } } */\n-\n-/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 7 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 14 { xfail *-*-* } } } */\n-\n-/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 28 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 56 { xfail *-*-* } } } */\n-\n-/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 21 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 42 } } */\n-\n-/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 28 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 56 { xfail *-*-* } } } */\n-\n-/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 21 } } */\n-/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 42 } } */\n-\n-/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} } } */\n-/* 3 loops * 5 invocations, with 2 invocations having ncopies == 2,\n-   for ordered, unordered and ueq.  */\n-/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 63 { xfail *-*-* } } } */\n+/* 3 for ordered, 3 for unordered and 3 for ueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 9 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 9 } } */"}]}