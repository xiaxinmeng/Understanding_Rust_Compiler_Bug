{"sha": "67b884536dbfd3253b372b1a13a070f2fa7c704f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiODg0NTM2ZGJmZDMyNTNiMzcyYjFhMTNhMDcwZjJmYTdjNzA0Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-06-07T14:37:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-06-07T14:37:39Z"}, "message": "stor-layout.c (initialize_sizetypes): Initialize all sizetypes based on target definitions.\n\n2011-06-07  Richard Guenther  <rguenther@suse.de>\n\n\t* stor-layout.c (initialize_sizetypes): Initialize all\n\tsizetypes based on target definitions.\n\t(set_sizetype): Remove.\n\t* tree.c (build_common_tree_nodes): Do not call set_sizetype.\n\t* tree.h (set_sizetype): Remove.\n\nFrom-SVN: r174748", "tree": {"sha": "3fc8bfca836ae7a4a8df75d49259b2fc36a45527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc8bfca836ae7a4a8df75d49259b2fc36a45527"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b884536dbfd3253b372b1a13a070f2fa7c704f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b884536dbfd3253b372b1a13a070f2fa7c704f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b884536dbfd3253b372b1a13a070f2fa7c704f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b884536dbfd3253b372b1a13a070f2fa7c704f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861"}], "stats": {"total": 143, "additions": 62, "deletions": 81}, "files": [{"sha": "f3656fd27c216386d71478f9fc3d8cabd45a3e8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b884536dbfd3253b372b1a13a070f2fa7c704f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b884536dbfd3253b372b1a13a070f2fa7c704f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67b884536dbfd3253b372b1a13a070f2fa7c704f", "patch": "@@ -1,3 +1,11 @@\n+2011-06-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* stor-layout.c (initialize_sizetypes): Initialize all\n+\tsizetypes based on target definitions.\n+\t(set_sizetype): Remove.\n+\t* tree.c (build_common_tree_nodes): Do not call set_sizetype.\n+\t* tree.h (set_sizetype): Remove.\n+\n 2011-06-07  Nick Clifton  <nickc@redhat.com>\n \n \t* config.gcc: Unify V850 architecture options and add support for"}, {"sha": "9bfde847db7bfa89eeae7eedc99139be66d27b23", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 52, "deletions": 76, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b884536dbfd3253b372b1a13a070f2fa7c704f/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b884536dbfd3253b372b1a13a070f2fa7c704f/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=67b884536dbfd3253b372b1a13a070f2fa7c704f", "patch": "@@ -2189,93 +2189,69 @@ make_accum_type (int precision, int unsignedp, int satp)\n   return type;\n }\n \n-/* Initialize sizetype and bitsizetype to a reasonable and temporary\n-   value to enable integer types to be created.  */\n+/* Initialize sizetypes so layout_type can use them.  */\n \n void\n initialize_sizetypes (void)\n {\n-  tree t = make_node (INTEGER_TYPE);\n-  int precision = GET_MODE_BITSIZE (SImode);\n-\n-  SET_TYPE_MODE (t, SImode);\n-  TYPE_ALIGN (t) = GET_MODE_ALIGNMENT (SImode);\n-  TYPE_IS_SIZETYPE (t) = 1;\n-  TYPE_UNSIGNED (t) = 1;\n-  TYPE_SIZE (t) = build_int_cst (t, precision);\n-  TYPE_SIZE_UNIT (t) = build_int_cst (t, GET_MODE_SIZE (SImode));\n-  TYPE_PRECISION (t) = precision;\n-\n-  set_min_and_max_values_for_integral_type (t, precision,\n-\t\t\t\t\t    /*is_unsigned=*/true);\n-\n-  sizetype = t;\n-  bitsizetype = build_distinct_type_copy (t);\n-}\n-\n-/* Make sizetype a version of TYPE, and initialize *sizetype accordingly.\n-   We do this by overwriting the stub sizetype and bitsizetype nodes created\n-   by initialize_sizetypes.  This makes sure that (a) anything stubby about\n-   them no longer exists and (b) any INTEGER_CSTs created with such a type,\n-   remain valid.  */\n-\n-void\n-set_sizetype (tree type)\n-{\n-  tree t, max;\n-  int oprecision = TYPE_PRECISION (type);\n-  /* The *bitsizetype types use a precision that avoids overflows when\n-     calculating signed sizes / offsets in bits.  However, when\n-     cross-compiling from a 32 bit to a 64 bit host, we are limited to 64 bit\n-     precision.  */\n-  int precision\n-    = MIN (oprecision + BITS_PER_UNIT_LOG + 1, MAX_FIXED_MODE_SIZE);\n-  precision\n-    = GET_MODE_PRECISION (smallest_mode_for_size (precision, MODE_INT));\n-  if (precision > HOST_BITS_PER_WIDE_INT * 2)\n-    precision = HOST_BITS_PER_WIDE_INT * 2;\n-\n-  /* sizetype must be an unsigned type.  */\n-  gcc_assert (TYPE_UNSIGNED (type));\n-\n-  t = build_distinct_type_copy (type);\n-  /* We want to use sizetype's cache, as we will be replacing that type.  */\n-  TYPE_CACHED_VALUES (t) = TYPE_CACHED_VALUES (sizetype);\n-  TYPE_CACHED_VALUES_P (t) = TYPE_CACHED_VALUES_P (sizetype);\n-  TYPE_UID (t) = TYPE_UID (sizetype);\n-  TYPE_IS_SIZETYPE (t) = 1;\n-\n-  /* Replace our original stub sizetype.  */\n-  memcpy (sizetype, t, tree_size (sizetype));\n-  TYPE_MAIN_VARIANT (sizetype) = sizetype;\n-  TYPE_CANONICAL (sizetype) = sizetype;\n+  int precision, bprecision;\n+\n+  /* Get sizetypes precision from the SIZE_TYPE target macro.  */\n+  if (strcmp (SIZE_TYPE, \"unsigned int\") == 0)\n+    precision = INT_TYPE_SIZE;\n+  else if (strcmp (SIZE_TYPE, \"long unsigned int\") == 0)\n+    precision = LONG_TYPE_SIZE;\n+  else if (strcmp (SIZE_TYPE, \"long long unsigned int\") == 0)\n+    precision = LONG_LONG_TYPE_SIZE;\n+  else\n+    gcc_unreachable ();\n \n+  bprecision\n+    = MIN (precision + BITS_PER_UNIT_LOG + 1, MAX_FIXED_MODE_SIZE);\n+  bprecision\n+    = GET_MODE_PRECISION (smallest_mode_for_size (bprecision, MODE_INT));\n+  if (bprecision > HOST_BITS_PER_WIDE_INT * 2)\n+    bprecision = HOST_BITS_PER_WIDE_INT * 2;\n+\n+  /* Create stubs for sizetype and bitsizetype so we can create constants.  */\n+  sizetype = make_node (INTEGER_TYPE);\n+  /* ???  We can't set a name for sizetype because it appears in C diagnostics\n+     and pp_c_type_specifier doesn't deal with IDENTIFIER_NODE TYPE_NAMEs.  */\n+  TYPE_PRECISION (sizetype) = precision;\n+  TYPE_UNSIGNED (sizetype) = 1;\n+  TYPE_IS_SIZETYPE (sizetype) = 1;\n+  bitsizetype = make_node (INTEGER_TYPE);\n+  TYPE_NAME (bitsizetype) = get_identifier (\"bitsizetype\");\n+  TYPE_PRECISION (bitsizetype) = bprecision;\n+  TYPE_UNSIGNED (bitsizetype) = 1;\n+  TYPE_IS_SIZETYPE (bitsizetype) = 1;\n+\n+  /* Now layout both types manually.  */\n+  SET_TYPE_MODE (sizetype, smallest_mode_for_size (precision, MODE_INT));\n+  TYPE_ALIGN (sizetype) = GET_MODE_ALIGNMENT (TYPE_MODE (sizetype));\n+  TYPE_SIZE (sizetype) = bitsize_int (precision);\n+  TYPE_SIZE_UNIT (sizetype) = size_int (GET_MODE_SIZE (TYPE_MODE (sizetype)));\n+  set_min_and_max_values_for_integral_type (sizetype, precision,\n+\t\t\t\t\t    /*is_unsigned=*/true);\n   /* sizetype is unsigned but we need to fix TYPE_MAX_VALUE so that it is\n      sign-extended in a way consistent with force_fit_type.  */\n-  max = TYPE_MAX_VALUE (sizetype);\n   TYPE_MAX_VALUE (sizetype)\n-    = double_int_to_tree (sizetype, tree_to_double_int (max));\n-\n-  t = make_node (INTEGER_TYPE);\n-  TYPE_NAME (t) = get_identifier (\"bit_size_type\");\n-  /* We want to use bitsizetype's cache, as we will be replacing that type.  */\n-  TYPE_CACHED_VALUES (t) = TYPE_CACHED_VALUES (bitsizetype);\n-  TYPE_CACHED_VALUES_P (t) = TYPE_CACHED_VALUES_P (bitsizetype);\n-  TYPE_PRECISION (t) = precision;\n-  TYPE_UID (t) = TYPE_UID (bitsizetype);\n-  TYPE_IS_SIZETYPE (t) = 1;\n-\n-  /* Replace our original stub bitsizetype.  */\n-  memcpy (bitsizetype, t, tree_size (bitsizetype));\n-  TYPE_MAIN_VARIANT (bitsizetype) = bitsizetype;\n-  TYPE_CANONICAL (bitsizetype) = bitsizetype;\n-\n-  fixup_unsigned_type (bitsizetype);\n+    = double_int_to_tree (sizetype,\n+\t\t\t  tree_to_double_int (TYPE_MAX_VALUE (sizetype)));\n+\n+  SET_TYPE_MODE (bitsizetype, smallest_mode_for_size (bprecision, MODE_INT));\n+  TYPE_ALIGN (bitsizetype) = GET_MODE_ALIGNMENT (TYPE_MODE (bitsizetype));\n+  TYPE_SIZE (bitsizetype) = bitsize_int (bprecision);\n+  TYPE_SIZE_UNIT (bitsizetype)\n+    = size_int (GET_MODE_SIZE (TYPE_MODE (bitsizetype)));\n+  set_min_and_max_values_for_integral_type (bitsizetype, bprecision,\n+\t\t\t\t\t    /*is_unsigned=*/true);\n+  /* ???  TYPE_MAX_VALUE is not properly sign-extended.  */\n \n   /* Create the signed variants of *sizetype.  */\n-  ssizetype = make_signed_type (oprecision);\n+  ssizetype = make_signed_type (TYPE_PRECISION (sizetype));\n   TYPE_IS_SIZETYPE (ssizetype) = 1;\n-  sbitsizetype = make_signed_type (precision);\n+  sbitsizetype = make_signed_type (TYPE_PRECISION (bitsizetype));\n   TYPE_IS_SIZETYPE (sbitsizetype) = 1;\n }\n \f"}, {"sha": "21e7a2bced1fece4b44cfd95b3d3342bd8873884", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b884536dbfd3253b372b1a13a070f2fa7c704f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b884536dbfd3253b372b1a13a070f2fa7c704f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=67b884536dbfd3253b372b1a13a070f2fa7c704f", "patch": "@@ -9098,8 +9098,7 @@ make_or_reuse_accum_type (unsigned size, int unsignedp, int satp)\n }\n \n /* Create nodes for all integer types (and error_mark_node) using the sizes\n-   of C datatypes.  The caller should call set_sizetype soon after calling\n-   this function to select one of the types as sizetype.  */\n+   of C datatypes.  */\n \n void\n build_common_tree_nodes (bool signed_char)\n@@ -9161,7 +9160,6 @@ build_common_tree_nodes (bool signed_char)\n     size_type_node = long_long_unsigned_type_node;\n   else\n     gcc_unreachable ();\n-  set_sizetype (size_type_node);\n \n   /* Fill in the rest of the sized types.  Reuse existing type nodes\n      when possible.  */\n@@ -9182,7 +9180,7 @@ build_common_tree_nodes (bool signed_char)\n   access_private_node = get_identifier (\"private\");\n }\n \n-/* Call this function after calling build_common_tree_nodes and set_sizetype.\n+/* Call this function after calling build_common_tree_nodes.\n    It will create several other common tree nodes.  */\n \n void"}, {"sha": "4615d7664c480edf1de64a467ef16c76c9ea7092", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b884536dbfd3253b372b1a13a070f2fa7c704f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b884536dbfd3253b372b1a13a070f2fa7c704f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=67b884536dbfd3253b372b1a13a070f2fa7c704f", "patch": "@@ -4291,7 +4291,6 @@ extern tree signed_or_unsigned_type_for (int, tree);\n extern tree signed_type_for (tree);\n extern tree unsigned_type_for (tree);\n extern void initialize_sizetypes (void);\n-extern void set_sizetype (tree);\n extern void fixup_unsigned_type (tree);\n extern tree build_pointer_type_for_mode (tree, enum machine_mode, bool);\n extern tree build_pointer_type (tree);"}]}