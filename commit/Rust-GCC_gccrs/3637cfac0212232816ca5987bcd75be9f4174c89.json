{"sha": "3637cfac0212232816ca5987bcd75be9f4174c89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYzN2NmYWMwMjEyMjMyODE2Y2E1OTg3YmNkNzViZTlmNDE3NGM4OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-01-23T20:58:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-23T20:58:23Z"}, "message": "configure.target: Just use os_include_dir always.\n\n\n2001-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* configure.target: Just use os_include_dir always.\n\t* configure.in: Remove calls to GLIBCPP_CHECK_CTYPE_SUPPORT.\n\tLink atomicity files and ctype files here.\n\t* configure: Regenerate.\n\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE_SUPPORT): Remove.\n\t(GLIBCPP_ENABLE_ATOMICITY): Remove.\n\t* aclocal.m4: Regenerate.\n\nFrom-SVN: r39209", "tree": {"sha": "dc7b36cf33011d5636be6dd451d57047105f979b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc7b36cf33011d5636be6dd451d57047105f979b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3637cfac0212232816ca5987bcd75be9f4174c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3637cfac0212232816ca5987bcd75be9f4174c89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3637cfac0212232816ca5987bcd75be9f4174c89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3637cfac0212232816ca5987bcd75be9f4174c89/comments", "author": null, "committer": null, "parents": [{"sha": "80261b56ed6c7e34fee9cd823b9b1ba3230fb098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80261b56ed6c7e34fee9cd823b9b1ba3230fb098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80261b56ed6c7e34fee9cd823b9b1ba3230fb098"}], "stats": {"total": 1728, "additions": 729, "deletions": 999}, "files": [{"sha": "13439b037cc2f73b644bb5325c01668a694e9694", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3637cfac0212232816ca5987bcd75be9f4174c89", "patch": "@@ -1,3 +1,13 @@\n+2001-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* configure.target: Just use os_include_dir always.\n+\t* configure.in: Remove calls to GLIBCPP_CHECK_CTYPE_SUPPORT.\n+\tLink atomicity files and ctype files here.\n+\t* configure: Regenerate.\n+\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE_SUPPORT): Remove.\n+\t(GLIBCPP_ENABLE_ATOMICITY): Remove.\n+\t* aclocal.m4: Regenerate.\n+\t\n 2001-01-23  Chris Demetriou  <cgd@broadcom.com>\n \n \t* configure.in: Place definition of MULTISUBDIR in"}, {"sha": "5b7a9e8e4c94e5327992d7fdcabc0d371f6fcdc2", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3637cfac0212232816ca5987bcd75be9f4174c89", "patch": "@@ -787,66 +787,6 @@ AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n ])\n \n \n-dnl\n-dnl Check to see what the underlying c library's interface to ctype looks\n-dnl like. Bits of locale rely on things like isspace, toupper, etc. This\n-dnl stuff makes sure the right bits from the clibrary get called.\n-dnl \n-dnl Depending on what is found, select various configure/*/bits/ctype_base.h \n-dnl Depending on what is found, select various configure/*/ctype.cc\n-dnl\n-dnl GLIBCPP_CHECK_CTYPE_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n-  AC_CHECK_HEADER(ctype.h, [\n-    \n-    dnl If doesn't match any specified, go with defaults.\n-    if test x$ctype_include_dir != x; then\n-      ctype_default=no\n-    else\n-      ctype_default=yes\n-    fi\n-\n-    dnl Test for <ctype> functionality -- newlib\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for newlib])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _U + _L + _N + _S + _P + _C + _X + _B \\\n-        + _ctype_[a];}], \\\n-    ctype_newlib=yes, ctype_newlib=no)\n-    AC_MSG_RESULT($ctype_newlib)\n-    if test $ctype_newlib = \"yes\"; then\n-      ctype_include_dir=\"config/os/newlib\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- DJGPP\n-    dnl FIXME: this test won't work if __dj_ENFORCE_FUNCTION_CALLS\n-    dnl is defined.\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for DJGPP])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return __dj_ctype_flags[0] + __dj_ctype_flags[1];}], \\\n-    ctype_djgpp=yes, ctype_djgpp=no)\n-    AC_MSG_RESULT($ctype_djgpp)\n-    if test $ctype_djgpp = \"yes\"; then\n-      ctype_include_dir=\"config/os/djgpp\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    if test $ctype_default = \"yes\"; then\n-      ctype_include_dir=\"config/os/generic\"\n-      AC_MSG_WARN(\"Using default ctype headers.\")\n-    fi\n-  ])\n-])\n-\n-\n dnl\n dnl Check to see if this target can enable the wchar_t parts of libstdc++.\n dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n@@ -1299,19 +1239,6 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n ])\n \n \n-dnl Enable atomic locking\n-dnl GLIBCPP_ENABLE_ATOMICITY\n-AC_DEFUN(GLIBCPP_ENABLE_ATOMICITY, [\n-    AC_MSG_CHECKING([for atomicity.h])\n-    # We have ATOMICITY already from GLIBCPP_CONFIGURE\n-    if test \"$ATOMICITYH\" = \"config/cpu/generic\"; then\n-      AC_MSG_WARN([No ATOMICITY settings found, using generic atomic ops.])\n-    fi\n-    AC_MSG_RESULT($ATOMICITYH/bits/atomicity.h)\n-    AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, include/bits/atomicity.h)\n-])\n-\n-\n dnl\n dnl Check for template specializations for the 'long long' type extension.\n dnl"}, {"sha": "5de8abd12c1a7eec73619c50430ba5ee6482192f", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=3637cfac0212232816ca5987bcd75be9f4174c89", "patch": "@@ -799,66 +799,6 @@ AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n ])\n \n \n-dnl\n-dnl Check to see what the underlying c library's interface to ctype looks\n-dnl like. Bits of locale rely on things like isspace, toupper, etc. This\n-dnl stuff makes sure the right bits from the clibrary get called.\n-dnl \n-dnl Depending on what is found, select various configure/*/bits/ctype_base.h \n-dnl Depending on what is found, select various configure/*/ctype.cc\n-dnl\n-dnl GLIBCPP_CHECK_CTYPE_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n-  AC_CHECK_HEADER(ctype.h, [\n-    \n-    dnl If doesn't match any specified, go with defaults.\n-    if test x$ctype_include_dir != x; then\n-      ctype_default=no\n-    else\n-      ctype_default=yes\n-    fi\n-\n-    dnl Test for <ctype> functionality -- newlib\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for newlib])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _U + _L + _N + _S + _P + _C + _X + _B \\\n-        + _ctype_[a];}], \\\n-    ctype_newlib=yes, ctype_newlib=no)\n-    AC_MSG_RESULT($ctype_newlib)\n-    if test $ctype_newlib = \"yes\"; then\n-      ctype_include_dir=\"config/os/newlib\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- DJGPP\n-    dnl FIXME: this test won't work if __dj_ENFORCE_FUNCTION_CALLS\n-    dnl is defined.\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for DJGPP])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return __dj_ctype_flags[0] + __dj_ctype_flags[1];}], \\\n-    ctype_djgpp=yes, ctype_djgpp=no)\n-    AC_MSG_RESULT($ctype_djgpp)\n-    if test $ctype_djgpp = \"yes\"; then\n-      ctype_include_dir=\"config/os/djgpp\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    if test $ctype_default = \"yes\"; then\n-      ctype_include_dir=\"config/os/generic\"\n-      AC_MSG_WARN(\"Using default ctype headers.\")\n-    fi\n-  ])\n-])\n-\n-\n dnl\n dnl Check to see if this target can enable the wchar_t parts of libstdc++.\n dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n@@ -1311,19 +1251,6 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n ])\n \n \n-dnl Enable atomic locking\n-dnl GLIBCPP_ENABLE_ATOMICITY\n-AC_DEFUN(GLIBCPP_ENABLE_ATOMICITY, [\n-    AC_MSG_CHECKING([for atomicity.h])\n-    # We have ATOMICITY already from GLIBCPP_CONFIGURE\n-    if test \"$ATOMICITYH\" = \"config/cpu/generic\"; then\n-      AC_MSG_WARN([No ATOMICITY settings found, using generic atomic ops.])\n-    fi\n-    AC_MSG_RESULT($ATOMICITYH/bits/atomicity.h)\n-    AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, include/bits/atomicity.h)\n-])\n-\n-\n dnl\n dnl Check for template specializations for the 'long long' type extension.\n dnl"}, {"sha": "91a2a6abf8f9376b25f41bcb885c2ca902364471", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 713, "deletions": 834, "changes": 1547, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3637cfac0212232816ca5987bcd75be9f4174c89"}, {"sha": "9a0b3b7fdf91a9bcb316f93e543236e288a92d5a", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=3637cfac0212232816ca5987bcd75be9f4174c89", "patch": "@@ -39,7 +39,6 @@ GLIBCPP_ENABLE_C_MBCHAR([yes])\n GLIBCPP_ENABLE_LONG_LONG([no])\n GLIBCPP_ENABLE_CHEADERS([c_std])\n GLIBCPP_ENABLE_THREADS\n-GLIBCPP_ENABLE_ATOMICITY\n GLIBCPP_ENABLE_CXX_FLAGS([none])\n \n if test -n \"$with_cross_host\"; then\n@@ -144,8 +143,7 @@ if test -n \"$with_cross_host\"; then\n \tGLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n \tGLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n \tGLIBCPP_CHECK_WCHAR_T_SUPPORT\n-\t# GLIBCPP_CHECK_CTYPE_SUPPORT\n-\tctype_include_dir=\"config/os/gnu-linux\"\n+\tos_include_dir=\"config/os/gnu-linux\"\n \t# GLIBCPP_CHECK_STDLIB_SUPPORT\n \tAC_DEFINE(HAVE_STRTOF)        \n \tAC_DEFINE(HAVE_STRTOLD)        \n@@ -161,7 +159,6 @@ if test -n \"$with_cross_host\"; then\n \tAC_DEFINE(HAVE_ISINF)\n \tAC_DEFINE(HAVE_ISINFF)\n \n-\tctype_include_dir=\"config/os/newlib\"\n \tos_include_dir=\"config/os/newlib\"\n \n \tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n@@ -190,19 +187,19 @@ else\n   GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n   GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n   GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-  GLIBCPP_CHECK_CTYPE_SUPPORT\n   GLIBCPP_CHECK_STDLIB_SUPPORT\n \n   AC_FUNC_MMAP\n fi\n \n # Now that ctype is determined for all possible targets, we can do this...\n-AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \\\n+AC_LINK_FILES($os_include_dir/bits/ctype_base.h, \\\n include/bits/ctype_base.h)\n-AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n+AC_LINK_FILES($os_include_dir/bits/ctype_inline.h, \\\n include/bits/ctype_inline.h)\n-AC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n+AC_LINK_FILES($os_include_dir/bits/ctype_noninline.h, \\\n include/bits/ctype_noninline.h)\n+AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, include/bits/atomicity.h)\n \n AM_CONDITIONAL(NULL_TARGET, test \"$NULL_TARGET\" = yes)\n AM_CONDITIONAL(NATIVE, test \"$NATIVE\" = yes || test \"$NULL_TARGET\" = yes)"}, {"sha": "506cbf25101d1e45d57438cccf6948544bb45c73", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3637cfac0212232816ca5987bcd75be9f4174c89/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=3637cfac0212232816ca5987bcd75be9f4174c89", "patch": "@@ -20,7 +20,6 @@\n #   glibcpp_cxxflags       Special CXXFLAGS to use when building\n #   cpu_include_dir        CPU-specific include directory, relative to srcdir\n #   os_include_dir         OS-specific include directory, relative to srcdir\n-#   ctype_include_dir      Platform-specific (usually OS) ctype include dir\n # The first two are set in configure.host and modified here.\n \n \n@@ -78,15 +77,12 @@ case \"${target_os}\" in\n         enable_threads='no'\n         ;;\n     esac\n-    ctype_include_dir=${os_include_dir}\n     ;;\n   aix*)\n     os_include_dir=\"config/os/aix\"\n-    ctype_include_dir=${os_include_dir}\n     ;;\n   bsd* | freebsd* )\n     os_include_dir=\"config/os/bsd/freebsd\"\n-    ctype_include_dir=${os_include_dir}\n     ;;\n   cygwin*)\n     os_include_dir=\"config/os/newlib\"\n@@ -96,27 +92,21 @@ case \"${target_os}\" in\n     ;;\n   linux* | gnu*)\n     os_include_dir=\"config/os/gnu-linux\"\n-    ctype_include_dir=${os_include_dir}\n     ;;\n   irix*)\n     os_include_dir=\"config/os/irix\"\n-    ctype_include_dir=${os_include_dir}\n     ;;\n   netbsd*)\n     os_include_dir=\"config/os/bsd/netbsd\"\n-    ctype_include_dir=${os_include_dir}\n     ;;\n   solaris2.5*)\n     os_include_dir=\"config/os/solaris/solaris2.5\"\n-    ctype_include_dir=${os_include_dir}\n     ;;\n   solaris2.6*)\n     os_include_dir=\"config/os/solaris/solaris2.6\"\n-    ctype_include_dir=${os_include_dir}\n     ;;\n   solaris2.7* | solaris2.8*)\n     os_include_dir=\"config/os/solaris/solaris2.7\"\n-    ctype_include_dir=${os_include_dir}\n     ;;\n   hpux)\n     os_include_dir=\"config/os/hpux\"\n@@ -141,7 +131,7 @@ case \"${target}\" in\n      ATOMICITYH=$cpu_include_dir\n      ;;\n esac\n-\n+    \n \n # Okay, folks, show's over.  Move along, move along.\n "}]}