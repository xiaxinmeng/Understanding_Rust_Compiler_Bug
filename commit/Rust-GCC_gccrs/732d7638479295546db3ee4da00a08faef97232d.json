{"sha": "732d7638479295546db3ee4da00a08faef97232d", "node_id": "C_kwDOANBUbNoAKDczMmQ3NjM4NDc5Mjk1NTQ2ZGIzZWU0ZGEwMGEwOGZhZWY5NzIzMmQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-12T00:17:02Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-12T00:17:02Z"}, "message": "Daily bump.", "tree": {"sha": "52cec3bbc86099ed05115480ebc6f7e00adb9d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52cec3bbc86099ed05115480ebc6f7e00adb9d95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/732d7638479295546db3ee4da00a08faef97232d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732d7638479295546db3ee4da00a08faef97232d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/732d7638479295546db3ee4da00a08faef97232d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732d7638479295546db3ee4da00a08faef97232d/comments", "author": null, "committer": null, "parents": [{"sha": "30cce6f65a77b8eaa22f3efff7f1ba54858106f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30cce6f65a77b8eaa22f3efff7f1ba54858106f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30cce6f65a77b8eaa22f3efff7f1ba54858106f9"}], "stats": {"total": 509, "additions": 508, "deletions": 1}, "files": [{"sha": "b0890821660a541bf7ab7557d386f295cf442594", "filename": "gcc/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732d7638479295546db3ee4da00a08faef97232d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732d7638479295546db3ee4da00a08faef97232d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=732d7638479295546db3ee4da00a08faef97232d", "patch": "@@ -1,3 +1,118 @@\n+2021-10-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.h (struct modref_access_node): Revert\n+\taccidental change.\n+\t(struct modref_ref_node): Likewise.\n+\n+2021-10-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.h (modref_tree::global_access_p): New member\n+\tfunction.\n+\t* ipa-modref.c:\n+\t(implicint_const_eaf_flags,implicit_pure_eaf_flags,\n+\tignore_stores_eaf_flags): Move to ipa-modref.h\n+\t(remove_useless_eaf_flags): Remove early exit on NOCLOBBER.\n+\t(modref_summary::global_memory_read_p): New member function.\n+\t(modref_summary::global_memory_written_p): New member function.\n+\t* ipa-modref.h (modref_summary::global_memory_read_p,\n+\tmodref_summary::global_memory_written_p): Declare.\n+\t(implicint_const_eaf_flags,implicit_pure_eaf_flags,\n+\tignore_stores_eaf_flags): move here.\n+\t* tree-ssa-structalias.c: Include ipa-modref-tree.h, ipa-modref.h\n+\tand attr-fnspec.h.\n+\t(handle_rhs_call): Rewrite.\n+\t(handle_call_arg): New function.\n+\t(determine_global_memory_access): New function.\n+\t(handle_const_call): Remove\n+\t(handle_pure_call): Remove\n+\t(find_func_aliases_for_call): Update use of handle_rhs_call.\n+\t(compute_points_to_sets): Handle global memory acccesses\n+\tselectively\n+\n+2021-10-11  Diane Meirowitz  <diane.meirowitz@oracle.com>\n+\n+\t* doc/invoke.texi: Add link to UndefinedBehaviorSanitizer\n+\tdocumentation, mention UBSAN_OPTIONS, similar to what is done\n+\tfor AddressSanitizer.\n+\n+2021-10-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102683\n+\t* internal-fn.c (expand_DEFERRED_INIT): Check for mode\n+\tavailability before building an integer type for storage\n+\tpurposes.\n+\n+2021-10-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101480\n+\t* gimple.c (gimple_call_fnspec): Do not mark operator new/delete\n+\tas const.\n+\n+2021-10-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Remove Init(2) for some options.\n+\t* toplev.c (process_options): Do not use AUTODETECT_VALUE, but\n+\tuse rather OPTION_SET_P.\n+\n+2021-10-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Remove usage of IRA_REGION_AUTODETECT.\n+\t* flag-types.h (enum ira_region): Likewise.\n+\t* toplev.c (process_options): Use OPTION_SET_P instead of\n+\tIRA_REGION_AUTODETECT.\n+\n+2021-10-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-low.c (omp_runtime_api_call): Handle omp_get_max_teams,\n+\tomp_[sg]et_teams_thread_limit and omp_set_num_teams.\n+\n+2021-10-11  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_rawmemchr): Add prototype.\n+\t* config/s390/s390.c (s390_rawmemchr): New function.\n+\t* config/s390/s390.md (rawmemchr<SINT:mode>): New expander.\n+\t* config/s390/vector.md (@vec_vfees<mode>): Basically a copy of\n+\tthe pattern vfees<mode> from vx-builtins.md.\n+\t* config/s390/vx-builtins.md (*vfees<mode>): Remove.\n+\n+2021-10-11  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* builtins.c (get_memory_rtx): Change to external linkage.\n+\t* builtins.h (get_memory_rtx): Add function prototype.\n+\t* doc/md.texi (rawmemchr<mode>): Document.\n+\t* internal-fn.c (expand_RAWMEMCHR): Define.\n+\t* internal-fn.def (RAWMEMCHR): Add.\n+\t* optabs.def (rawmemchr_optab): Add.\n+\t* tree-loop-distribution.c (find_single_drs): Change return code\n+\tbehaviour by also returning true if no single store was found\n+\tbut a single load.\n+\t(loop_distribution::classify_partition): Respect the new return\n+\tcode behaviour of function find_single_drs.\n+\t(loop_distribution::execute): Call new function\n+\ttransform_reduction_loop in order to replace rawmemchr or strlen\n+\tlike loops by calls into builtins.\n+\t(generate_reduction_builtin_1): New function.\n+\t(generate_rawmemchr_builtin): New function.\n+\t(generate_strlen_builtin_1): New function.\n+\t(generate_strlen_builtin): New function.\n+\t(generate_strlen_builtin_using_rawmemchr): New function.\n+\t(reduction_var_overflows_first): New function.\n+\t(determine_reduction_stmt_1): New function.\n+\t(determine_reduction_stmt): New function.\n+\t(loop_distribution::transform_reduction_loop): New function.\n+\n+2021-10-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree.c (cl_option_hasher::hash): Use cl_optimization_hash\n+\tand remove legacy hashing code.\n+\n+2021-10-11  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/100316\n+\t* builtins.c (maybe_emit_call_builtin___clear_cache): Allow\n+\tCONST_INT for BEGIN and END, and use gcc_assert rather than\n+\terror.\n+\n 2021-10-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/102441"}, {"sha": "ec9b4b5ab32fe3348e48acdedfabdbaa0bc721af", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732d7638479295546db3ee4da00a08faef97232d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732d7638479295546db3ee4da00a08faef97232d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=732d7638479295546db3ee4da00a08faef97232d", "patch": "@@ -1 +1 @@\n-20211011\n+20211012"}, {"sha": "421b9b4d9d6a7734aecc3e6a591e06d41e60cc74", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 273, "deletions": 0, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732d7638479295546db3ee4da00a08faef97232d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732d7638479295546db3ee4da00a08faef97232d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=732d7638479295546db3ee4da00a08faef97232d", "patch": "@@ -1,3 +1,276 @@\n+2021-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (resolve_atomic_size): Declare.\n+\t(list_third): New inline function.\n+\t* gcc-interface/decl.c (type_for_atomic_builtin_p): New function.\n+\t(resolve_atomic_builtin): Likewise.\n+\t(gnat_to_gnu_subprog_type): Perform type resolution for most of\n+\ttype-generic GCC atomic builtins and give an error for the rest.\n+\t* gcc-interface/utils2.c (resolve_atomic_size): Make public.\n+\n+2021-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Pop_Constraint_Error_Label>:\n+\tGiven the warning only if No_Exception_Propagation is active.\n+\t<N_Pop_Storage_Error_Label>: Likewise.\n+\t<N_Pop_Program_Error_Label>: Likewise.\n+\n+2021-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (promote_object_alignment): Add GNU_SIZE\n+\tparameter and use it for the size of the object if not null.\n+\t(gnat_to_gnu_entity) <E_Variable>: Perform the automatic alignment\n+\tpromotion for objects whose nominal subtype is of variable size.\n+\t(gnat_to_gnu_field): Adjust call to promote_object_alignment.\n+\n+2021-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_param): Strip padding types\n+\tonly if the size does not change in the process.  Rename local\n+\tvariable and add bypass for initialization procedures.\n+\n+2021-10-11  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/s-thread.ads: Fix comments.  Remove unused package\n+\timports.\n+\t(Thread_Body_Exception_Exit): Remove Exception_Occurrence\n+\tparameter.\n+\t(ATSD): Declare type locally.\n+\t* libgnat/s-thread__ae653.adb: Fix comments.  Remove unused\n+\tpackage imports.  Remove package references to Stack_Limit\n+\tchecking.\n+\t(Install_Handler): Remove.\n+\t(Set_Sec_Stack): Likewise.\n+\t(Thread_Body_Enter): Remove calls to Install_Handler and\n+\tStack_Limit checking.\n+\t(Thread_Body_Exception_Exit): Remove Exception_Occurrence\n+\tparameter.\n+\t(Init_RTS): Call local Get_Sec_Stack.  Remove call to\n+\tInstall_Handler.  Remove references to accessors for\n+\tGet_Sec_Stack and Set_Sec_Stack.  Remove OS check.\n+\t(Set_Sec_Stack): Remove.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Predefined_Primitive_Specs,\n+\tPredefined_Primitive_Bodies): Remove guard with restriction\n+\tNo_Dispatching_Calls.\n+\n+2021-10-11  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): Permit an\n+\tattribute reference inside a compiler-generated _Postconditions\n+\tprocedure. In this case, Subp_Decl is assigned the declaration\n+\tof the enclosing subprogram.\n+\t* exp_util.adb (Insert_Actions): When climbing up the tree\n+\tlooking for an insertion point, do not climb past an\n+\tN_Iterated_Component/Element_Association, since this could\n+\tresult in inserting a reference to a loop parameter at a\n+\tlocation outside of the scope of that loop parameter. On the\n+\tother hand, be careful to preserve existing behavior in the case\n+\tof an N_Component_Association node.\n+\n+2021-10-11  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch6.adb (Can_Fold_Predicate_Call): Do not attempt folding\n+\tif there is more than one predicate involved. Recall that\n+\tpredicate aspect specification are additive, not overriding, and\n+\tthat there are three different predicate\n+\taspects (Dynamic_Predicate, Static_Predicate, and the\n+\tGNAT-defined Predicate aspect). These various ways of\n+\tintroducing multiple predicates are all checked for.  A new\n+\tnested function, Augments_Other_Dynamic_Predicate, is\n+\tintroduced.\n+\t* sem_ch4.adb\n+\t(Analyze_Indexed_Component_Form.Process_Function_Call): When\n+\tdetermining whether a name like \"X (Some_Discrete_Type)\" might\n+\tbe interpreted as a slice, the answer should be \"no\" if the\n+\ttype/subtype name denotes the current instance of type/subtype.\n+\n+2021-10-11  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnarl/s-osinte__rtems.ads: Change sigset_t to an unsigned\n+\tlong.\n+\n+2021-10-11  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnat/s-parame__rtems.adb: use\n+\t_POSIX_Threads_Minimum_stack_size instead of\n+\tada_pthread_minimum_stack_size.\n+\n+2021-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (No_Exception_Propagation_Active): Declare.\n+\t* restrict.ads (No_Exception_Propagation_Active): Add WARNING line.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Validate_Unchecked_Conversion): Simplify code\n+\tfor detecting conversions with Ada.Calendar.Time type and extend\n+\tit to similar types in the Ada.Real_Time package.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch10.adb, sem_prag.adb, sem_util.adb: Use\n+\tN_Generic_Declaration in membership tests.\n+\n+2021-10-11  Etienne Servais  <servais@adacore.com>\n+\n+\t* ali.adb (Get_Name): Ignore_Spaces is always False.\n+\t* bindo-graphs.adb (Set_Is_Existing_Source_Target_Relation): Val\n+\tis always True.\n+\t* cstand.adb (New_Standard_Entity): New_Node_Kind is always\n+\tN_Defininig_Identifier.\n+\t* exp_ch3.adb (Predef_Stream_Attr_Spec): For_Body is always\n+\tFalse.\n+\t* exp_dist.adb (Add_Parameter_To_NVList): RACW_Ctrl is always\n+\tFalse.\n+\t* gnatls.adb (Add_Directories): Prepend is always False.\n+\t* sem_ch10.adb, sem_ch10.ads (Load_Needed_Body): Do_Analyze is\n+\talways True.\n+\t* sem_ch3.adb, sem_ch3.ads (Process_Range_Expr_In_Decl):\n+\tR_Check_Off is always False.\n+\t* sem_elab.adb: (Info_Variable_Reference): Info_Msg is always\n+\tFalse, In_SPARK is always True.\n+\t(Set_Is_Traversed_Body, Set_Is_Saved_Construct,\n+\tSet_Is_Saved_Relation): Val is always True.\n+\t* treepr.adb (Visit_Descendant): No_Indent is always False.\n+\t(Print_Node): Fmt does not need such a big scope.\n+\n+2021-10-11  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Membership_Op): Finds interpretation for\n+\tthe case of a membership test with a singleton value in case of\n+\toverloading.\n+\n+2021-10-11  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* Makefile.rtl (VxWorks): Rename s-inmaop__vxworks.adb to\n+\ts-inmaop__hwint.adb.\n+\t(RTEMS): Use s-inmaop__hwint.adb, s-intman__rtems.adb/s,\n+\ts-taprop__rtems.adb.\n+\t* libgnarl/a-intnam__rtems.ads: Remove signals definitions and\n+\treplace with Hardware_Interrupts.\n+\t* libgnarl/s-inmaop__vxworks.adb: Rename as...\n+\t* libgnarl/s-inmaop__hwint.adb: ... this.\n+\t* libgnarl/s-interr__hwint.adb: Remove unnecessary comments.\n+\t* libgnarl/s-intman__rtems.ads, libgnarl/s-intman__rtems.adb:\n+\tNew files.\n+\t* libgnarl/s-osinte__rtems.adb: Add RTEMS API bindings.\n+\t(Binary_Semaphore_Create, Binary_Semaphore_Delete,\n+\tBinary_Semaphore_Obtain, Binary_Semaphore_Release,\n+\tBinary_Semaphore_Flush, Interrupt_Connect,\n+\tInterrupt_Number_To_Vector): New functions.\n+\t* libgnarl/s-osinte__rtems.ads (Num_HW_Interrupts, Signal):\n+\tRemoved.\n+\t(NSIG, Interrupt_Range): New.\n+\t(Binary_Semaphore_Create, Binary_Semaphore_Delete,\n+\tBinary_Semaphore_Obtain, Binary_Semaphore_Release,\n+\tBinary_Semaphore_Flush, Interrupt_Connect,\n+\tInterrupt_Number_To_Vector): Remove Import pragma.\n+\t* libgnarl/s-taprop__rtems.adb: New file.\n+\n+2021-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_fixd.adb (Get_Size_For_Value): New function returning a size\n+\tsuitable for a non-negative integer value.\n+\t(Get_Type_For_Size): New function returning a standard type suitable\n+\tfor a size.\n+\t(Build_Divide): Call both functions to compute the result type, but\n+\tmake sure to pass a non-negative value to the first.\n+\t(Build_Multiply): Likewise.\n+\t(Do_Multiply_Fixed_Universal): Minor consistency tweak.\n+\t(Integer_Literal): Call both functions to compute the type.\n+\n+2021-10-11  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Membership_Op): Reorder subprogram spec\n+\tand bodies in alphabetical order.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Build_Class_Wide_Expression): Replace entities\n+\tof both simple and extended names.\n+\n+2021-10-11  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* libgnarl/s-intman__android.adb, libgnarl/s-intman__lynxos.adb,\n+\tlibgnarl/s-intman__posix.adb, libgnarl/s-intman__qnx.adb,\n+\tlibgnarl/s-intman__solaris.adb, libgnarl/s-intman__susv3.adb,\n+\tlibgnarl/s-taprob.adb, libgnarl/s-taprop__hpux-dce.adb,\n+\tlibgnarl/s-taprop__linux.adb, libgnarl/s-taprop__mingw.adb,\n+\tlibgnarl/s-taprop__posix.adb, libgnarl/s-taprop__qnx.adb,\n+\tlibgnarl/s-taprop__solaris.adb, libgnarl/s-taprop__vxworks.adb,\n+\tlibgnarl/s-taskin.adb, libgnarl/s-tasque.adb,\n+\tlibgnarl/s-tpoben.adb, libgnat/a-calend.adb,\n+\tlibgnat/a-excach.adb, libgnat/a-except.adb, libgnat/a-tags.adb,\n+\tlibgnat/a-textio.adb, libgnat/a-witeio.adb,\n+\tlibgnat/a-ztexio.adb, libgnat/g-binenv.adb,\n+\tlibgnat/s-parame.adb, libgnat/s-parame__vxworks.adb,\n+\tlibgnat/s-stratt.adb, libgnat/s-trasym__dwarf.adb: Mark imported\n+\tbinder globals as constant.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Initialize_Record_Component): Add assertion\n+\tabout one of the parameters, so that illegal attempts to\n+\tinitialize record components with Empty node are detected early\n+\ton.\n+\t(Build_Record_Aggr_Code): Handle boxes in aggregate component\n+\tassociations just the components with no initialization in\n+\tBuild_Record_Init_Proc.\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): For components that\n+\trequire simple initialization carry boxes from resolution to\n+\texpansion.\n+\t* sem_util.adb (Needs_Simple_Initialization): Remove redundant\n+\tparen.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Init_Statements): Simplify detection of\n+\tconcurrent record types.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Is_Delayed_Aggregate): Simplify.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Has_Default_Init_Comps): Simplify.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Component_OK_For_Backend): Remove redundant\n+\tguard.\n+\n+2021-10-11  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* Makefile.rtl (RTEMS): Add s-stchop.o to\n+\tEXTRA_GNATRTL_NONTASKING_OBJS, remove s-stchop__rtems.adb.\n+\t* libgnat/s-stchop__rtems.adb: Removed.\n+\n+2021-10-11  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* expander.adb (Expand): Skip clearing of Analyzed flag if\n+\talready set for N_Real_Literal.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Compile_Time_Constraint_Error): Simplify getting\n+\tthe type of the first formal parameter.\n+\n+2021-10-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Inside_Init_Proc): Simplify.\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Fix style.\n+\t* sem_util.adb (Compile_Time_Constraint_Error): Guard against\n+\tcalling Corresponding_Concurrent_Type with an array type entity.\n+\n+2021-10-11  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/s-parame__ae653.ads (time_t_bits): Change to\n+\tLong_Long_Integer'Size.  Add some comments to explain.\n+\n 2021-10-08  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-interface/misc.c (gnat_post_options): Use new macro"}, {"sha": "c5d402c23e2a4b7fa3ee3ed3dbc09e53367ed7c4", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732d7638479295546db3ee4da00a08faef97232d/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732d7638479295546db3ee4da00a08faef97232d/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=732d7638479295546db3ee4da00a08faef97232d", "patch": "@@ -1,3 +1,8 @@\n+2021-10-11  Eric Gallager  <egallager@gcc.gnu.org>\n+\n+\tPR objc++/56604\n+\t* Make-lang.in: Add obj-c++.srcman: line.\n+\n 2021-06-08  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* Make-lang.in (cc1objplus-checksum.c): Check previous"}, {"sha": "502af71e984c3c0f040d9046b89c27406d726ac4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732d7638479295546db3ee4da00a08faef97232d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732d7638479295546db3ee4da00a08faef97232d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=732d7638479295546db3ee4da00a08faef97232d", "patch": "@@ -1,3 +1,40 @@\n+2021-10-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/torture/ssa-pta-fn-1.c: Fix template; add noipa.\n+\t* gcc.dg/tree-ssa/pta-callused.c: Fix template.\n+\n+2021-10-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102643\n+\t* g++.dg/cpp2a/class-deduction-alias11.C: New test.\n+\n+2021-10-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101480\n+\t* g++.dg/torture/pr10148.C: New testcase.\n+\n+2021-10-11  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.target/s390/rawmemchr-1.c: New test.\n+\n+2021-10-11  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/ldist-rawmemchr-1.c: New test.\n+\t* gcc.dg/tree-ssa/ldist-rawmemchr-2.c: New test.\n+\t* gcc.dg/tree-ssa/ldist-strlen-1.c: New test.\n+\t* gcc.dg/tree-ssa/ldist-strlen-2.c: New test.\n+\t* gcc.dg/tree-ssa/ldist-strlen-3.c: New test.\n+\n+2021-10-11  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/100316\n+\t* gcc.c-torture/compile/pr100316.c: New.\n+\n+2021-10-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR middle-end/102669\n+\t* gnat.dg/unroll1.adb: Add -fno-tree-vectorize.\n+\n 2021-10-10  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/99348"}, {"sha": "10a05f6970c42fa28087d48d6c0bec898e839a17", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732d7638479295546db3ee4da00a08faef97232d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732d7638479295546db3ee4da00a08faef97232d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=732d7638479295546db3ee4da00a08faef97232d", "patch": "@@ -1,3 +1,41 @@\n+2021-10-11  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* allocator.c (omp_init_allocator): Replace omp_atv_sequential with\n+\tomp_atv_serialized.\n+\t* omp.h.in: Add deprecated flag for omp_atv_sequential.\n+\t* omp_lib.f90.in: Add deprecated flag for omp_atv_sequential.\n+\t* testsuite/libgomp.c-c++-common/alloc-10.c: New test.\n+\t* testsuite/libgomp.fortran/alloc-12.f90: New test.\n+\n+2021-10-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp.h.in (omp_set_num_teams, omp_get_max_teams,\n+\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): Declare.\n+\t* omp_lib.f90.in (omp_set_num_teams, omp_get_max_teams,\n+\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): Declare.\n+\t* omp_lib.h.in (omp_set_num_teams, omp_get_max_teams,\n+\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): Declare.\n+\t* libgomp.h (gomp_nteams_var, gomp_teams_thread_limit_var): Declare.\n+\t* libgomp.map (OMP_5.1): Export omp_get_max_teams{,_},\n+\tomp_get_teams_thread_limit{,_}, omp_set_num_teams{,_,_8_} and\n+\tomp_set_teams_thread_limit{,_,_8_}.\n+\t* icv.c (omp_set_num_teams, omp_get_max_teams,\n+\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): New\n+\tfunctions.\n+\t* env.c (gomp_nteams_var, gomp_teams_thread_limit_var): Define.\n+\t(omp_display_env): Print OMP_NUM_TEAMS and OMP_TEAMS_THREAD_LIMIT.\n+\t(initialize_env): Handle OMP_NUM_TEAMS and OMP_TEAMS_THREAD_LIMIT env\n+\tvars.\n+\t* teams.c (GOMP_teams_reg): If thread_limit is not specified, use\n+\tgomp_teams_thread_limit_var as fallback if not zero.  If num_teams\n+\tis not specified, use gomp_nteams_var.\n+\t* fortran.c (omp_set_num_teams, omp_get_max_teams,\n+\tomp_set_teams_thread_limit, omp_get_teams_thread_limit): Add\n+\tialias_redirect.\n+\t(omp_set_num_teams_, omp_set_num_teams_8_, omp_get_max_teams_,\n+\tomp_set_teams_thread_limit_, omp_set_teams_thread_limit_8_,\n+\tomp_get_teams_thread_limit_): New functions.\n+\n 2021-10-09  liuhongt  <hongtao.liu@intel.com>\n \n \t* testsuite/libgomp.c++/scan-10.C: Add option -fvect-cost-model=cheap."}, {"sha": "a7a283565e548f7c03ade306ae962cd20e01c0ff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732d7638479295546db3ee4da00a08faef97232d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732d7638479295546db3ee4da00a08faef97232d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=732d7638479295546db3ee4da00a08faef97232d", "patch": "@@ -1,3 +1,42 @@\n+2021-10-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_timed_wait.h: Remove unused header.\n+\t* include/bits/c++config (std:__terminate): Define.\n+\t* include/bits/semaphore_base.h: Remove <exception> and use\n+\t__terminate instead of terminate.\n+\t* include/bits/std_thread.h: Likewise.\n+\t* libsupc++/eh_terminate.cc (std::terminate): Use qualified-id\n+\tto call __cxxabiv1::__terminate.\n+\n+2021-10-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h (basic_regex::assign(Iter, Iter)): Avoid\n+\tstd::__to_address by using poitner directly or using base()\n+\tmember of __normal_iterator.\n+\n+2021-10-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/numeric_limits/lowest.cc: Use\n+\tnumeric_limits<T>::is_integer instead of is_integral<T>::value.\n+\n+2021-10-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/89927\n+\t* include/bits/regex.h (basic_regex(const _Ch_type*, size_t)):\n+\tAdd __glibcxx_requires_string_len assertion.\n+\t(basic_regex::assign(InputIterator, InputIterator)): Add\n+\t__glibcxx_requires_valid_range assertion.\n+\t* include/bits/regex_scanner.tcc (_Scanner::_M_advance())\n+\t(_Scanner::_M_scan_normal()): Use string literal in assertions.\n+\n+2021-10-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102667\n+\t* include/bits/regex.h (match_result::empty()): Optimize by\n+\tcalling the base function directly.\n+\t(match_results::end()): Check _Base_type::empty() not empty().\n+\t* testsuite/28_regex/match_results/102667.C: New test.\n+\n 2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/98725"}]}