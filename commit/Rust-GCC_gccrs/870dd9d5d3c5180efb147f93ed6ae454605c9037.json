{"sha": "870dd9d5d3c5180efb147f93ed6ae454605c9037", "node_id": "C_kwDOANBUbNoAKDg3MGRkOWQ1ZDNjNTE4MGVmYjE0N2Y5M2VkNmFlNDU0NjA1YzkwMzc", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-17T15:51:05Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:38Z"}, "message": "gccrs: Refactor expression hir lowering into cc file\n\ngcc/rust/ChangeLog:\n\n\t* Make-lang.in: Add new object file for expression lowering.\n\t* ast/rust-expr.h: Move implementation of expr lowering to source file.\n\t* backend/rust-compile-block.h: Likewise.\n\t* backend/rust-compile-expr.cc (CompileExpr::visit): Likewise.\n\t* backend/rust-compile-expr.h: Likewise.\n\t* checks/errors/privacy/rust-privacy-reporter.cc (PrivacyReporter::visit): Likewise.\n\t* checks/errors/privacy/rust-privacy-reporter.h: Likewise.\n\t* checks/errors/rust-const-checker.cc (ConstChecker::visit): Likewise.\n\t* checks/errors/rust-const-checker.h: Likewise.\n\t* checks/errors/rust-unsafe-checker.cc (UnsafeChecker::visit): Likewise.\n\t* checks/errors/rust-unsafe-checker.h: Likewise.\n\t* hir/rust-ast-lower-base.h: Likewise.\n\t* hir/rust-ast-lower-expr.h (RUST_AST_LOWER_EXPR): Likewise.\n\t* hir/rust-ast-lower.cc (ASTLoweringBase::lower_closure_param): Likewise.\n\t* hir/rust-hir-dump.cc (Dump::visit): Likewise.\n\t* hir/rust-hir-dump.h: Likewise.\n\t* hir/tree/rust-hir-expr.h (class ClosureExpr): Likewise.\n\t(class ClosureExprInner): Likewise.\n\t(class ClosureExprInnerTyped): Likewise.\n\t* hir/tree/rust-hir-full-decls.h (class ClosureExprInner): Likewise.\n\t(class ClosureExprInnerTyped): Likewise.\n\t* hir/tree/rust-hir-full-test.cc (ClosureExprInnerTyped::as_string): Likewise.\n\t(ClosureExprInner::as_string): Likewise.\n\t(ClosureExprInner::accept_vis): Likewise.\n\t(ClosureExpr::accept_vis): Likewise.\n\t(ClosureExprInnerTyped::accept_vis): Likewise.\n\t* hir/tree/rust-hir-visitor.h: Likewise.\n\t* hir/tree/rust-hir.h (class Expr): Likewise.\n\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Likewise.\n\t* typecheck/rust-hir-type-check-expr.h: Likewise.\n\t* hir/rust-ast-lower-expr.cc: New file.", "tree": {"sha": "de7e47f3cf7cfb997a89bb50947658ca4389c53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7e47f3cf7cfb997a89bb50947658ca4389c53c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/870dd9d5d3c5180efb147f93ed6ae454605c9037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870dd9d5d3c5180efb147f93ed6ae454605c9037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870dd9d5d3c5180efb147f93ed6ae454605c9037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870dd9d5d3c5180efb147f93ed6ae454605c9037/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed75e142a7082b2f4f0a50a39939566c53b5697b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed75e142a7082b2f4f0a50a39939566c53b5697b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed75e142a7082b2f4f0a50a39939566c53b5697b"}], "stats": {"total": 1915, "additions": 1009, "deletions": 906}, "files": [{"sha": "2f4f409f54fce4121c5dcd63cdaa23c03dfaa078", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -94,6 +94,7 @@ GRS_OBJS = \\\n     rust/rust-ast-lower-base.o \\\n     rust/rust-ast-lower-pattern.o \\\n     rust/rust-ast-lower-item.o \\\n+    rust/rust-ast-lower-expr.o \\\n     rust/rust-early-name-resolver.o \\\n     rust/rust-name-resolver.o \\\n     rust/rust-ast-resolve.o \\"}, {"sha": "c58fae5e564501c1e67c2aeaffeaa5f30f8f7bfa", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -2134,8 +2134,6 @@ struct ClosureParam\n private:\n   std::vector<Attribute> outer_attrs;\n   std::unique_ptr<Pattern> pattern;\n-\n-  // bool has_type_given;\n   std::unique_ptr<Type> type;\n   Location locus;\n \n@@ -2202,19 +2200,19 @@ struct ClosureParam\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Pattern> &get_pattern ()\n   {\n     rust_assert (pattern != nullptr);\n     return pattern;\n   }\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_type ()\n   {\n     rust_assert (has_type_given ());\n     return type;\n   }\n+\n+  Location get_locus () const { return locus; }\n };\n \n // Base closure definition expression AST node - abstract\n@@ -2248,6 +2246,8 @@ class ClosureExpr : public ExprWithoutBlock\n   {\n     outer_attrs = std::move (new_attrs);\n   }\n+\n+  bool get_has_move () const { return has_move; }\n };\n \n // Represents a non-type-specified closure expression AST node\n@@ -2307,7 +2307,6 @@ class ClosureExprInner : public ClosureExpr\n     return closure_inner == nullptr;\n   }\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Expr> &get_definition_expr ()\n   {\n     rust_assert (closure_inner != nullptr);"}, {"sha": "0ccf81f376bfc5e8c75383d17c3745eabf8c8a35", "filename": "gcc/rust/backend/rust-compile-block.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -57,8 +57,7 @@ class CompileConditionalBlocks : public HIRCompileBase,\n   // Empty visit for unused Expression HIR nodes.\n   void visit (HIR::PathInExpression &) override {}\n   void visit (HIR::QualifiedPathInExpression &) override {}\n-  void visit (HIR::ClosureExprInner &) override {}\n-  void visit (HIR::ClosureExprInnerTyped &) override {}\n+  void visit (HIR::ClosureExpr &) override {}\n   void visit (HIR::StructExprFieldIdentifier &) override {}\n   void visit (HIR::StructExprFieldIdentifierValue &) override {}\n   void visit (HIR::StructExprFieldIndexValue &) override {}\n@@ -146,8 +145,7 @@ class CompileExprWithBlock : public HIRCompileBase,\n   // Empty visit for unused Expression HIR nodes.\n   void visit (HIR::PathInExpression &) override {}\n   void visit (HIR::QualifiedPathInExpression &) override {}\n-  void visit (HIR::ClosureExprInner &) override {}\n-  void visit (HIR::ClosureExprInnerTyped &) override {}\n+  void visit (HIR::ClosureExpr &) override {}\n   void visit (HIR::StructExprFieldIdentifier &) override {}\n   void visit (HIR::StructExprFieldIdentifierValue &) override {}\n   void visit (HIR::StructExprFieldIndexValue &) override {}"}, {"sha": "724a93a68bdb0aa11d0210512f1474c6a1c705de", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -2803,5 +2803,11 @@ CompileExpr::visit (HIR::ArrayIndexExpr &expr)\n \t\t\t\t\t\t   expr.get_locus ());\n }\n \n+void\n+CompileExpr::visit (HIR::ClosureExpr &expr)\n+{\n+  gcc_unreachable ();\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "7fc3f5e7f4d2a2af0cf58503227365cb9a64ac11", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -67,10 +67,9 @@ class CompileExpr : private HIRCompileBase, protected HIR::HIRExpressionVisitor\n   void visit (HIR::RangeToExpr &expr) override;\n   void visit (HIR::RangeFullExpr &expr) override;\n   void visit (HIR::RangeFromToInclExpr &expr) override;\n+  void visit (HIR::ClosureExpr &expr) override;\n \n   // TODO\n-  void visit (HIR::ClosureExprInner &) override {}\n-  void visit (HIR::ClosureExprInnerTyped &) override {}\n   void visit (HIR::ErrorPropagationExpr &) override {}\n   void visit (HIR::RangeToInclExpr &) override {}\n   void visit (HIR::ForLoopExpr &) override {}"}, {"sha": "a126e7b4462f22c72ab785dca97379275187c636", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -426,7 +426,7 @@ PrivacyReporter::visit (HIR::FieldAccessExpr &expr)\n }\n \n void\n-PrivacyReporter::visit (HIR::ClosureExprInner &expr)\n+PrivacyReporter::visit (HIR::ClosureExpr &expr)\n {\n   // Not handled yet\n }\n@@ -442,12 +442,6 @@ PrivacyReporter::visit (HIR::BlockExpr &expr)\n     last_expr->accept_vis (*this);\n }\n \n-void\n-PrivacyReporter::visit (HIR::ClosureExprInnerTyped &expr)\n-{\n-  // Not handled yet\n-}\n-\n void\n PrivacyReporter::visit (HIR::ContinueExpr &expr)\n {}"}, {"sha": "c9307787e9e77784d4d1ac89848cbc8cd46fd93e", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -83,8 +83,7 @@ types\n \n   virtual void visit (HIR::QualifiedPathInExpression &expr);\n   virtual void visit (HIR::PathInExpression &expr);\n-  virtual void visit (HIR::ClosureExprInnerTyped &);\n-  virtual void visit (HIR::ClosureExprInner &expr);\n+  virtual void visit (HIR::ClosureExpr &expr);\n   virtual void visit (HIR::StructExprStructFields &);\n   virtual void visit (HIR::StructExprStruct &);\n   virtual void visit (HIR::LiteralExpr &expr);"}, {"sha": "01dc2620767a295a6b0f49c1a8f41588a66db1ad", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -382,7 +382,7 @@ ConstChecker::visit (FieldAccessExpr &expr)\n }\n \n void\n-ConstChecker::visit (ClosureExprInner &expr)\n+ConstChecker::visit (ClosureExpr &expr)\n {}\n \n void\n@@ -395,10 +395,6 @@ ConstChecker::visit (BlockExpr &expr)\n     expr.get_final_expr ()->accept_vis (*this);\n }\n \n-void\n-ConstChecker::visit (ClosureExprInnerTyped &expr)\n-{}\n-\n void\n ConstChecker::visit (ContinueExpr &expr)\n {}"}, {"sha": "238173874aa1296e1c3e792fbe309d917095be31", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -111,9 +111,8 @@ class ConstChecker : public HIRFullVisitor\n   virtual void visit (CallExpr &expr) override;\n   virtual void visit (MethodCallExpr &expr) override;\n   virtual void visit (FieldAccessExpr &expr) override;\n-  virtual void visit (ClosureExprInner &expr) override;\n+  virtual void visit (ClosureExpr &expr) override;\n   virtual void visit (BlockExpr &expr) override;\n-  virtual void visit (ClosureExprInnerTyped &expr) override;\n   virtual void visit (ContinueExpr &expr) override;\n   virtual void visit (BreakExpr &expr) override;\n   virtual void visit (RangeFromToExpr &expr) override;"}, {"sha": "02868794cbc93c7dd80b66976249d160e509842c", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -453,7 +453,7 @@ UnsafeChecker::visit (FieldAccessExpr &expr)\n }\n \n void\n-UnsafeChecker::visit (ClosureExprInner &expr)\n+UnsafeChecker::visit (ClosureExpr &expr)\n {}\n \n void\n@@ -466,10 +466,6 @@ UnsafeChecker::visit (BlockExpr &expr)\n     expr.get_final_expr ()->accept_vis (*this);\n }\n \n-void\n-UnsafeChecker::visit (ClosureExprInnerTyped &expr)\n-{}\n-\n void\n UnsafeChecker::visit (ContinueExpr &expr)\n {}"}, {"sha": "9df44db06a9690f1481558366fc789848a31c3e6", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -88,9 +88,8 @@ class UnsafeChecker : public HIRFullVisitor\n   virtual void visit (CallExpr &expr) override;\n   virtual void visit (MethodCallExpr &expr) override;\n   virtual void visit (FieldAccessExpr &expr) override;\n-  virtual void visit (ClosureExprInner &expr) override;\n+  virtual void visit (ClosureExpr &expr) override;\n   virtual void visit (BlockExpr &expr) override;\n-  virtual void visit (ClosureExprInnerTyped &expr) override;\n   virtual void visit (ContinueExpr &expr) override;\n   virtual void visit (BreakExpr &expr) override;\n   virtual void visit (RangeFromToExpr &expr) override;"}, {"sha": "1af44aa239f3f9edc55e3deffbb4faac6024a643", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -313,6 +313,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::Literal lower_literal (const AST::Literal &literal);\n \n   HIR::ExternBlock *lower_extern_block (AST::ExternBlock &extern_block);\n+\n+  HIR::ClosureParam lower_closure_param (AST::ClosureParam &param);\n };\n \n } // namespace HIR"}, {"sha": "df4ba9d29114136a5ef31cded675c3bc518a60c7", "filename": "gcc/rust/hir/rust-ast-lower-expr.cc", "status": "added", "additions": 810, "deletions": 0, "changes": 810, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -0,0 +1,810 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-lower-expr.h\"\n+#include \"rust-ast-lower-base.h\"\n+#include \"rust-ast-lower-block.h\"\n+#include \"rust-ast-lower-struct-field-expr.h\"\n+#include \"rust-ast-lower-pattern.h\"\n+#include \"rust-ast-lower-type.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+\n+ASTLoweringExpr::ASTLoweringExpr ()\n+  : ASTLoweringBase (), translated (nullptr), translated_array_elems (nullptr),\n+    terminated (false)\n+{}\n+\n+HIR::Expr *\n+ASTLoweringExpr::translate (AST::Expr *expr, bool *terminated)\n+{\n+  ASTLoweringExpr resolver;\n+  expr->accept_vis (resolver);\n+  if (resolver.translated == nullptr)\n+    {\n+      rust_fatal_error (expr->get_locus (), \"Failed to lower expr: [%s]\",\n+\t\t\texpr->as_string ().c_str ());\n+      return nullptr;\n+    }\n+\n+  resolver.mappings->insert_hir_expr (resolver.translated);\n+  resolver.mappings->insert_location (\n+    resolver.translated->get_mappings ().get_hirid (), expr->get_locus ());\n+\n+  if (terminated != nullptr)\n+    *terminated = resolver.terminated;\n+\n+  return resolver.translated;\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::TupleIndexExpr &expr)\n+{\n+  HIR::Expr *tuple_expr\n+    = ASTLoweringExpr::translate (expr.get_tuple_expr ().get (), &terminated);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::TupleIndexExpr (mapping, std::unique_ptr<HIR::Expr> (tuple_expr),\n+\t\t\t       expr.get_tuple_index (), expr.get_outer_attrs (),\n+\t\t\t       expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::TupleExpr &expr)\n+{\n+  std::vector<std::unique_ptr<HIR::Expr> > tuple_elements;\n+  for (auto &e : expr.get_tuple_elems ())\n+    {\n+      HIR::Expr *t = ASTLoweringExpr::translate (e.get ());\n+      tuple_elements.push_back (std::unique_ptr<HIR::Expr> (t));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::TupleExpr (std::move (mapping), std::move (tuple_elements),\n+\t\t\t  expr.get_inner_attrs (), expr.get_outer_attrs (),\n+\t\t\t  expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::IfExpr &expr)\n+{\n+  translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::IfExprConseqElse &expr)\n+{\n+  translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::IfExprConseqIf &expr)\n+{\n+  translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::BlockExpr &expr)\n+{\n+  translated = ASTLoweringBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::UnsafeBlockExpr &expr)\n+{\n+  translated = ASTLoweringBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::PathInExpression &expr)\n+{\n+  translated = ASTLowerPathInExpression::translate (&expr);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::QualifiedPathInExpression &expr)\n+{\n+  translated = ASTLowerQualPathInExpression::translate (&expr);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ReturnExpr &expr)\n+{\n+  terminated = true;\n+  HIR::Expr *return_expr\n+    = expr.has_returned_expr ()\n+\t? ASTLoweringExpr::translate (expr.get_returned_expr ().get ())\n+\t: nullptr;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::ReturnExpr (mapping, expr.get_locus (),\n+\t\t\t\t    std::unique_ptr<HIR::Expr> (return_expr));\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::CallExpr &expr)\n+{\n+  HIR::Expr *func\n+    = ASTLoweringExpr::translate (expr.get_function_expr ().get ());\n+\n+  auto const &in_params = expr.get_params ();\n+  std::vector<std::unique_ptr<HIR::Expr> > params;\n+  for (auto &param : in_params)\n+    {\n+      auto trans = ASTLoweringExpr::translate (param.get ());\n+      params.push_back (std::unique_ptr<HIR::Expr> (trans));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (\n+    crate_num, UNKNOWN_NODEID /* this can map back to the AST*/,\n+    mappings->get_next_hir_id (crate_num), UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::CallExpr (mapping, std::unique_ptr<HIR::Expr> (func),\n+\t\t\t\t  std::move (params), expr.get_outer_attrs (),\n+\t\t\t\t  expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::MethodCallExpr &expr)\n+{\n+  HIR::PathExprSegment method_path\n+    = lower_path_expr_seg (expr.get_method_name ());\n+\n+  HIR::Expr *receiver\n+    = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n+\n+  auto const &in_params = expr.get_params ();\n+  std::vector<std::unique_ptr<HIR::Expr> > params;\n+  for (auto &param : in_params)\n+    {\n+      auto trans = ASTLoweringExpr::translate (param.get ());\n+      params.push_back (std::unique_ptr<HIR::Expr> (trans));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::MethodCallExpr (mapping, std::unique_ptr<HIR::Expr> (receiver),\n+\t\t\t       method_path, std::move (params),\n+\t\t\t       expr.get_outer_attrs (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::AssignmentExpr &expr)\n+{\n+  HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::AssignmentExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n+\t\t\t       std::unique_ptr<HIR::Expr> (rhs),\n+\t\t\t       expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::IdentifierExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping1 (crate_num, expr.get_node_id (),\n+\t\t\t\t  mappings->get_next_hir_id (crate_num),\n+\t\t\t\t  UNKNOWN_LOCAL_DEFID);\n+  Analysis::NodeMapping mapping2 (mapping1);\n+\n+  HIR::PathIdentSegment ident_seg (expr.get_ident ());\n+  HIR::PathExprSegment seg (mapping1, ident_seg, expr.get_locus (),\n+\t\t\t    HIR::GenericArgs::create_empty ());\n+  translated = new HIR::PathInExpression (mapping2, {seg}, expr.get_locus (),\n+\t\t\t\t\t  false, expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArrayExpr &expr)\n+{\n+  expr.get_array_elems ()->accept_vis (*this);\n+  rust_assert (translated_array_elems != nullptr);\n+  HIR::ArrayElems *elems = translated_array_elems;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::ArrayExpr (mapping, std::unique_ptr<HIR::ArrayElems> (elems),\n+\t\t\t  expr.get_inner_attrs (), expr.get_outer_attrs (),\n+\t\t\t  expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArrayIndexExpr &expr)\n+{\n+  HIR::Expr *array_expr\n+    = ASTLoweringExpr::translate (expr.get_array_expr ().get ());\n+  HIR::Expr *array_index_expr\n+    = ASTLoweringExpr::translate (expr.get_index_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::ArrayIndexExpr (mapping, std::unique_ptr<HIR::Expr> (array_expr),\n+\t\t\t       std::unique_ptr<HIR::Expr> (array_index_expr),\n+\t\t\t       expr.get_outer_attrs (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArrayElemsValues &elems)\n+{\n+  std::vector<std::unique_ptr<HIR::Expr> > elements;\n+  for (auto &elem : elems.get_values ())\n+    {\n+      HIR::Expr *translated_elem = ASTLoweringExpr::translate (elem.get ());\n+      elements.push_back (std::unique_ptr<HIR::Expr> (translated_elem));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (mappings->get_current_crate (),\n+\t\t\t\t elems.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated_array_elems\n+    = new HIR::ArrayElemsValues (mapping, std::move (elements));\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArrayElemsCopied &elems)\n+{\n+  HIR::Expr *element\n+    = ASTLoweringExpr::translate (elems.get_elem_to_copy ().get ());\n+  HIR::Expr *num_copies\n+    = ASTLoweringExpr::translate (elems.get_num_copies ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (mappings->get_current_crate (),\n+\t\t\t\t elems.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated_array_elems\n+    = new HIR::ArrayElemsCopied (mapping, std::unique_ptr<HIR::Expr> (element),\n+\t\t\t\t std::unique_ptr<HIR::Expr> (num_copies));\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::LiteralExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Literal l = lower_literal (expr.get_literal ());\n+  translated = new HIR::LiteralExpr (mapping, std::move (l), expr.get_locus (),\n+\t\t\t\t     expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArithmeticOrLogicalExpr &expr)\n+{\n+  HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  rust_assert (lhs != nullptr);\n+  HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+  rust_assert (rhs != nullptr);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::ArithmeticOrLogicalExpr (\n+    mapping, std::unique_ptr<HIR::Expr> (lhs), std::unique_ptr<HIR::Expr> (rhs),\n+    expr.get_expr_type (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ComparisonExpr &expr)\n+{\n+  HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  rust_assert (lhs != nullptr);\n+  HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+  rust_assert (rhs != nullptr);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::ComparisonExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n+\t\t\t       std::unique_ptr<HIR::Expr> (rhs),\n+\t\t\t       expr.get_expr_type (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::LazyBooleanExpr &expr)\n+{\n+  HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  rust_assert (lhs != nullptr);\n+  HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+  rust_assert (rhs != nullptr);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::LazyBooleanExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (rhs),\n+\t\t\t\texpr.get_expr_type (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::NegationExpr &expr)\n+{\n+  HIR::Expr *negated_value\n+    = ASTLoweringExpr::translate (expr.get_negated_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+  translated\n+    = new HIR::NegationExpr (mapping,\n+\t\t\t     std::unique_ptr<HIR::Expr> (negated_value),\n+\t\t\t     expr.get_expr_type (), expr.get_outer_attrs (),\n+\t\t\t     expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::TypeCastExpr &expr)\n+{\n+  HIR::Expr *expr_to_cast_to\n+    = ASTLoweringExpr::translate (expr.get_casted_expr ().get ());\n+  HIR::Type *type_to_cast_to\n+    = lower_type_no_bounds (expr.get_type_to_cast_to ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::TypeCastExpr (mapping,\n+\t\t\t     std::unique_ptr<HIR::Expr> (expr_to_cast_to),\n+\t\t\t     std::unique_ptr<HIR::Type> (type_to_cast_to),\n+\t\t\t     expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::CompoundAssignmentExpr &expr)\n+{\n+  ArithmeticOrLogicalOperator op;\n+  switch (expr.get_expr_type ())\n+    {\n+    case CompoundAssignmentOperator::ADD:\n+      op = ArithmeticOrLogicalOperator::ADD;\n+      break;\n+    case CompoundAssignmentOperator::SUBTRACT:\n+      op = ArithmeticOrLogicalOperator::SUBTRACT;\n+      break;\n+    case CompoundAssignmentOperator::MULTIPLY:\n+      op = ArithmeticOrLogicalOperator::MULTIPLY;\n+      break;\n+    case CompoundAssignmentOperator::DIVIDE:\n+      op = ArithmeticOrLogicalOperator::DIVIDE;\n+      break;\n+    case CompoundAssignmentOperator::MODULUS:\n+      op = ArithmeticOrLogicalOperator::MODULUS;\n+      break;\n+    case CompoundAssignmentOperator::BITWISE_AND:\n+      op = ArithmeticOrLogicalOperator::BITWISE_AND;\n+      break;\n+    case CompoundAssignmentOperator::BITWISE_OR:\n+      op = ArithmeticOrLogicalOperator::BITWISE_OR;\n+      break;\n+    case CompoundAssignmentOperator::BITWISE_XOR:\n+      op = ArithmeticOrLogicalOperator::BITWISE_XOR;\n+      break;\n+    case CompoundAssignmentOperator::LEFT_SHIFT:\n+      op = ArithmeticOrLogicalOperator::LEFT_SHIFT;\n+      break;\n+    case CompoundAssignmentOperator::RIGHT_SHIFT:\n+      op = ArithmeticOrLogicalOperator::RIGHT_SHIFT;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  HIR::Expr *asignee_expr\n+    = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  HIR::Expr *value = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::CompoundAssignmentExpr (\n+    mapping, std::unique_ptr<HIR::Expr> (asignee_expr),\n+    std::unique_ptr<HIR::Expr> (value), op, expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::StructExprStruct &struct_expr)\n+{\n+  HIR::PathInExpression *path\n+    = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n+  HIR::PathInExpression copied_path (*path);\n+  delete path;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::StructExprStruct (mapping, copied_path,\n+\t\t\t\t\t  struct_expr.get_inner_attrs (),\n+\t\t\t\t\t  struct_expr.get_outer_attrs (),\n+\t\t\t\t\t  struct_expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::StructExprStructFields &struct_expr)\n+{\n+  // bit of a hack for now\n+  HIR::PathInExpression *path\n+    = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n+  HIR::PathInExpression copied_path (*path);\n+  delete path;\n+\n+  HIR::StructBase *base = nullptr;\n+  if (struct_expr.has_struct_base ())\n+    {\n+      HIR::Expr *translated_base = ASTLoweringExpr::translate (\n+\tstruct_expr.get_struct_base ().get_base_struct ().get ());\n+      base = new HIR::StructBase (std::unique_ptr<HIR::Expr> (translated_base));\n+    }\n+\n+  auto const &in_fields = struct_expr.get_fields ();\n+  std::vector<std::unique_ptr<HIR::StructExprField> > fields;\n+  for (auto &field : in_fields)\n+    {\n+      HIR::StructExprField *translated\n+\t= ASTLowerStructExprField::translate (field.get ());\n+      fields.push_back (std::unique_ptr<HIR::StructExprField> (translated));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::StructExprStructFields (mapping, copied_path, std::move (fields),\n+\t\t\t\t       struct_expr.get_locus (), base,\n+\t\t\t\t       struct_expr.get_inner_attrs (),\n+\t\t\t\t       struct_expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::GroupedExpr &expr)\n+{\n+  HIR::Expr *paren_expr\n+    = ASTLoweringExpr::translate (expr.get_expr_in_parens ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::GroupedExpr (mapping, std::unique_ptr<HIR::Expr> (paren_expr),\n+\t\t\t    expr.get_inner_attrs (), expr.get_outer_attrs (),\n+\t\t\t    expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::FieldAccessExpr &expr)\n+{\n+  HIR::Expr *receiver\n+    = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+  translated\n+    = new HIR::FieldAccessExpr (mapping, std::unique_ptr<HIR::Expr> (receiver),\n+\t\t\t\texpr.get_field_name (), expr.get_outer_attrs (),\n+\t\t\t\texpr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::LoopExpr &expr)\n+{\n+  translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::WhileLoopExpr &expr)\n+{\n+  translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ForLoopExpr &expr)\n+{\n+  translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::BreakExpr &expr)\n+{\n+  HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n+  HIR::Expr *break_expr\n+    = expr.has_break_expr ()\n+\t? ASTLoweringExpr::translate (expr.get_break_expr ().get ())\n+\t: nullptr;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::BreakExpr (mapping, expr.get_locus (), std ::move (break_label),\n+\t\t\t  std::unique_ptr<HIR::Expr> (break_expr),\n+\t\t\t  expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ContinueExpr &expr)\n+{\n+  HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::ContinueExpr (mapping, expr.get_locus (),\n+\t\t\t     std ::move (break_label), expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::BorrowExpr &expr)\n+{\n+  HIR::Expr *borrow_lvalue\n+    = ASTLoweringExpr::translate (expr.get_borrowed_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::BorrowExpr *borrow_expr\n+    = new HIR::BorrowExpr (mapping, std::unique_ptr<HIR::Expr> (borrow_lvalue),\n+\t\t\t   expr.get_is_mut () ? Mutability::Mut\n+\t\t\t\t\t      : Mutability::Imm,\n+\t\t\t   expr.get_outer_attrs (), expr.get_locus ());\n+\n+  if (expr.get_is_double_borrow ())\n+    {\n+      NodeId artifical_bouble_borrow_id = mappings->get_next_node_id ();\n+      Analysis::NodeMapping mapping (crate_num, artifical_bouble_borrow_id,\n+\t\t\t\t     mappings->get_next_hir_id (crate_num),\n+\t\t\t\t     UNKNOWN_LOCAL_DEFID);\n+\n+      borrow_expr\n+\t= new HIR::BorrowExpr (mapping,\n+\t\t\t       std::unique_ptr<HIR::Expr> (borrow_expr),\n+\t\t\t       expr.get_is_mut () ? Mutability::Mut\n+\t\t\t\t\t\t  : Mutability::Imm,\n+\t\t\t       expr.get_outer_attrs (), expr.get_locus ());\n+    }\n+\n+  translated = borrow_expr;\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::DereferenceExpr &expr)\n+{\n+  HIR::Expr *dref_lvalue\n+    = ASTLoweringExpr::translate (expr.get_dereferenced_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::DereferenceExpr (mapping,\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (dref_lvalue),\n+\t\t\t\texpr.get_outer_attrs (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::MatchExpr &expr)\n+{\n+  translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeFromToExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Expr *range_from\n+    = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n+  HIR::Expr *range_to = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n+\n+  translated\n+    = new HIR::RangeFromToExpr (mapping,\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (range_from),\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (range_to),\n+\t\t\t\texpr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeFromExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Expr *range_from\n+    = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n+\n+  translated\n+    = new HIR::RangeFromExpr (mapping, std::unique_ptr<HIR::Expr> (range_from),\n+\t\t\t      expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeToExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Expr *range_to = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n+\n+  translated\n+    = new HIR::RangeToExpr (mapping, std::unique_ptr<HIR::Expr> (range_to),\n+\t\t\t    expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeFullExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::RangeFullExpr (mapping, expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeFromToInclExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Expr *range_from\n+    = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n+  HIR::Expr *range_to = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n+\n+  translated\n+    = new HIR::RangeFromToInclExpr (mapping,\n+\t\t\t\t    std::unique_ptr<HIR::Expr> (range_from),\n+\t\t\t\t    std::unique_ptr<HIR::Expr> (range_to),\n+\t\t\t\t    expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ClosureExprInner &expr)\n+{\n+  HIR::Expr *closure_expr\n+    = ASTLoweringExpr::translate (expr.get_definition_expr ().get ());\n+\n+  std::vector<HIR::ClosureParam> closure_params;\n+  for (auto &param : expr.get_params ())\n+    {\n+      HIR::ClosureParam p = lower_closure_param (param);\n+      closure_params.push_back (std::move (p));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated\n+    = new HIR::ClosureExpr (mapping, std::move (closure_params),\n+\t\t\t    nullptr /* closure_return_type */,\n+\t\t\t    std::unique_ptr<HIR::Expr> (closure_expr),\n+\t\t\t    expr.get_has_move (), expr.get_outer_attrs (),\n+\t\t\t    expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ClosureExprInnerTyped &expr)\n+{\n+  HIR::Type *closure_return_type = nullptr;\n+  HIR::Expr *closure_expr\n+    = ASTLoweringExpr::translate (expr.get_definition_block ().get ());\n+\n+  std::vector<HIR::ClosureParam> closure_params;\n+  for (auto &param : expr.get_params ())\n+    {\n+      HIR::ClosureParam p = lower_closure_param (param);\n+      closure_params.push_back (std::move (p));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated\n+    = new HIR::ClosureExpr (mapping, std::move (closure_params),\n+\t\t\t    std::unique_ptr<HIR::Type> (closure_return_type),\n+\t\t\t    std::unique_ptr<HIR::Expr> (closure_expr),\n+\t\t\t    expr.get_has_move (), expr.get_outer_attrs (),\n+\t\t\t    expr.get_locus ());\n+}\n+\n+} // namespace HIR\n+} // namespace Rust"}, {"sha": "bea254de79de22f47ad32b6d0c281274007a5339", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 47, "deletions": 699, "changes": 746, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -19,11 +19,7 @@\n #ifndef RUST_AST_LOWER_EXPR\n #define RUST_AST_LOWER_EXPR\n \n-#include \"rust-diagnostics.h\"\n #include \"rust-ast-lower-base.h\"\n-#include \"rust-ast-lower-block.h\"\n-#include \"rust-ast-lower-struct-field-expr.h\"\n-#include \"rust-ast-lower-pattern.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -76,703 +72,55 @@ class ASTLoweringExpr : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::Expr *translate (AST::Expr *expr, bool *terminated = nullptr)\n-  {\n-    ASTLoweringExpr resolver;\n-    expr->accept_vis (resolver);\n-    if (resolver.translated == nullptr)\n-      {\n-\trust_fatal_error (expr->get_locus (), \"Failed to lower expr: [%s]\",\n-\t\t\t  expr->as_string ().c_str ());\n-\treturn nullptr;\n-      }\n-\n-    resolver.mappings->insert_hir_expr (resolver.translated);\n-    resolver.mappings->insert_location (\n-      resolver.translated->get_mappings ().get_hirid (), expr->get_locus ());\n-\n-    if (terminated != nullptr)\n-      *terminated = resolver.terminated;\n-\n-    return resolver.translated;\n-  }\n-\n-  void visit (AST::TupleIndexExpr &expr) override\n-  {\n-    HIR::Expr *tuple_expr\n-      = ASTLoweringExpr::translate (expr.get_tuple_expr ().get (), &terminated);\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::TupleIndexExpr (mapping,\n-\t\t\t\t std::unique_ptr<HIR::Expr> (tuple_expr),\n-\t\t\t\t expr.get_tuple_index (),\n-\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::TupleExpr &expr) override\n-  {\n-    std::vector<std::unique_ptr<HIR::Expr> > tuple_elements;\n-    for (auto &e : expr.get_tuple_elems ())\n-      {\n-\tHIR::Expr *t = ASTLoweringExpr::translate (e.get ());\n-\ttuple_elements.push_back (std::unique_ptr<HIR::Expr> (t));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::TupleExpr (std::move (mapping), std::move (tuple_elements),\n-\t\t\t    expr.get_inner_attrs (), expr.get_outer_attrs (),\n-\t\t\t    expr.get_locus ());\n-  }\n-\n-  void visit (AST::IfExpr &expr) override\n-  {\n-    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::IfExprConseqElse &expr) override\n-  {\n-    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::IfExprConseqIf &expr) override\n-  {\n-    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::BlockExpr &expr) override\n-  {\n-    translated = ASTLoweringBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::UnsafeBlockExpr &expr) override\n-  {\n-    translated = ASTLoweringBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::PathInExpression &expr) override\n-  {\n-    translated = ASTLowerPathInExpression::translate (&expr);\n-  }\n-\n-  void visit (AST::QualifiedPathInExpression &expr) override\n-  {\n-    translated = ASTLowerQualPathInExpression::translate (&expr);\n-  }\n-\n-  void visit (AST::ReturnExpr &expr) override\n-  {\n-    terminated = true;\n-    HIR::Expr *return_expr\n-      = expr.has_returned_expr ()\n-\t  ? ASTLoweringExpr::translate (expr.get_returned_expr ().get ())\n-\t  : nullptr;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::ReturnExpr (mapping, expr.get_locus (),\n-\t\t\t\t      std::unique_ptr<HIR::Expr> (return_expr));\n-  }\n-\n-  void visit (AST::CallExpr &expr) override\n-  {\n-    HIR::Expr *func\n-      = ASTLoweringExpr::translate (expr.get_function_expr ().get ());\n-\n-    auto const &in_params = expr.get_params ();\n-    std::vector<std::unique_ptr<HIR::Expr> > params;\n-    for (auto &param : in_params)\n-      {\n-\tauto trans = ASTLoweringExpr::translate (param.get ());\n-\tparams.push_back (std::unique_ptr<HIR::Expr> (trans));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (\n-      crate_num, UNKNOWN_NODEID /* this can map back to the AST*/,\n-      mappings->get_next_hir_id (crate_num), UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::CallExpr (mapping, std::unique_ptr<HIR::Expr> (func),\n-\t\t\t\t    std::move (params), expr.get_outer_attrs (),\n-\t\t\t\t    expr.get_locus ());\n-  }\n-\n-  void visit (AST::MethodCallExpr &expr) override\n-  {\n-    HIR::PathExprSegment method_path\n-      = lower_path_expr_seg (expr.get_method_name ());\n-\n-    HIR::Expr *receiver\n-      = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n-\n-    auto const &in_params = expr.get_params ();\n-    std::vector<std::unique_ptr<HIR::Expr> > params;\n-    for (auto &param : in_params)\n-      {\n-\tauto trans = ASTLoweringExpr::translate (param.get ());\n-\tparams.push_back (std::unique_ptr<HIR::Expr> (trans));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::MethodCallExpr (mapping, std::unique_ptr<HIR::Expr> (receiver),\n-\t\t\t\t method_path, std::move (params),\n-\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::AssignmentExpr &expr) override\n-  {\n-    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::AssignmentExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t expr.get_locus ());\n-  }\n-\n-  void visit (AST::IdentifierExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping1 (crate_num, expr.get_node_id (),\n-\t\t\t\t    mappings->get_next_hir_id (crate_num),\n-\t\t\t\t    UNKNOWN_LOCAL_DEFID);\n-    Analysis::NodeMapping mapping2 (mapping1);\n-\n-    HIR::PathIdentSegment ident_seg (expr.get_ident ());\n-    HIR::PathExprSegment seg (mapping1, ident_seg, expr.get_locus (),\n-\t\t\t      HIR::GenericArgs::create_empty ());\n-    translated = new HIR::PathInExpression (mapping2, {seg}, expr.get_locus (),\n-\t\t\t\t\t    false, expr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::ArrayExpr &expr) override\n-  {\n-    expr.get_array_elems ()->accept_vis (*this);\n-    rust_assert (translated_array_elems != nullptr);\n-    HIR::ArrayElems *elems = translated_array_elems;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::ArrayExpr (mapping, std::unique_ptr<HIR::ArrayElems> (elems),\n-\t\t\t    expr.get_inner_attrs (), expr.get_outer_attrs (),\n-\t\t\t    expr.get_locus ());\n-  }\n-\n-  void visit (AST::ArrayIndexExpr &expr) override\n-  {\n-    HIR::Expr *array_expr\n-      = ASTLoweringExpr::translate (expr.get_array_expr ().get ());\n-    HIR::Expr *array_index_expr\n-      = ASTLoweringExpr::translate (expr.get_index_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::ArrayIndexExpr (mapping,\n-\t\t\t\t std::unique_ptr<HIR::Expr> (array_expr),\n-\t\t\t\t std::unique_ptr<HIR::Expr> (array_index_expr),\n-\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::ArrayElemsValues &elems) override\n-  {\n-    std::vector<std::unique_ptr<HIR::Expr> > elements;\n-    for (auto &elem : elems.get_values ())\n-      {\n-\tHIR::Expr *translated_elem = ASTLoweringExpr::translate (elem.get ());\n-\telements.push_back (std::unique_ptr<HIR::Expr> (translated_elem));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (mappings->get_current_crate (),\n-\t\t\t\t   elems.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated_array_elems\n-      = new HIR::ArrayElemsValues (mapping, std::move (elements));\n-  }\n-\n-  void visit (AST::ArrayElemsCopied &elems) override\n-  {\n-    HIR::Expr *element\n-      = ASTLoweringExpr::translate (elems.get_elem_to_copy ().get ());\n-    HIR::Expr *num_copies\n-      = ASTLoweringExpr::translate (elems.get_num_copies ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (mappings->get_current_crate (),\n-\t\t\t\t   elems.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated_array_elems\n-      = new HIR::ArrayElemsCopied (mapping,\n-\t\t\t\t   std::unique_ptr<HIR::Expr> (element),\n-\t\t\t\t   std::unique_ptr<HIR::Expr> (num_copies));\n-  }\n-\n-  void visit (AST::LiteralExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Literal l = lower_literal (expr.get_literal ());\n-    translated\n-      = new HIR::LiteralExpr (mapping, std::move (l), expr.get_locus (),\n-\t\t\t      expr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::ArithmeticOrLogicalExpr &expr) override\n-  {\n-    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    rust_assert (lhs != nullptr);\n-    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-    rust_assert (rhs != nullptr);\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::ArithmeticOrLogicalExpr (mapping,\n-\t\t\t\t\t  std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t\t  expr.get_expr_type (),\n-\t\t\t\t\t  expr.get_locus ());\n-  }\n-\n-  void visit (AST::ComparisonExpr &expr) override\n-  {\n-    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    rust_assert (lhs != nullptr);\n-    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-    rust_assert (rhs != nullptr);\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::ComparisonExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t expr.get_expr_type (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::LazyBooleanExpr &expr) override\n-  {\n-    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    rust_assert (lhs != nullptr);\n-    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-    rust_assert (rhs != nullptr);\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::LazyBooleanExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t  expr.get_expr_type (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::NegationExpr &expr) override\n-  {\n-    HIR::Expr *negated_value\n-      = ASTLoweringExpr::translate (expr.get_negated_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-    translated\n-      = new HIR::NegationExpr (mapping,\n-\t\t\t       std::unique_ptr<HIR::Expr> (negated_value),\n-\t\t\t       expr.get_expr_type (), expr.get_outer_attrs (),\n-\t\t\t       expr.get_locus ());\n-  }\n-\n-  void visit (AST::TypeCastExpr &expr) override\n-  {\n-    HIR::Expr *expr_to_cast_to\n-      = ASTLoweringExpr::translate (expr.get_casted_expr ().get ());\n-    HIR::Type *type_to_cast_to\n-      = lower_type_no_bounds (expr.get_type_to_cast_to ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::TypeCastExpr (mapping,\n-\t\t\t       std::unique_ptr<HIR::Expr> (expr_to_cast_to),\n-\t\t\t       std::unique_ptr<HIR::Type> (type_to_cast_to),\n-\t\t\t       expr.get_locus ());\n-  }\n-\n-  void visit (AST::CompoundAssignmentExpr &expr) override\n-  {\n-    ArithmeticOrLogicalOperator op;\n-    switch (expr.get_expr_type ())\n-      {\n-      case CompoundAssignmentOperator::ADD:\n-\top = ArithmeticOrLogicalOperator::ADD;\n-\tbreak;\n-      case CompoundAssignmentOperator::SUBTRACT:\n-\top = ArithmeticOrLogicalOperator::SUBTRACT;\n-\tbreak;\n-      case CompoundAssignmentOperator::MULTIPLY:\n-\top = ArithmeticOrLogicalOperator::MULTIPLY;\n-\tbreak;\n-      case CompoundAssignmentOperator::DIVIDE:\n-\top = ArithmeticOrLogicalOperator::DIVIDE;\n-\tbreak;\n-      case CompoundAssignmentOperator::MODULUS:\n-\top = ArithmeticOrLogicalOperator::MODULUS;\n-\tbreak;\n-      case CompoundAssignmentOperator::BITWISE_AND:\n-\top = ArithmeticOrLogicalOperator::BITWISE_AND;\n-\tbreak;\n-      case CompoundAssignmentOperator::BITWISE_OR:\n-\top = ArithmeticOrLogicalOperator::BITWISE_OR;\n-\tbreak;\n-      case CompoundAssignmentOperator::BITWISE_XOR:\n-\top = ArithmeticOrLogicalOperator::BITWISE_XOR;\n-\tbreak;\n-      case CompoundAssignmentOperator::LEFT_SHIFT:\n-\top = ArithmeticOrLogicalOperator::LEFT_SHIFT;\n-\tbreak;\n-      case CompoundAssignmentOperator::RIGHT_SHIFT:\n-\top = ArithmeticOrLogicalOperator::RIGHT_SHIFT;\n-\tbreak;\n-      default:\n-\tgcc_unreachable ();\n-      }\n-\n-    HIR::Expr *asignee_expr\n-      = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    HIR::Expr *value\n-      = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::CompoundAssignmentExpr (\n-      mapping, std::unique_ptr<HIR::Expr> (asignee_expr),\n-      std::unique_ptr<HIR::Expr> (value), op, expr.get_locus ());\n-  }\n-\n-  void visit (AST::StructExprStruct &struct_expr) override\n-  {\n-    HIR::PathInExpression *path\n-      = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n-    HIR::PathInExpression copied_path (*path);\n-    delete path;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::StructExprStruct (mapping, copied_path,\n-\t\t\t\t\t    struct_expr.get_inner_attrs (),\n-\t\t\t\t\t    struct_expr.get_outer_attrs (),\n-\t\t\t\t\t    struct_expr.get_locus ());\n-  }\n-\n-  void visit (AST::StructExprStructFields &struct_expr) override\n-  {\n-    // bit of a hack for now\n-    HIR::PathInExpression *path\n-      = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n-    HIR::PathInExpression copied_path (*path);\n-    delete path;\n-\n-    HIR::StructBase *base = nullptr;\n-    if (struct_expr.has_struct_base ())\n-      {\n-\tHIR::Expr *translated_base = ASTLoweringExpr::translate (\n-\t  struct_expr.get_struct_base ().get_base_struct ().get ());\n-\tbase\n-\t  = new HIR::StructBase (std::unique_ptr<HIR::Expr> (translated_base));\n-      }\n-\n-    auto const &in_fields = struct_expr.get_fields ();\n-    std::vector<std::unique_ptr<HIR::StructExprField> > fields;\n-    for (auto &field : in_fields)\n-      {\n-\tHIR::StructExprField *translated\n-\t  = ASTLowerStructExprField::translate (field.get ());\n-\tfields.push_back (std::unique_ptr<HIR::StructExprField> (translated));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::StructExprStructFields (\n-      mapping, copied_path, std::move (fields), struct_expr.get_locus (), base,\n-      struct_expr.get_inner_attrs (), struct_expr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::GroupedExpr &expr) override\n-  {\n-    HIR::Expr *paren_expr\n-      = ASTLoweringExpr::translate (expr.get_expr_in_parens ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::GroupedExpr (mapping, std::unique_ptr<HIR::Expr> (paren_expr),\n-\t\t\t      expr.get_inner_attrs (), expr.get_outer_attrs (),\n-\t\t\t      expr.get_locus ());\n-  }\n-\n-  void visit (AST::FieldAccessExpr &expr) override\n-  {\n-    HIR::Expr *receiver\n-      = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-    translated\n-      = new HIR::FieldAccessExpr (mapping,\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (receiver),\n-\t\t\t\t  expr.get_field_name (),\n-\t\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::LoopExpr &expr) override\n-  {\n-    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::WhileLoopExpr &expr) override\n-  {\n-    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::ForLoopExpr &expr) override\n-  {\n-    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::BreakExpr &expr) override\n-  {\n-    HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n-    HIR::Expr *break_expr\n-      = expr.has_break_expr ()\n-\t  ? ASTLoweringExpr::translate (expr.get_break_expr ().get ())\n-\t  : nullptr;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::BreakExpr (mapping, expr.get_locus (),\n-\t\t\t\t     std ::move (break_label),\n-\t\t\t\t     std::unique_ptr<HIR::Expr> (break_expr),\n-\t\t\t\t     expr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::ContinueExpr &expr) override\n-  {\n-    HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::ContinueExpr (mapping, expr.get_locus (),\n-\t\t\t\t\tstd ::move (break_label),\n-\t\t\t\t\texpr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::BorrowExpr &expr) override\n-  {\n-    HIR::Expr *borrow_lvalue\n-      = ASTLoweringExpr::translate (expr.get_borrowed_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::BorrowExpr *borrow_expr\n-      = new HIR::BorrowExpr (mapping,\n-\t\t\t     std::unique_ptr<HIR::Expr> (borrow_lvalue),\n-\t\t\t     expr.get_is_mut () ? Mutability::Mut\n-\t\t\t\t\t\t: Mutability::Imm,\n-\t\t\t     expr.get_outer_attrs (), expr.get_locus ());\n-\n-    if (expr.get_is_double_borrow ())\n-      {\n-\tNodeId artifical_bouble_borrow_id = mappings->get_next_node_id ();\n-\tAnalysis::NodeMapping mapping (crate_num, artifical_bouble_borrow_id,\n-\t\t\t\t       mappings->get_next_hir_id (crate_num),\n-\t\t\t\t       UNKNOWN_LOCAL_DEFID);\n-\n-\tborrow_expr\n-\t  = new HIR::BorrowExpr (mapping,\n-\t\t\t\t std::unique_ptr<HIR::Expr> (borrow_expr),\n-\t\t\t\t expr.get_is_mut () ? Mutability::Mut\n-\t\t\t\t\t\t    : Mutability::Imm,\n-\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n-      }\n-\n-    translated = borrow_expr;\n-  }\n-\n-  void visit (AST::DereferenceExpr &expr) override\n-  {\n-    HIR::Expr *dref_lvalue\n-      = ASTLoweringExpr::translate (expr.get_dereferenced_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::DereferenceExpr (mapping,\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (dref_lvalue),\n-\t\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::MatchExpr &expr) override\n-  {\n-    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::RangeFromToExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Expr *range_from\n-      = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n-    HIR::Expr *range_to\n-      = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n-\n-    translated\n-      = new HIR::RangeFromToExpr (mapping,\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (range_from),\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (range_to),\n-\t\t\t\t  expr.get_locus ());\n-  }\n-\n-  void visit (AST::RangeFromExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Expr *range_from\n-      = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n-\n-    translated\n-      = new HIR::RangeFromExpr (mapping,\n-\t\t\t\tstd::unique_ptr<HIR::Expr> (range_from),\n-\t\t\t\texpr.get_locus ());\n-  }\n-\n-  void visit (AST::RangeToExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Expr *range_to\n-      = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n-\n-    translated\n-      = new HIR::RangeToExpr (mapping, std::unique_ptr<HIR::Expr> (range_to),\n-\t\t\t      expr.get_locus ());\n-  }\n-\n-  void visit (AST::RangeFullExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::RangeFullExpr (mapping, expr.get_locus ());\n-  }\n-\n-  void visit (AST::RangeFromToInclExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Expr *range_from\n-      = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n-    HIR::Expr *range_to\n-      = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n-\n-    translated\n-      = new HIR::RangeFromToInclExpr (mapping,\n-\t\t\t\t      std::unique_ptr<HIR::Expr> (range_from),\n-\t\t\t\t      std::unique_ptr<HIR::Expr> (range_to),\n-\t\t\t\t      expr.get_locus ());\n-  }\n+  static HIR::Expr *translate (AST::Expr *expr, bool *terminated = nullptr);\n+\n+  void visit (AST::TupleIndexExpr &expr) override;\n+  void visit (AST::TupleExpr &expr) override;\n+  void visit (AST::IfExpr &expr) override;\n+  void visit (AST::IfExprConseqElse &expr) override;\n+  void visit (AST::IfExprConseqIf &expr) override;\n+  void visit (AST::BlockExpr &expr) override;\n+  void visit (AST::UnsafeBlockExpr &expr) override;\n+  void visit (AST::PathInExpression &expr) override;\n+  void visit (AST::QualifiedPathInExpression &expr) override;\n+  void visit (AST::ReturnExpr &expr) override;\n+  void visit (AST::CallExpr &expr) override;\n+  void visit (AST::MethodCallExpr &expr) override;\n+  void visit (AST::AssignmentExpr &expr) override;\n+  void visit (AST::IdentifierExpr &expr) override;\n+  void visit (AST::ArrayExpr &expr) override;\n+  void visit (AST::ArrayIndexExpr &expr) override;\n+  void visit (AST::ArrayElemsValues &elems) override;\n+  void visit (AST::ArrayElemsCopied &elems) override;\n+  void visit (AST::LiteralExpr &expr) override;\n+  void visit (AST::ArithmeticOrLogicalExpr &expr) override;\n+  void visit (AST::ComparisonExpr &expr) override;\n+  void visit (AST::LazyBooleanExpr &expr) override;\n+  void visit (AST::NegationExpr &expr) override;\n+  void visit (AST::TypeCastExpr &expr) override;\n+  void visit (AST::CompoundAssignmentExpr &expr) override;\n+  void visit (AST::StructExprStruct &struct_expr) override;\n+  void visit (AST::StructExprStructFields &struct_expr) override;\n+  void visit (AST::GroupedExpr &expr) override;\n+  void visit (AST::FieldAccessExpr &expr) override;\n+  void visit (AST::LoopExpr &expr) override;\n+  void visit (AST::WhileLoopExpr &expr) override;\n+  void visit (AST::ForLoopExpr &expr) override;\n+  void visit (AST::BreakExpr &expr) override;\n+  void visit (AST::ContinueExpr &expr) override;\n+  void visit (AST::BorrowExpr &expr) override;\n+  void visit (AST::DereferenceExpr &expr) override;\n+  void visit (AST::MatchExpr &expr) override;\n+  void visit (AST::RangeFromToExpr &expr) override;\n+  void visit (AST::RangeFromExpr &expr) override;\n+  void visit (AST::RangeToExpr &expr) override;\n+  void visit (AST::RangeFullExpr &expr) override;\n+  void visit (AST::RangeFromToInclExpr &expr) override;\n+  void visit (AST::ClosureExprInner &expr) override;\n+  void visit (AST::ClosureExprInnerTyped &expr) override;\n \n private:\n-  ASTLoweringExpr ()\n-    : ASTLoweringBase (), translated (nullptr),\n-      translated_array_elems (nullptr), terminated (false)\n-  {}\n+  ASTLoweringExpr ();\n \n   HIR::Expr *translated;\n   HIR::ArrayElems *translated_array_elems;"}, {"sha": "fdf8abe3ed3253b4c033f72fe7eac2c33e5948dd", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -22,9 +22,12 @@\n #include \"rust-ast-lower-expr.h\"\n #include \"rust-ast-lower-block.h\"\n #include \"rust-ast-lower-type.h\"\n+#include \"rust-ast-lower-pattern.h\"\n+#include \"rust-ast-lower-struct-field-expr.h\"\n \n namespace Rust {\n namespace HIR {\n+using HIR::ClosureParam;\n \n Visibility\n translate_visibility (const AST::Visibility &vis)\n@@ -473,5 +476,25 @@ ASTLowerQualPathInExpression::visit (AST::QualifiedPathInExpression &expr)\n \t\t\t\t\t\t   expr.get_locus (),\n \t\t\t\t\t\t   expr.get_outer_attrs ());\n }\n+\n+ClosureParam\n+ASTLoweringBase::lower_closure_param (AST::ClosureParam &param)\n+{\n+  HIR::Pattern *param_pattern\n+    = ASTLoweringPattern::translate (param.get_pattern ().get ());\n+\n+  HIR::Type *param_type\n+    = param.has_type_given ()\n+\t? ASTLoweringType::translate (param.get_type ().get ())\n+\t: nullptr;\n+\n+  return HIR::ClosureParam (std::unique_ptr<HIR::Pattern> (param_pattern),\n+\t\t\t    param.get_locus (),\n+\t\t\t    param.has_type_given ()\n+\t\t\t      ? std::unique_ptr<HIR::Type> (param_type)\n+\t\t\t      : nullptr,\n+\t\t\t    param.get_outer_attrs ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "261a36daa058ceaa35c38b0a5e21f04f985c4cc3", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -197,7 +197,7 @@ void\n Dump::visit (FieldAccessExpr &)\n {}\n void\n-Dump::visit (ClosureExprInner &)\n+Dump::visit (ClosureExpr &)\n {}\n void\n Dump::visit (BlockExpr &block_expr)\n@@ -212,9 +212,7 @@ Dump::visit (BlockExpr &block_expr)\n   stream << \"]\";\n   indent--;\n }\n-void\n-Dump::visit (ClosureExprInnerTyped &)\n-{}\n+\n void\n Dump::visit (ContinueExpr &)\n {}"}, {"sha": "8715a95ada8b0f2d97eaa30c050cc3a262fb93d4", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -78,9 +78,8 @@ class Dump : public HIRFullVisitor\n   virtual void visit (CallExpr &) override;\n   virtual void visit (MethodCallExpr &) override;\n   virtual void visit (FieldAccessExpr &) override;\n-  virtual void visit (ClosureExprInner &) override;\n+  virtual void visit (ClosureExpr &) override;\n   virtual void visit (BlockExpr &) override;\n-  virtual void visit (ClosureExprInnerTyped &) override;\n   virtual void visit (ContinueExpr &) override;\n   virtual void visit (BreakExpr &) override;\n   virtual void visit (RangeFromToExpr &) override;"}, {"sha": "4c5caf17ac33a4690bbb366e2ef872416a825160", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 89, "deletions": 124, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -1985,28 +1985,31 @@ class FieldAccessExpr : public ExprWithoutBlock\n struct ClosureParam\n {\n private:\n+  std::vector<AST::Attribute> outer_attrs;\n   std::unique_ptr<Pattern> pattern;\n-\n-  // bool has_type_given;\n   std::unique_ptr<Type> type;\n-\n-  // TODO: should this store location data?\n+  Location locus;\n \n public:\n   // Returns whether the type of the parameter has been given.\n   bool has_type_given () const { return type != nullptr; }\n \n   // Constructor for closure parameter\n-  ClosureParam (std::unique_ptr<Pattern> param_pattern,\n-\t\tstd::unique_ptr<Type> param_type = nullptr)\n-    : pattern (std::move (param_pattern)), type (std::move (param_type))\n+  ClosureParam (std::unique_ptr<Pattern> param_pattern, Location locus,\n+\t\tstd::unique_ptr<Type> param_type = nullptr,\n+\t\tstd::vector<AST::Attribute> outer_attrs = {})\n+    : outer_attrs (std::move (outer_attrs)),\n+      pattern (std::move (param_pattern)), type (std::move (param_type)),\n+      locus (locus)\n   {}\n \n   // Copy constructor required due to cloning as a result of unique_ptrs\n   ClosureParam (ClosureParam const &other)\n     : pattern (other.pattern->clone_pattern ())\n   {\n     // guard to protect from null pointer dereference\n+    if (other.pattern != nullptr)\n+      pattern = other.pattern->clone_pattern ();\n     if (other.type != nullptr)\n       type = other.type->clone_type ();\n   }\n@@ -2016,8 +2019,17 @@ struct ClosureParam\n   // Assignment operator must be overloaded to clone as well\n   ClosureParam &operator= (ClosureParam const &other)\n   {\n-    pattern = other.pattern->clone_pattern ();\n-    type = other.type->clone_type ();\n+    outer_attrs = other.outer_attrs;\n+\n+    // guard to protect from null pointer dereference\n+    if (other.pattern != nullptr)\n+      pattern = other.pattern->clone_pattern ();\n+    else\n+      pattern = nullptr;\n+    if (other.type != nullptr)\n+      type = other.type->clone_type ();\n+    else\n+      type = nullptr;\n \n     return *this;\n   }\n@@ -2026,31 +2038,79 @@ struct ClosureParam\n   ClosureParam (ClosureParam &&other) = default;\n   ClosureParam &operator= (ClosureParam &&other) = default;\n \n-  // Returns whether closure parameter is in an error state.\n-  bool is_error () const { return pattern == nullptr; }\n+  std::string as_string () const;\n \n-  // Creates an error state closure parameter.\n-  static ClosureParam create_error () { return ClosureParam (nullptr); }\n+  const std::vector<AST::Attribute> &get_outer_attrs () const\n+  {\n+    return outer_attrs;\n+  }\n+  std::vector<AST::Attribute> &get_outer_attrs () { return outer_attrs; }\n \n-  std::string as_string () const;\n+  std::unique_ptr<Pattern> &get_pattern ()\n+  {\n+    rust_assert (pattern != nullptr);\n+    return pattern;\n+  }\n+\n+  std::unique_ptr<Type> &get_type ()\n+  {\n+    rust_assert (has_type_given ());\n+    return type;\n+  }\n+\n+  Location get_locus () const { return locus; }\n };\n \n // Base closure definition expression HIR node - abstract\n class ClosureExpr : public ExprWithoutBlock\n {\n+private:\n   bool has_move;\n   std::vector<ClosureParam> params;\n   Location locus;\n+  std::unique_ptr<Type> return_type;\n+  std::unique_ptr<Expr> expr;\n \n-protected:\n+public:\n   ClosureExpr (Analysis::NodeMapping mappings,\n-\t       std::vector<ClosureParam> closure_params, bool has_move,\n+\t       std::vector<ClosureParam> closure_params,\n+\t       std::unique_ptr<Type> closure_return_type,\n+\t       std::unique_ptr<Expr> closure_expr, bool has_move,\n \t       AST::AttrVec outer_attribs, Location locus)\n     : ExprWithoutBlock (std::move (mappings), std::move (outer_attribs)),\n-      has_move (has_move), params (std::move (closure_params)), locus (locus)\n+      has_move (has_move), params (std::move (closure_params)), locus (locus),\n+      return_type (std::move (closure_return_type)),\n+      expr (std::move (closure_expr))\n   {}\n \n-public:\n+  // Copy constructor requires cloning\n+  ClosureExpr (ClosureExpr const &other)\n+    : ExprWithoutBlock (other.get_mappings (), other.get_outer_attrs ())\n+  {\n+    return_type\n+      = other.has_return_type () ? other.return_type->clone_type () : nullptr;\n+    expr = other.expr->clone_expr ();\n+    params = other.params;\n+    has_move = other.has_move;\n+  }\n+\n+  // Overload assignment operator to clone unique_ptrs\n+  ClosureExpr &operator= (ClosureExpr const &other)\n+  {\n+    mappings = other.mappings;\n+    return_type\n+      = other.has_return_type () ? other.return_type->clone_type () : nullptr;\n+    expr = other.expr->clone_expr ();\n+    params = other.params;\n+    has_move = other.has_move;\n+\n+    return *this;\n+  }\n+\n+  // move constructors\n+  ClosureExpr (ClosureExpr &&other) = default;\n+  ClosureExpr &operator= (ClosureExpr &&other) = default;\n+\n   std::string as_string () const override;\n \n   Location get_locus () const override final { return locus; }\n@@ -2059,64 +2119,34 @@ class ClosureExpr : public ExprWithoutBlock\n   {\n     return ExprType::Closure;\n   }\n-};\n \n-// Represents a non-type-specified closure expression HIR node\n-class ClosureExprInner : public ClosureExpr\n-{\n-  std::unique_ptr<Expr> closure_inner;\n+  bool get_has_move () const { return has_move; }\n \n-public:\n-  std::string as_string () const override;\n+  bool has_return_type () const { return return_type != nullptr; }\n \n-  // Constructor for a ClosureExprInner\n-  ClosureExprInner (Analysis::NodeMapping mappings,\n-\t\t    std::unique_ptr<Expr> closure_inner_expr,\n-\t\t    std::vector<ClosureParam> closure_params, Location locus,\n-\t\t    bool is_move = false,\n-\t\t    AST::AttrVec outer_attribs = AST::AttrVec ())\n-    : ClosureExpr (std::move (mappings), std::move (closure_params), is_move,\n-\t\t   std::move (outer_attribs), locus),\n-      closure_inner (std::move (closure_inner_expr))\n-  {}\n-\n-  // Copy constructor must be defined to allow copying via cloning of unique_ptr\n-  ClosureExprInner (ClosureExprInner const &other)\n-    : ClosureExpr (other), closure_inner (other.closure_inner->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to clone closure_inner\n-  ClosureExprInner &operator= (ClosureExprInner const &other)\n+  std::unique_ptr<Type> &get_return_type ()\n   {\n-    ClosureExpr::operator= (other);\n-    closure_inner = other.closure_inner->clone_expr ();\n-    // params = other.params;\n-    // has_move = other.has_move;\n-    // outer_attrs = other.outer_attrs;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  ClosureExprInner (ClosureExprInner &&other) = default;\n-  ClosureExprInner &operator= (ClosureExprInner &&other) = default;\n+    rust_assert (has_return_type ());\n+    return return_type;\n+  };\n+  std::unique_ptr<Expr> &get_expr () { return expr; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  ClosureExprInner *clone_expr_impl () const override\n+  ClosureExpr *clone_expr_impl () const override\n   {\n-    return new ClosureExprInner (*this);\n+    return new ClosureExpr (*this);\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  ClosureExprInner *clone_expr_without_block_impl () const override\n+  ClosureExpr *clone_expr_without_block_impl () const override\n   {\n-    return new ClosureExprInner (*this);\n+    return new ClosureExpr (*this);\n   }\n };\n \n@@ -2239,71 +2269,6 @@ class BlockExpr : public ExprWithBlock\n   }\n };\n \n-// Represents a type-specified closure expression HIR node\n-class ClosureExprInnerTyped : public ClosureExpr\n-{\n-  std::unique_ptr<Type> return_type;\n-  std::unique_ptr<BlockExpr>\n-    expr; // only used because may be polymorphic in future\n-\n-public:\n-  std::string as_string () const override;\n-\n-  // Constructor potentially with a move\n-  ClosureExprInnerTyped (Analysis::NodeMapping mappings,\n-\t\t\t std::unique_ptr<Type> closure_return_type,\n-\t\t\t std::unique_ptr<BlockExpr> closure_expr,\n-\t\t\t std::vector<ClosureParam> closure_params,\n-\t\t\t Location locus, bool is_move = false,\n-\t\t\t AST::AttrVec outer_attribs = AST::AttrVec ())\n-    : ClosureExpr (std::move (mappings), std::move (closure_params), is_move,\n-\t\t   std::move (outer_attribs), locus),\n-      return_type (std::move (closure_return_type)),\n-      expr (std::move (closure_expr))\n-  {}\n-\n-  // Copy constructor requires cloning\n-  ClosureExprInnerTyped (ClosureExprInnerTyped const &other)\n-    : ClosureExpr (other), return_type (other.return_type->clone_type ()),\n-      expr (other.expr->clone_block_expr ())\n-  {}\n-\n-  // Overload assignment operator to clone unique_ptrs\n-  ClosureExprInnerTyped &operator= (ClosureExprInnerTyped const &other)\n-  {\n-    ClosureExpr::operator= (other);\n-    return_type = other.return_type->clone_type ();\n-    expr = other.expr->clone_block_expr ();\n-    // params = other.params;\n-    // has_move = other.has_move;\n-    // outer_attrs = other.outer_attrs;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  ClosureExprInnerTyped (ClosureExprInnerTyped &&other) = default;\n-  ClosureExprInnerTyped &operator= (ClosureExprInnerTyped &&other) = default;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRExpressionVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ClosureExprInnerTyped *clone_expr_impl () const override\n-  {\n-    return new ClosureExprInnerTyped (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ClosureExprInnerTyped *clone_expr_without_block_impl () const override\n-  {\n-    return new ClosureExprInnerTyped (*this);\n-  }\n-};\n-\n // HIR node representing continue expression within loops\n class ContinueExpr : public ExprWithoutBlock\n {"}, {"sha": "70ee7538298ef363a199d62a88562b0dc6784bf5", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -94,9 +94,7 @@ class MethodCallExpr;\n class FieldAccessExpr;\n struct ClosureParam;\n class ClosureExpr;\n-class ClosureExprInner;\n class BlockExpr;\n-class ClosureExprInnerTyped;\n class ContinueExpr;\n class BreakExpr;\n class RangeExpr;"}, {"sha": "f6e27b9a35f7dca454fc4b983c0cd18853144af2", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -1133,15 +1133,8 @@ ClosureExpr::as_string () const\n \t}\n     }\n \n-  return str;\n-}\n-\n-std::string\n-ClosureExprInnerTyped::as_string () const\n-{\n-  std::string str = ClosureExpr::as_string ();\n-\n-  str += \"\\n Return type: \" + return_type->as_string ();\n+  str += \"\\n Return type: \"\n+\t + (has_return_type () ? return_type->as_string () : \"none\");\n \n   str += \"\\n Body: \" + expr->as_string ();\n \n@@ -1515,16 +1508,6 @@ UnsafeBlockExpr::as_string () const\n   return str + \"\\n\" + indent_spaces (out) + \"}\\n\" + expr->as_string ();\n }\n \n-std::string\n-ClosureExprInner::as_string () const\n-{\n-  std::string str = ClosureExpr::as_string ();\n-\n-  str += \"\\n Expression: \" + closure_inner->as_string ();\n-\n-  return str;\n-}\n-\n std::string\n IfExpr::as_string () const\n {\n@@ -4038,7 +4021,7 @@ FieldAccessExpr::accept_vis (HIRFullVisitor &vis)\n }\n \n void\n-ClosureExprInner::accept_vis (HIRFullVisitor &vis)\n+ClosureExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n@@ -4049,12 +4032,6 @@ BlockExpr::accept_vis (HIRFullVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-ClosureExprInnerTyped::accept_vis (HIRFullVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n ContinueExpr::accept_vis (HIRFullVisitor &vis)\n {\n@@ -4986,7 +4963,7 @@ IfExpr::accept_vis (HIRExpressionVisitor &vis)\n }\n \n void\n-ClosureExprInner::accept_vis (HIRExpressionVisitor &vis)\n+ClosureExpr::accept_vis (HIRExpressionVisitor &vis)\n {\n   vis.visit (*this);\n }\n@@ -5075,12 +5052,6 @@ QualifiedPathInExpression::accept_vis (HIRPatternVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-ClosureExprInnerTyped::accept_vis (HIRExpressionVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n ExprStmtWithBlock::accept_vis (HIRStmtVisitor &vis)\n {"}, {"sha": "ba6cad7614b0b0025e1f75eb97e7e12435a7d3d3", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -63,9 +63,8 @@ class HIRFullVisitor\n   virtual void visit (CallExpr &expr) = 0;\n   virtual void visit (MethodCallExpr &expr) = 0;\n   virtual void visit (FieldAccessExpr &expr) = 0;\n-  virtual void visit (ClosureExprInner &expr) = 0;\n   virtual void visit (BlockExpr &expr) = 0;\n-  virtual void visit (ClosureExprInnerTyped &expr) = 0;\n+  virtual void visit (ClosureExpr &expr) = 0;\n   virtual void visit (ContinueExpr &expr) = 0;\n   virtual void visit (BreakExpr &expr) = 0;\n   virtual void visit (RangeFromToExpr &expr) = 0;\n@@ -206,9 +205,8 @@ class HIRFullVisitorBase : public HIRFullVisitor\n   virtual void visit (CallExpr &) override {}\n   virtual void visit (MethodCallExpr &) override {}\n   virtual void visit (FieldAccessExpr &) override {}\n-  virtual void visit (ClosureExprInner &) override {}\n+  virtual void visit (ClosureExpr &) override {}\n   virtual void visit (BlockExpr &) override {}\n-  virtual void visit (ClosureExprInnerTyped &) override {}\n   virtual void visit (ContinueExpr &) override {}\n   virtual void visit (BreakExpr &) override {}\n   virtual void visit (RangeFromToExpr &) override {}\n@@ -419,8 +417,7 @@ class HIRExpressionVisitor\n \n   virtual void visit (HIR::QualifiedPathInExpression &expr) = 0;\n   virtual void visit (HIR::PathInExpression &expr) = 0;\n-  virtual void visit (ClosureExprInnerTyped &) = 0;\n-  virtual void visit (ClosureExprInner &expr) = 0;\n+  virtual void visit (ClosureExpr &) = 0;\n   virtual void visit (StructExprStructFields &) = 0;\n   virtual void visit (StructExprStruct &) = 0;\n   virtual void visit (LiteralExpr &expr) = 0;"}, {"sha": "314aafb32d3444ff372071173f75b4ae618bb000", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -238,6 +238,7 @@ class ExprWithoutBlock;\n // Base expression HIR node - abstract\n class Expr : public Node\n {\n+protected:\n   AST::AttrVec outer_attrs;\n   Analysis::NodeMapping mappings;\n "}, {"sha": "6b8c63b77f6ef8c7c9ff5b9f7fe90d2bef3ddf3f", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -1418,6 +1418,12 @@ TypeCheckExpr::visit (HIR::MatchExpr &expr)\n     }\n }\n \n+void\n+TypeCheckExpr::visit (HIR::ClosureExpr &expr)\n+{\n+  gcc_unreachable ();\n+}\n+\n bool\n TypeCheckExpr::resolve_operator_overload (\n   Analysis::RustLangItem::ItemType lang_item_type, HIR::OperatorExprMeta expr,"}, {"sha": "7f787fa9766cea38dcffe04c53c1d717e7eabbca", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870dd9d5d3c5180efb147f93ed6ae454605c9037/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=870dd9d5d3c5180efb147f93ed6ae454605c9037", "patch": "@@ -69,10 +69,9 @@ class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n   void visit (HIR::RangeFullExpr &expr) override;\n   void visit (HIR::RangeFromToInclExpr &expr) override;\n   void visit (HIR::WhileLoopExpr &expr) override;\n+  void visit (HIR::ClosureExpr &expr) override;\n \n   // TODO\n-  void visit (HIR::ClosureExprInnerTyped &) override {}\n-  void visit (HIR::ClosureExprInner &expr) override {}\n   void visit (HIR::ErrorPropagationExpr &expr) override {}\n   void visit (HIR::RangeToInclExpr &expr) override {}\n   void visit (HIR::WhileLetLoopExpr &expr) override {}"}]}