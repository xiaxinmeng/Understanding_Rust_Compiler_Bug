{"sha": "fb6a7b08a80113867aaeaa3d4dc6bcade0a57699", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI2YTdiMDhhODAxMTM4NjdhYWVhYTNkNGRjNmJjYWRlMGE1NzY5OQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-11-27T19:04:54Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-27T19:04:54Z"}, "message": "tradcpp.c (enum pending_dir_t, [...]): New.\n\n        * tradcpp.c (enum pending_dir_t, struct pending_dir): New.\n        (main): Allocate a pending directive set of these.  Use it.\n        Merge handling of -D and -U.  Update handling of pending\n        directives.  Free the memory after use.\n\nFrom-SVN: r37803", "tree": {"sha": "2ae7b2cff101c05adfc2ef80da4720d3a26b6a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ae7b2cff101c05adfc2ef80da4720d3a26b6a39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb6a7b08a80113867aaeaa3d4dc6bcade0a57699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6a7b08a80113867aaeaa3d4dc6bcade0a57699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb6a7b08a80113867aaeaa3d4dc6bcade0a57699", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6a7b08a80113867aaeaa3d4dc6bcade0a57699/comments", "author": null, "committer": null, "parents": [{"sha": "6bd7b1bb376c1612c9d7e16c08f77bae37f1f08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd7b1bb376c1612c9d7e16c08f77bae37f1f08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd7b1bb376c1612c9d7e16c08f77bae37f1f08a"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "15b16a28d36e45c9c76a5596e692c3a3cfa42062", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6a7b08a80113867aaeaa3d4dc6bcade0a57699/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6a7b08a80113867aaeaa3d4dc6bcade0a57699/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb6a7b08a80113867aaeaa3d4dc6bcade0a57699", "patch": "@@ -1,3 +1,10 @@\n+2000-11-27  Neil Booth  <neilb@earthling.net>\n+\n+        * tradcpp.c (enum pending_dir_t, struct pending_dir): New.\n+        (main): Allocate a pending directive set of these.  Use it.\n+        Merge handling of -D and -U.  Update handling of pending\n+        directives.  Free the memory after use.\n+\n 2000-11-27  Bernd Schmidt  <bernds@redhat.co.uk>\n \n \t* flow.c (entry_exit_blocks): Add entry for cond_local_set."}, {"sha": "a62941321f2deada33f0e1a6a9571a8422962f3c", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6a7b08a80113867aaeaa3d4dc6bcade0a57699/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6a7b08a80113867aaeaa3d4dc6bcade0a57699/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=fb6a7b08a80113867aaeaa3d4dc6bcade0a57699", "patch": "@@ -443,6 +443,16 @@ int deps_column;\n    so don't look for #include \"foo\" the source-file directory.  */\n int ignore_srcdir;\n \n+/* Pending directives.  */\n+enum pending_dir_t {PD_NONE = 0, PD_DEFINE, PD_UNDEF, PD_ASSERTION, PD_FILE};\n+\n+typedef struct pending_dir pending_dir;\n+struct pending_dir\n+{\n+  const char *arg;\n+  enum pending_dir_t type;\n+};\n+\n int\n main (argc, argv)\n      int argc;\n@@ -453,9 +463,7 @@ main (argc, argv)\n   const char *in_fname, *out_fname;\n   int f, i;\n   FILE_BUF *fp;\n-  const char **pend_files = (const char **) xmalloc (argc * sizeof (char *));\n-  const char **pend_defs = (const char **) xmalloc (argc * sizeof (char *));\n-  const char **pend_undefs = (const char **) xmalloc (argc * sizeof (char *));\n+  pending_dir *pend = (pending_dir *) xcalloc (argc, sizeof (pending_dir));\n   int no_standard_includes = 0;\n \n   /* Non-0 means don't output the preprocessed program.  */\n@@ -493,10 +501,6 @@ main (argc, argv)\n \n   max_include_len = cpp_GCC_INCLUDE_DIR_len + 7;  /* ??? */\n \n-  memset (pend_files, 0, argc * sizeof (char *));\n-  memset (pend_defs, 0, argc * sizeof (char *));\n-  memset (pend_undefs, 0, argc * sizeof (char *));\n-\n   /* Process switches and find input file name.  */\n \n   for (i = 1; i < argc; i++) {\n@@ -508,7 +512,9 @@ main (argc, argv)\n       else\n \tin_fname = argv[i];\n     } else {\n-      switch (argv[i][1]) {\n+      int c = argv[i][1];\n+\n+      switch (c) {\n       case 'A':\n       case 'E':\n       case '$':\n@@ -522,11 +528,11 @@ main (argc, argv)\n \telse if (!strcmp (argv[i], \"-lang-c89\"))\n \t  fatal (\"-traditional and -ansi are mutually exclusive\");\n \telse if (!strcmp (argv[i], \"-lang-objc\"))\n-\t  pend_defs[i] = \"__OBJC__\";\n+\t  pend[i].type = PD_DEFINE, pend[i].arg = \"__OBJC__\";\n \telse if (!strcmp (argv[i], \"-lang-asm\"))\n-\t  pend_defs[i] = \"__ASSEMBLER__\";\n+\t  pend[i].type = PD_DEFINE, pend[i].arg = \"__ASSEMBLER__\";\n \telse if (!strcmp (argv[i], \"-lang-fortran\"))\n-\t  pend_defs[i] = \"_LANGUAGE_FORTRAN\";\n+\t  pend[i].type = PD_DEFINE, pend[i].arg = \"_LANGUAGE_FORTRAN\";\n \t/* All other possibilities ignored.  */\n \tbreak;\n \n@@ -536,7 +542,7 @@ main (argc, argv)\n \t    if (i + 1 == argc)\n \t      fatal (\"Filename missing after -i option\");\n \t    else\n-\t      pend_files[i] = argv[i+1], i++;\n+\t      pend[i].type = PD_FILE, pend[i].arg = argv[i + 1], i++;\n \t  }\n \telse if (!strcmp (argv[i], \"-iprefix\"))\n \t  i++; /* Ignore for compatibility */\n@@ -597,29 +603,22 @@ main (argc, argv)\n \tbreak;\n \n       case 'D':\n+      case 'U':\n \t{\n \t  char *p;\n \n \t  if (argv[i][2] != 0)\n \t    p = argv[i] + 2;\n \t  else if (i + 1 == argc)\n-\t    fatal (\"Macro name missing after -D option\");\n+\t    fatal (\"Macro name missing after -%c option\", c);\n \t  else\n \t    p = argv[++i];\n \n-\t  pend_defs[i] = p;\n+\t  pend[i].type = c == 'D' ? PD_DEFINE: PD_UNDEF;\n+\t  pend[i].arg = p;\n \t}\n \tbreak;\n \n-      case 'U':\t\t/* JF #undef something */\n-\tif (argv[i][2] != 0)\n-\t  pend_undefs[i] = argv[i] + 2;\n-\telse if (i + 1 == argc)\n-\t  fatal (\"Macro name missing after -U option\");\n-\telse\n-\t  pend_undefs[i] = argv[i+1], i++;\n-\tbreak;\n-\n       case 'C':\n \tput_out_comments = 1;\n \tbreak;\n@@ -701,10 +700,10 @@ main (argc, argv)\n \n   /* Do defines specified with -D and undefines specified with -U.  */\n   for (i = 1; i < argc; i++)\n-    if (pend_defs[i])\n-      make_definition ((const U_CHAR *)pend_defs[i]);\n-    else if (pend_undefs[i])\n-      make_undef ((U_CHAR *)pend_undefs[i]);\n+    if (pend[i].type == PD_DEFINE)\n+      make_definition ((const U_CHAR *) pend[i].arg);\n+    else if (pend[i].type == PD_UNDEF)\n+      make_undef ((U_CHAR *) pend[i].arg);\n \n   /* Unless -fnostdinc,\n      tack on the standard include file dirs to the specified list */\n@@ -744,16 +743,21 @@ main (argc, argv)\n \n   no_output++;\n   for (i = 1; i < argc; i++)\n-    if (pend_files[i]) {\n-      int fd = open (pend_files[i], O_RDONLY, 0666);\n-      if (fd < 0) {\n-\tperror_with_name (pend_files[i]);\n-\treturn FATAL_EXIT_CODE;\n+    if (pend[i].type == PD_FILE)\n+      {\n+\tint fd = open (pend[i].arg, O_RDONLY, 0666);\n+\tif (fd < 0)\n+\t  {\n+\t    perror_with_name (pend[i].arg);\n+\t    return FATAL_EXIT_CODE;\n+\t  }\n+\tfinclude (fd, pend[i].arg, &outbuf);\n       }\n-      finclude (fd, pend_files[i], &outbuf);\n-    }\n   no_output--;\n \n+  /* Pending directives no longer needed.  */\n+  free ((PTR) pend);\n+\n   /* Create an input stack level for the main input file\n      and copy the entire contents of the file into it.  */\n "}]}