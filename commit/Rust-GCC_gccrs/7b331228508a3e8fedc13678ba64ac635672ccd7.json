{"sha": "7b331228508a3e8fedc13678ba64ac635672ccd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzMzEyMjg1MDhhM2U4ZmVkYzEzNjc4YmE2NGFjNjM1NjcyY2NkNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@fillmore.redhat.com", "date": "2001-01-02T07:38:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-02T07:38:47Z"}, "message": "std_cwchar.h: Same.\n\n\n2001-01-01  Benjamin Kosnik  <bkoz@fillmore.redhat.com>\n\n\t* include/c_std/bits/std_cwchar.h: Same.\n\t* testsuite/17_intro/header_cwchar.cc: Same.\n\t* include/c_std/bits/std_ctime.h: Same.\n\t* testsuite/17_intro/header_ctime.cc: Same.\n\t* include/c_std/bits/std_cstdlib.h: Same.\n\tClean up undefs, make consistent with cwchar and cmath, etc.\n\t* testsuite/17_intro/header_cstdlib.cc: Same.\n\t* include/c_std/bits/std_cstdio.h: Same here.\n\t* testsuite/17_intro/header_cstring.cc: Same.\n\t* include/c_std/bits/std_cstring.h: Include std_cstddef.h for size_t.\n\t* testsuite/17_intro/header_cstring.cc: New file. Check for\n\tsize_t in namespace std.\n\n\t* include/c_std/bits/std_cwchar.h: Explicit checks for mbstate_t.\n\t* acconfig.h (HAVE_MBSTATE_T): Add.\n\t* config.h.in: Regenerate.\n\t* acinclude.m4(GLIBCPP_CHECK_WCHAR_T_SUPPORT): Always test for\n\tmbstate_t.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* testsuite/17_intro/headers_c++.cc: New file.\n\t* testsuite/17_intro/headers_c.cc: Small changes.\n\nFrom-SVN: r38614", "tree": {"sha": "eb762dbfba29d9eeb488eb5cef71e584a07a2e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb762dbfba29d9eeb488eb5cef71e584a07a2e2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b331228508a3e8fedc13678ba64ac635672ccd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b331228508a3e8fedc13678ba64ac635672ccd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b331228508a3e8fedc13678ba64ac635672ccd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b331228508a3e8fedc13678ba64ac635672ccd7/comments", "author": null, "committer": null, "parents": [{"sha": "d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1"}], "stats": {"total": 2940, "additions": 1613, "deletions": 1327}, "files": [{"sha": "47c905ecc8d3aa30260fdc4066c7ea250784bd8a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -1,3 +1,28 @@\n+2001-01-01  Benjamin Kosnik  <bkoz@fillmore.redhat.com>\n+\t\n+\t* include/c_std/bits/std_cwchar.h: Same.\n+\t* testsuite/17_intro/header_cwchar.cc: Same.\n+\t* include/c_std/bits/std_ctime.h: Same.\n+\t* testsuite/17_intro/header_ctime.cc: Same.\n+\t* include/c_std/bits/std_cstdlib.h: Same.\n+\tClean up undefs, make consistent with cwchar and cmath, etc.\n+\t* testsuite/17_intro/header_cstdlib.cc: Same.\n+\t* include/c_std/bits/std_cstdio.h: Same here.\n+\t* testsuite/17_intro/header_cstring.cc: Same.\n+\t* include/c_std/bits/std_cstring.h: Include std_cstddef.h for size_t.\n+\t* testsuite/17_intro/header_cstring.cc: New file. Check for\n+\tsize_t in namespace std.\n+\n+\t* include/c_std/bits/std_cwchar.h: Explicit checks for mbstate_t.\n+\t* acconfig.h (HAVE_MBSTATE_T): Add.\n+\t* config.h.in: Regenerate.\n+\t* acinclude.m4(GLIBCPP_CHECK_WCHAR_T_SUPPORT): Always test for\n+\tmbstate_t.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* testsuite/17_intro/headers_c++.cc: New file.\n+\t* testsuite/17_intro/headers_c.cc: Small changes.\n+\n 2001-01-01  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* tests_flags.in: Fix typo in usage."}, {"sha": "29ffd5e11252ca6e4e4b2a768c63c72839ee8dc7", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -1,5 +1,11 @@\n // acconfig.h symbols and macros for libstdc++ v3 -*- C++ -*-\n \n+// Define if GCC support for __complex__ float is buggy.\n+#undef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n+\n+// Define if GCC support for __complex__ is buggy.\n+#undef _GLIBCPP_BUGGY_COMPLEX\n+\n // Include support for multiple threads, e.g., in the I/O package.\n #undef _GLIBCPP_USE_THREADS\n \n@@ -15,22 +21,25 @@\n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCPP_USE_WCHAR_T\n \n-// Define if lldiv_t exists in stdlib.h.\n-#undef HAVE_LLDIV_T\n+// Define if you have the atan2f function.\n+#undef _GLIBCPP_HAVE_ATAN2F \n \n-/* Define if you have the atan2f function.  */\n-#define _GLIBCPP_HAVE_ATAN2F 1\n+// Define if you have the atan2l function.\n+#undef _GLIBCPP_HAVE_ATAN2L\n \n-/* Define if you have the atan2l function.  */\n-#define _GLIBCPP_HAVE_ATAN2L 1\n+// Define if you have the copysignf function.\n+#undef _GLIBCPP_HAVE_COPYSIGNF\n \n-/* Define if you have the copysignf function.  */\n-#define _GLIBCPP_HAVE_COPYSIGNF 1\n+// Define if lldiv_t exists in stdlib.h.\n+#undef HAVE_LLDIV_T\n+\n+// Define if mbstate_t exists in wchar.h.  */\n+#undef HAVE_MBSTATE_T\n \n-/* Define if you have the modff function.  */\n+// Define if you have the modff function.  */\n #undef HAVE_MODFF\n \n-/* Define if you have the modfl function.  */\n+// Define if you have the modfl function.  */\n #undef HAVE_MODFL\n \n // Define if the compiler/host combination has __builtin_abs\n@@ -75,12 +84,6 @@\n // Define if the compiler/host combination has __builtin_sqrtl\n #undef HAVE___BUILTIN_SQRTL\n \n-// Define if GCC support for __complex__ float is buggy.\n-#undef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n-\n-// Define if GCC support for __complex__ is buggy.\n-#undef _GLIBCPP_BUGGY_COMPLEX\n-\n // Define if LC_MESSAGES is available in <locale.h>.\n #undef HAVE_LC_MESSAGES\n "}, {"sha": "4e5b5aef20264394f357c46f26e7d5af4a3dffa3", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 82, "deletions": 83, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -967,103 +967,102 @@ dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n dnl must have been previously checked.)\n dnl\n dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found \n-dnl Define _GLIBCPP_NEED_MBSTATE_T if mbstate_t is not in wchar.h\n+dnl Define HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n-  if test x$enable_c_mbchar != xno; then\n-\n-    dnl Sanity check for existence of ISO C99 headers for extended encoding.\n-    AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n-    AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n-          \n-    dnl Only continue checking if the ISO C99 headers exist.\n-    if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n+\n+  dnl Test wchar.h for mbstate_t, which is needed for char_traits and\n+  dnl others even if wchar_t support is not on.\n+  AC_MSG_CHECKING([for mbstate_t])\n+  AC_TRY_COMPILE([#include <wchar.h>],\n+  [mbstate_t teststate;], \n+  have_mbstate_t=yes, have_mbstate_t=no)\n+  AC_MSG_RESULT($have_mbstate_t)\n+  if test x\"$have_mbstate_t\" = xyes; then\n+    AC_DEFINE(HAVE_MBSTATE_T)\n+  fi\n+\n+  dnl Sanity check for existence of ISO C99 headers for extended encoding.\n+  AC_CHECK_HEADERS(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n+  AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n   \n-      dnl Test wchar.h for mbstate_t, which is needed for char_traits\n-      dnl and others.\n-      AC_MSG_CHECKING([for mbstate_t])\n-      AC_TRY_COMPILE([#include <wchar.h>],\n-      [mbstate_t teststate;], \n-      use_native_mbstatet=yes, use_native_mbstatet=no)\n-      AC_MSG_RESULT($use_native_mbstatet)\n+  dnl Only continue checking if the ISO C99 headers exist and support is on.\n+  if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes \\\n+     && test x\"$enable_c_mbchar\" != xno; then\n+      \n+    dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n+    dnl numeric_limits can instantiate type_traits<wchar_t>\n+    AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n+    AC_TRY_COMPILE([#include <wchar.h>],\n+    [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n+    has_wchar_minmax=yes, has_wchar_minmax=no)\n+    AC_MSG_RESULT($has_wchar_minmax)\n     \n-      dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n-      dnl numeric_limits can instantiate type_traits<wchar_t>\n-      AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n-      AC_TRY_COMPILE([#include <wchar.h>],\n-      [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n-      has_wchar_minmax=yes, has_wchar_minmax=no)\n-      AC_MSG_RESULT($has_wchar_minmax)\n-    \n-      dnl Test wchar.h for WEOF, which is what we use to determine whether\n-      dnl to specialize for char_traits<wchar_t> or not.\n-      AC_MSG_CHECKING([for WEOF])\n-      AC_TRY_COMPILE([\n-        #include <wchar.h>\n-        #include <stddef.h>],\n-      [wint_t i = WEOF;],\n-      has_weof=yes, has_weof=no)\n-      AC_MSG_RESULT($has_weof)\n+    dnl Test wchar.h for WEOF, which is what we use to determine whether\n+    dnl to specialize for char_traits<wchar_t> or not.\n+    AC_MSG_CHECKING([for WEOF])\n+    AC_TRY_COMPILE([\n+      #include <wchar.h>\n+      #include <stddef.h>],\n+    [wint_t i = WEOF;],\n+    has_weof=yes, has_weof=no)\n+    AC_MSG_RESULT($has_weof)\n   \n-      dnl Tests for wide character functions used in char_traits<wchar_t>.\n-      AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n-      wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n+    dnl Tests for wide character functions used in char_traits<wchar_t>.\n+    AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n+    wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n   \n-      AC_MSG_CHECKING([for ISO C99 wchar_t support])\n-      if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n-         && test x\"$ac_wfuncs\" = xyes; then\n-        ac_isoC99_wchar_t=yes\n-      else\n-        ac_isoC99_wchar_t=no\n-      fi\n-      AC_MSG_RESULT($ac_isoC99_wchar_t)\n+    AC_MSG_CHECKING([for ISO C99 wchar_t support])\n+    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n+       && test x\"$ac_wfuncs\" = xyes; then\n+      ac_isoC99_wchar_t=yes\n+    else\n+      ac_isoC99_wchar_t=no\n+    fi\n+    AC_MSG_RESULT($ac_isoC99_wchar_t)\n   \n-      dnl Use iconv for wchar_t to char conversions. As such, check for \n-      dnl X/Open Portability Guide, version 2 features (XPG2).\n-      AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n-      AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n-\n-      dnl Check for existence of libiconv.a providing XPG2 wchar_t support.\n-      AC_CHECK_LIB(iconv, iconv, libiconv=\"-liconv\")\n-      ac_save_LIBS=\"$LIBS\"\n-      LIBS=\"$LIBS $libiconv\"\n-\n-      AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n-      ac_XPG2funcs=yes, ac_XPG2funcs=no)\n+    dnl Use iconv for wchar_t to char conversions. As such, check for \n+    dnl X/Open Portability Guide, version 2 features (XPG2).\n+    AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n+    AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n+\n+    dnl Check for existence of libiconv.a providing XPG2 wchar_t support.\n+    AC_CHECK_LIB(iconv, iconv, libiconv=\"-liconv\")\n+    ac_save_LIBS=\"$LIBS\"\n+    LIBS=\"$LIBS $libiconv\"\n+\n+    AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n+    ac_XPG2funcs=yes, ac_XPG2funcs=no)\n   \n-      LIBS=\"$ac_save_LIBS\"\n+    LIBS=\"$ac_save_LIBS\"\n \n-      AC_MSG_CHECKING([for XPG2 wchar_t support])\n-      if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n-         && test x\"$ac_XPG2funcs\" = xyes; then\n-        ac_XPG2_wchar_t=yes\n-      else\n-        ac_XPG2_wchar_t=no\n-      fi\n-      AC_MSG_RESULT($ac_XPG2_wchar_t)\n-  \n-      dnl At the moment, only enable wchar_t specializations if all the\n-      dnl above support is present.\n-      AC_MSG_CHECKING([for enabled wchar_t specializations])\n-      if test x\"$ac_isoC99_wchar_t\" = xyes \\\n-         && test x\"$ac_XPG2_wchar_t\" = xyes; then\n-        libinst_wstring_la=\"libinst-wstring.la\"\n-        AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n-        AC_MSG_RESULT(\"yes\")\n-      else\n-        libinst_wstring_la=\"\"\n-        AC_MSG_RESULT(\"no\")\n-      fi\n-      AC_SUBST(libinst_wstring_la)\n+    AC_MSG_CHECKING([for XPG2 wchar_t support])\n+    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n+       && test x\"$ac_XPG2funcs\" = xyes; then\n+      ac_XPG2_wchar_t=yes\n+    else\n+      ac_XPG2_wchar_t=no\n+    fi\n+    AC_MSG_RESULT($ac_XPG2_wchar_t)\n   \n+    dnl At the moment, only enable wchar_t specializations if all the\n+    dnl above support is present.\n+    AC_MSG_CHECKING([for enabled wchar_t specializations])\n+    if test x\"$ac_isoC99_wchar_t\" = xyes \\\n+       && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+      libinst_wstring_la=\"libinst-wstring.la\"\n+      AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n+      AC_MSG_RESULT(\"yes\")\n     else\n-      AC_MSG_WARN([<wchar.h> not found])\n+      libinst_wstring_la=\"\"\n+      AC_MSG_RESULT(\"no\")\n     fi\n-\n+    AC_SUBST(libinst_wstring_la)\n+  \n   else\n-    dnl Wide characters disabled by the user.  Maybe print a warning?\n-    :\n+    dnl Wide characters disabled by the user. \n+    AC_MSG_WARN([wchar_t support disabled.])\n   fi\n ])\n "}, {"sha": "abf64280978057d500c557c40cd082ae4fb0a101", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 82, "deletions": 83, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -979,103 +979,102 @@ dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n dnl must have been previously checked.)\n dnl\n dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found \n-dnl Define _GLIBCPP_NEED_MBSTATE_T if mbstate_t is not in wchar.h\n+dnl Define HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n-  if test x$enable_c_mbchar != xno; then\n-\n-    dnl Sanity check for existence of ISO C99 headers for extended encoding.\n-    AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n-    AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n-          \n-    dnl Only continue checking if the ISO C99 headers exist.\n-    if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n+\n+  dnl Test wchar.h for mbstate_t, which is needed for char_traits and\n+  dnl others even if wchar_t support is not on.\n+  AC_MSG_CHECKING([for mbstate_t])\n+  AC_TRY_COMPILE([#include <wchar.h>],\n+  [mbstate_t teststate;], \n+  have_mbstate_t=yes, have_mbstate_t=no)\n+  AC_MSG_RESULT($have_mbstate_t)\n+  if test x\"$have_mbstate_t\" = xyes; then\n+    AC_DEFINE(HAVE_MBSTATE_T)\n+  fi\n+\n+  dnl Sanity check for existence of ISO C99 headers for extended encoding.\n+  AC_CHECK_HEADERS(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n+  AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n   \n-      dnl Test wchar.h for mbstate_t, which is needed for char_traits\n-      dnl and others.\n-      AC_MSG_CHECKING([for mbstate_t])\n-      AC_TRY_COMPILE([#include <wchar.h>],\n-      [mbstate_t teststate;], \n-      use_native_mbstatet=yes, use_native_mbstatet=no)\n-      AC_MSG_RESULT($use_native_mbstatet)\n+  dnl Only continue checking if the ISO C99 headers exist and support is on.\n+  if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes \\\n+     && test x\"$enable_c_mbchar\" != xno; then\n+      \n+    dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n+    dnl numeric_limits can instantiate type_traits<wchar_t>\n+    AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n+    AC_TRY_COMPILE([#include <wchar.h>],\n+    [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n+    has_wchar_minmax=yes, has_wchar_minmax=no)\n+    AC_MSG_RESULT($has_wchar_minmax)\n     \n-      dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n-      dnl numeric_limits can instantiate type_traits<wchar_t>\n-      AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n-      AC_TRY_COMPILE([#include <wchar.h>],\n-      [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n-      has_wchar_minmax=yes, has_wchar_minmax=no)\n-      AC_MSG_RESULT($has_wchar_minmax)\n-    \n-      dnl Test wchar.h for WEOF, which is what we use to determine whether\n-      dnl to specialize for char_traits<wchar_t> or not.\n-      AC_MSG_CHECKING([for WEOF])\n-      AC_TRY_COMPILE([\n-        #include <wchar.h>\n-        #include <stddef.h>],\n-      [wint_t i = WEOF;],\n-      has_weof=yes, has_weof=no)\n-      AC_MSG_RESULT($has_weof)\n+    dnl Test wchar.h for WEOF, which is what we use to determine whether\n+    dnl to specialize for char_traits<wchar_t> or not.\n+    AC_MSG_CHECKING([for WEOF])\n+    AC_TRY_COMPILE([\n+      #include <wchar.h>\n+      #include <stddef.h>],\n+    [wint_t i = WEOF;],\n+    has_weof=yes, has_weof=no)\n+    AC_MSG_RESULT($has_weof)\n   \n-      dnl Tests for wide character functions used in char_traits<wchar_t>.\n-      AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n-      wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n+    dnl Tests for wide character functions used in char_traits<wchar_t>.\n+    AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n+    wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n   \n-      AC_MSG_CHECKING([for ISO C99 wchar_t support])\n-      if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n-         && test x\"$ac_wfuncs\" = xyes; then\n-        ac_isoC99_wchar_t=yes\n-      else\n-        ac_isoC99_wchar_t=no\n-      fi\n-      AC_MSG_RESULT($ac_isoC99_wchar_t)\n+    AC_MSG_CHECKING([for ISO C99 wchar_t support])\n+    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n+       && test x\"$ac_wfuncs\" = xyes; then\n+      ac_isoC99_wchar_t=yes\n+    else\n+      ac_isoC99_wchar_t=no\n+    fi\n+    AC_MSG_RESULT($ac_isoC99_wchar_t)\n   \n-      dnl Use iconv for wchar_t to char conversions. As such, check for \n-      dnl X/Open Portability Guide, version 2 features (XPG2).\n-      AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n-      AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n-\n-      dnl Check for existence of libiconv.a providing XPG2 wchar_t support.\n-      AC_CHECK_LIB(iconv, iconv, libiconv=\"-liconv\")\n-      ac_save_LIBS=\"$LIBS\"\n-      LIBS=\"$LIBS $libiconv\"\n-\n-      AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n-      ac_XPG2funcs=yes, ac_XPG2funcs=no)\n+    dnl Use iconv for wchar_t to char conversions. As such, check for \n+    dnl X/Open Portability Guide, version 2 features (XPG2).\n+    AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n+    AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n+\n+    dnl Check for existence of libiconv.a providing XPG2 wchar_t support.\n+    AC_CHECK_LIB(iconv, iconv, libiconv=\"-liconv\")\n+    ac_save_LIBS=\"$LIBS\"\n+    LIBS=\"$LIBS $libiconv\"\n+\n+    AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n+    ac_XPG2funcs=yes, ac_XPG2funcs=no)\n   \n-      LIBS=\"$ac_save_LIBS\"\n+    LIBS=\"$ac_save_LIBS\"\n \n-      AC_MSG_CHECKING([for XPG2 wchar_t support])\n-      if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n-         && test x\"$ac_XPG2funcs\" = xyes; then\n-        ac_XPG2_wchar_t=yes\n-      else\n-        ac_XPG2_wchar_t=no\n-      fi\n-      AC_MSG_RESULT($ac_XPG2_wchar_t)\n-  \n-      dnl At the moment, only enable wchar_t specializations if all the\n-      dnl above support is present.\n-      AC_MSG_CHECKING([for enabled wchar_t specializations])\n-      if test x\"$ac_isoC99_wchar_t\" = xyes \\\n-         && test x\"$ac_XPG2_wchar_t\" = xyes; then\n-        libinst_wstring_la=\"libinst-wstring.la\"\n-        AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n-        AC_MSG_RESULT(\"yes\")\n-      else\n-        libinst_wstring_la=\"\"\n-        AC_MSG_RESULT(\"no\")\n-      fi\n-      AC_SUBST(libinst_wstring_la)\n+    AC_MSG_CHECKING([for XPG2 wchar_t support])\n+    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n+       && test x\"$ac_XPG2funcs\" = xyes; then\n+      ac_XPG2_wchar_t=yes\n+    else\n+      ac_XPG2_wchar_t=no\n+    fi\n+    AC_MSG_RESULT($ac_XPG2_wchar_t)\n   \n+    dnl At the moment, only enable wchar_t specializations if all the\n+    dnl above support is present.\n+    AC_MSG_CHECKING([for enabled wchar_t specializations])\n+    if test x\"$ac_isoC99_wchar_t\" = xyes \\\n+       && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+      libinst_wstring_la=\"libinst-wstring.la\"\n+      AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n+      AC_MSG_RESULT(\"yes\")\n     else\n-      AC_MSG_WARN([<wchar.h> not found])\n+      libinst_wstring_la=\"\"\n+      AC_MSG_RESULT(\"no\")\n     fi\n-\n+    AC_SUBST(libinst_wstring_la)\n+  \n   else\n-    dnl Wide characters disabled by the user.  Maybe print a warning?\n-    :\n+    dnl Wide characters disabled by the user. \n+    AC_MSG_WARN([wchar_t support disabled.])\n   fi\n ])\n "}, {"sha": "7509bafc09aa6ab0169912ec7232b2b74361387f", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -3,6 +3,12 @@\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n+// Define if GCC support for __complex__ float is buggy.\n+#undef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n+\n+// Define if GCC support for __complex__ is buggy.\n+#undef _GLIBCPP_BUGGY_COMPLEX\n+\n // Include support for multiple threads, e.g., in the I/O package.\n #undef _GLIBCPP_USE_THREADS\n \n@@ -18,10 +24,13 @@\n // Define if lldiv_t exists in stdlib.h.\n #undef HAVE_LLDIV_T\n \n-/* Define if you have the modff function.  */\n+// Define if mbstate_t exists in wchar.h.  */\n+#undef HAVE_MBSTATE_T\n+\n+// Define if you have the modff function.  */\n #undef HAVE_MODFF\n \n-/* Define if you have the modfl function.  */\n+// Define if you have the modfl function.  */\n #undef HAVE_MODFL\n \n // Define if the compiler/host combination has __builtin_abs\n@@ -66,12 +75,6 @@\n // Define if the compiler/host combination has __builtin_sqrtl\n #undef HAVE___BUILTIN_SQRTL\n \n-// Define if GCC support for __complex__ float is buggy.\n-#undef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n-\n-// Define if GCC support for __complex__ is buggy.\n-#undef _GLIBCPP_BUGGY_COMPLEX\n-\n // Define if LC_MESSAGES is available in <locale.h>.\n #undef HAVE_LC_MESSAGES\n \n@@ -531,6 +534,9 @@\n /* Define if you have the <unistd.h> header file.  */\n #undef HAVE_UNISTD_H\n \n+/* Define if you have the <wchar.h> header file.  */\n+#undef HAVE_WCHAR_H\n+\n /* Define if you have the m library (-lm).  */\n #undef HAVE_LIBM\n "}, {"sha": "bcade8afae837e0830c0db3feb19458b4dcc9af7", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1106, "deletions": 1088, "changes": 2194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=7b331228508a3e8fedc13678ba64ac635672ccd7"}, {"sha": "f502f65a08e697a1819e06d777c6642cac6f3a5e", "filename": "libstdc++-v3/include/c_std/bits/std_cstdio.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,9 @@\n #ifndef _CPP_CSTDIO\n #define _CPP_CSTDIO 1\n \n+#include <bits/c++config.h>\n #include <bits/std_cstdarg.h>\n+#include <bits/std_cstddef.h>\n \n #pragma GCC system_header\n #include <stdio.h>"}, {"sha": "fa5c72e2ae4053b42f1f230358b7a436c3ee7255", "filename": "libstdc++-v3/include/c_std/bits/std_cstdlib.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,10 +37,14 @@\n #define _CPP_CSTDLIB 1\n \n #include <bits/c++config.h>\n+#include <bits/std_cstddef.h>\n \n #pragma GCC system_header\n #include <stdlib.h>\n \n+// Get rid of those macros defined in <stdio.h> in lieu of real functions.\n+#undef mblen\n+\n namespace std \n {\n   using ::div_t;\n@@ -85,9 +89,6 @@ namespace std\n   extern \"C\" long int labs(long int); \n   extern \"C\" div_t div(int, int); \n   extern \"C\" ldiv_t ldiv(long int, long int); \n-#ifdef mblen\n-#undef mblen\n-#endif\n   extern \"C\" int mblen(const char*, size_t); \n   extern \"C\" int mbtowc(wchar_t*, const char*, size_t); \n   extern \"C\" int wctomb(char*, wchar_t); "}, {"sha": "a9b907f3111e0e6e0cda082d8fab52a6b9e6d06b", "filename": "libstdc++-v3/include/c_std/bits/std_cstring.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,6 +37,7 @@\n #define _CPP_CSTRING 1\n \n #include <bits/c++config.h>\n+#include <bits/std_cstddef.h>\n \n #pragma GCC system_header\n #include <string.h>"}, {"sha": "031274b088af50be40d84ad8050f234764160cd9", "filename": "libstdc++-v3/include/c_std/bits/std_ctime.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_ctime.h?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,6 +36,9 @@\n #ifndef _CPP_CTIME\n #define _CPP_CTIME 1\n \n+#include <bits/c++config.h>\n+#include <bits/std_cstddef.h>\n+\n #pragma GCC system_header\n #include <time.h>\n "}, {"sha": "583f885c679f8d518c13581b9622c1d01a15ebca", "filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h", "status": "modified", "additions": 22, "deletions": 38, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,20 +37,39 @@\n #define _CPP_CWCHAR 1\n \n #include <bits/c++config.h>\n+#include <bits/std_cstddef.h>\n #include <bits/std_cstdio.h>\n #include <bits/std_cstdarg.h>\n \n-#if _GLIBCPP_USE_WCHAR_T\n+#if _GLIBCPP_HAVE_WCHAR_H\n #pragma GCC system_header\n #include <wchar.h>\n+#endif\n+\n+// Need to do a bit of trickery here with mbstate_t as char_traits\n+// assumes it is in wchar.h, regardless of wchar_t specializations.\n+#ifndef _GLIBCPP_HAVE_MBSTATE_T\n+extern \"C\" \n+{\n+  typedef struct \n+  {\n+    int __fill[6];\n+  } mbstate_t;\n+}\n+#endif\n+\n+namespace std \n+{\n+  using ::mbstate_t;\n+}\n \n // Get rid of those macros defined in <wchar.h> in lieu of real functions.\n #undef getwchar\n \n+#if _GLIBCPP_USE_WCHAR_T\n namespace std\n {\n   using ::wint_t;\n-  using ::mbstate_t;\n \n   extern \"C\" wint_t btowc(int); \n   extern \"C\" int wctob(wint_t); \n@@ -117,41 +136,6 @@ namespace std\n   extern \"C\" unsigned long long int wcstoull(const wchar_t*, wchar_t**, int); \n #endif\n }\n-\n-#else\n-extern \"C\" \n-{\n-  typedef struct \n-  {\n-    int __fill[6];\n-  } mbstate_t;\n-}\n-\n-namespace std \n-{\n-  using ::mbstate_t;\n-}\n #endif //_GLIBCPP_USE_WCHAR_T\n \n-\n #endif \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "7fcdc5eea0fe33ad4978db9b54709ea0767d79ee", "filename": "libstdc++-v3/testsuite/17_intro/header_cstdio.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdio.cc?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -0,0 +1,35 @@\n+// 2000-01-01 bkoz\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 17.4.1.2 Headers, cstdio\n+\n+#include <cstdio>\n+\n+\n+int main(void)\n+{\n+  // Make sure size_t is in namespace std\n+  std::size_t i = 5;\n+  return 0;\n+}\n+\n+\n+\n+"}, {"sha": "43a9648256ffe5eb241d8c58ed2f14a9ab17affa", "filename": "libstdc++-v3/testsuite/17_intro/header_cstdlib.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdlib.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdlib.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdlib.cc?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -0,0 +1,35 @@\n+// 2000-01-01 bkoz\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 17.4.1.2 Headers, cstdlib\n+\n+#include <cstdlib>\n+\n+\n+int main(void)\n+{\n+  // Make sure size_t is in namespace std\n+  std::size_t i = 5;\n+  return 0;\n+}\n+\n+\n+\n+"}, {"sha": "f1661cd5fb999efe735a2f97a93af07dd6f878ed", "filename": "libstdc++-v3/testsuite/17_intro/header_cstring.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstring.cc?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -0,0 +1,35 @@\n+// 2000-01-01 bkoz\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 17.4.1.2 Headers, cstring\n+\n+#include <cstring>\n+\n+\n+int main(void)\n+{\n+  // Make sure size_t is in namespace std\n+  std::size_t i = std::strlen(\"tibet shop/san francisco (415) 982-0326\");\n+  return 0;\n+}\n+\n+\n+\n+"}, {"sha": "1cc6f4e12dce5af0b81032a1df6757fceecb1b43", "filename": "libstdc++-v3/testsuite/17_intro/header_ctime.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ctime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ctime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ctime.cc?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -0,0 +1,35 @@\n+// 2000-01-01 bkoz\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 17.4.1.2 Headers, ctime\n+\n+#include <ctime>\n+\n+\n+int main(void)\n+{\n+  // Make sure size_t is in namespace std\n+  std::size_t i = 5;\n+  return 0;\n+}\n+\n+\n+\n+"}, {"sha": "45adad8c97f9c3f56d46f6b3d23087bd7d5ee499", "filename": "libstdc++-v3/testsuite/17_intro/header_cwchar.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -0,0 +1,35 @@\n+// 2000-01-01 bkoz\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 17.4.1.2 Headers, cwchar\n+\n+#include <cwchar>\n+\n+\n+int main(void)\n+{\n+  // Make sure size_t is in namespace std\n+  std::size_t i = 5;\n+  return 0;\n+}\n+\n+\n+\n+"}, {"sha": "8fe1836afb998910d02896ec267a9af83ea9d699", "filename": "libstdc++-v3/testsuite/17_intro/headers_c++.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c%2B%2B.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c%2B%2B.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c%2B%2B.cc?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -0,0 +1,70 @@\n+// 2001-01-01 bkoz\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 17.4.1.2 Headers\n+\n+// This file tests C++ inclusion then C inclusion.\n+\n+// C++ headers\n+#include <cassert>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfloat>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstddef>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctime>\n+\n+// \"C\" headers\n+#include <assert.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <float.h>\n+#include <iso646.h>\n+#include <limits.h>\n+#include <locale.h>\n+#include <math.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stdarg.h>\n+#include <stddef.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+// \"C++\" headers that might not work if wchar_t support is disabled.\n+#include <bits/c++config.h>\n+#if _GLIBCPP_USE_WCHAR_T\n+  #include <cwchar>\n+  #include <cwctype>\n+  #include <wchar.h>\n+  #include <wctype.h>\n+#endif\n+\n+int main() { }"}, {"sha": "e2d671d7fe9ebaa15e8692a4353f72033d16999e", "filename": "libstdc++-v3/testsuite/17_intro/headers_c.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b331228508a3e8fedc13678ba64ac635672ccd7/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders_c.cc?ref=7b331228508a3e8fedc13678ba64ac635672ccd7", "patch": "@@ -1,6 +1,6 @@\n // 2000-12-20 bkoz\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,6 +20,7 @@\n \n // 17.4.1.2 Headers\n \n+// This file tests C inclusion then C++ inclusion.\n \n // \"C\" headers\n #include <assert.h>\n@@ -39,7 +40,7 @@\n #include <string.h>\n #include <time.h>\n \n-// \"C\" headers\n+// C++ headers\n #include <cassert>\n #include <cctype>\n #include <cerrno>\n@@ -61,10 +62,9 @@\n #include <bits/c++config.h>\n #if _GLIBCPP_USE_WCHAR_T\n   #include <wchar.h>\n-  #include <cwchar>\n   #include <wctype.h>\n+  #include <cwchar>\n   #include <cwctype>\n #endif\n \n int main() { }\n-"}]}