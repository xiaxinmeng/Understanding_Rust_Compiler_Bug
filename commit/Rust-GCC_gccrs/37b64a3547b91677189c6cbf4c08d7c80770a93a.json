{"sha": "37b64a3547b91677189c6cbf4c08d7c80770a93a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiNjRhMzU0N2I5MTY3NzE4OWM2Y2JmNGMwOGQ3YzgwNzcwYTkzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-23T08:49:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-23T08:49:48Z"}, "message": "fold-const: Fix ICE in fold_read_from_constant_string on invalid code [PR99204]\n\nfold_read_from_constant_string and expand_expr_real_1 have code to optimize\nconstant reads from string (tree vs. rtl).\nIf the STRING_CST array type has zero low bound, index is fold converted to\nsizetype and so the compare_tree_int works fine, but if it has some other\nlow bound, it calls size_diffop_loc and that function from 2 sizetype\noperands creates a ssizetype difference.  expand_expr_real_1 then uses\ntree_fits_uhwi_p + compare_tree_int and so works fine, but fold-const.c\nonly checked if index is INTEGER_CST and calls compare_tree_int, which means\nfor negative index it will succeed and result in UB in the compiler.\n\n2021-02-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/99204\n\t* fold-const.c (fold_read_from_constant_string): Check that\n\ttree_fits_uhwi_p (index) rather than just that index is INTEGER_CST.\n\n\t* gfortran.dg/pr99204.f90: New test.", "tree": {"sha": "f0cba1525653beae219f2f3379164de524cbaf6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0cba1525653beae219f2f3379164de524cbaf6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b64a3547b91677189c6cbf4c08d7c80770a93a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b64a3547b91677189c6cbf4c08d7c80770a93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b64a3547b91677189c6cbf4c08d7c80770a93a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b64a3547b91677189c6cbf4c08d7c80770a93a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efa64fcce12074dd542670feb02eaee53e810a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa64fcce12074dd542670feb02eaee53e810a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa64fcce12074dd542670feb02eaee53e810a30"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "afc3b7f8772a1fd8754fe4572c497b9dd2100390", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b64a3547b91677189c6cbf4c08d7c80770a93a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b64a3547b91677189c6cbf4c08d7c80770a93a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=37b64a3547b91677189c6cbf4c08d7c80770a93a", "patch": "@@ -15433,7 +15433,7 @@ fold_read_from_constant_string (tree exp)\n       if (string\n \t  && TYPE_MODE (TREE_TYPE (exp)) == TYPE_MODE (TREE_TYPE (TREE_TYPE (string)))\n \t  && TREE_CODE (string) == STRING_CST\n-\t  && TREE_CODE (index) == INTEGER_CST\n+\t  && tree_fits_uhwi_p (index)\n \t  && compare_tree_int (index, TREE_STRING_LENGTH (string)) < 0\n \t  && is_int_mode (TYPE_MODE (TREE_TYPE (TREE_TYPE (string))),\n \t\t\t  &char_mode)"}, {"sha": "9b6f27fa3d21ec0ee6bf326c1f9351d1ce772ee1", "filename": "gcc/testsuite/gfortran.dg/pr99204.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b64a3547b91677189c6cbf4c08d7c80770a93a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr99204.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b64a3547b91677189c6cbf4c08d7c80770a93a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr99204.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr99204.f90?ref=37b64a3547b91677189c6cbf4c08d7c80770a93a", "patch": "@@ -0,0 +1,10 @@\n+! PR tree-optimization/99204\n+! { dg-do compile }\n+! { dg-options \"-O2 -w\" }\n+\n+program pr99204\n+  character :: c\n+  integer :: i = -12345678\n+  c = 'abc'(i:i)\n+  print *, c\n+end"}]}