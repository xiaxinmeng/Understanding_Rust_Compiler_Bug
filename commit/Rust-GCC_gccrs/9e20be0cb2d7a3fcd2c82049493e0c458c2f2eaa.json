{"sha": "9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyMGJlMGNiMmQ3YTNmY2QyYzgyMDQ5NDkzZTBjNDU4YzJmMmVhYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-08-09T00:01:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-08-09T00:01:12Z"}, "message": "i386.c (legitimate_constant_p): UNSPEC_TP is not legitimate constant.\n\n\t* config/i386/i386.c (legitimate_constant_p): UNSPEC_TP is not\n\tlegitimate constant.\n\t(legitimate_pic_operand_p): Neither pic operand.\n\t(legitimate_address_p): But legitimate address.\n\t(get_thread_pointer): Generate MEM/u instead of CONST around\n\tUNSPEC_TP.\n\t(print_operand): Remove printing of UNSPEC_TP.\n\t(print_operand_address): And print it here.\n\n\t* gcc.dg/tls/opt-2.c: New test.\n\nFrom-SVN: r56143", "tree": {"sha": "4e4f70ef0592cbe7fc3d67babccc468bbaf7659a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e4f70ef0592cbe7fc3d67babccc468bbaf7659a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa/comments", "author": null, "committer": null, "parents": [{"sha": "7b9be5c7cbb31b0aad7ca2ce3b0d31b322aa2d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9be5c7cbb31b0aad7ca2ce3b0d31b322aa2d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9be5c7cbb31b0aad7ca2ce3b0d31b322aa2d42"}], "stats": {"total": 108, "additions": 91, "deletions": 17}, "files": [{"sha": "9e0b0853968669bf7b0244f69990e417e9ef42aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa", "patch": "@@ -1,4 +1,16 @@\n+2002-08-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (legitimate_constant_p): UNSPEC_TP is not\n+\tlegitimate constant.\n+\t(legitimate_pic_operand_p): Neither pic operand.\n+\t(legitimate_address_p): But legitimate address.\n+\t(get_thread_pointer): Generate MEM/u instead of CONST around\n+\tUNSPEC_TP.\n+\t(print_operand): Remove printing of UNSPEC_TP.\n+\t(print_operand_address): And print it here.\n+\n 2002-08-08  Devang Patel  <dpatel@apple.com>\n+\n \t* objc/objc-act.c (build_selector_translation_table): Issue warning, \n \twhen  -Wselector is used,if method for which selector is being \n \tcreated does not exist."}, {"sha": "0c1ed9fa29ed2bd5c3c85861c20d6a661e4b68d9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa", "patch": "@@ -4850,8 +4850,6 @@ legitimate_constant_p (x)\n \t  {\n \t  case UNSPEC_TPOFF:\n \t    return local_exec_symbolic_operand (XVECEXP (inner, 0, 0), Pmode);\n-\t  case UNSPEC_TP:\n-\t    return true;\n \t  default:\n \t    return false;\n \t  }\n@@ -4914,8 +4912,6 @@ legitimate_pic_operand_p (x)\n \t  {\n \t  case UNSPEC_TPOFF:\n \t    return local_exec_symbolic_operand (XVECEXP (inner, 0, 0), Pmode);\n-\t  case UNSPEC_TP:\n-\t    return true;\n \t  default:\n \t    return false;\n \t  }\n@@ -5054,6 +5050,13 @@ legitimate_address_p (mode, addr, strict)\n       debug_rtx (addr);\n     }\n \n+  if (GET_CODE (addr) == UNSPEC && XINT (addr, 1) == UNSPEC_TP)\n+    {\n+      if (TARGET_DEBUG_ADDR)\n+\tfprintf (stderr, \"Success.\\n\");\n+      return TRUE;\n+    }\n+\n   if (ix86_decompose_address (addr, &parts) <= 0)\n     {\n       reason = \"decomposition failed\";\n@@ -5521,7 +5524,9 @@ get_thread_pointer ()\n   rtx tp;\n \n   tp = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx), UNSPEC_TP);\n-  tp = gen_rtx_CONST (Pmode, tp);\n+  tp = gen_rtx_MEM (Pmode, tp);\n+  RTX_UNCHANGING_P (tp) = 1;\n+  set_mem_alias_set (tp, ix86_GOT_alias_set ());\n   tp = force_reg (Pmode, tp);\n \n   return tp;\n@@ -6611,17 +6616,6 @@ print_operand (file, x, code)\n       fprintf (file, \"%s\", dstr);\n     }\n \n-  else if (GET_CODE (x) == CONST\n-\t   && GET_CODE (XEXP (x, 0)) == UNSPEC\n-\t   && XINT (XEXP (x, 0), 1) == UNSPEC_TP)\n-    {\n-      if (ASSEMBLER_DIALECT == ASM_INTEL)\n-\tfputs (\"DWORD PTR \", file);\n-      if (ASSEMBLER_DIALECT == ASM_ATT || USER_LABEL_PREFIX[0] == 0)\n-\tputc ('%', file);\n-      fputs (\"gs:0\", file);\n-    }\n-\n   else\n     {\n       if (code != 'P')\n@@ -6660,6 +6654,16 @@ print_operand_address (file, addr)\n   rtx base, index, disp;\n   int scale;\n \n+  if (GET_CODE (addr) == UNSPEC && XINT (addr, 1) == UNSPEC_TP)\n+    {\n+      if (ASSEMBLER_DIALECT == ASM_INTEL)\n+\tfputs (\"DWORD PTR \", file);\n+      if (ASSEMBLER_DIALECT == ASM_ATT || USER_LABEL_PREFIX[0] == 0)\n+\tputc ('%', file);\n+      fputs (\"gs:0\", file);\n+      return;\n+    }\n+\n   if (! ix86_decompose_address (addr, &parts))\n     abort ();\n "}, {"sha": "3e18dc1c34075f534ac4490f0f836953289cbdfe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa", "patch": "@@ -1,5 +1,10 @@\n+2002-08-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/tls/opt-2.c: New test.\n+\n 2002-08-08  Devang Patel  <dpatel@apple.com>\n-\t*objc.dg/selector-1.m : New test\n+\n+\t* objc.dg/selector-1.m : New test\n \t\n 2002-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n "}, {"sha": "713fb7f360c2944ddcac3851bc3d7671881dd848", "filename": "gcc/testsuite/gcc.dg/tls/opt-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-2.c?ref=9e20be0cb2d7a3fcd2c82049493e0c458c2f2eaa", "patch": "@@ -0,0 +1,53 @@\n+/* This testcase generated invalid assembly on IA-32,\n+   since %gs:0 memory load was not exposed to the compiler\n+   as memory load and mem to mem moves are not possible\n+   on IA-32.  */\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -ftls-model=initial-exec\" } */\n+/* { dg-options \"-O2 -ftls-model=initial-exec -march=i686\" { target i?86-*-* } } */\n+\n+__thread int thr;\n+\n+struct A\n+{\n+  unsigned int a, b, c, d, e;\n+};\n+\n+int bar (int x, unsigned long y, void *z)\n+{\n+  return 0;\n+}\n+\n+int\n+foo (int x, int y, const struct A *z)\n+{\n+  struct A b;\n+  int d;\n+\n+  b = *z;\n+  d = bar (x, y, &b);\n+  if (d == 0 && y == 0x5402)\n+    {\n+      int e = thr;\n+      d = bar (x, 0x5401, &b);\n+      if (d)\n+\t{\n+\t  thr = e;\n+\t  d = 0;\n+\t}\n+      else if ((z->c & 0600) != (b.c & 0600)\n+\t       || ((z->c & 060) && ((z->c & 060) != (b.c & 060))))\n+\t{\n+\t  thr = 22;\n+\t  d = -1;\n+\t}\n+    }\n+\n+  return d;\n+}\n+\n+int main (void)\n+{\n+  foo (1, 2, 0);\n+  return 0;\n+}"}]}