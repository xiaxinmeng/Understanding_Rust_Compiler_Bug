{"sha": "bb81f9a082bc39f847937cc427385bfdd70dc237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI4MWY5YTA4MmJjMzlmODQ3OTM3Y2M0MjczODViZmRkNzBkYzIzNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-25T19:00:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-25T19:00:52Z"}, "message": "re PR libstdc++/39880 (Specialisation is_error_code_enum<errc> should not exist)\n\n2009-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/39880\n\tPR libstdc++/39881\n\tPR libstdc++/39882\n\t* include/std/system_error (is_error_code_enum<errc>): Remove.\n\t(error_condition<>::error_condition(_ErrorCodeEnum,)\n\terror_condition<>::operator=(_ErrorCodeEnum)): Use make_error_condition.\n\t(error_code<>::error_code(_ErrorCodeEnum,),\n\terror_code<>::operator=(_ErrorCodeEnum)): Use make_error_code.\n\t* testsuite/19_diagnostics/system_error/39880.cc: New.\n\t* testsuite/19_diagnostics/error_condition/modifiers/39881.cc:\n\tLikewise.\n\t* testsuite/19_diagnostics/error_condition/cons/39881.cc: Likewise.\n\t* testsuite/19_diagnostics/error_code/modifiers/39882.cc: Likewise.\n\t* testsuite/19_diagnostics/error_code/cons/39882.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/error_code.cc:\n\tAdjust.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/error_code.cc:\n\tLikewise.\n\t* testsuite/19_diagnostics/error_code/cons/1.cc: Likewise.\n\t* testsuite/19_diagnostics/error_code/operators/bool.cc: Likewise.\n\t* testsuite/19_diagnostics/error_code/operators/equal.cc: Likewise.\n\t* testsuite/19_diagnostics/error_code/operators/not_equal.cc:\n\tLikewise.\n\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Likewise.\n\t* testsuite/19_diagnostics/system_error/cons-1.cc: Likewise.\n\t* testsuite/19_diagnostics/system_error/what-4.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n\nFrom-SVN: r146780", "tree": {"sha": "dff3f878c04d4a0551eac623b67d5609ced0bca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff3f878c04d4a0551eac623b67d5609ced0bca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb81f9a082bc39f847937cc427385bfdd70dc237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb81f9a082bc39f847937cc427385bfdd70dc237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb81f9a082bc39f847937cc427385bfdd70dc237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb81f9a082bc39f847937cc427385bfdd70dc237/comments", "author": null, "committer": null, "parents": [{"sha": "813b9e7e207682f15e79337a239a78d5b9c12d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813b9e7e207682f15e79337a239a78d5b9c12d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/813b9e7e207682f15e79337a239a78d5b9c12d43"}], "stats": {"total": 327, "additions": 297, "deletions": 30}, "files": [{"sha": "b9902a137c175229167fd5af53c6d41c68d45c4a", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -51,10 +51,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp>\n     struct is_error_code_enum : public false_type { };\n \n-  template<> \n-    struct is_error_code_enum<errc>\n-    : public true_type { };\n-\n   /// is_error_condition_enum\n   template<typename _Tp>\n     struct is_error_condition_enum : public false_type { };\n@@ -108,21 +104,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   _GLIBCXX_CONST const error_category& system_category() throw ();\n   _GLIBCXX_CONST const error_category& generic_category() throw ();\n \n+  error_code make_error_code(errc);\n+\n   /// error_code\n   // Implementation-specific error identification\n   struct error_code\n   {\n     error_code()\n-      : _M_value(0), _M_cat(&system_category()) { }\n+    : _M_value(0), _M_cat(&system_category()) { }\n \n     error_code(int __v, const error_category& __cat)\n     : _M_value(__v), _M_cat(&__cat) { }\n \n     template<typename _ErrorCodeEnum>\n       error_code(_ErrorCodeEnum __e,\n       typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type* = 0)\n-      : _M_value(static_cast<int>(__e)), _M_cat(&generic_category())\n-      { }\n+      { *this = make_error_code(__e); }\n \n     void \n     assign(int __v, const error_category& __cat)\n@@ -140,10 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,\n \t\t\t error_code&>::type\n       operator=(_ErrorCodeEnum __e)\n-      {\n-\tassign(static_cast<int>(__e), generic_category());\n-\treturn *this;\n-      }\n+      { return *this = make_error_code(__e); }\n \n     int\n     value() const { return _M_value; }\n@@ -192,12 +186,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)\n     { return (__os << __e.category().name() << ':' << __e.value()); }\n \n+  error_condition make_error_condition(errc);\n \n   /// error_condition\n   // Portable error identification\n   struct error_condition \n   {\n-    error_condition() : _M_value(0), _M_cat(&generic_category()) { }\n+    error_condition()\n+    : _M_value(0), _M_cat(&generic_category()) { }\n \n     error_condition(int __v, const error_category& __cat)     \n     : _M_value(__v), _M_cat(&__cat) { }\n@@ -206,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       error_condition(_ErrorConditionEnum __e,\n \t\t      typename enable_if<is_error_condition_enum\n \t\t                      <_ErrorConditionEnum>::value>::type* = 0)\n-\t: _M_value(static_cast<int>(__e)), _M_cat(&generic_category()) { }\n+      { *this = make_error_condition(__e); }\n \n     void\n     assign(int __v, const error_category& __cat)\n@@ -220,10 +216,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename enable_if<is_error_condition_enum\n \t\t\t <_ErrorConditionEnum>::value, error_condition&>::type\n       operator=(_ErrorConditionEnum __e)\n-      {\n-\tassign(static_cast<int>(__e), generic_category());\n-\treturn *this;\n-      }\n+      { return *this = make_error_condition(__e); }\n \n     void \n     clear()"}, {"sha": "a874814f42d256ba225216a07933ee7826ef30b7", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -32,7 +32,7 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 76 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 72 }\n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n // { dg-error \"first required here\" \"\" { target *-*-* } 30 }\n // { dg-excess-errors \"copy constructor\" }"}, {"sha": "7cd280aae39a77c65c6eb59606437ecdaf94b59a", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -37,7 +37,7 @@ int main()\n   VERIFY( e2.category() == cat );\n \n   // 3\n-  std::error_code e3(std::errc::operation_not_supported);\n+  std::error_code e3(std::make_error_code(std::errc::operation_not_supported));\n   VERIFY( e3.value() == int(std::errc::operation_not_supported) );\n   VERIFY( e3.category() == std::generic_category() );\n "}, {"sha": "9d5c2e3338e0cf491904bcb15467447aa0026bd6", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/39882.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F39882.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F39882.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F39882.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+enum my_errc { my_err = 0 };\n+\n+class my_error_category_impl\n+: public std::error_category\n+{\n+public:\n+  const char* name() const { return \"\"; }\n+  std::string message(int) const { return \"\"; }\n+} my_error_category_instance;\n+\n+std::error_code\n+make_error_code(my_errc e)\n+{\n+  return std::error_code(static_cast<int>(e),\n+\t\t\t my_error_category_instance);\n+}\n+\n+namespace std\n+{\n+  template<>\n+    struct is_error_code_enum<my_errc>\n+    : public true_type {};\n+}\n+\n+// libstdc++/39882\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::error_code ec1(my_err);\n+  VERIFY( ec1 == make_error_code(my_err) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "880a93655e9294e35dffa262bc0b319bde0ac9f5", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/modifiers/39882.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fmodifiers%2F39882.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fmodifiers%2F39882.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fmodifiers%2F39882.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -0,0 +1,61 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+enum my_errc { my_err = 0 };\n+\n+class my_error_category_impl\n+: public std::error_category\n+{\n+public:\n+  const char* name() const { return \"\"; }\n+  std::string message(int) const { return \"\"; }\n+} my_error_category_instance;\n+\n+std::error_code\n+make_error_code(my_errc e)\n+{\n+  return std::error_code(static_cast<int>(e),\n+\t\t\t my_error_category_instance);\n+}\n+\n+namespace std\n+{\n+  template<>\n+    struct is_error_code_enum<my_errc>\n+    : public true_type {};\n+}\n+\n+// libstdc++/39882\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::error_code ec2;\n+  ec2 = my_err;\n+  VERIFY( ec2 == make_error_code(my_err) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "51536032728c9a543f741258995ee8ad6ca47760", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/bool.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -34,7 +34,7 @@ int main()\n     }\n \n   // 2\n-  std::error_code e2(std::errc::operation_not_supported);\n+  std::error_code e2(std::make_error_code(std::errc::operation_not_supported));\n   if (e2)\n     {\n       VERIFY( true );"}, {"sha": "880434c75026617a953ec327b7392d7bc27c2960", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -27,7 +27,7 @@ int main()\n   bool test __attribute__((unused)) = true;\n \n   std::error_code e1;\n-  std::error_code e2(std::errc::operation_not_supported);\n+  std::error_code e2(std::make_error_code(std::errc::operation_not_supported));\n \n   VERIFY( e1 == e1 );\n   VERIFY( !(e1 == e2) );"}, {"sha": "bda2ee30e52a598c3ceb374211dd51d8571e7efd", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/not_equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -27,7 +27,7 @@ int main()\n   bool test __attribute__((unused)) = true;\n \n   std::error_code e1;\n-  std::error_code e2(std::errc::operation_not_supported);\n+  std::error_code e2(std::make_error_code(std::errc::operation_not_supported));\n \n   VERIFY( !(e1 != e1) );\n   VERIFY( e1 != e2 );"}, {"sha": "7931f174063f6abfa34ae393039a84ce9beb16da", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/cons/39881.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F39881.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F39881.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F39881.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+enum my_errc { my_err = 0 };\n+\n+class my_error_category_impl\n+: public std::error_category\n+{\n+public:\n+  const char* name() const { return \"\"; }\n+  std::string message(int) const { return \"\"; }\n+} my_error_category_instance;\n+\n+std::error_condition\n+make_error_condition(my_errc e)\n+{\n+  return std::error_condition(static_cast<int>(e),\n+\t\t\t      my_error_category_instance);\n+}\n+\n+namespace std\n+{\n+  template<>\n+    struct is_error_condition_enum<my_errc>\n+    : public true_type { };\n+}\n+\n+// libstdc++/39881\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::error_condition ec1(my_err);\n+  VERIFY( ec1 == make_error_condition(my_err) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0178a91c4182d43e7cd1449b984f2bfade12631c", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/modifiers/39881.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fmodifiers%2F39881.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fmodifiers%2F39881.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fmodifiers%2F39881.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -0,0 +1,61 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+enum my_errc { my_err = 0 };\n+\n+class my_error_category_impl\n+: public std::error_category\n+{\n+public:\n+  const char* name() const { return \"\"; }\n+  std::string message(int) const { return \"\"; }\n+} my_error_category_instance;\n+\n+std::error_condition\n+make_error_condition(my_errc e)\n+{\n+  return std::error_condition(static_cast<int>(e),\n+\t\t\t      my_error_category_instance);\n+}\n+\n+namespace std\n+{\n+  template<>\n+    struct is_error_condition_enum<my_errc>\n+    : public true_type { };\n+}\n+\n+// libstdc++/39881\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::error_condition ec2;\n+  ec2 = my_err;\n+  VERIFY( ec2 == make_error_condition(my_err) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a6ac7470c05f6456f8161e9c9783b8f378aa7445", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/39880.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2F39880.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2F39880.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2F39880.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <system_error>\n+\n+// libstdc++/39880\n+void test01()\n+{\n+  std::error_code ec;\n+  if (ec == std::errc::not_supported)\n+    { }\n+}"}, {"sha": "42f29798570de70064ac2bfc3531294cff0cd1f8", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/cons-1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -26,7 +26,8 @@ int main()\n {\n   bool test __attribute__((unused)) = true;\n   const std::string s(\"too late: boulangerie out of pain au raisin\");\n-  const std::error_code e(std::errc::operation_not_supported);\n+  const std::error_code\n+    e(std::make_error_code(std::errc::operation_not_supported));\n \n   // 1\n   {"}, {"sha": "2b5d51c457172dd94a360ef043d965ff4d22c633", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-4.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -31,7 +31,8 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   std::string s(\"after nine thirty, this request cannot be met\");\n \n-  std::system_error obj = std::system_error(std::errc::invalid_argument, s);\n+  std::system_error obj =\n+    std::system_error(std::make_error_code(std::errc::invalid_argument), s);\n   std::string s1(obj.what());\n   std::string s2(obj.what());\n   VERIFY( s1 == s2 );"}, {"sha": "d253374532386314b241bdde1af892a4ea1b4e24", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/error_code.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_code.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -32,7 +32,7 @@ void test()\n \n   char buf[64];\n   error_code e1;\n-  error_code e2(errc::bad_address);\n+  error_code e2(make_error_code(errc::bad_address));\n   string s, s1, s2;\n \n   {"}, {"sha": "6d7e9d1a6a2c6fe33042576eee3a5f552741b017", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/error_code.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2007, 2009 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,7 +32,7 @@ void test()\n \n   wchar_t buf[64];\n   error_code e1;\n-  error_code e2(errc::bad_address);\n+  error_code e2(make_error_code(errc::bad_address));\n   wstring s, s1, s2;\n \n   {"}, {"sha": "28d1955a67951c7c965d6a5eeb904c8d4b0b9241", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/2.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb81f9a082bc39f847937cc427385bfdd70dc237/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc?ref=bb81f9a082bc39f847937cc427385bfdd70dc237", "patch": "@@ -44,7 +44,8 @@ void test01()\n         }\n       catch (const std::system_error& ex)\n         {\n-\t  VERIFY( ex.code() == std::error_code(std::errc::operation_not_permitted) );\n+\t  VERIFY( ex.code() == std::make_error_code\n+\t\t  (std::errc::operation_not_permitted) );\n         }\n       catch (...)\n         {\n@@ -80,8 +81,8 @@ void test02()\n \t}\n       catch (const std::system_error& ex)\n \t{\n-\t  VERIFY( ex.code() == std::error_code(\n-\t\t    std::errc::resource_deadlock_would_occur) );\n+\t  VERIFY( ex.code() == std::make_error_code\n+\t\t  (std::errc::resource_deadlock_would_occur) );\n \t}\n       catch (...)\n \t{"}]}