{"sha": "826c956468619f8a064cd0ea499d2dd80e333b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2Yzk1NjQ2ODYxOWY4YTA2NGNkMGVhNDk5ZDJkZDgwZTMzM2I4OA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-18T22:31:03Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-18T22:31:03Z"}, "message": "insn-notes.def, [...]: New files.\n\n\t* insn-notes.def, reg-notes.def: New files.\n\t* rtl.h: Use them to define enum insn_note and enum reg_note.\n\t* rtl.c: Use them to define note_insn_name and reg_note_name.\n\n\t* modulo-sched.c, sched-rgn.c, final.c: NOTE_DISABLE_SCHED_OF_BLOCK\n\trenamed to NOTE_INSN_DISABLE_SCHED_OF_BLOCK.\n\nFrom-SVN: r86212", "tree": {"sha": "990ecf95198d77226788bade820093b68e1f298a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/990ecf95198d77226788bade820093b68e1f298a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826c956468619f8a064cd0ea499d2dd80e333b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826c956468619f8a064cd0ea499d2dd80e333b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826c956468619f8a064cd0ea499d2dd80e333b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826c956468619f8a064cd0ea499d2dd80e333b88/comments", "author": null, "committer": null, "parents": [{"sha": "21b5653c3d97927d8b927d94496ec9bea8061b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b5653c3d97927d8b927d94496ec9bea8061b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21b5653c3d97927d8b927d94496ec9bea8061b49"}], "stats": {"total": 569, "additions": 320, "deletions": 249}, "files": [{"sha": "ca4b8b86411553ebbc73bd7b3b3857ba5b49cbde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=826c956468619f8a064cd0ea499d2dd80e333b88", "patch": "@@ -1,3 +1,12 @@\n+2004-08-18  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* insn-notes.def, reg-notes.def: New files.\n+\t* rtl.h: Use them to define enum insn_note and enum reg_note.\n+\t* rtl.c: Use them to define note_insn_name and reg_note_name.\n+\n+\t* modulo-sched.c, sched-rgn.c, final.c: NOTE_DISABLE_SCHED_OF_BLOCK\n+\trenamed to NOTE_INSN_DISABLE_SCHED_OF_BLOCK.\n+\n 2004-08-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (arm_size_rtx_costs): New function.\n@@ -74,26 +83,26 @@\n \n 2004-08-18  Andrew Pinski  <apinski@apple.com>\n \n-\t* config/rs6000/darwin.md: Delete the altivec patterns which are \n+\t* config/rs6000/darwin.md: Delete the altivec patterns which are\n \thandled differently now.\n \t(load_macho_picbase_di): Make sure that is only happens for TARGET_64BIT\n \t(macho_correct_pic_di): Likewise.\n \t(call_indirect_nonlocal_darwin64): Likewise.\n \tDelete the save world/saveFP/saveVec patterns.\n-\t\n+\n \tRevert the reversion of: 2004-08-16  Stan Shebs  <shebs@apple.com>\n-        * config/darwin.c (macho_indirect_data_reference): Add DImode case.\n-        * config/rs6000/rs6000.md: Include darwin.md.\n-        (builtin_setjmp_receiver): Add DImode case.\n-        * config/rs6000/rs6000.c (rs6000_emit_move): Add DImode case to\n-        Darwin bits.\n+\t* config/darwin.c (macho_indirect_data_reference): Add DImode case.\n+\t* config/rs6000/rs6000.md: Include darwin.md.\n+\t(builtin_setjmp_receiver): Add DImode case.\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Add DImode case to\n+\tDarwin bits.\n \n 2004-08-18  Matt Austern  <austern@apple.com>\n \n \tDead code stripping\n \t* darwin.h (EH_FRAME_SECTION_ATTR): Mark so it doesn't get stripped.\n \t* darwin.c (darwin_file_end): Mark file as potentially strippable.\n-\t\n+\n 2004-08-18  Richard Henderson  <rth@redhat.com>\n \n \t* alias.c (readonly_fields_p): Remove.\n@@ -152,7 +161,7 @@\n \n 2004-08-18  Andrew Pinski  <apinski@apple.com>\n \n-\t* config/darwin.c (machopic_legitimize_pic_address): Only set \n+\t* config/darwin.c (machopic_legitimize_pic_address): Only set\n \tMEM_READONLY_P in the non TARGET_TOC case.\n \n 2004-08-18  Zack Weinberg  <zack@codesourcery.com>"}, {"sha": "fd631ca6cca42c0db3f5e07b8bd77dc44afe92c4", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=826c956468619f8a064cd0ea499d2dd80e333b88", "patch": "@@ -1704,7 +1704,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \tcase NOTE_INSN_FUNCTION_END:\n \tcase NOTE_INSN_REPEATED_LINE_NUMBER:\n \tcase NOTE_INSN_EXPECTED_VALUE:\n-\tcase NOTE_DISABLE_SCHED_OF_BLOCK:\n+\tcase NOTE_INSN_DISABLE_SCHED_OF_BLOCK:\n \t  break;\n \n \tcase NOTE_INSN_UNLIKELY_EXECUTED_CODE:"}, {"sha": "3b164e8629e10e9310f0f81c7355224cd9388bdf", "filename": "gcc/insn-notes.def", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Finsn-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Finsn-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finsn-notes.def?ref=826c956468619f8a064cd0ea499d2dd80e333b88", "patch": "@@ -0,0 +1,108 @@\n+/* Insn note definitions.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* This file defines all the codes that may appear in the\n+   NOTE_LINE_NUMBER field of a NOTE insn for kinds of notes that are\n+   not line numbers.  Source files define DEF_INSN_NOTE appropriately\n+   before including this file.\n+\n+   We are slowly removing the concept of insn-chain notes from the\n+   compiler.  Adding new codes to this file is STRONGLY DISCOURAGED.\n+   If you think you need one, look for other ways to express what you\n+   mean, such as register notes or bits in the basic-block structure.  */\n+\n+/* Shorthand.  */\n+#define INSN_NOTE(NAME) DEF_INSN_NOTE (NOTE_INSN_##NAME)\n+\n+/* This note is used to get rid of an insn when it isn't safe to patch\n+   the insn out of the chain.  */\n+INSN_NOTE (DELETED)\n+\n+/* Generated in place of user-declared labels when they are deleted.  */\n+INSN_NOTE (DELETED_LABEL)\n+\n+/* These are used to mark the beginning and end of a lexical block.\n+   See NOTE_BLOCK and reorder_blocks.  */\n+INSN_NOTE (BLOCK_BEG)\n+INSN_NOTE (BLOCK_END)\n+\n+/* These mark the extremes of a loop.  */\n+INSN_NOTE (LOOP_BEG)\n+INSN_NOTE (LOOP_END)\n+\n+/* Generated at the place in a loop that `continue' jumps to.  */\n+INSN_NOTE (LOOP_CONT)\n+/* Generated at the start of a duplicated exit test.  */\n+INSN_NOTE (LOOP_VTOP)\n+\n+/* This note indicates the start of the real body of the function,\n+   i.e. the point just after all of the parms have been moved into\n+   their homes, etc.  */\n+INSN_NOTE (FUNCTION_BEG)\n+\n+/* This kind of note is generated at the end of the function body,\n+   just before the return insn or return label.  In an optimizing\n+   compilation it is deleted by the first jump optimization, after\n+   enabling that optimizer to determine whether control can fall\n+   off the end of the function body without a return statement.  */\n+INSN_NOTE (FUNCTION_END)\n+\n+/* This marks the point immediately after the last prologue insn.  */\n+INSN_NOTE (PROLOGUE_END)\n+\n+/* This marks the point immediately prior to the first epilogue insn.  */\n+INSN_NOTE (EPILOGUE_BEG)\n+\n+/* These note where exception handling regions begin and end.\n+   Uses NOTE_EH_HANDLER to identify the region in question.  */\n+INSN_NOTE (EH_REGION_BEG)\n+INSN_NOTE (EH_REGION_END)\n+\n+/* Generated whenever a duplicate line number note is output.\n+   For example, one is output after the end of an inline function,\n+   in order to prevent the line containing the inline call from\n+   being counted twice in gcov.  */\n+INSN_NOTE (REPEATED_LINE_NUMBER)\n+\n+/* The location of a variable.  */\n+INSN_NOTE (VAR_LOCATION)\n+\n+/* Record the expected value of a register at a location.  Uses\n+   NOTE_EXPECTED_VALUE; stored as (eq (reg) (const_int)).  */\n+INSN_NOTE (EXPECTED_VALUE)\n+\n+/* Record the struct for the following basic block.  Uses\n+   NOTE_BASIC_BLOCK.  FIXME: Redundant with the basic block pointer\n+   now included in every insn.  */\n+INSN_NOTE (BASIC_BLOCK)\n+\n+/* Record that the current basic block is unlikely to be executed and\n+   should be moved to the UNLIKELY_EXECUTED_TEXT_SECTION.  FIXME: Make\n+   this a bit on the basic block structure. */\n+INSN_NOTE (UNLIKELY_EXECUTED_CODE)\n+\n+/* Mark that a block shouldn't be scheduled.  This is currently used\n+   in modulo scheduling. Modulo scheduling adds this note to the\n+   blocks of the modulo-scheduled loops to disable scheduling them in\n+   the later traditional scheduling passes.  FIXME: Make this a bit on\n+   the basic block structure.  */\n+INSN_NOTE (DISABLE_SCHED_OF_BLOCK)\n+\n+#undef INSN_NOTE"}, {"sha": "84f33364eb12481510daab350da931c3641fb606", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=826c956468619f8a064cd0ea499d2dd80e333b88", "patch": "@@ -1112,7 +1112,7 @@ sms_schedule (FILE *dump_file)\n           /* Mark this loop as software pipelined so the later\n \t     scheduling passes doesn't touch it.  */\n \t  if (! flag_resched_modulo_sched)\n-\t    emit_note_before (NOTE_DISABLE_SCHED_OF_BLOCK,\n+\t    emit_note_before (NOTE_INSN_DISABLE_SCHED_OF_BLOCK,\n \t     \t\t      g->closing_branch->insn);\n \n \t  generate_reg_moves (ps);"}, {"sha": "cb0343facd91b18765584ca2d96a3651b6efdac7", "filename": "gcc/reg-notes.def", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=826c956468619f8a064cd0ea499d2dd80e333b88", "patch": "@@ -0,0 +1,168 @@\n+/* Register note definitions.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* This file defines all the codes that may appear on individual\n+   EXPR_LIST rtxes in the REG_NOTES chain of an insn.  The codes are\n+   stored in the mode field of the EXPR_LIST.  Source files define\n+   DEF_INSN_NOTE appropriately before including this file.  */\n+\n+/* Shorthand.  */\n+#define REG_NOTE(NAME) DEF_REG_NOTE (REG_##NAME)\n+\n+/* The value in REG dies in this insn (i.e., it is not needed past\n+   this insn).  If REG is set in this insn, the REG_DEAD note may,\n+   but need not, be omitted.  */\n+REG_NOTE (DEAD)\n+\n+/* The REG is autoincremented or autodecremented in this insn.  */\n+REG_NOTE (INC)\n+\n+/* Describes the insn as a whole; it says that the insn sets a\n+   register to a constant value or to be equivalent to a memory\n+   address.  If the register is spilled to the stack then the constant\n+   value should be substituted for it.  The contents of the REG_EQUIV\n+   is the constant value or memory address, which may be different\n+   from the source of the SET although it has the same value.  A\n+   REG_EQUIV note may also appear on an insn which copies a register\n+   parameter to a pseudo-register, if there is a memory address which\n+   could be used to hold that pseudo-register throughout the function.  */\n+REG_NOTE (EQUIV)\n+\n+/* Like REG_EQUIV except that the destination is only momentarily\n+   equal to the specified rtx.  Therefore, it cannot be used for\n+   substitution; but it can be used for cse.  */\n+REG_NOTE (EQUAL)\n+\n+/* This insn copies the return-value of a library call out of the hard\n+   reg for return values.  This note is actually an INSN_LIST and it\n+   points to the first insn involved in setting up arguments for the\n+   call.  flow.c uses this to delete the entire library call when its\n+   result is dead.  */\n+REG_NOTE (RETVAL)\n+\n+/* The inverse of REG_RETVAL: it goes on the first insn of the library\n+   call and points at the one that has the REG_RETVAL.  This note is\n+   also an INSN_LIST.  */\n+REG_NOTE (LIBCALL)\n+\n+/* The register is always nonnegative during the containing loop.\n+   This is used in branches so that decrement and branch instructions\n+   terminating on zero can be matched.  There must be an insn pattern\n+   in the md file named `decrement_and_branch_until_zero' or else this\n+   will never be added to any instructions.  */\n+REG_NOTE (NONNEG)\n+\n+/* There is no conflict *after this insn* between the register in the\n+   note and the destination of this insn.  */\n+REG_NOTE (NO_CONFLICT)\n+\n+/* Identifies a register set in this insn and never used.  */\n+REG_NOTE (UNUSED)\n+\n+/* REG_CC_SETTER and REG_CC_USER link a pair of insns that set and use\n+   CC0, respectively.  Normally, these are required to be consecutive\n+   insns, but we permit putting a cc0-setting insn in the delay slot\n+   of a branch as long as only one copy of the insn exists.  In that\n+   case, these notes point from one to the other to allow code\n+   generation to determine what any require information and to\n+   properly update CC_STATUS.  These notes are INSN_LISTs.  */\n+REG_NOTE (CC_SETTER)\n+REG_NOTE (CC_USER)\n+\n+/* Points to a CODE_LABEL.  Used by non-JUMP_INSNs to say that the\n+   CODE_LABEL contained in the REG_LABEL note is used by the insn.\n+   This note is an INSN_LIST.  */\n+REG_NOTE (LABEL)\n+\n+/* REG_DEP_ANTI and REG_DEP_OUTPUT are used in LOG_LINKS to represent\n+   write-after-read and write-after-write dependencies respectively.\n+   Data dependencies, which are the only type of LOG_LINK created by\n+   flow, are represented by a 0 reg note kind.  */\n+REG_NOTE (DEP_ANTI)\n+REG_NOTE (DEP_OUTPUT)\n+\n+/* REG_BR_PROB is attached to JUMP_INSNs and CALL_INSNs.  It has an\n+   integer value.  For jumps, it is the probability that this is a\n+   taken branch.  For calls, it is the probability that this call\n+   won't return.  */\n+REG_NOTE (BR_PROB)\n+\n+/* REG_VALUE_PROFILE is attached when the profile is read in to an\n+   insn before that the code to profile the value is inserted.  It\n+   contains the results of profiling.  */\n+REG_NOTE (VALUE_PROFILE)\n+\n+/* Attached to a call insn; indicates that the call is malloc-like and\n+   that the pointer returned cannot alias anything else.  */\n+REG_NOTE (NOALIAS)\n+\n+/* Used to optimize rtl generated by dynamic stack allocations for\n+   targets where SETJMP_VIA_SAVE_AREA is true.  */\n+REG_NOTE (SAVE_AREA)\n+\n+/* REG_BR_PRED is attached to JUMP_INSNs and CALL_INSNSs.  It contains\n+   CONCAT of two integer value.  First specifies the branch predictor\n+   that added the note, second specifies the predicted hitrate of\n+   branch in the same format as REG_BR_PROB note uses.  */\n+REG_NOTE (BR_PRED)\n+\n+/* Attached to insns that are RTX_FRAME_RELATED_P, but are too complex\n+   for DWARF to interpret what they imply.  The attached rtx is used\n+   instead of intuition.  */\n+REG_NOTE (FRAME_RELATED_EXPR)\n+\n+/* Indicates that REG holds the exception context for the function.\n+   This context is shared by inline functions, so the code to acquire\n+   the real exception context is delayed until after inlining.  */\n+REG_NOTE (EH_CONTEXT)\n+\n+/* Indicates what exception region an INSN belongs in.  This is used\n+   to indicate what region to which a call may throw.  REGION 0\n+   indicates that a call cannot throw at all.  REGION -1 indicates\n+   that it cannot throw, nor will it execute a non-local goto.  */\n+REG_NOTE (EH_REGION)\n+\n+/* Used by haifa-sched to save NOTE_INSN notes across scheduling.  */\n+REG_NOTE (SAVE_NOTE)\n+\n+/* Indicates that this insn (which is part of the prologue) computes a\n+   value which might not be used later, and if so it's OK to delete\n+   the insn.  Normally, deleting any insn in the prologue is an error.\n+   At present the parameter is unused and set to (const_int 0).  */\n+REG_NOTE (MAYBE_DEAD)\n+\n+/* Indicates that a call does not return.  */\n+REG_NOTE (NORETURN)\n+\n+/* Indicates that an indirect jump is a non-local goto instead of a\n+   computed goto.  */\n+REG_NOTE (NON_LOCAL_GOTO)\n+\n+/* Indicates that a jump crosses between hot and cold sections in a\n+   (partitioned) assembly or .o file, and therefore should not be\n+   reduced to a simpler jump by optimizations.  */\n+REG_NOTE (CROSSING_JUMP)\n+\n+/* This kind of note is generated at each to `setjmp', and similar\n+   functions that can return twice.  */\n+REG_NOTE (SETJMP)\n+\n+/* Indicate calls that always returns.  */\n+REG_NOTE (ALWAYS_RETURN)"}, {"sha": "8136514ea09a037b7c9ea33d9beca171ee2c271c", "filename": "gcc/rtl.c", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=826c956468619f8a064cd0ea499d2dd80e333b88", "patch": "@@ -115,38 +115,27 @@ const unsigned char rtx_size[NUM_RTX_CODE] = {\n #undef DEF_RTL_EXPR\n };\n \n+/* Make sure all NOTE_INSN_* values are negative.  */\n+extern char NOTE_INSN_MAX_isnt_negative_adjust_NOTE_INSN_BIAS\n+[NOTE_INSN_MAX < 0 ? 1 : -1];\n+\n /* Names for kinds of NOTEs and REG_NOTEs.  */\n \n const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS] =\n {\n-  \"\", \"NOTE_INSN_DELETED\",\n-  \"NOTE_INSN_BLOCK_BEG\", \"NOTE_INSN_BLOCK_END\",\n-  \"NOTE_INSN_LOOP_BEG\", \"NOTE_INSN_LOOP_END\",\n-  \"NOTE_INSN_LOOP_CONT\", \"NOTE_INSN_LOOP_VTOP\",\n-  \"NOTE_DISABLE_SCHED_OF_BLOCK\",\n-  \"NOTE_INSN_FUNCTION_END\",\n-  \"NOTE_INSN_PROLOGUE_END\", \"NOTE_INSN_EPILOGUE_BEG\",\n-  \"NOTE_INSN_DELETED_LABEL\", \"NOTE_INSN_FUNCTION_BEG\",\n-  \"NOTE_INSN_EH_REGION_BEG\", \"NOTE_INSN_EH_REGION_END\",\n-  \"NOTE_INSN_REPEATED_LINE_NUMBER\",\n-  \"NOTE_INSN_BASIC_BLOCK\", \"NOTE_INSN_EXPECTED_VALUE\",\n-  \"NOTE_INSN_UNLIKELY_EXECUTED_CODE\",\n-  \"NOTE_INSN_VAR_LOCATION\"\n+  \"\",\n+#define DEF_INSN_NOTE(NAME) #NAME,\n+#include \"insn-notes.def\"\n+#undef DEF_INSN_NOTE\n };\n \n-const char * const reg_note_name[] =\n+const char * const reg_note_name[REG_NOTE_MAX] =\n {\n-  \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"REG_EQUAL\",\n-  \"REG_RETVAL\", \"REG_LIBCALL\", \"REG_NONNEG\",\n-  \"REG_NO_CONFLICT\", \"REG_UNUSED\", \"REG_CC_SETTER\", \"REG_CC_USER\",\n-  \"REG_LABEL\", \"REG_DEP_ANTI\", \"REG_DEP_OUTPUT\", \"REG_BR_PROB\",\n-  \"REG_VALUE_PROFILE\", \"REG_NOALIAS\", \"REG_SAVE_AREA\", \"REG_BR_PRED\",\n-  \"REG_FRAME_RELATED_EXPR\", \"REG_EH_CONTEXT\", \"REG_EH_REGION\",\n-  \"REG_SAVE_NOTE\", \"REG_MAYBE_DEAD\", \"REG_NORETURN\",\n-  \"REG_NON_LOCAL_GOTO\", \"REG_CROSSING_JUMP\", \"REG_SETJMP\", \"REG_ALWAYS_RETURN\"\n+#define DEF_REG_NOTE(NAME) #NAME,\n+#include \"reg-notes.def\"\n+#undef DEF_REG_NOTE\n };\n \n-\n #ifdef GATHER_STATISTICS\n static int rtx_alloc_counts[(int) LAST_AND_UNUSED_RTX_CODE];\n static int rtx_alloc_sizes[(int) LAST_AND_UNUSED_RTX_CODE];"}, {"sha": "120e79443736a266ee09a40b450ead6f0ca0d545", "filename": "gcc/rtl.h", "status": "modified", "additions": 11, "deletions": 214, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=826c956468619f8a064cd0ea499d2dd80e333b88", "patch": "@@ -722,146 +722,12 @@ do {\t\t\t\t\\\n \n #define REG_NOTES(INSN)\tXEXP(INSN, 8)\n \n-/* Don't forget to change reg_note_name in rtl.c.  */\n enum reg_note\n {\n-  /* The value in REG dies in this insn (i.e., it is not needed past\n-     this insn).  If REG is set in this insn, the REG_DEAD note may,\n-     but need not, be omitted.  */\n-  REG_DEAD = 1,\n-\n-  /* The REG is autoincremented or autodecremented.  */\n-  REG_INC,\n-\n-  /* Describes the insn as a whole; it says that the insn sets a register\n-     to a constant value or to be equivalent to a memory address.  If the\n-     register is spilled to the stack then the constant value should be\n-     substituted for it.  The contents of the REG_EQUIV is the constant\n-     value or memory address, which may be different from the source of\n-     the SET although it has the same value.  A REG_EQUIV note may also\n-     appear on an insn which copies a register parameter to a pseudo-register,\n-     if there is a memory address which could be used to hold that\n-     pseudo-register throughout the function.  */\n-  REG_EQUIV,\n-\n-  /* Like REG_EQUIV except that the destination is only momentarily equal\n-     to the specified rtx.  Therefore, it cannot be used for substitution;\n-     but it can be used for cse.  */\n-  REG_EQUAL,\n-\n-  /* This insn copies the return-value of a library call out of the hard reg\n-     for return values.  This note is actually an INSN_LIST and it points to\n-     the first insn involved in setting up arguments for the call.  flow.c\n-     uses this to delete the entire library call when its result is dead.  */\n-  REG_RETVAL,\n-\n-  /* The inverse of REG_RETVAL: it goes on the first insn of the library call\n-     and points at the one that has the REG_RETVAL.  This note is also an\n-     INSN_LIST.  */\n-  REG_LIBCALL,\n-\n-  /* The register is always nonnegative during the containing loop.  This is\n-     used in branches so that decrement and branch instructions terminating\n-     on zero can be matched.  There must be an insn pattern in the md file\n-     named `decrement_and_branch_until_zero' or else this will never be added\n-     to any instructions.  */\n-  REG_NONNEG,\n-\n-  /* There is no conflict *after this insn* between the register in the note\n-     and the destination of this insn.  */\n-  REG_NO_CONFLICT,\n-\n-  /* Identifies a register set in this insn and never used.  */\n-  REG_UNUSED,\n-\n-  /* REG_CC_SETTER and REG_CC_USER link a pair of insns that set and use CC0,\n-     respectively.  Normally, these are required to be consecutive insns, but\n-     we permit putting a cc0-setting insn in the delay slot of a branch as\n-     long as only one copy of the insn exists.  In that case, these notes\n-     point from one to the other to allow code generation to determine what\n-     any require information and to properly update CC_STATUS.  These notes\n-     are INSN_LISTs.  */\n-  REG_CC_SETTER, REG_CC_USER,\n-\n-  /* Points to a CODE_LABEL.  Used by non-JUMP_INSNs to say that the\n-     CODE_LABEL contained in the REG_LABEL note is used by the insn.\n-     This note is an INSN_LIST.  */\n-  REG_LABEL,\n-\n-  /* REG_DEP_ANTI and REG_DEP_OUTPUT are used in LOG_LINKS to represent\n-     write-after-read and write-after-write dependencies respectively.\n-     Data dependencies, which are the only type of LOG_LINK created by\n-     flow, are represented by a 0 reg note kind.  */\n-  REG_DEP_ANTI, REG_DEP_OUTPUT,\n-\n-  /* REG_BR_PROB is attached to JUMP_INSNs and CALL_INSNs.\n-     It has an integer value.  For jumps, it is the probability that this is a\n-     taken branch.  For calls, it is the probability that this call won't\n-     return.  */\n-  REG_BR_PROB,\n-\n-  /* REG_VALUE_PROFILE is attached when the profile is read in to an insn\n-     before that the code to profile the value is inserted.  It contains\n-     the results of profiling.  */\n-  REG_VALUE_PROFILE,\n-\n-  /* Attached to a call insn; indicates that the call is malloc-like and\n-     that the pointer returned cannot alias anything else.  */\n-  REG_NOALIAS,\n-\n-  /* Used to optimize rtl generated by dynamic stack allocations for targets\n-     where SETJMP_VIA_SAVE_AREA is true.  */\n-  REG_SAVE_AREA,\n-\n-  /* REG_BR_PRED is attached to JUMP_INSNs and CALL_INSNSs.  It contains\n-     CONCAT of two integer value.  First specifies the branch predictor\n-     that added the note, second specifies the predicted hitrate of branch\n-     in the same format as REG_BR_PROB note uses.  */\n-  REG_BR_PRED,\n-\n-  /* Attached to insns that are RTX_FRAME_RELATED_P, but are too complex\n-     for DWARF to interpret what they imply.  The attached rtx is used\n-     instead of intuition.  */\n-  REG_FRAME_RELATED_EXPR,\n-\n-  /* Indicates that REG holds the exception context for the function.\n-     This context is shared by inline functions, so the code to acquire\n-     the real exception context is delayed until after inlining.  */\n-  REG_EH_CONTEXT,\n-\n-  /* Indicates what exception region an INSN belongs in.  This is used to\n-     indicate what region to which a call may throw.  REGION 0 indicates\n-     that a call cannot throw at all.  REGION -1 indicates that it cannot\n-     throw, nor will it execute a non-local goto.  */\n-  REG_EH_REGION,\n-\n-  /* Used by haifa-sched to save NOTE_INSN notes across scheduling.  */\n-  REG_SAVE_NOTE,\n-\n-  /* Indicates that this insn (which is part of the prologue) computes\n-     a value which might not be used later, and if so it's OK to delete\n-     the insn.  Normally, deleting any insn in the prologue is an error.\n-     At present the parameter is unused and set to (const_int 0).  */\n-  REG_MAYBE_DEAD,\n-\n-  /* Indicates that a call does not return.  */\n-  REG_NORETURN,\n-\n-  /* Indicates that an indirect jump is a non-local goto instead of a\n-     computed goto.  */\n-  REG_NON_LOCAL_GOTO,\n-\n-  /* Indicates that a jump crosses between hot and cold sections\n-     in a (partitioned) assembly or .o file, and therefore should not be\n-     reduced to a simpler jump by optimizations.  */\n-  REG_CROSSING_JUMP,\n-\n-  /* This kind of note is generated at each to `setjmp',\n-     and similar functions that can return twice.  */\n-  REG_SETJMP,\n-\n-  /* Indicate calls that always returns.  */\n-  REG_ALWAYS_RETURN\n+#define DEF_REG_NOTE(NAME) NAME,\n+#include \"reg-notes.def\"\n+#undef DEF_REG_NOTE\n+  REG_NOTE_MAX\n };\n \n /* The base value for branch probability notes.  */\n@@ -944,93 +810,24 @@ extern const char * const reg_note_name[];\n \t\t\t\t\t\t 0, VAR_LOCATION))\n #define NOTE_VAR_LOCATION_LOC(INSN)\t(XCEXP (XCEXP (INSN, 4, NOTE),  \\\n \t\t\t\t\t\t1, VAR_LOCATION))\n-  \n-/* Codes that appear in the NOTE_LINE_NUMBER field\n-   for kinds of notes that are not line numbers.\n \n+/* Codes that appear in the NOTE_LINE_NUMBER field for kinds of notes\n+   that are not line numbers.  These codes are all negative.\n+   \n    Notice that we do not try to use zero here for any of\n    the special note codes because sometimes the source line\n    actually can be zero!  This happens (for example) when we\n    are generating code for the per-translation-unit constructor\n-   and destructor routines for some C++ translation unit.\n-\n-   If you should change any of the following values, or if you\n-   should add a new value here, don't forget to change the\n-   note_insn_name array in rtl.c.  */\n+   and destructor routines for some C++ translation unit.  */\n \n enum insn_note\n {\n   /* Keep all of these numbers negative.  Adjust as needed.  */\n   NOTE_INSN_BIAS = -100,\n \n-  /* This note is used to get rid of an insn\n-     when it isn't safe to patch the insn out of the chain.  */\n-  NOTE_INSN_DELETED,\n-\n-  /* These are used to mark the beginning and end of a lexical block.\n-     See NOTE_BLOCK and reorder_blocks.  */\n-  NOTE_INSN_BLOCK_BEG,\n-  NOTE_INSN_BLOCK_END,\n-\n-  /* These mark the extremes of a loop.  */\n-  NOTE_INSN_LOOP_BEG,\n-  NOTE_INSN_LOOP_END,\n-\n-  /* Generated at the place in a loop that `continue' jumps to.  */\n-  NOTE_INSN_LOOP_CONT,\n-  /* Generated at the start of a duplicated exit test.  */\n-  NOTE_INSN_LOOP_VTOP,\n-\n-  /* Mark that a block shouldn't be scheduled.  This is currently\n-     used in modulo scheduling. Modulo scheduling  adds this note\n-     to the blocks of the modulo-scheduled loops to disable scheduling\n-     them in the later traditional scheduling passes.  */\n-  NOTE_DISABLE_SCHED_OF_BLOCK,\n-\n-  /* This kind of note is generated at the end of the function body,\n-     just before the return insn or return label.  In an optimizing\n-     compilation it is deleted by the first jump optimization, after\n-     enabling that optimizer to determine whether control can fall\n-     off the end of the function body without a return statement.  */\n-  NOTE_INSN_FUNCTION_END,\n-\n-  /* This marks the point immediately after the last prologue insn.  */\n-  NOTE_INSN_PROLOGUE_END,\n-\n-  /* This marks the point immediately prior to the first epilogue insn.  */\n-  NOTE_INSN_EPILOGUE_BEG,\n-\n-  /* Generated in place of user-declared labels when they are deleted.  */\n-  NOTE_INSN_DELETED_LABEL,\n-\n-  /* This note indicates the start of the real body of the function,\n-     i.e. the point just after all of the parms have been moved into\n-     their homes, etc.  */\n-  NOTE_INSN_FUNCTION_BEG,\n-\n-  /* These note where exception handling regions begin and end.\n-     Uses NOTE_EH_HANDLER to identify the region in question.  */\n-  NOTE_INSN_EH_REGION_BEG,\n-  NOTE_INSN_EH_REGION_END,\n-\n-  /* Generated whenever a duplicate line number note is output.  For example,\n-     one is output after the end of an inline function, in order to prevent\n-     the line containing the inline call from being counted twice in gcov.  */\n-  NOTE_INSN_REPEATED_LINE_NUMBER,\n-\n-  /* Record the struct for the following basic block.  Uses NOTE_BASIC_BLOCK.  */\n-  NOTE_INSN_BASIC_BLOCK,\n-\n-  /* Record the expected value of a register at a location.  Uses\n-     NOTE_EXPECTED_VALUE; stored as (eq (reg) (const_int)).  */\n-  NOTE_INSN_EXPECTED_VALUE,\n-\n-  /* Record that the current basic block is unlikely to be executed and\n-     should be moved to the UNLIKELY_EXECUTED_TEXT_SECTION.  */\n-  NOTE_INSN_UNLIKELY_EXECUTED_CODE,\n-\n-  /* The location of a variable.  */\n-  NOTE_INSN_VAR_LOCATION,\n+#define DEF_INSN_NOTE(NAME) NAME,\n+#include \"insn-notes.def\"\n+#undef DEF_INSN_NOTE\n \n   NOTE_INSN_MAX\n };"}, {"sha": "e7717265e75a4547edfcfe14d9419433a60422ec", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826c956468619f8a064cd0ea499d2dd80e333b88/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=826c956468619f8a064cd0ea499d2dd80e333b88", "patch": "@@ -2352,7 +2352,7 @@ sched_is_disabled_for_current_region_p (void)\n            insn = PREV_INSN (insn))\n       \tif (GET_CODE (insn) == NOTE\n \t    && (NOTE_LINE_NUMBER (insn)\n-\t        == NOTE_DISABLE_SCHED_OF_BLOCK))\n+\t        == NOTE_INSN_DISABLE_SCHED_OF_BLOCK))\n           {\n               disable_sched = true;\n \t      break;"}]}