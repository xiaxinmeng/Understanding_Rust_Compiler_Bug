{"sha": "5992e39919ff3753d88afea7b75992a18ab4c4c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk5MmUzOTkxOWZmMzc1M2Q4OGFmZWE3Yjc1OTkyYTE4YWI0YzRjNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-02-22T09:52:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-02-22T09:52:37Z"}, "message": "unordered_map (class __unordered_map, [...]): New.\n\n2007-02-22  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/unordered_map (class __unordered_map,\n\tclass __unordered_multimap): New.\n\t(class unordered_map, class unordered_multimap): Forward to\n\tthe latter.\n\t* include/tr1/unordered_set: Likewise for unordered_set and\n\tunordered_multiset.\n\t* testsuite/tr1/6_containers/headers/unordered_set/synopsis.cc:\n\tRemove xfail.\n\t* testsuite/tr1/6_containers/headers/unordered_map/synopsis.cc:\n\tLikewise.\n\t* testsuite/tr1/6_containers/unordered_multimap/requirements/\n\texplicit_instantiation.cc: Adjust.\n\t* testsuite/tr1/6_containers/unordered_set/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_map/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_multiset/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_map/24064.cc: Likewise.\n\t* testsuite/util/native_type/assoc/native_hash_set.hpp: Likewise.\n\t* testsuite/util/native_type/assoc/native_hash_map.hpp: Likewise.\n\nFrom-SVN: r122223", "tree": {"sha": "8e45b45006c0d658062e27f0fe1f2c6aa84c34c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e45b45006c0d658062e27f0fe1f2c6aa84c34c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5992e39919ff3753d88afea7b75992a18ab4c4c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5992e39919ff3753d88afea7b75992a18ab4c4c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5992e39919ff3753d88afea7b75992a18ab4c4c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5992e39919ff3753d88afea7b75992a18ab4c4c6/comments", "author": null, "committer": null, "parents": [{"sha": "c00b8d4a1e84bdefa9c005df9a725377cb185e0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00b8d4a1e84bdefa9c005df9a725377cb185e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00b8d4a1e84bdefa9c005df9a725377cb185e0b"}], "stats": {"total": 298, "additions": 221, "deletions": 77}, "files": [{"sha": "50e981ce5000dd3bb94ac046ba4650677bd7964d", "filename": "libstdc++-v3/include/tr1/unordered_map", "status": "modified", "additions": 92, "deletions": 24, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -48,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t   class _Pred = std::equal_to<_Key>,\n \t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> >,\n \t   bool __cache_hash_code = false>\n-    class unordered_map\n+    class __unordered_map\n     : public _Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc,\n \t\t\tstd::_Select1st<std::pair<const _Key, _Tp> >, _Pred, \n \t\t\t_Hash, __detail::_Mod_range_hashing,\n@@ -71,21 +71,21 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef typename _Base::allocator_type  allocator_type;\n \n       explicit\n-      unordered_map(size_type __n = 10,\n-\t\t    const hasher& __hf = hasher(),\n-\t\t    const key_equal& __eql = key_equal(),\n-\t\t    const allocator_type& __a = allocator_type())\n+      __unordered_map(size_type __n = 10,\n+\t\t      const hasher& __hf = hasher(),\n+\t\t      const key_equal& __eql = key_equal(),\n+\t\t      const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(),\n \t      __eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n       { }\n \n       template<typename _InputIterator>\n-        unordered_map(_InputIterator __f, _InputIterator __l, \n-\t\t      size_type __n = 10,\n-\t\t      const hasher& __hf = hasher(), \n-\t\t      const key_equal& __eql = key_equal(), \n-\t\t      const allocator_type& __a = allocator_type())\n+        __unordered_map(_InputIterator __f, _InputIterator __l, \n+\t\t\tsize_type __n = 10,\n+\t\t\tconst hasher& __hf = hasher(), \n+\t\t\tconst key_equal& __eql = key_equal(), \n+\t\t\tconst allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(),\n \t\t__eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n@@ -97,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t   class _Pred = std::equal_to<_Key>,\n \t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> >,\n \t   bool __cache_hash_code = false>\n-    class unordered_multimap\n+    class __unordered_multimap\n     : public _Hashtable<_Key, std::pair<const _Key, _Tp>,\n \t\t\t_Alloc,\n \t\t\tstd::_Select1st<std::pair<const _Key, _Tp> >, _Pred,\n@@ -122,22 +122,22 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef typename _Base::allocator_type  allocator_type;\n       \n       explicit\n-      unordered_multimap(size_type __n = 10,\n-\t\t\t const hasher& __hf = hasher(),\n-\t\t\t const key_equal& __eql = key_equal(),\n-\t\t\t const allocator_type& __a = allocator_type())\n+      __unordered_multimap(size_type __n = 10,\n+\t\t\t   const hasher& __hf = hasher(),\n+\t\t\t   const key_equal& __eql = key_equal(),\n+\t\t\t   const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(),\n \t      __eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n       { }\n \n \n       template<typename _InputIterator>\n-        unordered_multimap(_InputIterator __f, _InputIterator __l, \n-\t\t\t   typename _Base::size_type __n = 0,\n-\t\t\t   const hasher& __hf = hasher(), \n-\t\t\t   const key_equal& __eql = key_equal(), \n-\t\t\t   const allocator_type& __a = allocator_type())\n+        __unordered_multimap(_InputIterator __f, _InputIterator __l, \n+\t\t\t     typename _Base::size_type __n = 0,\n+\t\t\t     const hasher& __hf = hasher(), \n+\t\t\t     const key_equal& __eql = key_equal(), \n+\t\t\t     const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(),\n \t\t__eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n@@ -147,21 +147,89 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc,\n \t   bool __cache_hash_code>\n     inline void\n-    swap(unordered_map<_Key, _Tp, _Hash, _Pred,\n+    swap(__unordered_map<_Key, _Tp, _Hash, _Pred,\n \t _Alloc, __cache_hash_code>& __x,\n-\t unordered_map<_Key, _Tp, _Hash, _Pred,\n+\t __unordered_map<_Key, _Tp, _Hash, _Pred,\n \t _Alloc, __cache_hash_code>& __y)\n     { __x.swap(__y); }\n \n   template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc,\n \t   bool __cache_hash_code>\n     inline void\n-    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred,\n+    swap(__unordered_multimap<_Key, _Tp, _Hash, _Pred,\n \t _Alloc, __cache_hash_code>& __x,\n-\t unordered_multimap<_Key, _Tp, _Hash, _Pred,\n+\t __unordered_multimap<_Key, _Tp, _Hash, _Pred,\n \t _Alloc, __cache_hash_code>& __y)\n     { __x.swap(__y); }\n \n+\n+  template<class _Key, class _Tp,\n+\t   class _Hash = hash<_Key>,\n+\t   class _Pred = std::equal_to<_Key>,\n+\t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n+    class unordered_map\n+    : public __unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>\n+    {\n+      typedef __unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>  _Base;\n+\n+    public:\n+      typedef typename _Base::size_type       size_type;\n+      typedef typename _Base::hasher          hasher;\n+      typedef typename _Base::key_equal       key_equal;\n+      typedef typename _Base::allocator_type  allocator_type;\n+\n+      explicit\n+      unordered_map(size_type __n = 10,\n+\t\t    const hasher& __hf = hasher(),\n+\t\t    const key_equal& __eql = key_equal(),\n+\t\t    const allocator_type& __a = allocator_type())\n+      : _Base(__n, __hf, __eql, __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+        unordered_map(_InputIterator __f, _InputIterator __l, \n+\t\t      size_type __n = 10,\n+\t\t      const hasher& __hf = hasher(), \n+\t\t      const key_equal& __eql = key_equal(), \n+\t\t      const allocator_type& __a = allocator_type())\n+\t: _Base(__f, __l, __n, __hf, __eql, __a)\n+        { }\n+    };\n+  \n+  template<class _Key, class _Tp,\n+\t   class _Hash = hash<_Key>,\n+\t   class _Pred = std::equal_to<_Key>,\n+\t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n+    class unordered_multimap\n+    : public __unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>\n+    {\n+      typedef __unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>  _Base;\n+\n+    public:\n+      typedef typename _Base::size_type       size_type;\n+      typedef typename _Base::hasher          hasher;\n+      typedef typename _Base::key_equal       key_equal;\n+      typedef typename _Base::allocator_type  allocator_type;\n+      \n+      explicit\n+      unordered_multimap(size_type __n = 10,\n+\t\t\t const hasher& __hf = hasher(),\n+\t\t\t const key_equal& __eql = key_equal(),\n+\t\t\t const allocator_type& __a = allocator_type())\n+      : _Base(__n, __hf, __eql, __a)\n+      { }\n+\n+\n+      template<typename _InputIterator>\n+        unordered_multimap(_InputIterator __f, _InputIterator __l, \n+\t\t\t   typename _Base::size_type __n = 0,\n+\t\t\t   const hasher& __hf = hasher(), \n+\t\t\t   const key_equal& __eql = key_equal(), \n+\t\t\t   const allocator_type& __a = allocator_type())\n+\t: _Base(__f, __l, __n, __hf, __eql, __a)\n+        { }\n+    };\n+\n _GLIBCXX_END_NAMESPACE\n }\n "}, {"sha": "84a24f4a9aee27d2801c910d17e2fa575889b0d0", "filename": "libstdc++-v3/include/tr1/unordered_set", "status": "modified", "additions": 92, "deletions": 24, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -48,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t   class _Pred = std::equal_to<_Value>,\n \t   class _Alloc = std::allocator<_Value>,\n \t   bool __cache_hash_code = false>\n-    class unordered_set\n+    class __unordered_set\n     : public _Hashtable<_Value, _Value, _Alloc,\n \t\t\tstd::_Identity<_Value>, _Pred,\n \t\t\t_Hash, __detail::_Mod_range_hashing,\n@@ -71,21 +71,21 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef typename _Base::allocator_type  allocator_type;\n       \n       explicit\n-      unordered_set(size_type __n = 10,\n-\t\t    const hasher& __hf = hasher(),\n-\t\t    const key_equal& __eql = key_equal(),\n-\t\t    const allocator_type& __a = allocator_type())\n+      __unordered_set(size_type __n = 10,\n+\t\t      const hasher& __hf = hasher(),\n+\t\t      const key_equal& __eql = key_equal(),\n+\t\t      const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(), __eql,\n \t      std::_Identity<_Value>(), __a)\n       { }\n \n       template<typename _InputIterator>\n-        unordered_set(_InputIterator __f, _InputIterator __l, \n-\t\t      size_type __n = 10,\n-\t\t      const hasher& __hf = hasher(), \n-\t\t      const key_equal& __eql = key_equal(), \n-\t\t      const allocator_type& __a = allocator_type())\n+        __unordered_set(_InputIterator __f, _InputIterator __l, \n+\t\t\tsize_type __n = 10,\n+\t\t\tconst hasher& __hf = hasher(), \n+\t\t\tconst key_equal& __eql = key_equal(), \n+\t\t\tconst allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(), __eql,\n \t\tstd::_Identity<_Value>(), __a)\n@@ -97,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t   class _Pred = std::equal_to<_Value>,\n \t   class _Alloc = std::allocator<_Value>,\n \t   bool __cache_hash_code = false>\n-    class unordered_multiset\n+    class __unordered_multiset\n     : public _Hashtable<_Value, _Value, _Alloc,\n \t\t\tstd::_Identity<_Value>, _Pred,\n \t\t\t_Hash, __detail::_Mod_range_hashing,\n@@ -120,22 +120,22 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef typename _Base::allocator_type  allocator_type;\n       \n       explicit\n-      unordered_multiset(size_type __n = 10,\n-\t\t\t const hasher& __hf = hasher(),\n-\t\t\t const key_equal& __eql = key_equal(),\n-\t\t\t const allocator_type& __a = allocator_type())\n+      __unordered_multiset(size_type __n = 10,\n+\t\t\t   const hasher& __hf = hasher(),\n+\t\t\t   const key_equal& __eql = key_equal(),\n+\t\t\t   const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(), __eql,\n \t      std::_Identity<_Value>(), __a)\n       { }\n \n \n       template<typename _InputIterator>\n-        unordered_multiset(_InputIterator __f, _InputIterator __l, \n-\t\t\t   typename _Base::size_type __n = 0,\n-\t\t\t   const hasher& __hf = hasher(), \n-\t\t\t   const key_equal& __eql = key_equal(), \n-\t\t\t   const allocator_type& __a = allocator_type())\n+        __unordered_multiset(_InputIterator __f, _InputIterator __l, \n+\t\t\t     typename _Base::size_type __n = 0,\n+\t\t\t     const hasher& __hf = hasher(), \n+\t\t\t     const key_equal& __eql = key_equal(), \n+\t\t\t     const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(), __eql,\n \t\tstd::_Identity<_Value>(), __a)\n@@ -145,21 +145,89 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   template<class _Value, class _Hash, class _Pred, class _Alloc,\n \t   bool __cache_hash_code>\n     inline void\n-    swap (unordered_set<_Value, _Hash, _Pred,\n+    swap (__unordered_set<_Value, _Hash, _Pred,\n \t  _Alloc, __cache_hash_code>& __x,\n-\t  unordered_set<_Value, _Hash, _Pred,\n+\t  __unordered_set<_Value, _Hash, _Pred,\n \t  _Alloc, __cache_hash_code>& __y)\n     { __x.swap(__y); }\n \n   template<class _Value, class _Hash, class _Pred, class _Alloc,\n \t   bool __cache_hash_code>\n     inline void\n-    swap(unordered_multiset<_Value, _Hash, _Pred,\n+    swap(__unordered_multiset<_Value, _Hash, _Pred,\n \t _Alloc, __cache_hash_code>& __x,\n-\t unordered_multiset<_Value, _Hash, _Pred,\n+\t __unordered_multiset<_Value, _Hash, _Pred,\n \t _Alloc, __cache_hash_code>& __y)\n     { __x.swap(__y); }\n \n+\n+  template<class _Value,\n+\t   class _Hash = hash<_Value>,\n+\t   class _Pred = std::equal_to<_Value>,\n+\t   class _Alloc = std::allocator<_Value> >\n+    class unordered_set\n+    : public __unordered_set<_Value, _Hash, _Pred, _Alloc>\n+    {\n+      typedef __unordered_set<_Value, _Hash, _Pred, _Alloc>  _Base;\n+\n+    public:\n+      typedef typename _Base::size_type       size_type;\n+      typedef typename _Base::hasher          hasher;\n+      typedef typename _Base::key_equal       key_equal;\n+      typedef typename _Base::allocator_type  allocator_type;\n+      \n+      explicit\n+      unordered_set(size_type __n = 10,\n+\t\t    const hasher& __hf = hasher(),\n+\t\t    const key_equal& __eql = key_equal(),\n+\t\t    const allocator_type& __a = allocator_type())\n+      : _Base(__n, __hf, __eql, __a)\n+      { }\n+\n+      template<typename _InputIterator>\n+        unordered_set(_InputIterator __f, _InputIterator __l, \n+\t\t      size_type __n = 10,\n+\t\t      const hasher& __hf = hasher(), \n+\t\t      const key_equal& __eql = key_equal(), \n+\t\t      const allocator_type& __a = allocator_type())\n+\t: _Base(__f, __l, __n, __hf, __eql, __a)\n+        { }\n+    };\n+\n+  template<class _Value,\n+\t   class _Hash = hash<_Value>,\n+\t   class _Pred = std::equal_to<_Value>,\n+\t   class _Alloc = std::allocator<_Value> >\n+    class unordered_multiset\n+    : public __unordered_multiset<_Value, _Hash, _Pred, _Alloc>\n+    {\n+      typedef __unordered_multiset<_Value, _Hash, _Pred, _Alloc>  _Base;\n+\n+    public:\n+      typedef typename _Base::size_type       size_type;\n+      typedef typename _Base::hasher          hasher;\n+      typedef typename _Base::key_equal       key_equal;\n+      typedef typename _Base::allocator_type  allocator_type;\n+      \n+      explicit\n+      unordered_multiset(size_type __n = 10,\n+\t\t\t const hasher& __hf = hasher(),\n+\t\t\t const key_equal& __eql = key_equal(),\n+\t\t\t const allocator_type& __a = allocator_type())\n+      : _Base(__n, __hf, __eql, __a)\n+      { }\n+\n+\n+      template<typename _InputIterator>\n+        unordered_multiset(_InputIterator __f, _InputIterator __l, \n+\t\t\t   typename _Base::size_type __n = 0,\n+\t\t\t   const hasher& __hf = hasher(), \n+\t\t\t   const key_equal& __eql = key_equal(), \n+\t\t\t   const allocator_type& __a = allocator_type())\n+\t: _Base(__f, __l, __n, __hf, __eql, __a)\n+        { }\n+    };\n+\n _GLIBCXX_END_NAMESPACE\n }\n "}, {"sha": "d54e2aa482c8aa24dba3382cff0587fca6e341f6", "filename": "libstdc++-v3/testsuite/tr1/6_containers/headers/unordered_map/synopsis.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fheaders%2Funordered_map%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fheaders%2Funordered_map%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fheaders%2Funordered_map%2Fsynopsis.cc?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do compile { xfail *-*-* } }\n-// { dg-excess-errors \"\" }\n+// { dg-do compile }\n \n // 2007-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n //"}, {"sha": "98dfc29957648623b52bc58998f7657d651239d9", "filename": "libstdc++-v3/testsuite/tr1/6_containers/headers/unordered_set/synopsis.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fheaders%2Funordered_set%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fheaders%2Funordered_set%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fheaders%2Funordered_set%2Fsynopsis.cc?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do compile { xfail *-*-* } }\n-// { dg-excess-errors \"\" }\n+// { dg-do compile }\n \n // 2007-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n //"}, {"sha": "aaacb70a0f593af1f41d0fddda7f98ffce210d0f", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_map/24064.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2F24064.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2F24064.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2F24064.cc?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,7 +29,7 @@ void test01()\n   using namespace std;\n   using namespace tr1;\n \n-  unordered_map<int, char, hash<int>, equal_to<int>,\n+  __unordered_map<int, char, hash<int>, equal_to<int>,\n     allocator<pair<const int, char> >, true> m;\n  \n   for (int i = 0; i < 1000; ++i)"}, {"sha": "8fb0b9f3b62bb493c14fff5fd2bb1216e1c566dd", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_map/requirements/explicit_instantiation.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation.cc?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -2,7 +2,7 @@\n \n // 2005-02-17  Matt Austern  <austern@apple.com>\n //\n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,9 +29,12 @@ using namespace std;\n using namespace std::tr1;\n \n template class unordered_map<string, float>;\n-template class unordered_map<string, float,\n+template class unordered_map<string, int,\n \t\t\t     hash<string>, equal_to<string>, \n-\t\t\t     allocator<pair<const string, float> >, true>;\n+\t\t\t     allocator<pair<const string, int> > >;\n template class unordered_map<string, float,\n \t\t\t     hash<string>, equal_to<string>, \n-\t\t\t     allocator<char>, false>;\n+\t\t\t     allocator<char> >;\n+template class __unordered_map<string, int,\n+\t\t\t       hash<string>, equal_to<string>, \n+\t\t\t       allocator<pair<const string, int> >, true>;"}, {"sha": "5433e0efa916722e778afdf0f35af4f53fa059ba", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multimap/requirements/explicit_instantiation.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation.cc?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -2,7 +2,7 @@\n \n // 2005-02-17  Matt Austern  <austern@apple.com>\n //\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,9 +29,12 @@ using namespace std;\n using namespace std::tr1;\n \n template class unordered_multimap<string, float>;\n-template class unordered_multimap<string, float,\n+template class unordered_multimap<string, int,\n \t\t\t\t  hash<string>, equal_to<string>, \n-\t\t\t\t  allocator<pair<const string, float> >, true>;\n+\t\t\t\t  allocator<pair<const string, int> > >;\n template class unordered_multimap<string, float,\n-\t\t\t\t  hash<string>, equal_to<string>, \n-\t\t\t\t  allocator<char>, false>;\n+\t\t\t\t  hash<string>, equal_to<string>,\n+\t\t\t\t  allocator<char> >;\n+template class __unordered_multimap<string, int,\n+\t\t\t\t    hash<string>, equal_to<string>, \n+\t\t\t\t    allocator<pair<const string, int> >, true>;"}, {"sha": "4389e1b805e0e6aab47fb31c742e325aceaa0587", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multiset/requirements/explicit_instantiation.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation.cc?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -2,7 +2,7 @@\n \n // 2005-02-17  Matt Austern  <austern@apple.com>\n //\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,9 @@ using namespace std;\n using namespace std::tr1;\n \n template class unordered_multiset<int>;\n+template class unordered_multiset<float, hash<float>, equal_to<float>,\n+\t\t\t\t  allocator<float> >;\n template class unordered_multiset<int, hash<int>, equal_to<int>,\n-\t\t\t\t  allocator<int>, true>;\n-template class unordered_multiset<int, hash<int>, equal_to<int>,\n-\t\t\t\t  allocator<char>, false>;\n+\t\t\t\t  allocator<char> >;\n+template class __unordered_multiset<float, hash<float>, equal_to<float>,\n+\t\t\t\t    allocator<float>, true>;"}, {"sha": "a006abfcbb497e0f6308243709ddbd6b6b0f7f19", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_set/requirements/explicit_instantiation.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation.cc?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -2,7 +2,7 @@\n \n // 2005-02-17  Matt Austern  <austern@apple.com>\n //\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,9 @@ using namespace std;\n using namespace std::tr1;\n \n template class unordered_set<int>;\n+template class unordered_set<float, hash<float>, equal_to<float>,\n+\t\t\t     allocator<float> >;\n template class unordered_set<int, hash<int>, equal_to<int>,\n-\t\t\t     allocator<int>, true>;\n-template class unordered_set<int, hash<int>, equal_to<int>,\n-\t\t\t     allocator<char>, false>;\n+\t\t\t     allocator<char> >;\n+template class __unordered_set<float, hash<float>, equal_to<float>,\n+\t\t\t       allocator<float>, true>;"}, {"sha": "be0e8f4227cf97f467a14c73036a826de0d15908", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_map.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -68,7 +68,7 @@ namespace pb_ds\n   {\n #ifdef PB_DS_USE_TR1\n #define PB_DS_BASE_C_DEC \\\n-    std::tr1::unordered_map<Key, Data, Hash_Fn, Eq_Fn, \\\n+    std::tr1::__unordered_map<Key, Data, Hash_Fn, Eq_Fn, \\\n     typename Allocator::template rebind<std::pair<const Key, Data> >::other, Cache_Hash>\n #else \n #define PB_DS_BASE_C_DEC \\"}, {"sha": "c78553b73fec0f5cb5a6bdfb88248b0a57a20469", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_set.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_set.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5992e39919ff3753d88afea7b75992a18ab4c4c6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_set.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_set.hpp?ref=5992e39919ff3753d88afea7b75992a18ab4c4c6", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -68,12 +68,12 @@ namespace pb_ds\n   {\n #ifdef PB_DS_USE_TR1\n #define PB_DS_BASE_C_DEC \\\n-    std::tr1::unordered_set<Key, Hash_Fn, Eq_Fn, \\\n-\t\t\t    typename Allocator::template rebind<Key>::other>\n+    std::tr1::__unordered_set<Key, Hash_Fn, Eq_Fn, \\\n+    typename Allocator::template rebind<Key>::other, Cache_Hash>\n #else\n #define PB_DS_BASE_C_DEC \\\n     __gnu_cxx::hash_set<Key, Hash_Fn, Eq_Fn, \\\n-\t\t\ttypename Allocator::template rebind<Key>::other>\n+    typename Allocator::template rebind<Key>::other>\n #endif\n \n     template<typename Key,"}]}