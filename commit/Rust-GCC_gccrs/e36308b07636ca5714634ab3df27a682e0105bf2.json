{"sha": "e36308b07636ca5714634ab3df27a682e0105bf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM2MzA4YjA3NjM2Y2E1NzE0NjM0YWIzZGYyN2E2ODJlMDEwNWJmMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-10-22T17:50:28Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-10-22T17:50:28Z"}, "message": "tree.h (TYPE_IS_SIZETYPE): Add more documentation.\n\n\t* tree.h (TYPE_IS_SIZETYPE): Add more documentation.\n\n\t* typeck.c (c_sizeof): Return an expression of `size_t' type,\n\tnot one with TYPE_IS_SIZETYPE set.\n\t(dubious_conversion_warnings): Remove special-case code.\n\nFrom-SVN: r37006", "tree": {"sha": "89e20837c19fa153a271e7fc610c95f367d0b8ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89e20837c19fa153a271e7fc610c95f367d0b8ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e36308b07636ca5714634ab3df27a682e0105bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36308b07636ca5714634ab3df27a682e0105bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e36308b07636ca5714634ab3df27a682e0105bf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36308b07636ca5714634ab3df27a682e0105bf2/comments", "author": null, "committer": null, "parents": [{"sha": "2622c79d2d51f6bf9122a3b5f458daa50c0baf19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2622c79d2d51f6bf9122a3b5f458daa50c0baf19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2622c79d2d51f6bf9122a3b5f458daa50c0baf19"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "af93e0b22c2eefb3e6255ed2d45e93eee7a1968f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36308b07636ca5714634ab3df27a682e0105bf2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36308b07636ca5714634ab3df27a682e0105bf2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e36308b07636ca5714634ab3df27a682e0105bf2", "patch": "@@ -1,3 +1,7 @@\n+2000-10-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* tree.h (TYPE_IS_SIZETYPE): Add more documentation.\n+\n 2000-10-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* diagnostic.c: Remove EGCS reference in comment."}, {"sha": "23660c3486bd4c743f0d6b306a83be427f7b4dce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36308b07636ca5714634ab3df27a682e0105bf2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36308b07636ca5714634ab3df27a682e0105bf2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e36308b07636ca5714634ab3df27a682e0105bf2", "patch": "@@ -1,3 +1,9 @@\n+2000-10-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* typeck.c (c_sizeof): Return an expression of `size_t' type, \n+\tnot one with TYPE_IS_SIZETYPE set.\n+\t(dubious_conversion_warnings): Remove special-case code.\n+\n 2000-10-21  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* decl2.c (arg_assoc_type): Handle VECTOR_TYPE."}, {"sha": "db7374ba4c2858b71ba6301fab4d735d072ea132", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36308b07636ca5714634ab3df27a682e0105bf2/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36308b07636ca5714634ab3df27a682e0105bf2/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e36308b07636ca5714634ab3df27a682e0105bf2", "patch": "@@ -1548,6 +1548,7 @@ c_sizeof (type)\n      tree type;\n {\n   enum tree_code code = TREE_CODE (type);\n+  tree size;\n \n   if (processing_template_decl)\n     return build_min (SIZEOF_EXPR, sizetype, type);\n@@ -1591,11 +1592,20 @@ c_sizeof (type)\n     }\n \n   /* Convert in case a char is more than one unit.  */\n-  return size_binop (CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n+  size = size_binop (CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n \t\t     size_int (TYPE_PRECISION (char_type_node)\n \t\t\t       / BITS_PER_UNIT));\n+  /* SIZE will have an integer type with TYPE_IS_SIZETYPE set.\n+     TYPE_IS_SIZETYPE means that certain things (like overflow) will\n+     never happen.  However, this node should really have type\n+     `size_t', which is just a typedef for an ordinary integer type.  */\n+  size = fold (build1 (NOP_EXPR, c_size_type_node, size));\n+  my_friendly_assert (!TYPE_IS_SIZETYPE (TREE_TYPE (size)), \n+\t\t      20001021);\n+  return size;\n }\n \n+\n tree\n expr_sizeof (e)\n      tree e;\n@@ -6354,14 +6364,7 @@ dubious_conversion_warnings (type, expr, errtype, fndecl, parmnum)\n \t\t\terrtype, expr, type);\n \t}\n \n-      /* Suppress warning for a sizetype since we never used to issue it.\n-\t ??? This needs to be looked at more carefully someday.  */\n-      if (TREE_CODE (expr) == INTEGER_CST\n-\t  && TREE_CODE (TREE_TYPE (expr)) == INTEGER_TYPE\n-\t  && TYPE_IS_SIZETYPE (TREE_TYPE (expr)))\n-\tTREE_OVERFLOW (expr) = TREE_CONSTANT_OVERFLOW (expr) = 0;\n-      else\n-\toverflow_warning (expr);\n+      overflow_warning (expr);\n \n       if (TREE_CONSTANT (expr))\n \texpr = fold (expr);"}, {"sha": "9551c8f0a31c6caecd3a08dd8bd15620c1ff65dc", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36308b07636ca5714634ab3df27a682e0105bf2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36308b07636ca5714634ab3df27a682e0105bf2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e36308b07636ca5714634ab3df27a682e0105bf2", "patch": "@@ -949,9 +949,14 @@ struct tree_block\n    its size.  */\n #define TYPE_NO_FORCE_BLK(NODE) (TYPE_CHECK (NODE)->type.no_force_blk_flag)\n \n-/* In an INTEGER_TYPE, it means the type represents a size.  We use this\n-   both for validity checking and to permit optimziations that are unsafe\n-   for other types.  */\n+/* In an INTEGER_TYPE, it means the type represents a size.  We use\n+   this both for validity checking and to permit optimizations that\n+   are unsafe for other types.  Note that the C `size_t' type should\n+   *not* have this flag set.  The `size_t' type is simply a typedef\n+   for an ordinary integer type that happens to be the type of an\n+   expression returned by `sizeof'; `size_t' has no special\n+   properties.  Expressions whose type have TYPE_IS_SIZETYPE set are\n+   always actual sizes.  */\n #define TYPE_IS_SIZETYPE(NODE) \\\n   (INTEGER_TYPE_CHECK (NODE)->type.no_force_blk_flag)\n "}]}