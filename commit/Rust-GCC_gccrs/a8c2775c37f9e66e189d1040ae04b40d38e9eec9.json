{"sha": "a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThjMjc3NWMzN2Y5ZTY2ZTE4OWQxMDQwYWUwNGI0MGQzOGU5ZWVjOQ==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2004-01-05T21:41:21Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2004-01-05T21:41:21Z"}, "message": "2004-01-05  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c\n\t(pre_event_handler): Set all insets to 0 when a Configure event\n\tis received for a GtkPlug.\n\t* gnu/java/awt/EmbeddedWindow.java (window_id): Rename handle.\n\tMake handle long, not int.\n\t(EmbeddedWindow()): New constructor.\n\t(EmbeddedWindow(int)): Rename window_id to handle.  Make handle\n\tlong, not int.\n\t(setHandle): New method.\n\t(getHandle): Return long, not int.\n\t* gnu/java/awt/peer/EmbeddedWindowPeer.java (embed): New method\n\tdeclaration.\n\t* gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.java,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c:\n\t(create(long)): Take long parameter, not int.  Cast gtk_plug_new\n\targument to GdkNativeWindow.\n\t(construct): New method.\n\t(embed): New method.\n\nFrom-SVN: r75447", "tree": {"sha": "fcd9290db182f1d323529db8273839e1b6589878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcd9290db182f1d323529db8273839e1b6589878"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/comments", "author": null, "committer": null, "parents": [{"sha": "6037221c71ac41ed1971a58f1cb00e71da657665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6037221c71ac41ed1971a58f1cb00e71da657665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6037221c71ac41ed1971a58f1cb00e71da657665"}], "stats": {"total": 125, "additions": 108, "deletions": 17}, "files": [{"sha": "f19dd30bfcbafaf19cb479522b8a4b4a278c1a30", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "patch": "@@ -1,5 +1,24 @@\n 2004-01-05  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c\n+\t(pre_event_handler): Set all insets to 0 when a Configure event\n+\tis received for a GtkPlug.\n+\t* gnu/java/awt/EmbeddedWindow.java (window_id): Rename handle.\n+\tMake handle long, not int.\n+\t(EmbeddedWindow()): New constructor.\n+\t(EmbeddedWindow(int)): Rename window_id to handle.  Make handle\n+\tlong, not int.\n+\t(setHandle): New method.\n+\t(getHandle): Return long, not int.\n+\t* gnu/java/awt/peer/EmbeddedWindowPeer.java (embed): New method\n+\tdeclaration.\n+\t* gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.java,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c:\n+\t(create(long)): Take long parameter, not int.  Cast gtk_plug_new\n+\targument to GdkNativeWindow.\n+\t(construct): New method.\n+\t(embed): New method.\n+\n \t* gnu/java/awt/peer/gtk/GtkScrollPanePeer.java,\n \tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c\n \t(create(int, int)): New method."}, {"sha": "24bd107bd2b3fec3f3fd4e1a38767a4016feeda4", "filename": "libjava/gnu/java/awt/EmbeddedWindow.java", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindow.java?ref=a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "patch": "@@ -50,18 +50,29 @@\n  */\n public class EmbeddedWindow extends Frame\n {\n-  private int window_id;\n+  private long handle;\n   \n   /**\n-   * Creates an window to be embedded into another application.\n+   * Creates a window to be embedded into another application.  The\n+   * window will only be embedded after its setHandle method has been\n+   * called.\n+   */\n+  public EmbeddedWindow ()\n+  {\n+    super();\n+    this.handle = 0;\n+  }\n+  \n+  /**\n+   * Creates a window to be embedded into another application.\n    *\n-   * @param window_id The native handle to the screen area where the AWT window\n-   * should be embedded.\n+   * @param handle the native handle to the screen area where the AWT\n+   * window should be embedded\n    */\n-  public EmbeddedWindow (int window_id)\n+  public EmbeddedWindow (long handle)\n   {\n     super();\n-    this.window_id = window_id;\n+    this.handle = handle;\n   }\n   \n   /**\n@@ -83,14 +94,32 @@ public void addNotify()\n   // an AWT internal java.awt.Component.peer member variable.\n   native void setWindowPeer (EmbeddedWindowPeer peer);\n \n+  /**\n+   * If the native peer for this embedded window has been created,\n+   * then setHandle will embed the window.  If not, setHandle tells\n+   * us where to embed ourselves when our peer is created.\n+   *\n+   * @param handle the native handle to the screen area where the AWT\n+   * window should be embedded\n+   */\n+  public void setHandle(long handle)\n+  {\n+    if (this.handle != 0)\n+      throw new RuntimeException (\"EmbeddedWindow is already embedded\");\n+\n+    this.handle = handle;\n+    if (peer != null)\n+      ((EmbeddedWindowPeer) peer).embed (this.handle);\n+  }\n+\n   /**\n    * Gets the native handle of the screen area where the window will\n    * be embedded.\n    *\n    * @return The native handle that was passed to the constructor.\n    */\n-  public int getHandle()\n+  public long getHandle()\n   {\n-    return window_id;\n+    return handle;\n   }\n }"}, {"sha": "95a56d1a527147994f632f6664ffce7f5b6c8787", "filename": "libjava/gnu/java/awt/peer/EmbeddedWindowPeer.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2FEmbeddedWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2FEmbeddedWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2FEmbeddedWindowPeer.java?ref=a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "patch": "@@ -43,4 +43,5 @@\n \n public interface EmbeddedWindowPeer extends FramePeer\n {\n+  void embed (long handle);\n }"}, {"sha": "9ee41c985915f771727200f2a56efbde75430410", "filename": "libjava/gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.java", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkEmbeddedWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkEmbeddedWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkEmbeddedWindowPeer.java?ref=a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "patch": "@@ -45,11 +45,25 @@\n public class GtkEmbeddedWindowPeer extends GtkFramePeer\n   implements EmbeddedWindowPeer\n {\n-  native void create(int window_id);\n+  native void create (long socket_id);\n \n   void create ()\n   {\n-    create (((EmbeddedWindow) awtComponent).getHandle());\n+    create (((EmbeddedWindow) awtComponent).getHandle ());\n+  }\n+\n+  native void construct (long socket_id);\n+\n+  // FIXME: embed doesn't work right now, though I believe it should.\n+  // This means that you can't call setVisible (true) on an\n+  // EmbeddedWindow before calling setHandle with a valid handle.  The\n+  // problem is that somewhere after the call to\n+  // GtkEmbeddedWindow.create and before the call to\n+  // GtkEmbeddedWindow.construct, the GtkPlug peer is being realized.\n+  // GtkSocket silently fails to embed an already-realized GtkPlug.\n+  public void embed (long handle)\n+  {\n+    construct (handle);\n   }\n \n   public GtkEmbeddedWindowPeer (EmbeddedWindow w)"}, {"sha": "c98473f549ba145af55429b68fba2c9716aff355", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c?ref=a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "patch": "@@ -42,7 +42,7 @@ exception statement from your version. */\n \n JNIEXPORT void JNICALL\n Java_gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer_create\n-  (JNIEnv *env, jobject obj, jint window_id)\n+  (JNIEnv *env, jobject obj, jlong socket_id)\n {\n   GtkWidget *window;\n   GtkWidget *vbox, *layout;\n@@ -51,8 +51,8 @@ Java_gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer_create\n   NSA_SET_GLOBAL_REF (env, obj);\n \n   gdk_threads_enter ();\n-  \n-  window = gtk_plug_new (window_id);\n+\n+  window = gtk_plug_new ((GdkNativeWindow) socket_id);\n \n   vbox = gtk_vbox_new (0, 0);\n   layout = gtk_layout_new (NULL, NULL);\n@@ -66,3 +66,21 @@ Java_gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer_create\n \n   NSA_SET_PTR (env, obj, window);\n }\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer_construct\n+  (JNIEnv *env, jobject obj, jlong socket_id)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  if (GTK_WIDGET_REALIZED (GTK_WIDGET (ptr)))\n+    g_printerr (\"ERROR: GtkPlug is already realized\\n\");\n+\n+  gtk_plug_construct (GTK_PLUG (ptr), (GdkNativeWindow) socket_id);\n+\n+  gdk_threads_leave ();\n+}"}, {"sha": "e8b8702ef15f5e663058d77188db60446ceae7ca", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c2775c37f9e66e189d1040ae04b40d38e9eec9/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c?ref=a8c2775c37f9e66e189d1040ae04b40d38e9eec9", "patch": "@@ -998,10 +998,20 @@ pre_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)\n \t    gdk_threads_leave ();\n \n \t    /* FIXME: hard-code these values for now. */\n-\t    top = 20;\n-\t    left = 6;\n-\t    bottom = 6;\n-\t    right = 6;\n+\t    if (GTK_IS_PLUG (widget))\n+\t      {\n+\t\ttop = 0;\n+\t\tleft = 0;\n+\t\tbottom = 0;\n+\t\tright = 0;\n+\t      }\n+\t    else\n+\t      {\n+\t\ttop = 20;\n+\t\tleft = 6;\n+\t\tbottom = 6;\n+\t\tright = 6;\n+\t      }\n \n  \t    (*gdk_env)->CallVoidMethod (gdk_env, peer,\n \t\t\t\t\tpostConfigureEventID,"}]}