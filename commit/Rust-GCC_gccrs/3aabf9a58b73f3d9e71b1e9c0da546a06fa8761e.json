{"sha": "3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhYmY5YTU4YjczZjNkOWU3MWIxZTljMGRhNTQ2YTA2ZmE4NzYxZQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-10-22T21:51:54Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-10-22T21:51:54Z"}, "message": "sparc.h: Add #error.\n\n2002-10-22  Eric Christopher  <echristo@redhat.com>\n\n        * config/sparc/sparc.h: Add #error.\n\nFrom-SVN: r58420", "tree": {"sha": "11c97fdfb7ec36c225c0fdc5fe063c2f2d121e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11c97fdfb7ec36c225c0fdc5fe063c2f2d121e18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e/comments", "author": null, "committer": null, "parents": [{"sha": "7e7e6d089d210e9a6af1c36ee567a91220716de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7e6d089d210e9a6af1c36ee567a91220716de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7e6d089d210e9a6af1c36ee567a91220716de6"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "3e31ecabfeddc871bb3a989b144c05c6da3db5d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e", "patch": "@@ -1,3 +1,7 @@\n+2002-10-22  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/sparc/sparc.h: Add #error.\n+\n 2002-10-22  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config.gcc [s390-*-linux]: Remove s390/t-linux from tmake_file.\n@@ -205,7 +209,7 @@ Tue Oct 22 00:04:20 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \tconfig/ia64/ia64.h, config/m68k/linux.h, config/m68k/m68k-protos.h,\n \tconfig/m68k/m68k.c, config/m68k/netbsd-elf.h, config/m68k/openbsd.h,\n \tconfig/mmix/mmix-protos.h, config/mmix/mmix.c, config/mmix/mmix.h,\n-\tconfig/pa/pa-protos.h, config/pa/pa.c, config/pa/pa.h, \n+\tconfig/pa/pa-protos.h, config/pa/pa.c, config/pa/pa.h,\n \tconfig/s390/s390-protos.h, config/s390/s390.c, config/s390/s390.h,\n \tconfig/sparc/openbsd.h, config/sparc/sparc-protos.h,\n \tconfig/sparc/sparc.c, config/sparc/sparc.h,\n@@ -269,7 +273,7 @@ Tue Oct 22 00:04:20 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* stormy16-protos.h, stormy16.c (xstormy16_asm_output_mi_thunk):\n \tLikewise.\n \t* vax-protos.h, vax.c (vax_output_mi_thunk): Likewise.\n-\t\n+\n \t* target.h (gcc_target): Update output_mi_thunk and\n \toutput_mi_vcall_thunk to take a HOST_WIDE_INT delta and\n \tvcall_index.\n@@ -293,7 +297,7 @@ Tue Oct 22 00:04:20 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* doc/tm.texi (TARGET_ASM_OUTPUT_MI_THUNK): Update signature.\n \t(TARGET_ASM_OUTPU_MI_VCALL_THUNK): Likewise.\n-\t\n+\n 2002-10-19  Brad Lucier  <lucier@math.purdue.edu>\n \n \t* real.c (do_add): Fix 0+0 sign corner case."}, {"sha": "4dcff9105f0448a374f08288f07207d3caed1f70", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3aabf9a58b73f3d9e71b1e9c0da546a06fa8761e", "patch": "@@ -107,7 +107,7 @@ extern enum cmodel sparc_cmodel;\n /* Values of TARGET_CPU_DEFAULT, set via -D in the Makefile,\n    and specified by the user via --with-cpu=foo.\n    This specifies the cpu implementation, not the architecture size.  */\n-/* Note that TARGET_CPU_v9 is assumed to start the list of 64-bit \n+/* Note that TARGET_CPU_v9 is assumed to start the list of 64-bit\n    capable cpu's.  */\n #define TARGET_CPU_sparc\t0\n #define TARGET_CPU_v7\t\t0\t/* alias for previous */\n@@ -187,7 +187,7 @@ extern enum cmodel sparc_cmodel;\n #endif\n \n #if !defined(CPP_CPU32_DEFAULT_SPEC) || !defined(CPP_CPU64_DEFAULT_SPEC)\n-Unrecognized value in TARGET_CPU_DEFAULT.\n+ #error Unrecognized value in TARGET_CPU_DEFAULT.\n #endif\n \n #ifdef SPARC_BI_ARCH\n@@ -479,13 +479,13 @@ extern int target_flags;\n #define TARGET_FPU_SET (target_flags & MASK_FPU_SET)\n \n /* Use the UltraSPARC Visual Instruction Set extensions.  */\n-#define MASK_VIS 0x1000000          \n+#define MASK_VIS 0x1000000\n #define TARGET_VIS (target_flags & MASK_VIS)\n \n /* Compile for Solaris V8+.  32 bit Solaris preserves the high bits of\n    the current out and global registers and Linux 2.2+ as well.  */\n #define MASK_V8PLUS 0x2000000\n-#define TARGET_V8PLUS (target_flags & MASK_V8PLUS)                            \n+#define TARGET_V8PLUS (target_flags & MASK_V8PLUS)\n \n /* Force a the fastest alignment on structures to take advantage of\n    faster copies.  */\n@@ -508,7 +508,7 @@ extern int target_flags;\n \n #define TARGET_HARD_MUL\t\t\t\t\t\\\n   (TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET\t\\\n-   || TARGET_DEPRECATED_V8_INSNS || TARGET_V8PLUS)                        \n+   || TARGET_DEPRECATED_V8_INSNS || TARGET_V8PLUS)\n \n \n /* Macro to define tables used to set the flags.\n@@ -1242,8 +1242,8 @@ extern enum reg_class sparc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n #define REGNO_REG_CLASS(REGNO) sparc_regno_reg_class[(REGNO)]\n \n-/* This is the order in which to allocate registers normally.  \n-   \n+/* This is the order in which to allocate registers normally.\n+\n    We put %f0-%f7 last among the float registers, so as to make it more\n    likely that a pseudo-register which dies in the float return register\n    area will get allocated to the float return register, thus saving a move\n@@ -1318,7 +1318,7 @@ extern enum reg_class sparc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n   39, 38, 37, 36, 35, 34, 33, 32,\t/* %f7-%f0 */\t\\\n   96, 97, 98, 99,\t\t\t/* %fcc0-3 */\t\\\n   100, 0, 14, 30, 31, 101}\t\t/* %icc, %g0, %o6, %i6, %i7, %sfp */\n-  \n+\n #define ORDER_REGS_FOR_LOCAL_ALLOC order_regs_for_local_alloc ()\n \n extern char sparc_leaf_regs[];\n@@ -1476,7 +1476,7 @@ extern char leaf_reg_remap[];\n        ? GENERAL_REGS\t\t\t\t\t\t\\\n        : NO_REGS)\n \n-/* On SPARC it is not possible to directly move data between \n+/* On SPARC it is not possible to directly move data between\n    GENERAL_REGS and FP_REGS.  */\n #define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE) \\\n   (FP_REG_CLASS_P (CLASS1) != FP_REG_CLASS_P (CLASS2))\n@@ -1572,7 +1572,7 @@ extern char leaf_reg_remap[];\n \n /* Definitions for register elimination.  */\n /* ??? In TARGET_FLAT mode we needn't have a hard frame pointer.  */\n-   \n+\n #define ELIMINABLE_REGS \\\n   {{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}, \\\n    { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM} }\n@@ -1825,7 +1825,7 @@ extern GTY(()) rtx sparc_compare_op1;\n   fprintf ((FILE), \"\\t.proc\\t0%lo\\n\", sparc_type_code (TREE_TYPE (RESULT)))\n \n /* Output the special assembly code needed to tell the assembler some\n-   register is used as global register variable.  \n+   register is used as global register variable.\n \n    SPARC 64bit psABI declares registers %g2 and %g3 as application\n    registers and %g6 and %g7 as OS registers.  Any object using them\n@@ -2219,7 +2219,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define RTX_OK_FOR_OFFSET_P(X)\t\t\t\t\t\t\\\n   (GET_CODE (X) == CONST_INT && INTVAL (X) >= -0x1000 && INTVAL (X) < 0x1000 - 8)\n-  \n+\n #define RTX_OK_FOR_OLO10_P(X)\t\t\t\t\t\t\\\n   (GET_CODE (X) == CONST_INT && INTVAL (X) >= -0x1000 && INTVAL (X) < 0xc00 - 8)\n \n@@ -2374,7 +2374,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    macro is used in only one place: `find_reloads_address' in reload.c.\n \n    For SPARC 32, we wish to handle addresses by splitting them into\n-   HIGH+LO_SUM pairs, retaining the LO_SUM in the memory reference. \n+   HIGH+LO_SUM pairs, retaining the LO_SUM in the memory reference.\n    This cuts the number of extra insns by one.\n \n    Do nothing when generating PIC code and the address is a\n@@ -3008,4 +3008,3 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define JMP_BUF_SIZE 12\n \n #define DONT_ACCESS_GBLS_AFTER_EPILOGUE (flag_pic)\n-"}]}