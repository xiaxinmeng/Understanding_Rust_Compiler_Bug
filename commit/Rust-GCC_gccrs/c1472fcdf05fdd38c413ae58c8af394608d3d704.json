{"sha": "c1472fcdf05fdd38c413ae58c8af394608d3d704", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0NzJmY2RmMDVmZGQzOGM0MTNhZTU4YzhhZjM5NDYwOGQzZDcwNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-15T21:41:07Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-15T21:41:07Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r494", "tree": {"sha": "c183c0fed3ead29c7087a01c9955b126674f2131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c183c0fed3ead29c7087a01c9955b126674f2131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1472fcdf05fdd38c413ae58c8af394608d3d704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1472fcdf05fdd38c413ae58c8af394608d3d704", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1472fcdf05fdd38c413ae58c8af394608d3d704", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1472fcdf05fdd38c413ae58c8af394608d3d704/comments", "author": null, "committer": null, "parents": [{"sha": "2b5044e0e664411ce98e5bca4c310885304893f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5044e0e664411ce98e5bca4c310885304893f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b5044e0e664411ce98e5bca4c310885304893f8"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "c43cdb2c0693ff14802948e11fb06f1ca597cf61", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1472fcdf05fdd38c413ae58c8af394608d3d704/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1472fcdf05fdd38c413ae58c8af394608d3d704/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c1472fcdf05fdd38c413ae58c8af394608d3d704", "patch": "@@ -975,9 +975,12 @@\n   \"\"\n   \"\n {\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && GET_CODE (operands[3]) == CONST_INT\n-      && INTVAL (operands[2]) / INTVAL (operands[3]) > 32)\n+  /* If the size isn't known, don't emit inline code.  output_block_move\n+     would output code that's much slower than the library function.\n+     Also don't output code for large blocks.  */\n+  if (GET_CODE (operands[2]) != CONST_INT\n+      || GET_CODE (operands[3]) != CONST_INT\n+      || INTVAL (operands[2]) / INTVAL (operands[3]) > 16)\n     FAIL;\n \n   operands[0] = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n@@ -1414,8 +1417,8 @@\n {\n   rtx op2 = operands[2];\n \n-  /* If constant is positive, upper bits zeroed, otherwise unchanged\n-   * give the assembler a chance to pick the move instruction. */\n+  /* If constant is positive, upper bits zeroed, otherwise unchanged.\n+     Give the assembler a chance to pick the move instruction. */\n   if (GET_CODE (op2) == CONST_INT)\n     {\n       int sign = INTVAL (op2);\n@@ -1472,8 +1475,8 @@\n {\n   rtx op2 = operands[2];\n \n-  /* If constant is positive, upper bits zeroed, otherwise unchanged\n-  /* If constant is positive, upper bits zeroed, otherwise unchanged\n+  /* If constant is positive, upper bits zeroed, otherwise unchanged.\n+     Give the assembler a chance to pick the move instruction. */\n   if (GET_CODE (op2) == CONST_INT)\n     {\n       int sign = INTVAL (op2);\n@@ -1540,8 +1543,8 @@\n {\n   rtx op2 = operands[2];\n \n-  /* If constant is positive, upper bits zeroed, otherwise unchanged\n-   * give the assembler a chance to pick the move instruction. */\n+  /* If constant is positive, upper bits zeroed, otherwise unchanged.\n+     Give the assembler a chance to pick the move instruction. */\n   if (GET_CODE (op2) == CONST_INT)\n     {\n       int sign = INTVAL (op2);\n@@ -1600,8 +1603,8 @@\n {\n   rtx op2 = operands[2];\n \n-  /* If constant is positive, upper bits zeroed, otherwise unchanged\n-   * give the assembler a chance to pick the move instruction. */\n+  /* If constant is positive, upper bits zeroed, otherwise unchanged.\n+     Give the assembler a chance to pick the move instruction. */\n   if (GET_CODE (op2) == CONST_INT)\n     {\n       int sign = INTVAL (op2);\n@@ -1660,8 +1663,8 @@\n {\n   rtx op2 = operands[2];\n \n-  /* If constant is postive, upper bits zeroed, otherwise unchanged\n-   * give the assembler a chance to pick the move instruction. */\n+  /* If constant is postive, upper bits zeroed, otherwise unchanged.\n+     Give the assembler a chance to pick the move instruction. */\n   if (GET_CODE (op2) == CONST_INT)\n     {\n       int sign = INTVAL (op2);"}]}