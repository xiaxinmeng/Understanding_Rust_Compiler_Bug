{"sha": "64a93ac5582208c6adf7ad8cb62079ebe98c9f25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhOTNhYzU1ODIyMDhjNmFkZjdhZDhjYjYyMDc5ZWJlOThjOWYyNQ==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1991-12-24T04:02:47Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1991-12-24T04:02:47Z"}, "message": "entered into RCS\n\nFrom-SVN: r136", "tree": {"sha": "fbc29cc264a42bff1f1b5160eb73f847ccaf5bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbc29cc264a42bff1f1b5160eb73f847ccaf5bc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a93ac5582208c6adf7ad8cb62079ebe98c9f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a93ac5582208c6adf7ad8cb62079ebe98c9f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a93ac5582208c6adf7ad8cb62079ebe98c9f25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a93ac5582208c6adf7ad8cb62079ebe98c9f25/comments", "author": null, "committer": null, "parents": [{"sha": "02ba24b7f45adfd882043fb1d8882dfde85f5067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ba24b7f45adfd882043fb1d8882dfde85f5067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ba24b7f45adfd882043fb1d8882dfde85f5067"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "6505739445467d06e2d76698c08c9c482562a4bc", "filename": "gcc/recog.h", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a93ac5582208c6adf7ad8cb62079ebe98c9f25/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a93ac5582208c6adf7ad8cb62079ebe98c9f25/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=64a93ac5582208c6adf7ad8cb62079ebe98c9f25", "patch": "@@ -0,0 +1,111 @@\n+/* Declarations for interface to insn recognizer and insn-output.c.\n+   Copyright (C) 1987 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Recognize an insn and return its insn-code,\n+   which is the sequence number of the DEFINE_INSN that it matches.\n+   If the insn does not match, return -1.  */\n+\n+extern int recog_memoized ();\n+\n+/* Determine whether a proposed change to an insn or MEM will make it\n+   invalid.  Make the change if not.  */\n+\n+extern int validate_change ();\n+\n+/* Apply a group of changes if valid.  */\n+\n+extern int apply_change_group ();\n+\n+/* Return the number of changes so far in the current group.   */\n+\n+extern int num_validated_changes ();\n+\n+/* Retract some changes.  */\n+\n+extern void cancel_changes ();\n+\n+/* Nonzero means volatile operands are recognized.  */\n+\n+extern int volatile_ok;\n+\n+/* Extract the operands from an insn that has been recognized.  */\n+\n+extern void insn_extract ();\n+\n+/* The following vectors hold the results from insn_extract.  */\n+\n+/* Indexed by N, gives value of operand N.  */\n+extern rtx recog_operand[];\n+\n+/* Indexed by N, gives location where operand N was found.  */\n+extern rtx *recog_operand_loc[];\n+\n+/* Indexed by N, gives location where the Nth duplicate-appearance of\n+   an operand was found.  This is something that matched MATCH_DUP.  */\n+extern rtx *recog_dup_loc[];\n+\n+/* Indexed by N, gives the operand number that was duplicated in the\n+   Nth duplicate-appearance of an operand.  */\n+extern char recog_dup_num[];\n+\n+#ifndef __STDC__\n+#ifndef const\n+#define const\n+#endif\n+#endif\n+\n+/* Access the output function for CODE.  */\n+\n+#define OUT_FCN(CODE) (*insn_outfun[(int) (CODE)])\n+\n+/* Tables defined in insn-output.c that give information about\n+   each insn-code value.  */\n+\n+/* These are vectors indexed by insn-code.  Details in genoutput.c.  */\n+\n+extern char *const insn_template[];\n+\n+extern char *(*const insn_outfun[]) ();\n+\n+extern const int insn_n_operands[];\n+\n+extern const int insn_n_dups[];\n+\n+/* Indexed by insn code number, gives # of constraint alternatives.  */\n+\n+extern const int insn_n_alternatives[];\n+\n+/* These are two-dimensional arrays indexed first by the insn-code\n+   and second by the operand number.  Details in genoutput.c.  */\n+\n+#ifdef REGISTER_CONSTRAINTS  /* Avoid undef sym in certain broken linkers.  */\n+extern char *const insn_operand_constraint[][MAX_RECOG_OPERANDS];\n+#endif\n+\n+#ifndef REGISTER_CONSTRAINTS  /* Avoid undef sym in certain broken linkers.  */\n+extern const char insn_operand_address_p[][MAX_RECOG_OPERANDS];\n+#endif\n+\n+extern const enum machine_mode insn_operand_mode[][MAX_RECOG_OPERANDS];\n+\n+extern const char insn_operand_strict_low[][MAX_RECOG_OPERANDS];\n+\n+extern int (*const insn_operand_predicate[][MAX_RECOG_OPERANDS]) ();\n+\n+extern char * insn_name[];"}]}