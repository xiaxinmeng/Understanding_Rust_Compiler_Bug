{"sha": "b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY4NWRlMTJkMmUyNzI3ODJkMWY3YmZkZDZmZTdmOGQyYTZiM2YyOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-25T04:26:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-25T04:26:12Z"}, "message": "re PR go/52583 (Several new go testsuite failues on Solaris)\n\n\tPR go/52583\n\nnet: Solaris fixes.\n\nIn particular fix fd_select.go to handle the case where a file\ndescriptor is closed by one goroutine while another goroutine\nis waiting for it.\n\nFrom-SVN: r186801", "tree": {"sha": "bb3c841696f0b436993d0d21e5041a2489adfb92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb3c841696f0b436993d0d21e5041a2489adfb92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/comments", "author": null, "committer": null, "parents": [{"sha": "b427dd7ae36ebff101e69757100186d536140c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b427dd7ae36ebff101e69757100186d536140c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b427dd7ae36ebff101e69757100186d536140c55"}], "stats": {"total": 175, "additions": 166, "deletions": 9}, "files": [{"sha": "074d66405cdb1d9080ab5dc2fc2236b0988e0ba8", "filename": "libgo/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "patch": "@@ -654,9 +654,9 @@ go_net_sockoptip_file = go/net/sockoptip_linux.go\n else\n if LIBGO_IS_SOLARIS\n go_net_cgo_file = go/net/cgo_linux.go\n-go_net_sock_file = go/net/sock_linux.go\n-go_net_sockopt_file = go/net/sockopt_linux.go\n-go_net_sockoptip_file = go/net/sockoptip_linux.go\n+go_net_sock_file = go/net/sock_solaris.go\n+go_net_sockopt_file = go/net/sockopt_bsd.go\n+go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_solaris.go\n else\n if LIBGO_IS_FREEBSD\n go_net_cgo_file = go/net/cgo_bsd.go"}, {"sha": "bbec292fb944ba9a532bf9744e2e652d523d543e", "filename": "libgo/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "patch": "@@ -1019,17 +1019,17 @@ go_mime_files = \\\n @LIBGO_IS_LINUX_TRUE@go_net_cgo_file = go/net/cgo_linux.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sock_file = go/net/sock_bsd.go\n @LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sock_file = go/net/sock_bsd.go\n-@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sock_file = go/net/sock_linux.go\n+@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sock_file = go/net/sock_solaris.go\n @LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@go_net_sock_file = go/net/sock_linux.go\n @LIBGO_IS_LINUX_TRUE@go_net_sock_file = go/net/sock_linux.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockopt_file = go/net/sockopt_bsd.go\n @LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockopt_file = go/net/sockopt_bsd.go\n-@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockopt_file = go/net/sockopt_linux.go\n+@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockopt_file = go/net/sockopt_bsd.go\n @LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@go_net_sockopt_file = go/net/sockopt_linux.go\n @LIBGO_IS_LINUX_TRUE@go_net_sockopt_file = go/net/sockopt_linux.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_netbsd.go\n @LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_freebsd.go\n-@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockoptip_file = go/net/sockoptip_linux.go\n+@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_solaris.go\n @LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@go_net_sockoptip_file = go/net/sockoptip_linux.go\n @LIBGO_IS_LINUX_TRUE@go_net_sockoptip_file = go/net/sockoptip_linux.go\n @LIBGO_IS_LINUX_FALSE@go_net_sendfile_file = go/net/sendfile_stub.go"}, {"sha": "63b91b37ead5ba7eb160c05378db1bb1dd3cdc3f", "filename": "libgo/go/net/dial_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Fdial_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Fdial_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdial_test.go?ref=b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "patch": "@@ -130,7 +130,7 @@ func TestSelfConnect(t *testing.T) {\n \t\tn = 1000\n \t}\n \tswitch runtime.GOOS {\n-\tcase \"darwin\", \"freebsd\", \"openbsd\", \"windows\":\n+\tcase \"darwin\", \"freebsd\", \"openbsd\", \"solaris\", \"windows\":\n \t\t// Non-Linux systems take a long time to figure\n \t\t// out that there is nothing listening on localhost.\n \t\tn = 100"}, {"sha": "22db1cbcac22c9eae20a81793634225ae8485c7b", "filename": "libgo/go/net/fd_select.go", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Ffd_select.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Ffd_select.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_select.go?ref=b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "patch": "@@ -102,7 +102,27 @@ func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err erro\n \t\t\t\tbreak\n \t\t\t}\n \t\t}\n-\t\tif e != nil {\n+\t\tif e == syscall.EBADF {\n+\t\t\t// Some file descriptor has been closed.\n+\t\t\ttmpReadFds = syscall.FdSet{}\n+\t\t\ttmpWriteFds = syscall.FdSet{}\n+\t\t\tn = 0\n+\t\t\tfor i := 0; i < p.maxFd+1; i++ {\n+\t\t\t\tif syscall.FDIsSet(i, p.readFds) {\n+\t\t\t\t\tvar s syscall.Stat_t\n+\t\t\t\t\tif syscall.Fstat(i, &s) == syscall.EBADF {\n+\t\t\t\t\t\tsyscall.FDSet(i, &tmpReadFds)\n+\t\t\t\t\t\tn++\n+\t\t\t\t\t}\n+\t\t\t\t} else if syscall.FDIsSet(i, p.writeFds) {\n+\t\t\t\t\tvar s syscall.Stat_t\n+\t\t\t\t\tif syscall.Fstat(i, &s) == syscall.EBADF {\n+\t\t\t\t\t\tsyscall.FDSet(i, &tmpWriteFds)\n+\t\t\t\t\t\tn++\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if e != nil {\n \t\t\treturn -1, 0, os.NewSyscallError(\"select\", e)\n \t\t}\n \t\tif n == 0 {"}, {"sha": "50c0f0a82c9bee276560e7067bf93db18edf7046", "filename": "libgo/go/net/multicast_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Fmulticast_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Fmulticast_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fmulticast_test.go?ref=b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "patch": "@@ -46,7 +46,7 @@ var multicastListenerTests = []struct {\n // listener with same address family, same group address and same port.\n func TestMulticastListener(t *testing.T) {\n \tswitch runtime.GOOS {\n-\tcase \"netbsd\", \"openbsd\", \"plan9\", \"windows\":\n+\tcase \"netbsd\", \"openbsd\", \"plan9\", \"solaris\", \"windows\":\n \t\tt.Logf(\"skipping test on %q\", runtime.GOOS)\n \t\treturn\n \tcase \"linux\":"}, {"sha": "ad639cc4a7fbe0ce4a920064995a8d48d6b9bce3", "filename": "libgo/go/net/sock_solaris.go", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Fsock_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Fsock_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsock_solaris.go?ref=b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build solaris\n+\n+// Sockets for Solaris\n+\n+package net\n+\n+import (\n+\t\"syscall\"\n+)\n+\n+func maxListenerBacklog() int {\n+\t// The kernel does not track the limit.\n+\treturn syscall.SOMAXCONN\n+}\n+\n+func listenerSockaddr(s, f int, la syscall.Sockaddr, toAddr func(syscall.Sockaddr) Addr) (syscall.Sockaddr, error) {\n+\ta := toAddr(la)\n+\tif a == nil {\n+\t\treturn la, nil\n+\t}\n+\tswitch v := a.(type) {\n+\tcase *TCPAddr, *UnixAddr:\n+\t\terr := setDefaultListenerSockopts(s)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\tcase *UDPAddr:\n+\t\tif v.IP.IsMulticast() {\n+\t\t\terr := setDefaultMulticastSockopts(s)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tswitch f {\n+\t\t\tcase syscall.AF_INET:\n+\t\t\t\tv.IP = IPv4zero\n+\t\t\tcase syscall.AF_INET6:\n+\t\t\t\tv.IP = IPv6unspecified\n+\t\t\t}\n+\t\t\treturn v.sockaddr(f)\n+\t\t}\n+\t}\n+\treturn la, nil\n+}"}, {"sha": "538ef0d117940114de7b1d17dbc8990349d8b8d3", "filename": "libgo/go/net/sockoptip_solaris.go", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Fsockoptip_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28/libgo%2Fgo%2Fnet%2Fsockoptip_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockoptip_solaris.go?ref=b685de12d2e272782d1f7bfdd6fe7f8d2a6b3f28", "patch": "@@ -0,0 +1,90 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// IP-level socket options for Solaris\n+\n+package net\n+\n+import (\n+\t\"os\"\n+\t\"syscall\"\n+)\n+\n+func ipv4MulticastInterface(fd *netFD) (*Interface, error) {\n+\tif err := fd.incref(false); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer fd.decref()\n+\ta, err := syscall.GetsockoptInet4Addr(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_IF)\n+\tif err != nil {\n+\t\treturn nil, os.NewSyscallError(\"getsockopt\", err)\n+\t}\n+\treturn ipv4AddrToInterface(IPv4(a[0], a[1], a[2], a[3]))\n+}\n+\n+func setIPv4MulticastInterface(fd *netFD, ifi *Interface) error {\n+\tip, err := interfaceToIPv4Addr(ifi)\n+\tif err != nil {\n+\t\treturn os.NewSyscallError(\"setsockopt\", err)\n+\t}\n+\tvar x [4]byte\n+\tcopy(x[:], ip.To4())\n+\tif err := fd.incref(false); err != nil {\n+\t\treturn err\n+\t}\n+\tdefer fd.decref()\n+\terr = syscall.SetsockoptInet4Addr(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_IF, x)\n+\tif err != nil {\n+\t\treturn os.NewSyscallError(\"setsockopt\", err)\n+\t}\n+\treturn nil\n+}\n+\n+func ipv4MulticastLoopback(fd *netFD) (bool, error) {\n+\tif err := fd.incref(false); err != nil {\n+\t\treturn false, err\n+\t}\n+\tdefer fd.decref()\n+\tv, err := syscall.GetsockoptByte(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_LOOP)\n+\tif err != nil {\n+\t\treturn false, os.NewSyscallError(\"getsockopt\", err)\n+\t}\n+\treturn v == 1, nil\n+}\n+\n+func setIPv4MulticastLoopback(fd *netFD, v bool) error {\n+\tif err := fd.incref(false); err != nil {\n+\t\treturn err\n+\t}\n+\tdefer fd.decref()\n+\terr := syscall.SetsockoptByte(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_LOOP, byte(boolint(v)))\n+\tif err != nil {\n+\t\treturn os.NewSyscallError(\"setsockopt\", err)\n+\t}\n+\treturn nil\n+}\n+\n+func ipv4ReceiveInterface(fd *netFD) (bool, error) {\n+\tif err := fd.incref(false); err != nil {\n+\t\treturn false, err\n+\t}\n+\tdefer fd.decref()\n+\tv, err := syscall.GetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_RECVIF)\n+\tif err != nil {\n+\t\treturn false, os.NewSyscallError(\"getsockopt\", err)\n+\t}\n+\treturn v == 1, nil\n+}\n+\n+func setIPv4ReceiveInterface(fd *netFD, v bool) error {\n+\tif err := fd.incref(false); err != nil {\n+\t\treturn err\n+\t}\n+\tdefer fd.decref()\n+\terr := syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_RECVIF, boolint(v))\n+\tif err != nil {\n+\t\treturn os.NewSyscallError(\"setsockopt\", err)\n+\t}\n+\treturn nil\n+}"}]}