{"sha": "555d459c7930fb7feff4339619f2b94ffe1b3e0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1ZDQ1OWM3OTMwZmI3ZmVmZjQzMzk2MTlmMmI5NGZmZTFiM2UwYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-28T18:05:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-28T18:05:22Z"}, "message": "Add specification for -Jx types.\n\nFrom-SVN: r13050", "tree": {"sha": "cd30f083ab639c540acb1794420f152e58c97192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd30f083ab639c540acb1794420f152e58c97192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/555d459c7930fb7feff4339619f2b94ffe1b3e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555d459c7930fb7feff4339619f2b94ffe1b3e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555d459c7930fb7feff4339619f2b94ffe1b3e0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555d459c7930fb7feff4339619f2b94ffe1b3e0b/comments", "author": null, "committer": null, "parents": [{"sha": "023ea387abc42c662b19dfc8929029a89ae1c3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/023ea387abc42c662b19dfc8929029a89ae1c3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/023ea387abc42c662b19dfc8929029a89ae1c3a2"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "28d58ab7b71369ff7455d3a8a36b405fc61ad3ef", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555d459c7930fb7feff4339619f2b94ffe1b3e0b/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555d459c7930fb7feff4339619f2b94ffe1b3e0b/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=555d459c7930fb7feff4339619f2b94ffe1b3e0b", "patch": "@@ -30,6 +30,8 @@ Boston, MA 02111-1307, USA.  */\n /* Name to predefine in the preprocessor for processor variations.  */\n #define\tCPP_SPEC \"%{mic*:-D__i960\\\n \t\t\t%{mka:-D__i960KA}%{mkb:-D__i960KB}\\\n+\t\t\t%{mja:-D__i960JA}%{mjd:-D__i960JD}%{mjf:-D__i960JF}\\\n+\t\t\t%{mrp:-D__i960RP}\\\n \t\t\t%{msa:-D__i960SA}%{msb:-D__i960SB}\\\n \t\t\t%{mmc:-D__i960MC}\\\n \t\t\t%{mca:-D__i960CA}%{mcc:-D__i960CC}\\\n@@ -58,7 +60,7 @@ Boston, MA 02111-1307, USA.  */\n    If the user gives an explicit -gstabs or -gcoff option, then do not\n    try to add an implicit one, as this will fail.  */\n #define CC1_SPEC \\\n-\t\"%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:%{!mcc:%{!mcf:-mkb}}}}}}}}\\\n+\t\"%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:%{!mcc:%{!mcf:%{!mja:%{!mjd:%{!mjf:%{!mrp:-mka}}}}}}}}}}}}\\\n \t %{!gs*:%{!gc*:%{mbout:%{g*:-gstabs}}\\\n \t\t       %{mcoff:%{g*:-gcoff}}\\\n \t\t       %{!mbout:%{!mcoff:%{g*:-gstabs}}}}}\"\n@@ -69,7 +71,8 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_SPEC \\\n \t\"%{mka:-AKA}%{mkb:-AKB}%{msa:-ASA}%{msb:-ASB}\\\n \t%{mmc:-AMC}%{mca:-ACA}%{mcc:-ACC}%{mcf:-ACF}\\\n-\t%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:%{!mcc:%{!mcf:-AKB}}}}}}}}\\\n+        %{mja:-AJX}%{mjd:-AJX}%{mjf:-AJX}%{mrp:-AJX}\\\n+\t%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:%{!mcc:%{!mcf:%{!mja:%{!mjd:%{!mjf:%{!mrp:-AKB}}}}}}}}}}}}\\\n \t%{mlink-relax:-linkrelax}\"\n \n /* Specs for the linker, to handle processor variations.\n@@ -133,7 +136,8 @@ Boston, MA 02111-1307, USA.  */\n #define\tTARGET_PROTECTED\t(target_flags & TARGET_FLAG_PROTECTED)\n \n /* The following three are mainly used to provide a little sanity checking\n-   against the -mARCH flags given.  */\n+   against the -mARCH flags given. The Jx series, for the purposes of\n+   gcc, is a Kx with a data cache. */\n \n /* Nonzero if we should generate code for the KA and similar processors.\n    No FPU, no microcode instructions.  */\n@@ -226,6 +230,11 @@ extern int target_flags;\n \t\t\tTARGET_FLAG_COMPLEX_ADDR)},\\\n /*  {\"kc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n \t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},*/ \\\n+    {\"ja\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n+    {\"jd\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n+    {\"jf\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES| \\\n+\t\t\tTARGET_FLAG_COMPLEX_ADDR)},\\\n+    {\"rp\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n     {\"mc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n \t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},\\\n     {\"ca\", (TARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\\\n@@ -302,7 +311,7 @@ extern int target_flags;\n }\n \n /* Don't enable anything by default.  The user is expected to supply a -mARCH\n-   option.  If none is given, then -mkb is added by CC1_SPEC.  */\n+   option.  If none is given, then -mka is added by CC1_SPEC.  */\n #define TARGET_DEFAULT 0\n \f\n /* Target machine storage layout.  */"}]}