{"sha": "de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU5NGE3ZTdmZjg2NjRkOTA5NTRiZDkzZjYwYjVmYTJhMWIyMDQyMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-07T14:37:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-07T14:37:26Z"}, "message": "[multiple changes]\n\n2012-03-07  Thomas Quinot  <quinot@adacore.com>\n\n\t* einfo.adb, einfo.ads: Add flag Reverse_Storage_Order.\n\n2012-03-07  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_rm.texi, gnat_ugn.texi: Rewording of GNAT UG and GNAT RM to\n\taccount for Ada 2012 assertions, and their pragma counterparts in GNAT.\n\n2012-03-07  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_attr.adb, sem_attr.adb: Minor reformatting.\n\n2012-03-07  Bob Duff  <duff@adacore.com>\n\n\t* hostparm.ads (Max_Instantiations): Increase parameter.\n\n2012-03-07  Bob Duff  <duff@adacore.com>\n\n\t* par-prag.adb: Minor code rearrangement.\n\n2012-03-07  Bob Duff  <duff@adacore.com>\n\n\t* a-strsup.ads, a-stwisu.ads, a-stzsup.ads (Super_String):\n\tRemove default initial value for Data. It is no longer needed\n\tbecause \"=\" now composes properly for untagged records. This\n\tdefault has caused efficiency problems.\n\n2012-03-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Actuals): If the actual is a selected\n\tcomponent of an anonymous access type, whose prefix is a variable,\n\ttreat the variable as if it may be modified by the call, to\n\tsuppress spurious warnings that a variable might be declared as\n\ta constant.\n\nFrom-SVN: r185049", "tree": {"sha": "3453ccf0772d82d19afcfe1be5b4a5271b2ad0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3453ccf0772d82d19afcfe1be5b4a5271b2ad0c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/comments", "author": null, "committer": null, "parents": [{"sha": "0f2508394bbfae077f3e5d7ca05e93cabff06471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2508394bbfae077f3e5d7ca05e93cabff06471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2508394bbfae077f3e5d7ca05e93cabff06471"}], "stats": {"total": 172, "additions": 138, "deletions": 34}, "files": [{"sha": "a864c028c4dabed68b888e94d9c9ed15958e8ffa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -1,3 +1,39 @@\n+2012-03-07  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* einfo.adb, einfo.ads: Add flag Reverse_Storage_Order.\n+\n+2012-03-07  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi: Rewording of GNAT UG and GNAT RM to\n+\taccount for Ada 2012 assertions, and their pragma counterparts in GNAT.\n+\n+2012-03-07  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_attr.adb, sem_attr.adb: Minor reformatting.\n+\n+2012-03-07  Bob Duff  <duff@adacore.com>\n+\n+\t* hostparm.ads (Max_Instantiations): Increase parameter.\n+\n+2012-03-07  Bob Duff  <duff@adacore.com>\n+\n+\t* par-prag.adb: Minor code rearrangement.\n+\n+2012-03-07  Bob Duff  <duff@adacore.com>\n+\n+\t* a-strsup.ads, a-stwisu.ads, a-stzsup.ads (Super_String):\n+\tRemove default initial value for Data. It is no longer needed\n+\tbecause \"=\" now composes properly for untagged records. This\n+\tdefault has caused efficiency problems.\n+\n+2012-03-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): If the actual is a selected\n+\tcomponent of an anonymous access type, whose prefix is a variable,\n+\ttreat the variable as if it may be modified by the call, to\n+\tsuppress spurious warnings that a variable might be declared as\n+\ta constant.\n+\n 2012-03-07  Thomas Quinot  <quinot@adacore.com>\n \n \t* einfo.adb, einfo.ads: Remove unused entity flags."}, {"sha": "39f33647442363e5438930ccf50f650f27e00d95", "filename": "gcc/ada/a-strsup.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fa-strsup.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fa-strsup.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strsup.ads?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2003-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,10 @@ package Ada.Strings.Superbounded is\n \n    type Super_String (Max_Length : Positive) is record\n       Current_Length : Natural := 0;\n-      Data           : String (1 .. Max_Length) := (others => ASCII.NUL);\n+      Data           : String (1 .. Max_Length);\n+      --  A previous version had a default initial value for Data, which is no\n+      --  longer necessary, because \"=\" now composes properly for untagged\n+      --  records. Leaving it out is more efficient.\n    end record;\n    --  Type Bounded_String in Ada.Strings.Bounded.Generic_Bounded_Length is\n    --  derived from this type, with the constraint of the maximum length."}, {"sha": "bc0c5c1290f2d49afb20a3a1169cab8c0beece07", "filename": "gcc/ada/a-stwisu.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fa-stwisu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fa-stwisu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwisu.ads?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2003-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,7 +46,10 @@ package Ada.Strings.Wide_Superbounded is\n \n    type Super_String (Max_Length : Positive) is record\n       Current_Length : Natural := 0;\n-      Data           : Wide_String (1 .. Max_Length) := (others => Wide_NUL);\n+      Data           : Wide_String (1 .. Max_Length);\n+      --  A previous version had a default initial value for Data, which is no\n+      --  longer necessary, because \"=\" now composes properly for untagged\n+      --  records. Leaving it out is more efficient.\n    end record;\n    --  Ada.Strings.Wide_Bounded.Generic_Bounded_Length.Wide_Bounded_String is\n    --  derived from this type, with the constraint of the maximum length."}, {"sha": "3028aaa0b8525f590e2a389a9f1ddbe64d9fa9c7", "filename": "gcc/ada/a-stzsup.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fa-stzsup.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fa-stzsup.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzsup.ads?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2003-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,8 +47,10 @@ package Ada.Strings.Wide_Wide_Superbounded is\n \n    type Super_String (Max_Length : Positive) is record\n       Current_Length : Natural := 0;\n-      Data           : Wide_Wide_String (1 .. Max_Length) :=\n-                         (others => Wide_Wide_NUL);\n+      Data           : Wide_Wide_String (1 .. Max_Length);\n+      --  A previous version had a default initial value for Data, which is no\n+      --  longer necessary, because \"=\" now composes properly for untagged\n+      --  records. Leaving it out is more efficient.\n    end record;\n    --  Wide_Wide_Bounded.Generic_Bounded_Length.Wide_Wide_Bounded_String is\n    --  derived from this type, with the constraint of the maximum length."}, {"sha": "0fdc83c3086633ece3a65ab41119cabee99caca5", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -348,6 +348,7 @@ package body Einfo is\n \n    --    Is_Itype                        Flag91\n    --    Size_Known_At_Compile_Time      Flag92\n+   --    Reverse_Storage_Order           Flag93\n    --    Is_Generic_Actual_Type          Flag94\n    --    Uses_Sec_Stack                  Flag95\n    --    Warnings_Off                    Flag96\n@@ -451,7 +452,6 @@ package body Einfo is\n    --    Is_Ada_2005_Only                Flag185\n    --    Is_Interface                    Flag186\n    --    Has_Constrained_Partial_View    Flag187\n-   --    (unassgined)                    Flag188\n    --    Is_Pure_Unit_Access_Type        Flag189\n    --    Has_Specified_Stream_Input      Flag190\n \n@@ -525,7 +525,7 @@ package body Einfo is\n    --    Has_Anonymous_Master            Flag253\n    --    Is_Implementation_Defined       Flag254\n \n-   --    (unused)                        Flag93\n+   --    (unused)                        Flag188\n    --    (unused)                        Flag201\n \n    -----------------------\n@@ -2610,6 +2610,12 @@ package body Einfo is\n       return Flag164 (Base_Type (Id));\n    end Reverse_Bit_Order;\n \n+   function Reverse_Storage_Order (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Record_Type (Id));\n+      return Flag93 (Base_Type (Id));\n+   end Reverse_Storage_Order;\n+\n    function RM_Size (Id : E) return U is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -5163,6 +5169,13 @@ package body Einfo is\n       Set_Flag164 (Id, V);\n    end Set_Reverse_Bit_Order;\n \n+   procedure Set_Reverse_Storage_Order (Id : E; V : B := True) is\n+   begin\n+      pragma Assert\n+        (Is_Record_Type (Id) and then Is_Base_Type (Id));\n+      Set_Flag93 (Id, V);\n+   end Set_Reverse_Storage_Order;\n+\n    procedure Set_RM_Size (Id : E; V : U) is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -7656,6 +7669,7 @@ package body Einfo is\n       W (\"Return_Present\",                  Flag54  (Id));\n       W (\"Returns_By_Ref\",                  Flag90  (Id));\n       W (\"Reverse_Bit_Order\",               Flag164 (Id));\n+      W (\"Reverse_Storage_Order\",           Flag93  (Id));\n       W (\"Sec_Stack_Needed_For_Return\",     Flag167 (Id));\n       W (\"Size_Depends_On_Discriminant\",    Flag177 (Id));\n       W (\"Size_Known_At_Compile_Time\",      Flag92  (Id));"}, {"sha": "84775779d12204a481c36afc62024c27b980801c", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -3548,6 +3548,13 @@ package Einfo is\n --       a single storage unit (Ada 95) or within a single machine scalar (see\n --       Ada 2005 AI-133), or must occupy an integral number of storage units.\n \n+--    Reverse_Storage_Order (Flag93) [base type only]\n+--       Present in all record type entities. Set if entity has a\n+--       Scalar_Storage_Order aspect (set by an aspect clause or attribute\n+--       definition clause) that has reversed the order of storage elements\n+--       from the default value. When this flag is set, the Bit_Order aspect\n+--       must be set to the same value.\n+\n --    RM_Size (Uint13)\n --       Present in all type and subtype entities. Contains the value of\n --       type'Size as defined in the RM. See also the Esize field and\n@@ -5625,6 +5632,7 @@ package Einfo is\n    --    Is_Limited_Interface                (Flag197)\n    --    OK_To_Reorder_Components            (Flag239)  (base type only)\n    --    Reverse_Bit_Order                   (Flag164)  (base type only)\n+   --    Reverse_Storage_Order               (Flag93)   (base type only)\n    --    First_Component                     (synth)\n    --    First_Component_Or_Discriminant     (synth)\n    --    (plus type attributes)\n@@ -5651,6 +5659,7 @@ package Einfo is\n    --    Is_Limited_Interface                (Flag197)\n    --    OK_To_Reorder_Components            (Flag239)  (base type only)\n    --    Reverse_Bit_Order                   (Flag164)  (base type only)\n+   --    Reverse_Storage_Order               (Flag93)   (base type only)\n    --    First_Component                     (synth)\n    --    First_Component_Or_Discriminant     (synth)\n    --    (plus type attributes)\n@@ -6360,6 +6369,7 @@ package Einfo is\n    function Return_Present                      (Id : E) return B;\n    function Returns_By_Ref                      (Id : E) return B;\n    function Reverse_Bit_Order                   (Id : E) return B;\n+   function Reverse_Storage_Order               (Id : E) return B;\n    function Scalar_Range                        (Id : E) return N;\n    function Scale_Value                         (Id : E) return U;\n    function Scope_Depth_Value                   (Id : E) return U;\n@@ -6955,6 +6965,7 @@ package Einfo is\n    procedure Set_Return_Present                  (Id : E; V : B := True);\n    procedure Set_Returns_By_Ref                  (Id : E; V : B := True);\n    procedure Set_Reverse_Bit_Order               (Id : E; V : B := True);\n+   procedure Set_Reverse_Storage_Order           (Id : E; V : B := True);\n    procedure Set_Scalar_Range                    (Id : E; V : N);\n    procedure Set_Scale_Value                     (Id : E; V : U);\n    procedure Set_Scope_Depth_Value               (Id : E; V : U);\n@@ -7699,6 +7710,7 @@ package Einfo is\n    pragma Inline (Return_Present);\n    pragma Inline (Returns_By_Ref);\n    pragma Inline (Reverse_Bit_Order);\n+   pragma Inline (Reverse_Storage_Order);\n    pragma Inline (Scalar_Range);\n    pragma Inline (Scale_Value);\n    pragma Inline (Scope_Depth_Value);\n@@ -8100,6 +8112,7 @@ package Einfo is\n    pragma Inline (Set_Return_Present);\n    pragma Inline (Set_Returns_By_Ref);\n    pragma Inline (Set_Reverse_Bit_Order);\n+   pragma Inline (Set_Reverse_Storage_Order);\n    pragma Inline (Set_Scalar_Range);\n    pragma Inline (Set_Scale_Value);\n    pragma Inline (Set_Scope_Depth_Value);"}, {"sha": "7621ff75e75fb5e81df2517204aa591120b6a478", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -678,13 +678,13 @@ package body Exp_Attr is\n \n       case Id is\n \n-         --  Attributes related to Ada 2012 iterators (placeholder ???)\n+      --  Attributes related to Ada 2012 iterators (placeholder ???)\n \n-         when Attribute_Constant_Indexing    => null;\n-         when Attribute_Default_Iterator     => null;\n-         when Attribute_Implicit_Dereference => null;\n-         when Attribute_Iterator_Element     => null;\n-         when Attribute_Variable_Indexing    => null;\n+      when Attribute_Constant_Indexing    => null;\n+      when Attribute_Default_Iterator     => null;\n+      when Attribute_Implicit_Dereference => null;\n+      when Attribute_Iterator_Element     => null;\n+      when Attribute_Variable_Indexing    => null;\n \n       ------------\n       -- Access --"}, {"sha": "f652151f3569158911b68525292897000b2ef123", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -1202,11 +1202,23 @@ pragma Assertion_Policy (CHECK | DISABLE | IGNORE);\n @end smallexample\n \n @noindent\n-If the argument is @code{CHECK}, then pragma @code{Assert} is enabled.\n-If the argument is @code{IGNORE}, then pragma @code{Assert} is ignored.\n+If the argument is @code{CHECK}, then assertions are enabled.\n+If the argument is @code{IGNORE}, then assertions are ignored.\n This pragma overrides the effect of the @option{-gnata} switch on the\n command line.\n \n+Assertions are of three kinds:\n+\n+@itemize @bullet\n+@item\n+Pragma @code{Assert}.\n+@item\n+In Ada 2012, all assertions defined in the RM as aspects: preconditions,\n+postconditions, type invariants and (sub)type predicates.\n+@item\n+Corresponding pragmas for type invariants and (sub)type predicates.\n+@end itemize\n+\n The implementation defined policy @code{DISABLE} is like\n @code{IGNORE} except that it completely disables semantic\n checking of the argument to @code{pragma Assert}. This may\n@@ -1423,17 +1435,20 @@ pragma Check_Policy (Critical_Error, OFF);\n @noindent\n is given, then subsequent @code{Check} pragmas whose first argument is also\n @code{Critical_Error} will be disabled. The special identifier @code{Assertion}\n-controls the behavior of normal @code{Assert} pragmas (thus a pragma\n+controls the behavior of normal assertions (thus a pragma\n @code{Check_Policy} with this identifier is similar to the normal\n @code{Assertion_Policy} pragma except that it can appear within a\n declarative part).\n \n The special identifiers @code{Precondition} and @code{Postcondition} control\n-the status of preconditions and postconditions. If a @code{Precondition} pragma\n+the status of preconditions and postconditions given as pragmas.\n+If a @code{Precondition} pragma\n is encountered, it is ignored if turned off by a @code{Check_Policy} specifying\n that @code{Precondition} checks are @code{Off} or @code{Ignored}. Similarly use\n of the name @code{Postcondition} controls whether @code{Postcondition} pragmas\n-are recognized.\n+are recognized. Note that preconditions and postconditions given as aspects\n+are controlled differently, either by the @code{Assertion_Policy} pragma or\n+by the @code{Check_Policy} pragma with identifier @code{Assertion}.\n \n The check policy is @code{OFF} to turn off corresponding checks, and @code{ON}\n to turn on corresponding checks. The default for a set of checks for which no"}, {"sha": "f9f09fa667e262af7055d0f00f1b9d128bf91fc0", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -4073,7 +4073,11 @@ activated. Note that these pragmas can also be controlled using the\n configuration pragmas @code{Assertion_Policy} and @code{Debug_Policy}.\n It also activates pragmas @code{Check}, @code{Precondition}, and\n @code{Postcondition}. Note that these pragmas can also be controlled\n-using the configuration pragma @code{Check_Policy}.\n+using the configuration pragma @code{Check_Policy}. In Ada 2012, it\n+also activates all assertions defined in the RM as aspects: preconditions,\n+postconditions, type invariants and (sub)type predicates. In all Ada modes,\n+corresponding pragmas for type invariants and (sub)type predicates are\n+also activated.\n \n @item -gnatA\n @cindex @option{-gnatA} (@command{gcc})"}, {"sha": "67a7f1d4c3cb5b90df33062b745bb36b021222ff", "filename": "gcc/ada/hostparm.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fhostparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fhostparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fhostparm.ads?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -69,7 +69,7 @@ package Hostparm is\n    --  of file names in the library, must be at least Max_Line_Length, but\n    --  can be larger.\n \n-   Max_Instantiations : constant := 4000;\n+   Max_Instantiations : constant := 8000;\n    --  Maximum number of instantiations permitted (to stop runaway cases\n    --  of nested instantiations). These situations probably only occur in\n    --  specially concocted test cases."}, {"sha": "629540a4fe459ec4562504ec2520e01ebe7649a3", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -310,7 +310,7 @@ begin\n \n       when Pragma_Ada_83 =>\n          Ada_Version := Ada_83;\n-         Ada_Version_Explicit := Ada_Version;\n+         Ada_Version_Explicit := Ada_83;\n \n       ------------\n       -- Ada_95 --\n@@ -322,7 +322,7 @@ begin\n \n       when Pragma_Ada_95 =>\n          Ada_Version := Ada_95;\n-         Ada_Version_Explicit := Ada_Version;\n+         Ada_Version_Explicit := Ada_95;\n \n       ---------------------\n       -- Ada_05/Ada_2005 --"}, {"sha": "a2b33d8bceb1e4cfae20a672312abd66ad5a666e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -2134,15 +2134,15 @@ package body Sem_Attr is\n \n       case Attr_Id is\n \n-         --  Attributes related to Ada 2012 iterators. Attribute specifications\n-         --  exist for these, but they cannot be queried.\n-\n-         when Attribute_Constant_Indexing    |\n-              Attribute_Default_Iterator     |\n-              Attribute_Implicit_Dereference |\n-              Attribute_Iterator_Element     |\n-              Attribute_Variable_Indexing    =>\n-            Error_Msg_N (\"illegal attribute\", N);\n+      --  Attributes related to Ada 2012 iterators. Attribute specifications\n+      --  exist for these, but they cannot be queried.\n+\n+      when Attribute_Constant_Indexing    |\n+           Attribute_Default_Iterator     |\n+           Attribute_Implicit_Dereference |\n+           Attribute_Iterator_Element     |\n+           Attribute_Variable_Indexing    =>\n+         Error_Msg_N (\"illegal attribute\", N);\n \n       ------------------\n       -- Abort_Signal --"}, {"sha": "01fabab67cbed2d498dfe247b240ba11c23f28f4", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de94a7e7ff8664d90954bd93f60b5fa2a1b20422/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=de94a7e7ff8664d90954bd93f60b5fa2a1b20422", "patch": "@@ -3968,6 +3968,20 @@ package body Sem_Res is\n                   Error_Msg_N\n                     (\"invalid implicit conversion for access parameter\", A);\n                end if;\n+\n+               --  If the actual is an access selected component of a variable,\n+               --  the call may modify its designated object. It is reasonable\n+               --  to treat this as a potential modification of the enclosing\n+               --  record, to prevent spurious warnings that it should be\n+               --  declared as a constant, because intuitively programmers\n+               --  regard the designated subcomponent as part of the record.\n+\n+               if Nkind (A) = N_Selected_Component\n+                 and then Is_Entity_Name (Prefix (A))\n+                 and then not Is_Constant_Object (Entity (Prefix (A)))\n+               then\n+                  Note_Possible_Modification (A, Sure => False);\n+               end if;\n             end if;\n \n             --  Check bad case of atomic/volatile argument (RM C.6(12))"}]}