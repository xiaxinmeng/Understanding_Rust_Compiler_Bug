{"sha": "d89488ec13d521f894e1d3d3aad05d01940226bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5NDg4ZWMxM2Q1MjFmODk0ZTFkM2QzYWFkMDVkMDE5NDAyMjZiYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-04-27T05:41:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-04-27T05:41:33Z"}, "message": "tree-inline.c (eni_inlining_weights): Remove.\n\n\t* tree-inline.c (eni_inlining_weights): Remove.\n\t(estimate_num_insns): Special case more builtins.\n\nFrom-SVN: r158766", "tree": {"sha": "26f62e78010d4ec5be440d722d9e11971b7255bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26f62e78010d4ec5be440d722d9e11971b7255bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d89488ec13d521f894e1d3d3aad05d01940226bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89488ec13d521f894e1d3d3aad05d01940226bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89488ec13d521f894e1d3d3aad05d01940226bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89488ec13d521f894e1d3d3aad05d01940226bb/comments", "author": null, "committer": null, "parents": [{"sha": "637f14555ef13026fa5ea1c48a19bf4ec69757db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637f14555ef13026fa5ea1c48a19bf4ec69757db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637f14555ef13026fa5ea1c48a19bf4ec69757db"}], "stats": {"total": 98, "additions": 85, "deletions": 13}, "files": [{"sha": "2bb462c748c920809c7760d8ec1fcb8b27c782fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89488ec13d521f894e1d3d3aad05d01940226bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89488ec13d521f894e1d3d3aad05d01940226bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d89488ec13d521f894e1d3d3aad05d01940226bb", "patch": "@@ -1,3 +1,8 @@\n+2010-04-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-inline.c (eni_inlining_weights): Remove.\n+\t(estimate_num_insns): Special case more builtins.\n+\n 2010-04-27  Shujing Zhao  <pearly.zhao@oracle.com>\n \t\n \tPR c/32207"}, {"sha": "2670f63d931be2cde6483956efc0d1613c2ce056", "filename": "gcc/testsuite/g++.dg/warn/string1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89488ec13d521f894e1d3d3aad05d01940226bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fstring1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89488ec13d521f894e1d3d3aad05d01940226bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fstring1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fstring1.C?ref=d89488ec13d521f894e1d3d3aad05d01940226bb", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"-O\" }\n \n #include <string>\n-int main() {\n+int test() {\n   // blank line padding, could also be code...\n   //\n   //"}, {"sha": "9fb9faf0d84ed81c48b19507c4396794ebfd53c0", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 79, "deletions": 12, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89488ec13d521f894e1d3d3aad05d01940226bb/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89488ec13d521f894e1d3d3aad05d01940226bb/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d89488ec13d521f894e1d3d3aad05d01940226bb", "patch": "@@ -101,10 +101,6 @@ along with GCC; see the file COPYING3.  If not see\n      calls?  */\n \n \n-/* Weights that estimate_num_insns uses for heuristics in inlining.  */\n-\n-eni_weights eni_inlining_weights;\n-\n /* Weights that estimate_num_insns uses to estimate the size of the\n    produced code.  */\n \n@@ -3268,22 +3264,93 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n \tif (decl && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n \t  switch (DECL_FUNCTION_CODE (decl))\n \t    {\n+\t    /* Builtins that expand to constants.  */\n \t    case BUILT_IN_CONSTANT_P:\n-\t      return 0;\n \t    case BUILT_IN_EXPECT:\n-\t      return 0;\n-\n-\t    /* Prefetch instruction is not expensive.  */\n-\t    case BUILT_IN_PREFETCH:\n-\t      cost = weights->target_builtin_call_cost;\n-\t      break;\n-\n+\t    case BUILT_IN_OBJECT_SIZE:\n+\t    case BUILT_IN_UNREACHABLE:\n+\t    /* Simple register moves or loads from stack.  */\n+\t    case BUILT_IN_RETURN_ADDRESS:\n+\t    case BUILT_IN_EXTRACT_RETURN_ADDR:\n+\t    case BUILT_IN_FROB_RETURN_ADDR:\n+\t    case BUILT_IN_RETURN:\n+\t    case BUILT_IN_AGGREGATE_INCOMING_ADDRESS:\n+\t    case BUILT_IN_FRAME_ADDRESS:\n+\t    case BUILT_IN_VA_END:\n+\t    case BUILT_IN_STACK_SAVE:\n+\t    case BUILT_IN_STACK_RESTORE:\n \t    /* Exception state returns or moves registers around.  */\n \t    case BUILT_IN_EH_FILTER:\n \t    case BUILT_IN_EH_POINTER:\n \t    case BUILT_IN_EH_COPY_VALUES:\n \t      return 0;\n \n+\t    /* builtins that are not expensive (that is they are most probably\n+\t       expanded inline into resonably simple code).  */\n+\t    case BUILT_IN_ABS:\n+\t    case BUILT_IN_ALLOCA:\n+\t    case BUILT_IN_BSWAP32:\n+\t    case BUILT_IN_BSWAP64:\n+\t    case BUILT_IN_CLZ:\n+\t    case BUILT_IN_CLZIMAX:\n+\t    case BUILT_IN_CLZL:\n+\t    case BUILT_IN_CLZLL:\n+\t    case BUILT_IN_CTZ:\n+\t    case BUILT_IN_CTZIMAX:\n+\t    case BUILT_IN_CTZL:\n+\t    case BUILT_IN_CTZLL:\n+\t    case BUILT_IN_FFS:\n+\t    case BUILT_IN_FFSIMAX:\n+\t    case BUILT_IN_FFSL:\n+\t    case BUILT_IN_FFSLL:\n+\t    case BUILT_IN_IMAXABS:\n+\t    case BUILT_IN_FINITE:\n+\t    case BUILT_IN_FINITEF:\n+\t    case BUILT_IN_FINITEL:\n+\t    case BUILT_IN_FINITED32:\n+\t    case BUILT_IN_FINITED64:\n+\t    case BUILT_IN_FINITED128:\n+\t    case BUILT_IN_FPCLASSIFY:\n+\t    case BUILT_IN_ISFINITE:\n+\t    case BUILT_IN_ISINF_SIGN:\n+\t    case BUILT_IN_ISINF:\n+\t    case BUILT_IN_ISINFF:\n+\t    case BUILT_IN_ISINFL:\n+\t    case BUILT_IN_ISINFD32:\n+\t    case BUILT_IN_ISINFD64:\n+\t    case BUILT_IN_ISINFD128:\n+\t    case BUILT_IN_ISNAN:\n+\t    case BUILT_IN_ISNANF:\n+\t    case BUILT_IN_ISNANL:\n+\t    case BUILT_IN_ISNAND32:\n+\t    case BUILT_IN_ISNAND64:\n+\t    case BUILT_IN_ISNAND128:\n+\t    case BUILT_IN_ISNORMAL:\n+\t    case BUILT_IN_ISGREATER:\n+\t    case BUILT_IN_ISGREATEREQUAL:\n+\t    case BUILT_IN_ISLESS:\n+\t    case BUILT_IN_ISLESSEQUAL:\n+\t    case BUILT_IN_ISLESSGREATER:\n+\t    case BUILT_IN_ISUNORDERED:\n+\t    case BUILT_IN_VA_ARG_PACK:\n+\t    case BUILT_IN_VA_ARG_PACK_LEN:\n+\t    case BUILT_IN_VA_COPY:\n+\t    case BUILT_IN_TRAP:\n+\t    case BUILT_IN_SAVEREGS:\n+\t    case BUILT_IN_POPCOUNTL:\n+\t    case BUILT_IN_POPCOUNTLL:\n+\t    case BUILT_IN_POPCOUNTIMAX:\n+\t    case BUILT_IN_POPCOUNT:\n+\t    case BUILT_IN_PARITYL:\n+\t    case BUILT_IN_PARITYLL:\n+\t    case BUILT_IN_PARITYIMAX:\n+\t    case BUILT_IN_PARITY:\n+\t    case BUILT_IN_LABS:\n+\t    case BUILT_IN_LLABS:\n+\t    case BUILT_IN_PREFETCH:\n+\t      cost = weights->target_builtin_call_cost;\n+\t      break;\n+\n \t    default:\n \t      break;\n \t    }"}]}