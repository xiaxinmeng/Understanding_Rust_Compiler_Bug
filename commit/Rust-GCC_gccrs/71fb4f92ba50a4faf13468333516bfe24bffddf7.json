{"sha": "71fb4f92ba50a4faf13468333516bfe24bffddf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFmYjRmOTJiYTUwYTRmYWYxMzQ2ODMzMzUxNmJmZTI0YmZmZGRmNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-06-10T20:06:48Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-06-10T20:06:48Z"}, "message": "cgraph.c (cgraph_set_nothrow_flag_1): Update cgraph after setting the nothrow flag.\n\n\t* cgraph.c (cgraph_set_nothrow_flag_1): Update cgraph after\n\tsetting the nothrow flag.\n\t* ipa-reference.c (propagate): Skip aliases.\n\t* ipa-pure-const.c (propagate_pure_const): Skip aliases.\n\t(propagate_nothrow): Skip aliases; do not update cgraph.\n\t(local_pure_const): Do not update cgraph.\n\t* tree-profile.c (tree_profiling): Do fixup_cfg.\n\nFrom-SVN: r174929", "tree": {"sha": "b4c63c4e36083749fdc5d207881d81ca1a95d246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4c63c4e36083749fdc5d207881d81ca1a95d246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71fb4f92ba50a4faf13468333516bfe24bffddf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71fb4f92ba50a4faf13468333516bfe24bffddf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71fb4f92ba50a4faf13468333516bfe24bffddf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71fb4f92ba50a4faf13468333516bfe24bffddf7/comments", "author": null, "committer": null, "parents": [{"sha": "106fcf8f5f49d7a7319381248a33a5fa59eca687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106fcf8f5f49d7a7319381248a33a5fa59eca687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/106fcf8f5f49d7a7319381248a33a5fa59eca687"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "be07c9afd0c6d511a71de9568ef6e12efaf7736f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71fb4f92ba50a4faf13468333516bfe24bffddf7", "patch": "@@ -1,3 +1,13 @@\n+2011-06-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_set_nothrow_flag_1): Update cgraph after\n+\tsetting the nothrow flag.\n+\t* ipa-reference.c (propagate): Skip aliases.\n+\t* ipa-pure-const.c (propagate_pure_const): Skip aliases.\n+\t(propagate_nothrow): Skip aliases; do not update cgraph.\n+\t(local_pure_const): Do not update cgraph.\n+\t* tree-profile.c (tree_profiling): Do fixup_cfg.\n+\n 2011-06-10  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa.c (cgraph_non_local_node_p_1): Break out from ...;"}, {"sha": "f5fd150baac96fccb6e6d9442aa37a9621174b89", "filename": "gcc/cgraph.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=71fb4f92ba50a4faf13468333516bfe24bffddf7", "patch": "@@ -2681,7 +2681,13 @@ cgraph_make_node_local (struct cgraph_node *node)\n static bool\n cgraph_set_nothrow_flag_1 (struct cgraph_node *node, void *data)\n {\n+  struct cgraph_edge *e;\n+\n   TREE_NOTHROW (node->decl) = data != NULL;\n+\n+  if (data != NULL)\n+    for (e = node->callers; e; e = e->next_caller)\n+      e->can_throw_external = false;\n   return false;\n }\n "}, {"sha": "0414273c655f3d8559de7ca7da1c3580fa784cd7", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=71fb4f92ba50a4faf13468333516bfe24bffddf7", "patch": "@@ -1116,6 +1116,9 @@ propagate_pure_const (void)\n       int count = 0;\n       node = order[i];\n \n+      if (node->alias)\n+\tcontinue;\n+\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Starting cycle\\n\");\n \n@@ -1383,6 +1386,9 @@ propagate_nothrow (void)\n       bool can_throw = false;\n       node = order[i];\n \n+      if (node->alias)\n+\tcontinue;\n+\n       /* Find the worst state for any node in the cycle.  */\n       w = node;\n       while (w)\n@@ -1430,10 +1436,7 @@ propagate_nothrow (void)\n \t  funct_state w_l = get_function_state (w);\n \t  if (!can_throw && !TREE_NOTHROW (w->decl))\n \t    {\n-\t      struct cgraph_edge *e;\n \t      cgraph_set_nothrow_flag (w, true);\n-\t      for (e = w->callers; e; e = e->next_caller)\n-\t        e->can_throw_external = false;\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"Function found to be nothrow: %s\\n\",\n \t\t\t cgraph_node_name (w));\n@@ -1640,11 +1643,7 @@ local_pure_const (void)\n     }\n   if (!l->can_throw && !TREE_NOTHROW (current_function_decl))\n     {\n-      struct cgraph_edge *e;\n-\n       cgraph_set_nothrow_flag (node, true);\n-      for (e = node->callers; e; e = e->next_caller)\n-\te->can_throw_external = false;\n       changed = true;\n       if (dump_file)\n \tfprintf (dump_file, \"Function found to be nothrow: %s\\n\","}, {"sha": "05024b4989ee810f41427e00bc4a11f5d087f97e", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=71fb4f92ba50a4faf13468333516bfe24bffddf7", "patch": "@@ -645,6 +645,8 @@ propagate (void)\n       struct ipa_dfs_info * w_info;\n \n       node = order[i];\n+      if (node->alias)\n+\tcontinue;\n       node_info = get_reference_vars_info (node);\n       gcc_assert (node_info);\n \n@@ -802,6 +804,8 @@ propagate (void)\n \t  struct ipa_dfs_info * w_info;\n \n \t  node = order[i];\n+\t  if (node->alias)\n+\t    continue;\n \t  node_info = get_reference_vars_info (node);\n \t  node_g = &node_info->global;\n \t  node_l = &node_info->local;\n@@ -885,7 +889,7 @@ propagate (void)\n       ipa_reference_global_vars_info_t node_g;\n       ipa_reference_optimization_summary_t opt;\n \n-      if (!node->analyzed)\n+      if (!node->analyzed || node->alias)\n         continue;\n \n       node_info = get_reference_vars_info (node);"}, {"sha": "3bc4d5c532cd15380ade0f84655e6ea1ac399fad", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71fb4f92ba50a4faf13468333516bfe24bffddf7/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=71fb4f92ba50a4faf13468333516bfe24bffddf7", "patch": "@@ -470,8 +470,7 @@ tree_profiling (void)\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n       if (!node->analyzed\n-\t  || !gimple_has_body_p (node->decl)\n-\t  || !(!node->clone_of || node->decl != node->clone_of->decl))\n+\t  || !gimple_has_body_p (node->decl))\n \tcontinue;\n \n       /* Don't profile functions produced for builtin stuff.  */\n@@ -485,6 +484,8 @@ tree_profiling (void)\n       /* Re-set global shared temporary variable for edge-counters.  */\n       gcov_type_tmp_var = NULL_TREE;\n \n+      /* Local pure-const may imply need to fixup the cfg.  */\n+      execute_fixup_cfg ();\n       branch_prob ();\n \n       if (! flag_branch_probabilities"}]}