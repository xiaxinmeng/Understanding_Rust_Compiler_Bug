{"sha": "5c0e97dd35b7d16366bbae34539edff776f0b43c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwZTk3ZGQzNWI3ZDE2MzY2YmJhZTM0NTM5ZWRmZjc3NmYwYjQzYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T08:09:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T08:09:35Z"}, "message": "[multiple changes]\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch3.adb (Array_Type_Declaration): move test for type in ALFA\n\tafter index creation; mark unconstrained base array type generated as\n\tbeing in/not in ALFA as well\n\t(Make_Index): mark subtype created as in/not in ALFA\n\t* sem_ch5.adb (Analyze_Iteration_Scheme): mark entity for iterating\n\tover a loop as in/not in ALFA, depending on its type and form of loop\n\titeration.\n\n2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Build_Object_Declarations): Initialize flag Abort\n\tdirectly to False on .NET and JVM.\n\nFrom-SVN: r177326", "tree": {"sha": "f7a2e5c13a866574830e2c3e432178cc1972acc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7a2e5c13a866574830e2c3e432178cc1972acc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c0e97dd35b7d16366bbae34539edff776f0b43c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0e97dd35b7d16366bbae34539edff776f0b43c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0e97dd35b7d16366bbae34539edff776f0b43c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0e97dd35b7d16366bbae34539edff776f0b43c/comments", "author": null, "committer": null, "parents": [{"sha": "7a93c64b0a766604063dcdf5adf60ae3b9c36fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a93c64b0a766604063dcdf5adf60ae3b9c36fea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a93c64b0a766604063dcdf5adf60ae3b9c36fea"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "aa77d3df31687005239f368938d410ff30e1f4c7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0e97dd35b7d16366bbae34539edff776f0b43c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0e97dd35b7d16366bbae34539edff776f0b43c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5c0e97dd35b7d16366bbae34539edff776f0b43c", "patch": "@@ -1,3 +1,18 @@\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb (Array_Type_Declaration): move test for type in ALFA\n+\tafter index creation; mark unconstrained base array type generated as\n+\tbeing in/not in ALFA as well\n+\t(Make_Index): mark subtype created as in/not in ALFA\n+\t* sem_ch5.adb (Analyze_Iteration_Scheme): mark entity for iterating\n+\tover a loop as in/not in ALFA, depending on its type and form of loop\n+\titeration.\n+\n+2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Object_Declarations): Initialize flag Abort\n+\tdirectly to False on .NET and JVM.\n+\n 2011-08-04  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch3.adb (Constrain_Enumeration, Constrain_Integer): remove"}, {"sha": "21a1ffea63ac2ad52a77efa2138f86b788baeb45", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0e97dd35b7d16366bbae34539edff776f0b43c/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0e97dd35b7d16366bbae34539edff776f0b43c/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=5c0e97dd35b7d16366bbae34539edff776f0b43c", "patch": "@@ -2817,7 +2817,9 @@ package body Exp_Ch7 is\n       --  order to detect this scenario, save the state of entry into the\n       --  finalization code.\n \n-      if Abort_Allowed then\n+      if Abort_Allowed\n+        and then VM_Target = No_VM\n+      then\n          declare\n             Temp_Id : constant Entity_Id := Make_Temporary (Loc, 'E');\n \n@@ -2869,7 +2871,9 @@ package body Exp_Ch7 is\n                         Attribute_Name => Name_Identity)));\n          end;\n \n-      --  No abort\n+      --  No abort or .NET/JVM. The VM version of Ada.Exceptions does not\n+      --  include routine Raise_From_Controlled_Operation which is the sole\n+      --  user of flag Abort.\n \n       else\n          A_Expr := New_Reference_To (Standard_False, Loc);"}, {"sha": "081b7fa10b050039912ea443bc3b9687541706c3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0e97dd35b7d16366bbae34539edff776f0b43c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0e97dd35b7d16366bbae34539edff776f0b43c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5c0e97dd35b7d16366bbae34539edff776f0b43c", "patch": "@@ -4678,12 +4678,6 @@ package body Sem_Ch3 is\n             Check_SPARK_Restriction (\"subtype mark required\", Index);\n          end if;\n \n-         if Present (Etype (Index))\n-           and then not Is_In_ALFA (Etype (Index))\n-         then\n-            T_In_ALFA := False;\n-         end if;\n-\n          --  Add a subtype declaration for each index of private array type\n          --  declaration whose etype is also private. For example:\n \n@@ -4738,6 +4732,12 @@ package body Sem_Ch3 is\n \n          Make_Index (Index, P, Related_Id, Nb_Index);\n \n+         if Present (Etype (Index))\n+           and then not Is_In_ALFA (Etype (Index))\n+         then\n+            T_In_ALFA := False;\n+         end if;\n+\n          --  Check error of subtype with predicate for index type\n \n          Bad_Predicated_Subtype_Use\n@@ -4878,6 +4878,7 @@ package body Sem_Ch3 is\n       Set_Component_Type (Base_Type (T), Element_Type);\n       Set_Packed_Array_Type (T, Empty);\n       Set_Is_In_ALFA (T, T_In_ALFA);\n+      Set_Is_In_ALFA (Base_Type (T), T_In_ALFA);\n \n       if Aliased_Present (Component_Definition (Def)) then\n          Check_SPARK_Restriction\n@@ -16538,6 +16539,19 @@ package body Sem_Ch3 is\n          then\n             Set_Is_Non_Static_Subtype (Def_Id);\n          end if;\n+\n+         --  By default, consider that the subtype is in ALFA if its base type\n+         --  is in ALFA.\n+\n+         Set_Is_In_ALFA (Def_Id, Is_In_ALFA (Base_Type (Def_Id)));\n+\n+         --  In ALFA, all subtypes should have a static range\n+\n+         if Nkind (R) = N_Range\n+           and then not Is_Static_Range (R)\n+         then\n+            Set_Is_In_ALFA (Def_Id, False);\n+         end if;\n       end if;\n \n       --  Final step is to label the index with this constructed type"}, {"sha": "239f9fe35bf1543c3f1ffb2bb261f24ca00c336c", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0e97dd35b7d16366bbae34539edff776f0b43c/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0e97dd35b7d16366bbae34539edff776f0b43c/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=5c0e97dd35b7d16366bbae34539edff776f0b43c", "patch": "@@ -2082,6 +2082,17 @@ package body Sem_Ch5 is\n                   Set_Etype (Id, Etype (DS));\n                end if;\n \n+               --  The entity for iterating over a loop is always in ALFA if\n+               --  its type is in ALFA, and it is not an iteration over\n+               --  elements of a container using the OF syntax.\n+\n+               if Is_In_ALFA (Etype (Id))\n+                 and then (No (Iterator_Specification (N))\n+                           or else not Of_Present (Iterator_Specification (N)))\n+               then\n+                  Set_Is_In_ALFA (Id);\n+               end if;\n+\n                --  Treat a range as an implicit reference to the type, to\n                --  inhibit spurious warnings.\n "}]}