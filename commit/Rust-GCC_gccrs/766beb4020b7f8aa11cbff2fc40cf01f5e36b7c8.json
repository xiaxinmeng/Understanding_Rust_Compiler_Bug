{"sha": "766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2YmViNDAyMGI3ZjhhYTExY2JmZjJmYzQwY2YwMWY1ZTM2YjdjOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-03-02T02:50:25Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-03-02T02:50:25Z"}, "message": "re PR c/8927 (Gcc give error for wrong line of C code.)\n\n\tPR c/8927\n\t* c-tree.h (undeclared_variable, build_external_ref): Add extra\n\targument.\n\t* c-decl.c (undeclared_variable): Take location as argument.\n\t* c-typeck.c (build_external_ref): Likewise.\n\t* c-parser.c (c_parser_postfix_expression): Pass location of\n\tidentifier to build_external_ref.\n\ntestsuite:\n\t* gcc.dg/pr8927-1.c: New test.\n\nFrom-SVN: r95773", "tree": {"sha": "87b2d47fdc5b99120fde55ab67dd2c05f1a341b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87b2d47fdc5b99120fde55ab67dd2c05f1a341b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176a0aad11289b39ab49dda6abc94b69de7fe68d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176a0aad11289b39ab49dda6abc94b69de7fe68d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/176a0aad11289b39ab49dda6abc94b69de7fe68d"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "46f4c118758db7db178cd8a2c1596f031926489a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "patch": "@@ -1,3 +1,13 @@\n+2005-03-02  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/8927\n+\t* c-tree.h (undeclared_variable, build_external_ref): Add extra\n+\targument.\n+\t* c-decl.c (undeclared_variable): Take location as argument.\n+\t* c-typeck.c (build_external_ref): Likewise.\n+\t* c-parser.c (c_parser_postfix_expression): Pass location of\n+\tidentifier to build_external_ref.\n+\n 2005-03-01  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.md (cceq splitter): Use operand mode, not"}, {"sha": "5cad16ee69fe21688b8e55cc95d7c777620c4ba6", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "patch": "@@ -2312,26 +2312,26 @@ implicitly_declare (tree functionid)\n    ID, including a reference to a builtin outside of function-call\n    context.  Establish a binding of the identifier to error_mark_node\n    in an appropriate scope, which will suppress further errors for the\n-   same identifier.  */\n+   same identifier.  The error message should be given location LOC.  */\n void\n-undeclared_variable (tree id)\n+undeclared_variable (tree id, location_t loc)\n {\n   static bool already = false;\n   struct c_scope *scope;\n \n   if (current_function_decl == 0)\n     {\n-      error (\"%qE undeclared here (not in a function)\", id);\n+      error (\"%H%qE undeclared here (not in a function)\", &loc, id);\n       scope = current_scope;\n     }\n   else\n     {\n-      error (\"%qE undeclared (first use in this function)\", id);\n+      error (\"%H%qE undeclared (first use in this function)\", &loc, id);\n \n       if (!already)\n \t{\n-\t  error (\"(Each undeclared identifier is reported only once\");\n-\t  error (\"for each function it appears in.)\");\n+\t  error (\"%H(Each undeclared identifier is reported only once\", &loc);\n+\t  error (\"%Hfor each function it appears in.)\", &loc);\n \t  already = true;\n \t}\n "}, {"sha": "e08f436b46e4d9d754f30180754e23c0a64ef405", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "patch": "@@ -4803,10 +4803,11 @@ c_parser_postfix_expression (c_parser *parser)\n \t}\n       {\n \ttree id = c_parser_peek_token (parser)->value;\n+\tlocation_t loc = c_parser_peek_token (parser)->location;\n \tc_parser_consume_token (parser);\n \texpr.value = build_external_ref (id,\n \t\t\t\t\t (c_parser_peek_token (parser)->type\n-\t\t\t\t\t  == CPP_OPEN_PAREN));\n+\t\t\t\t\t  == CPP_OPEN_PAREN), loc);\n \texpr.original_code = ERROR_MARK;\n       }\n       break;"}, {"sha": "18b2634c1b7403590d46575c2fcc911f9af1d92c", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "patch": "@@ -379,7 +379,7 @@ extern void check_for_loop_decls (void);\n extern void mark_forward_parm_decls (void);\n extern int  complete_array_type (tree, tree, int);\n extern void declare_parm_level (void);\n-extern void undeclared_variable (tree);\n+extern void undeclared_variable (tree, location_t);\n extern tree declare_label (tree);\n extern tree define_label (location_t, tree);\n extern void finish_decl (tree, tree, tree);\n@@ -463,7 +463,7 @@ extern tree composite_type (tree, tree);\n extern tree build_component_ref (tree, tree);\n extern tree build_indirect_ref (tree, const char *);\n extern tree build_array_ref (tree, tree);\n-extern tree build_external_ref (tree, int);\n+extern tree build_external_ref (tree, int, location_t);\n extern void pop_maybe_used (bool);\n extern struct c_expr c_expr_sizeof_expr (struct c_expr);\n extern struct c_expr c_expr_sizeof_type (struct c_type_name *);"}, {"sha": "ea1c81c7435a366aced690e6aa6447a1aab13c89", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "patch": "@@ -1787,9 +1787,10 @@ build_array_ref (tree array, tree index)\n }\n \f\n /* Build an external reference to identifier ID.  FUN indicates\n-   whether this will be used for a function call.  */\n+   whether this will be used for a function call.  LOC is the source\n+   location of the identifier.  */\n tree\n-build_external_ref (tree id, int fun)\n+build_external_ref (tree id, int fun, location_t loc)\n {\n   tree ref;\n   tree decl = lookup_name (id);\n@@ -1809,7 +1810,7 @@ build_external_ref (tree id, int fun)\n     return error_mark_node;\n   else\n     {\n-      undeclared_variable (id);\n+      undeclared_variable (id, loc);\n       return error_mark_node;\n     }\n "}, {"sha": "d72534301c68f514bc8786a01578b4aaa2f28613", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "patch": "@@ -1,3 +1,8 @@\n+2005-03-02  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/8927\n+\t* gcc.dg/pr8927-1.c: New test.\n+\n 2005-03-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/20232"}, {"sha": "218e71706ac7df8800bedf11cf6f394d9c7d5dd2", "filename": "gcc/testsuite/gcc.dg/pr8927-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr8927-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr8927-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr8927-1.c?ref=766beb4020b7f8aa11cbff2fc40cf01f5e36b7c8", "patch": "@@ -0,0 +1,13 @@\n+/* Bug 8927: undeclared identifiers should give an error on the line\n+   of that identifier, not on the line of the next token.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void\n+foo(void)\n+{\n+  bar /* { dg-error \"undeclared|for each function\" } */\n+\n+\n+  ;\n+}"}]}