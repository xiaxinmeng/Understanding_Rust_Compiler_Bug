{"sha": "561593c104a3fcce354d644b12072b1da8690baa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxNTkzYzEwNGEzZmNjZTM1NGQ2NDRiMTIwNzJiMWRhODY5MGJhYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-10-08T21:13:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-10-08T21:13:52Z"}, "message": "tree-outof-ssa.h (ssaexpand): Add partitions_for_undefined_values.\n\n\t* tree-outof-ssa.h (ssaexpand): Add partitions_for_undefined_values.\n\t(always_initialized_rtx_for_ssa_name_p): New predicate.\n\t* tree-outof-ssa.c (remove_ssa_form): Initialize new field of SA.\n\t(finish_out_of_ssa): Free new field of SA.\n\t* tree-ssa-coalesce.h (get_undefined_value_partitions): Declare.\n\t* tree-ssa-coalesce.c: Include tree-ssa.h.\n\t(get_parm_default_def_partitions): Remove extern keyword.\n\t(get_undefined_value_partitions): New function.\n\t* expr.c (expand_expr_real_1) <expand_decl_rtl>: For a SSA_NAME, do\n\tnot set SUBREG_PROMOTED_VAR_P on the sub-register if it may contain\n\tuninitialized bits.\n\t* loop-iv.c (iv_get_reaching_def): Disqualify all subregs.\n\nFrom-SVN: r253530", "tree": {"sha": "149b1fac42bf695760c221ab62b82c4d671b93af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/149b1fac42bf695760c221ab62b82c4d671b93af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/561593c104a3fcce354d644b12072b1da8690baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561593c104a3fcce354d644b12072b1da8690baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561593c104a3fcce354d644b12072b1da8690baa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561593c104a3fcce354d644b12072b1da8690baa/comments", "author": null, "committer": null, "parents": [{"sha": "caeaa0b3c63bc2634f7ae8f684224b2773c782c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caeaa0b3c63bc2634f7ae8f684224b2773c782c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caeaa0b3c63bc2634f7ae8f684224b2773c782c1"}], "stats": {"total": 139, "additions": 130, "deletions": 9}, "files": [{"sha": "baf6a6d96bd1184587a831e6e633b797c5b323a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561593c104a3fcce354d644b12072b1da8690baa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561593c104a3fcce354d644b12072b1da8690baa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=561593c104a3fcce354d644b12072b1da8690baa", "patch": "@@ -1,3 +1,18 @@\n+2017-10-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-outof-ssa.h (ssaexpand): Add partitions_for_undefined_values.\n+\t(always_initialized_rtx_for_ssa_name_p): New predicate.\n+\t* tree-outof-ssa.c (remove_ssa_form): Initialize new field of SA.\n+\t(finish_out_of_ssa): Free new field of SA.\n+\t* tree-ssa-coalesce.h (get_undefined_value_partitions): Declare.\n+\t* tree-ssa-coalesce.c: Include tree-ssa.h.\n+\t(get_parm_default_def_partitions): Remove extern keyword.\n+\t(get_undefined_value_partitions): New function.\n+\t* expr.c (expand_expr_real_1) <expand_decl_rtl>: For a SSA_NAME, do\n+\tnot set SUBREG_PROMOTED_VAR_P on the sub-register if it may contain\n+\tuninitialized bits.\n+\t* loop-iv.c (iv_get_reaching_def): Disqualify all subregs.\n+\n 2017-10-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* builtins.def (BUILT_IN_SETJMP): Revert latest change."}, {"sha": "134ee731c294e8febdc85b033d4d50ad2cf98827", "filename": "gcc/expr.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=561593c104a3fcce354d644b12072b1da8690baa", "patch": "@@ -9909,24 +9909,43 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  && GET_MODE (decl_rtl) != dmode)\n \t{\n \t  machine_mode pmode;\n+\t  bool always_initialized_rtx;\n \n \t  /* Get the signedness to be used for this variable.  Ensure we get\n \t     the same mode we got when the variable was declared.  */\n \t  if (code != SSA_NAME)\n-\t    pmode = promote_decl_mode (exp, &unsignedp);\n+\t    {\n+\t      pmode = promote_decl_mode (exp, &unsignedp);\n+\t      always_initialized_rtx = true;\n+\t    }\n \t  else if ((g = SSA_NAME_DEF_STMT (ssa_name))\n \t\t   && gimple_code (g) == GIMPLE_CALL\n \t\t   && !gimple_call_internal_p (g))\n-\t    pmode = promote_function_mode (type, mode, &unsignedp,\n-\t\t\t\t\t   gimple_call_fntype (g),\n-\t\t\t\t\t   2);\n+\t    {\n+\t      pmode = promote_function_mode (type, mode, &unsignedp,\n+\t\t\t\t\t    gimple_call_fntype (g), 2);\n+\t      always_initialized_rtx\n+\t\t= always_initialized_rtx_for_ssa_name_p (ssa_name);\n+\t    }\n \t  else\n-\t    pmode = promote_ssa_mode (ssa_name, &unsignedp);\n+\t    {\n+\t      pmode = promote_ssa_mode (ssa_name, &unsignedp);\n+\t      always_initialized_rtx\n+\t\t= always_initialized_rtx_for_ssa_name_p (ssa_name);\n+\t    }\n+\n \t  gcc_assert (GET_MODE (decl_rtl) == pmode);\n \n \t  temp = gen_lowpart_SUBREG (mode, decl_rtl);\n-\t  SUBREG_PROMOTED_VAR_P (temp) = 1;\n-\t  SUBREG_PROMOTED_SET (temp, unsignedp);\n+\n+\t  /* We cannot assume anything about an existing extension if the\n+\t     register may contain uninitialized bits.  */\n+\t  if (always_initialized_rtx)\n+\t    {\n+\t      SUBREG_PROMOTED_VAR_P (temp) = 1;\n+\t      SUBREG_PROMOTED_SET (temp, unsignedp);\n+\t    }\n+\n \t  return temp;\n \t}\n "}, {"sha": "45e822980ff408a966fc3e48e6b800b492dd1fc1", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=561593c104a3fcce354d644b12072b1da8690baa", "patch": "@@ -353,7 +353,7 @@ iv_get_reaching_def (rtx_insn *insn, rtx reg, df_ref *def)\n   adef = DF_REF_CHAIN (use)->ref;\n \n   /* We do not handle setting only part of the register.  */\n-  if (DF_REF_FLAGS (adef) & DF_REF_READ_WRITE)\n+  if (DF_REF_FLAGS (adef) & (DF_REF_READ_WRITE | DF_REF_SUBREG))\n     return GRD_INVALID;\n \n   def_insn = DF_REF_INSN (adef);"}, {"sha": "c2a658c3dcf6aef104dab981c44d4be4b942ba2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=561593c104a3fcce354d644b12072b1da8690baa", "patch": "@@ -1,3 +1,7 @@\n+2017-10-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20171008-1.c: New test.\n+\n 2017-10-03  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/stack-check-5.c: Skip with -fstack-protector."}, {"sha": "cde807a70b3887b324f67635f17e3c541e7aec61", "filename": "gcc/testsuite/gcc.c-torture/execute/20171008-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20171008-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20171008-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20171008-1.c?ref=561593c104a3fcce354d644b12072b1da8690baa", "patch": "@@ -0,0 +1,38 @@\n+struct S { char c1, c2, c3, c4; } __attribute__((aligned(4)));\n+\n+static char bar (char **p) __attribute__((noclone, noinline));\n+static struct S foo (void) __attribute__((noclone, noinline));\n+\n+int i;\n+\n+static char\n+bar (char **p)\n+{\n+  i = 1;\n+  return 0;\n+}\n+\n+static struct S\n+foo (void)\n+{\n+  struct S ret;\n+  char r, s, c1, c2;\n+  char *p = &r;\n+\n+  s = bar (&p);\n+  if (s)\n+    c2 = *p;\n+  c1 = 0;\n+\n+  ret.c1 = c1;\n+  ret.c2 = c2;\n+  return ret;\n+}\n+\n+int main (void)\n+{\n+  struct S s = foo ();\n+  if (s.c1 != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "6327c07c68bb6b4dda416223ab5f578adebb7762", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=561593c104a3fcce354d644b12072b1da8690baa", "patch": "@@ -969,6 +969,7 @@ remove_ssa_form (bool perform_ter, struct ssaexpand *sa)\n   sa->map = map;\n   sa->values = values;\n   sa->partitions_for_parm_default_defs = get_parm_default_def_partitions (map);\n+  sa->partitions_for_undefined_values = get_undefined_value_partitions (map);\n }\n \n \n@@ -1144,6 +1145,7 @@ finish_out_of_ssa (struct ssaexpand *sa)\n     BITMAP_FREE (sa->values);\n   delete_var_map (sa->map);\n   BITMAP_FREE (sa->partitions_for_parm_default_defs);\n+  BITMAP_FREE (sa->partitions_for_undefined_values);\n   memset (sa, 0, sizeof *sa);\n }\n "}, {"sha": "1220b6256ca2052caff234540293139d0922baac", "filename": "gcc/tree-outof-ssa.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftree-outof-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftree-outof-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.h?ref=561593c104a3fcce354d644b12072b1da8690baa", "patch": "@@ -42,6 +42,10 @@ struct ssaexpand\n   /* If partition I contains an SSA name that has a default def for a\n      parameter, bit I will be set in this bitmap.  */\n   bitmap partitions_for_parm_default_defs;\n+\n+  /* If partition I contains an SSA name that has an undefined value,\n+     bit I will be set in this bitmap.  */\n+  bitmap partitions_for_undefined_values;\n };\n \n /* This is the singleton described above.  */\n@@ -70,6 +74,18 @@ get_gimple_for_ssa_name (tree exp)\n   return NULL;\n }\n \n+/* Return whether the RTX expression representing the storage of the outof-SSA\n+   partition that the SSA name EXP is a member of is always initialized.  */\n+static inline bool\n+always_initialized_rtx_for_ssa_name_p (tree exp)\n+{\n+  int p = partition_find (SA.map->var_partition, SSA_NAME_VERSION (exp));\n+  if (SA.map->partition_to_view)\n+    p = SA.map->partition_to_view[p];\n+  gcc_assert (p != NO_PARTITION);\n+  return !bitmap_bit_p (SA.partitions_for_undefined_values, p);\n+}\n+\n extern bool ssa_is_replaceable_p (gimple *stmt);\n extern void finish_out_of_ssa (struct ssaexpand *sa);\n extern unsigned int rewrite_out_of_ssa (struct ssaexpand *sa);"}, {"sha": "3938f064f67c6dace3461afb4a2c24fea6db1303", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=561593c104a3fcce354d644b12072b1da8690baa", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"ssa.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pretty-print.h\"\n #include \"diagnostic-core.h\"\n #include \"dumpfile.h\"\n@@ -1923,7 +1924,7 @@ set_parm_default_def_partition (tree var, void *arg_)\n /* Allocate and return a bitmap that has a bit set for each partition\n    that contains a default def for a parameter.  */\n \n-extern bitmap\n+bitmap\n get_parm_default_def_partitions (var_map map)\n {\n   bitmap parm_default_def_parts = BITMAP_ALLOC (NULL);\n@@ -1935,3 +1936,28 @@ get_parm_default_def_partitions (var_map map)\n \n   return parm_default_def_parts;\n }\n+\n+/* Allocate and return a bitmap that has a bit set for each partition\n+   that contains an undefined value.  */\n+\n+bitmap\n+get_undefined_value_partitions (var_map map)\n+{\n+  bitmap undefined_value_parts = BITMAP_ALLOC (NULL);\n+\n+  for (unsigned int i = 1; i < num_ssa_names; i++)\n+    {\n+      tree var = ssa_name (i);\n+      if (var\n+\t  && !virtual_operand_p (var)\n+\t  && !has_zero_uses (var)\n+\t  && ssa_undefined_value_p (var))\n+\t{\n+\t  const int p = var_to_partition (map, var);\n+\t  if (p != NO_PARTITION)\n+\t    bitmap_set_bit (undefined_value_parts, p);\n+\t}\n+    }\n+\n+  return undefined_value_parts;\n+}"}, {"sha": "98e61c5d34a256acd751ce8efbdbda072c348af1", "filename": "gcc/tree-ssa-coalesce.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftree-ssa-coalesce.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561593c104a3fcce354d644b12072b1da8690baa/gcc%2Ftree-ssa-coalesce.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.h?ref=561593c104a3fcce354d644b12072b1da8690baa", "patch": "@@ -23,5 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n extern var_map coalesce_ssa_name (void);\n extern bool gimple_can_coalesce_p (tree, tree);\n extern bitmap get_parm_default_def_partitions (var_map);\n+extern bitmap get_undefined_value_partitions (var_map);\n \n #endif /* GCC_TREE_SSA_COALESCE_H */"}]}