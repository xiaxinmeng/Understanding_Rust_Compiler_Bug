{"sha": "a6af1bf9fe2f76be09384affb063bf49a6706922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZhZjFiZjlmZTJmNzZiZTA5Mzg0YWZmYjA2M2JmNDlhNjcwNjkyMg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-04-19T23:48:24Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-04-19T23:48:24Z"}, "message": "re PR rtl-optimization/65805 (Chromium gets miscompiled)\n\n2015-04-19  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/65805\n\t* lra-eliminations.c (lra_eliminate_regs_1): Add new assert.\n\tDon't use difference of offset and previous offset if\n\tupdate_sp_offset is non-zero.\n\t(eliminate_regs_in_insn): Ditto.\n\t* lra-spills.c (remove_pseudos): Exchange 4th and 6th args in\n\tlra_eliminate_regs_1 call.\n\t* lra-constraints.c (get_equiv_with_elimination): Ditto.\n\nFrom-SVN: r222223", "tree": {"sha": "285ac114828db5fce5b0c688b0f448f3732d0467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/285ac114828db5fce5b0c688b0f448f3732d0467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6af1bf9fe2f76be09384affb063bf49a6706922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6af1bf9fe2f76be09384affb063bf49a6706922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6af1bf9fe2f76be09384affb063bf49a6706922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6af1bf9fe2f76be09384affb063bf49a6706922/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "037524d6be91875626a15f71b694537ac5a3bea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/037524d6be91875626a15f71b694537ac5a3bea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/037524d6be91875626a15f71b694537ac5a3bea7"}], "stats": {"total": 82, "additions": 55, "deletions": 27}, "files": [{"sha": "77fc4f9f2117bb544820d73cba3e76bcbb402522", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6af1bf9fe2f76be09384affb063bf49a6706922/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6af1bf9fe2f76be09384affb063bf49a6706922/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6af1bf9fe2f76be09384affb063bf49a6706922", "patch": "@@ -1,3 +1,14 @@\n+2015-04-19  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/65805\n+\t* lra-eliminations.c (lra_eliminate_regs_1): Add new assert.\n+\tDon't use difference of offset and previous offset if\n+\tupdate_sp_offset is non-zero.\n+\t(eliminate_regs_in_insn): Ditto.\n+\t* lra-spills.c (remove_pseudos): Exchange 4th and 6th args in\n+\tlra_eliminate_regs_1 call.\n+\t* lra-constraints.c (get_equiv_with_elimination): Ditto.\n+\n 2015-04-18  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* hash-table.h: Remove version of hash_table that stored value_type *."}, {"sha": "497d8db2d1f33fb1aa70cde1d56d2a27f42b8112", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6af1bf9fe2f76be09384affb063bf49a6706922/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6af1bf9fe2f76be09384affb063bf49a6706922/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=a6af1bf9fe2f76be09384affb063bf49a6706922", "patch": "@@ -533,7 +533,7 @@ get_equiv_with_elimination (rtx x, rtx_insn *insn)\n   if (x == res || CONSTANT_P (res))\n     return res;\n   return lra_eliminate_regs_1 (insn, res, GET_MODE (res),\n-\t\t\t       0, false, false, true);\n+\t\t\t       false, false, 0, true);\n }\n \n /* Set up curr_operand_mode.  */"}, {"sha": "f7c8e402467a95fb434f166df2f61ff99fb95ef3", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6af1bf9fe2f76be09384affb063bf49a6706922/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6af1bf9fe2f76be09384affb063bf49a6706922/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=a6af1bf9fe2f76be09384affb063bf49a6706922", "patch": "@@ -318,7 +318,9 @@ get_elimination (rtx reg)\n    substitution if UPDATE_P, or the full offset if FULL_P, or\n    otherwise zero.  If FULL_P, we also use the SP offsets for\n    elimination to SP.  If UPDATE_P, use UPDATE_SP_OFFSET for updating\n-   offsets of register elimnable to SP.\n+   offsets of register elimnable to SP.  If UPDATE_SP_OFFSET is\n+   non-zero, don't use difference of the offset and the previous\n+   offset.\n \n    MEM_MODE is the mode of an enclosing MEM.  We need this to know how\n    much to adjust a register for, e.g., PRE_DEC.  Also, if we are\n@@ -341,7 +343,8 @@ lra_eliminate_regs_1 (rtx_insn *insn, rtx x, machine_mode mem_mode,\n   const char *fmt;\n   int copied = 0;\n \n-  gcc_assert (!update_p || !full_p);\n+  lra_assert (!update_p || !full_p);\n+  lra_assert (update_sp_offset == 0 || (!subst_p && update_p && !full_p));\n   if (! current_function_decl)\n     return x;\n \n@@ -366,11 +369,14 @@ lra_eliminate_regs_1 (rtx_insn *insn, rtx x, machine_mode mem_mode,\n \t{\n \t  rtx to = subst_p ? ep->to_rtx : ep->from_rtx;\n \n-\t  if (update_p)\n-\t    return plus_constant (Pmode, to,\n-\t\t\t\t  ep->offset - ep->previous_offset\n-\t\t\t\t  + (ep->to_rtx == stack_pointer_rtx\n-\t\t\t\t     ? update_sp_offset : 0));\n+\t  if (update_sp_offset != 0)\n+\t    {\n+\t      if (ep->to_rtx == stack_pointer_rtx)\n+\t\treturn plus_constant (Pmode, to, update_sp_offset);\n+\t      return to;\n+\t    }\n+\t  else if (update_p)\n+\t    return plus_constant (Pmode, to, ep->offset - ep->previous_offset);\n \t  else if (full_p)\n \t    return plus_constant (Pmode, to,\n \t\t\t\t  ep->offset\n@@ -395,16 +401,15 @@ lra_eliminate_regs_1 (rtx_insn *insn, rtx x, machine_mode mem_mode,\n \n \t      if (! update_p && ! full_p)\n \t\treturn gen_rtx_PLUS (Pmode, to, XEXP (x, 1));\n-\n-\t      offset = (update_p\n-\t\t\t? ep->offset - ep->previous_offset\n-\t\t\t+ (ep->to_rtx == stack_pointer_rtx\n-\t\t\t   ? update_sp_offset : 0)\n-\t\t\t: ep->offset);\n+\t      \n+\t      if (update_sp_offset != 0)\n+\t\toffset = ep->to_rtx == stack_pointer_rtx ? update_sp_offset : 0;\n+\t      else\n+\t\toffset = (update_p\n+\t\t\t  ? ep->offset - ep->previous_offset : ep->offset);\n \t      if (full_p && insn != NULL_RTX && ep->to_rtx == stack_pointer_rtx)\n \t\toffset -= lra_get_insn_recog_data (insn)->sp_offset;\n-\t      if (CONST_INT_P (XEXP (x, 1))\n-\t\t  && INTVAL (XEXP (x, 1)) == -offset)\n+\t      if (CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) == -offset)\n \t\treturn to;\n \t      else\n \t\treturn gen_rtx_PLUS (Pmode, to,\n@@ -451,12 +456,18 @@ lra_eliminate_regs_1 (rtx_insn *insn, rtx x, machine_mode mem_mode,\n \t{\n \t  rtx to = subst_p ? ep->to_rtx : ep->from_rtx;\n \n-\t  if (update_p)\n+\t  if (update_sp_offset != 0)\n+\t    {\n+\t      if (ep->to_rtx == stack_pointer_rtx)\n+\t\treturn plus_constant (Pmode,\n+\t\t\t\t      gen_rtx_MULT (Pmode, to, XEXP (x, 1)),\n+\t\t\t\t      update_sp_offset * INTVAL (XEXP (x, 1)));\n+\t      return gen_rtx_MULT (Pmode, to, XEXP (x, 1));\n+\t    }\n+\t  else if (update_p)\n \t    return plus_constant (Pmode,\n \t\t\t\t  gen_rtx_MULT (Pmode, to, XEXP (x, 1)),\n-\t\t\t\t  (ep->offset - ep->previous_offset\n-\t\t\t\t   + (ep->to_rtx == stack_pointer_rtx\n-\t\t\t\t      ? update_sp_offset : 0))\n+\t\t\t\t  (ep->offset - ep->previous_offset)\n \t\t\t\t  * INTVAL (XEXP (x, 1)));\n \t  else if (full_p)\n \t    {\n@@ -889,11 +900,12 @@ remove_reg_equal_offset_note (rtx insn, rtx what)\n \n    If REPLACE_P is false, just update the offsets while keeping the\n    base register the same.  If FIRST_P, use the sp offset for\n-   elimination to sp.  Otherwise, use UPDATE_SP_OFFSET for this.\n-   Attach the note about used elimination for insns setting frame\n-   pointer to update elimination easy (without parsing already\n-   generated elimination insns to find offset previously used) in\n-   future.  */\n+   elimination to sp.  Otherwise, use UPDATE_SP_OFFSET for this.  If\n+   UPDATE_SP_OFFSET is non-zero, don't use difference of the offset\n+   and the previous offset.  Attach the note about used elimination\n+   for insns setting frame pointer to update elimination easy (without\n+   parsing already generated elimination insns to find offset\n+   previously used) in future.  */\n \n void\n eliminate_regs_in_insn (rtx_insn *insn, bool replace_p, bool first_p,\n@@ -940,6 +952,10 @@ eliminate_regs_in_insn (rtx_insn *insn, bool replace_p, bool first_p,\n \t\trtx src = SET_SRC (old_set);\n \t\trtx off = remove_reg_equal_offset_note (insn, ep->to_rtx);\n \t\t\n+\t\t/* We should never process such insn with non-zero\n+\t\t   UPDATE_SP_OFFSET.  */\n+\t\tlra_assert (update_sp_offset == 0);\n+\t\t\n \t\tif (off != NULL_RTX\n \t\t    || src == ep->to_rtx\n \t\t    || (GET_CODE (src) == PLUS\n@@ -1026,7 +1042,8 @@ eliminate_regs_in_insn (rtx_insn *insn, bool replace_p, bool first_p,\n \n \t  if (! replace_p)\n \t    {\n-\t      offset += (ep->offset - ep->previous_offset);\n+\t      if (update_sp_offset == 0)\n+\t\toffset += (ep->offset - ep->previous_offset);\n \t      if (ep->to_rtx == stack_pointer_rtx)\n \t\t{\n \t\t  if (first_p)"}, {"sha": "ed678d5edb45212c1c82eb8e3f2d0edb775ecc87", "filename": "gcc/lra-spills.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6af1bf9fe2f76be09384affb063bf49a6706922/gcc%2Flra-spills.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6af1bf9fe2f76be09384affb063bf49a6706922/gcc%2Flra-spills.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.c?ref=a6af1bf9fe2f76be09384affb063bf49a6706922", "patch": "@@ -461,7 +461,7 @@ remove_pseudos (rtx *loc, rtx_insn *insn)\n \t{\n \t  rtx x = lra_eliminate_regs_1 (insn, pseudo_slots[i].mem,\n \t\t\t\t\tGET_MODE (pseudo_slots[i].mem),\n-\t\t\t\t\t0, false, false, true);\n+\t\t\t\t\tfalse, false, 0, true);\n \t  *loc = x != pseudo_slots[i].mem ? x : copy_rtx (x);\n \t}\n       return;"}]}