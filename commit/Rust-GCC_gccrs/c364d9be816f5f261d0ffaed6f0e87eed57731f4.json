{"sha": "c364d9be816f5f261d0ffaed6f0e87eed57731f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM2NGQ5YmU4MTZmNWYyNjFkMGZmYWVkNmYwZTg3ZWVkNTc3MzFmNA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2008-03-26T07:39:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:39:28Z"}, "message": "exp_ch7.adb (Make_Clean): Code cleanup using the new centralized subprogram Corresponding_Runtime_Package...\n\n2008-03-26  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch7.adb (Make_Clean): Code cleanup using the new centralized\n\tsubprogram Corresponding_Runtime_Package to know the runtime package\n\tthat will provide support to a given protected type.\n\n\t* exp_ch9.adb (Add_Private_Declarations,\n\tBuild_Protected_Subprogram_Call,\n\tBuild_Protected_Entry, Build_Simple_Entry_Call,\n\tExpand_N_Protected_Body, Expand_N_Protected_Type_Declaration,\n\tExpand_N_Timed_Entry_Call, Make_Initialize_Protection): Code\n\tcleanup using the new centralized subprogram Corresponding_Runtime\n\tPackage to know the runtime package that provides support to\n\ta given protected type.\n\nFrom-SVN: r133565", "tree": {"sha": "7ae8cf02935905b94067f0e761054b09b433d9e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ae8cf02935905b94067f0e761054b09b433d9e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c364d9be816f5f261d0ffaed6f0e87eed57731f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c364d9be816f5f261d0ffaed6f0e87eed57731f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c364d9be816f5f261d0ffaed6f0e87eed57731f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c364d9be816f5f261d0ffaed6f0e87eed57731f4/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1923d2d6716bf5c1c45dbe285e0774f05611be05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1923d2d6716bf5c1c45dbe285e0774f05611be05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1923d2d6716bf5c1c45dbe285e0774f05611be05"}], "stats": {"total": 629, "additions": 311, "deletions": 318}, "files": [{"sha": "678f8441011ee0aec59337ad2e9b3e20cb61630e", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c364d9be816f5f261d0ffaed6f0e87eed57731f4/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c364d9be816f5f261d0ffaed6f0e87eed57731f4/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=c364d9be816f5f261d0ffaed6f0e87eed57731f4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2301,14 +2301,16 @@ package body Exp_Ch7 is\n          if Nkind (Specification (N)) = N_Procedure_Specification\n            and then Has_Entries (Pid)\n          then\n-            if Abort_Allowed\n-              or else Restriction_Active (No_Entry_Queue) = False\n-              or else Number_Entries (Pid) > 1\n-            then\n-               Name := New_Reference_To (RTE (RE_Service_Entries), Loc);\n-            else\n-               Name := New_Reference_To (RTE (RE_Service_Entry), Loc);\n-            end if;\n+            case Corresponding_Runtime_Package (Pid) is\n+               when System_Tasking_Protected_Objects_Entries =>\n+                  Name := New_Reference_To (RTE (RE_Service_Entries), Loc);\n+\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n+                  Name := New_Reference_To (RTE (RE_Service_Entry), Loc);\n+\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n \n             Append_To (Stmt,\n               Make_Procedure_Call_Statement (Loc,\n@@ -2329,31 +2331,19 @@ package body Exp_Ch7 is\n             --  object is the record used to implement the protected object.\n             --  It is a parameter to the protected subprogram.\n \n-            --  If the protected object is controlled (i.e it has entries or\n-            --  needs finalization for interrupt handling), call\n-            --  Unlock_Entries, except if the protected object follows the\n-            --  ravenscar profile, in which case call Unlock_Entry, otherwise\n-            --  call the simplified version, Unlock.\n-\n-            if Has_Entries (Pid)\n-              or else Has_Interrupt_Handler (Pid)\n-              or else (Has_Attach_Handler (Pid)\n-                         and then not Restricted_Profile)\n-              or else (Ada_Version >= Ada_05\n-                         and then Present (Interface_List (Parent (Pid))))\n-            then\n-               if Abort_Allowed\n-                 or else Restriction_Active (No_Entry_Queue) = False\n-                 or else Number_Entries (Pid) > 1\n-               then\n+            case Corresponding_Runtime_Package (Pid) is\n+               when System_Tasking_Protected_Objects_Entries =>\n                   Name := New_Reference_To (RTE (RE_Unlock_Entries), Loc);\n-               else\n+\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n                   Name := New_Reference_To (RTE (RE_Unlock_Entry), Loc);\n-               end if;\n \n-            else\n-               Name := New_Reference_To (RTE (RE_Unlock), Loc);\n-            end if;\n+               when System_Tasking_Protected_Objects =>\n+                  Name := New_Reference_To (RTE (RE_Unlock), Loc);\n+\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n \n             Append_To (Stmt,\n               Make_Procedure_Call_Statement (Loc,"}, {"sha": "2fa47520947e09d364ba9b5ce1ff1cbab080b3ab", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 290, "deletions": 287, "changes": 577, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c364d9be816f5f261d0ffaed6f0e87eed57731f4/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c364d9be816f5f261d0ffaed6f0e87eed57731f4/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=c364d9be816f5f261d0ffaed6f0e87eed57731f4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -666,7 +666,7 @@ package body Exp_Ch9 is\n           Expression =>\n             Unchecked_Convert_To (Obj_Ptr,\n               Make_Identifier (Loc, Name_uO)));\n-      Set_Needs_Debug_Info (Defining_Identifier (Decl));\n+      Set_Debug_Info_Needed (Defining_Identifier (Decl));\n       Prepend_To (Decls, Decl);\n \n       Prepend_To (Decls,\n@@ -703,10 +703,16 @@ package body Exp_Ch9 is\n       while Present (Formal) loop\n          Comp   := Entry_Component (Formal);\n          New_F  :=\n-           Make_Defining_Identifier (Sloc (Formal), Chars (Formal));\n+           Make_Defining_Identifier (Sloc (Formal),\n+             Chars => Chars (Formal));\n          Set_Etype (New_F, Etype (Formal));\n          Set_Scope (New_F, Ent);\n-         Set_Needs_Debug_Info (New_F);   --  That's the whole point.\n+\n+         --  Now we set debug info needed on New_F even though it does not\n+         --  come from source, so that the debugger will get the right\n+         --  information for these generated names.\n+\n+         Set_Debug_Info_Needed (New_F);\n \n          if Ekind (Formal) = E_In_Parameter then\n             Set_Ekind (New_F, E_Constant);\n@@ -779,7 +785,7 @@ package body Exp_Ch9 is\n                      Make_Selected_Component (Loc,\n                        Prefix        => Make_Identifier (Loc, Name),\n                        Selector_Name => Make_Identifier (Loc, Chars (Pdef))));\n-               Set_Needs_Debug_Info (Defining_Identifier (Decl));\n+               Set_Debug_Info_Needed (Defining_Identifier (Decl));\n                Prepend_To (Decls, Decl);\n             end if;\n \n@@ -793,6 +799,8 @@ package body Exp_Ch9 is\n          Protection_Type : RE_Id;\n \n       begin\n+         --  Could this be simplified using Corresponding_Runtime_Package???\n+\n          if Has_Attach_Handler (Typ) then\n             if Restricted_Profile then\n                if Has_Entries (Typ) then\n@@ -814,14 +822,16 @@ package body Exp_Ch9 is\n             or else (Ada_Version >= Ada_05\n                        and then Present (Interface_List (Parent (Typ))))\n          then\n-            if Abort_Allowed\n-              or else Restriction_Active (No_Entry_Queue) = False\n-              or else Number_Entries (Typ) > 1\n-            then\n-               Protection_Type := RE_Protection_Entries;\n-            else\n-               Protection_Type := RE_Protection_Entry;\n-            end if;\n+            case Corresponding_Runtime_Package (Typ) is\n+               when System_Tasking_Protected_Objects_Entries =>\n+                  Protection_Type := RE_Protection_Entries;\n+\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n+                  Protection_Type := RE_Protection_Entry;\n+\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n \n          else\n             Protection_Type := RE_Protection;\n@@ -839,7 +849,7 @@ package body Exp_Ch9 is\n                Make_Selected_Component (Loc,\n                  Prefix        => Make_Identifier (Loc, Name),\n                  Selector_Name => Make_Identifier (Loc, Name_uObject)));\n-         Set_Needs_Debug_Info (Defining_Identifier (Decl));\n+         Set_Debug_Info_Needed (Defining_Identifier (Decl));\n          Prepend_To (Decls, Decl);\n       end;\n    end Add_Private_Declarations;\n@@ -1080,7 +1090,7 @@ package body Exp_Ch9 is\n       Loc    : Source_Ptr) return Node_Id\n    is\n    begin\n-      Set_Needs_Debug_Info (Def_Id);\n+      Set_Debug_Info_Needed (Def_Id);\n       return Make_Function_Specification (Loc,\n         Defining_Unit_Name => Def_Id,\n         Parameter_Specifications => New_List (\n@@ -2147,16 +2157,18 @@ package body Exp_Ch9 is\n \n       Add_Formal_Renamings (Espec, Op_Decls, Ent, Loc);\n \n-      if Abort_Allowed\n-        or else Restriction_Active (No_Entry_Queue) = False\n-        or else Number_Entries (Pid) > 1\n-        or else (Has_Attach_Handler (Pid) and then not Restricted_Profile)\n-      then\n-         Complete := New_Reference_To (RTE (RE_Complete_Entry_Body), Loc);\n-      else\n-         Complete :=\n-           New_Reference_To (RTE (RE_Complete_Single_Entry_Body), Loc);\n-      end if;\n+      case Corresponding_Runtime_Package (Pid) is\n+         when System_Tasking_Protected_Objects_Entries =>\n+            Complete :=\n+              New_Reference_To (RTE (RE_Complete_Entry_Body), Loc);\n+\n+         when System_Tasking_Protected_Objects_Single_Entry =>\n+            Complete :=\n+              New_Reference_To (RTE (RE_Complete_Single_Entry_Body), Loc);\n+\n+         when others =>\n+            raise Program_Error;\n+      end case;\n \n       Op_Stats := New_List (\n          Make_Block_Statement (Loc,\n@@ -2194,18 +2206,20 @@ package body Exp_Ch9 is\n          Ohandle := Make_Others_Choice (Loc);\n          Set_All_Others (Ohandle);\n \n-         if Abort_Allowed\n-           or else Restriction_Active (No_Entry_Queue) = False\n-           or else Number_Entries (Pid) > 1\n-           or else (Has_Attach_Handler (Pid) and then not Restricted_Profile)\n-         then\n-            Complete :=\n-              New_Reference_To (RTE (RE_Exceptional_Complete_Entry_Body), Loc);\n+         case Corresponding_Runtime_Package (Pid) is\n+            when System_Tasking_Protected_Objects_Entries =>\n+               Complete :=\n+                 New_Reference_To\n+                   (RTE (RE_Exceptional_Complete_Entry_Body), Loc);\n \n-         else\n-            Complete := New_Reference_To (\n-              RTE (RE_Exceptional_Complete_Single_Entry_Body), Loc);\n-         end if;\n+            when System_Tasking_Protected_Objects_Single_Entry =>\n+               Complete :=\n+                 New_Reference_To\n+                   (RTE (RE_Exceptional_Complete_Single_Entry_Body), Loc);\n+\n+            when others =>\n+               raise Program_Error;\n+         end case;\n \n          --  Create body of entry procedure. The renaming declarations are\n          --  placed ahead of the block that contains the actual entry body.\n@@ -2253,7 +2267,7 @@ package body Exp_Ch9 is\n       P : Entity_Id;\n \n    begin\n-      Set_Needs_Debug_Info (Def_Id);\n+      Set_Debug_Info_Needed (Def_Id);\n       P := Make_Defining_Identifier (Loc, Name_uP);\n \n       if Present (Ent_Id) then\n@@ -2329,7 +2343,7 @@ package body Exp_Ch9 is\n            (Etype (Ident) = Standard_Void_Type\n               and then not Is_RTE (Obj_Type, RE_Address)),\n           Parameter_Type => New_Reference_To (Obj_Type, Loc));\n-      Set_Needs_Debug_Info (Defining_Identifier (Decl));\n+      Set_Debug_Info_Needed (Defining_Identifier (Decl));\n       Prepend_To (New_Plist, Decl);\n \n       return New_Plist;\n@@ -2382,7 +2396,7 @@ package body Exp_Ch9 is\n       --  into the protected operation, even though it only contains lock/\n       --  unlock calls.\n \n-      Set_Needs_Debug_Info (New_Id);\n+      Set_Debug_Info_Needed (New_Id);\n \n       if Nkind (Specification (Decl)) = N_Procedure_Specification then\n          return\n@@ -2596,36 +2610,22 @@ package body Exp_Ch9 is\n       --  Make the protected subprogram body. This locks the protected\n       --  object and calls the unprotected version of the subprogram.\n \n-      --  If the protected object is controlled (i.e it has entries or\n-      --  needs finalization for interrupt handling), call Lock_Entries,\n-      --  except if the protected object follows the Ravenscar profile, in\n-      --  which case call Lock_Entry, otherwise call the simplified version,\n-      --  Lock.\n-\n-      if Has_Entries (Pid)\n-        or else Has_Interrupt_Handler (Pid)\n-        or else (Has_Attach_Handler (Pid)\n-                  and then not Restricted_Profile)\n-        or else (Ada_Version >= Ada_05\n-                  and then Present (Interface_List (Parent (Pid))))\n-      then\n-         if Abort_Allowed\n-           or else Restriction_Active (No_Entry_Queue) = False\n-           or else Number_Entries (Pid) > 1\n-           or else (Has_Attach_Handler (Pid) and then not Restricted_Profile)\n-         then\n+      case Corresponding_Runtime_Package (Pid) is\n+         when System_Tasking_Protected_Objects_Entries =>\n             Lock_Name := New_Reference_To (RTE (RE_Lock_Entries), Loc);\n             Service_Name := New_Reference_To (RTE (RE_Service_Entries), Loc);\n \n-         else\n+         when System_Tasking_Protected_Objects_Single_Entry =>\n             Lock_Name := New_Reference_To (RTE (RE_Lock_Entry), Loc);\n             Service_Name := New_Reference_To (RTE (RE_Service_Entry), Loc);\n-         end if;\n \n-      else\n-         Lock_Name := New_Reference_To (RTE (RE_Lock), Loc);\n-         Service_Name := New_Reference_To (RTE (RE_Unlock), Loc);\n-      end if;\n+         when System_Tasking_Protected_Objects =>\n+            Lock_Name := New_Reference_To (RTE (RE_Lock), Loc);\n+            Service_Name := New_Reference_To (RTE (RE_Unlock), Loc);\n+\n+         when others =>\n+            raise Program_Error;\n+      end case;\n \n       Object_Parm :=\n         Make_Attribute_Reference (Loc,\n@@ -3101,75 +3101,75 @@ package body Exp_Ch9 is\n          --  Now we can create the call, case of protected type\n \n          if Is_Protected_Type (Conctyp) then\n-            if Abort_Allowed\n-              or else Restriction_Active (No_Entry_Queue) = False\n-              or else Number_Entries (Conctyp) > 1\n-              or else (Has_Attach_Handler (Conctyp)\n-                        and then not Restricted_Profile)\n-            then\n-               --  Change the type of the index declaration\n-\n-               Set_Object_Definition (Xdecl,\n-                 New_Reference_To (RTE (RE_Protected_Entry_Index), Loc));\n+            case Corresponding_Runtime_Package (Conctyp) is\n+               when System_Tasking_Protected_Objects_Entries =>\n \n-               --  Some additional declarations for protected entry calls\n+                  --  Change the type of the index declaration\n \n-               if No (Decls) then\n-                  Decls := New_List;\n-               end if;\n+                  Set_Object_Definition (Xdecl,\n+                    New_Reference_To (RTE (RE_Protected_Entry_Index), Loc));\n \n-               --  Bnn : Communications_Block;\n+                  --  Some additional declarations for protected entry calls\n \n-               Comm_Name :=\n-                 Make_Defining_Identifier (Loc, New_Internal_Name ('B'));\n+                  if No (Decls) then\n+                     Decls := New_List;\n+                  end if;\n \n-               Append_To (Decls,\n-                 Make_Object_Declaration (Loc,\n-                   Defining_Identifier => Comm_Name,\n-                   Object_Definition =>\n-                     New_Reference_To (RTE (RE_Communication_Block), Loc)));\n+                  --  Bnn : Communications_Block;\n \n-               --  Some additional statements for protected entry calls\n+                  Comm_Name :=\n+                    Make_Defining_Identifier (Loc, New_Internal_Name ('B'));\n \n-               --     Protected_Entry_Call (\n-               --       Object => po._object'Access,\n-               --       E => <entry index>;\n-               --       Uninterpreted_Data => P'Address;\n-               --       Mode => Simple_Call;\n-               --       Block => Bnn);\n+                  Append_To (Decls,\n+                    Make_Object_Declaration (Loc,\n+                      Defining_Identifier => Comm_Name,\n+                      Object_Definition =>\n+                        New_Reference_To (RTE (RE_Communication_Block), Loc)));\n \n-               Call :=\n-                 Make_Procedure_Call_Statement (Loc,\n-                   Name =>\n-                     New_Reference_To (RTE (RE_Protected_Entry_Call), Loc),\n+                  --  Some additional statements for protected entry calls\n \n-                   Parameter_Associations => New_List (\n-                     Make_Attribute_Reference (Loc,\n-                       Attribute_Name => Name_Unchecked_Access,\n-                       Prefix         => Parm1),\n-                     Parm2,\n-                     Parm3,\n-                     New_Reference_To (RTE (RE_Simple_Call), Loc),\n-                     New_Occurrence_Of (Comm_Name, Loc)));\n+                  --     Protected_Entry_Call (\n+                  --       Object => po._object'Access,\n+                  --       E => <entry index>;\n+                  --       Uninterpreted_Data => P'Address;\n+                  --       Mode => Simple_Call;\n+                  --       Block => Bnn);\n \n-            else\n-               --     Protected_Single_Entry_Call (\n-               --       Object => po._object'Access,\n-               --       Uninterpreted_Data => P'Address;\n-               --       Mode => Simple_Call);\n+                  Call :=\n+                    Make_Procedure_Call_Statement (Loc,\n+                      Name =>\n+                        New_Reference_To (RTE (RE_Protected_Entry_Call), Loc),\n \n-               Call :=\n-                 Make_Procedure_Call_Statement (Loc,\n-                   Name => New_Reference_To (\n-                     RTE (RE_Protected_Single_Entry_Call), Loc),\n+                      Parameter_Associations => New_List (\n+                        Make_Attribute_Reference (Loc,\n+                          Attribute_Name => Name_Unchecked_Access,\n+                          Prefix         => Parm1),\n+                        Parm2,\n+                        Parm3,\n+                        New_Reference_To (RTE (RE_Simple_Call), Loc),\n+                        New_Occurrence_Of (Comm_Name, Loc)));\n+\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n+                  --     Protected_Single_Entry_Call (\n+                  --       Object => po._object'Access,\n+                  --       Uninterpreted_Data => P'Address;\n+                  --       Mode => Simple_Call);\n+\n+                  Call :=\n+                    Make_Procedure_Call_Statement (Loc,\n+                      Name => New_Reference_To (\n+                        RTE (RE_Protected_Single_Entry_Call), Loc),\n+\n+                      Parameter_Associations => New_List (\n+                        Make_Attribute_Reference (Loc,\n+                          Attribute_Name => Name_Unchecked_Access,\n+                          Prefix         => Parm1),\n+                        Parm3,\n+                        New_Reference_To (RTE (RE_Simple_Call), Loc)));\n \n-                   Parameter_Associations => New_List (\n-                     Make_Attribute_Reference (Loc,\n-                       Attribute_Name => Name_Unchecked_Access,\n-                       Prefix         => Parm1),\n-                     Parm3,\n-                     New_Reference_To (RTE (RE_Simple_Call), Loc)));\n-            end if;\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n \n          --  Case of task type\n \n@@ -4185,7 +4185,7 @@ package body Exp_Ch9 is\n \n          if Present (Ann) then\n             Append_Elmt (Ann, Accept_Address (Ent));\n-            Set_Needs_Debug_Info (Ann);\n+            Set_Debug_Info_Needed (Ann);\n          end if;\n \n          --  Create renaming declarations for the entry formals. Each reference\n@@ -4215,7 +4215,12 @@ package body Exp_Ch9 is\n \n                   Set_Etype (New_F, Etype (Formal));\n                   Set_Scope (New_F, Ent);\n-                  Set_Needs_Debug_Info (New_F);   --  That's the whole point.\n+\n+               --  Now we set debug info needed on New_F even though it does\n+               --  not come from source, so that the debugger will get the\n+               --  right information for these generated names.\n+\n+                  Set_Debug_Info_Needed (New_F);\n \n                   if Ekind (Formal) = E_In_Parameter then\n                      Set_Ekind (New_F, E_Constant);\n@@ -6683,7 +6688,6 @@ package body Exp_Ch9 is\n    procedure Expand_N_Protected_Body (N : Node_Id) is\n       Loc          : constant Source_Ptr := Sloc (N);\n       Pid          : constant Entity_Id  := Corresponding_Spec (N);\n-      Has_Entries  : Boolean := False;\n       Op_Body      : Node_Id;\n       Op_Decl      : Node_Id;\n       Op_Id        : Entity_Id;\n@@ -6893,7 +6897,6 @@ package body Exp_Ch9 is\n \n             when N_Entry_Body =>\n                Op_Id := Defining_Identifier (Op_Body);\n-               Has_Entries := True;\n                Num_Entries := Num_Entries + 1;\n \n                New_Op_Body := Build_Protected_Entry (Op_Body, Op_Id, Pid);\n@@ -6946,14 +6949,10 @@ package body Exp_Ch9 is\n \n       --  Finally, create the body of the function that maps an entry index\n       --  into the corresponding body index, except when there is no entry,\n-      --  or in a ravenscar-like profile (no abort, no entry queue, 1 entry)\n-\n-      if Has_Entries\n-        and then (Abort_Allowed\n-                  or else Restriction_Active (No_Entry_Queue) = False\n-                  or else Num_Entries > 1\n-                  or else (Has_Attach_Handler (Pid)\n-                            and then not Restricted_Profile))\n+      --  or in a ravenscar-like profile.\n+\n+      if Corresponding_Runtime_Package (Pid) =\n+           System_Tasking_Protected_Objects_Entries\n       then\n          New_Op_Body := Build_Find_Body_Index (Pid);\n          Insert_After (Current_Node, New_Op_Body);\n@@ -6970,12 +6969,12 @@ package body Exp_Ch9 is\n       if Ada_Version >= Ada_05\n         and then Present (Protected_Definition (Parent (Pid)))\n         and then Present (Abstract_Interfaces\n-                          (Corresponding_Record_Type (Pid)))\n+                           (Corresponding_Record_Type (Pid)))\n       then\n          declare\n             Vis_Decl  : Node_Id :=\n                           First (Visible_Declarations\n-                                 (Protected_Definition (Parent (Pid))));\n+                                  (Protected_Definition (Parent (Pid))));\n             Wrap_Body : Node_Id;\n \n          begin\n@@ -7219,11 +7218,13 @@ package body Exp_Ch9 is\n                                   (Prottyp, Cdecls, Loc);\n \n       begin\n+         --  Could this be simplified using Corresponding_Runtime_Package???\n+\n          if Has_Attach_Handler (Prottyp) then\n             Ritem := First_Rep_Item (Prottyp);\n             while Present (Ritem) loop\n                if Nkind (Ritem) = N_Pragma\n-                 and then Chars (Ritem) = Name_Attach_Handler\n+                 and then Pragma_Name (Ritem) = Name_Attach_Handler\n                then\n                   Num_Attach_Handler := Num_Attach_Handler + 1;\n                end if;\n@@ -7271,24 +7272,24 @@ package body Exp_Ch9 is\n            or else (Ada_Version >= Ada_05\n                       and then Present (Interface_List (N)))\n          then\n-            if Abort_Allowed\n-              or else Restriction_Active (No_Entry_Queue) = False\n-              or else Number_Entries (Prottyp) > 1\n-            then\n-               Protection_Subtype :=\n-                  Make_Subtype_Indication (\n-                    Sloc => Loc,\n-                    Subtype_Mark =>\n-                      New_Reference_To (RTE (RE_Protection_Entries), Loc),\n-                    Constraint =>\n-                      Make_Index_Or_Discriminant_Constraint (\n-                        Sloc => Loc,\n-                        Constraints => New_List (Entry_Count_Expr)));\n+            case Corresponding_Runtime_Package (Prottyp) is\n+               when System_Tasking_Protected_Objects_Entries =>\n+                  Protection_Subtype :=\n+                     Make_Subtype_Indication (Loc,\n+                       Subtype_Mark =>\n+                         New_Reference_To (RTE (RE_Protection_Entries), Loc),\n+                       Constraint =>\n+                         Make_Index_Or_Discriminant_Constraint (\n+                           Sloc => Loc,\n+                           Constraints => New_List (Entry_Count_Expr)));\n+\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n+                  Protection_Subtype :=\n+                    New_Reference_To (RTE (RE_Protection_Entry), Loc);\n \n-            else\n-               Protection_Subtype :=\n-                 New_Reference_To (RTE (RE_Protection_Entry), Loc);\n-            end if;\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n \n          else\n             Protection_Subtype := New_Reference_To (RTE (RE_Protection), Loc);\n@@ -7692,42 +7693,42 @@ package body Exp_Ch9 is\n          Body_Id := Make_Defining_Identifier (Sloc (Prottyp),\n            New_External_Name (Chars (Prottyp), 'A'));\n \n-         if Abort_Allowed\n-           or else Restriction_Active (No_Entry_Queue) = False\n-           or else E_Count > 1\n-           or else (Has_Attach_Handler (Prottyp)\n-                     and then not Restricted_Profile)\n-         then\n-            Body_Arr := Make_Object_Declaration (Loc,\n-              Defining_Identifier => Body_Id,\n-              Aliased_Present => True,\n-              Object_Definition =>\n-                Make_Subtype_Indication (Loc,\n-                  Subtype_Mark => New_Reference_To (\n-                    RTE (RE_Protected_Entry_Body_Array), Loc),\n-                  Constraint =>\n-                    Make_Index_Or_Discriminant_Constraint (Loc,\n-                      Constraints => New_List (\n-                         Make_Range (Loc,\n-                           Make_Integer_Literal (Loc, 1),\n-                           Make_Integer_Literal (Loc, E_Count))))),\n-              Expression => Entries_Aggr);\n+         case Corresponding_Runtime_Package (Prottyp) is\n+            when System_Tasking_Protected_Objects_Entries =>\n+               Body_Arr := Make_Object_Declaration (Loc,\n+                 Defining_Identifier => Body_Id,\n+                 Aliased_Present => True,\n+                 Object_Definition =>\n+                   Make_Subtype_Indication (Loc,\n+                     Subtype_Mark => New_Reference_To (\n+                       RTE (RE_Protected_Entry_Body_Array), Loc),\n+                     Constraint =>\n+                       Make_Index_Or_Discriminant_Constraint (Loc,\n+                         Constraints => New_List (\n+                            Make_Range (Loc,\n+                              Make_Integer_Literal (Loc, 1),\n+                              Make_Integer_Literal (Loc, E_Count))))),\n+                 Expression => Entries_Aggr);\n+\n+            when System_Tasking_Protected_Objects_Single_Entry =>\n+               Body_Arr := Make_Object_Declaration (Loc,\n+                 Defining_Identifier => Body_Id,\n+                 Aliased_Present => True,\n+                 Object_Definition => New_Reference_To\n+                                        (RTE (RE_Entry_Body), Loc),\n+                 Expression =>\n+                   Make_Aggregate (Loc,\n+                     Expressions => New_List (\n+                       Make_Attribute_Reference (Loc,\n+                         Prefix => New_Reference_To (Bdef, Loc),\n+                         Attribute_Name => Name_Unrestricted_Access),\n+                       Make_Attribute_Reference (Loc,\n+                         Prefix => New_Reference_To (Edef, Loc),\n+                         Attribute_Name => Name_Unrestricted_Access))));\n \n-         else\n-            Body_Arr := Make_Object_Declaration (Loc,\n-              Defining_Identifier => Body_Id,\n-              Aliased_Present => True,\n-              Object_Definition => New_Reference_To (RTE (RE_Entry_Body), Loc),\n-              Expression =>\n-                Make_Aggregate (Loc,\n-                  Expressions => New_List (\n-                    Make_Attribute_Reference (Loc,\n-                      Prefix => New_Reference_To (Bdef, Loc),\n-                      Attribute_Name => Name_Unrestricted_Access),\n-                    Make_Attribute_Reference (Loc,\n-                      Prefix => New_Reference_To (Edef, Loc),\n-                      Attribute_Name => Name_Unrestricted_Access))));\n-         end if;\n+            when others =>\n+               raise Program_Error;\n+         end case;\n \n          --  A pointer to this array will be placed in the corresponding record\n          --  by its initialization procedure so this needs to be analyzed here.\n@@ -7743,11 +7744,8 @@ package body Exp_Ch9 is\n          --  object of the type. Except for a ravenscar-like profile (no abort,\n          --  no entry queue, 1 entry)\n \n-         if Abort_Allowed\n-           or else Restriction_Active (No_Entry_Queue) = False\n-           or else E_Count > 1\n-           or else (Has_Attach_Handler (Prottyp)\n-                     and then not Restricted_Profile)\n+         if Corresponding_Runtime_Package (Prottyp)\n+           = System_Tasking_Protected_Objects_Entries\n          then\n             Sub :=\n               Make_Subprogram_Declaration (Loc,\n@@ -8341,7 +8339,9 @@ package body Exp_Ch9 is\n               Make_Defining_Identifier (Sloc (Ename),\n                 New_External_Name (Chars (Ename), 'A', Num_Accept));\n \n-            Set_Needs_Debug_Info (PB_Ent, Comes_From_Source (Alt));\n+            if Comes_From_Source (Alt) then\n+               Set_Debug_Info_Needed (PB_Ent);\n+            end if;\n \n             Proc_Body :=\n               Make_Subprogram_Body (Loc,\n@@ -9685,7 +9685,7 @@ package body Exp_Ch9 is\n             --  the benefit of some versions of System.Interrupts which use\n             --  a special server task with maximum interrupt priority.\n \n-            if Chars (Prag) = Name_Priority\n+            if Pragma_Name (Prag) = Name_Priority\n               and then not GNAT_Mode\n             then\n                Rewrite (Expr, Convert_To (RTE (RE_Priority), Expr));\n@@ -9772,8 +9772,9 @@ package body Exp_Ch9 is\n       --  The subprogram does not comes from source, so we have to indicate the\n       --  need for debugging information explicitly.\n \n-      Set_Needs_Debug_Info\n-        (Defining_Entity (Proc_Spec), Comes_From_Source (Original_Node (N)));\n+      if Comes_From_Source (Original_Node (N)) then\n+         Set_Debug_Info_Needed (Defining_Entity (Proc_Spec));\n+      end if;\n \n       --  Ada 2005 (AI-345): Construct the primitive entry wrapper specs before\n       --  the corresponding record has been frozen.\n@@ -10358,32 +10359,35 @@ package body Exp_Ch9 is\n \n             Append_To (Params, New_Reference_To (B, Loc));\n \n-            if Abort_Allowed\n-              or else Restriction_Active (No_Entry_Queue) = False\n-              or else Number_Entries (Etype (Concval)) > 1\n-            then\n-               Rewrite (Call,\n-                 Make_Procedure_Call_Statement (Loc,\n-                   Name =>\n-                     New_Reference_To (RTE (\n-                       RE_Timed_Protected_Entry_Call), Loc),\n-                   Parameter_Associations => Params));\n-            else\n-               Param := First (Params);\n-               while Present (Param)\n-                 and then not Is_RTE (Etype (Param), RE_Protected_Entry_Index)\n-               loop\n-                  Next (Param);\n-               end loop;\n+            case Corresponding_Runtime_Package (Etype (Concval)) is\n+               when System_Tasking_Protected_Objects_Entries =>\n+                  Rewrite (Call,\n+                    Make_Procedure_Call_Statement (Loc,\n+                      Name =>\n+                        New_Reference_To\n+                          (RTE (RE_Timed_Protected_Entry_Call), Loc),\n+                      Parameter_Associations => Params));\n+\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n+                  Param := First (Params);\n+                  while Present (Param)\n+                    and then not\n+                      Is_RTE (Etype (Param), RE_Protected_Entry_Index)\n+                  loop\n+                     Next (Param);\n+                  end loop;\n \n-               Remove (Param);\n+                  Remove (Param);\n \n-               Rewrite (Call,\n-                 Make_Procedure_Call_Statement (Loc,\n-                   Name => New_Reference_To (\n-                     RTE (RE_Timed_Protected_Single_Entry_Call), Loc),\n-                   Parameter_Associations => Params));\n-            end if;\n+                  Rewrite (Call,\n+                    Make_Procedure_Call_Statement (Loc,\n+                      Name => New_Reference_To (\n+                        RTE (RE_Timed_Protected_Single_Entry_Call), Loc),\n+                      Parameter_Associations => Params));\n+\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n \n          --  For the task case, build a Timed_Task_Entry_Call\n \n@@ -10749,11 +10753,11 @@ package body Exp_Ch9 is\n       N := First (Visible_Declarations (T));\n       while Present (N) loop\n          if Nkind (N) = N_Pragma then\n-            if Chars (N) = P then\n+            if Pragma_Name (N) = P then\n                return N;\n \n             elsif P = Name_Priority\n-              and then Chars (N) = Name_Interrupt_Priority\n+              and then Pragma_Name (N) = Name_Interrupt_Priority\n             then\n                return N;\n \n@@ -10769,11 +10773,11 @@ package body Exp_Ch9 is\n       N := First (Private_Declarations (T));\n       while Present (N) loop\n          if Nkind (N) = N_Pragma then\n-            if  Chars (N) = P then\n+            if Pragma_Name (N) = P then\n                return N;\n \n             elsif P = Name_Priority\n-              and then Chars (N) = Name_Interrupt_Priority\n+              and then Pragma_Name (N) = Name_Interrupt_Priority\n             then\n                return N;\n \n@@ -11071,79 +11075,76 @@ package body Exp_Ch9 is\n       if Has_Entry\n         or else Has_Interrupt_Handler (Ptyp)\n         or else Has_Attach_Handler (Ptyp)\n-        or else (Ada_Version >= Ada_05\n-                   and then Present (Interface_List (Parent (Ptyp))))\n+        or else Has_Abstract_Interfaces (Protect_Rec)\n       then\n-         if Has_Entry or else not Restricted then\n-            Append_To (Args,\n-               Make_Attribute_Reference (Loc,\n-                 Prefix => Make_Identifier (Loc, Name_uInit),\n-                 Attribute_Name => Name_Address));\n-         end if;\n+         declare\n+            Pkg_Id : constant RTU_Id := Corresponding_Runtime_Package (Ptyp);\n \n-         --  Entry_Bodies parameter. This is a pointer to an array of pointers\n-         --  to the entry body procedures and barrier functions of the object.\n-         --  If the protected type has no entries this object will not exist;\n-         --  in this case, pass a null.\n+            Called_Subp : RE_Id;\n \n-         if Has_Entry then\n-            P_Arr := Entry_Bodies_Array (Ptyp);\n+         begin\n+            case Pkg_Id is\n+               when System_Tasking_Protected_Objects_Entries =>\n+                  Called_Subp := RE_Initialize_Protection_Entries;\n \n-            Append_To (Args,\n-              Make_Attribute_Reference (Loc,\n-                Prefix => New_Reference_To (P_Arr, Loc),\n-                Attribute_Name => Name_Unrestricted_Access));\n+               when System_Tasking_Protected_Objects =>\n+                  Called_Subp := RE_Initialize_Protection;\n \n-            if Abort_Allowed\n-              or else Restriction_Active (No_Entry_Queue) = False\n-              or else Number_Entries (Ptyp) > 1\n-              or else (Has_Attach_Handler (Ptyp) and then not Restricted)\n-            then\n-               --  Find index mapping function (clumsy but ok for now)\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n+                  Called_Subp := RE_Initialize_Protection_Entry;\n \n-               while Ekind (P_Arr) /= E_Function loop\n-                  Next_Entity (P_Arr);\n-               end loop;\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n \n+            if Has_Entry or else not Restricted then\n                Append_To (Args,\n-                  Make_Attribute_Reference (Loc,\n-                    Prefix =>\n-                      New_Reference_To (P_Arr, Loc),\n-                    Attribute_Name => Name_Unrestricted_Access));\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix => Make_Identifier (Loc, Name_uInit),\n+                   Attribute_Name => Name_Address));\n             end if;\n \n-         elsif not Restricted then\n-            Append_To (Args, Make_Null (Loc));\n-            Append_To (Args, Make_Null (Loc));\n-         end if;\n+            --  Entry_Bodies parameter. This is a pointer to an array of\n+            --  pointers to the entry body procedures and barrier functions of\n+            --  the object. If the protected type has no entries this object\n+            --  will not exist, in this case, pass a null.\n \n-         if Abort_Allowed\n-           or else Restriction_Active (No_Entry_Queue) = False\n-           or else Number_Entries (Ptyp) > 1\n-           or else (Has_Attach_Handler (Ptyp)\n-                     and then not Restricted)\n-         then\n-            Append_To (L,\n-              Make_Procedure_Call_Statement (Loc,\n-                Name => New_Reference_To (\n-                  RTE (RE_Initialize_Protection_Entries), Loc),\n-                Parameter_Associations => Args));\n+            if Has_Entry then\n+               P_Arr := Entry_Bodies_Array (Ptyp);\n \n-         elsif not Has_Entry and then Restricted then\n-            Append_To (L,\n-              Make_Procedure_Call_Statement (Loc,\n-                Name => New_Reference_To (\n-                  RTE (RE_Initialize_Protection), Loc),\n-                Parameter_Associations => Args));\n+               Append_To (Args,\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix => New_Reference_To (P_Arr, Loc),\n+                   Attribute_Name => Name_Unrestricted_Access));\n+\n+               if Pkg_Id = System_Tasking_Protected_Objects_Entries then\n+\n+                  --  Find index mapping function (clumsy but ok for now)\n+\n+                  while Ekind (P_Arr) /= E_Function loop\n+                     Next_Entity (P_Arr);\n+                  end loop;\n+\n+                  Append_To (Args,\n+                    Make_Attribute_Reference (Loc,\n+                      Prefix =>\n+                        New_Reference_To (P_Arr, Loc),\n+                      Attribute_Name => Name_Unrestricted_Access));\n+               end if;\n+\n+            elsif Pkg_Id = System_Tasking_Protected_Objects_Single_Entry then\n+               Append_To (Args, Make_Null (Loc));\n+\n+            elsif Pkg_Id = System_Tasking_Protected_Objects_Entries then\n+               Append_To (Args, Make_Null (Loc));\n+               Append_To (Args, Make_Null (Loc));\n+            end if;\n \n-         else\n             Append_To (L,\n               Make_Procedure_Call_Statement (Loc,\n-                Name => New_Reference_To (\n-                  RTE (RE_Initialize_Protection_Entry), Loc),\n+                Name => New_Reference_To (RTE (Called_Subp), Loc),\n                 Parameter_Associations => Args));\n-         end if;\n-\n+         end;\n       else\n          Append_To (L,\n            Make_Procedure_Call_Statement (Loc,\n@@ -11167,7 +11168,7 @@ package body Exp_Ch9 is\n          declare\n             Args  : constant List_Id := New_List;\n             Table : constant List_Id := New_List;\n-            Ritem : Node_Id := First_Rep_Item (Ptyp);\n+            Ritem : Node_Id          := First_Rep_Item (Ptyp);\n \n          begin\n             if not Restricted then\n@@ -11187,14 +11188,14 @@ package body Exp_Ch9 is\n \n             while Present (Ritem) loop\n                if Nkind (Ritem) = N_Pragma\n-                 and then Chars (Ritem) = Name_Attach_Handler\n+                 and then Pragma_Name (Ritem) = Name_Attach_Handler\n                then\n                   declare\n                      Handler : constant Node_Id :=\n                                  First (Pragma_Argument_Associations (Ritem));\n \n-                     Interrupt : constant Node_Id  := Next (Handler);\n-                     Expr      : constant  Node_Id := Expression (Interrupt);\n+                     Interrupt : constant Node_Id := Next (Handler);\n+                     Expr      : constant Node_Id := Expression (Interrupt);\n \n                   begin\n                      Append_To (Table,\n@@ -11473,9 +11474,11 @@ package body Exp_Ch9 is\n         and then (Nkind_In (Stmt, N_Null_Statement, N_Label)\n                     or else\n                       (Nkind (Stmt) = N_Pragma\n-                         and then (Chars (Stmt) = Name_Unreferenced\n+                         and then (Pragma_Name (Stmt) = Name_Unreferenced\n+                                     or else\n+                                   Pragma_Name (Stmt) = Name_Unmodified\n                                      or else\n-                                   Chars (Stmt) = Name_Warnings)))\n+                                   Pragma_Name (Stmt) = Name_Warnings)))\n       loop\n          Next (Stmt);\n       end loop;"}]}