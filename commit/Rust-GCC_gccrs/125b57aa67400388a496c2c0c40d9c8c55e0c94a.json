{"sha": "125b57aa67400388a496c2c0c40d9c8c55e0c94a", "node_id": "C_kwDOANBUbNoAKDEyNWI1N2FhNjc0MDAzODhhNDk2YzJjMGM0MGQ5YzhjNTVlMGM5NGE", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-09T22:09:51Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-09T22:09:51Z"}, "message": "analyzer: fix further overzealous state purging [PR108733]\n\nPR analyzer/108733 reports various false positives in qemu from\n-Wanalyzer-use-of-uninitialized-value with __attribute__((cleanup))\nat -O1 and above.\n\nRoot cause is that the state-purging code was failing to treat:\n   _25 = MEM[(void * *)&val];\nas a usage of \"val\", leading to it erroneously purging the\ninitialization of \"val\" along an execution path that didn't otherwise\nuse \"val\", apart from the  __attribute__((cleanup)).\n\nFixed thusly.\n\nIntegration testing on the patch show this change in the number of\ndiagnostics:\n  -Wanalyzer-use-of-uninitialized-value\n       coreutils-9.1: 18 -> 16 (-2)\n          qemu-7.2.0: 87 -> 80 (-7)\nwhere all that I investigated appear to have been false positives, hence\nan improvement.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/108733\n\t* state-purge.cc (get_candidate_for_purging): Add ADDR_EXPR\n\tand MEM_REF.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/108733\n\t* gcc.dg/analyzer/torture/uninit-pr108733.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "dfc35cfe81c72d775fcc456d2f37bf9495627eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc35cfe81c72d775fcc456d2f37bf9495627eb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/125b57aa67400388a496c2c0c40d9c8c55e0c94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125b57aa67400388a496c2c0c40d9c8c55e0c94a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125b57aa67400388a496c2c0c40d9c8c55e0c94a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125b57aa67400388a496c2c0c40d9c8c55e0c94a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10827a92f1a8c3207b327515f77845b34c1d9512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10827a92f1a8c3207b327515f77845b34c1d9512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10827a92f1a8c3207b327515f77845b34c1d9512"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "3a73146d928b1ab775934e91842b102367747dd8", "filename": "gcc/analyzer/state-purge.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125b57aa67400388a496c2c0c40d9c8c55e0c94a/gcc%2Fanalyzer%2Fstate-purge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125b57aa67400388a496c2c0c40d9c8c55e0c94a/gcc%2Fanalyzer%2Fstate-purge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstate-purge.cc?ref=125b57aa67400388a496c2c0c40d9c8c55e0c94a", "patch": "@@ -63,6 +63,8 @@ get_candidate_for_purging (tree node)\n       default:\n \treturn NULL_TREE;\n \n+      case ADDR_EXPR:\n+      case MEM_REF:\n       case COMPONENT_REF:\n \titer = TREE_OPERAND (iter, 0);\n \tcontinue;"}, {"sha": "9e684bf4f09922ca28e7e2c8cd8a1eb5662084c1", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/uninit-pr108733.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125b57aa67400388a496c2c0c40d9c8c55e0c94a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-pr108733.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125b57aa67400388a496c2c0c40d9c8c55e0c94a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-pr108733.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-pr108733.c?ref=125b57aa67400388a496c2c0c40d9c8c55e0c94a", "patch": "@@ -0,0 +1,65 @@\n+#define NULL ((void*)0)\n+\n+typedef unsigned char __uint8_t;\n+typedef __uint8_t uint8_t;\n+typedef char gchar;\n+typedef void* gpointer;\n+\n+extern void g_free(gpointer mem);\n+extern gchar* g_strdup(const gchar* str) __attribute__((__malloc__));\n+\n+static inline void\n+g_autoptr_cleanup_generic_gfree(void* p)\n+{\n+  void** pp = (void**)p;\n+  g_free(*pp); /* { dg-bogus \"use of uninitialized value\" } */\n+}\n+\n+typedef struct Object Object;\n+\n+void\n+error_setg_internal(const char* fmt,\n+\t\t    ...) __attribute__((__format__(gnu_printf, 1, 2)));\n+void\n+visit_type_str(const char* name, char** obj);\n+typedef struct SpaprMachineState SpaprMachineState;\n+\n+extern uint8_t\n+spapr_get_cap(SpaprMachineState* spapr, int cap);\n+\n+typedef struct SpaprCapPossible\n+{\n+  int num;\n+  /* [...snip...] */\n+  const char* vals[];\n+} SpaprCapPossible;\n+\n+typedef struct SpaprCapabilityInfo\n+{\n+  const char* name;\n+  /* [...snip...] */\n+  int index;\n+  /* [...snip...] */\n+  SpaprCapPossible* possible;\n+  /* [...snip...] */\n+} SpaprCapabilityInfo;\n+\n+void\n+spapr_cap_get_string(SpaprMachineState* spapr,\n+\t\t     const char* name,\n+\t\t     SpaprCapabilityInfo* cap)\n+{\n+  __attribute__((cleanup(g_autoptr_cleanup_generic_gfree))) char* val = NULL;\n+  uint8_t value = spapr_get_cap(spapr, cap->index);\n+\n+  if (value >= cap->possible->num) {\n+    error_setg_internal(\"Invalid value (%d) for cap-%s\",\n+\t\t\tvalue,\n+\t\t\tcap->name);\n+    return;\n+  }\n+\n+  val = g_strdup(cap->possible->vals[value]);\n+\n+  visit_type_str(name, &val);\n+}"}]}