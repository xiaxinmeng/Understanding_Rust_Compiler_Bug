{"sha": "d8f3474ff81b07fd2e758337957711db17eb801e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhmMzQ3NGZmODFiMDdmZDJlNzU4MzM3OTU3NzExZGIxN2ViODAxZQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-07-20T15:51:37Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-09-03T20:05:59Z"}, "message": "[PATCH, rs6000] Fix vector long long subtype (PR96139)\n\nHi,\n  This corrects an issue with the powerpc vector long long subtypes.\nAs reported by SjMunroe, when building some code with -Wall, and\nattempting to print an element of a \"long long vector\" with a\nlong long printf format string, we will report an error because\nthe vector sub-type was improperly defined as int.\n\nWhen defining a V2DI_type_node we use a TARGET_POWERPC64 ternary to\ndefine the V2DI_type_node with \"vector long\" or \"vector long long\".\nWe also need to specify the proper sub-type when we define the type.\n\nPR target/96139\n\n2020-09-03  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\ngcc/ChangeLog:\n\t* config/rs6000/rs6000-call.c (rs6000_init_builtin): Update V2DI_type_node\n\tand unsigned_V2DI_type_node definitions.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/powerpc/pr96139-a.c: New test.\n\t* gcc.target/powerpc/pr96139-b.c: New test.\n\t* gcc.target/powerpc/pr96139-c.c: New test.", "tree": {"sha": "f41e002be105566486dc9a03669db91dbbd02624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f41e002be105566486dc9a03669db91dbbd02624"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8f3474ff81b07fd2e758337957711db17eb801e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f3474ff81b07fd2e758337957711db17eb801e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8f3474ff81b07fd2e758337957711db17eb801e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f3474ff81b07fd2e758337957711db17eb801e/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba6730bd18371a3dff1e37d2c2ee27233285b597", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6730bd18371a3dff1e37d2c2ee27233285b597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6730bd18371a3dff1e37d2c2ee27233285b597"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "77c7a1149fb4ed82714a6ab9759073b1a5e168bc", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f3474ff81b07fd2e758337957711db17eb801e/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f3474ff81b07fd2e758337957711db17eb801e/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=d8f3474ff81b07fd2e758337957711db17eb801e", "patch": "@@ -12801,7 +12801,7 @@ rs6000_init_builtins (void)\n \n   V2DI_type_node = rs6000_vector_type (TARGET_POWERPC64 ? \"__vector long\"\n \t\t\t\t       : \"__vector long long\",\n-\t\t\t\t       intDI_type_node, 2);\n+\t\t\t\t       long_long_integer_type_node, 2);\n   V2DF_type_node = rs6000_vector_type (\"__vector double\", double_type_node, 2);\n   V4SI_type_node = rs6000_vector_type (\"__vector signed int\",\n \t\t\t\t       intSI_type_node, 4);\n@@ -12820,7 +12820,7 @@ rs6000_init_builtins (void)\n   unsigned_V2DI_type_node = rs6000_vector_type (TARGET_POWERPC64\n \t\t\t\t       ? \"__vector unsigned long\"\n \t\t\t\t       : \"__vector unsigned long long\",\n-\t\t\t\t       unsigned_intDI_type_node, 2);\n+\t\t\t\t       long_long_unsigned_type_node, 2);\n \n   opaque_V4SI_type_node = build_opaque_vector_type (intSI_type_node, 4);\n "}, {"sha": "b3daee4b1ae292ea5b1be502b62f54f7d0ffb7d1", "filename": "gcc/testsuite/gcc.target/powerpc/pr96139-a.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f3474ff81b07fd2e758337957711db17eb801e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96139-a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f3474ff81b07fd2e758337957711db17eb801e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96139-a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96139-a.c?ref=d8f3474ff81b07fd2e758337957711db17eb801e", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall -m32\" } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+\n+#include <stdio.h>\n+#include <altivec.h>\n+\n+void\n+try_printing_longlong_a (\n+                        __vector signed char cval,\n+                        __vector signed int ival,\n+                        __vector signed long long int llval,\n+                        int x, int y, int z)\n+{\n+  printf (\" %016llx \\n\", llval[x]);\n+  printf (\" %016x \\n\", ival[z]);\n+  printf (\" %c \\n\", cval[y]);\n+}\n+\n+void\n+try_printing_unsigned_longlong_a (\n+                        __vector unsigned char cval,\n+                        __vector unsigned int ival,\n+                        __vector unsigned long long int llval,\n+                        int x, int y, int z)\n+{\n+  printf (\" %016llx \\n\", llval[x]);\n+  printf (\" %016x \\n\", ival[z]);\n+  printf (\" %c \\n\", cval[y]);\n+}\n+"}, {"sha": "19c1110d0b3eae31436c85e7b8aeccdbaedf9df0", "filename": "gcc/testsuite/gcc.target/powerpc/pr96139-b.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f3474ff81b07fd2e758337957711db17eb801e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96139-b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f3474ff81b07fd2e758337957711db17eb801e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96139-b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96139-b.c?ref=d8f3474ff81b07fd2e758337957711db17eb801e", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall -m64\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+\n+#include <stdio.h>\n+#include <altivec.h>\n+\n+void\n+try_printing_longlong_a (\n+                        __vector signed char cval,\n+                        __vector signed int ival,\n+                        __vector signed long long int llval,\n+                        int x, int y, int z)\n+{\n+  printf (\" %016llx \\n\", llval[x]);\n+  printf (\" %016x \\n\", ival[z]);\n+  printf (\" %c \\n\", cval[y]);\n+}\n+\n+\n+void\n+try_printing_unsigned_longlong_a (\n+                        __vector unsigned char cval,\n+                        __vector unsigned int ival,\n+                        __vector unsigned long long int llval,\n+                        int x, int y, int z)\n+{\n+  printf (\" %016llx \\n\", llval[x]);\n+  printf (\" %016x \\n\", ival[z]);\n+  printf (\" %c \\n\", cval[y]);\n+}"}, {"sha": "2464b8da4f71ff35288c9d19938474e2f4883de6", "filename": "gcc/testsuite/gcc.target/powerpc/pr96139-c.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f3474ff81b07fd2e758337957711db17eb801e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96139-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f3474ff81b07fd2e758337957711db17eb801e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96139-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96139-c.c?ref=d8f3474ff81b07fd2e758337957711db17eb801e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wall\" } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+\n+/*\n+ * Based on test created by sjmunroe for pr96139\n+ */\n+\n+#include <stdio.h>\n+#include <altivec.h>\n+\n+volatile vector long long llfoo;\n+\n+void\n+print_v2xint64_b () {\n+  printf (\" %016llx \\n\", llfoo[0]);\n+  printf (\" %016llx \\n\", llfoo[1]);\n+}\n+\n+int \n+main() {\n+llfoo[0]=12345678;\n+llfoo[1]=34567890;\n+print_v2xint64_b();\n+return 0;\n+}"}]}