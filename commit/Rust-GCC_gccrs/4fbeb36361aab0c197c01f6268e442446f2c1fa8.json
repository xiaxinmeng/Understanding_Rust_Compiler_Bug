{"sha": "4fbeb36361aab0c197c01f6268e442446f2c1fa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZiZWIzNjM2MWFhYjBjMTk3YzAxZjYyNjhlNDQyNDQ2ZjJjMWZhOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:21:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:21:37Z"}, "message": "[06/46] Add vec_info::add_stmt\n\nThis patch adds a vec_info function for allocating and setting\nstmt_vec_infos.  It's the start of a long process of removing\nthe global stmt_vec_info array.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (stmt_vec_info): Move typedef earlier in file.\n\t(vec_info::add_stmt): Declare.\n\t* tree-vectorizer.c (vec_info::add_stmt): New function.\n\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Use it.\n\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Likewise.\n\t(vect_create_epilog_for_reduction, vectorizable_reduction): Likewise.\n\t(vectorizable_induction): Likewise.\n\t* tree-vect-slp.c (_bb_vec_info::_bb_vec_info): Likewise.\n\t* tree-vect-stmts.c (vect_finish_stmt_generation_1): Likewise.\n\t(vectorizable_simd_clone_call, vectorizable_store): Likewise.\n\t(vectorizable_load): Likewise.\n\t* tree-vect-patterns.c (vect_init_pattern_stmt): Likewise.\n\t(vect_recog_bool_pattern, vect_recog_mask_conversion_pattern)\n\t(vect_recog_gather_scatter_pattern): Likewise.\n\t(append_pattern_def_seq): Likewise.  Remove a check that is\n\tperformed by add_stmt itself.\n\nFrom-SVN: r263121", "tree": {"sha": "9fcd870099d9579c265eb76a06868f24305a38cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fcd870099d9579c265eb76a06868f24305a38cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fbeb36361aab0c197c01f6268e442446f2c1fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbeb36361aab0c197c01f6268e442446f2c1fa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbeb36361aab0c197c01f6268e442446f2c1fa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbeb36361aab0c197c01f6268e442446f2c1fa8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79cc8302f73a56dd1e84e87a26d35ed7e5bfea53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cc8302f73a56dd1e84e87a26d35ed7e5bfea53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79cc8302f73a56dd1e84e87a26d35ed7e5bfea53"}], "stats": {"total": 143, "additions": 74, "deletions": 69}, "files": [{"sha": "95cddbb6b4a956d81c1f9d8167cc5a6af67b3b20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fbeb36361aab0c197c01f6268e442446f2c1fa8", "patch": "@@ -1,3 +1,22 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (stmt_vec_info): Move typedef earlier in file.\n+\t(vec_info::add_stmt): Declare.\n+\t* tree-vectorizer.c (vec_info::add_stmt): New function.\n+\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Use it.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Likewise.\n+\t(vect_create_epilog_for_reduction, vectorizable_reduction): Likewise.\n+\t(vectorizable_induction): Likewise.\n+\t* tree-vect-slp.c (_bb_vec_info::_bb_vec_info): Likewise.\n+\t* tree-vect-stmts.c (vect_finish_stmt_generation_1): Likewise.\n+\t(vectorizable_simd_clone_call, vectorizable_store): Likewise.\n+\t(vectorizable_load): Likewise.\n+\t* tree-vect-patterns.c (vect_init_pattern_stmt): Likewise.\n+\t(vect_recog_bool_pattern, vect_recog_mask_conversion_pattern)\n+\t(vect_recog_gather_scatter_pattern): Likewise.\n+\t(append_pattern_def_seq): Likewise.  Remove a check that is\n+\tperformed by add_stmt itself.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-loop.c (vectorizable_reduction): Fix an instance in"}, {"sha": "65b49bfc2a64dac3928104620adafd771afb5dd3", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=4fbeb36361aab0c197c01f6268e442446f2c1fa8", "patch": "@@ -4850,7 +4850,7 @@ vect_create_data_ref_ptr (gimple *stmt, tree aggr_type, struct loop *at_loop,\n \t\t aggr_ptr, loop, &incr_gsi, insert_after,\n \t\t &indx_before_incr, &indx_after_incr);\n       incr = gsi_stmt (incr_gsi);\n-      set_vinfo_for_stmt (incr, new_stmt_vec_info (incr, loop_vinfo));\n+      loop_vinfo->add_stmt (incr);\n \n       /* Copy the points-to information if it exists. */\n       if (DR_PTR_INFO (dr))\n@@ -4880,7 +4880,7 @@ vect_create_data_ref_ptr (gimple *stmt, tree aggr_type, struct loop *at_loop,\n \t\t containing_loop, &incr_gsi, insert_after, &indx_before_incr,\n \t\t &indx_after_incr);\n       incr = gsi_stmt (incr_gsi);\n-      set_vinfo_for_stmt (incr, new_stmt_vec_info (incr, loop_vinfo));\n+      loop_vinfo->add_stmt (incr);\n \n       /* Copy the points-to information if it exists. */\n       if (DR_PTR_INFO (dr))"}, {"sha": "c011011dcde9f4a0db8fdbeafc74a09ec76d1a5a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=4fbeb36361aab0c197c01f6268e442446f2c1fa8", "patch": "@@ -845,14 +845,14 @@ _loop_vec_info::_loop_vec_info (struct loop *loop_in, vec_info_shared *shared)\n \t{\n \t  gimple *phi = gsi_stmt (si);\n \t  gimple_set_uid (phi, 0);\n-\t  set_vinfo_for_stmt (phi, new_stmt_vec_info (phi, this));\n+\t  add_stmt (phi);\n \t}\n \n       for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n \t{\n \t  gimple *stmt = gsi_stmt (si);\n \t  gimple_set_uid (stmt, 0);\n-\t  set_vinfo_for_stmt (stmt, new_stmt_vec_info (stmt, this));\n+\t  add_stmt (stmt);\n \t}\n     }\n   free (body);\n@@ -4665,8 +4665,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n       /* Create a vector phi node.  */\n       tree new_phi_tree = make_ssa_name (cr_index_vector_type);\n       new_phi = create_phi_node (new_phi_tree, loop->header);\n-      set_vinfo_for_stmt (new_phi,\n-\t\t\t  new_stmt_vec_info (new_phi, loop_vinfo));\n+      loop_vinfo->add_stmt (new_phi);\n       add_phi_arg (as_a <gphi *> (new_phi), vec_zero,\n \t\t   loop_preheader_edge (loop), UNKNOWN_LOCATION);\n \n@@ -4691,10 +4690,8 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n       gimple *index_condition = gimple_build_assign (induction_index,\n \t\t\t\t\t\t     index_cond_expr);\n       gsi_insert_before (&incr_gsi, index_condition, GSI_SAME_STMT);\n-      stmt_vec_info index_vec_info = new_stmt_vec_info (index_condition,\n-\t\t\t\t\t\t\tloop_vinfo);\n+      stmt_vec_info index_vec_info = loop_vinfo->add_stmt (index_condition);\n       STMT_VINFO_VECTYPE (index_vec_info) = cr_index_vector_type;\n-      set_vinfo_for_stmt (index_condition, index_vec_info);\n \n       /* Update the phi with the vec cond.  */\n       add_phi_arg (as_a <gphi *> (new_phi), induction_index,\n@@ -4741,7 +4738,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n         {\n \t  tree new_def = copy_ssa_name (def);\n           phi = create_phi_node (new_def, exit_bb);\n-          set_vinfo_for_stmt (phi, new_stmt_vec_info (phi, loop_vinfo));\n+\t  stmt_vec_info phi_info = loop_vinfo->add_stmt (phi);\n           if (j == 0)\n             new_phis.quick_push (phi);\n           else\n@@ -4751,7 +4748,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n \t    }\n \n           SET_PHI_ARG_DEF (phi, single_exit (loop)->dest_idx, def);\n-          prev_phi_info = vinfo_for_stmt (phi);\n+\t  prev_phi_info = phi_info;\n         }\n     }\n \n@@ -4768,22 +4765,19 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n \t  gphi *outer_phi = create_phi_node (new_result, exit_bb);\n \t  SET_PHI_ARG_DEF (outer_phi, single_exit (loop)->dest_idx,\n \t\t\t   PHI_RESULT (phi));\n-\t  set_vinfo_for_stmt (outer_phi, new_stmt_vec_info (outer_phi,\n-\t\t\t\t\t\t\t    loop_vinfo));\n+\t  prev_phi_info = loop_vinfo->add_stmt (outer_phi);\n \t  inner_phis.quick_push (phi);\n \t  new_phis[i] = outer_phi;\n-\t  prev_phi_info = vinfo_for_stmt (outer_phi);\n           while (STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi)))\n             {\n \t      phi = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi));\n \t      new_result = copy_ssa_name (PHI_RESULT (phi));\n \t      outer_phi = create_phi_node (new_result, exit_bb);\n \t      SET_PHI_ARG_DEF (outer_phi, single_exit (loop)->dest_idx,\n \t\t\t       PHI_RESULT (phi));\n-\t      set_vinfo_for_stmt (outer_phi, new_stmt_vec_info (outer_phi,\n-\t\t\t\t\t\t\t\tloop_vinfo));\n+\t      stmt_vec_info outer_phi_info = loop_vinfo->add_stmt (outer_phi);\n \t      STMT_VINFO_RELATED_STMT (prev_phi_info) = outer_phi;\n-\t      prev_phi_info = vinfo_for_stmt (outer_phi);\n+\t      prev_phi_info = outer_phi_info;\n \t    }\n \t}\n     }\n@@ -5553,10 +5547,9 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n       gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n       if (nested_in_vect_loop)\n         {\n-          set_vinfo_for_stmt (epilog_stmt,\n-                              new_stmt_vec_info (epilog_stmt, loop_vinfo));\n-          STMT_VINFO_RELATED_STMT (vinfo_for_stmt (epilog_stmt)) =\n-                STMT_VINFO_RELATED_STMT (vinfo_for_stmt (new_phi));\n+\t  stmt_vec_info epilog_stmt_info = loop_vinfo->add_stmt (epilog_stmt);\n+\t  STMT_VINFO_RELATED_STMT (epilog_stmt_info)\n+\t    = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (new_phi));\n \n           if (!double_reduc)\n             scalar_results.quick_push (new_temp);\n@@ -5697,7 +5690,6 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n               FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, orig_name)\n                 {\n                   stmt_vec_info use_stmt_vinfo;\n-                  stmt_vec_info new_phi_vinfo;\n                   tree vect_phi_init, preheader_arg, vect_phi_res;\n                   basic_block bb = gimple_bb (use_stmt);\n \t\t  gimple *use;\n@@ -5724,9 +5716,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n \n                   /* Create vector phi node.  */\n                   vect_phi = create_phi_node (vec_initial_def, bb);\n-                  new_phi_vinfo = new_stmt_vec_info (vect_phi,\n-                                    loop_vec_info_for_loop (outer_loop));\n-                  set_vinfo_for_stmt (vect_phi, new_phi_vinfo);\n+\t\t  loop_vec_info_for_loop (outer_loop)->add_stmt (vect_phi);\n \n                   /* Create vs0 - initial def of the double reduction phi.  */\n                   preheader_arg = PHI_ARG_DEF_FROM_EDGE (use_stmt,\n@@ -6249,8 +6239,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t  /* Create the reduction-phi that defines the reduction\n \t\t     operand.  */\n \t\t  gimple *new_phi = create_phi_node (vec_dest, loop->header);\n-\t\t  set_vinfo_for_stmt (new_phi,\n-\t\t\t\t      new_stmt_vec_info (new_phi, loop_vinfo));\n+\t\t  stmt_vec_info new_phi_info = loop_vinfo->add_stmt (new_phi);\n \n \t\t  if (slp_node)\n \t\t    SLP_TREE_VEC_STMTS (slp_node).quick_push (new_phi);\n@@ -6260,7 +6249,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t\tSTMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt = new_phi;\n \t\t      else\n \t\t\tSTMT_VINFO_RELATED_STMT (prev_phi_info) = new_phi;\n-\t\t      prev_phi_info = vinfo_for_stmt (new_phi);\n+\t\t      prev_phi_info = new_phi_info;\n \t\t    }\n \t\t}\n \t    }\n@@ -7537,15 +7526,14 @@ vectorizable_induction (gimple *phi,\n \t  /* Create the induction-phi that defines the induction-operand.  */\n \t  vec_dest = vect_get_new_vect_var (vectype, vect_simple_var, \"vec_iv_\");\n \t  induction_phi = create_phi_node (vec_dest, iv_loop->header);\n-\t  set_vinfo_for_stmt (induction_phi,\n-\t\t\t      new_stmt_vec_info (induction_phi, loop_vinfo));\n+\t  loop_vinfo->add_stmt (induction_phi);\n \t  induc_def = PHI_RESULT (induction_phi);\n \n \t  /* Create the iv update inside the loop  */\n \t  vec_def = make_ssa_name (vec_dest);\n \t  new_stmt = gimple_build_assign (vec_def, PLUS_EXPR, induc_def, vec_step);\n \t  gsi_insert_before (&si, new_stmt, GSI_SAME_STMT);\n-\t  set_vinfo_for_stmt (new_stmt, new_stmt_vec_info (new_stmt, loop_vinfo));\n+\t  loop_vinfo->add_stmt (new_stmt);\n \n \t  /* Set the arguments of the phi node:  */\n \t  add_phi_arg (induction_phi, vec_init, pe, UNKNOWN_LOCATION);\n@@ -7593,8 +7581,7 @@ vectorizable_induction (gimple *phi,\n \t\t  gimple_stmt_iterator tgsi = gsi_for_stmt (iv);\n \t\t  gsi_insert_after (&tgsi, new_stmt, GSI_CONTINUE_LINKING);\n \t\t}\n-\t      set_vinfo_for_stmt (new_stmt,\n-\t\t\t\t  new_stmt_vec_info (new_stmt, loop_vinfo));\n+\t      loop_vinfo->add_stmt (new_stmt);\n \t      SLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n \t    }\n \t}\n@@ -7623,8 +7610,7 @@ vectorizable_induction (gimple *phi,\n \t  new_bb = gsi_insert_on_edge_immediate (loop_preheader_edge (iv_loop),\n \t\t\t\t\t\t new_stmt);\n \t  gcc_assert (!new_bb);\n-\t  set_vinfo_for_stmt (new_stmt,\n-\t\t\t      new_stmt_vec_info (new_stmt, loop_vinfo));\n+\t  loop_vinfo->add_stmt (new_stmt);\n \t}\n     }\n   else\n@@ -7728,15 +7714,14 @@ vectorizable_induction (gimple *phi,\n   /* Create the induction-phi that defines the induction-operand.  */\n   vec_dest = vect_get_new_vect_var (vectype, vect_simple_var, \"vec_iv_\");\n   induction_phi = create_phi_node (vec_dest, iv_loop->header);\n-  set_vinfo_for_stmt (induction_phi,\n-\t\t      new_stmt_vec_info (induction_phi, loop_vinfo));\n+  stmt_vec_info induction_phi_info = loop_vinfo->add_stmt (induction_phi);\n   induc_def = PHI_RESULT (induction_phi);\n \n   /* Create the iv update inside the loop  */\n   vec_def = make_ssa_name (vec_dest);\n   new_stmt = gimple_build_assign (vec_def, PLUS_EXPR, induc_def, vec_step);\n   gsi_insert_before (&si, new_stmt, GSI_SAME_STMT);\n-  set_vinfo_for_stmt (new_stmt, new_stmt_vec_info (new_stmt, loop_vinfo));\n+  stmt_vec_info new_stmt_info = loop_vinfo->add_stmt (new_stmt);\n \n   /* Set the arguments of the phi node:  */\n   add_phi_arg (induction_phi, vec_init, pe, UNKNOWN_LOCATION);\n@@ -7781,7 +7766,7 @@ vectorizable_induction (gimple *phi,\n       vec_step = vect_init_vector (phi, new_vec, vectype, NULL);\n \n       vec_def = induc_def;\n-      prev_stmt_vinfo = vinfo_for_stmt (induction_phi);\n+      prev_stmt_vinfo = induction_phi_info;\n       for (i = 1; i < ncopies; i++)\n \t{\n \t  /* vec_i = vec_prev + vec_step  */\n@@ -7791,10 +7776,9 @@ vectorizable_induction (gimple *phi,\n \t  gimple_assign_set_lhs (new_stmt, vec_def);\n  \n \t  gsi_insert_before (&si, new_stmt, GSI_SAME_STMT);\n-\t  set_vinfo_for_stmt (new_stmt,\n-\t\t\t      new_stmt_vec_info (new_stmt, loop_vinfo));\n+\t  new_stmt_info = loop_vinfo->add_stmt (new_stmt);\n \t  STMT_VINFO_RELATED_STMT (prev_stmt_vinfo) = new_stmt;\n-\t  prev_stmt_vinfo = vinfo_for_stmt (new_stmt);\n+\t  prev_stmt_vinfo = new_stmt_info;\n \t}\n     }\n "}, {"sha": "1a431e7f15ea06ad7f59a1c15fd8f7a17dae99c5", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=4fbeb36361aab0c197c01f6268e442446f2c1fa8", "patch": "@@ -103,11 +103,7 @@ vect_init_pattern_stmt (gimple *pattern_stmt, stmt_vec_info orig_stmt_info,\n {\n   stmt_vec_info pattern_stmt_info = vinfo_for_stmt (pattern_stmt);\n   if (pattern_stmt_info == NULL)\n-    {\n-      pattern_stmt_info = new_stmt_vec_info (pattern_stmt,\n-\t\t\t\t\t     orig_stmt_info->vinfo);\n-      set_vinfo_for_stmt (pattern_stmt, pattern_stmt_info);\n-    }\n+    pattern_stmt_info = orig_stmt_info->vinfo->add_stmt (pattern_stmt);\n   gimple_set_bb (pattern_stmt, gimple_bb (orig_stmt_info->stmt));\n \n   STMT_VINFO_RELATED_STMT (pattern_stmt_info) = orig_stmt_info->stmt;\n@@ -141,9 +137,7 @@ append_pattern_def_seq (stmt_vec_info stmt_info, gimple *new_stmt,\n   vec_info *vinfo = stmt_info->vinfo;\n   if (vectype)\n     {\n-      gcc_assert (!vinfo_for_stmt (new_stmt));\n-      stmt_vec_info new_stmt_info = new_stmt_vec_info (new_stmt, vinfo);\n-      set_vinfo_for_stmt (new_stmt, new_stmt_info);\n+      stmt_vec_info new_stmt_info = vinfo->add_stmt (new_stmt);\n       STMT_VINFO_VECTYPE (new_stmt_info) = vectype;\n     }\n   gimple_seq_add_stmt_without_update (&STMT_VINFO_PATTERN_DEF_SEQ (stmt_info),\n@@ -3832,8 +3826,7 @@ vect_recog_bool_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n \t  rhs = rhs2;\n \t}\n       pattern_stmt = gimple_build_assign (lhs, SSA_NAME, rhs);\n-      pattern_stmt_info = new_stmt_vec_info (pattern_stmt, vinfo);\n-      set_vinfo_for_stmt (pattern_stmt, pattern_stmt_info);\n+      pattern_stmt_info = vinfo->add_stmt (pattern_stmt);\n       STMT_VINFO_DATA_REF (pattern_stmt_info)\n \t= STMT_VINFO_DATA_REF (stmt_vinfo);\n       STMT_VINFO_DR_WRT_VEC_LOOP (pattern_stmt_info)\n@@ -3958,8 +3951,7 @@ vect_recog_mask_conversion_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n \t}\n       gimple_call_set_nothrow (pattern_stmt, true);\n \n-      pattern_stmt_info = new_stmt_vec_info (pattern_stmt, vinfo);\n-      set_vinfo_for_stmt (pattern_stmt, pattern_stmt_info);\n+      pattern_stmt_info = vinfo->add_stmt (pattern_stmt);\n       if (STMT_VINFO_DATA_REF (stmt_vinfo))\n \t{\n \t  STMT_VINFO_DATA_REF (pattern_stmt_info)\n@@ -4290,9 +4282,7 @@ vect_recog_gather_scatter_pattern (stmt_vec_info stmt_info, tree *type_out)\n \n   /* Copy across relevant vectorization info and associate DR with the\n      new pattern statement instead of the original statement.  */\n-  stmt_vec_info pattern_stmt_info = new_stmt_vec_info (pattern_stmt,\n-\t\t\t\t\t\t       loop_vinfo);\n-  set_vinfo_for_stmt (pattern_stmt, pattern_stmt_info);\n+  stmt_vec_info pattern_stmt_info = loop_vinfo->add_stmt (pattern_stmt);\n   STMT_VINFO_DATA_REF (pattern_stmt_info) = dr;\n   STMT_VINFO_DR_WRT_VEC_LOOP (pattern_stmt_info)\n     = STMT_VINFO_DR_WRT_VEC_LOOP (stmt_info);"}, {"sha": "fbce211d117eb58e7e388c558ef6104e5a6b6275", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=4fbeb36361aab0c197c01f6268e442446f2c1fa8", "patch": "@@ -2494,7 +2494,7 @@ _bb_vec_info::_bb_vec_info (gimple_stmt_iterator region_begin_in,\n     {\n       gimple *stmt = gsi_stmt (gsi);\n       gimple_set_uid (stmt, 0);\n-      set_vinfo_for_stmt (stmt, new_stmt_vec_info (stmt, this));\n+      add_stmt (stmt);\n     }\n \n   bb->aux = this;"}, {"sha": "21de238dc592a95d37bc9ddc44707eaabe90e9b6", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=4fbeb36361aab0c197c01f6268e442446f2c1fa8", "patch": "@@ -1744,7 +1744,7 @@ vect_finish_stmt_generation_1 (gimple *stmt, gimple *vec_stmt)\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   vec_info *vinfo = stmt_info->vinfo;\n \n-  set_vinfo_for_stmt (vec_stmt, new_stmt_vec_info (vec_stmt, vinfo));\n+  vinfo->add_stmt (vec_stmt);\n \n   if (dump_enabled_p ())\n     {\n@@ -4183,8 +4183,7 @@ vectorizable_simd_clone_call (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t    }\n \t\t  tree phi_res = copy_ssa_name (op);\n \t\t  gphi *new_phi = create_phi_node (phi_res, loop->header);\n-\t\t  set_vinfo_for_stmt (new_phi,\n-\t\t\t\t      new_stmt_vec_info (new_phi, loop_vinfo));\n+\t\t  loop_vinfo->add_stmt (new_phi);\n \t\t  add_phi_arg (new_phi, arginfo[i].op,\n \t\t\t       loop_preheader_edge (loop), UNKNOWN_LOCATION);\n \t\t  enum tree_code code\n@@ -4201,8 +4200,7 @@ vectorizable_simd_clone_call (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t    = gimple_build_assign (phi_arg, code, phi_res, tcst);\n \t\t  gimple_stmt_iterator si = gsi_after_labels (loop->header);\n \t\t  gsi_insert_after (&si, new_stmt, GSI_NEW_STMT);\n-\t\t  set_vinfo_for_stmt (new_stmt,\n-\t\t\t\t      new_stmt_vec_info (new_stmt, loop_vinfo));\n+\t\t  loop_vinfo->add_stmt (new_stmt);\n \t\t  add_phi_arg (new_phi, phi_arg, loop_latch_edge (loop),\n \t\t\t       UNKNOWN_LOCATION);\n \t\t  arginfo[i].op = phi_res;\n@@ -6731,7 +6729,7 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t\t loop, &incr_gsi, insert_after,\n \t\t &offvar, NULL);\n       incr = gsi_stmt (incr_gsi);\n-      set_vinfo_for_stmt (incr, new_stmt_vec_info (incr, loop_vinfo));\n+      loop_vinfo->add_stmt (incr);\n \n       stride_step = cse_and_gimplify_to_preheader (loop_vinfo, stride_step);\n \n@@ -7729,7 +7727,7 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t\t loop, &incr_gsi, insert_after,\n \t\t &offvar, NULL);\n       incr = gsi_stmt (incr_gsi);\n-      set_vinfo_for_stmt (incr, new_stmt_vec_info (incr, loop_vinfo));\n+      loop_vinfo->add_stmt (incr);\n \n       stride_step = cse_and_gimplify_to_preheader (loop_vinfo, stride_step);\n \n@@ -8488,8 +8486,7 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t\t\t\t\t        (gimple_assign_rhs1 (stmt))));\n \t\t      new_temp = vect_init_vector (stmt, tem, vectype, NULL);\n \t\t      new_stmt = SSA_NAME_DEF_STMT (new_temp);\n-\t\t      set_vinfo_for_stmt (new_stmt,\n-\t\t\t\t\t  new_stmt_vec_info (new_stmt, vinfo));\n+\t\t      vinfo->add_stmt (new_stmt);\n \t\t    }\n \t\t  else\n \t\t    {"}, {"sha": "01bb372df763a6b493a0d3df731552cccde66052", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=4fbeb36361aab0c197c01f6268e442446f2c1fa8", "patch": "@@ -507,6 +507,17 @@ vec_info_shared::check_datarefs ()\n       gcc_unreachable ();\n }\n \n+/* Record that STMT belongs to the vectorizable region.  Create and return\n+   an associated stmt_vec_info.  */\n+\n+stmt_vec_info\n+vec_info::add_stmt (gimple *stmt)\n+{\n+  stmt_vec_info res = new_stmt_vec_info (stmt, this);\n+  set_vinfo_for_stmt (stmt, res);\n+  return res;\n+}\n+\n /* A helper function to free scev and LOOP niter information, as well as\n    clear loop constraint LOOP_C_FINITE.  */\n "}, {"sha": "67494179e2bc6fe7d3badc23fca192cfb999ec64", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbeb36361aab0c197c01f6268e442446f2c1fa8/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=4fbeb36361aab0c197c01f6268e442446f2c1fa8", "patch": "@@ -25,6 +25,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-hash-traits.h\"\n #include \"target.h\"\n \n+typedef struct _stmt_vec_info *stmt_vec_info;\n+\n /* Used for naming of new temporaries.  */\n enum vect_var_kind {\n   vect_simple_var,\n@@ -215,6 +217,8 @@ struct vec_info {\n   vec_info (vec_kind, void *, vec_info_shared *);\n   ~vec_info ();\n \n+  stmt_vec_info add_stmt (gimple *);\n+\n   /* The type of vectorization.  */\n   vec_kind kind;\n \n@@ -761,7 +765,7 @@ struct dataref_aux {\n \n typedef struct data_reference *dr_p;\n \n-typedef struct _stmt_vec_info {\n+struct _stmt_vec_info {\n \n   enum stmt_vec_info_type type;\n \n@@ -914,7 +918,7 @@ typedef struct _stmt_vec_info {\n      and OPERATION_BITS without changing the result.  */\n   unsigned int operation_precision;\n   signop operation_sign;\n-} *stmt_vec_info;\n+};\n \n /* Information about a gather/scatter call.  */\n struct gather_scatter_info {"}]}