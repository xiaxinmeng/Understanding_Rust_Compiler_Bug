{"sha": "31043f6cfc3612e0278f2dea1a8e3ce050b72798", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEwNDNmNmNmYzM2MTJlMDI3OGYyZGVhMWE4ZTNjZTA1MGI3Mjc5OA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-09-17T18:58:01Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-09-17T18:58:01Z"}, "message": "re PR fortran/15586 (gfortran should support i18n in its compiler messages)\n\n\tPR fortran/15586\n\n\t* arith.c (gfc_arith_error): Add translation support\n\tfor error messages.\n\t* array.c (gfc_match_array_ref): Likewise.\n\t(gfc_match_array_spec): Likewise.\n\t* check.c (must_be): Add msgid convention to third argument.\n\t(same_type_check): Add translation support for error message.\n\t(rank_check): Likewise.\n\t(kind_value_check): Likewise.\n\t(gfc_check_associated): Correct typo.\n\t(gfc_check_reshape): Add translation support for error message.\n\t(gfc_check_spread): Likewise.\n\t* error.c (error_printf): Add nocmsgid convention to argument.\n\t(gfc_warning, gfc_notify_std, gfc_warning_now, gfc_warning_check)\n\t(gfc_error, gfc_error_now): Likewise.\n\t(gfc_status): Add cmsgid convention to argument.\n\t* expr.c (gfc_extract_int): Add translation support\n        for error messages.\n\t(gfc_check_conformance): Add msgid convention to argument.\n\t(gfc_check_pointer_assign): Correct tabbing.\n\t* gfortran.h: Include intl.h header. Remove prototype\n\tfor gfc_article.\n\t* gfortranspec.c: Include intl.h header.\n\t(lang_specific_driver): Add translation support for --version.\n\t* io.c (check_format): Add translation support for\n\terror message.\n\t(format_item_1): Likewise.\n\t(data_desc): Likewise.\n\t* matchexp.c: Likewise.\n\t* misc.c (gfc_article): Remove function.\n\t* module.c (bad_module): Use msgid convention. Add\n\ttranslation support for error messages.\n\t(require_atom): Add translation support for error messages.\n\t* parse.c (gfc_ascii_statement): Likewise.\n\t(gfc_state_name): Likewise.\n\t* primary.c (match_boz_constant): Reorganise error\n\tmessages for translations.\n\t* resolve.c (resolve_entries): Likewise.\n\t(resolve_operator): Add translation support for error messages.\n\t(gfc_resolve_expr): Use msgid convention. Reorganise error\n        messages for translations.\n\t(resolve_symbol): Add translation support for error messages.\n\t* symbol.c (gfc_add_procedure): Remove use of gfc_article function.\n\t* trans-const.c (gfc_build_string_const): Use msgid convention.\n\n\t* exgettext: Add a new nocmsgid convention for arguments\n\tthat should be marked as no-c-format.\n\t* gcc.pot: Regenerate.\n\nFrom-SVN: r104372", "tree": {"sha": "359a816dbf10dd679ca548628aef0b485522372a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/359a816dbf10dd679ca548628aef0b485522372a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31043f6cfc3612e0278f2dea1a8e3ce050b72798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31043f6cfc3612e0278f2dea1a8e3ce050b72798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31043f6cfc3612e0278f2dea1a8e3ce050b72798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31043f6cfc3612e0278f2dea1a8e3ce050b72798/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "652b0932d7753aec43306dee62e5005492a6cf3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652b0932d7753aec43306dee62e5005492a6cf3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/652b0932d7753aec43306dee62e5005492a6cf3c"}], "stats": {"total": 24580, "additions": 14288, "deletions": 10292}, "files": [{"sha": "69168e58455259267504d4729ae69b6ee793e586", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -1,3 +1,48 @@\n+2005-09-17  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/15586\n+\t* arith.c (gfc_arith_error): Add translation support for error\n+\tmessages.\n+\t* array.c (gfc_match_array_ref): Likewise.\n+\t(gfc_match_array_spec): Likewise.\n+\t* check.c (must_be): Add msgid convention to third argument.\n+\t(same_type_check): Add translation support for error message.\n+\t(rank_check): Likewise.\n+\t(kind_value_check): Likewise.\n+\t(gfc_check_associated): Correct typo.\n+\t(gfc_check_reshape): Add translation support for error message.\n+\t(gfc_check_spread): Likewise.\n+\t* error.c (error_printf): Add nocmsgid convention to argument.\n+\t(gfc_warning, gfc_notify_std, gfc_warning_now, gfc_warning_check)\n+\t(gfc_error, gfc_error_now): Likewise.\n+\t(gfc_status): Add cmsgid convention to argument.\n+\t* expr.c (gfc_extract_int): Add translation support for error\n+\tmessages.\n+\t(gfc_check_conformance): Add msgid convention to argument.\n+\t(gfc_check_pointer_assign): Correct tabbing.\n+\t* gfortran.h: Include intl.h header. Remove prototype for gfc_article.\n+\t* gfortranspec.c: Include intl.h header.\n+\t(lang_specific_driver): Add translation support for --version.\n+\t* io.c (check_format): Add translation support for error message.\n+\t(format_item_1): Likewise.\n+\t(data_desc): Likewise.\n+\t* matchexp.c: Likewise.\n+\t* misc.c (gfc_article): Remove function.\n+\t* module.c (bad_module): Use msgid convention. Add translation support\n+\tfor error messages.\n+\t(require_atom): Add translation support for error messages.\n+\t* parse.c (gfc_ascii_statement): Likewise.\n+\t(gfc_state_name): Likewise.\n+\t* primary.c (match_boz_constant): Reorganise error messages for\n+\ttranslations.\n+\t* resolve.c (resolve_entries): Likewise.\n+\t(resolve_operator): Add translation support for error messages.\n+\t(gfc_resolve_expr): Use msgid convention. Reorganise error messages\n+\tfor translations.\n+\t(resolve_symbol): Add translation support for error messages.\n+\t* symbol.c (gfc_add_procedure): Remove use of gfc_article function.\n+\t* trans-const.c (gfc_build_string_const): Use msgid convention.\n+\n 2005-09-16  Paul Brook  <paul@codesourcery.com>\n \n \tPR fortran/23906"}, {"sha": "ccc7ae17222d6b69a96514677a054ca4fc8c9c45", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -138,25 +138,25 @@ gfc_arith_error (arith code)\n   switch (code)\n     {\n     case ARITH_OK:\n-      p = \"Arithmetic OK\";\n+      p = _(\"Arithmetic OK\");\n       break;\n     case ARITH_OVERFLOW:\n-      p = \"Arithmetic overflow\";\n+      p = _(\"Arithmetic overflow\");\n       break;\n     case ARITH_UNDERFLOW:\n-      p = \"Arithmetic underflow\";\n+      p = _(\"Arithmetic underflow\");\n       break;\n     case ARITH_NAN:\n-      p = \"Arithmetic NaN\";\n+      p = _(\"Arithmetic NaN\");\n       break;\n     case ARITH_DIV0:\n-      p = \"Division by zero\";\n+      p = _(\"Division by zero\");\n       break;\n     case ARITH_INCOMMENSURATE:\n-      p = \"Array operands are incommensurate\";\n+      p = _(\"Array operands are incommensurate\");\n       break;\n     case ARITH_ASYMMETRIC:\n-      p = \"Integer outside symmetric range implied by Standard Fortran\";\n+      p = _(\"Integer outside symmetric range implied by Standard Fortran\");\n       break;\n     default:\n       gfc_internal_error (\"gfc_arith_error(): Bad error code\");"}, {"sha": "9491406d97ec548298d0ded02b44845355062422", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -169,8 +169,8 @@ gfc_match_array_ref (gfc_array_ref * ar, gfc_array_spec * as, int init)\n \t}\n     }\n \n-  gfc_error (\"Array reference at %C cannot have more than \"\n-\t     stringize (GFC_MAX_DIMENSIONS) \" dimensions\");\n+  gfc_error (\"Array reference at %C cannot have more than %d dimensions\",\n+\t     GFC_MAX_DIMENSIONS);\n \n error:\n   return MATCH_ERROR;\n@@ -419,8 +419,8 @@ gfc_match_array_spec (gfc_array_spec ** asp)\n \n       if (as->rank >= GFC_MAX_DIMENSIONS)\n \t{\n-\t  gfc_error (\"Array specification at %C has more than \"\n-\t\t     stringize (GFC_MAX_DIMENSIONS) \" dimensions\");\n+\t  gfc_error (\"Array specification at %C has more than %d dimensions\",\n+\t\t     GFC_MAX_DIMENSIONS);\n \t  goto cleanup;\n \t}\n "}, {"sha": "8c9f5294e160ed150588b0cb0012a70dd57206e5", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -37,11 +37,11 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n    function can be called in all kinds of ways.  */\n \n static void\n-must_be (gfc_expr * e, int n, const char *thing)\n+must_be (gfc_expr * e, int n, const char *thing_msgid)\n {\n   gfc_error (\"'%s' argument of '%s' intrinsic at %L must be %s\",\n \t     gfc_current_intrinsic_arg[n], gfc_current_intrinsic, &e->where,\n-\t     thing);\n+\t     thing_msgid);\n }\n \n \n@@ -206,7 +206,7 @@ same_type_check (gfc_expr * e, int n, gfc_expr * f, int m)\n   if (gfc_compare_types (&e->ts, &f->ts))\n     return SUCCESS;\n \n-  sprintf (message, \"the same type and kind as '%s'\",\n+  sprintf (message, _(\"the same type and kind as '%s'\"),\n \t   gfc_current_intrinsic_arg[n]);\n \n   must_be (f, m, message);\n@@ -225,7 +225,7 @@ rank_check (gfc_expr * e, int n, int rank)\n   if (e->rank == rank)\n     return SUCCESS;\n \n-  sprintf (message, \"of rank %d\", rank);\n+  sprintf (message, _(\"of rank %d\"), rank);\n \n   must_be (e, n, message);\n \n@@ -262,7 +262,7 @@ kind_value_check (gfc_expr * e, int n, int k)\n   if (e->ts.kind == k)\n     return SUCCESS;\n \n-  sprintf (message, \"of kind %d\", k);\n+  sprintf (message, _(\"of kind %d\"), k);\n \n   must_be (e, n, message);\n   return FAILURE;\n@@ -507,7 +507,7 @@ gfc_check_associated (gfc_expr * pointer, gfc_expr * target)\n         if (target->ref->u.ar.dimen_type[i] == DIMEN_VECTOR)\n           {\n             gfc_error (\"Array section with a vector subscript at %L shall not \"\n-\t\t       \"be the target of an pointer\",\n+\t\t       \"be the target of a pointer\",\n                        &target->where);\n             t = FAILURE;\n             break;\n@@ -1727,9 +1727,8 @@ gfc_check_reshape (gfc_expr * source, gfc_expr * shape,\n \n   if (m > 0)\n     {\n-      gfc_error\n-\t(\"'shape' argument of 'reshape' intrinsic at %L has more than \"\n-\t stringize (GFC_MAX_DIMENSIONS) \" elements\", &shape->where);\n+      gfc_error (\"'shape' argument of 'reshape' intrinsic at %L has more \"\n+\t\t \"than %d elements\", &shape->where, GFC_MAX_DIMENSIONS);\n       return FAILURE;\n     }\n \n@@ -1902,7 +1901,11 @@ gfc_check_spread (gfc_expr * source, gfc_expr * dim, gfc_expr * ncopies)\n {\n   if (source->rank >= GFC_MAX_DIMENSIONS)\n     {\n-      must_be (source, 0, \"less than rank \" stringize (GFC_MAX_DIMENSIONS));\n+      char message[100];\n+\n+      sprintf (message, _(\"less than rank %d\"), GFC_MAX_DIMENSIONS);\n+      must_be (source, 0, message);\n+\n       return FAILURE;\n     }\n "}, {"sha": "3f38c3b68020d733260e7c18728d6cae6005d5ed", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -449,20 +449,20 @@ error_print (const char *type, const char *format0, va_list argp)\n /* Wrapper for error_print().  */\n \n static void\n-error_printf (const char *format, ...)\n+error_printf (const char *nocmsgid, ...)\n {\n   va_list argp;\n \n-  va_start (argp, format);\n-  error_print (\"\", format, argp);\n+  va_start (argp, nocmsgid);\n+  error_print (\"\", _(nocmsgid), argp);\n   va_end (argp);\n }\n \n \n /* Issue a warning.  */\n \n void\n-gfc_warning (const char *format, ...)\n+gfc_warning (const char *nocmsgid, ...)\n {\n   va_list argp;\n \n@@ -473,10 +473,10 @@ gfc_warning (const char *format, ...)\n   warning_buffer.index = 0;\n   cur_error_buffer = &warning_buffer;\n \n-  va_start (argp, format);\n+  va_start (argp, nocmsgid);\n   if (buffer_flag == 0)\n     warnings++;\n-  error_print (\"Warning:\", format, argp);\n+  error_print (_(\"Warning:\"), _(nocmsgid), argp);\n   va_end (argp);\n \n   error_char ('\\0');\n@@ -489,7 +489,7 @@ gfc_warning (const char *format, ...)\n    an error is generated.  */\n \n try\n-gfc_notify_std (int std, const char *format, ...)\n+gfc_notify_std (int std, const char *nocmsgid, ...)\n {\n   va_list argp;\n   bool warning;\n@@ -514,11 +514,11 @@ gfc_notify_std (int std, const char *format, ...)\n       else\n \terrors++;\n     }\n-  va_start (argp, format);\n+  va_start (argp, nocmsgid);\n   if (warning)\n-    error_print (\"Warning:\", format, argp);\n+    error_print (_(\"Warning:\"), _(nocmsgid), argp);\n   else\n-    error_print (\"Error:\", format, argp);\n+    error_print (_(\"Error:\"), _(nocmsgid), argp);\n   va_end (argp);\n \n   error_char ('\\0');\n@@ -529,7 +529,7 @@ gfc_notify_std (int std, const char *format, ...)\n /* Immediate warning (i.e. do not buffer the warning).  */\n \n void\n-gfc_warning_now (const char *format, ...)\n+gfc_warning_now (const char *nocmsgid, ...)\n {\n   va_list argp;\n   int i;\n@@ -541,8 +541,8 @@ gfc_warning_now (const char *format, ...)\n   buffer_flag = 0;\n   warnings++;\n \n-  va_start (argp, format);\n-  error_print (\"Warning:\", format, argp);\n+  va_start (argp, nocmsgid);\n+  error_print (_(\"Warning:\"), _(nocmsgid), argp);\n   va_end (argp);\n \n   error_char ('\\0');\n@@ -578,7 +578,7 @@ gfc_warning_check (void)\n /* Issue an error.  */\n \n void\n-gfc_error (const char *format, ...)\n+gfc_error (const char *nocmsgid, ...)\n {\n   va_list argp;\n \n@@ -589,10 +589,10 @@ gfc_error (const char *format, ...)\n   error_buffer.index = 0;\n   cur_error_buffer = &error_buffer;\n \n-  va_start (argp, format);\n+  va_start (argp, nocmsgid);\n   if (buffer_flag == 0)\n     errors++;\n-  error_print (\"Error:\", format, argp);\n+  error_print (_(\"Error:\"), _(nocmsgid), argp);\n   va_end (argp);\n \n   error_char ('\\0');\n@@ -602,7 +602,7 @@ gfc_error (const char *format, ...)\n /* Immediate error.  */\n \n void\n-gfc_error_now (const char *format, ...)\n+gfc_error_now (const char *nocmsgid, ...)\n {\n   va_list argp;\n   int i;\n@@ -615,8 +615,8 @@ gfc_error_now (const char *format, ...)\n   buffer_flag = 0;\n   errors++;\n \n-  va_start (argp, format);\n-  error_print (\"Error:\", format, argp);\n+  va_start (argp, nocmsgid);\n+  error_print (_(\"Error:\"), _(nocmsgid), argp);\n   va_end (argp);\n \n   error_char ('\\0');\n@@ -627,14 +627,14 @@ gfc_error_now (const char *format, ...)\n /* Fatal error, never returns.  */\n \n void\n-gfc_fatal_error (const char *format, ...)\n+gfc_fatal_error (const char *nocmsgid, ...)\n {\n   va_list argp;\n \n   buffer_flag = 0;\n \n-  va_start (argp, format);\n-  error_print (\"Fatal Error:\", format, argp);\n+  va_start (argp, nocmsgid);\n+  error_print (_(\"Fatal Error:\"), _(nocmsgid), argp);\n   va_end (argp);\n \n   exit (3);\n@@ -735,13 +735,13 @@ gfc_free_error (gfc_error_buf * err)\n /* Debug wrapper for printf.  */\n \n void\n-gfc_status (const char *format, ...)\n+gfc_status (const char *cmsgid, ...)\n {\n   va_list argp;\n \n-  va_start (argp, format);\n+  va_start (argp, cmsgid);\n \n-  vprintf (format, argp);\n+  vprintf (_(cmsgid), argp);\n \n   va_end (argp);\n }"}, {"sha": "78b811a628b3b66736ddc851733a5c4d3f384fbb", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -255,15 +255,15 @@ gfc_extract_int (gfc_expr * expr, int *result)\n {\n \n   if (expr->expr_type != EXPR_CONSTANT)\n-    return \"Constant expression required at %C\";\n+    return _(\"Constant expression required at %C\");\n \n   if (expr->ts.type != BT_INTEGER)\n-    return \"Integer expression required at %C\";\n+    return _(\"Integer expression required at %C\");\n \n   if ((mpz_cmp_si (expr->value.integer, INT_MAX) > 0)\n       || (mpz_cmp_si (expr->value.integer, INT_MIN) < 0))\n     {\n-      return \"Integer value too large in expression at %C\";\n+      return _(\"Integer value too large in expression at %C\");\n     }\n \n   *result = (int) mpz_get_si (expr->value.integer);\n@@ -1753,7 +1753,8 @@ gfc_specification_expr (gfc_expr * e)\n /* Given two expressions, make sure that the arrays are conformable.  */\n \n try\n-gfc_check_conformance (const char *optype, gfc_expr * op1, gfc_expr * op2)\n+gfc_check_conformance (const char *optype_msgid,\n+\t\t       gfc_expr * op1, gfc_expr * op2)\n {\n   int op1_flag, op2_flag, d;\n   mpz_t op1_size, op2_size;\n@@ -1764,7 +1765,8 @@ gfc_check_conformance (const char *optype, gfc_expr * op1, gfc_expr * op2)\n \n   if (op1->rank != op2->rank)\n     {\n-      gfc_error (\"Incompatible ranks in %s at %L\", optype, &op1->where);\n+      gfc_error (\"Incompatible ranks in %s at %L\", _(optype_msgid),\n+\t\t &op1->where);\n       return FAILURE;\n     }\n \n@@ -1778,7 +1780,8 @@ gfc_check_conformance (const char *optype, gfc_expr * op1, gfc_expr * op2)\n       if (op1_flag && op2_flag && mpz_cmp (op1_size, op2_size) != 0)\n \t{\n \t  gfc_error (\"%s at %L has different shape on dimension %d (%d/%d)\",\n-\t\t     optype, &op1->where, d + 1, (int) mpz_get_si (op1_size),\n+\t\t     _(optype_msgid), &op1->where, d + 1,\n+\t\t     (int) mpz_get_si (op1_size),\n \t\t     (int) mpz_get_si (op2_size));\n \n \t  t = FAILURE;\n@@ -1920,22 +1923,22 @@ gfc_check_pointer_assign (gfc_expr * lvalue, gfc_expr * rvalue)\n \n   if (lvalue->ts.kind != rvalue->ts.kind)\n     {\n-      gfc_error\t(\"Different kind type parameters in pointer \"\n+      gfc_error (\"Different kind type parameters in pointer \"\n \t\t \"assignment at %L\", &lvalue->where);\n       return FAILURE;\n     }\n \n   attr = gfc_expr_attr (rvalue);\n   if (!attr.target && !attr.pointer)\n     {\n-      gfc_error\t(\"Pointer assignment target is neither TARGET \"\n+      gfc_error (\"Pointer assignment target is neither TARGET \"\n \t\t \"nor POINTER at %L\", &rvalue->where);\n       return FAILURE;\n     }\n \n   if (is_pure && gfc_impure_variable (rvalue->symtree->n.sym))\n     {\n-      gfc_error\t(\"Bad target in pointer assignment in PURE \"\n+      gfc_error (\"Bad target in pointer assignment in PURE \"\n \t\t \"procedure at %L\", &rvalue->where);\n     }\n "}, {"sha": "9cd28459750e57b3f34963b74bdbcf990bc1a4aa", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -30,6 +30,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n    time I looked, so by comparison this is perfectly reasonable.  */\n \n #include \"system.h\"\n+#include \"intl.h\"\n #include \"coretypes.h\"\n #include \"input.h\"\n \n@@ -1532,7 +1533,6 @@ void gfc_free (void *);\n int gfc_terminal_width(void);\n void gfc_clear_ts (gfc_typespec *);\n FILE *gfc_open_file (const char *);\n-const char *gfc_article (const char *);\n const char *gfc_basic_typename (bt);\n const char *gfc_typename (gfc_typespec *);\n "}, {"sha": "259a0b8efaf7a3f53b087b5f48ae7873b55dae7d", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -51,6 +51,7 @@ Boston, MA 02110-1301, USA.  */\n \n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"intl.h\"\n \n #ifndef MATH_LIBRARY\n #define MATH_LIBRARY \"-lm\"\n@@ -345,15 +346,13 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \t  break;\n \n \tcase OPTION_version:\n-\t  printf (\"\\\n-GNU Fortran 95 (GCC %s)\\n\\\n-Copyright (C) 2005 Free Software Foundation, Inc.\\n\\\n-\\n\\\n-GNU Fortran comes with NO WARRANTY, to the extent permitted by law.\\n\\\n+\t  printf (\"GNU Fortran 95 (GCC) %s\\n\", version_string);\n+\t  printf (\"Copyright %s 2005 Free Software Foundation, Inc.\\n\\n\",\n+\t          _(\"(C)\"));\n+\t  printf (_(\"GNU Fortran comes with NO WARRANTY, to the extent permitted by law.\\n\\\n You may redistribute copies of GNU Fortran\\n\\\n under the terms of the GNU General Public License.\\n\\\n-For more information about these matters, see the file named COPYING\\n\\\n-\", version_string);\n+For more information about these matters, see the file named COPYING\\n\\n\"));\n \t  exit (0);\n \t  break;\n \n@@ -528,7 +527,7 @@ For more information about these matters, see the file named COPYING\\n\\\n \n   if (verbose && g77_newargv != g77_xargv)\n     {\n-      fprintf (stderr, \"Driving:\");\n+      fprintf (stderr, _(\"Driving:\"));\n       for (i = 0; i < g77_newargc; i++)\n \tfprintf (stderr, \" %s\", g77_newargv[i]);\n       fprintf (stderr, \"\\n\");"}, {"sha": "95abbc5ff52be0652bb4111b0393ebbf0333ccb8", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -401,11 +401,11 @@ format_lex (void)\n static try\n check_format (void)\n {\n-  const char *posint_required\t  = \"Positive width required\";\n-  const char *period_required\t  = \"Period required\";\n-  const char *nonneg_required\t  = \"Nonnegative width required\";\n-  const char *unexpected_element  = \"Unexpected element\";\n-  const char *unexpected_end\t  = \"Unexpected end of format string\";\n+  const char *posint_required\t  = _(\"Positive width required\");\n+  const char *period_required\t  = _(\"Period required\");\n+  const char *nonneg_required\t  = _(\"Nonnegative width required\");\n+  const char *unexpected_element  = _(\"Unexpected element\");\n+  const char *unexpected_end\t  = _(\"Unexpected end of format string\");\n \n   const char *error;\n   format_token t, u;\n@@ -422,7 +422,7 @@ check_format (void)\n   t = format_lex ();\n   if (t != FMT_LPAREN)\n     {\n-      error = \"Missing leading left parenthesis\";\n+      error = _(\"Missing leading left parenthesis\");\n       goto syntax;\n     }\n \n@@ -460,15 +460,15 @@ check_format (void)\n       t = format_lex ();\n       if (t != FMT_P)\n \t{\n-\t  error = \"Expected P edit descriptor\";\n+\t  error = _(\"Expected P edit descriptor\");\n \t  goto syntax;\n \t}\n \n       goto data_desc;\n \n     case FMT_P:\n       /* P requires a prior number.  */\n-      error = \"P descriptor requires leading scale factor\";\n+      error = _(\"P descriptor requires leading scale factor\");\n       goto syntax;\n \n     case FMT_X:\n@@ -498,7 +498,7 @@ check_format (void)\n         return FAILURE;\n       if (t != FMT_RPAREN || level > 0)\n \t{\n-\t  error = \"$ must be the last specifier\";\n+\t  error = _(\"$ must be the last specifier\");\n \t  goto syntax;\n \t}\n \n@@ -543,7 +543,7 @@ check_format (void)\n \t  t = format_lex ();\n \t  if (t == FMT_POSINT)\n \t    {\n-\t      error = \"Repeat count cannot follow P descriptor\";\n+\t      error = _(\"Repeat count cannot follow P descriptor\");\n \t      goto syntax;\n \t    }\n \n@@ -606,7 +606,7 @@ check_format (void)\n \t  u = format_lex ();\n \t  if (u != FMT_POSINT)\n \t    {\n-\t      error = \"Positive exponent width required\";\n+\t      error = _(\"Positive exponent width required\");\n \t      goto syntax;\n \t    }\n \t}"}, {"sha": "a306c9536539cf84c6adb62249f9f5c94d95858a", "filename": "gcc/fortran/matchexp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fmatchexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fmatchexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatchexp.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -26,7 +26,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"arith.h\"\n #include \"match.h\"\n \n-static char expression_syntax[] = \"Syntax error in expression at %C\";\n+static char expression_syntax[] = N_(\"Syntax error in expression at %C\");\n \n \n /* Match a user-defined operator name.  This is a normal name with a"}, {"sha": "4d94d7fab72e6afb5bd9e43cd4b5b85d99a7a626", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -105,36 +105,6 @@ gfc_open_file (const char *name)\n }\n \n \n-/* Given a word, return the correct article.  */\n-\n-const char *\n-gfc_article (const char *word)\n-{\n-  const char *p;\n-\n-  switch (*word)\n-    {\n-    case 'a':\n-    case 'A':\n-    case 'e':\n-    case 'E':\n-    case 'i':\n-    case 'I':\n-    case 'o':\n-    case 'O':\n-    case 'u':\n-    case 'U':\n-      p = \"an\";\n-      break;\n-\n-    default:\n-      p = \"a\";\n-    }\n-\n-  return p;\n-}\n-\n-\n /* Return a string for each type.  */\n \n const char *"}, {"sha": "511705084b7b1f7df195343cd7dcf5535d14e9be", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -827,27 +827,25 @@ static char *atom_string, atom_name[MAX_ATOM_SIZE];\n static void bad_module (const char *) ATTRIBUTE_NORETURN;\n \n static void\n-bad_module (const char *message)\n+bad_module (const char *msgid)\n {\n-  const char *p;\n+  fclose (module_fp);\n \n   switch (iomode)\n     {\n     case IO_INPUT:\n-      p = \"Reading\";\n+      gfc_fatal_error (\"Reading module %s at line %d column %d: %s\",\n+\t  \t       module_name, module_line, module_column, msgid);\n       break;\n     case IO_OUTPUT:\n-      p = \"Writing\";\n+      gfc_fatal_error (\"Writing module %s at line %d column %d: %s\",\n+\t  \t       module_name, module_line, module_column, msgid);\n       break;\n     default:\n-      p = \"???\";\n+      gfc_fatal_error (\"Module %s at line %d column %d: %s\",\n+\t  \t       module_name, module_line, module_column, msgid);\n       break;\n     }\n-\n-  fclose (module_fp);\n-\n-  gfc_fatal_error (\"%s module %s at line %d column %d: %s\", p,\n-\t\t   module_name, module_line, module_column, message);\n }\n \n \n@@ -1154,19 +1152,19 @@ require_atom (atom_type type)\n       switch (type)\n \t{\n \tcase ATOM_NAME:\n-\t  p = \"Expected name\";\n+\t  p = _(\"Expected name\");\n \t  break;\n \tcase ATOM_LPAREN:\n-\t  p = \"Expected left parenthesis\";\n+\t  p = _(\"Expected left parenthesis\");\n \t  break;\n \tcase ATOM_RPAREN:\n-\t  p = \"Expected right parenthesis\";\n+\t  p = _(\"Expected right parenthesis\");\n \t  break;\n \tcase ATOM_INTEGER:\n-\t  p = \"Expected integer\";\n+\t  p = _(\"Expected integer\");\n \t  break;\n \tcase ATOM_STRING:\n-\t  p = \"Expected string\";\n+\t  p = _(\"Expected string\");\n \t  break;\n \tdefault:\n \t  gfc_internal_error (\"require_atom(): bad atom type required\");"}, {"sha": "1e28a7e090c23784ebcb328d15ae22d949c65900", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -731,13 +731,13 @@ gfc_ascii_statement (gfc_statement st)\n   switch (st)\n     {\n     case ST_ARITHMETIC_IF:\n-      p = \"arithmetic IF\";\n+      p = _(\"arithmetic IF\");\n       break;\n     case ST_ALLOCATE:\n       p = \"ALLOCATE\";\n       break;\n     case ST_ATTR_DECL:\n-      p = \"attribute declaration\";\n+      p = _(\"attribute declaration\");\n       break;\n     case ST_BACKSPACE:\n       p = \"BACKSPACE\";\n@@ -767,7 +767,7 @@ gfc_ascii_statement (gfc_statement st)\n       p = \"CYCLE\";\n       break;\n     case ST_DATA_DECL:\n-      p = \"data declaration\";\n+      p = _(\"data declaration\");\n       break;\n     case ST_DATA:\n       p = \"DATA\";\n@@ -776,7 +776,7 @@ gfc_ascii_statement (gfc_statement st)\n       p = \"DEALLOCATE\";\n       break;\n     case ST_DERIVED_DECL:\n-      p = \"Derived type declaration\";\n+      p = _(\"derived type declaration\");\n       break;\n     case ST_DO:\n       p = \"DO\";\n@@ -855,7 +855,7 @@ gfc_ascii_statement (gfc_statement st)\n       p = \"GOTO\";\n       break;\n     case ST_IF_BLOCK:\n-      p = \"block IF\";\n+      p = _(\"block IF\");\n       break;\n     case ST_IMPLICIT:\n       p = \"IMPLICIT\";\n@@ -864,7 +864,7 @@ gfc_ascii_statement (gfc_statement st)\n       p = \"IMPLICIT NONE\";\n       break;\n     case ST_IMPLIED_ENDDO:\n-      p = \"implied END DO\";\n+      p = _(\"implied END DO\");\n       break;\n     case ST_INQUIRE:\n       p = \"INQUIRE\";\n@@ -931,10 +931,10 @@ gfc_ascii_statement (gfc_statement st)\n       p = \"WRITE\";\n       break;\n     case ST_ASSIGNMENT:\n-      p = \"assignment\";\n+      p = _(\"assignment\");\n       break;\n     case ST_POINTER_ASSIGNMENT:\n-      p = \"pointer assignment\";\n+      p = _(\"pointer assignment\");\n       break;\n     case ST_SELECT_CASE:\n       p = \"SELECT CASE\";\n@@ -943,7 +943,7 @@ gfc_ascii_statement (gfc_statement st)\n       p = \"SEQUENCE\";\n       break;\n     case ST_SIMPLE_IF:\n-      p = \"Simple IF\";\n+      p = _(\"simple IF\");\n       break;\n     case ST_STATEMENT_FUNCTION:\n       p = \"STATEMENT FUNCTION\";\n@@ -969,43 +969,43 @@ gfc_state_name (gfc_compile_state state)\n   switch (state)\n     {\n     case COMP_PROGRAM:\n-      p = \"a PROGRAM\";\n+      p = _(\"a PROGRAM\");\n       break;\n     case COMP_MODULE:\n-      p = \"a MODULE\";\n+      p = _(\"a MODULE\");\n       break;\n     case COMP_SUBROUTINE:\n-      p = \"a SUBROUTINE\";\n+      p = _(\"a SUBROUTINE\");\n       break;\n     case COMP_FUNCTION:\n-      p = \"a FUNCTION\";\n+      p = _(\"a FUNCTION\");\n       break;\n     case COMP_BLOCK_DATA:\n-      p = \"a BLOCK DATA\";\n+      p = _(\"a BLOCK DATA\");\n       break;\n     case COMP_INTERFACE:\n-      p = \"an INTERFACE\";\n+      p = _(\"an INTERFACE\");\n       break;\n     case COMP_DERIVED:\n-      p = \"a DERIVED TYPE block\";\n+      p = _(\"a DERIVED TYPE block\");\n       break;\n     case COMP_IF:\n-      p = \"an IF-THEN block\";\n+      p = _(\"an IF-THEN block\");\n       break;\n     case COMP_DO:\n-      p = \"a DO block\";\n+      p = _(\"a DO block\");\n       break;\n     case COMP_SELECT:\n-      p = \"a SELECT block\";\n+      p = _(\"a SELECT block\");\n       break;\n     case COMP_FORALL:\n-      p = \"a FORALL block\";\n+      p = _(\"a FORALL block\");\n       break;\n     case COMP_WHERE:\n-      p = \"a WHERE block\";\n+      p = _(\"a WHERE block\");\n       break;\n     case COMP_CONTAINS:\n-      p = \"a contained subprogram\";\n+      p = _(\"a contained subprogram\");\n       break;\n \n     default:"}, {"sha": "3ef8d4e376b8983fa6cc29a047b807ee92354f56", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -307,7 +307,6 @@ match_boz_constant (gfc_expr ** result)\n   locus old_loc;\n   char *buffer;\n   gfc_expr *e;\n-  const char *rname;\n \n   old_loc = gfc_current_locus;\n   gfc_gobble_whitespace ();\n@@ -317,18 +316,15 @@ match_boz_constant (gfc_expr ** result)\n     {\n     case 'b':\n       radix = 2;\n-      rname = \"binary\";\n       break;\n     case 'o':\n       radix = 8;\n-      rname = \"octal\";\n       break;\n     case 'x':\n       x_hex = 1;\n       /* Fall through.  */\n     case 'z':\n       radix = 16;\n-      rname = \"hexadecimal\";\n       break;\n     default:\n       goto backup;\n@@ -351,13 +347,33 @@ match_boz_constant (gfc_expr ** result)\n   length = match_digits (0, radix, NULL);\n   if (length == -1)\n     {\n-      gfc_error (\"Empty set of digits in %s constants at %C\", rname);\n+      switch (radix)\n+        {\n+\tcase 2:\n+          gfc_error (\"Empty set of digits in binary constant at %C\");\n+\tcase 8:\n+          gfc_error (\"Empty set of digits in octal constant at %C\");\n+\tcase 16:\n+          gfc_error (\"Empty set of digits in hexadecimal constant at %C\");\n+        default:\n+\t  gcc_unreachable ();\n+        }\n       return MATCH_ERROR;\n     }\n \n   if (gfc_next_char () != delim)\n     {\n-      gfc_error (\"Illegal character in %s constant at %C.\", rname);\n+      switch (radix)\n+        {\n+\tcase 2:\n+\t  gfc_error (\"Illegal character in binary constant at %C\");\n+\tcase 8:\n+\t  gfc_error (\"Illegal character in octal constant at %C\");\n+\tcase 16:\n+\t  gfc_error (\"Illegal character in hexadecimal constant at %C\");\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n       return MATCH_ERROR;\n     }\n "}, {"sha": "f9413336f532de0aad51834263c9c5b800937a1c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 64, "deletions": 35, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -411,13 +411,27 @@ resolve_entries (gfc_namespace * ns)\n \t    {\n \t      sym = el->sym->result;\n \t      if (sym->attr.dimension)\n-\t\tgfc_error (\"%s result %s can't be an array in FUNCTION %s at %L\",\n-\t\t\t   el == ns->entries ? \"FUNCTION\" : \"ENTRY\", sym->name,\n-\t\t\t   ns->entries->sym->name, &sym->declared_at);\n+\t      {\n+\t\tif (el == ns->entries)\n+\t\t  gfc_error\n+\t\t  (\"FUNCTION result %s can't be an array in FUNCTION %s at %L\",\n+\t\t   sym->name, ns->entries->sym->name, &sym->declared_at);\n+\t        else\n+\t\t  gfc_error\n+\t\t    (\"ENTRY result %s can't be an array in FUNCTION %s at %L\",\n+\t\t     sym->name, ns->entries->sym->name, &sym->declared_at);\n+\t      }\n \t      else if (sym->attr.pointer)\n-\t\tgfc_error (\"%s result %s can't be a POINTER in FUNCTION %s at %L\",\n-\t\t\t   el == ns->entries ? \"FUNCTION\" : \"ENTRY\", sym->name,\n-\t\t\t   ns->entries->sym->name, &sym->declared_at);\n+\t      {\n+\t\tif (el == ns->entries)\n+\t\t  gfc_error\n+\t\t  (\"FUNCTION result %s can't be a POINTER in FUNCTION %s at %L\",\n+\t\t   sym->name, ns->entries->sym->name, &sym->declared_at);\n+\t        else\n+\t\t  gfc_error\n+\t\t    (\"ENTRY result %s can't be a POINTER in FUNCTION %s at %L\",\n+\t\t     sym->name, ns->entries->sym->name, &sym->declared_at);\n+\t      }\n \t      else\n \t\t{\n \t\t  ts = &sym->ts;\n@@ -450,10 +464,18 @@ resolve_entries (gfc_namespace * ns)\n \t\t      break;\n \t\t    }\n \t\t  if (sym)\n-\t\t    gfc_error (\"%s result %s can't be of type %s in FUNCTION %s at %L\",\n-\t\t\t       el == ns->entries ? \"FUNCTION\" : \"ENTRY\", sym->name,\n-\t\t\t       gfc_typename (ts), ns->entries->sym->name,\n-\t\t\t       &sym->declared_at);\n+\t\t  {\n+\t\t    if (el == ns->entries)\n+\t\t      gfc_error\n+\t\t\t(\"FUNCTION result %s can't be of type %s in FUNCTION %s at %L\",\n+\t\t\t sym->name, gfc_typename (ts), ns->entries->sym->name,\n+\t\t\t &sym->declared_at);\n+\t\t    else\n+\t\t      gfc_error\n+\t\t\t(\"ENTRY result %s can't be of type %s in FUNCTION %s at %L\",\n+\t\t\t sym->name, gfc_typename (ts), ns->entries->sym->name,\n+\t\t\t &sym->declared_at);\n+\t\t  }\n \t\t}\n \t    }\n \t}\n@@ -1417,7 +1439,7 @@ resolve_operator (gfc_expr * e)\n \t  break;\n \t}\n \n-      sprintf (msg, \"Operand of unary numeric operator '%s' at %%L is %s\",\n+      sprintf (msg, _(\"Operand of unary numeric operator '%s' at %%L is %s\"),\n \t       gfc_op2string (e->value.op.operator), gfc_typename (&e->ts));\n       goto bad_op;\n \n@@ -1433,7 +1455,7 @@ resolve_operator (gfc_expr * e)\n \t}\n \n       sprintf (msg,\n-\t       \"Operands of binary numeric operator '%s' at %%L are %s/%s\",\n+\t       _(\"Operands of binary numeric operator '%s' at %%L are %s/%s\"),\n \t       gfc_op2string (e->value.op.operator), gfc_typename (&op1->ts),\n \t       gfc_typename (&op2->ts));\n       goto bad_op;\n@@ -1447,7 +1469,7 @@ resolve_operator (gfc_expr * e)\n \t}\n \n       sprintf (msg,\n-\t       \"Operands of string concatenation operator at %%L are %s/%s\",\n+\t       _(\"Operands of string concatenation operator at %%L are %s/%s\"),\n \t       gfc_typename (&op1->ts), gfc_typename (&op2->ts));\n       goto bad_op;\n \n@@ -1466,7 +1488,7 @@ resolve_operator (gfc_expr * e)\n \t  break;\n \t}\n \n-      sprintf (msg, \"Operands of logical operator '%s' at %%L are %s/%s\",\n+      sprintf (msg, _(\"Operands of logical operator '%s' at %%L are %s/%s\"),\n \t       gfc_op2string (e->value.op.operator), gfc_typename (&op1->ts),\n \t       gfc_typename (&op2->ts));\n \n@@ -1480,7 +1502,7 @@ resolve_operator (gfc_expr * e)\n \t  break;\n \t}\n \n-      sprintf (msg, \"Operand of .NOT. operator at %%L is %s\",\n+      sprintf (msg, _(\"Operand of .NOT. operator at %%L is %s\"),\n \t       gfc_typename (&op1->ts));\n       goto bad_op;\n \n@@ -1490,7 +1512,7 @@ resolve_operator (gfc_expr * e)\n     case INTRINSIC_LE:\n       if (op1->ts.type == BT_COMPLEX || op2->ts.type == BT_COMPLEX)\n \t{\n-\t  strcpy (msg, \"COMPLEX quantities cannot be compared at %L\");\n+\t  strcpy (msg, _(\"COMPLEX quantities cannot be compared at %L\"));\n \t  goto bad_op;\n \t}\n \n@@ -1515,22 +1537,24 @@ resolve_operator (gfc_expr * e)\n \t}\n \n       if (op1->ts.type == BT_LOGICAL && op2->ts.type == BT_LOGICAL)\n-\tsprintf (msg, \"Logicals at %%L must be compared with %s instead of %s\",\n+\tsprintf (msg,\n+\t         _(\"Logicals at %%L must be compared with %s instead of %s\"),\n \t\t e->value.op.operator == INTRINSIC_EQ ? \".EQV.\" : \".NEQV.\",\n \t\t gfc_op2string (e->value.op.operator));\n       else\n-\tsprintf (msg, \"Operands of comparison operator '%s' at %%L are %s/%s\",\n+\tsprintf (msg,\n+\t         _(\"Operands of comparison operator '%s' at %%L are %s/%s\"),\n \t\t gfc_op2string (e->value.op.operator), gfc_typename (&op1->ts),\n \t\t gfc_typename (&op2->ts));\n \n       goto bad_op;\n \n     case INTRINSIC_USER:\n       if (op2 == NULL)\n-\tsprintf (msg, \"Operand of user operator '%s' at %%L is %s\",\n+\tsprintf (msg, _(\"Operand of user operator '%s' at %%L is %s\"),\n \t\t e->value.op.uop->name, gfc_typename (&op1->ts));\n       else\n-\tsprintf (msg, \"Operands of user operator '%s' at %%L are %s/%s\",\n+\tsprintf (msg, _(\"Operands of user operator '%s' at %%L are %s/%s\"),\n \t\t e->value.op.uop->name, gfc_typename (&op1->ts),\n \t\t gfc_typename (&op2->ts));\n \n@@ -2342,24 +2366,26 @@ gfc_resolve_expr (gfc_expr * e)\n    INTEGER or (optionally) REAL type.  */\n \n static try\n-gfc_resolve_iterator_expr (gfc_expr * expr, bool real_ok, const char * name)\n+gfc_resolve_iterator_expr (gfc_expr * expr, bool real_ok,\n+\t\t\t   const char * name_msgid)\n {\n   if (gfc_resolve_expr (expr) == FAILURE)\n     return FAILURE;\n \n   if (expr->rank != 0)\n     {\n-      gfc_error (\"%s at %L must be a scalar\", name, &expr->where);\n+      gfc_error (\"%s at %L must be a scalar\", _(name_msgid), &expr->where);\n       return FAILURE;\n     }\n \n   if (!(expr->ts.type == BT_INTEGER\n \t|| (expr->ts.type == BT_REAL && real_ok)))\n     {\n-      gfc_error (\"%s at %L must be INTEGER%s\",\n-\t\t name,\n-\t\t &expr->where,\n-\t\t real_ok ? \" or REAL\" : \"\");\n+      if (real_ok)\n+\tgfc_error (\"%s at %L must be INTEGER or REAL\", _(name_msgid),\n+\t\t   &expr->where);\n+      else\n+\tgfc_error (\"%s at %L must be INTEGER\", _(name_msgid), &expr->where);\n       return FAILURE;\n     }\n   return SUCCESS;\n@@ -4147,9 +4173,12 @@ resolve_symbol (gfc_symbol * sym)\n \t  || sym->as->type == AS_ASSUMED_SHAPE)\n       && sym->attr.dummy == 0)\n     {\n-      gfc_error (\"Assumed %s array at %L must be a dummy argument\",\n-\t\t sym->as->type == AS_ASSUMED_SIZE ? \"size\" : \"shape\",\n-                 &sym->declared_at);\n+      if (sym->as->type == AS_ASSUMED_SIZE)\n+\tgfc_error (\"Assumed size array at %L must be a dummy argument\",\n+\t\t   &sym->declared_at);\n+      else\n+\tgfc_error (\"Assumed shape array at %L must be a dummy argument\",\n+\t\t   &sym->declared_at);\n       return;\n     }\n \n@@ -4265,15 +4294,15 @@ resolve_symbol (gfc_symbol * sym)\n       /* Can the sybol have an initializer?  */\n       whynot = NULL;\n       if (sym->attr.allocatable)\n-\twhynot = \"Allocatable\";\n+\twhynot = _(\"Allocatable\");\n       else if (sym->attr.external)\n-\twhynot = \"External\";\n+\twhynot = _(\"External\");\n       else if (sym->attr.dummy)\n-\twhynot = \"Dummy\";\n+\twhynot = _(\"Dummy\");\n       else if (sym->attr.intrinsic)\n-\twhynot = \"Intrinsic\";\n+\twhynot = _(\"Intrinsic\");\n       else if (sym->attr.result)\n-\twhynot = \"Function Result\";\n+\twhynot = _(\"Function Result\");\n       else if (sym->attr.dimension && !sym->attr.pointer)\n \t{\n \t  /* Don't allow initialization of automatic arrays.  */\n@@ -4284,7 +4313,7 @@ resolve_symbol (gfc_symbol * sym)\n \t\t  || sym->as->upper[i] == NULL\n \t\t  || sym->as->upper[i]->expr_type != EXPR_CONSTANT)\n \t\t{\n-\t\t  whynot = \"Automatic array\";\n+\t\t  whynot = _(\"Automatic array\");\n \t\t  break;\n \t\t}\n \t    }"}, {"sha": "acae453e72c27b55a59f09406a89fb76250f101e", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -905,9 +905,8 @@ gfc_add_procedure (symbol_attribute * attr, procedure_type t,\n \n   if (attr->proc != PROC_UNKNOWN)\n     {\n-      gfc_error (\"%s procedure at %L is already %s %s procedure\",\n+      gfc_error (\"%s procedure at %L is already declared as %s procedure\",\n \t\t gfc_code2string (procedures, t), where,\n-\t\t gfc_article (gfc_code2string (procedures, attr->proc)),\n \t\t gfc_code2string (procedures, attr->proc));\n \n       return FAILURE;"}, {"sha": "4a23a56854fa196fe3ba15a157a3965ff66aa7e6", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -86,12 +86,13 @@ gfc_build_string_const (int length, const char *s)\n   return str;\n }\n \n-/* Build a Fortran character constant from a zero-terminated string.  */\n-\n+/* Build a Fortran character constant from a zero-terminated string.\n+   Since this is mainly used for error messages, the string will get\n+   translated.  */\n tree\n-gfc_build_cstring_const (const char *s)\n+gfc_build_cstring_const (const char *msgid)\n {\n-  return gfc_build_string_const (strlen (s) + 1, s);\n+  return gfc_build_string_const (strlen (msgid) + 1, _(msgid));\n }\n \n /* Return a string constant with the given length.  Used for static"}, {"sha": "9ae47f7ba41c78e3f9b0938df2850e12e8c6086d", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -1,3 +1,10 @@\n+2005-09-17  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/15586\n+\t* exgettext: Add a new nocmsgid convention for arguments\n+\tthat should be marked as no-c-format.\n+\t* gcc.pot: Regenerate.\n+\n 2005-09-13  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* zh_CN.po: Update."}, {"sha": "7665463affc35e631353cf50e6fdba037cee588f", "filename": "gcc/po/exgettext", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Fpo%2Fexgettext", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Fpo%2Fexgettext", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fexgettext?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798", "patch": "@@ -108,6 +108,8 @@ function keyword_option(line) {\n     format=\"\"\n     if (args ~ /g$/)\n     \tformat=\"gcc-internal-format\"\n+    else if (args ~ /noc$/)\n+        format=\"no-c-format\"\n     else if (args ~ /c$/)\n     \tformat=\"c-format\"\n "}, {"sha": "8e6497f76a6c02387e9759b359c3b69ebefd091b", "filename": "gcc/po/gcc.pot", "status": "modified", "additions": 14026, "deletions": 10102, "changes": 24128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Fpo%2Fgcc.pot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31043f6cfc3612e0278f2dea1a8e3ce050b72798/gcc%2Fpo%2Fgcc.pot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fgcc.pot?ref=31043f6cfc3612e0278f2dea1a8e3ce050b72798"}]}