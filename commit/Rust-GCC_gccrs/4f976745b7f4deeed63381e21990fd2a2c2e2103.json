{"sha": "4f976745b7f4deeed63381e21990fd2a2c2e2103", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY5NzY3NDViN2Y0ZGVlZWQ2MzM4MWUyMTk5MGZkMmEyYzJlMjEwMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-04-05T12:25:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-04-05T12:25:26Z"}, "message": "c-decl.c (build_compound_literal): Use TYPE_READONLY.\n\n\t* c-decl.c (build_compound_literal): Use TYPE_READONLY.\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Likewise.\n\t* objc/objc-act.c (adorn_decl, gen_declspecs): Likewise.\n\t* c-typeck.c (decl_constant_value): Don't access DECL_INITIAL of a\n\tPARM_DECL.\n\t* calls.c (flags_from_decl_or_type): Use TYPE_READONLY and do so only\n\tfor a type.\n\t* print-tree.c (print_node): Properly handle side-effects, readonly,\n\tand constant flags.\n\t* tree.c (build1_stat, build_expr_wfl): Only look at TREE_SIDE_EFFECTS\n\tand TREE_CONSTANT if not a type.\n\t* tree.h (IS_NON_TYPE_CODE_CLASS): New macro.\n\t(IS_EXPR_CODE_CLASS): Write 'E', not 'e'.\n\t(NON_TYPE_CHECK): New macro.\n\t(TREE_SIDE_EFFECT, TREE_READONLY, TREE_CONSTANT: Add check.\n\n\t* cp/init.c (decl_constant_value): Don't look at DECL_INITIAL\n\tof PARM_DECL.\n\t* cp/tree.c (bot_manip, build_min): Don't look at TREE_CONSTANT\n\tor TREE_SIDE_EFFECTS of a type.\n\n\t* ada/decl.c (gnat_to_gnu_entity): Use TYPE_READONLY.\n\t* ada/utils.c (create_field_decl): Likewise.\n\t* ada/utils2.c (build_unary_op, gnat_build_constructor): Likewise.\n\nFrom-SVN: r80430", "tree": {"sha": "7cf8c66a6e9e97bafc971ed6abd2828df8113d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf8c66a6e9e97bafc971ed6abd2828df8113d1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f976745b7f4deeed63381e21990fd2a2c2e2103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f976745b7f4deeed63381e21990fd2a2c2e2103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f976745b7f4deeed63381e21990fd2a2c2e2103", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f976745b7f4deeed63381e21990fd2a2c2e2103/comments", "author": null, "committer": null, "parents": [{"sha": "5ffc47306c2e13f9d65d98f2a6fd3ea277945ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffc47306c2e13f9d65d98f2a6fd3ea277945ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ffc47306c2e13f9d65d98f2a6fd3ea277945ce5"}], "stats": {"total": 141, "additions": 97, "deletions": 44}, "files": [{"sha": "4c20840d28a0e8a000c001c3f75aa02bc761703d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1,3 +1,21 @@\n+2004-04-05  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* c-decl.c (build_compound_literal): Use TYPE_READONLY.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Likewise.\n+\t* objc/objc-act.c (adorn_decl, gen_declspecs): Likewise.\n+\t* c-typeck.c (decl_constant_value): Don't access DECL_INITIAL of a\n+\tPARM_DECL.\n+\t* calls.c (flags_from_decl_or_type): Use TYPE_READONLY and do so only\n+\tfor a type.\n+\t* print-tree.c (print_node): Properly handle side-effects, readonly,\n+\tand constant flags.\n+\t* tree.c (build1_stat, build_expr_wfl): Only look at TREE_SIDE_EFFECTS\n+\tand TREE_CONSTANT if not a type.\n+\t* tree.h (IS_NON_TYPE_CODE_CLASS): New macro.\n+\t(IS_EXPR_CODE_CLASS): Write 'E', not 'e'.\n+\t(NON_TYPE_CHECK): New macro.\n+\t(TREE_SIDE_EFFECT, TREE_READONLY, TREE_CONSTANT: Add check.\n+\n 2004-04-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sol2-bi.h (PREFERRED_DEBUGGING_TYPE): Set"}, {"sha": "1ff5439c701ff5f78597eb351002035c31ae4cba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1,3 +1,9 @@\n+2004-04-05  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* decl.c (gnat_to_gnu_entity): Use TYPE_READONLY.\n+\t* utils.c (create_field_decl): Likewise.\n+\t* utils2.c (build_unary_op, gnat_build_constructor): Likewise.\n+\n 2004-04-02  Arnaud Charlet  <charlet@act-europe.fr>\n \n \t* gnat-style.texi, gnat_rm.texi, gnat_ugn.texi: Remove RCS tags."}, {"sha": "5b0581fd819d0b5ab37c067b45b63d6d5ce5ee93", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1443,7 +1443,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  = create_concat_name (gnat_entity, \"XUB\");\n \tTYPE_NAME (gnu_fat_type) = create_concat_name (gnat_entity, \"XUP\");\n \tTYPE_IS_FAT_POINTER_P (gnu_fat_type) = 1;\n-\tTREE_READONLY (gnu_template_type) = 1;\n+\tTYPE_READONLY (gnu_template_type) = 1;\n \n \t/* Make a node for the array.  If we are not defining the array\n \t   suppress expanding incomplete types and save the node as the type\n@@ -1553,7 +1553,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t/* Install all the fields into the template.  */\n \tfinish_record_type (gnu_template_type, gnu_template_fields, 0, 0);\n-\tTREE_READONLY (gnu_template_type) = 1;\n+\tTYPE_READONLY (gnu_template_type) = 1;\n \n \t/* Now make the array of arrays and update the pointer to the array\n \t   in the fat pointer.  Note that it is the first field.  */"}, {"sha": "1cefff8266c9c4c89524f4a34e435a14ef2f9658", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1403,7 +1403,7 @@ create_field_decl (tree field_name,\n   tree field_decl = build_decl (FIELD_DECL, field_name, field_type);\n \n   DECL_CONTEXT (field_decl) = record_type;\n-  TREE_READONLY (field_decl) = TREE_READONLY (field_type);\n+  TREE_READONLY (field_decl) = TYPE_READONLY (field_type);\n \n   /* If FIELD_TYPE is BLKmode, we must ensure this is aligned to at least a\n      byte boundary since GCC cannot handle less-aligned BLKmode bitfields.  */"}, {"sha": "3c0e26b8da0d417449fb15ad5051bb523c919a0b", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1234,7 +1234,7 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n       else\n \t{\n \t  result = fold (build1 (op_code, TREE_TYPE (type), operand));\n-\t  TREE_READONLY (result) = TREE_READONLY (TREE_TYPE (type));\n+\t  TREE_READONLY (result) = TYPE_READONLY (TREE_TYPE (type));\n \t}\n \n       side_effects\n@@ -1521,7 +1521,7 @@ gnat_build_constructor (tree type, tree list)\n   TREE_CONSTANT (result) = allconstant;\n   TREE_STATIC (result) = allconstant;\n   TREE_SIDE_EFFECTS (result) = side_effects;\n-  TREE_READONLY (result) = TREE_READONLY (type);\n+  TREE_READONLY (result) = TYPE_READONLY (type);\n \n   return result;\n }"}, {"sha": "de96be380305c5cf363aeebc1abd4541a7180b61", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -3089,7 +3089,7 @@ build_compound_literal (tree type, tree init)\n   DECL_CONTEXT (decl) = current_function_decl;\n   TREE_USED (decl) = 1;\n   TREE_TYPE (decl) = type;\n-  TREE_READONLY (decl) = TREE_READONLY (type);\n+  TREE_READONLY (decl) = TYPE_READONLY (type);\n   store_init_value (decl, init);\n \n   if (TREE_CODE (type) == ARRAY_TYPE && !COMPLETE_TYPE_P (type))"}, {"sha": "26b83419d840ad6f2bd7808827bed27741a9f779", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1003,8 +1003,10 @@ tree\n decl_constant_value (tree decl)\n {\n   if (/* Don't change a variable array bound or initial value to a constant\n-\t in a place where a variable is invalid.  */\n+\t in a place where a variable is invalid.  Note that DECL_INITIAL\n+\t isn't valid for a PARM_DECL.  */\n       current_function_decl != 0\n+      && TREE_CODE (decl) != PARM_DECL\n       && ! TREE_THIS_VOLATILE (decl)\n       && TREE_READONLY (decl)\n       && DECL_INITIAL (decl) != 0"}, {"sha": "44d6360d9bfbe9536f405ba91194aa379926ff9a", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -726,10 +726,9 @@ flags_from_decl_or_type (tree exp)\n \tflags |= ECF_NOTHROW;\n \n       if (TREE_READONLY (exp) && ! TREE_THIS_VOLATILE (exp))\n-\tflags |= ECF_LIBCALL_BLOCK;\n+\tflags |= ECF_LIBCALL_BLOCK | ECF_CONST;\n     }\n-\n-  if (TREE_READONLY (exp) && ! TREE_THIS_VOLATILE (exp))\n+  else if (TYPE_P (exp) && TYPE_READONLY (exp) && ! TREE_THIS_VOLATILE (exp))\n     flags |= ECF_CONST;\n \n   if (TREE_THIS_VOLATILE (exp))"}, {"sha": "515f6feb9b3c1f5debca0ec555408f8b52eca0ea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1,3 +1,10 @@\n+2004-04-05  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* init.c (decl_constant_value): Don't look at DECL_INITIAL\n+\tof PARM_DECL.\n+\t* tree.c (bot_manip, build_min): Don't look at TREE_CONSTANT\n+\tor TREE_SIDE_EFFECTS of a type.\n+\n 2004-04-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/14007"}, {"sha": "e9142b775e0ed362519dae6efd1e29c61f082800", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1623,6 +1623,7 @@ decl_constant_value (tree decl)\n \t  /* And so are variables with a 'const' type -- unless they\n \t     are also 'volatile'.  */\n \t  || CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (decl)))\n+      && TREE_CODE (decl) != PARM_DECL\n       && DECL_INITIAL (decl)\n       && DECL_INITIAL (decl) != error_mark_node\n       /* This is invalid if initial value is not constant."}, {"sha": "8dd85eae80d2a6beec0d1d9643897fd2761c4671", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1186,7 +1186,7 @@ bot_manip (tree* tp, int* walk_subtrees, void* data)\n   splay_tree target_remap = ((splay_tree) data);\n   tree t = *tp;\n \n-  if (TREE_CONSTANT (t))\n+  if (!TYPE_P (t) && TREE_CONSTANT (t))\n     {\n       /* There can't be any TARGET_EXPRs or their slot variables below\n          this point.  We used to check !TREE_SIDE_EFFECTS, but then we\n@@ -1327,7 +1327,7 @@ build_min (enum tree_code code, tree tt, ...)\n     {\n       tree x = va_arg (p, tree);\n       TREE_OPERAND (t, i) = x;\n-      if (x && TREE_SIDE_EFFECTS (x))\n+      if (x && !TYPE_P (x) && TREE_SIDE_EFFECTS (x))\n \tTREE_SIDE_EFFECTS (t) = 1;\n     }\n "}, {"sha": "9a5533ce14e15814a0d55a68aadbfefce9965b6d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -1504,7 +1504,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n   MEM_IN_STRUCT_P (ref) = AGGREGATE_TYPE_P (type);\n   RTX_UNCHANGING_P (ref)\n     |= ((lang_hooks.honor_readonly\n-\t && (TYPE_READONLY (type) || TREE_READONLY (t)))\n+\t && (TYPE_READONLY (type) || (t != type && TREE_READONLY (t))))\n \t|| (! TYPE_P (t) && TREE_CONSTANT (t)));\n   MEM_POINTER (ref) = POINTER_TYPE_P (type);\n "}, {"sha": "1d89ad610345e4483d2d1d242e3b509a446de92e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -8099,9 +8099,9 @@ adorn_decl (tree decl, char *str)\n   else if (code == POINTER_TYPE)\n     {\n       strcpy (tmpbuf, \"*\");\n-      if (TREE_READONLY (decl) || TYPE_VOLATILE (decl))\n+      if (TYPE_READONLY (decl) || TYPE_VOLATILE (decl))\n \t{\n-\t  if (TREE_READONLY (decl))\n+\t  if (TYPE_READONLY (decl))\n \t    strcat (tmpbuf, \" const\");\n \t  if (TYPE_VOLATILE (decl))\n \t    strcat (tmpbuf, \" volatile\");\n@@ -8305,7 +8305,7 @@ gen_declspecs (tree declspecs, char *buf, int raw)\n   else\n     {\n       /* Type qualifiers.  */\n-      if (TREE_READONLY (declspecs))\n+      if (TYPE_READONLY (declspecs))\n \tstrcat (buf, \"const \");\n       if (TYPE_VOLATILE (declspecs))\n \tstrcat (buf, \"volatile \");"}, {"sha": "9dd9aaa2cd6a10afcd69f1b9289ec89aab71ddab", "filename": "gcc/print-tree.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -245,11 +245,12 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \tindent_to (file, indent + 3);\n     }\n \n-  if (TREE_SIDE_EFFECTS (node))\n+  if (!TYPE_P (node) && TREE_SIDE_EFFECTS (node))\n     fputs (\" side-effects\", file);\n-  if (TREE_READONLY (node))\n+\n+  if (TYPE_P (node) ? TYPE_READONLY (node) : TREE_READONLY (node))\n     fputs (\" readonly\", file);\n-  if (TREE_CONSTANT (node))\n+  if (!TYPE_P (node) && TREE_CONSTANT (node))\n     fputs (\" constant\", file);\n   if (TREE_ADDRESSABLE (node))\n     fputs (\" addressable\", file);"}, {"sha": "205db3f4bbfb44872a9d2ef61a6a997fc718d14a", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -2402,7 +2402,7 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n   TREE_TYPE (t) = type;\n   TREE_COMPLEXITY (t) = 0;\n   TREE_OPERAND (t, 0) = node;\n-  if (node && first_rtl_op (code) != 0)\n+  if (node && !TYPE_P (node) && first_rtl_op (code) != 0)\n     {\n       TREE_SIDE_EFFECTS (t) = TREE_SIDE_EFFECTS (node);\n       TREE_READONLY (t) = TREE_READONLY (node);\n@@ -2456,7 +2456,8 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n       break;\n \n     default:\n-      if (TREE_CODE_CLASS (code) == '1' && node && TREE_CONSTANT (node))\n+      if (TREE_CODE_CLASS (code) == '1' && node && !TYPE_P (node)\n+\t  && TREE_CONSTANT (node))\n \tTREE_CONSTANT (t) = 1;\n       break;\n     }\n@@ -2467,7 +2468,7 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n #define PROCESS_ARG(N)\t\t\t\\\n   do {\t\t\t\t\t\\\n     TREE_OPERAND (t, N) = arg##N;\t\\\n-    if (arg##N && fro > N)\t\t\\\n+    if (arg##N &&!TYPE_P (arg##N) && fro > N) \\\n       {\t\t\t\t\t\\\n         if (TREE_SIDE_EFFECTS (arg##N))\t\\\n \t  side_effects = 1;\t\t\\\n@@ -2742,7 +2743,8 @@ build_expr_wfl (tree node, const char *file, int line, int col)\n     }\n \n   EXPR_WFL_FILENAME_NODE (wfl) = last_filenode;\n-  if (node)\n+\n+  if (node && !TYPE_P (node))\n     {\n       TREE_SIDE_EFFECTS (wfl) = TREE_SIDE_EFFECTS (node);\n       TREE_TYPE (wfl) = TREE_TYPE (node);"}, {"sha": "34e6f45f4f2c77ff3b47d4191f4e0cb8a95f4d85", "filename": "gcc/tree.h", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f976745b7f4deeed63381e21990fd2a2c2e2103/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4f976745b7f4deeed63381e21990fd2a2c2e2103", "patch": "@@ -54,6 +54,10 @@ enum tree_code {\n extern const char tree_code_type[];\n #define TREE_CODE_CLASS(CODE)\ttree_code_type[(int) (CODE)]\n \n+/* Returns nonzero iff CLASS is not the tree code of a type. */\n+\n+#define IS_NON_TYPE_CODE_CLASS(CLASS) (strchr (\"xbcdr<12se\", (CLASS)) != 0)\n+\n /* Returns nonzero iff CLASS is the tree-code class of an\n    expression.  */\n \n@@ -159,15 +163,16 @@ struct tree_common GTY(())\n   unsigned readonly_flag : 1;\n   unsigned unsigned_flag : 1;\n   unsigned asm_written_flag: 1;\n-  unsigned unused_0 : 1;\n-\n   unsigned used_flag : 1;\n+\n   unsigned nothrow_flag : 1;\n   unsigned static_flag : 1;\n   unsigned public_flag : 1;\n   unsigned private_flag : 1;\n   unsigned protected_flag : 1;\n   unsigned deprecated_flag : 1;\n+\n+  unsigned unused_0 : 1;\n   unsigned unused_1 : 1;\n \n   unsigned lang_flag_0 : 1;\n@@ -240,6 +245,8 @@ struct tree_common GTY(())\n \n        TREE_SIDE_EFFECTS in\n            all expressions\n+\t   all decls\n+\t   all constants\n \n    volatile_flag:\n \n@@ -259,6 +266,8 @@ struct tree_common GTY(())\n \n        TREE_CONSTANT in\n            all expressions\n+\t   all decls\n+\t   all constants\n \n    unsigned_flag:\n \n@@ -365,7 +374,16 @@ struct tree_common GTY(())\n ({  const tree __t = (T);\t\t\t\t\t\t\\\n     char const __c = TREE_CODE_CLASS (TREE_CODE (__t));\t\t\t\\\n     if (!IS_EXPR_CODE_CLASS (__c))\t\t\t\t\t\\\n-      tree_class_check_failed (__t, 'e', __FILE__, __LINE__,\t\t\\\n+      tree_class_check_failed (__t, 'E', __FILE__, __LINE__,\t\t\\\n+\t\t\t       __FUNCTION__);\t\t\t\t\\\n+    __t; })\n+\n+/* These checks have to be special cased.  */\n+#define NON_TYPE_CHECK(T) __extension__\t\t\t\t\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    char const __c = TREE_CODE_CLASS (TREE_CODE (__t));\t\t\t\\\n+    if (!IS_NON_TYPE_CODE_CLASS (__c))\t\t\t\t\t\\\n+      tree_class_check_failed (__t, 'T', __FILE__, __LINE__,\t\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n@@ -448,6 +466,7 @@ extern void tree_operand_check_failed (int, enum tree_code,\n #define TREE_CHECK5(T, CODE1, CODE2, CODE3, CODE4, CODE5) (T)\n #define TREE_CLASS_CHECK(T, CODE)\t\t(T)\n #define EXPR_CHECK(T)\t\t\t\t(T)\n+#define NON_TYPE_CHECK(T)\t\t\t(T)\n #define TREE_VEC_ELT_CHECK(T, I)\t\t((T)->vec.a[I])\n #define TREE_OPERAND_CHECK(T, I)\t\t((T)->exp.operands[I])\n #define TREE_OPERAND_CHECK_CODE(T, CODE, I)\t((T)->exp.operands[I])\n@@ -677,12 +696,13 @@ extern void tree_operand_check_failed (int, enum tree_code,\n    for this name in an inner scope.  */\n #define TREE_PUBLIC(NODE) ((NODE)->common.public_flag)\n \n-/* In any expression, nonzero means it has side effects or reevaluation\n-   of the whole expression could produce a different value.\n-   This is set if any subexpression is a function call, a side effect\n-   or a reference to a volatile variable.\n-   In a ..._DECL, this is set only if the declaration said `volatile'.  */\n-#define TREE_SIDE_EFFECTS(NODE) ((NODE)->common.side_effects_flag)\n+/* In any expression, decl, or constant, nonzero means it has side effects or\n+   reevaluation of the whole expression could produce a different value.\n+   This is set if any subexpression is a function call, a side effect or a\n+   reference to a volatile variable.  In a ..._DECL, this is set only if the\n+   declaration said `volatile'.  This will never be set for a constant.  */\n+#define TREE_SIDE_EFFECTS(NODE) \\\n+  (NON_TYPE_CHECK (NODE)->common.side_effects_flag)\n \n /* Nonzero means this expression is volatile in the C sense:\n    its address should be of type `volatile WHATEVER *'.\n@@ -697,20 +717,15 @@ extern void tree_operand_check_failed (int, enum tree_code,\n #define TREE_THIS_VOLATILE(NODE) ((NODE)->common.volatile_flag)\n \n /* In a VAR_DECL, PARM_DECL or FIELD_DECL, or any kind of ..._REF node,\n-   nonzero means it may not be the lhs of an assignment.\n-   In a ..._TYPE node, means this type is const-qualified\n-   (but the macro TYPE_READONLY should be used instead of this macro\n-   when the node is a type).  */\n-#define TREE_READONLY(NODE) ((NODE)->common.readonly_flag)\n+   nonzero means it may not be the lhs of an assignment.  */\n+#define TREE_READONLY(NODE) (NON_TYPE_CHECK (NODE)->common.readonly_flag)\n \n /* Nonzero if NODE is a _DECL with TREE_READONLY set.  */\n-#define TREE_READONLY_DECL_P(NODE) (TREE_READONLY (NODE) && DECL_P (NODE))\n+#define TREE_READONLY_DECL_P(NODE) (DECL_P (NODE) && TREE_READONLY (NODE))\n \n-/* Value of expression is constant.\n-   Always appears in all ..._CST nodes.\n-   May also appear in an arithmetic expression, an ADDR_EXPR or a CONSTRUCTOR\n-   if the value is constant.  */\n-#define TREE_CONSTANT(NODE) ((NODE)->common.constant_flag)\n+/* Value of expression is constant.  Always on in all ..._CST nodes.  May\n+   also appear in an expression or decl where the value is constant.  */\n+#define TREE_CONSTANT(NODE) (NON_TYPE_CHECK (NODE)->common.constant_flag)\n \n /* In a decl (most significantly a FIELD_DECL), means an unsigned field.  */\n #define DECL_UNSIGNED(NODE) (DECL_CHECK (NODE)->common.unsigned_flag)\n@@ -1446,7 +1461,9 @@ struct tree_type GTY(())\n    For a VAR_DECL, holds the initial value.\n    For a PARM_DECL, not used--default\n    values for parameters are encoded in the type of the function,\n-   not in the PARM_DECL slot.  */\n+   not in the PARM_DECL slot.\n+\n+   ??? Need to figure out some way to check this isn't a PARM_DECL.  */\n #define DECL_INITIAL(NODE) (DECL_CHECK (NODE)->decl.initial)\n /* For a PARM_DECL, records the data type used to pass the argument,\n    which may be different from the type seen in the program.  */"}]}