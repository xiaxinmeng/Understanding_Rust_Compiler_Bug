{"sha": "1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwY2M1N2U3OWUxMmZkODc1MzBmOWM2ODYwYmEzMjUxNmViMzVjMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-08-18T18:11:18Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-08-18T18:11:18Z"}, "message": "except.c (TYPE_HASH): Delete.\n\n\t* except.c (TYPE_HASH): Delete.\n\n\t* objc/objc-act.c (HASHFUNCTION): Cast to size_t, not\n\tHOST_WIDE_INT.\n\n\t* tree.c (TYPE_HASH): Delete.\n\n\t* tree.h (TYPE_HASH): Define.\n\nch:\n\t* tree.c (TYPE_HASH): Moved to ../tree.h.\n\ncp:\n\t* decl.c: Cast argument to size_t, not HOST_WIDE_INT, in calls to\n\tGNU_xref_start_scope and GNU_xref_end_scope.\n\n\t* tree.c (TYPE_HASH): Moved to ../tree.h.\n\nFrom-SVN: r45004", "tree": {"sha": "ba20c4b0e0120a645cd25113492a883864a687e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba20c4b0e0120a645cd25113492a883864a687e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/comments", "author": null, "committer": null, "parents": [{"sha": "13c508d9917050ad79eca822b22a9eb1abf0bbc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c508d9917050ad79eca822b22a9eb1abf0bbc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c508d9917050ad79eca822b22a9eb1abf0bbc9"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "1c9c6a31822a1621d209514c8405e41f86319730", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -1,3 +1,14 @@\n+2001-08-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* except.c (TYPE_HASH): Delete.\n+\t\n+\t* objc/objc-act.c (HASHFUNCTION): Cast to size_t, not\n+\tHOST_WIDE_INT.\n+\n+\t* tree.c (TYPE_HASH): Delete.\n+\n+\t* tree.h (TYPE_HASH): Define.\n+\n 2001-08-18  Graham Stott  <grahams@redhat.com>\n \n \t* config/mips/mips.md (adddi3_internal_2+1): Remove contraints from"}, {"sha": "e9f19398dc8d11e9c3c69dccc857a2f3225d43d6", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -1,3 +1,7 @@\n+2001-08-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* tree.c (TYPE_HASH): Moved to ../tree.h.\n+\n 2001-08-11  Zack Weinberg  <zackw@panix.com>\n \n \t* lex.c: Don't include setjmp.h."}, {"sha": "0347d66dbb375ca6a5201950a1ffbf4ba4e171a9", "filename": "gcc/ch/tree.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fch%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fch%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftree.c?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -26,10 +26,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"ch-tree.h\"\n #include \"toplev.h\"\n \n-/* Here is how primitive or already-canonicalized types' \n-   hash codes are made.  */\n-#define TYPE_HASH(TYPE) ((HOST_WIDE_INT) (TYPE) & 0777777)\n-\n extern struct obstack permanent_obstack;\n /* This is special sentinel used to communicate from build_string_type\n    to layout_chill_range_type for the index range of a string. */"}, {"sha": "3fa4455f4a2969fd3a8f4f763741525a9b761951", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -1,3 +1,10 @@\n+2001-08-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl.c: Cast argument to size_t, not HOST_WIDE_INT, in calls to\n+\tGNU_xref_start_scope and GNU_xref_end_scope.\n+\n+\t* tree.c (TYPE_HASH): Moved to ../tree.h.\n+\n 2001-08-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cvt.c (convert_to_void): Preserve TREE_SIDE_EFFECTS"}, {"sha": "234977a5c57c0ce7b1370573d8d9b571da751e0a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -824,7 +824,7 @@ pushlevel (tag_transparent)\n     newlevel = make_binding_level ();\n \n   push_binding_level (newlevel, tag_transparent, keep_next_level_flag);\n-  GNU_xref_start_scope ((HOST_WIDE_INT) newlevel);\n+  GNU_xref_start_scope ((size_t) newlevel);\n   keep_next_level_flag = 0;\n }\n \n@@ -1279,8 +1279,8 @@ poplevel (keep, reverse, functionbody)\n      rather than the end.  This hack is no longer used.  */\n   my_friendly_assert (keep == 0 || keep == 1, 0);\n \n-  GNU_xref_end_scope ((HOST_WIDE_INT) current_binding_level,\n-\t\t      (HOST_WIDE_INT) current_binding_level->level_chain,\n+  GNU_xref_end_scope ((size_t) current_binding_level,\n+\t\t      (size_t) current_binding_level->level_chain,\n \t\t      current_binding_level->parm_flag,\n \t\t      current_binding_level->keep);\n \n@@ -1705,8 +1705,8 @@ poplevel_class ()\n        shadowed = TREE_CHAIN (shadowed))\n     pop_binding (TREE_PURPOSE (shadowed), TREE_TYPE (shadowed));\n \n-  GNU_xref_end_scope ((HOST_WIDE_INT) class_binding_level,\n-\t\t      (HOST_WIDE_INT) class_binding_level->level_chain,\n+  GNU_xref_end_scope ((size_t) class_binding_level,\n+\t\t      (size_t) class_binding_level->level_chain,\n \t\t      class_binding_level->parm_flag,\n \t\t      class_binding_level->keep);\n \n@@ -14168,8 +14168,8 @@ finish_method (decl)\n       DECL_CONTEXT (link) = NULL_TREE;\n     }\n \n-  GNU_xref_end_scope ((HOST_WIDE_INT) current_binding_level,\n-\t\t      (HOST_WIDE_INT) current_binding_level->level_chain,\n+  GNU_xref_end_scope ((size_t) current_binding_level,\n+\t\t      (size_t) current_binding_level->level_chain,\n \t\t      current_binding_level->parm_flag,\n \t\t      current_binding_level->keep);\n "}, {"sha": "7759c50634b3807a82aed16dea6a4920d4543786", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -411,10 +411,6 @@ break_out_calls (exp)\n \n }\n \f\n-/* Here is how primitive or already-canonicalized types' hash\n-   codes are made.  MUST BE CONSISTENT WITH tree.c !!! */\n-#define TYPE_HASH(TYPE) ((HOST_WIDE_INT) (TYPE) & 0777777)\n-\n /* Construct, lay out and return the type of methods belonging to class\n    BASETYPE and whose arguments are described by ARGTYPES and whose values\n    are described by RETTYPE.  If each type exists already, reuse it.  */"}, {"sha": "12e65e7603557d9bd351dbcd33a69ccaf1c85d22", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -1475,9 +1475,6 @@ duplicate_eh_regions (ifun, map)\n }\n \n \f\n-/* ??? Move from tree.c to tree.h.  */\n-#define TYPE_HASH(TYPE) ((size_t) (TYPE) & 0777777)\n-\n static int\n t2r_eq (pentry, pdata)\n      const PTR pentry;"}, {"sha": "3ff70456b72dd692d84a4d19bbcb6777720ac81c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -5481,7 +5481,7 @@ build_ivar_reference (id)\n #define SIZEHASHTABLE \t\t257\n \n /* make positive */\n-#define HASHFUNCTION(key)\t((HOST_WIDE_INT) key & 0x7fffffff)\n+#define HASHFUNCTION(key)\t((size_t) key & 0x7fffffff)\n \n static void\n hash_init ()"}, {"sha": "0e872517d5331fcb3a1149575d513084ecb7eeeb", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -136,10 +136,6 @@ static int next_decl_uid;\n /* Unique id for next type created.  */\n static int next_type_uid = 1;\n \n-/* Here is how primitive or already-canonicalized types' hash\n-   codes are made.  */\n-#define TYPE_HASH(TYPE) ((unsigned long) (TYPE) & 0777777)\n-\n /* Since we cannot rehash a type after it is in the table, we have to\n    keep the hash code.  */\n "}, {"sha": "5298bc369427c6b6e0b8cdea934c55d7ec98006a", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0cc57e79e12fd87530f9c6860ba32516eb35c0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1c0cc57e79e12fd87530f9c6860ba32516eb35c0", "patch": "@@ -327,6 +327,10 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n    In VECTOR_TYPE nodes, this is the type of the elements.  */\n #define TREE_TYPE(NODE) ((NODE)->common.type)\n \n+/* Here is how primitive or already-canonicalized types' hash codes\n+   are made.  */\n+#define TYPE_HASH(TYPE) ((size_t) (TYPE) & 0777777)\n+\n /* Nodes are chained together for many purposes.\n    Types are chained together to record them for being output to the debugger\n    (see the function `chain_type')."}]}