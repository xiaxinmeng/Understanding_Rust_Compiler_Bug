{"sha": "da07141fd73342113551814b404044e9ca72afdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEwNzE0MWZkNzMzNDIxMTM1NTE4MTRiNDA0MDQ0ZTljYTcyYWZkYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-02-14T14:19:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-14T14:19:36Z"}, "message": "re PR other/82368 (with r253275 several new test cases in libbacktrace fail)\n\n\tPR other/82368\n\t* elf.c (EM_PPC64, EF_PPC64_ABI): Undefine and define.\n\t(struct elf_ppc64_opd_data): New type.\n\t(elf_initialize_syminfo): Add opd argument, handle symbols\n\tpointing into the PowerPC64 ELFv1 .opd section.\n\t(elf_add): Read .opd section on PowerPC64 ELFv1, pass pointer\n\tto structure with .opd data to elf_initialize_syminfo.\n\nFrom-SVN: r257658", "tree": {"sha": "31d240364aa11cf16b588eaed5a4178958b608e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31d240364aa11cf16b588eaed5a4178958b608e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da07141fd73342113551814b404044e9ca72afdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da07141fd73342113551814b404044e9ca72afdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da07141fd73342113551814b404044e9ca72afdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da07141fd73342113551814b404044e9ca72afdb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "316b2a2d842eca1cf1a2f31afba946d6328c5477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316b2a2d842eca1cf1a2f31afba946d6328c5477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316b2a2d842eca1cf1a2f31afba946d6328c5477"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "60e67a72de7178deaedeb0524c836a4701ca4f35", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da07141fd73342113551814b404044e9ca72afdb/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da07141fd73342113551814b404044e9ca72afdb/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=da07141fd73342113551814b404044e9ca72afdb", "patch": "@@ -1,3 +1,13 @@\n+2018-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/82368\n+\t* elf.c (EM_PPC64, EF_PPC64_ABI): Undefine and define.\n+\t(struct elf_ppc64_opd_data): New type.\n+\t(elf_initialize_syminfo): Add opd argument, handle symbols\n+\tpointing into the PowerPC64 ELFv1 .opd section.\n+\t(elf_add): Read .opd section on PowerPC64 ELFv1, pass pointer\n+\tto structure with .opd data to elf_initialize_syminfo.\n+\n 2018-01-31  Ian Lance Taylor  <iant@golang.org>\n \n \t* elf.c (elf_add): Close descriptor if we use a debugfile."}, {"sha": "8ff3c47320e3469a08c8f4d02942c7c6952b2273", "filename": "libbacktrace/elf.c", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da07141fd73342113551814b404044e9ca72afdb/libbacktrace%2Felf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da07141fd73342113551814b404044e9ca72afdb/libbacktrace%2Felf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Felf.c?ref=da07141fd73342113551814b404044e9ca72afdb", "patch": "@@ -165,6 +165,8 @@ dl_iterate_phdr (int (*callback) (struct dl_phdr_info *,\n #undef ELFDATA2MSB\n #undef EV_CURRENT\n #undef ET_DYN\n+#undef EM_PPC64\n+#undef EF_PPC64_ABI\n #undef SHN_LORESERVE\n #undef SHN_XINDEX\n #undef SHN_UNDEF\n@@ -245,6 +247,9 @@ typedef struct {\n \n #define ET_DYN 3\n \n+#define EM_PPC64 21\n+#define EF_PPC64_ABI 3\n+\n typedef struct {\n   b_elf_word\tsh_name;\t\t/* Section name, index in string tbl */\n   b_elf_word\tsh_type;\t\t/* Type of section */\n@@ -405,6 +410,20 @@ struct elf_syminfo_data\n   size_t count;\n };\n \n+/* Information about PowerPC64 ELFv1 .opd section.  */\n+\n+struct elf_ppc64_opd_data\n+{\n+  /* Address of the .opd section.  */\n+  b_elf_addr addr;\n+  /* Section data.  */\n+  const char *data;\n+  /* Size of the .opd section.  */\n+  size_t size;\n+  /* Corresponding section view.  */\n+  struct backtrace_view view;\n+};\n+\n /* Compute the CRC-32 of BUF/LEN.  This uses the CRC used for\n    .gnu_debuglink files.  */\n \n@@ -569,7 +588,8 @@ elf_initialize_syminfo (struct backtrace_state *state,\n \t\t\tconst unsigned char *symtab_data, size_t symtab_size,\n \t\t\tconst unsigned char *strtab, size_t strtab_size,\n \t\t\tbacktrace_error_callback error_callback,\n-\t\t\tvoid *data, struct elf_syminfo_data *sdata)\n+\t\t\tvoid *data, struct elf_syminfo_data *sdata,\n+\t\t\tstruct elf_ppc64_opd_data *opd)\n {\n   size_t sym_count;\n   const b_elf_sym *sym;\n@@ -620,7 +640,17 @@ elf_initialize_syminfo (struct backtrace_state *state,\n \t  return 0;\n \t}\n       elf_symbols[j].name = (const char *) strtab + sym->st_name;\n-      elf_symbols[j].address = sym->st_value + base_address;\n+      /* Special case PowerPC64 ELFv1 symbols in .opd section, if the symbol\n+\t is a function descriptor, read the actual code address from the\n+\t descriptor.  */\n+      if (opd\n+\t  && sym->st_value >= opd->addr\n+\t  && sym->st_value < opd->addr + opd->size)\n+\telf_symbols[j].address\n+\t  = *(const b_elf_addr *) (opd->data + (sym->st_value - opd->addr));\n+      else\n+\telf_symbols[j].address = sym->st_value;\n+      elf_symbols[j].address += base_address;\n       elf_symbols[j].size = sym->st_size;\n       ++j;\n     }\n@@ -2637,6 +2667,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n   int debug_view_valid;\n   unsigned int using_debug_view;\n   uint16_t *zdebug_table;\n+  struct elf_ppc64_opd_data opd_data, *opd;\n \n   if (!debuginfo)\n     {\n@@ -2655,6 +2686,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n   debuglink_name = NULL;\n   debuglink_crc = 0;\n   debug_view_valid = 0;\n+  opd = NULL;\n \n   if (!backtrace_get_view (state, descriptor, 0, sizeof ehdr, error_callback,\n \t\t\t   data, &ehdr_view))\n@@ -2857,6 +2889,23 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t      debuglink_crc = *(const uint32_t*)(debuglink_data + crc_offset);\n \t    }\n \t}\n+\n+      /* Read the .opd section on PowerPC64 ELFv1.  */\n+      if (ehdr.e_machine == EM_PPC64\n+\t  && (ehdr.e_flags & EF_PPC64_ABI) < 2\n+\t  && shdr->sh_type == SHT_PROGBITS\n+\t  && strcmp (name, \".opd\") == 0)\n+\t{\n+\t  if (!backtrace_get_view (state, descriptor, shdr->sh_offset,\n+\t\t\t\t   shdr->sh_size, error_callback, data,\n+\t\t\t\t   &opd_data.view))\n+\t    goto fail;\n+\n+\t  opd = &opd_data;\n+\t  opd->addr = shdr->sh_addr;\n+\t  opd->data = (const char *) opd_data.view.data;\n+\t  opd->size = shdr->sh_size;\n+\t}\n     }\n \n   if (symtab_shndx == 0)\n@@ -2898,7 +2947,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n       if (!elf_initialize_syminfo (state, base_address,\n \t\t\t\t   symtab_view.data, symtab_shdr->sh_size,\n \t\t\t\t   strtab_view.data, strtab_shdr->sh_size,\n-\t\t\t\t   error_callback, data, sdata))\n+\t\t\t\t   error_callback, data, sdata, opd))\n \t{\n \t  backtrace_free (state, sdata, sizeof *sdata, error_callback, data);\n \t  goto fail;\n@@ -2951,6 +3000,12 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n       buildid_view_valid = 0;\n     }\n \n+  if (opd)\n+    {\n+      backtrace_release_view (state, &opd->view, error_callback, data);\n+      opd = NULL;\n+    }\n+\n   if (debuglink_name != NULL)\n     {\n       int d;\n@@ -3139,6 +3194,8 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n     backtrace_release_view (state, &buildid_view, error_callback, data);\n   if (debug_view_valid)\n     backtrace_release_view (state, &debug_view, error_callback, data);\n+  if (opd)\n+    backtrace_release_view (state, &opd->view, error_callback, data);\n   if (descriptor != -1)\n     backtrace_close (descriptor, error_callback, data);\n   return 0;"}]}