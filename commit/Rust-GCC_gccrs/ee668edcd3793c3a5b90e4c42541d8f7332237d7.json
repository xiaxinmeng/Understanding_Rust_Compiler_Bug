{"sha": "ee668edcd3793c3a5b90e4c42541d8f7332237d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2NjhlZGNkMzc5M2MzYTViOTBlNGM0MjU0MWQ4ZjczMzIyMzdkNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-15T21:39:39Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-15T21:39:39Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r994", "tree": {"sha": "7a6c95bc0e7a27af432ea308cdb7364f43fcc691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a6c95bc0e7a27af432ea308cdb7364f43fcc691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee668edcd3793c3a5b90e4c42541d8f7332237d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee668edcd3793c3a5b90e4c42541d8f7332237d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee668edcd3793c3a5b90e4c42541d8f7332237d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee668edcd3793c3a5b90e4c42541d8f7332237d7/comments", "author": null, "committer": null, "parents": [{"sha": "01e2750c1b0911e04fcf02e10b930bc982045af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e2750c1b0911e04fcf02e10b930bc982045af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e2750c1b0911e04fcf02e10b930bc982045af7"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "460500ec640fb15ca611db25148d94ad1b677e77", "filename": "gcc/final.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee668edcd3793c3a5b90e4c42541d8f7332237d7/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee668edcd3793c3a5b90e4c42541d8f7332237d7/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ee668edcd3793c3a5b90e4c42541d8f7332237d7", "patch": "@@ -1283,6 +1283,22 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t       clobbered by the function.  */\n \t    if (GET_CODE (XVECEXP (body, 0, 0)) == CALL_INSN)\n \t      CC_STATUS_INIT;\n+\n+\t    /* Following a conditional branch sequence, we have a new basic\n+\t       block.  */\n+\t    if (profile_block_flag)\n+\t      {\n+\t\trtx insn = XVECEXP (body, 0, 0);\n+\t\trtx body = PATTERN (insn);\n+\n+\t\tif ((GET_CODE (insn) == JUMP_INSN && GET_CODE (body) == SET\n+\t\t     && GET_CODE (SET_SRC (body)) != LABEL_REF)\n+\t\t    || (GET_CODE (insn) == JUMP_INSN\n+\t\t\t&& GET_CODE (body) == PARALLEL\n+\t\t\t&& GET_CODE (XVECEXP (body, 0, 0)) == SET\n+\t\t\t&& GET_CODE (SET_SRC (XVECEXP (body, 0, 0))) != LABEL_REF))\n+\t\t  new_block = 1;\n+\t      }\n \t    break;\n \t  }\n \n@@ -1333,12 +1349,15 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t  }\n #endif\n \n-\t/* Following a conditional branch, we have a new basic block.  */\n-\tif ((GET_CODE (insn) == JUMP_INSN && GET_CODE (body) == SET\n-\t     && GET_CODE (SET_SRC (body)) != LABEL_REF)\n-\t    || (GET_CODE (insn) == JUMP_INSN && GET_CODE (body) == PARALLEL\n-\t\t&& GET_CODE (XVECEXP (body, 0, 0)) == SET\n-\t\t&& GET_CODE (SET_SRC (XVECEXP (body, 0, 0))) != LABEL_REF))\n+\t/* Following a conditional branch, we have a new basic block.\n+\t   But if we are inside a sequence, the new block starts after the\n+\t   last insn of the sequence.  */\n+\tif (profile_block_flag && final_sequence == 0\n+\t    && ((GET_CODE (insn) == JUMP_INSN && GET_CODE (body) == SET\n+\t\t && GET_CODE (SET_SRC (body)) != LABEL_REF)\n+\t\t|| (GET_CODE (insn) == JUMP_INSN && GET_CODE (body) == PARALLEL\n+\t\t    && GET_CODE (XVECEXP (body, 0, 0)) == SET\n+\t\t    && GET_CODE (SET_SRC (XVECEXP (body, 0, 0))) != LABEL_REF)))\n \t  new_block = 1;\n \n #ifndef STACK_REGS"}]}