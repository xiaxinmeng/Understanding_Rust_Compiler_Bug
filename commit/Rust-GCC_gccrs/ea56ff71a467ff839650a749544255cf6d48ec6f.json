{"sha": "ea56ff71a467ff839650a749544255cf6d48ec6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1NmZmNzFhNDY3ZmY4Mzk2NTBhNzQ5NTQ0MjU1Y2Y2ZDQ4ZWM2Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-12-12T17:44:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-12-12T17:44:01Z"}, "message": "reflect: Fix MakeFunc returning float32 or float64 on 386.\n\nFrom-SVN: r205932", "tree": {"sha": "c7bc9fb53f58efbf34f93d8cd9634bf071603bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7bc9fb53f58efbf34f93d8cd9634bf071603bb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea56ff71a467ff839650a749544255cf6d48ec6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea56ff71a467ff839650a749544255cf6d48ec6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea56ff71a467ff839650a749544255cf6d48ec6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea56ff71a467ff839650a749544255cf6d48ec6f/comments", "author": null, "committer": null, "parents": [{"sha": "c9846a8c52dd4547b3635740abe04e6c09957e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9846a8c52dd4547b3635740abe04e6c09957e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9846a8c52dd4547b3635740abe04e6c09957e60"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "0e2e7646532447d9d3f8b2c0bf7a3aa679a8df5b", "filename": "libgo/go/reflect/makefunc_386.S", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea56ff71a467ff839650a749544255cf6d48ec6f/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea56ff71a467ff839650a749544255cf6d48ec6f/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_386.S?ref=ea56ff71a467ff839650a749544255cf6d48ec6f", "patch": "@@ -25,8 +25,9 @@ reflect.makeFuncStub:\n \t   struct {\n \t     esp uint32\t\t// 0x0\n \t     eax uint32\t\t// 0x4\n-\t     st0 uint64\t\t// 0x8\n-\t     sr  int32\t\t// 0x10\n+\t     st0 float64\t// 0x8\n+\t     sr  bool\t\t// 0x10\n+\t     sf  bool\t\t// 0x11\n \t   }\n \t   The sr field is set by the function to a non-zero value if\n \t   the function takes a struct hidden pointer that must be\n@@ -84,6 +85,10 @@ reflect.makeFuncStub:\n \t/* Set return registers.  */\n \n \tmovl\t-20(%ebp), %eax\n+\n+\tcmpb\t$0, -7(%ebp)\n+\tje\t2f\n+\n \tfldl\t-16(%ebp)\n \n #ifdef __SSE2__\n@@ -92,15 +97,16 @@ reflect.makeFuncStub:\n \tmovsd\t-16(%ebp), %xmm0\n #endif\n \n-\tmovl\t-8(%ebp), %edx\n+2:\n+\tmovb\t-8(%ebp), %dl\n \n \taddl\t$36, %esp\n \tpopl\t%ebx\n .LCFI3:\n \tpopl\t%ebp\n .LCFI4:\n \n-\ttestl\t%edx,%edx\n+\ttestb\t%dl,%dl\n \tjne\t1f\n \tret\n 1:"}, {"sha": "96ca430d094b6631dccbcf891741db02d72e3fca", "filename": "libgo/go/reflect/makefuncgo_386.go", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea56ff71a467ff839650a749544255cf6d48ec6f/libgo%2Fgo%2Freflect%2Fmakefuncgo_386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea56ff71a467ff839650a749544255cf6d48ec6f/libgo%2Fgo%2Freflect%2Fmakefuncgo_386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefuncgo_386.go?ref=ea56ff71a467ff839650a749544255cf6d48ec6f", "patch": "@@ -14,9 +14,10 @@ import \"unsafe\"\n // registers that might hold result values.\n type i386Regs struct {\n \tesp uint32\n-\teax uint32 // Value to return in %eax.\n-\tst0 uint64 // Value to return in %st(0).\n-\tsr  int32  // Set to non-zero if hidden struct pointer.\n+\teax uint32  // Value to return in %eax.\n+\tst0 float64 // Value to return in %st(0).\n+\tsr  bool    // Set to true if hidden struct pointer.\n+\tsf  bool    // Set to true if returning float\n }\n \n // MakeFuncStubGo implements the 386 calling convention for MakeFunc.\n@@ -57,12 +58,13 @@ func MakeFuncStubGo(regs *i386Regs, c *makeFuncImpl) {\n \tin := make([]Value, 0, len(ftyp.in))\n \tap := uintptr(regs.esp)\n \n-\tregs.sr = 0\n+\tregs.sr = false\n+\tregs.sf = false\n \tvar retPtr unsafe.Pointer\n \tif retStruct {\n \t\tretPtr = *(*unsafe.Pointer)(unsafe.Pointer(ap))\n \t\tap += ptrSize\n-\t\tregs.sr = 1\n+\t\tregs.sr = true\n \t}\n \n \tfor _, rt := range ftyp.in {\n@@ -126,13 +128,16 @@ func MakeFuncStubGo(regs *i386Regs, c *makeFuncImpl) {\n \n \tv := out[0]\n \tw := v.iword()\n-\tif v.Kind() != Ptr && v.Kind() != UnsafePointer {\n-\t\tw = loadIword(unsafe.Pointer(w), v.typ.size)\n-\t}\n \tswitch v.Kind() {\n-\tcase Float32, Float64:\n-\t\tregs.st0 = uint64(uintptr(w))\n-\tdefault:\n+\tcase Ptr, UnsafePointer:\n \t\tregs.eax = uint32(uintptr(w))\n+\tcase Float32:\n+\t\tregs.st0 = float64(*(*float32)(unsafe.Pointer(w)))\n+\t\tregs.sf = true\n+\tcase Float64:\n+\t\tregs.st0 = *(*float64)(unsafe.Pointer(w))\n+\t\tregs.sf = true\n+\tdefault:\n+\t\tregs.eax = uint32(uintptr(loadIword(unsafe.Pointer(w), v.typ.size)))\n \t}\n }"}]}