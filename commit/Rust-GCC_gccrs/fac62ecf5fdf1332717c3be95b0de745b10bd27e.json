{"sha": "fac62ecf5fdf1332717c3be95b0de745b10bd27e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFjNjJlY2Y1ZmRmMTMzMjcxN2MzYmU5NWIwZGU3NDViMTBiZDI3ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-09T20:37:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-09T20:37:06Z"}, "message": "except.c (nothrow_function_p): If -fno-exceptions, just return.\n\n        * except.c (nothrow_function_p): If -fno-exceptions, just return.\n        (init_eh_nesting_info): Likewise.\n\nFrom-SVN: r32454", "tree": {"sha": "7cf7a5f7baf42a5a5daa57ed4984e4a6d21acc47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf7a5f7baf42a5a5daa57ed4984e4a6d21acc47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fac62ecf5fdf1332717c3be95b0de745b10bd27e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac62ecf5fdf1332717c3be95b0de745b10bd27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac62ecf5fdf1332717c3be95b0de745b10bd27e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac62ecf5fdf1332717c3be95b0de745b10bd27e/comments", "author": null, "committer": null, "parents": [{"sha": "12a22e76d64eca6e3b54949121b5c5820e189ee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a22e76d64eca6e3b54949121b5c5820e189ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a22e76d64eca6e3b54949121b5c5820e189ee1"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "4ced7d6d1c5ccb431114857da4dcb227b42c0ff3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac62ecf5fdf1332717c3be95b0de745b10bd27e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac62ecf5fdf1332717c3be95b0de745b10bd27e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fac62ecf5fdf1332717c3be95b0de745b10bd27e", "patch": "@@ -1,5 +1,8 @@\n 2000-03-09  Jason Merrill  <jason@casey.cygnus.com>\n \n+\t* except.c (nothrow_function_p): If -fno-exceptions, just return.\n+\t(init_eh_nesting_info): Likewise.\n+\n \t* tree.h (struct tree_common): Rename raises_flag to nothrow_flag.\n \t(TREE_NOTHROW): Rename from TREE_RAISES.\n \t* toplev.c (rest_of_compilation): Set it."}, {"sha": "e08ada2845662daf0dc46644a3a5b4750b52a3ab", "filename": "gcc/except.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac62ecf5fdf1332717c3be95b0de745b10bd27e/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac62ecf5fdf1332717c3be95b0de745b10bd27e/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fac62ecf5fdf1332717c3be95b0de745b10bd27e", "patch": "@@ -2651,6 +2651,9 @@ nothrow_function_p ()\n {\n   rtx insn;\n \n+  if (! flag_exceptions)\n+    return 1;\n+\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     if (can_throw (insn))\n       return 0;\n@@ -3185,6 +3188,7 @@ in_same_eh_region (insn1, insn2)\n    yet.  At some point in the future we can trim out handlers which we\n    know cannot be called. (ie, if a block has an INT type handler,\n    control will never be passed to an outer INT type handler).  */\n+\n static void \n process_nestinfo (block, info, nested_eh_region)\n      int block;\n@@ -3263,6 +3267,7 @@ process_nestinfo (block, info, nested_eh_region)\n /* This function will allocate and initialize an eh_nesting_info structure. \n    It returns a pointer to the completed data structure.  If there are\n    no exception regions, a NULL value is returned.  */\n+\n eh_nesting_info *\n init_eh_nesting_info ()\n {\n@@ -3273,6 +3278,9 @@ init_eh_nesting_info ()\n   rtx insn;\n   int x;\n \n+  if (! flag_exceptions)\n+    return 0;\n+\n   info = (eh_nesting_info *) xmalloc (sizeof (eh_nesting_info));\n   info->region_index = (int *) xcalloc ((max_label_num () + 1), sizeof (int));\n   nested_eh_region = (int *) xcalloc (max_label_num () + 1, sizeof (int));\n@@ -3343,6 +3351,7 @@ init_eh_nesting_info ()\n    HANDLERS is the address of a pointer to a vector of handler_info pointers.\n    Upon return, this will have the handlers which can be reached by block.\n    This function returns the number of elements in the handlers vector.  */\n+\n int \n reachable_handlers (block, info, insn, handlers)\n      int block;"}]}