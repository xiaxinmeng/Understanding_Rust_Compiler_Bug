{"sha": "f971b2813d7ddbdba210a63290b790a175777679", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk3MWIyODEzZDdkZGJkYmEyMTBhNjMyOTBiNzkwYTE3NTc3NzY3OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-20T10:03:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-20T10:03:34Z"}, "message": "slp-43.c: Increase loop count to enable vectorization with V64QImode.\n\n2017-07-20  Richard Biener  <rguenther@suse.de>\n\n\t* gcc.dg/vect/slp-43.c: Increase loop count to enable vectorization\n\twith V64QImode.\n\t* gcc.dg/vect/slp-45.c: Likewise.\n\nFrom-SVN: r250380", "tree": {"sha": "0bf6d3083645ed75cf0e5bfbdbf0a056dc6bbe62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf6d3083645ed75cf0e5bfbdbf0a056dc6bbe62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f971b2813d7ddbdba210a63290b790a175777679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f971b2813d7ddbdba210a63290b790a175777679", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f971b2813d7ddbdba210a63290b790a175777679", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f971b2813d7ddbdba210a63290b790a175777679/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9930ecd9c089bc2c9e82136280c9d2f494242bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9930ecd9c089bc2c9e82136280c9d2f494242bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9930ecd9c089bc2c9e82136280c9d2f494242bc"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "d222849a98fb66e28ca66eecb0cde10b014b11c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f971b2813d7ddbdba210a63290b790a175777679/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f971b2813d7ddbdba210a63290b790a175777679/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f971b2813d7ddbdba210a63290b790a175777679", "patch": "@@ -1,3 +1,9 @@\n+2017-07-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/slp-43.c: Increase loop count to enable vectorization\n+\twith V64QImode.\n+\t* gcc.dg/vect/slp-45.c: Likewise.\n+\n 2017-07-20  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n \n \t* gcc.dg/tree-ssa/vrp116.c: New Test."}, {"sha": "880a2961ae11b52f787badb680a51d3d2509fb90", "filename": "gcc/testsuite/gcc.dg/vect/slp-43.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f971b2813d7ddbdba210a63290b790a175777679/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f971b2813d7ddbdba210a63290b790a175777679/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-43.c?ref=f971b2813d7ddbdba210a63290b790a175777679", "patch": "@@ -4,13 +4,16 @@\n #include <string.h>\n #include \"tree-vect.h\"\n \n+/* AVX512BW has V64QImode, make char_1 vectorizable with that.  */\n+#define MAX_VEC_ELEMENTS 64\n+\n #define FOO(T,N) \\\n void __attribute__((noinline,noclone)) \\\n foo_ ## T ## _ ## N (T * __restrict__ in_, T * __restrict__ out_, int s) \\\n { \\\n   T *in = __builtin_assume_aligned (in_, __BIGGEST_ALIGNMENT__); \\\n   T *out = __builtin_assume_aligned (out_, __BIGGEST_ALIGNMENT__); \\\n-  for (int i = 0; i < 16; i++) \\\n+  for (int i = 0; i < MAX_VEC_ELEMENTS; i++) \\\n     { \\\n       for (int j = 0; j < N; ++j) \\\n         out[j] = in[j]; \\\n@@ -23,9 +26,9 @@ foo_ ## T ## _ ## N (T * __restrict__ in_, T * __restrict__ out_, int s) \\\n  do { \\\n   memset (out, 0, 4096); \\\n   foo_ ## T ## _ ## N ((T *)in, (T *)out, 1); \\\n-  if (memcmp (in, out, sizeof (T) * 16 * N) != 0) \\\n+  if (memcmp (in, out, sizeof (T) * MAX_VEC_ELEMENTS * N) != 0) \\\n     __builtin_abort (); \\\n-  for (int i = sizeof (T) * 16 * N; i < 4096; ++i) \\\n+  for (int i = sizeof (T) * MAX_VEC_ELEMENTS * N; i < 4096; ++i) \\\n     if (out[i] != 0) \\\n       __builtin_abort (); \\\n  } while (0)"}, {"sha": "20a9f815292e1e805fab8b8e2838a4922a4057d7", "filename": "gcc/testsuite/gcc.dg/vect/slp-45.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f971b2813d7ddbdba210a63290b790a175777679/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f971b2813d7ddbdba210a63290b790a175777679/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-45.c?ref=f971b2813d7ddbdba210a63290b790a175777679", "patch": "@@ -4,13 +4,16 @@\n #include <string.h>\n #include \"tree-vect.h\"\n \n+/* AVX512BW has V64QImode, make char_1 vectorizable with that.  */\n+#define MAX_VEC_ELEMENTS 64\n+\n #define FOO(T,N) \\\n void __attribute__((noinline,noclone)) \\\n foo_ ## T ## _ ## N (T * __restrict__ in_, T * __restrict__ out_, int s) \\\n { \\\n   T *in = __builtin_assume_aligned (in_, __BIGGEST_ALIGNMENT__); \\\n   T *out = __builtin_assume_aligned (out_, __BIGGEST_ALIGNMENT__); \\\n-  for (int i = 0; i < 16; i++) \\\n+  for (int i = 0; i < MAX_VEC_ELEMENTS; i++) \\\n     { \\\n       for (int j = 0; j < N; ++j) \\\n         out[j] = in[j]; \\\n@@ -23,9 +26,9 @@ foo_ ## T ## _ ## N (T * __restrict__ in_, T * __restrict__ out_, int s) \\\n  do { \\\n   memset (out, 0, 4096); \\\n   foo_ ## T ## _ ## N ((T *)in, (T *)out, 1); \\\n-  if (memcmp (in, out, sizeof (T) * 16 * N) != 0) \\\n+  if (memcmp (in, out, sizeof (T) * MAX_VEC_ELEMENTS * N) != 0) \\\n     __builtin_abort (); \\\n-  for (int i = sizeof (T) * 16 * N; i < 4096; ++i) \\\n+  for (int i = sizeof (T) * MAX_VEC_ELEMENTS * N; i < 4096; ++i) \\\n     if (out[i] != 0) \\\n       __builtin_abort (); \\\n  } while (0)"}]}