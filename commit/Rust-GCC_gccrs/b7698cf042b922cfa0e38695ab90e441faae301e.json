{"sha": "b7698cf042b922cfa0e38695ab90e441faae301e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2OThjZjA0MmI5MjJjZmEwZTM4Njk1YWI5MGU0NDFmYWFlMzAxZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-28T01:44:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-28T01:44:29Z"}, "message": "decl.c (start_decl): Always pedwarn about vacuously redeclaring a member.\n\n\t* decl.c (start_decl): Always pedwarn about vacuously redeclaring\n\ta member.\n\t(start_function): Call check_default_args.\n\t* decl2.c (grokfield): Don't call check_default_args.\n\t(check_default_args): Use cp_error_at.\n\t* lex.c (do_pending_defargs): Call check_default_args.\n\t* call.c (build_scoped_method_call): Make sure get_type_value returns\n\tsomething before we try to use its TYPE_MAIN_VARIANT.\n\nFrom-SVN: r20113", "tree": {"sha": "3fca0107f5cf12fee362a2925b2bcb8a438c2217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fca0107f5cf12fee362a2925b2bcb8a438c2217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7698cf042b922cfa0e38695ab90e441faae301e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7698cf042b922cfa0e38695ab90e441faae301e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7698cf042b922cfa0e38695ab90e441faae301e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7698cf042b922cfa0e38695ab90e441faae301e/comments", "author": null, "committer": null, "parents": [{"sha": "be3a14bbbb8b161df688059270fe67cf498cfa14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3a14bbbb8b161df688059270fe67cf498cfa14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be3a14bbbb8b161df688059270fe67cf498cfa14"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "684c2af544ea1c9955d8d5d924b31ac6cc0e61b1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b7698cf042b922cfa0e38695ab90e441faae301e", "patch": "@@ -1,7 +1,17 @@\n+1998-05-28  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (start_decl): Always pedwarn about vacuously redeclaring \n+\ta member.\n+\t(start_function): Call check_default_args.\n+\t* decl2.c (grokfield): Don't call check_default_args.\n+\t(check_default_args): Use cp_error_at.\n+\t* lex.c (do_pending_defargs): Call check_default_args.\n+\n 1998-05-27  Brendan Kehoe  <brendan@cygnus.com>\n \n \t* call.c (build_method_call): Make sure get_type_value returns\n \tsomething before we try to use its TYPE_MAIN_VARIANT.\n+\t(build_scoped_method_call): Likewise.\n \n 1998-05-27  Jason Merrill  <jason@yorick.cygnus.com>\n "}, {"sha": "03cc6f36506e398d68c238189260d2fc912fec58", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b7698cf042b922cfa0e38695ab90e441faae301e", "patch": "@@ -389,13 +389,15 @@ build_scoped_method_call (exp, basetype, name, parms)\n      and template parms.  */\n   if (TREE_CODE (name) == BIT_NOT_EXPR && ! IS_AGGR_TYPE (basetype))\n     {\n+      tree tmp;\n       if (TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (basetype))\n \tcp_error (\"type of `%E' does not match destructor type `%T' (type was `%T')\",\n \t\t  exp, basetype, type);\n       name = TREE_OPERAND (name, 0);\n-      if (TYPE_MAIN_VARIANT (basetype) != name \n-\t  && (TYPE_MAIN_VARIANT (basetype)\n-\t      != TYPE_MAIN_VARIANT (get_type_value (name))))\n+      if (! (name == TYPE_MAIN_VARIANT (basetype) \n+\t     || ((tmp = get_type_value (name))\n+\t\t && (TYPE_MAIN_VARIANT (basetype)\n+\t\t     == TYPE_MAIN_VARIANT (tmp)))))\n \tcp_error (\"qualified type `%T' does not match destructor name `~%T'\",\n \t\t  basetype, name);\n       return cp_convert (void_type_node, exp);"}, {"sha": "e3d1dd1a4ad7512443acd7c40566b36c30df5428", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b7698cf042b922cfa0e38695ab90e441faae301e", "patch": "@@ -6219,9 +6219,7 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n \t  || CLASSTYPE_USE_TEMPLATE (context))\n \tSET_DECL_TEMPLATE_SPECIALIZATION (decl);\n \n-      /* Stupid stupid stupid stupid  (jason 7/21/95) */\n-      if (pedantic && DECL_EXTERNAL (decl)\n-\t  && ! DECL_TEMPLATE_SPECIALIZATION (decl))\n+      if (DECL_EXTERNAL (decl) && ! DECL_TEMPLATE_SPECIALIZATION (decl))\n \tcp_pedwarn (\"declaration of `%#D' outside of class is not definition\",\n \t\t    decl);\n \n@@ -11815,9 +11813,13 @@ start_function (declspecs, declarator, attrs, pre_parsed_p)\n \t  && ! DECL_FUNCTION_MEMBER_P (decl1))\n \tdecl1 = pushdecl (decl1);\n       else\n-\t/* We need to set the DECL_CONTEXT. */\n-\tif (!DECL_CONTEXT (decl1) && DECL_TEMPLATE_INFO (decl1))\n-\t  DECL_CONTEXT (decl1) = DECL_CONTEXT (DECL_TI_TEMPLATE (decl1));\n+\t{\n+\t  /* We need to set the DECL_CONTEXT. */\n+\t  if (!DECL_CONTEXT (decl1) && DECL_TEMPLATE_INFO (decl1))\n+\t    DECL_CONTEXT (decl1) = DECL_CONTEXT (DECL_TI_TEMPLATE (decl1));\n+\t  /* And make sure we have enough default args.  */\n+\t  check_default_args (decl1);\n+\t}\n       DECL_MAIN_VARIANT (decl1) = decl1;\n       fntype = TREE_TYPE (decl1);\n     }"}, {"sha": "9fb08acb6bf1c249abd7c8aadf601c12ee023cad", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b7698cf042b922cfa0e38695ab90e441faae301e", "patch": "@@ -1755,7 +1755,6 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n     }\n   if (TREE_CODE (value) == FUNCTION_DECL)\n     {\n-      check_default_args (value);\n       if (asmspec)\n \t{\n \t  /* This must override the asm specifier which was placed\n@@ -4500,8 +4499,8 @@ check_default_args (x)\n \tsaw_def = 1;\n       else if (saw_def)\n \t{\n-\t  cp_error (\"default argument missing for parameter %P of `%#D'\",\n-\t\t    i, x);\n+\t  cp_error_at (\"default argument missing for parameter %P of `%+#D'\",\n+\t\t       i, x);\n \t  break;\n \t}\n     }"}, {"sha": "7f5693bea9be17db814f576d7c3bbe6ad39dbfd2", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7698cf042b922cfa0e38695ab90e441faae301e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=b7698cf042b922cfa0e38695ab90e441faae301e", "patch": "@@ -1930,7 +1930,11 @@ do_pending_defargs ()\n \t  }\n \n       if (TREE_CODE (defarg_fn) == FUNCTION_DECL)\n-\tmaybe_end_member_template_processing (defarg_fn);\n+\t{\n+\t  maybe_end_member_template_processing (defarg_fn);\n+\t  check_default_args (defarg_fn);\n+\t}\n+\n       poplevel (0, 0, 0);\n       pop_nested_class (1);\n     }"}]}