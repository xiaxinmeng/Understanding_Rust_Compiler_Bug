{"sha": "512e4ace54f4f67ae5e9e785ea7a747b3c62758e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyZTRhY2U1NGY0ZjY3YWU1ZTllNzg1ZWE3YTc0N2IzYzYyNzU4ZQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-12-10T00:41:17Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-12-10T00:41:17Z"}, "message": "re PR target/68729 (../Xbae/Methods.c:1772:1: ICE: in extract_insn, at recog.c:2343)\n\n\tPR target/68729\n\t* config/pa/pa.c (pa_emit_move_sequence): Don't check that mode is\n\tconsistent with modes of the input and output operands when doing\n\treloads to and from floating point registers.  Do reload for all\n\taddress forms.\n\nFrom-SVN: r231482", "tree": {"sha": "418ecfd5d7c4941fbc9fb107b954fee46f02ef7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/418ecfd5d7c4941fbc9fb107b954fee46f02ef7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/512e4ace54f4f67ae5e9e785ea7a747b3c62758e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512e4ace54f4f67ae5e9e785ea7a747b3c62758e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512e4ace54f4f67ae5e9e785ea7a747b3c62758e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512e4ace54f4f67ae5e9e785ea7a747b3c62758e/comments", "author": null, "committer": null, "parents": [{"sha": "4cd281545e52582b1f31ff0dc41f5d8590e12e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd281545e52582b1f31ff0dc41f5d8590e12e6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd281545e52582b1f31ff0dc41f5d8590e12e6c"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "0bf6ebd74af18164aa6df8496733c88760e78934", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512e4ace54f4f67ae5e9e785ea7a747b3c62758e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512e4ace54f4f67ae5e9e785ea7a747b3c62758e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=512e4ace54f4f67ae5e9e785ea7a747b3c62758e", "patch": "@@ -1,3 +1,11 @@\n+2015-12-09  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR target/68729\n+\t* config/pa/pa.c (pa_emit_move_sequence): Don't check that mode is\n+\tconsistent with modes of the input and output operands when doing\n+\treloads to and from floating point registers.  Do reload for all\n+\taddress forms.\n+\n 2015-12-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/61886"}, {"sha": "50424c769b77d3356389a3a799406a735471ff56", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512e4ace54f4f67ae5e9e785ea7a747b3c62758e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512e4ace54f4f67ae5e9e785ea7a747b3c62758e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=512e4ace54f4f67ae5e9e785ea7a747b3c62758e", "patch": "@@ -1683,11 +1683,10 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n      REG+D addresses where D does not fit in 5 or 14 bits, including\n      (subreg (mem (addr))) cases.  */\n   if (scratch_reg\n-      && fp_reg_operand (operand0, mode)\n+      && FP_REG_P (operand0)\n       && (MEM_P (operand1)\n \t  || (GET_CODE (operand1) == SUBREG\n-\t      && MEM_P (XEXP (operand1, 0))))\n-      && !floating_point_store_memory_operand (operand1, mode))\n+\t      && MEM_P (XEXP (operand1, 0)))))\n     {\n       if (GET_CODE (operand1) == SUBREG)\n \toperand1 = XEXP (operand1, 0);\n@@ -1699,10 +1698,8 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \n       /* D might not fit in 14 bits either; for such cases load D into\n \t scratch reg.  */\n-      if (reg_plus_base_memory_operand (operand1, mode)\n-\t  && !(TARGET_PA_20\n-\t       && !TARGET_ELF32\n-\t       && INT_14_BITS (XEXP (XEXP (operand1, 0), 1))))\n+      if (reg_plus_base_memory_operand (operand1, GET_MODE (operand1))\n+\t  && !INT_14_BITS (XEXP (XEXP (operand1, 0), 1)))\n \t{\n \t  emit_move_insn (scratch_reg, XEXP (XEXP (operand1, 0), 1));\n \t  emit_move_insn (scratch_reg,\n@@ -1718,11 +1715,10 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n       return 1;\n     }\n   else if (scratch_reg\n-\t   && fp_reg_operand (operand1, mode)\n+\t   && FP_REG_P (operand1)\n \t   && (MEM_P (operand0)\n \t       || (GET_CODE (operand0) == SUBREG\n-\t\t   && MEM_P (XEXP (operand0, 0))))\n-\t   && !floating_point_store_memory_operand (operand0, mode))\n+\t\t   && MEM_P (XEXP (operand0, 0)))))\n     {\n       if (GET_CODE (operand0) == SUBREG)\n \toperand0 = XEXP (operand0, 0);\n@@ -1734,10 +1730,8 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \n       /* D might not fit in 14 bits either; for such cases load D into\n \t scratch reg.  */\n-      if (reg_plus_base_memory_operand (operand0, mode)\n-\t  && !(TARGET_PA_20\n-\t       && !TARGET_ELF32\n-\t       && INT_14_BITS (XEXP (XEXP (operand0, 0), 1))))\n+      if (reg_plus_base_memory_operand (operand0, GET_MODE (operand0))\n+\t  && !INT_14_BITS (XEXP (XEXP (operand0, 0), 1)))\n \t{\n \t  emit_move_insn (scratch_reg, XEXP (XEXP (operand0, 0), 1));\n \t  emit_move_insn (scratch_reg, gen_rtx_fmt_ee (GET_CODE (XEXP (operand0,"}]}