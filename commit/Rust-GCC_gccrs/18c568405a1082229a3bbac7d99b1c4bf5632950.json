{"sha": "18c568405a1082229a3bbac7d99b1c4bf5632950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThjNTY4NDA1YTEwODIyMjlhM2JiYWM3ZDk5YjFjNGJmNTYzMjk1MA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-07-30T14:34:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T14:34:38Z"}, "message": "freeze.adb (Check_Expression_Function): At the freeze point of an expression function...\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Check_Expression_Function): At the freeze point\n\tof an expression function, verify that the expression in the\n\tfunction does not contain references to any deferred constants\n\tthat have no completion yet.\n\t(Freeze_Expression, Freeze_Before): call\n\tCheck_Expression_Function.\n\t* a-ciorse.ads: Add Reference_Control_Type to detect tampering.\n\t* a-ciorse.adb: Add Adjust and Finalize routines for\n\tReference_Control_Type. Use it in the construction of Reference\n\tand Constant_Reference values.\n\nFrom-SVN: r213287", "tree": {"sha": "6ff105c888eb96db6135dc2dcd5bd6b1d8d5ed62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ff105c888eb96db6135dc2dcd5bd6b1d8d5ed62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18c568405a1082229a3bbac7d99b1c4bf5632950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c568405a1082229a3bbac7d99b1c4bf5632950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18c568405a1082229a3bbac7d99b1c4bf5632950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c568405a1082229a3bbac7d99b1c4bf5632950/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a58113f8e2d6bc4bd52e168e7079053cda5eb9"}], "stats": {"total": 189, "additions": 175, "deletions": 14}, "files": [{"sha": "df58f1af55384324442ff69c6d51d01e92724b5e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c568405a1082229a3bbac7d99b1c4bf5632950/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c568405a1082229a3bbac7d99b1c4bf5632950/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=18c568405a1082229a3bbac7d99b1c4bf5632950", "patch": "@@ -1,3 +1,16 @@\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Check_Expression_Function): At the freeze point\n+\tof an expression function, verify that the expression in the\n+\tfunction does not contain references to any deferred constants\n+\tthat have no completion yet.\n+\t(Freeze_Expression, Freeze_Before): call\n+\tCheck_Expression_Function.\n+\t* a-ciorse.ads: Add Reference_Control_Type to detect tampering.\n+\t* a-ciorse.adb: Add Adjust and Finalize routines for\n+\tReference_Control_Type. Use it in the construction of Reference\n+\tand Constant_Reference values.\n+\n 2014-07-30  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_aggr.adb: Update comments."}, {"sha": "7c14cac72cb90e663f65077c9443840722653646", "filename": "gcc/ada/a-ciorse.adb", "status": "modified", "additions": 79, "deletions": 11, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c568405a1082229a3bbac7d99b1c4bf5632950/gcc%2Fada%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c568405a1082229a3bbac7d99b1c4bf5632950/gcc%2Fada%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.adb?ref=18c568405a1082229a3bbac7d99b1c4bf5632950", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -768,6 +768,24 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n            Is_Less_Key_Node    => Is_Less_Key_Node,\n            Is_Greater_Key_Node => Is_Greater_Key_Node);\n \n+      ------------\n+      -- Adjust --\n+      ------------\n+\n+      procedure Adjust (Control : in out Reference_Control_Type) is\n+      begin\n+         if Control.Container /= null then\n+            declare\n+               Tree : Tree_Type renames Control.Container.Tree;\n+               B    : Natural renames Tree.Busy;\n+               L    : Natural renames Tree.Lock;\n+            begin\n+               B := B + 1;\n+               L := L + 1;\n+            end;\n+         end if;\n+      end Adjust;\n+\n       -------------\n       -- Ceiling --\n       -------------\n@@ -878,6 +896,32 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n          end if;\n       end Exclude;\n \n+      --------------\n+      -- Finalize --\n+      --------------\n+\n+      procedure Finalize (Control : in out Reference_Control_Type) is\n+      begin\n+         if Control.Container /= null then\n+            declare\n+               Tree : Tree_Type renames Control.Container.Tree;\n+               B    : Natural renames Tree.Busy;\n+               L    : Natural renames Tree.Lock;\n+            begin\n+               B := B - 1;\n+               L := L - 1;\n+            end;\n+\n+            if not (Key (Control.Pos) = Control.Old_Key.all) then\n+               Delete (Control.Container.all, Key (Control.Pos));\n+               raise Program_Error;\n+            end if;\n+\n+            Control.Container := null;\n+            Control.Old_Key   := null;\n+         end if;\n+      end Finalize;\n+\n       ----------\n       -- Find --\n       ----------\n@@ -1004,11 +1048,23 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n            (Vet (Container.Tree, Position.Node),\n             \"bad cursor in function Reference_Preserving_Key\");\n \n-         --  Some form of finalization will be required in order to actually\n-         --  check that the key-part of the element designated by Position has\n-         --  not changed.  ???\n-\n-         return (Element => Position.Node.Element.all'Access);\n+         declare\n+            Tree : Tree_Type renames Container.Tree;\n+            B    : Natural renames Tree.Busy;\n+            L    : Natural renames Tree.Lock;\n+         begin\n+            return R : constant Reference_Type :=\n+              (Element   => Position.Node.Element.all'Unchecked_Access,\n+               Control =>\n+                 (Controlled with\n+                    Container => Container'Access,\n+                    Pos       => Position,\n+                    Old_Key   => new Key_Type'(Key (Position))))\n+         do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end Reference_Preserving_Key;\n \n       function Reference_Preserving_Key\n@@ -1026,11 +1082,23 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n             raise Program_Error with \"Node has no element\";\n          end if;\n \n-         --  Some form of finalization will be required in order to actually\n-         --  check that the key-part of the element designated by Key has not\n-         --  changed.  ???\n-\n-         return (Element => Node.Element.all'Access);\n+         declare\n+            Tree : Tree_Type renames Container.Tree;\n+            B    : Natural renames Tree.Busy;\n+            L    : Natural renames Tree.Lock;\n+         begin\n+            return R : constant Reference_Type :=\n+              (Element  => Node.Element.all'Unchecked_Access,\n+               Control =>\n+                 (Controlled with\n+                    Container => Container'Access,\n+                    Pos       => Find (Container, Key),\n+                    Old_Key   => new Key_Type'(Key)))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end Reference_Preserving_Key;\n \n       -----------------------------------"}, {"sha": "830f98866249d732f91393f0a04c782d8978d90c", "filename": "gcc/ada/a-ciorse.ads", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c568405a1082229a3bbac7d99b1c4bf5632950/gcc%2Fada%2Fa-ciorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c568405a1082229a3bbac7d99b1c4bf5632950/gcc%2Fada%2Fa-ciorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.ads?ref=18c568405a1082229a3bbac7d99b1c4bf5632950", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -293,8 +293,28 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n          Key       : Key_Type) return Reference_Type;\n \n    private\n-      type Reference_Type\n-         (Element : not null access Element_Type) is null record;\n+      type Set_Access is access all Set;\n+      for Set_Access'Storage_Size use 0;\n+\n+      type Key_Access is access all Key_Type;\n+\n+      type Reference_Control_Type is\n+        new Ada.Finalization.Controlled with\n+      record\n+         Container : Set_Access;\n+         Pos       : Cursor;\n+         Old_Key   : Key_Access;\n+      end record;\n+\n+      overriding procedure Adjust (Control : in out Reference_Control_Type);\n+      pragma Inline (Adjust);\n+\n+      overriding procedure Finalize (Control : in out Reference_Control_Type);\n+      pragma Inline (Finalize);\n+\n+      type Reference_Type (Element : not null access Element_Type) is record\n+         Control  : Reference_Control_Type;\n+      end record;\n \n       use Ada.Streams;\n "}, {"sha": "abc84cc4fe0308016482b5af8e0e14088267dd06", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c568405a1082229a3bbac7d99b1c4bf5632950/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c568405a1082229a3bbac7d99b1c4bf5632950/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=18c568405a1082229a3bbac7d99b1c4bf5632950", "patch": "@@ -105,6 +105,12 @@ package body Freeze is\n    --  Comp_ADC_Present is set True if the component has a Scalar_Storage_Order\n    --  attribute definition clause.\n \n+   procedure Check_Expression_Function (N : Node_Id; Nam : Entity_Id);\n+   --  When an expression function is frozen by a use of it, the expression\n+   --  itself is frozen. Check that the expression does not include references\n+   --  to deferred constants without completion.  We report this at the\n+   --  freeze point of the function, to provide a better error message.\n+\n    procedure Check_Strict_Alignment (E : Entity_Id);\n    --  E is a base type. If E is tagged or has a component that is aliased\n    --  or tagged or contains something this is aliased or tagged, set\n@@ -1233,6 +1239,50 @@ package body Freeze is\n       end if;\n    end Check_Debug_Info_Needed;\n \n+   -------------------------------\n+   -- Check_Expression_Function --\n+   -------------------------------\n+\n+   procedure Check_Expression_Function (N : Node_Id; Nam : Entity_Id) is\n+      Decl : Node_Id;\n+\n+      function Find_Constant (Nod : Node_Id) return Traverse_Result;\n+      --  Function to search for deferred constant\n+\n+      -------------------\n+      -- Find_Constant --\n+      -------------------\n+\n+      function Find_Constant (Nod : Node_Id) return Traverse_Result is\n+      begin\n+         if Is_Entity_Name (Nod)\n+           and then Present (Entity (Nod))\n+           and then Ekind (Entity (Nod)) = E_Constant\n+           and then not Is_Imported (Entity (Nod))\n+           and then not Has_Completion (Entity (Nod))\n+           and then Scope (Entity (Nod)) = Current_Scope\n+         then\n+            Error_Msg_NE\n+              (\"premature use of& in call or instance\", N, Entity (Nod));\n+         end if;\n+\n+         return OK;\n+      end Find_Constant;\n+\n+      procedure Check_Deferred is new Traverse_Proc (Find_Constant);\n+\n+   --  Start of processing for Check_Expression_Function\n+\n+   begin\n+      Decl := Original_Node (Unit_Declaration_Node (Nam));\n+\n+      if Scope (Nam) = Current_Scope\n+        and then Nkind (Decl) = N_Expression_Function\n+      then\n+         Check_Deferred (Expression (Decl));\n+      end if;\n+   end Check_Expression_Function;\n+\n    ----------------------------\n    -- Check_Strict_Alignment --\n    ----------------------------\n@@ -1741,7 +1791,12 @@ package body Freeze is\n \n    procedure Freeze_Before (N : Node_Id; T : Entity_Id) is\n       Freeze_Nodes : constant List_Id := Freeze_Entity (T, N);\n+\n    begin\n+      if Ekind (T) = E_Function then\n+         Check_Expression_Function (N, T);\n+      end if;\n+\n       if Is_Non_Empty_List (Freeze_Nodes) then\n          Insert_Actions (N, Freeze_Nodes);\n       end if;\n@@ -5787,6 +5842,11 @@ package body Freeze is\n                    or else not Comes_From_Source (Entity (N)))\n       then\n          Nam := Entity (N);\n+\n+         if Present (Nam) and then Ekind (Nam) = E_Function then\n+            Check_Expression_Function (N, Nam);\n+         end if;\n+\n       else\n          Nam := Empty;\n       end if;"}]}