{"sha": "3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1MmIyYWI3Y2RkZjIwZWQ0Yzk5NjM4YTNlY2Y2ZWNmZWQ2Y2Y1NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-12-20T21:33:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-12-20T21:33:48Z"}, "message": "tree-ssa-math-opts.c (convert_plusminus_to_widen): Restrict handling of signedness differences to integer types.\n\ngcc/\n\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Restrict\n\thandling of signedness differences to integer types.  Only build\n\ta new optype if type1 isn't correct.\n\nFrom-SVN: r182554", "tree": {"sha": "e74b08aaa25c0a99375f97a1cca99fd996cbc03b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e74b08aaa25c0a99375f97a1cca99fd996cbc03b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d19c7329c6da0b59df04b32bca26f7d2c1ce20a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d19c7329c6da0b59df04b32bca26f7d2c1ce20a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d19c7329c6da0b59df04b32bca26f7d2c1ce20a"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "4b4d10fc5389875a18e45d902953e745500d4d66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55", "patch": "@@ -1,3 +1,9 @@\n+2011-12-20  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Restrict\n+\thandling of signedness differences to integer types.  Only build\n+\ta new optype if type1 isn't correct.\n+\n 2011-12-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/49865"}, {"sha": "a00541fbdf5471245076a3b88b08d6932e8f5d77", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=3752b2ab7cddf20ed4c99638a3ecf6ecfed6cf55", "patch": "@@ -2304,10 +2304,13 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n   from_mode = TYPE_MODE (type1);\n   from_unsigned1 = TYPE_UNSIGNED (type1);\n   from_unsigned2 = TYPE_UNSIGNED (type2);\n+  optype = type1;\n \n   /* There's no such thing as a mixed sign madd yet, so use a wider mode.  */\n   if (from_unsigned1 != from_unsigned2)\n     {\n+      if (!INTEGRAL_TYPE_P (type))\n+\treturn false;\n       /* We can use a signed multiply with unsigned types as long as\n \t there is a wider mode to use, or it is the smaller of the two\n \t types that is unsigned.  Note that type1 >= type2, always.  */\n@@ -2322,6 +2325,8 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n \t}\n \n       from_unsigned1 = from_unsigned2 = false;\n+      optype = build_nonstandard_integer_type (GET_MODE_PRECISION (from_mode),\n+\t\t\t\t\t       false);\n     }\n \n   /* If there was a conversion between the multiply and addition\n@@ -2355,7 +2360,6 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n   /* Verify that the machine can perform a widening multiply\n      accumulate in this mode/signedness combination, otherwise\n      this transformation is likely to pessimize code.  */\n-  optype = build_nonstandard_integer_type (from_mode, from_unsigned1);\n   this_optab = optab_for_tree_code (wmult_code, optype, optab_default);\n   handler = find_widening_optab_handler_and_mode (this_optab, to_mode,\n \t\t\t\t\t\t  from_mode, 0, &actual_mode);"}]}