{"sha": "1908a152806f615fc287a75f6c19cf1be58dd9ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkwOGExNTI4MDZmNjE1ZmMyODdhNzVmNmMxOWNmMWJlNThkZDljYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-24T18:39:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-24T18:39:43Z"}, "message": "Permit sign extend operands\n\nFrom-SVN: r13029", "tree": {"sha": "f6556d358cd13f43edb54c2c20831ad829b01306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6556d358cd13f43edb54c2c20831ad829b01306"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1908a152806f615fc287a75f6c19cf1be58dd9ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1908a152806f615fc287a75f6c19cf1be58dd9ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1908a152806f615fc287a75f6c19cf1be58dd9ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1908a152806f615fc287a75f6c19cf1be58dd9ca/comments", "author": null, "committer": null, "parents": [{"sha": "2a0b0bf589fe2c1f206caaea736915d1ee97c884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0b0bf589fe2c1f206caaea736915d1ee97c884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a0b0bf589fe2c1f206caaea736915d1ee97c884"}], "stats": {"total": 300, "additions": 163, "deletions": 137}, "files": [{"sha": "0c96e65b734a947514ede206e98cdd99852124cd", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1908a152806f615fc287a75f6c19cf1be58dd9ca/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1908a152806f615fc287a75f6c19cf1be58dd9ca/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=1908a152806f615fc287a75f6c19cf1be58dd9ca", "patch": "@@ -221,6 +221,13 @@ extern int\t\tnonmemory_operand ();\n extern int\t\tregister_operand ();\n extern int\t\tscratch_operand ();\n extern int\t\tmove_operand ();\n+extern int\t\tmovdi_operand ();\n+extern int\t\tse_register_operand ();\n+extern int\t\tse_reg_or_0_operand ();\n+extern int\t\tse_uns_arith_operand ();\n+extern int\t\tse_arith_operand ();\n+extern int\t\tse_nonmemory_operand ();\n+extern int\t\tse_nonimmediate_operand ();\n \n /* Functions to change what output section we are using.  */\n extern void\t\tdata_section ();\n@@ -3157,6 +3164,20 @@ while (0)\n   {\"move_operand\", \t\t{ CONST_INT, CONST_DOUBLE, CONST,\t\\\n \t\t\t\t  SYMBOL_REF, LABEL_REF, SUBREG,\t\\\n \t\t\t\t  REG, MEM}},\t\t\t\t\\\n+  {\"movdi_operand\",\t\t{ CONST_INT, CONST_DOUBLE, CONST,\t\\\n+\t\t\t\t  SYMBOL_REF, LABEL_REF, SUBREG, REG,\t\\\n+\t\t\t\t  MEM, SIGN_EXTEND }},\t\t\t\\\n+  {\"se_register_operand\",\t{ SUBREG, REG, SIGN_EXTEND }},\t\t\\\n+  {\"se_reg_or_0_operand\",\t{ REG, CONST_INT, SUBREG,\t\t\\\n+\t\t\t\t  SIGN_EXTEND }},\t\t\t\\\n+  {\"se_uns_arith_operand\",\t{ REG, CONST_INT, SUBREG,\t\t\\\n+\t\t\t\t  SIGN_EXTEND }},\t\t\t\\\n+  {\"se_arith_operand\",\t\t{ REG, CONST_INT, SUBREG,\t\t\\\n+\t\t\t\t  SIGN_EXTEND }},\t\t\t\\\n+  {\"se_nonmemory_operand\",\t{ CONST_INT, CONST_DOUBLE, CONST,\t\\\n+\t\t\t\t  SYMBOL_REF, LABEL_REF, SUBREG,\t\\\n+\t\t\t\t  REG, SIGN_EXTEND }},\t\t\t\\\n+  {\"se_nonimmediate_operand\",   { SUBREG, REG, MEM, SIGN_EXTEND }},\n \n \f\n /* If defined, a C statement to be executed just prior to the"}, {"sha": "e833273977bc203fd01025f4cf8be076eb394aeb", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 142, "deletions": 137, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1908a152806f615fc287a75f6c19cf1be58dd9ca/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1908a152806f615fc287a75f6c19cf1be58dd9ca/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=1908a152806f615fc287a75f6c19cf1be58dd9ca", "patch": "@@ -516,8 +516,8 @@\n \n (define_expand \"adddi3\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t    (match_operand:DI 2 \"arith_operand\" \"\")))\n+\t\t   (plus:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n+\t\t\t    (match_operand:DI 2 \"se_arith_operand\" \"\")))\n \t      (clobber (match_dup 3))])]\n   \"TARGET_64BIT || !TARGET_DEBUG_G_MODE\"\n   \"\n@@ -672,8 +672,8 @@\n \n (define_insn \"adddi3_internal_3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(plus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"dJ\")\n-\t\t (match_operand:DI 2 \"arith_operand\" \"dI\")))]\n+\t(plus:DI (match_operand:DI 1 \"se_reg_or_0_operand\" \"dJ\")\n+\t\t (match_operand:DI 2 \"se_arith_operand\" \"dI\")))]\n   \"TARGET_64BIT && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != -32768)\"\n   \"*\n {\n@@ -753,8 +753,8 @@\n \n (define_expand \"subdi3\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t\t   (minus:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t\t     (match_operand:DI 2 \"register_operand\" \"d\")))\n+\t\t   (minus:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t\t     (match_operand:DI 2 \"se_register_operand\" \"d\")))\n \t      (clobber (match_dup 3))])]\n   \"TARGET_64BIT || !TARGET_DEBUG_G_MODE\"\n   \"\n@@ -896,8 +896,8 @@\n \n (define_insn \"subdi3_internal_3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(minus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"dJ\")\n-\t\t  (match_operand:DI 2 \"arith_operand\" \"dI\")))]\n+\t(minus:DI (match_operand:DI 1 \"se_reg_or_0_operand\" \"dJ\")\n+\t\t  (match_operand:DI 2 \"se_arith_operand\" \"dI\")))]\n   \"TARGET_64BIT && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != -32768)\"\n   \"*\n {\n@@ -1090,7 +1090,7 @@\n \n (define_expand \"muldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(mult:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n    (clobber (match_scratch:DI 3 \"=h\"))\n    (clobber (match_scratch:DI 4 \"=a\"))]\n@@ -1104,9 +1104,14 @@\n   DONE;\n }\")\n \n+;; Don't accept both operands using se_register_operand, because if\n+;; both operands are sign extended we would prefer to use mult in the\n+;; mulsidi3 pattern.  Commutativity should permit either operand to be\n+;; sign extended.\n+\n (define_insn \"muldi3_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(mult:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n    (clobber (match_scratch:DI 3 \"=h\"))\n    (clobber (match_scratch:DI 4 \"=a\"))]\n@@ -1118,7 +1123,7 @@\n \n (define_insn \"muldi3_r4000\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(mult:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n    (clobber (match_scratch:DI 3 \"=h\"))\n    (clobber (match_scratch:DI 4 \"=l\"))\n@@ -1246,8 +1251,8 @@\n (define_insn \"smuldi3_highpart\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h\")\n \t(truncate:DI\n-\t (lshiftrt:TI (mult:TI (sign_extend:TI (match_operand:DI 1 \"register_operand\" \"d\"))\n-\t\t\t       (sign_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n+\t (lshiftrt:TI (mult:TI (sign_extend:TI (match_operand:DI 1 \"se_register_operand\" \"d\"))\n+\t\t\t       (sign_extend:TI (match_operand:DI 2 \"se_register_operand\" \"d\")))\n \t\t      (const_int 64))))\n    (clobber (match_scratch:DI 3 \"=l\"))\n    (clobber (match_scratch:DI 4 \"=a\"))]\n@@ -1260,8 +1265,8 @@\n (define_insn \"umuldi3_highpart\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h\")\n \t(truncate:DI\n-\t (lshiftrt:TI (mult:TI (zero_extend:TI (match_operand:DI 1 \"register_operand\" \"d\"))\n-\t\t\t       (zero_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n+\t (lshiftrt:TI (mult:TI (zero_extend:TI (match_operand:DI 1 \"se_register_operand\" \"d\"))\n+\t\t\t       (zero_extend:TI (match_operand:DI 2 \"se_register_operand\" \"d\")))\n \t\t      (const_int 64))))\n    (clobber (match_scratch:DI 3 \"=l\"))\n    (clobber (match_scratch:DI 4 \"=a\"))]\n@@ -1524,8 +1529,8 @@\n \n (define_insn \"divmoddi4\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(div:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"d\")))\n+\t(div:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_register_operand\" \"d\")))\n    (set (match_operand:DI 3 \"register_operand\" \"=d\")\n \t(mod:DI (match_dup 1)\n \t\t(match_dup 2)))\n@@ -1574,8 +1579,8 @@\n \n (define_insn \"udivmoddi4\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(udiv:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n+\t(udiv:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t (match_operand:DI 2 \"se_register_operand\" \"d\")))\n    (set (match_operand:DI 3 \"register_operand\" \"=d\")\n \t(umod:DI (match_dup 1)\n \t\t (match_dup 2)))\n@@ -1612,8 +1617,8 @@\n \n (define_insn \"divdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(div:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"nonmemory_operand\" \"di\")))\n+\t(div:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_nonmemory_operand\" \"di\")))\n    (clobber (match_scratch:DI 3 \"=l\"))\n    (clobber (match_scratch:DI 4 \"=h\"))\n    (clobber (match_scratch:DI 6 \"=a\"))]\n@@ -1638,8 +1643,8 @@\n \n (define_insn \"moddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mod:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"nonmemory_operand\" \"di\")))\n+\t(mod:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_nonmemory_operand\" \"di\")))\n    (clobber (match_scratch:DI 3 \"=l\"))\n    (clobber (match_scratch:DI 4 \"=h\"))\n    (clobber (match_scratch:DI 6 \"=a\"))]\n@@ -1664,8 +1669,8 @@\n \n (define_insn \"udivdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(udiv:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:DI 2 \"nonmemory_operand\" \"di\")))\n+\t(udiv:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t (match_operand:DI 2 \"se_nonmemory_operand\" \"di\")))\n    (clobber (match_scratch:DI 3 \"=l\"))\n    (clobber (match_scratch:DI 4 \"=h\"))\n    (clobber (match_scratch:DI 6 \"=a\"))]\n@@ -1690,8 +1695,8 @@\n \n (define_insn \"umoddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(umod:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:DI 2 \"nonmemory_operand\" \"di\")))\n+\t(umod:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t (match_operand:DI 2 \"se_nonmemory_operand\" \"di\")))\n    (clobber (match_scratch:DI 3 \"=l\"))\n    (clobber (match_scratch:DI 4 \"=h\"))\n    (clobber (match_scratch:DI 6 \"=a\"))]\n@@ -1784,7 +1789,7 @@\n \n (define_insn \"absdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(abs:DI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+\t(abs:DI (match_operand:DI 1 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT\"\n   \"*\n {\n@@ -1866,7 +1871,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"ffsdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n-\t(ffs:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n+\t(ffs:DI (match_operand:DI 1 \"se_register_operand\" \"d\")))\n    (clobber (match_scratch:DI 2 \"=&d\"))\n    (clobber (match_scratch:DI 3 \"=&d\"))]\n   \"TARGET_64BIT\"\n@@ -1923,7 +1928,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_expand \"negdi2\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t\t   (neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n+\t\t   (neg:DI (match_operand:DI 1 \"se_register_operand\" \"d\")))\n \t      (clobber (match_dup 2))])]\n   \"TARGET_64BIT || !TARGET_DEBUG_G_MODE\"\n   \"\n@@ -1953,7 +1958,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"negdi2_internal_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+\t(neg:DI (match_operand:DI 1 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT\"\n   \"*\n {\n@@ -1997,7 +2002,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"one_cmpldi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(not:DI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+\t(not:DI (match_operand:DI 1 \"se_register_operand\" \"d\")))]\n   \"\"\n   \"*\n {\n@@ -2040,8 +2045,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"nordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(not:DI (ior:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t\t(match_operand:DI 2 \"register_operand\" \"d\"))))]\n+\t(not:DI (ior:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t\t(match_operand:DI 2 \"se_register_operand\" \"d\"))))]\n   \"\"\n   \"*\n {\n@@ -2092,8 +2097,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"anddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(and:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n+\t(and:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT || !TARGET_DEBUG_G_MODE\"\n   \"*\n {\n@@ -2123,8 +2128,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"anddi3_internal1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(and:DI (match_operand:DI 1 \"register_operand\" \"%d,d\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\" \"d,K\")))]\n+\t(and:DI (match_operand:DI 1 \"se_register_operand\" \"%d,d\")\n+\t\t(match_operand:DI 2 \"se_uns_arith_operand\" \"d,K\")))]\n   \"TARGET_64BIT\"\n   \"@\n    and\\\\t%0,%1,%2\n@@ -2150,8 +2155,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"iordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ior:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n+\t(ior:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT || !TARGET_DEBUG_G_MODE\"\n   \"*\n {\n@@ -2195,8 +2200,8 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; the following xordi3_internal pattern.\n (define_insn \"xordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(xor:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n+\t(xor:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT || !TARGET_DEBUG_G_MODE\"\n   \"*\n {\n@@ -2226,8 +2231,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"xordi3_immed\"\n   [(set (match_operand:DI 0 \"register_operand\" \"d\")\n-\t(xor:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\" \"K\")))]\n+\t(xor:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_uns_arith_operand\" \"K\")))]\n   \"TARGET_64BIT\"\n   \"xori\\\\t%0,%1,%x2\"\n   [(set_attr \"type\"\t\"arith\")\n@@ -2253,7 +2258,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"truncdisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(truncate:SI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+\t(truncate:SI (match_operand:DI 1 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT\"\n   \"dsll\\\\t%0,%1,32\\;dsra\\\\t%0,%0,32\"\n   [(set_attr \"type\"\t\"darith\")\n@@ -2262,7 +2267,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"truncdihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(truncate:HI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+\t(truncate:HI (match_operand:DI 1 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT\"\n   \"andi\\\\t%0,%1,0xffff\"\n   [(set_attr \"type\"\t\"darith\")\n@@ -2271,7 +2276,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"truncdiqi2\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n-\t(truncate:QI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+\t(truncate:QI (match_operand:DI 1 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT\"\n   \"andi\\\\t%0,%1,0x00ff\"\n   [(set_attr \"type\"\t\"darith\")\n@@ -2281,7 +2286,7 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; Combiner patterns to optimize shift/truncate combinations.\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(truncate:SI (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(truncate:SI (ashiftrt:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t\t\t  (match_operand:DI 2 \"small_int\" \"I\"))))]\n   \"TARGET_64BIT\"\n   \"*\n@@ -2305,7 +2310,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(truncate:SI (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(truncate:SI (lshiftrt:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t\t\t  (match_operand:DI 2 \"small_int\" \"I\"))))]\n   \"TARGET_64BIT\"\n   \"*\n@@ -2331,7 +2336,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(truncate:SI (ashift:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(truncate:SI (ashift:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t\t\t(match_operand:DI 2 \"small_int\" \"I\"))))]\n   \"TARGET_64BIT\"\n   \"*\n@@ -2355,7 +2360,7 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(zero_extend:SI (truncate:HI\n-\t\t\t (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+\t\t\t (match_operand:DI 1 \"se_register_operand\" \"d\"))))]\n   \"TARGET_64BIT\"\n   \"andi\\\\t%0,%1,0xffff\"\n   [(set_attr \"type\"\t\"darith\")\n@@ -2365,7 +2370,7 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(zero_extend:SI (truncate:QI\n-\t\t\t (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+\t\t\t (match_operand:DI 1 \"se_register_operand\" \"d\"))))]\n   \"TARGET_64BIT\"\n   \"andi\\\\t%0,%1,0xff\"\n   [(set_attr \"type\"\t\"darith\")\n@@ -2375,7 +2380,7 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(zero_extend:HI (truncate:QI\n-\t\t\t (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+\t\t\t (match_operand:DI 1 \"se_register_operand\" \"d\"))))]\n   \"TARGET_64BIT\"\n   \"andi\\\\t%0,%1,0xff\"\n   [(set_attr \"type\"\t\"darith\")\n@@ -2514,13 +2519,13 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; doing a move.\n \n (define_insn \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,R,m\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,*d,d,d\")\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,*x,R,m\")))]\n   \"TARGET_64BIT\"\n   \"* return mips_move_1word (operands, insn, FALSE);\"\n-  [(set_attr \"type\"\t\"move,load,load\")\n+  [(set_attr \"type\"\t\"move,hilo,load,load\")\n    (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"1,1,2\")])\n+   (set_attr \"length\"\t\"1,1,1,2\")])\n \n ;; These patterns originally accepted general_operands, however, slightly\n ;; better code is generated by only accepting register_operands, and then\n@@ -2830,7 +2835,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f,f\")\n-\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"d,R,m\")))]\n+\t(float:DF (match_operand:DI 1 \"se_nonimmediate_operand\" \"d,R,m\")))]\n   \"TARGET_HARD_FLOAT && TARGET_64BIT && TARGET_DOUBLE_FLOAT\"\n   \"*\n {\n@@ -2864,7 +2869,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"floatdisf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f,f\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"d,R,m\")))]\n+\t(float:SF (match_operand:DI 1 \"se_nonimmediate_operand\" \"d,R,m\")))]\n   \"TARGET_HARD_FLOAT && TARGET_64BIT && TARGET_DOUBLE_FLOAT\"\n   \"*\n {\n@@ -3315,10 +3320,10 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"movdi_internal2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,R,m,*d,*x,*a\")\n-\t(match_operand:DI 1 \"general_operand\" \" d,S,IKL,Mnis,R,m,dJ,dJ,*x,*d,*I\"))]\n+\t(match_operand:DI 1 \"movdi_operand\" \"d,S,IKL,Mnis,R,m,dJ,dJ,*x,*d,*I\"))]\n   \"TARGET_64BIT\n    && (register_operand (operands[0], DImode)\n-       || register_operand (operands[1], DImode)\n+       || se_register_operand (operands[1], DImode)\n        || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0)\n        || operands[1] == CONST0_RTX (DImode))\"\n   \"* return mips_move_2words (operands, insn); \"\n@@ -3337,7 +3342,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_expand \"reload_indi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=b\")\n-\t(match_operand:DI 1 \"general_operand\" \"b\"))\n+\t(match_operand:DI 1 \"movdi_operand\" \"b\"))\n    (clobber (match_operand:TI 2 \"register_operand\" \"=&d\"))]\n   \"TARGET_64BIT\"\n   \"\n@@ -3402,7 +3407,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_expand \"reload_outdi\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=b\")\n-\t(match_operand:DI 1 \"register_operand\" \"b\"))\n+\t(match_operand:DI 1 \"se_register_operand\" \"b\"))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=&d\"))]\n   \"TARGET_64BIT\"\n   \"\n@@ -3697,8 +3702,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(mem:SF (plus:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t\t (match_operand:DI 2 \"register_operand\" \"d\"))))]\n+\t(mem:SF (plus:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t\t (match_operand:DI 2 \"se_register_operand\" \"d\"))))]\n   \"mips_isa >= 4 && TARGET_HARD_FLOAT\"\n   \"lwxc1\\\\t%0,%1(%2)\"\n   [(set_attr \"type\"\t\"load\")\n@@ -3717,8 +3722,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(mem:DF (plus:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t\t (match_operand:DI 2 \"register_operand\" \"d\"))))]\n+\t(mem:DF (plus:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t\t (match_operand:DI 2 \"se_register_operand\" \"d\"))))]\n   \"mips_isa >= 4 && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n   \"ldxc1\\\\t%0,%1(%2)\"\n   [(set_attr \"type\"\t\"load\")\n@@ -3736,8 +3741,8 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"length\"\t\"1\")])\n \n (define_insn \"\"\n-  [(set (mem:SF (plus:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n+  [(set (mem:SF (plus:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t\t (match_operand:DI 2 \"se_register_operand\" \"d\")))\n \t(match_operand:SF 0 \"register_operand\" \"=f\"))]\n   \"mips_isa >= 4 && TARGET_HARD_FLOAT\"\n   \"swxc1\\\\t%0,%1(%2)\"\n@@ -3756,8 +3761,8 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"length\"\t\"1\")])\n \n (define_insn \"\"\n-  [(set (mem:DF (plus:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n+  [(set (mem:DF (plus:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t\t (match_operand:DI 2 \"se_register_operand\" \"d\")))\n \t(match_operand:DF 0 \"register_operand\" \"=f\"))]\n   \"mips_isa >= 4 && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n   \"sdxc1\\\\t%0,%1(%2)\"\n@@ -4145,7 +4150,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_expand \"ashldi3\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t   (ashift:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n \t\t\t      (match_operand:SI 2 \"arith_operand\" \"\")))\n \t      (clobber (match_dup  3))])]\n   \"TARGET_64BIT || !TARGET_DEBUG_G_MODE\"\n@@ -4338,7 +4343,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"ashldi3_internal4\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(ashift:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t   (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"TARGET_64BIT\"\n   \"*\n@@ -4372,7 +4377,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_expand \"ashrdi3\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t   (ashiftrt:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n \t\t\t\t(match_operand:SI 2 \"arith_operand\" \"\")))\n \t      (clobber (match_dup  3))])]\n   \"TARGET_64BIT || !TARGET_DEBUG_G_MODE\"\n@@ -4563,7 +4568,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"ashrdi3_internal4\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"TARGET_64BIT\"\n   \"*\n@@ -4597,7 +4602,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_expand \"lshrdi3\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t   (lshiftrt:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n \t\t\t\t(match_operand:SI 2 \"arith_operand\" \"\")))\n \t      (clobber (match_dup  3))])]\n   \"TARGET_64BIT || !TARGET_DEBUG_G_MODE\"\n@@ -4789,7 +4794,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"lshrdi3_internal4\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"TARGET_64BIT\"\n   \"*\n@@ -4860,8 +4865,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_expand \"cmpdi\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t    (match_operand:DI 1 \"arith_operand\" \"\")))]\n+\t(compare:CC (match_operand:DI 0 \"se_register_operand\" \"\")\n+\t\t    (match_operand:DI 1 \"se_arith_operand\" \"\")))]\n   \"TARGET_64BIT\"\n   \"\n {\n@@ -4876,7 +4881,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_expand \"tstdi\"\n   [(set (cc0)\n-\t(match_operand:DI 0 \"register_operand\" \"\"))]\n+\t(match_operand:DI 0 \"se_register_operand\" \"\"))]\n   \"TARGET_64BIT\"\n   \"\n {\n@@ -5009,7 +5014,7 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_insn \"branch_zero_di\"\n   [(set (pc)\n \t(if_then_else (match_operator:DI 0 \"cmp_op\"\n-\t\t\t\t\t [(match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t\t\t\t [(match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t\t\t\t  (const_int 0)])\n \t(match_operand 2 \"pc_or_label_operand\" \"\")\n \t(match_operand 3 \"pc_or_label_operand\" \"\")))]\n@@ -5074,8 +5079,8 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_insn \"branch_equality_di\"\n   [(set (pc)\n \t(if_then_else (match_operator:DI 0 \"equality_op\"\n-\t\t\t\t\t [(match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t\t\t\t  (match_operand:DI 2 \"register_operand\" \"d\")])\n+\t\t\t\t\t [(match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t\t\t\t  (match_operand:DI 2 \"se_register_operand\" \"d\")])\n \t(match_operand 3 \"pc_or_label_operand\" \"\")\n \t(match_operand 4 \"pc_or_label_operand\" \"\")))]\n   \"\"\n@@ -5299,7 +5304,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"seq_di_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(eq:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t       (const_int 0)))]\n   \"TARGET_64BIT\"\n   \"sltu\\\\t%0,%1,1\"\n@@ -5335,8 +5340,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"seq_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\" \"%d,d\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\" \"d,K\")))]\n+\t(eq:DI (match_operand:DI 1 \"se_register_operand\" \"%d,d\")\n+\t       (match_operand:DI 2 \"se_uns_arith_operand\" \"d,K\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE\"\n   \"@\n    xor\\\\t%0,%1,%2\\;sltu\\\\t%0,%0,1\n@@ -5347,8 +5352,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\" \"\")))]\n+\t(eq:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n+\t       (match_operand:DI 2 \"se_uns_arith_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n     && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n   [(set (match_dup 0)\n@@ -5397,7 +5402,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sne_di_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ne:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(ne:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t       (const_int 0)))]\n   \"TARGET_64BIT\"\n   \"sltu\\\\t%0,%.,%1\"\n@@ -5433,8 +5438,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sne_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(ne:DI (match_operand:DI 1 \"register_operand\" \"%d,d\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\" \"d,K\")))]\n+\t(ne:DI (match_operand:DI 1 \"se_register_operand\" \"%d,d\")\n+\t       (match_operand:DI 2 \"se_uns_arith_operand\" \"d,K\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE\"\n   \"@\n     xor\\\\t%0,%1,%2\\;sltu\\\\t%0,%.,%0\n@@ -5445,8 +5450,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ne:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\" \"\")))]\n+\t(ne:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n+\t       (match_operand:DI 2 \"se_uns_arith_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n     && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n   [(set (match_dup 0)\n@@ -5495,8 +5500,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sgt_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(gt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"reg_or_0_operand\" \"dJ\")))]\n+\t(gt:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t       (match_operand:DI 2 \"se_reg_or_0_operand\" \"dJ\")))]\n   \"TARGET_64BIT\"\n   \"slt\\\\t%0,%z2,%1\"\n   [(set_attr \"type\"\t\"arith\")\n@@ -5551,8 +5556,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sge_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ge:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"arith_operand\" \"dI\")))]\n+\t(ge:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t       (match_operand:DI 2 \"se_arith_operand\" \"dI\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE\"\n   \"slt\\\\t%0,%1,%2\\;xori\\\\t%0,%0,0x0001\"\n   [(set_attr \"type\"\t\"arith\")\n@@ -5561,8 +5566,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ge:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"arith_operand\" \"\")))]\n+\t(ge:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n+\t       (match_operand:DI 2 \"se_arith_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0)\n \t(lt:DI (match_dup 1)\n@@ -5607,8 +5612,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"slt_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(lt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"arith_operand\" \"dI\")))]\n+\t(lt:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t       (match_operand:DI 2 \"se_arith_operand\" \"dI\")))]\n   \"TARGET_64BIT\"\n   \"slt\\\\t%0,%1,%2\"\n   [(set_attr \"type\"\t\"arith\")\n@@ -5657,7 +5662,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sle_di_const\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(le:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(le:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t       (match_operand:DI 2 \"small_int\" \"I\")))]\n   \"TARGET_64BIT && INTVAL (operands[2]) < 32767\"\n   \"*\n@@ -5694,8 +5699,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sle_di_reg\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(le:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"register_operand\" \"d\")))]\n+\t(le:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t       (match_operand:DI 2 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE\"\n   \"slt\\\\t%0,%z2,%1\\;xori\\\\t%0,%0,0x0001\"\n   [(set_attr \"type\"\t\"arith\")\n@@ -5704,8 +5709,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(le:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"register_operand\" \"\")))]\n+\t(le:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n+\t       (match_operand:DI 2 \"se_register_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0)\n \t(lt:DI (match_dup 2)\n@@ -5753,8 +5758,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sgtu_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(gtu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"reg_or_0_operand\" \"dJ\")))]\n+\t(gtu:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_reg_or_0_operand\" \"dJ\")))]\n   \"TARGET_64BIT\"\n   \"sltu\\\\t%0,%z2,%1\"\n   [(set_attr \"type\"\t\"arith\")\n@@ -5809,8 +5814,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sgeu_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(geu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"arith_operand\" \"dI\")))]\n+\t(geu:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_arith_operand\" \"dI\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE\"\n   \"sltu\\\\t%0,%1,%2\\;xori\\\\t%0,%0,0x0001\"\n   [(set_attr \"type\"\t\"arith\")\n@@ -5819,8 +5824,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(geu:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"arith_operand\" \"\")))]\n+\t(geu:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n+\t\t(match_operand:DI 2 \"se_arith_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0)\n \t(ltu:DI (match_dup 1)\n@@ -5865,8 +5870,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sltu_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ltu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"arith_operand\" \"dI\")))]\n+\t(ltu:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_arith_operand\" \"dI\")))]\n   \"TARGET_64BIT\"\n   \"sltu\\\\t%0,%1,%2\"\n   [(set_attr \"type\"\t\"arith\")\n@@ -5915,7 +5920,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sleu_di_const\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(leu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t(leu:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n \t\t(match_operand:DI 2 \"small_int\" \"I\")))]\n   \"TARGET_64BIT && INTVAL (operands[2]) < 32767\"\n   \"*\n@@ -5952,8 +5957,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"sleu_di_reg\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(leu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n+\t(leu:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n+\t\t(match_operand:DI 2 \"se_register_operand\" \"d\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE\"\n   \"sltu\\\\t%0,%z2,%1\\;xori\\\\t%0,%0,0x0001\"\n   [(set_attr \"type\"\t\"arith\")\n@@ -5962,8 +5967,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(leu:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"\")))]\n+\t(leu:DI (match_operand:DI 1 \"se_register_operand\" \"\")\n+\t\t(match_operand:DI 2 \"se_register_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0)\n \t(ltu:DI (match_dup 2)\n@@ -6172,7 +6177,7 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"length\"\t\"1\")])\n \n (define_insn \"indirect_jump_internal2\"\n-  [(set (pc) (match_operand:DI 0 \"register_operand\" \"d\"))]\n+  [(set (pc) (match_operand:DI 0 \"se_register_operand\" \"d\"))]\n   \"TARGET_LONG64\"\n   \"%*j\\\\t%0\"\n   [(set_attr \"type\"\t\"jump\")\n@@ -6224,7 +6229,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"tablejump_internal2\"\n   [(set (pc)\n-\t(match_operand:DI 0 \"register_operand\" \"d\"))\n+\t(match_operand:DI 0 \"se_register_operand\" \"d\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"TARGET_LONG64\"\n   \"%*j\\\\t%0\"\n@@ -6265,7 +6270,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_expand \"tablejump_internal4\"\n   [(set (pc)\n-\t(plus:DI (match_operand:DI 0 \"register_operand\" \"d\")\n+\t(plus:DI (match_operand:DI 0 \"se_register_operand\" \"d\")\n \t\t (label_ref:DI (match_operand:SI 1 \"\" \"\"))))]\n   \"\"\n   \"\")\n@@ -6275,7 +6280,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"\"\n   [(set (pc)\n-\t(plus:DI (match_operand:DI 0 \"register_operand\" \"d\")\n+\t(plus:DI (match_operand:DI 0 \"se_register_operand\" \"d\")\n \t\t (label_ref:DI (match_operand:SI 1 \"\" \"\"))))]\n   \"TARGET_LONG64 && next_active_insn (insn) != 0\n    && GET_CODE (PATTERN (next_active_insn (insn))) == ADDR_DIFF_VEC\n@@ -6563,7 +6568,7 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"length\"\t\"1\")])\n \n (define_insn \"call_internal3b\"\n-  [(call (mem:DI (match_operand:DI 0 \"register_operand\" \"r\"))\n+  [(call (mem:DI (match_operand:DI 0 \"se_register_operand\" \"r\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n   \"TARGET_LONG64 && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n@@ -6589,7 +6594,7 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"length\"\t\"2\")])\n \n (define_insn \"call_internal4b\"\n-  [(call (mem:DI (match_operand:DI 0 \"register_operand\" \"r\"))\n+  [(call (mem:DI (match_operand:DI 0 \"se_register_operand\" \"r\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n   \"TARGET_LONG64 && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n@@ -6735,7 +6740,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"call_value_internal3b\"\n   [(set (match_operand 0 \"register_operand\" \"=df\")\n-        (call (mem:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n+        (call (mem:DI (match_operand:DI 1 \"se_register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n   \"TARGET_LONG64 && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n@@ -6763,7 +6768,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"call_value_internal4b\"\n   [(set (match_operand 0 \"register_operand\" \"=df\")\n-        (call (mem:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n+        (call (mem:DI (match_operand:DI 1 \"se_register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n   \"TARGET_LONG64 && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n@@ -6902,7 +6907,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n \t(if_then_else:SI\n \t (match_operator 4 \"equality_op\"\n-\t\t\t [(match_operand:DI 1 \"register_operand\" \"d,d\")\n+\t\t\t [(match_operand:DI 1 \"se_register_operand\" \"d,d\")\n \t\t\t  (const_int 0)])\n \t (match_operand:SI 2 \"reg_or_0_operand\" \"dJ,0\")\n \t (match_operand:SI 3 \"reg_or_0_operand\" \"0,dJ\")))]\n@@ -6935,8 +6940,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \t (match_operator 4 \"equality_op\"\n \t\t\t [(match_operand:SI 1 \"register_operand\" \"d,d\")\n \t\t\t  (const_int 0)])\n-\t (match_operand:DI 2 \"reg_or_0_operand\" \"dJ,0\")\n-\t (match_operand:DI 3 \"reg_or_0_operand\" \"0,dJ\")))]\n+\t (match_operand:DI 2 \"se_reg_or_0_operand\" \"dJ,0\")\n+\t (match_operand:DI 3 \"se_reg_or_0_operand\" \"0,dJ\")))]\n   \"mips_isa >= 4\"\n   \"@\n     mov%B4\\\\t%0,%z2,%1\n@@ -6948,10 +6953,10 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n \t(if_then_else:DI\n \t (match_operator 4 \"equality_op\"\n-\t\t\t [(match_operand:DI 1 \"register_operand\" \"d,d\")\n+\t\t\t [(match_operand:DI 1 \"se_register_operand\" \"d,d\")\n \t\t\t  (const_int 0)])\n-\t (match_operand:DI 2 \"reg_or_0_operand\" \"dJ,0\")\n-\t (match_operand:DI 3 \"reg_or_0_operand\" \"0,dJ\")))]\n+\t (match_operand:DI 2 \"se_reg_or_0_operand\" \"dJ,0\")\n+\t (match_operand:DI 3 \"se_reg_or_0_operand\" \"0,dJ\")))]\n   \"mips_isa >= 4\"\n   \"@\n     mov%B4\\\\t%0,%z2,%1\n@@ -6966,8 +6971,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \t\t\t\t\t\t\t    \"register_operand\"\n \t\t\t\t\t\t\t    \"z,z\")\n \t\t\t\t\t  (const_int 0)])\n-\t (match_operand:DI 1 \"reg_or_0_operand\" \"dJ,0\")\n-\t (match_operand:DI 2 \"reg_or_0_operand\" \"0,dJ\")))]\n+\t (match_operand:DI 1 \"se_reg_or_0_operand\" \"dJ,0\")\n+\t (match_operand:DI 2 \"se_reg_or_0_operand\" \"0,dJ\")))]\n   \"mips_isa >= 4 && TARGET_HARD_FLOAT\"\n   \"@\n     mov%T3\\\\t%0,%z1,%4\n@@ -7056,8 +7061,8 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n    (set (match_operand:DI 0 \"register_operand\" \"\")\n \t(if_then_else:DI (match_dup 5)\n-\t\t\t (match_operand:DI 2 \"reg_or_0_operand\" \"\")\n-\t\t\t (match_operand:DI 3 \"reg_or_0_operand\" \"\")))]\n+\t\t\t (match_operand:DI 2 \"se_reg_or_0_operand\" \"\")\n+\t\t\t (match_operand:DI 3 \"se_reg_or_0_operand\" \"\")))]\n   \"mips_isa >= 4\"\n   \"\n {"}]}