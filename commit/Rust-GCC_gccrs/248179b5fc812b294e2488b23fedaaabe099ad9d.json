{"sha": "248179b5fc812b294e2488b23fedaaabe099ad9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ4MTc5YjVmYzgxMmIyOTRlMjQ4OGIyM2ZlZGFhYWJlMDk5YWQ5ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-04T09:06:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-04T09:06:04Z"}, "message": "re PR tree-optimization/80281 (Wrong constant folding)\n\n2017-04-04  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/80281\n\t* match.pd (A + (-B) -> A - B): Make sure to preserve unsigned\n\tarithmetic done for the negate or the plus.  Simplify.\n\t(A - (-B) -> A + B): Likewise.\n\t* fold-const.c (split_tree): Make sure to not negate pointers.\n\n\t* gcc.dg/torture/pr80281.c: New testcase.\n\nFrom-SVN: r246674", "tree": {"sha": "46598b536dd7896cb9ef0ba26970bcac31af8696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46598b536dd7896cb9ef0ba26970bcac31af8696"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/248179b5fc812b294e2488b23fedaaabe099ad9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248179b5fc812b294e2488b23fedaaabe099ad9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248179b5fc812b294e2488b23fedaaabe099ad9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248179b5fc812b294e2488b23fedaaabe099ad9d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a577fcf2d5ec9695efb5c086fd328cf378289a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a577fcf2d5ec9695efb5c086fd328cf378289a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a577fcf2d5ec9695efb5c086fd328cf378289a55"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "eceada15c3663f7f77705ac73790a1ef456c6df1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=248179b5fc812b294e2488b23fedaaabe099ad9d", "patch": "@@ -1,3 +1,11 @@\n+2017-04-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/80281\n+\t* match.pd (A + (-B) -> A - B): Make sure to preserve unsigned\n+\tarithmetic done for the negate or the plus.  Simplify.\n+\t(A - (-B) -> A + B): Likewise.\n+\t* fold-const.c (split_tree): Make sure to not negate pointers.\n+\n 2017-04-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/60818"}, {"sha": "b4c117c84948f6994c2ac0354b76ce8d393eb2b4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=248179b5fc812b294e2488b23fedaaabe099ad9d", "patch": "@@ -831,8 +831,12 @@ split_tree (location_t loc, tree in, tree type, enum tree_code code,\n       /* Now do any needed negations.  */\n       if (neg_litp_p)\n \t*minus_litp = *litp, *litp = 0;\n-      if (neg_conp_p)\n-\t*conp = negate_expr (*conp);\n+      if (neg_conp_p && *conp)\n+\t{\n+\t  /* Convert to TYPE before negating.  */\n+\t  *conp = fold_convert_loc (loc, type, *conp);\n+\t  *conp = negate_expr (*conp);\n+\t}\n       if (neg_var_p && var)\n \t{\n \t  /* Convert to TYPE before negating.  */\n@@ -859,7 +863,12 @@ split_tree (location_t loc, tree in, tree type, enum tree_code code,\n \t*minus_litp = *litp, *litp = 0;\n       else if (*minus_litp)\n \t*litp = *minus_litp, *minus_litp = 0;\n-      *conp = negate_expr (*conp);\n+      if (*conp)\n+\t{\n+\t  /* Convert to TYPE before negating.  */\n+\t  *conp = fold_convert_loc (loc, type, *conp);\n+\t  *conp = negate_expr (*conp);\n+\t}\n       if (var)\n \t{\n \t  /* Convert to TYPE before negating.  */"}, {"sha": "357797877c868bd3985ab5f2e283a3431a5337a7", "filename": "gcc/match.pd", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=248179b5fc812b294e2488b23fedaaabe099ad9d", "patch": "@@ -1148,19 +1148,31 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  /* Contract negates.  */\n  /* A + (-B) -> A - B */\n  (simplify\n-  (plus:c (convert1? @0) (convert2? (negate @1)))\n-  /* Apply STRIP_NOPS on @0 and the negate.  */\n-  (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n-       && tree_nop_conversion_p (type, TREE_TYPE (@1))\n+  (plus:c @0 (convert? (negate @1)))\n+  /* Apply STRIP_NOPS on the negate.  */\n+  (if (tree_nop_conversion_p (type, TREE_TYPE (@1))\n        && !TYPE_OVERFLOW_SANITIZED (type))\n-   (minus (convert @0) (convert @1))))\n+   (with\n+    {\n+     tree t1 = type;\n+     if (INTEGRAL_TYPE_P (type)\n+\t && TYPE_OVERFLOW_WRAPS (type) != TYPE_OVERFLOW_WRAPS (TREE_TYPE (@1)))\n+       t1 = TYPE_OVERFLOW_WRAPS (type) ? type : TREE_TYPE (@1);\n+    }\n+    (convert (minus (convert:t1 @0) (convert:t1 @1))))))\n  /* A - (-B) -> A + B */\n  (simplify\n-  (minus (convert1? @0) (convert2? (negate @1)))\n-  (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n-       && tree_nop_conversion_p (type, TREE_TYPE (@1))\n+  (minus @0 (convert? (negate @1)))\n+  (if (tree_nop_conversion_p (type, TREE_TYPE (@1))\n        && !TYPE_OVERFLOW_SANITIZED (type))\n-   (plus (convert @0) (convert @1))))\n+   (with\n+    {\n+     tree t1 = type;\n+     if (INTEGRAL_TYPE_P (type)\n+\t && TYPE_OVERFLOW_WRAPS (type) != TYPE_OVERFLOW_WRAPS (TREE_TYPE (@1)))\n+       t1 = TYPE_OVERFLOW_WRAPS (type) ? type : TREE_TYPE (@1);\n+    }\n+    (convert (plus (convert:t1 @0) (convert:t1 @1))))))\n  /* -(-A) -> A */\n  (simplify\n   (negate (convert? (negate @1)))"}, {"sha": "8d7418cd36642702dfa2cdcf6a8b9513cd3ab208", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=248179b5fc812b294e2488b23fedaaabe099ad9d", "patch": "@@ -1,3 +1,8 @@\n+2017-04-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/80281\n+\t* gcc.dg/torture/pr80281.c: New testcase.\n+\n 2017-04-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80275"}, {"sha": "bff4f6e60a8841542b9f3a7e7d7013c6cc833d59", "filename": "gcc/testsuite/gcc.dg/torture/pr80281.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248179b5fc812b294e2488b23fedaaabe099ad9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80281.c?ref=248179b5fc812b294e2488b23fedaaabe099ad9d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-run } */\n+/* { dg-require-effective-target int32plus } */\n+\n+int\n+main ()\n+{\n+  volatile int a = 0;\n+  long long b = 2147483648LL;\n+  int c = a % 2;\n+  int x = ((int) -b + c) % -2147483647;\n+  if (x != -1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}