{"sha": "aed0f014781ee334921030d4b86e295bd1080b96", "node_id": "C_kwDOANBUbNoAKGFlZDBmMDE0NzgxZWUzMzQ5MjEwMzBkNGI4NmUyOTViZDEwODBiOTY", "commit": {"author": {"name": "Petter Tomner", "email": "tomner@kth.se", "date": "2022-02-19T15:34:12Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-01T13:17:00Z"}, "message": "jit: Update docs\n\nUpdate docs concerning linking and fix formatting errors.\n\ngcc/jit/ChangeLog:\n\t* docs/topics/compatibility.rst: Add 19 tag\n\t* docs/topics/compilation.rst: Linking\n\t* docs/topics/contexts.rst: Linking example\n\t* docs/topics/expressions.rst: Fix formatting and dropped 's'\n\nSigned-off-by: Petter Tomner\t2022-02-19\t<tomner@kth.se>", "tree": {"sha": "b3e00716d6354e2d7b0c2d4214621b6c72f913c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e00716d6354e2d7b0c2d4214621b6c72f913c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aed0f014781ee334921030d4b86e295bd1080b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed0f014781ee334921030d4b86e295bd1080b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed0f014781ee334921030d4b86e295bd1080b96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed0f014781ee334921030d4b86e295bd1080b96/comments", "author": {"login": "pvilhelm", "id": 2867017, "node_id": "MDQ6VXNlcjI4NjcwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2867017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvilhelm", "html_url": "https://github.com/pvilhelm", "followers_url": "https://api.github.com/users/pvilhelm/followers", "following_url": "https://api.github.com/users/pvilhelm/following{/other_user}", "gists_url": "https://api.github.com/users/pvilhelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvilhelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvilhelm/subscriptions", "organizations_url": "https://api.github.com/users/pvilhelm/orgs", "repos_url": "https://api.github.com/users/pvilhelm/repos", "events_url": "https://api.github.com/users/pvilhelm/events{/privacy}", "received_events_url": "https://api.github.com/users/pvilhelm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "babaabbcc8346758be0051b32272da18d54f5eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babaabbcc8346758be0051b32272da18d54f5eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/babaabbcc8346758be0051b32272da18d54f5eea"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "03e3f3402a1e954580bac7a6c5ad67e9eedb7824", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed0f014781ee334921030d4b86e295bd1080b96/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed0f014781ee334921030d4b86e295bd1080b96/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=aed0f014781ee334921030d4b86e295bd1080b96", "patch": "@@ -302,3 +302,15 @@ thread-local storage model of a variable:\n section of a variable:\n \n   * :func:`gcc_jit_lvalue_set_link_section`\n+\n+.. _LIBGCCJIT_ABI_19:\n+\n+``LIBGCCJIT_ABI_19``\n+-----------------------\n+``LIBGCCJIT_ABI_19`` covers the addition of API entrypoints to set the initial value\n+of a global with an rvalue and to use constructors:\n+\n+  * :func:`gcc_jit_context_new_array_constructor`\n+  * :func:`gcc_jit_context_new_struct_constructor`\n+  * :func:`gcc_jit_context_new_union_constructor`\n+  * :func:`gcc_jit_global_set_initializer_rvalue`"}, {"sha": "9b1eed2dede2889a142d78784cfda62ca7bd9777", "filename": "gcc/jit/docs/topics/compilation.rst", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed0f014781ee334921030d4b86e295bd1080b96/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed0f014781ee334921030d4b86e295bd1080b96/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst?ref=aed0f014781ee334921030d4b86e295bd1080b96", "patch": "@@ -146,6 +146,8 @@ can also be used for implementing more traditional ahead-of-time\n compilers, via the :c:func:`gcc_jit_context_compile_to_file`\n API entrypoint.\n \n+For linking in object files, use :c:func:`gcc_jit_context_add_driver_option`.\n+\n .. function:: void \\\n               gcc_jit_context_compile_to_file (gcc_jit_context *ctxt, \\\n                                                enum gcc_jit_output_kind output_kind,\\\n@@ -188,12 +190,6 @@ Output kind                                     Typical suffix\n \n    Compile the context to a dynamic library.\n \n-   There is currently no support for specifying other libraries to link\n-   against.\n-\n .. c:macro:: GCC_JIT_OUTPUT_KIND_EXECUTABLE\n \n    Compile the context to an executable.\n-\n-   There is currently no support for specifying libraries to link\n-   against."}, {"sha": "14ee57e2e54e548ca49c767973a0f71c8084f1b8", "filename": "gcc/jit/docs/topics/contexts.rst", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed0f014781ee334921030d4b86e295bd1080b96/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed0f014781ee334921030d4b86e295bd1080b96/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst?ref=aed0f014781ee334921030d4b86e295bd1080b96", "patch": "@@ -569,6 +569,11 @@ Additional command-line options\n       gcc_jit_context_add_driver_option (ctxt, \"-lm\");\n       gcc_jit_context_add_driver_option (ctxt, \"-fuse-linker-plugin\");\n \n+      gcc_jit_context_add_driver_option (ctxt, \"obj.o\");\n+\n+      gcc_jit_context_add_driver_option (ctxt, \"-L.\");\n+      gcc_jit_context_add_driver_option (ctxt, \"-lwhatever\");\n+\n    Note that only some options are likely to be meaningful; there is no\n    \"frontend\" within libgccjit, so typically only those affecting\n    assembler and linker are likely to be useful."}, {"sha": "9267b6d2ad69bc2335636765d62d0157c8c5a0ee", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed0f014781ee334921030d4b86e295bd1080b96/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed0f014781ee334921030d4b86e295bd1080b96/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=aed0f014781ee334921030d4b86e295bd1080b96", "patch": "@@ -152,6 +152,7 @@ Constructor expressions\n    their presence using:\n \n    .. code-block:: c\n+\n      #ifdef LIBGCCJIT_HAVE_CTORS\n \n .. function:: gcc_jit_rvalue *\\\n@@ -186,6 +187,7 @@ Constructor expressions\n    presence using:\n \n    .. code-block:: c\n+\n      #ifdef LIBGCCJIT_HAVE_CTORS\n \n .. function:: gcc_jit_rvalue *\\\n@@ -194,7 +196,7 @@ Constructor expressions\n \t\t\t\t\t\t      gcc_jit_type *type,\\\n \t\t\t\t\t\t      size_t num_values,\\\n \t\t\t\t\t\t      gcc_jit_field **fields,\\\n-\t\t\t\t\t\t      gcc_jit_rvalue **value)\n+\t\t\t\t\t\t      gcc_jit_rvalue **values)\n \n \n    Create a constructor for a struct as an rvalue.\n@@ -235,6 +237,7 @@ Constructor expressions\n    presence using:\n \n    .. code-block:: c\n+\n      #ifdef LIBGCCJIT_HAVE_CTORS\n \n .. function:: gcc_jit_rvalue *\\\n@@ -265,6 +268,7 @@ Constructor expressions\n    presence using:\n \n    .. code-block:: c\n+\n      #ifdef LIBGCCJIT_HAVE_CTORS\n \n Vector expressions\n@@ -803,14 +807,14 @@ Global variables\n       #ifdef LIBGCCJIT_HAVE_gcc_jit_global_set_initializer\n \n .. function:: gcc_jit_lvalue *\\\n-\t      gcc_jit_global_set_initializer_rvalue (gcc_jit_lvalue *global,\n+\t      gcc_jit_global_set_initializer_rvalue (gcc_jit_lvalue *global,\\\n \t                                             gcc_jit_rvalue *init_value)\n \n    Set the initial value of a global with an rvalue.\n \n    The rvalue needs to be a constant expression, e.g. no function calls.\n \n-   The global can't have the ``kind`` :ref:`GCC_JIT_GLOBAL_IMPORTED`.\n+   The global can't have the ``kind`` :c:macro:`GCC_JIT_GLOBAL_IMPORTED`.\n \n    As a non-comprehensive example it is OK to do the equivalent of:\n \n@@ -822,8 +826,9 @@ Global variables\n        const int baz = 3; /* rvalue from gcc_jit_context_rvalue_from_int.  */\n        int boz = baz; /* rvalue from gcc_jit_lvalue_as_rvalue.  */\n \n-   Use together with :ref:`gcc_jit_context_new_constructor` to\n-   initialize structs, unions and arrays.\n+   Use together with :c:func:`gcc_jit_context_new_struct_constructor`,\n+   :c:func:`gcc_jit_context_new_union_constructor`, :c:func:`gcc_jit_context_new_array_constructor`\n+   to initialize structs, unions and arrays.\n \n    On success, returns the ``global`` parameter unchanged. Otherwise, ``NULL``.\n "}]}