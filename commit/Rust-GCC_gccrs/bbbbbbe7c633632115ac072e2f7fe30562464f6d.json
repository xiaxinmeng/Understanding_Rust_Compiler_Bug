{"sha": "bbbbbbe7c633632115ac072e2f7fe30562464f6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJiYmJiZTdjNjMzNjMyMTE1YWMwNzJlMmY3ZmUzMDU2MjQ2NGY2ZA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2003-11-12T07:24:25Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-11-12T07:24:25Z"}, "message": "reload1.c (reload): Verify that addresses for reg_equiv_* are valid for the architecture.\n\n2003-11-11  Eric Christopher  <echristo@redhat.com>\n\n        * reload1.c (reload): Verify that addresses for\n        reg_equiv_* are valid for the architecture.\n\nFrom-SVN: r73487", "tree": {"sha": "9f068397ade5ba53706ce72388df6c3b14571033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f068397ade5ba53706ce72388df6c3b14571033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbbbbbe7c633632115ac072e2f7fe30562464f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbbbbe7c633632115ac072e2f7fe30562464f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbbbbbe7c633632115ac072e2f7fe30562464f6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbbbbe7c633632115ac072e2f7fe30562464f6d/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9d52373f85b16816d9068bd855df229f4be8d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d52373f85b16816d9068bd855df229f4be8d4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d52373f85b16816d9068bd855df229f4be8d4b"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "a749add7ee860a0f54d3e2bd944296cc0a9e5f10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbbbbe7c633632115ac072e2f7fe30562464f6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbbbbe7c633632115ac072e2f7fe30562464f6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbbbbbe7c633632115ac072e2f7fe30562464f6d", "patch": "@@ -1,3 +1,8 @@\n+2003-11-11  Eric Christopher  <echristo@redhat.com>\n+\n+\t* reload1.c (reload): Verify that addresses for\n+\treg_equiv_* are valid for the architecture.\n+\n 2003-11-11  Eric Christopher  <echristo@redhat.com>\n \n \t* function.c (purge_addressof_1): Add libcall check."}, {"sha": "7bfc142ba954ebe62f40a2d56a303233cf95cbf4", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbbbbe7c633632115ac072e2f7fe30562464f6d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbbbbe7c633632115ac072e2f7fe30562464f6d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=bbbbbbe7c633632115ac072e2f7fe30562464f6d", "patch": "@@ -774,6 +774,12 @@ reload (rtx first, int global)\n \t\t\t    = force_const_mem (GET_MODE (SET_DEST (set)), x);\n \t\t\t  if (!reg_equiv_memory_loc[i])\n \t\t\t    continue;\n+\t\t\t  /* As above. Later passes of reload assume that\n+\t\t\t     all addresses found in the reg_equiv_* arrays\n+\t\t\t     were originally legitimate.  */\n+\t\t\t  if (!memory_operand (reg_equiv_memory_loc[i], VOIDmode))\n+\t\t\t    reg_equiv_memory_loc[i] = NULL_RTX;\n+\n \t\t\t}\n \t\t    }\n \t\t  else"}]}