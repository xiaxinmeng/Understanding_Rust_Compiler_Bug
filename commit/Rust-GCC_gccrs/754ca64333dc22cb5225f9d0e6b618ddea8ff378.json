{"sha": "754ca64333dc22cb5225f9d0e6b618ddea8ff378", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU0Y2E2NDMzM2RjMjJjYjUyMjVmOWQwZTZiNjE4ZGRlYThmZjM3OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-09T17:53:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-09T17:53:37Z"}, "message": "* [various.C]: Adjust for C++11 mode.\n\nFrom-SVN: r181221", "tree": {"sha": "32bf140d1539df4735202b5ce420756dd9ec6c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32bf140d1539df4735202b5ce420756dd9ec6c19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/754ca64333dc22cb5225f9d0e6b618ddea8ff378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754ca64333dc22cb5225f9d0e6b618ddea8ff378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754ca64333dc22cb5225f9d0e6b618ddea8ff378", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754ca64333dc22cb5225f9d0e6b618ddea8ff378/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc3e284b718091979f7c9d21aad2033855caeb41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc3e284b718091979f7c9d21aad2033855caeb41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc3e284b718091979f7c9d21aad2033855caeb41"}], "stats": {"total": 106, "additions": 89, "deletions": 17}, "files": [{"sha": "737a614a3133f442dfc2d5a64ddf7fd6354df3b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -1,5 +1,26 @@\n 2011-11-09  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/eh/new1.C: Adjust for C++11 mode.\n+\t* g++.dg/init/new11.C: Likewise.\n+\t* g++.dg/init/pr29571.C: Likewise.\n+\t* g++.dg/lookup/forscope2.C: Likewise.\n+\t* g++.dg/parse/linkage1.C: Likewise.\n+\t* g++.dg/parse/typedef8.C: Likewise.\n+\t* g++.dg/template/error44.C: Likewise.\n+\t* g++.dg/tls/diag-2.C: Likewise.\n+\t* g++.dg/tls/diag-4.C: Likewise.\n+\t* g++.dg/warn/anonymous-namespace-3.C: Likewise.\n+\t* g++.old-deja/g++.abi/arraynew.C: Likewise.\n+\t* g++.old-deja/g++.abi/cxa_vec.C: Likewise.\n+\t* g++.old-deja/g++.brendan/new3.C: Likewise.\n+\t* g++.old-deja/g++.eh/new1.C: Likewise.\n+\t* g++.old-deja/g++.eh/new2.C: Likewise.\n+\t* g++.old-deja/g++.jason/new.C: Likewise.\n+\t* g++.old-deja/g++.law/friend1.C: Likewise.\n+\t* g++.old-deja/g++.mike/net46.C: Likewise.\n+\t* g++.old-deja/g++.mike/p755.C: Likewise.\n+\t* g++.old-deja/g++.other/new6.C: Likewise.\n+\n \t* g++.dg/cpp0x/variadic74.C: Adjust diags.\n \t* g++.dg/template/crash53.C: Likewise.\n \t* g++.dg/template/void9.C: Likewise."}, {"sha": "3126f192e18871474cdcaa66918a3cf15f894177", "filename": "gcc/testsuite/g++.dg/eh/new1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnew1.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -9,7 +9,10 @@\n int ret = 1;\n \n void *ptr;\n-void * operator new[] (std::size_t s) throw (std::bad_alloc)\n+void * operator new[] (std::size_t s)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n {\n   ptr = operator new (s);\n   return ptr;"}, {"sha": "a13f262aa64ab75674837fadf96ed6932e3cbed1", "filename": "gcc/testsuite/g++.dg/init/new11.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew11.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -5,7 +5,11 @@\n #include <new>\n \n bool abort_new;\n-void *operator new[](size_t bytes) throw (std::bad_alloc) { \n+void *operator new[](size_t bytes)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n+{\n   if (abort_new)\n     abort(); \n   return operator new (bytes);"}, {"sha": "d0dc678cf3e55181d827b2c7303a22c4cffe90f3", "filename": "gcc/testsuite/g++.dg/init/pr29571.C", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29571.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29571.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr29571.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -3,6 +3,11 @@\n struct A\n {\n   static const int i = 0/0 + \"\"; // { dg-warning \"division by zero\" }\n-  // { dg-error \"field initializer is not constant|not a constant-expression\" \"\" { target *-*-* } 5 }\n+  // { dg-error \"constant|conversion|initializ\" \"\" { target *-*-* } 5 }\n   static const int j = int(i);\n };\n+\n+// Currently G++ complains about a non-constant initializer for 'j' in\n+// C++11 mode, but not C++98.  Either way is correct because it depends on\n+// the erroneous initializer for i, so don't require the error.\n+// { dg-prune-output \":7:\" }"}, {"sha": "882f102a7f206713b46d5a31e9a4b7324231e1a4", "filename": "gcc/testsuite/g++.dg/lookup/forscope2.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fforscope2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fforscope2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fforscope2.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -7,3 +7,5 @@ struct S {\n     }\n };\n \n+// It's OK to error or not on line 6.\n+// { dg-prune-output \":6:\" }"}, {"sha": "5a534251f98b9afee04a2e6de561fd733b3f9aac", "filename": "gcc/testsuite/g++.dg/parse/linkage1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flinkage1.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -1,6 +1,6 @@\n // PR c++/26068\n \n-extern \"C\" auto int a; // { dg-error \"linkage\" }\n+extern \"C\" auto int a; // { dg-error \"linkage|two or more data types\" }\n extern \"C\" register int b; // { dg-error \"linkage\" }\n extern \"C\" static void c(); // { dg-error \"linkage\" }\n extern \"C\" extern void d(); // { dg-error \"linkage\" }"}, {"sha": "4c1823e87b97b35eec602a2d48a7c444bffb85ac", "filename": "gcc/testsuite/g++.dg/parse/typedef8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef8.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -7,5 +7,5 @@ static typedef int a;   // { dg-error \"conflicting\" }\n \n int foo()\n {\n-  typedef auto int bar; // { dg-error \"conflicting\" }\n+  typedef auto int bar; // { dg-error \"conflicting|two or more data types\" }\n }"}, {"sha": "51053b2d8db4a4fbbd202cccb60d4079e3ead1fd", "filename": "gcc/testsuite/g++.dg/template/error44.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror44.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -1,6 +1,6 @@\n // PR c++/32056\n \n-template <auto int T> struct A {}; // { dg-error \"storage class specified\" }\n+template <auto int T> struct A {}; // { dg-error \"storage class specified|two or more\" }\n template <extern int T> struct B {}; // { dg-error \"storage class specified\" }\n template <static int T> struct C {}; // { dg-error \"storage class specified\" }\n template <register int T> struct D {}; // { dg-error \"storage class specified\" }"}, {"sha": "b5d02e7fe12bc340f86a5a397f578ef826ef2729", "filename": "gcc/testsuite/g++.dg/tls/diag-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -9,7 +9,7 @@ typedef __thread int g4;\t/* { dg-error \"multiple storage classes\" } */\n void foo()\n {\n   __thread int l1;\t\t/* { dg-error \"implicitly auto and declared '__thread'\" } */\n-  auto __thread int l2;\t\t/* { dg-error \"multiple storage classes\" } */\n+  auto __thread int l2;\t\t/* { dg-error \"multiple storage classes|data types\" } */\n   __thread extern int l3;\t/* { dg-error \"'__thread' before 'extern'\" } */\n   register __thread int l4;\t/* { dg-error \"multiple storage classes\" } */\n }"}, {"sha": "7d07d9deb2d92341745823c8af011973546eaf47", "filename": "gcc/testsuite/g++.dg/tls/diag-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-4.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -5,6 +5,6 @@ __thread typedef int g4;\t/* { dg-error \"multiple storage classes\" } */\n \n void foo()\n {\n-  __thread auto int l2;\t\t/* { dg-error \"multiple storage classes\" } */\n+  __thread auto int l2;\t\t/* { dg-error \"multiple storage classes|data types\" } */\n   __thread register int l4;\t/* { dg-error \"multiple storage classes\" } */\n }"}, {"sha": "8b72abdf5d1dfaecf179ddddd5d9885e12eb074b", "filename": "gcc/testsuite/g++.dg/warn/anonymous-namespace-3.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fanonymous-namespace-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fanonymous-namespace-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fanonymous-namespace-3.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -11,3 +11,5 @@ struct C\t\t   // { dg-warning \"uses the anonymous namespace\" }\n {\n   std::auto_ptr<A> p;\n };\n+\n+// { dg-prune-output \"auto_ptr. is deprecated\" }"}, {"sha": "7efea818be0ccbadde5bc73651b3faab85d6b703", "filename": "gcc/testsuite/g++.old-deja/g++.abi/arraynew.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Farraynew.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Farraynew.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Farraynew.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -8,7 +8,10 @@\n \n void* p;\n \n-void* operator new[](size_t s) throw (std::bad_alloc)\n+void* operator new[](size_t s)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n {\n   // Record the base of the last array allocated.\n   p = malloc (s);"}, {"sha": "8d098bffca852c4fe1b185f7934ab10aead40aa3", "filename": "gcc/testsuite/g++.old-deja/g++.abi/cxa_vec.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -54,7 +54,10 @@ static abi::__cxa_cdtor_return_type dtor (void *x)\n \n // track new and delete\n static int blocks = 0;\n-void *operator new[] (std::size_t size) throw (std::bad_alloc)\n+void *operator new[] (std::size_t size)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n {\n   void *ptr = malloc (size);\n   "}, {"sha": "55c7dbbb37f913f4270e6a42692bd49d4b72c247", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/new3.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -12,7 +12,11 @@\n \n int pass = 0;\n \n-void *operator new(size_t sz) throw (std::bad_alloc) {\n+void *operator new(size_t sz)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n+{\n \n   void *p;\n "}, {"sha": "e206f5bc853ff678182ac9e2695c718b1aed656f", "filename": "gcc/testsuite/g++.old-deja/g++.eh/new1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew1.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -32,7 +32,10 @@ A::~A() { created = 0; }\n B::B(A) { }\n void foo (B*) { throw 1; }\n \n-void* operator new (size_t size) throw (std::bad_alloc)\n+void* operator new (size_t size)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n {\n   ++newed;\n   return (void *) std::malloc (size);"}, {"sha": "d5fd74bcf729ba7c8b269314991a3645e9a19b45", "filename": "gcc/testsuite/g++.old-deja/g++.eh/new2.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fnew2.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -33,7 +33,10 @@ A::~A() { created = 0; }\n B::B(A) { throw 1; }\n void foo (B*) { }\n \n-void* operator new (size_t size) throw (std::bad_alloc)\n+void* operator new (size_t size)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n {\n   ++newed;\n   return (void *) std::malloc (size);"}, {"sha": "5f50d2ad99ac9c135b58e8bd150d1441dfe7514f", "filename": "gcc/testsuite/g++.old-deja/g++.jason/new.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fnew.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fnew.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fnew.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -6,7 +6,11 @@ extern \"C\" int printf (const char *, ...);\n extern \"C\" void *malloc (std::size_t);\n std::size_t s;\n \n-void * operator new (std::size_t siz) throw (std::bad_alloc) {\n+void * operator new (std::size_t siz)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n+{\n   if (s == 0)\n     s = siz;\n   else"}, {"sha": "aed9bd534053752dbc5a6512988389d37262889c", "filename": "gcc/testsuite/g++.old-deja/g++.law/friend1.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ffriend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ffriend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ffriend1.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -9,7 +9,11 @@\n #include <stddef.h>\n #include <new>\n struct Foo {\n+#if __cplusplus <= 199711L\n   friend void* operator new(size_t) throw (std::bad_alloc);\n+#else\n+  friend void* operator new(size_t);\n+#endif\n   friend void operator delete(void*) throw ();\n   Foo();\n   ~Foo();"}, {"sha": "a2362325452d64ce72a2244f38ca56256644ddce", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net46.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet46.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -8,7 +8,11 @@ int fail = 1;\n \n int in_main = 0;\n \n-void *operator new(size_t size) throw (std::bad_alloc) {\n+void *operator new(size_t size)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n+{\n   if (!in_main) return malloc (size);\n   --fail;\n   return (void*) 0;"}, {"sha": "ee6198dfb6cfe9c56f6ce59d2f4c2e6d9666158c", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p755.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp755.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp755.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp755.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -6,7 +6,11 @@\n \n extern \"C\" void _exit(int);\n \n-void* operator new(std::size_t sz) throw (std::bad_alloc) {\n+void* operator new(std::size_t sz)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n+{\n   void* p = 0;\n   _exit(0);\n   return p;"}, {"sha": "7013337b21be599dd9dad13d0db8a8152efd67a3", "filename": "gcc/testsuite/g++.old-deja/g++.other/new6.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754ca64333dc22cb5225f9d0e6b618ddea8ff378/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew6.C?ref=754ca64333dc22cb5225f9d0e6b618ddea8ff378", "patch": "@@ -8,7 +8,10 @@ extern \"C\" void *malloc (size_t);\n int special;\n int space = 0xdeadbeef;\n \n-void *operator new (size_t size) throw (bad_alloc)\n+void *operator new (size_t size)\n+#if __cplusplus <= 199711L\n+  throw (std::bad_alloc)\n+#endif\n {\n   if (special)\n     return &space;"}]}