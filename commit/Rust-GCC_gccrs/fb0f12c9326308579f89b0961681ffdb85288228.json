{"sha": "fb0f12c9326308579f89b0961681ffdb85288228", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwZjEyYzkzMjYzMDg1NzlmODliMDk2MTY4MWZmZGI4NTI4ODIyOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-05-12T16:10:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-05-12T16:10:02Z"}, "message": "tinfo.cc: Revert my 2000-05-08 and 2000-05-07 changes.\n\n\t* tinfo.cc: Revert my 2000-05-08 and 2000-05-07 changes.\n\t* vec.cc: Revert my 2000-05-07 change.\n\nFrom-SVN: r33875", "tree": {"sha": "52df7af40a0fa59b4bbdd0b2c7e31bc28d54b4ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52df7af40a0fa59b4bbdd0b2c7e31bc28d54b4ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb0f12c9326308579f89b0961681ffdb85288228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0f12c9326308579f89b0961681ffdb85288228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0f12c9326308579f89b0961681ffdb85288228", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0f12c9326308579f89b0961681ffdb85288228/comments", "author": null, "committer": null, "parents": [{"sha": "cfc9d1eecce3766b6a2bc94352a3ac6523f3b150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc9d1eecce3766b6a2bc94352a3ac6523f3b150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc9d1eecce3766b6a2bc94352a3ac6523f3b150"}], "stats": {"total": 74, "additions": 39, "deletions": 35}, "files": [{"sha": "e1ecb4729d61ae97a869cecc3a15c8ab8096fef4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0f12c9326308579f89b0961681ffdb85288228/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0f12c9326308579f89b0961681ffdb85288228/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb0f12c9326308579f89b0961681ffdb85288228", "patch": "@@ -1,3 +1,8 @@\n+2000-05-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tinfo.cc: Revert my 2000-05-08 and 2000-05-07 changes.\n+\t* vec.cc: Revert my 2000-05-07 change.\n+\n 2000-05-11  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* class.c (check_field_decls): Complain about non-static data"}, {"sha": "ec2d26209d095eab710fa62b59405a3e9c756bb1", "filename": "gcc/cp/tinfo.cc", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0f12c9326308579f89b0961681ffdb85288228/gcc%2Fcp%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0f12c9326308579f89b0961681ffdb85288228/gcc%2Fcp%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo.cc?ref=fb0f12c9326308579f89b0961681ffdb85288228", "patch": "@@ -579,14 +579,14 @@ using namespace abi;\n // initial part of a vtable, this structure is used with offsetof, so we don't\n // have to keep alignments consistent manually.\n struct vtable_prefix {\n-  __PTRDIFF_TYPE__ whole_object;           // offset to most derived object\n+  ptrdiff_t whole_object;           // offset to most derived object\n   const __class_type_info *whole_type;  // pointer to most derived type_info\n   const void *origin;               // what a class's vptr points to\n };\n \n template <typename T>\n inline const T *\n-adjust_pointer (const void *base, __PTRDIFF_TYPE__ offset)\n+adjust_pointer (const void *base, ptrdiff_t offset)\n {\n   return reinterpret_cast <const T *>\n     (reinterpret_cast <const char *> (base) + offset);\n@@ -595,13 +595,13 @@ adjust_pointer (const void *base, __PTRDIFF_TYPE__ offset)\n // ADDR is a pointer to an object.  Convert it to a pointer to a base,\n // using OFFSET. IS_VIRTUAL is true, if we are getting a virtual base.\n inline void const *\n-convert_to_base (void const *addr, bool is_virtual, __PTRDIFF_TYPE__ offset)\n+convert_to_base (void const *addr, bool is_virtual, ptrdiff_t offset)\n {\n   if (is_virtual)\n     {\n       const void *vtable = *static_cast <const void *const *> (addr);\n       \n-      offset = *adjust_pointer<__PTRDIFF_TYPE__> (vtable, offset);\n+      offset = *adjust_pointer<ptrdiff_t> (vtable, offset);\n     }\n \n   return adjust_pointer<void> (addr, offset);\n@@ -716,7 +716,7 @@ __do_upcast (const __class_type_info *dst_type,\n }\n \n inline __class_type_info::__sub_kind __class_type_info::\n-__find_public_src (__PTRDIFF_TYPE__ src2dst,\n+__find_public_src (ptrdiff_t src2dst,\n                    const void *obj_ptr,\n                    const __class_type_info *src_type,\n                    const void *src_ptr) const\n@@ -730,7 +730,7 @@ __find_public_src (__PTRDIFF_TYPE__ src2dst,\n }\n \n __class_type_info::__sub_kind __class_type_info::\n-__do_find_public_src (__PTRDIFF_TYPE__,\n+__do_find_public_src (ptrdiff_t,\n                       const void *obj_ptr,\n                       const __class_type_info *,\n                       const void *src_ptr) const\n@@ -742,7 +742,7 @@ __do_find_public_src (__PTRDIFF_TYPE__,\n }\n \n __class_type_info::__sub_kind __si_class_type_info::\n-__do_find_public_src (__PTRDIFF_TYPE__ src2dst,\n+__do_find_public_src (ptrdiff_t src2dst,\n                       const void *obj_ptr,\n                       const __class_type_info *src_type,\n                       const void *src_ptr) const\n@@ -753,21 +753,21 @@ __do_find_public_src (__PTRDIFF_TYPE__ src2dst,\n }\n \n __class_type_info::__sub_kind __vmi_class_type_info::\n-__do_find_public_src (__PTRDIFF_TYPE__ src2dst,\n+__do_find_public_src (ptrdiff_t src2dst,\n                       const void *obj_ptr,\n                       const __class_type_info *src_type,\n                       const void *src_ptr) const\n {\n   if (obj_ptr == src_ptr && *this == *src_type)\n     return __contained_public;\n   \n-  for (__SIZE_TYPE__ i = vmi_base_count; i--;)\n+  for (size_t i = vmi_base_count; i--;)\n     {\n       if (!vmi_bases[i].__is_public_p ())\n         continue; // Not public, can't be here.\n       \n       const void *base = obj_ptr;\n-      __PTRDIFF_TYPE__ offset = vmi_bases[i].__offset ();\n+      ptrdiff_t offset = vmi_bases[i].__offset ();\n       bool is_virtual = vmi_bases[i].__is_virtual_p ();\n       \n       if (is_virtual)\n@@ -791,7 +791,7 @@ __do_find_public_src (__PTRDIFF_TYPE__ src2dst,\n }\n \n bool __class_type_info::\n-__do_dyncast (__PTRDIFF_TYPE__,\n+__do_dyncast (ptrdiff_t,\n               __sub_kind access_path,\n               const __class_type_info *dst_type,\n               const void *obj_ptr,\n@@ -817,7 +817,7 @@ __do_dyncast (__PTRDIFF_TYPE__,\n }\n \n bool __si_class_type_info::\n-__do_dyncast (__PTRDIFF_TYPE__ src2dst,\n+__do_dyncast (ptrdiff_t src2dst,\n               __sub_kind access_path,\n               const __class_type_info *dst_type,\n               const void *obj_ptr,\n@@ -857,7 +857,7 @@ __do_dyncast (__PTRDIFF_TYPE__ src2dst,\n // work by filling in things lazily (when we know we need the information),\n // and opportunisticly take early success or failure results.\n bool __vmi_class_type_info::\n-__do_dyncast (__PTRDIFF_TYPE__ src2dst,\n+__do_dyncast (ptrdiff_t src2dst,\n               __sub_kind access_path,\n               const __class_type_info *dst_type,\n               const void *obj_ptr,\n@@ -884,12 +884,12 @@ __do_dyncast (__PTRDIFF_TYPE__ src2dst,\n       return false;\n     }\n   bool result_ambig = false;\n-  for (__SIZE_TYPE__ i = vmi_base_count; i--;)\n+  for (size_t i = vmi_base_count; i--;)\n     {\n       __dyncast_result result2;\n       void const *base = obj_ptr;\n       __sub_kind base_access = access_path;\n-      __PTRDIFF_TYPE__ offset = vmi_bases[i].__offset ();\n+      ptrdiff_t offset = vmi_bases[i].__offset ();\n       bool is_virtual = vmi_bases[i].__is_virtual_p ();\n       \n       if (is_virtual)\n@@ -1071,12 +1071,12 @@ __do_upcast (__sub_kind access_path,\n   if (src_details & __flags_unknown_mask)\n     src_details = vmi_flags;\n   \n-  for (__SIZE_TYPE__ i = vmi_base_count; i--;)\n+  for (size_t i = vmi_base_count; i--;)\n     {\n       __upcast_result result2 (src_details);\n       const void *base = obj_ptr;\n       __sub_kind sub_access = access_path;\n-      __PTRDIFF_TYPE__ offset = vmi_bases[i].__offset ();\n+      ptrdiff_t offset = vmi_bases[i].__offset ();\n       bool is_virtual = vmi_bases[i].__is_virtual_p ();\n       \n       if (!vmi_bases[i].__is_public_p ())\n@@ -1141,13 +1141,12 @@ extern \"C++\" void *\n __dynamic_cast (const void *src_ptr,    // object started from\n                 const __class_type_info *src_type, // type of the starting object\n                 const __class_type_info *dst_type, // desired target type\n-                __PTRDIFF_TYPE__ src2dst) // how src and dst are related\n+                ptrdiff_t src2dst) // how src and dst are related\n {\n   const void *vtable = *static_cast <const void *const *> (src_ptr);\n   const vtable_prefix *prefix =\n-      adjust_pointer <vtable_prefix>\n-        (vtable, -reinterpret_cast <__PTRDIFF_TYPE__>\n-          (&static_cast <vtable_prefix *> (NULL)->origin));\n+      adjust_pointer <vtable_prefix> (vtable, \n+\t\t\t\t      -offsetof (vtable_prefix, origin));\n   const void *whole_ptr =\n       adjust_pointer <void> (src_ptr, prefix->whole_object);\n   const __class_type_info *whole_type = prefix->whole_type;"}, {"sha": "e88e48dbcd20a1514de66acd5c9fc69b56acd477", "filename": "gcc/cp/vec.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0f12c9326308579f89b0961681ffdb85288228/gcc%2Fcp%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0f12c9326308579f89b0961681ffdb85288228/gcc%2Fcp%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvec.cc?ref=fb0f12c9326308579f89b0961681ffdb85288228", "patch": "@@ -41,19 +41,19 @@ namespace __cxxabiv1\n \n /* allocate and construct array */\n extern \"C++\" void *\n-__cxa_vec_new (__SIZE_TYPE__ element_count,\n-               __SIZE_TYPE__ element_size,\n-               __SIZE_TYPE__ padding_size,\n+__cxa_vec_new (size_t element_count,\n+               size_t element_size,\n+               size_t padding_size,\n                void (*constructor) (void *),\n                void (*destructor) (void *))\n {\n-  __SIZE_TYPE__ size = element_count * element_size + padding_size;\n+  size_t size = element_count * element_size + padding_size;\n   char *base = static_cast <char *> (operator new[] (size));\n   \n   if (padding_size)\n     {\n       base += padding_size;\n-      reinterpret_cast <__SIZE_TYPE__ *> (base)[-1] = element_count;\n+      reinterpret_cast <size_t *> (base)[-1] = element_count;\n     }\n   try\n     {\n@@ -72,12 +72,12 @@ __cxa_vec_new (__SIZE_TYPE__ element_count,\n /* construct array */\n extern \"C++\" void\n __cxa_vec_ctor (void *array_address,\n-                __SIZE_TYPE__ element_count,\n-                __SIZE_TYPE__ element_size,\n+                size_t element_count,\n+                size_t element_size,\n                 void (*constructor) (void *),\n                 void (*destructor) (void *))\n {\n-  __SIZE_TYPE__ ix = 0;\n+  size_t ix = 0;\n   char *ptr = static_cast <char *> (array_address);\n   \n   try\n@@ -97,14 +97,14 @@ __cxa_vec_ctor (void *array_address,\n /* destruct array */\n extern \"C++\" void\n __cxa_vec_dtor (void *array_address,\n-                __SIZE_TYPE__ element_count,\n-                __SIZE_TYPE__ element_size,\n+                size_t element_count,\n+                size_t element_size,\n                 void (*destructor) (void *))\n {\n   if (destructor)\n     {\n       char *ptr = static_cast <char *> (array_address);\n-      __SIZE_TYPE__ ix = element_count;\n+      size_t ix = element_count;\n       bool unwinding = std::uncaught_exception ();\n       \n       ptr += element_count * element_size;\n@@ -133,15 +133,15 @@ __cxa_vec_dtor (void *array_address,\n /* destruct and release array */\n extern \"C++\" void\n __cxa_vec_delete (void *array_address,\n-                  __SIZE_TYPE__ element_size,\n-                  __SIZE_TYPE__ padding_size,\n+                  size_t element_size,\n+                  size_t padding_size,\n                   void (*destructor) (void *))\n {\n   char *base = static_cast <char *> (array_address);\n   \n   if (padding_size)\n     {\n-      __SIZE_TYPE__ element_count = reinterpret_cast <__SIZE_TYPE__ *> (base)[-1];\n+      size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n       base -= padding_size;\n       try\n         {"}]}