{"sha": "b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9", "node_id": "C_kwDOANBUbNoAKGI5OTQ0OGY0YjAyOTU3YzcxY2ViMWFkYzNmYjhjZmEyYTc2MDJhYjk", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-04-02T20:59:50Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-04T11:54:57Z"}, "message": "gccrs: Fix ICE using constructors for intilizers in statics\n\nWe are getting constant expressions for the initilizers for static items\nthis hits an assertion in the GCC middle-end which is looking for a\nconstructor so we need to unwrap the constant expression using DECL_INITIAL\nas the initilizer to the global static.\n\nFixes #2080\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-item.cc (CompileItem::visit): unwrap the constant expression\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/execute/torture/issue-2080.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "973b8e4bb64ba6d442b0de58a78a8926f4965a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973b8e4bb64ba6d442b0de58a78a8926f4965a5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "011eb78b3531b27fd68aa89a50860564f44f8319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011eb78b3531b27fd68aa89a50860564f44f8319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011eb78b3531b27fd68aa89a50860564f44f8319"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "e1e2bb6d5a002902031298801c70509d25c19ad0", "filename": "gcc/rust/backend/rust-compile-item.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.cc?ref=b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9", "patch": "@@ -18,9 +18,7 @@\n \n #include \"rust-compile-item.h\"\n #include \"rust-compile-implitem.h\"\n-#include \"rust-compile-expr.h\"\n #include \"rust-compile-extern.h\"\n-#include \"rust-constexpr.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -66,7 +64,9 @@ CompileItem::visit (HIR::StaticItem &var)\n     = ctx->get_backend ()->global_variable (name, asm_name, type, is_external,\n \t\t\t\t\t    is_hidden, in_unique_section,\n \t\t\t\t\t    var.get_locus ());\n-  ctx->get_backend ()->global_variable_set_init (static_global, value);\n+\n+  tree init = value == error_mark_node ? error_mark_node : DECL_INITIAL (value);\n+  ctx->get_backend ()->global_variable_set_init (static_global, init);\n \n   ctx->insert_var_decl (var.get_mappings ().get_hirid (), static_global);\n   ctx->push_var (static_global);"}, {"sha": "dbdbf41ff92107d117832b13bd216a5fe1adc406", "filename": "gcc/testsuite/rust/execute/torture/issue-2080.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-2080.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-2080.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-2080.rs?ref=b99448f4b02957c71ceb1adc3fb8cfa2a7602ab9", "patch": "@@ -0,0 +1,26 @@\n+// { dg-output \"hello world: gccrs\\n\" }\n+// { dg-additional-options \"-w\" }\n+static TEST_1: &str = \"gccrs\";\n+static TEST_2: i32 = 123;\n+\n+struct Foo(i32, bool);\n+static TEST_3: Foo = Foo(123, false);\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn main() -> i32 {\n+    unsafe {\n+        let a1 = \"hello world: %s\\n\";\n+        let b1 = a1 as *const str;\n+        let c1 = b1 as *const i8;\n+\n+        let a2 = TEST_1;\n+        let b2 = a2 as *const str;\n+        let c2 = b2 as *const i8;\n+\n+        printf(c1, c2);\n+    }\n+    0\n+}"}]}