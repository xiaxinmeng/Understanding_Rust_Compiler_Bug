{"sha": "a500588aa523f1f04ae51809e476e3ebfcb081d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUwMDU4OGFhNTIzZjFmMDRhZTUxODA5ZTQ3NmUzZWJmY2IwODFkMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-10-08T20:12:18Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-10-08T20:12:18Z"}, "message": "take type from intrinsic in sincos pass\n\nThis is a first step towards enabling the sincos optimization in Ada.\n\nThe issue this patch solves is that sincos takes the type to be looked\nup with mathfn_built_in from variables or temporaries passed as\narguments to SIN and COS intrinsics.  In Ada, different float types\nmay be used but, despite their representation equivalence, their\ndistinctness causes the optimization to be skipped, because they are\nnot the types that mathfn_built_in expects.\n\nThis patch introduces a function that maps intrinsics to the type\nthey're associated with, and uses that type, obtained from the\nintrinsics used in calls to be optimized, to look up the correspoding\nCEXPI intrinsic.\n\nFor the sake of defensive programming, when using the type obtained\nfrom the intrinsic, it now checks that, if different types are found\nfor the used argument, or for other calls that use it, that the types\nare interchangeable.\n\n\nfor  gcc/ChangeLog\n\n\t* builtins.c (mathfn_built_in_type): New.\n\t* builtins.h (mathfn_built_in_type): Declare.\n\t* tree-ssa-math-opts.c (execute_cse_sincos_1): Use it to\n\tobtain the type expected by the intrinsic.", "tree": {"sha": "15e5f671a4efdb0fe4f0dd74cd0a87b1c84b165b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15e5f671a4efdb0fe4f0dd74cd0a87b1c84b165b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a500588aa523f1f04ae51809e476e3ebfcb081d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a500588aa523f1f04ae51809e476e3ebfcb081d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a500588aa523f1f04ae51809e476e3ebfcb081d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a500588aa523f1f04ae51809e476e3ebfcb081d3/comments", "author": null, "committer": null, "parents": [{"sha": "d1c566d72d9361b37213881222c7e2713cdf05b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c566d72d9361b37213881222c7e2713cdf05b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c566d72d9361b37213881222c7e2713cdf05b7"}], "stats": {"total": 254, "additions": 164, "deletions": 90}, "files": [{"sha": "284926f884d07919e48705ec057dea148a49e4ce", "filename": "gcc/builtins.c", "status": "modified", "additions": 149, "deletions": 87, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a500588aa523f1f04ae51809e476e3ebfcb081d3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a500588aa523f1f04ae51809e476e3ebfcb081d3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a500588aa523f1f04ae51809e476e3ebfcb081d3", "patch": "@@ -2160,95 +2160,98 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n \n   switch (fn)\n     {\n-    CASE_MATHFN (ACOS)\n-    CASE_MATHFN (ACOSH)\n-    CASE_MATHFN (ASIN)\n-    CASE_MATHFN (ASINH)\n-    CASE_MATHFN (ATAN)\n-    CASE_MATHFN (ATAN2)\n-    CASE_MATHFN (ATANH)\n-    CASE_MATHFN (CBRT)\n-    CASE_MATHFN_FLOATN (CEIL)\n-    CASE_MATHFN (CEXPI)\n-    CASE_MATHFN_FLOATN (COPYSIGN)\n-    CASE_MATHFN (COS)\n-    CASE_MATHFN (COSH)\n-    CASE_MATHFN (DREM)\n-    CASE_MATHFN (ERF)\n-    CASE_MATHFN (ERFC)\n-    CASE_MATHFN (EXP)\n-    CASE_MATHFN (EXP10)\n-    CASE_MATHFN (EXP2)\n-    CASE_MATHFN (EXPM1)\n-    CASE_MATHFN (FABS)\n-    CASE_MATHFN (FDIM)\n-    CASE_MATHFN_FLOATN (FLOOR)\n-    CASE_MATHFN_FLOATN (FMA)\n-    CASE_MATHFN_FLOATN (FMAX)\n-    CASE_MATHFN_FLOATN (FMIN)\n-    CASE_MATHFN (FMOD)\n-    CASE_MATHFN (FREXP)\n-    CASE_MATHFN (GAMMA)\n-    CASE_MATHFN_REENT (GAMMA) /* GAMMA_R */\n-    CASE_MATHFN (HUGE_VAL)\n-    CASE_MATHFN (HYPOT)\n-    CASE_MATHFN (ILOGB)\n-    CASE_MATHFN (ICEIL)\n-    CASE_MATHFN (IFLOOR)\n-    CASE_MATHFN (INF)\n-    CASE_MATHFN (IRINT)\n-    CASE_MATHFN (IROUND)\n-    CASE_MATHFN (ISINF)\n-    CASE_MATHFN (J0)\n-    CASE_MATHFN (J1)\n-    CASE_MATHFN (JN)\n-    CASE_MATHFN (LCEIL)\n-    CASE_MATHFN (LDEXP)\n-    CASE_MATHFN (LFLOOR)\n-    CASE_MATHFN (LGAMMA)\n-    CASE_MATHFN_REENT (LGAMMA) /* LGAMMA_R */\n-    CASE_MATHFN (LLCEIL)\n-    CASE_MATHFN (LLFLOOR)\n-    CASE_MATHFN (LLRINT)\n-    CASE_MATHFN (LLROUND)\n-    CASE_MATHFN (LOG)\n-    CASE_MATHFN (LOG10)\n-    CASE_MATHFN (LOG1P)\n-    CASE_MATHFN (LOG2)\n-    CASE_MATHFN (LOGB)\n-    CASE_MATHFN (LRINT)\n-    CASE_MATHFN (LROUND)\n-    CASE_MATHFN (MODF)\n-    CASE_MATHFN (NAN)\n-    CASE_MATHFN (NANS)\n-    CASE_MATHFN_FLOATN (NEARBYINT)\n-    CASE_MATHFN (NEXTAFTER)\n-    CASE_MATHFN (NEXTTOWARD)\n-    CASE_MATHFN (POW)\n-    CASE_MATHFN (POWI)\n-    CASE_MATHFN (POW10)\n-    CASE_MATHFN (REMAINDER)\n-    CASE_MATHFN (REMQUO)\n-    CASE_MATHFN_FLOATN (RINT)\n-    CASE_MATHFN_FLOATN (ROUND)\n-    CASE_MATHFN_FLOATN (ROUNDEVEN)\n-    CASE_MATHFN (SCALB)\n-    CASE_MATHFN (SCALBLN)\n-    CASE_MATHFN (SCALBN)\n-    CASE_MATHFN (SIGNBIT)\n-    CASE_MATHFN (SIGNIFICAND)\n-    CASE_MATHFN (SIN)\n-    CASE_MATHFN (SINCOS)\n-    CASE_MATHFN (SINH)\n-    CASE_MATHFN_FLOATN (SQRT)\n-    CASE_MATHFN (TAN)\n-    CASE_MATHFN (TANH)\n-    CASE_MATHFN (TGAMMA)\n-    CASE_MATHFN_FLOATN (TRUNC)\n-    CASE_MATHFN (Y0)\n-    CASE_MATHFN (Y1)\n+#define SEQ_OF_CASE_MATHFN\t\t\t\\\n+    CASE_MATHFN (ACOS)\t\t\t\t\\\n+    CASE_MATHFN (ACOSH)\t\t\t\t\\\n+    CASE_MATHFN (ASIN)\t\t\t\t\\\n+    CASE_MATHFN (ASINH)\t\t\t\t\\\n+    CASE_MATHFN (ATAN)\t\t\t\t\\\n+    CASE_MATHFN (ATAN2)\t\t\t\t\\\n+    CASE_MATHFN (ATANH)\t\t\t\t\\\n+    CASE_MATHFN (CBRT)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (CEIL)\t\t\t\\\n+    CASE_MATHFN (CEXPI)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (COPYSIGN)\t\t\\\n+    CASE_MATHFN (COS)\t\t\t\t\\\n+    CASE_MATHFN (COSH)\t\t\t\t\\\n+    CASE_MATHFN (DREM)\t\t\t\t\\\n+    CASE_MATHFN (ERF)\t\t\t\t\\\n+    CASE_MATHFN (ERFC)\t\t\t\t\\\n+    CASE_MATHFN (EXP)\t\t\t\t\\\n+    CASE_MATHFN (EXP10)\t\t\t\t\\\n+    CASE_MATHFN (EXP2)\t\t\t\t\\\n+    CASE_MATHFN (EXPM1)\t\t\t\t\\\n+    CASE_MATHFN (FABS)\t\t\t\t\\\n+    CASE_MATHFN (FDIM)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (FLOOR)\t\t\t\\\n+    CASE_MATHFN_FLOATN (FMA)\t\t\t\\\n+    CASE_MATHFN_FLOATN (FMAX)\t\t\t\\\n+    CASE_MATHFN_FLOATN (FMIN)\t\t\t\\\n+    CASE_MATHFN (FMOD)\t\t\t\t\\\n+    CASE_MATHFN (FREXP)\t\t\t\t\\\n+    CASE_MATHFN (GAMMA)\t\t\t\t\\\n+    CASE_MATHFN_REENT (GAMMA) /* GAMMA_R */\t\\\n+    CASE_MATHFN (HUGE_VAL)\t\t\t\\\n+    CASE_MATHFN (HYPOT)\t\t\t\t\\\n+    CASE_MATHFN (ILOGB)\t\t\t\t\\\n+    CASE_MATHFN (ICEIL)\t\t\t\t\\\n+    CASE_MATHFN (IFLOOR)\t\t\t\\\n+    CASE_MATHFN (INF)\t\t\t\t\\\n+    CASE_MATHFN (IRINT)\t\t\t\t\\\n+    CASE_MATHFN (IROUND)\t\t\t\\\n+    CASE_MATHFN (ISINF)\t\t\t\t\\\n+    CASE_MATHFN (J0)\t\t\t\t\\\n+    CASE_MATHFN (J1)\t\t\t\t\\\n+    CASE_MATHFN (JN)\t\t\t\t\\\n+    CASE_MATHFN (LCEIL)\t\t\t\t\\\n+    CASE_MATHFN (LDEXP)\t\t\t\t\\\n+    CASE_MATHFN (LFLOOR)\t\t\t\\\n+    CASE_MATHFN (LGAMMA)\t\t\t\\\n+    CASE_MATHFN_REENT (LGAMMA) /* LGAMMA_R */\t\\\n+    CASE_MATHFN (LLCEIL)\t\t\t\\\n+    CASE_MATHFN (LLFLOOR)\t\t\t\\\n+    CASE_MATHFN (LLRINT)\t\t\t\\\n+    CASE_MATHFN (LLROUND)\t\t\t\\\n+    CASE_MATHFN (LOG)\t\t\t\t\\\n+    CASE_MATHFN (LOG10)\t\t\t\t\\\n+    CASE_MATHFN (LOG1P)\t\t\t\t\\\n+    CASE_MATHFN (LOG2)\t\t\t\t\\\n+    CASE_MATHFN (LOGB)\t\t\t\t\\\n+    CASE_MATHFN (LRINT)\t\t\t\t\\\n+    CASE_MATHFN (LROUND)\t\t\t\\\n+    CASE_MATHFN (MODF)\t\t\t\t\\\n+    CASE_MATHFN (NAN)\t\t\t\t\\\n+    CASE_MATHFN (NANS)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (NEARBYINT)\t\t\\\n+    CASE_MATHFN (NEXTAFTER)\t\t\t\\\n+    CASE_MATHFN (NEXTTOWARD)\t\t\t\\\n+    CASE_MATHFN (POW)\t\t\t\t\\\n+    CASE_MATHFN (POWI)\t\t\t\t\\\n+    CASE_MATHFN (POW10)\t\t\t\t\\\n+    CASE_MATHFN (REMAINDER)\t\t\t\\\n+    CASE_MATHFN (REMQUO)\t\t\t\\\n+    CASE_MATHFN_FLOATN (RINT)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ROUND)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ROUNDEVEN)\t\t\\\n+    CASE_MATHFN (SCALB)\t\t\t\t\\\n+    CASE_MATHFN (SCALBLN)\t\t\t\\\n+    CASE_MATHFN (SCALBN)\t\t\t\\\n+    CASE_MATHFN (SIGNBIT)\t\t\t\\\n+    CASE_MATHFN (SIGNIFICAND)\t\t\t\\\n+    CASE_MATHFN (SIN)\t\t\t\t\\\n+    CASE_MATHFN (SINCOS)\t\t\t\\\n+    CASE_MATHFN (SINH)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (SQRT)\t\t\t\\\n+    CASE_MATHFN (TAN)\t\t\t\t\\\n+    CASE_MATHFN (TANH)\t\t\t\t\\\n+    CASE_MATHFN (TGAMMA)\t\t\t\\\n+    CASE_MATHFN_FLOATN (TRUNC)\t\t\t\\\n+    CASE_MATHFN (Y0)\t\t\t\t\\\n+    CASE_MATHFN (Y1)\t\t\t\t\\\n     CASE_MATHFN (YN)\n \n+    SEQ_OF_CASE_MATHFN\n+\n     default:\n       return END_BUILTINS;\n     }\n@@ -2278,6 +2281,10 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n     return END_BUILTINS;\n }\n \n+#undef CASE_MATHFN\n+#undef CASE_MATHFN_FLOATN\n+#undef CASE_MATHFN_REENT\n+\n /* Return mathematic function equivalent to FN but operating directly on TYPE,\n    if available.  If IMPLICIT_P is true use the implicit builtin declaration,\n    otherwise use the explicit declaration.  If we can't do the conversion,\n@@ -2313,6 +2320,61 @@ mathfn_built_in (tree type, enum built_in_function fn)\n   return mathfn_built_in_1 (type, as_combined_fn (fn), /*implicit=*/ 1);\n }\n \n+/* Return the type associated with a built in function, i.e., the one\n+   to be passed to mathfn_built_in to get the type-specific\n+   function.  */\n+\n+tree\n+mathfn_built_in_type (combined_fn fn)\n+{\n+#define CASE_MATHFN(MATHFN)\t\t\t\\\n+  case BUILT_IN_##MATHFN:\t\t\t\\\n+    return double_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##F:\t\t\t\\\n+    return float_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##L:\t\t\t\\\n+    return long_double_type_node;\n+\n+#define CASE_MATHFN_FLOATN(MATHFN)\t\t\\\n+  CASE_MATHFN(MATHFN)\t\t\t\t\\\n+  case BUILT_IN_##MATHFN##F16:\t\t\t\\\n+    return float16_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##F32:\t\t\t\\\n+    return float32_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##F64:\t\t\t\\\n+    return float64_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##F128:\t\t\t\\\n+    return float128_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##F32X:\t\t\t\\\n+    return float32x_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##F64X:\t\t\t\\\n+    return float64x_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##F128X:\t\t\\\n+    return float128x_type_node;\n+\n+/* Similar to above, but appends _R after any F/L suffix.  */\n+#define CASE_MATHFN_REENT(MATHFN) \\\n+  case BUILT_IN_##MATHFN##_R:\t\t\t\\\n+    return double_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##F_R:\t\t\t\\\n+    return float_type_node;\t\t\t\\\n+  case BUILT_IN_##MATHFN##L_R:\t\t\t\\\n+    return long_double_type_node;\n+\n+  switch (fn)\n+    {\n+    SEQ_OF_CASE_MATHFN\n+\n+    default:\n+      return NULL_TREE;\n+    }\n+\n+#undef CASE_MATHFN\n+#undef CASE_MATHFN_FLOATN\n+#undef CASE_MATHFN_REENT\n+#undef SEQ_OF_CASE_MATHFN\n+}\n+\n /* If BUILT_IN_NORMAL function FNDECL has an associated internal function,\n    return its code, otherwise return IFN_LAST.  Note that this function\n    only tests whether the function is defined in internals.def, not whether"}, {"sha": "72012a28e0393cdabab2ac34a6a287dc2ed3c05b", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a500588aa523f1f04ae51809e476e3ebfcb081d3/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a500588aa523f1f04ae51809e476e3ebfcb081d3/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=a500588aa523f1f04ae51809e476e3ebfcb081d3", "patch": "@@ -109,6 +109,7 @@ extern void expand_builtin_setjmp_receiver (rtx);\n extern void expand_builtin_update_setjmp_buf (rtx);\n extern tree mathfn_built_in (tree, enum built_in_function fn);\n extern tree mathfn_built_in (tree, combined_fn);\n+extern tree mathfn_built_in_type (combined_fn);\n extern rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, scalar_int_mode);\n extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, scalar_int_mode);\n extern rtx expand_builtin_saveregs (void);"}, {"sha": "90dfb982526df4c63397521af3f869b92f92ab0c", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a500588aa523f1f04ae51809e476e3ebfcb081d3/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a500588aa523f1f04ae51809e476e3ebfcb081d3/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=a500588aa523f1f04ae51809e476e3ebfcb081d3", "patch": "@@ -1139,15 +1139,14 @@ execute_cse_sincos_1 (tree name)\n {\n   gimple_stmt_iterator gsi;\n   imm_use_iterator use_iter;\n-  tree fndecl, res, type;\n+  tree fndecl, res, type = NULL_TREE;\n   gimple *def_stmt, *use_stmt, *stmt;\n   int seen_cos = 0, seen_sin = 0, seen_cexpi = 0;\n   auto_vec<gimple *> stmts;\n   basic_block top_bb = NULL;\n   int i;\n   bool cfg_changed = false;\n \n-  type = TREE_TYPE (name);\n   FOR_EACH_IMM_USE_STMT (use_stmt, use_iter, name)\n     {\n       if (gimple_code (use_stmt) != GIMPLE_CALL\n@@ -1169,9 +1168,21 @@ execute_cse_sincos_1 (tree name)\n \t  break;\n \n \tdefault:;\n+\t  continue;\n \t}\n-    }\n \n+      tree t = mathfn_built_in_type (gimple_call_combined_fn (use_stmt));\n+      if (!type)\n+\t{\n+\t  type = t;\n+\t  t = TREE_TYPE (name);\n+\t}\n+      /* This checks that NAME has the right type in the first round,\n+\t and, in subsequent rounds, that the built_in type is the same\n+\t type, or a compatible type.  */\n+      if (type != t && !types_compatible_p (type, t))\n+\treturn false;\n+    }\n   if (seen_cos + seen_sin + seen_cexpi <= 1)\n     return false;\n "}]}