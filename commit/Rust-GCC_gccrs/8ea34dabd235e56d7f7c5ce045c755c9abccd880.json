{"sha": "8ea34dabd235e56d7f7c5ce045c755c9abccd880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVhMzRkYWJkMjM1ZTU2ZDdmN2M1Y2UwNDVjNzU1YzlhYmNjZDg4MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-11-23T09:42:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-11-23T09:42:41Z"}, "message": "tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid doing work twice.\n\n2010-11-23  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid doing work\n\ttwice.  Avoid re-allocating the ops vector all the time.\n\n2010-11-23  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-alias.c (refs_may_alias_p_1): Avoid calls to\n\tis_gimple_min_invariant, group tree code checks to allow\n\tcombining them.\n\t(stmt_may_clobber_ref_p_1): Check for SSA_NAME instead\n\tof is_gimple_reg.\n\nFrom-SVN: r167072", "tree": {"sha": "d6e170a74c3b147e05b9123cc46161d4cd975ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6e170a74c3b147e05b9123cc46161d4cd975ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ea34dabd235e56d7f7c5ce045c755c9abccd880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea34dabd235e56d7f7c5ce045c755c9abccd880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea34dabd235e56d7f7c5ce045c755c9abccd880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea34dabd235e56d7f7c5ce045c755c9abccd880/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad234fc7c44096da2c17e0415b567f9699e01360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad234fc7c44096da2c17e0415b567f9699e01360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad234fc7c44096da2c17e0415b567f9699e01360"}], "stats": {"total": 81, "additions": 52, "deletions": 29}, "files": [{"sha": "60c4dc92de390d33234d0e55d9993c044cb35635", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea34dabd235e56d7f7c5ce045c755c9abccd880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea34dabd235e56d7f7c5ce045c755c9abccd880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ea34dabd235e56d7f7c5ce045c755c9abccd880", "patch": "@@ -1,3 +1,16 @@\n+2010-11-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid doing work\n+\ttwice.  Avoid re-allocating the ops vector all the time.\n+\n+2010-11-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-alias.c (refs_may_alias_p_1): Avoid calls to\n+\tis_gimple_min_invariant, group tree code checks to allow\n+\tcombining them.\n+\t(stmt_may_clobber_ref_p_1): Check for SSA_NAME instead\n+\tof is_gimple_reg.\n+\n 2010-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config.gcc (sparc*-*-*): Reorder."}, {"sha": "b340e5fe5875f06a311807a59e831380bdd5833f", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea34dabd235e56d7f7c5ce045c755c9abccd880/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea34dabd235e56d7f7c5ce045c755c9abccd880/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=8ea34dabd235e56d7f7c5ce045c755c9abccd880", "patch": "@@ -1000,21 +1000,23 @@ refs_may_alias_p_1 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n      *D.1663_44 = VIEW_CONVERT_EXPR<struct DB_LSN>(__tmp$B0F64_59);\n      which is seen as a struct copy.  */\n   if (TREE_CODE (base1) == SSA_NAME\n-      || TREE_CODE (base2) == SSA_NAME\n       || TREE_CODE (base1) == CONST_DECL\n+      || TREE_CODE (base1) == CONSTRUCTOR\n+      || TREE_CODE (base1) == ADDR_EXPR\n+      || CONSTANT_CLASS_P (base1)\n+      || TREE_CODE (base2) == SSA_NAME\n       || TREE_CODE (base2) == CONST_DECL\n-      || TREE_CODE (base1) == STRING_CST\n-      || TREE_CODE (base2) == STRING_CST\n-      || is_gimple_min_invariant (base1)\n-      || is_gimple_min_invariant (base2))\n+      || TREE_CODE (base2) == CONSTRUCTOR\n+      || TREE_CODE (base2) == ADDR_EXPR\n+      || CONSTANT_CLASS_P (base2))\n     return false;\n \n   /* We can end up refering to code via function and label decls.\n      As we likely do not properly track code aliases conservatively\n      bail out.  */\n   if (TREE_CODE (base1) == FUNCTION_DECL\n-      || TREE_CODE (base2) == FUNCTION_DECL\n       || TREE_CODE (base1) == LABEL_DECL\n+      || TREE_CODE (base2) == FUNCTION_DECL\n       || TREE_CODE (base2) == LABEL_DECL)\n     return true;\n \n@@ -1572,7 +1574,7 @@ stmt_may_clobber_ref_p_1 (gimple stmt, ao_ref *ref)\n     {\n       tree lhs = gimple_call_lhs (stmt);\n       if (lhs\n-\t  && !is_gimple_reg (lhs))\n+\t  && TREE_CODE (lhs) != SSA_NAME)\n \t{\n \t  ao_ref r;\n \t  ao_ref_init (&r, lhs);\n@@ -1585,10 +1587,10 @@ stmt_may_clobber_ref_p_1 (gimple stmt, ao_ref *ref)\n   else if (gimple_assign_single_p (stmt))\n     {\n       tree lhs = gimple_assign_lhs (stmt);\n-      if (!is_gimple_reg (lhs))\n+      if (TREE_CODE (lhs) != SSA_NAME)\n \t{\n \t  ao_ref r;\n-\t  ao_ref_init (&r, gimple_assign_lhs (stmt));\n+\t  ao_ref_init (&r, lhs);\n \t  return refs_may_alias_p_1 (ref, &r, true);\n \t}\n     }"}, {"sha": "ed1dabea1cadbe36e3ea69e0bada1c82f6c8f089", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea34dabd235e56d7f7c5ce045c755c9abccd880/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea34dabd235e56d7f7c5ce045c755c9abccd880/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=8ea34dabd235e56d7f7c5ce045c755c9abccd880", "patch": "@@ -1288,21 +1288,25 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n   tree fndecl;\n   tree base;\n   HOST_WIDE_INT offset, maxsize;\n+  static VEC (vn_reference_op_s, heap) *lhs_ops = NULL;\n+  ao_ref lhs_ref;\n+  bool lhs_ref_ok = false;\n \n   /* First try to disambiguate after value-replacing in the definitions LHS.  */\n   if (is_gimple_assign (def_stmt))\n     {\n+      VEC (vn_reference_op_s, heap) *tem;\n       tree lhs = gimple_assign_lhs (def_stmt);\n-      ao_ref ref1;\n-      VEC (vn_reference_op_s, heap) *operands = NULL;\n-      bool res = true;\n-      copy_reference_ops_from_ref (lhs, &operands);\n-      operands = valueize_refs (operands);\n-      if (ao_ref_init_from_vn_reference (&ref1, get_alias_set (lhs),\n-\t\t\t\t\t TREE_TYPE (lhs), operands))\n-\tres = refs_may_alias_p_1 (ref, &ref1, true);\n-      VEC_free (vn_reference_op_s, heap, operands);\n-      if (!res)\n+      /* Avoid re-allocation overhead.  */\n+      VEC_truncate (vn_reference_op_s, lhs_ops, 0);\n+      copy_reference_ops_from_ref (lhs, &lhs_ops);\n+      tem = lhs_ops;\n+      lhs_ops = valueize_refs (lhs_ops);\n+      gcc_assert (lhs_ops == tem);\n+      lhs_ref_ok = ao_ref_init_from_vn_reference (&lhs_ref, get_alias_set (lhs),\n+\t\t\t\t\t\t  TREE_TYPE (lhs), lhs_ops);\n+      if (lhs_ref_ok\n+\t  && !refs_may_alias_p_1 (ref, &lhs_ref, true))\n \treturn NULL;\n     }\n \n@@ -1378,34 +1382,38 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t       || handled_component_p (gimple_assign_rhs1 (def_stmt))))\n     {\n       tree base2;\n-      HOST_WIDE_INT offset2, size2, maxsize2;\n+      HOST_WIDE_INT offset2, size2;\n       int i, j;\n-      VEC (vn_reference_op_s, heap) *lhs = NULL, *rhs = NULL;\n+      VEC (vn_reference_op_s, heap) *rhs = NULL;\n       vn_reference_op_t vro;\n       ao_ref r;\n \n+      if (!lhs_ref_ok)\n+\treturn (void *)-1;\n+\n       /* See if the assignment kills REF.  */\n-      base2 = get_ref_base_and_extent (gimple_assign_lhs (def_stmt),\n-\t\t\t\t       &offset2, &size2, &maxsize2);\n-      if (!operand_equal_p (base, base2, 0)\n+      base2 = ao_ref_base (&lhs_ref);\n+      offset2 = lhs_ref.offset;\n+      size2 = lhs_ref.size;\n+      if ((base != base2\n+\t   && !operand_equal_p (base, base2, 0))\n \t  || offset2 > offset\n \t  || offset2 + size2 < offset + maxsize)\n \treturn (void *)-1;\n \n-      /* Find the common base of ref and the lhs.  */\n-      copy_reference_ops_from_ref (gimple_assign_lhs (def_stmt), &lhs);\n+      /* Find the common base of ref and the lhs.  lhs_ops already\n+         contains valueized operands for the lhs.  */\n       i = VEC_length (vn_reference_op_s, vr->operands) - 1;\n-      j = VEC_length (vn_reference_op_s, lhs) - 1;\n+      j = VEC_length (vn_reference_op_s, lhs_ops) - 1;\n       while (j >= 0 && i >= 0\n \t     && vn_reference_op_eq (VEC_index (vn_reference_op_s,\n \t\t\t\t\t       vr->operands, i),\n-\t\t\t\t    VEC_index (vn_reference_op_s, lhs, j)))\n+\t\t\t\t    VEC_index (vn_reference_op_s, lhs_ops, j)))\n \t{\n \t  i--;\n \t  j--;\n \t}\n \n-      VEC_free (vn_reference_op_s, heap, lhs);\n       /* i now points to the first additional op.\n \t ???  LHS may not be completely contained in VR, one or more\n \t VIEW_CONVERT_EXPRs could be in its way.  We could at least"}]}