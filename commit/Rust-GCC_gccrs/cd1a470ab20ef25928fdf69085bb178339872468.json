{"sha": "cd1a470ab20ef25928fdf69085bb178339872468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QxYTQ3MGFiMjBlZjI1OTI4ZmRmNjkwODViYjE3ODMzOTg3MjQ2OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-02T13:49:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-02T13:49:31Z"}, "message": "[multiple changes]\n\n2015-03-02  Robert Dewar  <dewar@adacore.com>\n\n\t* scng.adb (Scan): Ignore illegal character in relaxed\n\tsemantics mode.\n\n2015-03-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Set_Membership); Retain Overloaded flag\n\ton left operand, so it can be properly resolved with type of\n\talternatives of right operand.\n\t* sem_res.adb (Resolve_Set_Membership): Handle properly an\n\toverloaded left-hand side when the alternatives on the right\n\thand side are literals of some universal type.\tUse first\n\tnon-overloaded alternative to find expected type.\n\n2015-03-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch7.adb (Make_Set_Finalize_Address_Call): Use underlying\n\ttype to retrieve designated type, because the purported access\n\ttype may be a partial (private) view, when it is declared in\n\tthe private part of a nested package, and finalization actions\n\tare generated when completing compilation of enclosing unit.\n\nFrom-SVN: r221116", "tree": {"sha": "9d46c92f4ce69ed5e974c9a54999e02732d4fb9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d46c92f4ce69ed5e974c9a54999e02732d4fb9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd1a470ab20ef25928fdf69085bb178339872468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1a470ab20ef25928fdf69085bb178339872468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1a470ab20ef25928fdf69085bb178339872468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1a470ab20ef25928fdf69085bb178339872468/comments", "author": null, "committer": null, "parents": [{"sha": "89f0276a49a2ae68f3dd086b237037cdce6ed6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f0276a49a2ae68f3dd086b237037cdce6ed6b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f0276a49a2ae68f3dd086b237037cdce6ed6b4"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "6a7a17ca8b61b7ba5533416a4281f027ae74c0e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cd1a470ab20ef25928fdf69085bb178339872468", "patch": "@@ -1,3 +1,26 @@\n+2015-03-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* scng.adb (Scan): Ignore illegal character in relaxed\n+\tsemantics mode.\n+\n+2015-03-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Set_Membership); Retain Overloaded flag\n+\ton left operand, so it can be properly resolved with type of\n+\talternatives of right operand.\n+\t* sem_res.adb (Resolve_Set_Membership): Handle properly an\n+\toverloaded left-hand side when the alternatives on the right\n+\thand side are literals of some universal type.\tUse first\n+\tnon-overloaded alternative to find expected type.\n+\n+2015-03-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch7.adb (Make_Set_Finalize_Address_Call): Use underlying\n+\ttype to retrieve designated type, because the purported access\n+\ttype may be a partial (private) view, when it is declared in\n+\tthe private part of a nested package, and finalization actions\n+\tare generated when completing compilation of enclosing unit.\n+\n 2015-03-02  Robert Dewar  <dewar@adacore.com>\n \n \t* back_end.adb (Call_Back_End): Remove previous patch,"}, {"sha": "52dfb4ebc2fccc38b893164ce8853c6f727a48e1", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=cd1a470ab20ef25928fdf69085bb178339872468", "patch": "@@ -7853,10 +7853,19 @@ package body Exp_Ch7 is\n      (Loc     : Source_Ptr;\n       Ptr_Typ : Entity_Id) return Node_Id\n    is\n+\n+      --  It is possible for Ptr_Typ to be a partial view, if the access\n+      --  type is a full view declared in the private part of a nested package,\n+      --  and the finalization actions take place when completing analysis\n+      --  of the enclosing unit. For this reason we use Underlying_Type\n+      --  in two places below.\n+\n       Desig_Typ : constant Entity_Id :=\n-                    Available_View (Designated_Type (Ptr_Typ));\n+                    Available_View\n+                      (Designated_Type (Underlying_Type (Ptr_Typ)));\n       Fin_Addr  : constant Entity_Id := Finalize_Address (Desig_Typ);\n-      Fin_Mas   : constant Entity_Id := Finalization_Master (Ptr_Typ);\n+      Fin_Mas   : constant Entity_Id :=\n+                    Finalization_Master (Underlying_Type (Ptr_Typ));\n \n    begin\n       --  Both the finalization master and primitive Finalize_Address must be"}, {"sha": "7bf8ea2eacc25885d61586093fa9fbcd980dd5fe", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=cd1a470ab20ef25928fdf69085bb178339872468", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1757,10 +1757,15 @@ package body Scng is\n                   then\n                      Scan_Ptr := Scan_Ptr + 1;\n \n-                  --  Otherwise we have an illegal comment character\n+                  --  Otherwise we have an illegal comment character, ignore\n+                  --  this error in relaxed semantics mode.\n \n                   else\n-                     Error_Illegal_Character;\n+                     if Relaxed_RM_Semantics then\n+                        Scan_Ptr := Scan_Ptr + 1;\n+                     else\n+                        Error_Illegal_Character;\n+                     end if;\n                   end if;\n                end loop;\n "}, {"sha": "c943df19b1644aaec2f97ec5ef90333de2348a0c", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=cd1a470ab20ef25928fdf69085bb178339872468", "patch": "@@ -2683,7 +2683,9 @@ package body Sem_Ch4 is\n \n          if Present (Common_Type) then\n             Set_Etype (L, Common_Type);\n-            Set_Is_Overloaded (L, False);\n+\n+            --  The left operand may still be overloaded, to be resolved using\n+            --  the Common_Type.\n \n          else\n             Error_Msg_N (\"cannot resolve membership operation\", N);"}, {"sha": "69cd3396de764767e0e1fe8b71041d0f70acee90", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a470ab20ef25928fdf69085bb178339872468/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=cd1a470ab20ef25928fdf69085bb178339872468", "patch": "@@ -8593,9 +8593,35 @@ package body Sem_Res is\n \n       procedure Resolve_Set_Membership is\n          Alt  : Node_Id;\n-         Ltyp : constant Entity_Id := Etype (L);\n+         Ltyp : Entity_Id;\n \n       begin\n+         --  If the left operand is overloaded, find type compatible with not\n+         --  overloaded alternative of the right operand.\n+\n+         if Is_Overloaded (L) then\n+            Ltyp := Empty;\n+            Alt := First (Alternatives (N));\n+            while Present (Alt) loop\n+               if not Is_Overloaded (Alt) then\n+                  Ltyp := Intersect_Types (L, Alt);\n+                  exit;\n+               else\n+                  Next (Alt);\n+               end if;\n+            end loop;\n+\n+            --  Unclear how to resolve expression if all alternatives are also\n+            --  overloaded.\n+\n+            if No (Ltyp) then\n+               Error_Msg_N (\"ambiguous expression\", N);\n+            end if;\n+\n+         else\n+            Ltyp := Etype (L);\n+         end if;\n+\n          Resolve (L, Ltyp);\n \n          Alt := First (Alternatives (N));"}]}