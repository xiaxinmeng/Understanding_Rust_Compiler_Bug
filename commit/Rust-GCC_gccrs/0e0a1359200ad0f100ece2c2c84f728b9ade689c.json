{"sha": "0e0a1359200ad0f100ece2c2c84f728b9ade689c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwYTEzNTkyMDBhZDBmMTAwZWNlMmMyYzg0ZjcyOGI5YWRlNjg5Yw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-03-11T22:27:26Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-03-11T22:27:26Z"}, "message": "re PR tree-optimization/43257 (IPA-SRA changes DECL_ASSEMBLER_NAME)\n\n2010-03-11  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/43257\n\t* tree.c (assign_assembler_name_if_neeeded): New function.\n\t(free_lang_data_in_cgraph): Assembler name assignment moved to the\n\tabove new function.\n\t* tree.h (assign_assembler_name_if_neeeded): Declare.\n\t* cgraphunit.c (cgraph_analyze_function): Create an assembler name for\n\tthe function if needed.\n\n\t* testsuite/g++.dg/torture/pr43257.C: New test.\n\nFrom-SVN: r157393", "tree": {"sha": "a99001a237dfd1caa78f3f3dd0c869a43f4fe759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a99001a237dfd1caa78f3f3dd0c869a43f4fe759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e0a1359200ad0f100ece2c2c84f728b9ade689c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0a1359200ad0f100ece2c2c84f728b9ade689c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0a1359200ad0f100ece2c2c84f728b9ade689c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0a1359200ad0f100ece2c2c84f728b9ade689c/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d9edd01f59a9b308fa5c30bed82b3c85f45f465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9edd01f59a9b308fa5c30bed82b3c85f45f465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9edd01f59a9b308fa5c30bed82b3c85f45f465"}], "stats": {"total": 97, "additions": 77, "deletions": 20}, "files": [{"sha": "dff9016c564ee301bd0c911c8cd8873a61d14f02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e0a1359200ad0f100ece2c2c84f728b9ade689c", "patch": "@@ -1,3 +1,13 @@\n+2010-03-11  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/43257\n+\t* tree.c (assign_assembler_name_if_neeeded): New function.\n+\t(free_lang_data_in_cgraph): Assembler name assignment moved to the\n+\tabove new function.\n+\t* tree.h (assign_assembler_name_if_neeeded): Declare.\n+\t* cgraphunit.c (cgraph_analyze_function): Create an assembler name for\n+\tthe function if needed.\n+\n 2010-03-11  Chris Demetriou  <cgd@google.com>\n \n \t* Makefile.in (stmp-int-hdrs): Make include/unwind.h,"}, {"sha": "f4580adbd750bd561864c95de446d1b394764f16", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=0e0a1359200ad0f100ece2c2c84f728b9ade689c", "patch": "@@ -836,6 +836,8 @@ cgraph_analyze_function (struct cgraph_node *node)\n   current_function_decl = decl;\n   push_cfun (DECL_STRUCT_FUNCTION (decl));\n \n+  assign_assembler_name_if_neeeded (node->decl);\n+\n   /* Make sure to gimplify bodies only once.  During analyzing a\n      function we lower it, which will require gimplified nested\n      functions, so we can end up here with an already gimplified"}, {"sha": "279f499a23868e3d27f1818c89a60b7fd8f01a14", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e0a1359200ad0f100ece2c2c84f728b9ade689c", "patch": "@@ -1,3 +1,8 @@\n+2010-03-11  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/43257\n+\t* g++.dg/torture/pr43257.C: New test.\n+\n 2010-03-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43228"}, {"sha": "a3e75574adb908d2aa3fe0b86513cba7f9f224df", "filename": "gcc/testsuite/g++.dg/torture/pr43257.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr43257.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr43257.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr43257.C?ref=0e0a1359200ad0f100ece2c2c84f728b9ade689c", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do assemble } */\n+\n+class A {};\n+class B {};\n+\n+static void *func (int n)\n+{\n+  void *p;\n+  if (p == 0) throw ::A ();\n+}\n+\n+static void *func (int n, B const &)\n+{\n+  try {\n+      return func (n);\n+  }\n+  catch (::A const &) {\n+  }\n+  return func (n);\n+}\n+\n+void *f1 (int n)\n+{\n+  return func (n, B());\n+}\n+\n+void *f2 (int n)\n+{\n+  return func (n, B());\n+}"}, {"sha": "86fe2bb3b623914c3e1827e8d7a63809ce30b38f", "filename": "gcc/tree.c", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0e0a1359200ad0f100ece2c2c84f728b9ade689c", "patch": "@@ -4831,6 +4831,33 @@ find_decls_types_in_var (struct varpool_node *v, struct free_lang_data_d *fld)\n   find_decls_types (v->decl, fld);\n }\n \n+/* If T needs an assembler name, have one created for it.  */\n+\n+void\n+assign_assembler_name_if_neeeded (tree t)\n+{\n+  if (need_assembler_name_p (t))\n+    {\n+      /* When setting DECL_ASSEMBLER_NAME, the C++ mangler may emit\n+\t diagnostics that use input_location to show locus\n+\t information.  The problem here is that, at this point,\n+\t input_location is generally anchored to the end of the file\n+\t (since the parser is long gone), so we don't have a good\n+\t position to pin it to.\n+\n+\t To alleviate this problem, this uses the location of T's\n+\t declaration.  Examples of this are\n+\t testsuite/g++.dg/template/cond2.C and\n+\t testsuite/g++.dg/template/pr35240.C.  */\n+      location_t saved_location = input_location;\n+      input_location = DECL_SOURCE_LOCATION (t);\n+\n+      decl_assembler_name (t);\n+\n+      input_location = saved_location;\n+    }\n+}\n+\n \n /* Free language specific information for every operand and expression\n    in every node of the call graph.  This process operates in three stages:\n@@ -4880,26 +4907,7 @@ free_lang_data_in_cgraph (void)\n      now because free_lang_data_in_decl will invalidate data needed\n      for mangling.  This breaks mangling on interdependent decls.  */\n   for (i = 0; VEC_iterate (tree, fld.decls, i, t); i++)\n-    if (need_assembler_name_p (t))\n-      {\n-\t/* When setting DECL_ASSEMBLER_NAME, the C++ mangler may emit\n-\t   diagnostics that use input_location to show locus\n-\t   information.  The problem here is that, at this point,\n-\t   input_location is generally anchored to the end of the file\n-\t   (since the parser is long gone), so we don't have a good\n-\t   position to pin it to.\n-\n-\t   To alleviate this problem, this uses the location of T's\n-\t   declaration.  Examples of this are\n-\t   testsuite/g++.dg/template/cond2.C and\n-\t   testsuite/g++.dg/template/pr35240.C.  */\n-\tlocation_t saved_location = input_location;\n-\tinput_location = DECL_SOURCE_LOCATION (t);\n-\n-\tdecl_assembler_name (t);\n-\n-\tinput_location = saved_location;\n-      }\n+    assign_assembler_name_if_neeeded (t);\n \n   /* Traverse every decl found freeing its language data.  */\n   for (i = 0; VEC_iterate (tree, fld.decls, i, t); i++)"}, {"sha": "7e51ea624ae892fe0992e50925d9303c0df56192", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0a1359200ad0f100ece2c2c84f728b9ade689c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0e0a1359200ad0f100ece2c2c84f728b9ade689c", "patch": "@@ -4720,6 +4720,8 @@ extern tree build_low_bits_mask (tree, unsigned);\n extern tree tree_strip_nop_conversions (tree);\n extern tree tree_strip_sign_nop_conversions (tree);\n extern tree lhd_gcc_personality (void);\n+extern void assign_assembler_name_if_neeeded (tree);\n+\n \f\n /* In cgraph.c */\n extern void change_decl_assembler_name (tree, tree);"}]}