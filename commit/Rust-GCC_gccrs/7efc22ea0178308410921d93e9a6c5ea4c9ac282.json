{"sha": "7efc22ea0178308410921d93e9a6c5ea4c9ac282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VmYzIyZWEwMTc4MzA4NDEwOTIxZDkzZTlhNmM1ZWE0YzlhYzI4Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-02-09T03:40:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-02-09T03:40:14Z"}, "message": "re PR c++/35116 (Fail to compile valid code)\n\n        PR c++/35116\n        * tree.c (build_target_expr_with_type): Handle void initializer.\n        (bot_manip): Remap slot before recursing.\n\nFrom-SVN: r132197", "tree": {"sha": "77680746d5371e01844546434ae6d2526271f970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77680746d5371e01844546434ae6d2526271f970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7efc22ea0178308410921d93e9a6c5ea4c9ac282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efc22ea0178308410921d93e9a6c5ea4c9ac282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7efc22ea0178308410921d93e9a6c5ea4c9ac282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efc22ea0178308410921d93e9a6c5ea4c9ac282/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e37f6a497d5c1c0489f3fac12884f9a71fdc7147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37f6a497d5c1c0489f3fac12884f9a71fdc7147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37f6a497d5c1c0489f3fac12884f9a71fdc7147"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "da9668da2ad65f2b6ea6674f45e9b2f9d29c9934", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efc22ea0178308410921d93e9a6c5ea4c9ac282/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efc22ea0178308410921d93e9a6c5ea4c9ac282/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7efc22ea0178308410921d93e9a6c5ea4c9ac282", "patch": "@@ -1,3 +1,9 @@\n+2008-02-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/35116\n+\t* tree.c (build_target_expr_with_type): Handle void initializer.\n+\t(bot_manip): Remap slot before recursing.\n+\n 2008-02-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR other/35107"}, {"sha": "e893442be4227270bccfe4f2d681684358ebdb3b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efc22ea0178308410921d93e9a6c5ea4c9ac282/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efc22ea0178308410921d93e9a6c5ea4c9ac282/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7efc22ea0178308410921d93e9a6c5ea4c9ac282", "patch": "@@ -415,10 +415,12 @@ build_target_expr_with_type (tree init, tree type)\n   if (TREE_CODE (init) == TARGET_EXPR)\n     return init;\n   else if (CLASS_TYPE_P (type) && !TYPE_HAS_TRIVIAL_INIT_REF (type)\n+\t   && !VOID_TYPE_P (TREE_TYPE (init))\n \t   && TREE_CODE (init) != COND_EXPR\n \t   && TREE_CODE (init) != CONSTRUCTOR\n \t   && TREE_CODE (init) != VA_ARG_EXPR)\n-    /* We need to build up a copy constructor call.  COND_EXPR is a special\n+    /* We need to build up a copy constructor call.  A void initializer\n+       means we're being called from bot_manip.  COND_EXPR is a special\n        case because we already have copies on the arms and we don't want\n        another one here.  A CONSTRUCTOR is aggregate initialization, which\n        is handled separately.  A VA_ARG_EXPR is magic creation of an\n@@ -1468,17 +1470,17 @@ bot_manip (tree* tp, int* walk_subtrees, void* data)\n       tree u;\n \n       if (TREE_CODE (TREE_OPERAND (t, 1)) == AGGR_INIT_EXPR)\n-\tu = build_cplus_new\n-\t  (TREE_TYPE (t), break_out_target_exprs (TREE_OPERAND (t, 1)));\n+\tu = build_cplus_new (TREE_TYPE (t), TREE_OPERAND (t, 1));\n       else\n-\tu = build_target_expr_with_type\n-\t  (break_out_target_exprs (TREE_OPERAND (t, 1)), TREE_TYPE (t));\n+\tu = build_target_expr_with_type (TREE_OPERAND (t, 1), TREE_TYPE (t));\n \n       /* Map the old variable to the new one.  */\n       splay_tree_insert (target_remap,\n \t\t\t (splay_tree_key) TREE_OPERAND (t, 0),\n \t\t\t (splay_tree_value) TREE_OPERAND (u, 0));\n \n+      TREE_OPERAND (u, 1) = break_out_target_exprs (TREE_OPERAND (u, 1));\n+\n       /* Replace the old expression with the new version.  */\n       *tp = u;\n       /* We don't have to go below this point; the recursive call to"}, {"sha": "fbe16647126434f45e316ae64bcec8534b6e512e", "filename": "gcc/testsuite/g++.dg/init/value2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efc22ea0178308410921d93e9a6c5ea4c9ac282/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efc22ea0178308410921d93e9a6c5ea4c9ac282/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue2.C?ref=7efc22ea0178308410921d93e9a6c5ea4c9ac282", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/35116\n+// Test that break_out_target_exprs works properly with complex\n+// value-initialization.\n+\n+struct A\n+{\n+  virtual void f ();\n+};\n+\n+struct B\n+{\n+  A a;\n+};\n+\n+struct C\n+{\n+  C (int, B = B());\n+};\n+\n+void f ()\n+{\n+  C c (4);\n+}"}]}