{"sha": "8f905d691e15b560e9b64d26c2e5ab281c1fb6fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5MDVkNjkxZTE1YjU2MGU5YjY0ZDI2YzJlNWFiMjgxYzFmYjZmZA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-12-09T19:19:54Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-12-09T19:19:54Z"}, "message": "vabs_intrinsic_2.c: New test.\n\ngcc/testsuite/:\n\n        * gcc.target/aarch64/vabs_intrinsic_2.c: New test.\n\nFrom-SVN: r218530", "tree": {"sha": "5486161538ad297484c69b261c872240e58a3c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5486161538ad297484c69b261c872240e58a3c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/comments", "author": null, "committer": null, "parents": [{"sha": "82e0c914997afeaa6be4e3d9c42446b505c7043b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e0c914997afeaa6be4e3d9c42446b505c7043b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e0c914997afeaa6be4e3d9c42446b505c7043b"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "c5a3718ffbce407c6e0986d23e1c1e1d1072c1eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f905d691e15b560e9b64d26c2e5ab281c1fb6fd", "patch": "@@ -1,3 +1,12 @@\n+2014-12-09  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64.md (absdi2): Remove scratch operand by\n+\tearlyclobbering result operand.\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_types_unop_qualifiers):\n+\tRemove final qualifier_internal.\n+\t(aarch64_fold_builtin): Stop folding abs builtins, except on floats.\n+\n 2014-12-09  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n \n \t* gcc/config/aarch64/aarch64-protos.h (tune-params): Add reasociation"}, {"sha": "6df42fde8e84106486d2a57e61672131adfca96b", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=8f905d691e15b560e9b64d26c2e5ab281c1fb6fd", "patch": "@@ -128,11 +128,9 @@ typedef struct\n   enum aarch64_type_qualifiers *qualifiers;\n } aarch64_simd_builtin_datum;\n \n-/*  The qualifier_internal allows generation of a unary builtin from\n-    a pattern with a third pseudo-operand such as a match_scratch.  */\n static enum aarch64_type_qualifiers\n aarch64_types_unop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_none, qualifier_none, qualifier_internal };\n+  = { qualifier_none, qualifier_none };\n #define TYPES_UNOP (aarch64_types_unop_qualifiers)\n static enum aarch64_type_qualifiers\n aarch64_types_unopu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n@@ -1282,7 +1280,7 @@ aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n \n   switch (fcode)\n     {\n-      BUILTIN_VALLDI (UNOP, abs, 2)\n+      BUILTIN_VDQF (UNOP, abs, 2)\n \treturn fold_build1 (ABS_EXPR, type, args[0]);\n \tbreak;\n       VAR1 (UNOP, floatv2si, 2, v2sf)"}, {"sha": "97d7009c20f38071f006f33978985b5e6c889794", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=8f905d691e15b560e9b64d26c2e5ab281c1fb6fd", "patch": "@@ -2154,9 +2154,8 @@\n )\n \n (define_insn_and_split \"absdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,w\")\n-\t(abs:DI (match_operand:DI 1 \"register_operand\" \"r,w\")))\n-   (clobber (match_scratch:DI 2 \"=&r,X\"))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r,w\")\n+\t(abs:DI (match_operand:DI 1 \"register_operand\" \"r,w\")))]\n   \"\"\n   \"@\n    #\n@@ -2166,7 +2165,7 @@\n    && GP_REGNUM_P (REGNO (operands[1]))\"\n   [(const_int 0)]\n   {\n-    emit_insn (gen_rtx_SET (VOIDmode, operands[2],\n+    emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n \t\t\t    gen_rtx_XOR (DImode,\n \t\t\t\t\t gen_rtx_ASHIFTRT (DImode,\n \t\t\t\t\t\t\t   operands[1],\n@@ -2175,7 +2174,7 @@\n     emit_insn (gen_rtx_SET (VOIDmode,\n \t\t\t    operands[0],\n \t\t\t    gen_rtx_MINUS (DImode,\n-\t\t\t\t\t   operands[2],\n+\t\t\t\t\t   operands[0],\n \t\t\t\t\t   gen_rtx_ASHIFTRT (DImode,\n \t\t\t\t\t\t\t     operands[1],\n \t\t\t\t\t\t\t     GEN_INT (63)))));"}, {"sha": "e7a3e48787ccfc1700b9a0f0f2035764d05625d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f905d691e15b560e9b64d26c2e5ab281c1fb6fd", "patch": "@@ -1,3 +1,7 @@\n+2014-12-09  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/vabs_intrinsic_2.c: New test.\n+\n 2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64166"}, {"sha": "12fdd813bc3f58a183b4986c5c9c532c2b608699", "filename": "gcc/testsuite/gcc.target/aarch64/vabs_intrinsic_2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvabs_intrinsic_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f905d691e15b560e9b64d26c2e5ab281c1fb6fd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvabs_intrinsic_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvabs_intrinsic_2.c?ref=8f905d691e15b560e9b64d26c2e5ab281c1fb6fd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int8x8_t a = vabs_s8 (vdup_n_s8 (-128)); /* Should all be -128.  */\n+  uint8x8_t b = vcltz_s8 (a); /* Should all be true i.e. -1. */\n+  if (vget_lane_u8 (b, 1))\n+    return 0;\n+  abort ();\n+}\n+"}]}