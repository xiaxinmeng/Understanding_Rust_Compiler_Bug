{"sha": "674345b107b820d63bdc47879820d134fe5d5efe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc0MzQ1YjEwN2I4MjBkNjNiZGM0Nzg3OTgyMGQxMzRmZTVkNWVmZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-21T03:45:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-21T03:45:52Z"}, "message": "reorg.c (mark_referenced_resources): Parameter include_called_routine changed to include_delayed_effects.\n\n\t* reorg.c (mark_referenced_resources): Parameter include_called_routine\n\tchanged to include_delayed_effects.  All references changed.\n\t(mark_set_resources): Likewise.\n\t(insn_references_resource_p): Likewise.\n\t(insn_sets_resource_p): Likewise.\n\t(mark_referenced_resources, case INSN): Do not mark any resources\n\tas referenced if we are not including delayed effects, and the\n\tgiven insn has delayed effects.\n\t(mark_set_resources): Likewise for resources which are set/clobbered.\n\t(fill_simple_delay_slots): Include delayed effects for the delay insn\n\tif we are searching after the delay insn for candiates.\n\t(dbr_schedule): When initializing `end_of_function_needs' include\n\tdelayed effects.\n\nFrom-SVN: r3810", "tree": {"sha": "beb8f2e4a381d9312302589deb1886f7d17de44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beb8f2e4a381d9312302589deb1886f7d17de44f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/674345b107b820d63bdc47879820d134fe5d5efe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674345b107b820d63bdc47879820d134fe5d5efe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674345b107b820d63bdc47879820d134fe5d5efe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674345b107b820d63bdc47879820d134fe5d5efe/comments", "author": null, "committer": null, "parents": [{"sha": "72abf941895793587f5234688e903aa7fddd9934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72abf941895793587f5234688e903aa7fddd9934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72abf941895793587f5234688e903aa7fddd9934"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "4ad7a0c8757d6455035ce4dd8f39d7b971d75476", "filename": "gcc/reorg.c", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674345b107b820d63bdc47879820d134fe5d5efe/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674345b107b820d63bdc47879820d134fe5d5efe/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=674345b107b820d63bdc47879820d134fe5d5efe", "patch": "@@ -256,10 +256,10 @@ static void make_return_insns\tPROTO((rtx));\n    CALL_INSNs.  */\n \n static void\n-mark_referenced_resources (x, res, include_called_routine)\n+mark_referenced_resources (x, res, include_delayed_effects)\n      register rtx x;\n      register struct resources *res;\n-     register int include_called_routine;\n+     register int include_delayed_effects;\n {\n   register enum rtx_code code = GET_CODE (x);\n   register int i, j;\n@@ -354,7 +354,7 @@ mark_referenced_resources (x, res, include_called_routine)\n       return;\n \n     case CALL_INSN:\n-      if (include_called_routine)\n+      if (include_delayed_effects)\n \t{\n \t  /* A CALL references memory, the frame pointer if it exists, the\n \t     stack pointer, any global registers and any registers given in\n@@ -411,8 +411,15 @@ mark_referenced_resources (x, res, include_called_routine)\n \n     case INSN:\n     case JUMP_INSN:\n+\n+#ifdef INSN_REFERENCES_ARE_DELAYED\n+      if (! include_delayed_effects\n+\t  && INSN_REFERENCES_ARE_DELAYED (x))\n+\treturn;\n+#endif\n+\n       /* No special processing, just speed up.  */\n-      mark_referenced_resources (PATTERN (x), res, include_called_routine);\n+      mark_referenced_resources (PATTERN (x), res, include_delayed_effects);\n       return;\n     }\n \n@@ -422,13 +429,13 @@ mark_referenced_resources (x, res, include_called_routine)\n     switch (*format_ptr++)\n       {\n       case 'e':\n-\tmark_referenced_resources (XEXP (x, i), res, include_called_routine);\n+\tmark_referenced_resources (XEXP (x, i), res, include_delayed_effects);\n \tbreak;\n \n       case 'E':\n \tfor (j = 0; j < XVECLEN (x, i); j++)\n \t  mark_referenced_resources (XVECEXP (x, i, j), res,\n-\t\t\t\t     include_called_routine);\n+\t\t\t\t     include_delayed_effects);\n \tbreak;\n       }\n }\n@@ -447,11 +454,11 @@ mark_referenced_resources (x, res, include_called_routine)\n    our computation and thus may be placed in a delay slot.   */\n \n static void\n-mark_set_resources (x, res, in_dest, include_called_routine)\n+mark_set_resources (x, res, in_dest, include_delayed_effects)\n      register rtx x;\n      register struct resources *res;\n      int in_dest;\n-     int include_called_routine;\n+     int include_delayed_effects;\n {\n   register enum rtx_code code;\n   register int i, j;\n@@ -486,7 +493,7 @@ mark_set_resources (x, res, in_dest, include_called_routine)\n \t that aren't saved across calls, global registers and anything\n \t explicitly CLOBBERed immediately after the CALL_INSN.  */\n \n-      if (include_called_routine)\n+      if (include_delayed_effects)\n \t{\n \t  rtx next = NEXT_INSN (x);\n \n@@ -513,6 +520,12 @@ mark_set_resources (x, res, in_dest, include_called_routine)\n \t/* An insn consisting of just a CLOBBER (or USE) is just for flow\n \t   and doesn't actually do anything, so we ignore it.  */\n \n+#ifdef INSN_SETS_ARE_DELAYED\n+      if (! include_delayed_effects\n+\t  && INSN_SETS_ARE_DELAYED (x))\n+\treturn;\n+#endif\n+\n       x = PATTERN (x);\n       if (GET_CODE (x) != USE && GET_CODE (x) != CLOBBER)\n \tgoto restart;\n@@ -524,7 +537,7 @@ mark_set_resources (x, res, in_dest, include_called_routine)\n \t effects of the calling routine.  */\n \n       mark_set_resources (SET_DEST (x), res,\n-\t\t\t  (include_called_routine\n+\t\t\t  (include_delayed_effects\n \t\t\t   || GET_CODE (SET_SRC (x)) != CALL),\n \t\t\t  0);\n \n@@ -540,7 +553,7 @@ mark_set_resources (x, res, in_dest, include_called_routine)\n \tif (! (INSN_ANNULLED_BRANCH_P (XVECEXP (x, 0, 0))\n \t       && INSN_FROM_TARGET_P (XVECEXP (x, 0, i))))\n \t  mark_set_resources (XVECEXP (x, 0, i), res, 0,\n-\t\t\t      include_called_routine);\n+\t\t\t      include_delayed_effects);\n       return;\n \n     case POST_INC:\n@@ -579,13 +592,13 @@ mark_set_resources (x, res, in_dest, include_called_routine)\n     switch (*format_ptr++)\n       {\n       case 'e':\n-\tmark_set_resources (XEXP (x, i), res, in_dest, include_called_routine);\n+\tmark_set_resources (XEXP (x, i), res, in_dest, include_delayed_effects);\n \tbreak;\n \n       case 'E':\n \tfor (j = 0; j < XVECLEN (x, i); j++)\n \t  mark_set_resources (XVECEXP (x, i, j), res, in_dest,\n-\t\t\t      include_called_routine);\n+\t\t\t      include_delayed_effects);\n \tbreak;\n       }\n }\n@@ -662,15 +675,15 @@ resource_conflicts_p (res1, res2)\n    a large block of complex code.  */\n \n static int\n-insn_references_resource_p (insn, res, include_called_routine)\n+insn_references_resource_p (insn, res, include_delayed_effects)\n      register rtx insn;\n      register struct resources *res;\n-     int include_called_routine;\n+     int include_delayed_effects;\n {\n   struct resources insn_res;\n \n   CLEAR_RESOURCE (&insn_res);\n-  mark_referenced_resources (insn, &insn_res, include_called_routine);\n+  mark_referenced_resources (insn, &insn_res, include_delayed_effects);\n   return resource_conflicts_p (&insn_res, res);\n }\n \n@@ -680,15 +693,15 @@ insn_references_resource_p (insn, res, include_called_routine)\n    in front of mark_set_resources for details.  */\n \n static int\n-insn_sets_resource_p (insn, res, include_called_routine)\n+insn_sets_resource_p (insn, res, include_delayed_effects)\n      register rtx insn;\n      register struct resources *res;\n-     int include_called_routine;\n+     int include_delayed_effects;\n {\n   struct resources insn_sets;\n \n   CLEAR_RESOURCE (&insn_sets);\n-  mark_set_resources (insn, &insn_sets, 0, include_called_routine);\n+  mark_set_resources (insn, &insn_sets, 0, include_delayed_effects);\n   return resource_conflicts_p (&insn_sets, res);\n }\n \f\n@@ -2558,8 +2571,8 @@ fill_simple_delay_slots (first, non_jumps_p)\n \t    }\n \t  else \n \t    {\n-\t      mark_set_resources (insn, &set, 0, 0);\n-\t      mark_referenced_resources (insn, &needed, 0);\n+\t      mark_set_resources (insn, &set, 0, 1);\n+\t      mark_referenced_resources (insn, &needed, 1);\n \t      if (GET_CODE (insn) == JUMP_INSN)\n \t\t{\n \t\t  /* Get our target and show how many more uses we want to\n@@ -3751,7 +3764,7 @@ dbr_schedule (first, file)\n   if (current_function_return_rtx != 0\n       && GET_CODE (current_function_return_rtx) == REG)\n     mark_referenced_resources (current_function_return_rtx,\n-\t\t\t       &end_of_function_needs, 0);\n+\t\t\t       &end_of_function_needs, 1);\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     if (global_regs[i])\n@@ -3777,7 +3790,7 @@ dbr_schedule (first, file)\n   start_of_epilogue_needs = end_of_function_needs;\n \n   while (epilogue_insn = next_nonnote_insn (epilogue_insn))\n-    mark_set_resources (epilogue_insn, &end_of_function_needs, 0, 0);\n+    mark_set_resources (epilogue_insn, &end_of_function_needs, 0, 1);\n \n   /* Show we haven't computed an end-of-function label yet.  */\n   end_of_function_label = 0;"}]}