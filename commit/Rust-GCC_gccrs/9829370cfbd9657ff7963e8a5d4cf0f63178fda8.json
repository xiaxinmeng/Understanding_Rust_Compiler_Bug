{"sha": "9829370cfbd9657ff7963e8a5d4cf0f63178fda8", "node_id": "C_kwDOANBUbNoAKDk4MjkzNzBjZmJkOTY1N2ZmNzk2M2U4YTVkNGNmMGY2MzE3OGZkYTg", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-06-05T13:21:15Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-06-08T12:32:35Z"}, "message": "expand: Remove proc macro fragment from expander\n\nProcedural macros are no longer expanded on post order but rather\nexpanded from their parent. Hence they are no longer stored in the\nexpander which means this attribute can be removed. This commit also\nremove the old expansion mechanism.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-expand-visitor.h: Remove fragment collection fro\n\tprocedural macros.\n\t* expand/rust-macro-expand.h (struct MacroExpander): Remove\n\tprocedural macro fragment from expander.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "3ec504ab89297471f1ac8ca57e993b5fe089bf8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ec504ab89297471f1ac8ca57e993b5fe089bf8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9829370cfbd9657ff7963e8a5d4cf0f63178fda8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9829370cfbd9657ff7963e8a5d4cf0f63178fda8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9829370cfbd9657ff7963e8a5d4cf0f63178fda8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9829370cfbd9657ff7963e8a5d4cf0f63178fda8/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855a62d13054bd3183cebce05f5ca9ec1ee4b401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855a62d13054bd3183cebce05f5ca9ec1ee4b401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855a62d13054bd3183cebce05f5ca9ec1ee4b401"}], "stats": {"total": 33, "additions": 0, "deletions": 33}, "files": [{"sha": "d1bdd8a820ad8367c9fc819668ea97fdb3e021f3", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9829370cfbd9657ff7963e8a5d4cf0f63178fda8/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9829370cfbd9657ff7963e8a5d4cf0f63178fda8/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=9829370cfbd9657ff7963e8a5d4cf0f63178fda8", "patch": "@@ -127,8 +127,6 @@ class ExpandVisitor : public AST::ASTVisitor\n \tvalue->accept_vis (*this);\n \n \tauto final_fragment = expander.take_expanded_fragment ();\n-\tauto proc_macro_fragment\n-\t  = expander.take_expanded_proc_macro_fragment ();\n \n \t// FIXME: Is that correct? It seems *extremely* dodgy\n \tif (final_fragment.should_expand ())\n@@ -144,19 +142,6 @@ class ExpandVisitor : public AST::ASTVisitor\n \t\t  }\n \t      }\n \t  }\n-\telse if (proc_macro_fragment.should_expand ())\n-\t  {\n-\t    it = values.erase (it);\n-\t    for (auto &node : proc_macro_fragment.get_nodes ())\n-\t      {\n-\t\tauto new_node = extractor (node);\n-\t\tif (new_node != nullptr)\n-\t\t  {\n-\t\t    it = values.insert (it, std::move (new_node));\n-\t\t    it++;\n-\t\t  }\n-\t      }\n-\t  }\n \telse\n \t  {\n \t    ++it;"}, {"sha": "524e9b682865171d8722ca0acac7d626b7bd82e5", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9829370cfbd9657ff7963e8a5d4cf0f63178fda8/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9829370cfbd9657ff7963e8a5d4cf0f63178fda8/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=9829370cfbd9657ff7963e8a5d4cf0f63178fda8", "patch": "@@ -236,7 +236,6 @@ struct MacroExpander\n     : cfg (cfg), crate (crate), session (session),\n       sub_stack (SubstitutionScope ()),\n       expanded_fragment (AST::Fragment::create_error ()),\n-      expanded_proc_macro_fragment (AST::Fragment::create_error ()),\n       has_changed_flag (false), resolver (Resolver::Resolver::get ()),\n       mappings (Analysis::Mappings::get ())\n   {}\n@@ -338,22 +337,6 @@ struct MacroExpander\n     return fragment;\n   }\n \n-  void set_expanded_proc_macro_fragment (AST::Fragment &&fragment)\n-  {\n-    if (!fragment.is_error ())\n-      has_changed_flag = true;\n-\n-    expanded_proc_macro_fragment = std::move (fragment);\n-  }\n-\n-  AST::Fragment take_expanded_proc_macro_fragment ()\n-  {\n-    auto fragment = std::move (expanded_proc_macro_fragment);\n-    expanded_proc_macro_fragment = AST::Fragment::create_error ();\n-\n-    return fragment;\n-  }\n-\n   void import_proc_macros (std::string extern_crate);\n \n   template <typename T>\n@@ -479,7 +462,6 @@ struct MacroExpander\n   SubstitutionScope sub_stack;\n   std::vector<ContextType> context;\n   AST::Fragment expanded_fragment;\n-  AST::Fragment expanded_proc_macro_fragment;\n   bool has_changed_flag;\n \n   AST::MacroRulesDefinition *last_def;"}]}