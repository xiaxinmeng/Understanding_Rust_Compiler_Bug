{"sha": "91bac9fed5d082f0b180834110ebc0f46f97599a", "node_id": "C_kwDOANBUbNoAKDkxYmFjOWZlZDVkMDgyZjBiMTgwODM0MTEwZWJjMGY0NmY5NzU5OWE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-01T11:06:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-01T13:26:29Z"}, "message": "libstdc++: Fix range access for empty std::valarray [PR103022]\n\nThe std::begin and std::end overloads for std::valarray are defined in\nterms of std::addressof(v[0]) which is undefined for an empty valarray.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103022\n\t* include/std/valarray (begin, end): Do not dereference an empty\n\tvalarray. Add noexcept and [[nodiscard]].\n\t* testsuite/26_numerics/valarray/range_access.cc: Check empty\n\tvalarray. Check iterator properties. Run as well as compiling.\n\t* testsuite/26_numerics/valarray/range_access2.cc: Likewise.\n\t* testsuite/26_numerics/valarray/103022.cc: New test.", "tree": {"sha": "fee69d3a9ffe1e3a6252ea0e4e09132e8b068883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fee69d3a9ffe1e3a6252ea0e4e09132e8b068883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91bac9fed5d082f0b180834110ebc0f46f97599a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91bac9fed5d082f0b180834110ebc0f46f97599a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91bac9fed5d082f0b180834110ebc0f46f97599a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91bac9fed5d082f0b180834110ebc0f46f97599a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc5baac5c37d8da1931043c4bbeffa3ab93a8e91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5baac5c37d8da1931043c4bbeffa3ab93a8e91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc5baac5c37d8da1931043c4bbeffa3ab93a8e91"}], "stats": {"total": 116, "additions": 100, "deletions": 16}, "files": [{"sha": "c6242eb4db9086c2cc69fc1618a4c4bfaa588306", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bac9fed5d082f0b180834110ebc0f46f97599a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bac9fed5d082f0b180834110ebc0f46f97599a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=91bac9fed5d082f0b180834110ebc0f46f97599a", "patch": "@@ -1210,39 +1210,53 @@ _DEFINE_BINARY_OPERATOR(>=, __greater_equal)\n    *  @param  __va  valarray.\n    */\n   template<class _Tp>\n+    [[__nodiscard__]]\n     inline _Tp*\n-    begin(valarray<_Tp>& __va)\n-    { return std::__addressof(__va[0]); }\n+    begin(valarray<_Tp>& __va) noexcept\n+    { return __va.size() ? std::__addressof(__va[0]) : nullptr; }\n \n   /**\n    *  @brief  Return an iterator pointing to the first element of\n    *          the const valarray.\n    *  @param  __va  valarray.\n    */\n   template<class _Tp>\n+    [[__nodiscard__]]\n     inline const _Tp*\n-    begin(const valarray<_Tp>& __va)\n-    { return std::__addressof(__va[0]); }\n+    begin(const valarray<_Tp>& __va) noexcept\n+    { return __va.size() ? std::__addressof(__va[0]) : nullptr; }\n \n   /**\n    *  @brief  Return an iterator pointing to one past the last element of\n    *          the valarray.\n    *  @param  __va  valarray.\n    */\n   template<class _Tp>\n+    [[__nodiscard__]]\n     inline _Tp*\n-    end(valarray<_Tp>& __va)\n-    { return std::__addressof(__va[0]) + __va.size(); }\n+    end(valarray<_Tp>& __va) noexcept\n+    {\n+      if (auto __n = __va.size())\n+\treturn std::__addressof(__va[0]) + __n;\n+      else\n+\treturn nullptr;\n+    }\n \n   /**\n    *  @brief  Return an iterator pointing to one past the last element of\n    *          the const valarray.\n    *  @param  __va  valarray.\n    */\n   template<class _Tp>\n+    [[__nodiscard__]]\n     inline const _Tp*\n-    end(const valarray<_Tp>& __va)\n-    { return std::__addressof(__va[0]) + __va.size(); }\n+    end(const valarray<_Tp>& __va) noexcept\n+    {\n+      if (auto __n = __va.size())\n+\treturn std::__addressof(__va[0]) + __n;\n+      else\n+\treturn nullptr;\n+    }\n #endif // C++11\n \n   /// @} group numeric_arrays"}, {"sha": "d2e346760dd1b4c6029dbf5fefd38a6d607796a4", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/103022.cc", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bac9fed5d082f0b180834110ebc0f46f97599a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F103022.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bac9fed5d082f0b180834110ebc0f46f97599a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F103022.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F103022.cc?ref=91bac9fed5d082f0b180834110ebc0f46f97599a", "patch": "@@ -0,0 +1,15 @@\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile { target c++11 } }\n+\n+#include <valarray>\n+\n+int main()\n+{\n+  // PR libstdc++/103022\n+  std::valarray<double> va;\n+  (void) std::begin(va);\n+  (void) std::end(va);\n+  const auto& cva = va;\n+  (void) std::begin(cva);\n+  (void) std::end(cva);\n+}"}, {"sha": "c49c2c52f474e5b89fbb163b4e5d0fd30610e56a", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/range_access.cc", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bac9fed5d082f0b180834110ebc0f46f97599a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bac9fed5d082f0b180834110ebc0f46f97599a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Frange_access.cc?ref=91bac9fed5d082f0b180834110ebc0f46f97599a", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++11 } }\n+// { dg-do run { target c++11 } }\n \n // Copyright (C) 2010-2021 Free Software Foundation, Inc.\n //\n@@ -17,17 +17,54 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.6.10 valarray range access: [valarray.range]\n+// C++11 26.6.10 valarray range access: [valarray.range]\n \n #include <valarray>\n \n void\n test01()\n {\n   std::valarray<double> va{1.0, 2.0, 3.0};\n-  std::begin(va);\n-  std::end(va);\n+  (void) std::begin(va);\n+  (void) std::end(va);\n   const auto& cva = va;\n-  std::begin(cva);\n-  std::end(cva);\n+  (void) std::begin(cva);\n+  (void) std::end(cva);\n+\n+  using Iter = decltype(std::begin(va));\n+  using IterTraits = std::iterator_traits<Iter>;\n+  static_assert( std::is_same<Iter, decltype(std::end(va))>::value, \"\" );\n+  static_assert( std::is_same<IterTraits::iterator_category,\n+\t\t\t      std::random_access_iterator_tag>::value, \"\" );\n+  static_assert( std::is_same<IterTraits::value_type, double>::value, \"\" );\n+  static_assert( std::is_same<IterTraits::reference, double&>::value, \"\" );\n+  using CIter = decltype(std::begin(cva));\n+  using CIterTraits = std::iterator_traits<CIter>;\n+  static_assert( std::is_same<CIter, decltype(std::end(cva))>::value, \"\" );\n+  static_assert( std::is_same<CIterTraits::iterator_category,\n+\t\t\t      std::random_access_iterator_tag>::value, \"\" );\n+  static_assert( std::is_same<CIterTraits::value_type, double>::value, \"\" );\n+  static_assert( std::is_same<CIterTraits::reference, const double&>::value, \"\" );\n+#if __cplusplus >= 202002L\n+  static_assert( std::contiguous_iterator<Iter> );\n+  static_assert( std::contiguous_iterator<CIter> );\n+#endif\n+}\n+\n+// PR libstdc++/103022\n+void\n+test02()\n+{\n+  std::valarray<double> va;\n+  (void) std::begin(va);\n+  (void) std::end(va);\n+  const auto& cva = va;\n+  (void) std::begin(cva);\n+  (void) std::end(cva);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n }"}, {"sha": "4217367cf221dc50fe1f5aa63ce4df2f1267975c", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/range_access2.cc", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bac9fed5d082f0b180834110ebc0f46f97599a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Frange_access2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bac9fed5d082f0b180834110ebc0f46f97599a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Frange_access2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Frange_access2.cc?ref=91bac9fed5d082f0b180834110ebc0f46f97599a", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++14 } }\n+// { dg-do run { target c++14 } }\n \n // Copyright (C) 2015-2021 Free Software Foundation, Inc.\n //\n@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.6.10 valarray range access: [valarray.range]\n+// C++11 26.6.10 valarray range access: [valarray.range]\n \n #include <iterator>\n #include <valarray>\n@@ -33,3 +33,21 @@ test01()\n   (void) std::cbegin(cva);\n   (void) std::cend(cva);\n }\n+\n+// PR libstdc++/103022\n+void\n+test02()\n+{\n+  std::valarray<double> va;\n+  (void) std::cbegin(va);\n+  (void) std::cend(va);\n+  const auto& cva = va;\n+  (void) std::cbegin(cva);\n+  (void) std::cend(cva);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}