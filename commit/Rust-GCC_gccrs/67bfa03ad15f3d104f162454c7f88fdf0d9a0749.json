{"sha": "67bfa03ad15f3d104f162454c7f88fdf0d9a0749", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiZmEwM2FkMTVmM2QxMDRmMTYyNDU0YzdmODhmZGYwZDlhMDc0OQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-08-13T19:18:53Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-08-13T19:18:53Z"}, "message": "rs6000.c (rs6000_gimple_fold_builtin): Add support for gimple-folding of vec_pack() and vec_unpack() intrinsics.\n\n[gcc]\n\n2018-08-13 Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin):\n\tAdd support for gimple-folding of vec_pack() and vec_unpack()\n\tintrinsics.\n\nFrom-SVN: r263519", "tree": {"sha": "2f921e6feb6e2d989c06d925890de343d91b7ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f921e6feb6e2d989c06d925890de343d91b7ab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67bfa03ad15f3d104f162454c7f88fdf0d9a0749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67bfa03ad15f3d104f162454c7f88fdf0d9a0749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67bfa03ad15f3d104f162454c7f88fdf0d9a0749", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67bfa03ad15f3d104f162454c7f88fdf0d9a0749/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca086dda978dd10e7f26cf29aefa923d02cc1131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca086dda978dd10e7f26cf29aefa923d02cc1131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca086dda978dd10e7f26cf29aefa923d02cc1131"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "1e407ea321a7925655cdfc79b827c234dd341e24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67bfa03ad15f3d104f162454c7f88fdf0d9a0749/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67bfa03ad15f3d104f162454c7f88fdf0d9a0749/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67bfa03ad15f3d104f162454c7f88fdf0d9a0749", "patch": "@@ -1,3 +1,9 @@\n+2018-08-13 Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin):\n+\tAdd support for gimple-folding of vec_pack() and vec_unpack()\n+\tintrinsics.\n+\n 2018-08-13 Will Schmidt <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_builtin_valid_without_lhs): Add"}, {"sha": "cd6c75aa2dc6498e1a47cf46ca459cc65b60c490", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67bfa03ad15f3d104f162454c7f88fdf0d9a0749/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67bfa03ad15f3d104f162454c7f88fdf0d9a0749/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=67bfa03ad15f3d104f162454c7f88fdf0d9a0749", "patch": "@@ -15770,6 +15770,59 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case VSX_BUILTIN_VEC_MERGEH_V2DI:\n \tfold_mergehl_helper (gsi, stmt, 0);\n \treturn true;\n+\n+    /* d = vec_pack (a, b) */\n+    case P8V_BUILTIN_VPKUDUM:\n+    case ALTIVEC_BUILTIN_VPKUHUM:\n+    case ALTIVEC_BUILTIN_VPKUWUM:\n+      {\n+       arg0 = gimple_call_arg (stmt, 0);\n+       arg1 = gimple_call_arg (stmt, 1);\n+       lhs = gimple_call_lhs (stmt);\n+       gimple *g = gimple_build_assign (lhs, VEC_PACK_TRUNC_EXPR, arg0, arg1);\n+       gimple_set_location (g, gimple_location (stmt));\n+       gsi_replace (gsi, g, true);\n+       return true;\n+      }\n+\n+   /* d = vec_unpackh (a) */\n+   /* Note that the UNPACK_{HI,LO}_EXPR used in the gimple_build_assign call\n+      in this code is sensitive to endian-ness, and needs to be inverted to\n+      handle both LE and BE targets.  */\n+    case ALTIVEC_BUILTIN_VUPKHSB:\n+    case ALTIVEC_BUILTIN_VUPKHSH:\n+    case P8V_BUILTIN_VUPKHSW:\n+      {\n+       arg0 = gimple_call_arg (stmt, 0);\n+       lhs = gimple_call_lhs (stmt);\n+       if (BYTES_BIG_ENDIAN)\n+\t g = gimple_build_assign (lhs, VEC_UNPACK_HI_EXPR, arg0);\n+       else\n+\t g = gimple_build_assign (lhs, VEC_UNPACK_LO_EXPR, arg0);\n+       gimple_set_location (g, gimple_location (stmt));\n+       gsi_replace (gsi, g, true);\n+       return true;\n+      }\n+   /* d = vec_unpackl (a) */\n+    case ALTIVEC_BUILTIN_VUPKLSB:\n+    case ALTIVEC_BUILTIN_VUPKLSH:\n+    case P8V_BUILTIN_VUPKLSW:\n+      {\n+       arg0 = gimple_call_arg (stmt, 0);\n+       lhs = gimple_call_lhs (stmt);\n+       if (BYTES_BIG_ENDIAN)\n+\t g = gimple_build_assign (lhs, VEC_UNPACK_LO_EXPR, arg0);\n+       else\n+\t g = gimple_build_assign (lhs, VEC_UNPACK_HI_EXPR, arg0);\n+       gimple_set_location (g, gimple_location (stmt));\n+       gsi_replace (gsi, g, true);\n+       return true;\n+      }\n+    /* There is no gimple type corresponding with pixel, so just return.  */\n+    case ALTIVEC_BUILTIN_VUPKHPX:\n+    case ALTIVEC_BUILTIN_VUPKLPX:\n+      return false;\n+\n     default:\n       if (TARGET_DEBUG_BUILTIN)\n \tfprintf (stderr, \"gimple builtin intrinsic not matched:%d %s %s\\n\","}]}