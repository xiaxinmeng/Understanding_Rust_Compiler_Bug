{"sha": "37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiYzMzZjcyY2JhN2NhOGExM2I2MGVlYTdhYmVjYjA5NTU5YjBmYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-10-25T07:56:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-10-25T07:56:55Z"}, "message": "re PR fortran/87725 (OpenMP 4.5 clause schedule(simd,monotonic:static) not understood)\n\n\tPR fortran/87725\n\t* openmp.c (gfc_match_omp_clauses): Parse simd, monotonic and\n\tnonmonotonic modifiers regardless of if they have been parsed\n\talready or if the opposite one has.  Fix up check whether\n\tcomma after modifier should be parsed.\n\t(resolve_omp_clauses): Diagnose schedule modifier restrictions.\n\n\t* c-c++-common/gomp/schedule-modifiers-1.c (bar): Separate modifier\n\tfrom kind with a colon rather than comma.\n\t* gfortran.dg/gomp/schedule-modifiers-1.f90: New test.\n\t* gfortran.dg/gomp/schedule-modifiers-2.f90: New test.\n\nFrom-SVN: r265479", "tree": {"sha": "0e3f6a5d98795f9be2cb4fcb4ec43f456d2fd761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e3f6a5d98795f9be2cb4fcb4ec43f456d2fd761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "872324bed46845ee78c764d55eeeb5029afae532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872324bed46845ee78c764d55eeeb5029afae532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/872324bed46845ee78c764d55eeeb5029afae532"}], "stats": {"total": 169, "additions": 156, "deletions": 13}, "files": [{"sha": "91697532ca4141aa2cf6f175c1d74ad14031d8ad", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "patch": "@@ -1,3 +1,12 @@\n+2018-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/87725\n+\t* openmp.c (gfc_match_omp_clauses): Parse simd, monotonic and\n+\tnonmonotonic modifiers regardless of if they have been parsed\n+\talready or if the opposite one has.  Fix up check whether\n+\tcomma after modifier should be parsed.\n+\t(resolve_omp_clauses): Diagnose schedule modifier restrictions.\n+\n 2018-10-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/85603"}, {"sha": "6430e61ea7a670d3b706a893e96937cc743772b8", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "patch": "@@ -1710,22 +1710,17 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      locus old_loc2 = gfc_current_locus;\n \t      do\n \t\t{\n-\t\t  if (!c->sched_simd\n-\t\t      && gfc_match (\"simd\") == MATCH_YES)\n+\t\t  if (gfc_match (\"simd\") == MATCH_YES)\n \t\t    {\n \t\t      c->sched_simd = true;\n \t\t      nmodifiers++;\n \t\t    }\n-\t\t  else if (!c->sched_monotonic\n-\t\t\t   && !c->sched_nonmonotonic\n-\t\t\t   && gfc_match (\"monotonic\") == MATCH_YES)\n+\t\t  else if (gfc_match (\"monotonic\") == MATCH_YES)\n \t\t    {\n \t\t      c->sched_monotonic = true;\n \t\t      nmodifiers++;\n \t\t    }\n-\t\t  else if (!c->sched_monotonic\n-\t\t\t   && !c->sched_nonmonotonic\n-\t\t\t   && gfc_match (\"nonmonotonic\") == MATCH_YES)\n+\t\t  else if (gfc_match (\"nonmonotonic\") == MATCH_YES)\n \t\t    {\n \t\t      c->sched_nonmonotonic = true;\n \t\t      nmodifiers++;\n@@ -1736,7 +1731,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\tgfc_current_locus = old_loc2;\n \t\t      break;\n \t\t    }\n-\t\t  if (nmodifiers == 0\n+\t\t  if (nmodifiers == 1\n \t\t      && gfc_match (\" , \") == MATCH_YES)\n \t\t    continue;\n \t\t  else if (gfc_match (\" : \") == MATCH_YES)\n@@ -4075,6 +4070,30 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \tgfc_warning (0, \"INTEGER expression of SCHEDULE clause's chunk_size \"\n \t\t     \"at %L must be positive\", &expr->where);\n     }\n+  if (omp_clauses->sched_kind != OMP_SCHED_NONE\n+      && omp_clauses->sched_nonmonotonic)\n+    {\n+      if (omp_clauses->sched_kind != OMP_SCHED_DYNAMIC\n+\t  && omp_clauses->sched_kind != OMP_SCHED_GUIDED)\n+\t{\n+\t  const char *p;\n+\t  switch (omp_clauses->sched_kind)\n+\t    {\n+\t    case OMP_SCHED_STATIC: p = \"STATIC\"; break;\n+\t    case OMP_SCHED_RUNTIME: p = \"RUNTIME\"; break;\n+\t    case OMP_SCHED_AUTO: p = \"AUTO\"; break;\n+\t    default: gcc_unreachable ();\n+\t    }\n+\t  gfc_error (\"NONMONOTONIC modifier specified for %s schedule kind \"\n+\t\t     \"at %L\", p, &code->loc);\n+\t}\n+      else if (omp_clauses->sched_monotonic)\n+\tgfc_error (\"Both MONOTONIC and NONMONOTONIC schedule modifiers \"\n+\t\t   \"specified at %L\", &code->loc);\n+      else if (omp_clauses->ordered)\n+\tgfc_error (\"NONMONOTONIC schedule modifier specified with ORDERED \"\n+\t\t   \"clause at %L\", &code->loc);\n+    }\n \n   /* Check that no symbol appears on multiple clauses, except that\n      a symbol can appear on both firstprivate and lastprivate.  */"}, {"sha": "94496cd30a7fde61e4a745264fe14f8a6dcb2f5d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "patch": "@@ -1,3 +1,11 @@\n+2018-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/87725\n+\t* c-c++-common/gomp/schedule-modifiers-1.c (bar): Separate modifier\n+\tfrom kind with a colon rather than comma.\n+\t* gfortran.dg/gomp/schedule-modifiers-1.f90: New test.\n+\t* gfortran.dg/gomp/schedule-modifiers-2.f90: New test.\n+\n 2018-10-24  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* gcc.target/powerpc/float128-math.c: New test to make sure the"}, {"sha": "33ca3a6534d7c0549c9adba708f00e535b522f2b", "filename": "gcc/testsuite/c-c++-common/gomp/schedule-modifiers-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fschedule-modifiers-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fschedule-modifiers-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fschedule-modifiers-1.c?ref=37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "patch": "@@ -80,21 +80,21 @@ bar (void)\n   #pragma omp for schedule (nonmonotonic : auto)\t/* { dg-error \".nonmonotonic. modifier specified for .auto. schedule kind\" } */\n   for (i = 0; i < 64; i++)\n     ;\n-  #pragma omp for schedule (nonmonotonic, dynamic) ordered\t/* { dg-error \".nonmonotonic. schedule modifier specified together with .ordered. clause\" } */\n+  #pragma omp for schedule (nonmonotonic : dynamic) ordered\t/* { dg-error \".nonmonotonic. schedule modifier specified together with .ordered. clause\" } */\n   for (i = 0; i < 64; i++)\n     #pragma omp ordered\n       ;\n-  #pragma omp for ordered schedule(nonmonotonic, dynamic, 5)\t/* { dg-error \".nonmonotonic. schedule modifier specified together with .ordered. clause\" } */\n+  #pragma omp for ordered schedule(nonmonotonic : dynamic, 5)\t/* { dg-error \".nonmonotonic. schedule modifier specified together with .ordered. clause\" } */\n   for (i = 0; i < 64; i++)\n     #pragma omp ordered\n       ;\n-  #pragma omp for schedule (nonmonotonic, guided) ordered(1)\t/* { dg-error \".nonmonotonic. schedule modifier specified together with .ordered. clause\" } */\n+  #pragma omp for schedule (nonmonotonic : guided) ordered(1)\t/* { dg-error \".nonmonotonic. schedule modifier specified together with .ordered. clause\" } */\n   for (i = 0; i < 64; i++)\n     {\n       #pragma omp ordered depend(sink: i - 1)\n       #pragma omp ordered depend(source)\n     }\n-  #pragma omp for ordered(1) schedule(nonmonotonic, guided, 2)\t/* { dg-error \".nonmonotonic. schedule modifier specified together with .ordered. clause\" } */\n+  #pragma omp for ordered(1) schedule(nonmonotonic : guided, 2)\t/* { dg-error \".nonmonotonic. schedule modifier specified together with .ordered. clause\" } */\n   for (i = 0; i < 64; i++)\n     {\n       #pragma omp ordered depend(source)"}, {"sha": "9618e3983750d2462e6ef80762daa245e8a39b96", "filename": "gcc/testsuite/gfortran.dg/gomp/schedule-modifiers-1.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fschedule-modifiers-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fschedule-modifiers-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fschedule-modifiers-1.f90?ref=37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "patch": "@@ -0,0 +1,63 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp\" }\n+\n+subroutine foo\n+  integer :: i\n+  !$omp do simd schedule (simd, simd: static, 5)\n+  do i = 0, 64\n+  end do\n+  !$omp do simd schedule (monotonic, simd: static)\n+  do i = 0, 64\n+  end do\n+  !$omp do simd schedule (simd , monotonic : static, 6)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic, monotonic : static, 7)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (nonmonotonic, nonmonotonic : dynamic)\n+  do i = 0, 64\n+  end do\n+  !$omp do simd schedule (nonmonotonic , simd : dynamic, 3)\n+  do i = 0, 64\n+  end do\n+  !$omp do simd schedule (nonmonotonic,simd:guided,4)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic: static, 2)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic : static)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic : dynamic)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic : dynamic, 3)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic : guided)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic : guided, 7)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic : runtime)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic : auto)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (nonmonotonic : dynamic)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (nonmonotonic : dynamic, 3)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (nonmonotonic : guided)\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (nonmonotonic : guided, 7)\n+  do i = 0, 64\n+  end do\n+end subroutine foo"}, {"sha": "0be53cc71a5d339dbb2c10e34ff6f9b739e11c17", "filename": "gcc/testsuite/gfortran.dg/gomp/schedule-modifiers-2.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fschedule-modifiers-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc33f72cba7ca8a13b60eea7abecb09559b0fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fschedule-modifiers-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fschedule-modifiers-2.f90?ref=37bc33f72cba7ca8a13b60eea7abecb09559b0fc", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp\" }\n+\n+subroutine foo\n+  integer :: i\n+  !$omp do schedule (nonmonotonic: static, 2)\t! { dg-error \"NONMONOTONIC modifier specified for STATIC schedule kind\" }\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (nonmonotonic : static)\t! { dg-error \"NONMONOTONIC modifier specified for STATIC schedule kind\" }\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (nonmonotonic : runtime)\t! { dg-error \"NONMONOTONIC modifier specified for RUNTIME schedule kind\" }\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (nonmonotonic : auto)\t! { dg-error \"NONMONOTONIC modifier specified for AUTO schedule kind\" }\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (nonmonotonic : dynamic) ordered\t! { dg-error \"NONMONOTONIC schedule modifier specified with ORDERED clause\" }\n+  do i = 0, 64\n+    !$omp ordered\n+    !$omp end ordered\n+  end do\n+  !$omp do ordered schedule(nonmonotonic : dynamic, 5)\t! { dg-error \"NONMONOTONIC schedule modifier specified with ORDERED clause\" }\n+  do i = 0, 64\n+    !$omp ordered\n+    !$omp end ordered\n+  end do\n+  !$omp do schedule (nonmonotonic : guided) ordered(1)\t! { dg-error \"NONMONOTONIC schedule modifier specified with ORDERED clause\" }\n+  do i = 0, 64\n+    !$omp ordered depend(sink: i - 1)\n+    !$omp ordered depend(source)\n+  end do\n+  !$omp do ordered(1) schedule(nonmonotonic : guided, 2)\t! { dg-error \"NONMONOTONIC schedule modifier specified with ORDERED clause\" }\n+  do i = 0, 64\n+    !$omp ordered depend(source)\n+    !$ordered depend(sink: i - 1)\n+  end do\n+  !$omp do schedule (nonmonotonic , monotonic : dynamic)\t! { dg-error \"Both MONOTONIC and NONMONOTONIC schedule modifiers specified\" }\n+  do i = 0, 64\n+  end do\n+  !$omp do schedule (monotonic,nonmonotonic:dynamic)\t! { dg-error \"Both MONOTONIC and NONMONOTONIC schedule modifiers specified\" }\n+  do i = 0, 64\n+  end do\n+end subroutine foo"}]}