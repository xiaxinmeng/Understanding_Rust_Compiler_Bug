{"sha": "02cc38b5eeb613c6139bf03885a806270254b645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJjYzM4YjVlZWI2MTNjNjEzOWJmMDM4ODVhODA2MjcwMjU0YjY0NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-31T10:56:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-31T10:56:29Z"}, "message": "(my_strerror): New function.\n\n(error_from_errno, perror_with_name): Use it.\n\nFrom-SVN: r7841", "tree": {"sha": "69b90142f5eaa21d6b47fa13255b2fbb8abc5f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69b90142f5eaa21d6b47fa13255b2fbb8abc5f8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02cc38b5eeb613c6139bf03885a806270254b645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02cc38b5eeb613c6139bf03885a806270254b645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02cc38b5eeb613c6139bf03885a806270254b645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02cc38b5eeb613c6139bf03885a806270254b645/comments", "author": null, "committer": null, "parents": [{"sha": "7106180777a64421e997bb928d8b639186b9b685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7106180777a64421e997bb928d8b639186b9b685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7106180777a64421e997bb928d8b639186b9b685"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "a35336d761045a6a8de9373a368fe71989f36d0b", "filename": "gcc/cccp.c", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02cc38b5eeb613c6139bf03885a806270254b645/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02cc38b5eeb613c6139bf03885a806270254b645/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=02cc38b5eeb613c6139bf03885a806270254b645", "patch": "@@ -93,7 +93,6 @@ typedef unsigned char U_CHAR;\n /* VMS-specific definitions */\n #ifdef VMS\n #include <time.h>\n-#include <perror.h>\t\t/* This defines sys_errlist/sys_nerr properly */\n #include <descrip.h>\n #define O_RDONLY\t0\t/* Open arg for Read/Only  */\n #define O_WRONLY\t1\t/* Open arg for Write/Only */\n@@ -186,12 +185,20 @@ extern char *getenv ();\n extern FILE *fdopen ();\n extern char *version_string;\n extern struct tm *localtime ();\n+#ifndef VMS\n+#ifndef HAVE_STRERROR\n extern int sys_nerr;\n #if defined(bsd4_4) || defined(__NetBSD__)\n extern const char *const sys_errlist[];\n #else\n extern char *sys_errlist[];\n #endif\n+#else\t/* HAVE_STERRROR */\n+char *strerror ();\n+#endif\n+#else\t/* VMS */\n+char *strerror (int,...);\n+#endif\n extern int parse_escape ();\n \n #ifndef errno\n@@ -8386,6 +8393,39 @@ change_newlines (start, length)\n   return obp - start;\n }\n \f\n+/*\n+ * my_strerror - return the descriptive text associated with an `errno' code.\n+ */\n+\n+char *\n+my_strerror (errnum)\n+     int errnum;\n+{\n+  char *result;\n+\n+#ifndef VMS\n+#ifndef HAVE_STRERROR\n+  result = (char *) ((errnum < sys_nerr) ? sys_errlist[errnum] : 0);\n+#else\n+  result = strerror (errnum);\n+#endif\n+#else\t/* VMS */\n+  /* VAXCRTL's strerror() takes an optional second argument, which only\n+     matters when the first argument is EVMSERR.  However, it's simplest\n+     just to pass it unconditionally.  `vaxc$errno' is declared in\n+     <errno.h>, and maintained by the library in parallel with `errno'.\n+     We assume that caller's `errnum' either matches the last setting of\n+     `errno' by the library or else does not have the value `EVMSERR'.  */\n+\n+  result = strerror (errnum, vaxc$errno);\n+#endif\n+\n+  if (!result)\n+    result = \"undocumented I/O error\";\n+\n+  return result;\n+}\n+\n /*\n  * error - print error message and increment count of errors.\n  */\n@@ -8433,10 +8473,7 @@ error_from_errno (name)\n   if (ip != NULL)\n     fprintf (stderr, \"%s:%d: \", ip->nominal_fname, ip->lineno);\n \n-  if (errno < sys_nerr)\n-    fprintf (stderr, \"%s: %s\\n\", name, sys_errlist[errno]);\n-  else\n-    fprintf (stderr, \"%s: undocumented I/O error\\n\", name);\n+  fprintf (stderr, \"%s: %s\\n\", name, my_strerror (errno));\n \n   errors++;\n }\n@@ -9395,10 +9432,7 @@ perror_with_name (name)\n      char *name;\n {\n   fprintf (stderr, \"%s: \", progname);\n-  if (errno < sys_nerr)\n-    fprintf (stderr, \"%s: %s\\n\", name, sys_errlist[errno]);\n-  else\n-    fprintf (stderr, \"%s: undocumented I/O error\\n\", name);\n+  fprintf (stderr, \"%s: %s\\n\", name, my_strerror (errno));\n   errors++;\n }\n "}]}