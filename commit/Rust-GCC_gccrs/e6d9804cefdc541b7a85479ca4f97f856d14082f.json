{"sha": "e6d9804cefdc541b7a85479ca4f97f856d14082f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkOTgwNGNlZmRjNTQxYjdhODU0NzljYTRmOTdmODU2ZDE0MDgyZg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-10-20T20:49:26Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-10-20T20:49:26Z"}, "message": "(dwarfout_file_scope_decl): Generate DIEs for\n\tbuilt-in non-fundamental types.\n\nFrom-SVN: r2528", "tree": {"sha": "86b7a0b8e2ad5acc16cbae8522544d2bc7f0c889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86b7a0b8e2ad5acc16cbae8522544d2bc7f0c889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d9804cefdc541b7a85479ca4f97f856d14082f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d9804cefdc541b7a85479ca4f97f856d14082f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d9804cefdc541b7a85479ca4f97f856d14082f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d9804cefdc541b7a85479ca4f97f856d14082f/comments", "author": null, "committer": null, "parents": [{"sha": "59b2d7222d18108026282f950e94ba8d5a01769a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b2d7222d18108026282f950e94ba8d5a01769a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b2d7222d18108026282f950e94ba8d5a01769a"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "722fff513398e34346327f8d8851432e47b9f5fb", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d9804cefdc541b7a85479ca4f97f856d14082f/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d9804cefdc541b7a85479ca4f97f856d14082f/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=e6d9804cefdc541b7a85479ca4f97f856d14082f", "patch": "@@ -3878,7 +3878,7 @@ output_type (type, containing_scope)\n       case POINTER_TYPE:\n       case REFERENCE_TYPE:\n \t/* For these types, all that is required is that we output a DIE\n-\t   (or a set of DIEs) to represent that \"basis\" type.  */\n+\t   (or a set of DIEs) to represent the \"basis\" type.  */\n \toutput_type (TREE_TYPE (type), containing_scope);\n \tbreak;\n \n@@ -4774,9 +4774,18 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n       break;\n \n     case TYPE_DECL:\n-      /* Don't generate any DIEs to represent the standard built-in types.  */\n-\n-      if (DECL_SOURCE_LINE (decl) == 0)\n+      /* Don't bother trying to generate any DIEs to represent any of the\n+\t normal built-in types for the language we are compiling, except\n+\t in cases where the types in question are *not* DWARF fundamental\n+\t types.  We make an exception in the case of non-fundamental types\n+\t for the sake of objective C (and perhaps C++) because the GNU\n+\t front-ends for these languages may in fact create certain \"built-in\"\n+\t types which are (for example) RECORD_TYPEs.  In such cases, we\n+\t really need to output these (non-fundamental) types because other\n+\t DIEs may contain references to them.  */\n+\n+      if (DECL_SOURCE_LINE (decl) == 0\n+\t  && type_is_fundamental (TREE_TYPE (decl)))\n \treturn;\n \n       /* If we are in terse mode, don't generate any DIEs to represent"}]}