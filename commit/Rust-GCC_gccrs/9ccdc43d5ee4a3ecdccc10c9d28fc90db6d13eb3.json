{"sha": "9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNjZGM0M2Q1ZWU0YTNlY2RjY2MxMGM5ZDI4ZmM5MGRiNmQxM2ViMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-02-20T10:47:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-02-20T10:47:02Z"}, "message": "re PR c++/84536 (ICE with non-type template parameter)\n\n/cp\n2019-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84536\n\t* pt.c (tsubst_init): Diagnose an initializer expanding to an\n\tempty list of expressions; tweak wrt dependent types.\n\t(regenerate_decl_from_template): For VAR_DECLs call tsubst_init\n\tinstead of tsubst_expr.\n\n/testsuite\n2019-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84536\n\t* g++.dg/cpp1y/var-templ60.C: New.\n\nFrom-SVN: r269037", "tree": {"sha": "2b881c9ce3df628ba11469416bb0ea510161e96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b881c9ce3df628ba11469416bb0ea510161e96c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3/comments", "author": null, "committer": null, "parents": [{"sha": "54603edcb1a82307fa28a54ade7d978db7599180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54603edcb1a82307fa28a54ade7d978db7599180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54603edcb1a82307fa28a54ade7d978db7599180"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "bdbbf841275f97521b3f4103a975265f522608bb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3", "patch": "@@ -1,3 +1,11 @@\n+2019-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84536\n+\t* pt.c (tsubst_init): Diagnose an initializer expanding to an\n+\tempty list of expressions; tweak wrt dependent types.\n+\t(regenerate_decl_from_template): For VAR_DECLs call tsubst_init\n+\tinstead of tsubst_expr.\n+\n 2019-02-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/88368 - wrong 'use of deleted function'"}, {"sha": "8c5a1b312fc89046bb9f985a2258dd267a234ea1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3", "patch": "@@ -15422,21 +15422,35 @@ tsubst_init (tree init, tree decl, tree args,\n \n   init = tsubst_expr (init, args, complain, in_decl, false);\n \n-  if (!init && TREE_TYPE (decl) != error_mark_node)\n-    {\n-      /* If we had an initializer but it\n-\t instantiated to nothing,\n-\t value-initialize the object.  This will\n-\t only occur when the initializer was a\n-\t pack expansion where the parameter packs\n-\t used in that expansion were of length\n-\t zero.  */\n-      init = build_value_init (TREE_TYPE (decl),\n-\t\t\t       complain);\n-      if (TREE_CODE (init) == AGGR_INIT_EXPR)\n-\tinit = get_target_expr_sfinae (init, complain);\n-      if (TREE_CODE (init) == TARGET_EXPR)\n-\tTARGET_EXPR_DIRECT_INIT_P (init) = true;\n+  tree type = TREE_TYPE (decl);\n+\n+  if (!init && type != error_mark_node)\n+    {\n+      if (tree auto_node = type_uses_auto (type))\n+\t{\n+\t  if (!CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\terror (\"initializer for %q#D expands to an empty list \"\n+\t\t       \"of expressions\", decl);\n+\t      return error_mark_node;\n+\t    }\n+\t}\n+      else if (!dependent_type_p (type))\n+\t{\n+\t  /* If we had an initializer but it\n+\t     instantiated to nothing,\n+\t     value-initialize the object.  This will\n+\t     only occur when the initializer was a\n+\t     pack expansion where the parameter packs\n+\t     used in that expansion were of length\n+\t     zero.  */\n+\t  init = build_value_init (type, complain);\n+\t  if (TREE_CODE (init) == AGGR_INIT_EXPR)\n+\t    init = get_target_expr_sfinae (init, complain);\n+\t  if (TREE_CODE (init) == TARGET_EXPR)\n+\t    TARGET_EXPR_DIRECT_INIT_P (init) = true;\n+\t}\n     }\n \n   return init;\n@@ -24053,9 +24067,8 @@ regenerate_decl_from_template (tree decl, tree tmpl, tree args)\n     {\n       start_lambda_scope (decl);\n       DECL_INITIAL (decl) =\n-\ttsubst_expr (DECL_INITIAL (code_pattern), args,\n-\t\t     tf_error, DECL_TI_TEMPLATE (decl),\n-\t\t     /*integral_constant_expression_p=*/false);\n+\ttsubst_init (DECL_INITIAL (code_pattern), decl, args,\n+\t\t     tf_error, DECL_TI_TEMPLATE (decl));\n       finish_lambda_scope ();\n       if (VAR_HAD_UNKNOWN_BOUND (decl))\n \tTREE_TYPE (decl) = tsubst (TREE_TYPE (code_pattern), args,"}, {"sha": "cd45bc56c7fd20c3f2ad7da8e7eb401eb1ecb239", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3", "patch": "@@ -1,3 +1,8 @@\n+2019-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84536\n+\t* g++.dg/cpp1y/var-templ60.C: New.\n+\n 2019-02-20  Li Jia He  <helijia@linux.ibm.com>\n \n \tPR target/88100"}, {"sha": "029e65a209760d034422d7ba49040666506559bb", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ60.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ60.C?ref=9ccdc43d5ee4a3ecdccc10c9d28fc90db6d13eb3", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/84536\n+// { dg-do compile { target c++14 } }\n+\n+template<int... N> auto foo(N...);  // { dg-error \"initializer\" }\n+\n+void bar()\n+{\n+  foo<>();\n+}"}]}