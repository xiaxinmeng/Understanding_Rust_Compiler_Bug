{"sha": "982a2c9b7866558039df61b0596caad57c94c8c4", "node_id": "C_kwDOANBUbNoAKDk4MmEyYzliNzg2NjU1ODAzOWRmNjFiMDU5NmNhYWQ1N2M5NGM4YzQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-10T16:05:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-10T16:05:04Z"}, "message": "libstdc++: Add std::time_get %r support [PR71367]\n\nThis incremental patch adds std::time_get %r support (%p was added already\nin the previous patch).  The _M_am_fm_format method previously in the header\nunfortunately had wrong arguments and so was useless, so the largest\ncomplication in this patch is exporting a new symbol in the right symbol\nversion.\n\n2021-12-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/71367\n\t* config/locale/dragonfly/time_members.cc (_M_initialize_timepunct):\n\tInitialize \"C\" _M_am_pm_format to %I:%M:%S %p rather than empty\n\tstring.\n\t* config/locale/gnu/time_members.cc (_M_initialize_timepunct):\n\tLikewise.\n\t* config/locale/generic/time_members.cc (_M_initialize_timepunct):\n\tLikewise.\n\t* include/bits/locale_facets_nonio.h (_M_am_pm_format): New method.\n\t* include/bits/locale_facets_nonio.tcc (_M_extract_via_format): Handle\n\t%r.\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.30): Export _M_am_pm_format\n\twith const _CharT** argument, ensure it isn't exported in GLIBCXX_3.4.\n\t* testsuite/22_locale/time_get/get/char/71367.cc: New test.\n\t* testsuite/22_locale/time_get/get/wchar_t/71367.cc: New test.", "tree": {"sha": "8613ba3bc90cf1910651da98e5e2239e5d8800b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8613ba3bc90cf1910651da98e5e2239e5d8800b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/982a2c9b7866558039df61b0596caad57c94c8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982a2c9b7866558039df61b0596caad57c94c8c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/982a2c9b7866558039df61b0596caad57c94c8c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982a2c9b7866558039df61b0596caad57c94c8c4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c82e492616e343b6d6db218d2b498267bac899de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c82e492616e343b6d6db218d2b498267bac899de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c82e492616e343b6d6db218d2b498267bac899de"}], "stats": {"total": 174, "additions": 167, "deletions": 7}, "files": [{"sha": "6dd16f6d31862bd5b872df70a7c90372c7faa9bd", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=982a2c9b7866558039df61b0596caad57c94c8c4", "patch": "@@ -185,7 +185,13 @@ GLIBCXX_3.4 {\n       std::_List_node_base::unhook*;\n       std::_List_node_base::reverse*;\n       std::_List_node_base::transfer*;\n-      std::__timepunct*;\n+#     std::__timepunct*;\n+      std::__timepunct?char?::[^_]*;\n+      std::__timepunct?char?::_[^M]*;\n+      std::__timepunct?char?::_M_[^a]*;\n+      std::__timepunct?wchar_t?::[^_]*;\n+      std::__timepunct?wchar_t?::_[^M]*;\n+      std::__timepunct?wchar_t?::_M_[^a]*;\n #     std::__numeric_limits_base*;\n       std::__num_base::_S_format_float*;\n       std::__num_base::_S_format_int*;\n@@ -684,6 +690,10 @@ GLIBCXX_3.4 {\n     # std::__convert_to_v\n     _ZSt14__convert_to_vI[^gU]*;\n \n+    # std::__timepunct\n+    _ZNKSt11__timepunctI[cw]E8_M_am_pmEPPK[cw];\n+    _ZNKSt11__timepunctI[cw]E15_M_am_pm_formatEPK[cw];\n+\n     # __gnu_cxx::stdio_sync_filebuf\n     _ZTVN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EEE;\n \n@@ -2411,6 +2421,9 @@ GLIBCXX_3.4.30 {\n     _ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE;\n #endif\n \n+    # std::__timepunct<char>::_M_am_pm_format(const char**)\n+    _ZNKSt11__timepunctI[cw]E15_M_am_pm_formatEPPK[cw];\n+\n } GLIBCXX_3.4.29;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "5dbf5e501ce5388bc8e75afa1f87decf47c16520", "filename": "libstdc++-v3/config/locale/dragonfly/time_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Ftime_members.cc?ref=982a2c9b7866558039df61b0596caad57c94c8c4", "patch": "@@ -74,7 +74,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_data->_M_date_time_era_format = \"\";\n \t  _M_data->_M_am = \"AM\";\n \t  _M_data->_M_pm = \"PM\";\n-\t  _M_data->_M_am_pm_format = \"\";\n+\t  _M_data->_M_am_pm_format = \"%I:%M:%S %p\";\n \n \t  // Day names, starting with \"C\"'s Sunday.\n \t  _M_data->_M_day1 = \"Sunday\";\n@@ -231,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_data->_M_date_time_era_format = L\"\";\n \t  _M_data->_M_am = L\"AM\";\n \t  _M_data->_M_pm = L\"PM\";\n-\t  _M_data->_M_am_pm_format = L\"\";\n+\t  _M_data->_M_am_pm_format = L\"%I:%M:%S %p\";\n \n \t  // Day names, starting with \"C\"'s Sunday.\n \t  _M_data->_M_day1 = L\"Sunday\";"}, {"sha": "7bd16be7e24fa8aed448ee12b78f4304dfc7f54c", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=982a2c9b7866558039df61b0596caad57c94c8c4", "patch": "@@ -72,7 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_data->_M_date_time_era_format = \"\";\n       _M_data->_M_am = \"AM\";\n       _M_data->_M_pm = \"PM\";\n-      _M_data->_M_am_pm_format = \"\";\n+      _M_data->_M_am_pm_format = \"%I:%M:%S %p\";\n \n       // Day names, starting with \"C\"'s Sunday.\n       _M_data->_M_day1 = \"Sunday\";\n@@ -157,7 +157,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_data->_M_date_time_era_format = L\"\";\n       _M_data->_M_am = L\"AM\";\n       _M_data->_M_pm = L\"PM\";\n-      _M_data->_M_am_pm_format = L\"\";\n+      _M_data->_M_am_pm_format = L\"%I:%M:%S %p\";\n \n       // Day names, starting with \"C\"'s Sunday.\n       _M_data->_M_day1 = L\"Sunday\";"}, {"sha": "6233fba5eb3c8c87afb19875b4bdf58aaaf19b17", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=982a2c9b7866558039df61b0596caad57c94c8c4", "patch": "@@ -80,7 +80,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_data->_M_date_time_era_format = \"\";\n \t  _M_data->_M_am = \"AM\";\n \t  _M_data->_M_pm = \"PM\";\n-\t  _M_data->_M_am_pm_format = \"\";\n+\t  _M_data->_M_am_pm_format = \"%I:%M:%S %p\";\n \n \t  // Day names, starting with \"C\"'s Sunday.\n \t  _M_data->_M_day1 = \"Sunday\";\n@@ -236,7 +236,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_data->_M_date_time_era_format = L\"\";\n \t  _M_data->_M_am = L\"AM\";\n \t  _M_data->_M_pm = L\"PM\";\n-\t  _M_data->_M_am_pm_format = L\"\";\n+\t  _M_data->_M_am_pm_format = L\"%I:%M:%S %p\";\n \n \t  // Day names, starting with \"C\"'s Sunday.\n \t  _M_data->_M_day1 = L\"Sunday\";"}, {"sha": "501824fa43c1bde7471f7354b9da825824bd9f82", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=982a2c9b7866558039df61b0596caad57c94c8c4", "patch": "@@ -242,6 +242,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { /* Kept for ABI compatibility, see PR65927 */ }\n #endif\n \n+      void\n+      _M_am_pm_format(const _CharT** __ampm_format) const\n+      {\n+\t__ampm_format[0] = _M_data->_M_am_pm_format;\n+      }\n+\n       void\n       _M_am_pm(const _CharT** __ampm) const\n       {"}, {"sha": "48d5e8cc92200eee04511b7c91695a9c2db70b05", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=982a2c9b7866558039df61b0596caad57c94c8c4", "patch": "@@ -806,6 +806,13 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t\t  if (!__tmperr && __mem)\n \t\t    __tm->tm_hour += 12;\n \t\t  break;\n+\t\tcase 'r':\n+\t\t  // Locale's 12-hour clock time format (in C %I:%M:%S %p).\n+\t\t  const char_type*  __ampm_format;\n+\t\t  __tp._M_am_pm_format(&__ampm_format);\n+\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,\n+\t\t\t\t\t\t__tm, __ampm_format);\n+\t\t  break;\n \t\tcase 'R':\n \t\t  // Equivalent to (%H:%M).\n \t\t  __cs = \"%H:%M\";"}, {"sha": "b1af4bfe4d65e766d6408a7312f121e283f3ec8c", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/char/71367.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F71367.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F71367.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F71367.cc?ref=982a2c9b7866558039df61b0596caad57c94c8c4", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run { target c++11 } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <locale>\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  locale loc_c = locale::classic();\n+\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<char>& tget = use_facet<time_get<char>>(iss.getloc());\n+  typedef istreambuf_iterator<char> iter;\n+  const iter end;\n+\n+  tm time;\n+  ios_base::iostate err = ios_base::badbit;\n+\n+  iss.str(\"01:38:12 PM\");\n+  string format = \"%I:%M:%S %p\";\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t      format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_hour == 13 );\n+  VERIFY( time.tm_min == 38 );\n+  VERIFY( time.tm_sec == 12 );\n+\n+  iss.str(\"11:17:42 PM\");\n+  format = \"%r\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_hour == 23 );\n+  VERIFY( time.tm_min == 17 );\n+  VERIFY( time.tm_sec == 42 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "693053ef10aecd885afe6ec8d1adaa24d76b8f26", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/wchar_t/71367.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F71367.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982a2c9b7866558039df61b0596caad57c94c8c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F71367.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F71367.cc?ref=982a2c9b7866558039df61b0596caad57c94c8c4", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run { target c++11 } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <locale>\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  locale loc_c = locale::classic();\n+\n+  wistringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<wchar_t>& tget = use_facet<time_get<wchar_t>>(iss.getloc());\n+  typedef istreambuf_iterator<wchar_t> iter;\n+  const iter end;\n+\n+  tm time;\n+  ios_base::iostate err = ios_base::badbit;\n+\n+  iss.str(L\"01:38:12 PM\");\n+  wstring format = L\"%I:%M:%S %p\";\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t      format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_hour == 13 );\n+  VERIFY( time.tm_min == 38 );\n+  VERIFY( time.tm_sec == 12 );\n+\n+  iss.str(L\"11:17:42 PM\");\n+  format = L\"%r\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_hour == 23 );\n+  VERIFY( time.tm_min == 17 );\n+  VERIFY( time.tm_sec == 42 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}