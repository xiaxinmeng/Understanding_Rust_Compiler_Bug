{"sha": "62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiNDQ1YjMxY2NiZDRjOWE1ZDNlMzJjMjg2M2ViMDJjMWZmM2UyZg==", "commit": {"author": {"name": "Thiago Jung Bauermann", "email": "bauerman@br.ibm.com", "date": "2008-01-23T05:04:03Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2008-01-23T05:04:03Z"}, "message": "cplus-dem.c (demangle_function_name): Changed to return value indicating if a name was correctly demangled.\n\n2008-01-23  Thiago Jung Bauermann  <bauerman@br.ibm.com>\n\n\t* cplus-dem.c (demangle_function_name): Changed to return value\n\tindicating if a name was correctly demangled.\n\t(iterate_demangle_function): Use demangle_function_name return\n\tvalue.\n\nFrom-SVN: r131754", "tree": {"sha": "c3f1db8a26ef6e538dc629f35a3dd720ccbd5fb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3f1db8a26ef6e538dc629f35a3dd720ccbd5fb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f/comments", "author": {"login": "tjbauermann", "id": 1139165, "node_id": "MDQ6VXNlcjExMzkxNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1139165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjbauermann", "html_url": "https://github.com/tjbauermann", "followers_url": "https://api.github.com/users/tjbauermann/followers", "following_url": "https://api.github.com/users/tjbauermann/following{/other_user}", "gists_url": "https://api.github.com/users/tjbauermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjbauermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjbauermann/subscriptions", "organizations_url": "https://api.github.com/users/tjbauermann/orgs", "repos_url": "https://api.github.com/users/tjbauermann/repos", "events_url": "https://api.github.com/users/tjbauermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tjbauermann/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ca06a6878cb063fe8e3fe28be091b7a1be29a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca06a6878cb063fe8e3fe28be091b7a1be29a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca06a6878cb063fe8e3fe28be091b7a1be29a78"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "5b085c32a17542e54424e2908e8093de108d67f5", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f", "patch": "@@ -1,3 +1,10 @@\n+2008-01-23  Thiago Jung Bauermann  <bauerman@br.ibm.com>\n+\n+\t* cplus-dem.c (demangle_function_name): Changed to return value\n+\tindicating if a name was correctly demangled.\n+\t(iterate_demangle_function): Use demangle_function_name return\n+\tvalue.\n+\n 2008-01-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR other/33768"}, {"sha": "da01a06c5fe96f284d4cf81e3cc1097d6dd4e6c3", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=62b445b31ccbd4c9a5d3e32c2863eb02c1ff3e2f", "patch": "@@ -414,7 +414,7 @@ static int do_type (struct work_stuff *, const char **, string *);\n \n static int do_arg (struct work_stuff *, const char **, string *);\n \n-static void\n+static int\n demangle_function_name (struct work_stuff *, const char **, string *,\n                         const char *);\n \n@@ -2493,10 +2493,7 @@ iterate_demangle_function (struct work_stuff *work, const char **mangled,\n      \"__\"-sequence.  This is the normal case.  */\n   if (ARM_DEMANGLING || LUCID_DEMANGLING || HP_DEMANGLING || EDG_DEMANGLING\n       || strstr (scan + 2, \"__\") == NULL)\n-    {\n-      demangle_function_name (work, mangled, declp, scan);\n-      return 1;\n-    }\n+    return demangle_function_name (work, mangled, declp, scan);\n \n   /* Save state so we can restart if the guess at the correct \"__\" was\n      wrong.  */\n@@ -2513,10 +2510,12 @@ iterate_demangle_function (struct work_stuff *work, const char **mangled,\n \n   while (scan[2])\n     {\n-      demangle_function_name (work, mangled, declp, scan);\n-      success = demangle_signature (work, mangled, declp);\n-      if (success)\n-\tbreak;\n+      if (demangle_function_name (work, mangled, declp, scan))\n+\t{\n+\t  success = demangle_signature (work, mangled, declp);\n+\t  if (success)\n+\t    break;\n+\t}\n \n       /* Reset demangle state for the next round.  */\n       *mangled = mangle_init;\n@@ -4421,7 +4420,9 @@ demangle_nested_args (struct work_stuff *work, const char **mangled,\n   return result;\n }\n \n-static void\n+/* Returns 1 if a valid function name was found or 0 otherwise.  */\n+\n+static int \n demangle_function_name (struct work_stuff *work, const char **mangled,\n                         string *declp, const char *scan)\n {\n@@ -4461,13 +4462,13 @@ demangle_function_name (struct work_stuff *work, const char **mangled,\n \t{\n \t  work -> constructor += 1;\n \t  string_clear (declp);\n-\t  return;\n+\t  return 1;\n \t}\n       else if (strcmp (declp -> b, \"__dt\") == 0)\n \t{\n \t  work -> destructor += 1;\n \t  string_clear (declp);\n-\t  return;\n+\t  return 1;\n \t}\n     }\n \n@@ -4575,6 +4576,13 @@ demangle_function_name (struct work_stuff *work, const char **mangled,\n \t    }\n \t}\n     }\n+\n+  /* If a function name was obtained but it's not valid, we were not\n+     successful.  */\n+  if (LEN_STRING (declp) == 1 && declp->b[0] == '.')\n+    return 0;\n+  else\n+    return 1;\n }\n \n /* a mini string-handling package */"}]}