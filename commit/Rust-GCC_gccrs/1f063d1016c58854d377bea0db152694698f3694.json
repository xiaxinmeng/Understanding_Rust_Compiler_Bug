{"sha": "1f063d1016c58854d377bea0db152694698f3694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwNjNkMTAxNmM1ODg1NGQzNzdiZWEwZGIxNTI2OTQ2OThmMzY5NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-09-30T16:09:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-09-30T16:09:53Z"}, "message": "alpha.c (alpha_gimplify_va_arg_1): Use ref-all pointers.\n\n\t* config/alpha/alpha.c (alpha_gimplify_va_arg_1):\n\tUse ref-all pointers.\n\t(alpha_gimplify_va_arg): Ditto.\n\nFrom-SVN: r152333", "tree": {"sha": "54c36197ff2813aa31ef498b6f4d629c765b68e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54c36197ff2813aa31ef498b6f4d629c765b68e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f063d1016c58854d377bea0db152694698f3694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f063d1016c58854d377bea0db152694698f3694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f063d1016c58854d377bea0db152694698f3694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f063d1016c58854d377bea0db152694698f3694/comments", "author": null, "committer": null, "parents": [{"sha": "f09666518db82cc75802010688cdf8cf4a6ea0ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09666518db82cc75802010688cdf8cf4a6ea0ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f09666518db82cc75802010688cdf8cf4a6ea0ef"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "96536260f6e8857bd56d1307d8947080d6058342", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f063d1016c58854d377bea0db152694698f3694/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f063d1016c58854d377bea0db152694698f3694/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f063d1016c58854d377bea0db152694698f3694", "patch": "@@ -1,3 +1,9 @@\n+2009-09-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_gimplify_va_arg_1):\n+\tUse ref-all pointers.\n+\t(alpha_gimplify_va_arg): Ditto.\n+\n 2009-09-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/41279\n@@ -37,33 +43,30 @@\n \n \t* config.gcc (i[34567]86-*-*): Include fma4intrin.h.\n \t(x86_64-*-*): Ditto.\n-\t\n+\n \t* config/i386/fma4intrin.h: New file, provide common x86 compiler\n \tintrinisics for FMA4.\n \t* config/i386/cpuid.h (bit_FMA4): Define FMA4 bit.\n \t* config/i386/x86intrin.h: Fix typo to SSE4A instead of SSE4a.\n \tAdd FMA4 check and fma4intrin.h.\n \t* config/i386/i386-c.c(ix86_target_macros_internal): Check\n-\tISA_FLAG for FMA4. \n+\tISA_FLAG for FMA4.\n \t* config/i386/i386.h(TARGET_FMA4): New macro for FMA4.\n \t* config/i386/i386.md (UNSPEC_FMA4_INTRINSIC): Add new UNSPEC\n \tconstant for FMA4 support.\n \t(UNSPEC_FMA4_FMADDSUB): Ditto.\n \t(UNSPEC_FMA4_FMSUBADD): Ditto.\n \t* config/i386/i386.opt (-mfma4): New switch for FMA4 support.\n-\t* config/i386/i386-protos.h (ix86_fma4_valid_op_p): Add\n-\tdeclaration.\n+\t* config/i386/i386-protos.h (ix86_fma4_valid_op_p): Add declaration.\n \t(ix86_expand_fma4_multiple_memory): Ditto.\n \t* config/i386/i386.c (OPTION_MASK_ISA_FMA4_SET): New.\n-\t(OPTION_MASK_ISA_FMA4_UNSET): New.\t\n-\t(OPTION_MASK_ISA_SSE4A_UNSET): Change definition to\n-\tdepend on FMA4.\n-\t(OPTION_MASK_ISA_AVX_UNSET): Change definition to\n-\tdepend on FMA4.\n+\t(OPTION_MASK_ISA_FMA4_UNSET): New.\n+\t(OPTION_MASK_ISA_SSE4A_UNSET): Change definition to depend on FMA4.\n+\t(OPTION_MASK_ISA_AVX_UNSET): Change definition to depend on FMA4.\n \t(ix86_handle_option): Handle -mfma4.\n \t(isa_opts): Handle -mfma4.\n \t(enum pta_flags): Add PTA_FMA4.\n-\t(override_options): Add FMA4 support.\t\n+\t(override_options): Add FMA4 support.\n \t(IX86_BUILTIN_VFMADDSS): New for FMA4 intrinsic.\n \t(IX86_BUILTIN_VFMADDSD): Ditto.\n \t(IX86_BUILTIN_VFMADDPS): Ditto.\n@@ -169,7 +172,7 @@\n 2009-09-29  Steve Ellcey  <sje@cup.hp.com>\n \t    Alexander Monakov  <amonakov@ispras.ru>\n \n-\tPR target/41365 \n+\tPR target/41365\n \t* config/ia64/predicates.md (not_postinc_destination_operand): New.\n \t(not_postinc_memory_operand): New.\n \t(not_postinc_move_operand): New.\n@@ -205,14 +208,13 @@\n 2009-09-29  Harsha Jagasia  <harsha.jagasia@amd.com>\n \n \t* config.gcc (i[34567]86-*-*): Remove mmintrin-common.h.\n-\t(x86_64-*-*): Ditto.\t\n+\t(x86_64-*-*): Ditto.\n \t* config/i386/smmintrin.h: Move instructions in mmintrin-common.h\n \tback to smmintrin.h.\n \t* config/i386/cpuid.h: (bit_SSE5): Remove SSE5 bit.\n \t* config/i386/x86intrin.h: Remove SSE5.\n-\t* config/i386/mmintrin-common.h: Delete file.\t\n-\t* doc/extend.texi (x86 intrinsics): Remove SSE5 flags\n-\tand builtins.\n+\t* config/i386/mmintrin-common.h: Delete file.\n+\t* doc/extend.texi (x86 intrinsics): Remove SSE5 flags and builtins.\n \n 2009-09-29  Richard Guenther  <rguenther@suse.de>\n \n@@ -226,7 +228,7 @@\n \n 2009-09-28  Sriraman Tallam  <tmsriram@google.com>\n \n-\t* tree-pass.h (register_pass_info): New structure.\t\n+\t* tree-pass.h (register_pass_info): New structure.\n \t(pass_positioning_ops): Move enum from gcc-plugin.h.\n \t(register_pass): New function.\n \t* gcc-plugin.h (plugin_pass): Delete structure.\n@@ -333,7 +335,7 @@\n \tmultiple instructions).\n \t* tree-ssa-dom.c (optimize_stmt): Resolve __builtin_constant_p\n \tcalls into zero at this time.\n-\t* tree-ssa-propagate.c (substitute_and_fold): Ignore multiple \n+\t* tree-ssa-propagate.c (substitute_and_fold): Ignore multiple\n \tstatements generated by builtin folding.\n \n 2009-09-28  Nick Clifton  <nickc@redhat.com>"}, {"sha": "6dece1019ac79a9de64413a7a7c7c92598b6d05f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f063d1016c58854d377bea0db152694698f3694/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f063d1016c58854d377bea0db152694698f3694/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1f063d1016c58854d377bea0db152694698f3694", "patch": "@@ -6339,7 +6339,7 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset,\n     }\n \n   addend = offset;\n-  ptr_type = build_pointer_type (type);\n+  ptr_type = build_pointer_type_for_mode (type, ptr_mode, true);\n \n   if (TREE_CODE (type) == COMPLEX_TYPE)\n     {\n@@ -6420,7 +6420,7 @@ alpha_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \n   indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n   if (indirect)\n-    type = build_pointer_type (type);\n+    type = build_pointer_type_for_mode (type, ptr_mode, true);\n \n   /* Find the value.  Note that this will be a stable indirection, or\n      a composite of stable indirections in the case of complex.  */"}]}