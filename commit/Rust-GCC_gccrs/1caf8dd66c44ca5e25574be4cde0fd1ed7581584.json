{"sha": "1caf8dd66c44ca5e25574be4cde0fd1ed7581584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNhZjhkZDY2YzQ0Y2E1ZTI1NTc0YmU0Y2RlMGZkMWVkNzU4MTU4NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-14T10:51:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-14T10:51:34Z"}, "message": "re PR middle-end/52578 (Fails to fold another size difference)\n\n2012-03-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/52578\n\t* fold-const.c (fold_unary_loc): Fold (T1)(T2)x to (T1)x if\n\tthe outermost conversion is a sign-change only.\n\t(fold_binary_loc): Disregard widening and sign-changing\n\tconversions when we determine if two variables are equal\n\tfor reassociation.\n\t* tree-ssa-forwprop.c (combine_conversions): Fold (T1)(T2)x to\n\t(T1)x if the outermost conversion is a sign-change only.\n\n\t* gcc.dg/pr52578.c: New testcase.\n\nFrom-SVN: r185378", "tree": {"sha": "66df900ef28ae410bf4318c9859d7595727e851a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66df900ef28ae410bf4318c9859d7595727e851a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1caf8dd66c44ca5e25574be4cde0fd1ed7581584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1caf8dd66c44ca5e25574be4cde0fd1ed7581584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1caf8dd66c44ca5e25574be4cde0fd1ed7581584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1d3d84bdf44215b8445af6693501747917519bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d3d84bdf44215b8445af6693501747917519bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d3d84bdf44215b8445af6693501747917519bd"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "4a3d0d12fe9e3b03db2da906830d556dcc264562", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1caf8dd66c44ca5e25574be4cde0fd1ed7581584", "patch": "@@ -1,3 +1,14 @@\n+2012-03-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/52578\n+\t* fold-const.c (fold_unary_loc): Fold (T1)(T2)x to (T1)x if\n+\tthe outermost conversion is a sign-change only.\n+\t(fold_binary_loc): Disregard widening and sign-changing\n+\tconversions when we determine if two variables are equal\n+\tfor reassociation.\n+\t* tree-ssa-forwprop.c (combine_conversions): Fold (T1)(T2)x to\n+\t(T1)x if the outermost conversion is a sign-change only.\n+\n 2012-03-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \tRevert:"}, {"sha": "9f5c09717619aed20890dad8c08954d583aa8cf4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1caf8dd66c44ca5e25574be4cde0fd1ed7581584", "patch": "@@ -7843,10 +7843,13 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t    return fold_build1_loc (loc, code, type, TREE_OPERAND (op0, 0));\n \n \t  /* If we have a sign-extension of a zero-extended value, we can\n-\t     replace that by a single zero-extension.  */\n+\t     replace that by a single zero-extension.  Likewise if the\n+\t     final conversion does not change precision we can drop the\n+\t     intermediate conversion.  */\n \t  if (inside_int && inter_int && final_int\n-\t      && inside_prec < inter_prec && inter_prec < final_prec\n-\t      && inside_unsignedp && !inter_unsignedp)\n+\t      && ((inside_prec < inter_prec && inter_prec < final_prec\n+\t\t   && inside_unsignedp && !inter_unsignedp)\n+\t\t  || final_prec == inter_prec))\n \t    return fold_build1_loc (loc, code, type, TREE_OPERAND (op0, 0));\n \n \t  /* Two conversions in a row are not needed unless:\n@@ -10335,10 +10338,21 @@ fold_binary_loc (location_t loc,\n \n \t\t  if (TREE_CODE (tmp0) == NEGATE_EXPR)\n \t\t    tmp0 = TREE_OPERAND (tmp0, 0);\n+\t\t  if (CONVERT_EXPR_P (tmp0)\n+\t\t      && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (tmp0, 0)))\n+\t\t      && (TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (tmp0, 0)))\n+\t\t\t  <= TYPE_PRECISION (type)))\n+\t\t    tmp0 = TREE_OPERAND (tmp0, 0);\n \t\t  if (TREE_CODE (tmp1) == NEGATE_EXPR)\n \t\t    tmp1 = TREE_OPERAND (tmp1, 0);\n+\t\t  if (CONVERT_EXPR_P (tmp1)\n+\t\t      && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (tmp1, 0)))\n+\t\t      && (TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (tmp1, 0)))\n+\t\t\t  <= TYPE_PRECISION (type)))\n+\t\t    tmp1 = TREE_OPERAND (tmp1, 0);\n \t\t  /* The only case we can still associate with two variables\n-\t\t     is if they are the same, modulo negation.  */\n+\t\t     is if they are the same, modulo negation and bit-pattern\n+\t\t     preserving conversions.  */\n \t\t  if (!operand_equal_p (tmp0, tmp1, 0))\n \t\t    ok = false;\n \t\t}"}, {"sha": "b4626f3422e2e536fdb9469ca1194d007635b1fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1caf8dd66c44ca5e25574be4cde0fd1ed7581584", "patch": "@@ -1,3 +1,8 @@\n+2012-03-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/52578\n+\t* gcc.dg/pr52578.c: New testcase.\n+\n 2012-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/52521"}, {"sha": "0e668300f20b861709cc2d7f545d037e4a563687", "filename": "gcc/testsuite/gcc.dg/pr52578.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52578.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52578.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52578.c?ref=1caf8dd66c44ca5e25574be4cde0fd1ed7581584", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-original\" } */\n+\n+long bar (long i)\n+{\n+  return (long)((unsigned long)i + 2) - (long)i;\n+}\n+long foo (int i)\n+{\n+  return (long)((unsigned long)i + 2) - (long)i;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 2;\" 2 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "919779526d9a732d08a22a8041cfb502bbebc1e1", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1caf8dd66c44ca5e25574be4cde0fd1ed7581584/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=1caf8dd66c44ca5e25574be4cde0fd1ed7581584", "patch": "@@ -2285,10 +2285,13 @@ combine_conversions (gimple_stmt_iterator *gsi)\n \t}\n \n       /* If we have a sign-extension of a zero-extended value, we can\n-\t replace that by a single zero-extension.  */\n+\t replace that by a single zero-extension.  Likewise if the\n+\t final conversion does not change precision we can drop the\n+\t intermediate conversion.  */\n       if (inside_int && inter_int && final_int\n-\t  && inside_prec < inter_prec && inter_prec < final_prec\n-\t  && inside_unsignedp && !inter_unsignedp)\n+\t  && ((inside_prec < inter_prec && inter_prec < final_prec\n+\t       && inside_unsignedp && !inter_unsignedp)\n+\t      || final_prec == inter_prec))\n \t{\n \t  gimple_assign_set_rhs1 (stmt, defop0);\n \t  update_stmt (stmt);"}]}