{"sha": "b2f26af32b5b031fce761aa090de9476a53e6e5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJmMjZhZjMyYjViMDMxZmNlNzYxYWEwOTBkZTk0NzZhNTNlNmU1YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-20T07:22:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-20T12:09:26Z"}, "message": "tree-optimization/95219 - improve IV selection for induction\n\nThis improves code generation with SSE2 for the testcase by\nmaking sure to only generate a single IV when the group size\nis a multiple of the vector size.  It also adjusts the testcase\nwhich was passing before.\n\n2020-05-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95219\n\t* tree-vect-loop.c (vectorizable_induction): Reduce\n\tgroup_size before computing the number of required IVs.\n\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr30843.c: Adjust.", "tree": {"sha": "d856e2b9fad2e5c97d99a1070047700b5b8f2d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d856e2b9fad2e5c97d99a1070047700b5b8f2d99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2f26af32b5b031fce761aa090de9476a53e6e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f26af32b5b031fce761aa090de9476a53e6e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2f26af32b5b031fce761aa090de9476a53e6e5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f26af32b5b031fce761aa090de9476a53e6e5a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "130bb4c79295487c5fc203103d80e3b754640eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130bb4c79295487c5fc203103d80e3b754640eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/130bb4c79295487c5fc203103d80e3b754640eb4"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "88b03be713539a96ed05f82662b3856b9cf57f23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f26af32b5b031fce761aa090de9476a53e6e5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f26af32b5b031fce761aa090de9476a53e6e5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2f26af32b5b031fce761aa090de9476a53e6e5a", "patch": "@@ -1,3 +1,9 @@\n+2020-05-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95219\n+\t* tree-vect-loop.c (vectorizable_induction): Reduce\n+\tgroup_size before computing the number of required IVs.\n+\n 2020-05-20  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/95231"}, {"sha": "9552d201b5e4279200e6429d982557e5ffdf00be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f26af32b5b031fce761aa090de9476a53e6e5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f26af32b5b031fce761aa090de9476a53e6e5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2f26af32b5b031fce761aa090de9476a53e6e5a", "patch": "@@ -1,3 +1,9 @@\n+2020-05-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95219\n+\t* tree-vect-loop.c (vectorizable_induction): Reduce\n+\tgroup_size before computing the number of required IVs.\n+\n 2020-05-20  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/95231"}, {"sha": "9a75b987d6d847f2b93ac5472bac4e08590f18dc", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-pr30843.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f26af32b5b031fce761aa090de9476a53e6e5a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr30843.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f26af32b5b031fce761aa090de9476a53e6e5a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr30843.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr30843.c?ref=b2f26af32b5b031fce761aa090de9476a53e6e5a", "patch": "@@ -20,4 +20,6 @@ void dacP98FillRGBMap (unsigned char *pBuffer)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 1 \"vect\" { target vect_interleave } } } */\n+/* Even with SSE2 we should only generate one IV for the induction.  */\n+/* { dg-final { scan-tree-dump-times \"# vect_vec_iv\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "ecce348b39c8a09936c9082b2bb25d5ab6b62bf2", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f26af32b5b031fce761aa090de9476a53e6e5a/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f26af32b5b031fce761aa090de9476a53e6e5a/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b2f26af32b5b031fce761aa090de9476a53e6e5a", "patch": "@@ -7528,7 +7528,13 @@ vectorizable_induction (loop_vec_info loop_vinfo,\n       unsigned group_size = SLP_TREE_SCALAR_STMTS (slp_node).length ();\n       unsigned nvects = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n       unsigned elts = const_nunits * nvects;\n-      unsigned nivs = least_common_multiple (group_size,\n+      /* Compute the number of distinct IVs we need.  First reduce\n+\t group_size if it is a multiple of const_nunits so we get\n+\t one IV for a group_size of 4 but const_nunits 2.  */\n+      unsigned group_sizep = group_size;\n+      if (group_sizep % const_nunits == 0)\n+\tgroup_sizep = group_sizep / const_nunits;\n+      unsigned nivs = least_common_multiple (group_sizep,\n \t\t\t\t\t     const_nunits) / const_nunits;\n       gcc_assert (elts % group_size == 0);\n       tree elt = init_expr;\n@@ -7576,6 +7582,12 @@ vectorizable_induction (loop_vec_info loop_vinfo,\n \n \t  SLP_TREE_VEC_STMTS (slp_node).quick_push (induction_phi_info);\n \t}\n+      /* Fill up to the number of vectors we need for the whole group.  */\n+      nivs = least_common_multiple (group_size,\n+\t\t\t\t    const_nunits) / const_nunits;\n+      for (; ivn < nivs; ++ivn)\n+\tSLP_TREE_VEC_STMTS (slp_node)\n+\t  .quick_push (SLP_TREE_VEC_STMTS (slp_node)[0]);\n \n       /* Re-use IVs when we can.  */\n       if (ivn < nvects)"}]}