{"sha": "5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUzMmU4M2I2ZTVlN2NiNmEwMWI1N2FkNzBmMzZkMGI5MzcxMDZlZA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-11-21T16:56:21Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-11-21T16:56:21Z"}, "message": "[AArch64] Add vector pattern for __builtin_ctz\n\n  gcc/\n    * config/aarch64/iterators.md (VS): New mode iterator.\n    (vsi2qi): New mode attribute.\n    (VSI2QI): Likewise.\n    * config/aarch64/aarch64-simd-builtins.def: New entry for ctz.\n    * config/aarch64/aarch64-simd.md (ctz<mode>2): New pattern for ctz.\n    * config/aarch64/aarch64-builtins.c\n    (aarch64_builtin_vectorized_function): Support BUILT_IN_CTZ.\n\n  gcc/testsuite/\n    * gcc.target/aarch64/vect_ctz_1.c: New testcase.\n\nFrom-SVN: r217938", "tree": {"sha": "ca2c3409b6bd33675545ecdcd44e19a830238f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca2c3409b6bd33675545ecdcd44e19a830238f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/comments", "author": null, "committer": null, "parents": [{"sha": "a699d67255c06d0efdca1593810b01cf3bfdd99b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a699d67255c06d0efdca1593810b01cf3bfdd99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a699d67255c06d0efdca1593810b01cf3bfdd99b"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "c4eb79367ec38220de5f18c99d9ba4dbceb02a3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "patch": "@@ -1,3 +1,13 @@\n+2014-11-21  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/iterators.md (VS): New mode iterator.\n+\t(vsi2qi): New mode attribute.\n+\t(VSI2QI): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def: New entry for ctz.\n+\t* config/aarch64/aarch64-simd.md (ctz<mode>2): New pattern for ctz.\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_builtin_vectorized_function): Support BUILT_IN_CTZ.\n+\n 2014-11-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/63784"}, {"sha": "a9d97044fde337b97ded710bb8ab1f3232feb9c3", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "patch": "@@ -1199,6 +1199,14 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n               return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_clzv4si];\n             return NULL_TREE;\n           }\n+\tcase BUILT_IN_CTZ:\n+          {\n+\t    if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n+\t      return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_ctzv2si];\n+\t    else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n+\t      return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_ctzv4si];\n+\t    return NULL_TREE;\n+          }\n #undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n   (out_mode == N##Imode && out_n == C \\"}, {"sha": "936b671163dd943e7cf73c71fcbdaba9d9e8cb9e", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "patch": "@@ -45,6 +45,7 @@\n   BUILTIN_VD_BHSI (BINOP, addp, 0)\n   VAR1 (UNOP, addp, 0, di)\n   BUILTIN_VDQ_BHSI (UNOP, clz, 2)\n+  BUILTIN_VS (UNOP, ctz, 2)\n \n   /* be_checked_get_lane does its own lane swapping, so not a lane index.  */\n   BUILTIN_VALL (GETREG, be_checked_get_lane, 0)"}, {"sha": "eed01cf7754c603814cd623bf935e13ae27c84c5", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "patch": "@@ -303,6 +303,20 @@\n   [(set_attr \"type\" \"neon_rbit\")]\n )\n \n+(define_expand \"ctz<mode>2\"\n+  [(set (match_operand:VS 0 \"register_operand\")\n+        (ctz:VS (match_operand:VS 1 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+  {\n+     emit_insn (gen_bswap<mode> (operands[0], operands[1]));\n+     rtx op0_castsi2qi = simplify_gen_subreg(<VS:VSI2QI>mode, operands[0],\n+\t\t\t\t\t     <MODE>mode, 0);\n+     emit_insn (gen_aarch64_rbit<VS:vsi2qi> (op0_castsi2qi, op0_castsi2qi));\n+     emit_insn (gen_clz<mode>2 (operands[0], operands[0]));\n+     DONE;\n+  }\n+)\n+\n (define_insn \"*aarch64_mul3_elt<mode>\"\n  [(set (match_operand:VMUL 0 \"register_operand\" \"=w\")\n     (mult:VMUL"}, {"sha": "8b9ff98ba12e91e7546078f1fce684d2bf881558", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "patch": "@@ -180,6 +180,9 @@\n ;; All byte modes.\n (define_mode_iterator VB [V8QI V16QI])\n \n+;; 2 and 4 lane SI modes.\n+(define_mode_iterator VS [V2SI V4SI])\n+\n (define_mode_iterator TX [TI TF])\n \n ;; Opaque structure modes.\n@@ -667,6 +670,9 @@\n \t\t      (V2DI  \"p\") (V2DF  \"p\")\n \t\t      (V2SF \"p\") (V4SF  \"v\")])\n \n+(define_mode_attr vsi2qi [(V2SI \"v8qi\") (V4SI \"v16qi\")])\n+(define_mode_attr VSI2QI [(V2SI \"V8QI\") (V4SI \"V16QI\")])\n+\n ;; -------------------------------------------------------------------\n ;; Code Iterators\n ;; -------------------------------------------------------------------"}, {"sha": "9d6643bac2b6a80292bc0972d09f045c9d03d22f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "patch": "@@ -1,3 +1,7 @@\n+2014-11-21  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/vect_ctz_1.c: New testcase.\n+\n 2014-11-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/simd/vsqrt_f64_1.c"}, {"sha": "40823b0479edf1e7343d2aaf43e28222ac0cd72f", "filename": "gcc/testsuite/gcc.target/aarch64/vect_ctz_1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_ctz_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_ctz_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_ctz_1.c?ref=5e32e83b6e5e7cb6a01b57ad70f36d0b937106ed", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fno-inline\" } */\n+\n+extern void abort ();\n+\n+#define TEST(name, subname, count) \\\n+void \\\n+count_tz_##name (unsigned *__restrict a, int *__restrict b) \\\n+{ \\\n+  int i; \\\n+  for (i = 0; i < count; i++) \\\n+    b[i] = __builtin_##subname (a[i]); \\\n+}\n+\n+#define CHECK(name, count, input, output) \\\n+  count_tz_##name (input, output); \\\n+  for (i = 0; i < count; i++) \\\n+    { \\\n+      if (output[i] != r[i]) \\\n+\tabort (); \\\n+    }\n+\n+TEST (v4si, ctz, 4)\n+TEST (v2si, ctz, 2)\n+/* { dg-final { scan-assembler \"clz\\tv\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"clz\\tv\\[0-9\\]+\\.2s\" } } */\n+\n+int\n+main ()\n+{\n+  unsigned int x4[4] = { 0x0, 0xFF80, 0x1FFFF, 0xFF000000 };\n+  int r[4] = { 32, 7, 0, 24 };\n+  int d[4], i;\n+\n+  CHECK (v4si, 4, x4, d);\n+  CHECK (v2si, 2, x4, d);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}