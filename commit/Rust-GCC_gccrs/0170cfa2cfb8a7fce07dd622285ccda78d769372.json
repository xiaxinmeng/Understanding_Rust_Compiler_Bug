{"sha": "0170cfa2cfb8a7fce07dd622285ccda78d769372", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3MGNmYTJjZmI4YTdmY2UwN2RkNjIyMjg1Y2NkYTc4ZDc2OTM3Mg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2006-02-02T12:35:28Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2006-02-02T12:35:28Z"}, "message": "Commit testcase for PR25990.\n\nFrom-SVN: r110512", "tree": {"sha": "cffac4b5cb441865c16feeb92a04ea57d48ba8a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cffac4b5cb441865c16feeb92a04ea57d48ba8a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0170cfa2cfb8a7fce07dd622285ccda78d769372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0170cfa2cfb8a7fce07dd622285ccda78d769372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0170cfa2cfb8a7fce07dd622285ccda78d769372", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0170cfa2cfb8a7fce07dd622285ccda78d769372/comments", "author": null, "committer": null, "parents": [{"sha": "728b26bb73698067b4a4fc091652a57d84a76c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728b26bb73698067b4a4fc091652a57d84a76c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728b26bb73698067b4a4fc091652a57d84a76c5d"}], "stats": {"total": 244, "additions": 244, "deletions": 0}, "files": [{"sha": "9c29e1cc06191b02c3960cde5676f5961dbb5e1c", "filename": "gcc/testsuite/gcc.dg/gomp/pr25990.c", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0170cfa2cfb8a7fce07dd622285ccda78d769372/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr25990.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0170cfa2cfb8a7fce07dd622285ccda78d769372/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr25990.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr25990.c?ref=0170cfa2cfb8a7fce07dd622285ccda78d769372", "patch": "@@ -0,0 +1,244 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -O2 -std=c99\" } */\n+\n+#include <stdio.h>\n+#include <omp.h>\n+#include <math.h>\n+#include <string.h>\n+#include <stdlib.h>\n+#include <complex.h>\n+\n+int main(int argc , char * argv[]) {\n+\n+\n+  int AA, BB, CC;\n+  AA = 99;\n+  BB = 99;\n+  CC = (int)atoi(argv[3]);\n+\n+  int m,n,s;\n+  int DD,EE,num_s;\n+\n+\n+  float _Complex * restrict A;\n+  A = malloc((AA) * (BB) * (CC) * sizeof(float _Complex));\n+  int A_slice_stride;\n+  A_slice_stride = (AA) * (BB) ;\n+\n+\n+  float * restrict f;\n+  f = malloc(CC * sizeof(float));\n+\n+\n+\n+  FILE *fp;\n+\n+  fp = fopen(argv[1],\"rb\");\n+  fread(A,sizeof(float _Complex),AA * BB * CC,fp);\n+  fclose(fp);\n+\n+  fp = fopen(argv[2],\"rb\");\n+  fread(f,sizeof(float),CC,fp);\n+  fclose(fp);\n+\n+\n+  DD = (int)atoi(argv[4]);\n+  EE = (int)atoi(argv[5]);\n+\n+  num_s = (EE - DD) + 1;\n+\n+\n+\n+  float * restrict INPUT;\n+  INPUT = malloc(4 * 4 * sizeof(float));\n+\n+\n+\n+  int m_max = 99;\n+  int n_max = 00;\n+  float h = 0.1;\n+  float FF = 10;\n+\n+  if ((__extension__ (__builtin_constant_p (5) && ((__builtin_constant_p (argv[6]) && strlen (argv[6]) < ((size_t) (5))) || (__builtin_constant_p (\"plane\") && strlen (\"plane\") < ((size_t) (5)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (argv[6]) && __builtin_constant_p (\"plane\") && (__s1_len = strlen (argv[6]), __s2_len = strlen (\"plane\"), (!((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (argv[6], \"plane\") : (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) && (__s1_len = strlen (argv[6]), __s1_len < 4) ? (__builtin_constant_p (\"plane\") && ((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) ? __builtin_strcmp (argv[6], \"plane\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"plane\"); register int __result = (((__const unsigned char *) (__const char *) (argv[6]))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (argv[6]))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"plane\") && ((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) && (__s2_len = strlen (\"plane\"), __s2_len < 4) ? (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) ? __builtin_strcmp (argv[6], \"plane\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (argv[6]); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"plane\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"plane\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"plane\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"plane\"))[3]); } } __result; }))) : __builtin_strcmp (argv[6], \"plane\")))); }) : strncmp (argv[6], \"plane\", 5)))==0) {\n+      m_max = INPUT[ ( ((1)-1) + ( ((1)-1)*4 ))];\n+      n_max = INPUT[ ( ((2)-1) + ( ((1)-1)*4 ))];\n+      h = INPUT[ ( ((3)-1) + ( ((1)-1)*4 ))];\n+      FF = INPUT[ ( ((4)-1) + ( ((1)-1)*4 ))];\n+  }\n+\n+  if ((__extension__ (__builtin_constant_p (6) && ((__builtin_constant_p (argv[6]) && strlen (argv[6]) < ((size_t) (6))) || (__builtin_constant_p (\"sphere\") && strlen (\"sphere\") < ((size_t) (6)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (argv[6]) && __builtin_constant_p (\"sphere\") && (__s1_len = strlen (argv[6]), __s2_len = strlen (\"sphere\"), (!((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (argv[6], \"sphere\") : (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) && (__s1_len = strlen (argv[6]), __s1_len < 4) ? (__builtin_constant_p (\"sphere\") && ((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) ? __builtin_strcmp (argv[6], \"sphere\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"sphere\"); register int __result = (((__const unsigned char *) (__const char *) (argv[6]))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (argv[6]))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"sphere\") && ((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) && (__s2_len = strlen (\"sphere\"), __s2_len < 4) ? (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) ? __builtin_strcmp (argv[6], \"sphere\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (argv[6]); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"sphere\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"sphere\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"sphere\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"sphere\"))[3]); } } __result; }))) : __builtin_strcmp (argv[6], \"sphere\")))); }) : strncmp (argv[6], \"sphere\", 6)))==0) {\n+      m_max = 181;\n+      n_max = 361;\n+      h = INPUT[ ( ((3)-1) + ( ((1)-1)*4 ))];\n+      FF = INPUT[ ( ((4)-1) + ( ((1)-1)*4 ))];\n+  }\n+\n+\n+\n+\n+\n+  float * restrict X;\n+  X = malloc(m_max * n_max * sizeof(float));\n+\n+\n+  float * restrict Y;\n+  Y = malloc(m_max * n_max * sizeof(float));\n+\n+\n+  float * restrict Z;\n+  Z = malloc(m_max * n_max * sizeof(float));\n+\n+\n+\n+\n+\n+\n+  float _Complex * restrict P;\n+  P = malloc(m_max * n_max * sizeof(float _Complex));\n+\n+\n+  float _Complex * restrict Ps;\n+  Ps = malloc((m_max) * (n_max) * (num_s) * sizeof(float _Complex));\n+  int Ps_slice_stride;\n+  Ps_slice_stride = (m_max) * (n_max) ;\n+\n+\n+  float GG;\n+  float HH;\n+\n+\n+\n+\n+  for ( n = 1 ; n <= 99 ; n++ ) {\n+    for ( m = 1 ; m <= 99 ; m++ ) {\n+\n+\n+\n+\n+\n+      X[ ( ((m)-1) + ( ((n)-1)*m_max ))] = FF ;\n+      Y[ ( ((m)-1) + ( ((n)-1)*m_max ))] = FF ;\n+      Z[ ( ((m)-1) + ( ((n)-1)*m_max ))] = FF ;\n+    }\n+  }\n+  int KK = atoi(argv[8]);\n+  int LL = 3 * KK;\n+\n+\n+  float * restrict MM;\n+  MM = malloc(4 * LL * sizeof(float));\n+  for ( n = 1 ; n <= n_max ; n++) {\n+    for ( m = 1 ; m <= m_max ; m++) {\n+      for ( s = 1 ; s <= num_s ; s++) {\n+ Ps[ ( ((m)-1) + (((n)-1)*(m_max)) + (((s)-1)*(Ps_slice_stride)) ) ] = 0.0 + 0.0 * (__extension__ 1.0iF);\n+      }\n+    }\n+  }\n+\n+\n+  int liter ;\n+\n+#pragma omp parallel for private(m,liter,s)\n+  for ( n = 1 ; n <= n_max ; n++) {\n+    for ( m = 1 ; m <= m_max ; m++) {\n+      for ( liter = 1 ; liter <= KK ; liter++ ) {\n+ for ( s = 1 ; s <= num_s ; s++) {\n+\n+\n+   int LM_column;\n+   float NN[4];\n+   float OO[4];\n+   float PP[4];\n+   float QQ[4];\n+   float k;\n+   int s_index;\n+   float RR;\n+\n+   s_index = s + (DD -1);\n+   RR = f[ ( (s_index)-1) ];\n+   k = 99.0;\n+\n+   NN[1 -1] = X[ ( ((m)-1) + ( ((n)-1)*m_max ))];\n+   NN[2 -1] = Y[ ( ((m)-1) + ( ((n)-1)*m_max ))];\n+   NN[3 -1] = Z[ ( ((m)-1) + ( ((n)-1)*m_max ))];\n+   NN[4 -1] = 1.0;\n+\n+   LM_column = ((liter -1) * 3) + 1;\n+   OO[1 -1] = MM[ ( ((1)-1) + ( ((LM_column)-1)*4 ))];\n+   OO[2 -1] = MM[ ( ((2)-1) + ( ((LM_column)-1)*4 ))];\n+   OO[3 -1] = MM[ ( ((3)-1) + ( ((LM_column)-1)*4 ))];\n+   OO[4 -1] = MM[ ( ((4)-1) + ( ((LM_column)-1)*4 ))];\n+\n+   LM_column = ((liter -1) * 3) + 2;\n+   PP[1 -1] = MM[ ( ((1)-1) + ( ((LM_column)-1)*4 ))];\n+   PP[2 -1] = MM[ ( ((2)-1) + ( ((LM_column)-1)*4 ))];\n+   PP[3 -1] = MM[ ( ((3)-1) + ( ((LM_column)-1)*4 ))];\n+   PP[4 -1] = MM[ ( ((4)-1) + ( ((LM_column)-1)*4 ))];\n+\n+   LM_column = ((liter -1) * 3) + 3;\n+   QQ[1 -1] = MM[ ( ((1)-1) + ( ((LM_column)-1)*4 ))];\n+   QQ[2 -1] = MM[ ( ((2)-1) + ( ((LM_column)-1)*4 ))];\n+   QQ[3 -1] = MM[ ( ((3)-1) + ( ((LM_column)-1)*4 ))];\n+   QQ[4 -1] = MM[ ( ((4)-1) + ( ((LM_column)-1)*4 ))];\n+\n+ }\n+      }\n+    }\n+  }\n+\n+\n+#pragma omp parallel for private(m)\n+  for ( n = 1 ; n <= n_max ; n++) {\n+    for ( m = 1 ; m <= m_max ; m++) {\n+\n+\n+\n+      int s;\n+      float SSS;\n+      float f1,f2,p1,p2,TT,h,FFF;\n+      SSS = 0.0;\n+      for ( s = 2 ; s <= num_s ; s++) {\n+ f1 = f[ ( ((s-1) + (DD - 1))-1) ];\n+ f2 = f[ ( ((s) + (DD - 1))-1) ];\n+ p1 = cabsf(Ps[ ( ((m)-1) + (((n)-1)*(m_max)) + ((((s-1))-1)*(Ps_slice_stride)) ) ]) ;\n+ p2 = cabsf(Ps[ ( ((m)-1) + (((n)-1)*(m_max)) + (((s)-1)*(Ps_slice_stride)) ) ]) ;\n+\n+ h = f2 - f1;\n+\n+ FFF = (f1 + f2) / 2.0;\n+\n+\n+ TT = (1.0 / sqrtf(2.0)) * (((h * p1) + (0.5 * h * (p2 - p1))) * (1.0 / FFF));\n+\n+ SSS += TT;\n+\n+      }\n+\n+      P[ ( ((m)-1) + ( ((n)-1)*m_max ))] = SSS + ((__extension__ 1.0iF) * 0.0);\n+    }\n+  }\n+\n+\n+\n+\n+\n+  fp = fopen(argv[10],\"wb\");\n+  fwrite(X,sizeof(float),m_max * n_max,fp);\n+  fclose(fp);\n+\n+  fp = fopen(argv[11],\"wb\");\n+  fwrite(Y,sizeof(float),m_max * n_max,fp);\n+  fclose(fp);\n+\n+  fp = fopen(argv[12],\"wb\");\n+  fwrite(Z,sizeof(float),m_max * n_max,fp);\n+  fclose(fp);\n+\n+  fp = fopen(argv[13],\"wb\");\n+  fwrite(P,sizeof(float _Complex),m_max * n_max,fp);\n+  fclose(fp);\n+\n+\n+\n+  return(0);\n+}"}]}