{"sha": "0ef08a81174e8a46e59cc2e1811f03e6754a4eba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVmMDhhODExNzRlOGE0NmU1OWNjMmUxODExZjAzZTY3NTRhNGViYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-07-09T03:19:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-07-09T03:19:36Z"}, "message": "re PR c++/57550 (bogus \"error ... is private\")\n\n\tPR c++/57550\n\t* pt.c (fn_type_unification): Only defer during substitution.\n\t(type_unification_real): Defer during defarg substitution,\n\tadd checks parm to pass back deferred checks.\n\t(unify, do_auto_deduction): Adjust.\n\t* semantics.c (reopen_deferring_access_checks): New.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r200808", "tree": {"sha": "8cc6cbc0e225a5b396b8f631b998f97ea6b4746a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cc6cbc0e225a5b396b8f631b998f97ea6b4746a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ef08a81174e8a46e59cc2e1811f03e6754a4eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef08a81174e8a46e59cc2e1811f03e6754a4eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ef08a81174e8a46e59cc2e1811f03e6754a4eba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a89b31132d4e18a1563a6fd3b57f1212401d747b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89b31132d4e18a1563a6fd3b57f1212401d747b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89b31132d4e18a1563a6fd3b57f1212401d747b"}], "stats": {"total": 87, "additions": 72, "deletions": 15}, "files": [{"sha": "33f6562f1a4715b4c2b059fb5256db04a505cdcc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0ef08a81174e8a46e59cc2e1811f03e6754a4eba", "patch": "@@ -1,3 +1,13 @@\n+2013-07-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/57550\n+\t* pt.c (fn_type_unification): Only defer during substitution.\n+\t(type_unification_real): Defer during defarg substitution,\n+\tadd checks parm to pass back deferred checks.\n+\t(unify, do_auto_deduction): Adjust.\n+\t* semantics.c (reopen_deferring_access_checks): New.\n+\t* cp-tree.h: Declare it.\n+\n 2013-07-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/28262"}, {"sha": "1971bc5386c397070963b54694067097eb77d1a1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0ef08a81174e8a46e59cc2e1811f03e6754a4eba", "patch": "@@ -5637,6 +5637,7 @@ extern void resume_deferring_access_checks\t(void);\n extern void stop_deferring_access_checks\t(void);\n extern void pop_deferring_access_checks\t\t(void);\n extern vec<deferred_access_check, va_gc> *get_deferred_access_checks (void);\n+extern void reopen_deferring_access_checks (vec<deferred_access_check, va_gc> *);\n extern void pop_to_parent_deferring_access_checks (void);\n extern bool perform_access_checks (vec<deferred_access_check, va_gc> *,\n \t\t\t\t   tsubst_flags_t);"}, {"sha": "26d5a1c5daabee6ecfacb50561f03eaeb6481387", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0ef08a81174e8a46e59cc2e1811f03e6754a4eba", "patch": "@@ -138,6 +138,7 @@ static int maybe_adjust_types_for_deduction (unification_kind_t, tree*, tree*,\n \t\t\t\t\t     tree);\n static int type_unification_real (tree, tree, tree, const tree *,\n \t\t\t\t  unsigned int, int, unification_kind_t, int,\n+\t\t\t\t  vec<deferred_access_check, va_gc> **,\n \t\t\t\t  bool);\n static void note_template_header (int);\n static tree convert_nontype_argument_function (tree, tree);\n@@ -15052,7 +15053,6 @@ fn_type_unification (tree fn,\n     return error_mark_node;\n   tinst = build_tree_list (fn, NULL_TREE);\n   ++deduction_depth;\n-  push_deferring_access_checks (dk_deferred);\n \n   gcc_assert (TREE_CODE (fn) == TEMPLATE_DECL);\n \n@@ -15144,21 +15144,20 @@ fn_type_unification (tree fn,\n \t}\n       processing_template_decl += incomplete;\n       input_location = DECL_SOURCE_LOCATION (fn);\n+      /* Ignore any access checks; we'll see them again in\n+\t instantiate_template and they might have the wrong\n+\t access path at this point.  */\n+      push_deferring_access_checks (dk_deferred);\n       fntype = tsubst (TREE_TYPE (fn), explicit_targs,\n \t\t       complain | tf_partial, NULL_TREE);\n+      pop_deferring_access_checks ();\n       input_location = loc;\n       processing_template_decl -= incomplete;\n       pop_tinst_level ();\n \n       if (fntype == error_mark_node)\n \tgoto fail;\n \n-      /* Throw away these access checks; we'll see them again in\n-\t instantiate_template and they might have the wrong\n-\t access path at this point.  */\n-      pop_deferring_access_checks ();\n-      push_deferring_access_checks (dk_deferred);\n-\n       /* Place the explicitly specified arguments in TARGS.  */\n       for (i = NUM_TMPL_ARGS (explicit_targs); i--;)\n \tTREE_VEC_ELT (targs, i) = TREE_VEC_ELT (explicit_targs, i);\n@@ -15194,9 +15193,15 @@ fn_type_unification (tree fn,\n       excessive_deduction_depth = true;\n       goto fail;\n     }\n+\n+  /* type_unification_real will pass back any access checks from default\n+     template argument substitution.  */\n+  vec<deferred_access_check, va_gc> *checks;\n+  checks = NULL;\n+\n   ok = !type_unification_real (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n \t\t\t       targs, parms, args, nargs, /*subr=*/0,\n-\t\t\t       strict, flags, explain_p);\n+\t\t\t       strict, flags, &checks, explain_p);\n   if (!explain_p)\n     pop_tinst_level ();\n   if (!ok)\n@@ -15245,16 +15250,23 @@ fn_type_unification (tree fn,\n       excessive_deduction_depth = true;\n       goto fail;\n     }\n+\n+  /* Also collect access checks from the instantiation.  */\n+  reopen_deferring_access_checks (checks);\n+\n   decl = instantiate_template (fn, targs, complain);\n+\n+  checks = get_deferred_access_checks ();\n+  pop_deferring_access_checks ();\n+\n   pop_tinst_level ();\n \n   if (decl == error_mark_node)\n     goto fail;\n \n-  /* Now perform any access checks encountered during deduction, such as\n-     for default template arguments.  */\n+  /* Now perform any access checks encountered during substitution.  */\n   push_access_scope (decl);\n-  ok = perform_deferred_access_checks (complain);\n+  ok = perform_access_checks (checks, complain);\n   pop_access_scope (decl);\n   if (!ok)\n     goto fail;\n@@ -15283,7 +15295,6 @@ fn_type_unification (tree fn,\n   r = decl;\n \n  fail:\n-  pop_deferring_access_checks ();\n   --deduction_depth;\n   if (excessive_deduction_depth)\n     {\n@@ -15684,7 +15695,10 @@ unify_one_argument (tree tparms, tree targs, tree parm, tree arg,\n \n    If SUBR is 1, we're being called recursively (to unify the\n    arguments of a function or method parameter of a function\n-   template). */\n+   template).\n+\n+   CHECKS is a pointer to a vector of access checks encountered while\n+   substituting default template arguments.  */\n \n static int\n type_unification_real (tree tparms,\n@@ -15695,6 +15709,7 @@ type_unification_real (tree tparms,\n \t\t       int subr,\n \t\t       unification_kind_t strict,\n \t\t       int flags,\n+\t\t       vec<deferred_access_check, va_gc> **checks,\n \t\t       bool explain_p)\n {\n   tree parm, arg;\n@@ -15834,13 +15849,16 @@ type_unification_real (tree tparms,\n \t    {\n \t      tree parm = TREE_VALUE (TREE_VEC_ELT (tparms, i));\n \t      tree arg = TREE_PURPOSE (TREE_VEC_ELT (tparms, i));\n+\t      reopen_deferring_access_checks (*checks);\n \t      location_t save_loc = input_location;\n \t      if (DECL_P (parm))\n \t\tinput_location = DECL_SOURCE_LOCATION (parm);\n \t      arg = tsubst_template_arg (arg, targs, complain, NULL_TREE);\n \t      arg = convert_template_argument (parm, arg, targs, complain,\n \t\t\t\t\t       i, NULL_TREE);\n \t      input_location = save_loc;\n+\t      *checks = get_deferred_access_checks ();\n+\t      pop_deferring_access_checks ();\n \t      if (arg == error_mark_node)\n \t\treturn 1;\n \t      else\n@@ -17307,7 +17325,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \n \treturn type_unification_real (tparms, targs, TYPE_ARG_TYPES (parm),\n \t\t\t\t      args, nargs, 1, DEDUCE_EXACT,\n-\t\t\t\t      LOOKUP_NORMAL, explain_p);\n+\t\t\t\t      LOOKUP_NORMAL, NULL, explain_p);\n       }\n \n     case OFFSET_TYPE:\n@@ -20914,7 +20932,7 @@ do_auto_deduction (tree type, tree init, tree auto_node)\n \t= build_tree_list (NULL_TREE, TYPE_NAME (auto_node));\n       val = type_unification_real (tparms, targs, parms, &init, 1, 0,\n \t\t\t\t   DEDUCE_CALL, LOOKUP_NORMAL,\n-\t\t\t\t   /*explain_p=*/false);\n+\t\t\t\t   NULL, /*explain_p=*/false);\n       if (val > 0)\n \t{\n \t  if (processing_template_decl)"}, {"sha": "0a6c77541a6ff944d27619cd3ab7842357a33bf3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0ef08a81174e8a46e59cc2e1811f03e6754a4eba", "patch": "@@ -155,6 +155,17 @@ push_deferring_access_checks (deferring_kind deferring)\n     }\n }\n \n+/* Save the current deferred access states and start deferred access\n+   checking, continuing the set of deferred checks in CHECKS.  */\n+\n+void\n+reopen_deferring_access_checks (vec<deferred_access_check, va_gc> * checks)\n+{\n+  push_deferring_access_checks (dk_deferred);\n+  if (!deferred_access_no_check)\n+    deferred_access_stack->last().deferred_access_checks = checks;\n+}\n+\n /* Resume deferring access checks again after we stopped doing\n    this previously.  */\n "}, {"sha": "967e10f6a5bd827292679fb938bb617f65623e2f", "filename": "gcc/testsuite/g++.dg/template/access27.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef08a81174e8a46e59cc2e1811f03e6754a4eba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess27.C?ref=0ef08a81174e8a46e59cc2e1811f03e6754a4eba", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/57550\n+\n+template <bool (double)> bool Wrapper(double);\n+template <class T> void MakeHandler(bool (T));\n+\n+class Handler\n+{\n+public:\n+  template <typename T> static void SetPrimitiveHandlers()\n+  {\n+    MakeHandler(Wrapper<Append<T> >);\n+  }\n+private :\n+  template <typename T> static bool Append(T);\n+};\n+\n+template void Handler::SetPrimitiveHandlers<double>();"}]}