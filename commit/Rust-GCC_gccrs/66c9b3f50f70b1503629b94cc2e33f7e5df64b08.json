{"sha": "66c9b3f50f70b1503629b94cc2e33f7e5df64b08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZjOWIzZjUwZjcwYjE1MDM2MjliOTRjYzJlMzNmN2U1ZGY2NGIwOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-09-09T10:36:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-09-09T10:36:40Z"}, "message": "utils.c (convert): When converting to a padding type...\n\n\t* gcc-interface/utils.c (convert): When converting to a padding type,\n\treuse an existing CONSTRUCTOR if it has got the right size.\n\nFrom-SVN: r251924", "tree": {"sha": "021a63e15d96e6651a19b61cca2a54b017355303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021a63e15d96e6651a19b61cca2a54b017355303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66c9b3f50f70b1503629b94cc2e33f7e5df64b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c9b3f50f70b1503629b94cc2e33f7e5df64b08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c9b3f50f70b1503629b94cc2e33f7e5df64b08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c9b3f50f70b1503629b94cc2e33f7e5df64b08/comments", "author": null, "committer": null, "parents": [{"sha": "a49bf6f0f5b421fda0e44507cbf03c8a570f511b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49bf6f0f5b421fda0e44507cbf03c8a570f511b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49bf6f0f5b421fda0e44507cbf03c8a570f511b"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "65b683349294c3aa1aba3e57d247c732fd85ff14", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c9b3f50f70b1503629b94cc2e33f7e5df64b08/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c9b3f50f70b1503629b94cc2e33f7e5df64b08/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=66c9b3f50f70b1503629b94cc2e33f7e5df64b08", "patch": "@@ -1,3 +1,8 @@\n+2017-09-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (convert): When converting to a padding type,\n+\treuse an existing CONSTRUCTOR if it has got the right size.\n+\n 2017-09-08  Nicolas Roche  <roche@adacore.com>\n \n \t* gcc-interface/Make-lang.in, gcc-interface/Makefile.in: Find runtime"}, {"sha": "04199769ea34dd119ea1d55f6eba85c0c1c8e1ac", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c9b3f50f70b1503629b94cc2e33f7e5df64b08/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c9b3f50f70b1503629b94cc2e33f7e5df64b08/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=66c9b3f50f70b1503629b94cc2e33f7e5df64b08", "patch": "@@ -4219,8 +4219,6 @@ convert (tree type, tree expr)\n      constructor to build the record, unless a variable size is involved.  */\n   else if (code == RECORD_TYPE && TYPE_PADDING_P (type))\n     {\n-      vec<constructor_elt, va_gc> *v;\n-\n       /* If we previously converted from another type and our type is\n \t of variable size, remove the conversion to avoid the need for\n \t variable-sized temporaries.  Likewise for a conversion between\n@@ -4272,9 +4270,21 @@ convert (tree type, tree expr)\n \t\t\t\t\t   expr),\n \t\t\t\t  false);\n \n+      tree t = convert (TREE_TYPE (TYPE_FIELDS (type)), expr);\n+\n+      /* If converting to the inner type has already created a CONSTRUCTOR with\n+         the right size, then reuse it instead of creating another one.  This\n+         can happen for the padding type built to overalign local variables.  */\n+      if (TREE_CODE (t) == VIEW_CONVERT_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (t, 0)) == CONSTRUCTOR\n+\t  && TREE_CONSTANT (TYPE_SIZE (TREE_TYPE (TREE_OPERAND (t, 0))))\n+\t  && tree_int_cst_equal (TYPE_SIZE (type),\n+\t\t\t\t TYPE_SIZE (TREE_TYPE (TREE_OPERAND (t, 0)))))\n+\treturn build1 (VIEW_CONVERT_EXPR, type, TREE_OPERAND (t, 0));\n+\n+      vec<constructor_elt, va_gc> *v;\n       vec_alloc (v, 1);\n-      CONSTRUCTOR_APPEND_ELT (v, TYPE_FIELDS (type),\n-\t\t\t      convert (TREE_TYPE (TYPE_FIELDS (type)), expr));\n+      CONSTRUCTOR_APPEND_ELT (v, TYPE_FIELDS (type), t);\n       return gnat_build_constructor (type, v);\n     }\n "}]}