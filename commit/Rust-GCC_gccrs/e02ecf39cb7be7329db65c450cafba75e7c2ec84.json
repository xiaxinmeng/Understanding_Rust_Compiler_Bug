{"sha": "e02ecf39cb7be7329db65c450cafba75e7c2ec84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAyZWNmMzljYjdiZTczMjlkYjY1YzQ1MGNhZmJhNzVlN2MyZWM4NA==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-07-19T14:10:41Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-07-19T14:10:41Z"}, "message": "activate the auto-edit marker on the fixed output files\n\nFrom-SVN: r35133", "tree": {"sha": "bc304f5ce9682d52b2df8eb2e68190e3b2649567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc304f5ce9682d52b2df8eb2e68190e3b2649567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e02ecf39cb7be7329db65c450cafba75e7c2ec84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02ecf39cb7be7329db65c450cafba75e7c2ec84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02ecf39cb7be7329db65c450cafba75e7c2ec84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02ecf39cb7be7329db65c450cafba75e7c2ec84/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca2875c40bb3685f18a09c1277dc36296825f58a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2875c40bb3685f18a09c1277dc36296825f58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca2875c40bb3685f18a09c1277dc36296825f58a"}], "stats": {"total": 211, "additions": 110, "deletions": 101}, "files": [{"sha": "a77394e0726630ee2c1b683a771b0996798107c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e02ecf39cb7be7329db65c450cafba75e7c2ec84", "patch": "@@ -1,3 +1,11 @@\n+2000-07-19  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixinc/fixincl.c:  Convert to using a table of environment variables\n+\tand activate the auto-edit marker on the fixed output files.\n+\t* fixinc/fixlib.h:  Define the environment table\n+\t* fixinc/fixincl.sh: export the ${INPUT} dir\n+\t* fixinc/check.tpl: likewise\n+\n 2000-07-18  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.c (.h spec): Fix typo."}, {"sha": "249636b76773d59496ea3bb78b5e6362dcc8c04d", "filename": "gcc/fixinc/check.tpl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2Ffixinc%2Fcheck.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2Ffixinc%2Fcheck.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fcheck.tpl?ref=e02ecf39cb7be7329db65c450cafba75e7c2ec84", "patch": "@@ -18,8 +18,9 @@ DESTDIR=`pwd`/res\n SRCDIR=`pwd`/inc\n FIND_BASE='.'\n VERBOSE=1\n+INPUT=`pwd`\n \n-export TARGET_MACHINE DESTDIR SRCDIR FIND_BASE VERBOSE\n+export TARGET_MACHINE DESTDIR SRCDIR FIND_BASE VERBOSE INPUT\n \n rm -rf ${DESTDIR} ${SRCDIR}\n mkdir ${DESTDIR} ${SRCDIR}"}, {"sha": "8deafa84a2dfe0d9b097c980c5d43e3f08ab9546", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 72, "deletions": 100, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=e02ecf39cb7be7329db65c450cafba75e7c2ec84", "patch": "@@ -38,10 +38,21 @@ Boston, MA 02111-1307, USA.  */\n \n static const char program_id[] = \"fixincl version 1.1\";\n \n+/*  This format will be used at the start of every generated file */\n+\n+static const char z_std_preamble[] =\n+\"/*  DO NOT EDIT THIS FILE.\\n\\n\\\n+    It has been auto-edited by fixincludes from:\\n\\n\\\n+\\t\\\"%s/%s\\\"\\n\\n\\\n+    This had to be done to correct non-standard usages in the\\n\\\n+    original, manufacturer supplied header file.  */\\n\\n\";\n+\n /*  Working environment strings.  Essentially, invocation 'options'.  */\n-char *pz_dest_dir = NULL;\n-char *pz_src_dir = NULL;\n-char *pz_machine = NULL;\n+\n+#define _ENV_(v,m,n,t)   tCC* v = NULL;\n+ENV_TABLE\n+#undef _ENV_\n+\n int find_base_len = 0;\n \n typedef enum {\n@@ -67,21 +78,14 @@ t_bool curr_data_mapped;\n int    data_map_fd;\n size_t data_map_size;\n size_t ttl_data_size = 0;\n+\n #ifdef DO_STATS\n int process_ct = 0;\n int apply_ct = 0;\n int fixed_ct = 0;\n int altered_ct = 0;\n #endif /* DO_STATS */\n \n-#ifdef HAVE_MMAP_FILE\n-#define UNLOAD_DATA() do { if (curr_data_mapped) { \\\n-  munmap ((void*)pz_curr_data, data_map_size); close (data_map_fd); } \\\n-  else free ((void*)pz_curr_data); } while(0)\n-#else\n-#define UNLOAD_DATA() free ((void*)pz_curr_data)\n-#endif\n-\n const char incl_quote_pat[] = \"^[ \\t]*#[ \\t]*include[ \\t]*\\\"[^/]\";\n tSCC z_fork_err[] = \"Error %d (%s) starting filter process for %s\\n\";\n regex_t incl_quote_re;\n@@ -203,8 +207,14 @@ initialize ( argc, argv )\n   char** argv;\n {\n   static const char var_not_found[] =\n-    \"fixincl ERROR:  %s environment variable not defined\\n\\\n-\\tTARGET_MACHINE, DESTDIR, SRCDIR and FIND_BASE are required\\n\";\n+    \"fixincl ERROR:  %s environment variable not defined\\n\"\n+#ifdef __STDC__\n+    \"each of these must be defined:\\n\"\n+#define _ENV_(v,m,n,t) \"\\t\" n \"  - \" t \"\\n\"\n+ENV_TABLE\n+#undef _ENV_\n+#endif\n+    ;\n \n   xmalloc_set_program_name (argv[0]);\n \n@@ -229,85 +239,48 @@ initialize ( argc, argv )\n       exit (EXIT_FAILURE);\n     }\n \n-  {\n-    static const char var[] = \"TARGET_MACHINE\";\n-    pz_machine = getenv (var);\n-    if (pz_machine == (char *) NULL)\n-      {\n-        fprintf (stderr, var_not_found, var);\n-        exit (EXIT_FAILURE);\n-      }\n-  }\n+#define _ENV_(v,m,n,t)   { tSCC var[] = n;  \\\n+  v = getenv (var); if (m && (v == NULL)) { \\\n+  fprintf (stderr, var_not_found, var);     \\\n+  exit (EXIT_FAILURE); } }\n \n-  {\n-    static const char var[] = \"DESTDIR\";\n-    pz_dest_dir = getenv (var);\n-    if (pz_dest_dir == (char *) NULL)\n-      {\n-        fprintf (stderr, var_not_found, var);\n-        exit (EXIT_FAILURE);\n-      }\n-  }\n+ENV_TABLE\n \n-  {\n-    static const char var[] = \"SRCDIR\";\n-    pz_src_dir = getenv (var);\n-    if (pz_src_dir == (char *) NULL)\n-      {\n-        fprintf (stderr, var_not_found, var);\n-        exit (EXIT_FAILURE);\n-      }\n-  }\n+#undef _ENV_\n \n-  {\n-    static const char var[] = \"VERBOSE\";\n-    char* pz = getenv (var);\n-    if (pz != (char *) NULL)\n-      {\n-        if (isdigit( *pz ))\n-          verbose_level = (te_verbose)atoi( pz );\n-        else\n-          switch (*pz) {\n-          case 's':\n-          case 'S':\n-            verbose_level = VERB_SILENT;     break;\n-\n-          case 'f':\n-          case 'F':\n-            verbose_level = VERB_FIXES;      break;\n-\n-          case 'a':\n-          case 'A':\n-            verbose_level = VERB_APPLIES;    break;\n-\n-          case 'p':\n-          case 'P':\n-            verbose_level = VERB_PROGRESS;   break;\n-\n-          case 't':\n-          case 'T':\n-            verbose_level = VERB_TESTS;      break;\n-\n-          case 'e':\n-          case 'E':\n-            verbose_level = VERB_EVERYTHING; break;\n-          }\n-      }\n-  }\n+  if (isdigit( *pz_verbose ))\n+    verbose_level = (te_verbose)atoi( pz_verbose );\n+  else\n+    switch (*pz_verbose) {\n+    case 's':\n+    case 'S':\n+      verbose_level = VERB_SILENT;     break;\n+\n+    case 'f':\n+    case 'F':\n+      verbose_level = VERB_FIXES;      break;\n+\n+    case 'a':\n+    case 'A':\n+      verbose_level = VERB_APPLIES;    break;\n+\n+    case 'p':\n+    case 'P':\n+      verbose_level = VERB_PROGRESS;   break;\n+\n+    case 't':\n+    case 'T':\n+      verbose_level = VERB_TESTS;      break;\n+\n+    case 'e':\n+    case 'E':\n+      verbose_level = VERB_EVERYTHING; break;\n+    }\n \n-  {\n-    static const char var[] = \"FIND_BASE\";\n-    char *pz = getenv (var);\n-    if (pz == (char *) NULL)\n-      {\n-        fprintf (stderr, var_not_found, var);\n-        exit (EXIT_FAILURE);\n-      }\n-    while ((pz[0] == '.') && (pz[1] == '/'))\n-      pz += 2;\n-    if ((pz[0] != '.') || (pz[1] != NUL))\n-      find_base_len = strlen( pz );\n-  }\n+ while ((pz_find_base[0] == '.') && (pz_find_base[1] == '/'))\n+   pz_find_base += 2;\n+ if ((pz_find_base[0] != '.') || (pz_find_base[1] != NUL))\n+   find_base_len = strlen( pz_find_base );\n \n   /*  Compile all the regular expressions now.\n       That way, it is done only once for the whole run.\n@@ -584,17 +557,16 @@ create_file ()\n     fprintf (stderr, \"Fixed:  %s\\n\", pz_curr_file);\n   pf = fdopen (fd, \"w\");\n \n-#ifdef LATER\n-  {\n-    static const char hdr[] =\n-    \"/*  DO NOT EDIT THIS FILE.\\n\\n\"\n-    \"    It has been auto-edited by fixincludes from /usr/include/%s\\n\"\n-    \"    This had to be done to correct non-standard usages in the\\n\"\n-    \"    original, manufacturer supplied header file.  */\\n\\n\";\n+  /*\n+   *  IF pz_machine is NULL, then we are in some sort of test mode.\n+   *  Do not insert the current directory name.  Use a constant string.\n+   */\n+  fprintf (pf, z_std_preamble,\n+           (pz_machine == NULL)\n+           ? \"fixinc/tests/inc\"\n+           : pz_input_dir,\n+           pz_curr_file);\n \n-    fprintf (pf, hdr, pz_curr_file);\n-  }\n-#endif\n   return pf;\n }\n \n@@ -953,8 +925,8 @@ fix_applies (p_fixd)\n   tFixDesc *p_fixd;\n {\n #ifdef DEBUG\n-  static const char z_failed[] = \"not applying %s %s to %s - \"\n-    \"test %d failed\\n\";\n+  static const char z_failed[] = \"not applying %s %s to %s - \\\n+test %d failed\\n\";\n #endif\n   const char *pz_fname = pz_curr_file;\n   const char *pz_scan = p_fixd->file_list;"}, {"sha": "83e7b833d1703760ce36fa483c03f79750c0d9c1", "filename": "gcc/fixinc/fixincl.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2Ffixinc%2Ffixincl.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2Ffixinc%2Ffixincl.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.sh?ref=e02ecf39cb7be7329db65c450cafba75e7c2ec84", "patch": "@@ -146,6 +146,7 @@ fi\n cd ${INPUT}\n \n INPUT=`${PWDCMD}`\n+export INPUT\n \n #\n # # # # # # # # # # # # # # # # # # # # #"}, {"sha": "dc422b181b523f27bb117b8cc5914697c8f1e68e", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02ecf39cb7be7329db65c450cafba75e7c2ec84/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=e02ecf39cb7be7329db65c450cafba75e7c2ec84", "patch": "@@ -96,6 +96,25 @@ typedef int apply_fix_p_t;  /* Apply Fix Predicate Type */\n #define _P_(p)\t()\n #endif\n \n+#define ENV_TABLE                                    \\\n+  _ENV_( pz_machine,   BOOL_TRUE, \"TARGET_MACHINE\",  \\\n+         \"output from config.guess\" )                \\\n+                                                     \\\n+  _ENV_( pz_src_dir,   BOOL_TRUE, \"SRCDIR\",          \\\n+         \"directory of original files\" )             \\\n+                                                     \\\n+  _ENV_( pz_input_dir, BOOL_TRUE, \"INPUT\",           \\\n+         \"current directory for fixincl\" )           \\\n+                                                     \\\n+  _ENV_( pz_dest_dir,  BOOL_TRUE, \"DESTDIR\",         \\\n+         \"output directory\" )                        \\\n+                                                     \\\n+  _ENV_( pz_verbose,  BOOL_FALSE, \"VERBOSE\",         \\\n+         \"amount of user entertainment\" )            \\\n+                                                     \\\n+  _ENV_( pz_find_base, BOOL_TRUE, \"FIND_BASE\",       \\\n+         \"leader to trim from file names\" )\n+\n /*  Test Descriptor\n \n     Each fix may have associated tests that determine\n@@ -161,6 +180,14 @@ typedef struct {\n \n extern int gnu_type_map_ct;\n \n+#ifdef HAVE_MMAP_FILE\n+#define UNLOAD_DATA() do { if (curr_data_mapped) { \\\n+  munmap ((void*)pz_curr_data, data_map_size); close (data_map_fd); } \\\n+  else free ((void*)pz_curr_data); } while(0)\n+#else\n+#define UNLOAD_DATA() free ((void*)pz_curr_data)\n+#endif\n+\n /*\n  *  Exported procedures\n  */"}]}