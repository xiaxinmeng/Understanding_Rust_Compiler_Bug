{"sha": "05575e078047eec2ec0730ffd9f2f99f344c3f35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1NzVlMDc4MDQ3ZWVjMmVjMDczMGZmZDlmMmY5OWYzNDRjM2YzNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-04-30T14:26:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-04-30T14:26:51Z"}, "message": "lto-cgraph.c (lto_output_varpool_node): Always output constant pool references.\n\n\n\t* lto-cgraph.c (lto_output_varpool_node): Always output constant pool\n\treferences.\n\n\t* lto.c: Do not attempt to make constant pool references global.\n\nFrom-SVN: r158938", "tree": {"sha": "5ecd0243cf1b240d9c4aba38a058cf969ac70a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ecd0243cf1b240d9c4aba38a058cf969ac70a4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05575e078047eec2ec0730ffd9f2f99f344c3f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05575e078047eec2ec0730ffd9f2f99f344c3f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05575e078047eec2ec0730ffd9f2f99f344c3f35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05575e078047eec2ec0730ffd9f2f99f344c3f35/comments", "author": null, "committer": null, "parents": [{"sha": "9c6e0798279c7a954be6eb782d07edc14f3b9ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6e0798279c7a954be6eb782d07edc14f3b9ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6e0798279c7a954be6eb782d07edc14f3b9ee8"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "a5f8d09513dd934db485e77b4e88cf22d270edac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05575e078047eec2ec0730ffd9f2f99f344c3f35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05575e078047eec2ec0730ffd9f2f99f344c3f35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05575e078047eec2ec0730ffd9f2f99f344c3f35", "patch": "@@ -1,3 +1,8 @@\n+2010-04-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-cgraph.c (lto_output_varpool_node): Always output constant pool\n+\treferences.\n+\n 2010-04-30  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-profile.c (tree_init_ic_make_global_vars): Mark new decls as"}, {"sha": "8a8855a70c14803a7eed3d9c7009e4537634cd74", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05575e078047eec2ec0730ffd9f2f99f344c3f35/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05575e078047eec2ec0730ffd9f2f99f344c3f35/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=05575e078047eec2ec0730ffd9f2f99f344c3f35", "patch": "@@ -374,10 +374,21 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, struct varpool_node\n   gcc_assert (node->finalized || !node->analyzed);\n   gcc_assert (node->needed);\n   gcc_assert (!node->alias);\n-  /* FIXME: We have no idea how we move references around.  For moment assume that\n-     everything is used externally.  */\n-  bp_pack_value (bp, flag_wpa, 1);  /* used_from_other_parition.  */\n-  bp_pack_value (bp, boundary_p, 1);  /* in_other_partition.  */\n+  /* Constant pool initializers can be de-unified into individual ltrans units.\n+     FIXME: Alternatively at -Os we may want to avoid generating for them the local\n+     labels and share them across LTRANS partitions.  */\n+  if (DECL_IN_CONSTANT_POOL (node->decl))\n+    {\n+      bp_pack_value (bp, 0, 1);  /* used_from_other_parition.  */\n+      bp_pack_value (bp, 0, 1);  /* in_other_partition.  */\n+    }\n+  else\n+    {\n+      /* FIXME: We have no idea how we move references around.  For moment assume that\n+\t everything is used externally.  */\n+      bp_pack_value (bp, flag_wpa, 1);  /* used_from_other_parition.  */\n+      bp_pack_value (bp, boundary_p, 1);  /* in_other_partition.  */\n+    }\n   /* Also emit any extra name aliases.  */\n   for (alias = node->extra_name; alias; alias = alias->next)\n     count++;"}, {"sha": "78452a759b2066d26b04040a191c3baae482aaca", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05575e078047eec2ec0730ffd9f2f99f344c3f35/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05575e078047eec2ec0730ffd9f2f99f344c3f35/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=05575e078047eec2ec0730ffd9f2f99f344c3f35", "patch": "@@ -1,3 +1,7 @@\n+2010-04-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto.c: Do not attempt to make constant pool references global.\n+\n 2010-04-28  Jan Hubicka  <jh@suse.cz>\n \n \t* lto/lto.c (lto_read_in_decl_state): Use GGC."}, {"sha": "18fef05317d6409a5844271f1efed2964040a9d7", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05575e078047eec2ec0730ffd9f2f99f344c3f35/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05575e078047eec2ec0730ffd9f2f99f344c3f35/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=05575e078047eec2ec0730ffd9f2f99f344c3f35", "patch": "@@ -723,9 +723,13 @@ lto_promote_cross_file_statics (void)\n   gcc_assert (flag_wpa);\n \n   /* At moment we make no attempt to figure out who is refering the variables,\n-     so all must become global.  */\n+     so all must become global.  \n+\n+     Constant pool references use internal labels and thus can not be made global.\n+     It is sensible to keep those ltrans local to allow better optimization.  */\n   for (vnode = varpool_nodes; vnode; vnode = vnode->next)\n-    if (!vnode->externally_visible && vnode->analyzed)\n+    if (!vnode->externally_visible && vnode->analyzed\n+\t&& !DECL_IN_CONSTANT_POOL (vnode->decl))\n        {\n \t  TREE_PUBLIC (vnode->decl) = 1;\n \t  DECL_VISIBILITY (vnode->decl) = VISIBILITY_HIDDEN;"}]}