{"sha": "a49317452416282f4cb4da0149754c58d87b2241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5MzE3NDUyNDE2MjgyZjRjYjRkYTAxNDk3NTRjNThkODdiMjI0MQ==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-08-12T07:38:40Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-08-12T07:38:40Z"}, "message": "[NDS32] Implement more C ISR extension.\n\ngcc/\n\t* config.gcc (nds32*): Add nds32_isr.h and nds32_init.inc in\n\textra_headers.\n\t* common/config/nds32/nds32-common.c (nds32_handle_option): Handle\n\tOPT_misr_secure_ case.\n\t* config/nds32/nds32-isr.c: Implementation of backward compatibility.\n\t* config/nds32/nds32-protos.h (nds32_isr_function_critical_p): New.\n\t* config/nds32/nds32.c (nds32_attribute_table): Add critical and\n\tsecure attribute.\n\t* config/nds32/nds32.h (nds32_isr_nested_type): Add NDS32_CRITICAL.\n\t(nds32_isr_info): New field security_level.\n\t(TARGET_ISR_VECTOR_SIZE_4_BYTE): New macro.\n\t* config/nds32/nds32.md (return_internal): Consider critical attribute.\n\t* config/nds32/nds32.opt (misr-secure): New option.\n\t* config/nds32/nds32_init.inc: New file.\n\t* config/nds32/nds32_isr.h: New file.\n\nlibgcc/\n\t* config/nds32/t-nds32-isr: Rearrange object dependency.\n\t* config/nds32/initfini.c: Add dwarf2 unwinding support.\n\t* config/nds32/isr-library/adj_intr_lvl.inc: Consider new extensions\n\tand registers usage.\n\t* config/nds32/isr-library/excp_isr.S: Ditto.\n\t* config/nds32/isr-library/intr_isr.S: Ditto.\n\t* config/nds32/isr-library/reset.S: Ditto.\n\t* config/nds32/isr-library/restore_all.inc: Ditto.\n\t* config/nds32/isr-library/restore_mac_regs.inc: Ditto.\n\t* config/nds32/isr-library/restore_partial.inc: Ditto.\n\t* config/nds32/isr-library/restore_usr_regs.inc: Ditto.\n\t* config/nds32/isr-library/save_all.inc: Ditto.\n\t* config/nds32/isr-library/save_mac_regs.inc: Ditto.\n\t* config/nds32/isr-library/save_partial.inc: Ditto.\n\t* config/nds32/isr-library/save_usr_regs.inc: Ditto.\n\t* config/nds32/isr-library/vec_vid*.S: Consider 4-byte vector size.\n\nFrom-SVN: r263493", "tree": {"sha": "7acf8d7580c0a7c12800740f68ef42e0a4f3cd91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7acf8d7580c0a7c12800740f68ef42e0a4f3cd91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a49317452416282f4cb4da0149754c58d87b2241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49317452416282f4cb4da0149754c58d87b2241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49317452416282f4cb4da0149754c58d87b2241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49317452416282f4cb4da0149754c58d87b2241/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39d2c7ed9f6dd2d716b046bc28524bd26b3a9d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d2c7ed9f6dd2d716b046bc28524bd26b3a9d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d2c7ed9f6dd2d716b046bc28524bd26b3a9d46"}], "stats": {"total": 2300, "additions": 2023, "deletions": 277}, "files": [{"sha": "09ec7e4f7fdc2429a1adf6a75694d49fd1e1c30c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -1,3 +1,21 @@\n+2018-08-12  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config.gcc (nds32*): Add nds32_isr.h and nds32_init.inc in\n+\textra_headers.\n+\t* common/config/nds32/nds32-common.c (nds32_handle_option): Handle\n+\tOPT_misr_secure_ case.\n+\t* config/nds32/nds32-isr.c: Implementation of backward compatibility.\n+\t* config/nds32/nds32-protos.h (nds32_isr_function_critical_p): New.\n+\t* config/nds32/nds32.c (nds32_attribute_table): Add critical and\n+\tsecure attribute.\n+\t* config/nds32/nds32.h (nds32_isr_nested_type): Add NDS32_CRITICAL.\n+\t(nds32_isr_info): New field security_level.\n+\t(TARGET_ISR_VECTOR_SIZE_4_BYTE): New macro.\n+\t* config/nds32/nds32.md (return_internal): Consider critical attribute.\n+\t* config/nds32/nds32.opt (misr-secure): New option.\n+\t* config/nds32/nds32_init.inc: New file.\n+\t* config/nds32/nds32_isr.h: New file.\n+\n 2018-08-11  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.md (UNSPEC_MEMORY_BARRIER): New unspec enum."}, {"sha": "efe2e9d43d773c35ef6e275bb5914481f5030770", "filename": "gcc/common/config/nds32/nds32-common.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fcommon%2Fconfig%2Fnds32%2Fnds32-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fcommon%2Fconfig%2Fnds32%2Fnds32-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fnds32%2Fnds32-common.c?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -53,6 +53,16 @@ nds32_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n \n       return true;\n \n+    case OPT_misr_secure_:\n+      /* Check the valid security level: 0 1 2 3.  */\n+      if (value < 0 || value > 3)\n+\t{\n+\t  error_at (loc, \"for the option -misr-secure=X, the valid X \"\n+\t\t\t \"must be: 0, 1, 2, or 3\");\n+\t  return false;\n+\t}\n+      return true;\n+\n     case OPT_mcache_block_size_:\n       /* Check valid value: 4 8 16 32 64 128 256 512.  */\n       if (exact_log2 (value) < 2 || exact_log2 (value) > 9)"}, {"sha": "ea6715afc4f2f0aa2a5d5a48192529dc50c5c9e9", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -447,7 +447,7 @@ mips*-*-*)\n \t;;\n nds32*)\n \tcpu_type=nds32\n-\textra_headers=\"nds32_intrinsic.h\"\n+\textra_headers=\"nds32_intrinsic.h nds32_isr.h nds32_init.inc\"\n \tcase ${target} in\n \t  nds32*-*-linux*)\n \t    extra_options=\"${extra_options} nds32/nds32-linux.opt\""}, {"sha": "db67a0e3666a9e18a7c2d2eba747c8f76169cbb6", "filename": "gcc/config/nds32/nds32-isr.c", "status": "modified", "additions": 444, "deletions": 26, "changes": 470, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32-isr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32-isr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-isr.c?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -43,7 +43,260 @@\n    We use an array to record essential information for each vector.  */\n static struct nds32_isr_info nds32_isr_vectors[NDS32_N_ISR_VECTORS];\n \n-/* ------------------------------------------------------------------------ */\n+/* ------------------------------------------------------------- */\n+/* FIXME:\n+   FOR BACKWARD COMPATIBILITY, we need to support following patterns:\n+\n+       __attribute__((interrupt(\"XXX;YYY;id=ZZZ\")))\n+       __attribute__((exception(\"XXX;YYY;id=ZZZ\")))\n+       __attribute__((reset(\"vectors=XXX;nmi_func=YYY;warm_func=ZZZ\")))\n+\n+   We provide several functions to parse the strings.  */\n+\n+static void\n+nds32_interrupt_attribute_parse_string (const char *original_str,\n+\t\t\t\t\tconst char *func_name,\n+\t\t\t\t\tunsigned int s_level)\n+{\n+  char target_str[100];\n+  enum nds32_isr_save_reg save_reg;\n+  enum nds32_isr_nested_type nested_type;\n+\n+  char *save_all_regs_str, *save_caller_regs_str;\n+  char *nested_str, *not_nested_str, *ready_nested_str, *critical_str;\n+  char *id_str, *value_str;\n+\n+  /* Copy original string into a character array so that\n+     the string APIs can handle it.  */\n+  strcpy (target_str, original_str);\n+\n+  /* 1. Detect 'save_all_regs'    : NDS32_SAVE_ALL\n+\t       'save_caller_regs' : NDS32_PARTIAL_SAVE */\n+  save_all_regs_str    = strstr (target_str, \"save_all_regs\");\n+  save_caller_regs_str = strstr (target_str, \"save_caller_regs\");\n+\n+  /* Note that if no argument is found,\n+     use NDS32_PARTIAL_SAVE by default.  */\n+  if (save_all_regs_str)\n+    save_reg = NDS32_SAVE_ALL;\n+  else if (save_caller_regs_str)\n+    save_reg = NDS32_PARTIAL_SAVE;\n+  else\n+    save_reg = NDS32_PARTIAL_SAVE;\n+\n+  /* 2. Detect 'nested'       : NDS32_NESTED\n+\t       'not_nested'   : NDS32_NOT_NESTED\n+\t       'ready_nested' : NDS32_NESTED_READY\n+\t       'critical'     : NDS32_CRITICAL */\n+  nested_str       = strstr (target_str, \"nested\");\n+  not_nested_str   = strstr (target_str, \"not_nested\");\n+  ready_nested_str = strstr (target_str, \"ready_nested\");\n+  critical_str     = strstr (target_str, \"critical\");\n+\n+  /* Note that if no argument is found,\n+     use NDS32_NOT_NESTED by default.\n+     Also, since 'not_nested' and 'ready_nested' both contains\n+     'nested' string, we check 'nested' with lowest priority.  */\n+  if (not_nested_str)\n+    nested_type = NDS32_NOT_NESTED;\n+  else if (ready_nested_str)\n+    nested_type = NDS32_NESTED_READY;\n+  else if (nested_str)\n+    nested_type = NDS32_NESTED;\n+  else if (critical_str)\n+    nested_type = NDS32_CRITICAL;\n+  else\n+    nested_type = NDS32_NOT_NESTED;\n+\n+  /* 3. Traverse each id value and set corresponding information.  */\n+  id_str = strstr (target_str, \"id=\");\n+\n+  /* If user forgets to assign 'id', issue an error message.  */\n+  if (id_str == NULL)\n+    error (\"require id argument in the string\");\n+  /* Extract the value_str first.  */\n+  id_str    = strtok (id_str, \"=\");\n+  value_str = strtok (NULL, \";\");\n+\n+  /* Pick up the first id value token.  */\n+  value_str = strtok (value_str, \",\");\n+  while (value_str != NULL)\n+    {\n+      int i;\n+      i = atoi (value_str);\n+\n+      /* For interrupt(0..63), the actual vector number is (9..72).  */\n+      i = i + 9;\n+      if (i < 9 || i > 72)\n+\terror (\"invalid id value for interrupt attribute\");\n+\n+      /* Setup nds32_isr_vectors[] array.  */\n+      nds32_isr_vectors[i].category = NDS32_ISR_INTERRUPT;\n+      strcpy (nds32_isr_vectors[i].func_name, func_name);\n+      nds32_isr_vectors[i].save_reg = save_reg;\n+      nds32_isr_vectors[i].nested_type = nested_type;\n+      nds32_isr_vectors[i].security_level = s_level;\n+\n+      /* Fetch next token.  */\n+      value_str = strtok (NULL, \",\");\n+    }\n+\n+  return;\n+}\n+\n+static void\n+nds32_exception_attribute_parse_string (const char *original_str,\n+\t\t\t\t\tconst char *func_name,\n+\t\t\t\t\tunsigned int s_level)\n+{\n+  char target_str[100];\n+  enum nds32_isr_save_reg save_reg;\n+  enum nds32_isr_nested_type nested_type;\n+\n+  char *save_all_regs_str, *save_caller_regs_str;\n+  char *nested_str, *not_nested_str, *ready_nested_str, *critical_str;\n+  char *id_str, *value_str;\n+\n+  /* Copy original string into a character array so that\n+     the string APIs can handle it.  */\n+  strcpy (target_str, original_str);\n+\n+  /* 1. Detect 'save_all_regs'    : NDS32_SAVE_ALL\n+\t       'save_caller_regs' : NDS32_PARTIAL_SAVE */\n+  save_all_regs_str    = strstr (target_str, \"save_all_regs\");\n+  save_caller_regs_str = strstr (target_str, \"save_caller_regs\");\n+\n+  /* Note that if no argument is found,\n+     use NDS32_PARTIAL_SAVE by default.  */\n+  if (save_all_regs_str)\n+    save_reg = NDS32_SAVE_ALL;\n+  else if (save_caller_regs_str)\n+    save_reg = NDS32_PARTIAL_SAVE;\n+  else\n+    save_reg = NDS32_PARTIAL_SAVE;\n+\n+  /* 2. Detect 'nested'       : NDS32_NESTED\n+\t       'not_nested'   : NDS32_NOT_NESTED\n+\t       'ready_nested' : NDS32_NESTED_READY\n+\t       'critical'     : NDS32_CRITICAL */\n+  nested_str       = strstr (target_str, \"nested\");\n+  not_nested_str   = strstr (target_str, \"not_nested\");\n+  ready_nested_str = strstr (target_str, \"ready_nested\");\n+  critical_str     = strstr (target_str, \"critical\");\n+\n+  /* Note that if no argument is found,\n+     use NDS32_NOT_NESTED by default.\n+     Also, since 'not_nested' and 'ready_nested' both contains\n+     'nested' string, we check 'nested' with lowest priority.  */\n+  if (not_nested_str)\n+    nested_type = NDS32_NOT_NESTED;\n+  else if (ready_nested_str)\n+    nested_type = NDS32_NESTED_READY;\n+  else if (nested_str)\n+    nested_type = NDS32_NESTED;\n+  else if (critical_str)\n+    nested_type = NDS32_CRITICAL;\n+  else\n+    nested_type = NDS32_NOT_NESTED;\n+\n+  /* 3. Traverse each id value and set corresponding information.  */\n+  id_str = strstr (target_str, \"id=\");\n+\n+  /* If user forgets to assign 'id', issue an error message.  */\n+  if (id_str == NULL)\n+    error (\"require id argument in the string\");\n+  /* Extract the value_str first.  */\n+  id_str    = strtok (id_str, \"=\");\n+  value_str = strtok (NULL, \";\");\n+\n+  /* Pick up the first id value token.  */\n+  value_str = strtok (value_str, \",\");\n+  while (value_str != NULL)\n+    {\n+      int i;\n+      i = atoi (value_str);\n+\n+      /* For exception(1..8), the actual vector number is (1..8).  */\n+      if (i < 1 || i > 8)\n+\terror (\"invalid id value for exception attribute\");\n+\n+      /* Setup nds32_isr_vectors[] array.  */\n+      nds32_isr_vectors[i].category = NDS32_ISR_EXCEPTION;\n+      strcpy (nds32_isr_vectors[i].func_name, func_name);\n+      nds32_isr_vectors[i].save_reg = save_reg;\n+      nds32_isr_vectors[i].nested_type = nested_type;\n+      nds32_isr_vectors[i].security_level = s_level;\n+\n+      /* Fetch next token.  */\n+      value_str = strtok (NULL, \",\");\n+    }\n+\n+  return;\n+}\n+\n+static void\n+nds32_reset_attribute_parse_string (const char *original_str,\n+\t\t\t\t    const char *func_name)\n+{\n+  char target_str[100];\n+  char *vectors_str, *nmi_str, *warm_str, *value_str;\n+\n+  /* Deal with reset attribute.  Its vector number is always 0.  */\n+  nds32_isr_vectors[0].category = NDS32_ISR_RESET;\n+\n+\n+  /* 1. Parse 'vectors=XXXX'.  */\n+\n+  /* Copy original string into a character array so that\n+     the string APIs can handle it.  */\n+  strcpy (target_str, original_str);\n+  vectors_str = strstr (target_str, \"vectors=\");\n+  /* The total vectors = interrupt + exception numbers + reset.\n+     There are 8 exception and 1 reset in nds32 architecture.\n+     If user forgets to assign 'vectors', user default 16 interrupts.  */\n+  if (vectors_str != NULL)\n+    {\n+      /* Extract the value_str.  */\n+      vectors_str = strtok (vectors_str, \"=\");\n+      value_str  = strtok (NULL, \";\");\n+      nds32_isr_vectors[0].total_n_vectors = atoi (value_str) + 8 + 1;\n+    }\n+  else\n+    nds32_isr_vectors[0].total_n_vectors = 16 + 8 + 1;\n+  strcpy (nds32_isr_vectors[0].func_name, func_name);\n+\n+\n+  /* 2. Parse 'nmi_func=YYYY'.  */\n+\n+  /* Copy original string into a character array so that\n+     the string APIs can handle it.  */\n+  strcpy (target_str, original_str);\n+  nmi_str = strstr (target_str, \"nmi_func=\");\n+  if (nmi_str != NULL)\n+    {\n+      /* Extract the value_str.  */\n+      nmi_str = strtok (nmi_str, \"=\");\n+      value_str  = strtok (NULL, \";\");\n+      strcpy (nds32_isr_vectors[0].nmi_name, value_str);\n+    }\n+\n+  /* 3. Parse 'warm_func=ZZZZ'.  */\n+\n+  /* Copy original string into a character array so that\n+     the string APIs can handle it.  */\n+  strcpy (target_str, original_str);\n+  warm_str = strstr (target_str, \"warm_func=\");\n+  if (warm_str != NULL)\n+    {\n+      /* Extract the value_str.  */\n+      warm_str = strtok (warm_str, \"=\");\n+      value_str  = strtok (NULL, \";\");\n+      strcpy (nds32_isr_vectors[0].warm_name, value_str);\n+    }\n+\n+  return;\n+}\n+/* ------------------------------------------------------------- */\n \n /* A helper function to emit section head template.  */\n static void\n@@ -79,6 +332,15 @@ nds32_emit_isr_jmptbl_section (int vector_id)\n   char section_name[100];\n   char symbol_name[100];\n \n+  /* A critical isr does not need jump table section because\n+     its behavior is not performed by two-level handler.  */\n+  if (nds32_isr_vectors[vector_id].nested_type == NDS32_CRITICAL)\n+    {\n+      fprintf (asm_out_file, \"\\t! The vector %02d is a critical isr !\\n\",\n+\t\t\t     vector_id);\n+      return;\n+    }\n+\n   /* Prepare jmptbl section and symbol name.  */\n   snprintf (section_name, sizeof (section_name),\n \t    \".nds32_jmptbl.%02d\", vector_id);\n@@ -99,7 +361,6 @@ nds32_emit_isr_vector_section (int vector_id)\n   const char *c_str = \"CATEGORY\";\n   const char *sr_str = \"SR\";\n   const char *nt_str = \"NT\";\n-  const char *vs_str = \"VS\";\n   char first_level_handler_name[100];\n   char section_name[100];\n   char symbol_name[100];\n@@ -147,30 +408,47 @@ nds32_emit_isr_vector_section (int vector_id)\n     case NDS32_NESTED_READY:\n       nt_str = \"nr\";\n       break;\n+    case NDS32_CRITICAL:\n+      /* The critical isr is not performed by two-level handler.  */\n+      nt_str = \"\";\n+      break;\n     }\n \n-  /* Currently we have 4-byte or 16-byte size for each vector.\n-     If it is 4-byte, the first level handler name has suffix string \"_4b\".  */\n-  vs_str = (nds32_isr_vector_size == 4) ? \"_4b\" : \"\";\n-\n   /* Now we can create first level handler name.  */\n-  snprintf (first_level_handler_name, sizeof (first_level_handler_name),\n-\t    \"_nds32_%s_%s_%s%s\", c_str, sr_str, nt_str, vs_str);\n+  if (nds32_isr_vectors[vector_id].security_level == 0)\n+    {\n+      /* For security level 0, use normal first level handler name.  */\n+      snprintf (first_level_handler_name, sizeof (first_level_handler_name),\n+\t\t\"_nds32_%s_%s_%s\", c_str, sr_str, nt_str);\n+    }\n+  else\n+    {\n+      /* For security level 1-3, use corresponding spl_1, spl_2, or spl_3.  */\n+      snprintf (first_level_handler_name, sizeof (first_level_handler_name),\n+\t\t\"_nds32_spl_%d\", nds32_isr_vectors[vector_id].security_level);\n+    }\n \n   /* Prepare vector section and symbol name.  */\n   snprintf (section_name, sizeof (section_name),\n \t    \".nds32_vector.%02d\", vector_id);\n   snprintf (symbol_name, sizeof (symbol_name),\n-\t    \"_nds32_vector_%02d%s\", vector_id, vs_str);\n+\t    \"_nds32_vector_%02d\", vector_id);\n \n \n   /* Everything is ready.  We can start emit vector section content.  */\n   nds32_emit_section_head_template (section_name, symbol_name,\n \t\t\t\t    floor_log2 (nds32_isr_vector_size), false);\n \n-  /* According to the vector size, the instructions in the\n-     vector section may be different.  */\n-  if (nds32_isr_vector_size == 4)\n+  /* First we check if it is a critical isr.\n+     If so, jump to user handler directly; otherwise, the instructions\n+     in the vector section may be different according to the vector size.  */\n+  if (nds32_isr_vectors[vector_id].nested_type == NDS32_CRITICAL)\n+    {\n+      /* This block is for critical isr.  Jump to user handler directly.  */\n+      fprintf (asm_out_file, \"\\tj\\t%s ! jump to user handler directly\\n\",\n+\t\t\t     nds32_isr_vectors[vector_id].func_name);\n+    }\n+  else if (nds32_isr_vector_size == 4)\n     {\n       /* This block is for 4-byte vector size.\n \t Hardware $VID support is necessary and only one instruction\n@@ -239,13 +517,11 @@ nds32_emit_isr_reset_content (void)\n {\n   unsigned int i;\n   unsigned int total_n_vectors;\n-  const char *vs_str;\n   char reset_handler_name[100];\n   char section_name[100];\n   char symbol_name[100];\n \n   total_n_vectors = nds32_isr_vectors[0].total_n_vectors;\n-  vs_str = (nds32_isr_vector_size == 4) ? \"_4b\" : \"\";\n \n   fprintf (asm_out_file, \"\\t! RESET HANDLER CONTENT - BEGIN !\\n\");\n \n@@ -261,7 +537,7 @@ nds32_emit_isr_reset_content (void)\n   /* Emit vector references.  */\n   fprintf (asm_out_file, \"\\t ! references to vector section entries\\n\");\n   for (i = 0; i < total_n_vectors; i++)\n-    fprintf (asm_out_file, \"\\t.word\\t_nds32_vector_%02d%s\\n\", i, vs_str);\n+    fprintf (asm_out_file, \"\\t.word\\t_nds32_vector_%02d\\n\", i);\n \n   /* Emit jmptbl_00 section.  */\n   snprintf (section_name, sizeof (section_name), \".nds32_jmptbl.00\");\n@@ -275,9 +551,9 @@ nds32_emit_isr_reset_content (void)\n \n   /* Emit vector_00 section.  */\n   snprintf (section_name, sizeof (section_name), \".nds32_vector.00\");\n-  snprintf (symbol_name, sizeof (symbol_name), \"_nds32_vector_00%s\", vs_str);\n+  snprintf (symbol_name, sizeof (symbol_name), \"_nds32_vector_00\");\n   snprintf (reset_handler_name, sizeof (reset_handler_name),\n-\t    \"_nds32_reset%s\", vs_str);\n+\t    \"_nds32_reset\");\n \n   fprintf (asm_out_file, \"\\t! ....................................\\n\");\n   nds32_emit_section_head_template (section_name, symbol_name,\n@@ -323,12 +599,12 @@ void\n nds32_check_isr_attrs_conflict (tree func_decl, tree func_attrs)\n {\n   int save_all_p, partial_save_p;\n-  int nested_p, not_nested_p, nested_ready_p;\n+  int nested_p, not_nested_p, nested_ready_p, critical_p;\n   int intr_p, excp_p, reset_p;\n \n   /* Initialize variables.  */\n   save_all_p = partial_save_p = 0;\n-  nested_p = not_nested_p = nested_ready_p = 0;\n+  nested_p = not_nested_p = nested_ready_p = critical_p = 0;\n   intr_p = excp_p = reset_p = 0;\n \n   /* We must check at MOST one attribute to set save-reg.  */\n@@ -347,8 +623,10 @@ nds32_check_isr_attrs_conflict (tree func_decl, tree func_attrs)\n     not_nested_p = 1;\n   if (lookup_attribute (\"nested_ready\", func_attrs))\n     nested_ready_p = 1;\n+  if (lookup_attribute (\"critical\", func_attrs))\n+    critical_p = 1;\n \n-  if ((nested_p + not_nested_p + nested_ready_p) > 1)\n+  if ((nested_p + not_nested_p + nested_ready_p + critical_p) > 1)\n     error (\"multiple nested types attributes to function %qD\", func_decl);\n \n   /* We must check at MOST one attribute to\n@@ -362,6 +640,17 @@ nds32_check_isr_attrs_conflict (tree func_decl, tree func_attrs)\n \n   if ((intr_p + excp_p + reset_p) > 1)\n     error (\"multiple interrupt attributes to function %qD\", func_decl);\n+\n+  /* Do not allow isr attributes under linux toolchain.  */\n+  if (TARGET_LINUX_ABI && intr_p)\n+      error (\"cannot use interrupt attributes to function %qD \"\n+\t     \"under linux toolchain\", func_decl);\n+  if (TARGET_LINUX_ABI && excp_p)\n+      error (\"cannot use exception attributes to function %qD \"\n+\t     \"under linux toolchain\", func_decl);\n+  if (TARGET_LINUX_ABI && reset_p)\n+      error (\"cannot use reset attributes to function %qD \"\n+\t     \"under linux toolchain\", func_decl);\n }\n \n /* Function to construct isr vectors information array.\n@@ -373,15 +662,21 @@ nds32_construct_isr_vectors_information (tree func_attrs,\n \t\t\t\t\t const char *func_name)\n {\n   tree save_all, partial_save;\n-  tree nested, not_nested, nested_ready;\n+  tree nested, not_nested, nested_ready, critical;\n   tree intr, excp, reset;\n \n+  tree secure;\n+  tree security_level_list;\n+  tree security_level;\n+  unsigned int s_level;\n+\n   save_all     = lookup_attribute (\"save_all\", func_attrs);\n   partial_save = lookup_attribute (\"partial_save\", func_attrs);\n \n   nested       = lookup_attribute (\"nested\", func_attrs);\n   not_nested   = lookup_attribute (\"not_nested\", func_attrs);\n   nested_ready = lookup_attribute (\"nested_ready\", func_attrs);\n+  critical     = lookup_attribute (\"critical\", func_attrs);\n \n   intr  = lookup_attribute (\"interrupt\", func_attrs);\n   excp  = lookup_attribute (\"exception\", func_attrs);\n@@ -391,6 +686,63 @@ nds32_construct_isr_vectors_information (tree func_attrs,\n   if (!intr && !excp && !reset)\n     return;\n \n+  /* At first, we need to retrieve security level.  */\n+  secure = lookup_attribute (\"secure\", func_attrs);\n+  if (secure != NULL)\n+    {\n+      security_level_list = TREE_VALUE (secure);\n+      security_level = TREE_VALUE (security_level_list);\n+      s_level = TREE_INT_CST_LOW (security_level);\n+    }\n+  else\n+    {\n+      /* If there is no secure attribute, the security level is set by\n+\t nds32_isr_secure_level, which is controlled by -misr-secure=X option.\n+\t By default nds32_isr_secure_level should be 0.  */\n+      s_level = nds32_isr_secure_level;\n+    }\n+\n+  /* ------------------------------------------------------------- */\n+  /* FIXME:\n+     FOR BACKWARD COMPATIBILITY, we need to support following patterns:\n+\n+\t __attribute__((interrupt(\"XXX;YYY;id=ZZZ\")))\n+\t __attribute__((exception(\"XXX;YYY;id=ZZZ\")))\n+\t __attribute__((reset(\"vectors=XXX;nmi_func=YYY;warm_func=ZZZ\")))\n+\n+     If interrupt/exception/reset appears and its argument is a\n+     STRING_CST, we will parse string with some auxiliary functions\n+     which set necessary isr information in the nds32_isr_vectors[] array.\n+     After that, we can return immediately to avoid new-syntax isr\n+     information construction.  */\n+  if (intr != NULL_TREE\n+      && TREE_CODE (TREE_VALUE (TREE_VALUE (intr))) == STRING_CST)\n+    {\n+      tree string_arg = TREE_VALUE (TREE_VALUE (intr));\n+      nds32_interrupt_attribute_parse_string (TREE_STRING_POINTER (string_arg),\n+\t\t\t\t\t      func_name,\n+\t\t\t\t\t      s_level);\n+      return;\n+    }\n+  if (excp != NULL_TREE\n+      && TREE_CODE (TREE_VALUE (TREE_VALUE (excp))) == STRING_CST)\n+    {\n+      tree string_arg = TREE_VALUE (TREE_VALUE (excp));\n+      nds32_exception_attribute_parse_string (TREE_STRING_POINTER (string_arg),\n+\t\t\t\t\t      func_name,\n+\t\t\t\t\t      s_level);\n+      return;\n+    }\n+  if (reset != NULL_TREE\n+      && TREE_CODE (TREE_VALUE (TREE_VALUE (reset))) == STRING_CST)\n+    {\n+      tree string_arg = TREE_VALUE (TREE_VALUE (reset));\n+      nds32_reset_attribute_parse_string (TREE_STRING_POINTER (string_arg),\n+\t\t\t\t\t  func_name);\n+      return;\n+    }\n+  /* ------------------------------------------------------------- */\n+\n   /* If we are here, either we have interrupt/exception,\n      or reset attribute.  */\n   if (intr || excp)\n@@ -417,6 +769,9 @@ nds32_construct_isr_vectors_information (tree func_attrs,\n \t  /* Add vector_number_offset to get actual vector number.  */\n \t  vector_id = TREE_INT_CST_LOW (id) + vector_number_offset;\n \n+\t  /* Set security level.  */\n+\t  nds32_isr_vectors[vector_id].security_level = s_level;\n+\n \t  /* Enable corresponding vector and set function name.  */\n \t  nds32_isr_vectors[vector_id].category = (intr)\n \t\t\t\t\t\t  ? (NDS32_ISR_INTERRUPT)\n@@ -436,6 +791,8 @@ nds32_construct_isr_vectors_information (tree func_attrs,\n \t    nds32_isr_vectors[vector_id].nested_type = NDS32_NOT_NESTED;\n \t  else if (nested_ready)\n \t    nds32_isr_vectors[vector_id].nested_type = NDS32_NESTED_READY;\n+\t  else if (critical)\n+\t    nds32_isr_vectors[vector_id].nested_type = NDS32_CRITICAL;\n \n \t  /* Advance to next id.  */\n \t  id_list = TREE_CHAIN (id_list);\n@@ -492,7 +849,6 @@ nds32_construct_isr_vectors_information (tree func_attrs,\n     }\n }\n \n-/* A helper function to handle isr stuff at the beginning of asm file.  */\n void\n nds32_asm_file_start_for_isr (void)\n {\n@@ -505,15 +861,14 @@ nds32_asm_file_start_for_isr (void)\n       strcpy (nds32_isr_vectors[i].func_name, \"\");\n       nds32_isr_vectors[i].save_reg = NDS32_PARTIAL_SAVE;\n       nds32_isr_vectors[i].nested_type = NDS32_NOT_NESTED;\n+      nds32_isr_vectors[i].security_level = 0;\n       nds32_isr_vectors[i].total_n_vectors = 0;\n       strcpy (nds32_isr_vectors[i].nmi_name, \"\");\n       strcpy (nds32_isr_vectors[i].warm_name, \"\");\n     }\n }\n \n-/* A helper function to handle isr stuff at the end of asm file.  */\n-void\n-nds32_asm_file_end_for_isr (void)\n+void nds32_asm_file_end_for_isr (void)\n {\n   int i;\n \n@@ -547,6 +902,8 @@ nds32_asm_file_end_for_isr (void)\n \t  /* Found one vector which is interupt or exception.\n \t     Output its jmptbl and vector section content.  */\n \t  fprintf (asm_out_file, \"\\t! interrupt/exception vector %02d\\n\", i);\n+\t  fprintf (asm_out_file, \"\\t! security level: %d\\n\",\n+\t\t   nds32_isr_vectors[i].security_level);\n \t  fprintf (asm_out_file, \"\\t! ------------------------------------\\n\");\n \t  nds32_emit_isr_jmptbl_section (i);\n \t  fprintf (asm_out_file, \"\\t! ....................................\\n\");\n@@ -580,4 +937,65 @@ nds32_isr_function_p (tree func)\n \t  || (t_reset != NULL_TREE));\n }\n \n-/* ------------------------------------------------------------------------ */\n+/* Return true if FUNC is a isr function with critical attribute.  */\n+bool\n+nds32_isr_function_critical_p (tree func)\n+{\n+  tree t_intr;\n+  tree t_excp;\n+  tree t_critical;\n+\n+  tree attrs;\n+\n+  if (TREE_CODE (func) != FUNCTION_DECL)\n+    abort ();\n+\n+  attrs = DECL_ATTRIBUTES (func);\n+\n+  t_intr  = lookup_attribute (\"interrupt\", attrs);\n+  t_excp  = lookup_attribute (\"exception\", attrs);\n+\n+  t_critical = lookup_attribute (\"critical\", attrs);\n+\n+  /* If both interrupt and exception attribute does not appear,\n+     we can return false immediately.  */\n+  if ((t_intr == NULL_TREE) && (t_excp == NULL_TREE))\n+    return false;\n+\n+  /* Here we can guarantee either interrupt or ecxception attribute\n+     does exist, so further check critical attribute.\n+     If it also appears, we can return true.  */\n+  if (t_critical != NULL_TREE)\n+    return true;\n+\n+  /* ------------------------------------------------------------- */\n+  /* FIXME:\n+     FOR BACKWARD COMPATIBILITY, we need to handle string type.\n+     If the string 'critical' appears in the interrupt/exception\n+     string argument, we can return true.  */\n+  if (t_intr != NULL_TREE || t_excp != NULL_TREE)\n+    {\n+      char target_str[100];\n+      char *critical_str;\n+      tree t_check;\n+      tree string_arg;\n+\n+      t_check = t_intr ? t_intr : t_excp;\n+      if (TREE_CODE (TREE_VALUE (TREE_VALUE (t_check))) == STRING_CST)\n+\t{\n+\t  string_arg = TREE_VALUE (TREE_VALUE (t_check));\n+\t  strcpy (target_str, TREE_STRING_POINTER (string_arg));\n+\t  critical_str = strstr (target_str, \"critical\");\n+\n+\t  /* Found 'critical' string, so return true.  */\n+\t  if (critical_str)\n+\t    return true;\n+\t}\n+    }\n+  /* ------------------------------------------------------------- */\n+\n+  /* Other cases, this isr function is not critical type.  */\n+  return false;\n+}\n+\n+/* ------------------------------------------------------------- */"}, {"sha": "5c4d233b4b9ba83e07ebf83826d2aa6962db57e1", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -307,6 +307,7 @@ extern void nds32_construct_isr_vectors_information (tree, const char *);\n extern void nds32_asm_file_start_for_isr (void);\n extern void nds32_asm_file_end_for_isr (void);\n extern bool nds32_isr_function_p (tree);\n+extern bool nds32_isr_function_critical_p (tree);\n \n /* Auxiliary functions for cost calculation.  */\n "}, {"sha": "f68341e1fcda02ad9c5bf945dced6f734f41b442", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -305,6 +305,7 @@ static const struct attribute_spec nds32_attribute_table[] =\n   { \"nested\",       0,  0, false, false, false, false, NULL, NULL },\n   { \"not_nested\",   0,  0, false, false, false, false, NULL, NULL },\n   { \"nested_ready\", 0,  0, false, false, false, false, NULL, NULL },\n+  { \"critical\",     0,  0, false, false, false, false, NULL, NULL },\n \n   /* The attributes describing isr register save scheme.  */\n   { \"save_all\",     0,  0, false, false, false, false, NULL, NULL },\n@@ -314,6 +315,9 @@ static const struct attribute_spec nds32_attribute_table[] =\n   { \"nmi\",          1,  1, false, false, false, false, NULL, NULL },\n   { \"warm\",         1,  1, false, false, false, false, NULL, NULL },\n \n+  /* The attributes describing isr security level. */\n+  { \"secure\",       1,  1, false, false, false, false, NULL, NULL },\n+\n   /* The attribute telling no prologue/epilogue.  */\n   { \"naked\",        0,  0, false, false, false, false, NULL, NULL },\n \n@@ -518,7 +522,7 @@ nds32_compute_stack_frame (void)\n     }\n \n   /* Check if this function can omit prologue/epilogue code fragment.\n-     If there is 'no_prologue'/'naked' attribute in this function,\n+     If there is 'no_prologue'/'naked'/'secure' attribute in this function,\n      we can set 'naked_p' flag to indicate that\n      we do not have to generate prologue/epilogue.\n      Or, if all the following conditions succeed,\n@@ -533,6 +537,7 @@ nds32_compute_stack_frame (void)\n \t\t    we do not need to adjust $sp.  */\n   if (lookup_attribute (\"no_prologue\", DECL_ATTRIBUTES (current_function_decl))\n       || lookup_attribute (\"naked\", DECL_ATTRIBUTES (current_function_decl))\n+      || lookup_attribute (\"secure\", DECL_ATTRIBUTES (current_function_decl))\n       || (cfun->machine->callee_saved_first_gpr_regno == SP_REGNUM\n \t  && cfun->machine->callee_saved_last_gpr_regno == SP_REGNUM\n \t  && cfun->machine->callee_saved_first_fpr_regno == SP_REGNUM\n@@ -2307,14 +2312,17 @@ nds32_function_ok_for_sibcall (tree decl,\n \n   /* 1. Do not apply sibling call if -mv3push is enabled,\n \tbecause pop25 instruction also represents return behavior.\n-     2. If this function is a variadic function, do not apply sibling call\n+     2. If this function is a isr function, do not apply sibling call\n+\tbecause it may perform the behavior that user does not expect.\n+     3. If this function is a variadic function, do not apply sibling call\n \tbecause the stack layout may be a mess.\n-     3. We don't want to apply sibling call optimization for indirect\n+     4. We don't want to apply sibling call optimization for indirect\n \tsibcall because the pop behavior in epilogue may pollute the\n \tcontent of caller-saved regsiter when the register is used for\n \tindirect sibcall.\n-     4. In pic mode, it may use some registers for PLT call.  */\n+     5. In pic mode, it may use some registers for PLT call.  */\n   return (!TARGET_V3PUSH\n+\t  && !nds32_isr_function_p (current_function_decl)\n \t  && (cfun->machine->va_args_size == 0)\n \t  && decl\n \t  && !flag_pic);\n@@ -3968,6 +3976,38 @@ nds32_insert_attributes (tree decl, tree *attributes)\n       excp  = lookup_attribute (\"exception\", func_attrs);\n       reset = lookup_attribute (\"reset\", func_attrs);\n \n+      /* The following code may use attribute arguments.  If there is no\n+\t argument from source code, it will cause segmentation fault.\n+\t Therefore, return dircetly and report error message later.  */\n+      if ((intr && TREE_VALUE (intr) == NULL)\n+\t  || (excp && TREE_VALUE (excp) == NULL)\n+\t  || (reset && TREE_VALUE (reset) == NULL))\n+\treturn;\n+\n+      /* ------------------------------------------------------------- */\n+      /* FIXME:\n+\t FOR BACKWARD COMPATIBILITY, we need to support following patterns:\n+\n+\t     __attribute__((interrupt(\"XXX;YYY;id=ZZZ\")))\n+\t     __attribute__((exception(\"XXX;YYY;id=ZZZ\")))\n+\t     __attribute__((reset(\"vectors=XXX;nmi_func=YYY;warm_func=ZZZ\")))\n+\n+\t If interrupt/exception/reset appears and its argument is a\n+\t STRING_CST, we will use other functions to parse string in the\n+\t nds32_construct_isr_vectors_information() and then set necessary\n+\t isr information in the nds32_isr_vectors[] array.  Here we can\n+\t just return immediately to avoid new-syntax checking.  */\n+      if (intr != NULL_TREE\n+\t  && TREE_CODE (TREE_VALUE (TREE_VALUE (intr))) == STRING_CST)\n+\treturn;\n+      if (excp != NULL_TREE\n+\t  && TREE_CODE (TREE_VALUE (TREE_VALUE (excp))) == STRING_CST)\n+\treturn;\n+      if (reset != NULL_TREE\n+\t  && TREE_CODE (TREE_VALUE (TREE_VALUE (reset))) == STRING_CST)\n+\treturn;\n+      /* ------------------------------------------------------------- */\n+\n       if (intr || excp)\n \t{\n \t  /* Deal with interrupt/exception.  */\n@@ -4211,6 +4251,16 @@ nds32_cpu_cpp_builtins(struct cpp_reader *pfile)\n   builtin_define (\"__nds32__\");\n   builtin_define (\"__NDS32__\");\n \n+  /* We need to provide builtin macro to describe the size of\n+     each vector for interrupt handler under elf toolchain.  */\n+  if (!TARGET_LINUX_ABI)\n+    {\n+      if (TARGET_ISR_VECTOR_SIZE_4_BYTE)\n+\tbuiltin_define (\"__NDS32_ISR_VECTOR_SIZE_4__\");\n+      else\n+\tbuiltin_define (\"__NDS32_ISR_VECTOR_SIZE_16__\");\n+    }\n+\n   if (TARGET_HARD_FLOAT)\n     builtin_define (\"__NDS32_ABI_2FP_PLUS__\");\n   else"}, {"sha": "cec15bed8ca6c3e39af25e7a06ca6b055b3f789d", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -367,7 +367,8 @@ enum nds32_isr_nested_type\n {\n   NDS32_NESTED,\n   NDS32_NOT_NESTED,\n-  NDS32_NESTED_READY\n+  NDS32_NESTED_READY,\n+  NDS32_CRITICAL\n };\n \n /* Define structure to record isr information.\n@@ -395,6 +396,13 @@ struct nds32_isr_info\n      unless user specifies attribute to change it.  */\n   enum nds32_isr_nested_type nested_type;\n \n+  /* Secure isr level.\n+     Currently we have 0-3 security level.\n+     It should be set to 0 by default.\n+     For security processors, this is determined by secure\n+     attribute or compiler options.  */\n+  unsigned int security_level;\n+\n   /* Total vectors.\n      The total vectors = interrupt + exception numbers + reset.\n      It should be set to 0 by default.\n@@ -849,8 +857,10 @@ enum nds32_builtins\n \n /* ------------------------------------------------------------------------ */\n \n-#define TARGET_ISA_V2   (nds32_arch_option == ARCH_V2)\n+#define TARGET_ISR_VECTOR_SIZE_4_BYTE \\\n+  (nds32_isr_vector_size == 4)\n \n+#define TARGET_ISA_V2   (nds32_arch_option == ARCH_V2)\n #define TARGET_ISA_V3 \\\n   (nds32_arch_option == ARCH_V3 \\\n    || nds32_arch_option == ARCH_V3J \\"}, {"sha": "f5349d7cc762fadff7f13b85e593a5d31dc57518", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -1993,6 +1993,9 @@\n   [(simple_return)]\n   \"\"\n {\n+  if (nds32_isr_function_critical_p (current_function_decl))\n+    return \"iret\";\n+\n   if (TARGET_16_BIT)\n     return \"ret5\";\n   else\n@@ -2001,9 +2004,11 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"enabled\" \"yes\")\n    (set (attr \"length\")\n-\t(if_then_else (match_test \"TARGET_16_BIT\")\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)))])\n+\t(if_then_else (match_test \"nds32_isr_function_critical_p (current_function_decl)\")\n+\t\t      (const_int 4)\n+\t\t      (if_then_else (match_test \"TARGET_16_BIT\")\n+\t\t\t\t    (const_int 2)\n+\t\t\t\t    (const_int 4))))])\n \n \n ;; ----------------------------------------------------------------------------"}, {"sha": "d73f5af9dbc82437cf8460adbe53c37bdbaa8b10", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -158,6 +158,10 @@ misr-vector-size=\n Target RejectNegative Joined UInteger Var(nds32_isr_vector_size) Init(NDS32_DEFAULT_ISR_VECTOR_SIZE)\n Specify the size of each interrupt vector, which must be 4 or 16.\n \n+misr-secure=\n+Target RejectNegative Joined UInteger Var(nds32_isr_secure_level) Init(0)\n+Specify the security level of c-isr for the whole file.\n+\n mcache-block-size=\n Target RejectNegative Joined UInteger Var(nds32_cache_block_size) Init(NDS32_DEFAULT_CACHE_BLOCK_SIZE)\n Specify the size of each cache block, which must be a power of 2 between 4 and 512."}, {"sha": "1084ad0e471f243778fdeabf72703c5a9adf3097", "filename": "gcc/config/nds32/nds32_init.inc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32_init.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32_init.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_init.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * nds32_init.inc\n+ *\n+ * NDS32 architecture startup assembler header file\n+ *\n+ */\n+\n+.macro nds32_init\n+\n+\t! Initialize GP for data access\n+\tla      $gp, _SDA_BASE_\n+\n+#if defined(__NDS32_EXT_EX9__)\n+\t! Check HW for EX9\n+\tmfsr    $r0, $MSC_CFG\n+\tli      $r1, (1 << 24)\n+\tand     $r2, $r0, $r1\n+\tbeqz    $r2, 1f\n+\n+\t! Initialize the table base of EX9 instruction\n+\tla      $r0, _ITB_BASE_\n+\tmtusr   $r0, $ITB\n+1:\n+#endif\n+\n+#if defined(__NDS32_EXT_FPU_DP__) || defined(__NDS32_EXT_FPU_SP__)\n+\t! Enable FPU\n+\tmfsr    $r0, $FUCOP_CTL\n+\tori     $r0, $r0, #0x1\n+\tmtsr    $r0, $FUCOP_CTL\n+\tdsb\n+\n+\t! Enable denormalized flush-to-Zero mode\n+\tfmfcsr  $r0\n+\tori     $r0,$r0,#0x1000\n+\tfmtcsr  $r0\n+\tdsb\n+#endif\n+\n+\t! Initialize default stack pointer\n+\tla      $sp, _stack\n+\n+.endm"}, {"sha": "8ea58f951e12acb73ecfb649356f938f7052118f", "filename": "gcc/config/nds32/nds32_isr.h", "status": "added", "additions": 526, "deletions": 0, "changes": 526, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32_isr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/gcc%2Fconfig%2Fnds32%2Fnds32_isr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_isr.h?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -0,0 +1,526 @@\n+/* Intrinsic definitions of Andes NDS32 cpu for GNU compiler\n+   Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+   Contributed by Andes Technology Corporation.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _NDS32_ISR_H\n+#define _NDS32_ISR_H\n+\n+/* Attribute of a interrupt or exception handler:\n+\n+   NDS32_READY_NESTED: This handler is interruptible if user re-enable GIE bit.\n+   NDS32_NESTED      : This handler is interruptible.  This is not suitable\n+                       exception handler.\n+   NDS32_NOT_NESTED  : This handler is NOT interruptible.  Users have to do\n+                       some work if nested is wanted\n+   NDS32_CRITICAL    : This handler is critical ISR, which means it is small\n+                       and efficient.  */\n+#define NDS32_READY_NESTED   0\n+#define NDS32_NESTED         1\n+#define NDS32_NOT_NESTED     2\n+#define NDS32_CRITICAL       3\n+\n+/* Attribute of a interrupt or exception handler:\n+\n+   NDS32_SAVE_ALL_REGS    : Save all registers in a table.\n+   NDS32_SAVE_PARTIAL_REGS: Save partial registers.  */\n+#define NDS32_SAVE_CALLER_REGS   0\n+#define NDS32_SAVE_ALL_REGS      1\n+\n+/* There are two version of Register table for interrupt and exception handler,\n+   one for 16-register CPU the other for 32-register CPU.  These structures are\n+   used for context switching or system call handling.  The address of this\n+   data can be get from the input argument of the handler functions.\n+\n+   For system call handling, r0 to r5 are used to pass arguments.  If more\n+   arguments are used they are put into the stack and its starting address is\n+   in sp.  Return value of system call can be put into r0 and r1 upon exit from\n+   system call handler.  System call ID is in a system register and it can be\n+   fetched via intrinsic function.  For more information please read ABI and\n+   other related documents.\n+\n+   For context switching, at least 2 values need to saved in kernel.  One is\n+   IPC and the other is the stack address of current task.  Use intrinsic\n+   function to get IPC and  the input argument of the handler functions + 8 to\n+   get stack address of current task.  To do context switching, you replace\n+   new_sp with the stack address of new task and replace IPC system register\n+   with IPC of new task, then, just return from handler.  The context switching\n+   will happen.  */\n+\n+/* Register table for exception handler; 32-register version.  */\n+typedef struct\n+{\n+  int r0;\n+  int r1;\n+  int r2;\n+  int r3;\n+  int r4;\n+  int r5;\n+  int r6;\n+  int r7;\n+  int r8;\n+  int r9;\n+  int r10;\n+  int r11;\n+  int r12;\n+  int r13;\n+  int r14;\n+  int r15;\n+  int r16;\n+  int r17;\n+  int r18;\n+  int r19;\n+  int r20;\n+  int r21;\n+  int r22;\n+  int r23;\n+  int r24;\n+  int r25;\n+  int r26;\n+  int r27;\n+  int fp;\n+  int gp;\n+  int lp;\n+  int sp;\n+} NDS32_GPR32;\n+\n+/* Register table for exception handler; 16-register version.  */\n+typedef struct\n+{\n+  int r0;\n+  int r1;\n+  int r2;\n+  int r3;\n+  int r4;\n+  int r5;\n+  int r6;\n+  int r7;\n+  int r8;\n+  int r9;\n+  int r10;\n+  int r15;\n+  int fp;\n+  int gp;\n+  int lp;\n+  int sp;\n+} NDS32_GPR16;\n+\n+\n+/* Use NDS32_REG32_TAB or NDS32_REG16_TAB in your program to\n+   access register table.  */\n+typedef struct\n+{\n+  union\n+    {\n+      int          reg_a[32] ;\n+      NDS32_GPR32  reg_s ;\n+    } u ;\n+} NDS32_REG32_TAB;\n+\n+typedef struct\n+{\n+  union\n+    {\n+      int          reg_a[16] ;\n+      NDS32_GPR16  reg_s ;\n+    } u ;\n+} NDS32_REG16_TAB;\n+\n+typedef struct\n+{\n+  int    d0lo;\n+  int    d0hi;\n+  int    d1lo;\n+  int    d1hi;\n+} NDS32_DX_TAB;\n+\n+typedef struct\n+{\n+#ifdef __NDS32_EB__\n+  float    fsr0;\n+  float    fsr1;\n+  float    fsr2;\n+  float    fsr3;\n+  float    fsr4;\n+  float    fsr5;\n+  float    fsr6;\n+  float    fsr7;\n+#else\n+  float    fsr1;\n+  float    fsr0;\n+  float    fsr3;\n+  float    fsr2;\n+  float    fsr5;\n+  float    fsr4;\n+  float    fsr7;\n+  float    fsr6;\n+#endif\n+} NDS32_FSR8;\n+\n+typedef struct\n+{\n+  double   dsr0;\n+  double   dsr1;\n+  double   dsr2;\n+  double   dsr3;\n+} NDS32_DSR4;\n+\n+typedef struct\n+{\n+#ifdef __NDS32_EB__\n+  float    fsr0;\n+  float    fsr1;\n+  float    fsr2;\n+  float    fsr3;\n+  float    fsr4;\n+  float    fsr5;\n+  float    fsr6;\n+  float    fsr7;\n+  float    fsr8;\n+  float    fsr9;\n+  float    fsr10;\n+  float    fsr11;\n+  float    fsr12;\n+  float    fsr13;\n+  float    fsr14;\n+  float    fsr15;\n+#else\n+  float    fsr1;\n+  float    fsr0;\n+  float    fsr3;\n+  float    fsr2;\n+  float    fsr5;\n+  float    fsr4;\n+  float    fsr7;\n+  float    fsr6;\n+  float    fsr9;\n+  float    fsr8;\n+  float    fsr11;\n+  float    fsr10;\n+  float    fsr13;\n+  float    fsr12;\n+  float    fsr15;\n+  float    fsr14;\n+#endif\n+} NDS32_FSR16;\n+\n+typedef struct\n+{\n+  double   dsr0;\n+  double   dsr1;\n+  double   dsr2;\n+  double   dsr3;\n+  double   dsr4;\n+  double   dsr5;\n+  double   dsr6;\n+  double   dsr7;\n+} NDS32_DSR8;\n+\n+typedef struct\n+{\n+#ifdef __NDS32_EB__\n+  float    fsr0;\n+  float    fsr1;\n+  float    fsr2;\n+  float    fsr3;\n+  float    fsr4;\n+  float    fsr5;\n+  float    fsr6;\n+  float    fsr7;\n+  float    fsr8;\n+  float    fsr9;\n+  float    fsr10;\n+  float    fsr11;\n+  float    fsr12;\n+  float    fsr13;\n+  float    fsr14;\n+  float    fsr15;\n+  float    fsr16;\n+  float    fsr17;\n+  float    fsr18;\n+  float    fsr19;\n+  float    fsr20;\n+  float    fsr21;\n+  float    fsr22;\n+  float    fsr23;\n+  float    fsr24;\n+  float    fsr25;\n+  float    fsr26;\n+  float    fsr27;\n+  float    fsr28;\n+  float    fsr29;\n+  float    fsr30;\n+  float    fsr31;\n+#else\n+  float    fsr1;\n+  float    fsr0;\n+  float    fsr3;\n+  float    fsr2;\n+  float    fsr5;\n+  float    fsr4;\n+  float    fsr7;\n+  float    fsr6;\n+  float    fsr9;\n+  float    fsr8;\n+  float    fsr11;\n+  float    fsr10;\n+  float    fsr13;\n+  float    fsr12;\n+  float    fsr15;\n+  float    fsr14;\n+  float    fsr17;\n+  float    fsr16;\n+  float    fsr19;\n+  float    fsr18;\n+  float    fsr21;\n+  float    fsr20;\n+  float    fsr23;\n+  float    fsr22;\n+  float    fsr25;\n+  float    fsr24;\n+  float    fsr27;\n+  float    fsr26;\n+  float    fsr29;\n+  float    fsr28;\n+  float    fsr31;\n+  float    fsr30;\n+#endif\n+} NDS32_FSR32;\n+\n+typedef struct\n+{\n+  double   dsr0;\n+  double   dsr1;\n+  double   dsr2;\n+  double   dsr3;\n+  double   dsr4;\n+  double   dsr5;\n+  double   dsr6;\n+  double   dsr7;\n+  double   dsr8;\n+  double   dsr9;\n+  double   dsr10;\n+  double   dsr11;\n+  double   dsr12;\n+  double   dsr13;\n+  double   dsr14;\n+  double   dsr15;\n+} NDS32_DSR16;\n+\n+typedef struct\n+{\n+  double   dsr0;\n+  double   dsr1;\n+  double   dsr2;\n+  double   dsr3;\n+  double   dsr4;\n+  double   dsr5;\n+  double   dsr6;\n+  double   dsr7;\n+  double   dsr8;\n+  double   dsr9;\n+  double   dsr10;\n+  double   dsr11;\n+  double   dsr12;\n+  double   dsr13;\n+  double   dsr14;\n+  double   dsr15;\n+  double   dsr16;\n+  double   dsr17;\n+  double   dsr18;\n+  double   dsr19;\n+  double   dsr20;\n+  double   dsr21;\n+  double   dsr22;\n+  double   dsr23;\n+  double   dsr24;\n+  double   dsr25;\n+  double   dsr26;\n+  double   dsr27;\n+  double   dsr28;\n+  double   dsr29;\n+  double   dsr30;\n+  double   dsr31;\n+} NDS32_DSR32;\n+\n+typedef struct\n+{\n+  union\n+    {\n+      NDS32_FSR8   fsr_s ;\n+      NDS32_DSR4   dsr_s ;\n+    } u ;\n+} NDS32_FPU8_TAB;\n+\n+typedef struct\n+{\n+  union\n+    {\n+      NDS32_FSR16  fsr_s ;\n+      NDS32_DSR8   dsr_s ;\n+    } u ;\n+} NDS32_FPU16_TAB;\n+\n+typedef struct\n+{\n+  union\n+    {\n+      NDS32_FSR32  fsr_s ;\n+      NDS32_DSR16  dsr_s ;\n+    } u ;\n+} NDS32_FPU32_TAB;\n+\n+typedef struct\n+{\n+  union\n+    {\n+      NDS32_FSR32  fsr_s ;\n+      NDS32_DSR32  dsr_s ;\n+    } u ;\n+} NDS32_FPU64_TAB;\n+\n+typedef struct\n+{\n+  int    ipc;\n+  int    ipsw;\n+#if defined(NDS32_EXT_FPU_CONFIG_0)\n+  NDS32_FPU8_TAB fpr;\n+#elif defined(NDS32_EXT_FPU_CONFIG_1)\n+  NDS32_FPU16_TAB fpr;\n+#elif defined(NDS32_EXT_FPU_CONFIG_2)\n+  NDS32_FPU32_TAB fpr;\n+#elif defined(NDS32_EXT_FPU_CONFIG_3)\n+  NDS32_FPU64_TAB fpr;\n+#endif\n+#if __NDS32_DX_REGS__\n+  NDS32_DX_TAB dxr;\n+#endif\n+#if __NDS32_EXT_IFC__\n+  int    ifc_lp;\n+  int    filler;\n+#endif\n+#if __NDS32_REDUCED_REGS__ || __NDS32_REDUCE_REGS\n+  NDS32_REG16_TAB gpr;\n+#else\n+  NDS32_REG32_TAB gpr;\n+#endif\n+} NDS32_CONTEXT;\n+\n+/* Predefined Vector Definition.\n+\n+   For IVIC Mode: 9 to 14 are for hardware interrupt\n+                  and 15 is for software interrupt.\n+   For EVIC Mode: 9 to 72 are for hardware interrupt\n+                  and software interrupt can be routed to any one of them.\n+\n+   You may want to define your hardware interrupts in the following way\n+   for easy maintainance.\n+\n+     IVIC mode:\n+       #define MY_HW_IVIC_TIMER NDS32_VECTOR_INTERRUPT_HW0 + 1\n+       #define MY_HW_IVIC_USB   NDS32_VECTOR_INTERRUPT_HW0 + 3\n+     EVIC mode:\n+     #define MY_HW_EVIC_DMA   NDS32_VECTOR_INTERRUPT_HW0 + 2\n+     #define MY_HW_EVIC_SWI   NDS32_VECTOR_INTERRUPT_HW0 + 10 */\n+#define NDS32_VECTOR_RESET               0\n+#define NDS32_VECTOR_TLB_FILL            1\n+#define NDS32_VECTOR_PTE_NOT_PRESENT     2\n+#define NDS32_VECTOR_TLB_MISC            3\n+#define NDS32_VECTOR_TLB_VLPT_MISS       4\n+#define NDS32_VECTOR_MACHINE_ERROR       5\n+#define NDS32_VECTOR_DEBUG_RELATED       6\n+#define NDS32_VECTOR_GENERAL_EXCEPTION   7\n+#define NDS32_VECTOR_SYSCALL             8\n+#define NDS32_VECTOR_INTERRUPT_HW0       9\n+#define NDS32_VECTOR_INTERRUPT_HW1       10\n+#define NDS32_VECTOR_INTERRUPT_HW2       11\n+#define NDS32_VECTOR_INTERRUPT_HW3       12\n+#define NDS32_VECTOR_INTERRUPT_HW4       13\n+#define NDS32_VECTOR_INTERRUPT_HW5       14\n+#define NDS32_VECTOR_INTERRUPT_HW6       15\n+#define NDS32_VECTOR_SWI                 15  /* THIS IS FOR IVIC MODE ONLY */\n+#define NDS32_VECTOR_INTERRUPT_HW7       16\n+#define NDS32_VECTOR_INTERRUPT_HW8       17\n+#define NDS32_VECTOR_INTERRUPT_HW9       18\n+#define NDS32_VECTOR_INTERRUPT_HW10      19\n+#define NDS32_VECTOR_INTERRUPT_HW11      20\n+#define NDS32_VECTOR_INTERRUPT_HW12      21\n+#define NDS32_VECTOR_INTERRUPT_HW13      22\n+#define NDS32_VECTOR_INTERRUPT_HW14      23\n+#define NDS32_VECTOR_INTERRUPT_HW15      24\n+#define NDS32_VECTOR_INTERRUPT_HW16      25\n+#define NDS32_VECTOR_INTERRUPT_HW17      26\n+#define NDS32_VECTOR_INTERRUPT_HW18      27\n+#define NDS32_VECTOR_INTERRUPT_HW19      28\n+#define NDS32_VECTOR_INTERRUPT_HW20      29\n+#define NDS32_VECTOR_INTERRUPT_HW21      30\n+#define NDS32_VECTOR_INTERRUPT_HW22      31\n+#define NDS32_VECTOR_INTERRUPT_HW23      32\n+#define NDS32_VECTOR_INTERRUPT_HW24      33\n+#define NDS32_VECTOR_INTERRUPT_HW25      34\n+#define NDS32_VECTOR_INTERRUPT_HW26      35\n+#define NDS32_VECTOR_INTERRUPT_HW27      36\n+#define NDS32_VECTOR_INTERRUPT_HW28      37\n+#define NDS32_VECTOR_INTERRUPT_HW29      38\n+#define NDS32_VECTOR_INTERRUPT_HW30      39\n+#define NDS32_VECTOR_INTERRUPT_HW31      40\n+#define NDS32_VECTOR_INTERRUPT_HW32      41\n+#define NDS32_VECTOR_INTERRUPT_HW33      42\n+#define NDS32_VECTOR_INTERRUPT_HW34      43\n+#define NDS32_VECTOR_INTERRUPT_HW35      44\n+#define NDS32_VECTOR_INTERRUPT_HW36      45\n+#define NDS32_VECTOR_INTERRUPT_HW37      46\n+#define NDS32_VECTOR_INTERRUPT_HW38      47\n+#define NDS32_VECTOR_INTERRUPT_HW39      48\n+#define NDS32_VECTOR_INTERRUPT_HW40      49\n+#define NDS32_VECTOR_INTERRUPT_HW41      50\n+#define NDS32_VECTOR_INTERRUPT_HW42      51\n+#define NDS32_VECTOR_INTERRUPT_HW43      52\n+#define NDS32_VECTOR_INTERRUPT_HW44      53\n+#define NDS32_VECTOR_INTERRUPT_HW45      54\n+#define NDS32_VECTOR_INTERRUPT_HW46      55\n+#define NDS32_VECTOR_INTERRUPT_HW47      56\n+#define NDS32_VECTOR_INTERRUPT_HW48      57\n+#define NDS32_VECTOR_INTERRUPT_HW49      58\n+#define NDS32_VECTOR_INTERRUPT_HW50      59\n+#define NDS32_VECTOR_INTERRUPT_HW51      60\n+#define NDS32_VECTOR_INTERRUPT_HW52      61\n+#define NDS32_VECTOR_INTERRUPT_HW53      62\n+#define NDS32_VECTOR_INTERRUPT_HW54      63\n+#define NDS32_VECTOR_INTERRUPT_HW55      64\n+#define NDS32_VECTOR_INTERRUPT_HW56      65\n+#define NDS32_VECTOR_INTERRUPT_HW57      66\n+#define NDS32_VECTOR_INTERRUPT_HW58      67\n+#define NDS32_VECTOR_INTERRUPT_HW59      68\n+#define NDS32_VECTOR_INTERRUPT_HW60      69\n+#define NDS32_VECTOR_INTERRUPT_HW61      70\n+#define NDS32_VECTOR_INTERRUPT_HW62      71\n+#define NDS32_VECTOR_INTERRUPT_HW63      72\n+\n+#define NDS32ATTR_RESET(option)          __attribute__((reset(option)))\n+#define NDS32ATTR_EXCEPT(type)           __attribute__((exception(type)))\n+#define NDS32ATTR_EXCEPTION(type)        __attribute__((exception(type)))\n+#define NDS32ATTR_INTERRUPT(type)        __attribute__((interrupt(type)))\n+#define NDS32ATTR_ISR(type)              __attribute__((interrupt(type)))\n+\n+#endif /* nds32_isr.h */"}, {"sha": "d499020f91f21b7eec3426ca6e99ace4fd08f8fd", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -1,3 +1,22 @@\n+2018-08-12  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/t-nds32-isr: Rearrange object dependency.\n+\t* config/nds32/initfini.c: Add dwarf2 unwinding support.\n+\t* config/nds32/isr-library/adj_intr_lvl.inc: Consider new extensions\n+\tand registers usage.\n+\t* config/nds32/isr-library/excp_isr.S: Ditto.\n+\t* config/nds32/isr-library/intr_isr.S: Ditto.\n+\t* config/nds32/isr-library/reset.S: Ditto.\n+\t* config/nds32/isr-library/restore_all.inc: Ditto.\n+\t* config/nds32/isr-library/restore_mac_regs.inc: Ditto.\n+\t* config/nds32/isr-library/restore_partial.inc: Ditto.\n+\t* config/nds32/isr-library/restore_usr_regs.inc: Ditto.\n+\t* config/nds32/isr-library/save_all.inc: Ditto.\n+\t* config/nds32/isr-library/save_mac_regs.inc: Ditto.\n+\t* config/nds32/isr-library/save_partial.inc: Ditto.\n+\t* config/nds32/isr-library/save_usr_regs.inc: Ditto.\n+\t* config/nds32/isr-library/vec_vid*.S: Consider 4-byte vector size.\n+\n 2018-08-11  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/linux-atomic.c: Update comment."}, {"sha": "dfbcc43f776fd0bc97f79783d133d91820d30ca9", "filename": "libgcc/config/nds32/initfini.c", "status": "modified", "additions": 75, "deletions": 9, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Finitfini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Finitfini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Finitfini.c?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -25,6 +25,10 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#include <stddef.h>\n+/* Need header file for `struct object' type.  */\n+#include \"../libgcc/unwind-dw2-fde.h\"\n+\n /*  Declare a pointer to void function type.  */\n typedef void (*func_ptr) (void);\n \n@@ -42,11 +46,59 @@ typedef void (*func_ptr) (void);\n    refer to only the __CTOR_END__ symbol in crtfini.o and the __DTOR_LIST__\n    symbol in crtinit.o, where they are defined.  */\n \n-static func_ptr __CTOR_LIST__[1] __attribute__ ((section (\".ctors\")))\n-     = { (func_ptr) (-1) };\n+static func_ptr __CTOR_LIST__[1] __attribute__ ((section (\".ctors\"), used))\n+     = { (func_ptr) 0 };\n+\n+static func_ptr __DTOR_LIST__[1] __attribute__ ((section (\".dtors\"), used))\n+     = { (func_ptr) 0 };\n+\n+\n+#ifdef SUPPORT_UNWINDING_DWARF2\n+/* Preparation of exception handling with dwar2 mechanism registration.  */\n \n-static func_ptr __DTOR_LIST__[1] __attribute__ ((section (\".dtors\")))\n-     = { (func_ptr) (-1) };\n+asm (\"\\n\\\n+\t.section .eh_frame,\\\"aw\\\",@progbits\\n\\\n+\t.global __EH_FRAME_BEGIN__\\n\\\n+\t.type\t__EH_FRAME_BEGIN__, @object\\n\\\n+\t.align 2\\n\\\n+__EH_FRAME_BEGIN__:\\n\\\n+\t! Beginning location of eh_frame section\\n\\\n+\t.previous\\n\\\n+\");\n+\n+extern func_ptr __EH_FRAME_BEGIN__[];\n+\n+\n+/* Note that the following two functions are going to be chained into\n+   constructor and destructor list, repectively.  So these two declarations\n+   must be placed after __CTOR_LIST__ and __DTOR_LIST.  */\n+extern void __nds32_register_eh(void) __attribute__((constructor, used));\n+extern void __nds32_deregister_eh(void) __attribute__((destructor, used));\n+\n+/* Register the exception handling table as the first constructor.  */\n+void\n+__nds32_register_eh (void)\n+{\n+  static struct object object;\n+  if (__register_frame_info)\n+    __register_frame_info (__EH_FRAME_BEGIN__, &object);\n+}\n+\n+/* Unregister the exception handling table as a deconstructor.  */\n+void\n+__nds32_deregister_eh (void)\n+{\n+  static int completed = 0;\n+\n+  if (completed)\n+    return;\n+\n+  if (__deregister_frame_info)\n+    __deregister_frame_info (__EH_FRAME_BEGIN__);\n+\n+  completed = 1;\n+}\n+#endif\n \n /* Run all the global destructors on exit from the program.  */\n \n@@ -63,7 +115,7 @@ static func_ptr __DTOR_LIST__[1] __attribute__ ((section (\".dtors\")))\n    same particular root executable or shared library file.  */\n \n static void __do_global_dtors (void)\n-asm (\"__do_global_dtors\") __attribute__ ((section (\".text\")));\n+asm (\"__do_global_dtors\") __attribute__ ((section (\".text\"), used));\n \n static void\n __do_global_dtors (void)\n@@ -116,23 +168,37 @@ void *__dso_handle = 0;\n    last, these words naturally end up at the very ends of the two lists\n    contained in these two sections.  */\n \n-static func_ptr __CTOR_END__[1] __attribute__ ((section (\".ctors\")))\n+static func_ptr __CTOR_END__[1] __attribute__ ((section (\".ctors\"), used))\n      = { (func_ptr) 0 };\n \n-static func_ptr __DTOR_END__[1] __attribute__ ((section (\".dtors\")))\n+static func_ptr __DTOR_END__[1] __attribute__ ((section (\".dtors\"), used))\n      = { (func_ptr) 0 };\n \n+#ifdef SUPPORT_UNWINDING_DWARF2\n+/* ZERO terminator in .eh_frame section.  */\n+asm (\"\\n\\\n+\t.section .eh_frame,\\\"aw\\\",@progbits\\n\\\n+\t.global __EH_FRAME_END__\\n\\\n+\t.type\t__EH_FRAME_END__, @object\\n\\\n+\t.align 2\\n\\\n+__EH_FRAME_END__:\\n\\\n+\t! End location of eh_frame section with ZERO terminator\\n\\\n+\t.word 0\\n\\\n+\t.previous\\n\\\n+\");\n+#endif\n+\n /* Run all global constructors for the program.\n    Note that they are run in reverse order.  */\n \n static void __do_global_ctors (void)\n-asm (\"__do_global_ctors\") __attribute__ ((section (\".text\")));\n+asm (\"__do_global_ctors\") __attribute__ ((section (\".text\"), used));\n \n static void\n __do_global_ctors (void)\n {\n   func_ptr *p;\n-  for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n+  for (p = __CTOR_END__ - 1; *p; p--)\n     (*p) ();\n }\n "}, {"sha": "275e5580ef31db1f78b90594b47c01c810aff2b0", "filename": "libgcc/config/nds32/isr-library/adj_intr_lvl.inc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fadj_intr_lvl.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fadj_intr_lvl.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fadj_intr_lvl.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -26,13 +26,26 @@\n .macro ADJ_INTR_LVL\n #if defined(NDS32_NESTED) /* Nested handler.  */\n \tmfsr\t$r3, $PSW\n+\t/* By substracting 1 from $PSW, we can lower PSW.INTL\n+\t   and enable GIE simultaneously.  */\n \taddi\t$r3, $r3, #-0x1\n+  #if __NDS32_EXT_ZOL__ || __NDS32_EXT_DSP__\n+    ori   $r3, $r3, 0x2000  /* Set PSW.AEN(b'13) */\n+  #endif\n \tmtsr\t$r3, $PSW\n #elif defined(NDS32_NESTED_READY) /* Nested ready handler.  */\n \t/* Save ipc and ipsw and lower INT level.  */\n \tmfsr\t$r3, $PSW\n \taddi\t$r3, $r3, #-0x2\n+  #if __NDS32_EXT_ZOL__ || __NDS32_EXT_DSP__\n+    ori   $r3, $r3, 0x2000  /* Set PSW.AEN(b'13) */\n+  #endif\n \tmtsr\t$r3, $PSW\n #else /* Not nested handler.  */\n+  #if __NDS32_EXT_ZOL__ || __NDS32_EXT_DSP__\n+    mfsr\t$r3, $PSW\n+    ori   $r3, $r3, 0x2000  /* Set PSW.AEN(b'13) */\n+    mtsr\t$r3, $PSW\n+  #endif\n #endif\n .endm"}, {"sha": "6e7de5f8fb580e32e0c8900fabc38b2f1f708550", "filename": "libgcc/config/nds32/isr-library/excp_isr.S", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fexcp_isr.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fexcp_isr.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fexcp_isr.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -23,6 +23,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#include \"save_usr_regs.inc\"\n #include \"save_mac_regs.inc\"\n #include \"save_fpu_regs.inc\"\n #include \"save_fpu_regs_00.inc\"\n@@ -32,35 +33,33 @@\n #include \"save_all.inc\"\n #include \"save_partial.inc\"\n #include \"adj_intr_lvl.inc\"\n-#include \"restore_mac_regs.inc\"\n #include \"restore_fpu_regs_00.inc\"\n #include \"restore_fpu_regs_01.inc\"\n #include \"restore_fpu_regs_02.inc\"\n #include \"restore_fpu_regs_03.inc\"\n #include \"restore_fpu_regs.inc\"\n+#include \"restore_mac_regs.inc\"\n+#include \"restore_usr_regs.inc\"\n #include \"restore_all.inc\"\n #include \"restore_partial.inc\"\n+\n \t.section .nds32_isr, \"ax\"       /* Put it in the section of 1st level handler. */\n \t.align\t1\n-/*\n-  First Level Handlers\n-  1. First Level Handlers are invokded in vector section via jump instruction\n-  with specific names for different configurations.\n-  2. Naming Format: _nds32_e_SR_NT for exception handlers.\n-\t\t    _nds32_i_SR_NT for interrupt handlers.\n-  2.1 All upper case letters are replaced with specific lower case letters encodings.\n-  2.2 SR: Saved Registers\n-      sa: Save All regs (context)\n-      ps: Partial Save (all caller-saved regs)\n-  2.3 NT: Nested Type\n-      ns: nested\n-      nn: not nested\n-      nr: nested ready\n-*/\n-\n-/*\n-  This is original 16-byte vector size version.\n-*/\n+\n+/* First Level Handlers\n+   1. First Level Handlers are invokded in vector section via jump instruction\n+      with specific names for different configurations.\n+   2. Naming Format: _nds32_e_SR_NT for exception handlers.\n+                     _nds32_i_SR_NT for interrupt handlers.\n+     2.1 All upper case letters are replaced with specific lower case letters encodings.\n+     2.2 SR -- Saved Registers\n+         sa: Save All regs (context)\n+         ps: Partial Save (all caller-saved regs)\n+     2.3 NT -- Nested Type\n+         ns: nested\n+         nn: not nested\n+         nr: nested ready */\n+\n #ifdef NDS32_SAVE_ALL_REGS\n #if defined(NDS32_NESTED)\n \t.globl\t_nds32_e_sa_ns\n@@ -91,28 +90,34 @@ _nds32_e_ps_nn:\n #endif /* endif for Nest Type */\n #endif /* not NDS32_SAVE_ALL_REGS */\n \n-/*\n-  This is 16-byte vector size version.\n-  The vector id was restored into $r0 in vector by compiler.\n-*/\n+\n+/* For 4-byte vector size version, the vector id is\n+   extracted from $ITYPE and is set into $r0 by library.\n+   For 16-byte vector size version, the vector id\n+   is set into $r0 in vector section by compiler.  */\n+\n+/* Save used registers.  */\n #ifdef NDS32_SAVE_ALL_REGS\n         SAVE_ALL\n #else\n         SAVE_PARTIAL\n #endif\n+\n \t/* Prepare to call 2nd level handler. */\n \tla\t$r2, _nds32_jmptbl_00\n \tlw\t$r2, [$r2 + $r0 << #2]\n \tADJ_INTR_LVL\t/* Adjust INTR level. $r3 is clobbered.  */\n \tjral    $r2\n-\t/* Restore used registers. */\n+\n+/* Restore used registers.  */\n #ifdef NDS32_SAVE_ALL_REGS\n \tRESTORE_ALL\n #else\n \tRESTORE_PARTIAL\n #endif\n \tiret\n \n+\n #ifdef NDS32_SAVE_ALL_REGS\n #if defined(NDS32_NESTED)\n \t.size\t_nds32_e_sa_ns, .-_nds32_e_sa_ns"}, {"sha": "23ffa1002066ed54fa8a4f7bafc701492f817034", "filename": "libgcc/config/nds32/isr-library/intr_isr.S", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fintr_isr.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fintr_isr.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fintr_isr.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -23,6 +23,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#include \"save_usr_regs.inc\"\n #include \"save_mac_regs.inc\"\n #include \"save_fpu_regs.inc\"\n #include \"save_fpu_regs_00.inc\"\n@@ -32,35 +33,33 @@\n #include \"save_all.inc\"\n #include \"save_partial.inc\"\n #include \"adj_intr_lvl.inc\"\n-#include \"restore_mac_regs.inc\"\n #include \"restore_fpu_regs_00.inc\"\n #include \"restore_fpu_regs_01.inc\"\n #include \"restore_fpu_regs_02.inc\"\n #include \"restore_fpu_regs_03.inc\"\n #include \"restore_fpu_regs.inc\"\n+#include \"restore_mac_regs.inc\"\n+#include \"restore_usr_regs.inc\"\n #include \"restore_all.inc\"\n #include \"restore_partial.inc\"\n+\n \t.section .nds32_isr, \"ax\"       /* Put it in the section of 1st level handler. */\n \t.align\t1\n-/*\n-  First Level Handlers\n-  1. First Level Handlers are invokded in vector section via jump instruction\n-  with specific names for different configurations.\n-  2. Naming Format: _nds32_e_SR_NT for exception handlers.\n-\t\t    _nds32_i_SR_NT for interrupt handlers.\n-  2.1 All upper case letters are replaced with specific lower case letters encodings.\n-  2.2 SR: Saved Registers\n-      sa: Save All regs (context)\n-      ps: Partial Save (all caller-saved regs)\n-  2.3 NT: Nested Type\n-      ns: nested\n-      nn: not nested\n-      nr: nested ready\n-*/\n-\n-/*\n-  This is original 16-byte vector size version.\n-*/\n+\n+/* First Level Handlers\n+   1. First Level Handlers are invokded in vector section via jump instruction\n+      with specific names for different configurations.\n+   2. Naming Format: _nds32_e_SR_NT for exception handlers.\n+                     _nds32_i_SR_NT for interrupt handlers.\n+     2.1 All upper case letters are replaced with specific lower case letters encodings.\n+     2.2 SR -- Saved Registers\n+         sa: Save All regs (context)\n+         ps: Partial Save (all caller-saved regs)\n+     2.3 NT -- Nested Type\n+         ns: nested\n+         nn: not nested\n+         nr: nested ready */\n+\n #ifdef NDS32_SAVE_ALL_REGS\n #if defined(NDS32_NESTED)\n \t.globl\t_nds32_i_sa_ns\n@@ -91,28 +90,44 @@ _nds32_i_ps_nn:\n #endif /* endif for Nest Type */\n #endif /* not NDS32_SAVE_ALL_REGS */\n \n-/*\n-  This is 16-byte vector size version.\n-  The vector id was restored into $r0 in vector by compiler.\n-*/\n+\n+/* For 4-byte vector size version, the vector id is\n+   extracted from $ITYPE and is set into $r0 by library.\n+   For 16-byte vector size version, the vector id\n+   is set into $r0 in vector section by compiler.  */\n+\n+/* Save used registers first.  */\n #ifdef NDS32_SAVE_ALL_REGS\n         SAVE_ALL\n #else\n         SAVE_PARTIAL\n #endif\n-\t/* Prepare to call 2nd level handler. */\n+\n+/* According to vector size, we need to have different implementation.  */\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* Prepare to call 2nd level handler.  */\n+\tla\t$r2, _nds32_jmptbl_00\n+\tlw\t$r2, [$r2 + $r0 << #2]\n+\taddi    $r0, $r0, #-9\t/* Make interrput vector id zero-based.  */\n+\tADJ_INTR_LVL\t/* Adjust INTR level.  $r3 is clobbered.  */\n+\tjral    $r2\n+#else /* not __NDS32_ISR_VECTOR_SIZE_4__ */\n+\t/* Prepare to call 2nd level handler.  */\n \tla\t$r2, _nds32_jmptbl_09\t/* For zero-based vcetor id.  */\n \tlw\t$r2, [$r2 + $r0 << #2]\n \tADJ_INTR_LVL\t/* Adjust INTR level. $r3 is clobbered.  */\n \tjral    $r2\n-\t/* Restore used registers. */\n+#endif /* not __NDS32_ISR_VECTOR_SIZE_4__ */\n+\n+/* Restore used registers.  */\n #ifdef NDS32_SAVE_ALL_REGS\n \tRESTORE_ALL\n #else\n \tRESTORE_PARTIAL\n #endif\n \tiret\n \n+\n #ifdef NDS32_SAVE_ALL_REGS\n #if defined(NDS32_NESTED)\n \t.size\t_nds32_i_sa_ns, .-_nds32_i_sa_ns"}, {"sha": "2ac247e99fbb34db3d46febd3dd5e08961e066ad", "filename": "libgcc/config/nds32/isr-library/reset.S", "status": "modified", "additions": 52, "deletions": 29, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Freset.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Freset.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Freset.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -26,33 +26,28 @@\n \t.section .nds32_isr, \"ax\"\t/* Put it in the section of 1st level handler.  */\n \t.align\t1\n \t.weak\t_SDA_BASE_\t/* For reset handler only.  */\n-\t.weak\t_FP_BASE_\t/* For reset handler only.  */\n \t.weak\t_nds32_init_mem\t/* User defined memory initialization function.  */\n \t.globl\t_start\n \t.globl\t_nds32_reset\n \t.type\t_nds32_reset, @function\n _nds32_reset:\n _start:\n-#ifdef  NDS32_EXT_EX9\n-\t.no_ex9_begin\n-#endif\n \t/* Handle NMI and warm boot if any of them exists.  */\n \tbeqz\t$sp, 1f\t\t/* Reset, NMI or warm boot?  */\n \t/* Either NMI or warm boot; save all regs.  */\n \n \t/* Preserve registers for context-switching.  */\n-#ifdef __NDS32_REDUCED_REGS__\n+#if __NDS32_REDUCED_REGS__ || __NDS32_REDUCE_REGS\n \t/* For 16-reg mode.  */\n \tsmw.adm $r0, [$sp], $r10, #0x0\n \tsmw.adm $r15, [$sp], $r15, #0xf\n #else\n \t/* For 32-reg mode.  */\n \tsmw.adm $r0, [$sp], $r27, #0xf\n #endif\n-#ifdef NDS32_EXT_IFC\n+#if __NDS32_EXT_IFC__\n \tmfusr   $r1, $IFC_LP\n-\tsmw.adm $r1, [$sp], $r2, #0x0\t/* Save extra $r2 to keep\n-\t\t\t\t\t   stack 8-byte alignment.  */\n+\tsmw.adm $r1, [$sp], $r2, #0x0\t/* Save extra $r2 to keep stack 8-byte alignment.  */\n #endif\n \n \tla\t$gp, _SDA_BASE_\t/* Init GP for small data access.  */\n@@ -71,12 +66,11 @@ _start:\n \tbnez    $r0, 1f\t\t/* If fail to resume, do cold boot.  */\n \n \t/* Restore registers for context-switching.  */\n-#ifdef NDS32_EXT_IFC\n-\tlmw.bim\t$r1, [$sp], $r2, #0x0\t/* Restore extra $r2 to keep\n-\t\t\t\t\t   stack 8-byte alignment.  */\n+#if __NDS32_EXT_IFC__\n+\tlmw.bim\t$r1, [$sp], $r2, #0x0\t/* Restore extra $r2 to keep stack 8-byte alignment.  */\n \tmtusr   $r1, $IFC_LP\n #endif\n-#ifdef __NDS32_REDUCED_REGS__\n+#if __NDS32_REDUCED_REGS__ || __NDS32_REDUCE_REGS\n \t/* For 16-reg mode.  */\n \tlmw.bim\t$r15, [$sp], $r15, #0xf\n \tlmw.bim\t$r0, [$sp], $r10, #0x0\n@@ -88,43 +82,72 @@ _start:\n \n \n 1:\t/* Cold boot.  */\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* With vector ID feature for v3 architecture, default vector size is 4-byte.  */\n+\t/* Set IVB.ESZ = 0 (vector table entry size = 4 bytes)  */\n+\tmfsr    $r0, $IVB\n+\tli      $r1, #0xc000\n+\tor      $r0, $r0, $r1\n+\txor     $r0, $r0, $r1\n+\tmtsr    $r0, $IVB\n+\tdsb\n+#else\n+\t/* There is no vector ID feature, so the vector size must be 16-byte.  */\n \t/* Set IVB.ESZ = 1 (vector table entry size = 16 bytes)  */\n \tmfsr    $r0, $IVB\n \tli\t$r1, #0xffff3fff\n \tand\t$r0, $r0, $r1\n \tori\t$r0, $r0, #0x4000\n \tmtsr    $r0, $IVB\n \tdsb\n+#endif\n \n \tla\t$gp, _SDA_BASE_\t\t/* Init $gp.  */\n-\tla\t$fp, _FP_BASE_\t\t/* Init $fp.  */\n \tla\t$sp, _stack\t\t/* Init $sp.  */\n-#ifdef  NDS32_EXT_EX9\n-/*\n- *\tInitialize the table base of EX9 instruction\n- *\tex9 generation needs to disable before the ITB is set\n- */\n-\tmfsr    $r0, $MSC_CFG\t/* Check if HW support of EX9.  */\n+\n+#if __NDS32_EXT_EX9__\n+.L_init_itb:\n+\t/* Initialization for Instruction Table Base (ITB).\n+\t   The symbol _ITB_BASE_ is determined by Linker.\n+\t   Set $ITB only if MSC_CFG.EIT (cr4.b'24) is set.  */\n+\tmfsr    $r0, $MSC_CFG\n \tsrli\t$r0, $r0, 24\n \tandi\t$r0, $r0, 0x1\n-\tbeqz\t$r0, 4f\t\t/* Zero means HW does not support EX9.  */\n-\tla      $r0, _ITB_BASE_\t/* Init $ITB.  */\n+\tbeqz\t$r0, 4f\t\t/* Fall through ?  */\n+\tla      $r0, _ITB_BASE_\n \tmtusr   $r0, $ITB\n-\t.no_ex9_end\n 4:\n #endif\n-\tla\t$r15, _nds32_init_mem\t/* Call DRAM init. _nds32_init_mem\n-\t\t\t\t\t  may written by C language.  */\n+\n+#if __NDS32_EXT_FPU_SP__ || __NDS32_EXT_FPU_DP__\n+.L_init_fpu:\n+\t/* Initialize FPU\n+\t   Set FUCOP_CTL.CP0EN (fucpr.b'0).  */\n+\tmfsr    $r0, $FUCOP_CTL\n+\tori     $r0, $r0, 0x1\n+\tmtsr    $r0, $FUCOP_CTL\n+\tdsb\n+\t/* According to [bugzilla #9425], set flush-to-zero mode.\n+\t   That is, set $FPCSR.DNZ(b'12) = 1.  */\n+\tFMFCSR\t$r0\n+\tori\t$r0, $r0, 0x1000\n+\tFMTCSR\t$r0\n+\tdsb\n+#endif\n+\n+\t/* Call DRAM init. _nds32_init_mem may written by C language.  */\n+\tla\t$r15, _nds32_init_mem\n \tbeqz\t$r15, 6f\n \tjral\t$r15\n 6:\n \tl.w\t$r15, _nds32_jmptbl_00\t/* Load reset handler.  */\n \tjral\t$r15\n-/* Reset handler() should never return in a RTOS or non-OS system.\n-   In case it does return, an exception will be generated.\n-   This exception will be caught either by default break handler or by EDM.\n-   Default break handle may just do an infinite loop.\n-   EDM will notify GDB and GDB will regain control when the ID is 0x7fff. */\n+\n+\t/* Reset handler() should never return in a RTOS or non-OS system.\n+\t   In case it does return, an exception will be generated.\n+\t   This exception will be caught either by default break handler or by EDM.\n+\t   Default break handle may just do an infinite loop.\n+\t   EDM will notify GDB and GDB will regain control when the ID is 0x7fff.  */\n 5:\n \tbreak    #0x7fff\n \t.size\t_nds32_reset, .-_nds32_reset"}, {"sha": "23cdf8c6f165ab5dbb8699fc96db1fdb0a937d56", "filename": "libgcc/config/nds32/isr-library/restore_all.inc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_all.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_all.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_all.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -31,15 +31,11 @@\n \tmtsr\t$r2, $IPSW\n \tRESTORE_FPU_REGS\n \tRESTORE_MAC_REGS\n-#ifdef NDS32_EXT_IFC\n-\tlmw.bim\t$r1, [$sp], $r2, #0x0\t/* Restore extra $r2 to keep\n-\t\t\t\t\t   stack 8-byte alignment.  */\n-\tmtusr   $r1, $IFC_LP\n-#endif\n-#ifdef __NDS32_REDUCED_REGS__\n+  RESTORE_USR_REGS\n+#if __NDS32_REDUCED_REGS__ || __NDS32_REDUCE_REGS\n \tlmw.bim $r0, [$sp], $r10, #0x0\t/* Restore all regs.  */\n \tlmw.bim $r15, [$sp], $r15, #0xf\n-#else /* not __NDS32_REDUCED_REGS__ */\n+#else\n \tlmw.bim $r0, [$sp], $r27, #0xf\t/* Restore all regs.  */\n #endif\n .endm"}, {"sha": "a4340833a767dc124220f46fd29671a7540c17a9", "filename": "libgcc/config/nds32/isr-library/restore_mac_regs.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_mac_regs.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_mac_regs.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_mac_regs.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,7 +24,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n .macro RESTORE_MAC_REGS\n-#ifdef NDS32_DX_REGS\n+#if __NDS32_DX_REGS__\n \tlmw.bim\t$r1, [$sp], $r4, #0x0\n \tmtusr\t$r1, $d0.lo\n \tmtusr\t$r2, $d0.hi"}, {"sha": "c43ad1600e10c9f4ed1c63796b9dacd71ba76e55", "filename": "libgcc/config/nds32/isr-library/restore_partial.inc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_partial.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_partial.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_partial.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -31,15 +31,11 @@\n \tmtsr $r1, $IPC\t/* Set IPC.  */\n \tmtsr $r2, $IPSW\t/* Set IPSW.  */\n #endif\n-\tRESTORE_FPU_REGS\n-\tRESTORE_MAC_REGS\n-#ifdef NDS32_EXT_IFC\n-\tlmw.bim\t$r1, [$sp], $r2, #0x0\t/* Restore extra $r2 to keep\n-\t\t\t\t\t   stack 8-byte alignment.  */\n-\tmtusr   $r1, $IFC_LP\n-#endif\n+  RESTORE_FPU_REGS\n+  RESTORE_MAC_REGS\n+  RESTORE_USR_REGS\n \tlmw.bim $r0, [$sp], $r5, #0x0\t/* Restore all regs.  */\n-#ifdef __NDS32_REDUCED_REGS__\n+#if __NDS32_REDUCED_REGS__ || __NDS32_REDUCE_REGS\n \tlmw.bim $r15, [$sp], $r15, #0x2\n #else\n \tlmw.bim $r15, [$sp], $r27, #0x2\t/* Restore all regs.  */"}, {"sha": "9602c741cbdce6a621fbaeef7ef5fad97ec917d2", "filename": "libgcc/config/nds32/isr-library/restore_usr_regs.inc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_usr_regs.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_usr_regs.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Frestore_usr_regs.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -0,0 +1,42 @@\n+/* c-isr library stuff of Andes NDS32 cpu for GNU compiler\n+   Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+   Contributed by Andes Technology Corporation.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+.macro RESTORE_USR_REGS\n+#if __NDS32_EXT_IFC__ && (__NDS32_EXT_ZOL__ || __NDS32_EXT_DSP__)\n+  lmw.bim $r1, [$sp], $r4, #0x0\n+  mtusr   $r1, $IFC_LP\n+  mtusr   $r2, $LB\n+  mtusr   $r3, $LE\n+  mtusr   $r4, $LC\n+#elif __NDS32_EXT_IFC__\n+  lmw.bim\t$r1, [$sp], $r2, #0x0\n+  mtusr   $r1, $IFC_LP\n+#elif __NDS32_EXT_ZOL__ || __NDS32_EXT_DSP__\n+  lmw.bim $r1, [$sp], $r4, #0x0\n+  mtusr   $r1, $LB\n+  mtusr   $r2, $LE\n+  mtusr   $r3, $LC\n+#endif\n+.endm"}, {"sha": "8886edb1f644a8d3f45f869520a72d466f2744b7", "filename": "libgcc/config/nds32/isr-library/save_all.inc", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_all.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_all.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_all.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -23,45 +23,42 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-.macro SAVE_ALL_4B\n-#ifdef __NDS32_REDUCED_REGS__\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\n+/* If vector size is 4-byte, we have to save registers\n+   in the macro implementation.  */\n+.macro SAVE_ALL\n+#if __NDS32_REDUCED_REGS__ || __NDS32_REDUCE_REGS\n \tsmw.adm $r15, [$sp], $r15, #0xf\n \tsmw.adm $r0, [$sp], $r10, #0x0\n-#else /* not __NDS32_REDUCED_REGS__ */\n+#else\n \tsmw.adm $r0, [$sp], $r27, #0xf\n-#endif /* not __NDS32_REDUCED_REGS__ */\n-#ifdef NDS32_EXT_IFC\n-\tmfusr   $r1, $IFC_LP\n-\tsmw.adm $r1, [$sp], $r2, #0x0\t/* Save extra $r2 to keep\n-\t\t\t\t\t   stack 8-byte alignment.  */\n #endif\n-\tSAVE_MAC_REGS\n-\tSAVE_FPU_REGS\n+  SAVE_USR_REGS\n+  SAVE_MAC_REGS\n+  SAVE_FPU_REGS\n \tmfsr\t$r1, $IPC\t/* Get IPC.  */\n \tmfsr\t$r2, $IPSW\t/* Get IPSW.  */\n \tsmw.adm\t$r1, [$sp], $r2, #0x0\t/* Push IPC, IPSW.  */\n \tmove\t$r1, $sp\t/* $r1 is ptr to NDS32_CONTEXT.  */\n \tmfsr\t$r0, $ITYPE\t/* Get VID to $r0.  */\n \tsrli\t$r0, $r0, #5\n-#ifdef __NDS32_ISA_V2__\n \tandi\t$r0, $r0, #127\n-#else\n-\tfexti33\t$r0, #6\n-#endif\n .endm\n \n+#else /* not __NDS32_ISR_VECTOR_SIZE_4__ */\n+\n+/* If vector size is 16-byte, some works can be done in\n+   the vector section generated by compiler, so that we\n+   can implement less in the macro.  */\n .macro SAVE_ALL\n-/* SAVE_REG_TBL code has been moved to\n-   vector table generated by compiler.  */\n-#ifdef NDS32_EXT_IFC\n-\tmfusr   $r1, $IFC_LP\n-\tsmw.adm $r1, [$sp], $r2, #0x0\t/* Save extra $r2 to keep\n-\t\t\t\t\t   stack 8-byte alignment.  */\n-#endif\n-\tSAVE_MAC_REGS\n-\tSAVE_FPU_REGS\n+  SAVE_USR_REGS\n+  SAVE_MAC_REGS\n+  SAVE_FPU_REGS\n \tmfsr\t$r1, $IPC\t/* Get IPC.  */\n \tmfsr\t$r2, $IPSW\t/* Get IPSW.  */\n \tsmw.adm\t$r1, [$sp], $r2, #0x0\t/* Push IPC, IPSW.  */\n \tmove\t$r1, $sp\t/* $r1 is ptr to NDS32_CONTEXT.  */\n .endm\n+\n+#endif /* not __NDS32_ISR_VECTOR_SIZE_4__ */"}, {"sha": "a6a92307feffdd8709c45270bda712afca3d5dbb", "filename": "libgcc/config/nds32/isr-library/save_mac_regs.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_mac_regs.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_mac_regs.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_mac_regs.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,7 +24,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n .macro SAVE_MAC_REGS\n-#ifdef NDS32_DX_REGS\n+#if __NDS32_DX_REGS__\n \tmfusr\t$r1, $d0.lo\n \tmfusr\t$r2, $d0.hi\n \tmfusr\t$r3, $d1.lo"}, {"sha": "c81ebaa693c78d8c51c85c199c3847c0261491e9", "filename": "libgcc/config/nds32/isr-library/save_partial.inc", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_partial.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_partial.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_partial.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -23,47 +23,45 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-.macro SAVE_PARTIAL_4B\n-#ifdef __NDS32_REDUCED_REGS__\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\n+/* If vector size is 4-byte, we have to save registers\n+   in the macro implementation.  */\n+.macro SAVE_PARTIAL\n+#if __NDS32_REDUCED_REGS__ || __NDS32_REDUCE_REGS\n \tsmw.adm $r15, [$sp], $r15, #0x2\n-#else /* not __NDS32_REDUCED_REGS__ */\n+#else\n \tsmw.adm $r15, [$sp], $r27, #0x2\n-#endif /* not __NDS32_REDUCED_REGS__ */\n-\tsmw.adm $r0, [$sp], $r5, #0x0\n-#ifdef NDS32_EXT_IFC\n-\tmfusr   $r1, $IFC_LP\n-\tsmw.adm $r1, [$sp], $r2, #0x0\t/* Save extra $r2 to keep\n-\t\t\t\t\t   stack 8-byte alignment.  */\n #endif\n-\tSAVE_MAC_REGS\n-\tSAVE_FPU_REGS\n+\tsmw.adm $r0, [$sp], $r5, #0x0\n+  SAVE_USR_REGS\n+  SAVE_MAC_REGS\n+  SAVE_FPU_REGS\n #if defined(NDS32_NESTED) || defined(NDS32_NESTED_READY)\n        mfsr    $r1, $IPC       /* Get IPC.  */\n        mfsr    $r2, $IPSW      /* Get IPSW.  */\n        smw.adm $r1, [$sp], $r2, #0x0   /* Push IPC, IPSW.  */\n #endif\n \tmfsr\t$r0, $ITYPE\t/* Get VID to $r0.  */\n \tsrli\t$r0, $r0, #5\n-#ifdef __NDS32_ISA_V2__\n \tandi\t$r0, $r0, #127\n-#else\n-\tfexti33\t$r0, #6\n-#endif\n .endm\n \n+#else /* not __NDS32_ISR_VECTOR_SIZE_4__ */\n+\n+/* If vector size is 16-byte, some works can be done in\n+   the vector section generated by compiler, so that we\n+   can implement less in the macro.  */\n+\n .macro SAVE_PARTIAL\n-/* SAVE_CALLER_REGS code has been moved to\n-   vector table generated by compiler.  */\n-#ifdef NDS32_EXT_IFC\n-\tmfusr   $r1, $IFC_LP\n-\tsmw.adm $r1, [$sp], $r2, #0x0\t/* Save extra $r2 to keep\n-\t\t\t\t\t   stack 8-byte alignment.  */\n-#endif\n-\tSAVE_MAC_REGS\n-\tSAVE_FPU_REGS\n+  SAVE_USR_REGS\n+  SAVE_MAC_REGS\n+  SAVE_FPU_REGS\n #if defined(NDS32_NESTED) || defined(NDS32_NESTED_READY)\n        mfsr    $r1, $IPC       /* Get IPC.  */\n        mfsr    $r2, $IPSW      /* Get IPSW.  */\n        smw.adm $r1, [$sp], $r2, #0x0   /* Push IPC, IPSW.  */\n #endif\n .endm\n+\n+#endif /* not __NDS32_ISR_VECTOR_SIZE_4__ */"}, {"sha": "5a3f6183b6842b0a5a530401e9e4ab272b0fd326", "filename": "libgcc/config/nds32/isr-library/save_usr_regs.inc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_usr_regs.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_usr_regs.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fsave_usr_regs.inc?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -0,0 +1,44 @@\n+/* c-isr library stuff of Andes NDS32 cpu for GNU compiler\n+   Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+   Contributed by Andes Technology Corporation.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+.macro SAVE_USR_REGS\n+/* Store User Special Registers according to supported ISA extension\n+   !!! WATCH OUT !!! Take care of 8-byte alignment issue.  */\n+#if __NDS32_EXT_IFC__ && (__NDS32_EXT_ZOL__ || __NDS32_EXT_DSP__)\n+  mfusr   $r1, $IFC_LP\n+  mfusr   $r2, $LB\n+  mfusr   $r3, $LE\n+  mfusr   $r4, $LC\n+  smw.adm $r1, [$sp], $r4, #0x0 /* Save even. Ok!  */\n+#elif __NDS32_EXT_IFC__\n+  mfusr   $r1, $IFC_LP\n+  smw.adm $r1, [$sp], $r2, #0x0\t/* Save extra $r2 to keep stack 8-byte aligned.  */\n+#elif (__NDS32_EXT_ZOL__ || __NDS32_EXT_DSP__)\n+  mfusr   $r1, $LB\n+  mfusr   $r2, $LE\n+  mfusr   $r3, $LC\n+  smw.adm $r1, [$sp], $r4, #0x0\t/* Save extra $r4 to keep stack 8-byte aligned.  */\n+#endif\n+.endm"}, {"sha": "643009eb80078c854f83d1745acc8341a85ef099", "filename": "libgcc/config/nds32/isr-library/vec_vid00.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid00.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid00.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid00.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.00, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_00\n \t.type\t_nds32_vector_00, @function\n _nds32_vector_00:"}, {"sha": "fd9bc8b6850ab7de6947111682be43f43e240613", "filename": "libgcc/config/nds32/isr-library/vec_vid01.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid01.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid01.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid01.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.01, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_01\n \t.type\t_nds32_vector_01, @function\n _nds32_vector_01:"}, {"sha": "c5a88435cab995fd50b74979c9ec42fd67f06872", "filename": "libgcc/config/nds32/isr-library/vec_vid02.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid02.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid02.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid02.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.02, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_02\n \t.type\t_nds32_vector_02, @function\n _nds32_vector_02:"}, {"sha": "7f11fb9166b8f559c7e192f4b2410674d3f33377", "filename": "libgcc/config/nds32/isr-library/vec_vid03.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid03.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid03.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid03.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.03, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_03\n \t.type\t_nds32_vector_03, @function\n _nds32_vector_03:"}, {"sha": "de2e249b78f82f028bf32e3380b6f9e82965ee64", "filename": "libgcc/config/nds32/isr-library/vec_vid04.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid04.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid04.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid04.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.04, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_04\n \t.type\t_nds32_vector_04, @function\n _nds32_vector_04:"}, {"sha": "62e1cdac4a30790e130d185ffb1fe7fabb59f5b8", "filename": "libgcc/config/nds32/isr-library/vec_vid05.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid05.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid05.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid05.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.05, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_05\n \t.type\t_nds32_vector_05, @function\n _nds32_vector_05:"}, {"sha": "e41a60c4db4c4787b205b71a1235ba6eea436f8b", "filename": "libgcc/config/nds32/isr-library/vec_vid06.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid06.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid06.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid06.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.06, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_06\n \t.type\t_nds32_vector_06, @function\n _nds32_vector_06:"}, {"sha": "b5447a85045ff59dedbb8601800aa575a0c1f558", "filename": "libgcc/config/nds32/isr-library/vec_vid07.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid07.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid07.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid07.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.07, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_07\n \t.type\t_nds32_vector_07, @function\n _nds32_vector_07:"}, {"sha": "2c07dd35416b2380c2833f704feaa686fc2d3c6b", "filename": "libgcc/config/nds32/isr-library/vec_vid08.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid08.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid08.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid08.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.08, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_08\n \t.type\t_nds32_vector_08, @function\n _nds32_vector_08:"}, {"sha": "e858cea5f1169252920e6aaa94976211bd04bbf0", "filename": "libgcc/config/nds32/isr-library/vec_vid09.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid09.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid09.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid09.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.09, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_09\n \t.type\t_nds32_vector_09, @function\n _nds32_vector_09:"}, {"sha": "e8bbc0b6a2ceadde5b0a68f5646e258e295d2027", "filename": "libgcc/config/nds32/isr-library/vec_vid10.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid10.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid10.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid10.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.10, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_10\n \t.type\t_nds32_vector_10, @function\n _nds32_vector_10:"}, {"sha": "92aebb410222385fe46a0815b1134dcee16fbade", "filename": "libgcc/config/nds32/isr-library/vec_vid11.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid11.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid11.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid11.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.11, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_11\n \t.type\t_nds32_vector_11, @function\n _nds32_vector_11:"}, {"sha": "6fd050afd401e1ed7948d5e52fc5b121efb2239a", "filename": "libgcc/config/nds32/isr-library/vec_vid12.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid12.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid12.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid12.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.12, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_12\n \t.type\t_nds32_vector_12, @function\n _nds32_vector_12:"}, {"sha": "0a45c456b24198f3f88aa24c060c08512f4c0c36", "filename": "libgcc/config/nds32/isr-library/vec_vid13.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid13.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid13.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid13.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.13, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_13\n \t.type\t_nds32_vector_13, @function\n _nds32_vector_13:"}, {"sha": "837b84876063037c52fe25ce907bf96d6793bb6c", "filename": "libgcc/config/nds32/isr-library/vec_vid14.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid14.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid14.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid14.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.14, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_14\n \t.type\t_nds32_vector_14, @function\n _nds32_vector_14:"}, {"sha": "c639aa444ba801fb935fa8067284b6a4bec09906", "filename": "libgcc/config/nds32/isr-library/vec_vid15.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid15.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid15.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid15.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.15, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_15\n \t.type\t_nds32_vector_15, @function\n _nds32_vector_15:"}, {"sha": "a762130631ccb18da5310f89a31cf802b79a6ce2", "filename": "libgcc/config/nds32/isr-library/vec_vid16.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid16.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid16.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid16.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.16, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_16\n \t.type\t_nds32_vector_16, @function\n _nds32_vector_16:"}, {"sha": "b17681fcb968420df699715f9243ba0fdcfe6f13", "filename": "libgcc/config/nds32/isr-library/vec_vid17.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid17.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid17.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid17.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.17, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_17\n \t.type\t_nds32_vector_17, @function\n _nds32_vector_17:"}, {"sha": "4166fa1957fc9d2d1245131347803d3c2fcafed6", "filename": "libgcc/config/nds32/isr-library/vec_vid18.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid18.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid18.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid18.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.18, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_18\n \t.type\t_nds32_vector_18, @function\n _nds32_vector_18:"}, {"sha": "0d7d1de38c7cded267bf9374fb9c770fa73dfcde", "filename": "libgcc/config/nds32/isr-library/vec_vid19.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid19.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid19.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid19.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.19, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_19\n \t.type\t_nds32_vector_19, @function\n _nds32_vector_19:"}, {"sha": "d39d74b9ad64ae9d10a70276dfc432509ac2a0c6", "filename": "libgcc/config/nds32/isr-library/vec_vid20.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid20.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid20.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid20.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.20, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_20\n \t.type\t_nds32_vector_20, @function\n _nds32_vector_20:"}, {"sha": "deff0cf9ea9de4d5966c095864effb8fd6a702b4", "filename": "libgcc/config/nds32/isr-library/vec_vid21.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid21.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid21.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid21.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.21, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_21\n \t.type\t_nds32_vector_21, @function\n _nds32_vector_21:"}, {"sha": "ebd3891af71b5e09596cdbc6f1b690167fff07e1", "filename": "libgcc/config/nds32/isr-library/vec_vid22.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid22.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid22.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid22.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.22, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_22\n \t.type\t_nds32_vector_22, @function\n _nds32_vector_22:"}, {"sha": "90562e77badb21afd8671c063383a6df3114d667", "filename": "libgcc/config/nds32/isr-library/vec_vid23.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid23.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid23.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid23.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.23, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_23\n \t.type\t_nds32_vector_23, @function\n _nds32_vector_23:"}, {"sha": "7bd344c6c26bac09619b264d4f5556e399c39ea4", "filename": "libgcc/config/nds32/isr-library/vec_vid24.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid24.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid24.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid24.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.24, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_24\n \t.type\t_nds32_vector_24, @function\n _nds32_vector_24:"}, {"sha": "245db6e67b0cdb2dd4d6315b674df53de2654a50", "filename": "libgcc/config/nds32/isr-library/vec_vid25.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid25.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid25.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid25.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.25, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_25\n \t.type\t_nds32_vector_25, @function\n _nds32_vector_25:"}, {"sha": "4df61ff52e4a017197a9e7b6962105a0450b72cd", "filename": "libgcc/config/nds32/isr-library/vec_vid26.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid26.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid26.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid26.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.26, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_26\n \t.type\t_nds32_vector_26, @function\n _nds32_vector_26:"}, {"sha": "50960dbd12c37a18e166cdbcef17e877ebf9867d", "filename": "libgcc/config/nds32/isr-library/vec_vid27.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid27.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid27.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid27.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.27, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_27\n \t.type\t_nds32_vector_27, @function\n _nds32_vector_27:"}, {"sha": "e44adbb58aff4c28b25b0c5f97f4b027024506b6", "filename": "libgcc/config/nds32/isr-library/vec_vid28.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid28.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid28.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid28.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.28, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_28\n \t.type\t_nds32_vector_28, @function\n _nds32_vector_28:"}, {"sha": "f7e6c770e2be5a1635e456062bf3e5d16ae4c68b", "filename": "libgcc/config/nds32/isr-library/vec_vid29.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid29.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid29.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid29.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.29, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_29\n \t.type\t_nds32_vector_29, @function\n _nds32_vector_29:"}, {"sha": "7fac25da175b346a43cfaa5bb962ec34de62ecb7", "filename": "libgcc/config/nds32/isr-library/vec_vid30.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid30.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid30.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid30.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.30, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_30\n \t.type\t_nds32_vector_30, @function\n _nds32_vector_30:"}, {"sha": "5857765d22eefc3755a9308bddce4016eb6680da", "filename": "libgcc/config/nds32/isr-library/vec_vid31.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid31.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid31.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid31.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.31, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_31\n \t.type\t_nds32_vector_31, @function\n _nds32_vector_31:"}, {"sha": "bcd5dbf88c88d7708ddb35baa54bb9ca4a1386e2", "filename": "libgcc/config/nds32/isr-library/vec_vid32.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid32.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid32.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid32.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.32, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_32\n \t.type\t_nds32_vector_32, @function\n _nds32_vector_32:"}, {"sha": "abfed4eaf7a460e5f6cc62c925d68019dac1214d", "filename": "libgcc/config/nds32/isr-library/vec_vid33.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid33.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid33.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid33.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.33, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_33\n \t.type\t_nds32_vector_33, @function\n _nds32_vector_33:"}, {"sha": "f9446bb1b07b23f6a8ff18706cbc302b017eafa6", "filename": "libgcc/config/nds32/isr-library/vec_vid34.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid34.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid34.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid34.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.34, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_34\n \t.type\t_nds32_vector_34, @function\n _nds32_vector_34:"}, {"sha": "8862137b38fef1af5e54f6ebcf3bec0aecc162ea", "filename": "libgcc/config/nds32/isr-library/vec_vid35.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid35.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid35.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid35.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.35, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_35\n \t.type\t_nds32_vector_35, @function\n _nds32_vector_35:"}, {"sha": "dbcbbf4298f50a9d2344cb8d5e48f388a30465a9", "filename": "libgcc/config/nds32/isr-library/vec_vid36.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid36.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid36.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid36.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.36, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_36\n \t.type\t_nds32_vector_36, @function\n _nds32_vector_36:"}, {"sha": "392f18bfe05fd3006320eca01b20d1162019c2dd", "filename": "libgcc/config/nds32/isr-library/vec_vid37.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid37.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid37.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid37.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.37, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_37\n \t.type\t_nds32_vector_37, @function\n _nds32_vector_37:"}, {"sha": "efe6619b3a773544ddbccd802543ae5a516e54b7", "filename": "libgcc/config/nds32/isr-library/vec_vid38.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid38.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid38.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid38.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.38, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_38\n \t.type\t_nds32_vector_38, @function\n _nds32_vector_38:"}, {"sha": "238c43aec88c30625e3bc3a752676437bacedc94", "filename": "libgcc/config/nds32/isr-library/vec_vid39.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid39.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid39.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid39.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.39, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_39\n \t.type\t_nds32_vector_39, @function\n _nds32_vector_39:"}, {"sha": "cf3eaa21fa614fe585b2362891afead04956402a", "filename": "libgcc/config/nds32/isr-library/vec_vid40.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid40.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid40.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid40.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.40, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_40\n \t.type\t_nds32_vector_40, @function\n _nds32_vector_40:"}, {"sha": "27b7aac3dbb6f9bac341b76bb33eae857d54bc00", "filename": "libgcc/config/nds32/isr-library/vec_vid41.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid41.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid41.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid41.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.41, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_41\n \t.type\t_nds32_vector_41, @function\n _nds32_vector_41:"}, {"sha": "bfeed46e26392adcce62f2a4306c6993257e682e", "filename": "libgcc/config/nds32/isr-library/vec_vid42.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid42.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid42.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid42.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.42, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_42\n \t.type\t_nds32_vector_42, @function\n _nds32_vector_42:"}, {"sha": "54640c9b4f72c679a0137c409e06d50374e34bdd", "filename": "libgcc/config/nds32/isr-library/vec_vid43.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid43.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid43.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid43.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.43, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_43\n \t.type\t_nds32_vector_43, @function\n _nds32_vector_43:"}, {"sha": "f617243c473a1eb398542bc8143496d9768911d9", "filename": "libgcc/config/nds32/isr-library/vec_vid44.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid44.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid44.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid44.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.44, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_44\n \t.type\t_nds32_vector_44, @function\n _nds32_vector_44:"}, {"sha": "2cfeb785b1b0830cab38a2b9a48361f5a84107dc", "filename": "libgcc/config/nds32/isr-library/vec_vid45.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid45.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid45.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid45.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.45, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_45\n \t.type\t_nds32_vector_45, @function\n _nds32_vector_45:"}, {"sha": "45c88477ee92638902592e332b746e51582d6a8d", "filename": "libgcc/config/nds32/isr-library/vec_vid46.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid46.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid46.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid46.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.46, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_46\n \t.type\t_nds32_vector_46, @function\n _nds32_vector_46:"}, {"sha": "25469e456fddec1bcc56088bdd55e7a03f465b7e", "filename": "libgcc/config/nds32/isr-library/vec_vid47.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid47.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid47.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid47.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.47, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_47\n \t.type\t_nds32_vector_47, @function\n _nds32_vector_47:"}, {"sha": "5a001194eddc1af87f9d9ab3af0f80e7bc660ec0", "filename": "libgcc/config/nds32/isr-library/vec_vid48.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid48.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid48.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid48.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.48, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_48\n \t.type\t_nds32_vector_48, @function\n _nds32_vector_48:"}, {"sha": "dfe11f1401707d91914c15d79800fb174667ee3c", "filename": "libgcc/config/nds32/isr-library/vec_vid49.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid49.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid49.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid49.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.49, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_49\n \t.type\t_nds32_vector_49, @function\n _nds32_vector_49:"}, {"sha": "0dacd26315d8e3d058f58fd206988fae1bc18490", "filename": "libgcc/config/nds32/isr-library/vec_vid50.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid50.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid50.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid50.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.50, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_50\n \t.type\t_nds32_vector_50, @function\n _nds32_vector_50:"}, {"sha": "5ab28ef723860e56d2a399c1caafa74049e4de65", "filename": "libgcc/config/nds32/isr-library/vec_vid51.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid51.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid51.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid51.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.51, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_51\n \t.type\t_nds32_vector_51, @function\n _nds32_vector_51:"}, {"sha": "ed00f4000d1a4591cdd7b6057cd903e4fe882185", "filename": "libgcc/config/nds32/isr-library/vec_vid52.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid52.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid52.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid52.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.52, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_52\n \t.type\t_nds32_vector_52, @function\n _nds32_vector_52:"}, {"sha": "564cadbf1d477daebb7faae12e73f02433e6f67a", "filename": "libgcc/config/nds32/isr-library/vec_vid53.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid53.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid53.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid53.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.53, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_53\n \t.type\t_nds32_vector_53, @function\n _nds32_vector_53:"}, {"sha": "377c524361e57ad5dfe9bcb124f149975886bce3", "filename": "libgcc/config/nds32/isr-library/vec_vid54.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid54.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid54.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid54.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.54, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_54\n \t.type\t_nds32_vector_54, @function\n _nds32_vector_54:"}, {"sha": "497252ada22e967481ecddfaabec12aabd2730b4", "filename": "libgcc/config/nds32/isr-library/vec_vid55.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid55.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid55.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid55.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.55, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_55\n \t.type\t_nds32_vector_55, @function\n _nds32_vector_55:"}, {"sha": "b62534b9cbc328e91a5557eba0cee30de070e125", "filename": "libgcc/config/nds32/isr-library/vec_vid56.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid56.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid56.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid56.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.56, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_56\n \t.type\t_nds32_vector_56, @function\n _nds32_vector_56:"}, {"sha": "b1bb42d9c038c65921a4a332d2437fb5e31dcaea", "filename": "libgcc/config/nds32/isr-library/vec_vid57.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid57.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid57.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid57.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.57, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_57\n \t.type\t_nds32_vector_57, @function\n _nds32_vector_57:"}, {"sha": "14595a527a95a3fa4501faf2f8038d76c6fe8857", "filename": "libgcc/config/nds32/isr-library/vec_vid58.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid58.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid58.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid58.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.58, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_58\n \t.type\t_nds32_vector_58, @function\n _nds32_vector_58:"}, {"sha": "e5be1772425c9e161f27c1135db67b3a07d4a919", "filename": "libgcc/config/nds32/isr-library/vec_vid59.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid59.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid59.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid59.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.59, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_59\n \t.type\t_nds32_vector_59, @function\n _nds32_vector_59:"}, {"sha": "f6df97129077d43ff8c0f0590ddd9b95b20ea794", "filename": "libgcc/config/nds32/isr-library/vec_vid60.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid60.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid60.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid60.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.60, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_60\n \t.type\t_nds32_vector_60, @function\n _nds32_vector_60:"}, {"sha": "4f97b043154c76a16c5cc45073f73c32f02a1228", "filename": "libgcc/config/nds32/isr-library/vec_vid61.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid61.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid61.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid61.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.61, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_61\n \t.type\t_nds32_vector_61, @function\n _nds32_vector_61:"}, {"sha": "08d1bbb2567c028ab7f6bbdef598dbdef5f3888e", "filename": "libgcc/config/nds32/isr-library/vec_vid62.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid62.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid62.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid62.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.62, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_62\n \t.type\t_nds32_vector_62, @function\n _nds32_vector_62:"}, {"sha": "2b2068c4fb5fb6adedf95b9eae61ef72f4d035fe", "filename": "libgcc/config/nds32/isr-library/vec_vid63.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid63.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid63.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid63.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.63, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_63\n \t.type\t_nds32_vector_63, @function\n _nds32_vector_63:"}, {"sha": "2c06ea0cc900bb6a91a5f16b183818ef02a8c6db", "filename": "libgcc/config/nds32/isr-library/vec_vid64.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid64.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.64, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_64\n \t.type\t_nds32_vector_64, @function\n _nds32_vector_64:"}, {"sha": "d2359fd6b2b819c2be43aa053da1454398cbeb9d", "filename": "libgcc/config/nds32/isr-library/vec_vid65.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid65.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid65.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid65.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.65, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_65\n \t.type\t_nds32_vector_65, @function\n _nds32_vector_65:"}, {"sha": "69ccf368f6d61aa99a983a9515904539c33eca5d", "filename": "libgcc/config/nds32/isr-library/vec_vid66.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid66.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid66.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid66.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.66, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_66\n \t.type\t_nds32_vector_66, @function\n _nds32_vector_66:"}, {"sha": "78a68cb89a956d75d0bcb6ca72440fc14f25eadc", "filename": "libgcc/config/nds32/isr-library/vec_vid67.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid67.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid67.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid67.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.67, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_67\n \t.type\t_nds32_vector_67, @function\n _nds32_vector_67:"}, {"sha": "a120ec343772d9b4140f8142f0a07e5f3d21bbb7", "filename": "libgcc/config/nds32/isr-library/vec_vid68.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid68.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid68.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid68.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.68, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_68\n \t.type\t_nds32_vector_68, @function\n _nds32_vector_68:"}, {"sha": "e2bdd5f04429a1a7f80b382f631600e5583742bf", "filename": "libgcc/config/nds32/isr-library/vec_vid69.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid69.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid69.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid69.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.69, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_69\n \t.type\t_nds32_vector_69, @function\n _nds32_vector_69:"}, {"sha": "a5ac1f306fff9c50ce15e141a31a31278704d316", "filename": "libgcc/config/nds32/isr-library/vec_vid70.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid70.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid70.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid70.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.70, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_70\n \t.type\t_nds32_vector_70, @function\n _nds32_vector_70:"}, {"sha": "06ed89c633a334bbbef7f3a3664d98cc3edee246", "filename": "libgcc/config/nds32/isr-library/vec_vid71.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid71.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid71.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid71.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.71, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_71\n \t.type\t_nds32_vector_71, @function\n _nds32_vector_71:"}, {"sha": "2163201b620524463f71b5cc7d3fca9c02e53e05", "filename": "libgcc/config/nds32/isr-library/vec_vid72.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid72.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid72.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Fisr-library%2Fvec_vid72.S?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -24,8 +24,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n \t.section\t.nds32_vector.72, \"ax\"\n+#if __NDS32_ISR_VECTOR_SIZE_4__\n+\t/* The vector size is default 4-byte for v3 architecture.  */\n+\t.vec_size\t4\n+\t.align\t2\n+#else\n+\t/* The vector size is default 16-byte for other architectures.  */\n \t.vec_size\t16\n \t.align\t4\n+#endif\n \t.weak\t_nds32_vector_72\n \t.type\t_nds32_vector_72, @function\n _nds32_vector_72:"}, {"sha": "abfd82b2248452c4e6d4cd9a3b3e0f371bf38be4", "filename": "libgcc/config/nds32/t-nds32-isr", "status": "modified", "additions": 24, "deletions": 88, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Ft-nds32-isr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49317452416282f4cb4da0149754c58d87b2241/libgcc%2Fconfig%2Fnds32%2Ft-nds32-isr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Ft-nds32-isr?ref=a49317452416282f4cb4da0149754c58d87b2241", "patch": "@@ -23,11 +23,11 @@\n # Makfile fragment rules for libnds32_isr.a to support ISR attribute extension\n ###############################################################################\n \n-# basic flags setting\n+# Basic flags setting.\n ISR_CFLAGS = $(CFLAGS) -c\n \n-# the object files we would like to create\n-LIBNDS32_ISR_16B_OBJS = \\\n+# The object files we would like to create.\n+LIBNDS32_ISR_VEC_OBJS = \\\n \t\tvec_vid00.o vec_vid01.o vec_vid02.o vec_vid03.o \\\n \t\tvec_vid04.o vec_vid05.o vec_vid06.o vec_vid07.o \\\n \t\tvec_vid08.o vec_vid09.o vec_vid10.o vec_vid11.o \\\n@@ -46,40 +46,9 @@ LIBNDS32_ISR_16B_OBJS = \\\n \t\tvec_vid60.o vec_vid61.o vec_vid62.o vec_vid63.o \\\n \t\tvec_vid64.o vec_vid65.o vec_vid66.o vec_vid67.o \\\n \t\tvec_vid68.o vec_vid69.o vec_vid70.o vec_vid71.o \\\n-\t\tvec_vid72.o \\\n-\t\texcp_isr_ps_nn.o excp_isr_ps_ns.o excp_isr_ps_nr.o \\\n-\t\texcp_isr_sa_nn.o excp_isr_sa_ns.o excp_isr_sa_nr.o \\\n-\t\tintr_isr_ps_nn.o intr_isr_ps_ns.o intr_isr_ps_nr.o \\\n-\t\tintr_isr_sa_nn.o intr_isr_sa_ns.o intr_isr_sa_nr.o \\\n-\t\treset.o\n-\n-LIBNDS32_ISR_4B_OBJS = \\\n-\t\tvec_vid00_4b.o vec_vid01_4b.o vec_vid02_4b.o vec_vid03_4b.o \\\n-\t\tvec_vid04_4b.o vec_vid05_4b.o vec_vid06_4b.o vec_vid07_4b.o \\\n-\t\tvec_vid08_4b.o vec_vid09_4b.o vec_vid10_4b.o vec_vid11_4b.o \\\n-\t\tvec_vid12_4b.o vec_vid13_4b.o vec_vid14_4b.o vec_vid15_4b.o \\\n-\t\tvec_vid16_4b.o vec_vid17_4b.o vec_vid18_4b.o vec_vid19_4b.o \\\n-\t\tvec_vid20_4b.o vec_vid21_4b.o vec_vid22_4b.o vec_vid23_4b.o \\\n-\t\tvec_vid24_4b.o vec_vid25_4b.o vec_vid26_4b.o vec_vid27_4b.o \\\n-\t\tvec_vid28_4b.o vec_vid29_4b.o vec_vid30_4b.o vec_vid31_4b.o \\\n-\t\tvec_vid32_4b.o vec_vid33_4b.o vec_vid34_4b.o vec_vid35_4b.o \\\n-\t\tvec_vid36_4b.o vec_vid37_4b.o vec_vid38_4b.o vec_vid39_4b.o \\\n-\t\tvec_vid40_4b.o vec_vid41_4b.o vec_vid42_4b.o vec_vid43_4b.o \\\n-\t\tvec_vid44_4b.o vec_vid45_4b.o vec_vid46_4b.o vec_vid47_4b.o \\\n-\t\tvec_vid48_4b.o vec_vid49_4b.o vec_vid50_4b.o vec_vid51_4b.o \\\n-\t\tvec_vid52_4b.o vec_vid53_4b.o vec_vid54_4b.o vec_vid55_4b.o \\\n-\t\tvec_vid56_4b.o vec_vid57_4b.o vec_vid58_4b.o vec_vid59_4b.o \\\n-\t\tvec_vid60_4b.o vec_vid61_4b.o vec_vid62_4b.o vec_vid63_4b.o \\\n-\t\tvec_vid64_4b.o vec_vid65_4b.o vec_vid66_4b.o vec_vid67_4b.o \\\n-\t\tvec_vid68_4b.o vec_vid69_4b.o vec_vid70_4b.o vec_vid71_4b.o \\\n-\t\tvec_vid72_4b.o \\\n-\t\texcp_isr_ps_nn_4b.o excp_isr_ps_ns_4b.o excp_isr_ps_nr_4b.o \\\n-\t\texcp_isr_sa_nn_4b.o excp_isr_sa_ns_4b.o excp_isr_sa_nr_4b.o \\\n-\t\tintr_isr_ps_nn_4b.o intr_isr_ps_ns_4b.o intr_isr_ps_nr_4b.o \\\n-\t\tintr_isr_sa_nn_4b.o intr_isr_sa_ns_4b.o intr_isr_sa_nr_4b.o \\\n-\t\treset_4b.o\n+\t\tvec_vid72.o\n \n-LIBNDS32_ISR_COMMON_OBJS = \\\n+LIBNDS32_ISR_JMP_OBJS = \\\n \t\tjmptbl_vid00.o jmptbl_vid01.o jmptbl_vid02.o jmptbl_vid03.o \\\n \t\tjmptbl_vid04.o jmptbl_vid05.o jmptbl_vid06.o jmptbl_vid07.o \\\n \t\tjmptbl_vid08.o jmptbl_vid09.o jmptbl_vid10.o jmptbl_vid11.o \\\n@@ -98,29 +67,32 @@ LIBNDS32_ISR_COMMON_OBJS = \\\n \t\tjmptbl_vid60.o jmptbl_vid61.o jmptbl_vid62.o jmptbl_vid63.o \\\n \t\tjmptbl_vid64.o jmptbl_vid65.o jmptbl_vid66.o jmptbl_vid67.o \\\n \t\tjmptbl_vid68.o jmptbl_vid69.o jmptbl_vid70.o jmptbl_vid71.o \\\n-\t\tjmptbl_vid72.o \\\n+\t\tjmptbl_vid72.o\n+\n+LIBNDS32_ISR_COMMON_OBJS = \\\n+\t\texcp_isr_ps_nn.o excp_isr_ps_ns.o excp_isr_ps_nr.o \\\n+\t\texcp_isr_sa_nn.o excp_isr_sa_ns.o excp_isr_sa_nr.o \\\n+\t\tintr_isr_ps_nn.o intr_isr_ps_ns.o intr_isr_ps_nr.o \\\n+\t\tintr_isr_sa_nn.o intr_isr_sa_ns.o intr_isr_sa_nr.o \\\n+\t\treset.o \\\n \t\tnmih.o \\\n \t\twrh.o\n \n-LIBNDS32_ISR_COMPLETE_OBJS = $(LIBNDS32_ISR_16B_OBJS) $(LIBNDS32_ISR_4B_OBJS) $(LIBNDS32_ISR_COMMON_OBJS)\n+LIBNDS32_ISR_COMPLETE_OBJS = $(LIBNDS32_ISR_VEC_OBJS) $(LIBNDS32_ISR_JMP_OBJS) $(LIBNDS32_ISR_COMMON_OBJS)\n \n \n-# Build common objects for ISR library\n-nmih.o: $(srcdir)/config/nds32/isr-library/nmih.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $(srcdir)/config/nds32/isr-library/nmih.S -o nmih.o\n \n-wrh.o: $(srcdir)/config/nds32/isr-library/wrh.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $(srcdir)/config/nds32/isr-library/wrh.S -o wrh.o\n-\n-jmptbl_vid%.o: $(srcdir)/config/nds32/isr-library/jmptbl_vid%.S\n+# Build vector vid objects for ISR library.\n+vec_vid%.o: $(srcdir)/config/nds32/isr-library/vec_vid%.S\n \t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $< -o $@\n \n \n-\n-# Build 16b version objects for ISR library. (no \"_4b\" postfix string)\n-vec_vid%.o: $(srcdir)/config/nds32/isr-library/vec_vid%.S\n+# Build jump table objects for ISR library.\n+jmptbl_vid%.o: $(srcdir)/config/nds32/isr-library/jmptbl_vid%.S\n \t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $< -o $@\n \n+\n+# Build commen objects for ISR library.\n excp_isr_ps_nn.o: $(srcdir)/config/nds32/isr-library/excp_isr.S\n \t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $(srcdir)/config/nds32/isr-library/excp_isr.S -o excp_isr_ps_nn.o\n \n@@ -160,48 +132,12 @@ intr_isr_sa_nr.o: $(srcdir)/config/nds32/isr-library/intr_isr.S\n reset.o: $(srcdir)/config/nds32/isr-library/reset.S\n \t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $(srcdir)/config/nds32/isr-library/reset.S -o reset.o\n \n-# Build 4b version objects for ISR library.\n-vec_vid%_4b.o: $(srcdir)/config/nds32/isr-library/vec_vid%_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $< -o $@\n-\n-excp_isr_ps_nn_4b.o: $(srcdir)/config/nds32/isr-library/excp_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $(srcdir)/config/nds32/isr-library/excp_isr_4b.S -o excp_isr_ps_nn_4b.o\n-\n-excp_isr_ps_ns_4b.o: $(srcdir)/config/nds32/isr-library/excp_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_NESTED $(srcdir)/config/nds32/isr-library/excp_isr_4b.S -o excp_isr_ps_ns_4b.o\n-\n-excp_isr_ps_nr_4b.o: $(srcdir)/config/nds32/isr-library/excp_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_NESTED_READY $(srcdir)/config/nds32/isr-library/excp_isr_4b.S -o excp_isr_ps_nr_4b.o\n-\n-excp_isr_sa_nn_4b.o: $(srcdir)/config/nds32/isr-library/excp_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_SAVE_ALL_REGS $(srcdir)/config/nds32/isr-library/excp_isr_4b.S -o excp_isr_sa_nn_4b.o\n-\n-excp_isr_sa_ns_4b.o: $(srcdir)/config/nds32/isr-library/excp_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_SAVE_ALL_REGS -DNDS32_NESTED $(srcdir)/config/nds32/isr-library/excp_isr_4b.S -o excp_isr_sa_ns_4b.o\n-\n-excp_isr_sa_nr_4b.o: $(srcdir)/config/nds32/isr-library/excp_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_SAVE_ALL_REGS -DNDS32_NESTED_READY $(srcdir)/config/nds32/isr-library/excp_isr_4b.S -o excp_isr_sa_nr_4b.o\n-\n-intr_isr_ps_nn_4b.o: $(srcdir)/config/nds32/isr-library/intr_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $(srcdir)/config/nds32/isr-library/intr_isr_4b.S -o intr_isr_ps_nn_4b.o\n-\n-intr_isr_ps_ns_4b.o: $(srcdir)/config/nds32/isr-library/intr_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_NESTED $(srcdir)/config/nds32/isr-library/intr_isr_4b.S -o intr_isr_ps_ns_4b.o\n-\n-intr_isr_ps_nr_4b.o: $(srcdir)/config/nds32/isr-library/intr_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_NESTED_READY $(srcdir)/config/nds32/isr-library/intr_isr_4b.S -o intr_isr_ps_nr_4b.o\n-\n-intr_isr_sa_nn_4b.o: $(srcdir)/config/nds32/isr-library/intr_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_SAVE_ALL_REGS $(srcdir)/config/nds32/isr-library/intr_isr_4b.S -o intr_isr_sa_nn_4b.o\n-\n-intr_isr_sa_ns_4b.o: $(srcdir)/config/nds32/isr-library/intr_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_SAVE_ALL_REGS -DNDS32_NESTED $(srcdir)/config/nds32/isr-library/intr_isr_4b.S -o intr_isr_sa_ns_4b.o\n+nmih.o: $(srcdir)/config/nds32/isr-library/nmih.S\n+\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $(srcdir)/config/nds32/isr-library/nmih.S -o nmih.o\n \n-intr_isr_sa_nr_4b.o: $(srcdir)/config/nds32/isr-library/intr_isr_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) -DNDS32_SAVE_ALL_REGS -DNDS32_NESTED_READY $(srcdir)/config/nds32/isr-library/intr_isr_4b.S -o intr_isr_sa_nr_4b.o\n+wrh.o: $(srcdir)/config/nds32/isr-library/wrh.S\n+\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $(srcdir)/config/nds32/isr-library/wrh.S -o wrh.o\n \n-reset_4b.o: $(srcdir)/config/nds32/isr-library/reset_4b.S\n-\t$(GCC_FOR_TARGET) $(ISR_CFLAGS) $(srcdir)/config/nds32/isr-library/reset_4b.S -o reset_4b.o\n \n \n # The rule to create libnds32_isr.a file"}]}