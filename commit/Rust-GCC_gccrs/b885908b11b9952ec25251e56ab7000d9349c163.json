{"sha": "b885908b11b9952ec25251e56ab7000d9349c163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg4NTkwOGIxMWI5OTUyZWMyNTI1MWU1NmFiNzAwMGQ5MzQ5YzE2Mw==", "commit": {"author": {"name": "Mostafa Hagog", "email": "mustafa@il.ibm.com", "date": "2003-09-04T02:10:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-09-04T02:10:32Z"}, "message": "gcse.c (replace_one_set): New function.\n\n        * gcse.c (replace_one_set): New function.\n        (pre_insert_copy_insn): Change the order of copying\n        to make copy propagation discover additional PRE opportunities.\n\nFrom-SVN: r71047", "tree": {"sha": "707ffa5fd1ad06d1035bb2d6960ade72bcd2659e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/707ffa5fd1ad06d1035bb2d6960ade72bcd2659e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b885908b11b9952ec25251e56ab7000d9349c163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b885908b11b9952ec25251e56ab7000d9349c163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b885908b11b9952ec25251e56ab7000d9349c163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b885908b11b9952ec25251e56ab7000d9349c163/comments", "author": null, "committer": null, "parents": [{"sha": "bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "bd7880186cf21b989c6bbf63103a6f35a3c372d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b885908b11b9952ec25251e56ab7000d9349c163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b885908b11b9952ec25251e56ab7000d9349c163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b885908b11b9952ec25251e56ab7000d9349c163", "patch": "@@ -1,3 +1,9 @@\n+2003-09-03  Mostafa Hagog  <mustafa@il.ibm.com>\n+\n+\t* gcse.c (replace_one_set): New function.\n+\t(pre_insert_copy_insn): Change the order of copying\n+\tto make copy propagation discover additional PRE opportunities.\n+\n 2003-09-03  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/11700."}, {"sha": "97796637e548ebbd7058e24533a48fe1f3902e8e", "filename": "gcc/gcse.c", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b885908b11b9952ec25251e56ab7000d9349c163/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b885908b11b9952ec25251e56ab7000d9349c163/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=b885908b11b9952ec25251e56ab7000d9349c163", "patch": "@@ -559,6 +559,7 @@ static void alloc_reg_set_mem (int);\n static void free_reg_set_mem (void);\n static int get_bitmap_width (int, int, int);\n static void record_one_set (int, rtx);\n+static void replace_one_set (int, rtx, rtx);\n static void record_set_info (rtx, rtx, void *);\n static void compute_sets (rtx);\n static void hash_scan_insn (rtx, struct hash_table *, int);\n@@ -1176,6 +1177,24 @@ free_reg_set_mem (void)\n   obstack_free (&reg_set_obstack, NULL);\n }\n \n+/* An OLD_INSN that used to set REGNO was replaced by NEW_INSN.\n+   Update the corresponding `reg_set_table' entry accordingly.\n+   We assume that NEW_INSN is not already recorded in reg_set_table[regno].  */\n+\n+static void\n+replace_one_set (int regno, rtx old_insn, rtx new_insn)\n+{\n+  struct reg_set *reg_info;\n+  if (regno >= reg_set_table_size)\n+    return;\n+  for (reg_info = reg_set_table[regno]; reg_info; reg_info = reg_info->next)\n+    if (reg_info->insn == old_insn)\n+      {\n+        reg_info->insn = new_insn;\n+        break;\n+      }\n+}\n+\n /* Record REGNO in the reg_set table.  */\n \n static void\n@@ -5327,7 +5346,14 @@ pre_edge_insert (struct edge_list *edge_list, struct expr **index_map)\n   return did_insert;\n }\n \n-/* Copy the result of INSN to REG.  INDX is the expression number.  */\n+/* Copy the result of INSN to REG.  INDX is the expression number.\n+   Given \"old_reg <- expr\" (INSN), instead of adding after it\n+     reaching_reg <- old_reg\n+   it's better to do the following:\n+     reaching_reg <- expr\n+     old_reg      <- reaching_reg\n+   because this way copy propagation can discover additional PRE\n+   opportunuties.  */\n \n static void\n pre_insert_copy_insn (struct expr *expr, rtx insn)\n@@ -5337,14 +5363,25 @@ pre_insert_copy_insn (struct expr *expr, rtx insn)\n   int indx = expr->bitmap_index;\n   rtx set = single_set (insn);\n   rtx new_insn;\n+  rtx new_set;\n+  rtx old_reg;\n \n   if (!set)\n     abort ();\n \n-  new_insn = emit_insn_after (gen_move_insn (reg, copy_rtx (SET_DEST (set))), insn);\n+  old_reg = SET_DEST (set);\n+  new_insn = emit_insn_after (gen_move_insn (old_reg,\n+                                             reg),\n+                              insn);\n+  new_set = single_set (new_insn);\n+\n+  if (!new_set)\n+    abort();\n+  SET_DEST (set) = reg;\n \n   /* Keep register set table up to date.  */\n-  record_one_set (regno, new_insn);\n+  replace_one_set (REGNO (old_reg), insn, new_insn);\n+  record_one_set (regno, insn);\n \n   gcse_create_count++;\n "}]}