{"sha": "ee2e8462156f5da92ba396af59994dc07d0a2f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUyZTg0NjIxNTZmNWRhOTJiYTM5NmFmNTk5OTRkYzA3ZDBhMmY0OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-11-14T23:58:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-11-14T23:58:39Z"}, "message": "cfgexpand.c (defer_stack_allocation): When optimization is enabled...\n\n\t* cfgexpand.c (defer_stack_allocation): When optimization is enabled,\n\tdefer allocation of DECL_IGNORED_P variables at toplevel unless really\n\tsmall.  Factorize size threshold computation from the existing one.\n\t(expand_used_vars): Refine comment.\n\nFrom-SVN: r204830", "tree": {"sha": "e4e098752237dcccb7029268d80bc4bdc569f1fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4e098752237dcccb7029268d80bc4bdc569f1fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee2e8462156f5da92ba396af59994dc07d0a2f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2e8462156f5da92ba396af59994dc07d0a2f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee2e8462156f5da92ba396af59994dc07d0a2f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2e8462156f5da92ba396af59994dc07d0a2f48/comments", "author": null, "committer": null, "parents": [{"sha": "ed1fc0bc29a437bf41c22b2ef1ce27769f5c00cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed1fc0bc29a437bf41c22b2ef1ce27769f5c00cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed1fc0bc29a437bf41c22b2ef1ce27769f5c00cf"}], "stats": {"total": 119, "additions": 111, "deletions": 8}, "files": [{"sha": "bdee3162a64adc46a54bc7f1f5f3dc7f0455a369", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee2e8462156f5da92ba396af59994dc07d0a2f48", "patch": "@@ -1,3 +1,10 @@\n+2013-11-14   Olivier Hainque  <hainque@adacore.com>\n+\n+\t* cfgexpand.c (defer_stack_allocation): When optimization is enabled,\n+\tdefer allocation of DECL_IGNORED_P variables at toplevel unless really\n+\tsmall.  Factorize size threshold computation from the existing one.\n+\t(expand_used_vars): Refine comment.\n+\n 2013-11-14  Cong Hou  <congh@google.com>\n \n \t* tree-vectorizer.h (struct dr_with_seg_len): Remove the base"}, {"sha": "3100688d72e2093297944ba3ed8b7a42578b01b9", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=ee2e8462156f5da92ba396af59994dc07d0a2f48", "patch": "@@ -1130,6 +1130,12 @@ expand_one_error_var (tree var)\n static bool\n defer_stack_allocation (tree var, bool toplevel)\n {\n+  /* Whether the variable is small enough for immediate allocation not to be\n+     a problem with regard to the frame size.  */\n+  bool smallish\n+    = (tree_low_cst (DECL_SIZE_UNIT (var), 1)\n+       < PARAM_VALUE (PARAM_MIN_SIZE_FOR_STACK_SHARING));\n+\n   /* If stack protection is enabled, *all* stack variables must be deferred,\n      so that we can re-order the strings to the top of the frame.\n      Similarly for Address Sanitizer.  */\n@@ -1141,8 +1147,15 @@ defer_stack_allocation (tree var, bool toplevel)\n   if (DECL_ALIGN (var) > MAX_SUPPORTED_STACK_ALIGNMENT)\n     return true;\n \n-  /* Variables in the outermost scope automatically conflict with\n-     every other variable.  The only reason to want to defer them\n+  /* When optimization is enabled, DECL_IGNORED_P variables originally scoped\n+     might be detached from their block and appear at toplevel when we reach\n+     here.  We want to coalesce them with variables from other blocks when\n+     the immediate contribution to the frame size would be noticeable.  */\n+  if (toplevel && optimize > 0 && DECL_IGNORED_P (var) && !smallish)\n+    return true;\n+\n+  /* Variables declared in the outermost scope automatically conflict\n+     with every other variable.  The only reason to want to defer them\n      at all is that, after sorting, we can more efficiently pack\n      small variables in the stack frame.  Continue to defer at -O2.  */\n   if (toplevel && optimize < 2)\n@@ -1154,9 +1167,7 @@ defer_stack_allocation (tree var, bool toplevel)\n      other hand, we don't want the function's stack frame size to\n      get completely out of hand.  So we avoid adding scalars and\n      \"small\" aggregates to the list at all.  */\n-  if (optimize == 0\n-      && (tree_low_cst (DECL_SIZE_UNIT (var), 1)\n-          < PARAM_VALUE (PARAM_MIN_SIZE_FOR_STACK_SHARING)))\n+  if (optimize == 0 && smallish)\n     return false;\n \n   return true;\n@@ -1676,9 +1687,11 @@ expand_used_vars (void)\n       else if (TREE_STATIC (var) || DECL_EXTERNAL (var))\n \texpand_now = true;\n \n-      /* If the variable is not associated with any block, then it\n-\t was created by the optimizers, and could be live anywhere\n-\t in the function.  */\n+      /* Expand variables not associated with any block now.  Those created by\n+\t the optimizers could be live anywhere in the function.  Those that\n+\t could possibly have been scoped originally and detached from their\n+\t block will have their allocation deferred so we coalesce them with\n+\t others when optimization is enabled.  */\n       else if (TREE_USED (var))\n \texpand_now = true;\n "}, {"sha": "2dc4a31ef2f192c42f6979d85e9cf86d6f5e8708", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee2e8462156f5da92ba396af59994dc07d0a2f48", "patch": "@@ -1,3 +1,8 @@\n+2013-11-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/stack_usage1b.adb: New test.\n+\t* gnat.dg/stack_usage1c.adb: Likewise.\n+\n 2013-11-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gnat.dg/specs/addr1.ads: Revert the last change."}, {"sha": "4129c0d34a78c1c4b48e1b52991bf183790bbfd7", "filename": "gcc/testsuite/gnat.dg/stack_usage1b.adb", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage1b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage1b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage1b.adb?ref=ee2e8462156f5da92ba396af59994dc07d0a2f48", "patch": "@@ -0,0 +1,39 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -fstack-usage\" }\n+\n+with Stack_Usage1_Pkg; use Stack_Usage1_Pkg;\n+\n+procedure Stack_Usage1b is\n+\n+   A : Integer := Ident_Int (123);\n+\n+begin\n+   case A is\n+       when 0 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 1 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 2 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 3 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 4 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 5 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 6 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 7 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 8 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 9 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when others =>\n+          null;\n+   end case;\n+\n+end Stack_Usage1b;\n+\n+-- { dg-final { scan-stack-usage \"\\t\\[0-9\\]\\[0-9\\]\\t\" { target i?86-*-* x86_64-*-* } } }\n+-- { dg-final { cleanup-stack-usage } }"}, {"sha": "41b7a60563ab0133b4c8ab79ebfeaea4ac779851", "filename": "gcc/testsuite/gnat.dg/stack_usage1c.adb", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage1c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2e8462156f5da92ba396af59994dc07d0a2f48/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage1c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage1c.adb?ref=ee2e8462156f5da92ba396af59994dc07d0a2f48", "patch": "@@ -0,0 +1,39 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fstack-usage\" }\n+\n+with Stack_Usage1_Pkg; use Stack_Usage1_Pkg;\n+\n+procedure Stack_Usage1c is\n+\n+   A : Integer := Ident_Int (123);\n+\n+begin\n+   case A is\n+       when 0 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 1 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 2 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 3 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 4 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 5 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 6 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 7 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 8 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when 9 =>\n+          My_Proc (R'(Ident_Int(0), Ident_Int(1), Ident_Int(2), Ident_Int(3), Ident_Int(4), Ident_Int(5), Ident_Int(6), Ident_Int(7), Ident_Int(8), Ident_Int(9)));\n+       when others =>\n+          null;\n+   end case;\n+\n+end Stack_Usage1c;\n+\n+-- { dg-final { scan-stack-usage \"\\t\\[0-9\\]\\[0-9\\]\\t\" { target i?86-*-* x86_64-*-* } } }\n+-- { dg-final { cleanup-stack-usage } }"}]}