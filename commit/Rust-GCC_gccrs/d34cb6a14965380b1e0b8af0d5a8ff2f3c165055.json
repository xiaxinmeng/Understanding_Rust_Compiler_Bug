{"sha": "d34cb6a14965380b1e0b8af0d5a8ff2f3c165055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0Y2I2YTE0OTY1MzgwYjFlMGI4YWYwZDVhOGZmMmYzYzE2NTA1NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-13T23:59:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-13T23:59:19Z"}, "message": "Partial fix PR c++/12850\n\n\tPartial fix PR c++/12850\n\t* cgraphunit.c (cgraph_finalize_function): Always ggc_collect when\n\tat zero nest level.\n\n\t* decl2.c (mark_used): Do not proactively instantiate templates\n\twhen compiling in unit-at-a-time or not optimizing.\n\t* optimize.c (maybe_clone_body): Do not increase function depth.\n\nFrom-SVN: r75823", "tree": {"sha": "27cbfcbaa8a6b2863468e56d367667ff8cb34a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27cbfcbaa8a6b2863468e56d367667ff8cb34a0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/comments", "author": null, "committer": null, "parents": [{"sha": "c951359074f5d123d3cc96c56d47291623f74629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c951359074f5d123d3cc96c56d47291623f74629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c951359074f5d123d3cc96c56d47291623f74629"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "5794b117deb53e52a1fe2256d062738a38e6f7c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d34cb6a14965380b1e0b8af0d5a8ff2f3c165055", "patch": "@@ -1,9 +1,8 @@\n 2004-01-14  Jan Hubicka  <jh@suse.cz>\n \n-\t* c-common.c (c_estimate_num_insns_1):  Fix bug in MODIFY_EXPR\n-\tcost estimation.\n-\t* expr.c (MOVE_RATIO, CLEAR_RATIO): Move to ...\n-\t* expr.h (MOVE_RATIO, CLEAR_RATIO): ... here.\n+\tPartial fix PR c++/12850\n+\t* cgraphunit.c (cgraph_finalize_function): Always ggc_collect when\n+\tat zero nest level.\n \n 2004-01-13  Bernardo Innocenti  <bernie@develer.com>\n "}, {"sha": "e26a2c1730e208e58a333c871ceb3fdb294791ba", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=d34cb6a14965380b1e0b8af0d5a8ff2f3c165055", "patch": "@@ -219,7 +219,10 @@ cgraph_finalize_function (tree decl, bool nested)\n   /* If not unit at a time, go ahead and emit everything we've found\n      to be reachable at this time.  */\n   if (!nested)\n-    cgraph_assemble_pending_functions ();\n+    {\n+      if (!cgraph_assemble_pending_functions ())\n+\tggc_collect ();\n+    }\n \n   /* If we've not yet emitted decl, tell the debug info about it.  */\n   if (!TREE_ASM_WRITTEN (decl))"}, {"sha": "41a67d398bcf11e357c7ccfe9a09ad19c733fa7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d34cb6a14965380b1e0b8af0d5a8ff2f3c165055", "patch": "@@ -1,3 +1,10 @@\n+2004-01-14  Jan Hubicka  <jh@suse.cz>\n+\n+\tPartial fix to PR c++/12850\n+\t* decl2.c (mark_used): Do not proactively instantiate templates\n+\twhen compiling in unit-at-a-time or not optimizing.\n+\t* optimize.c (maybe_clone_body): Do not increase function depth.\n+\n 2004-01-13  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/13474"}, {"sha": "ec7b77dc659b59625336425035b84efb24a10a02", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d34cb6a14965380b1e0b8af0d5a8ff2f3c165055", "patch": "@@ -2580,6 +2580,7 @@ finish_file (void)\n       /* If there are templates that we've put off instantiating, do\n \t them now.  */\n       instantiate_pending_templates ();\n+      ggc_collect ();\n \n       /* Write out virtual tables as required.  Note that writing out\n   \t the virtual table for a template class may cause the\n@@ -3012,8 +3013,14 @@ mark_used (tree decl)\n \n \t However, if instantiating this function might help us mark\n \t the current function TREE_NOTHROW, we go ahead and\n-\t instantiate it now.  */\n+\t instantiate it now.  \n+\t \n+\t This is not needed for unit-at-a-time since we reorder the functions\n+\t in topological order anyway.\n+\t */\n       defer = (!flag_exceptions\n+\t       || flag_unit_at_a_time\n+\t       || !optimize\n \t       || TREE_CODE (decl) != FUNCTION_DECL\n \t       /* If the called function can't throw, we don't need to\n \t\t  generate its body to find that out.  */"}, {"sha": "1ddffc9c76cefb84419830f10645be395ef1af1c", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cb6a14965380b1e0b8af0d5a8ff2f3c165055/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=d34cb6a14965380b1e0b8af0d5a8ff2f3c165055", "patch": "@@ -129,11 +129,6 @@ maybe_clone_body (tree fn)\n   /* Emit the DWARF1 abstract instance.  */\n   (*debug_hooks->deferred_inline_function) (fn);\n \n-  /* Our caller does not expect collection to happen, which it might if\n-     we decide to compile the function to rtl now.  Arrange for a new\n-     gc context to be created if so.  */\n-  function_depth++;\n-\n   /* We know that any clones immediately follow FN in the TYPE_METHODS\n      list.  */\n   for (clone = TREE_CHAIN (fn);\n@@ -253,8 +248,6 @@ maybe_clone_body (tree fn)\n       pop_from_top_level ();\n     }\n \n-  function_depth--;\n-\n   /* We don't need to process the original function any further.  */\n   return 1;\n }"}]}