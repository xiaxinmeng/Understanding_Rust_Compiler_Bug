{"sha": "e262fdda8466aba838725ee425b0135d26239f90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI2MmZkZGE4NDY2YWJhODM4NzI1ZWU0MjViMDEzNWQyNjIzOWY5MA==", "commit": {"author": {"name": "Andreas Simbuerger", "email": "simbuerg@fim.uni-passau.de", "date": "2010-05-06T21:53:35Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-05-06T21:53:35Z"}, "message": "Replace Value with mpz_t\n\n2010-04-12  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n\n\t* graphite-blocking.c\n\t(pbb_strip_mine_profitable_p): Replace Value with mpz_t.\n\t* graphite-clast-to-gimple.c\n\t(clast_to_gcc_expression): Same.\n\t(precision_for_value): Same.\n\t(precision_for_interval): Same.\n\t(gcc_type_for_interval): Same.\n\t(graphite_create_new_guard): Same.\n\t(compute_bounds_for_level): Same.\n\t(graphite_create_new_loop_guard): Same.\n\t* graphite-interchange.c\n\t(build_linearized_memory_access): Same.\n\t(pdr_stride_in_loop): Same.\n\t(memory_strides_in_loop_1): Same.\n\t(memory_strides_in_loop): Same.\n\t(extend_scattering): Same.\n\t(psct_scattering_dim_for_loop_depth): Same.\n\t(pbb_number_of_iterations): Same.\n\t* graphite-poly.h\n\t(debug_iteration_domains): Same.\n\t* graphite-ppl.c\n\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n\t(ppl_set_inhomogeneous_gmp): Same.\n\t(ppl_strip_loop): Same.\n\t(ppl_lexico_compare_linear_expressions): Same.\n\t(ppl_read_polyhedron_matrix): Same.\n\t(ppl_max_for_le_pointset): Same.\n\t* graphite-ppl.h\n\t(ppl_read_polyhedron_matrix): Same.\n\t(tree_int_to_gmp): Same.\n\t(gmp_cst_to_tree): Same.\n\t(ppl_set_inhomogeneous): Same.\n\t(ppl_set_inhomogeneous_tree): Same.\n\t(ppl_set_coef): Same.\n\t(ppl_set_coef_tree): Same.\n\t* graphite-sese-to-poly.c\n\t(build_pbb_scattering_polyhedrons): Same.\n\t(build_scop_scattering): Same.\n\t(scan_tree_for_params_right_scev): Same.\n\t(scan_tree_for_params): Same.\n\t(find_params_in_bb): Same.\n\t(find_scop_parameters): Same.\n\t(add_upper_bounds_from_estimated_nit): Same.\n\t(build_loop_iteration_domains): Same.\n\t(add_condition_to_domain): Same.\n\t(pdr_add_memory_accesses): Same.\n\nFrom-SVN: r159133", "tree": {"sha": "9b0fedc22b2799157436b5c9bade37493464faf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b0fedc22b2799157436b5c9bade37493464faf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e262fdda8466aba838725ee425b0135d26239f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e262fdda8466aba838725ee425b0135d26239f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e262fdda8466aba838725ee425b0135d26239f90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e262fdda8466aba838725ee425b0135d26239f90/comments", "author": {"login": "simbuerg", "id": 598281, "node_id": "MDQ6VXNlcjU5ODI4MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/598281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simbuerg", "html_url": "https://github.com/simbuerg", "followers_url": "https://api.github.com/users/simbuerg/followers", "following_url": "https://api.github.com/users/simbuerg/following{/other_user}", "gists_url": "https://api.github.com/users/simbuerg/gists{/gist_id}", "starred_url": "https://api.github.com/users/simbuerg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simbuerg/subscriptions", "organizations_url": "https://api.github.com/users/simbuerg/orgs", "repos_url": "https://api.github.com/users/simbuerg/repos", "events_url": "https://api.github.com/users/simbuerg/events{/privacy}", "received_events_url": "https://api.github.com/users/simbuerg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0bb35c7749eee02213658ece0a5ac8347496fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bb35c7749eee02213658ece0a5ac8347496fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0bb35c7749eee02213658ece0a5ac8347496fef"}], "stats": {"total": 177, "additions": 113, "deletions": 64}, "files": [{"sha": "b45469bf9b284f4bf1a90ecc98defb1c0595af2d", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e262fdda8466aba838725ee425b0135d26239f90/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e262fdda8466aba838725ee425b0135d26239f90/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=e262fdda8466aba838725ee425b0135d26239f90", "patch": "@@ -1,3 +1,52 @@\n+2010-04-12  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n+\n+\t* graphite-blocking.c\n+\t(pbb_strip_mine_profitable_p): Replace Value with mpz_t.\n+\t* graphite-clast-to-gimple.c\n+\t(clast_to_gcc_expression): Same.\n+\t(precision_for_value): Same.\n+\t(precision_for_interval): Same.\n+\t(gcc_type_for_interval): Same.\n+\t(graphite_create_new_guard): Same.\n+\t(compute_bounds_for_level): Same.\n+\t(graphite_create_new_loop_guard): Same.\n+\t* graphite-interchange.c\n+\t(build_linearized_memory_access): Same.\n+\t(pdr_stride_in_loop): Same.\n+\t(memory_strides_in_loop_1): Same.\n+\t(memory_strides_in_loop): Same.\n+\t(extend_scattering): Same.\n+\t(psct_scattering_dim_for_loop_depth): Same.\n+\t(pbb_number_of_iterations): Same.\n+\t* graphite-poly.h\n+\t(debug_iteration_domains): Same.\n+\t* graphite-ppl.c\n+\t(new_Cloog_Domain_from_ppl_Pointset_Powerset): Same.\n+\t(ppl_set_inhomogeneous_gmp): Same.\n+\t(ppl_strip_loop): Same.\n+\t(ppl_lexico_compare_linear_expressions): Same.\n+\t(ppl_read_polyhedron_matrix): Same.\n+\t(ppl_max_for_le_pointset): Same.\n+\t* graphite-ppl.h\n+\t(ppl_read_polyhedron_matrix): Same.\n+\t(tree_int_to_gmp): Same.\n+\t(gmp_cst_to_tree): Same.\n+\t(ppl_set_inhomogeneous): Same.\n+\t(ppl_set_inhomogeneous_tree): Same.\n+\t(ppl_set_coef): Same.\n+\t(ppl_set_coef_tree): Same.\n+\t* graphite-sese-to-poly.c\n+\t(build_pbb_scattering_polyhedrons): Same.\n+\t(build_scop_scattering): Same.\n+\t(scan_tree_for_params_right_scev): Same.\n+\t(scan_tree_for_params): Same.\n+\t(find_params_in_bb): Same.\n+\t(find_scop_parameters): Same.\n+\t(add_upper_bounds_from_estimated_nit): Same.\n+\t(build_loop_iteration_domains): Same.\n+\t(add_condition_to_domain): Same.\n+\t(pdr_add_memory_accesses): Same.\n+\n 2010-04-11  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n \n \t* graphite-blocking.c (pbb_strip_mine_profitable_p): Resolve "}, {"sha": "769cda45bb47c040f17a8baaac978c5d58dbd638", "filename": "gcc/graphite-blocking.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-blocking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-blocking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-blocking.c?ref=e262fdda8466aba838725ee425b0135d26239f90", "patch": "@@ -181,7 +181,7 @@ pbb_strip_mine_profitable_p (poly_bb_p pbb,\n \t\t\t     graphite_dim_t depth,\n \t\t\t     int stride)\n {\n-  Value niter, strip_stride;\n+  mpz_t niter, strip_stride;\n   bool res;\n \n   mpz_init (strip_stride);"}, {"sha": "340c8fc4ecb8136be240b94af50612fa7e805858", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=e262fdda8466aba838725ee425b0135d26239f90", "patch": "@@ -421,9 +421,9 @@ clast_to_gcc_expression (tree type, struct clast_expr *e,\n /* Return the precision needed to represent the value VAL.  */\n \n static int\n-precision_for_value (Value val)\n+precision_for_value (mpz_t val)\n {\n-  Value x, y, two;\n+  mpz_t x, y, two;\n   int precision;\n \n   value_init (x);\n@@ -454,9 +454,9 @@ precision_for_value (Value val)\n    UP.  */\n \n static int\n-precision_for_interval (Value low, Value up)\n+precision_for_interval (mpz_t low, mpz_t up)\n {\n-  Value diff;\n+  mpz_t diff;\n   int precision;\n \n   gcc_assert (value_le (low, up));\n@@ -473,7 +473,7 @@ precision_for_interval (Value low, Value up)\n    otherwise return NULL_TREE.  */\n \n static tree\n-gcc_type_for_interval (Value low, Value up, tree old_type)\n+gcc_type_for_interval (mpz_t low, mpz_t up, tree old_type)\n {\n   bool unsigned_p = true;\n   int precision, prec_up, prec_int;\n@@ -504,7 +504,7 @@ gcc_type_for_interval (Value low, Value up, tree old_type)\n    otherwise return NULL_TREE.  */\n \n static tree\n-gcc_type_for_value (Value val)\n+gcc_type_for_value (mpz_t val)\n {\n   return gcc_type_for_interval (val, val, NULL_TREE);\n }\n@@ -694,7 +694,7 @@ graphite_create_new_guard (sese region, edge entry_edge,\n    the iteration domain, and G the context parameters.  */\n \n static void\n-compute_bounds_for_level (poly_bb_p pbb, int level, Value low, Value up)\n+compute_bounds_for_level (poly_bb_p pbb, int level, mpz_t low, mpz_t up)\n {\n   ppl_Pointset_Powerset_C_Polyhedron_t ps;\n   ppl_Linear_Expression_t le;\n@@ -722,7 +722,7 @@ compute_bounds_for_level (poly_bb_p pbb, int level, Value low, Value up)\n static tree\n compute_type_for_level_1 (poly_bb_p pbb, int level, tree old_type)\n {\n-  Value low, up;\n+  mpz_t low, up;\n   tree type;\n \n   value_init (low);\n@@ -1035,7 +1035,7 @@ graphite_create_new_loop_guard (sese region, edge entry_edge,\n      2^{32|64}, and the condition lb <= ub is true, even if we do not want this.\n      However lb < ub + 1 is false, as expected.  */\n   tree one;\n-  Value gmp_one;\n+  mpz_t gmp_one;\n   \n   mpz_init (gmp_one);\n   mpz_set_si (gmp_one, 1);"}, {"sha": "0a7a749e955048976ad6f0e7bf2bdf7496ffc402", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=e262fdda8466aba838725ee425b0135d26239f90", "patch": "@@ -78,7 +78,7 @@ build_linearized_memory_access (ppl_dimension_type offset, poly_dr_p pdr)\n   ppl_dimension_type i;\n   ppl_dimension_type first = pdr_subscript_dim (pdr, 0);\n   ppl_dimension_type last = pdr_subscript_dim (pdr, PDR_NB_SUBSCRIPTS (pdr));\n-  Value size, sub_size;\n+  mpz_t size, sub_size;\n   graphite_dim_t dim = offset + pdr_dim (pdr);\n \n   ppl_new_Linear_Expression_with_dimension (&res, dim);\n@@ -196,7 +196,7 @@ build_partial_difference (ppl_Pointset_Powerset_C_Polyhedron_t *p,\n    the loop at DEPTH.  */\n \n static void\n-pdr_stride_in_loop (Value stride, graphite_dim_t depth, poly_dr_p pdr)\n+pdr_stride_in_loop (mpz_t stride, graphite_dim_t depth, poly_dr_p pdr)\n {\n   ppl_dimension_type time_depth;\n   ppl_Linear_Expression_t le, lma;\n@@ -340,12 +340,12 @@ pdr_stride_in_loop (Value stride, graphite_dim_t depth, poly_dr_p pdr)\n    accessed in LOOP at DEPTH.  */\n \n static void\n-memory_strides_in_loop_1 (lst_p loop, graphite_dim_t depth, Value strides)\n+memory_strides_in_loop_1 (lst_p loop, graphite_dim_t depth, mpz_t strides)\n {\n   int i, j;\n   lst_p l;\n   poly_dr_p pdr;\n-  Value s, n;\n+  mpz_t s, n;\n \n   mpz_init (s);\n   mpz_init (n);\n@@ -370,7 +370,7 @@ memory_strides_in_loop_1 (lst_p loop, graphite_dim_t depth, Value strides)\n    accessed in LOOP at DEPTH.  */\n \n static void\n-memory_strides_in_loop (lst_p loop, graphite_dim_t depth, Value strides)\n+memory_strides_in_loop (lst_p loop, graphite_dim_t depth, mpz_t strides)\n {\n   if (mpz_cmp_si (loop->memory_strides, -1) == 0)\n     {\n@@ -465,7 +465,7 @@ memory_strides_in_loop (lst_p loop, graphite_dim_t depth, Value strides)\n static bool\n lst_interchange_profitable_p (lst_p loop1, lst_p loop2)\n {\n-  Value d1, d2;\n+  mpz_t d1, d2;\n   bool res;\n \n   gcc_assert (loop1 && loop2"}, {"sha": "d25796f5dcfd026b34c4119dc6a173ce2fa554b7", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=e262fdda8466aba838725ee425b0135d26239f90", "patch": "@@ -80,7 +80,7 @@ extend_scattering (poly_bb_p pbb, int max_scattering)\n   ppl_dimension_type nb_old_dims, nb_new_dims;\n   int nb_added_dims, i;\n   ppl_Coefficient_t coef;\n-  Value one;\n+  mpz_t one;\n \n   nb_added_dims = max_scattering - pbb_nb_scattering_transform (pbb);\n   mpz_init (one);\n@@ -998,7 +998,7 @@ psct_scattering_dim_for_loop_depth (poly_bb_p pbb, graphite_dim_t loop_depth)\n   ppl_dimension_type iter = psct_iterator_dim (pbb, loop_depth);\n   ppl_Linear_Expression_t expr;\n   ppl_Coefficient_t coef;\n-  Value val;\n+  mpz_t val;\n   graphite_dim_t i;\n \n   mpz_init (val);\n@@ -1052,7 +1052,7 @@ psct_scattering_dim_for_loop_depth (poly_bb_p pbb, graphite_dim_t loop_depth)\n void\n pbb_number_of_iterations (poly_bb_p pbb,\n \t\t\t  graphite_dim_t loop_depth,\n-\t\t\t  Value niter)\n+\t\t\t  mpz_t niter)\n {\n   ppl_Linear_Expression_t le;\n   ppl_dimension_type dim;\n@@ -1071,7 +1071,7 @@ pbb_number_of_iterations (poly_bb_p pbb,\n void\n pbb_number_of_iterations_at_time (poly_bb_p pbb,\n \t\t\t\t  graphite_dim_t time_depth,\n-\t\t\t\t  Value niter)\n+\t\t\t\t  mpz_t niter)\n {\n   ppl_Pointset_Powerset_C_Polyhedron_t ext_domain, sctr;\n   ppl_Linear_Expression_t le;"}, {"sha": "8ab24f9022c896ae4d674ac45299f4494f542a39", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=e262fdda8466aba838725ee425b0135d26239f90", "patch": "@@ -367,8 +367,8 @@ extern void debug_iteration_domains (scop_p, int);\n extern bool scop_do_interchange (scop_p);\n extern bool scop_do_strip_mine (scop_p);\n extern bool scop_do_block (scop_p);\n-extern void pbb_number_of_iterations (poly_bb_p, graphite_dim_t, Value);\n-extern void pbb_number_of_iterations_at_time (poly_bb_p, graphite_dim_t, Value);\n+extern void pbb_number_of_iterations (poly_bb_p, graphite_dim_t, mpz_t);\n+extern void pbb_number_of_iterations_at_time (poly_bb_p, graphite_dim_t, mpz_t);\n extern void pbb_remove_duplicate_pdrs (poly_bb_p);\n \n /* Return the number of write data references in PBB.  */\n@@ -648,7 +648,7 @@ struct lst {\n   lst_p loop_father;\n \n   /* The sum of all the memory strides for an LST loop.  */\n-  Value memory_strides;\n+  mpz_t memory_strides;\n \n   /* Loop nodes contain a sequence SEQ of LST nodes, statements\n      contain a pointer to their polyhedral representation PBB.  */"}, {"sha": "5186d47d9ddce5445796df71152ddf39133d4950", "filename": "gcc/graphite-ppl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-ppl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-ppl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-ppl.c?ref=e262fdda8466aba838725ee425b0135d26239f90", "patch": "@@ -276,9 +276,9 @@ new_Cloog_Domain_from_ppl_Pointset_Powerset (\n /* Set the inhomogeneous term of E to X.  */\n \n void\n-ppl_set_inhomogeneous_gmp (ppl_Linear_Expression_t e, Value x)\n+ppl_set_inhomogeneous_gmp (ppl_Linear_Expression_t e, mpz_t x)\n {\n-  Value v0, v1;\n+  mpz_t v0, v1;\n   ppl_Coefficient_t c;\n \n   mpz_init (v0);\n@@ -301,9 +301,9 @@ ppl_set_inhomogeneous_gmp (ppl_Linear_Expression_t e, Value x)\n /* Set E[I] to X.  */\n \n void\n-ppl_set_coef_gmp (ppl_Linear_Expression_t e, ppl_dimension_type i, Value x)\n+ppl_set_coef_gmp (ppl_Linear_Expression_t e, ppl_dimension_type i, mpz_t x)\n {\n-  Value v0, v1;\n+  mpz_t v0, v1;\n   ppl_Coefficient_t c;\n \n   mpz_init (v0);\n@@ -422,7 +422,7 @@ ppl_strip_loop (ppl_Polyhedron_t ph, ppl_dimension_type loop, int stride)\n   ppl_dimension_type dim;\n   ppl_Polyhedron_t res;\n   ppl_Coefficient_t c;\n-  Value val;\n+  mpz_t val;\n \n   mpz_init (val);\n   ppl_new_Coefficient (&c);\n@@ -516,7 +516,7 @@ ppl_lexico_compare_linear_expressions (ppl_Linear_Expression_t a,\n   ppl_dimension_type i;\n   ppl_Coefficient_t c;\n   int res;\n-  Value va, vb;\n+  mpz_t va, vb;\n \n   ppl_Linear_Expression_space_dimension (a, &length1);\n   ppl_Linear_Expression_space_dimension (b, &length2);\n@@ -648,10 +648,10 @@ ppl_read_polyhedron_matrix (ppl_Polyhedron_t *ph, FILE *file)\n \n void\n ppl_max_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t ps,\n-                         ppl_Linear_Expression_t le, Value res)\n+                         ppl_Linear_Expression_t le, mpz_t res)\n {\n   ppl_Coefficient_t num, denom;\n-  Value dv, nv;\n+  mpz_t dv, nv;\n   int maximum, err;\n \n   mpz_init (nv);\n@@ -679,10 +679,10 @@ ppl_max_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t ps,\n \n void\n ppl_min_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t ps,\n-\t\t\t ppl_Linear_Expression_t le, Value res)\n+\t\t\t ppl_Linear_Expression_t le, mpz_t res)\n {\n   ppl_Coefficient_t num, denom;\n-  Value dv, nv;\n+  mpz_t dv, nv;\n   int minimum, err;\n \n   mpz_init (nv);\n@@ -715,7 +715,7 @@ ppl_build_relation (int dim, int pos1, int pos2, int c,\n   ppl_Linear_Expression_t expr;\n   ppl_Constraint_t cstr;\n   ppl_Coefficient_t coef;\n-  Value v, v_op, v_c;\n+  mpz_t v, v_op, v_c;\n \n   mpz_init (v);\n   mpz_init (v_op);"}, {"sha": "6d5e09dcafdd8daa737b55f8343522ff9b117ef0", "filename": "gcc/graphite-ppl.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-ppl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-ppl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-ppl.h?ref=e262fdda8466aba838725ee425b0135d26239f90", "patch": "@@ -44,19 +44,19 @@ void ppl_read_polyhedron_matrix (ppl_Polyhedron_t *, FILE *);\n void ppl_insert_dimensions (ppl_Polyhedron_t, int, int);\n void ppl_insert_dimensions_pointset (ppl_Pointset_Powerset_C_Polyhedron_t, int,\n \t\t\t\t     int);\n-void ppl_set_inhomogeneous_gmp (ppl_Linear_Expression_t, Value);\n-void ppl_set_coef_gmp (ppl_Linear_Expression_t, ppl_dimension_type, Value);\n+void ppl_set_inhomogeneous_gmp (ppl_Linear_Expression_t, mpz_t);\n+void ppl_set_coef_gmp (ppl_Linear_Expression_t, ppl_dimension_type, mpz_t);\n void ppl_max_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t,\n-                              ppl_Linear_Expression_t, Value);\n+                              ppl_Linear_Expression_t, mpz_t);\n void ppl_min_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t,\n-\t\t\t      ppl_Linear_Expression_t, Value);\n+\t\t\t      ppl_Linear_Expression_t, mpz_t);\n ppl_Constraint_t ppl_build_relation (int, int, int, int,\n \t\t\t\t     enum ppl_enum_Constraint_Type);\n \n /* Assigns to RES the value of the INTEGER_CST T.  */\n \n static inline void\n-tree_int_to_gmp (tree t, Value res)\n+tree_int_to_gmp (tree t, mpz_t res)\n {\n   double_int di = tree_to_double_int (t);\n   mpz_set_double_int (res, di, TYPE_UNSIGNED (TREE_TYPE (t)));\n@@ -65,10 +65,10 @@ tree_int_to_gmp (tree t, Value res)\n /* Converts a GMP constant VAL to a tree and returns it.  */\n \n static inline tree\n-gmp_cst_to_tree (tree type, Value val)\n+gmp_cst_to_tree (tree type, mpz_t val)\n {\n   tree t = type ? type : integer_type_node;\n-  Value tmp;\n+  mpz_t tmp;\n   double_int di;\n \n   mpz_init (tmp);\n@@ -84,7 +84,7 @@ gmp_cst_to_tree (tree type, Value val)\n static inline void\n ppl_set_inhomogeneous (ppl_Linear_Expression_t e, int x)\n {\n-  Value v;\n+  mpz_t v;\n   mpz_init (v);\n   mpz_set_si (v, x);\n   ppl_set_inhomogeneous_gmp (e, v);\n@@ -96,7 +96,7 @@ ppl_set_inhomogeneous (ppl_Linear_Expression_t e, int x)\n static inline void\n ppl_set_inhomogeneous_tree (ppl_Linear_Expression_t e, tree x)\n {\n-  Value v;\n+  mpz_t v;\n   mpz_init (v);\n   tree_int_to_gmp (x, v);\n   ppl_set_inhomogeneous_gmp (e, v);\n@@ -108,7 +108,7 @@ ppl_set_inhomogeneous_tree (ppl_Linear_Expression_t e, tree x)\n static inline void\n ppl_set_coef (ppl_Linear_Expression_t e, ppl_dimension_type i, int x)\n {\n-  Value v;\n+  mpz_t v;\n   mpz_init (v);\n   mpz_set_si (v, x);\n   ppl_set_coef_gmp (e, i, v);\n@@ -120,7 +120,7 @@ ppl_set_coef (ppl_Linear_Expression_t e, ppl_dimension_type i, int x)\n static inline void\n ppl_set_coef_tree (ppl_Linear_Expression_t e, ppl_dimension_type i, tree x)\n {\n-  Value v;\n+  mpz_t v;\n   mpz_init (v);\n   tree_int_to_gmp (x, v);\n   ppl_set_coef_gmp (e, i, v);\n@@ -130,7 +130,7 @@ ppl_set_coef_tree (ppl_Linear_Expression_t e, ppl_dimension_type i, tree x)\n /* Sets RES to the max of V1 and V2.  */\n \n static inline void\n-value_max (Value res, Value v1, Value v2)\n+value_max (mpz_t res, mpz_t v1, mpz_t v2)\n {\n   if (mpz_cmp (v1, v2) < 0)\n     mpz_set (res, v2);"}, {"sha": "e2d4192c47166e033616319703f8296ef7f057d9", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e262fdda8466aba838725ee425b0135d26239f90/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=e262fdda8466aba838725ee425b0135d26239f90", "patch": "@@ -515,7 +515,7 @@ build_pbb_scattering_polyhedrons (ppl_Linear_Expression_t static_schedule,\n   int nb_params = scop_nb_params (scop);\n   ppl_Coefficient_t c;\n   ppl_dimension_type dim = scattering_dimensions + nb_iterators + nb_params;\n-  Value v;\n+  mpz_t v;\n \n   gcc_assert (scattering_dimensions >= used_scattering_dimensions);\n \n@@ -614,7 +614,7 @@ build_scop_scattering (scop_p scop)\n   gimple_bb_p previous_gbb = NULL;\n   ppl_Linear_Expression_t static_schedule;\n   ppl_Coefficient_t c;\n-  Value v;\n+  mpz_t v;\n \n   mpz_init (v);\n   ppl_new_Coefficient (&c);\n@@ -665,9 +665,9 @@ build_scop_scattering (scop_p scop)\n \n static void\n add_value_to_dim (ppl_dimension_type d, ppl_Linear_Expression_t expr,\n-\t\t  Value k)\n+\t\t  mpz_t k)\n {\n-  Value val;\n+  mpz_t val;\n   ppl_Coefficient_t coef;\n \n   ppl_new_Coefficient (&coef);\n@@ -695,7 +695,7 @@ scan_tree_for_params_right_scev (sese s, tree e, int var,\n     {\n       loop_p loop = get_loop (var);\n       ppl_dimension_type l = sese_loop_depth (s, loop) - 1;\n-      Value val;\n+      mpz_t val;\n \n       /* Scalar evolutions should happen in the sese region.  */\n       gcc_assert (sese_loop_depth (s, loop) > 0);\n@@ -719,9 +719,9 @@ scan_tree_for_params_right_scev (sese s, tree e, int var,\n    linear expression EXPR.  K is the multiplier of the constant.  */\n \n static void\n-scan_tree_for_params_int (tree cst, ppl_Linear_Expression_t expr, Value k)\n+scan_tree_for_params_int (tree cst, ppl_Linear_Expression_t expr, mpz_t k)\n {\n-  Value val;\n+  mpz_t val;\n   ppl_Coefficient_t coef;\n   int v = int_cst_value (cst);\n \n@@ -789,7 +789,7 @@ parameter_index_in_region (tree name, sese region)\n \n static void\n scan_tree_for_params (sese s, tree e, ppl_Linear_Expression_t c,\n-\t\t      Value k)\n+\t\t      mpz_t k)\n {\n   if (e == chrec_dont_know)\n     return;\n@@ -807,7 +807,7 @@ scan_tree_for_params (sese s, tree e, ppl_Linear_Expression_t c,\n \t{\n \t  if (c)\n \t    {\n-\t      Value val;\n+\t      mpz_t val;\n \t      gcc_assert (host_integerp (TREE_OPERAND (e, 1), 0));\n \t      mpz_init (val);\n \t      mpz_set_si (val, int_cst_value (TREE_OPERAND (e, 1)));\n@@ -822,7 +822,7 @@ scan_tree_for_params (sese s, tree e, ppl_Linear_Expression_t c,\n \t{\n \t  if (c)\n \t    {\n-\t      Value val;\n+\t      mpz_t val;\n \t      gcc_assert (host_integerp (TREE_OPERAND (e, 0), 0));\n \t      mpz_init (val);\n \t      mpz_set_si (val, int_cst_value (TREE_OPERAND (e, 0)));\n@@ -904,7 +904,7 @@ scan_tree_for_params (sese s, tree e, ppl_Linear_Expression_t c,\n \tif (c)\n \t  {\n \t    ppl_Coefficient_t coef;\n-\t    Value minus_one;\n+\t    mpz_t minus_one;\n \n \t    ppl_subtract_Linear_Expression_from_Linear_Expression (c,\n \t\t\t\t\t\t\t\t   tmp_expr);\n@@ -961,7 +961,7 @@ find_params_in_bb (sese region, gimple_bb_p gbb)\n   data_reference_p dr;\n   gimple stmt;\n   loop_p loop = GBB_BB (gbb)->loop_father;\n-  Value one;\n+  mpz_t one;\n \n   mpz_init (one);\n   mpz_set_si (one, 1);\n@@ -996,7 +996,7 @@ find_scop_parameters (scop_p scop)\n   unsigned i;\n   sese region = SCOP_REGION (scop);\n   struct loop *loop;\n-  Value one;\n+  mpz_t one;\n \n   mpz_init (one);\n   mpz_set_si (one, 1);\n@@ -1044,7 +1044,7 @@ add_upper_bounds_from_estimated_nit (scop_p scop, double_int nit,\n \t\t\t\t     ppl_dimension_type dim,\n \t\t\t\t     ppl_Linear_Expression_t ub_expr)\n {\n-  Value val;\n+  mpz_t val;\n   ppl_Linear_Expression_t nb_iters_le;\n   ppl_Polyhedron_t pol;\n   ppl_Coefficient_t coef;\n@@ -1165,7 +1165,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n     }\n   else if (!chrec_contains_undetermined (nb_iters))\n     {\n-      Value one;\n+      mpz_t one;\n       ppl_Constraint_t ub;\n       ppl_Linear_Expression_t ub_expr;\n       double_int nit;\n@@ -1209,7 +1209,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n static ppl_Linear_Expression_t\n create_linear_expr_from_tree (poly_bb_p pbb, tree t)\n {\n-  Value one;\n+  mpz_t one;\n   ppl_Linear_Expression_t res;\n   ppl_dimension_type dim;\n   sese region = SCOP_REGION (PBB_SCOP (pbb));\n@@ -1265,7 +1265,7 @@ static void\n add_condition_to_domain (ppl_Pointset_Powerset_C_Polyhedron_t ps, gimple stmt,\n \t\t\t poly_bb_p pbb, enum tree_code code)\n {\n-  Value v;\n+  mpz_t v;\n   ppl_Coefficient_t c;\n   ppl_Linear_Expression_t left, right;\n   ppl_Constraint_t cstr;\n@@ -1651,7 +1651,7 @@ pdr_add_memory_accesses (ppl_Polyhedron_t accesses, data_reference_p dr,\n \t\t\t poly_bb_p pbb)\n {\n   int i, nb_subscripts = DR_NUM_DIMENSIONS (dr);\n-  Value v;\n+  mpz_t v;\n   scop_p scop = PBB_SCOP (pbb);\n   sese region = SCOP_REGION (scop);\n "}]}