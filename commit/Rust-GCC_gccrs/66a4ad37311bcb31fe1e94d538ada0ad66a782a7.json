{"sha": "66a4ad37311bcb31fe1e94d538ada0ad66a782a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZhNGFkMzczMTFiY2IzMWZlMWU5NGQ1MzhhZGEwYWQ2NmE3ODJhNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-04-22T16:19:56Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-04-22T16:19:56Z"}, "message": "op-common.h, [...]: Fix comment typos.\n\n\t* config/soft-fp/op-common.h, double-int.h, tree-ssa-dom.c:\n\tFix comment typos.\n\t* doc/tm.texi: Fix a typo.\n\nFrom-SVN: r113178", "tree": {"sha": "0efb3b28172d148956909be1c89236b745c9a980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0efb3b28172d148956909be1c89236b745c9a980"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66a4ad37311bcb31fe1e94d538ada0ad66a782a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66a4ad37311bcb31fe1e94d538ada0ad66a782a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66a4ad37311bcb31fe1e94d538ada0ad66a782a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/comments", "author": null, "committer": null, "parents": [{"sha": "9f9a713e7a5e6f6fdf6062d97f3b578484bba6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9a713e7a5e6f6fdf6062d97f3b578484bba6af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9a713e7a5e6f6fdf6062d97f3b578484bba6af"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "bbbdaa42a1d498388024993a9bc930f01d2df0d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66a4ad37311bcb31fe1e94d538ada0ad66a782a7", "patch": "@@ -1,3 +1,9 @@\n+2006-04-22  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/soft-fp/op-common.h, double-int.h, tree-ssa-dom.c:\n+\tFix comment typos.\n+\t* doc/tm.texi: Fix a typo.\n+\n 2006-04-21  Geoffrey Keating  <geoffk@apple.com>\n \n \t* dwarf2out.c (struct die_struct): Document that die_sib makes"}, {"sha": "372f69dcde119b5c51b294818fd2afe75fe37215", "filename": "gcc/config/soft-fp/op-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2Fconfig%2Fsoft-fp%2Fop-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2Fconfig%2Fsoft-fp%2Fop-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Fop-common.h?ref=66a4ad37311bcb31fe1e94d538ada0ad66a782a7", "patch": "@@ -35,7 +35,7 @@\n   _FP_FRAC_DECL_##wc(X)\n \n /*\n- * Finish truely unpacking a native fp value by classifying the kind\n+ * Finish truly unpacking a native fp value by classifying the kind\n  * of fp value and normalizing both the exponent and the fraction.\n  */\n "}, {"sha": "aceebf6d860cd01a4fe927a1dbfd7ec39b910b40", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=66a4ad37311bcb31fe1e94d538ada0ad66a782a7", "patch": "@@ -9144,7 +9144,7 @@ such cases may improve things.\n @end defmac\n \n @deftypefn {Target Hook} int TARGET_MODE_REP_EXTENDED (enum machine_mode @var{mode}, enum machine_mode @var{rep_mode})\n-The representation of an intergral mode can be such that the values\n+The representation of an integral mode can be such that the values\n are always extended to a wider integral mode.  Return\n @code{SIGN_EXTEND} if values of @var{mode} are represented in\n sign-extended form to @var{rep_mode}.  Return @code{UNKNOWN}"}, {"sha": "f37bcb2f29923e79afcd68e7325148e3cdd8dc5d", "filename": "gcc/double-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=66a4ad37311bcb31fe1e94d538ada0ad66a782a7", "patch": "@@ -44,7 +44,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n    ??? The components of double_int differ in signedness mostly for\n    historical reasons (they replace an older structure used to represent\n-   numbers with precision wigher than HOST_WIDE_INT).  It might be less\n+   numbers with precision higher than HOST_WIDE_INT).  It might be less\n    confusing to have them both signed or both unsigned.  */\n \n typedef struct"}, {"sha": "2777d550916198ad30b0488289998dcf83e0b7e4", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66a4ad37311bcb31fe1e94d538ada0ad66a782a7/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=66a4ad37311bcb31fe1e94d538ada0ad66a782a7", "patch": "@@ -2439,7 +2439,7 @@ eliminate_degenerate_phis (void)\n \n      A set bit indicates that the statement or PHI node which\n      defines the SSA_NAME should be (re)examined to determine if\n-     it has become a degenerate PHI or trival const/copy propagation\n+     it has become a degenerate PHI or trivial const/copy propagation\n      opportunity. \n \n      Experiments have show we generally get better compilation"}]}