{"sha": "ce359ed91662f2c14f882613a094f75110a0eba2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UzNTllZDkxNjYyZjJjMTRmODgyNjEzYTA5NGY3NTExMGEwZWJhMg==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-02-16T18:32:07Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-02-16T18:32:07Z"}, "message": "interpret.cc: Add extra DEBUG_LOCALS_INSN calls for multi-slot variables to maintain type info.\n\n2007-02-16  Kyle Galloway  <kgallowa@redhat.com>\n\n\t* interpret.cc: Add extra DEBUG_LOCALS_INSN calls for multi-slot\n\tvariables to maintain type info.\n\t* interpret-run.cc: Add local variable info to frame in the debug\n\tinterpreter.\n\t* jvmti.cc (getLocalFrame): New method.\n\t(_Jv_JVMTI_GetLocalObject): New method.\n\t(_Jv_JVMTI_GetLocallInt): New method.\n\t(_Jv_JVMTI_GetLocalFloat): New method.\n\t(_Jv_JVMTI_GetLocalLong): New method.\n\t(_Jv_JVMTI_GetLocalDouble): New method.\n\t(_Jv_JVMTI_SetLocalObject): New method.\n\t(_Jv_JVMTI_SetLocalInt): New method.\n\t(_Jv_JVMTI_SetLocalFloat): New method.\n\t(_Jv_JVMTI_SetLocalLong): New method.\n\t(_Jv_JVMTI_SetLocalDouble): New method.\n\nFrom-SVN: r122048", "tree": {"sha": "25c074e797a8dd7b18f07433e5fa8036c2a79334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25c074e797a8dd7b18f07433e5fa8036c2a79334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce359ed91662f2c14f882613a094f75110a0eba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce359ed91662f2c14f882613a094f75110a0eba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce359ed91662f2c14f882613a094f75110a0eba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce359ed91662f2c14f882613a094f75110a0eba2/comments", "author": null, "committer": null, "parents": [{"sha": "2c39a2b1e9fde76363467f8e7552e9244c7c6485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c39a2b1e9fde76363467f8e7552e9244c7c6485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c39a2b1e9fde76363467f8e7552e9244c7c6485"}], "stats": {"total": 395, "additions": 338, "deletions": 57}, "files": [{"sha": "f6c0ed0004f1ba2ced563b74219b24b15b9f714c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce359ed91662f2c14f882613a094f75110a0eba2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce359ed91662f2c14f882613a094f75110a0eba2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ce359ed91662f2c14f882613a094f75110a0eba2", "patch": "@@ -1,3 +1,21 @@\n+2007-02-16  Kyle Galloway  <kgallowa@redhat.com>\n+\n+\t* interpret.cc: Add extra DEBUG_LOCALS_INSN calls for multi-slot\n+\tvariables to maintain type info.\n+\t* interpret-run.cc: Add local variable info to frame in the debug\n+\tinterpreter.\n+\t* jvmti.cc (getLocalFrame): New method.\n+\t(_Jv_JVMTI_GetLocalObject): New method.\n+\t(_Jv_JVMTI_GetLocallInt): New method.\n+\t(_Jv_JVMTI_GetLocalFloat): New method.\n+\t(_Jv_JVMTI_GetLocalLong): New method.\n+\t(_Jv_JVMTI_GetLocalDouble): New method.\n+\t(_Jv_JVMTI_SetLocalObject): New method.\n+\t(_Jv_JVMTI_SetLocalInt): New method.\n+\t(_Jv_JVMTI_SetLocalFloat): New method.\n+\t(_Jv_JVMTI_SetLocalLong): New method.\n+\t(_Jv_JVMTI_SetLocalDouble): New method.\n+\n 2007-02-16  Gary Benson  <gbenson@redhat.com>\n \n \t* gnu/gcj/tools/gcj_dbtool/Main.java\n@@ -20,19 +38,19 @@\n 2007-02-15  Kyle Galloway  <kgallowa@redhat.com>\n \t\n \t* interpret.cc (_Jv_InterpMethod::check_handler): New method.\n-    * interpret-run.cc: Change the catch section to report exception\n-    events and to use the new check_handler method.\n-    * include/java-interp.h (_Jv_InterpMethod): Add check_handler.\n-    * gnu/gcj/jvmti/ExceptionEvent.java: New file.\n-    * gnu/gcj/jvmti/ExceptionEvent.h: New file.\n-    * gnu/gcj/jvmti/natExceptionEvent.cc: New file.\n-    * libjava/classpath/lib/gnu/gcj/jvmti/ExceptionEvent.class: New\n-    file.\n-    * sources.am: Added ExceptionEvent.java.\n-    * Makefile.am: Added natExceptionEvent.cc\n-    * Makefile.in: Regenerated.\n-    * include/Makefile.in: Regenerated.\n-    * gcj/Makefile.in: Regenerated.\n+\t* interpret-run.cc: Change the catch section to report exception\n+\tevents and to use the new check_handler method.\n+\t* include/java-interp.h (_Jv_InterpMethod): Add check_handler.\n+\t* gnu/gcj/jvmti/ExceptionEvent.java: New file.\n+\t* gnu/gcj/jvmti/ExceptionEvent.h: New file.\n+\t* gnu/gcj/jvmti/natExceptionEvent.cc: New file.\n+\t* libjava/classpath/lib/gnu/gcj/jvmti/ExceptionEvent.class: New\n+\tfile.\n+\t* sources.am: Added ExceptionEvent.java.\n+\t* Makefile.am: Added natExceptionEvent.cc\n+\t* Makefile.in: Regenerated.\n+\t* include/Makefile.in: Regenerated.\n+\t* gcj/Makefile.in: Regenerated.\n \n 2007-02-15  Johannes Schmidt  <jschmidt@avtrex.com>\n \tDavid Daney  <ddaney@avtrex.com>"}, {"sha": "9d37c19a3a769dc6165f670f2d3318c1226c822b", "filename": "libjava/interpret-run.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce359ed91662f2c14f882613a094f75110a0eba2/libjava%2Finterpret-run.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce359ed91662f2c14f882613a094f75110a0eba2/libjava%2Finterpret-run.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret-run.cc?ref=ce359ed91662f2c14f882613a094f75110a0eba2", "patch": "@@ -27,6 +27,13 @@ details.  */\n \n   _Jv_word locals[meth->max_locals];\n \n+#ifdef DEBUG  \n+  frame_desc.locals = locals;\n+  char locals_type[meth->max_locals];\n+  memset (locals_type, 'x', meth->max_locals);\n+  frame_desc.locals_type = locals_type;\n+#endif\n+\n #define INSN_LABEL(op) &&insn_##op\n \n   static const void *const insn_target[] = "}, {"sha": "79276258c3d1280fefe53d6f53cd074ed8ff1862", "filename": "libjava/interpret.cc", "status": "modified", "additions": 43, "deletions": 34, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce359ed91662f2c14f882613a094f75110a0eba2/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce359ed91662f2c14f882613a094f75110a0eba2/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=ce359ed91662f2c14f882613a094f75110a0eba2", "patch": "@@ -172,47 +172,51 @@ convert (FROM val, TO min, TO max)\n # define LOADD(I)  LOADL(I)\n #endif\n \n-#define STOREA(I)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    DEBUG_LOCALS_INSN (I, 'o');\t\t\t\\\n-    locals[I].o = (--sp)->o;\t\t\t\\\n+#define STOREA(I)               \\\n+  do {                          \\\n+    DEBUG_LOCALS_INSN (I, 'o'); \\\n+    locals[I].o = (--sp)->o;    \\\n   } while (0)\n-#define STOREI(I)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    DEBUG_LOCALS_INSN (I, 'i');\t\t\t\\\n-    locals[I].i = (--sp)->i;\t\t\t\\\n+#define STOREI(I)               \\\n+  do {                          \\\n+    DEBUG_LOCALS_INSN (I, 'i'); \\\n+    locals[I].i = (--sp)->i;    \\\n   } while (0)\n-#define STOREF(I)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    DEBUG_LOCALS_INSN (I, 'f');\t\t\t\\\n-    locals[I].f = (--sp)->f;\t\t\t\\\n+#define STOREF(I)               \\\n+  do {                          \\\n+    DEBUG_LOCALS_INSN (I, 'f'); \\\n+    locals[I].f = (--sp)->f;    \\\n   } while (0)\n #if SIZEOF_VOID_P == 8\n-# define STOREL(I)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    DEBUG_LOCALS_INSN (I, 'l');\t\t\t\\\n-    (sp -= 2, locals[I].l = sp->l);\t\t\\\n+# define STOREL(I)                   \\\n+  do {                               \\\n+    DEBUG_LOCALS_INSN (I, 'l');      \\\n+    DEBUG_LOCALS_INSN (I + 1, 'x');  \\\n+    (sp -= 2, locals[I].l = sp->l);  \\\n   } while (0)\n-# define STORED(I) \t\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    DEBUG_LOCALS_INSN (I, 'd');\t\t\t\\\n-    (sp -= 2, locals[I].d = sp->d);\t\t\\\n+# define STORED(I)                   \\\n+  do {                               \\\n+    DEBUG_LOCALS_INSN (I, 'd');      \\\n+    DEBUG_LOCALS_INSN (I + 1, 'x');  \\\n+    (sp -= 2, locals[I].d = sp->d);  \\\n   } while (0)\n \n #else\n-# define STOREL(I)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    DEBUG_LOCALS_INSN (I, 'l');\t\t\t\\\n-    jint __idx = (I);\t\t\t\t\\\n-    locals[__idx+1].ia[0] = (--sp)->ia[0];\t\\\n-    locals[__idx].ia[0] = (--sp)->ia[0]; \t\\\n+# define STOREL(I)                   \\\n+  do {                               \\\n+    DEBUG_LOCALS_INSN (I, 'l');      \\\n+    DEBUG_LOCALS_INSN (I + 1, 'x');  \\\n+    jint __idx = (I);                \\\n+    locals[__idx+1].ia[0] = (--sp)->ia[0];  \\\n+    locals[__idx].ia[0] = (--sp)->ia[0];    \\\n   } while (0)\n-# define STORED(I)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    DEBUG_LOCALS_INSN(I, 'd');\t\t\t\\\n-    jint __idx = (I);\t\t\t\t\\\n-    locals[__idx+1].ia[0] = (--sp)->ia[0];\t\\\n-    locals[__idx].ia[0] = (--sp)->ia[0]; \t\\\n+# define STORED(I)                   \\\n+  do {                               \\\n+    DEBUG_LOCALS_INSN (I, 'd');      \\\n+    DEBUG_LOCALS_INSN (I + 1, 'x');  \\\n+    jint __idx = (I);                \\\n+    locals[__idx+1].ia[0] = (--sp)->ia[0];  \\\n+    locals[__idx].ia[0] = (--sp)->ia[0];    \\\n   } while (0)\n #endif\n \n@@ -929,7 +933,7 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n {\n #undef DEBUG\n #undef DEBUG_LOCALS_INSN\n-#define DEBUG_LOCALS_INSN(s, t) do {} while(0)\n+#define DEBUG_LOCALS_INSN(s, t) do {} while (0)\n \n #include \"interpret-run.cc\"\n }\n@@ -939,7 +943,12 @@ _Jv_InterpMethod::run_debug (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n {\n #define DEBUG\n #undef DEBUG_LOCALS_INSN\n-#define DEBUG_LOCALS_INSN(s, t) do {} while(0)\n+#define DEBUG_LOCALS_INSN(s, t)  \\\n+  do    \\\n+    {   \\\n+      frame_desc.locals_type[s] = t;  \\\n+    }   \\\n+  while (0)\n \n #include \"interpret-run.cc\"\n }"}, {"sha": "51f9d1d02b5f97345c4e5b2090ce9e97a34bb2ef", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 257, "deletions": 10, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce359ed91662f2c14f882613a094f75110a0eba2/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce359ed91662f2c14f882613a094f75110a0eba2/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=ce359ed91662f2c14f882613a094f75110a0eba2", "patch": "@@ -211,6 +211,253 @@ _Jv_JVMTI_InterruptThread (MAYBE_UNUSED jvmtiEnv *env, jthread thread)\n   return JVMTI_ERROR_NONE;\n }\n \n+// This method performs the common tasks to get and set variables of all types.\n+// It is called by the _Jv_JVMTI_Get/SetLocalInt/Object/.... methods.\n+static jvmtiError\n+getLocalFrame (jvmtiEnv *env, jthread thread, jint depth, jint slot, char type,\n+               _Jv_InterpFrame **iframe)\n+{\n+  using namespace java::lang;\n+   \n+  REQUIRE_PHASE (env, JVMTI_PHASE_LIVE);\n+   \n+  ILLEGAL_ARGUMENT (depth < 0);\n+  \n+  THREAD_DEFAULT_TO_CURRENT (thread);\n+  THREAD_CHECK_VALID (thread);\n+  THREAD_CHECK_IS_ALIVE (thread);\n+  \n+  _Jv_Frame *frame = reinterpret_cast<_Jv_Frame *> (thread->frame);\n+  \n+  for (int i = 0; i < depth; i++)\n+    {    \n+      frame = frame->next;\n+    \n+      if (frame == NULL)\n+        return JVMTI_ERROR_NO_MORE_FRAMES; \n+    }\n+  \n+  if (frame->frame_type == frame_native)\n+    return JVMTI_ERROR_OPAQUE_FRAME;\n+  \n+  jint max_locals;\n+  jvmtiError jerr = env->GetMaxLocals (reinterpret_cast<jmethodID> \n+                                         (frame->self->get_method ()),\n+                                       &max_locals);\n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr; \n+  \n+  _Jv_InterpFrame *tmp_iframe = reinterpret_cast<_Jv_InterpFrame *> (frame);\n+  \n+  // The second slot taken up by a long type is marked as type 'x' meaning it\n+  // is not valid for access since it holds only the 4 low bytes of the value.\n+  if (tmp_iframe->locals_type[slot] == 'x')\n+    return JVMTI_ERROR_INVALID_SLOT;\n+  \n+  if (tmp_iframe->locals_type[slot] != type)\n+    return JVMTI_ERROR_TYPE_MISMATCH;\n+  \n+  // Check for invalid slots, if the type is a long type, we must check that\n+  // the next slot is valid as well.\n+  if (slot < 0 || slot >= max_locals \n+      || ((type == 'l' || type == 'd') && slot + 1 >= max_locals))\n+    return JVMTI_ERROR_INVALID_SLOT;\n+  \n+  *iframe = tmp_iframe;\n+  \n+  return JVMTI_ERROR_NONE;\n+}\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_GetLocalObject (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                          jobject *value)\n+{\n+  NULL_CHECK (value);\n+\n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'o', &frame);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+  \n+  *value = frame->locals[slot].o;\n+  \n+  return JVMTI_ERROR_NONE;\n+}\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_SetLocalObject (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                          jobject value)\n+{\n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'o', &frame);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+  \n+  frame->locals[slot].o = value;\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_GetLocalInt (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                       jint *value)\n+{\n+  NULL_CHECK (value);\n+  \n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'i', &frame);\n+\n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+\n+  *value = frame->locals[slot].i;\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_SetLocalInt (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                       jint value)\n+{\n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'i', &frame);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+  \n+  frame->locals[slot].i = value;\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_GetLocalLong (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                        jlong *value)\n+{\n+  NULL_CHECK (value);\n+\n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'l', &frame);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+\n+#if SIZEOF_VOID_P==8\n+  *value = frame->locals[slot].l;\n+#else\n+  _Jv_word2 val;\n+  val.ia[0] = frame->locals[slot].ia[0];\n+  val.ia[1] = frame->locals[slot + 1].ia[0];\n+  *value = val.l;\n+#endif\n+  \n+  return JVMTI_ERROR_NONE;\n+}\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_SetLocalLong (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                        jlong value)\n+{\n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'l', &frame);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+\n+#if SIZEOF_VOID_P==8\n+  frame->locals[slot].l = value;\n+#else\n+  _Jv_word2 val;\n+\tval.l = value;\n+\tframe->locals[slot].ia[0] = val.ia[0];\n+\tframe->locals[slot + 1].ia[0] = val.ia[1];\n+#endif\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_GetLocalFloat (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                         jfloat *value)\n+{\n+  NULL_CHECK (value);\n+\n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'f', &frame);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+  \n+  *value = frame->locals[slot].f;\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_SetLocalFloat (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                         jfloat value)\n+{\n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'f', &frame);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+  \n+  frame->locals[slot].f = value;\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_GetLocalDouble (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                          jdouble *value)\n+{\n+  NULL_CHECK (value);\n+\n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'd', &frame);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+  \n+#if SIZEOF_VOID_P==8\n+  *value = frame->locals[slot].d;\n+#else\n+  _Jv_word2 val;\n+  val.ia[0] = frame->locals[slot].ia[0];\n+  val.ia[1] = frame->locals[slot + 1].ia[0];\n+  *value = val.d;\n+#endif\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+static jvmtiError JNICALL\n+_Jv_JVMTI_SetLocalDouble (jvmtiEnv *env, jthread thread, jint depth, jint slot,\n+                          jdouble value)\n+{\n+  _Jv_InterpFrame *frame;\n+  jvmtiError jerr = getLocalFrame (env, thread, depth, slot, 'd', &frame);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+    \n+#if SIZEOF_VOID_P==8\n+  frame->locals[slot].d = value;\n+#else\n+  _Jv_word2 val;\n+  val.d = value;\n+  frame->locals[slot].ia[0] = val.ia[0];\n+  frame->locals[slot + 1].ia[0] = val.ia[1]; \n+#endif\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n static jvmtiError JNICALL\n _Jv_JVMTI_GetAllThreads(MAYBE_UNUSED jvmtiEnv *env, jint *thread_cnt,\n                         jthread **threads)\n@@ -1716,16 +1963,16 @@ struct _Jv_jvmtiEnv _Jv_JVMTI_Interface =\n   RESERVED,\t\t\t// reserved18\n   UNIMPLEMENTED,\t\t// GetFrameLocation\n   UNIMPLEMENTED,\t\t// NotifyPopFrame\n-  UNIMPLEMENTED,\t\t// GetLocalObject\n-  UNIMPLEMENTED,\t\t// GetLocalInt\n-  UNIMPLEMENTED,\t\t// GetLocalLong\n-  UNIMPLEMENTED,\t\t// GetLocalFloat\n-  UNIMPLEMENTED,\t\t// GetLocalDouble\n-  UNIMPLEMENTED,\t\t// SetLocalObject\n-  UNIMPLEMENTED,\t\t// SetLocalInt\n-  UNIMPLEMENTED,\t\t// SetLocalLong\n-  UNIMPLEMENTED,\t\t// SetLocalFloat\n-  UNIMPLEMENTED,\t\t// SetLocalDouble\n+  _Jv_JVMTI_GetLocalObject,\t\t// GetLocalObject\n+  _Jv_JVMTI_GetLocalInt,\t\t// GetLocalInt\n+  _Jv_JVMTI_GetLocalLong,\t\t// GetLocalLong\n+  _Jv_JVMTI_GetLocalFloat,\t\t// GetLocalFloat\n+  _Jv_JVMTI_GetLocalDouble,\t\t// GetLocalDouble\n+  _Jv_JVMTI_SetLocalObject,\t\t// SetLocalObject\n+  _Jv_JVMTI_SetLocalInt,\t\t// SetLocalInt\n+  _Jv_JVMTI_SetLocalLong,\t\t// SetLocalLong\n+  _Jv_JVMTI_SetLocalFloat,\t\t// SetLocalFloat\n+  _Jv_JVMTI_SetLocalDouble,\t\t// SetLocalDouble\n   _Jv_JVMTI_CreateRawMonitor,\t// CreateRawMonitor\n   _Jv_JVMTI_DestroyRawMonitor,\t// DestroyRawMonitor\n   _Jv_JVMTI_RawMonitorEnter,\t// RawMonitorEnter"}]}