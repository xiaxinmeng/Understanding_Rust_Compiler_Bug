{"sha": "db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1ZjhiOTNmZTQ0MjQ1N2EzMGZhNTI4OWFlOWIzMzZmMmNiMWVkYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-09T00:47:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-09T00:47:05Z"}, "message": "re PR debug/23190 (debug info omitted for uninitialized variables (stabs))\n\n        PR debug/23190\n        * toplev.c (wrapup_global_declaration_1): Split out ...\n        (wrapup_global_declaration_2): ... from ...\n        (wrapup_global_declarations): ... here.  Return bool.\n        (check_global_declaration_1): Split out ...\n        (check_global_declarations): from here.\n        (emit_debug_global_declarations): New.\n        * toplev.h (wrapup_global_declaration_1, wrapup_global_declaration_2,\n        check_global_declaration_1, emit_debug_global_declarations): Declare.\n        * c-decl.c (c_write_global_declarations_1): Don't create a vector\n        of decls.  Call wrapup_global_declaration_1,\n        wrapup_global_declaration_2, check_global_declaration_1 directly.\n        (c_write_global_declarations_2): New.\n        (ext_block): New.\n        (c_write_global_declarations): Call c_write_global_declarations_2.\n        * langhooks.c (write_global_declarations): Call\n        emit_debug_global_declarations.\n        * cgraphunit.c (cgraph_varpool_remove_unreferenced_decls): Don't\n        remove decls that have DECL_RTL_SET_P.\n        * passes.c (rest_of_decl_compilation): Invoke\n        cgraph_varpool_finalize_decl for all but functions.\ncp/\n        * decl.c (wrapup_globals_for_namespace): Call\n        emit_debug_global_declarations.\n        * decl2.c (cp_finish_file): Likewise.\n\nFrom-SVN: r104065", "tree": {"sha": "8b288d10d2c8cf110317fdcfab54fc70ab7a2ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b288d10d2c8cf110317fdcfab54fc70ab7a2ec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/comments", "author": null, "committer": null, "parents": [{"sha": "41306174c8b7e4680a11d6faf4a03261bbcb243b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41306174c8b7e4680a11d6faf4a03261bbcb243b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41306174c8b7e4680a11d6faf4a03261bbcb243b"}], "stats": {"total": 461, "additions": 300, "deletions": 161}, "files": [{"sha": "17e6ee7b111554e66c2970808ee9cd4ff1360df0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -1,3 +1,28 @@\n+2005-09-08  Richard Henderson  <rth@redhat.com>\n+\n+\tPR debug/23190\n+\t* toplev.c (wrapup_global_declaration_1): Split out ...\n+\t(wrapup_global_declaration_2): ... from ...\n+\t(wrapup_global_declarations): ... here.  Return bool.\n+\t(check_global_declaration_1): Split out ...\n+\t(check_global_declarations): from here.\n+\t(emit_debug_global_declarations): New.\n+\t* toplev.h (wrapup_global_declaration_1, wrapup_global_declaration_2,\n+\tcheck_global_declaration_1, emit_debug_global_declarations): Declare.\n+\t* c-decl.c (c_write_global_declarations_1): Don't create a vector\n+\tof decls.  Call wrapup_global_declaration_1,\n+\twrapup_global_declaration_2, check_global_declaration_1 directly.\n+\t(c_write_global_declarations_2): New.\n+\t(ext_block): New.\n+\t(c_write_global_declarations): Call c_write_global_declarations_2.\n+\t* langhooks.c (write_global_declarations): Call\n+\temit_debug_global_declarations.\n+\n+\t* cgraphunit.c (cgraph_varpool_remove_unreferenced_decls): Don't\n+\tremove decls that have DECL_RTL_SET_P.\n+\t* passes.c (rest_of_decl_compilation): Invoke\n+\tcgraph_varpool_finalize_decl for all but functions.\n+\n 2005-09-08  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* tree-vrp.c (extract_range_from_unary_expr): Do not set the range for"}, {"sha": "49c8904fc04b72a23a03f2f40ea8fd2386d422f1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -7540,20 +7540,18 @@ build_cdtor (int method_type, tree cdtors)\n   cgraph_build_static_cdtor (method_type, body, DEFAULT_INIT_PRIORITY);\n }\n \n-/* Perform final processing on one file scope's declarations (or the\n-   external scope's declarations), GLOBALS.  */\n+/* A subroutine of c_write_global_declarations.  Perform final processing\n+   on one file scope's declarations (or the external scope's declarations),\n+   GLOBALS.  */\n+\n static void\n c_write_global_declarations_1 (tree globals)\n {\n-  size_t len = list_length (globals);\n-  tree *vec = XNEWVEC (tree, len);\n-  size_t i;\n   tree decl;\n \n   /* Process the decls in the order they were written.  */\n-  for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n+  for (decl = globals; decl; decl = TREE_CHAIN (decl))\n     {\n-      vec[i] = decl;\n       /* Check for used but undefined static functions using the C\n \t standard's definition of \"used\", and set TREE_NO_WARNING so\n \t that check_global_declarations doesn't repeat the check.  */\n@@ -7566,18 +7564,32 @@ c_write_global_declarations_1 (tree globals)\n \t  pedwarn (\"%q+F used but never defined\", decl);\n \t  TREE_NO_WARNING (decl) = 1;\n \t}\n+\n+      wrapup_global_declaration_1 (decl);\n+      wrapup_global_declaration_2 (decl);\n+      check_global_declaration_1 (decl);\n     }\n+}\n \n-  wrapup_global_declarations (vec, len);\n-  check_global_declarations (vec, len);\n+/* A subroutine of c_write_global_declarations Emit debug information for each\n+   of the declarations in GLOBALS.  */\n \n-  free (vec);\n+static void\n+c_write_global_declarations_2 (tree globals)\n+{\n+  tree decl;\n+\n+  for (decl = globals; decl ; decl = TREE_CHAIN (decl))\n+    debug_hooks->global_decl (decl);\n }\n \n+/* Preserve the external declarations scope across a garbage collect.  */\n+static GTY(()) tree ext_block;\n+\n void\n c_write_global_declarations (void)\n {\n-  tree ext_block, t;\n+  tree t;\n \n   /* We don't want to do this if generating a PCH.  */\n   if (pch_file)\n@@ -7593,10 +7605,6 @@ c_write_global_declarations (void)\n   external_scope = 0;\n   gcc_assert (!current_scope);\n \n-  /* Process all file scopes in this compilation, and the external_scope,\n-     through wrapup_global_declarations and check_global_declarations.  */\n-  for (t = all_translation_units; t; t = TREE_CHAIN (t))\n-    c_write_global_declarations_1 (BLOCK_VARS (DECL_INITIAL (t)));\n   if (ext_block)\n     {\n       tree tmp = BLOCK_VARS (ext_block);\n@@ -7608,6 +7616,11 @@ c_write_global_declarations (void)\n           dump_end (TDI_tu, stream);\n         }\n     }\n+\n+  /* Process all file scopes in this compilation, and the external_scope,\n+     through wrapup_global_declarations and check_global_declarations.  */\n+  for (t = all_translation_units; t; t = TREE_CHAIN (t))\n+    c_write_global_declarations_1 (BLOCK_VARS (DECL_INITIAL (t)));\n   c_write_global_declarations_1 (BLOCK_VARS (ext_block));\n \n   /* Generate functions to call static constructors and destructors\n@@ -7619,6 +7632,19 @@ c_write_global_declarations (void)\n   /* We're done parsing; proceed to optimize and emit assembly.\n      FIXME: shouldn't be the front end's responsibility to call this.  */\n   cgraph_optimize ();\n+\n+  /* After cgraph has had a chance to emit everything that's going to\n+     be emitted, output debug information for globals.  */\n+  if (errorcount == 0 && sorrycount == 0)\n+    {\n+      timevar_push (TV_SYMOUT);\n+      for (t = all_translation_units; t; t = TREE_CHAIN (t))\n+\tc_write_global_declarations_2 (BLOCK_VARS (DECL_INITIAL (t)));\n+      c_write_global_declarations_2 (BLOCK_VARS (ext_block));\n+      timevar_pop (TV_SYMOUT);\n+    }\n+\n+  ext_block = NULL;\n }\n \n #include \"gt-c-decl.h\""}, {"sha": "e357a25d9e413f40c49765b5410a648a35044313", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -311,7 +311,13 @@ cgraph_varpool_remove_unreferenced_decls (void)\n \t  && ((DECL_ASSEMBLER_NAME_SET_P (decl)\n \t       && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n \t      || node->force_output\n-\t      || decide_is_variable_needed (node, decl)))\n+\t      || decide_is_variable_needed (node, decl)\n+\t      /* ??? Cgraph does not yet rule the world with an iron hand, \n+\t\t and does not control the emission of debug information.\n+\t\t After a variable has its DECL_RTL set, we must assume that\n+\t\t it may be referenced by the debug information, and we can\n+\t\t no longer elide it.  */\n+\t      || DECL_RTL_SET_P (decl)))\n \tcgraph_varpool_mark_needed_node (node);\n \n       node = next;"}, {"sha": "2967e18d8c74408bd1e1419849d7fea167138ee1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -1,3 +1,10 @@\n+2005-09-08  Richard Henderson  <rth@redhat.com>\n+\n+\tPR debug/23190\n+\t* decl.c (wrapup_globals_for_namespace): Call\n+\temit_debug_global_declarations.\n+\t* decl2.c (cp_finish_file): Likewise.\n+\n 2005-09-08  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/23691"}, {"sha": "50c1fd6406a663eeda1f71b37de1fb33a956ba56", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -789,6 +789,7 @@ wrapup_globals_for_namespace (tree namespace, void* data)\n   if (last_time)\n     {\n       check_global_declarations (vec, len);\n+      emit_debug_global_declarations (vec, len);\n       return 0;\n     }\n "}, {"sha": "afb747fde40aee1928892b8d6c499875070c5f65", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -3106,8 +3106,12 @@ cp_finish_file (void)\n      etc., and emit debugging information.  */\n   walk_namespaces (wrapup_globals_for_namespace, /*data=*/&reconsider);\n   if (VEC_length (tree, pending_statics) != 0)\n-    check_global_declarations (VEC_address (tree, pending_statics),\n-\t\t\t       VEC_length (tree, pending_statics));\n+    {\n+      check_global_declarations (VEC_address (tree, pending_statics),\n+\t\t\t         VEC_length (tree, pending_statics));\n+      emit_debug_global_declarations (VEC_address (tree, pending_statics),\n+\t\t\t\t      VEC_length (tree, pending_statics));\n+    }\n \n   /* Generate hidden aliases for Java.  */\n   build_java_method_aliases ();"}, {"sha": "d7ed7505300790e6dd892944ba01cae0844cc1ef", "filename": "gcc/langhooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -478,10 +478,10 @@ write_global_declarations (void)\n     vec[len - i - 1] = decl;\n \n   wrapup_global_declarations (vec, len);\n-\n   check_global_declarations (vec, len);\n+  emit_debug_global_declarations (vec, len);\n \n-    /* Clean up.  */\n+  /* Clean up.  */\n   free (vec);\n }\n "}, {"sha": "86d38cfc0a0afbd3d2eafe5da99bed1f529d6331", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -158,8 +158,7 @@ rest_of_decl_compilation (tree decl,\n \t   || DECL_INITIAL (decl))\n \t  && !DECL_EXTERNAL (decl))\n \t{\n-\t  if (flag_unit_at_a_time && !cgraph_global_info_ready\n-\t      && TREE_CODE (decl) != FUNCTION_DECL)\n+\t  if (TREE_CODE (decl) != FUNCTION_DECL)\n \t    cgraph_varpool_finalize_decl (decl);\n \t  else\n \t    assemble_variable (decl, top_level, at_end, 0);"}, {"sha": "0112ff7d37aa8f6c7c1a76808b9d6b5d0bf7d41a", "filename": "gcc/testsuite/gcc.dg/debug/20050907-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2F20050907-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2F20050907-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2F20050907-1.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -0,0 +1,24 @@\n+/* PR 23190 */\n+/* Well, collateral damage from a proposed patch fixing 23190.  We'd emit\n+   debug info for multilib_exclusions_raw without emitting the variable\n+   itself, leading to link errors.  This reduced form is filed as PR 23777,\n+   for not eliminating things soon enough.  */\n+/* { dg-do link } */\n+\n+static const char *const multilib_exclusions_raw[] = { 0 };\n+\n+void __attribute__((noinline)) f(char *const *p)\n+{\n+  __asm__ (\"\" : : \"g\"(p) : \"memory\");\n+}\n+\n+void g (char **o)\n+{\n+  const char *const *q = multilib_exclusions_raw;\n+\n+  f (o);\n+  while (*q++)\n+    f (o);\n+}\n+\n+int main() { return 0; }"}, {"sha": "75804507e23616796ad4ecdcc4b95d6c94ede4d6", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/var1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fvar1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fvar1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fvar1.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -0,0 +1,10 @@\n+/* PR 23190 */\n+/* { dg-do compile }\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+/* { dg-final { scan-assembler \"xyzzy\\[^\\\\n\\\\r\\]+DW_AT_name\" } } */\n+\n+void f(void)\n+{\n+   static int xyzzy;\n+   xyzzy += 3;\n+}"}, {"sha": "8ef2a74388c20968db6ca8aecfbc635b0ac2f32f", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/var2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fvar2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fvar2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fvar2.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -0,0 +1,14 @@\n+/* PR 23190 */\n+/* { dg-do compile }\n+/* { dg-options \"-O2 -gdwarf-2 -dA\" } */\n+/* { dg-final { scan-assembler \"DW_OP_addr\\[\\\\n\\\\r\\]+\\[^\\\\n\\\\r\\]+foo\" } } */\n+/* { dg-final { scan-assembler \"DW_OP_addr\\[\\\\n\\\\r\\]+\\[^\\\\n\\\\r\\]+bar\" } } */\n+\n+static int foo;\n+int bar;\n+int main(void)\n+{\n+   foo += 3;\n+   bar *= 5;\n+   return 0;\n+}"}, {"sha": "b96317099752b2d6bb6deb77c7c8a6fd786556f8", "filename": "gcc/toplev.c", "status": "modified", "additions": 157, "deletions": 138, "changes": 295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -685,177 +685,196 @@ output_file_directive (FILE *asm_file, const char *input_name)\n #endif\n }\n \n+/* A subroutine of wrapup_global_declarations.  We've come to the end of\n+   the compilation unit.  All deferred variables should be undeferred,\n+   and all incomplete decls should be finalized.  */\n+\n+void\n+wrapup_global_declaration_1 (tree decl)\n+{\n+  /* We're not deferring this any longer.  Assignment is conditional to\n+     avoid needlessly dirtying PCH pages.  */\n+  if (CODE_CONTAINS_STRUCT (TREE_CODE (decl), TS_DECL_WITH_VIS)\n+      && DECL_DEFER_OUTPUT (decl) != 0)\n+    DECL_DEFER_OUTPUT (decl) = 0;\n+\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_SIZE (decl) == 0)\n+    lang_hooks.finish_incomplete_decl (decl);\n+}\n+\n+/* A subroutine of wrapup_global_declarations.  Decide whether or not DECL\n+   needs to be output.  Return true if it is output.  */\n+\n+bool\n+wrapup_global_declaration_2 (tree decl)\n+{\n+  if (TREE_ASM_WRITTEN (decl) || DECL_EXTERNAL (decl))\n+    return false;\n+\n+  /* Don't write out static consts, unless we still need them.\n+\n+     We also keep static consts if not optimizing (for debugging),\n+     unless the user specified -fno-keep-static-consts.\n+     ??? They might be better written into the debug information.\n+     This is possible when using DWARF.\n+\n+     A language processor that wants static constants to be always\n+     written out (even if it is not used) is responsible for\n+     calling rest_of_decl_compilation itself.  E.g. the C front-end\n+     calls rest_of_decl_compilation from finish_decl.\n+     One motivation for this is that is conventional in some\n+     environments to write things like:\n+     static const char rcsid[] = \"... version string ...\";\n+     intending to force the string to be in the executable.\n+\n+     A language processor that would prefer to have unneeded\n+     static constants \"optimized away\" would just defer writing\n+     them out until here.  E.g. C++ does this, because static\n+     constants are often defined in header files.\n+\n+     ??? A tempting alternative (for both C and C++) would be\n+     to force a constant to be written if and only if it is\n+     defined in a main file, as opposed to an include file.  */\n+\n+  if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n+    {\n+      struct cgraph_varpool_node *node;\n+      bool needed = true;\n+      node = cgraph_varpool_node (decl);\n+\n+      if (node->finalized)\n+\tneeded = false;\n+      else if (node->alias)\n+\tneeded = false;\n+      else if (!cgraph_global_info_ready\n+\t       && (TREE_USED (decl)\n+\t\t   || TREE_USED (DECL_ASSEMBLER_NAME (decl))))\n+\t/* needed */;\n+      else if (node->needed)\n+\t/* needed */;\n+      else if (DECL_COMDAT (decl))\n+\tneeded = false;\n+      else if (TREE_READONLY (decl) && !TREE_PUBLIC (decl)\n+\t       && (optimize || !flag_keep_static_consts\n+\t\t   || DECL_ARTIFICIAL (decl)))\n+\tneeded = false;\n+\n+      if (needed)\n+\t{\n+\t  rest_of_decl_compilation (decl, 1, 1);\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n /* Do any final processing required for the declarations in VEC, of\n    which there are LEN.  We write out inline functions and variables\n    that have been deferred until this point, but which are required.\n    Returns nonzero if anything was put out.  */\n \n-int\n+bool\n wrapup_global_declarations (tree *vec, int len)\n {\n-  tree decl;\n+  bool reconsider, output_something = false;\n   int i;\n-  int reconsider;\n-  int output_something = 0;\n \n   for (i = 0; i < len; i++)\n-    {\n-      decl = vec[i];\n-\n-      /* We're not deferring this any longer.  Assignment is\n-\t conditional to avoid needlessly dirtying PCH pages.  */\n-      if (CODE_CONTAINS_STRUCT (TREE_CODE (decl), TS_DECL_WITH_VIS)\n-\t  && DECL_DEFER_OUTPUT (decl) != 0)\n-\tDECL_DEFER_OUTPUT (decl) = 0;\n-\n-      if (TREE_CODE (decl) == VAR_DECL && DECL_SIZE (decl) == 0)\n-\tlang_hooks.finish_incomplete_decl (decl);\n-    }\n+    wrapup_global_declaration_1 (vec[i]);\n \n   /* Now emit any global variables or functions that we have been\n      putting off.  We need to loop in case one of the things emitted\n      here references another one which comes earlier in the list.  */\n   do\n     {\n-      reconsider = 0;\n+      reconsider = false;\n       for (i = 0; i < len; i++)\n-\t{\n-\t  decl = vec[i];\n-\n-\t  if (TREE_ASM_WRITTEN (decl) || DECL_EXTERNAL (decl))\n-\t    continue;\n-\n-\t  /* Don't write out static consts, unless we still need them.\n-\n-\t     We also keep static consts if not optimizing (for debugging),\n-\t     unless the user specified -fno-keep-static-consts.\n-\t     ??? They might be better written into the debug information.\n-\t     This is possible when using DWARF.\n-\n-\t     A language processor that wants static constants to be always\n-\t     written out (even if it is not used) is responsible for\n-\t     calling rest_of_decl_compilation itself.  E.g. the C front-end\n-\t     calls rest_of_decl_compilation from finish_decl.\n-\t     One motivation for this is that is conventional in some\n-\t     environments to write things like:\n-\t     static const char rcsid[] = \"... version string ...\";\n-\t     intending to force the string to be in the executable.\n-\n-\t     A language processor that would prefer to have unneeded\n-\t     static constants \"optimized away\" would just defer writing\n-\t     them out until here.  E.g. C++ does this, because static\n-\t     constants are often defined in header files.\n-\n-\t     ??? A tempting alternative (for both C and C++) would be\n-\t     to force a constant to be written if and only if it is\n-\t     defined in a main file, as opposed to an include file.  */\n-\n-\t  if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n-\t    {\n-\t      struct cgraph_varpool_node *node;\n-\t      bool needed = 1;\n-\t      node = cgraph_varpool_node (decl);\n-\n-\t      if (node->finalized)\n-\t\tneeded = 0;\n-\t      else if (node->alias)\n-\t\tneeded = 0;\n-\t      else if (!cgraph_global_info_ready\n-\t\t       && (TREE_USED (decl)\n-\t\t\t   || TREE_USED (DECL_ASSEMBLER_NAME (decl))))\n-\t\t/* needed */;\n-\t      else if (node->needed)\n-\t\t/* needed */;\n-\t      else if (DECL_COMDAT (decl))\n-\t\tneeded = 0;\n-\t      else if (TREE_READONLY (decl) && !TREE_PUBLIC (decl)\n-\t\t       && (optimize || !flag_keep_static_consts\n-\t\t\t   || DECL_ARTIFICIAL (decl)))\n-\t\tneeded = 0;\n-\n-\t      if (needed)\n-\t\t{\n-\t\t  reconsider = 1;\n-\t\t  rest_of_decl_compilation (decl, 1, 1);\n-\t\t}\n-\t    }\n-\t}\n-\n+\treconsider |= wrapup_global_declaration_2 (vec[i]);\n       if (reconsider)\n-\toutput_something = 1;\n+\toutput_something = true;\n     }\n   while (reconsider);\n \n   return output_something;\n }\n \n+/* A subroutine of check_global_declarations.  Issue appropriate warnings\n+   for the global declaration DECL.  */\n+\n+void\n+check_global_declaration_1 (tree decl)\n+{\n+  /* Warn about any function declared static but not defined.  We don't\n+     warn about variables, because many programs have static variables\n+     that exist only to get some text into the object file.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && DECL_INITIAL (decl) == 0\n+      && DECL_EXTERNAL (decl)\n+      && ! DECL_ARTIFICIAL (decl)\n+      && ! TREE_NO_WARNING (decl)\n+      && ! TREE_PUBLIC (decl)\n+      && (warn_unused_function\n+\t  || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))))\n+    {\n+      if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n+\tpedwarn (\"%q+F used but never defined\", decl);\n+      else\n+\twarning (0, \"%q+F declared %<static%> but never defined\", decl);\n+      /* This symbol is effectively an \"extern\" declaration now.  */\n+      TREE_PUBLIC (decl) = 1;\n+      assemble_external (decl);\n+    }\n+\n+  /* Warn about static fns or vars defined but not used.  */\n+  if (((warn_unused_function && TREE_CODE (decl) == FUNCTION_DECL)\n+       /* We don't warn about \"static const\" variables because the\n+\t  \"rcs_id\" idiom uses that construction.  */\n+       || (warn_unused_variable\n+\t   && TREE_CODE (decl) == VAR_DECL && ! TREE_READONLY (decl)))\n+      && ! DECL_IN_SYSTEM_HEADER (decl)\n+      && ! TREE_USED (decl)\n+      /* The TREE_USED bit for file-scope decls is kept in the identifier,\n+\t to handle multiple external decls in different scopes.  */\n+      && ! TREE_USED (DECL_NAME (decl))\n+      && ! DECL_EXTERNAL (decl)\n+      && ! TREE_PUBLIC (decl)\n+      /* A volatile variable might be used in some non-obvious way.  */\n+      && ! TREE_THIS_VOLATILE (decl)\n+      /* Global register variables must be declared to reserve them.  */\n+      && ! (TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n+      /* Otherwise, ask the language.  */\n+      && lang_hooks.decls.warn_unused_global (decl))\n+    warning (0, \"%q+D defined but not used\", decl);\n+}\n+\n /* Issue appropriate warnings for the global declarations in VEC (of\n-   which there are LEN).  Output debugging information for them.  */\n+   which there are LEN).  */\n \n void\n check_global_declarations (tree *vec, int len)\n {\n-  tree decl;\n   int i;\n \n   for (i = 0; i < len; i++)\n-    {\n-      decl = vec[i];\n-\n-      /* Warn about any function\n-\t declared static but not defined.\n-\t We don't warn about variables,\n-\t because many programs have static variables\n-\t that exist only to get some text into the object file.  */\n-      if (TREE_CODE (decl) == FUNCTION_DECL\n-\t  && DECL_INITIAL (decl) == 0\n-\t  && DECL_EXTERNAL (decl)\n-\t  && ! DECL_ARTIFICIAL (decl)\n-\t  && ! TREE_NO_WARNING (decl)\n-\t  && ! TREE_PUBLIC (decl)\n-\t  && (warn_unused_function\n-\t      || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))))\n-\t{\n-\t  if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n-\t    pedwarn (\"%q+F used but never defined\", decl);\n-\t  else\n-\t    warning (0, \"%q+F declared %<static%> but never defined\",\n-\t\t     decl);\n-\t  /* This symbol is effectively an \"extern\" declaration now.  */\n-\t  TREE_PUBLIC (decl) = 1;\n-\t  assemble_external (decl);\n-\t}\n+    check_global_declaration_1 (vec[i]);\n+}\n \n-      /* Warn about static fns or vars defined but not used.  */\n-      if (((warn_unused_function && TREE_CODE (decl) == FUNCTION_DECL)\n-\t   /* We don't warn about \"static const\" variables because the\n-\t      \"rcs_id\" idiom uses that construction.  */\n-\t   || (warn_unused_variable\n-\t       && TREE_CODE (decl) == VAR_DECL && ! TREE_READONLY (decl)))\n-\t  && ! DECL_IN_SYSTEM_HEADER (decl)\n-\t  && ! TREE_USED (decl)\n-\t  /* The TREE_USED bit for file-scope decls is kept in the identifier,\n-\t     to handle multiple external decls in different scopes.  */\n-\t  && ! TREE_USED (DECL_NAME (decl))\n-\t  && ! DECL_EXTERNAL (decl)\n-\t  && ! TREE_PUBLIC (decl)\n-\t  /* A volatile variable might be used in some non-obvious way.  */\n-\t  && ! TREE_THIS_VOLATILE (decl)\n-\t  /* Global register variables must be declared to reserve them.  */\n-\t  && ! (TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n-\t  /* Otherwise, ask the language.  */\n-\t  && lang_hooks.decls.warn_unused_global (decl))\n-\twarning (0, \"%q+D defined but not used\", decl);\n-\n-      /* Avoid confusing the debug information machinery when there are\n-\t errors.  */\n-      if (errorcount == 0 && sorrycount == 0)\n-\t{\n-\t  timevar_push (TV_SYMOUT);\n-\t  (*debug_hooks->global_decl) (decl);\n-\t  timevar_pop (TV_SYMOUT);\n-\t}\n-    }\n+/* Emit debugging information for all global declarations in VEC.  */\n+\n+void\n+emit_debug_global_declarations (tree *vec, int len)\n+{\n+  int i;\n+\n+  /* Avoid confusing the debug information machinery when there are errors.  */\n+  if (errorcount != 0 || sorrycount != 0)\n+    return;\n+\n+  timevar_push (TV_SYMOUT);\n+  for (i = 0; i < len; i++)\n+    debug_hooks->global_decl (vec[i]);\n+  timevar_pop (TV_SYMOUT);\n }\n \n /* Warn about a use of an identifier which was marked deprecated.  */"}, {"sha": "35d53eb8d6ca742b86bfe2921ce05e0c2b3843ac", "filename": "gcc/toplev.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f8b93fe442457a30fa5289ae9b336f2cb1eda/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=db5f8b93fe442457a30fa5289ae9b336f2cb1eda", "patch": "@@ -92,8 +92,12 @@ extern void fnotice\t\t\t(FILE *, const char *, ...)\n      ATTRIBUTE_PRINTF_2;\n #endif\n \n-extern int wrapup_global_declarations (tree *, int);\n+extern void wrapup_global_declaration_1 (tree);\n+extern bool wrapup_global_declaration_2 (tree);\n+extern bool wrapup_global_declarations (tree *, int);\n+extern void check_global_declaration_1 (tree);\n extern void check_global_declarations (tree *, int);\n+extern void emit_debug_global_declarations (tree *, int);\n extern void write_global_declarations (void);\n \n /* A unique local time stamp, might be zero if none is available.  */"}]}