{"sha": "7e0c853c6f6a2987ac7616cbfdd52bb41d598bd5", "node_id": "C_kwDOANBUbNoAKDdlMGM4NTNjNmY2YTI5ODdhYzc2MTZjYmZkZDUyYmI0MWQ1OThiZDU", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-03-16T12:36:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-16T08:42:06Z"}, "message": "[Ada] Fix expansion of attribute Loop_Entry wrt value propagation\n\nWhen expanding attribute Loop_Entry we create constant object\ndeclarations and put them just before the loop. The current values of\nvariables at the point of Loop_Entry attribute must not be used when\nanalysing the initialization expressions of these constants, because\nthey might be different from the values at the loop entry itself.\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Disable value\n\tpropagation when analysing the constant that holds the\n\tLoop_Entry prefix value.", "tree": {"sha": "c6d072ad511e8dde4d91ec3ef7f6f0bd0e016f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6d072ad511e8dde4d91ec3ef7f6f0bd0e016f72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e0c853c6f6a2987ac7616cbfdd52bb41d598bd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0c853c6f6a2987ac7616cbfdd52bb41d598bd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e0c853c6f6a2987ac7616cbfdd52bb41d598bd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0c853c6f6a2987ac7616cbfdd52bb41d598bd5/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20652c7f22b86d3cd646ecc2227a670f81302509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20652c7f22b86d3cd646ecc2227a670f81302509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20652c7f22b86d3cd646ecc2227a670f81302509"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "daab82fe11a29040e3464a1c5aba085a2d4e386c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0c853c6f6a2987ac7616cbfdd52bb41d598bd5/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0c853c6f6a2987ac7616cbfdd52bb41d598bd5/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=7e0c853c6f6a2987ac7616cbfdd52bb41d598bd5", "patch": "@@ -26,6 +26,7 @@\n with Aspects;        use Aspects;\n with Atree;          use Atree;\n with Checks;         use Checks;\n+with Debug;          use Debug;\n with Einfo;          use Einfo;\n with Einfo.Entities; use Einfo.Entities;\n with Einfo.Utils;    use Einfo.Utils;\n@@ -1792,23 +1793,30 @@ package body Exp_Attr is\n          Push_Scope (Scope (Loop_Id));\n       end if;\n \n-      --  The analysis of the conditional block takes care of the constant\n-      --  declaration.\n+      --  Analyze constant declaration with simple value propagation disabled,\n+      --  because the values at the loop entry might be different than the\n+      --  values at the occurrence of Loop_Entry attribute.\n \n-      if Present (Result) then\n-         Rewrite (Loop_Stmt, Result);\n-         Analyze (Loop_Stmt);\n-\n-      --  The conditional block was analyzed when a previous 'Loop_Entry was\n-      --  expanded. There is no point in reanalyzing the block, simply analyze\n-      --  the declaration of the constant.\n+      declare\n+         Save_Debug_Flag_MM : constant Boolean := Debug_Flag_MM;\n+      begin\n+         Debug_Flag_MM := True;\n \n-      else\n          if Present (Aux_Decl) then\n             Analyze (Aux_Decl);\n          end if;\n \n          Analyze (Temp_Decl);\n+\n+         Debug_Flag_MM := Save_Debug_Flag_MM;\n+      end;\n+\n+      --  If the conditional block has just been created, then analyze it;\n+      --  otherwise it was analyzed when a previous 'Loop_Entry was expanded.\n+\n+      if Present (Result) then\n+         Rewrite (Loop_Stmt, Result);\n+         Analyze (Loop_Stmt);\n       end if;\n \n       Rewrite (N, New_Occurrence_Of (Temp_Id, Loc));"}]}