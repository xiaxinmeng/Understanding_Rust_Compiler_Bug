{"sha": "189d4130c01540a44347272a18fb3868dc0016f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg5ZDQxMzBjMDE1NDBhNDQzNDcyNzJhMThmYjM4NjhkYzAwMTZmMQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-11-29T15:26:21Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-11-29T15:26:21Z"}, "message": "fold-const.c (negate_expr_p): Return true for BIT_NOT_EXPR.\n\n2005-11-29  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * fold-const.c (negate_expr_p): Return true for BIT_NOT_EXPR.\n        (fold_unary) <case NEGATE_EXPR>: Move -(~a) transformation to ...\n        (negate_expr): Here.\n\nFrom-SVN: r107671", "tree": {"sha": "3b55a7b43a244d368bcd5d085f6112314da17de9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b55a7b43a244d368bcd5d085f6112314da17de9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/189d4130c01540a44347272a18fb3868dc0016f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/189d4130c01540a44347272a18fb3868dc0016f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/189d4130c01540a44347272a18fb3868dc0016f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/189d4130c01540a44347272a18fb3868dc0016f1/comments", "author": null, "committer": null, "parents": [{"sha": "719fbd99329e0824124b1afd0b62751355c65721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719fbd99329e0824124b1afd0b62751355c65721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719fbd99329e0824124b1afd0b62751355c65721"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "8a736655b6f7b8e8c0c670727cfaf02696fb6509", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/189d4130c01540a44347272a18fb3868dc0016f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/189d4130c01540a44347272a18fb3868dc0016f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=189d4130c01540a44347272a18fb3868dc0016f1", "patch": "@@ -1,3 +1,9 @@\n+2005-11-29  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* fold-const.c (negate_expr_p): Return true for BIT_NOT_EXPR.\n+\t(fold_unary) <case NEGATE_EXPR>: Move -(~a) transformation to ...\n+\t(negate_expr): Here.\n+\n 2005-11-29  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/i386/i386.h (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN):"}, {"sha": "2718af1490ff3e22411c55ecc4f4538706aa7114", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/189d4130c01540a44347272a18fb3868dc0016f1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/189d4130c01540a44347272a18fb3868dc0016f1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=189d4130c01540a44347272a18fb3868dc0016f1", "patch": "@@ -953,6 +953,8 @@ negate_expr_p (tree t)\n \n       /* Check that -CST will not overflow type.  */\n       return may_negate_without_overflow_p (t);\n+    case BIT_NOT_EXPR:\n+       return INTEGRAL_TYPE_P (type);\n \n     case REAL_CST:\n     case NEGATE_EXPR:\n@@ -1052,6 +1054,12 @@ negate_expr (tree t)\n \n   switch (TREE_CODE (t))\n     {\n+    /* Convert - (~A) to A + 1.  */\n+    case BIT_NOT_EXPR:\n+      if (INTEGRAL_TYPE_P (type))\n+        return fold_build2 (PLUS_EXPR, type, TREE_OPERAND (t, 0),\n+                            build_int_cst (type, 1));\n+      \n     case INTEGER_CST:\n       tem = fold_negate_const (t, type);\n       if (! TREE_OVERFLOW (tem)\n@@ -7030,10 +7038,6 @@ fold_unary (enum tree_code code, tree type, tree op0)\n     case NEGATE_EXPR:\n       if (negate_expr_p (arg0))\n \treturn fold_convert (type, negate_expr (arg0));\n-      /* Convert - (~A) to A + 1.  */\n-      if (INTEGRAL_TYPE_P (type) && TREE_CODE (arg0) == BIT_NOT_EXPR)\n-\treturn fold_build2 (PLUS_EXPR, type, TREE_OPERAND (arg0, 0),\n-\t\t\t    build_int_cst (type, 1));\n       return NULL_TREE;\n \n     case ABS_EXPR:"}]}