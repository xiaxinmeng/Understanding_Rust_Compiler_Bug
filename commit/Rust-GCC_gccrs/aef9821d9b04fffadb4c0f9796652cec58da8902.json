{"sha": "aef9821d9b04fffadb4c0f9796652cec58da8902", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVmOTgyMWQ5YjA0ZmZmYWRiNGMwZjk3OTY2NTJjZWM1OGRhODkwMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-05T15:51:46Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-06T10:19:10Z"}, "message": "Add in F32 and F64 types builtin types.\n\nWe need to ensure all suffix of literals are handled in a subsequent PR.", "tree": {"sha": "5bda63ded46482bd755fbdb0cac6be02e378f45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bda63ded46482bd755fbdb0cac6be02e378f45a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aef9821d9b04fffadb4c0f9796652cec58da8902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef9821d9b04fffadb4c0f9796652cec58da8902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef9821d9b04fffadb4c0f9796652cec58da8902", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef9821d9b04fffadb4c0f9796652cec58da8902/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "d241921933a931e676a722009a276fb1b0fc31f6", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -272,6 +272,14 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = compiled_type;\n   }\n \n+  void visit (TyTy::FloatType &type) override\n+  {\n+    ::Btype *compiled_type = nullptr;\n+    bool ok = ctx->lookup_compiled_types (type.get_ref (), &compiled_type);\n+    rust_assert (ok);\n+    translated = compiled_type;\n+  }\n+\n private:\n   TyTyResolveCompile (Context *ctx) : ctx (ctx) {}\n "}, {"sha": "90810007857c5ef61c34e155f196b61410689853", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -155,6 +155,36 @@ class CompileExpr : public HIRCompileBase\n \t}\n \treturn;\n \n+\tcase HIR::Literal::FLOAT: {\n+\t  printf (\"FLOATY BOYO: [%s]\\n\", expr.as_string ().c_str ());\n+\n+\t  mpfr_t fval;\n+\t  if (mpfr_init_set_str (fval, expr.as_string ().c_str (), 10,\n+\t\t\t\t MPFR_RNDN)\n+\t      != 0)\n+\t    {\n+\t      rust_fatal_error (expr.get_locus (),\n+\t\t\t\t\"bad float number in literal\");\n+\t      return;\n+\t    }\n+\n+\t  TyTy::TyBase *tyty = nullptr;\n+\t  if (!ctx->get_tyctx ()->lookup_type (\n+\t\texpr.get_mappings ().get_hirid (), &tyty))\n+\t    {\n+\t      rust_fatal_error (expr.get_locus (),\n+\t\t\t\t\"did not resolve type for this literal expr\");\n+\t      return;\n+\t    }\n+\n+\t  printf (\"tyty float is [%s]\\n\", tyty->as_string ().c_str ());\n+\n+\t  Btype *type = TyTyResolveCompile::compile (ctx, tyty);\n+\t  translated\n+\t    = ctx->get_backend ()->float_constant_expression (type, fval);\n+\t}\n+\treturn;\n+\n       default:\n \trust_fatal_error (expr.get_locus (), \"unknown literal\");\n \treturn;"}, {"sha": "e3c8a73edf7bbf9ae59d2d507e9a4ca31e71b118", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -163,6 +163,24 @@ class TyTyCompile : public TyTy::TyVisitor\n     gcc_unreachable ();\n   }\n \n+  void visit (TyTy::FloatType &type) override\n+  {\n+    switch (type.get_kind ())\n+      {\n+      case TyTy::FloatType::F32:\n+\ttranslated = backend->named_type (\"f32\", backend->float_type (32),\n+\t\t\t\t\t  Linemap::predeclared_location ());\n+\treturn;\n+\n+      case TyTy::FloatType::F64:\n+\ttranslated = backend->named_type (\"f32\", backend->float_type (64),\n+\t\t\t\t\t  Linemap::predeclared_location ());\n+\treturn;\n+      }\n+\n+    gcc_unreachable ();\n+  }\n+\n private:\n   TyTyCompile (::Backend *backend)\n     : backend (backend), translated (nullptr),"}, {"sha": "fe8d7e0a99aa317fea07c0748c96daedb555bf08", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -140,6 +140,10 @@ Resolver::generate_builtins ()\n   auto i128\n     = new TyTy::IntType (mappings->get_next_hir_id (), TyTy::IntType::I128);\n   auto rbool = new TyTy::BoolType (mappings->get_next_hir_id ());\n+  auto f32\n+    = new TyTy::FloatType (mappings->get_next_hir_id (), TyTy::FloatType::F32);\n+  auto f64\n+    = new TyTy::FloatType (mappings->get_next_hir_id (), TyTy::FloatType::F64);\n \n   MKBUILTIN_TYPE (\"u8\", builtins, u8);\n   MKBUILTIN_TYPE (\"u16\", builtins, u16);\n@@ -152,6 +156,8 @@ Resolver::generate_builtins ()\n   MKBUILTIN_TYPE (\"i64\", builtins, i64);\n   MKBUILTIN_TYPE (\"i128\", builtins, i128);\n   MKBUILTIN_TYPE (\"bool\", builtins, rbool);\n+  MKBUILTIN_TYPE (\"f32\", builtins, f32);\n+  MKBUILTIN_TYPE (\"f64\", builtins, f64);\n }\n \n void"}, {"sha": "a5440c096259fd1fbe2a8ec67c1cf5ea02c2e8df", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -196,6 +196,13 @@ class TypeCheckExpr : public TypeCheckBase\n \t}\n \tbreak;\n \n+\tcase HIR::Literal::LitType::FLOAT: {\n+\t  // FIXME need to respect the suffix if applicable\n+\t  auto ok = context->lookup_builtin (\"f32\", &infered);\n+\t  rust_assert (ok);\n+\t}\n+\tbreak;\n+\n \tcase HIR::Literal::LitType::BOOL: {\n \t  auto ok = context->lookup_builtin (\"bool\", &infered);\n \t  rust_assert (ok);"}, {"sha": "615ef80708bcaf2f8fa5bab8765ef89c25fa7274", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -316,6 +316,31 @@ class UintRules : protected BaseRules\n   TyBase *resolved;\n };\n \n+class FloatRules : protected BaseRules\n+{\n+public:\n+  FloatRules (FloatType *base)\n+    : BaseRules (base), base (base), resolved (nullptr)\n+  {}\n+  ~FloatRules () {}\n+\n+  TyBase *combine (TyBase *other)\n+  {\n+    other->accept_vis (*this);\n+    return resolved;\n+  }\n+\n+  void visit (FloatType &type) override\n+  {\n+    // FIXME we should look at the FloatKind and respect it\n+    resolved = new FloatType (type.get_ref (), type.get_kind ());\n+  }\n+\n+private:\n+  FloatType *base;\n+  TyBase *resolved;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "40998ca3caad1105dce8c4513d89ceb975f7fe74", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -37,6 +37,7 @@ class TyVisitor\n   virtual void visit (BoolType &type) {}\n   virtual void visit (IntType &type) {}\n   virtual void visit (UintType &type) {}\n+  virtual void visit (FloatType &type) {}\n };\n \n } // namespace TyTy"}, {"sha": "0cefab67ba9e13c623189900e5fd2a8325795ebf", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -254,6 +254,33 @@ UintType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+void\n+FloatType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+FloatType::as_string () const\n+{\n+  switch (float_kind)\n+    {\n+    case F32:\n+      return \"f32\";\n+    case F64:\n+      return \"f64\";\n+    }\n+  gcc_unreachable ();\n+  return \"__unknown_float_type\";\n+}\n+\n+TyBase *\n+FloatType::combine (TyBase *other)\n+{\n+  FloatRules r (this);\n+  return r.combine (other);\n+}\n+\n void\n TypeCheckCallExpr::visit (FnType &type)\n {"}, {"sha": "59c4bcb93fc9caacaac3a2261565620c22dc451c", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -295,6 +295,31 @@ class UintType : public TyBase\n   UintKind uint_kind;\n };\n \n+class FloatType : public TyBase\n+{\n+public:\n+  enum FloatKind\n+  {\n+    F32,\n+    F64\n+  };\n+\n+  FloatType (HirId ref, FloatKind kind)\n+    : TyBase (ref, TypeKind::FLOAT), float_kind (kind)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  TyBase *combine (TyBase *other) override;\n+\n+  FloatKind get_kind () const { return float_kind; }\n+\n+private:\n+  FloatKind float_kind;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "57a746fa2e09a89e220c040b2171631bf085e574", "filename": "gcc/testsuite/rust.test/compilable/float1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ffloat1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef9821d9b04fffadb4c0f9796652cec58da8902/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ffloat1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ffloat1.rs?ref=aef9821d9b04fffadb4c0f9796652cec58da8902", "patch": "@@ -0,0 +1,8 @@\n+fn test(x: f32) -> f32 {\n+    return x + 1.0;\n+}\n+\n+fn main() {\n+    let a_float = 5.123;\n+    let call_test = test(a_float + 1.0);\n+}"}]}