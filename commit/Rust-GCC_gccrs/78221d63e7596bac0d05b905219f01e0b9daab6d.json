{"sha": "78221d63e7596bac0d05b905219f01e0b9daab6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgyMjFkNjNlNzU5NmJhYzBkMDViOTA1MjE5ZjAxZTBiOWRhYWI2ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-12T16:39:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-12T16:39:17Z"}, "message": "(fold, case MULT_EXPR): If arg is an unsigned CEIL_DIV_EXPR, convert\nto TRUNC_DIV_EXPR of a PLUS_EXPR in some cases.\n\nFrom-SVN: r7744", "tree": {"sha": "8b3e7195ab5b655e6b5349a8b05251e4fdd61ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b3e7195ab5b655e6b5349a8b05251e4fdd61ae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78221d63e7596bac0d05b905219f01e0b9daab6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78221d63e7596bac0d05b905219f01e0b9daab6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78221d63e7596bac0d05b905219f01e0b9daab6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78221d63e7596bac0d05b905219f01e0b9daab6d/comments", "author": null, "committer": null, "parents": [{"sha": "db19fab5ec790d202f7a7ed827047f845f884a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db19fab5ec790d202f7a7ed827047f845f884a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db19fab5ec790d202f7a7ed827047f845f884a20"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "15509a3f07ae2567a0f7447e2024584c38affba6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78221d63e7596bac0d05b905219f01e0b9daab6d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78221d63e7596bac0d05b905219f01e0b9daab6d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=78221d63e7596bac0d05b905219f01e0b9daab6d", "patch": "@@ -3751,6 +3751,24 @@ fold (expr)\n \t      && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n \t    return TREE_OPERAND (arg0, 0);\n \n+\t  /* If we have ((A / C1) * C2) with C1 and C2 constant,\n+\t     C2 >= C1, and the division an unsigned CEIL_DIV_EXPR,\n+\t     we know that the addition that's part of the CEIL_DIV_EXPR\n+\t     cannot overflow while the generic CEIL_DIV_EXPR does not.\n+\t     So convert it into a TRUNC_DIV_EXPR of an add.  */\n+\t  if (TREE_CODE (arg0) == CEIL_DIV_EXPR && TREE_UNSIGNED (type)\n+\t      && TREE_CODE (arg1) == INTEGER_CST\n+\t      && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n+\t      && ! tree_int_cst_lt (arg1, TREE_OPERAND (arg0, 1)))\n+\t    return\n+\t      build (MULT_EXPR, type,\n+\t\t     build (TRUNC_DIV_EXPR, type,\n+\t\t\t    build (PLUS_EXPR, type,\n+\t\t\t\t   TREE_OPERAND (TREE_OPERAND (arg0, 0), 0)),\n+\t\t\t    const_binop (MINUS_EXPR, TREE_OPERAND (arg0, 1),\n+\t\t\t\t\t integer_one_node, 0)),\n+\t\t     arg1);\n+\t\t\t\t \n \t  /* (a * (1 << b)) is (a << b)  */\n \t  if (TREE_CODE (arg1) == LSHIFT_EXPR\n \t      && integer_onep (TREE_OPERAND (arg1, 0)))"}]}