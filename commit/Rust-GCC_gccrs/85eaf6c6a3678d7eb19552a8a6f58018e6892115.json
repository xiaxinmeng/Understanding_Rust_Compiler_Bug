{"sha": "85eaf6c6a3678d7eb19552a8a6f58018e6892115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVlYWY2YzZhMzY3OGQ3ZWIxOTU1MmE4YTZmNTgwMThlNjg5MjExNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-08T08:03:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-08T08:03:12Z"}, "message": "re PR target/87913 (max(n, 1) code generation)\n\n2018-11-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87913\n\t* tree-ssa-phiopt.c (minmax_replacement): Turn EQ/NE compares\n\tof extreme values to ordered comparisons.\n\n\t* gcc.dg/tree-ssa/phi-opt-20.c: New testcase.\n\nFrom-SVN: r265909", "tree": {"sha": "2f0c0aea397f54e0dbf30d9a6eb61dbb6c78dd07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f0c0aea397f54e0dbf30d9a6eb61dbb6c78dd07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85eaf6c6a3678d7eb19552a8a6f58018e6892115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85eaf6c6a3678d7eb19552a8a6f58018e6892115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85eaf6c6a3678d7eb19552a8a6f58018e6892115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85eaf6c6a3678d7eb19552a8a6f58018e6892115/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab6813850d0a51f90f57a0e4da470cb0b5c5b1f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6813850d0a51f90f57a0e4da470cb0b5c5b1f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab6813850d0a51f90f57a0e4da470cb0b5c5b1f3"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "270180f7e041c51c623ae3494dab81113e9f9c28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85eaf6c6a3678d7eb19552a8a6f58018e6892115/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85eaf6c6a3678d7eb19552a8a6f58018e6892115/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85eaf6c6a3678d7eb19552a8a6f58018e6892115", "patch": "@@ -1,3 +1,9 @@\n+2018-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87913\n+\t* tree-ssa-phiopt.c (minmax_replacement): Turn EQ/NE compares\n+\tof extreme values to ordered comparisons.\n+\n 2018-11-07  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR middle-end/42726"}, {"sha": "5edc17e1c37d3c56323d91249890eb74b85a8435", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85eaf6c6a3678d7eb19552a8a6f58018e6892115/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85eaf6c6a3678d7eb19552a8a6f58018e6892115/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85eaf6c6a3678d7eb19552a8a6f58018e6892115", "patch": "@@ -1,3 +1,8 @@\n+2018-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87913\n+\t* gcc.dg/tree-ssa/phi-opt-20.c: New testcase.\n+\n 2018-11-08  Chenghua Xu  <paul.hua.gm@gmail.com>\n \n \t* gcc.target/mips/mips.exp (mips-dg-options):"}, {"sha": "c310308e3a658bcf66960ca509f7b2c46ed3cc8d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-20.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85eaf6c6a3678d7eb19552a8a6f58018e6892115/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85eaf6c6a3678d7eb19552a8a6f58018e6892115/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-20.c?ref=85eaf6c6a3678d7eb19552a8a6f58018e6892115", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-phiopt1\" } */\n+\n+unsigned int f(unsigned int num)\n+{\n+  return num < 1 ? 1 : num;\n+}\n+\n+unsigned int g(unsigned int num)\n+{\n+  return num > (unsigned)__INT_MAX__ * 2 ? (unsigned)__INT_MAX__ * 2 : num;\n+}\n+\n+int h(int num)\n+{\n+  return num < -__INT_MAX__ ? -__INT_MAX__ : num;\n+}\n+\n+int i(int num)\n+{\n+  return num > __INT_MAX__-1 ? __INT_MAX__-1 : num;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 2 \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 2 \"phiopt1\" } } */"}, {"sha": "64039e2484ea8ff914abddeeff992a880cfff492", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85eaf6c6a3678d7eb19552a8a6f58018e6892115/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85eaf6c6a3678d7eb19552a8a6f58018e6892115/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=85eaf6c6a3678d7eb19552a8a6f58018e6892115", "patch": "@@ -1204,7 +1204,7 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t    edge e0, edge e1, gimple *phi,\n \t\t    tree arg0, tree arg1)\n {\n-  tree result, type;\n+  tree result, type, rhs;\n   gcond *cond;\n   gassign *new_stmt;\n   edge true_edge, false_edge;\n@@ -1220,6 +1220,25 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   cond = as_a <gcond *> (last_stmt (cond_bb));\n   cmp = gimple_cond_code (cond);\n+  rhs = gimple_cond_rhs (cond);\n+\n+  /* Turn EQ/NE of extreme values to order comparisons.  */\n+  if ((cmp == NE_EXPR || cmp == EQ_EXPR)\n+      && TREE_CODE (rhs) == INTEGER_CST)\n+    {\n+      if (wi::eq_p (wi::to_wide (rhs), wi::min_value (TREE_TYPE (rhs))))\n+\t{\n+\t  cmp = (cmp == EQ_EXPR) ? LT_EXPR : GE_EXPR;\n+\t  rhs = wide_int_to_tree (TREE_TYPE (rhs),\n+\t\t\t\t  wi::min_value (TREE_TYPE (rhs)) + 1);\n+\t}\n+      else if (wi::eq_p (wi::to_wide (rhs), wi::max_value (TREE_TYPE (rhs))))\n+\t{\n+\t  cmp = (cmp == EQ_EXPR) ? GT_EXPR : LE_EXPR;\n+\t  rhs = wide_int_to_tree (TREE_TYPE (rhs),\n+\t\t\t\t  wi::max_value (TREE_TYPE (rhs)) - 1);\n+\t}\n+    }\n \n   /* This transformation is only valid for order comparisons.  Record which\n      operand is smaller/larger if the result of the comparison is true.  */\n@@ -1228,7 +1247,7 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n   if (cmp == LT_EXPR || cmp == LE_EXPR)\n     {\n       smaller = gimple_cond_lhs (cond);\n-      larger = gimple_cond_rhs (cond);\n+      larger = rhs;\n       /* If we have smaller < CST it is equivalent to smaller <= CST-1.\n \t Likewise smaller <= CST is equivalent to smaller < CST+1.  */\n       if (TREE_CODE (larger) == INTEGER_CST)\n@@ -1255,7 +1274,7 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n     }\n   else if (cmp == GT_EXPR || cmp == GE_EXPR)\n     {\n-      smaller = gimple_cond_rhs (cond);\n+      smaller = rhs;\n       larger = gimple_cond_lhs (cond);\n       /* If we have larger > CST it is equivalent to larger >= CST+1.\n \t Likewise larger >= CST is equivalent to larger > CST-1.  */"}]}