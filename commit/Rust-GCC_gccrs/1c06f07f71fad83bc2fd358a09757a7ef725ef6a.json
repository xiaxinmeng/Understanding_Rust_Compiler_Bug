{"sha": "1c06f07f71fad83bc2fd358a09757a7ef725ef6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwNmYwN2Y3MWZhZDgzYmMyZmQzNThhMDk3NTdhN2VmNzI1ZWY2YQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-01-04T05:31:23Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-01-04T05:31:23Z"}, "message": "re PR tree-optimization/78856 (wrong code at -O3 on x86_64-linux-gnu (in both 32-bit and 64-bit modes))\n\n\tPR tree-optimizatin/78856\n\t* tree-ssa-threadupdate.c: Include tree-vectorizer.h.\n\t(mark_threaded_blocks): Remove code to truncate thread paths that\n\tcross multiple loop headers.  Instead invalidate the cached loop\n\titeration information and handle case of a thread path walking\n\tinto an irreducible region.\n\n\tPR tree-optimization/78856\n\t* gcc.c-torture/execute/pr78856.c: New test.\n\nFrom-SVN: r244045", "tree": {"sha": "f4eebb0e6cb731198ae71d0ade4382185c995f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4eebb0e6cb731198ae71d0ade4382185c995f55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c06f07f71fad83bc2fd358a09757a7ef725ef6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c06f07f71fad83bc2fd358a09757a7ef725ef6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c06f07f71fad83bc2fd358a09757a7ef725ef6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c06f07f71fad83bc2fd358a09757a7ef725ef6a/comments", "author": null, "committer": null, "parents": [{"sha": "60fb638f9c08e2cf73605fc5a60531215098a82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fb638f9c08e2cf73605fc5a60531215098a82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60fb638f9c08e2cf73605fc5a60531215098a82d"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "6b2888f36f6e0e216f6e610f1507b068f3410b48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c06f07f71fad83bc2fd358a09757a7ef725ef6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c06f07f71fad83bc2fd358a09757a7ef725ef6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c06f07f71fad83bc2fd358a09757a7ef725ef6a", "patch": "@@ -1,3 +1,12 @@\n+2017-01-03  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimizatin/78856\n+\t* tree-ssa-threadupdate.c: Include tree-vectorizer.h.\n+\t(mark_threaded_blocks): Remove code to truncate thread paths that\n+\tcross multiple loop headers.  Instead invalidate the cached loop\n+\titeration information and handle case of a thread path walking\n+\tinto an irreducible region.\n+\n 2016-12-30  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/78900"}, {"sha": "cadfbc977ce4804fa0cc681860711670a303cf7d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c06f07f71fad83bc2fd358a09757a7ef725ef6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c06f07f71fad83bc2fd358a09757a7ef725ef6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c06f07f71fad83bc2fd358a09757a7ef725ef6a", "patch": "@@ -1,3 +1,8 @@\n+2017-01-03  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/78856\n+\t* gcc.c-torture/execute/pr78856.c: New test.\n+\n 2017-01-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/78953"}, {"sha": "80f2317a15bccdd4806dbc22925e4e9c3731a323", "filename": "gcc/testsuite/gcc.c-torture/execute/pr78856.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c06f07f71fad83bc2fd358a09757a7ef725ef6a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78856.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c06f07f71fad83bc2fd358a09757a7ef725ef6a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78856.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78856.c?ref=1c06f07f71fad83bc2fd358a09757a7ef725ef6a", "patch": "@@ -0,0 +1,25 @@\n+extern void exit (int);\n+\n+int a, b, c, d, e, f[3]; \n+\n+int main() \n+{\n+  while (d)\n+    while (1)\n+      ;\n+  int g = 0, h, i = 0;\n+  for (; g < 21; g += 9) \n+    {\n+      int j = 1;\n+      for (h = 0; h < 3; h++)\n+\tf[h] = 1;\n+      for (; j < 10; j++) {\n+\td = i && (b ? 0 : c); \n+\ti = 1;\n+\tif (g)\n+\t  a = e;\n+      }\n+  }\n+  exit (0);\n+}\n+"}, {"sha": "2da93a803d4762128ba66529ca3b987618b272d2", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c06f07f71fad83bc2fd358a09757a7ef725ef6a/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c06f07f71fad83bc2fd358a09757a7ef725ef6a/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=1c06f07f71fad83bc2fd358a09757a7ef725ef6a", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"dbgcnt.h\"\n #include \"tree-cfg.h\"\n+#include \"tree-vectorizer.h\"\n \n /* Given a block B, update the CFG and SSA graph to reflect redirecting\n    one or more in-edges to B to instead reach the destination of an\n@@ -2084,10 +2085,8 @@ mark_threaded_blocks (bitmap threaded_blocks)\n   /* Look for jump threading paths which cross multiple loop headers.\n \n      The code to thread through loop headers will change the CFG in ways\n-     that break assumptions made by the loop optimization code.\n-\n-     We don't want to blindly cancel the requests.  We can instead do better\n-     by trimming off the end of the jump thread path.  */\n+     that invalidate the cached loop iteration information.  So we must\n+     detect that case and wipe the cached information.  */\n   EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, bi)\n     {\n       basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n@@ -2102,26 +2101,16 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t\t   i++)\n \t\t{\n \t\t  basic_block dest = (*path)[i]->e->dest;\n+\t\t  basic_block src = (*path)[i]->e->src;\n \t\t  crossed_headers += (dest == dest->loop_father->header);\n+\t\t  /* If we step from a block outside an irreducible region\n+\t\t     to a block inside an irreducible region, then we have\n+\t\t     crossed into a loop.  */\n+\t\t  crossed_headers += ((src->flags & BB_IRREDUCIBLE_LOOP)\n+\t\t\t\t      != (dest->flags & BB_IRREDUCIBLE_LOOP));\n \t\t  if (crossed_headers > 1)\n \t\t    {\n-\t\t      /* Trim from entry I onwards.  */\n-\t\t      for (unsigned int j = i; j < path->length (); j++)\n-\t\t\tdelete (*path)[j];\n-\t\t      path->truncate (i);\n-\n-\t\t      /* Now that we've truncated the path, make sure\n-\t\t\t what's left is still valid.   We need at least\n-\t\t\t two edges on the path and the last edge can not\n-\t\t\t be a joiner.  This should never happen, but let's\n-\t\t\t be safe.  */\n-\t\t      if (path->length () < 2\n-\t\t\t  || (path->last ()->type\n-\t\t\t      == EDGE_COPY_SRC_JOINER_BLOCK))\n-\t\t\t{\n-\t\t\t  delete_jump_thread_path (path);\n-\t\t\t  e->aux = NULL;\n-\t\t\t}\n+\t\t      vect_free_loop_info_assumptions (dest->loop_father);\n \t\t      break;\n \t\t    }\n \t\t}"}]}