{"sha": "c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkOWE4OGNiYzIzMWIyNzUzOWViZjRiZTNmMDg0M2NiZjU5ODQxYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-02-14T16:24:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-02-14T16:24:45Z"}, "message": "Makefile.in (toplev.o): Depend on params.h.\n\n\t* Makefile.in (toplev.o): Depend on params.h.\n\t(intergate.o): Likewise.\n\t(params.o): New target.\n\t* flags.h (inline_max_insns): Remove.\n\t* integrate.c: Include params.h.\n\tUse MAX_INLINE_INSNS instead of inline_max_insns.\n\t* params.c: New file.\n\t* params.h: Likewise.\n\t* params.def: Likewise.\n\t* toplev.c: Include params.h.\n\t(lang_independent_params): New variable.\n\t(decode_f_option): Use the param machinery instead of setting\n\tmax_inline_insns.\n\t(independent_decode_option): Handle \"--param name=value\".\n\t(main): Register language-independent parameters.\n\nFrom-SVN: r39683", "tree": {"sha": "358938d277595e7cf94e5146dc0522239e45faf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/358938d277595e7cf94e5146dc0522239e45faf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/comments", "author": null, "committer": null, "parents": [{"sha": "4806765ec47c11611b78a58908db872b1600e45f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4806765ec47c11611b78a58908db872b1600e45f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4806765ec47c11611b78a58908db872b1600e45f"}], "stats": {"total": 316, "additions": 297, "deletions": 19}, "files": [{"sha": "07ab9265b523e2c1b12f3bc7d29b3885d6cbb2bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "patch": "@@ -1,3 +1,21 @@\n+2001-02-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Makefile.in (toplev.o): Depend on params.h.\n+\t(intergate.o): Likewise.\n+\t(params.o): New target.\n+\t* flags.h (inline_max_insns): Remove.\n+\t* integrate.c: Include params.h.\n+\tUse MAX_INLINE_INSNS instead of inline_max_insns.\n+\t* params.c: New file.\n+\t* params.h: Likewise.\n+\t* params.def: Likewise.\n+\t* toplev.c: Include params.h.\n+\t(lang_independent_params): New variable.\n+\t(decode_f_option): Use the param machinery instead of setting \n+\tmax_inline_insns.\n+\t(independent_decode_option): Handle \"--param name=value\".\n+\t(main): Register language-independent parameters.\n+\n Wed Feb 14 11:13:45 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (pushsf, pushdf_nointeger): Fix constraint."}, {"sha": "6f808c4c7b48527189a6540f83dc24ba1e0a817f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "patch": "@@ -1340,7 +1340,8 @@ toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) function.h \\\n    flags.h input.h $(INSN_ATTR_H) xcoffout.h output.h diagnostic.h \\\n    insn-codes.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h dwarfout.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n-   graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) ssa.h\n+   graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n+   ssa.h params.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(MAYBE_USE_COLLECT2) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n \t  -c $(srcdir)/toplev.c\n@@ -1406,7 +1407,8 @@ emit-rtl.o : emit-rtl.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n real.o : real.c $(CONFIG_H) system.h $(TREE_H) toplev.h\n integrate.o : integrate.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    $(INTEGRATE_H) insn-flags.h insn-config.h $(EXPR_H) real.h $(REGS_H) \\\n-   intl.h function.h output.h $(RECOG_H) except.h toplev.h $(LOOP_H)\n+   intl.h function.h output.h $(RECOG_H) except.h toplev.h $(LOOP_H) \\\n+   params.h\n jump.o : jump.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h $(REGS_H) \\\n    insn-config.h insn-flags.h $(RECOG_H) $(EXPR_H) real.h except.h function.h \\\n    toplev.h $(INSN_ATTR_H)\n@@ -1527,6 +1529,7 @@ ifcvt.o : ifcvt.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) \\\n    output.h\n dependence.o : dependence.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) \\\n    $(C_COMMON_H) flags.h varray.h $(EXPR_H)\n+params.o : params.c $(CONFIG_H) system.h params.h toplev.h\n \n $(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) $(GGC_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \\"}, {"sha": "3ef556eb42b3904dc71076e815e2ed61d6ab9be1", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "patch": "@@ -579,10 +579,6 @@ extern int flag_prefix_function_name;\n extern int g_switch_value;\n extern int g_switch_set;\n \n-/* Value of the -finline-limit flag.  */\n-\n-extern int inline_max_insns;\n-\n /* Values of the -falign-* flags: how much to align labels in code. \n    0 means `use default', 1 means `don't align'.  \n    For each variable, there is an _log variant which is the power"}, {"sha": "9f28a37258d352d942e3940413ec66d701369fab", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "patch": "@@ -40,6 +40,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"intl.h\"\n #include \"loop.h\"\n+#include \"params.h\"\n \n #include \"obstack.h\"\n #define\tobstack_chunk_alloc\txmalloc\n@@ -89,15 +90,6 @@ static void copy_insn_list              PARAMS ((rtx, struct inline_remap *,\n static int compare_blocks               PARAMS ((const PTR, const PTR));\n static int find_block                   PARAMS ((const PTR, const PTR));\n \n-/* The maximum number of instructions accepted for inlining a\n-   function.  Increasing values mean more agressive inlining.\n-   This affects currently only functions explicitly marked as\n-   inline (or methods defined within the class definition for C++).\n-   The default value of 10000 is arbitrary but high to match the\n-   previously unlimited gcc capabilities.  */\n-\n-int inline_max_insns = 10000;\n-\n /* Used by copy_rtx_and_substitute; this indicates whether the function is\n    called for the purpose of inlining or some other purpose (i.e. loop\n    unrolling).  This affects how constant pool references are handled.\n@@ -135,11 +127,11 @@ function_cannot_inline_p (fndecl)\n   tree last = tree_last (TYPE_ARG_TYPES (TREE_TYPE (fndecl)));\n \n   /* For functions marked as inline increase the maximum size to\n-     inline_max_insns (-finline-limit-<n>).  For regular functions\n+     MAX_INLINE_INSNS (-finline-limit-<n>).  For regular functions\n      use the limit given by INTEGRATE_THRESHOLD.  */\n \n   int max_insns = (DECL_INLINE (fndecl))\n-\t\t   ? (inline_max_insns\n+\t\t   ? (MAX_INLINE_INSNS\n \t\t      + 8 * list_length (DECL_ARGUMENTS (fndecl)))\n \t\t   : INTEGRATE_THRESHOLD (fndecl);\n "}, {"sha": "9b1b09ccc42968080baf8abf3ddba3d81ea330f4", "filename": "gcc/params.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "patch": "@@ -0,0 +1,84 @@\n+/* params.c - Run-time parameters.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Written by Mark Mitchell <mark@codesourcery.com>.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  \n+\n+*/\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"params.h\"\n+#include \"toplev.h\"\n+\n+/* An array containing the compiler parameters and their current\n+   values.  */\n+\n+param_info *compiler_params;\n+\n+/* The number of entries in the table.  */\n+\n+static size_t num_compiler_params;\n+\n+/* Add the N PARAMS to the current list of compiler parameters.  */\n+\n+void \n+add_params (params, n)\n+     const param_info params[];\n+     size_t n;\n+{\n+  /* Allocate enough space for the new parameters.  */\n+  compiler_params = \n+    ((param_info *) \n+     xrealloc (compiler_params,\n+\t       (num_compiler_params + n) * sizeof (param_info)));\n+  /* Copy them into the table.  */\n+  memcpy (compiler_params + num_compiler_params,\n+\t  params,\n+\t  n * sizeof (param_info));\n+  /* Keep track of how many parameters we have.  */\n+  num_compiler_params += n;\n+}\n+\n+/* Set the VALUE associated with the parameter given by NAME.  */\n+\n+void\n+set_param_value (name, value)\n+     const char *name;\n+     int value;\n+{\n+  size_t i;\n+\n+  /* Make sure nobody tries to set a parameter to an invalid value.  */\n+  if (value == INVALID_PARAM_VAL)\n+    abort ();\n+\n+  /* Scan the parameter table to find a matching entry.  */\n+  for (i = 0; i < num_compiler_params; ++i)\n+    if (strcmp (compiler_params[i].option, name) == 0)\n+      {\n+\tcompiler_params[i].value = value;\n+\treturn;\n+      }\n+\n+  /* If we didn't find this parameter, issue an error message.  */\n+  error (\"invalid parameter `%s'\", name);\n+}\n+\n+     \n+  "}, {"sha": "f96a89f69aef582d369a9cc31d5e43572e2c2882", "filename": "gcc/params.def", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "patch": "@@ -0,0 +1,50 @@\n+/* params.def - Run-time parameters.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Written by Mark Mitchell <mark@codesourcery.com>.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  \n+\n+*/\n+\n+/* This file contains definitions for language-independent\n+   parameters.  The DEFPARAM macro takes 4 arguments:\n+\n+     - The enumeral corresonding to this parameter.\n+\n+     - The name that can be used to set this parameter using the \n+       command-line option `--param <name>=<value>'.\n+\n+     - A help string explaining how the parameter is used.\n+\n+     - A default value for the parameter.  */\n+\n+/* The maximum number of instructions accepted for inlining a\n+   function.  Increasing values mean more agressive inlining.\n+   This affects currently only functions explicitly marked as\n+   inline (or methods defined within the class definition for C++).\n+   The default value of 10000 is arbitrary but high to match the\n+   previously unlimited gcc capabilities.  */\n+DEFPARAM (PARAM_MAX_INLINE_INSNS,\n+\t  \"max-inline-insns\",\n+\t  \"The maximum number of instructions in a function that is eligible for inlining\",\n+\t  10000)\n+\n+/*\n+Local variables:\n+mode:c\n+End: */"}, {"sha": "c097ad1c48945e78d293ba0db0efdd6c0d7aed14", "filename": "gcc/params.h", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "patch": "@@ -0,0 +1,85 @@\n+/* params.h - Run-time parameters.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Written by Mark Mitchell <mark@codesourcery.com>.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  \n+\n+*/\n+\n+/* This module provides a means for setting integral parameters\n+   dynamically.  Instead of encoding magic numbers in various places,\n+   use this module to organize all the magic numbers in a single\n+   place.  The values of the parameters can be set on the\n+   command-line, thereby providing a way to control the amount of\n+   effort spent on particular optimization passes, or otherwise tune\n+   the behavior of the compiler.  */\n+\n+#ifndef PARAMS_H\n+#define PARAMS_H\n+\n+/* No parameter shall have this value.  */\n+\n+#define INVALID_PARAM_VAL (-1)\n+\n+/* The information associated with each parameter.  */\n+\n+typedef struct param_info\n+{\n+  /* The name used with the `--param <name>=<value>' switch to set this\n+     value.  */\n+  const char *option;\n+  /* The associated value.  */\n+  int value;\n+} param_info;\n+\n+/* An array containing the compiler parameters and their current\n+   values.  */\n+\n+extern param_info *compiler_params;\n+\n+/* Add the N PARAMS to the current list of compiler parameters.  */\n+\n+extern void add_params \n+  PARAMS ((const param_info params[], size_t n));\n+\n+/* Set the VALUE associated with the parameter given by NAME.  */\n+\n+extern void set_param_value\n+  PARAMS ((const char *name, int value));\n+\n+\f\n+/* The parameters in use by language-independent code.  */\n+\n+typedef enum compiler_param\n+{\n+#define DEFPARAM(ENUM, OPTION, HELP, DEFAULT) \\\n+  ENUM,\n+#include \"params.def\"\n+#undef DEFPARAM  \n+  LAST_PARAM\n+} compiler_param;\n+\n+/* The value of the parameter given by ENUM.  */\n+#define PARAM_VALUE(ENUM) \\\n+  (compiler_params[(int) ENUM].value)\n+  \n+/* Macros for the various parameters.  */\n+#define MAX_INLINE_INSNS \\\n+  PARAM_VALUE (PARAM_MAX_INLINE_INSNS)\n+\n+#endif /* PARAMS_H */"}, {"sha": "66c91d43fb12b5c2f4d2ab18525ec2277578fb79", "filename": "gcc/toplev.c", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d9a88cbc231b27539ebf4be3f0843cbf59841c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c6d9a88cbc231b27539ebf4be3f0843cbf59841c", "patch": "@@ -63,6 +63,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"timevar.h\"\n #include \"diagnostic.h\"\n #include \"ssa.h\"\n+#include \"params.h\"\n \n #ifndef ACCUMULATE_OUTGOING_ARGS\n #define ACCUMULATE_OUTGOING_ARGS 0\n@@ -958,6 +959,14 @@ int flag_leading_underscore = -1;\n /* The user symbol prefix after having resolved same.  */\n const char *user_label_prefix;\n \n+static const param_info lang_independent_params[] = {\n+#define DEFPARAM(ENUM, OPTION, HELP, DEFAULT) \\\n+  { OPTION, DEFAULT },\n+#include \"params.def\"\n+#undef DEFPARAM\n+  { NULL, 0 }\n+};\n+\n /* A default for same.  */\n #ifndef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"\"\n@@ -4034,8 +4043,12 @@ decode_f_option (arg)\n \n   if ((option_value = skip_leading_substring (arg, \"inline-limit-\"))\n       || (option_value = skip_leading_substring (arg, \"inline-limit=\")))\n-    inline_max_insns =\n-      read_integral_parameter (option_value, arg - 2, inline_max_insns);\n+    {\n+      int val = \n+\tread_integral_parameter (option_value, arg - 2,\n+\t\t\t\t MAX_INLINE_INSNS);\n+      set_param_value (\"max-inline-insns\", val);\n+    }\n #ifdef INSN_SCHEDULING\n   else if ((option_value = skip_leading_substring (arg, \"sched-verbose=\")))\n     fix_sched_param (\"verbose\", option_value);\n@@ -4321,6 +4334,40 @@ independent_decode_option (argc, argv)\n       exit (0);\n     }\n \n+  /* Handle '--param <name>=<value>'.  */\n+  if (strcmp (arg, \"-param\") == 0)\n+    {\n+      char *equal;\n+\n+      if (argc == 1)\n+\t{\n+\t  error (\"-param option missing argument\");\n+\t  return 1;\n+\t}\n+\n+      /* Get the '<name>=<value' parameter.  */\n+      arg = argv[1];\n+      /* Look for the `='.  */\n+      equal = strchr (arg, '=');\n+      if (!equal) \n+\terror (\"invalid --param option: %s\", arg);\n+      else \n+\t{\n+\t  int val;\n+\n+\t  /* Zero out the `=' sign so that we get two separate strings.  */\n+\t  *equal = '\\0';\n+\t  /* Figure out what value is specified.  */\n+\t  val = read_integral_parameter (equal + 1, NULL, INVALID_PARAM_VAL);\n+\t  if (val != INVALID_PARAM_VAL)\n+\t    set_param_value (arg, val);\n+\t  else\n+\t    error (\"invalid parameter value `%s'\", equal + 1);\n+\t}\n+\n+      return 2;\n+    }\n+      \n   if (*arg == 'Y')\n     arg++;\n \n@@ -4562,6 +4609,9 @@ main (argc, argv)\n   /* Initialize the diagnostics reporting machinery.  */\n   initialize_diagnostics ();\n \n+  /* Register the language-independent parameters.  */\n+  add_params (lang_independent_params, LAST_PARAM);\n+\n   /* Perform language-specific options intialization.  */\n   if (lang_hooks.init_options)\n     (*lang_hooks.init_options) ();"}]}