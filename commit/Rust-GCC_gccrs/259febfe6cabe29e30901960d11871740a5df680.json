{"sha": "259febfe6cabe29e30901960d11871740a5df680", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU5ZmViZmU2Y2FiZTI5ZTMwOTAxOTYwZDExODcxNzQwYTVkZjY4MA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2012-09-08T22:35:54Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2012-09-08T22:35:54Z"}, "message": "pa.c (hppa_rtx_costs): Update costs for large integer modes.\n\n\t* config/pa/pa.c (hppa_rtx_costs): Update costs for large integer modes.\n\nFrom-SVN: r191102", "tree": {"sha": "53adb9d69c595e985a681f75809210f17a547320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53adb9d69c595e985a681f75809210f17a547320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/259febfe6cabe29e30901960d11871740a5df680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259febfe6cabe29e30901960d11871740a5df680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/259febfe6cabe29e30901960d11871740a5df680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259febfe6cabe29e30901960d11871740a5df680/comments", "author": null, "committer": null, "parents": [{"sha": "4e5315e5cff61713c41cca6e0bb0f20d2d94b53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5315e5cff61713c41cca6e0bb0f20d2d94b53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e5315e5cff61713c41cca6e0bb0f20d2d94b53b"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "5626de2cd959b2356070f86074456183031d9d2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/259febfe6cabe29e30901960d11871740a5df680/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/259febfe6cabe29e30901960d11871740a5df680/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=259febfe6cabe29e30901960d11871740a5df680", "patch": "@@ -1,3 +1,7 @@\n+2012-09-08  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* config/pa/pa.c (hppa_rtx_costs): Update costs for large integer modes.\n+\n 2012-09-08  Andi Kleen  <ak@linux.intel.com>\n \n \t* gcc/lto/lto.c (do_whole_program_analysis): "}, {"sha": "cba8e7817222417093304000afaa02c51f6ecfb7", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/259febfe6cabe29e30901960d11871740a5df680/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/259febfe6cabe29e30901960d11871740a5df680/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=259febfe6cabe29e30901960d11871740a5df680", "patch": "@@ -1422,6 +1422,8 @@ static bool\n hppa_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t\tint *total, bool speed ATTRIBUTE_UNUSED)\n {\n+  int factor;\n+\n   switch (code)\n     {\n     case CONST_INT:\n@@ -1453,11 +1455,20 @@ hppa_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \n     case MULT:\n       if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n-        *total = COSTS_N_INSNS (3);\n-      else if (TARGET_PA_11 && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT)\n-\t*total = COSTS_N_INSNS (8);\n+\t{\n+\t  *total = COSTS_N_INSNS (3);\n+\t  return true;\n+\t}\n+\n+      /* A mode size N times larger than SImode needs O(N*N) more insns.  */\n+      factor = GET_MODE_SIZE (GET_MODE (x)) / 4;\n+      if (factor == 0)\n+\tfactor = 1;\n+\n+      if (TARGET_PA_11 && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT)\n+\t*total = factor * factor * COSTS_N_INSNS (8);\n       else\n-\t*total = COSTS_N_INSNS (20);\n+\t*total = factor * factor * COSTS_N_INSNS (20);\n       return true;\n \n     case DIV:\n@@ -1471,15 +1482,28 @@ hppa_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n     case UDIV:\n     case MOD:\n     case UMOD:\n-      *total = COSTS_N_INSNS (60);\n+      /* A mode size N times larger than SImode needs O(N*N) more insns.  */\n+      factor = GET_MODE_SIZE (GET_MODE (x)) / 4;\n+      if (factor == 0)\n+\tfactor = 1;\n+\n+      *total = factor * factor * COSTS_N_INSNS (60);\n       return true;\n \n     case PLUS: /* this includes shNadd insns */\n     case MINUS:\n       if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n-\t*total = COSTS_N_INSNS (3);\n-      else\n-        *total = COSTS_N_INSNS (1);\n+\t{\n+\t  *total = COSTS_N_INSNS (3);\n+\t  return true;\n+\t}\n+\n+      /* A size N times larger than UNITS_PER_WORD needs N times as\n+\t many insns, taking N times as long.  */\n+      factor = GET_MODE_SIZE (GET_MODE (x)) / UNITS_PER_WORD;\n+      if (factor == 0)\n+\tfactor = 1;\n+      *total = factor * COSTS_N_INSNS (1);\n       return true;\n \n     case ASHIFT:"}]}