{"sha": "7a38df19fd3e701eb4dda937aa54eb2dfb298053", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzOGRmMTlmZDNlNzAxZWI0ZGRhOTM3YWE1NGViMmRmYjI5ODA1Mw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2001-07-17T10:29:18Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2001-07-17T10:29:18Z"}, "message": "mips.h: Change TUNE_MIPS* options to use mips_tune.\n\n2001-07-16  Eric Christopher  <echristo@redhat.com>\n\n\t* config/mips/mips.h: Change TUNE_MIPS* options to use\n\tmips_tune.\n\t(EXTRA_SPECS): Add cc1_cpu_spec.\n\t* config/mips/mips.md (muldf3): Fix typo.\n\nFrom-SVN: r44068", "tree": {"sha": "c5f9298408e376daadcd27a0dc0f1b706e7d6f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5f9298408e376daadcd27a0dc0f1b706e7d6f64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a38df19fd3e701eb4dda937aa54eb2dfb298053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a38df19fd3e701eb4dda937aa54eb2dfb298053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a38df19fd3e701eb4dda937aa54eb2dfb298053", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a38df19fd3e701eb4dda937aa54eb2dfb298053/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0bcb41cec67df49c1563acde0b694a681ff2275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bcb41cec67df49c1563acde0b694a681ff2275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bcb41cec67df49c1563acde0b694a681ff2275"}], "stats": {"total": 136, "additions": 72, "deletions": 64}, "files": [{"sha": "e85b9704558c4baf39d21ffa6500fae7738b7bab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a38df19fd3e701eb4dda937aa54eb2dfb298053/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a38df19fd3e701eb4dda937aa54eb2dfb298053/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a38df19fd3e701eb4dda937aa54eb2dfb298053", "patch": "@@ -1,3 +1,10 @@\n+2001-07-13  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/mips/mips.h: Change TUNE_MIPS* options to use\n+\tmips_tune.\n+\t(EXTRA_SPECS): Add cc1_cpu_spec.\n+\t* config/mips/mips.md (muldf3): Fix typo.\n+\n 2001-07-16  Richard Henderson  <rth@redhat.com>\n \n \t* config/m68k/m68k.c: Include expr.h and reload.h."}, {"sha": "31dceca3b09e372580e9f39a5b2e92ce2af1d2c3", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a38df19fd3e701eb4dda937aa54eb2dfb298053/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a38df19fd3e701eb4dda937aa54eb2dfb298053/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=7a38df19fd3e701eb4dda937aa54eb2dfb298053", "patch": "@@ -337,11 +337,11 @@ extern void\t\tsbss_section PARAMS ((void));\n #define TARGET_MIPS4300             (mips_arch == PROCESSOR_R4300)\n \n /* Scheduling target defines.  */\n-#define TUNE_MIPS3000               (mips_cpu == PROCESSOR_R3000)\n-#define TUNE_MIPS3900               (mips_cpu == PROCESSOR_R3900)\n-#define TUNE_MIPS4000               (mips_cpu == PROCESSOR_R4000)\n-#define TUNE_MIPS5000               (mips_cpu == PROCESSOR_R5000)\n-#define TUNE_MIPS6000               (mips_cpu == PROCESSOR_R6000)\n+#define TUNE_MIPS3000               (mips_tune == PROCESSOR_R3000)\n+#define TUNE_MIPS3900               (mips_tune == PROCESSOR_R3900)\n+#define TUNE_MIPS4000               (mips_tune == PROCESSOR_R4000)\n+#define TUNE_MIPS5000               (mips_tune == PROCESSOR_R5000)\n+#define TUNE_MIPS6000               (mips_tune == PROCESSOR_R6000)\n \n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n@@ -1027,6 +1027,7 @@ while (0)\n \n #define EXTRA_SPECS\t\t\t\t\t\t\t\\\n   { \"subtarget_cc1_spec\", SUBTARGET_CC1_SPEC },\t\t\t\t\\\n+  { \"cc1_cpu_spec\", CC1_CPU_SPEC},                                      \\\n   { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC },\t\t\t\t\\\n   { \"subtarget_cpp_size_spec\", SUBTARGET_CPP_SIZE_SPEC },\t\t\\\n   { \"long_max_spec\", LONG_MAX_SPEC },\t\t\t\t\t\\"}, {"sha": "a7636f8d31628c46ffd7fd15d5aab20d99539eb1", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a38df19fd3e701eb4dda937aa54eb2dfb298053/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a38df19fd3e701eb4dda937aa54eb2dfb298053/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=7a38df19fd3e701eb4dda937aa54eb2dfb298053", "patch": "@@ -98,7 +98,7 @@\n ;; instruction which allows full access to the entire address space,\n ;; but we do not do so at present.\n \n-(define_attr \"length\" \"\" \n+(define_attr \"length\" \"\"\n    (cond [(eq_attr \"type\" \"branch\")\n           (cond [(lt (abs (minus (match_dup 1) (plus (pc) (const_int 4))))\n                      (const_int 131072))\n@@ -124,7 +124,7 @@\n \n ;; Does the instruction have a mandatory delay slot?\n ;;   The 3900, is (mostly) mips1, but does not have a mandatory load delay\n-;;   slot. \n+;;   slot.\n (define_attr \"dslot\" \"no,yes\"\n   (if_then_else (ior (eq_attr \"type\" \"branch,jump,call,xfer,hilo,fcmp\")\n \t\t     (and (eq_attr \"type\" \"load\")\n@@ -496,24 +496,24 @@\n \n ;; (define_function_unit \"memory\"   1 0 (eq_attr \"type\" \"load\")                                3 0)\n ;; (define_function_unit \"memory\"   1 0 (eq_attr \"type\" \"store\")                               1 0)\n-;;       \n+;;\n ;; (define_function_unit \"fp_comp\"  1 0 (eq_attr \"type\" \"fcmp\")                                2 0)\n-;;       \n+;;\n ;; (define_function_unit \"transfer\" 1 0 (eq_attr \"type\" \"xfer\")                                2 0)\n ;; (define_function_unit \"transfer\" 1 0 (eq_attr \"type\" \"hilo\")                                3 0)\n-;;   \n+;;\n ;; (define_function_unit \"imuldiv\"  1 1 (eq_attr \"type\" \"imul\")                               17 0)\n ;; (define_function_unit \"imuldiv\"  1 1 (eq_attr \"type\" \"idiv\")                               38 0)\n-;;   \n+;;\n ;; (define_function_unit \"adder\"    1 1 (eq_attr \"type\" \"fadd\")                                4 0)\n ;; (define_function_unit \"adder\"    1 1 (eq_attr \"type\" \"fabs,fneg\")                           2 0)\n-;;   \n+;;\n ;; (define_function_unit \"mult\"     1 1 (and (eq_attr \"type\" \"fmul\") (eq_attr \"mode\" \"SF\"))    7 0)\n ;; (define_function_unit \"mult\"     1 1 (and (eq_attr \"type\" \"fmul\") (eq_attr \"mode\" \"DF\"))    8 0)\n-;;   \n+;;\n ;; (define_function_unit \"divide\"   1 1 (and (eq_attr \"type\" \"fdiv\") (eq_attr \"mode\" \"SF\"))   23 0)\n ;; (define_function_unit \"divide\"   1 1 (and (eq_attr \"type\" \"fdiv\") (eq_attr \"mode\" \"DF\"))   36 0)\n-;; \n+;;\n ;; (define_function_unit \"sqrt\"     1 1 (and (eq_attr \"type\" \"fsqrt\") (eq_attr \"mode\" \"SF\"))  54 0)\n ;; (define_function_unit \"sqrt\"     1 1 (and (eq_attr \"type\" \"fsqrt\") (eq_attr \"mode\" \"DF\")) 112 0)\n \f\n@@ -1604,7 +1604,7 @@\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n \t\t (const_int 4)])])\n-  \n+\n \n \f\n ;;\n@@ -1626,7 +1626,7 @@\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n   \"\n {\n-  if (TARGET_MIPS4300)\n+  if (!TARGET_MIPS4300)\n     emit_insn (gen_muldf3_internal (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_muldf3_r4300 (operands[0], operands[1], operands[2]));\n@@ -1890,7 +1890,7 @@\n {\n   if (GENERATE_MULT3)\n     output_asm_insn (\\\"dmult\\\\t%0,%1,%2\\\", operands);\n-  else \n+  else\n     {\n       rtx xoperands[10];\n \n@@ -2168,7 +2168,7 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t\t   (match_operand:SF 2 \"register_operand\" \"f\"))\n \t\t  (match_operand:SF 3 \"register_operand\" \"f\")))]\n-\t\t  \n+\n   \"ISA_HAS_FP4 && TARGET_HARD_FLOAT\"\n   \"msub.s\\\\t%0,%3,%1,%2\"\n   [(set_attr \"type\"\t\"fmadd\")\n@@ -2304,7 +2304,7 @@\n \t\t\t\t\t\t  (BITMASK_HIGH, SImode))),\n \t\t\t       GEN_INT (0x6)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2352,7 +2352,7 @@\n \t\t\t\t\t\t GEN_INT (BITMASK_HIGH)),\n \t\t\t       GEN_INT (0x6)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2390,7 +2390,7 @@\n \t\t\t       GEN_INT (0),\n \t\t\t       GEN_INT (0x7)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2428,7 +2428,7 @@\n \t\t\t       GEN_INT (0),\n \t\t\t       GEN_INT (0x7)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2527,7 +2527,7 @@\n       have_dep_anti = 1;\n   if (! have_dep_anti)\n     {\n-      /* No branch delay slots on mips16. */ \n+      /* No branch delay slots on mips16. */\n       if (which_alternative == 1)\n         return \\\"%(bnez\\\\t%0,1f\\\\n\\\\tbreak\\\\t%2\\\\n%~1:%)\\\";\n       else\n@@ -2566,7 +2566,7 @@\n \t\t\t\t\t\t  (BITMASK_HIGH, SImode))),\n \t\t\t       GEN_INT (0x6)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2584,7 +2584,7 @@\n (define_expand \"divdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n \t(div:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"se_register_operand\" \"d\"))) \n+\t\t(match_operand:DI 2 \"se_register_operand\" \"d\")))\n    (clobber (match_scratch:DI 3 \"=h\"))\n    (clobber (match_scratch:DI 4 \"=a\"))]\n   \"TARGET_64BIT && !optimize\"\n@@ -2607,7 +2607,7 @@\n \t\t\t\t\t\t GEN_INT (BITMASK_HIGH)),\n \t\t\t       GEN_INT (0x6)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2650,7 +2650,7 @@\n \t\t\t\t\t\t  (BITMASK_HIGH, SImode))),\n \t\t\t       GEN_INT (0x6)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2691,7 +2691,7 @@\n \t\t\t\t\t\t GEN_INT (BITMASK_HIGH)),\n \t\t\t       GEN_INT (0x6)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2722,7 +2722,7 @@\n \t\t\t       GEN_INT (0),\n \t\t\t       GEN_INT (0x7)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2753,7 +2753,7 @@\n \t\t\t       GEN_INT (0),\n \t\t\t       GEN_INT (0x7)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2784,7 +2784,7 @@\n \t\t\t       GEN_INT (0),\n \t\t\t       GEN_INT (0x7)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2815,7 +2815,7 @@\n \t\t\t       GEN_INT (0),\n \t\t\t       GEN_INT (0x7)));\n     }\n-  \n+\n   DONE;\n }\")\n \n@@ -2898,7 +2898,7 @@\n \treturn \\\"%(bltzl\\\\t%1,1f\\\\n\\\\tsubu\\\\t%0,%z2,%0\\\\n%~1:%)\\\";\n       else\n \treturn \\\"bgez\\\\t%1,1f%#\\\\n\\\\tsubu\\\\t%0,%z2,%0\\\\n%~1:\\\";\n-    }\t  \n+    }\n   else\n     return \\\"%(bgez\\\\t%1,1f\\\\n\\\\tmove\\\\t%0,%1\\\\n\\\\tsubu\\\\t%0,%z2,%0\\\\n%~1:%)\\\";\n }\"\n@@ -2916,10 +2916,10 @@\n   dslots_jump_total++;\n   dslots_jump_filled++;\n   operands[2] = const0_rtx;\n-  \n+\n   if (GET_CODE (operands[1]) == REG)\n     regno1 = REGNO (operands[1]);\n-  else \n+  else\n     regno1 = REGNO (XEXP (operands[1], 0));\n \n   if (REGNO (operands[0]) == regno1)\n@@ -3568,7 +3568,7 @@ move\\\\t%0,%z4\\\\n\\\\\n {\n   if (TARGET_MIPS16)\n     return \\\"dsll\\\\t%0,%1,56\\;dsra\\\\t%0,56\\\";\n-  return \\\"andi\\\\t%0,%1,0x00ff\\\"; \n+  return \\\"andi\\\\t%0,%1,0x00ff\\\";\n }\"\n   [(set_attr \"type\"\t\"darith\")\n    (set_attr \"mode\"\t\"QI\")\n@@ -3600,7 +3600,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set_attr \"type\"\t\"darith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"8\")])\n-\t\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(truncate:SI (lshiftrt:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n@@ -4522,7 +4522,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\n {\n   /* If the field does not start on a byte boundary, then fail.  */\n-  if (INTVAL (operands[3]) % 8 != 0) \n+  if (INTVAL (operands[3]) % 8 != 0)\n     FAIL;\n \n   /* MIPS I and MIPS II can only handle a 32bit field.  */\n@@ -4570,7 +4570,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\n {\n   /* If the field does not start on a byte boundary, then fail.  */\n-  if (INTVAL (operands[3]) % 8 != 0) \n+  if (INTVAL (operands[3]) % 8 != 0)\n     FAIL;\n \n   /* MIPS I and MIPS II can only handle a 32bit field.  */\n@@ -4618,7 +4618,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\n {\n   /* If the field does not start on a byte boundary, then fail.  */\n-  if (INTVAL (operands[2]) % 8 != 0) \n+  if (INTVAL (operands[2]) % 8 != 0)\n     FAIL;\n \n   /* MIPS I and MIPS II can only handle a 32bit field.  */\n@@ -5056,7 +5056,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\n {\n   rtx scratch = gen_rtx_REG (DImode,\n-\t\t\t     (REGNO (operands[0]) == REGNO (operands[2]) \n+\t\t\t     (REGNO (operands[0]) == REGNO (operands[2])\n \t\t\t      ? REGNO (operands[2]) + 1\n \t\t\t      : REGNO (operands[2])));\n \n@@ -6496,7 +6496,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t\t   (match_operand:SI 2 \"register_operand\" \"d\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n   \"!TARGET_64BIT && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\"\n-  \"* \n+  \"*\n {\n   operands[4] = const0_rtx;\n   dslots_jump_total += 3;\n@@ -6854,7 +6854,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t\t     (match_operand:SI 2 \"register_operand\" \"d\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n   \"!TARGET_64BIT && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\"\n-  \"* \n+  \"*\n {\n   operands[4] = const0_rtx;\n   dslots_jump_total += 3;\n@@ -7235,7 +7235,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t\t     (match_operand:SI 2 \"register_operand\" \"d\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n   \"!TARGET_64BIT && !TARGET_DEBUG_G_MODE && !TARGET_MIPS16\"\n-  \"* \n+  \"*\n {\n   operands[4] = const0_rtx;\n   dslots_jump_total += 3;\n@@ -7590,7 +7590,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_fp\"\n   [(set (pc)\n-        (if_then_else \n+        (if_then_else\n          (match_operator:CC 0 \"cmp_op\"\n                             [(match_operand:CC 2 \"register_operand\" \"z\")\n \t\t\t     (const_int 0)])\n@@ -7611,7 +7611,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_fp_inverted\"\n   [(set (pc)\n-        (if_then_else \n+        (if_then_else\n          (match_operator:CC 0 \"cmp_op\"\n                             [(match_operand:CC 2 \"register_operand\" \"z\")\n \t\t\t     (const_int 0)])\n@@ -7634,7 +7634,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_zero\"\n   [(set (pc)\n-\t(if_then_else \n+\t(if_then_else\n          (match_operator:SI 0 \"cmp_op\"\n \t\t\t    [(match_operand:SI 2 \"register_operand\" \"d\")\n \t\t\t     (const_int 0)])\n@@ -7655,7 +7655,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_zero_inverted\"\n   [(set (pc)\n-\t(if_then_else \n+\t(if_then_else\n          (match_operator:SI 0 \"cmp_op\"\n \t\t            [(match_operand:SI 2 \"register_operand\" \"d\")\n \t\t\t     (const_int 0)])\n@@ -7676,7 +7676,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_zero_di\"\n   [(set (pc)\n-\t(if_then_else \n+\t(if_then_else\n          (match_operator:DI 0 \"cmp_op\"\n \t\t            [(match_operand:DI 2 \"se_register_operand\" \"d\")\n \t\t\t     (const_int 0)])\n@@ -7697,7 +7697,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_zero_di_inverted\"\n   [(set (pc)\n-\t(if_then_else \n+\t(if_then_else\n          (match_operator:DI 0 \"cmp_op\"\n \t\t\t    [(match_operand:DI 2 \"se_register_operand\" \"d\")\n \t\t\t     (const_int 0)])\n@@ -7720,7 +7720,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_equality\"\n   [(set (pc)\n-\t(if_then_else \n+\t(if_then_else\n          (match_operator:SI 0 \"equality_op\"\n \t\t   \t    [(match_operand:SI 2 \"register_operand\" \"d\")\n \t\t\t     (match_operand:SI 3 \"register_operand\" \"d\")])\n@@ -7741,7 +7741,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_equality_di\"\n   [(set (pc)\n-\t(if_then_else \n+\t(if_then_else\n          (match_operator:DI 0 \"equality_op\"\n \t\t\t    [(match_operand:DI 2 \"se_register_operand\" \"d\")\n \t\t\t     (match_operand:DI 3 \"se_register_operand\" \"d\")])\n@@ -7762,7 +7762,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_equality_inverted\"\n   [(set (pc)\n-\t(if_then_else \n+\t(if_then_else\n          (match_operator:SI 0 \"equality_op\"\n \t\t   \t    [(match_operand:SI 2 \"register_operand\" \"d\")\n \t\t\t     (match_operand:SI 3 \"register_operand\" \"d\")])\n@@ -7783,7 +7783,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"branch_equality_di_inverted\"\n   [(set (pc)\n-\t(if_then_else \n+\t(if_then_else\n          (match_operator:DI 0 \"equality_op\"\n \t\t\t    [(match_operand:DI 2 \"se_register_operand\" \"d\")\n \t\t\t     (match_operand:DI 3 \"se_register_operand\" \"d\")])\n@@ -9061,7 +9061,7 @@ move\\\\t%0,%z4\\\\n\\\\\n      in a switch table, then used in a `j' instruction.  */\n   else if (mips_abi != ABI_32 && mips_abi != ABI_O64)\n     return \\\"%*b\\\\t%l0\\\";\n-  else\t\n+  else\n     return \\\"%*j\\\\t%l0\\\";\n }\"\n   [(set_attr \"type\"\t\"jump\")\n@@ -9313,10 +9313,10 @@ move\\\\t%0,%z4\\\\n\\\\\n \n       /* Do the PIC jump.  */\n       if (Pmode != DImode)\n-        emit_jump_insn (gen_casesi_internal (reg, operands[3], \n+        emit_jump_insn (gen_casesi_internal (reg, operands[3],\n \t\t\t\t\t     gen_reg_rtx (SImode)));\n       else\n-        emit_jump_insn (gen_casesi_internal_di (reg, operands[3], \n+        emit_jump_insn (gen_casesi_internal_di (reg, operands[3],\n \t\t\t\t\t\tgen_reg_rtx (DImode)));\n \n       DONE;\n@@ -9352,7 +9352,7 @@ lw\\\\t%2,%1-%S1(%2)\\;addu\\\\t%2,%2,$31\\;j\\\\t%2\"\n \n (define_insn \"casesi_internal_di\"\n   [(set (pc)\n-\t(mem:DI (plus:DI (sign_extend:DI \n+\t(mem:DI (plus:DI (sign_extend:DI\n \t\t\t  (mult:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t\t  (const_int 4)))\n \t\t\t (label_ref (match_operand 1 \"\" \"\")))))\n@@ -9396,7 +9396,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n   \"TARGET_ABICALLS && Pmode == DImode\"\n   \"\")\n \n-;; For o32/n32/n64, we need to arrange for longjmp to put the \n+;; For o32/n32/n64, we need to arrange for longjmp to put the\n ;; target address in t9 so that we can use it for loading $gp.\n \n (define_expand \"builtin_longjmp\"\n@@ -9490,7 +9490,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n }\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")])\n-  \n+\n ;; When generating embedded PIC code we need to get the address of the\n ;; current function.  This specialized instruction does just that.\n \n@@ -9934,7 +9934,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n         (call (mem:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"!TARGET_MIPS16 \n+  \"!TARGET_MIPS16\n    && !(Pmode == DImode) && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"%*jal\\\\t%3,%1\"\n   [(set_attr \"type\"\t\"call\")\n@@ -9945,7 +9945,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n         (call (mem:DI (match_operand:DI 1 \"se_register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"!TARGET_MIPS16 \n+  \"!TARGET_MIPS16\n    && Pmode == DImode && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"%*jal\\\\t%3,%1\"\n   [(set_attr \"type\"\t\"call\")\n@@ -10118,7 +10118,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n ;;   operands[0] = gen_reg_rtx (SImode);\n ;;   operands[1] = gen_rtx_MEM (SImode, stack_pointer_rtx);\n ;;   MEM_VOLATILE_P (operands[1]) = TRUE;\n-;; \n+;;\n ;;   /* fall through and generate default code */\n ;; }\")\n ;;\n@@ -10331,7 +10331,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n \t(if_then_else:DI (match_dup 5)\n \t\t\t (match_operand:DI 2 \"se_reg_or_0_operand\" \"\")\n \t\t\t (match_operand:DI 3 \"se_reg_or_0_operand\" \"\")))]\n-  \"ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE\" \n+  \"ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE\"\n   \"\n {\n   gen_conditional_move (operands);"}]}