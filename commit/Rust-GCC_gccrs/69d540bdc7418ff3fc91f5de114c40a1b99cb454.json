{"sha": "69d540bdc7418ff3fc91f5de114c40a1b99cb454", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlkNTQwYmRjNzQxOGZmM2ZjOTFmNWRlMTE0YzQwYTFiOTljYjQ1NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-16T14:18:02Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-16T14:18:02Z"}, "message": "gcc.c (char_p): Define.\n\n\t* gcc.c (char_p): Define.  Define a VEC of it.\n\t(n_linker_options, n_assembler_options, n_preprocessor_options):\n\tDelete.\n\t(linker_options, assembler_options, preprocessor_options): Convert\n\tto a VEC.\n\t(add_preprocessor_option): Adjust.\n\t(add_assembler_option): Adjust.\n\t(add_linker_option): Adjust.\n\t(do_specs_vec): New function.\n\t(do_spec_1): Call it.  Adjust for new types.\n\nFrom-SVN: r166801", "tree": {"sha": "06d65b8619db95f119edc823bd7adcc00ebbc954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06d65b8619db95f119edc823bd7adcc00ebbc954"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69d540bdc7418ff3fc91f5de114c40a1b99cb454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d540bdc7418ff3fc91f5de114c40a1b99cb454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69d540bdc7418ff3fc91f5de114c40a1b99cb454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d540bdc7418ff3fc91f5de114c40a1b99cb454/comments", "author": null, "committer": null, "parents": [{"sha": "8e65c286475c96f2e4e78e4aa1c1433e847c0ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e65c286475c96f2e4e78e4aa1c1433e847c0ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e65c286475c96f2e4e78e4aa1c1433e847c0ebb"}], "stats": {"total": 100, "additions": 47, "deletions": 53}, "files": [{"sha": "788be0aeab116be803ae06954fcd2b307fc9ca1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d540bdc7418ff3fc91f5de114c40a1b99cb454/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d540bdc7418ff3fc91f5de114c40a1b99cb454/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69d540bdc7418ff3fc91f5de114c40a1b99cb454", "patch": "@@ -1,3 +1,16 @@\n+2010-11-16  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc.c (char_p): Define.  Define a VEC of it.\n+\t(n_linker_options, n_assembler_options, n_preprocessor_options):\n+\tDelete.\n+\t(linker_options, assembler_options, preprocessor_options): Convert\n+\tto a VEC.\n+\t(add_preprocessor_option): Adjust.\n+\t(add_assembler_option): Adjust.\n+\t(add_linker_option): Adjust.\n+\t(do_specs_vec): New function.\n+\t(do_spec_1): Call it.  Adjust for new types.\n+\n 2010-11-16  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* Makefile.in (bitmap.o, ebitmap.o, et-forest.o): Update"}, {"sha": "fb981716b2ead254f8e1e3662c04b6a110946bfa", "filename": "gcc/gcc.c", "status": "modified", "additions": 34, "deletions": 53, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d540bdc7418ff3fc91f5de114c40a1b99cb454/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d540bdc7418ff3fc91f5de114c40a1b99cb454/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=69d540bdc7418ff3fc91f5de114c40a1b99cb454", "patch": "@@ -983,23 +983,24 @@ static const struct compiler default_compilers[] =\n \n static const int n_default_compilers = ARRAY_SIZE (default_compilers) - 1;\n \n+typedef char *char_p; /* For DEF_VEC_P.  */\n+DEF_VEC_P(char_p);\n+DEF_VEC_ALLOC_P(char_p,heap);\n+\n /* A vector of options to give to the linker.\n    These options are accumulated by %x,\n    and substituted into the linker command with %X.  */\n-static int n_linker_options;\n-static char **linker_options;\n+static VEC(char_p,heap) *linker_options;\n \n /* A vector of options to give to the assembler.\n    These options are accumulated by -Wa,\n    and substituted into the assembler command with %Y.  */\n-static int n_assembler_options;\n-static char **assembler_options;\n+static VEC(char_p,heap) *assembler_options;\n \n /* A vector of options to give to the preprocessor.\n    These options are accumulated by -Wp,\n    and substituted into the preprocessor command with %Z.  */\n-static int n_preprocessor_options;\n-static char **preprocessor_options;\n+static VEC(char_p,heap) *preprocessor_options;\n \f\n static char *\n skip_whitespace (char *p)\n@@ -2975,43 +2976,20 @@ display_help (void)\n static void\n add_preprocessor_option (const char *option, int len)\n {\n-  n_preprocessor_options++;\n-\n-  if (! preprocessor_options)\n-    preprocessor_options = XNEWVEC (char *, n_preprocessor_options);\n-  else\n-    preprocessor_options = XRESIZEVEC (char *, preprocessor_options,\n-\t\t\t\t       n_preprocessor_options);\n-\n-  preprocessor_options [n_preprocessor_options - 1] =\n-    save_string (option, len);\n+  VEC_safe_push (char_p, heap, preprocessor_options,\n+\t\t save_string (option, len));\n }\n \n static void\n add_assembler_option (const char *option, int len)\n {\n-  n_assembler_options++;\n-\n-  if (! assembler_options)\n-    assembler_options = XNEWVEC (char *, n_assembler_options);\n-  else\n-    assembler_options = XRESIZEVEC (char *, assembler_options,\n-\t\t\t\t    n_assembler_options);\n-\n-  assembler_options [n_assembler_options - 1] = save_string (option, len);\n+  VEC_safe_push (char_p, heap, assembler_options, save_string (option, len));\n }\n \n static void\n add_linker_option (const char *option, int len)\n {\n-  n_linker_options++;\n-\n-  if (! linker_options)\n-    linker_options = XNEWVEC (char *, n_linker_options);\n-  else\n-    linker_options = XRESIZEVEC (char *, linker_options, n_linker_options);\n-\n-  linker_options [n_linker_options - 1] = save_string (option, len);\n+  VEC_safe_push (char_p, heap, linker_options, save_string (option, len));\n }\n \f\n /* Allocate space for an input file in infiles.  */\n@@ -4404,6 +4382,22 @@ compile_input_file_p (struct infile *infile)\n   return false;\n }\n \n+/* Process each member of VEC as a spec.  */\n+\n+static void\n+do_specs_vec (VEC(char_p,heap) *vec)\n+{\n+  unsigned ix;\n+  char *opt;\n+\n+  FOR_EACH_VEC_ELT (char_p, vec, ix, opt)\n+    {\n+      do_spec_1 (opt, 1, NULL);\n+      /* Make each accumulated option a separate argument.  */\n+      do_spec_1 (\" \", 0, NULL);\n+    }\n+}\n+\n /* Process the sub-spec SPEC as a portion of a larger spec.\n    This is like processing a whole spec except that we do\n    not initialize at the beginning and we do not supply a\n@@ -4965,6 +4959,8 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t    {\n \t      const char *p1 = p;\n \t      char *string;\n+\t      char *opt;\n+\t      unsigned ix;\n \n \t      /* Skip past the option value and make a copy.  */\n \t      if (*p != '{')\n@@ -4974,8 +4970,8 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t      string = save_string (p1 + 1, p - p1 - 2);\n \n \t      /* See if we already recorded this option.  */\n-\t      for (i = 0; i < n_linker_options; i++)\n-\t\tif (! strcmp (string, linker_options[i]))\n+\t      FOR_EACH_VEC_ELT (char_p, linker_options, ix, opt)\n+\t\tif (! strcmp (string, opt))\n \t\t  {\n \t\t    free (string);\n \t\t    return 0;\n@@ -4988,32 +4984,17 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \n \t  /* Dump out the options accumulated previously using %x.  */\n \t  case 'X':\n-\t    for (i = 0; i < n_linker_options; i++)\n-\t      {\n-\t\tdo_spec_1 (linker_options[i], 1, NULL);\n-\t\t/* Make each accumulated option a separate argument.  */\n-\t\tdo_spec_1 (\" \", 0, NULL);\n-\t      }\n+\t    do_specs_vec (linker_options);\n \t    break;\n \n \t  /* Dump out the options accumulated previously using -Wa,.  */\n \t  case 'Y':\n-\t    for (i = 0; i < n_assembler_options; i++)\n-\t      {\n-\t\tdo_spec_1 (assembler_options[i], 1, NULL);\n-\t\t/* Make each accumulated option a separate argument.  */\n-\t\tdo_spec_1 (\" \", 0, NULL);\n-\t      }\n+\t    do_specs_vec (assembler_options);\n \t    break;\n \n \t  /* Dump out the options accumulated previously using -Wp,.  */\n \t  case 'Z':\n-\t    for (i = 0; i < n_preprocessor_options; i++)\n-\t      {\n-\t\tdo_spec_1 (preprocessor_options[i], 1, NULL);\n-\t\t/* Make each accumulated option a separate argument.  */\n-\t\tdo_spec_1 (\" \", 0, NULL);\n-\t      }\n+\t    do_specs_vec (preprocessor_options);\n \t    break;\n \n \t    /* Here are digits and numbers that just process"}]}