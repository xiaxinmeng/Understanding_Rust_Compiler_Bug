{"sha": "2d91f79dc990f81dcea89a5087cad566238b2456", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ5MWY3OWRjOTkwZjgxZGNlYTg5YTUwODdjYWQ1NjYyMzhiMjQ1Ng==", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2019-01-14T19:55:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-01-14T19:55:51Z"}, "message": "Implement P0482R5, char8_t: A type for UTF-8 characters and strings\n\ngcc/cp/\n\t* cvt.c (type_promotes_to): Handle char8_t promotion.\n\t* decl.c (grokdeclarator): Handle invalid type specifier\n\tcombinations involving char8_t.\n\t* lex.c (init_reswords): Add char8_t as a reserved word.\n\t* mangle.c (write_builtin_type): Add name mangling for char8_t (Du).\n\t* parser.c (cp_keyword_starts_decl_specifier_p)\n\t(cp_parser_simple_type_specifier): Recognize char8_t as a simple\n\ttype specifier.\n\t(cp_parser_string_literal): Use char8_array_type_node for the type\n\tof CPP_UTF8STRING.\n\t(cp_parser_set_decl_spec_type): Tolerate char8_t typedefs in system\n\theaders.\n\t* rtti.c (emit_support_tinfos): type_info support for char8_t.\n\t* tree.c (char_type_p): Recognize char8_t as a character type.\n\t* typeck.c (string_conv_p): Handle conversions of u8 string\n\tliterals of char8_t type.\n\t(check_literal_operator_args): Handle UDLs with u8 string literals\n\tof char8_t type.\n\t* typeck2.c (ordinary_char_type_p): New.\n\t(digest_init_r): Disallow initializing a char array with a u8 string\n\tliteral.\ngcc/c-family/\n\t* c-common.c (c_common_reswords): Add char8_t.\n\t(fix_string_type): Use char8_t for the type of u8 string literals.\n\t(c_common_get_alias_set): char8_t doesn't alias.\n\t(c_common_nodes_and_builtins): Define char8_t as a builtin type in\n\tC++.\n\t(c_stddef_cpp_builtins): Add __CHAR8_TYPE__.\n\t(keyword_begins_type_specifier): Add RID_CHAR8.\n\t* c-common.h (rid): Add RID_CHAR8.\n\t(c_tree_index): Add CTI_CHAR8_TYPE and CTI_CHAR8_ARRAY_TYPE.\n\tDefine D_CXX_CHAR8_T and D_CXX_CHAR8_T_FLAGS.\n\tDefine char8_type_node and char8_array_type_node.\n\t* c-cppbuiltin.c (cpp_atomic_builtins): Predefine\n\t__GCC_ATOMIC_CHAR8_T_LOCK_FREE.\n\t(c_cpp_builtins): Predefine __cpp_char8_t.\n\t* c-lex.c (lex_string): Use char8_array_type_node as the type of\n\tCPP_UTF8STRING.\n\t(lex_charconst): Use char8_type_node as the type of CPP_UTF8CHAR.\n\t* c-opts.c: If not otherwise specified, enable -fchar8_t when\n\ttargeting C++2a.\n\t* c.opt: Add the -fchar8_t command line option.\nlibiberty/\n\t* cp-demangle.c (cplus_demangle_builtin_types)\n\t(cplus_demangle_type): Add name demangling for char8_t (Du).\n\t* cp-demangle.h: Increase D_BUILTIN_TYPE_COUNT to accommodate the\n\tnew char8_t type.\n\nFrom-SVN: r267923", "tree": {"sha": "ae9137b811a3a0bdada65dbb8a6ed5dba9d24b0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae9137b811a3a0bdada65dbb8a6ed5dba9d24b0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d91f79dc990f81dcea89a5087cad566238b2456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d91f79dc990f81dcea89a5087cad566238b2456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d91f79dc990f81dcea89a5087cad566238b2456", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d91f79dc990f81dcea89a5087cad566238b2456/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23db6ced33c245c38c147c31011bbafa392e4328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23db6ced33c245c38c147c31011bbafa392e4328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23db6ced33c245c38c147c31011bbafa392e4328"}], "stats": {"total": 1274, "additions": 1132, "deletions": 142}, "files": [{"sha": "aea7143dc91e01bdecf84ef68927e24b8b2252bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,3 +1,7 @@\n+2019-01-14  Tom Honermann  <tom@honermann.net>\n+\n+\t* defaults.h: Define CHAR8_TYPE.\n+\n 2019-01-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR target/88638"}, {"sha": "0ff16ab4a3fce4e0fa57f73e3a3a6a139a599191", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,3 +1,27 @@\n+2019-01-14  Tom Honermann  <tom@honermann.net>\n+\n+\tImplement P0482R5, char8_t: A type for UTF-8 characters and strings\n+\t* c-common.c (c_common_reswords): Add char8_t.\n+\t(fix_string_type): Use char8_t for the type of u8 string literals.\n+\t(c_common_get_alias_set): char8_t doesn't alias.\n+\t(c_common_nodes_and_builtins): Define char8_t as a builtin type in\n+\tC++.\n+\t(c_stddef_cpp_builtins): Add __CHAR8_TYPE__.\n+\t(keyword_begins_type_specifier): Add RID_CHAR8.\n+\t* c-common.h (rid): Add RID_CHAR8.\n+\t(c_tree_index): Add CTI_CHAR8_TYPE and CTI_CHAR8_ARRAY_TYPE.\n+\tDefine D_CXX_CHAR8_T and D_CXX_CHAR8_T_FLAGS.\n+\tDefine char8_type_node and char8_array_type_node.\n+\t* c-cppbuiltin.c (cpp_atomic_builtins): Predefine\n+\t__GCC_ATOMIC_CHAR8_T_LOCK_FREE.\n+\t(c_cpp_builtins): Predefine __cpp_char8_t.\n+\t* c-lex.c (lex_string): Use char8_array_type_node as the type of\n+\tCPP_UTF8STRING.\n+\t(lex_charconst): Use char8_type_node as the type of CPP_UTF8CHAR.\n+\t* c-opts.c: If not otherwise specified, enable -fchar8_t when\n+\ttargeting C++2a.\n+\t* c.opt: Add the -fchar8_t command line option.\n+\n 2019-01-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR target/88638"}, {"sha": "2a5a8e7defb3ed6b45c36cfaf2ea87818e61ad0b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -79,6 +79,7 @@ machine_mode c_default_pointer_mode = VOIDmode;\n \ttree signed_char_type_node;\n \ttree wchar_type_node;\n \n+\ttree char8_type_node;\n \ttree char16_type_node;\n \ttree char32_type_node;\n \n@@ -128,6 +129,11 @@ machine_mode c_default_pointer_mode = VOIDmode;\n \n \ttree wchar_array_type_node;\n \n+   Type `char8_t[SOMENUMBER]' or something like it.\n+   Used when a UTF-8 string literal is created.\n+\n+\ttree char8_array_type_node;\n+\n    Type `char16_t[SOMENUMBER]' or something like it.\n    Used when a UTF-16 string literal is created.\n \n@@ -452,6 +458,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"case\",\t\tRID_CASE,\t0 },\n   { \"catch\",\t\tRID_CATCH,\tD_CXX_OBJC | D_CXXWARN },\n   { \"char\",\t\tRID_CHAR,\t0 },\n+  { \"char8_t\",\t\tRID_CHAR8,\tD_CXX_CHAR8_T_FLAGS | D_CXXWARN },\n   { \"char16_t\",\t\tRID_CHAR16,\tD_CXXONLY | D_CXX11 | D_CXXWARN },\n   { \"char32_t\",\t\tRID_CHAR32,\tD_CXXONLY | D_CXX11 | D_CXXWARN },\n   { \"class\",\t\tRID_CLASS,\tD_CXX_OBJC | D_CXXWARN },\n@@ -748,6 +755,11 @@ fix_string_type (tree value)\n       charsz = 1;\n       e_type = char_type_node;\n     }\n+  else if (flag_char8_t && TREE_TYPE (value) == char8_array_type_node)\n+    {\n+      charsz = TYPE_PRECISION (char8_type_node) / BITS_PER_UNIT;\n+      e_type = char8_type_node;\n+    }\n   else if (TREE_TYPE (value) == char16_array_type_node)\n     {\n       charsz = TYPE_PRECISION (char16_type_node) / BITS_PER_UNIT;\n@@ -828,7 +840,8 @@ fix_string_type (tree value)\n    CPP_STRING16, or CPP_STRING32.  Return CPP_OTHER in case of error.\n    This may not be exactly the string token type that initially created\n    the string, since CPP_WSTRING is indistinguishable from the 16/32 bit\n-   string type at this point.\n+   string type, and CPP_UTF8STRING is indistinguishable from CPP_STRING\n+   at this point.\n \n    This effectively reverses part of the logic in lex_string and\n    fix_string_type.  */\n@@ -3640,8 +3653,12 @@ c_common_get_alias_set (tree t)\n   if (!TYPE_P (t))\n     return -1;\n \n+  /* Unlike char, char8_t doesn't alias. */\n+  if (flag_char8_t && t == char8_type_node)\n+    return -1;\n+\n   /* The C standard guarantees that any object may be accessed via an\n-     lvalue that has character type.  */\n+     lvalue that has narrow character type (except char8_t).  */\n   if (t == char_type_node\n       || t == signed_char_type_node\n       || t == unsigned_char_type_node)\n@@ -4050,6 +4067,7 @@ c_get_ident (const char *id)\n void\n c_common_nodes_and_builtins (void)\n {\n+  int char8_type_size;\n   int char16_type_size;\n   int char32_type_size;\n   int wchar_type_size;\n@@ -4341,6 +4359,22 @@ c_common_nodes_and_builtins (void)\n   wchar_array_type_node\n     = build_array_type (wchar_type_node, array_domain_type);\n \n+  /* Define 'char8_t'.  */\n+  char8_type_node = get_identifier (CHAR8_TYPE);\n+  char8_type_node = TREE_TYPE (identifier_global_value (char8_type_node));\n+  char8_type_size = TYPE_PRECISION (char8_type_node);\n+  if (c_dialect_cxx ())\n+    {\n+      char8_type_node = make_unsigned_type (char8_type_size);\n+\n+      if (flag_char8_t)\n+        record_builtin_type (RID_CHAR8, \"char8_t\", char8_type_node);\n+    }\n+\n+  /* This is for UTF-8 string constants.  */\n+  char8_array_type_node\n+    = build_array_type (char8_type_node, array_domain_type);\n+\n   /* Define 'char16_t'.  */\n   char16_type_node = get_identifier (CHAR16_TYPE);\n   char16_type_node = TREE_TYPE (identifier_global_value (char16_type_node));\n@@ -5138,6 +5172,8 @@ c_stddef_cpp_builtins(void)\n   builtin_define_with_value (\"__WINT_TYPE__\", WINT_TYPE, 0);\n   builtin_define_with_value (\"__INTMAX_TYPE__\", INTMAX_TYPE, 0);\n   builtin_define_with_value (\"__UINTMAX_TYPE__\", UINTMAX_TYPE, 0);\n+  if (flag_char8_t)\n+    builtin_define_with_value (\"__CHAR8_TYPE__\", CHAR8_TYPE, 0);\n   builtin_define_with_value (\"__CHAR16_TYPE__\", CHAR16_TYPE, 0);\n   builtin_define_with_value (\"__CHAR32_TYPE__\", CHAR32_TYPE, 0);\n   if (SIG_ATOMIC_TYPE)\n@@ -7856,6 +7892,7 @@ keyword_begins_type_specifier (enum rid keyword)\n     case RID_ACCUM:\n     case RID_BOOL:\n     case RID_WCHAR:\n+    case RID_CHAR8:\n     case RID_CHAR16:\n     case RID_CHAR32:\n     case RID_SAT:"}, {"sha": "9fe90f32b163aaa4ec5e83475ea8912718deab08", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -180,6 +180,9 @@ enum rid\n   /* C++11 */\n   RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,\n \n+  /* char8_t */\n+  RID_CHAR8,\n+\n   /* C++ concepts */\n   RID_CONCEPT, RID_REQUIRES,\n \n@@ -287,6 +290,7 @@ extern GTY ((length (\"(int) RID_MAX\"))) tree *ridpointers;\n \n enum c_tree_index\n {\n+    CTI_CHAR8_TYPE,\n     CTI_CHAR16_TYPE,\n     CTI_CHAR32_TYPE,\n     CTI_WCHAR_TYPE,\n@@ -330,6 +334,7 @@ enum c_tree_index\n     CTI_UINTPTR_TYPE,\n \n     CTI_CHAR_ARRAY_TYPE,\n+    CTI_CHAR8_ARRAY_TYPE,\n     CTI_CHAR16_ARRAY_TYPE,\n     CTI_CHAR32_ARRAY_TYPE,\n     CTI_WCHAR_ARRAY_TYPE,\n@@ -409,27 +414,30 @@ extern machine_mode c_default_pointer_mode;\n    mask) is _true_.  Thus for keywords which are present in all\n    languages the disable field is zero.  */\n \n-#define D_CONLY\t\t0x001\t/* C only (not in C++).  */\n-#define D_CXXONLY\t0x002\t/* C++ only (not in C).  */\n-#define D_C99\t\t0x004\t/* In C, C99 only.  */\n-#define D_CXX11         0x008\t/* In C++, C++11 only.  */\n-#define D_EXT\t\t0x010\t/* GCC extension.  */\n-#define D_EXT89\t\t0x020\t/* GCC extension incorporated in C99.  */\n-#define D_ASM\t\t0x040\t/* Disabled by -fno-asm.  */\n-#define D_OBJC\t\t0x080\t/* In Objective C and neither C nor C++.  */\n-#define D_CXX_OBJC\t0x100\t/* In Objective C, and C++, but not C.  */\n-#define D_CXXWARN\t0x200\t/* In C warn with -Wcxx-compat.  */\n-#define D_CXX_CONCEPTS  0x400   /* In C++, only with concepts. */\n-#define D_TRANSMEM\t0X800   /* C++ transactional memory TS.  */\n+#define D_CONLY\t\t0x0001\t/* C only (not in C++).  */\n+#define D_CXXONLY\t0x0002\t/* C++ only (not in C).  */\n+#define D_C99\t\t0x0004\t/* In C, C99 only.  */\n+#define D_CXX11         0x0008\t/* In C++, C++11 only.  */\n+#define D_EXT\t\t0x0010\t/* GCC extension.  */\n+#define D_EXT89\t\t0x0020\t/* GCC extension incorporated in C99.  */\n+#define D_ASM\t\t0x0040\t/* Disabled by -fno-asm.  */\n+#define D_OBJC\t\t0x0080\t/* In Objective C and neither C nor C++.  */\n+#define D_CXX_OBJC\t0x0100\t/* In Objective C, and C++, but not C.  */\n+#define D_CXXWARN\t0x0200\t/* In C warn with -Wcxx-compat.  */\n+#define D_CXX_CONCEPTS  0x0400\t/* In C++, only with concepts.  */\n+#define D_TRANSMEM\t0X0800\t/* C++ transactional memory TS.  */\n+#define D_CXX_CHAR8_T\t0X1000\t/* In C++, only with -fchar8_t.  */\n \n #define D_CXX_CONCEPTS_FLAGS D_CXXONLY | D_CXX_CONCEPTS\n+#define D_CXX_CHAR8_T_FLAGS D_CXXONLY | D_CXX_CHAR8_T\n \n /* The reserved keyword table.  */\n extern const struct c_common_resword c_common_reswords[];\n \n /* The number of items in the reserved keyword table.  */\n extern const unsigned int num_c_common_reswords;\n \n+#define char8_type_node\t\t\tc_global_trees[CTI_CHAR8_TYPE]\n #define char16_type_node\t\tc_global_trees[CTI_CHAR16_TYPE]\n #define char32_type_node\t\tc_global_trees[CTI_CHAR32_TYPE]\n #define wchar_type_node\t\t\tc_global_trees[CTI_WCHAR_TYPE]\n@@ -475,6 +483,7 @@ extern const unsigned int num_c_common_reswords;\n #define truthvalue_false_node\t\tc_global_trees[CTI_TRUTHVALUE_FALSE]\n \n #define char_array_type_node\t\tc_global_trees[CTI_CHAR_ARRAY_TYPE]\n+#define char8_array_type_node\t\tc_global_trees[CTI_CHAR8_ARRAY_TYPE]\n #define char16_array_type_node\t\tc_global_trees[CTI_CHAR16_ARRAY_TYPE]\n #define char32_array_type_node\t\tc_global_trees[CTI_CHAR32_ARRAY_TYPE]\n #define wchar_array_type_node\t\tc_global_trees[CTI_WCHAR_ARRAY_TYPE]"}, {"sha": "c9b63caeb2db186300f145051432f754e3d27485", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -702,6 +702,9 @@ cpp_atomic_builtins (cpp_reader *pfile)\n \t\t\t(have_swap[SWAP_INDEX (boolean_type_node)]? 2 : 1));\n   builtin_define_with_int_value (\"__GCC_ATOMIC_CHAR_LOCK_FREE\", \n \t\t\t(have_swap[SWAP_INDEX (signed_char_type_node)]? 2 : 1));\n+  if (flag_char8_t)\n+    builtin_define_with_int_value (\"__GCC_ATOMIC_CHAR8_T_LOCK_FREE\",\n+\t\t\t(have_swap[SWAP_INDEX (char8_type_node)]? 2 : 1));\n   builtin_define_with_int_value (\"__GCC_ATOMIC_CHAR16_T_LOCK_FREE\", \n \t\t\t(have_swap[SWAP_INDEX (char16_type_node)]? 2 : 1));\n   builtin_define_with_int_value (\"__GCC_ATOMIC_CHAR32_T_LOCK_FREE\", \n@@ -1000,6 +1003,8 @@ c_cpp_builtins (cpp_reader *pfile)\n \tcpp_define (pfile, \"__cpp_template_template_args=201611\");\n       if (flag_threadsafe_statics)\n \tcpp_define (pfile, \"__cpp_threadsafe_static_init=200806\");\n+      if (flag_char8_t)\n+        cpp_define (pfile, \"__cpp_char8_t=201811\");\n     }\n   /* Note that we define this for C as well, so that we know if\n      __attribute__((cleanup)) will interface with EH.  */"}, {"sha": "0a368a33a5839fedab872850d14e4fdf3268b457", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1281,9 +1281,14 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string, bool translate)\n     {\n     default:\n     case CPP_STRING:\n-    case CPP_UTF8STRING:\n       TREE_TYPE (value) = char_array_type_node;\n       break;\n+    case CPP_UTF8STRING:\n+      if (flag_char8_t)\n+        TREE_TYPE (value) = char8_array_type_node;\n+      else\n+        TREE_TYPE (value) = char_array_type_node;\n+      break;\n     case CPP_STRING16:\n       TREE_TYPE (value) = char16_array_type_node;\n       break;\n@@ -1323,7 +1328,12 @@ lex_charconst (const cpp_token *token)\n   else if (token->type == CPP_CHAR16)\n     type = char16_type_node;\n   else if (token->type == CPP_UTF8CHAR)\n-    type = char_type_node;\n+    {\n+      if (flag_char8_t)\n+        type = char8_type_node;\n+      else\n+        type = char_type_node;\n+    }\n   /* In C, a character constant has type 'int'.\n      In C++ 'char', but multi-char charconsts have type 'int'.  */\n   else if (!c_dialect_cxx () || chars_seen > 1)"}, {"sha": "9660f51867a5eab8fc7d60dd62cc20c5a6c7b415", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -996,6 +996,10 @@ c_common_post_options (const char **pfilename)\n   if (flag_sized_deallocation == -1)\n     flag_sized_deallocation = (cxx_dialect >= cxx14);\n \n+  /* char8_t support is new in C++2A.  */\n+  if (flag_char8_t == -1)\n+    flag_char8_t = (cxx_dialect >= cxx2a);\n+\n   if (flag_extern_tls_init)\n     {\n       if (!TARGET_SUPPORTS_ALIASES || !SUPPORTS_WEAK)"}, {"sha": "858beff53d6dd2bc39e6fd42048eaabbcfa16db4", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1300,6 +1300,11 @@ fcanonical-system-headers\n C ObjC C++ ObjC++\n Where shorter, use canonicalized paths to systems headers.\n \n+fchar8_t\n+C++ ObjC++ Var(flag_char8_t) Init(-1)\n+Enable the char8_t fundamental type and use it as the type for UTF-8 string\n+and character literals.\n+\n fcheck-pointer-bounds\n C ObjC C++ ObjC++ LTO Deprecated\n Deprecated in GCC 9.  This switch has no effect."}, {"sha": "5d0ef1217bb105bed26428fae53d8ed245b5b23f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,3 +1,28 @@\n+2019-01-14  Tom Honermann  <tom@honermann.net>\n+\n+\tImplement P0482R5, char8_t: A type for UTF-8 characters and strings\n+\t* cvt.c (type_promotes_to): Handle char8_t promotion.\n+\t* decl.c (grokdeclarator): Handle invalid type specifier\n+\tcombinations involving char8_t.\n+\t* lex.c (init_reswords): Add char8_t as a reserved word.\n+\t* mangle.c (write_builtin_type): Add name mangling for char8_t (Du).\n+\t* parser.c (cp_keyword_starts_decl_specifier_p)\n+\t(cp_parser_simple_type_specifier): Recognize char8_t as a simple\n+\ttype specifier.\n+\t(cp_parser_string_literal): Use char8_array_type_node for the type\n+\tof CPP_UTF8STRING.\n+\t(cp_parser_set_decl_spec_type): Tolerate char8_t typedefs in system\n+\theaders.\n+\t* rtti.c (emit_support_tinfos): type_info support for char8_t.\n+\t* tree.c (char_type_p): Recognize char8_t as a character type.\n+\t* typeck.c (string_conv_p): Handle conversions of u8 string\n+\tliterals of char8_t type.\n+\t(check_literal_operator_args): Handle UDLs with u8 string literals\n+\tof char8_t type.\n+\t* typeck2.c (ordinary_char_type_p): New.\n+\t(digest_init_r): Disallow initializing a char array with a u8 string\n+\tliteral.\n+\n 2019-01-14  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/88263"}, {"sha": "6a2004330d23d0ac5ac7a12efb45159fb6d55bab", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -7488,6 +7488,7 @@ extern tree store_init_value\t\t\t(tree, tree, vec<tree, va_gc>**, int);\n extern tree split_nonconstant_init\t\t(tree, tree);\n extern bool check_narrowing\t\t\t(tree, tree, tsubst_flags_t,\n \t\t\t\t\t\t bool = false);\n+extern bool ordinary_char_type_p\t\t(tree);\n extern tree digest_init\t\t\t\t(tree, tree, tsubst_flags_t);\n extern tree digest_init_flags\t\t\t(tree, tree, int, tsubst_flags_t);\n extern tree digest_nsdmi_init\t\t        (tree, tree, tsubst_flags_t);"}, {"sha": "9142811939809e6604ae66a49a8bf4342a7fe694", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1877,6 +1877,7 @@ type_promotes_to (tree type)\n      wider.  Scoped enums don't promote, but pretend they do for backward\n      ABI bug compatibility wrt varargs.  */\n   else if (TREE_CODE (type) == ENUMERAL_TYPE\n+\t   || type == char8_type_node\n \t   || type == char16_type_node\n \t   || type == char32_type_node\n \t   || type == wchar_type_node)"}, {"sha": "41972aa09553ae2846dfc78f8eeb8f7db363ec29", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -10770,7 +10770,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t  error_at (&richloc, \"%<long%> and %<short%> specified together\");\n \t}\n       else if (TREE_CODE (type) != INTEGER_TYPE\n-\t       || type == char16_type_node || type == char32_type_node\n+\t       || type == char8_type_node\n+\t       || type == char16_type_node\n+\t       || type == char32_type_node\n \t       || ((long_p || short_p)\n \t\t   && (explicit_char || explicit_intN)))\n \terror_at (loc, \"%qs specified with %qT\", key, type);"}, {"sha": "369ecc05df2b2fe69877f9f3accdbaa05f9f89f3", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -233,6 +233,8 @@ init_reswords (void)\n     mask |= D_CXX_CONCEPTS;\n   if (!flag_tm)\n     mask |= D_TRANSMEM;\n+  if (!flag_char8_t)\n+    mask |= D_CXX_CHAR8_T;\n   if (flag_no_asm)\n     mask |= D_ASM | D_EXT;\n   if (flag_no_gnu_keywords)"}, {"sha": "00bde4ee59a5cae1b7b87cad83db4c92fefde301", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -2473,10 +2473,12 @@ write_builtin_type (tree type)\n       break;\n \n     case INTEGER_TYPE:\n-      /* TYPE may still be wchar_t, char16_t, or char32_t, since that\n+      /* TYPE may still be wchar_t, char8_t, char16_t, or char32_t, since that\n \t isn't in integer_type_nodes.  */\n       if (type == wchar_type_node)\n \twrite_char ('w');\n+      else if (type == char8_type_node)\n+\twrite_string (\"Du\");\n       else if (type == char16_type_node)\n \twrite_string (\"Ds\");\n       else if (type == char32_type_node)"}, {"sha": "7d7b02926502135f6c7035a1ad5e616940f609ed", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -948,6 +948,7 @@ cp_keyword_starts_decl_specifier_p (enum rid keyword)\n     case RID_TYPENAME:\n       /* Simple type specifiers.  */\n     case RID_CHAR:\n+    case RID_CHAR8:\n     case RID_CHAR16:\n     case RID_CHAR32:\n     case RID_WCHAR:\n@@ -4235,9 +4236,14 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,\n \t{\n \tdefault:\n \tcase CPP_STRING:\n-\tcase CPP_UTF8STRING:\n \t  TREE_TYPE (value) = char_array_type_node;\n \t  break;\n+\tcase CPP_UTF8STRING:\n+\t  if (flag_char8_t)\n+\t    TREE_TYPE (value) = char8_array_type_node;\n+\t  else\n+\t    TREE_TYPE (value) = char_array_type_node;\n+\t  break;\n \tcase CPP_STRING16:\n \t  TREE_TYPE (value) = char16_array_type_node;\n \t  break;\n@@ -17504,6 +17510,9 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \tdecl_specs->explicit_char_p = true;\n       type = char_type_node;\n       break;\n+    case RID_CHAR8:\n+      type = char8_type_node;\n+      break;\n     case RID_CHAR16:\n       type = char16_type_node;\n       break;\n@@ -28919,14 +28928,15 @@ cp_parser_set_decl_spec_type (cp_decl_specifier_seq *decl_specs,\n {\n   decl_specs->any_specifiers_p = true;\n \n-  /* If the user tries to redeclare bool, char16_t, char32_t, or wchar_t\n-     (with, for example, in \"typedef int wchar_t;\") we remember that\n+  /* If the user tries to redeclare bool, char8_t, char16_t, char32_t, or\n+     wchar_t (with, for example, in \"typedef int wchar_t;\") we remember that\n      this is what happened.  In system headers, we ignore these\n      declarations so that G++ can work with system headers that are not\n      C++-safe.  */\n   if (decl_spec_seq_has_spec_p (decl_specs, ds_typedef)\n       && !type_definition_p\n       && (type_spec == boolean_type_node\n+\t  || type_spec == char8_type_node\n \t  || type_spec == char16_type_node\n \t  || type_spec == char32_type_node\n \t  || type_spec == wchar_type_node)"}, {"sha": "c4aabea70038575e2b6eadf1ff42ffce5087badd", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1539,7 +1539,7 @@ emit_support_tinfos (void)\n   {\n     &void_type_node,\n     &boolean_type_node,\n-    &wchar_type_node, &char16_type_node, &char32_type_node,\n+    &wchar_type_node, &char8_type_node, &char16_type_node, &char32_type_node,\n     &char_type_node, &signed_char_type_node, &unsigned_char_type_node,\n     &short_integer_type_node, &short_unsigned_type_node,\n     &integer_type_node, &unsigned_type_node,"}, {"sha": "50002161500577c3319a63f2bfb23c4ffc28ceff", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -5022,6 +5022,7 @@ char_type_p (tree type)\n   return (same_type_p (type, char_type_node)\n \t  || same_type_p (type, unsigned_char_type_node)\n \t  || same_type_p (type, signed_char_type_node)\n+\t  || same_type_p (type, char8_type_node)\n \t  || same_type_p (type, char16_type_node)\n \t  || same_type_p (type, char32_type_node)\n \t  || same_type_p (type, wchar_type_node));"}, {"sha": "88e2cd6ab9bcff2367f3d9e3d4556088de06b119", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -2216,6 +2216,7 @@ string_conv_p (const_tree totype, const_tree exp, int warn)\n \n   t = TREE_TYPE (totype);\n   if (!same_type_p (t, char_type_node)\n+      && !same_type_p (t, char8_type_node)\n       && !same_type_p (t, char16_type_node)\n       && !same_type_p (t, char32_type_node)\n       && !same_type_p (t, wchar_type_node))\n@@ -10288,6 +10289,7 @@ check_literal_operator_args (const_tree decl,\n \t      t = TYPE_MAIN_VARIANT (t);\n \t      if ((maybe_raw_p = same_type_p (t, char_type_node))\n \t\t  || same_type_p (t, wchar_type_node)\n+\t\t  || same_type_p (t, char8_type_node)\n \t\t  || same_type_p (t, char16_type_node)\n \t\t  || same_type_p (t, char32_type_node))\n \t\t{\n@@ -10320,6 +10322,8 @@ check_literal_operator_args (const_tree decl,\n \t    max_arity = 1;\n \t  else if (same_type_p (t, wchar_type_node))\n \t    max_arity = 1;\n+\t  else if (same_type_p (t, char8_type_node))\n+\t    max_arity = 1;\n \t  else if (same_type_p (t, char16_type_node))\n \t    max_arity = 1;\n \t  else if (same_type_p (t, char32_type_node))"}, {"sha": "cd4313295d5816cf4caf95d2e1489af178be15ab", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1026,6 +1026,17 @@ check_narrowing (tree type, tree init, tsubst_flags_t complain, bool const_only)\n   return ok;\n }\n \n+/* True iff TYPE is a C++2a \"ordinary\" character type.  */\n+\n+bool\n+ordinary_char_type_p (tree type)\n+{\n+  type = TYPE_MAIN_VARIANT (type);\n+  return (type == char_type_node\n+\t  || type == signed_char_type_node\n+\t  || type == unsigned_char_type_node);\n+}\n+\n /* Process the initializer INIT for a variable of type TYPE, emitting\n    diagnostics for invalid initializers and converting the initializer as\n    appropriate.\n@@ -1091,36 +1102,30 @@ digest_init_r (tree type, tree init, int nested, int flags,\n \t  && TREE_CODE (stripped_init) == STRING_CST)\n \t{\n \t  tree char_type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (init)));\n+\t  bool incompat_string_cst = false;\n \n-\t  if (TYPE_PRECISION (typ1) == BITS_PER_UNIT)\n+\t  if (typ1 != char_type)\n \t    {\n-\t      if (char_type != char_type_node\n-\t\t  && char_type != signed_char_type_node\n-\t\t  && char_type != unsigned_char_type_node)\n-\t\t{\n-\t\t  if (complain & tf_error)\n-\t\t    error_at (loc, \"char-array initialized from wide string\");\n-\t\t  return error_mark_node;\n-\t\t}\n+\t      /* The array element type does not match the initializing string\n+\t         literal element type; this is only allowed when both types are\n+\t         ordinary character type.  There are no string literals of\n+\t         signed or unsigned char type in the language, but we can get\n+\t         them internally from converting braced-init-lists to\n+\t         STRING_CST.  */\n+\t      if (ordinary_char_type_p (typ1)\n+\t\t  && ordinary_char_type_p (char_type))\n+\t\t/* OK */;\n+\t      else\n+\t\tincompat_string_cst = true;\n \t    }\n-\t  else\n+\n+\t  if (incompat_string_cst)\n \t    {\n-\t      if (char_type == char_type_node\n-\t\t  || char_type == signed_char_type_node\n-\t\t  || char_type == unsigned_char_type_node)\n-\t\t{\n-\t\t  if (complain & tf_error)\n-\t\t    error_at (loc,\n-\t\t\t      \"int-array initialized from non-wide string\");\n-\t\t  return error_mark_node;\n-\t\t}\n-\t      else if (char_type != typ1)\n-\t\t{\n-\t\t  if (complain & tf_error)\n-\t\t    error_at (loc, \"int-array initialized from incompatible \"\n-\t\t\t      \"wide string\");\n-\t\t  return error_mark_node;\n-\t\t}\n+\t      if (complain & tf_error)\n+\t\terror_at (loc, \"cannot initialize array of %qT from \"\n+\t\t          \"a string literal with type array of %qT\",\n+\t\t          typ1, char_type);\n+\t      return error_mark_node;\n \t    }\n \n \t  if (nested == 2 && !TYPE_DOMAIN (type))"}, {"sha": "b7534256119bd7834f2fa9d5f32863822d3b393a", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -583,6 +583,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    affect C++ name mangling because in C++ these are distinct types\n    not typedefs.  */\n \n+#ifndef CHAR8_TYPE\n+#define CHAR8_TYPE \"unsigned char\"\n+#endif\n+\n #ifdef UINT_LEAST16_TYPE\n #define CHAR16_TYPE UINT_LEAST16_TYPE\n #else"}, {"sha": "1151708aaf083788aa9c5830cdb93f55b3d888e7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -206,7 +206,7 @@ in the following sections.\n @item C++ Language Options\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n @gccoptlist{-fabi-version=@var{n}  -fno-access-control @gol\n--faligned-new=@var{n}  -fargs-in-order=@var{n}  -fcheck-new @gol\n+-faligned-new=@var{n}  -fargs-in-order=@var{n}  -fchar8_t  -fcheck-new @gol\n -fconstexpr-depth=@var{n}  -fconstexpr-loop-limit=@var{n} @gol\n -fno-elide-constructors @gol\n -fno-enforce-eh-specs @gol\n@@ -2426,6 +2426,60 @@ but few users will need to override the default of\n \n This flag is enabled by default for @option{-std=c++17}.\n \n+@item -fchar8_t\n+@itemx -fno-char8_t\n+@opindex fchar8_t\n+@opindex fno-char8_t\n+Enable support for @code{char8_t} as adopted for C++2a.  This includes\n+the addition of a new @code{char8_t} fundamental type, changes to the\n+types of UTF-8 string and character literals, new signatures for\n+user-defined literals, associated standard library updates, and new\n+@code{__cpp_char8_t} and @code{__cpp_lib_char8_t} feature test macros.\n+\n+This option enables functions to be overloaded for ordinary and UTF-8\n+strings:\n+\n+@smallexample\n+int f(const char *);    // #1\n+int f(const char8_t *); // #2\n+int v1 = f(\"text\");     // Calls #1\n+int v2 = f(u8\"text\");   // Calls #2\n+@end smallexample\n+\n+@noindent\n+and introduces new signatures for user-defined literals:\n+\n+@smallexample\n+int operator\"\"_udl1(char8_t);\n+int v3 = u8'x'_udl1;\n+int operator\"\"_udl2(const char8_t*, std::size_t);\n+int v4 = u8\"text\"_udl2;\n+template<typename T, T...> int operator\"\"_udl3();\n+int v5 = u8\"text\"_udl3;\n+@end smallexample\n+\n+@noindent\n+The change to the types of UTF-8 string and character literals introduces\n+incompatibilities with ISO C++11 and later standards.  For example, the\n+following code is well-formed under ISO C++11, but is ill-formed when\n+@option{-fchar8_t} is specified.\n+\n+@smallexample\n+char ca[] = u8\"xx\";     // error: char-array initialized from wide\n+                        //        string\n+const char *cp = u8\"xx\";// error: invalid conversion from\n+                        //        `const char8_t*' to `const char*'\n+int f(const char*);\n+auto v = f(u8\"xx\");     // error: invalid conversion from\n+                        //        `const char8_t*' to `const char*'\n+std::string s@{u8\"xx\"@};  // error: no matching function for call to\n+                        //        `std::basic_string<char>::basic_string()'\n+using namespace std::literals;\n+s = u8\"xx\"s;            // error: conversion from\n+                        //        `basic_string<char8_t>' to non-scalar\n+                        //        type `basic_string<char>' requested\n+@end smallexample\n+\n @item -fcheck-new\n @opindex fcheck-new\n Check that the pointer returned by @code{operator new} is non-null"}, {"sha": "fa11edaa7aab28acfc509525849be8a60d86c309", "filename": "gcc/testsuite/c-c++-common/raw-string-13.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-13.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -62,6 +62,47 @@ const char s16[] = R\"??(??)??\";\n const char s17[] = R\"?(?)??)?\";\n const char s18[] = R\"??(??)??)??)??\";\n \n+const char u800[] = u8R\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const char u801[] = u8R\"a(\n+)\\\n+a\"\n+)a\";\n+const char u802[] = u8R\"a(\n+)a\\\n+\"\n+)a\";\n+const char u803[] = u8R\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const char u804[] = u8R\"a??/(x)a??/\";\n+const char u805[] = u8R\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const char u806[] = u8R\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const char u807[] = u8R\"abc(??)\\\n+abc\";)abc\";\n+const char u808[] = u8R\"def(de)\\\n+def\";)def\";\n+const char u809[] = u8R\"a(??)\\\n+a\"\n+)a\";\n+const char u810[] = u8R\"a(??)a\\\n+\"\n+)a\";\n+const char u811[] = u8R\"ab(??)a\\\n+b\"\n+)ab\";\n+const char u812[] = u8R\"a#(a#)a??=)a#\";\n+const char u813[] = u8R\"a#(??)a??=??)a#\";\n+const char u814[] = u8R\"??/(x)??/\n+\";)??/\";\n+const char u815[] = u8R\"??/(??)??/\n+\";)??/\";\n+const char u816[] = u8R\"??(??)??\";\n+const char u817[] = u8R\"?(?)??)?\";\n+const char u818[] = u8R\"??(??)??)??)??\";\n+\n const char16_t u00[] = uR\"??=??(??<??>??)??'??!??-\\\n (a)#[{}]^|~\";\n )??=??\";\n@@ -211,6 +252,25 @@ main (void)\n   TEST (s16, \"??\");\n   TEST (s17, \"?)??\");\n   TEST (s18, \"??\"\")??\"\")??\");\n+  TEST (u800, u8\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (u801, u8\"\\n)\\\\\\na\\\"\\n\");\n+  TEST (u802, u8\"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (u803, u8\"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (u804, u8\"x\");\n+  TEST (u805, u8\"abc\");\n+  TEST (u806, u8\"abc\");\n+  TEST (u807, u8\"??\"\")\\\\\\nabc\\\";\");\n+  TEST (u808, u8\"de)\\\\\\ndef\\\";\");\n+  TEST (u809, u8\"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (u810, u8\"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (u811, u8\"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (u812, u8\"a#)a??\"\"=\");\n+  TEST (u813, u8\"??\"\")a??\"\"=??\");\n+  TEST (u814, u8\"x)??\"\"/\\n\\\";\");\n+  TEST (u815, u8\"??\"\")??\"\"/\\n\\\";\");\n+  TEST (u816, u8\"??\");\n+  TEST (u817, u8\"?)??\");\n+  TEST (u818, u8\"??\"\")??\"\")??\");\n   TEST (u00, u\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n   TEST (u01, u\"\\n)\\\\\\na\\\"\\n\");\n   TEST (u02, u\"\\n)a\\\\\\n\\\"\\n\");"}, {"sha": "1d101dc8393534494913e4e77fd90cd8b1c9f6d0", "filename": "gcc/testsuite/c-c++-common/raw-string-15.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-15.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -62,6 +62,47 @@ const char s16[] = R\"??(??)??\";\n const char s17[] = R\"?(?)??)?\";\n const char s18[] = R\"??(??)??)??)??\";\n \n+const char u800[] = u8R\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const char u801[] = u8R\"a(\n+)\\\n+a\"\n+)a\";\n+const char u802[] = u8R\"a(\n+)a\\\n+\"\n+)a\";\n+const char u803[] = u8R\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const char u804[] = u8R\"a??/(x)a??/\";\n+const char u805[] = u8R\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const char u806[] = u8R\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const char u807[] = u8R\"abc(??)\\\n+abc\";)abc\";\n+const char u808[] = u8R\"def(de)\\\n+def\";)def\";\n+const char u809[] = u8R\"a(??)\\\n+a\"\n+)a\";\n+const char u810[] = u8R\"a(??)a\\\n+\"\n+)a\";\n+const char u811[] = u8R\"ab(??)a\\\n+b\"\n+)ab\";\n+const char u812[] = u8R\"a#(a#)a??=)a#\";\n+const char u813[] = u8R\"a#(??)a??=??)a#\";\n+const char u814[] = u8R\"??/(x)??/\n+\";)??/\";\n+const char u815[] = u8R\"??/(??)??/\n+\";)??/\";\n+const char u816[] = u8R\"??(??)??\";\n+const char u817[] = u8R\"?(?)??)?\";\n+const char u818[] = u8R\"??(??)??)??)??\";\n+\n const char16_t u00[] = uR\"??=??(??<??>??)??'??!??-\\\n (a)#[{}]^|~\";\n )??=??\";\n@@ -211,6 +252,25 @@ main (void)\n   TEST (s16, \"??\");\n   TEST (s17, \"?)??\");\n   TEST (s18, \"??\"\")??\"\")??\");\n+  TEST (u800, u8\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (u801, u8\"\\n)\\\\\\na\\\"\\n\");\n+  TEST (u802, u8\"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (u803, u8\"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (u804, u8\"x\");\n+  TEST (u805, u8\"abc\");\n+  TEST (u806, u8\"abc\");\n+  TEST (u807, u8\"??\"\")\\\\\\nabc\\\";\");\n+  TEST (u808, u8\"de)\\\\\\ndef\\\";\");\n+  TEST (u809, u8\"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (u810, u8\"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (u811, u8\"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (u812, u8\"a#)a??\"\"=\");\n+  TEST (u813, u8\"??\"\")a??\"\"=??\");\n+  TEST (u814, u8\"x)??\"\"/\\n\\\";\");\n+  TEST (u815, u8\"??\"\")??\"\"/\\n\\\";\");\n+  TEST (u816, u8\"??\");\n+  TEST (u817, u8\"?)??\");\n+  TEST (u818, u8\"??\"\")??\"\")??\");\n   TEST (u00, u\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n   TEST (u01, u\"\\n)\\\\\\na\\\"\\n\");\n   TEST (u02, u\"\\n)a\\\\\\n\\\"\\n\");"}, {"sha": "b878918a9f3a44e11bbddc7eaed5bd0f0f7815b0", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-wstring2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-wstring2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-wstring2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-wstring2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -4,3 +4,4 @@\n constexpr wchar_t c1 = L\"hi\"[3];\t// { dg-error \"array subscript\" }\n constexpr char16_t c2 = u\"hi\"[3];\t// { dg-error \"array subscript\" }\n constexpr char32_t c3 = U\"hi\"[3];\t// { dg-error \"array subscript\" }\n+constexpr char c4 = u8\"hi\"[3];\t\t// { dg-error \"array subscript\" }"}, {"sha": "b917b5f6b9032dc3a065c8962c77bb452877b334", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-implicit-conv-neg-char8_t.C", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-implicit-conv-neg-char8_t.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-implicit-conv-neg-char8_t.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-implicit-conv-neg-char8_t.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,81 @@\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+#include <cstdint>\n+\n+int operator\"\" _bar (long double);\n+\n+double operator\"\" _foo (long long unsigned);\n+\n+int i = 12_bar; // { dg-error \"unable to find numeric literal operator|with|argument\" }\n+\n+double d = 1.2_foo; // { dg-error \"unable to find numeric literal operator|with|argument\" }\n+\n+int operator\"\" _char(char);\n+\n+int operator\"\" _char8_t(char8_t);\n+\n+int operator\"\" _wchar_t(wchar_t);\n+\n+int operator\"\" _char16_t(char16_t);\n+\n+int operator\"\" _char32_t(char32_t);\n+\n+int cwcx = 'c'_wchar_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int cc8  = 'c'_char8_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int cc16 = 'c'_char16_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int cc32 = 'c'_char32_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+\n+int wccx = L'c'_char; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int wcc8 = L'c'_char8_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int wcc16 = L'c'_char16_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int wcc32 = L'c'_char32_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+\n+int c8c  = u8'c'_char; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int c8wc = u8'c'_wchar_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int c8c16 = u8'c'_char16_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int c8c32 = u8'c'_char32_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+\n+int c16c = u'c'_char; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int c16c8 = u'c'_char8_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int c16wc = u'c'_wchar_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int c16c32 = u'c'_char32_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+\n+int c32c = U'c'_char; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int c32c8 = U'c'_char8_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int c32wc = U'c'_wchar_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+int c32c16 = U'c'_char16_t; // { dg-error \"unable to find character literal operator|with|argument\" }\n+\n+int operator\"\" _char_str(const char*, std::size_t);\n+\n+int operator\"\" _wchar_t_str(const wchar_t*, std::size_t);\n+\n+int operator\"\" _char8_t_str(const char8_t*, std::size_t);\n+\n+int operator\"\" _char16_t_str(const char16_t*, std::size_t);\n+\n+int operator\"\" _char32_t_str(const char32_t*, std::size_t);\n+\n+int strwstr = \"str\"_wchar_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int strstr8 = \"str\"_char8_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int strstr16 = \"str\"_char16_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int strstr32 = \"str\"_char32_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+\n+int str8str = u8\"str\"_char_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int str8wstr = u8\"str\"_wchar_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int str8str16 = u8\"str\"_char16_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int str8str32 = u8\"str\"_char32_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+\n+int wstrstr = L\"str\"_char_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int wstrstr8 = L\"str\"_char8_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int wstrstr16 = L\"str\"_char16_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int wstrstr32 = L\"str\"_char32_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+\n+int str16str = u\"str\"_char_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int str16wstr = u\"str\"_wchar_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int str16str8 = u\"str\"_char8_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int str16str32 = u\"str\"_char32_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+\n+int str32str = U\"str\"_char_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int str32wstr = U\"str\"_wchar_t_str; // { dg-error \"unable to find string literal operator|with|arguments\" }\n+int str32str8 = U\"str\"_char8_t_str; // { dg-error \"unable to find string literal operator string operator|with|arguments\" }\n+int str32str16 = U\"str\"_char16_t_str; // { dg-error \"unable to find string literal operator string operator|with|arguments\" }"}, {"sha": "19cbd519a86fb9461d9c26021f373830c39874ca", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-resolve-char8_t.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-resolve-char8_t.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-resolve-char8_t.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-resolve-char8_t.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+#include <cstdint>\n+#include <cassert>\n+\n+int operator\"\" _foo(const char*)                  { return 0; }\n+int operator\"\" _foo(unsigned long long int)       { return 1; }\n+int operator\"\" _foo(long double)                  { return 2; }\n+int operator\"\" _foo(char)                         { return 3; }\n+int operator\"\" _foo(wchar_t)                      { return 4; }\n+int operator\"\" _foo(char8_t)                      { return 5; }\n+int operator\"\" _foo(char16_t)                     { return 6; }\n+int operator\"\" _foo(char32_t)                     { return 7; }\n+int operator\"\" _foo(const char*, std::size_t)     { return 8; }\n+int operator\"\" _foo(const wchar_t*, std::size_t)  { return 9; }\n+int operator\"\" _foo(const char8_t*, std::size_t)  { return 10; }\n+int operator\"\" _foo(const char16_t*, std::size_t) { return 11; }\n+int operator\"\" _foo(const char32_t*, std::size_t) { return 12; }\n+template<char...> int operator\"\" _foo2()          { return 20; }\n+int operator\"\" _foo2(unsigned long long int)      { return 21; }\n+\n+int\n+main()\n+{\n+  assert(123_foo == 1);\n+  assert(0.123_foo == 2);\n+  assert('c'_foo == 3);\n+  assert(L'c'_foo == 4);\n+  assert(u8'c'_foo == 5);\n+  assert(u'c'_foo == 6);\n+  assert(U'c'_foo == 7);\n+  assert(\"abc\"_foo == 8);\n+  assert(L\"abc\"_foo == 9);\n+  assert(u8\"abc\"_foo == 10);\n+  assert(u\"abc\"_foo == 11);\n+  assert(U\"abc\"_foo == 12);\n+  assert(123_foo2 == 21);\n+}"}, {"sha": "c76b0af9a2879e0ca433cbca544a1bca2018b206", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-string-length.C", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-length.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-length.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-length.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -9,6 +9,14 @@ operator\"\" _len(const char*, size_type len)\n   return len;\n }\n \n+#if __cpp_char8_t\n+constexpr size_type\n+operator\"\" _len(const char8_t*, size_type len)\n+{\n+  return len;\n+}\n+#endif\n+\n constexpr size_type\n operator\"\" _len(const wchar_t*, size_type len)\n {"}, {"sha": "ab65dd08714a6741dc9769455fefee7d96885c81", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-string-literal.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -7,7 +7,9 @@\n using namespace my_string_literals;\n \n decltype(\"Hello, World!\"s) s;\n+#if !__cpp_char8_t == !__cpp_lib_char8_t\n decltype(u8\"Hello, World!\"s) s8;\n+#endif\n decltype(L\"Hello, World!\"s) ws;\n decltype(u\"Hello, World!\"s) s16;\n decltype(U\"Hello, World!\"s) s32;"}, {"sha": "c8725fa9f462fdc7b2ba516172ff4c395392623f", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-string-literal.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.h?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -8,6 +8,12 @@ inline namespace my_string_literals\n   operator\"\" s(const char* str, std::size_t len)\n   { return std::string{str, len}; }\n \n+#if __cpp_lib_char8_t\n+  std::u8string\n+  operator\"\" s(const char8_t* str, std::size_t len)\n+  { return std::u8string{str, len}; }\n+#endif\n+\n   std::wstring\n   operator\"\" s(const wchar_t* str, std::size_t len)\n   { return std::wstring{str, len}; }"}, {"sha": "093e32345cdbe086689792cc383d0a419aab60d0", "filename": "gcc/testsuite/g++.dg/cpp1z/udlit-utf8char.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fudlit-utf8char.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fudlit-utf8char.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fudlit-utf8char.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,7 +1,9 @@\n // { dg-do compile { target c++17 } }\n \n+typedef decltype(u8'c') u8_char_t;\n+\n constexpr int\n-operator\"\"_foo(char c)\n+operator\"\"_foo(u8_char_t c)\n { return c * 100; }\n \n auto cc = u8'8'_foo;"}, {"sha": "ed413f30976c124afbcfaa8ae0fb2d87da1d508d", "filename": "gcc/testsuite/g++.dg/cpp1z/utf8.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Futf8.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -6,7 +6,11 @@\n auto c = 'c';\n auto u8c = u8'c';\n \n+#if __cpp_char8_t\n+static_assert(!std::experimental::is_same_v<decltype(u8c), decltype(c)>, \"\");\n+#else\n static_assert(std::experimental::is_same_v<decltype(u8c), decltype(c)>, \"\");\n+#endif\n \n auto u8s = u8\"c\";\n auto x = u8s[0];"}, {"sha": "aa0860b9f63a7af1e95891f3aa11b9da3255de90", "filename": "gcc/testsuite/g++.dg/cpp2a/char8_t1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,5 @@\n+// P0482R6\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+char8_t c8;"}, {"sha": "71eea7952d3da040481327243f0d3ea658fb2814", "filename": "gcc/testsuite/g++.dg/cpp2a/char8_t2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fchar8_t2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,5 @@\n+// P0482R6\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a -fno-char8_t\" }\n+\n+char8_t c8; // { dg-error \"does not name a type\" }"}, {"sha": "8e1ea48bb1d6d9039e4c824e78a15af3e719fc4e", "filename": "gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -471,3 +471,11 @@\n #else\n #  error \"__has_cpp_attribute\"\n #endif\n+\n+// C++2A features:\n+\n+#ifndef __cpp_char8_t\n+#  error \"__cpp_char8_t\"\n+#elif __cpp_char8_t != 201811\n+#  error \"__cpp_char8_t != 201811\"\n+#endif"}, {"sha": "9252ef9dfa652ce1e17620af8aaa45d3072bd277", "filename": "gcc/testsuite/g++.dg/ext/char8_t-aliasing-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-aliasing-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-aliasing-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-aliasing-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,8 @@\n+// Test that char8_t does not alias with other types when -fchar8_t is enabled.\n+// { dg-do compile }\n+// { dg-options \"-fstrict-aliasing -Wstrict-aliasing=1 -fchar8_t\" }\n+\n+extern long l;\n+char8_t* f() {\n+  return (char8_t*)&l; // { dg-warning \"dereferencing type-punned pointer might break strict-aliasing rules\" \"char8_t\" }\n+}"}, {"sha": "8ed85ccfdcdfd4fa54610a5a3f0953b62b7e7d6d", "filename": "gcc/testsuite/g++.dg/ext/char8_t-char-literal-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,12 @@\n+// Test that UTF-8 character literals have type char if -fchar8_t is not enabled.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fno-char8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+static_assert(is_same<decltype(u8'x'), char>::value, \"Error\");"}, {"sha": "7861736689cbbbd677395257f470d693ba9fced8", "filename": "gcc/testsuite/g++.dg/ext/char8_t-char-literal-2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,12 @@\n+// Test that UTF-8 character literals have type char8_t if -fchar8_t is enabled.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+static_assert(is_same<decltype(u8'x'), char8_t>::value, \"Error\");"}, {"sha": "27f19fe2dc99609347c75a2ef4bb40cb08aed20a", "filename": "gcc/testsuite/g++.dg/ext/char8_t-deduction-1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-deduction-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-deduction-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-deduction-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,30 @@\n+// Test that char is deduced for UTF-8 character and string literals when\n+// -fchar8_t is not in effect.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fno-char8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+template<typename T1, typename T2, typename T3>\n+void ft(T1, T2, T3 &) {\n+  static_assert(is_same<T1, char>::value, \"Error\");\n+  static_assert(is_same<T2, const char*>::value, \"Error\");\n+  static_assert(is_same<T3, const char[2]>::value, \"Error\");\n+}\n+\n+auto x = (ft(u8'x', u8\"x\", u8\"x\"),0);\n+\n+auto c8 = u8'x';\n+static_assert(is_same<decltype(c8), char>::value, \"Error\");\n+\n+auto c8p = u8\"x\";\n+static_assert(is_same<decltype(c8p), const char*>::value, \"Error\");\n+\n+auto &c8a = u8\"x\";\n+static_assert(is_same<decltype(c8a), const char(&)[2]>::value, \"Error\");"}, {"sha": "1daf2969d6101cb7f7b309540d5324130afb926e", "filename": "gcc/testsuite/g++.dg/ext/char8_t-deduction-2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-deduction-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-deduction-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-deduction-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,30 @@\n+// Test that char8_t is deduced for UTF-8 character and string literals when\n+// -fchar8_t is in effect.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+template<typename T1, typename T2, typename T3>\n+void ft(T1, T2, T3 &) {\n+  static_assert(is_same<T1, char8_t>::value, \"Error\");\n+  static_assert(is_same<T2, const char8_t*>::value, \"Error\");\n+  static_assert(is_same<T3, const char8_t[2]>::value, \"Error\");\n+}\n+\n+auto x = (ft(u8'x', u8\"x\", u8\"x\"),0);\n+\n+auto c8 = u8'x';\n+static_assert(is_same<decltype(c8), char8_t>::value, \"Error\");\n+\n+auto c8p = u8\"x\";\n+static_assert(is_same<decltype(c8p), const char8_t*>::value, \"Error\");\n+\n+auto &c8a = u8\"x\";\n+static_assert(is_same<decltype(c8a), const char8_t(&)[2]>::value, \"Error\");"}, {"sha": "6107cb61ecc6db7d7671d2ecea0575522df4e1ce", "filename": "gcc/testsuite/g++.dg/ext/char8_t-feature-test-macro-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-feature-test-macro-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-feature-test-macro-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-feature-test-macro-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,8 @@\n+// Test that predefined feature test macros are not present when -fchar8_t is\n+// not enabled.\n+// { dg-do compile }\n+// { dg-options \"-fno-char8_t\" }\n+\n+#if defined(__cpp_char8_t)\n+#error __cpp_char8_t is defined!\n+#endif"}, {"sha": "df1063f6aa185c8aecf0fb49b5f17f00e8e6e8a5", "filename": "gcc/testsuite/g++.dg/ext/char8_t-feature-test-macro-2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-feature-test-macro-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-feature-test-macro-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-feature-test-macro-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,10 @@\n+// Test that predefined feature test macros are present when -fchar8_t is\n+// enabled.\n+// { dg-do compile }\n+// { dg-options \"-fchar8_t\" }\n+\n+#if !defined(__cpp_char8_t)\n+#  error __cpp_char8_t is not defined!\n+#elif __cpp_char8_t != 201811\n+#  error __cpp_char8_t != 201811\n+#endif"}, {"sha": "e2fd67bac728fd47969b0b6398414465a483f7a1", "filename": "gcc/testsuite/g++.dg/ext/char8_t-init-1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-init-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-init-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-init-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,21 @@\n+// Test initialization from UTF-8 literals when -fchar8_t is not enabled.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fno-char8_t\" }\n+\n+char c1 = 'x';\n+char c2 = u8'x';\n+\n+const char *pc1 = \"x\";\n+const char *pc2 = u8\"x\";\n+\n+const char (&rca1)[2] = \"x\";\n+const char (&rca2)[2] = u8\"x\";\n+\n+char ca1[] = \"x\";\n+char ca2[] = u8\"x\";\n+\n+signed char sca1[] = \"x\";\n+signed char sca2[] = u8\"x\";\n+\n+unsigned char uca1[] = \"x\";\n+unsigned char uca2[] = u8\"x\";"}, {"sha": "c713bc122663ea20b58618309d63a55b849776fa", "filename": "gcc/testsuite/g++.dg/ext/char8_t-init-2.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-init-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-init-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-init-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,33 @@\n+// Test initialization from UTF-8 literals when -fchar8_t is enabled.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+char c1 = 'x';\n+char c2 = u8'x';\n+char8_t c3 = 'x';\n+char8_t c4 = u8'x';\n+char8_t c5 = u'x';\n+\n+const char *pc1 = \"x\";\n+const char *pc2 = u8\"x\"; // { dg-error \"invalid conversion from .const char8_t.. to .const char..\" \"char8_t\" }\n+const char8_t *pc3 = \"x\"; // { dg-error \"invalid conversion from .const char.. to .const char8_t..\" \"char8_t\" }\n+const char8_t *pc4 = u8\"x\";\n+const char8_t *pc5 = u\"x\"; // { dg-error \"cannot convert .const char16_t.. to .const char8_t.. in initialization\" \"char8_t\" }\n+\n+const char (&rca1)[2] = \"x\";\n+const char (&rca2)[2] = u8\"x\"; // { dg-error \"invalid initialization of reference of type .const char ....... from expression of type .const char8_t ....\" \"char8_t\" }\n+const char8_t (&rca3)[2] = \"x\"; // { dg-error \"invalid initialization of reference of type .const char8_t ....... from expression of type .const char ....\" \"char8_t\" }\n+const char8_t (&rca4)[2] = u8\"x\";\n+const char8_t (&rca5)[2] = u\"x\"; // { dg-error \"invalid initialization of reference of type .const char8_t ....... from expression of type .const char16_t ....\" \"char8_t\" }\n+\n+char ca1[] = \"x\";\n+char ca2[] = u8\"x\"; // { dg-error \"from a string literal with type array of .char8_t.\" \"char8_t\" }\n+char8_t ca3[] = \"x\"; // { dg-error \"from a string literal with type array of .char.\" \"char8_t\" }\n+char8_t ca4[] = u8\"x\";\n+char8_t ca5[] = u\"x\"; // { dg-error \"from a string literal with type array of .char16_t.\" \"char8_t\" }\n+\n+signed char sca1[] = \"x\";\n+signed char sca2[] = u8\"x\"; // { dg-error \"from a string literal with type array of .char8_t.\" \"char8_t\" }\n+\n+unsigned char uca1[] = \"x\";\n+unsigned char uca2[] = u8\"x\"; // { dg-error \"from a string literal with type array of .char8_t.\" \"char8_t\" }"}, {"sha": "f2475094aa5c51cdfde96a5013a17eeb45f4cf21", "filename": "gcc/testsuite/g++.dg/ext/char8_t-keyword-1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-keyword-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-keyword-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-keyword-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,5 @@\n+// Test that char8_t is not a keyword if -fchar8_t is not enabled.\n+// { dg-do compile }\n+// { dg-options \"-fno-char8_t\" }\n+\n+int char8_t;"}, {"sha": "8c84e1e79dde457f4278d39bb54f5caf62793187", "filename": "gcc/testsuite/g++.dg/ext/char8_t-keyword-2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-keyword-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-keyword-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-keyword-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,5 @@\n+// Test that char8_t is recognized as a keyword if -fchar8_t is enabled.\n+// { dg-do compile }\n+// { dg-options \"-fchar8_t\" }\n+\n+int char8_t; /* { dg-error \"multiple types in one declaration|declaration does not declare anything\" \"char8_t\" } */"}, {"sha": "0d6df34d23f0118fafdd407159b81ebd1aad51d3", "filename": "gcc/testsuite/g++.dg/ext/char8_t-limits-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-limits-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-limits-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-limits-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,9 @@\n+// Test for unsignedness and that the max limit of char8_t is at least 0xFF\n+// when -fchar8_t is enabled.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+static_assert(u8'\\xFF' == 0xFF, \"Error\");\n+static_assert(u8\"\\xFF\"[0] == 0xFF, \"Error\");\n+static_assert(char8_t(-1) >= 0, \"Error\");\n+static_assert(char8_t{-1} >= 0, \"Error\"); // { dg-error \"narrowing conversion of .-1. from .int. to .char8_t.\" \"char8_t\" }"}, {"sha": "48aa44a6691e02414a729de4b502bf46e0da81c6", "filename": "gcc/testsuite/g++.dg/ext/char8_t-overload-1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-overload-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-overload-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-overload-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,26 @@\n+// Test overloading for UTF-8 literals when -fchar8_t is not in effect.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fno-char8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+int fc(char);\n+long fc(unsigned char);\n+static_assert(is_same<decltype(fc('x')), int>::value, \"Error\");\n+static_assert(is_same<decltype(fc(u8'x')), int>::value, \"Error\");\n+\n+int fs(const char*);\n+long fs(const unsigned char*);\n+static_assert(is_same<decltype(fs(\"x\")), int>::value, \"Error\");\n+static_assert(is_same<decltype(fs(u8\"x\")), int>::value, \"Error\");\n+\n+int fr(const char(&)[2]);\n+long fr(const unsigned char(&)[2]);\n+static_assert(is_same<decltype(fr(\"x\")), int>::value, \"Error\");\n+static_assert(is_same<decltype(fr(u8\"x\")), int>::value, \"Error\");"}, {"sha": "15e28cd6db2937cf852ff2aadbffdada1e5185ae", "filename": "gcc/testsuite/g++.dg/ext/char8_t-overload-2.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-overload-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-overload-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-overload-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,26 @@\n+// Test overloading for UTF-8 literals when -fchar8_t is in effect.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+int fc(char);\n+long fc(char8_t);\n+static_assert(is_same<decltype(fc('x')), int>::value, \"Error\");\n+static_assert(is_same<decltype(fc(u8'x')), long>::value, \"Error\");\n+\n+int fs(const char*);\n+long fs(const char8_t*);\n+static_assert(is_same<decltype(fs(\"x\")), int>::value, \"Error\");\n+static_assert(is_same<decltype(fs(u8\"x\")), long>::value, \"Error\");\n+\n+int fr(const char(&)[2]);\n+long fr(const char8_t(&)[2]);\n+static_assert(is_same<decltype(fr(\"x\")), int>::value, \"Error\");\n+static_assert(is_same<decltype(fr(u8\"x\")), long>::value, \"Error\");"}, {"sha": "36d411b20db43f20b847d5db11e0a2e8bda94397", "filename": "gcc/testsuite/g++.dg/ext/char8_t-predefined-macros-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-predefined-macros-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-predefined-macros-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-predefined-macros-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,12 @@\n+// Test that char8_t related predefined macros are not present when -fchar8_t is\n+// not enabled.\n+// { dg-do compile }\n+// { dg-options \"-fno-char8_t\" }\n+\n+#if defined(__CHAR8_TYPE__)\n+#error __CHAR8_TYPE__ is defined!\n+#endif\n+\n+#if defined(__GCC_ATOMIC_CHAR8_T_LOCK_FREE)\n+#error __GCC_ATOMIC_CHAR8_T_LOCK_FREE is defined!\n+#endif"}, {"sha": "06d9b246794dc318ac88de6d9290d086b7323b21", "filename": "gcc/testsuite/g++.dg/ext/char8_t-predefined-macros-2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-predefined-macros-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-predefined-macros-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-predefined-macros-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,12 @@\n+// Test that char8_t related predefined macros are present when -fchar8_t is\n+// enabled.\n+// { dg-do compile }\n+// { dg-options \"-fchar8_t\" }\n+\n+#if !defined(__CHAR8_TYPE__)\n+#error __CHAR8_TYPE__ is not defined!\n+#endif\n+\n+#if !defined(__GCC_ATOMIC_CHAR8_T_LOCK_FREE)\n+#error __GCC_ATOMIC_CHAR8_T_LOCK_FREE is not defined!\n+#endif"}, {"sha": "c4bc4cb387292035bc59f87fc32400a48989e0d2", "filename": "gcc/testsuite/g++.dg/ext/char8_t-sizeof-1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-sizeof-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-sizeof-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-sizeof-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,7 @@\n+// Test sizeof for char8_t.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+static_assert(sizeof(u8'x') == 1);\n+static_assert(sizeof(char8_t) == 1);\n+static_assert(sizeof(__CHAR8_TYPE__) == 1);"}, {"sha": "1c2fe360abcbb1a66b68728c8c9b6021ddc5ca2a", "filename": "gcc/testsuite/g++.dg/ext/char8_t-specialization-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-specialization-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-specialization-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-specialization-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,8 @@\n+// Test specialization for UTF-8 literals when -fchar8_t is not enabled.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fno-char8_t\" }\n+\n+template<auto> struct ct { static constexpr int dm = 1; };\n+template<> struct ct<'x'> { static constexpr int dm = 2; };\n+static_assert(ct<'x'>::dm == 2, \"Error\");\n+static_assert(ct<u8'x'>::dm == 2, \"Error\");"}, {"sha": "969e09ecc18b2745957e4abb24290e0e246f05e3", "filename": "gcc/testsuite/g++.dg/ext/char8_t-specialization-2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-specialization-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-specialization-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-specialization-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,17 @@\n+// Test specialization for UTF-8 literals when -fchar8_t is enabled.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+template<auto> struct ct { static constexpr int dm = 1; };\n+template<> struct ct<'x'> { static constexpr int dm = 2; };\n+template<> struct ct<u8'x'> { static constexpr int dm = 3; };\n+static_assert(ct<'x'>::dm == 2, \"Error\");\n+static_assert(ct<u8'x'>::dm == 3, \"Error\");\n+\n+template<typename T, const T *> struct ct2 { static constexpr int dm = 4; };\n+template<const char *P> struct ct2<char,P> { static constexpr int dm = 5; };\n+template<const char8_t *P> struct ct2<char8_t,P> { static constexpr int dm = 6; };\n+constexpr const char s[] = \"x\";\n+constexpr const char8_t s8[] = u8\"x\";\n+static_assert(ct2<char,s>::dm == 5, \"Error\");\n+static_assert(ct2<char8_t,s8>::dm == 6, \"Error\");"}, {"sha": "6cfb47be3a994c51b0a8706fa53ebf429c7947a7", "filename": "gcc/testsuite/g++.dg/ext/char8_t-string-literal-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-string-literal-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-string-literal-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-string-literal-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,12 @@\n+// Test that UTF-8 string literals have type const char[] if -fchar8_t is not enabled.\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fno-char8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+static_assert(is_same<decltype(u8\"\"), const char(&)[1]>::value, \"Error\");"}, {"sha": "f51df72d7ce8ad809d261d34fff89f5c7ae173c6", "filename": "gcc/testsuite/g++.dg/ext/char8_t-string-literal-2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-string-literal-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-string-literal-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-string-literal-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,12 @@\n+// Test that UTF-8 string literals have type const char8_t[] if -fchar8_t is enabled.\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fchar8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+static_assert(is_same<decltype(u8\"\"), const char8_t(&)[1]>::value, \"Error\");"}, {"sha": "dac4a47eea3b57964e608f5697c43cdc386ccf21", "filename": "gcc/testsuite/g++.dg/ext/char8_t-type-specifier-1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-type-specifier-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-type-specifier-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-type-specifier-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,5 @@\n+// Test that char8_t is not a type specifier if -fchar8_t is not enabled.\n+// { dg-do compile }\n+// { dg-options \"-fno-char8_t\" }\n+\n+char8_t c8; /* { dg-error \".char8_t. does not name a type\" \"no-char8_t\" } */"}, {"sha": "ecc5d1c67c052bd7fb193d61eb9eeda05de95d7e", "filename": "gcc/testsuite/g++.dg/ext/char8_t-type-specifier-2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-type-specifier-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-type-specifier-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-type-specifier-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,16 @@\n+// Test that char8_t is recognized as a type specifier if -fchar8_t is enabled.\n+// { dg-do compile }\n+// { dg-options \"-fchar8_t\" }\n+\n+char8_t c8;\n+\n+signed char8_t         sc8;            /* { dg-error \"signed\" } */\n+unsigned char8_t       uc8;            /* { dg-error \"unsigned\" } */\n+\n+short char8_t          shc8;           /* { dg-error \"short\" } */\n+long char8_t           lgc8;           /* { dg-error \"long\" } */\n+\n+signed short char8_t   ssc8;           /* { dg-error \"signed\" } */\n+signed long char8_t    slc8;           /* { dg-error \"signed\" } */\n+unsigned short char8_t usc8;           /* { dg-error \"unsigned\" } */\n+unsigned long char8_t  ulc8;           /* { dg-error \"unsigned\" } */"}, {"sha": "b77d9a2e6c490985b03f012c29bf9d4e7932b487", "filename": "gcc/testsuite/g++.dg/ext/char8_t-typedef-1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-typedef-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-typedef-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-typedef-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,6 @@\n+// Test that no error is issued for attempted char8_t typedef declarations\n+// when -fchar8_t is not enabled.\n+// { dg-do compile }\n+// { dg-options \"-fno-char8_t\" }\n+\n+typedef unsigned char char8_t;"}, {"sha": "bb20499c26ee4a10b960a200368eae3eb345b5d2", "filename": "gcc/testsuite/g++.dg/ext/char8_t-typedef-2.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-typedef-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-typedef-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-typedef-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,6 @@\n+// Test that an error is issued for attempted char8_t typedef declarations\n+// when -fchar8_t is enabled.\n+// { dg-do compile }\n+// { dg-options \"-fchar8_t\" }\n+\n+typedef unsigned char char8_t; // { dg-error \"redeclaration\" }"}, {"sha": "627c263bafe09e3cdeef3534a29f2ecbb5dc74f4", "filename": "gcc/testsuite/g++.dg/ext/char8_t-udl-1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-udl-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-udl-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-udl-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,19 @@\n+// Test overloading for UTF-8 user defined literals when -fchar8_t is not in effect.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fno-char8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+int operator \"\" _udcl(char);\n+static_assert(is_same<decltype('x'_udcl), int>::value, \"Error\");\n+static_assert(is_same<decltype(u8'x'_udcl), int>::value, \"Error\");\n+\n+int operator \"\" _udsl(const char*, __SIZE_TYPE__);\n+static_assert(is_same<decltype(\"x\"_udsl), int>::value, \"Error\");\n+static_assert(is_same<decltype(u8\"x\"_udsl), int>::value, \"Error\");"}, {"sha": "74cc775e87c53daabdba0540a4d465f44fc2ee71", "filename": "gcc/testsuite/g++.dg/ext/char8_t-udl-2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-udl-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-udl-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-udl-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,21 @@\n+// Test overloading for UTF-8 user defined literals when -fchar8_t is in effect.\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -fchar8_t\" }\n+\n+template<typename T1, typename T2>\n+  struct is_same\n+  { static const bool value = false; };\n+\n+template<typename T>\n+  struct is_same<T, T>\n+  { static const bool value = true; };\n+\n+int operator \"\" _udcl(char);\n+long operator \"\" _udcl(char8_t);\n+static_assert(is_same<decltype('x'_udcl), int>::value, \"Error\");\n+static_assert(is_same<decltype(u8'x'_udcl), long>::value, \"Error\");\n+\n+int operator \"\" _udsl(const char*, __SIZE_TYPE__);\n+long operator \"\" _udsl(const char8_t*, __SIZE_TYPE__);\n+static_assert(is_same<decltype(\"x\"_udsl), int>::value, \"Error\");\n+static_assert(is_same<decltype(u8\"x\"_udsl), long>::value, \"Error\");"}, {"sha": "f37f93c8b73299e2175a5e810075a322ca076561", "filename": "gcc/testsuite/g++.dg/ext/utf-array-short-wchar.C", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -3,34 +3,44 @@\n /* { dg-do compile { target c++11 } } */\n /* { dg-options \"-fshort-wchar\" } */\n \n+#if __cpp_char8_t\n+typedef char8_t u8_char_t;\n+#else\n+typedef char u8_char_t;\n+#endif\n+\n const char\ts_0[]\t= \"ab\";\n-const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n-const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n-const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of .char16_t.\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of .char32_t.\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n+const u8_char_t\ts_4[]\t= u8\"ab\";\n \n-const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n const char16_t\ts16_1[]\t= u\"ab\";\n-const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n-const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of .char32_t.\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n+const char16_t\ts16_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_7[3] = u\"ab\";\n-const char16_t\ts16_8[4] = u\"ab\";\n+const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_7[2] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_8[3] = u\"ab\";\n+const char16_t\ts16_9[4] = u\"ab\";\n \n-const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n-const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of .char16_t.\" } */\n const char32_t\ts32_2[]\t= U\"ab\";\n-const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n+const char32_t\ts32_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_7[3] = U\"ab\";\n-const char32_t\ts32_8[4] = U\"ab\";\n+const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_8[3] = U\"ab\";\n+const char32_t\ts32_9[4] = U\"ab\";\n \n-const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n-const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n-const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of .char16_t.\" } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of .char32_t.\" } */\n const wchar_t\tsw_3[]\t= L\"ab\";\n+const wchar_t\tsw_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */"}, {"sha": "0e403db7e05e283118da5297912dd5ad63039041", "filename": "gcc/testsuite/g++.dg/ext/utf-array.C", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -3,34 +3,44 @@\n /* { dg-do compile { target c++11 } } */\n // { dg-options \"\" }\n \n+#if __cpp_char8_t\n+typedef char8_t u8_char_t;\n+#else\n+typedef char u8_char_t;\n+#endif\n+\n const char\ts_0[]\t= \"ab\";\n-const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n-const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n-const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of .char16_t.\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of .char32_t.\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n+const u8_char_t\ts_4[]\t= u8\"ab\";\n \n-const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n const char16_t\ts16_1[]\t= u\"ab\";\n-const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n-const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of .char32_t.\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n+const char16_t\ts16_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_7[3] = u\"ab\";\n-const char16_t\ts16_8[4] = u\"ab\";\n+const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_7[2] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_8[3] = u\"ab\";\n+const char16_t\ts16_9[4] = u\"ab\";\n \n-const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n-const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of .char16_t.\" } */\n const char32_t\ts32_2[]\t= U\"ab\";\n-const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n+const char32_t\ts32_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_7[3] = U\"ab\";\n-const char32_t\ts32_8[4] = U\"ab\";\n+const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_8[3] = U\"ab\";\n+const char32_t\ts32_9[4] = U\"ab\";\n \n-const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n-const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n-const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of .char16_t.\" } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of .char32_t.\" } */\n const wchar_t\tsw_3[]\t= L\"ab\";\n+const wchar_t\tsw_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */"}, {"sha": "0170b36da1496bfba1af566e8e8e9628219a0e26", "filename": "gcc/testsuite/g++.dg/ext/utf-cvt-char8_t.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cvt-char8_t.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cvt-char8_t.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cvt-char8_t.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,39 @@\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Test the char8_t promotion rules. */\n+/* { dg-do compile { target c++11 } } */\n+/* { dg-options \"-fchar8_t -Wall -Wconversion -Wsign-conversion -Wsign-promo\" } */\n+\n+extern void f_c (char);\n+extern void fsc (signed char);\n+extern void fuc (unsigned char);\n+extern void f_s (short);\n+extern void fss (signed short);\n+extern void fus (unsigned short);\n+extern void f_i (int);\n+extern void fsi (signed int);\n+extern void fui (unsigned int);\n+extern void f_l (long);\n+extern void fsl (signed long);\n+extern void ful (unsigned long);\n+extern void f_ll (long long);\n+extern void fsll (signed long long);\n+extern void full (unsigned long long);\n+\n+void m(char8_t c)\n+{\n+    f_c (c);\t/* { dg-warning \"change the sign\" } */\n+    fsc (c);\t/* { dg-warning \"change the sign\" } */\n+    fuc (c);\n+    f_s (c);\n+    fss (c);\n+    fus (c);\n+    f_i (c);\n+    fsi (c);\n+    fui (c);\n+    f_l (c);\n+    fsl (c);\n+    ful (c);\n+    f_ll (c);\n+    fsll (c);\n+    full (c);\n+}"}, {"sha": "ada97be5ef646c82524700b1f13152f47b94c23a", "filename": "gcc/testsuite/g++.dg/ext/utf-cxx98.C", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cxx98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cxx98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cxx98.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,27 +1,33 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n /* Expected errors for char16_t/char32_t in c++98. */\n-/* Ensure u and U prefixes are parsed as separate tokens in c++98. */\n+/* Ensure u8, u and U prefixes are parsed as separate tokens in c++98. */\n /* { dg-do compile } */\n /* { dg-options \"-std=c++98\" } */\n \n const static char16_t\tc0\t= 'a';\t/* { dg-error \"not name a type\" } */\n const static char32_t\tc1\t= 'a';\t/* { dg-error \"not name a type\" } */\n \n-const unsigned short\tc2\t= u'a';\t/* { dg-error \"not declared\" } */\n-const unsigned long\tc3\t= U'a';\t/* { dg-error \"not declared\" } */\n+const unsigned short\tc2\t= u'a';\t\t/* { dg-error \"not declared\" } */\n+const unsigned long\tc3\t= U'a';\t\t/* { dg-error \"not declared\" } */\n+const unsigned char\tc4\t= u8'a';\t/* { dg-error \"not declared\" } */\n \n #define u\t1 +\n #define U\t2 +\n+#define u8\t3 +\n \n const unsigned short\tc5\t= u'a';\n const unsigned long\tc6\t= U'a';\n+const unsigned char\tc7\t= u8'a';\n \n #undef u\n #undef U\n+#undef u8\n #define u\t\"a\"\n #define U\t\"b\"\n+#define u8\t\"c\"\n \n const void\t\t*s0\t= u\"a\";\n const void\t\t*s1\t= U\"a\";\n+const void\t\t*s2\t= u8\"a\";\n \n int main () {}"}, {"sha": "6bf020f7cdb2734df19c480d4a6b27df8fb79c6a", "filename": "gcc/testsuite/g++.dg/ext/utf-dflt.C", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,27 +1,33 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n /* Expected errors for char16_t/char32_t in default std. */\n-/* Ensure u and U prefixes are parsed as separate tokens in default std. */\n+/* Ensure u8, u and U prefixes are parsed as separate tokens in default std. */\n /* { dg-do compile } */\n /* { dg-options \"-std=c++98\" } */\n \n const static char16_t\tc0\t= 'a';\t/* { dg-error \"not name a type\" } */\n const static char32_t\tc1\t= 'a';\t/* { dg-error \"not name a type\" } */\n \n-const unsigned short\tc2\t= u'a';\t/* { dg-error \"not declared\" } */\n-const unsigned long\tc3\t= U'a';\t/* { dg-error \"not declared\" } */\n+const unsigned short\tc2\t= u'a';\t\t/* { dg-error \"not declared\" } */\n+const unsigned long\tc3\t= U'a';\t\t/* { dg-error \"not declared\" } */\n+const unsigned char\tc4\t= u8'a';\t/* { dg-error \"not declared\" } */\n \n #define u\t1 +\n #define U\t2 +\n+#define u8\t3 +\n \n-const unsigned short\tc4\t= u'a';\n-const unsigned long\tc5\t= U'a';\n+const unsigned short\tc5\t= u'a';\n+const unsigned long\tc6\t= U'a';\n+const unsigned char\tc7\t= u8'a';\n \n #undef u\n #undef U\n+#undef u8\n #define u\t\"a\"\n #define U\t\"b\"\n+#define u8\t\"c\"\n \n const void\t\t*s0\t= u\"a\";\n const void\t\t*s1\t= U\"a\";\n+const void\t\t*s2\t= u8\"a\";\n \n int main () {}"}, {"sha": "dc9a814c1616f21a146f6cc8e9211eeffd57bcbd", "filename": "gcc/testsuite/g++.dg/ext/utf-gnuxx98.C", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-gnuxx98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-gnuxx98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-gnuxx98.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,27 +1,33 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n /* Expected errors for char16_t/char32_t in gnu++98. */\n-/* Ensure u and U prefixes are parsed as separate tokens in gnu++98. */\n+/* Ensure u8, u and U prefixes are parsed as separate tokens in gnu++98. */\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu++98\" } */\n \n const static char16_t\tc0\t= 'a';\t/* { dg-error \"not name a type\" } */\n const static char32_t\tc1\t= 'a';\t/* { dg-error \"not name a type\" } */\n \n-const unsigned short\tc2\t= u'a';\t/* { dg-error \"not declared\" } */\n-const unsigned long\tc3\t= U'a';\t/* { dg-error \"not declared\" } */\n+const unsigned short\tc2\t= u'a';\t\t/* { dg-error \"not declared\" } */\n+const unsigned long\tc3\t= U'a';\t\t/* { dg-error \"not declared\" } */\n+const unsigned char\tc4\t= u8'a';\t/* { dg-error \"not declared\" } */\n \n #define u\t1 +\n #define U\t2 +\n+#define u8\t3 +\n \n const unsigned short\tc5\t= u'a';\n const unsigned long\tc6\t= U'a';\n+const unsigned char\tc7\t= u8'a';\n \n #undef u\n #undef U\n+#undef u8\n #define u\t\"a\"\n #define U\t\"b\"\n+#define u8\t\"c\"\n \n const void\t\t*s0\t= u\"a\";\n const void\t\t*s1\t= U\"a\";\n+const void\t\t*s2\t= u8\"a\";\n \n int main () {}"}, {"sha": "a7d8b16a2858ac9327767cbf983f6db65a71f40c", "filename": "gcc/testsuite/g++.dg/ext/utf-type-char8_t.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-type-char8_t.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-type-char8_t.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-type-char8_t.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -0,0 +1,11 @@\n+/* Ensure that __CHAR8_TYPE__ exists and matches the underlying type. */\n+/* { dg-do run { target c++11 } } */\n+/* { dg-options \"-fchar8_t -Wall -Werror\" } */\n+\n+extern \"C\" void abort (void);\n+\n+int main ()\n+{\n+    if (sizeof (__CHAR8_TYPE__) != sizeof (char8_t))\n+\tabort();\n+}"}, {"sha": "089465fa518a47bfd561003b1a96f0fd707a5901", "filename": "gcc/testsuite/g++.dg/ext/utf8-1.C", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf8-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf8-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf8-1.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -2,15 +2,20 @@\n // { dg-require-iconv \"ISO-8859-2\" }\n // { dg-options \"-fexec-charset=ISO-8859-2\" }\n \n+#if __cpp_char8_t\n+typedef char8_t u8_char_t;\n+#else\n+typedef char u8_char_t;\n+#endif\n+\n const char *str1 = \"h\\u00e1\\U0000010Dky \";\n const char *str2 = \"\\u010d\\u00E1rky\\n\";\n-const char *str3 = u8\"h\\u00e1\\U0000010Dky \";\n-const char *str4 = u8\"\\u010d\\u00E1rky\\n\";\n+const u8_char_t *str3 = u8\"h\\u00e1\\U0000010Dky \";\n+const u8_char_t *str4 = u8\"\\u010d\\u00E1rky\\n\";\n const char *str5 = \"h\\u00e1\\U0000010Dky \" \"\\u010d\\u00E1rky\\n\";\n-const char *str6 = u8\"h\\u00e1\\U0000010Dky \" \"\\u010d\\u00E1rky\\n\";\n-const char *str7 = \"h\\u00e1\\U0000010Dky \" u8\"\\u010d\\u00E1rky\\n\";\n-#define u8\n-const char *str8 = u8\"h\\u00e1\\U0000010Dky \" u8\"\\u010d\\u00E1rky\\n\";\n+const u8_char_t *str6 = u8\"h\\u00e1\\U0000010Dky \" \"\\u010d\\u00E1rky\\n\";\n+const u8_char_t *str7 = \"h\\u00e1\\U0000010Dky \" u8\"\\u010d\\u00E1rky\\n\";\n+const u8_char_t *str8 = u8\"h\\u00e1\\U0000010Dky \" u8\"\\u010d\\u00E1rky\\n\";\n \n const char latin2_1[] = \"\\x68\\xe1\\xe8\\x6b\\x79\\x20\";\n const char latin2_2[] = \"\\xe8\\xe1\\x72\\x6b\\x79\\n\";\n@@ -22,16 +27,16 @@ main (void)\n {\n   if (__builtin_strcmp (str1, latin2_1) != 0\n       || __builtin_strcmp (str2, latin2_2) != 0\n-      || __builtin_strcmp (str3, utf8_1) != 0\n-      || __builtin_strcmp (str4, utf8_2) != 0\n+      || __builtin_memcmp (str3, utf8_1, sizeof (utf8_1) - 1) != 0\n+      || __builtin_memcmp (str4, utf8_2, sizeof (utf8_2) - 1) != 0\n       || __builtin_strncmp (str5, latin2_1, sizeof (latin2_1) - 1) != 0\n       || __builtin_strcmp (str5 + sizeof (latin2_1) - 1, latin2_2) != 0\n-      || __builtin_strncmp (str6, utf8_1, sizeof (utf8_1) - 1) != 0\n-      || __builtin_strcmp (str6 + sizeof (utf8_1) - 1, utf8_2) != 0\n-      || __builtin_strncmp (str7, utf8_1, sizeof (utf8_1) - 1) != 0\n-      || __builtin_strcmp (str7 + sizeof (utf8_1) - 1, utf8_2) != 0\n-      || __builtin_strncmp (str8, utf8_1, sizeof (utf8_1) - 1) != 0\n-      || __builtin_strcmp (str8 + sizeof (utf8_1) - 1, utf8_2) != 0)\n+      || __builtin_memcmp (str6, utf8_1, sizeof (utf8_1) - 1) != 0\n+      || __builtin_memcmp (str6 + sizeof (utf8_1) - 1, utf8_2, sizeof (utf8_2) - 1) != 0\n+      || __builtin_memcmp (str7, utf8_1, sizeof (utf8_1) - 1) != 0\n+      || __builtin_memcmp (str7 + sizeof (utf8_1) - 1, utf8_2, sizeof (utf8_2) - 1) != 0\n+      || __builtin_memcmp (str8, utf8_1, sizeof (utf8_1) - 1) != 0\n+      || __builtin_memcmp (str8 + sizeof (utf8_1) - 1, utf8_2, sizeof (utf8_2) - 1) != 0)\n     __builtin_abort ();\n   if (sizeof (\"a\" u8\"b\"[0]) != 1\n       || sizeof (u8\"a\" \"b\"[0]) != 1"}, {"sha": "b13d55f1139ba75315a2547881f829c3c1b39ce7", "filename": "gcc/testsuite/g++.dg/ext/utf8-2.C", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf8-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf8-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf8-2.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,21 +1,27 @@\n // { dg-do compile { target c++11 } }\n // { dg-options \"\" }\n \n-const char\ts0[]\t= u8\"ab\";\n-const char16_t\ts1[]\t= u8\"ab\";\t// { dg-error \"from non-wide\" }\n-const char32_t  s2[]    = u8\"ab\";\t// { dg-error \"from non-wide\" }\n-const wchar_t   s3[]    = u8\"ab\";\t// { dg-error \"from non-wide\" }\n+#if __cpp_char8_t\n+typedef char8_t u8_char_t;\n+#else\n+typedef char u8_char_t;\n+#endif\n \n-const char      t0[0]   = u8\"ab\";\t// { dg-error \"chars is too long\" }\n-const char      t1[1]   = u8\"ab\";\t// { dg-error \"chars is too long\" }\n-const char      t2[2]   = u8\"ab\";\t// { dg-error \"chars is too long\" }\n-const char      t3[3]   = u8\"ab\";\n-const char      t4[4]   = u8\"ab\";\n+const u8_char_t\ts0[]\t= u8\"ab\";\n+const char16_t\ts1[]\t= u8\"ab\";\t// { dg-error \"from a string literal with type array of .char.\" }\n+const char32_t  s2[]    = u8\"ab\";\t// { dg-error \"from a string literal with type array of .char.\" }\n+const wchar_t   s3[]    = u8\"ab\";\t// { dg-error \"from a string literal with type array of .char.\" }\n \n-const char      u0[0]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n-const char      u1[1]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n-const char      u2[2]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n-const char      u3[3]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n-const char      u4[4]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n-const char      u5[5]   = u8\"\\u2160.\";\n-const char      u6[6]   = u8\"\\u2160.\";\n+const u8_char_t      t0[0]   = u8\"ab\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      t1[1]   = u8\"ab\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      t2[2]   = u8\"ab\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      t3[3]   = u8\"ab\";\n+const u8_char_t      t4[4]   = u8\"ab\";\n+\n+const u8_char_t      u0[0]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      u1[1]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      u2[2]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      u3[3]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      u4[4]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      u5[5]   = u8\"\\u2160.\";\n+const u8_char_t      u6[6]   = u8\"\\u2160.\";"}, {"sha": "653171b4357ce977dbf70d4ca1e00b9a0e612cd6", "filename": "gcc/testsuite/g++.dg/warn/Wformat-ranges-c++11.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-ranges-c%2B%2B11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-ranges-c%2B%2B11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-ranges-c%2B%2B11.C?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile { target c++11 } }\n+// { dg-skip-if \"char8_t\" { c++2a } }\n /* { dg-options \"-Wformat -fdiagnostics-show-caret\" } */\n \n /* C++11-specific format tests. */"}, {"sha": "bcc0227bdd81c74724a1f5bb24664d99850ee72f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -1,3 +1,10 @@\n+2019-01-14  Tom Honermann  <tom@honermann.net>\n+\n+\t* cp-demangle.c (cplus_demangle_builtin_types)\n+\t(cplus_demangle_type): Add name demangling for char8_t (Du).\n+\t* cp-demangle.h: Increase D_BUILTIN_TYPE_COUNT to accommodate the\n+\tnew char8_t type.\n+\n 2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/16615"}, {"sha": "b34b4856922349b25b8a55c094aafd8fbff84783", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -2364,9 +2364,10 @@ cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT] =\n   /* 27 */ { NL (\"decimal64\"),\tNL (\"decimal64\"),\tD_PRINT_DEFAULT },\n   /* 28 */ { NL (\"decimal128\"),\tNL (\"decimal128\"),\tD_PRINT_DEFAULT },\n   /* 29 */ { NL (\"half\"),\tNL (\"half\"),\t\tD_PRINT_FLOAT },\n-  /* 30 */ { NL (\"char16_t\"),\tNL (\"char16_t\"),\tD_PRINT_DEFAULT },\n-  /* 31 */ { NL (\"char32_t\"),\tNL (\"char32_t\"),\tD_PRINT_DEFAULT },\n-  /* 32 */ { NL (\"decltype(nullptr)\"),\tNL (\"decltype(nullptr)\"),\n+  /* 30 */ { NL (\"char8_t\"),\tNL (\"char8_t\"),\t\tD_PRINT_DEFAULT },\n+  /* 31 */ { NL (\"char16_t\"),\tNL (\"char16_t\"),\tD_PRINT_DEFAULT },\n+  /* 32 */ { NL (\"char32_t\"),\tNL (\"char32_t\"),\tD_PRINT_DEFAULT },\n+  /* 33 */ { NL (\"decltype(nullptr)\"),\tNL (\"decltype(nullptr)\"),\n \t     D_PRINT_DEFAULT },\n };\n \n@@ -2654,14 +2655,19 @@ cplus_demangle_type (struct d_info *di)\n \t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[29]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n+\tcase 'u':\n+\t  /* char8_t */\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[30]);\n+\t  di->expansion += ret->u.s_builtin.type->len;\n+\t  break;\n \tcase 's':\n \t  /* char16_t */\n-\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[30]);\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[31]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n \tcase 'i':\n \t  /* char32_t */\n-\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[31]);\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[32]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n \n@@ -2687,7 +2693,7 @@ cplus_demangle_type (struct d_info *di)\n \n         case 'n':\n           /* decltype(nullptr) */\n-\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[32]);\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[33]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n "}, {"sha": "92191cf3ea8a45a52f4d63943795b825963ce1aa", "filename": "libiberty/cp-demangle.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d91f79dc990f81dcea89a5087cad566238b2456/libiberty%2Fcp-demangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d91f79dc990f81dcea89a5087cad566238b2456/libiberty%2Fcp-demangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.h?ref=2d91f79dc990f81dcea89a5087cad566238b2456", "patch": "@@ -176,7 +176,7 @@ d_advance (struct d_info *di, int i)\n extern const struct demangle_operator_info cplus_demangle_operators[];\n #endif\n \n-#define D_BUILTIN_TYPE_COUNT (33)\n+#define D_BUILTIN_TYPE_COUNT (34)\n \n CP_STATIC_IF_GLIBCPP_V3\n const struct demangle_builtin_type_info"}]}