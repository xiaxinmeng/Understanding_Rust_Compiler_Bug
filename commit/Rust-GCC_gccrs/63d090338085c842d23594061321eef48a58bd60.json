{"sha": "63d090338085c842d23594061321eef48a58bd60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkMDkwMzM4MDg1Yzg0MmQyMzU5NDA2MTMyMWVlZjQ4YTU4YmQ2MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-14T19:39:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-14T19:39:17Z"}, "message": "re PR target/79481 (AVX512PF: unmasked gather prefetch intrinsics missing)\n\n\tPR target/79481\n\t* config/i386/avx512pfintrin.h (_mm512_prefetch_i32gather_pd,\n\t_mm512_prefetch_i32gather_ps, _mm512_prefetch_i64gather_pd,\n\t_mm512_prefetch_i64gather_ps): New inline functions and macros.\n\n\t* gcc.target/i386/sse-14.c (test_2vx): Add void return type.\n\t(test_3vx): Change return type from int to void. \n\t(_mm512_prefetch_i32gather_ps, _mm512_prefetch_i32scatter_ps,\n\t_mm512_prefetch_i64gather_ps, _mm512_prefetch_i64scatter_ps,\n\t_mm512_prefetch_i32gather_pd, _mm512_prefetch_i32scatter_pd,\n\t_mm512_prefetch_i64gather_pd, _mm512_prefetch_i64scatter_pd): New\n\ttests.\n\t* gcc.target/i386/sse-22.c (test_2vx): Add void return type.\n\t(test_3vx): Change return type from int to void.\n\t(_mm512_prefetch_i32gather_ps, _mm512_prefetch_i32scatter_ps,\n\t_mm512_prefetch_i64gather_ps, _mm512_prefetch_i64scatter_ps,\n\t_mm512_prefetch_i32gather_pd, _mm512_prefetch_i32scatter_pd,\n\t_mm512_prefetch_i64gather_pd, _mm512_prefetch_i64scatter_pd): New\n\ttests.\n\t* gcc.target/i386/avx512pf-vgatherpf0dpd-1.c: Add non-masked\n\tintrinsic.  Change scan-assembler-times number from 1 to 2.\n\t* gcc.target/i386/avx512pf-vgatherpf0dps-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vgatherpf0qpd-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vgatherpf0qps-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vgatherpf1dpd-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vgatherpf1dps-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vgatherpf1qpd-1.c: Likewise.\n\t* gcc.target/i386/avx512pf-vgatherpf1qps-1.c: Likewise.\n\nFrom-SVN: r245444", "tree": {"sha": "92751f65cd06f05bf866568b7ceb3399e07a5950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92751f65cd06f05bf866568b7ceb3399e07a5950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d090338085c842d23594061321eef48a58bd60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d090338085c842d23594061321eef48a58bd60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d090338085c842d23594061321eef48a58bd60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d090338085c842d23594061321eef48a58bd60/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8668fae0b767cb6a1eaa688ca0dda3814d66db1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8668fae0b767cb6a1eaa688ca0dda3814d66db1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8668fae0b767cb6a1eaa688ca0dda3814d66db1b"}], "stats": {"total": 135, "additions": 122, "deletions": 13}, "files": [{"sha": "9ed8713210b0e6013fb17dda7935f11f7d0a1ece", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,3 +1,10 @@\n+2017-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/79481\n+\t* config/i386/avx512pfintrin.h (_mm512_prefetch_i32gather_pd,\n+\t_mm512_prefetch_i32gather_ps, _mm512_prefetch_i64gather_pd,\n+\t_mm512_prefetch_i64gather_ps): New inline functions and macros.\n+\n 2017-02-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/79495"}, {"sha": "a727adc77bbcc0cf1861bf7ecea154a31b2d7bf6", "filename": "gcc/config/i386/avx512pfintrin.h", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -46,6 +46,24 @@ typedef unsigned char  __mmask8;\n typedef unsigned short __mmask16;\n \n #ifdef __OPTIMIZE__\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i32gather_pd (__m256i __index, void const *__addr,\n+\t\t\t      int __scale, int __hint)\n+{\n+  __builtin_ia32_gatherpfdpd ((__mmask8) 0xFF, (__v8si) __index, __addr,\n+\t\t\t      __scale, __hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i32gather_ps (__m512i __index, void const *__addr,\n+\t\t\t      int __scale, int __hint)\n+{\n+  __builtin_ia32_gatherpfdps ((__mmask16) 0xFFFF, (__v16si) __index, __addr,\n+\t\t\t      __scale, __hint);\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i32gather_pd (__m256i __index, __mmask8 __mask,\n@@ -64,6 +82,24 @@ _mm512_mask_prefetch_i32gather_ps (__m512i __index, __mmask16 __mask,\n \t\t\t      __hint);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i64gather_pd (__m512i __index, void const *__addr,\n+\t\t\t      int __scale, int __hint)\n+{\n+  __builtin_ia32_gatherpfqpd ((__mmask8) 0xFF, (__v8di) __index, __addr,\n+\t\t\t      __scale, __hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i64gather_ps (__m512i __index, void const *__addr,\n+\t\t\t      int __scale, int __hint)\n+{\n+  __builtin_ia32_gatherpfqps ((__mmask8) 0xFF, (__v8di) __index, __addr,\n+\t\t\t      __scale, __hint);\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i64gather_pd (__m512i __index, __mmask8 __mask,\n@@ -155,6 +191,14 @@ _mm512_mask_prefetch_i64scatter_ps (void *__addr, __mmask16 __mask,\n }\n \n #else\n+#define _mm512_prefetch_i32gather_pd(INDEX, ADDR, SCALE, HINT)\t\t     \\\n+  __builtin_ia32_gatherpfdpd ((__mmask8)0xFF, (__v8si)(__m256i)INDEX,\t     \\\n+\t\t\t      (void const *)ADDR, (int)SCALE, (int)HINT)\n+\n+#define _mm512_prefetch_i32gather_ps(INDEX, ADDR, SCALE, HINT)\t\t     \\\n+  __builtin_ia32_gatherpfdps ((__mmask16)0xFFFF, (__v16si)(__m512i)INDEX,    \\\n+\t\t\t      (void const *)ADDR, (int)SCALE, (int)HINT)\n+\n #define _mm512_mask_prefetch_i32gather_pd(INDEX, MASK, ADDR, SCALE, HINT)    \\\n   __builtin_ia32_gatherpfdpd ((__mmask8)MASK, (__v8si)(__m256i)INDEX,\t     \\\n \t\t\t      (void const *)ADDR, (int)SCALE, (int)HINT)\n@@ -163,6 +207,14 @@ _mm512_mask_prefetch_i64scatter_ps (void *__addr, __mmask16 __mask,\n   __builtin_ia32_gatherpfdps ((__mmask16)MASK, (__v16si)(__m512i)INDEX,      \\\n \t\t\t      (void const *)ADDR, (int)SCALE, (int)HINT)\n \n+#define _mm512_prefetch_i64gather_pd(INDEX, ADDR, SCALE, HINT)\t\t     \\\n+  __builtin_ia32_gatherpfqpd ((__mmask8)0xFF, (__v8di)(__m512i)INDEX,\t     \\\n+\t\t\t      (void *)ADDR, (int)SCALE, (int)HINT)\n+\n+#define _mm512_prefetch_i64gather_ps(INDEX, ADDR, SCALE, HINT)\t\t     \\\n+  __builtin_ia32_gatherpfqps ((__mmask8)0xFF, (__v8di)(__m512i)INDEX,\t     \\\n+\t\t\t      (void *)ADDR, (int)SCALE, (int)HINT)\n+\n #define _mm512_mask_prefetch_i64gather_pd(INDEX, MASK, ADDR, SCALE, HINT)    \\\n   __builtin_ia32_gatherpfqpd ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n \t\t\t      (void *)ADDR, (int)SCALE, (int)HINT)"}, {"sha": "8adb64f75ed0e208c2a9ecb9e71c2b91d4693f37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,3 +1,30 @@\n+2017-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/79481\n+\t* gcc.target/i386/sse-14.c (test_2vx): Add void return type.\n+\t(test_3vx): Change return type from int to void. \n+\t(_mm512_prefetch_i32gather_ps, _mm512_prefetch_i32scatter_ps,\n+\t_mm512_prefetch_i64gather_ps, _mm512_prefetch_i64scatter_ps,\n+\t_mm512_prefetch_i32gather_pd, _mm512_prefetch_i32scatter_pd,\n+\t_mm512_prefetch_i64gather_pd, _mm512_prefetch_i64scatter_pd): New\n+\ttests.\n+\t* gcc.target/i386/sse-22.c (test_2vx): Add void return type.\n+\t(test_3vx): Change return type from int to void.\n+\t(_mm512_prefetch_i32gather_ps, _mm512_prefetch_i32scatter_ps,\n+\t_mm512_prefetch_i64gather_ps, _mm512_prefetch_i64scatter_ps,\n+\t_mm512_prefetch_i32gather_pd, _mm512_prefetch_i32scatter_pd,\n+\t_mm512_prefetch_i64gather_pd, _mm512_prefetch_i64scatter_pd): New\n+\ttests.\n+\t* gcc.target/i386/avx512pf-vgatherpf0dpd-1.c: Add non-masked\n+\tintrinsic.  Change scan-assembler-times number from 1 to 2.\n+\t* gcc.target/i386/avx512pf-vgatherpf0dps-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vgatherpf0qpd-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vgatherpf0qps-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vgatherpf1dpd-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vgatherpf1dps-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vgatherpf1qpd-1.c: Likewise.\n+\t* gcc.target/i386/avx512pf-vgatherpf1qps-1.c: Likewise.\n+\n 2017-02-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/61225"}, {"sha": "0c6fc4363f06aecd5afeefee4d43a9f439601e44", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0dpd-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dpd-1.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vgatherpf0dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgatherpf0dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -11,5 +11,6 @@ void *base;\n void extern\n avx512pf_test (void)\n {\n+  _mm512_prefetch_i32gather_pd (idx, base, 8, _MM_HINT_T0);\n   _mm512_mask_prefetch_i32gather_pd (idx, m8, base, 8, _MM_HINT_T0);\n }"}, {"sha": "0953769697ed832e751e80a126366f6ede3648e1", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0dps-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dps-1.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vgatherpf0dps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgatherpf0dps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -11,5 +11,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n+  _mm512_prefetch_i32gather_ps (idx, base, 8, _MM_HINT_T0);\n   _mm512_mask_prefetch_i32gather_ps (idx, m16, base, 8, _MM_HINT_T0);\n }"}, {"sha": "1fb853431cadd63ba29e6114bee791de60bcca07", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0qpd-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qpd-1.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vgatherpf0qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgatherpf0qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -11,5 +11,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n+  _mm512_prefetch_i64gather_pd (idx, base, 8, _MM_HINT_T0);\n   _mm512_mask_prefetch_i64gather_pd (idx, m8, base, 8, _MM_HINT_T0);\n }"}, {"sha": "7ccba277b2a4101236a6918a6dad02e144d41c16", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0qps-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qps-1.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vgatherpf0qps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgatherpf0qps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -11,5 +11,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n+  _mm512_prefetch_i64gather_ps (idx, base, 8, _MM_HINT_T0);\n   _mm512_mask_prefetch_i64gather_ps (idx, m8, base, 8, _MM_HINT_T0);\n }"}, {"sha": "5dffec17fbfdab5877e316951eadf5bdb8b6677f", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1dpd-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dpd-1.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vgatherpf1dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgatherpf1dpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -11,5 +11,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n+  _mm512_prefetch_i32gather_pd (idx, base, 8, _MM_HINT_T1);\n   _mm512_mask_prefetch_i32gather_pd (idx, m8, base, 8, _MM_HINT_T1);\n }"}, {"sha": "0ffbc9cfbd9e6e79279f185e5019564cfa45f9df", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1dps-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dps-1.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vgatherpf1dps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgatherpf1dps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -11,5 +11,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n+  _mm512_prefetch_i32gather_ps (idx, base, 8, _MM_HINT_T1);\n   _mm512_mask_prefetch_i32gather_ps (idx, m16, base, 8, _MM_HINT_T1);\n }"}, {"sha": "22450fff7d4d9558c144805c54deb9aa65733a05", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1qpd-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qpd-1.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vgatherpf1qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgatherpf1qpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -11,5 +11,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n+  _mm512_prefetch_i64gather_pd (idx, base, 8, _MM_HINT_T1);\n   _mm512_mask_prefetch_i64gather_pd (idx, m8, base, 8, _MM_HINT_T1);\n }"}, {"sha": "ddc4eacce3fe8cee97808534883f60b2cfe8ae22", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1qps-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qps-1.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512pf -O2\" } */\n-/* { dg-final { scan-assembler-times \"vgatherpf1qps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgatherpf1qps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -11,5 +11,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n+  _mm512_prefetch_i64gather_ps (idx, base, 8, _MM_HINT_T1);\n   _mm512_mask_prefetch_i64gather_ps (idx, m8, base, 8, _MM_HINT_T1);\n }"}, {"sha": "6df6abc9af17bdd472ccb26ace46a52ed03c594e", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -50,7 +50,7 @@\n   { return func (A, B, imm1, imm2, imm3); }\n \n #define test_2vx(func, op1_type, op2_type, imm1, imm2)     \\\n-  _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n+  void _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n   { func (A, B, imm1, imm2); }\n \n #define test_3(func, type, op1_type, op2_type, op3_type, imm)\t\t\\\n@@ -74,7 +74,7 @@\n   { func (A, B, C, imm); }\n \n #define test_3vx(func, op1_type, op2_type, op3_type, imm1, imm2)   \\\n-  int _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t   \\\n+  void _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t   \\\n \t\t       op3_type C, int const I, int const L)       \\\n   { func (A, B, C, imm1, imm2); }\n \n@@ -520,6 +520,14 @@ test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m12\n test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 8)\n \n /* avx512pfintrin.h */\n+test_2vx (_mm512_prefetch_i32gather_ps, __m512i, void const *, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i32scatter_ps, void const *, __m512i, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i64gather_ps, __m512i, void const *, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i64scatter_ps, void const *, __m512i, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i32gather_pd, __m256i, void const *, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i32scatter_pd, void const *, __m256i, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i64gather_pd, __m512i, void const *, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i64scatter_pd, void const *, __m512i, 1, _MM_HINT_T0)\n test_3vx (_mm512_mask_prefetch_i32gather_ps, __m512i, __mmask16, void const *, 1, _MM_HINT_T0)\n test_3vx (_mm512_mask_prefetch_i32scatter_ps, void const *, __mmask16, __m512i, 1, _MM_HINT_T0)\n test_3vx (_mm512_mask_prefetch_i64gather_ps, __m512i, __mmask8, void const *, 1, _MM_HINT_T0)"}, {"sha": "acc06a4a5e5b4450bc9679eb56343fb847edad36", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d090338085c842d23594061321eef48a58bd60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=63d090338085c842d23594061321eef48a58bd60", "patch": "@@ -50,7 +50,7 @@\n   { return func (A, B, imm1, imm2, imm3); }\n \n #define test_2vx(func, op1_type, op2_type, imm1, imm2)     \\\n-  _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n+  void _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n   { func (A, B, imm1, imm2); }\n \n #define test_3(func, type, op1_type, op2_type, op3_type, imm)\t\t\\\n@@ -74,7 +74,7 @@\n   { func (A, B, C, imm); }\n \n #define test_3vx(func, op1_type, op2_type, op3_type, imm1, imm2)   \\\n-  int _CONCAT(_,func) (op1_type A, op2_type B,             \t   \\\n+  void _CONCAT(_,func) (op1_type A, op2_type B,             \t   \\\n \t\t       op3_type C, int const I, int const L)       \\\n   { func (A, B, C, imm1, imm2); }\n \n@@ -647,11 +647,18 @@ test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m12\n test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 8)\n \n /* avx512pfintrin.h */\n+test_2vx (_mm512_prefetch_i32gather_ps, __m512i, void const *, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i32scatter_ps, void const *, __m512i, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i64gather_ps, __m512i, void const *, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i64scatter_ps, void const *, __m512i, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i32gather_pd, __m256i, void const *, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i32scatter_pd, void const *, __m256i, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i64gather_pd, __m512i, long long *, 1, _MM_HINT_T0)\n+test_2vx (_mm512_prefetch_i64scatter_pd, void const *, __m512i, 1, _MM_HINT_T0)\n test_3vx (_mm512_mask_prefetch_i32gather_ps, __m512i, __mmask16, void const *, 1, _MM_HINT_T0)\n test_3vx (_mm512_mask_prefetch_i32scatter_ps, void const *, __mmask16, __m512i, 1, _MM_HINT_T0)\n test_3vx (_mm512_mask_prefetch_i64gather_ps, __m512i, __mmask8, void const *, 1, _MM_HINT_T0)\n test_3vx (_mm512_mask_prefetch_i64scatter_ps, void const *, __mmask8, __m512i, 1, _MM_HINT_T0)\n-\n test_3vx (_mm512_mask_prefetch_i32gather_pd, __m256i, __mmask8, void const *, 1, _MM_HINT_T0)\n test_3vx (_mm512_mask_prefetch_i32scatter_pd, void const *, __mmask8, __m256i, 1, _MM_HINT_T0)\n test_3vx (_mm512_mask_prefetch_i64gather_pd, __m512i, __mmask8, long long *, 1, _MM_HINT_T0)"}]}