{"sha": "656d1fba78c6a743d8d65a1383400a756dfd9222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU2ZDFmYmE3OGM2YTc0M2Q4ZDY1YTEzODM0MDBhNzU2ZGZkOTIyMg==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2018-05-30T08:58:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:58:33Z"}, "message": "[Ada] Implement pragma Max_Entry_Queue_Depth\n\nThis patch implements AI12-0164-1 for the aspect/pragma Max_Entry_Queue_Depth.\nPreviously, the GNAT specific pragma Max_Queue_Length fulfilled this role, but\nwas not named to match the standard and thus was insufficent.\n\n------------\n-- Source --\n------------\n\n--  pass.ads\n\nwith System;\npackage Pass is\n\n   SOMETHING : constant Integer := 5;\n   Variable : Boolean := False;\n\n   protected type Protected_Example is\n\n      entry A (Item : Integer)\n         with Max_Entry_Queue_Depth => 2;            --  OK\n\n      entry B (Item : Integer);\n      pragma Max_Entry_Queue_Depth (SOMETHING);      --  OK\n\n      entry C (Item : Integer);                      --  OK\n\n      entry D (Item : Integer)\n         with Max_Entry_Queue_Depth => 4;            --  OK\n\n      entry D (Item : Integer; Item_B : Integer)\n         with Max_Entry_Queue_Depth => Float'Digits; --  OK\n\n      entry E (Item : Integer);\n      pragma Max_Entry_Queue_Depth (SOMETHING * 2);  --  OK\n\n      entry E (Item : Integer; Item_B : Integer);\n      pragma Max_Entry_Queue_Depth (11);             --  OK\n\n      entry F (Item : Integer; Item_B : Integer);\n      pragma Pre (Variable = True);\n      pragma Max_Entry_Queue_Depth (11);             --  OK\n\n      entry G (Item : Integer; Item_B : Integer)\n         with Pre => (Variable = True),\n              Max_Entry_Queue_Depth => 11;           --  OK\n\n   private\n      Data : Boolean := True;\n   end Protected_Example;\n\n   Prot_Ex  : Protected_Example;\n\nend Pass;\n\n--  fail.ads\n\npackage Fail is\n\n   --  Not near entry\n\n   pragma Max_Entry_Queue_Depth (40);                                --  ERROR\n\n   --  Task type\n\n   task type Task_Example is\n\n      entry Insert (Item : in Integer)\n         with Max_Entry_Queue_Depth => 10;                           --  ERROR\n\n      -- Entry family in task type\n\n      entry A (Positive) (Item : in Integer)\n         with Max_Entry_Queue_Depth => 10;                           --  ERROR\n\n   end Task_Example;\n\n   Task_Ex : Task_Example;\n\n   --  Aspect applied to protected type\n\n   protected type Protected_Failure_0\n      with Max_Entry_Queue_Depth => 50 is                            --  ERROR\n\n      entry A (Item : Integer);\n   private\n      Data : Integer := 0;\n   end Protected_Failure_0;\n\n   Protected_Failure_0_Ex : Protected_Failure_0;\n\n   protected type Protected_Failure is\n      pragma Max_Entry_Queue_Depth (10);                             --  ERROR\n\n      --  Duplicates\n\n      entry A (Item : Integer)\n         with Max_Entry_Queue_Depth => 10;                           --  OK\n      pragma Max_Entry_Queue_Depth (4);                              --  ERROR\n\n      entry B (Item : Integer);\n      pragma Max_Entry_Queue_Depth (40);                             --  OK\n      pragma Max_Entry_Queue_Depth (4);                              --  ERROR\n\n      entry C (Item : Integer)\n         with Max_Entry_Queue_Depth => 10,                           --  OK\n              Max_Entry_Queue_Depth => 40;                           --  ERROR\n\n      -- Duplicates with the same value\n\n      entry AA (Item : Integer)\n         with Max_Entry_Queue_Depth => 10;                           --  OK\n      pragma Max_Entry_Queue_Depth (10);                             --  ERROR\n\n      entry BB (Item : Integer);\n      pragma Max_Entry_Queue_Depth (40);                             --  OK\n      pragma Max_Entry_Queue_Depth (40);                             --  ERROR\n\n      entry CC (Item : Integer)\n         with Max_Entry_Queue_Depth => 10,                           --  OK\n              Max_Entry_Queue_Depth => 10;                           --  ERROR\n\n      --  On subprogram\n\n      procedure D (Item : Integer)\n         with Max_Entry_Queue_Depth => 10;                           --  ERROR\n\n      procedure E (Item : Integer);\n      pragma Max_Entry_Queue_Depth (4);                              --  ERROR\n\n      function F (Item : Integer) return Integer\n         with Max_Entry_Queue_Depth => 10;                           --  ERROR\n\n      function G (Item : Integer) return Integer;\n      pragma Max_Entry_Queue_Depth (4);                              --  ERROR\n\n      --  Bad parameters\n\n      entry H (Item : Integer)\n         with Max_Entry_Queue_Depth => 0;                            --  ERROR\n\n      entry I (Item : Integer)\n         with Max_Entry_Queue_Depth => -1;                           --  ERROR\n\n      entry J (Item : Integer)\n         with Max_Entry_Queue_Depth => 16#FFFF_FFFF_FFFF_FFFF_FFFF#; --  ERROR\n\n      entry K (Item : Integer)\n         with Max_Entry_Queue_Depth => False;                        --  ERROR\n\n      entry L (Item : Integer)\n         with Max_Entry_Queue_Depth => \"JUNK\";                       --  ERROR\n\n      entry M (Item : Integer)\n         with Max_Entry_Queue_Depth => 1.0;                          --  ERROR\n\n      entry N (Item : Integer)\n         with Max_Entry_Queue_Depth => Long_Integer'(3);             --  ERROR\n\n      -- Entry family\n\n      entry O (Boolean) (Item : Integer)\n         with Max_Entry_Queue_Depth => 5;                            --  ERROR\n\n   private\n      Data : Integer := 0;\n   end Protected_Failure;\n\n   I : Positive := 1;\n\n   Protected_Failure_Ex : Protected_Failure;\n\nend Fail;\n\n--  dtest.adb\n\nwith Ada.Text_IO; use Ada.Text_IO;\n\nprocedure Dtest is\n   protected Prot is\n      entry Wait;\n        pragma Max_Entry_Queue_Depth (2);\n      procedure Wakeup;\n   private\n      Barrier : Boolean := False;\n   end Prot;\n\n   protected body Prot is\n      entry Wait when Barrier is\n      begin\n         null;\n      end Wait;\n\n      procedure Wakeup is\n      begin\n         Barrier := True;\n      end Wakeup;\n   end Prot;\n\n   task type T;\n\n   task body T is\n   begin\n      Put_Line (\"Waiting...\");\n      Prot.Wait;\n   exception\n      when others =>\n         Put_Line (\"Got exception\");\n   end T;\n\n   T1, T2 : T;\nbegin\n   delay 0.1;\n\n   Prot.Wait;\n   Put_Line (\"Done\");\nexception\n   when others =>\n      Put_Line (\"Main got exception\");\n      Prot.Wakeup;\nend Dtest;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n& gcc -c -g -gnatDG pass.ads\n& gcc -c -g fail.ads\n& grep -c \"(2, 5, 0, 4, 6, 10, 11, 11, 11)\" pass.ads.dg\n& gnatmake -g -q dtest\nfail.ads:5:04: pragma \"Max_Queue_Length\" must apply to a protected entry\nfail.ads:12:15: aspect \"Max_Queue_Length\" cannot apply to task entries\nfail.ads:17:15: aspect \"Max_Queue_Length\" cannot apply to task entries\nfail.ads:26:12: aspect \"Max_Queue_Length\" must apply to a protected entry\nfail.ads:36:07: pragma \"Max_Queue_Length\" must apply to a protected entry\nfail.ads:42:07: pragma \"Max_Queue_Length\" duplicates aspect declared at line 41\nfail.ads:46:07: pragma \"Max_Queue_Length\" duplicates pragma declared at line 45\nfail.ads:50:15: aspect \"Max_Queue_Length\" for \"C\" previously given at line 49\nfail.ads:56:07: pragma \"Max_Queue_Length\" duplicates aspect declared at line 55\nfail.ads:60:07: pragma \"Max_Queue_Length\" duplicates pragma declared at line 59\nfail.ads:64:15: aspect \"Max_Queue_Length\" for \"CC\" previously given at line 63\nfail.ads:69:15: aspect \"Max_Queue_Length\" must apply to a protected entry\nfail.ads:72:07: pragma \"Max_Queue_Length\" must apply to a protected entry\nfail.ads:75:15: aspect \"Max_Queue_Length\" must apply to a protected entry\nfail.ads:78:07: pragma \"Max_Queue_Length\" must apply to a protected entry\nfail.ads:83:35: entity for aspect \"Max_Queue_Length\" must be positive\nfail.ads:86:35: entity for aspect \"Max_Queue_Length\" must be positive\nfail.ads:89:35: entity for aspect \"Max_Queue_Length\" out of range of Integer\nfail.ads:92:35: expected an integer type\nfail.ads:92:35: found type \"Standard.Boolean\"\nfail.ads:95:35: expected an integer type\nfail.ads:95:35: found a string type\nfail.ads:98:35: expected an integer type\nfail.ads:98:35: found type universal real\n\n2018-05-30  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* aspects.adb, aspects.ads: Register new aspect.\n\t* par-prag.adb (Prag): Register new pragma.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add processing for new\n\taspect similar to Aspect_Max_Queue_Length.\n\t* sem_prag.adb, sem_prag.ads (Analyze_Pragma): Register new pragma and\n\tset it to use the same processing as Pragma_Max_Queue_Length.\n\t* snames.ads-tmpl: Move definition of Name_Max_Entry_Queue_Depth so\n\tthat it can be processed as a pragma in addition to a restriction and\n\tadd an entry for the pragma itself.\n\nFrom-SVN: r260945", "tree": {"sha": "3d1863c078175c1f4666caabf329b4a3576da781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d1863c078175c1f4666caabf329b4a3576da781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/656d1fba78c6a743d8d65a1383400a756dfd9222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/656d1fba78c6a743d8d65a1383400a756dfd9222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/656d1fba78c6a743d8d65a1383400a756dfd9222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/656d1fba78c6a743d8d65a1383400a756dfd9222/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7db3f4f65563632493aa82c1cf12c7ed3f89eff"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "b839b7a7fabcc19225ea7dea06787bf6e469afd8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=656d1fba78c6a743d8d65a1383400a756dfd9222", "patch": "@@ -1,3 +1,15 @@\n+2018-05-30  Justin Squirek  <squirek@adacore.com>\n+\n+\t* aspects.adb, aspects.ads: Register new aspect.\n+\t* par-prag.adb (Prag): Register new pragma.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add processing for new\n+\taspect similar to Aspect_Max_Queue_Length.\n+\t* sem_prag.adb, sem_prag.ads (Analyze_Pragma): Register new pragma and\n+\tset it to use the same processing as Pragma_Max_Queue_Length.\n+\t* snames.ads-tmpl: Move definition of Name_Max_Entry_Queue_Depth so\n+\tthat it can be processed as a pragma in addition to a restriction and\n+\tadd an entry for the pragma itself.\n+\n 2018-05-30  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb (Freeze_Object_Declaration): A pragma Thread_Local_Storage"}, {"sha": "61744cd013f2dc2349e4d08bc84f14996b966377", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=656d1fba78c6a743d8d65a1383400a756dfd9222", "patch": "@@ -568,6 +568,7 @@ package body Aspects is\n     Aspect_Linker_Section               => Aspect_Linker_Section,\n     Aspect_Lock_Free                    => Aspect_Lock_Free,\n     Aspect_Machine_Radix                => Aspect_Machine_Radix,\n+    Aspect_Max_Entry_Queue_Depth        => Aspect_Max_Entry_Queue_Depth,\n     Aspect_Max_Queue_Length             => Aspect_Max_Queue_Length,\n     Aspect_No_Elaboration_Code_All      => Aspect_No_Elaboration_Code_All,\n     Aspect_No_Inline                    => Aspect_No_Inline,"}, {"sha": "30380209ad0bd4c9e67b30136ae529b138bda8f6", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=656d1fba78c6a743d8d65a1383400a756dfd9222", "patch": "@@ -116,6 +116,7 @@ package Aspects is\n       Aspect_Link_Name,\n       Aspect_Linker_Section,                -- GNAT\n       Aspect_Machine_Radix,\n+      Aspect_Max_Entry_Queue_Depth,\n       Aspect_Max_Queue_Length,              -- GNAT\n       Aspect_Object_Size,                   -- GNAT\n       Aspect_Obsolescent,                   -- GNAT\n@@ -250,6 +251,7 @@ package Aspects is\n       Aspect_Inline_Always              => True,\n       Aspect_Invariant                  => True,\n       Aspect_Lock_Free                  => True,\n+      Aspect_Max_Entry_Queue_Depth      => True,\n       Aspect_Max_Queue_Length           => True,\n       Aspect_Object_Size                => True,\n       Aspect_Persistent_BSS             => True,\n@@ -358,6 +360,7 @@ package Aspects is\n       Aspect_Link_Name                  => Expression,\n       Aspect_Linker_Section             => Expression,\n       Aspect_Machine_Radix              => Expression,\n+      Aspect_Max_Entry_Queue_Depth      => Expression,\n       Aspect_Max_Queue_Length           => Expression,\n       Aspect_Object_Size                => Expression,\n       Aspect_Obsolescent                => Optional_Expression,\n@@ -467,6 +470,7 @@ package Aspects is\n       Aspect_Linker_Section               => Name_Linker_Section,\n       Aspect_Lock_Free                    => Name_Lock_Free,\n       Aspect_Machine_Radix                => Name_Machine_Radix,\n+      Aspect_Max_Entry_Queue_Depth        => Name_Max_Entry_Queue_Depth,\n       Aspect_Max_Queue_Length             => Name_Max_Queue_Length,\n       Aspect_No_Elaboration_Code_All      => Name_No_Elaboration_Code_All,\n       Aspect_No_Inline                    => Name_No_Inline,\n@@ -743,6 +747,7 @@ package Aspects is\n       Aspect_Import                       => Never_Delay,\n       Aspect_Initial_Condition            => Never_Delay,\n       Aspect_Initializes                  => Never_Delay,\n+      Aspect_Max_Entry_Queue_Depth        => Never_Delay,\n       Aspect_Max_Queue_Length             => Never_Delay,\n       Aspect_No_Elaboration_Code_All      => Never_Delay,\n       Aspect_No_Tagged_Streams            => Never_Delay,"}, {"sha": "8bd091f18453b23ca903abb0df343a356fcf6f0b", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=656d1fba78c6a743d8d65a1383400a756dfd9222", "patch": "@@ -1410,6 +1410,7 @@ begin\n          | Pragma_Machine_Attribute\n          | Pragma_Main\n          | Pragma_Main_Storage\n+         | Pragma_Max_Entry_Queue_Depth\n          | Pragma_Max_Queue_Length\n          | Pragma_Memory_Size\n          | Pragma_No_Body"}, {"sha": "145f637d870f068ff2b73f0511545fcf38a670df", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=656d1fba78c6a743d8d65a1383400a756dfd9222", "patch": "@@ -3013,6 +3013,19 @@ package body Sem_Ch13 is\n                   goto Continue;\n                end Initializes;\n \n+               --  Max_Entry_Queue_Depth\n+\n+               when Aspect_Max_Entry_Queue_Depth =>\n+                  Make_Aitem_Pragma\n+                    (Pragma_Argument_Associations => New_List (\n+                       Make_Pragma_Argument_Association (Loc,\n+                         Expression => Relocate_Node (Expr))),\n+                     Pragma_Name => Name_Max_Entry_Queue_Depth);\n+\n+                  Decorate (Aspect, Aitem);\n+                  Insert_Pragma (Aitem);\n+                  goto Continue;\n+\n                --  Max_Queue_Length\n \n                when Aspect_Max_Queue_Length =>\n@@ -9507,6 +9520,7 @@ package body Sem_Ch13 is\n             | Aspect_Implicit_Dereference\n             | Aspect_Initial_Condition\n             | Aspect_Initializes\n+            | Aspect_Max_Entry_Queue_Depth\n             | Aspect_Max_Queue_Length\n             | Aspect_Obsolescent\n             | Aspect_Part_Of"}, {"sha": "abab195626bd816d54e9e081fee59f24fc533af7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=656d1fba78c6a743d8d65a1383400a756dfd9222", "patch": "@@ -18759,14 +18759,22 @@ package body Sem_Prag is\n \n          --  pragma Max_Queue_Length (static_integer_EXPRESSION);\n \n-         when Pragma_Max_Queue_Length => Max_Queue_Length : declare\n+         --  This processing is shared by Pragma_Max_Entry_Queue_Depth\n+\n+         when Pragma_Max_Queue_Length\n+            | Pragma_Max_Entry_Queue_Depth\n+         =>\n+         Max_Queue_Length : declare\n             Arg        : Node_Id;\n             Entry_Decl : Node_Id;\n             Entry_Id   : Entity_Id;\n             Val        : Uint;\n \n          begin\n-            GNAT_Pragma;\n+            if Prag_Id = Pragma_Max_Queue_Length then\n+               GNAT_Pragma;\n+            end if;\n+\n             Check_Arg_Count (1);\n \n             Entry_Decl :=\n@@ -30174,6 +30182,7 @@ package body Sem_Prag is\n       Pragma_Machine_Attribute              => -1,\n       Pragma_Main                           => -1,\n       Pragma_Main_Storage                   => -1,\n+      Pragma_Max_Entry_Queue_Depth          =>  0,\n       Pragma_Max_Queue_Length               =>  0,\n       Pragma_Memory_Size                    =>  0,\n       Pragma_No_Return                      =>  0,"}, {"sha": "7e0614241542573345a9eba8175803130fbbed76", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=656d1fba78c6a743d8d65a1383400a756dfd9222", "patch": "@@ -397,6 +397,7 @@ package Sem_Prag is\n    --    Extensions_Visible\n    --    Global\n    --    Initializes\n+   --    Max_Entry_Queue_Depth\n    --    Max_Queue_Length\n    --    Post\n    --    Post_Class"}, {"sha": "baa4101fc2951f7ed36a85df741e07aed3487641", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656d1fba78c6a743d8d65a1383400a756dfd9222/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=656d1fba78c6a743d8d65a1383400a756dfd9222", "patch": "@@ -588,6 +588,7 @@ package Snames is\n    Name_Machine_Attribute              : constant Name_Id := N + $; -- GNAT\n    Name_Main                           : constant Name_Id := N + $; -- GNAT\n    Name_Main_Storage                   : constant Name_Id := N + $; -- GNAT\n+   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + $; -- Ada 12\n    Name_Max_Queue_Length               : constant Name_Id := N + $; -- GNAT\n    Name_Memory_Size                    : constant Name_Id := N + $; -- Ada 83\n    Name_No_Body                        : constant Name_Id := N + $; -- GNAT\n@@ -776,7 +777,6 @@ package Snames is\n    Name_Link_Name                      : constant Name_Id := N + $;\n    Name_Low_Order_First                : constant Name_Id := N + $;\n    Name_Lowercase                      : constant Name_Id := N + $;\n-   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + $;\n    Name_Max_Entry_Queue_Length         : constant Name_Id := N + $;\n    Name_Max_Size                       : constant Name_Id := N + $;\n    Name_Mechanism                      : constant Name_Id := N + $;\n@@ -1962,6 +1962,7 @@ package Snames is\n       Pragma_Machine_Attribute,\n       Pragma_Main,\n       Pragma_Main_Storage,\n+      Pragma_Max_Entry_Queue_Depth,\n       Pragma_Max_Queue_Length,\n       Pragma_Memory_Size,\n       Pragma_No_Body,"}]}