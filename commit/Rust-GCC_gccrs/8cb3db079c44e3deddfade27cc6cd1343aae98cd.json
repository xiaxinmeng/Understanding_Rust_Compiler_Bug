{"sha": "8cb3db079c44e3deddfade27cc6cd1343aae98cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiM2RiMDc5YzQ0ZTNkZWRkZmFkZTI3Y2M2Y2QxMzQzYWFlOThjZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-11-05T15:57:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-11-05T15:57:20Z"}, "message": "(force_to_mode): Put in last change properl.\n\nFrom-SVN: r10555", "tree": {"sha": "3ae12436890abfc21fc3bc2ff0e8d1c2a95eb7be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ae12436890abfc21fc3bc2ff0e8d1c2a95eb7be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cb3db079c44e3deddfade27cc6cd1343aae98cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb3db079c44e3deddfade27cc6cd1343aae98cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb3db079c44e3deddfade27cc6cd1343aae98cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb3db079c44e3deddfade27cc6cd1343aae98cd/comments", "author": null, "committer": null, "parents": [{"sha": "859d9ce43f6d18ad8923baf03915bf4f65e5551e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859d9ce43f6d18ad8923baf03915bf4f65e5551e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859d9ce43f6d18ad8923baf03915bf4f65e5551e"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "630a16f736cf9e2d17f1fed6dae1c878acd0d53c", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb3db079c44e3deddfade27cc6cd1343aae98cd/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb3db079c44e3deddfade27cc6cd1343aae98cd/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8cb3db079c44e3deddfade27cc6cd1343aae98cd", "patch": "@@ -6039,7 +6039,7 @@ force_to_mode (x, mode, mask, reg, just_select)\n \t     represent a mask for all its bits in a single scalar.\n \t     But we only care about the lower bits, so calculate these.  */\n \n-\t  if (GET_MODE_SIZE (GET_MODE (x)) > sizeof (HOST_WIDE_INT))\n+\t  if (GET_MODE_BITSIZE (GET_MODE (x)) > HOST_BITS_PER_WIDE_INT))\n \t    {\n \t      nonzero = ~(HOST_WIDE_INT)0;\n "}]}