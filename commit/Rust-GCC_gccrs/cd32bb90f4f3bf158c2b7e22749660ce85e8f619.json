{"sha": "cd32bb90f4f3bf158c2b7e22749660ce85e8f619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzMmJiOTBmNGYzYmYxNThjMmI3ZTIyNzQ5NjYwY2U4NWU4ZjYxOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-22T13:14:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-22T13:14:54Z"}, "message": "re PR tree-optimization/52548 (missed PRE optimization when function call follows to-be hoisted variable)\n\n2012-03-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52548\n\t* tree-ssa-pre.c (valid_in_sets): Remove handling of invalidation\n\tbecause of clobbers.\n\t(prune_clobbered_mems): New function.\n\t(compute_antic_aux): Use it to prune ANTIC_OUT.\n\t(compute_partial_antic_aux): Use it to prune PA_IN.\n\t(compute_avail): Only insert expressions into EXP_GEN that\n\tare not invalidated when translated up to the beginning of\n\tthe block.\n\n\t* gcc.dg/tree-ssa/ssa-pre-29.c: New testcase.\n\nFrom-SVN: r185691", "tree": {"sha": "fae650def4a7a28004b38754200328a15d3aac87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fae650def4a7a28004b38754200328a15d3aac87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd32bb90f4f3bf158c2b7e22749660ce85e8f619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd32bb90f4f3bf158c2b7e22749660ce85e8f619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd32bb90f4f3bf158c2b7e22749660ce85e8f619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd32bb90f4f3bf158c2b7e22749660ce85e8f619/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b74f2b44da5f78d2621f5b7f1c6d774d6d498ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b74f2b44da5f78d2621f5b7f1c6d774d6d498ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b74f2b44da5f78d2621f5b7f1c6d774d6d498ac"}], "stats": {"total": 142, "additions": 124, "deletions": 18}, "files": [{"sha": "0ec46e43ee94f03cc8bfa14e19ef423b90aa75c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd32bb90f4f3bf158c2b7e22749660ce85e8f619/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd32bb90f4f3bf158c2b7e22749660ce85e8f619/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd32bb90f4f3bf158c2b7e22749660ce85e8f619", "patch": "@@ -1,3 +1,15 @@\n+2012-03-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52548\n+\t* tree-ssa-pre.c (valid_in_sets): Remove handling of invalidation\n+\tbecause of clobbers.\n+\t(prune_clobbered_mems): New function.\n+\t(compute_antic_aux): Use it to prune ANTIC_OUT.\n+\t(compute_partial_antic_aux): Use it to prune PA_IN.\n+\t(compute_avail): Only insert expressions into EXP_GEN that\n+\tare not invalidated when translated up to the beginning of\n+\tthe block.\n+\n 2012-03-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52638"}, {"sha": "5bdb9a3d1a697d9a08dec41124fa4e57e916e8c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd32bb90f4f3bf158c2b7e22749660ce85e8f619/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd32bb90f4f3bf158c2b7e22749660ce85e8f619/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd32bb90f4f3bf158c2b7e22749660ce85e8f619", "patch": "@@ -1,3 +1,8 @@\n+2012-03-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52548\n+\t* gcc.dg/tree-ssa/ssa-pre-29.c: New testcase.\n+\n 2012-03-22  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* lib/fortran-modules.exp (list-module-names-1): Remove"}, {"sha": "f2d2c4107ce48477092101dc2c25f72420136157", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-29.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd32bb90f4f3bf158c2b7e22749660ce85e8f619/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd32bb90f4f3bf158c2b7e22749660ce85e8f619/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-29.c?ref=cd32bb90f4f3bf158c2b7e22749660ce85e8f619", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre-details\" } */\n+\n+int flag, hoist, y, z;\n+\n+void\n+foo (void)\n+{\n+  if (flag)\n+    y = hoist + 4;\n+  else\n+    flag = 888;\n+  z = hoist + 4;\n+  bark ();\n+}\n+\n+/* We should see the partial redundancy of hoist + 4, not being confused\n+   about bark () possibly clobbering hoist.  */\n+\n+/* { dg-final { scan-tree-dump \"Replaced hoist\" \"pre\" } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "3f17e8bce02e21ae59e90e65b031174215598332", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 86, "deletions": 18, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd32bb90f4f3bf158c2b7e22749660ce85e8f619/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd32bb90f4f3bf158c2b7e22749660ce85e8f619/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=cd32bb90f4f3bf158c2b7e22749660ce85e8f619", "patch": "@@ -2123,16 +2123,7 @@ valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr,\n \t    if (!vro_valid_in_sets (set1, set2, vro))\n \t      return false;\n \t  }\n-\tif (ref->vuse)\n-\t  {\n-\t    gimple def_stmt = SSA_NAME_DEF_STMT (ref->vuse);\n-\t    if (!gimple_nop_p (def_stmt)\n-\t\t&& gimple_bb (def_stmt) != block\n-\t\t&& !dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t    block, gimple_bb (def_stmt)))\n-\t      return false;\n-\t  }\n-\treturn !value_dies_in_block_x (expr, block);\n+\treturn true;\n       }\n     default:\n       gcc_unreachable ();\n@@ -2179,6 +2170,38 @@ clean (bitmap_set_t set, basic_block block)\n   VEC_free (pre_expr, heap, exprs);\n }\n \n+/* Clean the set of expressions that are no longer valid in SET because\n+   they are clobbered in BLOCK.  */\n+\n+static void\n+prune_clobbered_mems (bitmap_set_t set, basic_block block)\n+{\n+  VEC (pre_expr, heap) *exprs = sorted_array_from_bitmap_set (set);\n+  pre_expr expr;\n+  int i;\n+\n+  FOR_EACH_VEC_ELT (pre_expr, exprs, i, expr)\n+    {\n+      vn_reference_t ref;\n+      if (expr->kind != REFERENCE)\n+\tcontinue;\n+\n+      ref = PRE_EXPR_REFERENCE (expr);\n+      if (ref->vuse)\n+\t{\n+\t  gimple def_stmt = SSA_NAME_DEF_STMT (ref->vuse);\n+\t  if (!gimple_nop_p (def_stmt)\n+\t      && ((gimple_bb (def_stmt) != block\n+\t\t   && !dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t       block, gimple_bb (def_stmt)))\n+\t\t  || (gimple_bb (def_stmt) == block\n+\t\t      && value_dies_in_block_x (expr, block))))\n+\t    bitmap_remove_from_set (set, expr);\n+\t}\n+    }\n+  VEC_free (pre_expr, heap, exprs);\n+}\n+\n static sbitmap has_abnormal_preds;\n \n /* List of blocks that may have changed during ANTIC computation and\n@@ -2320,6 +2343,10 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n       VEC_free (basic_block, heap, worklist);\n     }\n \n+  /* Prune expressions that are clobbered in block and thus become\n+     invalid if translated from ANTIC_OUT to ANTIC_IN.  */\n+  prune_clobbered_mems (ANTIC_OUT, block);\n+\n   /* Generate ANTIC_OUT - TMP_GEN.  */\n   S = bitmap_set_subtract (ANTIC_OUT, TMP_GEN (block));\n \n@@ -2474,6 +2501,10 @@ compute_partial_antic_aux (basic_block block,\n       VEC_free (basic_block, heap, worklist);\n     }\n \n+  /* Prune expressions that are clobbered in block and thus become\n+     invalid if translated from PA_OUT to PA_IN.  */\n+  prune_clobbered_mems (PA_OUT, block);\n+\n   /* PA_IN starts with PA_OUT - TMP_GEN.\n      Then we subtract things from ANTIC_IN.  */\n   PA_IN (block) = bitmap_set_subtract (PA_OUT, TMP_GEN (block));\n@@ -4027,15 +4058,26 @@ compute_avail (void)\n \t\t    if (vro->op2 && TREE_CODE (vro->op2) == SSA_NAME)\n \t\t      add_to_exp_gen (block, vro->op2);\n \t\t  }\n-\t\tresult = (pre_expr) pool_alloc (pre_expr_pool);\n-\t\tresult->kind = REFERENCE;\n-\t\tresult->id = 0;\n-\t\tPRE_EXPR_REFERENCE (result) = ref;\n \n-\t\tget_or_alloc_expression_id (result);\n-\t\tadd_to_value (get_expr_value_id (result), result);\n-\t\tif (!in_fre)\n-\t\t  bitmap_value_insert_into_set (EXP_GEN (block), result);\n+\t\t/* If the value of the call is not invalidated in\n+\t\t   this block until it is computed, add the expression\n+\t\t   to EXP_GEN.  */\n+\t\tif (!gimple_vuse (stmt)\n+\t\t    || gimple_code\n+\t\t         (SSA_NAME_DEF_STMT (gimple_vuse (stmt))) == GIMPLE_PHI\n+\t\t    || gimple_bb (SSA_NAME_DEF_STMT\n+\t\t\t\t    (gimple_vuse (stmt))) != block)\n+\t\t  {\n+\t\t    result = (pre_expr) pool_alloc (pre_expr_pool);\n+\t\t    result->kind = REFERENCE;\n+\t\t    result->id = 0;\n+\t\t    PRE_EXPR_REFERENCE (result) = ref;\n+\n+\t\t    get_or_alloc_expression_id (result);\n+\t\t    add_to_value (get_expr_value_id (result), result);\n+\t\t    if (!in_fre)\n+\t\t      bitmap_value_insert_into_set (EXP_GEN (block), result);\n+\t\t  }\n \t\tcontinue;\n \t      }\n \n@@ -4095,6 +4137,32 @@ compute_avail (void)\n \t\t\t  if (vro->op2 && TREE_CODE (vro->op2) == SSA_NAME)\n \t\t\t    add_to_exp_gen (block, vro->op2);\n \t\t\t}\n+\n+\t\t      /* If the value of the reference is not invalidated in\n+\t\t\t this block until it is computed, add the expression\n+\t\t\t to EXP_GEN.  */\n+\t\t      if (gimple_vuse (stmt))\n+\t\t\t{\n+\t\t\t  gimple def_stmt;\n+\t\t\t  bool ok = true;\n+\t\t\t  def_stmt = SSA_NAME_DEF_STMT (gimple_vuse (stmt));\n+\t\t\t  while (!gimple_nop_p (def_stmt)\n+\t\t\t\t && gimple_code (def_stmt) != GIMPLE_PHI\n+\t\t\t\t && gimple_bb (def_stmt) == block)\n+\t\t\t    {\n+\t\t\t      if (stmt_may_clobber_ref_p\n+\t\t\t\t    (def_stmt, gimple_assign_rhs1 (stmt)))\n+\t\t\t\t{\n+\t\t\t\t  ok = false;\n+\t\t\t\t  break;\n+\t\t\t\t}\n+\t\t\t      def_stmt\n+\t\t\t\t= SSA_NAME_DEF_STMT (gimple_vuse (def_stmt));\n+\t\t\t    }\n+\t\t\t  if (!ok)\n+\t\t\t    continue;\n+\t\t\t}\n+\n \t\t      result = (pre_expr) pool_alloc (pre_expr_pool);\n \t\t      result->kind = REFERENCE;\n \t\t      result->id = 0;"}]}