{"sha": "fae627162d5f8cfb273b10349883eeb74baaa43f", "node_id": "C_kwDOANBUbNoAKGZhZTYyNzE2MmQ1ZjhjZmIyNzNiMTAzNDk4ODNlZWI3NGJhYWE0M2Y", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-27T19:21:40Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-28T18:53:59Z"}, "message": "coroutines: Only set parm copy guard vars if we have exceptions [PR 102454].\n\nFor coroutines, we make copies of the original function arguments into\nthe coroutine frame.  Normally, these are destroyed on the proper exit\nfrom the coroutine when the frame is destroyed.\n\nHowever, if an exception is thrown before the first suspend point is\nreached, the cleanup has to happen in the ramp function.  These cleanups\nare guarded such that they are only applied to any param copies actually\nmade.\n\nThe ICE is caused by an attempt to set the guard variable when there are\nno exceptions enabled (the guard var is not created in this case).\n\nFixed by checking for flag_exceptions in this case too.\n\nWhile touching this code paths, also clean up the synthetic names used\nwhen a function parm is unnamed.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR c++/102454\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (analyze_fn_parms): Clean up synthetic names for\n\tunnamed function params.\n\t(morph_fn_to_coro): Do not try to set a guard variable for param\n\tDTORs in the ramp, unless we have exceptions active.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/pr102454.C: New test.", "tree": {"sha": "87d1760329a310ddc6fd74ab19fd072d3d543133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87d1760329a310ddc6fd74ab19fd072d3d543133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fae627162d5f8cfb273b10349883eeb74baaa43f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae627162d5f8cfb273b10349883eeb74baaa43f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae627162d5f8cfb273b10349883eeb74baaa43f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae627162d5f8cfb273b10349883eeb74baaa43f/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a11052d98db2f2a61841f0c5ee84de4ca1b3e296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11052d98db2f2a61841f0c5ee84de4ca1b3e296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11052d98db2f2a61841f0c5ee84de4ca1b3e296"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "2f45575bd92ce13a435b5c00c264dc45e362752f", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae627162d5f8cfb273b10349883eeb74baaa43f/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae627162d5f8cfb273b10349883eeb74baaa43f/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=fae627162d5f8cfb273b10349883eeb74baaa43f", "patch": "@@ -3829,13 +3829,13 @@ analyze_fn_parms (tree orig)\n \n       if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (parm.frame_type))\n \t{\n-\t  char *buf = xasprintf (\"_Coro_%s_live\", IDENTIFIER_POINTER (name));\n-\t  parm.guard_var = build_lang_decl (VAR_DECL, get_identifier (buf),\n-\t\t\t\t\t    boolean_type_node);\n+\t  char *buf = xasprintf (\"%s%s_live\", DECL_NAME (arg) ? \"_Coro_\" : \"\",\n+\t\t\t\t IDENTIFIER_POINTER (name));\n+\t  parm.guard_var\n+\t    = coro_build_artificial_var (UNKNOWN_LOCATION, get_identifier (buf),\n+\t\t\t\t\t boolean_type_node, orig,\n+\t\t\t\t\t boolean_false_node);\n \t  free (buf);\n-\t  DECL_ARTIFICIAL (parm.guard_var) = true;\n-\t  DECL_CONTEXT (parm.guard_var) = orig;\n-\t  DECL_INITIAL (parm.guard_var) = boolean_false_node;\n \t  parm.trivial_dtor = false;\n \t}\n       else\n@@ -4843,11 +4843,14 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t\t\t\t\t     NULL, parm.frame_type,\n \t\t\t\t\t     LOOKUP_NORMAL,\n \t\t\t\t\t     tf_warning_or_error);\n-\t      /* This var is now live.  */\n-\t      r = build_modify_expr (fn_start, parm.guard_var,\n-\t\t\t\t     boolean_type_node, INIT_EXPR, fn_start,\n-\t\t\t\t     boolean_true_node, boolean_type_node);\n-\t      finish_expr_stmt (r);\n+\t      if (flag_exceptions)\n+\t\t{\n+\t\t  /* This var is now live.  */\n+\t\t  r = build_modify_expr (fn_start, parm.guard_var,\n+\t\t\t\t\t boolean_type_node, INIT_EXPR, fn_start,\n+\t\t\t\t\t boolean_true_node, boolean_type_node);\n+\t\t  finish_expr_stmt (r);\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "41aeda7b97353aa2cfc89ba7a5114e9c7b9505fa", "filename": "gcc/testsuite/g++.dg/coroutines/pr102454.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae627162d5f8cfb273b10349883eeb74baaa43f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr102454.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae627162d5f8cfb273b10349883eeb74baaa43f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr102454.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr102454.C?ref=fae627162d5f8cfb273b10349883eeb74baaa43f", "patch": "@@ -0,0 +1,38 @@\n+//  { dg-additional-options \"-fno-exceptions\" }\n+\n+#include <coroutine>\n+#include <string>\n+\n+template <typename T>\n+struct looper {\n+  struct promise_type {\n+    auto get_return_object () { return handle_type::from_promise (*this); }\n+    auto initial_suspend () { return suspend_always_prt {}; }\n+    auto final_suspend () noexcept { return suspend_always_prt {}; }\n+    void return_value (T);\n+    void unhandled_exception ();\n+  };\n+\n+  using handle_type = std::coroutine_handle<promise_type>;\n+\n+  looper (handle_type);\n+\n+  struct suspend_always_prt {\n+    bool await_ready () noexcept;\n+    void await_suspend (handle_type) noexcept;\n+    void await_resume () noexcept;\n+  };\n+};\n+\n+template <typename T>\n+looper<T>\n+with_ctorable_state (T)\n+{\n+  co_return T ();\n+}\n+\n+auto\n+foo ()\n+{\n+  return with_ctorable_state<std::string>;\n+}"}]}