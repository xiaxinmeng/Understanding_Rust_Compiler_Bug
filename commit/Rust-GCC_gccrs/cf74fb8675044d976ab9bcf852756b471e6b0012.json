{"sha": "cf74fb8675044d976ab9bcf852756b471e6b0012", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3NGZiODY3NTA0NGQ5NzZhYjliY2Y4NTI3NTZiNDcxZTZiMDAxMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-11T00:23:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-11T00:23:18Z"}, "message": "decl.c (push_throw_library_fn): Take the FUNCTION_TYPE.\n\n        * decl.c (push_throw_library_fn): Take the FUNCTION_TYPE.\n        * except.c (expand_end_eh_spec): Add the return type.\n        * rtti.c (throw_bad_cast): Add the parmtypes.\n        (throw_bad_typeid): Likewise.\n\n        * semantics.c (expand_stmt): Only leave out rtl for unused\n        artificials, and set DECL_IGNORED_P on them as well.\n        * decl.c (wrapup_globals_for_namespace): Likewise.\n\n        * decl.c (maybe_commonize_var): Skip all artificial decls.\n        * pt.c (tsubst_decl): Don't copy TREE_ASM_WRITTEN.\n\nFrom-SVN: r32475", "tree": {"sha": "cd9fc77d9320650c3a10531cbef56137bda127b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd9fc77d9320650c3a10531cbef56137bda127b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf74fb8675044d976ab9bcf852756b471e6b0012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf74fb8675044d976ab9bcf852756b471e6b0012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf74fb8675044d976ab9bcf852756b471e6b0012", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf74fb8675044d976ab9bcf852756b471e6b0012/comments", "author": null, "committer": null, "parents": [{"sha": "e5fd03ba4078a755ca863360150654ef2e3eb1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5fd03ba4078a755ca863360150654ef2e3eb1ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5fd03ba4078a755ca863360150654ef2e3eb1ba"}], "stats": {"total": 70, "additions": 46, "deletions": 24}, "files": [{"sha": "052f2935867634b19e8f115f6812ab64b20ae74a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cf74fb8675044d976ab9bcf852756b471e6b0012", "patch": "@@ -1,3 +1,19 @@\n+2000-03-10  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* decl.c (push_throw_library_fn): Take the FUNCTION_TYPE.\n+\t* except.c (expand_end_eh_spec): Add the return type.\n+\t* rtti.c (throw_bad_cast): Add the parmtypes.\n+\t(throw_bad_typeid): Likewise.\n+\n+\t* semantics.c (expand_stmt): Only leave out rtl for unused\n+\tartificials, and set DECL_IGNORED_P on them as well.\n+\t* decl.c (wrapup_globals_for_namespace): Likewise.\n+\n+2000-03-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (maybe_commonize_var): Skip all artificial decls.\n+\t* pt.c (tsubst_decl): Don't copy TREE_ASM_WRITTEN.\n+\n 2000-03-10  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* lang-options.h, decl2.c: Add -fno-enforce-eh-specs."}, {"sha": "83747293c0c1c19b1c972a91a0ec339b3822dd4f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cf74fb8675044d976ab9bcf852756b471e6b0012", "patch": "@@ -1789,9 +1789,12 @@ wrapup_globals_for_namespace (namespace, data)\n       /* Pretend we've output an unused static variable.  This ensures\n          that the toplevel __FUNCTION__ etc won't be emitted, unless\n          needed. */\n-      if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n-          && !TREE_USED (decl))\n-        TREE_ASM_WRITTEN (decl) = 1;\n+      if (TREE_CODE (decl) == VAR_DECL && DECL_ARTIFICIAL (decl)\n+\t  && !TREE_PUBLIC (decl) && !TREE_USED (decl))\n+\t{\n+\t  TREE_ASM_WRITTEN (decl) = 1;\n+\t  DECL_IGNORED_P (decl) = 1;\n+\t}\n       vec[len - i - 1] = decl;\n     }\n \n@@ -6578,14 +6581,14 @@ push_void_library_fn (name, parmtypes)\n   return push_library_fn (name, type);\n }\n \n-/* Like push_void_library_fn, but also note that this function throws\n+/* Like push_library_fn, but also note that this function throws\n    and does not return.  Used for __throw_foo and the like.  */\n \n tree\n-push_throw_library_fn (name, parmtypes)\n-     tree name, parmtypes;\n+push_throw_library_fn (name, type)\n+     tree name, type;\n {\n-  tree fn = push_void_library_fn (name, parmtypes);\n+  tree fn = push_library_fn (name, type);\n   TREE_THIS_VOLATILE (fn) = 1;\n   TREE_NOTHROW (fn) = 0;\n   return fn;\n@@ -7272,7 +7275,7 @@ maybe_commonize_var (decl)\n      linkage.  */\n   if (TREE_STATIC (decl)\n       /* Don't mess with __FUNCTION__.  */\n-      && ! TREE_ASM_WRITTEN (decl)\n+      && ! DECL_ARTIFICIAL (decl)\n       && current_function_decl\n       && DECL_CONTEXT (decl) == current_function_decl\n       && (DECL_THIS_INLINE (current_function_decl)\n@@ -7307,7 +7310,7 @@ maybe_commonize_var (decl)\n \t  if (TREE_PUBLIC (decl))\n \t    DECL_ASSEMBLER_NAME (decl)\n \t      = build_static_name (current_function_decl, DECL_NAME (decl));\n-\t  else if (! DECL_ARTIFICIAL (decl))\n+\t  else\n \t    {\n \t      cp_warning_at (\"sorry: semantics of inline function static data `%#D' are wrong (you'll wind up with multiple copies)\", decl);\n \t      cp_warning_at (\"  you can work around this by removing the initializer\", decl);"}, {"sha": "c6cdaa2a2daf88ef1b0d5ec73c2adef852fb3491", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=cf74fb8675044d976ab9bcf852756b471e6b0012", "patch": "@@ -719,6 +719,7 @@ expand_end_eh_spec (raises, try_block)\n       tmp = tree_cons\n \t(NULL_TREE, integer_type_node, tree_cons\n \t (NULL_TREE, TREE_TYPE (decl), void_list_node));\n+      tmp = build_function_type (void_type_node, tmp);\n \n       fn = push_throw_library_fn (fn, tmp);\n     }"}, {"sha": "28d08a5a513bb7672512d847af01e0357fec32f2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cf74fb8675044d976ab9bcf852756b471e6b0012", "patch": "@@ -5924,11 +5924,6 @@ tsubst_decl (t, args, type, in_decl)\n \t    TREE_TYPE (r) = TREE_TYPE (DECL_INITIAL (r));\n \t  }\n \n-\t/* If the template variable was marked TREE_ASM_WRITTEN, that\n-\t   means we don't need to write out any of the instantiations\n-\t   either.  (__FUNCTION__ and its ilk are marked thusly.)  */\n-\tTREE_ASM_WRITTEN (r) = TREE_ASM_WRITTEN (t);\n-\n \t/* Even if the original location is out of scope, the newly\n \t   substituted one is not.  */\n \tif (TREE_CODE (r) == VAR_DECL)"}, {"sha": "fa5f85c1e711005db6967994fab03bd5965b551e", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=cf74fb8675044d976ab9bcf852756b471e6b0012", "patch": "@@ -175,7 +175,8 @@ throw_bad_cast ()\n   if (IDENTIFIER_GLOBAL_VALUE (fn))\n     fn = IDENTIFIER_GLOBAL_VALUE (fn);\n   else\n-    fn = push_throw_library_fn (fn, ptr_type_node);\n+    fn = push_throw_library_fn (fn, build_function_type (ptr_type_node,\n+\t\t\t\t\t\t\t void_list_node));\n   \n   return build_call (fn, NULL_TREE);\n }\n@@ -187,9 +188,11 @@ throw_bad_typeid ()\n   if (IDENTIFIER_GLOBAL_VALUE (fn))\n     fn = IDENTIFIER_GLOBAL_VALUE (fn);\n   else\n-    fn = push_throw_library_fn (fn, build_reference_type\n-\t\t\t\t(build_qualified_type\n-\t\t\t\t (type_info_type_node, TYPE_QUAL_CONST)));\n+    {\n+      tree t = build_qualified_type (type_info_type_node, TYPE_QUAL_CONST);\n+      t = build_function_type (build_reference_type (t), void_list_node);\n+      fn = push_throw_library_fn (fn, t);\n+    }\n \n   return build_call (fn, NULL_TREE);\n }"}, {"sha": "3071f1f0d209dadf0b8f1e84825af79c2dc39779", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74fb8675044d976ab9bcf852756b471e6b0012/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=cf74fb8675044d976ab9bcf852756b471e6b0012", "patch": "@@ -2392,12 +2392,16 @@ expand_stmt (t)\n \t\t  expand_anon_union_decl (decl, NULL_TREE, \n \t\t\t\t\t  DECL_ANON_UNION_ELEMS (decl));\n \t      }\n-\t    else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n-\t             && TREE_USED (decl))\n-\t      /* Do not emit unused decls. This is not just an\n-                 optimization. We really do not want to emit\n-                 __PRETTY_FUNCTION__ etc, if they're never used.  */\n-\t      make_rtl_for_local_static (decl);\n+\t    else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n+\t      {\n+\t\tif (DECL_ARTIFICIAL (decl) && ! TREE_USED (decl))\n+\t\t  /* Do not emit unused decls. This is not just an\n+\t\t     optimization. We really do not want to emit\n+\t\t     __PRETTY_FUNCTION__ etc, if they're never used.  */\n+\t\t  DECL_IGNORED_P (decl) = 1;\n+\t\telse\n+\t\t  make_rtl_for_local_static (decl);\n+\t      }\n \t  }\n \t  break;\n "}]}