{"sha": "e6d995fddea8d5a6fb0a3bdeccf4191e652f6759", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkOTk1ZmRkZWE4ZDVhNmZiMGEzYmRlY2NmNDE5MWU2NTJmNjc1OQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-04T10:01:34Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-06T09:23:09Z"}, "message": "[ftracer] Add caching of can_duplicate_bb_p\n\nThe fix \"[omp, ftracer] Don't duplicate blocks in SIMT region\" adds iteration\nover insns in ignore_bb_p, which makes it more expensive.\n\nCounteract this by piggybacking the computation of can_duplicate_bb_p onto\ncount_insns, which is called at the start of ftracer.\n\nBootstrapped and reg-tested on x86_64-linux.\n\ngcc/ChangeLog:\n\n2020-10-05  Tom de Vries  <tdevries@suse.de>\n\n\t* tracer.c (count_insns): Rename to ...\n\t(analyze_bb): ... this.\n\t(cache_can_duplicate_bb_p, cached_can_duplicate_bb_p): New function.\n\t(ignore_bb_p): Use cached_can_duplicate_bb_p.\n\t(tail_duplicate): Call cache_can_duplicate_bb_p.", "tree": {"sha": "f5b012a8117b60accc44c3b213dc6cdb811896e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5b012a8117b60accc44c3b213dc6cdb811896e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d995fddea8d5a6fb0a3bdeccf4191e652f6759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d995fddea8d5a6fb0a3bdeccf4191e652f6759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d995fddea8d5a6fb0a3bdeccf4191e652f6759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d995fddea8d5a6fb0a3bdeccf4191e652f6759/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d63e3ab40778a7dfd20605c8741becbb22b9014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d63e3ab40778a7dfd20605c8741becbb22b9014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d63e3ab40778a7dfd20605c8741becbb22b9014"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "e1c2b9527e5ec3dab57167a2e89305f269a8c0f8", "filename": "gcc/tracer.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d995fddea8d5a6fb0a3bdeccf4191e652f6759/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d995fddea8d5a6fb0a3bdeccf4191e652f6759/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=e6d995fddea8d5a6fb0a3bdeccf4191e652f6759", "patch": "@@ -53,7 +53,7 @@\n #include \"fibonacci_heap.h\"\n #include \"tracer.h\"\n \n-static int count_insns (basic_block);\n+static void analyze_bb (basic_block, int *);\n static bool better_p (const_edge, const_edge);\n static edge find_best_successor (basic_block);\n static edge find_best_predecessor (basic_block);\n@@ -143,6 +143,33 @@ can_duplicate_bb_p (const_basic_block bb)\n   return true;\n }\n \n+static sbitmap can_duplicate_bb;\n+\n+/* Cache VAL as value of can_duplicate_bb_p for BB.  */\n+static inline void\n+cache_can_duplicate_bb_p (const_basic_block bb, bool val)\n+{\n+  if (val)\n+    bitmap_set_bit (can_duplicate_bb, bb->index);\n+}\n+\n+/* Return cached value of can_duplicate_bb_p for BB.  */\n+static bool\n+cached_can_duplicate_bb_p (const_basic_block bb)\n+{\n+  if (can_duplicate_bb)\n+    {\n+      unsigned int size = SBITMAP_SIZE (can_duplicate_bb);\n+      if ((unsigned int)bb->index < size)\n+\treturn bitmap_bit_p (can_duplicate_bb, bb->index);\n+\n+      /* Assume added bb's should not be duplicated.  */\n+      return false;\n+    }\n+\n+  return can_duplicate_bb_p (bb);\n+}\n+\n /* Return true if we should ignore the basic block for purposes of tracing.  */\n bool\n ignore_bb_p (const_basic_block bb)\n@@ -152,24 +179,27 @@ ignore_bb_p (const_basic_block bb)\n   if (optimize_bb_for_size_p (bb))\n     return true;\n \n-  return !can_duplicate_bb_p (bb);\n+  return !cached_can_duplicate_bb_p (bb);\n }\n \n /* Return number of instructions in the block.  */\n \n-static int\n-count_insns (basic_block bb)\n+static void\n+analyze_bb (basic_block bb, int *count)\n {\n   gimple_stmt_iterator gsi;\n   gimple *stmt;\n   int n = 0;\n+  bool can_duplicate = can_duplicate_bb_no_insn_iter_p (bb);\n \n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       stmt = gsi_stmt (gsi);\n       n += estimate_num_insns (stmt, &eni_size_weights);\n+      can_duplicate = can_duplicate && can_duplicate_insn_p (stmt);\n     }\n-  return n;\n+  *count = n;\n+  cache_can_duplicate_bb_p (bb, can_duplicate);\n }\n \n /* Return true if E1 is more frequent than E2.  */\n@@ -317,6 +347,8 @@ tail_duplicate (void)\n      resize it.  */\n   bb_seen = sbitmap_alloc (last_basic_block_for_fn (cfun) * 2);\n   bitmap_clear (bb_seen);\n+  can_duplicate_bb = sbitmap_alloc (last_basic_block_for_fn (cfun));\n+  bitmap_clear (can_duplicate_bb);\n   initialize_original_copy_tables ();\n \n   if (profile_info && profile_status_for_fn (cfun) == PROFILE_READ)\n@@ -330,7 +362,8 @@ tail_duplicate (void)\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      int n = count_insns (bb);\n+      int n;\n+      analyze_bb (bb, &n);\n       if (!ignore_bb_p (bb))\n \tblocks[bb->index] = heap.insert (-bb->count.to_frequency (cfun), bb);\n \n@@ -420,6 +453,8 @@ tail_duplicate (void)\n \n   free_original_copy_tables ();\n   sbitmap_free (bb_seen);\n+  sbitmap_free (can_duplicate_bb);\n+  can_duplicate_bb = NULL;\n   free (trace);\n   free (counts);\n "}]}