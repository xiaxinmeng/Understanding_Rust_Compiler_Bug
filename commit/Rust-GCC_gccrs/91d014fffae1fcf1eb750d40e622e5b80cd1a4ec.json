{"sha": "91d014fffae1fcf1eb750d40e622e5b80cd1a4ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFkMDE0ZmZmYWUxZmNmMWViNzUwZDQwZTYyMmU1YjgwY2QxYTRlYw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2018-03-20T17:25:09Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2018-03-20T17:25:09Z"}, "message": "re PR target/83789 (__builtin_altivec_lvx fails for powerpc for altivec-4.c)\n\n\tPR target/83789\n\t* config/rs6000/altivec.md (altivec_lvx_<mode>_2op): Delete define_insn.\n\t(altivec_lvx_<mode>_1op): Likewise.\n\t(altivec_stvx_<mode>_2op): Likewise.\n\t(altivec_stvx_<mode>_1op): Likewise.\n\t(altivec_lvx_<VM2:mode>): New define_expand.\n\t(altivec_stvx_<VM2:mode>): Likewise.\n\t(altivec_lvx_<VM2:mode>_2op_<P:mptrsize>): New define_insn.\n\t(altivec_lvx_<VM2:mode>_1op_<P:mptrsize>): Likewise.\n\t(altivec_stvx_<VM2:mode>_2op_<P:mptrsize>): Likewise.\n\t(altivec_stvx_<VM2:mode>_1op_<P:mptrsize>): Likewise.\n\t* config/rs6000/rs6000-p8swap.c (rs6000_gen_stvx): Use new expanders.\n\t(rs6000_gen_lvx): Likewise.\n\t* config/rs6000/rs6000.c (altivec_expand_lv_builtin): Likewise.\n\t(altivec_expand_stv_builtin): Likewise.\n\t(altivec_expand_builtin): Likewise.\n\t* config/rs6000/vector.md: Likewise.\n\nFrom-SVN: r258688", "tree": {"sha": "976be9886676b81facf0acac63d743ca7bb99c1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/976be9886676b81facf0acac63d743ca7bb99c1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "770ebe99fe48aca10f3553c4195deba1757d328a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770ebe99fe48aca10f3553c4195deba1757d328a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770ebe99fe48aca10f3553c4195deba1757d328a"}], "stats": {"total": 417, "additions": 158, "deletions": 259}, "files": [{"sha": "1684757ba370234bfc42e83c5a94e811546c2aa3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91d014fffae1fcf1eb750d40e622e5b80cd1a4ec", "patch": "@@ -1,3 +1,23 @@\n+2018-03-20  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/83789\n+\t* config/rs6000/altivec.md (altivec_lvx_<mode>_2op): Delete define_insn.\n+\t(altivec_lvx_<mode>_1op): Likewise.\n+\t(altivec_stvx_<mode>_2op): Likewise.\n+\t(altivec_stvx_<mode>_1op): Likewise.\n+\t(altivec_lvx_<VM2:mode>): New define_expand.\n+\t(altivec_stvx_<VM2:mode>): Likewise.\n+\t(altivec_lvx_<VM2:mode>_2op_<P:mptrsize>): New define_insn.\n+\t(altivec_lvx_<VM2:mode>_1op_<P:mptrsize>): Likewise.\n+\t(altivec_stvx_<VM2:mode>_2op_<P:mptrsize>): Likewise.\n+\t(altivec_stvx_<VM2:mode>_1op_<P:mptrsize>): Likewise.\n+\t* config/rs6000/rs6000-p8swap.c (rs6000_gen_stvx): Use new expanders.\n+\t(rs6000_gen_lvx): Likewise.\n+\t* config/rs6000/rs6000.c (altivec_expand_lv_builtin): Likewise.\n+\t(altivec_expand_stv_builtin): Likewise.\n+\t(altivec_expand_builtin): Likewise.\n+\t* config/rs6000/vector.md: Likewise.\n+\n 2018-03-20  Richard Biener  <rguenther@suse.de>\n \n \tPR target/84986"}, {"sha": "13f4654db6acf1550ed1fd0d770af196adb826f6", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 72, "deletions": 56, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=91d014fffae1fcf1eb750d40e622e5b80cd1a4ec", "patch": "@@ -2747,39 +2747,47 @@\n   \"lvx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n-; The next two patterns embody what lvx should usually look like.\n-(define_insn \"altivec_lvx_<mode>_2op\"\n-  [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n-        (mem:VM2 (and:DI (plus:DI (match_operand:DI 1 \"register_operand\" \"b\")\n-                                  (match_operand:DI 2 \"register_operand\" \"r\"))\n-\t\t         (const_int -16))))]\n-  \"TARGET_ALTIVEC && TARGET_64BIT\"\n-  \"lvx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")])\n-\n-(define_insn \"altivec_lvx_<mode>_1op\"\n-  [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n-        (mem:VM2 (and:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t (const_int -16))))]\n-  \"TARGET_ALTIVEC && TARGET_64BIT\"\n-  \"lvx %0,0,%1\"\n-  [(set_attr \"type\" \"vecload\")])\n+; The following patterns embody what lvx should usually look like.\n+(define_expand \"altivec_lvx_<VM2:mode>\"\n+  [(set (match_operand:VM2 0 \"register_operand\")\n+\t(match_operand:VM2 1 \"altivec_indexed_or_indirect_operand\"))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  rtx addr = XEXP (operand1, 0);\n+  if (rs6000_sum_of_two_registers_p (addr))\n+    {\n+      rtx op1 = XEXP (addr, 0);\n+      rtx op2 = XEXP (addr, 1);\n+      if (TARGET_64BIT)\n+\temit_insn (gen_altivec_lvx_<VM2:mode>_2op_di (operand0, op1, op2));\n+      else\n+\temit_insn (gen_altivec_lvx_<VM2:mode>_2op_si (operand0, op1, op2));\n+    }\n+  else\n+    {\n+      if (TARGET_64BIT)\n+\temit_insn (gen_altivec_lvx_<VM2:mode>_1op_di (operand0, addr));\n+      else\n+\temit_insn (gen_altivec_lvx_<VM2:mode>_1op_si (operand0, addr));\n+    }\n+  DONE;\n+})\n \n-; 32-bit versions of the above.\n-(define_insn \"altivec_lvx_<mode>_2op_si\"\n+; The next two patterns embody what lvx should usually look like.\n+(define_insn \"altivec_lvx_<VM2:mode>_2op_<P:mptrsize>\"\n   [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n-        (mem:VM2 (and:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"b\")\n-                                  (match_operand:SI 2 \"register_operand\" \"r\"))\n-\t\t         (const_int -16))))]\n-  \"TARGET_ALTIVEC && TARGET_32BIT\"\n+\t(mem:VM2 (and:P (plus:P (match_operand:P 1 \"register_operand\" \"b\")\n+\t\t\t\t(match_operand:P 2 \"register_operand\" \"r\"))\n+\t\t\t(const_int -16))))]\n+  \"TARGET_ALTIVEC\"\n   \"lvx %0,%1,%2\"\n   [(set_attr \"type\" \"vecload\")])\n \n-(define_insn \"altivec_lvx_<mode>_1op_si\"\n+(define_insn \"altivec_lvx_<VM2:mode>_1op_<P:mptrsize>\"\n   [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n-        (mem:VM2 (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t (const_int -16))))]\n-  \"TARGET_ALTIVEC && TARGET_32BIT\"\n+\t(mem:VM2 (and:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t\t(const_int -16))))]\n+  \"TARGET_ALTIVEC\"\n   \"lvx %0,0,%1\"\n   [(set_attr \"type\" \"vecload\")])\n \n@@ -2795,39 +2803,47 @@\n   \"stvx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n-; The next two patterns embody what stvx should usually look like.\n-(define_insn \"altivec_stvx_<mode>_2op\"\n-  [(set (mem:VM2 (and:DI (plus:DI (match_operand:DI 1 \"register_operand\" \"b\")\n-  \t                          (match_operand:DI 2 \"register_operand\" \"r\"))\n-\t                 (const_int -16)))\n-        (match_operand:VM2 0 \"register_operand\" \"v\"))]\n-  \"TARGET_ALTIVEC && TARGET_64BIT\"\n-  \"stvx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecstore\")])\n-\n-(define_insn \"altivec_stvx_<mode>_1op\"\n-  [(set (mem:VM2 (and:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t                 (const_int -16)))\n-        (match_operand:VM2 0 \"register_operand\" \"v\"))]\n-  \"TARGET_ALTIVEC && TARGET_64BIT\"\n-  \"stvx %0,0,%1\"\n-  [(set_attr \"type\" \"vecstore\")])\n+; The following patterns embody what stvx should usually look like.\n+(define_expand \"altivec_stvx_<VM2:mode>\"\n+  [(set (match_operand:VM2 1 \"altivec_indexed_or_indirect_operand\")\n+\t(match_operand:VM2 0 \"register_operand\"))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  rtx addr = XEXP (operand1, 0);\n+  if (rs6000_sum_of_two_registers_p (addr))\n+    {\n+      rtx op1 = XEXP (addr, 0);\n+      rtx op2 = XEXP (addr, 1);\n+      if (TARGET_64BIT)\n+\temit_insn (gen_altivec_stvx_<VM2:mode>_2op_di (operand0, op1, op2));\n+      else\n+\temit_insn (gen_altivec_stvx_<VM2:mode>_2op_si (operand0, op1, op2));\n+    }\n+  else\n+    {\n+      if (TARGET_64BIT)\n+\temit_insn (gen_altivec_stvx_<VM2:mode>_1op_di (operand0, addr));\n+      else\n+\temit_insn (gen_altivec_stvx_<VM2:mode>_1op_si (operand0, addr));\n+    }\n+  DONE;\n+})\n \n-; 32-bit versions of the above.\n-(define_insn \"altivec_stvx_<mode>_2op_si\"\n-  [(set (mem:VM2 (and:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"b\")\n-  \t                          (match_operand:SI 2 \"register_operand\" \"r\"))\n-\t                 (const_int -16)))\n-        (match_operand:VM2 0 \"register_operand\" \"v\"))]\n-  \"TARGET_ALTIVEC && TARGET_32BIT\"\n+; The next two patterns embody what stvx should usually look like.\n+(define_insn \"altivec_stvx_<VM2:mode>_2op_<P:mptrsize>\"\n+  [(set (mem:VM2 (and:P (plus:P (match_operand:P 1 \"register_operand\" \"b\")\n+\t\t\t\t(match_operand:P 2 \"register_operand\" \"r\"))\n+\t\t\t(const_int -16)))\n+\t(match_operand:VM2 0 \"register_operand\" \"v\"))]\n+  \"TARGET_ALTIVEC\"\n   \"stvx %0,%1,%2\"\n   [(set_attr \"type\" \"vecstore\")])\n \n-(define_insn \"altivec_stvx_<mode>_1op_si\"\n-  [(set (mem:VM2 (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t                 (const_int -16)))\n-        (match_operand:VM2 0 \"register_operand\" \"v\"))]\n-  \"TARGET_ALTIVEC && TARGET_32BIT\"\n+(define_insn \"altivec_stvx_<VM2:mode>_1op_<P:mptrsize>\"\n+  [(set (mem:VM2 (and:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t\t(const_int -16)))\n+\t(match_operand:VM2 0 \"register_operand\" \"v\"))]\n+  \"TARGET_ALTIVEC\"\n   \"stvx %0,0,%1\"\n   [(set_attr \"type\" \"vecstore\")])\n "}, {"sha": "6ef2eed322d253118a9d5d689119a8238ae34cab", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 40, "deletions": 167, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=91d014fffae1fcf1eb750d40e622e5b80cd1a4ec", "patch": "@@ -1548,94 +1548,31 @@ mimic_memory_attributes_and_flags (rtx new_mem_exp, const_rtx original_mem_exp)\n rtx\n rs6000_gen_stvx (enum machine_mode mode, rtx dest_exp, rtx src_exp)\n {\n-  rtx memory_address = XEXP (dest_exp, 0);\n   rtx stvx;\n \n-  if (rs6000_sum_of_two_registers_p (memory_address))\n-    {\n-      rtx op1, op2;\n-      op1 = XEXP (memory_address, 0);\n-      op2 = XEXP (memory_address, 1);\n-      if (mode == V16QImode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v16qi_2op (src_exp, op1, op2)\n-\t  : gen_altivec_stvx_v16qi_2op_si (src_exp, op1, op2);\n-      else if (mode == V8HImode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v8hi_2op (src_exp, op1, op2)\n-\t  : gen_altivec_stvx_v8hi_2op_si (src_exp, op1, op2);\n-#ifdef HAVE_V8HFmode\n-      else if (mode == V8HFmode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v8hf_2op (src_exp, op1, op2)\n-\t  : gen_altivec_stvx_v8hf_2op_si (src_exp, op1, op2);\n-#endif\n-      else if (mode == V4SImode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v4si_2op (src_exp, op1, op2)\n-\t  : gen_altivec_stvx_v4si_2op_si (src_exp, op1, op2);\n-      else if (mode == V4SFmode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v4sf_2op (src_exp, op1, op2)\n-\t  : gen_altivec_stvx_v4sf_2op_si (src_exp, op1, op2);\n-      else if (mode == V2DImode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v2di_2op (src_exp, op1, op2)\n-\t  : gen_altivec_stvx_v2di_2op_si (src_exp, op1, op2);\n-      else if (mode == V2DFmode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v2df_2op (src_exp, op1, op2)\n-\t  : gen_altivec_stvx_v2df_2op_si (src_exp, op1, op2);\n-      else if (mode == V1TImode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v1ti_2op (src_exp, op1, op2)\n-\t  : gen_altivec_stvx_v1ti_2op_si (src_exp, op1, op2);\n-      else\n-\t/* KFmode, TFmode, other modes not expected in this context.  */\n-\tgcc_unreachable ();\n-    }\n-  else\t\t\t\t/* REG_P (memory_address) */\n-    {\n-      if (mode == V16QImode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v16qi_1op (src_exp, memory_address)\n-\t  : gen_altivec_stvx_v16qi_1op_si (src_exp, memory_address);\n-      else if (mode == V8HImode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v8hi_1op (src_exp, memory_address)\n-\t  : gen_altivec_stvx_v8hi_1op_si (src_exp, memory_address);\n+  if (mode == V16QImode)\n+    stvx = gen_altivec_stvx_v16qi (src_exp, dest_exp);\n+  else if (mode == V8HImode)\n+    stvx = gen_altivec_stvx_v8hi (src_exp, dest_exp);\n #ifdef HAVE_V8HFmode\n-      else if (mode == V8HFmode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v8hf_1op (src_exp, memory_address)\n-\t  : gen_altivec_stvx_v8hf_1op_si (src_exp, memory_address);\n+  else if (mode == V8HFmode)\n+    stvx = gen_altivec_stvx_v8hf (src_exp, dest_exp);\n #endif\n-      else if (mode == V4SImode)\n-\tstvx =TARGET_64BIT\n-\t  ? gen_altivec_stvx_v4si_1op (src_exp, memory_address)\n-\t  : gen_altivec_stvx_v4si_1op_si (src_exp, memory_address);\n-      else if (mode == V4SFmode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v4sf_1op (src_exp, memory_address)\n-\t  : gen_altivec_stvx_v4sf_1op_si (src_exp, memory_address);\n-      else if (mode == V2DImode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v2di_1op (src_exp, memory_address)\n-\t  : gen_altivec_stvx_v2di_1op_si (src_exp, memory_address);\n-      else if (mode == V2DFmode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v2df_1op (src_exp, memory_address)\n-\t  : gen_altivec_stvx_v2df_1op_si (src_exp, memory_address);\n-      else if (mode == V1TImode)\n-\tstvx = TARGET_64BIT\n-\t  ? gen_altivec_stvx_v1ti_1op (src_exp, memory_address)\n-\t  : gen_altivec_stvx_v1ti_1op_si (src_exp, memory_address);\n-      else\n-\t/* KFmode, TFmode, other modes not expected in this context.  */\n-\tgcc_unreachable ();\n-    }\n+  else if (mode == V4SImode)\n+    stvx = gen_altivec_stvx_v4si (src_exp, dest_exp);\n+  else if (mode == V4SFmode)\n+    stvx = gen_altivec_stvx_v4sf (src_exp, dest_exp);\n+  else if (mode == V2DImode)\n+    stvx = gen_altivec_stvx_v2di (src_exp, dest_exp);\n+  else if (mode == V2DFmode)\n+    stvx = gen_altivec_stvx_v2df (src_exp, dest_exp);\n+  else if (mode == V1TImode)\n+    stvx = gen_altivec_stvx_v1ti (src_exp, dest_exp);\n+  else\n+    /* KFmode, TFmode, other modes not expected in this context.  */\n+    gcc_unreachable ();\n \n-  rtx new_mem_exp = SET_DEST (stvx);\n+  rtx new_mem_exp = SET_DEST (PATTERN (stvx));\n   mimic_memory_attributes_and_flags (new_mem_exp, dest_exp);\n   return stvx;\n }\n@@ -1727,95 +1664,31 @@ replace_swapped_aligned_store (swap_web_entry *insn_entry,\n rtx\n rs6000_gen_lvx (enum machine_mode mode, rtx dest_exp, rtx src_exp)\n {\n-  rtx memory_address = XEXP (src_exp, 0);\n   rtx lvx;\n \n-  if (rs6000_sum_of_two_registers_p (memory_address))\n-    {\n-      rtx op1, op2;\n-      op1 = XEXP (memory_address, 0);\n-      op2 = XEXP (memory_address, 1);\n-\n-      if (mode == V16QImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v16qi_2op (dest_exp, op1, op2)\n-\t  : gen_altivec_lvx_v16qi_2op_si (dest_exp, op1, op2);\n-      else if (mode == V8HImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v8hi_2op (dest_exp, op1, op2)\n-\t  : gen_altivec_lvx_v8hi_2op_si (dest_exp, op1, op2);\n-#ifdef HAVE_V8HFmode\n-      else if (mode == V8HFmode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v8hf_2op (dest_exp, op1, op2)\n-\t  : gen_altivec_lvx_v8hf_2op_si (dest_exp, op1, op2);\n-#endif\n-      else if (mode == V4SImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v4si_2op (dest_exp, op1, op2)\n-\t  : gen_altivec_lvx_v4si_2op_si (dest_exp, op1, op2);\n-      else if (mode == V4SFmode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v4sf_2op (dest_exp, op1, op2)\n-\t  : gen_altivec_lvx_v4sf_2op_si (dest_exp, op1, op2);\n-      else if (mode == V2DImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v2di_2op (dest_exp, op1, op2)\n-\t  : gen_altivec_lvx_v2di_2op_si (dest_exp, op1, op2);\n-      else if (mode == V2DFmode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v2df_2op (dest_exp, op1, op2)\n-\t  : gen_altivec_lvx_v2df_2op_si (dest_exp, op1, op2);\n-      else if (mode == V1TImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v1ti_2op (dest_exp, op1, op2)\n-\t  : gen_altivec_lvx_v1ti_2op_si (dest_exp, op1, op2);\n-      else\n-\t/* KFmode, TFmode, other modes not expected in this context.  */\n-\tgcc_unreachable ();\n-    }\n-  else\t\t\t\t/* REG_P (memory_address) */\n-    {\n-      if (mode == V16QImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v16qi_1op (dest_exp, memory_address)\n-\t  : gen_altivec_lvx_v16qi_1op_si (dest_exp, memory_address);\n-      else if (mode == V8HImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v8hi_1op (dest_exp, memory_address)\n-\t  : gen_altivec_lvx_v8hi_1op_si (dest_exp, memory_address);\n+  if (mode == V16QImode)\n+    lvx = gen_altivec_lvx_v16qi (dest_exp, src_exp);\n+  else if (mode == V8HImode)\n+    lvx = gen_altivec_lvx_v8hi (dest_exp, src_exp);\n #ifdef HAVE_V8HFmode\n-      else if (mode == V8HFmode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v8hf_1op (dest_exp, memory_address)\n-\t  : gen_altivec_lvx_v8hf_1op_si (dest_exp, memory_address);\n+  else if (mode == V8HFmode)\n+    lvx = gen_altivec_lvx_v8hf (dest_exp, src_exp);\n #endif\n-      else if (mode == V4SImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v4si_1op (dest_exp, memory_address)\n-\t  : gen_altivec_lvx_v4si_1op_si (dest_exp, memory_address);\n-      else if (mode == V4SFmode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v4sf_1op (dest_exp, memory_address)\n-\t  : gen_altivec_lvx_v4sf_1op_si (dest_exp, memory_address);\n-      else if (mode == V2DImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v2di_1op (dest_exp, memory_address)\n-\t  : gen_altivec_lvx_v2di_1op_si (dest_exp, memory_address);\n-      else if (mode == V2DFmode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v2df_1op (dest_exp, memory_address)\n-\t  : gen_altivec_lvx_v2df_1op_si (dest_exp, memory_address);\n-      else if (mode == V1TImode)\n-\tlvx = TARGET_64BIT\n-\t  ? gen_altivec_lvx_v1ti_1op (dest_exp, memory_address)\n-\t  : gen_altivec_lvx_v1ti_1op_si (dest_exp, memory_address);\n-      else\n-\t/* KFmode, TFmode, other modes not expected in this context.  */\n-\tgcc_unreachable ();\n-    }\n+  else if (mode == V4SImode)\n+    lvx = gen_altivec_lvx_v4si (dest_exp, src_exp);\n+  else if (mode == V4SFmode)\n+    lvx = gen_altivec_lvx_v4sf (dest_exp, src_exp);\n+  else if (mode == V2DImode)\n+    lvx = gen_altivec_lvx_v2di (dest_exp, src_exp);\n+  else if (mode == V2DFmode)\n+    lvx = gen_altivec_lvx_v2df (dest_exp, src_exp);\n+  else if (mode == V1TImode)\n+    lvx = gen_altivec_lvx_v1ti (dest_exp, src_exp);\n+  else\n+    /* KFmode, TFmode, other modes not expected in this context.  */\n+    gcc_unreachable ();\n \n-  rtx new_mem_exp = SET_SRC (lvx);\n+  rtx new_mem_exp = SET_SRC (PATTERN (lvx));\n   mimic_memory_attributes_and_flags (new_mem_exp, src_exp);\n \n   return lvx;"}, {"sha": "2b8a6bec268cd9574823b1943b2cd070e63e94f1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=91d014fffae1fcf1eb750d40e622e5b80cd1a4ec", "patch": "@@ -14451,12 +14451,12 @@ altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n   /* For LVX, express the RTL accurately by ANDing the address with -16.\n      LVXL and LVE*X expand to use UNSPECs to hide their special behavior,\n      so the raw address is fine.  */\n-  if (icode == CODE_FOR_altivec_lvx_v2df_2op\n-      || icode == CODE_FOR_altivec_lvx_v2di_2op\n-      || icode == CODE_FOR_altivec_lvx_v4sf_2op\n-      || icode == CODE_FOR_altivec_lvx_v4si_2op\n-      || icode == CODE_FOR_altivec_lvx_v8hi_2op\n-      || icode == CODE_FOR_altivec_lvx_v16qi_2op)\n+  if (icode == CODE_FOR_altivec_lvx_v2df\n+      || icode == CODE_FOR_altivec_lvx_v2di\n+      || icode == CODE_FOR_altivec_lvx_v4sf\n+      || icode == CODE_FOR_altivec_lvx_v4si\n+      || icode == CODE_FOR_altivec_lvx_v8hi\n+      || icode == CODE_FOR_altivec_lvx_v16qi)\n     {\n       rtx rawaddr;\n       if (op0 == const0_rtx)\n@@ -14609,12 +14609,12 @@ altivec_expand_stv_builtin (enum insn_code icode, tree exp)\n   /* For STVX, express the RTL accurately by ANDing the address with -16.\n      STVXL and STVE*X expand to use UNSPECs to hide their special behavior,\n      so the raw address is fine.  */\n-  if (icode == CODE_FOR_altivec_stvx_v2df_2op\n-      || icode == CODE_FOR_altivec_stvx_v2di_2op\n-      || icode == CODE_FOR_altivec_stvx_v4sf_2op\n-      || icode == CODE_FOR_altivec_stvx_v4si_2op\n-      || icode == CODE_FOR_altivec_stvx_v8hi_2op\n-      || icode == CODE_FOR_altivec_stvx_v16qi_2op)\n+  if (icode == CODE_FOR_altivec_stvx_v2df\n+      || icode == CODE_FOR_altivec_stvx_v2di\n+      || icode == CODE_FOR_altivec_stvx_v4sf\n+      || icode == CODE_FOR_altivec_stvx_v4si\n+      || icode == CODE_FOR_altivec_stvx_v8hi\n+      || icode == CODE_FOR_altivec_stvx_v16qi)\n     {\n       if (op1 == const0_rtx)\n \trawaddr = op2;\n@@ -15524,18 +15524,18 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n   switch (fcode)\n     {\n     case ALTIVEC_BUILTIN_STVX_V2DF:\n-      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v2df_2op, exp);\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v2df, exp);\n     case ALTIVEC_BUILTIN_STVX_V2DI:\n-      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v2di_2op, exp);\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v2di, exp);\n     case ALTIVEC_BUILTIN_STVX_V4SF:\n-      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v4sf_2op, exp);\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v4sf, exp);\n     case ALTIVEC_BUILTIN_STVX:\n     case ALTIVEC_BUILTIN_STVX_V4SI:\n-      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v4si_2op, exp);\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v4si, exp);\n     case ALTIVEC_BUILTIN_STVX_V8HI:\n-      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v8hi_2op, exp);\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v8hi, exp);\n     case ALTIVEC_BUILTIN_STVX_V16QI:\n-      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v16qi_2op, exp);\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvx_v16qi, exp);\n     case ALTIVEC_BUILTIN_STVEBX:\n       return altivec_expand_stv_builtin (CODE_FOR_altivec_stvebx, exp);\n     case ALTIVEC_BUILTIN_STVEHX:\n@@ -15806,23 +15806,23 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl_v16qi,\n \t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVX_V2DF:\n-      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v2df_2op,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v2df,\n \t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVX_V2DI:\n-      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v2di_2op,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v2di,\n \t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVX_V4SF:\n-      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v4sf_2op,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v4sf,\n \t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVX:\n     case ALTIVEC_BUILTIN_LVX_V4SI:\n-      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v4si_2op,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v4si,\n \t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVX_V8HI:\n-      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v8hi_2op,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v8hi,\n \t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVX_V16QI:\n-      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v16qi_2op,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v16qi,\n \t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVLX:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvlx,"}, {"sha": "082acba8cee8e1e6174f411cc4536e9d2a32f1b9", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d014fffae1fcf1eb750d40e622e5b80cd1a4ec/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=91d014fffae1fcf1eb750d40e622e5b80cd1a4ec", "patch": "@@ -196,12 +196,7 @@\n       operands[1] = rs6000_address_for_altivec (operands[1]);\n       rtx and_op = XEXP (operands[1], 0);\n       gcc_assert (GET_CODE (and_op) == AND);\n-      rtx addr = XEXP (and_op, 0);\n-      if (GET_CODE (addr) == PLUS)\n-        emit_insn (gen_altivec_lvx_<mode>_2op (operands[0], XEXP (addr, 0),\n-\t                                       XEXP (addr, 1)));\n-      else\n-        emit_insn (gen_altivec_lvx_<mode>_1op (operands[0], operands[1]));\n+      emit_insn (gen_altivec_lvx_<mode> (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -218,12 +213,7 @@\n       operands[0] = rs6000_address_for_altivec (operands[0]);\n       rtx and_op = XEXP (operands[0], 0);\n       gcc_assert (GET_CODE (and_op) == AND);\n-      rtx addr = XEXP (and_op, 0);\n-      if (GET_CODE (addr) == PLUS)\n-        emit_insn (gen_altivec_stvx_<mode>_2op (operands[1], XEXP (addr, 0),\n-\t                                        XEXP (addr, 1)));\n-      else\n-        emit_insn (gen_altivec_stvx_<mode>_1op (operands[1], operands[0]));\n+      emit_insn (gen_altivec_stvx_<mode> (operands[1], operands[0]));\n       DONE;\n     }\n })"}]}