{"sha": "01c741adc217fe270239ce2543e119f5f96d241d", "node_id": "C_kwDOANBUbNoAKDAxYzc0MWFkYzIxN2ZlMjcwMjM5Y2UyNTQzZTExOWY1Zjk2ZDI0MWQ", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-10T18:13:01Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T10:34:36Z"}, "message": "gccrs: tyty get rid of useless virtuals\n\nThis removes can_substitute and contains_type_parameters which were\nconfusing interfaces to act as a proxy to the SubstitionRef types. This\nreplaces them with a single base implementation which is much easier to\ndebug and follow.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::visit): update to use new interface\n\t(TypeCheckExpr::resolve_root_path): likewise\n\t(TypeCheckExpr::resolve_segments): likewise\n\t* typecheck/rust-hir-type-check-type.cc (TypeCheckType::visit): likewise\n\t(TypeCheckType::resolve_root_path): likewise\n\t* typecheck/rust-tyty-subst.cc (SubstitutionRef::get_mappings_from_generic_args): likewise\n\t* typecheck/rust-tyty.cc (BaseType::supports_substitutions): likewise\n\t(BaseType::can_substitute): remove\n\t(BaseType::contains_type_parameters): remove\n\t(handle_substitions): cleanup\n\t(TupleType::handle_substitions): update\n\t(FnType::handle_substitions): update\n\t(ProjectionType::supports_substitutions): update\n\t* typecheck/rust-tyty.h: update header\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "33ec6a4c8e896d99ba7fe89ca8f66833c0877324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33ec6a4c8e896d99ba7fe89ca8f66833c0877324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01c741adc217fe270239ce2543e119f5f96d241d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c741adc217fe270239ce2543e119f5f96d241d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c741adc217fe270239ce2543e119f5f96d241d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c741adc217fe270239ce2543e119f5f96d241d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bab564903706658ce8fa3704b656eeb1dce53330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab564903706658ce8fa3704b656eeb1dce53330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab564903706658ce8fa3704b656eeb1dce53330"}], "stats": {"total": 69, "additions": 12, "deletions": 57}, "files": [{"sha": "04d507a744663e1b8e9690551770e8fdf0784429", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=01c741adc217fe270239ce2543e119f5f96d241d", "patch": "@@ -110,7 +110,7 @@ TypeCheckExpr::visit (HIR::QualifiedPathInExpression &expr)\n   // turbo-fish segment path::<ty>\n   if (item_seg.has_generic_args ())\n     {\n-      if (!infered->can_substitute ())\n+      if (!infered->has_subsititions_defined ())\n \t{\n \t  rust_error_at (item_seg.get_locus (),\n \t\t\t \"substitutions not supported for %s\",\n@@ -269,7 +269,7 @@ TypeCheckExpr::resolve_root_path (HIR::PathInExpression &expr, size_t *offset,\n       // turbo-fish segment path::<ty>\n       if (seg.has_generic_args ())\n \t{\n-\t  if (!lookup->can_substitute ())\n+\t  if (!lookup->has_subsititions_defined ())\n \t    {\n \t      rust_error_at (expr.get_locus (),\n \t\t\t     \"substitutions not supported for %s\",\n@@ -437,7 +437,7 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n \n       if (seg.has_generic_args ())\n \t{\n-\t  if (!tyseg->can_substitute ())\n+\t  if (!tyseg->has_subsititions_defined ())\n \t    {\n \t      rust_error_at (expr_locus, \"substitutions not supported for %s\",\n \t\t\t     tyseg->as_string ().c_str ());"}, {"sha": "971038c56f6619ecad5d2e959b8e4896e0c069e6", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=01c741adc217fe270239ce2543e119f5f96d241d", "patch": "@@ -242,7 +242,7 @@ TypeCheckType::visit (HIR::QualifiedPathInType &path)\n       // turbo-fish segment path::<ty>\n       if (generic_seg.has_generic_args ())\n \t{\n-\t  if (!translated->can_substitute ())\n+\t  if (!translated->has_subsititions_defined ())\n \t    {\n \t      rust_error_at (item_seg->get_locus (),\n \t\t\t     \"substitutions not supported for %s\",\n@@ -386,7 +386,7 @@ TypeCheckType::resolve_root_path (HIR::TypePath &path, size_t *offset,\n \t  HIR::TypePathSegmentGeneric *generic_segment\n \t    = static_cast<HIR::TypePathSegmentGeneric *> (seg.get ());\n \n-\t  if (!lookup->can_substitute ())\n+\t  if (!lookup->has_subsititions_defined ())\n \t    {\n \t      rust_error_at (path.get_locus (),\n \t\t\t     \"TypePath %s declares generic arguments but the \"\n@@ -482,7 +482,7 @@ TypeCheckType::resolve_segments (\n \t  HIR::TypePathSegmentGeneric *generic_segment\n \t    = static_cast<HIR::TypePathSegmentGeneric *> (seg.get ());\n \n-\t  if (!tyseg->can_substitute ())\n+\t  if (!tyseg->has_subsititions_defined ())\n \t    {\n \t      rust_error_at (expr_locus, \"substitutions not supported for %s\",\n \t\t\t     tyseg->as_string ().c_str ());"}, {"sha": "5892c15b2e18f5367e0734949618aa69f5f4a04d", "filename": "gcc/rust/typecheck/rust-tyty-subst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc?ref=01c741adc217fe270239ce2543e119f5f96d241d", "patch": "@@ -648,7 +648,7 @@ SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n \t    return SubstitutionArgumentMappings::error ();\n \n \t  // this resolved default might already contain default parameters\n-\t  if (resolved->contains_type_parameters ())\n+\t  if (!resolved->is_concrete ())\n \t    {\n \t      SubstitutionArgumentMappings intermediate (mappings,\n \t\t\t\t\t\t\t binding_arguments,"}, {"sha": "c6db0a8907ac411a4d969e1affb3377694f1d10e", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=01c741adc217fe270239ce2543e119f5f96d241d", "patch": "@@ -257,36 +257,18 @@ BaseType::append_reference (HirId id)\n   combined.insert (id);\n }\n \n-bool\n-BaseType::supports_substitutions () const\n-{\n-  return false;\n-}\n-\n bool\n BaseType::has_subsititions_defined () const\n {\n   return false;\n }\n \n-bool\n-BaseType::can_substitute () const\n-{\n-  return supports_substitutions () && has_subsititions_defined ();\n-}\n-\n bool\n BaseType::needs_generic_substitutions () const\n {\n   return false;\n }\n \n-bool\n-BaseType::contains_type_parameters () const\n-{\n-  return !is_concrete ();\n-}\n-\n const RustIdent &\n BaseType::get_ident () const\n {\n@@ -1446,7 +1428,7 @@ handle_substitions (SubstitutionArgumentMappings &subst_mappings,\n \t    }\n \t}\n     }\n-  else if (fty->has_subsititions_defined () || fty->contains_type_parameters ())\n+  else if (fty->has_subsititions_defined () || !fty->is_concrete ())\n     {\n       BaseType *concrete\n \t= Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n@@ -1629,7 +1611,7 @@ TupleType::handle_substitions (SubstitutionArgumentMappings &mappings)\n   for (size_t i = 0; i < tuple->fields.size (); i++)\n     {\n       TyVar &field = fields.at (i);\n-      if (field.get_tyty ()->contains_type_parameters ())\n+      if (!field.get_tyty ()->is_concrete ())\n \t{\n \t  BaseType *concrete\n \t    = Resolver::SubstMapperInternal::Resolve (field.get_tyty (),\n@@ -1783,8 +1765,7 @@ FnType::handle_substitions (SubstitutionArgumentMappings &subst_mappings)\n \t    }\n \t}\n     }\n-  else if (fty->needs_generic_substitutions ()\n-\t   || fty->contains_type_parameters ())\n+  else if (fty->needs_generic_substitutions () || !fty->is_concrete ())\n     {\n       BaseType *concrete\n \t= Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n@@ -1831,8 +1812,7 @@ FnType::handle_substitions (SubstitutionArgumentMappings &subst_mappings)\n \t\t}\n \t    }\n \t}\n-      else if (fty->has_subsititions_defined ()\n-\t       || fty->contains_type_parameters ())\n+      else if (fty->has_subsititions_defined () || !fty->is_concrete ())\n \t{\n \t  BaseType *concrete\n \t    = Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n@@ -3378,12 +3358,6 @@ ProjectionType::needs_generic_substitutions () const\n   return needs_substitution ();\n }\n \n-bool\n-ProjectionType::supports_substitutions () const\n-{\n-  return true;\n-}\n-\n bool\n ProjectionType::has_subsititions_defined () const\n {\n@@ -3486,8 +3460,7 @@ ProjectionType::handle_substitions (\n \t    }\n \t}\n     }\n-  else if (fty->needs_generic_substitutions ()\n-\t   || fty->contains_type_parameters ())\n+  else if (fty->needs_generic_substitutions () || !fty->is_concrete ())\n     {\n       BaseType *concrete\n \t= Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);"}, {"sha": "05b50991f41f5b5f54d873fde89fe36a39d1026f", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c741adc217fe270239ce2543e119f5f96d241d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=01c741adc217fe270239ce2543e119f5f96d241d", "patch": "@@ -137,17 +137,10 @@ class BaseType : public TypeBoundsMappings\n \n   // get_combined_refs returns the chain of node refs involved in unification\n   std::set<HirId> get_combined_refs () const;\n-\n   void append_reference (HirId id);\n \n-  bool can_substitute () const;\n-\n-  bool contains_type_parameters () const;\n-\n   std::string mappings_str () const;\n-\n   std::string debug_str () const;\n-\n   void debug () const;\n \n   // FIXME this will eventually go away\n@@ -159,15 +152,12 @@ class BaseType : public TypeBoundsMappings\n   const BaseType *destructure () const;\n \n   const RustIdent &get_ident () const;\n-\n   Location get_locus () const;\n \n   /* Returns a pointer to a clone of this. The caller is responsible for\n    * releasing the memory of the returned ty. */\n   virtual BaseType *clone () const = 0;\n \n-  virtual bool supports_substitutions () const;\n-\n   virtual bool has_subsititions_defined () const;\n \n   virtual bool needs_generic_substitutions () const;\n@@ -577,8 +567,6 @@ class ADTType : public BaseType, public SubstitutionRef\n     return needs_substitution ();\n   }\n \n-  bool supports_substitutions () const override final { return true; }\n-\n   bool has_subsititions_defined () const override final\n   {\n     return has_substitutions ();\n@@ -735,8 +723,6 @@ class FnType : public BaseType, public SubstitutionRef\n     return needs_substitution ();\n   }\n \n-  bool supports_substitutions () const override final { return true; }\n-\n   bool has_subsititions_defined () const override final\n   {\n     return has_substitutions ();\n@@ -858,8 +844,6 @@ class ClosureType : public BaseType, public SubstitutionRef\n     return needs_substitution ();\n   }\n \n-  bool supports_substitutions () const override final { return true; }\n-\n   bool has_subsititions_defined () const override final\n   {\n     return has_substitutions ();\n@@ -1330,8 +1314,6 @@ class ProjectionType : public BaseType, public SubstitutionRef\n \n   bool needs_generic_substitutions () const override final;\n \n-  bool supports_substitutions () const override final;\n-\n   bool has_subsititions_defined () const override final;\n \n   const BaseType *get () const;"}]}