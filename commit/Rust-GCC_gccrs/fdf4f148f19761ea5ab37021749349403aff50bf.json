{"sha": "fdf4f148f19761ea5ab37021749349403aff50bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmNGYxNDhmMTk3NjFlYTVhYjM3MDIxNzQ5MzQ5NDAzYWZmNTBiZg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2008-04-04T20:18:52Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2008-04-04T20:18:52Z"}, "message": "re PR target/35620 (ICE passing dereferenced pointer to _Decimal32)\n\ngcc/\n\tPR target/35620\n\t* config/rs6000/rs6000.c (rs6000_check_sdmode): Handle indirect ref\n\tand view convert expression.\n\ntestsuite/\n\tPR target/35620\n\t* gcc.dg/dfp/pr35620.c: New test.\n\t* gcc.dg/dfp/func-pointer.c: New test.\n\t* gcc.dg/dfp/func-deref.c: New test.\n\nFrom-SVN: r133909", "tree": {"sha": "2fdf9df601368718b42394661fcdffa06141d751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fdf9df601368718b42394661fcdffa06141d751"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf4f148f19761ea5ab37021749349403aff50bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf4f148f19761ea5ab37021749349403aff50bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf4f148f19761ea5ab37021749349403aff50bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf4f148f19761ea5ab37021749349403aff50bf/comments", "author": null, "committer": null, "parents": [{"sha": "3088d40408d9c26ace497e6a01badc53cde9ffb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3088d40408d9c26ace497e6a01badc53cde9ffb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3088d40408d9c26ace497e6a01badc53cde9ffb7"}], "stats": {"total": 481, "additions": 481, "deletions": 0}, "files": [{"sha": "41a429698c97fe47635c8739c208026e2f3c55d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdf4f148f19761ea5ab37021749349403aff50bf", "patch": "@@ -1,3 +1,9 @@\n+2008-04-04  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR target/35620\n+\t* config/rs6000/rs6000.c (rs6000_check_sdmode): Handle indirect ref\n+\tand view convert expression.\n+\n 2008-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/35364"}, {"sha": "9734c4ee2fd31692d9fd1adf2a8ccc603360a779", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fdf4f148f19761ea5ab37021749349403aff50bf", "patch": "@@ -11226,13 +11226,18 @@ rs6000_check_sdmode (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n       return NULL_TREE;\n     }\n \n+  gcc_assert (TREE_CODE (*tp) != ALIGN_INDIRECT_REF);\n+  gcc_assert (TREE_CODE (*tp) != MISALIGNED_INDIRECT_REF);\n+\n   switch (TREE_CODE (*tp))\n     {\n     case VAR_DECL:\n     case PARM_DECL:\n     case FIELD_DECL:\n     case RESULT_DECL:\n     case REAL_CST:\n+    case INDIRECT_REF:\n+    case VIEW_CONVERT_EXPR:\n       if (TYPE_MODE (TREE_TYPE (*tp)) == SDmode)\n \treturn *tp;\n       break;"}, {"sha": "dda0bbaf3be7ab87570f319badba34f3e443b7a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fdf4f148f19761ea5ab37021749349403aff50bf", "patch": "@@ -1,3 +1,10 @@\n+2008-04-04  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR target/35620\n+\t* gcc.dg/dfp/pr35620.c: New test.\n+\t* gcc.dg/dfp/func-pointer.c: New test.\n+\t* gcc.dg/dfp/func-deref.c: New test.\n+\n 2008-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/35364"}, {"sha": "d16e70d29d54010f1e71e64444b4048a50f6d2fe", "filename": "gcc/testsuite/gcc.dg/dfp/func-deref.c", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-deref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-deref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-deref.c?ref=fdf4f148f19761ea5ab37021749349403aff50bf", "patch": "@@ -0,0 +1,220 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test scalar passing and return values involving decimal floating\n+   point types and dereferenced pointers.  */\n+\n+extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+/* A handful of functions that return their Nth _Decimal32\n+   argument.  */\n+\n+_Decimal32 __attribute__((noinline))\n+arg0_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg0;\n+}\n+\n+_Decimal32 __attribute__((noinline))\n+arg1_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg1;\n+}\n+\t\n+_Decimal32 __attribute__((noinline))\n+arg2_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg2;\n+}\n+\t\n+_Decimal32 __attribute__((noinline))\n+arg3_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg3;\n+}\n+\t\n+_Decimal32 __attribute__((noinline))\n+arg4_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg4;\n+}\n+\t\n+_Decimal32 __attribute__((noinline))\n+arg5_32 (_Decimal32 arg0, _Decimal32 arg1, _Decimal32 arg2,\n+\t _Decimal32 arg3, _Decimal32 arg4, _Decimal32 arg5)\n+{\n+  return arg5;\n+}\n+\t\n+\f\n+/* A handful of functions that return their Nth _Decimal64\n+   argument.  */\n+\n+_Decimal64 __attribute__((noinline))\n+arg0_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg0;\n+}\n+\t\n+_Decimal64 __attribute__((noinline))\n+arg1_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg1;\n+}\n+\t\n+_Decimal64 __attribute__((noinline))\n+arg2_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg2;\n+}\n+\t\n+_Decimal64 __attribute__((noinline))\n+arg3_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg3;\n+}\n+\t\n+_Decimal64 __attribute__((noinline))\n+arg4_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg4;\n+}\n+\t\n+_Decimal64 __attribute__((noinline))\n+arg5_64 (_Decimal64 arg0, _Decimal64 arg1, _Decimal64 arg2,\n+\t _Decimal64 arg3, _Decimal64 arg4, _Decimal64 arg5)\n+{\n+  return arg5;\n+}\n+\t\n+\f\n+/* A handful of functions that return their Nth _Decimal128\n+   argument.  */\n+\n+_Decimal128 __attribute__((noinline))\n+arg0_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg0;\n+}\n+\t\n+_Decimal128 __attribute__((noinline))\n+arg1_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg1;\n+}\n+\t\n+_Decimal128 __attribute__((noinline))\n+arg2_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg2;\n+}\n+\t\n+_Decimal128 __attribute__((noinline))\n+arg3_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg3;\n+}\n+\t\n+_Decimal128 __attribute__((noinline))\n+arg4_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg4;\n+}\n+\t\n+_Decimal128 __attribute__((noinline))\n+arg5_128 (_Decimal128 arg0, _Decimal128 arg1, _Decimal128 arg2,\n+\t _Decimal128 arg3, _Decimal128 arg4, _Decimal128 arg5)\n+{\n+  return arg5;\n+}\n+\n+\n+\f\n+_Decimal32 df0 = 0.0df, df1 = 1.0df, df2 = 2.0df,\n+\t   df3 = 3.0df, df4 = 4.0df, df5 = 5.0df;\n+_Decimal32 *pdf0 = &df0, *pdf1 = &df1, *pdf2 = &df2,\n+\t   *pdf3 = &df3, *pdf4 = &df4, *pdf5 = &df5;\n+_Decimal64 dd0 = 0.0dd, dd1 = 1.0dd, dd2 = 2.0dd,\n+\t   dd3 = 3.0dd, dd4 = 4.0dd, dd5 = 5.0dd;\n+_Decimal64 *pdd0 = &dd0, *pdd1 = &dd1, *pdd2 = &dd2,\n+\t   *pdd3 = &dd3, *pdd4 = &dd4, *pdd5 = &dd5;\n+_Decimal128 dl0 = 0.0dl, dl1 = 1.0dl, dl2 = 2.0dl,\n+\t    dl3 = 3.0dl, dl4 = 4.0dl, dl5 = 5.0dl;\n+_Decimal128 *pdl0 = &dl0, *pdl1 = &dl1, *pdl2 = &dl2,\n+\t    *pdl3 = &dl3, *pdl4 = &dl4, *pdl5 = &dl5;\n+\n+int\n+main ()\n+{\n+  /* _Decimal32 variants.  */\n+  if (arg0_32 (*pdf0, *pdf1, *pdf2, *pdf3, *pdf4, *pdf5) != 0.0df)\n+    FAILURE\n+  if (arg1_32 (*pdf0, *pdf1, *pdf2, *pdf3, *pdf4, *pdf5) != 1.0df)\n+    FAILURE\n+  if (arg2_32 (*pdf0, *pdf1, *pdf2, *pdf3, *pdf4, *pdf5) != 2.0df)\n+    FAILURE\n+  if (arg3_32 (*pdf0, *pdf1, *pdf2, *pdf3, *pdf4, *pdf5) != 3.0df)\n+    FAILURE\n+  if (arg4_32 (*pdf0, *pdf1, *pdf2, *pdf3, *pdf4, *pdf5) != 4.0df)\n+    FAILURE\n+  if (arg5_32 (*pdf0, *pdf1, *pdf2, *pdf3, *pdf4, *pdf5) != 5.0df)\n+    FAILURE\n+\n+  /* _Decimal64 variants.  */\n+  if (arg0_64 (*pdd0, *pdd1, *pdd2, *pdd3, *pdd4, *pdd5) != 0.0dd)\n+    FAILURE\n+  if (arg1_64 (*pdd0, *pdd1, *pdd2, *pdd3, *pdd4, *pdd5) != 1.0dd)\n+    FAILURE\n+  if (arg2_64 (*pdd0, *pdd1, *pdd2, *pdd3, *pdd4, *pdd5) != 2.0dd)\n+    FAILURE\n+  if (arg3_64 (*pdd0, *pdd1, *pdd2, *pdd3, *pdd4, *pdd5) != 3.0dd)\n+    FAILURE\n+  if (arg4_64 (*pdd0, *pdd1, *pdd2, *pdd3, *pdd4, *pdd5) != 4.0dd)\n+    FAILURE\n+  if (arg5_64 (*pdd0, *pdd1, *pdd2, *pdd3, *pdd4, *pdd5) != 5.0dd)\n+    FAILURE\n+\n+  /* _Decimal128 variants.  */\n+  if (arg0_128 (*pdl0, *pdl1, *pdl2, *pdl3, *pdl4, *pdl5) != 0.0dl)\n+    FAILURE\n+  if (arg1_128 (*pdl0, *pdl1, *pdl2, *pdl3, *pdl4, *pdl5) != 1.0dl)\n+    FAILURE\n+  if (arg2_128 (*pdl0, *pdl1, *pdl2, *pdl3, *pdl4, *pdl5) != 2.0dl)\n+    FAILURE\n+  if (arg3_128 (*pdl0, *pdl1, *pdl2, *pdl3, *pdl4, *pdl5) != 3.0dl)\n+    FAILURE\n+  if (arg4_128 (*pdl0, *pdl1, *pdl2, *pdl3, *pdl4, *pdl5) != 4.0dl)\n+    FAILURE\n+  if (arg5_128 (*pdl0, *pdl1, *pdl2, *pdl3, *pdl4, *pdl5) != 5.0dl)\n+    FAILURE\n+\n+  if (failcnt != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "e1faceb63f0bc670b284ca669deb423b3456c2e3", "filename": "gcc/testsuite/gcc.dg/dfp/func-pointer.c", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-pointer.c?ref=fdf4f148f19761ea5ab37021749349403aff50bf", "patch": "@@ -0,0 +1,220 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test pointer argument passing and return values involving decimal floating\n+   point types.  */\n+\n+extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+/* A handful of functions that return their Nth pointer to Decimal32\n+   argument.  */\n+\n+_Decimal32 *\n+arg0_32 (_Decimal32 *arg0, _Decimal32 *arg1, _Decimal32 *arg2,\n+\t _Decimal32 *arg3, _Decimal32 *arg4, _Decimal32 *arg5)\n+{\n+  return arg0;\n+}\n+\n+_Decimal32 *\n+arg1_32 (_Decimal32 *arg0, _Decimal32 *arg1, _Decimal32 *arg2,\n+\t _Decimal32 *arg3, _Decimal32 *arg4, _Decimal32 *arg5)\n+{\n+  return arg1;\n+}\n+\t\n+_Decimal32 *\n+arg2_32 (_Decimal32 *arg0, _Decimal32 *arg1, _Decimal32 *arg2,\n+\t _Decimal32 *arg3, _Decimal32 *arg4, _Decimal32 *arg5)\n+{\n+  return arg2;\n+}\n+\t\n+_Decimal32 *\n+arg3_32 (_Decimal32 *arg0, _Decimal32 *arg1, _Decimal32 *arg2,\n+\t _Decimal32 *arg3, _Decimal32 *arg4, _Decimal32 *arg5)\n+{\n+  return arg3;\n+}\n+\t\n+_Decimal32 *\n+arg4_32 (_Decimal32 *arg0, _Decimal32 *arg1, _Decimal32 *arg2,\n+\t _Decimal32 *arg3, _Decimal32 *arg4, _Decimal32 *arg5)\n+{\n+  return arg4;\n+}\n+\t\n+_Decimal32 *\n+arg5_32 (_Decimal32 *arg0, _Decimal32 *arg1, _Decimal32 *arg2,\n+\t _Decimal32 *arg3, _Decimal32 *arg4, _Decimal32 *arg5)\n+{\n+  return arg5;\n+}\n+\t\n+\f\n+/* A handful of functions that return their Nth pointer to _Decimal64\n+   argument.  */\n+\n+_Decimal64 *\n+arg0_64 (_Decimal64 *arg0, _Decimal64 *arg1, _Decimal64 *arg2,\n+\t _Decimal64 *arg3, _Decimal64 *arg4, _Decimal64 *arg5)\n+{\n+  return arg0;\n+}\n+\t\n+_Decimal64 *\n+arg1_64 (_Decimal64 *arg0, _Decimal64 *arg1, _Decimal64 *arg2,\n+\t _Decimal64 *arg3, _Decimal64 *arg4, _Decimal64 *arg5)\n+{\n+  return arg1;\n+}\n+\t\n+_Decimal64 *\n+arg2_64 (_Decimal64 *arg0, _Decimal64 *arg1, _Decimal64 *arg2,\n+\t _Decimal64 *arg3, _Decimal64 *arg4, _Decimal64 *arg5)\n+{\n+  return arg2;\n+}\n+\t\n+_Decimal64 *\n+arg3_64 (_Decimal64 *arg0, _Decimal64 *arg1, _Decimal64 *arg2,\n+\t _Decimal64 *arg3, _Decimal64 *arg4, _Decimal64 *arg5)\n+{\n+  return arg3;\n+}\n+\t\n+_Decimal64 *\n+arg4_64 (_Decimal64 *arg0, _Decimal64 *arg1, _Decimal64 *arg2,\n+\t _Decimal64 *arg3, _Decimal64 *arg4, _Decimal64 *arg5)\n+{\n+  return arg4;\n+}\n+\t\n+_Decimal64 *\n+arg5_64 (_Decimal64 *arg0, _Decimal64 *arg1, _Decimal64 *arg2,\n+\t _Decimal64 *arg3, _Decimal64 *arg4, _Decimal64 *arg5)\n+{\n+  return arg5;\n+}\n+\t\n+\f\n+/* A handful of functions that return their Nth _Decimal128\n+   argument.  */\n+\n+_Decimal128 *\n+arg0_128 (_Decimal128 *arg0, _Decimal128 *arg1, _Decimal128 *arg2,\n+\t  _Decimal128 *arg3, _Decimal128 *arg4, _Decimal128 *arg5)\n+{\n+  return arg0;\n+}\n+\t\n+_Decimal128 *\n+arg1_128 (_Decimal128 *arg0, _Decimal128 *arg1, _Decimal128 *arg2,\n+\t  _Decimal128 *arg3, _Decimal128 *arg4, _Decimal128 *arg5)\n+{\n+  return arg1;\n+}\n+\t\n+_Decimal128 *\n+arg2_128 (_Decimal128 *arg0, _Decimal128 *arg1, _Decimal128 *arg2,\n+\t  _Decimal128 *arg3, _Decimal128 *arg4, _Decimal128 *arg5)\n+{\n+  return arg2;\n+}\n+\t\n+_Decimal128 *\n+arg3_128 (_Decimal128 *arg0, _Decimal128 *arg1, _Decimal128 *arg2,\n+\t  _Decimal128 *arg3, _Decimal128 *arg4, _Decimal128 *arg5)\n+{\n+  return arg3;\n+}\n+\t\n+_Decimal128 *\n+arg4_128 (_Decimal128 *arg0, _Decimal128 *arg1, _Decimal128 *arg2,\n+\t  _Decimal128 *arg3, _Decimal128 *arg4, _Decimal128 *arg5)\n+{\n+  return arg4;\n+}\n+\t\n+_Decimal128 *\n+arg5_128 (_Decimal128 *arg0, _Decimal128 *arg1, _Decimal128 *arg2,\n+\t  _Decimal128 *arg3, _Decimal128 *arg4, _Decimal128 *arg5)\n+{\n+  return arg5;\n+}\n+\n+\n+\f\n+_Decimal32 df0 = 0.0df, df1 = 1.0df, df2 = 2.0df,\n+\t   df3 = 3.0df, df4 = 4.0df, df5 = 5.0df;\n+_Decimal32 *pdf0 = &df0, *pdf1 = &df1, *pdf2 = &df2,\n+\t   *pdf3 = &df3, *pdf4 = &df4, *pdf5 = &df5;\n+_Decimal64 dd0 = 0.0dd, dd1 = 1.0dd, dd2 = 2.0dd,\n+\t   dd3 = 3.0dd, dd4 = 4.0dd, dd5 = 5.0dd;\n+_Decimal64 *pdd0 = &dd0, *pdd1 = &dd1, *pdd2 = &dd2,\n+\t   *pdd3 = &dd3, *pdd4 = &dd4, *pdd5 = &dd5;\n+_Decimal128 dl0 = 0.0dl, dl1 = 1.0dl, dl2 = 2.0dl,\n+\t    dl3 = 3.0dl, dl4 = 4.0dl, dl5 = 5.0dl;\n+_Decimal128 *pdl0 = &dl0, *pdl1 = &dl1, *pdl2 = &dl2,\n+\t    *pdl3 = &dl3, *pdl4 = &dl4, *pdl5 = &dl5;\n+\n+int\n+main ()\n+{\n+  /* _Decimal32 variants.  */\n+  if (*arg0_32 (pdf0, pdf1, pdf2, pdf3, pdf4, pdf5) != 0.0df)\n+    FAILURE\n+  if (*arg1_32 (pdf0, pdf1, pdf2, pdf3, pdf4, pdf5) != 1.0df)\n+    FAILURE\n+  if (*arg2_32 (pdf0, pdf1, pdf2, pdf3, pdf4, pdf5) != 2.0df)\n+    FAILURE\n+  if (*arg3_32 (pdf0, pdf1, pdf2, pdf3, pdf4, pdf5) != 3.0df)\n+    FAILURE\n+  if (*arg4_32 (pdf0, pdf1, pdf2, pdf3, pdf4, pdf5) != 4.0df)\n+    FAILURE\n+  if (*arg5_32 (pdf0, pdf1, pdf2, pdf3, pdf4, pdf5) != 5.0df)\n+    FAILURE\n+\n+  /* _Decimal64 variants.  */\n+  if (*arg0_64 (pdd0, pdd1, pdd2, pdd3, pdd4, pdd5) != 0.0dd)\n+    FAILURE\n+  if (*arg1_64 (pdd0, pdd1, pdd2, pdd3, pdd4, pdd5) != 1.0dd)\n+    FAILURE\n+  if (*arg2_64 (pdd0, pdd1, pdd2, pdd3, pdd4, pdd5) != 2.0dd)\n+    FAILURE\n+  if (*arg3_64 (pdd0, pdd1, pdd2, pdd3, pdd4, pdd5) != 3.0dd)\n+    FAILURE\n+  if (*arg4_64 (pdd0, pdd1, pdd2, pdd3, pdd4, pdd5) != 4.0dd)\n+    FAILURE\n+  if (*arg5_64 (pdd0, pdd1, pdd2, pdd3, pdd4, pdd5) != 5.0dd)\n+    FAILURE\n+\n+  /* _Decimal128 variants.  */\n+  if (*arg0_128 (pdl0, pdl1, pdl2, pdl3, pdl4, pdl5) != 0.0dl)\n+    FAILURE\n+  if (*arg1_128 (pdl0, pdl1, pdl2, pdl3, pdl4, pdl5) != 1.0dl)\n+    FAILURE\n+  if (*arg2_128 (pdl0, pdl1, pdl2, pdl3, pdl4, pdl5) != 2.0dl)\n+    FAILURE\n+  if (*arg3_128 (pdl0, pdl1, pdl2, pdl3, pdl4, pdl5) != 3.0dl)\n+    FAILURE\n+  if (*arg4_128 (pdl0, pdl1, pdl2, pdl3, pdl4, pdl5) != 4.0dl)\n+    FAILURE\n+  if (*arg5_128 (pdl0, pdl1, pdl2, pdl3, pdl4, pdl5) != 5.0dl)\n+    FAILURE\n+\n+  if (failcnt != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "90f9500c38482b6848d6f2aee2c1684acb533736", "filename": "gcc/testsuite/gcc.dg/dfp/pr35620.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr35620.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf4f148f19761ea5ab37021749349403aff50bf/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr35620.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr35620.c?ref=fdf4f148f19761ea5ab37021749349403aff50bf", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O2\" } */\n+\n+extern void foo (_Decimal32);\n+_Decimal32 *p;\n+\n+extern int i;\n+union { _Decimal32 a; int b; } u;\n+\n+void\n+blatz (void)\n+{\n+  _Decimal32 d;\n+  u.b = i;\n+  d = u.a;\n+  foo (d);\n+}\n+\n+void\n+bar (void)\n+{\n+  foo (*p);\n+}"}]}