{"sha": "249be04bb830eae753c6171bb77c03872f5cee90", "node_id": "C_kwDOANBUbNoAKDI0OWJlMDRiYjgzMGVhZTc1M2M2MTcxYmI3N2MwMzg3MmY1Y2VlOTA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T14:18:23Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:42:08Z"}, "message": "RISC-V: Add vnmsub vv c++ api tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vnmsub_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnmsub_vv_tumu-3.C: New test.", "tree": {"sha": "a3e6f0eeb47bd2900ad20d3564c3078f98ad84c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3e6f0eeb47bd2900ad20d3564c3078f98ad84c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/249be04bb830eae753c6171bb77c03872f5cee90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/249be04bb830eae753c6171bb77c03872f5cee90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/249be04bb830eae753c6171bb77c03872f5cee90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/249be04bb830eae753c6171bb77c03872f5cee90/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ff4063f25813c27a8abcbb48d4bff7452f99af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff4063f25813c27a8abcbb48d4bff7452f99af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff4063f25813c27a8abcbb48d4bff7452f99af5"}], "stats": {"total": 5238, "additions": 5238, "deletions": 0}, "files": [{"sha": "bc2cf6c41ab5f528f449c07f50f0749bb0725c5a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv-1.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv-1.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub(vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub(vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub(vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub(vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub(vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub(vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub(vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub(vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub(vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub(vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub(vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub(vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub(vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub(vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub(vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub(vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub(vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub(vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub(vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub(vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub(vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub(vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub(vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub(vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub(vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub(vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub(vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub(vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub(vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub(vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub(vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub(vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub(vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub(vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub(vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub(vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub(vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub(vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub(vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub(vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub(vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub(vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub(vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub(vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnmsub(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "ffffaadaf4aea377c5ee5905d7a54ec7e743e0c8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv-2.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv-2.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub(vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub(vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub(vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub(vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub(vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub(vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub(vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub(vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub(vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub(vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub(vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub(vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub(vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub(vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub(vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub(vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub(vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub(vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub(vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub(vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub(vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub(vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub(vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub(vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub(vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub(vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub(vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub(vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub(vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub(vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub(vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub(vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub(vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub(vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub(vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub(vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub(vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub(vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub(vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub(vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub(vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub(vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub(vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub(vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnmsub(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "30b58e744f6cdd52b434d37819424533c5e98bc8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv-3.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv-3.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub(vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub(vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub(vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub(vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub(vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub(vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub(vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub(vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub(vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub(vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub(vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub(vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub(vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub(vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub(vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub(vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub(vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub(vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub(vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub(vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub(vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub(vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub(vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub(vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub(vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub(vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub(vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub(vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub(vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub(vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub(vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub(vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub(vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub(vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub(vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub(vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub(vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub(vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub(vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub(vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub(vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub(vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub(vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub(vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnmsub(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "2dc0eb4dd4ee6254d116c7bed5d75f165432d775", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_mu-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_mu-1.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_mu(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_mu(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_mu(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_mu(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_mu(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_mu(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_mu(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_mu(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_mu(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_mu(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_mu(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_mu(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_mu(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_mu(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_mu(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_mu(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_mu(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_mu(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_mu(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_mu(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_mu(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_mu(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_mu(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_mu(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_mu(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_mu(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_mu(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_mu(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_mu(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_mu(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_mu(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_mu(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_mu(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_mu(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_mu(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_mu(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_mu(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_mu(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_mu(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_mu(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_mu(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_mu(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_mu(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_mu(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "6bf2c439e08218441fb7c737f086d26e2ba35197", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_mu-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_mu-2.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_mu(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_mu(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_mu(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_mu(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_mu(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_mu(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_mu(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_mu(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_mu(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_mu(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_mu(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_mu(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_mu(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_mu(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_mu(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_mu(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_mu(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_mu(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_mu(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_mu(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_mu(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_mu(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_mu(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_mu(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_mu(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_mu(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_mu(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_mu(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_mu(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_mu(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_mu(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_mu(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_mu(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_mu(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_mu(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_mu(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_mu(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_mu(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_mu(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_mu(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_mu(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_mu(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_mu(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_mu(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "27549ddc002c7bbb6ed0b8458e0a5c2b1ae324a9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_mu-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_mu-3.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_mu(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_mu(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_mu(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_mu(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_mu(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_mu(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_mu(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_mu(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_mu(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_mu(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_mu(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_mu(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_mu(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_mu(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_mu(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_mu(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_mu(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_mu(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_mu(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_mu(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_mu(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_mu(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_mu(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_mu(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_mu(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_mu(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_mu(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_mu(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_mu(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_mu(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_mu(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_mu(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_mu(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_mu(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_mu(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_mu(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_mu(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_mu(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_mu(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_mu(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_mu(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_mu(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_mu(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_mu(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_mu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "2c870197a43fe7e763562c259828da254c99b43f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_tu-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tu-1.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_tu(vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_tu(vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_tu(vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_tu(vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_tu(vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_tu(vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_tu(vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_tu(vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_tu(vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_tu(vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_tu(vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_tu(vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_tu(vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_tu(vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_tu(vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_tu(vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_tu(vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_tu(vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_tu(vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_tu(vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_tu(vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_tu(vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_tu(vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_tu(vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_tu(vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_tu(vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_tu(vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_tu(vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_tu(vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_tu(vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_tu(vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_tu(vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_tu(vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_tu(vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_tu(vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_tu(vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_tu(vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_tu(vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_tu(vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_tu(vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_tu(vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_tu(vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_tu(vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_tu(vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "962307b655ecd1b73de30f0bca43333137cca648", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_tu-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tu-2.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_tu(vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_tu(vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_tu(vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_tu(vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_tu(vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_tu(vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_tu(vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_tu(vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_tu(vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_tu(vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_tu(vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_tu(vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_tu(vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_tu(vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_tu(vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_tu(vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_tu(vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_tu(vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_tu(vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_tu(vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_tu(vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_tu(vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_tu(vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_tu(vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_tu(vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_tu(vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_tu(vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_tu(vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_tu(vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_tu(vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_tu(vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_tu(vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_tu(vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_tu(vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_tu(vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_tu(vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_tu(vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_tu(vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_tu(vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_tu(vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_tu(vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_tu(vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_tu(vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_tu(vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "becf477e36001107313050f84a8c95bc62d5a4bb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_tu-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tu-3.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_tu(vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_tu(vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_tu(vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_tu(vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_tu(vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_tu(vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_tu(vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_tu(vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_tu(vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_tu(vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_tu(vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_tu(vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_tu(vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_tu(vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_tu(vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_tu(vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_tu(vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_tu(vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_tu(vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_tu(vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_tu(vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_tu(vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_tu(vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_tu(vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_tu(vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_tu(vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_tu(vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_tu(vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_tu(vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_tu(vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_tu(vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_tu(vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_tu(vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_tu(vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_tu(vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_tu(vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_tu(vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_tu(vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_tu(vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_tu(vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_tu(vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_tu(vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_tu(vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_tu(vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tu(vd,vs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "fc20cb74568e105fb156e0ce000e62c7478fa423", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_tum-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tum-1.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_tum(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_tum(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_tum(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_tum(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_tum(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_tum(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_tum(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_tum(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_tum(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_tum(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_tum(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_tum(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_tum(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_tum(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_tum(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_tum(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_tum(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_tum(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_tum(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_tum(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_tum(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_tum(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_tum(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_tum(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_tum(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_tum(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_tum(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_tum(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_tum(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_tum(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_tum(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_tum(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_tum(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_tum(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_tum(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_tum(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_tum(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_tum(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_tum(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_tum(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_tum(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_tum(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_tum(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_tum(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "9a78355d2fb60ddfda888be8444df52e650180e1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_tum-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tum-2.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_tum(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_tum(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_tum(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_tum(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_tum(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_tum(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_tum(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_tum(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_tum(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_tum(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_tum(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_tum(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_tum(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_tum(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_tum(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_tum(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_tum(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_tum(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_tum(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_tum(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_tum(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_tum(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_tum(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_tum(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_tum(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_tum(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_tum(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_tum(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_tum(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_tum(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_tum(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_tum(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_tum(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_tum(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_tum(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_tum(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_tum(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_tum(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_tum(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_tum(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_tum(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_tum(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_tum(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_tum(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "dc7f661fd1e74fd10bd1ad077ad9b9b756f426c8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_tum-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tum-3.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_tum(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_tum(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_tum(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_tum(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_tum(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_tum(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_tum(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_tum(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_tum(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_tum(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_tum(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_tum(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_tum(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_tum(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_tum(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_tum(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_tum(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_tum(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_tum(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_tum(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_tum(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_tum(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_tum(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_tum(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_tum(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_tum(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_tum(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_tum(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_tum(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_tum(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_tum(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_tum(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_tum(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_tum(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_tum(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_tum(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_tum(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_tum(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_tum(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_tum(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_tum(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_tum(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_tum(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_tum(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tum(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "d975e8a96e16666c69c8219fb0518d538929b388", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_tumu-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tumu-1.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_tumu(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_tumu(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_tumu(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_tumu(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_tumu(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_tumu(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_tumu(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_tumu(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_tumu(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_tumu(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_tumu(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_tumu(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_tumu(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_tumu(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_tumu(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_tumu(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_tumu(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_tumu(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_tumu(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_tumu(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_tumu(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_tumu(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_tumu(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_tumu(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_tumu(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_tumu(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_tumu(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_tumu(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "4d358945c6d65ddf2f5a8bd0c04a06d1c79c37fa", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_tumu-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tumu-2.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_tumu(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_tumu(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_tumu(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_tumu(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_tumu(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_tumu(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_tumu(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_tumu(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_tumu(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_tumu(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_tumu(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_tumu(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_tumu(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_tumu(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_tumu(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_tumu(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_tumu(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_tumu(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_tumu(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_tumu(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_tumu(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_tumu(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_tumu(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_tumu(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_tumu(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_tumu(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_tumu(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_tumu(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "b1fe4015463b327064f129b9c0d83a245e2dacb1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnmsub_vv_tumu-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be04bb830eae753c6171bb77c03872f5cee90/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnmsub_vv_tumu-3.C?ref=249be04bb830eae753c6171bb77c03872f5cee90", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnmsub_tumu(vbool64_t mask,vint8mf8_t vd,vint8mf8_t vs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnmsub_tumu(vbool32_t mask,vint8mf4_t vd,vint8mf4_t vs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnmsub_tumu(vbool16_t mask,vint8mf2_t vd,vint8mf2_t vs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnmsub_tumu(vbool8_t mask,vint8m1_t vd,vint8m1_t vs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnmsub_tumu(vbool4_t mask,vint8m2_t vd,vint8m2_t vs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnmsub_tumu(vbool2_t mask,vint8m4_t vd,vint8m4_t vs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnmsub_tumu(vbool1_t mask,vint8m8_t vd,vint8m8_t vs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnmsub_tumu(vbool64_t mask,vint16mf4_t vd,vint16mf4_t vs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnmsub_tumu(vbool32_t mask,vint16mf2_t vd,vint16mf2_t vs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnmsub_tumu(vbool16_t mask,vint16m1_t vd,vint16m1_t vs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnmsub_tumu(vbool8_t mask,vint16m2_t vd,vint16m2_t vs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnmsub_tumu(vbool4_t mask,vint16m4_t vd,vint16m4_t vs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnmsub_tumu(vbool2_t mask,vint16m8_t vd,vint16m8_t vs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnmsub_tumu(vbool64_t mask,vint32mf2_t vd,vint32mf2_t vs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnmsub_tumu(vbool32_t mask,vint32m1_t vd,vint32m1_t vs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnmsub_tumu(vbool16_t mask,vint32m2_t vd,vint32m2_t vs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnmsub_tumu(vbool8_t mask,vint32m4_t vd,vint32m4_t vs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnmsub_tumu(vbool4_t mask,vint32m8_t vd,vint32m8_t vs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnmsub_tumu(vbool64_t mask,vint64m1_t vd,vint64m1_t vs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnmsub_tumu(vbool32_t mask,vint64m2_t vd,vint64m2_t vs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnmsub_tumu(vbool16_t mask,vint64m4_t vd,vint64m4_t vs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnmsub_tumu(vbool8_t mask,vint64m8_t vd,vint64m8_t vs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint8mf8_t vd,vuint8mf8_t vs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint8mf4_t vd,vuint8mf4_t vs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint8mf2_t vd,vuint8mf2_t vs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint8m1_t vd,vuint8m1_t vs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnmsub_tumu(vbool4_t mask,vuint8m2_t vd,vuint8m2_t vs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnmsub_tumu(vbool2_t mask,vuint8m4_t vd,vuint8m4_t vs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vnmsub_tumu(vbool1_t mask,vuint8m8_t vd,vuint8m8_t vs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint16mf4_t vd,vuint16mf4_t vs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint16mf2_t vd,vuint16mf2_t vs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint16m1_t vd,vuint16m1_t vs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint16m2_t vd,vuint16m2_t vs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnmsub_tumu(vbool4_t mask,vuint16m4_t vd,vuint16m4_t vs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vnmsub_tumu(vbool2_t mask,vuint16m8_t vd,vuint16m8_t vs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint32mf2_t vd,vuint32mf2_t vs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint32m1_t vd,vuint32m1_t vs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint32m2_t vd,vuint32m2_t vs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint32m4_t vd,vuint32m4_t vs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vnmsub_tumu(vbool4_t mask,vuint32m8_t vd,vuint32m8_t vs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vnmsub_tumu(vbool64_t mask,vuint64m1_t vd,vuint64m1_t vs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vnmsub_tumu(vbool32_t mask,vuint64m2_t vd,vuint64m2_t vs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vnmsub_tumu(vbool16_t mask,vuint64m4_t vd,vuint64m4_t vs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vnmsub_tumu(vbool8_t mask,vuint64m8_t vd,vuint64m8_t vs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vnmsub_tumu(mask,vd,vs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnms[a-u][b-c]\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}]}