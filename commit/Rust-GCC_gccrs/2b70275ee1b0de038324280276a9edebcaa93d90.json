{"sha": "2b70275ee1b0de038324280276a9edebcaa93d90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI3MDI3NWVlMWIwZGUwMzgzMjQyODAyNzZhOWVkZWJjYWE5M2Q5MA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2020-01-02T00:57:31Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2020-01-02T00:57:31Z"}, "message": "PR 90374 d0.d, e0.d, es0.d, en0.d, g0.d and ew.d edit descriptors.\n\n        PR libfortran/90274\n        * io/format.c (parse_format_list): Implement the E0 exponent\n        width to provide smallest possible width for exponent fields.\n        Refactor code for correct parsing and better readability of the\n        code.\n        * io/io.h (write_real_w0): Change interface to pass in pointer\n        to fnode.\n        * io/transfer.c: Update all calls to write_real_w0 to use the\n        new interface.\n        * io/write.c ((write_real_w0): Use the new interface with fnode\n        to access both the decimal precision and exponent widths used in\n        build_float_string.\n        * io/write_float.def (build_float_string): Use the passed in\n        exponent width to calculate the used width in the case of E0.\n\nFrom-SVN: r279828", "tree": {"sha": "a506e71b83bed14cc440edf8ef11d427af41d8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a506e71b83bed14cc440edf8ef11d427af41d8c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b70275ee1b0de038324280276a9edebcaa93d90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b70275ee1b0de038324280276a9edebcaa93d90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b70275ee1b0de038324280276a9edebcaa93d90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b70275ee1b0de038324280276a9edebcaa93d90/comments", "author": null, "committer": null, "parents": [{"sha": "a7ff7c725076d1ad01f36404286e73d5069e9aab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ff7c725076d1ad01f36404286e73d5069e9aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ff7c725076d1ad01f36404286e73d5069e9aab"}], "stats": {"total": 270, "additions": 161, "deletions": 109}, "files": [{"sha": "1ccff579b4ed936728bbef7736ae7d680a39f5ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b70275ee1b0de038324280276a9edebcaa93d90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b70275ee1b0de038324280276a9edebcaa93d90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b70275ee1b0de038324280276a9edebcaa93d90", "patch": "@@ -1,3 +1,8 @@\n+2020-01-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/90374\n+\t* gfortran.dg/fmt_zero_width.f90: Update test case.\n+\n 2020-01-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/93113"}, {"sha": "db2cca6e28abcd7c8b16143cfdc1a51831171a54", "filename": "gcc/testsuite/gfortran.dg/fmt_zero_width.f90", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b70275ee1b0de038324280276a9edebcaa93d90/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_zero_width.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b70275ee1b0de038324280276a9edebcaa93d90/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_zero_width.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_zero_width.f90?ref=2b70275ee1b0de038324280276a9edebcaa93d90", "patch": "@@ -9,32 +9,34 @@ program pr90374\n   rn = 0.00314_4\n   afmt = \"(D0.3)\"\n   write (aresult,fmt=afmt) rn\n-  if (aresult /= \"0.314D-02\") stop 12\n+  if (aresult /= \"0.314D-2\") stop 12\n   afmt = \"(E0.10)\"\n   write (aresult,fmt=afmt) rn\n-  if (aresult /= \"0.3139999928E-02\") stop 15\n+  if (aresult /= \"0.3139999928E-2\") stop 15\n   afmt = \"(ES0.10)\"\n   write (aresult,fmt=afmt) rn\n-  if (aresult /= \"3.1399999280E-03\") stop 18\n+  if (aresult /= \"3.1399999280E-3\") stop 18\n   afmt = \"(EN0.10)\"\n   write (aresult,fmt=afmt) rn\n-  if (aresult /= \"3.1399999280E-03\") stop 21\n+  if (aresult /= \"3.1399999280E-3\") stop 21\n   afmt = \"(G0.10)\"\n   write (aresult,fmt=afmt) rn\n-  if (aresult /= \"0.3139999928E-02\") stop 24\n+  if (aresult /= \"0.3139999928E-2\") stop 24\n   afmt = \"(E0.10e0)\"\n   write (aresult,fmt=afmt) rn\n-  if (aresult /= \"0.3139999928E-02\") stop 27\n+  if (aresult /= \"0.3139999928E-2\") stop 27\n   write (aresult,fmt=\"(D0.3)\") rn\n-  if (aresult /= \"0.314D-02\") stop 29\n+  if (aresult /= \"0.314D-2\") stop 29\n   write (aresult,fmt=\"(E0.10)\") rn\n-  if (aresult /= \"0.3139999928E-02\") stop 31\n+  if (aresult /= \"0.3139999928E-2\") stop 31\n   write (aresult,fmt=\"(ES0.10)\") rn\n-  if (aresult /= \"3.1399999280E-03\") stop 33\n+  if (aresult /= \"3.1399999280E-3\") stop 33\n   write (aresult,fmt=\"(EN0.10)\") rn\n-  if (aresult /= \"3.1399999280E-03\") stop 35\n+  if (aresult /= \"3.1399999280E-3\") stop 35\n   write (aresult,fmt=\"(G0.10)\") rn\n-  if (aresult /= \"0.3139999928E-02\") stop 37\n+  if (aresult /= \"0.3139999928E-2\") stop 37\n   write (aresult,fmt=\"(E0.10e0)\") rn\n-  if (aresult /= \"0.3139999928E-02\") stop 39\n+  if (aresult /= \"0.3139999928E-2\") stop 39\n+  write (aresult,fmt=\"(E0.10e3)\") rn\n+  if (aresult /= \".3139999928E-002\") stop 41\n end"}, {"sha": "840642cd660fdffc2523281c4e863a96e3dbda6a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2b70275ee1b0de038324280276a9edebcaa93d90", "patch": "@@ -1,3 +1,20 @@\n+2020-01-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/90374\n+\t* io/format.c (parse_format_list): Implement the E0 exponent\n+\twidth to provide smallest possible width for exponent fields.\n+\tRefactor code for correct parsing and better readability of the\n+\tcode.\n+\t* io/io.h (write_real_w0): Change interface to pass in pointer\n+\tto fnode.\n+\t* io/transfer.c: Update all calls to write_real_w0 to use the\n+\tnew interface.\n+\t* io/write.c ((write_real_w0): Use the new interface with fnode\n+\tto access both the decimal precision and exponent widths used in\n+\tbuild_float_string.\n+\t* io/write_float.def (build_float_string): Use the passed in\n+\texponent width to calculate the used width in the case of E0.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "b42a5593e38a1ae548b5fc785c97da5b14810cd7", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 91, "deletions": 77, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=2b70275ee1b0de038324280276a9edebcaa93d90", "patch": "@@ -38,7 +38,7 @@ static const fnode colon_node = { FMT_COLON, 0, NULL, NULL, {{ 0, 0, 0 }}, 0,\n \n /* Error messages. */\n \n-static const char posint_required[] = \"Positive width required in format\",\n+static const char posint_required[] = \"Positive integer required in format\",\n   period_required[] = \"Period required in format\",\n   nonneg_required[] = \"Nonnegative width required in format\",\n   unexpected_element[] = \"Unexpected element '%c' in format\\n\",\n@@ -925,125 +925,139 @@ parse_format_list (st_parameter_dt *dtp, bool *seen_dd)\n       tail->repeat = repeat;\n \n       u = format_lex (fmt);\n+      \n+      /* Processing for zero width formats.  */\n       if (u == FMT_ZERO)\n \t{\n-\t  *seen_dd = true;\n \t  if (notification_std (GFC_STD_F2008) == NOTIFICATION_ERROR\n \t      || dtp->u.p.mode == READING)\n \t    {\n \t      fmt->error = zero_width;\n \t      goto finished;\n \t    }\n \t  tail->u.real.w = 0;\n+\n+\t  /* Look for the dot seperator.  */\n \t  u = format_lex (fmt);\n \t  if (u != FMT_PERIOD)\n \t    {\n \t      fmt->saved_token = u;\n \t      break;\n \t    }\n \n+\t  /* Look for the precision.  */\n \t  u = format_lex (fmt);\n-\t  if (u != FMT_POSINT)\n-\t    notify_std (&dtp->common, GFC_STD_F2003,\n-\t\t\t\"Positive width required\");\n+\t  if (u != FMT_ZERO && u != FMT_POSINT)\n+\t    {\n+\t      fmt->error = nonneg_required;\n+\t      goto finished;\n+\t    }\n \t  tail->u.real.d = fmt->value;\n-\t  break;\n-\t}\n-      if (t == FMT_F && dtp->u.p.mode == WRITING)\n-\t{\n-\t  *seen_dd = true;\n-\t  if (u != FMT_POSINT && u != FMT_ZERO)\n+\t  \n+\t  /* Look for optional exponent */\n+\t  u = format_lex (fmt);\n+\t  if (u != FMT_E)\n+\t    fmt->saved_token = u;\n+\t  else\n \t    {\n-\t      if (dtp->common.flags & IOPARM_DT_DEC_EXT)\n+\t      u = format_lex (fmt);\n+\t      if (u != FMT_POSINT)\n \t\t{\n-\t\t  tail->u.real.w = DEFAULT_WIDTH;\n-\t\t  tail->u.real.d = 0;\n-\t\t  tail->u.real.e = -1;\n-\t\t  fmt->saved_token = u;\n-\t\t  break;\n+\t\t  if (u == FMT_ZERO)\n+\t\t    {\n+\t\t      notify_std (&dtp->common, GFC_STD_F2018,\n+\t\t\t\t  \"Positive exponent width required\");\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      fmt->error = \"Positive exponent width required in \"\n+\t\t\t\t   \"format string at %L\";\n+\t\t      goto finished;\n+\t\t    }\n \t\t}\n-\t      fmt->error = nonneg_required;\n-\t      goto finished;\n+\t      tail->u.real.e = fmt->value;\n \t    }\n+\t  break;\n \t}\n-      else if (u == FMT_ZERO)\n-\t{\n-\t  fmt->error = posint_required;\n-\t  goto finished;\n-\t}\n-      else if (u != FMT_POSINT)\n+\n+      /* Processing for positive width formats.  */\n+      if (u == FMT_POSINT)\n \t{\n-\t  if (dtp->common.flags & IOPARM_DT_DEC_EXT)\n+\t  tail->u.real.w = fmt->value;\n+\n+\t  /* Look for the dot separator. Because of legacy behaviors\n+\t     we do some look ahead for missing things.  */\n+\t  t2 = t;\n+\t  t = format_lex (fmt);\n+\t  if (t != FMT_PERIOD)\n \t    {\n-\t      tail->u.real.w = DEFAULT_WIDTH;\n+\t      /* We treat a missing decimal descriptor as 0.  Note: This is only\n+\t\t allowed if -std=legacy, otherwise an error occurs.  */\n+\t      if (compile_options.warn_std != 0)\n+\t\t{\n+\t\t  fmt->error = period_required;\n+\t\t  goto finished;\n+\t\t}\n+\t      fmt->saved_token = t;\n \t      tail->u.real.d = 0;\n \t      tail->u.real.e = -1;\n-\t      fmt->saved_token = u;\n \t      break;\n \t    }\n-\t  fmt->error = posint_required;\n-\t  goto finished;\n-\t}\n \n-      tail->u.real.w = fmt->value;\n-      t2 = t;\n-      t = format_lex (fmt);\n-      if (t != FMT_PERIOD)\n-\t{\n-\t  /* We treat a missing decimal descriptor as 0.  Note: This is only\n-\t     allowed if -std=legacy, otherwise an error occurs.  */\n-\t  if (compile_options.warn_std != 0)\n+\t  /* If we made it here, we should have the dot so look for the\n+\t     precision.  */\n+\t  t = format_lex (fmt);\n+\t  if (t != FMT_ZERO && t != FMT_POSINT)\n \t    {\n-\t      fmt->error = period_required;\n+\t      fmt->error = nonneg_required;\n \t      goto finished;\n \t    }\n-\t  fmt->saved_token = t;\n-\t  tail->u.real.d = 0;\n+\t  tail->u.real.d = fmt->value;\n \t  tail->u.real.e = -1;\n-\t  break;\n-\t}\n-\n-      t = format_lex (fmt);\n-      if (t != FMT_ZERO && t != FMT_POSINT)\n-\t{\n-\t  fmt->error = nonneg_required;\n-\t  goto finished;\n-\t}\n-\n-      tail->u.real.d = fmt->value;\n-      tail->u.real.e = -1;\n \n-      if (t2 == FMT_D || t2 == FMT_F)\n-\t{\n-\t  *seen_dd = true;\n-\t  break;\n-\t}\n+\t  /* Done with D and F formats.  */\n+\t  if (t2 == FMT_D || t2 == FMT_F)\n+\t    {\n+\t      *seen_dd = true;\n+\t      break;\n+\t    }\n \n-      /* Look for optional exponent */\n-      t = format_lex (fmt);\n-      if (t != FMT_E)\n-\tfmt->saved_token = t;\n-      else\n-\t{\n-\t  t = format_lex (fmt);\n-\t  if (t != FMT_POSINT)\n+\t  /* Look for optional exponent */\n+\t  u = format_lex (fmt);\n+\t  if (u != FMT_E)\n+\t    fmt->saved_token = u;\n+\t  else\n \t    {\n-\t      if (t == FMT_ZERO)\n+\t      u = format_lex (fmt);\n+\t      if (u != FMT_POSINT)\n \t\t{\n-\t\t  notify_std (&dtp->common, GFC_STD_F2018,\n-\t\t\t      \"Positive exponent width required\");\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  fmt->error = \"Positive exponent width required in \"\n-\t\t\t       \"format string at %L\";\n-\t\t  goto finished;\n+\t\t  if (u == FMT_ZERO)\n+\t\t    {\n+\t\t      notify_std (&dtp->common, GFC_STD_F2018,\n+\t\t\t\t  \"Positive exponent width required\");\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      fmt->error = \"Positive exponent width required in \"\n+\t\t\t\t   \"format string at %L\";\n+\t\t      goto finished;\n+\t\t    }\n \t\t}\n+\t      tail->u.real.e = fmt->value;\n \t    }\n-\t  tail->u.real.e = fmt->value;\n+\t  break;\n \t}\n \n+      /* Old DEC codes may not have width or precision specified.  */\n+      if (dtp->u.p.mode == WRITING && (dtp->common.flags & IOPARM_DT_DEC_EXT))\n+\t{\n+\t  tail->u.real.w = DEFAULT_WIDTH;\n+\t  tail->u.real.d = 0;\n+\t  tail->u.real.e = -1;\n+\t  fmt->saved_token = u;\n+\t}\n       break;\n+\n     case FMT_DT:\n       *seen_dd = true;\n       get_fnode (fmt, &head, &tail, t);"}, {"sha": "ab4a103787c1534be26395f366b29b4a10c473ea", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=2b70275ee1b0de038324280276a9edebcaa93d90", "patch": "@@ -942,7 +942,7 @@ internal_proto(write_o);\n extern void write_real (st_parameter_dt *, const char *, int);\n internal_proto(write_real);\n \n-extern void write_real_w0 (st_parameter_dt *, const char *, int, format_token, int);\n+extern void write_real_w0 (st_parameter_dt *, const char *, int, const fnode*);\n internal_proto(write_real_w0);\n \n extern void write_x (st_parameter_dt *, int, int);"}, {"sha": "b8db47dbff9dbe03fbd990424a0134c98521c2c0", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=2b70275ee1b0de038324280276a9edebcaa93d90", "patch": "@@ -2009,7 +2009,7 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (require_type (dtp, BT_REAL, type, f))\n \t    return;\n \t  if (f->u.real.w == 0)\n-\t    write_real_w0 (dtp, p, kind, FMT_D, f->u.real.d);\n+\t    write_real_w0 (dtp, p, kind, f);\n \t  else\n \t    write_d (dtp, f, p, kind);\n \t  break;\n@@ -2075,7 +2075,7 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (require_type (dtp, BT_REAL, type, f))\n \t    return;\n \t  if (f->u.real.w == 0)\n-\t    write_real_w0 (dtp, p, kind, FMT_E, f->u.real.d);\n+\t    write_real_w0 (dtp, p, kind, f);\n \t  else\n \t    write_e (dtp, f, p, kind);\n \t  break;\n@@ -2086,7 +2086,7 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (require_type (dtp, BT_REAL, type, f))\n \t    return;\n \t  if (f->u.real.w == 0)\n-\t    write_real_w0 (dtp, p, kind, FMT_EN, f->u.real.d);\n+\t    write_real_w0 (dtp, p, kind, f);\n \t  else\n \t    write_en (dtp, f, p, kind);\n \t  break;\n@@ -2097,7 +2097,7 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (require_type (dtp, BT_REAL, type, f))\n \t    return;\n \t  if (f->u.real.w == 0)\n-\t    write_real_w0 (dtp, p, kind, FMT_ES, f->u.real.d);\n+\t    write_real_w0 (dtp, p, kind, f);\n \t  else\n \t    write_es (dtp, f, p, kind);\n \t  break;\n@@ -2129,7 +2129,7 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t\tbreak;\n \t      case BT_REAL:\n \t\tif (f->u.real.w == 0)\n-\t\t  write_real_w0 (dtp, p, kind, FMT_G, f->u.real.d);\n+\t\t  write_real_w0 (dtp, p, kind, f);\n \t\telse\n \t\t  write_d (dtp, f, p, kind);\n \t\tbreak;"}, {"sha": "9f02683a25c61388834f0872b54b6731ce168056", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=2b70275ee1b0de038324280276a9edebcaa93d90", "patch": "@@ -1721,42 +1721,46 @@ write_real (st_parameter_dt *dtp, const char *source, int kind)\n \n void\n write_real_w0 (st_parameter_dt *dtp, const char *source, int kind,\n-\t       format_token fmt, int d)\n+\t       const fnode* f)\n {\n-  fnode f;\n+  fnode ff;\n   char buf_stack[BUF_STACK_SZ];\n   char str_buf[BUF_STACK_SZ];\n   char *buffer, *result;\n   size_t buf_size, res_len, flt_str_len;\n   int comp_d = 0;\n-  set_fnode_default (dtp, &f, kind);\n \n-  if (d > 0)\n-    f.u.real.d = d;\n-  f.format = fmt;\n+  set_fnode_default (dtp, &ff, kind);\n+\n+  if (f->u.real.d > 0)\n+    ff.u.real.d = f->u.real.d;\n+  ff.format = f->format;\n \n   /* For FMT_G, Compensate for extra digits when using scale factor, d\n      is not specified, and the magnitude is such that E editing\n      is used.  */\n-  if (fmt == FMT_G)\n+  if (f->format == FMT_G)\n     {\n-      if (dtp->u.p.scale_factor > 0 && d == 0)\n+      if (dtp->u.p.scale_factor > 0 && f->u.real.d == 0)\n \tcomp_d = 1;\n       else\n \tcomp_d = 0;\n     }\n \n+  if (f->u.real.e >= 0)\n+    ff.u.real.e = f->u.real.e;\n+\n   dtp->u.p.g0_no_blanks = 1;\n \n   /* Precision for snprintf call.  */\n-  int precision = get_precision (dtp, &f, source, kind);\n+  int precision = get_precision (dtp, &ff, source, kind);\n \n   /* String buffer to hold final result.  */\n-  result = select_string (dtp, &f, str_buf, &res_len, kind);\n+  result = select_string (dtp, &ff, str_buf, &res_len, kind);\n \n-  buffer = select_buffer (dtp, &f, precision, buf_stack, &buf_size, kind);\n+  buffer = select_buffer (dtp, &ff, precision, buf_stack, &buf_size, kind);\n \n-  get_float_string (dtp, &f, source , kind, comp_d, buffer,\n+  get_float_string (dtp, &ff, source , kind, comp_d, buffer,\n \t\t    precision, buf_size, result, &flt_str_len);\n   write_float_string (dtp, result, flt_str_len);\n "}, {"sha": "75c7942c4c5cb9199d148695e587901836806072", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b70275ee1b0de038324280276a9edebcaa93d90/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=2b70275ee1b0de038324280276a9edebcaa93d90", "patch": "@@ -266,7 +266,7 @@ build_float_string (st_parameter_dt *dtp, const fnode *f, char *buffer,\n     case FMT_E:\n     case FMT_D:\n       i = dtp->u.p.scale_factor;\n-      if (d <= 0 && p == 0)\n+      if (d < 0 && p == 0)\n \t{\n \t  generate_error (&dtp->common, LIBERROR_FORMAT, \"Precision not \"\n \t\t\t  \"greater than zero in format specifier 'E' or 'D'\");\n@@ -482,7 +482,7 @@ build_float_string (st_parameter_dt *dtp, const fnode *f, char *buffer,\n       for (i = abs (e); i >= 10; i /= 10)\n \tedigits++;\n \n-      if (f->u.real.e <= 0)\n+      if (f->u.real.e < 0)\n \t{\n \t  /* Width not specified.  Must be no more than 3 digits.  */\n \t  if (e > 999 || e < -999)\n@@ -494,6 +494,16 @@ build_float_string (st_parameter_dt *dtp, const fnode *f, char *buffer,\n \t\texpchar = ' ';\n \t    }\n \t}\n+      else if (f->u.real.e == 0)\n+\t{\n+\t  /* Zero width specified, no leading zeros in exponent  */\n+\t  if (e > 99 || e < -99)\n+\t    edigits = 5;\n+\t  else if (e > 9 || e < -9)\n+\t    edigits = 4;\n+\t  else\n+\t    edigits = 3;\n+\t}\n       else\n \t{\n \t  /* Exponent width specified, check it is wide enough.  */"}]}