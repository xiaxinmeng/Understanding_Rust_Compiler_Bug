{"sha": "5a527952159edc4505c450047b57256d9c7d89d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1Mjc5NTIxNTllZGM0NTA1YzQ1MDA0N2I1NzI1NmQ5YzdkODlkNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-14T12:36:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-14T12:36:01Z"}, "message": "[multiple changes]\n\n2016-06-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch7.adb, sem_ch12.adb, freeze.adb, lib-xref.ads, exp_ch3.adb:\n\tMinor reformatting.\n\n2016-06-14  Bob Duff  <duff@adacore.com>\n\n\t* sem_elab.adb: Do nothing if the callee is intrinsic.\n\t* sinfo.ads, einfo.ads: Minor comment fixes.\n\nFrom-SVN: r237436", "tree": {"sha": "908835d4c7e8ae3300272e5bbcb51e1fcbb634e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/908835d4c7e8ae3300272e5bbcb51e1fcbb634e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a527952159edc4505c450047b57256d9c7d89d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a527952159edc4505c450047b57256d9c7d89d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a527952159edc4505c450047b57256d9c7d89d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a527952159edc4505c450047b57256d9c7d89d7/comments", "author": null, "committer": null, "parents": [{"sha": "7782ff677140c37402dc51fa711dff12950bc8c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7782ff677140c37402dc51fa711dff12950bc8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7782ff677140c37402dc51fa711dff12950bc8c8"}], "stats": {"total": 117, "additions": 65, "deletions": 52}, "files": [{"sha": "26b488a080940fa3da38dae22f947f7edb930188", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5a527952159edc4505c450047b57256d9c7d89d7", "patch": "@@ -1,3 +1,13 @@\n+2016-06-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch7.adb, sem_ch12.adb, freeze.adb, lib-xref.ads, exp_ch3.adb:\n+\tMinor reformatting.\n+\n+2016-06-14  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_elab.adb: Do nothing if the callee is intrinsic.\n+\t* sinfo.ads, einfo.ads: Minor comment fixes.\n+\n 2016-06-14  Ed Schonberg  <schonberg@adacore.com>\n \n \t* contracts.adb (Has_Null_Body): Move to sem_util, for general"}, {"sha": "19e40871c97bae93279ee77aa027d3ee391b3c7f", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=5a527952159edc4505c450047b57256d9c7d89d7", "patch": "@@ -2675,13 +2675,14 @@ package Einfo is\n \n --    Is_Intrinsic_Subprogram (Flag64)\n --       Defined in functions and procedures. It is set if a valid pragma\n---       Interface or Import is present for this subprogram specifying pragma\n---       Intrinsic. Valid means that the name and profile of the subprogram\n---       match the requirements of one of the recognized intrinsic subprograms\n---       (see package Sem_Intr for details). Note: the value of Convention for\n---       such an entity will be set to Convention_Intrinsic, but it is the\n---       setting of Is_Intrinsic_Subprogram, NOT simply having convention set\n---       to intrinsic, which causes intrinsic code to be generated.\n+--       Interface or Import is present for this subprogram specifying\n+--       convention Intrinsic. Valid means that the name and profile of the\n+--       subprogram match the requirements of one of the recognized intrinsic\n+--       subprograms (see package Sem_Intr for details). Note: the value of\n+--       Convention for such an entity will be set to Convention_Intrinsic,\n+--       but it is the setting of Is_Intrinsic_Subprogram, NOT simply having\n+--       convention set to intrinsic, which causes intrinsic code to be\n+--       generated.\n \n --    Is_Invariant_Procedure (Flag257)\n --       Defined in functions and procedures. Set for a generated invariant"}, {"sha": "7f98b91d23d8543d8fbb0f95b36966c9cc5fffb5", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=5a527952159edc4505c450047b57256d9c7d89d7", "patch": "@@ -3700,28 +3700,28 @@ package body Exp_Ch3 is\n       --  Recursive procedure that generates a list of checks for components\n       --  that need it, and recurses through variant parts when present.\n \n-      function Build_Component_Invariant_Call (Comp : Entity_Id)\n-      return Node_Id;\n-      --  Build call to invariant procedure for a record component.\n+      function Build_Component_Invariant_Call\n+        (Comp : Entity_Id) return Node_Id;\n+      --  Build call to invariant procedure for a record component\n \n       ------------------------------------\n       -- Build_Component_Invariant_Call --\n       ------------------------------------\n \n-      function Build_Component_Invariant_Call (Comp : Entity_Id)\n-      return Node_Id\n+      function Build_Component_Invariant_Call\n+        (Comp : Entity_Id) return Node_Id\n       is\n-         Sel_Comp : Node_Id;\n-         Typ      : Entity_Id;\n          Call     : Node_Id;\n          Proc     : Entity_Id;\n+         Sel_Comp : Node_Id;\n+         Typ      : Entity_Id;\n \n       begin\n          Typ := Etype (Comp);\n \n          Sel_Comp :=\n            Make_Selected_Component (Loc,\n-             Prefix      => New_Occurrence_Of (Object_Entity, Loc),\n+             Prefix        => New_Occurrence_Of (Object_Entity, Loc),\n              Selector_Name => New_Occurrence_Of (Comp, Loc));\n \n          if Is_Access_Type (Typ) then\n@@ -3759,13 +3759,14 @@ package body Exp_Ch3 is\n          if Is_Access_Type (Etype (Comp)) then\n             Call :=\n               Make_If_Statement (Loc,\n-                Condition =>\n+                Condition       =>\n                   Make_Op_Ne (Loc,\n                     Left_Opnd   => Make_Null (Loc),\n                     Right_Opnd  =>\n-                       Make_Selected_Component (Loc,\n-                         Prefix      => New_Occurrence_Of (Object_Entity, Loc),\n-                         Selector_Name => New_Occurrence_Of (Comp, Loc))),\n+                      Make_Selected_Component (Loc,\n+                        Prefix        =>\n+                          New_Occurrence_Of (Object_Entity, Loc),\n+                        Selector_Name => New_Occurrence_Of (Comp, Loc))),\n                 Then_Statements => New_List (Call));\n          end if;\n \n@@ -4620,10 +4621,8 @@ package body Exp_Ch3 is\n \n          Propagate_Type_Has_Flags (Base, Comp_Typ);\n          Set_Has_Controlled_Component\n-                              (Base, Has_Controlled_Component\n-                                                 (Comp_Typ)\n-                                       or else\n-                                     Is_Controlled (Comp_Typ));\n+           (Base, Has_Controlled_Component (Comp_Typ)\n+                    or else Is_Controlled (Comp_Typ));\n \n          if No (Init_Proc (Base)) then\n "}, {"sha": "046fd1516a8a9976e0522d96754ad91625c2374d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=5a527952159edc4505c450047b57256d9c7d89d7", "patch": "@@ -1161,11 +1161,13 @@ package body Freeze is\n       ADC              : Node_Id;\n       Comp_ADC_Present : out Boolean)\n    is\n-      Encl_Base : Entity_Id;\n       Comp_Base : Entity_Id;\n       Comp_ADC  : Node_Id;\n+      Encl_Base : Entity_Id;\n       Err_Node  : Node_Id;\n \n+      Component_Aliased : Boolean;\n+\n       Comp_Byte_Aligned : Boolean;\n       --  Set for the record case, True if Comp starts on a byte boundary\n       --  (in which case it is allowed to have different storage order).\n@@ -1174,8 +1176,6 @@ package body Freeze is\n       --  Set True when the component is a nested composite, and it does not\n       --  have the same scalar storage order as Encl_Type.\n \n-      Component_Aliased : Boolean;\n-\n    begin\n       --  Record case\n \n@@ -1226,9 +1226,9 @@ package body Freeze is\n          Comp_Base := Underlying_Type (Comp_Base);\n       end if;\n \n-      Comp_ADC := Get_Attribute_Definition_Clause\n-                    (First_Subtype (Comp_Base),\n-                     Attribute_Scalar_Storage_Order);\n+      Comp_ADC :=\n+        Get_Attribute_Definition_Clause\n+          (First_Subtype (Comp_Base), Attribute_Scalar_Storage_Order);\n       Comp_ADC_Present := Present (Comp_ADC);\n \n       --  Case of record or array component: check storage order compatibility.\n@@ -1240,9 +1240,8 @@ package body Freeze is\n         or else Is_Array_Type (Comp_Base)\n       then\n          Comp_SSO_Differs :=\n-           Reverse_Storage_Order (Encl_Base)\n-             /=\n-           Reverse_Storage_Order (Comp_Base);\n+           Reverse_Storage_Order (Encl_Base) /=\n+             Reverse_Storage_Order (Comp_Base);\n \n          --  Parent and extension must have same storage order\n "}, {"sha": "a6b96767eefdd111e61f658078944a4567d01254", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=5a527952159edc4505c450047b57256d9c7d89d7", "patch": "@@ -614,9 +614,9 @@ package Lib.Xref is\n    --  This procedure is called from Frontend to process these table entries\n \n    function Has_Deferred_Reference (Ent : Entity_Id) return Boolean;\n-   --  This function determines whether an entity has a pending reference, in\n-   --  order to suppress premature warnings about useless assignments. See\n-   --  comments in Analyze_Assignment in sem-ch5.adb.\n+   --  Determine whether arbitrary entity Ent has a pending reference in order\n+   --  to suppress premature warnings about useless assignments. See comments\n+   --  in Analyze_Assignment in sem_ch5.adb.\n \n    -----------------------------\n    -- SPARK Xrefs Information --"}, {"sha": "5d5e2dd318f48fac612f6d3a3b3480e93f3433d6", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=5a527952159edc4505c450047b57256d9c7d89d7", "patch": "@@ -1500,9 +1500,8 @@ package body Sem_Ch12 is\n          --  correspond to some formal in the generic.\n \n          if Nkind (Named) /= N_Others_Choice\n-           and then\n-             (Present (Explicit_Generic_Actual_Parameter (Named))\n-               or else Box_Present (Named))\n+           and then (Present (Explicit_Generic_Actual_Parameter (Named))\n+                      or else Box_Present (Named))\n          then\n             Num_Actuals := Num_Actuals + 1;\n          end if;"}, {"sha": "8c318fddc73d8d9fc3a3540359a9550944c24ca6", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=5a527952159edc4505c450047b57256d9c7d89d7", "patch": "@@ -2586,7 +2586,7 @@ package body Sem_Ch7 is\n                               (Priv, Finalize_Storage_Only\n                                                    (Base_Type (Full)));\n             Propagate_Type_Has_Flags\n-                              (Priv, Base_Type (Full));\n+                              (Priv,                Base_Type (Full));\n             Set_Has_Controlled_Component\n                               (Priv, Has_Controlled_Component\n                                                    (Base_Type (Full)));"}, {"sha": "783f6dda2063b501b600483e9763055865208928", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=5a527952159edc4505c450047b57256d9c7d89d7", "patch": "@@ -641,6 +641,13 @@ package body Sem_Elab is\n          return;\n       end if;\n \n+      --  Intrinsics such as instances of Unchecked_Deallocation do not have\n+      --  any body, so elaboration checking is not needed, and would be wrong.\n+\n+      if Is_Intrinsic_Subprogram (E) then\n+         return;\n+      end if;\n+\n       --  Proceed with check\n \n       Ent := E;"}, {"sha": "4e8d51a41ae106fdbc7df46641d2a6075138de84", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a527952159edc4505c450047b57256d9c7d89d7/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=5a527952159edc4505c450047b57256d9c7d89d7", "patch": "@@ -4119,7 +4119,7 @@ package Sinfo is\n       --  treated as though it were Empty) if No_Initialization is set True.\n \n       --------------------------------------\n-      -- 4.5  Short Circuit Control Forms --\n+      -- 4.5  Short-Circuit Control Forms --\n       --------------------------------------\n \n       --  EXPRESSION ::=\n@@ -7677,7 +7677,7 @@ package Sinfo is\n       -----------------------------\n \n       --  This node is created by the analyzer/expander to handle some\n-      --  expansion cases, notably short circuit forms where there are\n+      --  expansion cases, notably short-circuit forms where there are\n       --  actions associated with the right-hand side operand.\n \n       --  The N_Expression_With_Actions node represents an expression with\n@@ -7884,17 +7884,15 @@ package Sinfo is\n       --  same as the type of the subexpression which it replaces.\n \n       --  If Condition is empty, then the raise is unconditional. If the\n-      --  Condition field is non-empty, it is a boolean expression which\n-      --  is first evaluated, and the exception is raised only if the\n-      --  value of the expression is True. In the unconditional case, the\n-      --  creation of this node is usually accompanied by a warning message\n-      --  error. The creation of this node will usually be accompanied by a\n-      --  message (unless it appears within the right operand of a short\n-      --  circuit form whose left argument is static and decisively\n-      --  eliminates elaboration of the raise operation. The condition field\n-      --  can ONLY be present when the node is used as a statement form, it\n-      --  may NOT be present in the case where the node appears within an\n-      --  expression.\n+      --  Condition field is non-empty, it is a boolean expression which is\n+      --  first evaluated, and the exception is raised only if the value of the\n+      --  expression is True. In the unconditional case, the creation of this\n+      --  node is usually accompanied by a warning message (unless it appears\n+      --  within the right operand of a short-circuit form whose left argument\n+      --  is static and decisively eliminates elaboration of the raise\n+      --  operation). The condition field can ONLY be present when the node is\n+      --  used as a statement form; it must NOT be present in the case where\n+      --  the node appears within an expression.\n \n       --  The exception is generated with a message that contains the\n       --  file name and line number, and then appended text. The Reason"}]}