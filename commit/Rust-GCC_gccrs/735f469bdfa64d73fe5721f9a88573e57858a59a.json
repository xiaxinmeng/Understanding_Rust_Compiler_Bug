{"sha": "735f469bdfa64d73fe5721f9a88573e57858a59a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM1ZjQ2OWJkZmE2NGQ3M2ZlNTcyMWY5YTg4NTczZTU3ODU4YTU5YQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2011-11-04T09:11:27Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2011-11-04T09:11:27Z"}, "message": "alpha.c (alpha_write_linkage): Remove fundecl argument.\n\n2011-11-04  Tristan Gingold  <gingold@adacore.com>\n\n\t* config/alpha/alpha.c (alpha_write_linkage): Remove fundecl\n\targument.  Conditionally generate crash debug info.  Adjust\n\tfor alpha_funcs_tree removal.\n\t(machine_function): Add links field.\n\t(alpha_start_function): Conditionally generate crash debug info.\n\t(alpha_end_function): Adjust call to alpha_write_linkage.\n\t(alpha_funcs): Remove.\n\t(links_kind): Remove.\n\t(alpha_links): Remove num, target and lkind field.  Add func field.\n\t(alpha_links_tree): Remove.\n\t(alpha_funcs_tree): Remove.\n\t(alpha_need_linkage): Remove.\n\t(alpha_use_linkage): Change prototype.  Adjust.\n\t(alpha_write_one_linkage): Use ASM_OUTPUT_INTERNAL_LABEL.\n\tUse SYMBOL_REF_EXTERNAL_P and SYMBOL_REF_LOCAL_P macro.\n\t* config/alpha/alpha-protos.h (alpha_use_linkage): Update.\n\t(alpha_need_linkage): Remove.\n\t* config/alpha/alpha.md: Update calls to alpha_use_linkage.\n\tAdjust calls to alpha_need_linkage.\n\nFrom-SVN: r180928", "tree": {"sha": "5872b26a85ba3f03da81f01c2a0852daaaca5ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5872b26a85ba3f03da81f01c2a0852daaaca5ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/735f469bdfa64d73fe5721f9a88573e57858a59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735f469bdfa64d73fe5721f9a88573e57858a59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/735f469bdfa64d73fe5721f9a88573e57858a59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735f469bdfa64d73fe5721f9a88573e57858a59a/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75118c2eadecda75a2b9573fb6985fe841505ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75118c2eadecda75a2b9573fb6985fe841505ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75118c2eadecda75a2b9573fb6985fe841505ad0"}], "stats": {"total": 283, "additions": 80, "deletions": 203}, "files": [{"sha": "13e409788f6938cfd3620408fab08f923506984d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735f469bdfa64d73fe5721f9a88573e57858a59a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735f469bdfa64d73fe5721f9a88573e57858a59a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=735f469bdfa64d73fe5721f9a88573e57858a59a", "patch": "@@ -1,3 +1,25 @@\n+2011-11-04  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config/alpha/alpha.c (alpha_write_linkage): Remove fundecl\n+\targument.  Conditionally generate crash debug info.  Adjust\n+\tfor alpha_funcs_tree removal.\n+\t(machine_function): Add links field.\n+\t(alpha_start_function): Conditionally generate crash debug info.\n+\t(alpha_end_function): Adjust call to alpha_write_linkage.\n+\t(alpha_funcs): Remove.\n+\t(links_kind): Remove.\n+\t(alpha_links): Remove num, target and lkind field.  Add func field.\n+\t(alpha_links_tree): Remove.\n+\t(alpha_funcs_tree): Remove.\n+\t(alpha_need_linkage): Remove.\n+\t(alpha_use_linkage): Change prototype.  Adjust.\n+\t(alpha_write_one_linkage): Use ASM_OUTPUT_INTERNAL_LABEL.\n+\tUse SYMBOL_REF_EXTERNAL_P and SYMBOL_REF_LOCAL_P macro.\n+\t* config/alpha/alpha-protos.h (alpha_use_linkage): Update.\n+\t(alpha_need_linkage): Remove.\n+\t* config/alpha/alpha.md: Update calls to alpha_use_linkage.\n+\tAdjust calls to alpha_need_linkage.\n+\n 2011-11-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* sched-vis.c (print_value): Handle STRICT_LOW_PART."}, {"sha": "31551689a2702459946889d3bd447b8e880cb220", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735f469bdfa64d73fe5721f9a88573e57858a59a/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735f469bdfa64d73fe5721f9a88573e57858a59a/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=735f469bdfa64d73fe5721f9a88573e57858a59a", "patch": "@@ -99,8 +99,7 @@ extern void alpha_split_lock_test_and_set_12 (enum machine_mode, rtx, rtx,\n \t\t\t\t\t      rtx, rtx, rtx);\n #endif\n \n-extern rtx alpha_need_linkage (const char *, int);\n-extern rtx alpha_use_linkage (rtx, tree, int, int);\n+extern rtx alpha_use_linkage (rtx, bool, bool);\n \n #if TARGET_ABI_OPEN_VMS\n extern enum avms_arg_type alpha_arg_type (enum machine_mode);"}, {"sha": "682e5beafbfecb73362e3c0a4c249df34c8a4db6", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 49, "deletions": 189, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735f469bdfa64d73fe5721f9a88573e57858a59a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735f469bdfa64d73fe5721f9a88573e57858a59a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=735f469bdfa64d73fe5721f9a88573e57858a59a", "patch": "@@ -196,7 +196,7 @@ static struct machine_function *alpha_init_machine_status (void);\n static rtx alpha_emit_xfloating_compare (enum rtx_code *, rtx, rtx);\n \n #if TARGET_ABI_OPEN_VMS\n-static void alpha_write_linkage (FILE *, const char *, tree);\n+static void alpha_write_linkage (FILE *, const char *);\n static bool vms_valid_pointer_mode (enum machine_mode);\n #else\n #define vms_patch_builtins()  gcc_unreachable()\n@@ -4509,6 +4509,8 @@ alpha_multipass_dfa_lookahead (void)\n \f\n /* Machine-specific function data.  */\n \n+struct GTY(()) alpha_links;\n+\n struct GTY(()) machine_function\n {\n   /* For OSF.  */\n@@ -4518,7 +4520,11 @@ struct GTY(()) machine_function\n   rtx gp_save_rtx;\n \n   /* For VMS condition handlers.  */\n-  bool uses_condition_handler;  \n+  bool uses_condition_handler;\n+\n+  /* Linkage entries.  */\n+  splay_tree GTY ((param1_is (char *), param2_is (struct alpha_links *)))\n+    links;\n };\n \n /* How to allocate a 'struct machine_function'.  */\n@@ -7862,16 +7868,17 @@ alpha_start_function (FILE *file, const char *fnname,\n       fprintf (file, \"\\t.handler_data %d\\n\", VMS_COND_HANDLER_FP_OFFSET);\n     }\n \n-  /* Ifdef'ed cause link_section are only available then.  */\n+#ifdef TARGET_VMS_CRASH_DEBUG\n+  /* Support of minimal traceback info.  */\n   switch_to_section (readonly_data_section);\n   fprintf (file, \"\\t.align 3\\n\");\n   assemble_name (file, fnname); fputs (\"..na:\\n\", file);\n   fputs (\"\\t.ascii \\\"\", file);\n   assemble_name (file, fnname);\n   fputs (\"\\\\0\\\"\\n\", file);\n-  alpha_need_linkage (fnname, 1);\n   switch_to_section (text_section);\n #endif\n+#endif /* TARGET_ABI_OPEN_VMS */\n }\n \n /* Emit the .prologue note at the scheduled end of the prologue.  */\n@@ -8104,7 +8111,8 @@ alpha_end_function (FILE *file, const char *fnname, tree decl ATTRIBUTE_UNUSED)\n     output_asm_insn (get_insn_template (CODE_FOR_nop, NULL), NULL);\n \n #if TARGET_ABI_OPEN_VMS\n-  alpha_write_linkage (file, fnname, decl);\n+  /* Write the linkage entries.  */\n+  alpha_write_linkage (file, fnname);\n #endif\n \n   /* End the function.  */\n@@ -9299,32 +9307,19 @@ alpha_elf_section_type_flags (tree decl, const char *name, int reloc)\n /* Structure to collect function names for final output in link section.  */\n /* Note that items marked with GTY can't be ifdef'ed out.  */\n \n-enum links_kind {KIND_UNUSED, KIND_LOCAL, KIND_EXTERN};\n-enum reloc_kind {KIND_LINKAGE, KIND_CODEADDR};\n+enum reloc_kind\n+{\n+  KIND_LINKAGE,\n+  KIND_CODEADDR\n+};\n \n struct GTY(()) alpha_links\n {\n-  int num;\n-  const char *target;\n+  rtx func;\n   rtx linkage;\n-  enum links_kind lkind;\n   enum reloc_kind rkind;\n };\n \n-struct GTY(()) alpha_funcs\n-{\n-  int num;\n-  splay_tree GTY ((param1_is (char *), param2_is (struct alpha_links *)))\n-    links;\n-};\n-\n-static GTY ((param1_is (char *), param2_is (struct alpha_links *)))\n-  splay_tree alpha_links_tree;\n-static GTY ((param1_is (tree), param2_is (struct alpha_funcs *)))\n-  splay_tree alpha_funcs_tree;\n-\n-static GTY(()) int alpha_funcs_num;\n-\n #if TARGET_ABI_OPEN_VMS\n \n /* Return the VMS argument type corresponding to MODE.  */\n@@ -9358,95 +9353,6 @@ alpha_arg_info_reg_val (CUMULATIVE_ARGS cum)\n   return GEN_INT (regval);\n }\n \f\n-/* Register the need for a (fake) .linkage entry for calls to function NAME.\n-   IS_LOCAL is 1 if this is for a definition, 0 if this is for a real call.\n-   Return a SYMBOL_REF suited to the call instruction.  */\n-\n-rtx\n-alpha_need_linkage (const char *name, int is_local)\n-{\n-  splay_tree_node node;\n-  struct alpha_links *al;\n-  const char *target;\n-  tree id;\n-\n-  if (name[0] == '*')\n-    name++;\n-\n-  if (is_local)\n-    {\n-      struct alpha_funcs *cfaf;\n-\n-      if (!alpha_funcs_tree)\n-        alpha_funcs_tree = splay_tree_new_ggc\n-\t (splay_tree_compare_pointers,\n-\t  ggc_alloc_splay_tree_tree_node_tree_node_splay_tree_s,\n-\t  ggc_alloc_splay_tree_tree_node_tree_node_splay_tree_node_s);\n-\n-\n-      cfaf = ggc_alloc_alpha_funcs ();\n-\n-      cfaf->links = 0;\n-      cfaf->num = ++alpha_funcs_num;\n-\n-      splay_tree_insert (alpha_funcs_tree,\n-\t\t\t (splay_tree_key) current_function_decl,\n-\t\t\t (splay_tree_value) cfaf);\n-    }\n-\n-  if (alpha_links_tree)\n-    {\n-      /* Is this name already defined?  */\n-\n-      node = splay_tree_lookup (alpha_links_tree, (splay_tree_key) name);\n-      if (node)\n-\t{\n-\t  al = (struct alpha_links *) node->value;\n-\t  if (is_local)\n-\t    {\n-\t      /* Defined here but external assumed.  */\n-\t      if (al->lkind == KIND_EXTERN)\n-\t\tal->lkind = KIND_LOCAL;\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Used here but unused assumed.  */\n-\t      if (al->lkind == KIND_UNUSED)\n-\t\tal->lkind = KIND_LOCAL;\n-\t    }\n-\t  return al->linkage;\n-\t}\n-    }\n-  else\n-    alpha_links_tree = splay_tree_new_ggc\n-\t ((splay_tree_compare_fn) strcmp,\n-\t  ggc_alloc_splay_tree_str_alpha_links_splay_tree_s,\n-\t  ggc_alloc_splay_tree_str_alpha_links_splay_tree_node_s);\n-\n-  al = ggc_alloc_alpha_links ();\n-  name = ggc_strdup (name);\n-\n-  /* Assume external if no definition.  */\n-  al->lkind = (is_local ? KIND_UNUSED : KIND_EXTERN);\n-\n-  /* Ensure we have an IDENTIFIER so assemble_name can mark it used\n-     and find the ultimate alias target like assemble_name.  */\n-  id = get_identifier (name);\n-  target = NULL;\n-  while (IDENTIFIER_TRANSPARENT_ALIAS (id))\n-    {\n-      id = TREE_CHAIN (id);\n-      target = IDENTIFIER_POINTER (id);\n-    }\n-\n-  al->target = target ? target : name;\n-  al->linkage = gen_rtx_SYMBOL_REF (Pmode, name);\n-\n-  splay_tree_insert (alpha_links_tree, (splay_tree_key) name,\n-\t\t     (splay_tree_value) al);\n-\n-  return al->linkage;\n-}\n \n /* Return a SYMBOL_REF representing the reference to the .linkage entry\n    of function FUNC built for calls made from CFUNDECL.  LFLAG is 1 if\n@@ -9455,75 +9361,48 @@ alpha_need_linkage (const char *name, int is_local)\n    reference (code address only), 0 if this is a full reference.  */\n \n rtx\n-alpha_use_linkage (rtx func, tree cfundecl, int lflag, int rflag)\n+alpha_use_linkage (rtx func, bool lflag, bool rflag)\n {\n-  splay_tree_node cfunnode;\n-  struct alpha_funcs *cfaf;\n-  struct alpha_links *al;\n+  struct alpha_links *al = NULL;\n   const char *name = XSTR (func, 0);\n \n-  cfaf = (struct alpha_funcs *) 0;\n-  al = (struct alpha_links *) 0;\n-\n-  cfunnode = splay_tree_lookup (alpha_funcs_tree, (splay_tree_key) cfundecl);\n-  cfaf = (struct alpha_funcs *) cfunnode->value;\n-\n-  if (cfaf->links)\n+  if (cfun->machine->links)\n     {\n       splay_tree_node lnode;\n \n       /* Is this name already defined?  */\n-\n-      lnode = splay_tree_lookup (cfaf->links, (splay_tree_key) name);\n+      lnode = splay_tree_lookup (cfun->machine->links, (splay_tree_key) name);\n       if (lnode)\n \tal = (struct alpha_links *) lnode->value;\n     }\n   else\n-    cfaf->links = splay_tree_new_ggc\n+    cfun->machine->links = splay_tree_new_ggc\n       ((splay_tree_compare_fn) strcmp,\n        ggc_alloc_splay_tree_str_alpha_links_splay_tree_s,\n        ggc_alloc_splay_tree_str_alpha_links_splay_tree_node_s);\n \n-  if (!al)\n+  if (al == NULL)\n     {\n-      size_t name_len;\n-      size_t buflen;\n+      size_t buf_len;\n       char *linksym;\n-      splay_tree_node node = 0;\n-      struct alpha_links *anl;\n \n       if (name[0] == '*')\n \tname++;\n \n-      name_len = strlen (name);\n-      linksym = (char *) alloca (name_len + 50);\n+      buf_len = strlen (name) + 8 + 9;\n+      linksym = (char *) alloca (buf_len);\n+      snprintf (linksym, buf_len, \"$%d..%s..lk\", cfun->funcdef_no, name);\n \n       al = ggc_alloc_alpha_links ();\n-      al->num = cfaf->num;\n-      al->target = NULL;\n-\n-      node = splay_tree_lookup (alpha_links_tree, (splay_tree_key) name);\n-      if (node)\n-\t{\n-\t  anl = (struct alpha_links *) node->value;\n-\t  al->lkind = anl->lkind;\n-\t  name = anl->target;\n-\t}\n-\n-      sprintf (linksym, \"$%d..%s..lk\", cfaf->num, name);\n-      buflen = strlen (linksym);\n+      al->func = func;\n+      al->linkage = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (linksym));\n \n-      al->linkage = gen_rtx_SYMBOL_REF\n-\t(Pmode, ggc_alloc_string (linksym, buflen + 1));\n-\n-      splay_tree_insert (cfaf->links, (splay_tree_key) name,\n+      splay_tree_insert (cfun->machine->links,\n+                         (splay_tree_key) ggc_strdup (name),\n \t\t\t (splay_tree_value) al);\n     }\n \n-  if (rflag)\n-    al->rkind = KIND_CODEADDR;\n-  else\n-    al->rkind = KIND_LINKAGE;\n+  al->rkind = rflag ? KIND_CODEADDR : KIND_LINKAGE;\n \n   if (lflag)\n     return gen_rtx_MEM (Pmode, plus_constant (al->linkage, 8));\n@@ -9538,31 +9417,24 @@ alpha_write_one_linkage (splay_tree_node node, void *data)\n   struct alpha_links *link = (struct alpha_links *) node->value;\n   FILE *stream = (FILE *) data;\n \n-  fprintf (stream, \"$%d..%s..lk:\\n\", link->num, name);\n+  ASM_OUTPUT_INTERNAL_LABEL (stream, XSTR (link->linkage, 0));\n   if (link->rkind == KIND_CODEADDR)\n     {\n-      if (link->lkind == KIND_LOCAL)\n-\t{\n-\t  /* Local and used */\n-\t  fprintf (stream, \"\\t.quad %s..en\\n\", name);\n-\t}\n-      else\n-\t{\n-\t  /* External and used, request code address.  */\n-\t  fprintf (stream, \"\\t.code_address %s\\n\", name);\n-\t}\n+      /* External and used, request code address.  */\n+      fprintf (stream, \"\\t.code_address %s\\n\", name);\n     }\n   else\n     {\n-      if (link->lkind == KIND_LOCAL)\n+      if (!SYMBOL_REF_EXTERNAL_P (link->func)\n+          && SYMBOL_REF_LOCAL_P (link->func))\n \t{\n-\t  /* Local and used, build linkage pair.  */\n+\t  /* Locally defined, build linkage pair.  */\n \t  fprintf (stream, \"\\t.quad %s..en\\n\", name);\n \t  fprintf (stream, \"\\t.quad %s\\n\", name);\n \t}\n       else\n \t{\n-\t  /* External and used, request linkage pair.  */\n+\t  /* External, request linkage pair.  */\n \t  fprintf (stream, \"\\t.linkage %s\\n\", name);\n \t}\n     }\n@@ -9571,31 +9443,28 @@ alpha_write_one_linkage (splay_tree_node node, void *data)\n }\n \n static void\n-alpha_write_linkage (FILE *stream, const char *funname, tree fundecl)\n+alpha_write_linkage (FILE *stream, const char *funname)\n {\n-  splay_tree_node node;\n-  struct alpha_funcs *func;\n-\n   fprintf (stream, \"\\t.link\\n\");\n   fprintf (stream, \"\\t.align 3\\n\");\n   in_section = NULL;\n \n-  node = splay_tree_lookup (alpha_funcs_tree, (splay_tree_key) fundecl);\n-  func = (struct alpha_funcs *) node->value;\n-\n+#ifdef TARGET_VMS_CRASH_DEBUG\n   fputs (\"\\t.name \", stream);\n   assemble_name (stream, funname);\n   fputs (\"..na\\n\", stream);\n+#endif\n+\n   ASM_OUTPUT_LABEL (stream, funname);\n   fprintf (stream, \"\\t.pdesc \");\n   assemble_name (stream, funname);\n   fprintf (stream, \"..en,%s\\n\",\n \t   alpha_procedure_type == PT_STACK ? \"stack\"\n \t   : alpha_procedure_type == PT_REGISTER ? \"reg\" : \"null\");\n \n-  if (func->links)\n+  if (cfun->machine->links)\n     {\n-      splay_tree_foreach (func->links, alpha_write_one_linkage, stream);\n+      splay_tree_foreach (cfun->machine->links, alpha_write_one_linkage, stream);\n       /* splay_tree_delete (func->links); */\n     }\n }\n@@ -9641,19 +9510,10 @@ vms_asm_out_destructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n   assemble_integer (symbol, UNITS_PER_WORD, BITS_PER_WORD, 1);\n }\n #else\n-\n-rtx\n-alpha_need_linkage (const char *name ATTRIBUTE_UNUSED,\n-\t\t    int is_local ATTRIBUTE_UNUSED)\n-{\n-  return NULL_RTX;\n-}\n-\n rtx\n alpha_use_linkage (rtx func ATTRIBUTE_UNUSED,\n-\t\t   tree cfundecl ATTRIBUTE_UNUSED,\n-\t\t   int lflag ATTRIBUTE_UNUSED,\n-\t\t   int rflag ATTRIBUTE_UNUSED)\n+\t\t   bool lflag ATTRIBUTE_UNUSED,\n+\t\t   bool rflag ATTRIBUTE_UNUSED)\n {\n   return NULL_RTX;\n }"}, {"sha": "6422924506587d3090e5ab40b424f87978051568", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735f469bdfa64d73fe5721f9a88573e57858a59a/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735f469bdfa64d73fe5721f9a88573e57858a59a/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=735f469bdfa64d73fe5721f9a88573e57858a59a", "patch": "@@ -3965,8 +3965,6 @@\n   emit_move_insn (gen_rtx_REG (DImode, 25), operands[1]);\n   if (GET_CODE (operands[0]) == SYMBOL_REF)\n     {\n-      alpha_need_linkage (XSTR (operands[0], 0), 0);\n-\n       operands[2] = const0_rtx;\n     }\n   else\n@@ -4042,8 +4040,6 @@\n   emit_move_insn (gen_rtx_REG (DImode, 25), operands[2]);\n   if (GET_CODE (operands[1]) == SYMBOL_REF)\n     {\n-      alpha_need_linkage (XSTR (operands[1], 0), 0);\n-\n       operands[3] = const0_rtx;\n     }\n   else\n@@ -4244,8 +4240,8 @@\n     case 0:\n    \treturn \"mov %2,$27\\;jsr $26,0\\;ldq $27,0($29)\";\n     case 1:\n-\toperands [2] = alpha_use_linkage (operands [0], cfun->decl, 1, 0);\n-\toperands [3] = alpha_use_linkage (operands [0], cfun->decl, 0, 0);\n+\toperands [2] = alpha_use_linkage (operands [0], true, false);\n+\toperands [3] = alpha_use_linkage (operands [0], false, false);\n    \treturn \"ldq $26,%3\\;ldq $27,%2\\;jsr $26,%0\\;ldq $27,0($29)\";\n     default:\n       gcc_unreachable ();\n@@ -5472,7 +5468,7 @@\n \t      (clobber (reg:DI 27))])]\n   \"TARGET_ABI_OPEN_VMS\"\n {\n-  operands[4] = alpha_need_linkage (\"OTS$MOVE\", 0);\n+  operands[4] = gen_rtx_SYMBOL_REF (Pmode, \"OTS$MOVE\");\n })\n \n (define_insn \"*movmemdi_1\"\n@@ -5491,7 +5487,7 @@\n    (clobber (reg:DI 27))]\n   \"TARGET_ABI_OPEN_VMS\"\n {\n-  operands [5] = alpha_use_linkage (operands [4], cfun->decl, 0, 1);\n+  operands [5] = alpha_use_linkage (operands [4], false, true);\n   switch (which_alternative)\n     {\n     case 0:\n@@ -5539,7 +5535,7 @@\n   if (operands[2] != const0_rtx)\n     FAIL;\n \n-  operands[4] = alpha_need_linkage (\"OTS$ZERO\", 0);\n+  operands[4] = gen_rtx_SYMBOL_REF (Pmode, \"OTS$ZERO\");\n })\n \n (define_insn \"*clrmemdi_1\"\n@@ -5555,7 +5551,7 @@\n    (clobber (reg:DI 27))]\n   \"TARGET_ABI_OPEN_VMS\"\n {\n-  operands [4] = alpha_use_linkage (operands [3], cfun->decl, 0, 1);\n+  operands [4] = alpha_use_linkage (operands [3], false, true);\n   switch (which_alternative)\n     {\n     case 0:\n@@ -6825,8 +6821,8 @@\n     case 0:\n    \treturn \"mov %3,$27\\;jsr $26,0\\;ldq $27,0($29)\";\n     case 1:\n-\toperands [3] = alpha_use_linkage (operands [1], cfun->decl, 1, 0);\n-\toperands [4] = alpha_use_linkage (operands [1], cfun->decl, 0, 0);\n+\toperands [3] = alpha_use_linkage (operands [1], true, false);\n+\toperands [4] = alpha_use_linkage (operands [1], false, false);\n    \treturn \"ldq $26,%4\\;ldq $27,%3\\;jsr $26,%1\\;ldq $27,0($29)\";\n     default:\n       gcc_unreachable ();"}]}