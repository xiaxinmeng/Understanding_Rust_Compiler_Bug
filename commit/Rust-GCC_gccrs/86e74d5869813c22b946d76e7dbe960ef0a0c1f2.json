{"sha": "86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZlNzRkNTg2OTgxM2MyMmI5NDZkNzZlN2RiZTk2MGVmMGEwYzFmMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-05-29T09:42:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-29T09:42:50Z"}, "message": "[Ada] Adjust documentation of -gnatn switch\n\nThis changes the wording in the documentation of the -gnatn switch to make\nit use \"units\" rather than \"modules\" and also adjusts the usage message.\n\nNo functional changes.\n\n2018-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst (Alphabetical\n\tList of All Switches): Replace \"modules\" with \"units\".\n\t(Subprogram Inlining Control): Likewise.\n\t* gnat_ugn.texi: Regenerate.\n\t* usage.adb (Usage): Fix description of -gnatn switch.\n\nFrom-SVN: r260889", "tree": {"sha": "1aadf4fca2049d077c1e65950c7d16d3d9c06405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aadf4fca2049d077c1e65950c7d16d3d9c06405"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e74d5869813c22b946d76e7dbe960ef0a0c1f2/comments", "author": null, "committer": null, "parents": [{"sha": "4f95a81816d6bd14d27b3a2d4c89e451dbb42592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f95a81816d6bd14d27b3a2d4c89e451dbb42592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f95a81816d6bd14d27b3a2d4c89e451dbb42592"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "80edef8b01e029d483d5aa5c2980139273bd8da6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e74d5869813c22b946d76e7dbe960ef0a0c1f2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e74d5869813c22b946d76e7dbe960ef0a0c1f2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "patch": "@@ -1,3 +1,11 @@\n+2018-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst (Alphabetical\n+\tList of All Switches): Replace \"modules\" with \"units\".\n+\t(Subprogram Inlining Control): Likewise.\n+\t* gnat_ugn.texi: Regenerate.\n+\t* usage.adb (Usage): Fix description of -gnatn switch.\n+\n 2018-05-29  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Fix typos."}, {"sha": "97ae764e4489fc4a0164fc8938920695c762babe", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e74d5869813c22b946d76e7dbe960ef0a0c1f2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e74d5869813c22b946d76e7dbe960ef0a0c1f2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "patch": "@@ -1255,7 +1255,7 @@ Alphabetical List of All Switches\n   of the program, instead of a fragmentary view with the usual approach.\n   This can also speed up the compilation of big programs and reduce the\n   size of the executable, compared with a traditional per-unit compilation\n-  with inlining across modules enabled by the :switch:`-gnatn` switch.\n+  with inlining across units enabled by the :switch:`-gnatn` switch.\n   The drawback of this approach is that it may require more memory and that\n   the debugging information generated by -g with it might be hardly usable.\n   The switch, as well as the accompanying :switch:`-Ox` switches, must be\n@@ -1910,10 +1910,10 @@ Alphabetical List of All Switches\n .. index:: -gnatn  (gcc)\n \n :switch:`-gnatn[12]`\n-  Activate inlining across modules for subprograms for which pragma ``Inline``\n+  Activate inlining across units for subprograms for which pragma ``Inline``\n   is specified. This inlining is performed by the GCC back-end. An optional\n-  digit sets the inlining level: 1 for moderate inlining across modules\n-  or 2 for full inlining across modules. If no inlining level is specified,\n+  digit sets the inlining level: 1 for moderate inlining across units\n+  or 2 for full inlining across units. If no inlining level is specified,\n   the compiler will pick it based on the optimization level.\n \n \n@@ -5512,17 +5512,17 @@ Subprogram Inlining Control\n   The ``n`` here is intended to suggest the first syllable of the word 'inline'.\n   GNAT recognizes and processes ``Inline`` pragmas. However, for inlining to\n   actually occur, optimization must be enabled and, by default, inlining of\n-  subprograms across modules is not performed. If you want to additionally\n-  enable inlining of subprograms specified by pragma ``Inline`` across modules,\n+  subprograms across units is not performed. If you want to additionally\n+  enable inlining of subprograms specified by pragma ``Inline`` across units,\n   you must also specify this switch.\n \n-  In the absence of this switch, GNAT does not attempt inlining across modules\n+  In the absence of this switch, GNAT does not attempt inlining across units\n   and does not access the bodies of subprograms for which ``pragma Inline`` is\n   specified if they are not in the current unit.\n \n   You can optionally specify the inlining level: 1 for moderate inlining across\n-  modules, which is a good compromise between compilation times and performances\n-  at run time, or 2 for full inlining across modules, which may bring about\n+  units, which is a good compromise between compilation times and performances\n+  at run time, or 2 for full inlining across units, which may bring about\n   longer compilation times. If no inlining level is specified, the compiler will\n   pick it based on the optimization level: 1 for :switch:`-O1`, :switch:`-O2` or\n   :switch:`-Os` and 2 for :switch:`-O3`."}, {"sha": "57a8febd9436647f76acc6f1fcd3b799062baabf", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e74d5869813c22b946d76e7dbe960ef0a0c1f2/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e74d5869813c22b946d76e7dbe960ef0a0c1f2/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "patch": "@@ -8831,7 +8831,7 @@ the best interprocedural optimization strategy based on a complete view\n of the program, instead of a fragmentary view with the usual approach.\n This can also speed up the compilation of big programs and reduce the\n size of the executable, compared with a traditional per-unit compilation\n-with inlining across modules enabled by the @code{-gnatn} switch.\n+with inlining across units enabled by the @code{-gnatn} switch.\n The drawback of this approach is that it may require more memory and that\n the debugging information generated by -g with it might be hardly usable.\n The switch, as well as the accompanying @code{-Ox} switches, must be\n@@ -9716,10 +9716,10 @@ means that no limit applies.\n \n @item @code{-gnatn[12]}\n \n-Activate inlining across modules for subprograms for which pragma @code{Inline}\n+Activate inlining across units for subprograms for which pragma @code{Inline}\n is specified. This inlining is performed by the GCC back-end. An optional\n-digit sets the inlining level: 1 for moderate inlining across modules\n-or 2 for full inlining across modules. If no inlining level is specified,\n+digit sets the inlining level: 1 for moderate inlining across units\n+or 2 for full inlining across units. If no inlining level is specified,\n the compiler will pick it based on the optimization level.\n @end table\n \n@@ -14657,17 +14657,17 @@ For the source file naming rules, @ref{52,,File Naming Rules}.\n The @code{n} here is intended to suggest the first syllable of the word 'inline'.\n GNAT recognizes and processes @code{Inline} pragmas. However, for inlining to\n actually occur, optimization must be enabled and, by default, inlining of\n-subprograms across modules is not performed. If you want to additionally\n-enable inlining of subprograms specified by pragma @code{Inline} across modules,\n+subprograms across units is not performed. If you want to additionally\n+enable inlining of subprograms specified by pragma @code{Inline} across units,\n you must also specify this switch.\n \n-In the absence of this switch, GNAT does not attempt inlining across modules\n+In the absence of this switch, GNAT does not attempt inlining across units\n and does not access the bodies of subprograms for which @code{pragma Inline} is\n specified if they are not in the current unit.\n \n You can optionally specify the inlining level: 1 for moderate inlining across\n-modules, which is a good compromise between compilation times and performances\n-at run time, or 2 for full inlining across modules, which may bring about\n+units, which is a good compromise between compilation times and performances\n+at run time, or 2 for full inlining across units, which may bring about\n longer compilation times. If no inlining level is specified, the compiler will\n pick it based on the optimization level: 1 for @code{-O1}, @code{-O2} or\n @code{-Os} and 2 for @code{-O3}."}, {"sha": "cdf14cf8db87b27e2439646df3b0fa1cf04b487c", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e74d5869813c22b946d76e7dbe960ef0a0c1f2/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e74d5869813c22b946d76e7dbe960ef0a0c1f2/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "patch": "@@ -352,7 +352,7 @@ begin\n    --  Line for -gnatn switch\n \n    Write_Switch_Char (\"n[?]\");\n-   Write_Line (\"Enable pragma Inline (both within and across units, ?=1/2)\");\n+   Write_Line (\"Enable pragma Inline across units (?=1/2 for moderate/full)\");\n \n    --  Line for -gnato switch\n "}]}