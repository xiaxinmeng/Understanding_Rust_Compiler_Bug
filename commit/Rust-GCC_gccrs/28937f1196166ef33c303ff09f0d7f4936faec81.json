{"sha": "28937f1196166ef33c303ff09f0d7f4936faec81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5MzdmMTE5NjE2NmVmMzNjMzAzZmYwOWYwZDdmNDkzNmZhZWM4MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-03-06T16:18:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-03-06T16:18:40Z"}, "message": "re PR middle-end/56461 (GCC is leaking lots of memory)\n\n\tPR middle-end/56461\n\t* internal.h (struct cpp_buffer): Add to_free field.\n\t(_cpp_pop_file_buffer): Add third argument.\n\t* files.c (_cpp_stack_file): Set buffer->to_free.\n\t(_cpp_pop_file_buffer): Add to_free argument.  Free to_free\n\tif non-NULL, and if equal to file->buffer_start, also clear\n\tfile->buffer{,_start,_valid}.\n\t* directives.c (_cpp_pop_buffer): Pass buffer->to_free\n\tto _cpp_pop_file_buffer.\n\nFrom-SVN: r196497", "tree": {"sha": "81d6fae2161fe976ca587b7a58d10fda41f7e93b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81d6fae2161fe976ca587b7a58d10fda41f7e93b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28937f1196166ef33c303ff09f0d7f4936faec81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28937f1196166ef33c303ff09f0d7f4936faec81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28937f1196166ef33c303ff09f0d7f4936faec81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28937f1196166ef33c303ff09f0d7f4936faec81/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b681bb9507df9bf700eac671e3c999bd735b1939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b681bb9507df9bf700eac671e3c999bd735b1939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b681bb9507df9bf700eac671e3c999bd735b1939"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "e3a6637f09524ef5706bd975de11c8099e17c9a5", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28937f1196166ef33c303ff09f0d7f4936faec81/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28937f1196166ef33c303ff09f0d7f4936faec81/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=28937f1196166ef33c303ff09f0d7f4936faec81", "patch": "@@ -1,3 +1,15 @@\n+2013-03-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/56461\n+\t* internal.h (struct cpp_buffer): Add to_free field.\n+\t(_cpp_pop_file_buffer): Add third argument.\n+\t* files.c (_cpp_stack_file): Set buffer->to_free.\n+\t(_cpp_pop_file_buffer): Add to_free argument.  Free to_free\n+\tif non-NULL, and if equal to file->buffer_start, also clear\n+\tfile->buffer{,_start,_valid}.\n+\t* directives.c (_cpp_pop_buffer): Pass buffer->to_free\n+\tto _cpp_pop_file_buffer.\n+\n 2013-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/56461"}, {"sha": "65b2034d0e2f3e6b4acfa8c5f4dbfffb1c5a6e5c", "filename": "libcpp/directives.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28937f1196166ef33c303ff09f0d7f4936faec81/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28937f1196166ef33c303ff09f0d7f4936faec81/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=28937f1196166ef33c303ff09f0d7f4936faec81", "patch": "@@ -2558,6 +2558,7 @@ _cpp_pop_buffer (cpp_reader *pfile)\n   cpp_buffer *buffer = pfile->buffer;\n   struct _cpp_file *inc = buffer->file;\n   struct if_stack *ifs;\n+  const unsigned char *to_free;\n \n   /* Walk back up the conditional stack till we reach its level at\n      entry to this file, issuing error messages.  */\n@@ -2571,6 +2572,7 @@ _cpp_pop_buffer (cpp_reader *pfile)\n   /* _cpp_do_file_change expects pfile->buffer to be the new one.  */\n   pfile->buffer = buffer->prev;\n \n+  to_free = buffer->to_free;\n   free (buffer->notes);\n \n   /* Free the buffer object now; we may want to push a new buffer\n@@ -2579,7 +2581,7 @@ _cpp_pop_buffer (cpp_reader *pfile)\n \n   if (inc)\n     {\n-      _cpp_pop_file_buffer (pfile, inc);\n+      _cpp_pop_file_buffer (pfile, inc, to_free);\n \n       _cpp_do_file_change (pfile, LC_LEAVE, 0, 0, 0);\n     }"}, {"sha": "5c5a0b9b5146e4ff171e133885cb158a17c9ba02", "filename": "libcpp/files.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28937f1196166ef33c303ff09f0d7f4936faec81/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28937f1196166ef33c303ff09f0d7f4936faec81/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=28937f1196166ef33c303ff09f0d7f4936faec81", "patch": "@@ -894,6 +894,7 @@ _cpp_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n \t\t\t    && !CPP_OPTION (pfile, directives_only));\n   buffer->file = file;\n   buffer->sysp = sysp;\n+  buffer->to_free = file->buffer_start;\n \n   /* Initialize controlling macro state.  */\n   pfile->mi_valid = true;\n@@ -1435,7 +1436,8 @@ cpp_push_default_include (cpp_reader *pfile, const char *fname)\n /* Do appropriate cleanup when a file INC's buffer is popped off the\n    input stack.  */\n void\n-_cpp_pop_file_buffer (cpp_reader *pfile, _cpp_file *file)\n+_cpp_pop_file_buffer (cpp_reader *pfile, _cpp_file *file,\n+\t\t      const unsigned char *to_free)\n {\n   /* Record the inclusion-preventing macro, which could be NULL\n      meaning no controlling macro.  */\n@@ -1445,12 +1447,15 @@ _cpp_pop_file_buffer (cpp_reader *pfile, _cpp_file *file)\n   /* Invalidate control macros in the #including file.  */\n   pfile->mi_valid = false;\n \n-  if (file->buffer_start)\n+  if (to_free)\n     {\n-      free ((void *) file->buffer_start);\n-      file->buffer_start = NULL;\n-      file->buffer = NULL;\n-      file->buffer_valid = false;\n+      if (to_free == file->buffer_start)\n+\t{\n+\t  file->buffer_start = NULL;\n+\t  file->buffer = NULL;\n+\t  file->buffer_valid = false;\n+\t}\n+      free ((void *) to_free);\n     }\n }\n "}, {"sha": "1226dbd982b1414aa8c5351384a84d78b7bddf44", "filename": "libcpp/internal.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28937f1196166ef33c303ff09f0d7f4936faec81/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28937f1196166ef33c303ff09f0d7f4936faec81/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=28937f1196166ef33c303ff09f0d7f4936faec81", "patch": "@@ -301,6 +301,8 @@ struct cpp_buffer\n \n   const unsigned char *buf;        /* Entire character buffer.  */\n   const unsigned char *rlimit;     /* Writable byte at end of file.  */\n+  const unsigned char *to_free;\t   /* Pointer that should be freed when\n+\t\t\t\t      popping the buffer.  */\n \n   _cpp_line_note *notes;           /* Array of notes.  */\n   unsigned int cur_note;           /* Next note to process.  */\n@@ -635,7 +637,8 @@ extern int _cpp_compare_file_date (cpp_reader *, const char *, int);\n extern void _cpp_report_missing_guards (cpp_reader *);\n extern void _cpp_init_files (cpp_reader *);\n extern void _cpp_cleanup_files (cpp_reader *);\n-extern void _cpp_pop_file_buffer (cpp_reader *, struct _cpp_file *);\n+extern void _cpp_pop_file_buffer (cpp_reader *, struct _cpp_file *,\n+\t\t\t\t  const unsigned char *);\n extern bool _cpp_save_file_entries (cpp_reader *pfile, FILE *f);\n extern bool _cpp_read_file_entries (cpp_reader *, FILE *);\n extern const char *_cpp_get_file_name (_cpp_file *);"}]}