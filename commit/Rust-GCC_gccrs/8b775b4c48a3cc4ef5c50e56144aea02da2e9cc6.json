{"sha": "8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6", "node_id": "C_kwDOANBUbNoAKDhiNzc1YjRjNDhhM2NjNGVmNWM1MGU1NjE0NGFlYTAyZGEyZTljYzY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-15T18:17:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-15T18:17:45Z"}, "message": "c++: Ensure !!var is not an lvalue [PR107065]\n\nThe TRUTH_NOT_EXPR case in cp_build_unary_op is one of the spots where\nwe somewhat fold immediately using invert_truthvalue_loc.\nI've tried using\n  return build1_loc (location, TRUTH_NOT_EXPR, boolean_type_node, arg);\nin there instead, but unfortunately that regressed\nWlogical-not-parentheses-*.c pr49706.c pr62199.c pr65120.c sequence-pt-1.C\ntests, so at least for backporting that doesn't seem to be a way to go.\n\nSo, this patch instead wraps it into NON_LVALUE_EXPR if needed (which also\nneed a tweak for some tests in the pr47906.c test, but nothing major),\nwith the intent to make it backportable, and later I'll try to do further\nsteps to avoid folding here prematurely.  Most of the problems with\nbuild1 TRUTH_NOT_EXPR are that it doesn't even invert comparisons as most\ncommon case and lots of warning code isn't able to deal with ! around\ncomparisons; so perhaps one way to do this would be fold by hand only\ninvertable comparisons and for the rest create TRUTH_NOT_EXPR.\n\n2022-12-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/107065\ngcc/cp/\n\t* typeck.cc (cp_build_unary_op) <case TRUTH_NOT_EXPR>: If\n\tinvert_truthvalue_loc returns obvalue_p, wrap it into NON_LVALUE_EXPR.\n\t* parser.cc (cp_parser_binary_expression): Don't call\n\twarn_logical_not_parentheses if current.lhs is a NON_LVALUE_EXPR\n\tof a decl with boolean type.\ngcc/testsuite/\n\t* g++.dg/cpp0x/pr107065.C: New test.", "tree": {"sha": "be5e69b26e484264b445ab2f9afa6d21f5bdbb5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be5e69b26e484264b445ab2f9afa6d21f5bdbb5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5300d28bfa18485cfe7aca15eb5e8c193376ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5300d28bfa18485cfe7aca15eb5e8c193376ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5300d28bfa18485cfe7aca15eb5e8c193376ba0"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "8f9f27fad68a9fac52c0f56f35fea636c00d0a6b", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6", "patch": "@@ -10224,7 +10224,10 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \t\t      || (TREE_CODE (TREE_TYPE (TREE_OPERAND (current.lhs, 0)))\n \t\t\t  != BOOLEAN_TYPE))))\n \t  /* Avoid warning for !!b == y where b is boolean.  */\n-\t  && (!DECL_P (tree_strip_any_location_wrapper (current.lhs))\n+\t  && (!(DECL_P (tree_strip_any_location_wrapper (current.lhs))\n+\t\t|| (TREE_CODE (current.lhs) == NON_LVALUE_EXPR\n+\t\t    && DECL_P (tree_strip_any_location_wrapper\n+\t\t\t\t\t    (TREE_OPERAND (current.lhs, 0)))))\n \t      || TREE_TYPE (current.lhs) == NULL_TREE\n \t      || TREE_CODE (TREE_TYPE (current.lhs)) != BOOLEAN_TYPE))\n \twarn_logical_not_parentheses (current.loc, current.tree_type,"}, {"sha": "69b1268cfec946ad1ff23b069d936f228791e266", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6", "patch": "@@ -7396,9 +7396,13 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t\t\t\t   build_zero_cst (TREE_TYPE (arg)), complain);\n       arg = perform_implicit_conversion (boolean_type_node, arg,\n \t\t\t\t\t complain);\n-      val = invert_truthvalue_loc (location, arg);\n       if (arg != error_mark_node)\n-\treturn val;\n+\t{\n+\t  val = invert_truthvalue_loc (location, arg);\n+\t  if (obvalue_p (val))\n+\t    val = non_lvalue_loc (location, val);\n+\t  return val;\n+\t}\n       errstring = _(\"in argument to unary !\");\n       break;\n "}, {"sha": "5e18bb91cff77e879669ac329e0b0d3a8e224ed7", "filename": "gcc/testsuite/g++.dg/cpp0x/pr107065.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr107065.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr107065.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr107065.C?ref=8b775b4c48a3cc4ef5c50e56144aea02da2e9cc6", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/107065\n+// { dg-do compile { target c++11 } }\n+\n+template<class, class> struct is_same { static constexpr bool value = false; };\n+template<class T> struct is_same<T, T> { static constexpr bool value = true; };\n+\n+int\n+main ()\n+{\n+  bool b = true;\n+  static_assert (is_same<decltype (!(!b)), bool>::value, \"\");\n+  auto bb = (!(!b));\n+  static_assert (is_same<decltype (bb), bool>::value, \"\");\n+}"}]}