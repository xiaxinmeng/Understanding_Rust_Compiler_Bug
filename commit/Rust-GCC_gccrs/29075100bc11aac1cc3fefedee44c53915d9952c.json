{"sha": "29075100bc11aac1cc3fefedee44c53915d9952c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkwNzUxMDBiYzExYWFjMWNjM2ZlZmVkZWU0NGM1MzkxNWQ5OTUyYw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2005-05-20T22:14:16Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-05-20T22:14:16Z"}, "message": "obj-c++-dg.exp: Add.\n\n        * obj-c++-dg.exp: Add.\n        * obj-c++.exp: Add.\n        * obj-c++.dg/dg.exp: Add.\n\nFrom-SVN: r100031", "tree": {"sha": "f24584169ba57648488b6dbad6f57b90a0cf2c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f24584169ba57648488b6dbad6f57b90a0cf2c90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29075100bc11aac1cc3fefedee44c53915d9952c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29075100bc11aac1cc3fefedee44c53915d9952c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29075100bc11aac1cc3fefedee44c53915d9952c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29075100bc11aac1cc3fefedee44c53915d9952c/comments", "author": null, "committer": null, "parents": [{"sha": "c15fed76439c17f3155e82f0e86740b0ca72b221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c15fed76439c17f3155e82f0e86740b0ca72b221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c15fed76439c17f3155e82f0e86740b0ca72b221"}], "stats": {"total": 436, "additions": 436, "deletions": 0}, "files": [{"sha": "33b331cd765d9a2acd49dfb000adfd6be553ea1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29075100bc11aac1cc3fefedee44c53915d9952c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29075100bc11aac1cc3fefedee44c53915d9952c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29075100bc11aac1cc3fefedee44c53915d9952c", "patch": "@@ -1,3 +1,9 @@\n+2005-05-20  Mike Stump  <mrs@apple.com>\n+\n+\t* obj-c++-dg.exp: Add.\n+\t* obj-c++.exp: Add.\n+\t* obj-c++.dg/dg.exp: Add.\n+\n 2005-05-20  Kazuhiro Inaoka <inaoka.kazuhiro@renesas.com>\n \n \t* g++.old-deja/g++.jason/thunk3.C: XFAIL on m32r*-*."}, {"sha": "a6d14b72c1e295bdb78ff00c58c33b86360add6f", "filename": "gcc/testsuite/lib/obj-c++-dg.exp", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29075100bc11aac1cc3fefedee44c53915d9952c/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29075100bc11aac1cc3fefedee44c53915d9952c/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B-dg.exp?ref=29075100bc11aac1cc3fefedee44c53915d9952c", "patch": "@@ -0,0 +1,28 @@\n+#   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Define obj-c++ callbacks for dg.exp.\n+\n+load_lib gcc-dg.exp\n+\n+proc obj-c++-dg-test { prog do_what extra_tool_flags } {\n+    return [gcc-dg-test-1 obj-c++_target_compile $prog $do_what $extra_tool_flags]\n+}\n+\n+\n+proc obj-c++-dg-prune { system text } {\n+    return [gcc-dg-prune $system $text]\n+}"}, {"sha": "2b7c944b5574d4eb44c157079ebc5f65d541df87", "filename": "gcc/testsuite/lib/obj-c++.exp", "status": "added", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29075100bc11aac1cc3fefedee44c53915d9952c/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29075100bc11aac1cc3fefedee44c53915d9952c/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp?ref=29075100bc11aac1cc3fefedee44c53915d9952c", "patch": "@@ -0,0 +1,365 @@\n+# Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# This file was written by Rob Savoye (rob@cygnus.com)\n+# Many modifications by Jeffrey Wheat (cassidy@cygnus.com)\n+# With modifications by Mike Stump <mrs@cygnus.com>.\n+\n+#\n+# obj-c++ support library routines\n+#\n+load_lib prune.exp\n+load_lib gcc-defs.exp\n+\n+#\n+# OBJCXX_UNDER_TEST is the compiler under test.\n+#\n+\n+\n+set gpp_compile_options \"\"\n+\n+#\n+# obj-c++_version -- extract and print the version number of the compiler\n+#\n+\n+proc obj-c++_version { } {\n+    global OBJCXX_UNDER_TEST\n+    \n+    obj-c++_init\n+\n+    # ignore any arguments after the command\n+    set compiler [lindex $OBJCXX_UNDER_TEST 0]\n+    \n+    # verify that the compiler exists\n+    if { [is_remote host] || [which $compiler] != 0 } then {\n+\tset tmp [remote_exec host \"$compiler -v\"]\n+\tset status [lindex $tmp 0];\n+\tset output [lindex $tmp 1];\n+\tregexp \" version \\[^\\n\\r\\]*\" $output version\n+\tif { $status == 0 && [info exists version] } then {\n+\t    if [is_remote host] {\n+\t\tclone_output \"$compiler $version\\n\"\n+\t    } else {\n+\t\tclone_output \"[which $compiler] $version\\n\"\n+\t    }\n+\t} else {\n+\t    clone_output \"Couldn't determine version of [which $compiler]\\n\"\n+\t}\n+    } else {\n+\t# compiler does not exist (this should have already been detected)\n+\twarning \"$compiler does not exist\"\n+    }\n+}\n+\n+#\n+# obj-c++_include_flags -- provide new version of obj-c++_include_flags\n+# (originally from libgloss.exp) which knows about the gcc tree structure\n+#\n+proc obj-c++_include_flags { paths } {\n+    global srcdir\n+    global HAVE_LIBSTDCXX_V3\n+    global TESTING_IN_BUILD_TREE\n+\n+    set flags \"\"\n+\n+    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n+      return \"${flags}\"\n+    }\n+\n+    set gccpath ${paths}\n+\n+    set odir [lookfor_file ${gccpath} libstdc++-v3]\n+    if { ${odir} != \"\" } {\n+      append flags [exec sh ${odir}/scripts/testsuite_flags --build-includes]  \n+    }\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# obj-c++_link_flags -- provide new version of obj-c++_link_flags\n+# (originally from libgloss.exp) which knows about the gcc tree structure\n+#\n+\n+proc obj-c++_link_flags { paths } {\n+    global rootme\n+    global srcdir\n+    global ld_library_path\n+    global OBJCXX_UNDER_TEST\n+\n+    set gccpath ${paths}\n+    set libio_dir \"\"\n+    set flags \"\"\n+    set ld_library_path \".\"\n+\n+    if { $gccpath != \"\" } {\n+      if [file exists \"${gccpath}/lib/libstdc++.a\"] {\n+          append ld_library_path \":${gccpath}/lib\"\n+      }\n+      if [file exists \"${gccpath}/libg++/libg++.a\"] {\n+          append flags \"-L${gccpath}/libg++ \"\n+          append ld_library_path \":${gccpath}/libg++\"\n+      }\n+      if [file exists \"${gccpath}/libstdc++/libstdc++.a\"] {\n+          append flags \"-L${gccpath}/libstdc++ \"\n+          append ld_library_path \":${gccpath}/libstdc++\"\n+      }\n+      if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] {\n+          append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n+          append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n+      }\n+      if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n+          append flags \"-L${gccpath}/libiberty \"\n+      }\n+      if [file exists \"${gccpath}/librx/librx.a\"] {\n+          append flags \"-L${gccpath}/librx \"\n+      }\n+      append ld_library_path \":${rootme}\"\n+      set compiler [lindex $OBJCXX_UNDER_TEST 0]\n+      if { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\tforeach i \"[exec $compiler --print-multi-lib]\" {\n+\t  set mldir \"\"\n+\t  regexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n+\t  set mldir [string trimright $mldir \"\\;@\"]\n+\t  if { \"$mldir\" == \".\" } {\n+\t    continue\n+\t  }\n+\t  if { [llength [glob -nocomplain ${rootme}/${mldir}/libgcc_s*.so.*]] == 1 } {\n+\t    append ld_library_path \":${rootme}/${mldir}\"\n+\t  }\n+\t}\n+      }\n+    } else {\n+      global tool_root_dir;\n+\n+      set libgpp [lookfor_file ${tool_root_dir} libg++];\n+      if { $libgpp != \"\" } {\n+          append flags \"-L${libgpp} \";\n+          append ld_library_path \":${libgpp}\"\n+      }\n+      set libstdcpp [lookfor_file ${tool_root_dir} libstdc++];\n+      if { $libstdcpp != \"\" } {\n+          append flags \"-L${libstdcpp} \";\n+          append ld_library_path \":${libstdcpp}\"\n+      }\n+      set libiberty [lookfor_file ${tool_root_dir} libiberty];\n+      if { $libiberty != \"\" } {\n+          append flags \"-L${libiberty} \";\n+      }\n+      set librx [lookfor_file ${tool_root_dir} librx];\n+      if { $librx != \"\" } {\n+          append flags \"-L${librx} \";\n+      }\n+    }\n+\n+    # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n+    # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n+    # (for the 64-bit ABI).  The right way to do this would be to modify\n+    # unix.exp -- but that's not an option since it's part of DejaGNU\n+    # proper, so we do it here.\n+    # The same applies to Darwin (DYLD_LIBRARY_PATH), Solaris 32 bit\n+    # (LD_LIBRARY_PATH_32), Solaris 64 bit (LD_LIBRARY_PATH_64), and HP-UX\n+    # (SHLIB_PATH).\n+    # Doing this does cause trouble when testing cross-compilers.\n+    if {![is_remote target]} {\n+\tglobal env;\n+\tif [info exists env(LD_LIBRARY_PATH)] {\n+\t    # If we've already added these directories once, keep the\n+\t    # existing path.\n+\t    if {$ld_library_path == $env(LD_LIBRARY_PATH)\n+\t\t|| [string first $ld_library_path: \\\n+\t\t\t\t $env(LD_LIBRARY_PATH)] == 0} {\n+\t\tset ld_library_path $env(LD_LIBRARY_PATH)\n+\t    } elseif { $env(LD_LIBRARY_PATH) != \"\" } {\n+\t\tappend ld_library_path \":$env(LD_LIBRARY_PATH)\"\n+\t    }\n+\t}\n+\tsetenv  LD_LIBRARY_PATH     $ld_library_path\n+\tsetenv  SHLIB_PATH          $ld_library_path\n+\tsetenv  LD_LIBRARYN32_PATH  $ld_library_path\n+\tsetenv  LD_LIBRARY64_PATH   $ld_library_path\n+\tsetenv  LD_LIBRARY_PATH_32  $ld_library_path\n+\tsetenv  LD_LIBRARY_PATH_64  $ld_library_path\n+\tsetenv  DYLD_LIBRARY_PATH   $ld_library_path\n+    }\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# obj-c++_init -- called at the start of each subdir of tests\n+#\n+\n+proc obj-c++_init { args } {\n+    global subdir\n+    global gpp_initialized\n+    global base_dir\n+    global tmpdir\n+    global libdir\n+    global gluefile wrap_flags;\n+    global objdir srcdir\n+    global ALWAYS_OBJCXXFLAGS\n+    global TOOL_EXECUTABLE TOOL_OPTIONS\n+    global OBJCXX_UNDER_TEST\n+    global TESTING_IN_BUILD_TREE\n+    global target_triplet\n+\n+    if ![info exists OBJCXX_UNDER_TEST] then {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set OBJCXX_UNDER_TEST $TOOL_EXECUTABLE;\n+\t} else {\n+\t    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n+\t\tset OBJCXX_UNDER_TEST [transform c++]\n+\t    } else {\n+\t\tset OBJCXX_UNDER_TEST [findfile $base_dir/../g++ \"$base_dir/../g++ -B$base_dir/../\" [findfile $base_dir/g++ \"$base_dir/g++ -B$base_dir/\" [transform c++]]]\n+\t    }\n+\t}\n+    }\n+\n+    # Bleah, nasty. Bad taste.\n+    if [ishost \"*-dos-*\" ] {\n+\tregsub \"c\\\\+\\\\+\" \"$OBJCXX_UNDER_TEST\" \"gcc\" OBJCXX_UNDER_TEST\n+    }\n+\n+    if ![is_remote host] {\n+\tif { [which $OBJCXX_UNDER_TEST] == 0 } then {\n+\t    perror \"OBJCXX_UNDER_TEST ($OBJCXX_UNDER_TEST) does not exist\"\n+\t    exit 1\n+\t}\n+    }\n+    if ![info exists tmpdir] {\n+\tset tmpdir \"/tmp\"\n+    }\n+\n+    if [info exists gluefile] {\n+\tunset gluefile\n+    }\n+\n+    obj-c++_maybe_build_wrapper \"${tmpdir}/obj-c++-testglue.o\"\n+\n+    set ALWAYS_OBJCXXFLAGS \"\"\n+\n+    if ![is_remote host] {\n+\tif [info exists TOOL_OPTIONS] {\n+\t    lappend ALWAYS_OBJCXXFLAGS \"additional_flags=[obj-c++_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\";\n+\t    lappend ALWAYS_OBJCXXFLAGS \"ldflags=[obj-c++_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\";\n+\t} else {\n+\t    lappend ALWAYS_OBJCXXFLAGS \"additional_flags=[obj-c++_include_flags [get_multilibs] ]\";\n+\t    lappend ALWAYS_OBJCXXFLAGS \"ldflags=[obj-c++_link_flags [get_multilibs] ]\";\n+\t}\n+    }\n+\n+    if [info exists TOOL_OPTIONS] {\n+\tlappend ALWAYS_OBJCXXFLAGS \"additional_flags=$TOOL_OPTIONS\";\n+    }\n+\n+    # Make sure that lines are not wrapped.  That can confuse the\n+    # error-message parsing machinery.\n+    lappend ALWAYS_OBJCXXFLAGS \"additional_flags=-fmessage-length=0\"\n+\n+    if { [string match \"powerpc-*-darwin*\" $target_triplet] } {\n+\tlappend ALWAYS_OBJCXXFLAGS \"ldflags=-multiply_defined suppress\"\n+       }\n+\n+    verbose -log \"ALWAYS_OBJCXXFLAGS set to $ALWAYS_OBJCXXFLAGS\"\n+\n+    verbose \"obj-c++ is initialized\" 3\n+}\n+\n+#\n+# obj-c++_target_compile -- compile a source file\n+#\n+\n+proc obj-c++_target_compile { source dest type options } {\n+    global tmpdir;\n+    global gpp_compile_options\n+    global gluefile wrap_flags\n+    global ALWAYS_OBJCXXFLAGS;\n+    global OBJCXX_UNDER_TEST;\n+\n+    lappend options \"libs=-lobjc\"\n+\n+    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n+    }\n+\n+    # If we have built libobjc along with the compiler (which usually\n+    # _is not_ the case on Mac OS X systems), point the test harness\n+    # at it (and associated headers).\n+\n+    set objcpath \"[get_multilibs]\"\n+\n+    set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc.a]\n+    if { $libobjc_dir == \"\"} {\n+      verbose \"see if we have -fgnu-runtime in [target_info name]\"\n+      if [regexp \".*-fgnu-runtime.*\" [target_info name]] {\n+        set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.a]\n+      }\n+    }\n+    if { $libobjc_dir != \"\" } {\n+\tset objc_include_dir \"${srcdir}/../../libobjc\"\n+\tlappend options \"additional_flags=-I${objc_include_dir}\"\n+\tset libobjc_dir [file dirname ${libobjc_dir}]\n+\tset objc_link_flags \"-L${libobjc_dir}\"\n+\tlappend options \"additional_flags=${objc_link_flags}\"\n+\tappend ld_library_path \":${libobjc_dir}\"\n+    }\n+\n+    lappend options \"additional_flags=[libio_include_flags]\"\n+    lappend options \"compiler=$OBJCXX_UNDER_TEST\";\n+\n+    set options [concat $gpp_compile_options $options]\n+\n+    set options [concat \"$ALWAYS_OBJCXXFLAGS\" $options];\n+\n+    if { [regexp \"(^| )-frepo( |$)\" $options] && \\\n+\t [regexp \"\\.o(|bj)$\" $dest] } then {\n+\tregsub \"\\.o(|bj)$\" $dest \".rpo\" rponame\n+\texec rm -f $rponame\n+    }\n+\n+    set options [dg-additional-files-options $options $source]\n+\n+    set result [target_compile $source $dest $type $options]\n+\n+    return $result\n+}\n+\n+#\n+# ${tool}_option_help\n+#\n+\n+proc ${tool}_option_help { } {\n+    send_user \" --additional_options,OPTIONS\\t\\tUse OPTIONS to compile the testcase files. OPTIONS should be comma-separated.\\n\"\n+}\n+\n+#\n+# ${tool}_option_proc\n+#\n+\n+proc ${tool}_option_proc { option } {\n+    if [regexp \"^--additional_options,\" $option] {\n+\tglobal gpp_compile_options\n+\tregsub \"--additional_options,\" $option \"\" option\n+\tforeach x [split $option \",\"] {\n+\t    lappend gpp_compile_options \"additional_flags=$x\"\n+\t}\n+\treturn 1;\n+    } else {\n+\treturn 0\n+    }\n+}"}, {"sha": "f2c969f76724b1d21f984b5ac45bd6a86f90f784", "filename": "gcc/testsuite/obj-c++.dg/dg.exp", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29075100bc11aac1cc3fefedee44c53915d9952c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29075100bc11aac1cc3fefedee44c53915d9952c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdg.exp?ref=29075100bc11aac1cc3fefedee44c53915d9952c", "patch": "@@ -0,0 +1,37 @@\n+# GCC Objective-C++ testsuite that uses the `dg.exp' driver.\n+#   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Load support procs.\n+load_lib obj-c++-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_OBJCXXFLAGS\n+if ![info exists DEFAULT_OBJCXXFLAGS] then {\n+    set DEFAULT_OBJCXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [find $srcdir/$subdir *.mm]]\n+\n+# Main loop.\n+dg-runtest $tests \"\" $DEFAULT_OBJCXXFLAGS\n+\n+# All done.\n+dg-finish"}]}