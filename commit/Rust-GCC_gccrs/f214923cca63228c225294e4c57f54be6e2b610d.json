{"sha": "f214923cca63228c225294e4c57f54be6e2b610d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIxNDkyM2NjYTYzMjI4YzIyNTI5NGU0YzU3ZjU0YmU2ZTJiNjEwZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-03-01T19:22:28Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-03-01T19:22:28Z"}, "message": "acinclude.m4: Quote correctly.\n\n\n2004-03-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4: Quote correctly.\n\t* aclocal.m4: Regenerate.\n\t* linkage.m4: Same.\n\nFrom-SVN: r78715", "tree": {"sha": "292ab5ab707604cf8dbecfcb58f506a3e47e3134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/292ab5ab707604cf8dbecfcb58f506a3e47e3134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f214923cca63228c225294e4c57f54be6e2b610d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f214923cca63228c225294e4c57f54be6e2b610d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f214923cca63228c225294e4c57f54be6e2b610d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f214923cca63228c225294e4c57f54be6e2b610d/comments", "author": null, "committer": null, "parents": [{"sha": "9bf793f93534b672f460149e704869ac1d0f854d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf793f93534b672f460149e704869ac1d0f854d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf793f93534b672f460149e704869ac1d0f854d"}], "stats": {"total": 186, "additions": 96, "deletions": 90}, "files": [{"sha": "a043fd5e4fd595c640d281dfd537b411e7047ef4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f214923cca63228c225294e4c57f54be6e2b610d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f214923cca63228c225294e4c57f54be6e2b610d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f214923cca63228c225294e4c57f54be6e2b610d", "patch": "@@ -1,3 +1,9 @@\n+2004-03-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4: Quote correctly.\n+\t* aclocal.m4: Regenerate.\n+\t* linkage.m4: Same.\n+\n 2004-03-01  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/html/test.html: Add multilib RUNTESTFLAGS example."}, {"sha": "b694668915cd14d72ea576216fad64724d6bb3c8", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f214923cca63228c225294e4c57f54be6e2b610d/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f214923cca63228c225294e4c57f54be6e2b610d/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=f214923cca63228c225294e4c57f54be6e2b610d", "patch": "@@ -8,23 +8,23 @@ dnl conditional will depend on the final state of the variable.  For a simple\n dnl example of why this is needed, see GLIBCXX_ENABLE_HOSTED.\n dnl\n m4_define([_m4_divert(glibcxx_diversion)], 8000)dnl\n-AC_DEFUN(GLIBCXX_CONDITIONAL, [dnl\n+AC_DEFUN([GLIBCXX_CONDITIONAL], [dnl\n   m4_divert_text([glibcxx_diversion],dnl\n    AM_CONDITIONAL([$1],[$2])\n   )dnl\n ])dnl\n-AC_DEFUN(GLIBCXX_EVALUATE_CONDITIONALS, [m4_undivert([glibcxx_diversion])])dnl\n+AC_DEFUN([GLIBCXX_EVALUATE_CONDITIONALS], [m4_undivert([glibcxx_diversion])])dnl\n \n \n dnl\n dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n dnl compilation, pick them up here.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_HOST, [\n+AC_DEFUN([GLIBCXX_CHECK_HOST], [\n   . $glibcxx_srcdir/configure.host\n-  AC_MSG_NOTICE(CPU config directory is $cpu_include_dir)\n-  AC_MSG_NOTICE(OS config directory is $os_include_dir)\n+  AC_MSG_NOTICE([CPU config directory is $cpu_include_dir])\n+  AC_MSG_NOTICE([OS config directory is $os_include_dir])\n ])\n \n \n@@ -34,7 +34,7 @@ dnl\n dnl Substs:\n dnl  multi_basedir\n dnl\n-AC_DEFUN(GLIBCXX_TOPREL_CONFIGURE, [\n+AC_DEFUN([GLIBCXX_TOPREL_CONFIGURE], [\n   # Sets up multi_basedir, which is srcdir/.. plus the usual\n   # \"multi_source_toprel_bottom_adjust\" lunacy as needed.\n   AM_ENABLE_MULTILIB(, ..)\n@@ -78,7 +78,7 @@ dnl  - the variables in GLIBCXX_CHECK_HOST / configure.host\n dnl  - default settings for all AM_CONFITIONAL test variables\n dnl  - lots of tools, like CC and CXX\n dnl\n-AC_DEFUN(GLIBCXX_CONFIGURE, [\n+AC_DEFUN([GLIBCXX_CONFIGURE], [\n   # Keep these sync'd with the list in Makefile.am.  The first provides an\n   # expandable list at autoconf time; the second provides an expandable list\n   # (i.e., shell variable) at configure time.\n@@ -193,7 +193,7 @@ dnl   Leave it out by default and use maint-mode to use it.\n dnl  SECTION_FLAGS='-ffunction-sections -fdata-sections' if\n dnl   compiler supports it and the user has not requested debug mode.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_COMPILER_FEATURES, [\n+AC_DEFUN([GLIBCXX_CHECK_COMPILER_FEATURES], [\n   # All these tests are for C++; save the language and the compiler flags.\n   # The CXXFLAGS thing is suspicious, but based on similar bits previously\n   # found in GLIBCXX_CONFIGURE.\n@@ -246,7 +246,7 @@ dnl\n dnl The last will be a single integer, e.g., version 1.23.45.0.67.89 will\n dnl set glibcxx_gnu_ld_version to 12345.  Zeros cause problems.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_LINKER_FEATURES, [\n+AC_DEFUN([GLIBCXX_CHECK_LINKER_FEATURES], [\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n@@ -337,7 +337,7 @@ dnl Defines:\n dnl  HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl  _GLIBCXX_USE_WCHAR_T if all the bits are found.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_WCHAR_T_SUPPORT, [\n+AC_DEFUN([GLIBCXX_CHECK_WCHAR_T_SUPPORT], [\n   # Test wchar.h for mbstate_t, which is needed for char_traits and\n   # others even if wchar_t support is not on.\n   AC_MSG_CHECKING([for mbstate_t])\n@@ -454,7 +454,7 @@ dnl Defines:\n dnl  _GLIBCXX_MEM_LIMITS if we can set artificial limits on memory\n dnl  various HAVE_MEMLIMIT_* for individual limit names\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT_ancilliary, [\n+AC_DEFUN([GLIBCXX_CHECK_SETRLIMIT_ancilliary], [\n   AC_TRY_COMPILE(\n     [#include <unistd.h>\n      #include <sys/time.h>\n@@ -466,7 +466,7 @@ AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT_ancilliary, [\n                      [Only used in build directory testsuite_hooks.h.])\n ])\n \n-AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT, [\n+AC_DEFUN([GLIBCXX_CHECK_SETRLIMIT], [\n   setrlimit_have_headers=yes\n   AC_CHECK_HEADERS(unistd.h sys/time.h sys/resource.h,\n                    [],\n@@ -508,7 +508,7 @@ dnl\n dnl Check whether S_ISREG (Posix) or S_IFREG is available in <sys/stat.h>.\n dnl Define HAVE_S_ISREG / HAVE_S_IFREG appropriately.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_S_ISREG_OR_S_IFREG, [\n+AC_DEFUN([GLIBCXX_CHECK_S_ISREG_OR_S_IFREG], [\n   AC_CACHE_VAL(glibcxx_cv_S_ISREG, [\n     AC_TRY_LINK(\n       [#include <sys/stat.h>],\n@@ -538,7 +538,7 @@ AC_DEFUN(GLIBCXX_CHECK_S_ISREG_OR_S_IFREG, [\n dnl\n dnl Check whether poll is available in <poll.h>, and define HAVE_POLL.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_POLL, [\n+AC_DEFUN([GLIBCXX_CHECK_POLL], [\n   AC_CACHE_VAL(glibcxx_cv_POLL, [\n     AC_TRY_LINK(\n       [#include <poll.h>],\n@@ -557,7 +557,7 @@ AC_DEFUN(GLIBCXX_CHECK_POLL, [\n dnl\n dnl Check whether writev is available in <sys/uio.h>, and define HAVE_WRITEV.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_WRITEV, [\n+AC_DEFUN([GLIBCXX_CHECK_WRITEV], [\n   AC_CACHE_VAL(glibcxx_cv_WRITEV, [\n     AC_TRY_LINK(\n       [#include <sys/uio.h>],\n@@ -575,7 +575,7 @@ AC_DEFUN(GLIBCXX_CHECK_WRITEV, [\n dnl\n dnl Check whether int64_t is available in <stdint.h>, and define HAVE_INT64_T.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_INT64_T, [\n+AC_DEFUN([GLIBCXX_CHECK_INT64_T], [\n   AC_CACHE_VAL(glibcxx_cv_INT64_T, [\n     AC_TRY_COMPILE(\n       [#include <stdint.h>],\n@@ -592,7 +592,7 @@ AC_DEFUN(GLIBCXX_CHECK_INT64_T, [\n dnl\n dnl Check whether LFS support is available.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_LFS, [\n+AC_DEFUN([GLIBCXX_CHECK_LFS], [\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n@@ -629,7 +629,7 @@ dnl  enable_abi_check / GLIBCXX_TEST_ABI\n dnl Substs:\n dnl  baseline_dir\n dnl\n-AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n+AC_DEFUN([GLIBCXX_CONFIGURE_TESTSUITE], [\n   if $GLIBCXX_IS_NATIVE && test $is_hosted = yes; then\n     # Do checks for memory limit functions.\n     GLIBCXX_CHECK_SETRLIMIT\n@@ -669,7 +669,7 @@ dnl Substs:\n dnl  GLIBCXX_INCLUDES\n dnl  TOPLEVEL_INCLUDES\n dnl\n-AC_DEFUN(GLIBCXX_EXPORT_INCLUDES, [\n+AC_DEFUN([GLIBCXX_EXPORT_INCLUDES], [\n   # Used for every C++ compile we perform.\n   GLIBCXX_INCLUDES=\"\\\n -I$glibcxx_builddir/include/$host_alias \\\n@@ -700,7 +700,7 @@ dnl Substs:\n dnl  OPTIMIZE_CXXFLAGS\n dnl  WARN_FLAGS\n dnl\n-AC_DEFUN(GLIBCXX_EXPORT_FLAGS, [\n+AC_DEFUN([GLIBCXX_EXPORT_FLAGS], [\n   # Optimization flags that are probably a good idea for thrill-seekers. Just\n   # uncomment the lines below and make, everything else is ready to go...\n   # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc\n@@ -724,7 +724,7 @@ dnl\n dnl Assumes cross_compiling bits already done, and with_cross_host in\n dnl particular.\n dnl\n-AC_DEFUN(GLIBCXX_EXPORT_INSTALL_INFO, [\n+AC_DEFUN([GLIBCXX_EXPORT_INSTALL_INFO], [\n   glibcxx_toolexecdir=no\n   glibcxx_toolexeclibdir=no\n   glibcxx_prefixdir=$prefix\n@@ -844,7 +844,7 @@ dnl  +  Usage:  GLIBCXX_ENABLE_C99[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl  +  If 'C99' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_C99, [\n+AC_DEFUN([GLIBCXX_ENABLE_C99], [\n   GLIBCXX_ENABLE(c99,$1,,[turns on ISO/IEC 9899:1999 support])\n \n   AC_LANG_SAVE\n@@ -971,7 +971,7 @@ dnl --disable-cheaders [does not do anything, really].\n dnl  +  Usage:  GLIBCXX_ENABLE_CHEADERS[(DEFAULT)]\n dnl       Where DEFAULT is either `c' or `c_std'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CHEADERS, [\n+AC_DEFUN([GLIBCXX_ENABLE_CHEADERS], [\n   GLIBCXX_ENABLE(cheaders,$1,[=KIND],\n     [construct \"C\" headers for g++], [permit c|c_std])\n   AC_MSG_NOTICE(\"C\" header strategy set to $enable_cheaders)\n@@ -991,7 +991,7 @@ dnl a subdirectory of config/locale.\n dnl\n dnl Default is generic.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CLOCALE, [\n+AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n   AC_MSG_CHECKING([for C locale to use])\n   GLIBCXX_ENABLE(clocale,auto,[@<:@=MODEL@:>@],\n     [use MODEL for target locale package],\n@@ -1178,7 +1178,7 @@ dnl --disable-concept-checks leaves them off.\n dnl  +  Usage:  GLIBCXX_ENABLE_CONCEPT_CHECKS[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CONCEPT_CHECKS, [\n+AC_DEFUN([GLIBCXX_ENABLE_CONCEPT_CHECKS], [\n   GLIBCXX_ENABLE(concept-checks,$1,,[use Boost-derived template checks])\n   if test $enable_concept_checks = yes; then\n     AC_DEFINE(_GLIBCXX_CONCEPT_CHECKS)\n@@ -1191,7 +1191,7 @@ dnl Check for which I/O library to use:  stdio, or something specific.\n dnl\n dnl Default is stdio.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CSTDIO, [\n+AC_DEFUN([GLIBCXX_ENABLE_CSTDIO], [\n   AC_MSG_CHECKING([for underlying I/O to use])\n   GLIBCXX_ENABLE(cstdio,stdio,[=PACKAGE],\n     [use target-specific I/O package], [permit stdio])\n@@ -1227,7 +1227,7 @@ dnl  +  Usage:  GLIBCXX_ENABLE_CXX_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string, the effect is the same\n dnl       as --disable or --enable=no.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CXX_FLAGS, [dnl\n+AC_DEFUN([GLIBCXX_ENABLE_CXX_FLAGS], [dnl\n   AC_MSG_CHECKING([for extra compiler flags for building])\n   GLIBCXX_ENABLE(cxx-flags,$1,[=FLAGS],\n     [pass compiler FLAGS when building library],\n@@ -1265,7 +1265,7 @@ dnl --disable-c-mbchar doesn't.\n dnl  +  Usage:  GLIBCXX_ENABLE_C_MBCHAR[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_C_MBCHAR, [\n+AC_DEFUN([GLIBCXX_ENABLE_C_MBCHAR], [\n   GLIBCXX_ENABLE(c-mbchar,$1,,[enable multibyte (wide) characters])\n   # Option parsed, now other scripts can test enable_c_mbchar for yes/no.\n ])\n@@ -1287,7 +1287,7 @@ dnl\n dnl  +  Usage:  GLIBCXX_ENABLE_DEBUG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_DEBUG, [\n+AC_DEFUN([GLIBCXX_ENABLE_DEBUG], [\n   AC_MSG_CHECKING([for additional debug build])\n   GLIBCXX_ENABLE(libstdcxx-debug,$1,,[build extra debug library])\n   AC_MSG_RESULT($enable_libstdcxx_debug)\n@@ -1307,7 +1307,7 @@ dnl  +  Usage:  GLIBCXX_ENABLE_DEBUG_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string, the effect is the same\n dnl       as --disable or --enable=no.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_DEBUG_FLAGS, [\n+AC_DEFUN([GLIBCXX_ENABLE_DEBUG_FLAGS], [\n   GLIBCXX_ENABLE(libstdcxx-debug-flags,[$1],[=FLAGS],\n     [pass compiler FLAGS when building debug library],\n     [case \"x$enable_libstdcxx_debug_flags\" in\n@@ -1338,7 +1338,7 @@ dnl\n dnl Defines:\n dnl  _GLIBCXX_HOSTED   (always defined, either to 1 or 0)\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n+AC_DEFUN([GLIBCXX_ENABLE_HOSTED], [\n   AC_ARG_ENABLE([hosted-libstdcxx],\n     AC_HELP_STRING([--disable-hosted-libstdcxx],\n                    [only build freestanding C++ runtime support]),,\n@@ -1370,7 +1370,7 @@ dnl  +  Usage:  GLIBCXX_ENABLE_LONG_LONG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_LONG_LONG, [\n+AC_DEFUN([GLIBCXX_ENABLE_LONG_LONG], [\n   GLIBCXX_ENABLE(long-long,$1,,[enables I/O support for 'long long'])\n \n   AC_LANG_SAVE\n@@ -1407,7 +1407,7 @@ dnl\n dnl Substs:\n dnl  glibcxx_PCHFLAGS\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_PCH, [\n+AC_DEFUN([GLIBCXX_ENABLE_PCH], [\n   AC_MSG_CHECKING([for enabled PCH])\n   GLIBCXX_ENABLE(libstdcxx-pch,$1,,[build pre-compiled libstdc++ headers])\n   AC_MSG_RESULT([$enable_libstdcxx_pch])\n@@ -1459,7 +1459,7 @@ dnl\n dnl Defines:\n dnl  _GLIBCXX_SJLJ_EXCEPTIONS if the compiler is configured for it\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_SJLJ_EXCEPTIONS, [\n+AC_DEFUN([GLIBCXX_ENABLE_SJLJ_EXCEPTIONS], [\n   AC_MSG_CHECKING([for exception model to use])\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n@@ -1529,7 +1529,7 @@ dnl       Where DEFAULT is either 'yes' or 'no'.  Passing `yes' tries to\n dnl       choose a default style based on linker characteristics.  Passing\n dnl       'no' disables versioning.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_SYMVERS, [\n+AC_DEFUN([GLIBCXX_ENABLE_SYMVERS], [\n \n GLIBCXX_ENABLE(symvers,$1,[=STYLE],\n   [enables symbol versioning of the shared library],\n@@ -1633,7 +1633,7 @@ dnl Defines:\n dnl  HAVE_GTHR_DEFAULT\n dnl  _GLIBCXX_SUPPORTS_WEAK\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_THREADS, [\n+AC_DEFUN([GLIBCXX_ENABLE_THREADS], [\n   AC_MSG_CHECKING([for thread model used by GCC])\n   target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n@@ -1657,7 +1657,7 @@ AC_DEFUN(GLIBCXX_ENABLE_THREADS, [\n # Please note that the actual code is *not* freely available.\n \n # serial 1\n-AC_DEFUN(AC_LC_MESSAGES, [\n+AC_DEFUN([AC_LC_MESSAGES], [\n   AC_CHECK_HEADER(locale.h, [\n     AC_CACHE_CHECK([for LC_MESSAGES], ac_cv_val_LC_MESSAGES,\n       [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],"}, {"sha": "2705c81a6335eb36299a1c09096a8535f68b1ec9", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f214923cca63228c225294e4c57f54be6e2b610d/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f214923cca63228c225294e4c57f54be6e2b610d/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=f214923cca63228c225294e4c57f54be6e2b610d", "patch": "@@ -21,23 +21,23 @@ dnl conditional will depend on the final state of the variable.  For a simple\n dnl example of why this is needed, see GLIBCXX_ENABLE_HOSTED.\n dnl\n m4_define([_m4_divert(glibcxx_diversion)], 8000)dnl\n-AC_DEFUN(GLIBCXX_CONDITIONAL, [dnl\n+AC_DEFUN([GLIBCXX_CONDITIONAL], [dnl\n   m4_divert_text([glibcxx_diversion],dnl\n    AM_CONDITIONAL([$1],[$2])\n   )dnl\n ])dnl\n-AC_DEFUN(GLIBCXX_EVALUATE_CONDITIONALS, [m4_undivert([glibcxx_diversion])])dnl\n+AC_DEFUN([GLIBCXX_EVALUATE_CONDITIONALS], [m4_undivert([glibcxx_diversion])])dnl\n \n \n dnl\n dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n dnl compilation, pick them up here.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_HOST, [\n+AC_DEFUN([GLIBCXX_CHECK_HOST], [\n   . $glibcxx_srcdir/configure.host\n-  AC_MSG_NOTICE(CPU config directory is $cpu_include_dir)\n-  AC_MSG_NOTICE(OS config directory is $os_include_dir)\n+  AC_MSG_NOTICE([CPU config directory is $cpu_include_dir])\n+  AC_MSG_NOTICE([OS config directory is $os_include_dir])\n ])\n \n \n@@ -47,7 +47,7 @@ dnl\n dnl Substs:\n dnl  multi_basedir\n dnl\n-AC_DEFUN(GLIBCXX_TOPREL_CONFIGURE, [\n+AC_DEFUN([GLIBCXX_TOPREL_CONFIGURE], [\n   # Sets up multi_basedir, which is srcdir/.. plus the usual\n   # \"multi_source_toprel_bottom_adjust\" lunacy as needed.\n   AM_ENABLE_MULTILIB(, ..)\n@@ -91,7 +91,7 @@ dnl  - the variables in GLIBCXX_CHECK_HOST / configure.host\n dnl  - default settings for all AM_CONFITIONAL test variables\n dnl  - lots of tools, like CC and CXX\n dnl\n-AC_DEFUN(GLIBCXX_CONFIGURE, [\n+AC_DEFUN([GLIBCXX_CONFIGURE], [\n   # Keep these sync'd with the list in Makefile.am.  The first provides an\n   # expandable list at autoconf time; the second provides an expandable list\n   # (i.e., shell variable) at configure time.\n@@ -206,7 +206,7 @@ dnl   Leave it out by default and use maint-mode to use it.\n dnl  SECTION_FLAGS='-ffunction-sections -fdata-sections' if\n dnl   compiler supports it and the user has not requested debug mode.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_COMPILER_FEATURES, [\n+AC_DEFUN([GLIBCXX_CHECK_COMPILER_FEATURES], [\n   # All these tests are for C++; save the language and the compiler flags.\n   # The CXXFLAGS thing is suspicious, but based on similar bits previously\n   # found in GLIBCXX_CONFIGURE.\n@@ -259,7 +259,7 @@ dnl\n dnl The last will be a single integer, e.g., version 1.23.45.0.67.89 will\n dnl set glibcxx_gnu_ld_version to 12345.  Zeros cause problems.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_LINKER_FEATURES, [\n+AC_DEFUN([GLIBCXX_CHECK_LINKER_FEATURES], [\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n@@ -350,7 +350,7 @@ dnl Defines:\n dnl  HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl  _GLIBCXX_USE_WCHAR_T if all the bits are found.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_WCHAR_T_SUPPORT, [\n+AC_DEFUN([GLIBCXX_CHECK_WCHAR_T_SUPPORT], [\n   # Test wchar.h for mbstate_t, which is needed for char_traits and\n   # others even if wchar_t support is not on.\n   AC_MSG_CHECKING([for mbstate_t])\n@@ -467,7 +467,7 @@ dnl Defines:\n dnl  _GLIBCXX_MEM_LIMITS if we can set artificial limits on memory\n dnl  various HAVE_MEMLIMIT_* for individual limit names\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT_ancilliary, [\n+AC_DEFUN([GLIBCXX_CHECK_SETRLIMIT_ancilliary], [\n   AC_TRY_COMPILE(\n     [#include <unistd.h>\n      #include <sys/time.h>\n@@ -479,7 +479,7 @@ AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT_ancilliary, [\n                      [Only used in build directory testsuite_hooks.h.])\n ])\n \n-AC_DEFUN(GLIBCXX_CHECK_SETRLIMIT, [\n+AC_DEFUN([GLIBCXX_CHECK_SETRLIMIT], [\n   setrlimit_have_headers=yes\n   AC_CHECK_HEADERS(unistd.h sys/time.h sys/resource.h,\n                    [],\n@@ -521,7 +521,7 @@ dnl\n dnl Check whether S_ISREG (Posix) or S_IFREG is available in <sys/stat.h>.\n dnl Define HAVE_S_ISREG / HAVE_S_IFREG appropriately.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_S_ISREG_OR_S_IFREG, [\n+AC_DEFUN([GLIBCXX_CHECK_S_ISREG_OR_S_IFREG], [\n   AC_CACHE_VAL(glibcxx_cv_S_ISREG, [\n     AC_TRY_LINK(\n       [#include <sys/stat.h>],\n@@ -551,7 +551,7 @@ AC_DEFUN(GLIBCXX_CHECK_S_ISREG_OR_S_IFREG, [\n dnl\n dnl Check whether poll is available in <poll.h>, and define HAVE_POLL.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_POLL, [\n+AC_DEFUN([GLIBCXX_CHECK_POLL], [\n   AC_CACHE_VAL(glibcxx_cv_POLL, [\n     AC_TRY_LINK(\n       [#include <poll.h>],\n@@ -570,7 +570,7 @@ AC_DEFUN(GLIBCXX_CHECK_POLL, [\n dnl\n dnl Check whether writev is available in <sys/uio.h>, and define HAVE_WRITEV.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_WRITEV, [\n+AC_DEFUN([GLIBCXX_CHECK_WRITEV], [\n   AC_CACHE_VAL(glibcxx_cv_WRITEV, [\n     AC_TRY_LINK(\n       [#include <sys/uio.h>],\n@@ -588,7 +588,7 @@ AC_DEFUN(GLIBCXX_CHECK_WRITEV, [\n dnl\n dnl Check whether int64_t is available in <stdint.h>, and define HAVE_INT64_T.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_INT64_T, [\n+AC_DEFUN([GLIBCXX_CHECK_INT64_T], [\n   AC_CACHE_VAL(glibcxx_cv_INT64_T, [\n     AC_TRY_COMPILE(\n       [#include <stdint.h>],\n@@ -605,7 +605,7 @@ AC_DEFUN(GLIBCXX_CHECK_INT64_T, [\n dnl\n dnl Check whether LFS support is available.\n dnl\n-AC_DEFUN(GLIBCXX_CHECK_LFS, [\n+AC_DEFUN([GLIBCXX_CHECK_LFS], [\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n@@ -642,7 +642,7 @@ dnl  enable_abi_check / GLIBCXX_TEST_ABI\n dnl Substs:\n dnl  baseline_dir\n dnl\n-AC_DEFUN(GLIBCXX_CONFIGURE_TESTSUITE, [\n+AC_DEFUN([GLIBCXX_CONFIGURE_TESTSUITE], [\n   if $GLIBCXX_IS_NATIVE && test $is_hosted = yes; then\n     # Do checks for memory limit functions.\n     GLIBCXX_CHECK_SETRLIMIT\n@@ -682,7 +682,7 @@ dnl Substs:\n dnl  GLIBCXX_INCLUDES\n dnl  TOPLEVEL_INCLUDES\n dnl\n-AC_DEFUN(GLIBCXX_EXPORT_INCLUDES, [\n+AC_DEFUN([GLIBCXX_EXPORT_INCLUDES], [\n   # Used for every C++ compile we perform.\n   GLIBCXX_INCLUDES=\"\\\n -I$glibcxx_builddir/include/$host_alias \\\n@@ -713,7 +713,7 @@ dnl Substs:\n dnl  OPTIMIZE_CXXFLAGS\n dnl  WARN_FLAGS\n dnl\n-AC_DEFUN(GLIBCXX_EXPORT_FLAGS, [\n+AC_DEFUN([GLIBCXX_EXPORT_FLAGS], [\n   # Optimization flags that are probably a good idea for thrill-seekers. Just\n   # uncomment the lines below and make, everything else is ready to go...\n   # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc\n@@ -737,7 +737,7 @@ dnl\n dnl Assumes cross_compiling bits already done, and with_cross_host in\n dnl particular.\n dnl\n-AC_DEFUN(GLIBCXX_EXPORT_INSTALL_INFO, [\n+AC_DEFUN([GLIBCXX_EXPORT_INSTALL_INFO], [\n   glibcxx_toolexecdir=no\n   glibcxx_toolexeclibdir=no\n   glibcxx_prefixdir=$prefix\n@@ -857,7 +857,7 @@ dnl  +  Usage:  GLIBCXX_ENABLE_C99[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl  +  If 'C99' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_C99, [\n+AC_DEFUN([GLIBCXX_ENABLE_C99], [\n   GLIBCXX_ENABLE(c99,$1,,[turns on ISO/IEC 9899:1999 support])\n \n   AC_LANG_SAVE\n@@ -984,7 +984,7 @@ dnl --disable-cheaders [does not do anything, really].\n dnl  +  Usage:  GLIBCXX_ENABLE_CHEADERS[(DEFAULT)]\n dnl       Where DEFAULT is either `c' or `c_std'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CHEADERS, [\n+AC_DEFUN([GLIBCXX_ENABLE_CHEADERS], [\n   GLIBCXX_ENABLE(cheaders,$1,[=KIND],\n     [construct \"C\" headers for g++], [permit c|c_std])\n   AC_MSG_NOTICE(\"C\" header strategy set to $enable_cheaders)\n@@ -1004,7 +1004,7 @@ dnl a subdirectory of config/locale.\n dnl\n dnl Default is generic.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CLOCALE, [\n+AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n   AC_MSG_CHECKING([for C locale to use])\n   GLIBCXX_ENABLE(clocale,auto,[@<:@=MODEL@:>@],\n     [use MODEL for target locale package],\n@@ -1191,7 +1191,7 @@ dnl --disable-concept-checks leaves them off.\n dnl  +  Usage:  GLIBCXX_ENABLE_CONCEPT_CHECKS[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CONCEPT_CHECKS, [\n+AC_DEFUN([GLIBCXX_ENABLE_CONCEPT_CHECKS], [\n   GLIBCXX_ENABLE(concept-checks,$1,,[use Boost-derived template checks])\n   if test $enable_concept_checks = yes; then\n     AC_DEFINE(_GLIBCXX_CONCEPT_CHECKS)\n@@ -1204,7 +1204,7 @@ dnl Check for which I/O library to use:  stdio, or something specific.\n dnl\n dnl Default is stdio.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CSTDIO, [\n+AC_DEFUN([GLIBCXX_ENABLE_CSTDIO], [\n   AC_MSG_CHECKING([for underlying I/O to use])\n   GLIBCXX_ENABLE(cstdio,stdio,[=PACKAGE],\n     [use target-specific I/O package], [permit stdio])\n@@ -1240,7 +1240,7 @@ dnl  +  Usage:  GLIBCXX_ENABLE_CXX_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string, the effect is the same\n dnl       as --disable or --enable=no.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_CXX_FLAGS, [dnl\n+AC_DEFUN([GLIBCXX_ENABLE_CXX_FLAGS], [dnl\n   AC_MSG_CHECKING([for extra compiler flags for building])\n   GLIBCXX_ENABLE(cxx-flags,$1,[=FLAGS],\n     [pass compiler FLAGS when building library],\n@@ -1278,7 +1278,7 @@ dnl --disable-c-mbchar doesn't.\n dnl  +  Usage:  GLIBCXX_ENABLE_C_MBCHAR[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_C_MBCHAR, [\n+AC_DEFUN([GLIBCXX_ENABLE_C_MBCHAR], [\n   GLIBCXX_ENABLE(c-mbchar,$1,,[enable multibyte (wide) characters])\n   # Option parsed, now other scripts can test enable_c_mbchar for yes/no.\n ])\n@@ -1300,7 +1300,7 @@ dnl\n dnl  +  Usage:  GLIBCXX_ENABLE_DEBUG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_DEBUG, [\n+AC_DEFUN([GLIBCXX_ENABLE_DEBUG], [\n   AC_MSG_CHECKING([for additional debug build])\n   GLIBCXX_ENABLE(libstdcxx-debug,$1,,[build extra debug library])\n   AC_MSG_RESULT($enable_libstdcxx_debug)\n@@ -1320,7 +1320,7 @@ dnl  +  Usage:  GLIBCXX_ENABLE_DEBUG_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string, the effect is the same\n dnl       as --disable or --enable=no.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_DEBUG_FLAGS, [\n+AC_DEFUN([GLIBCXX_ENABLE_DEBUG_FLAGS], [\n   GLIBCXX_ENABLE(libstdcxx-debug-flags,[$1],[=FLAGS],\n     [pass compiler FLAGS when building debug library],\n     [case \"x$enable_libstdcxx_debug_flags\" in\n@@ -1351,7 +1351,7 @@ dnl\n dnl Defines:\n dnl  _GLIBCXX_HOSTED   (always defined, either to 1 or 0)\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n+AC_DEFUN([GLIBCXX_ENABLE_HOSTED], [\n   AC_ARG_ENABLE([hosted-libstdcxx],\n     AC_HELP_STRING([--disable-hosted-libstdcxx],\n                    [only build freestanding C++ runtime support]),,\n@@ -1383,7 +1383,7 @@ dnl  +  Usage:  GLIBCXX_ENABLE_LONG_LONG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_LONG_LONG, [\n+AC_DEFUN([GLIBCXX_ENABLE_LONG_LONG], [\n   GLIBCXX_ENABLE(long-long,$1,,[enables I/O support for 'long long'])\n \n   AC_LANG_SAVE\n@@ -1420,7 +1420,7 @@ dnl\n dnl Substs:\n dnl  glibcxx_PCHFLAGS\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_PCH, [\n+AC_DEFUN([GLIBCXX_ENABLE_PCH], [\n   AC_MSG_CHECKING([for enabled PCH])\n   GLIBCXX_ENABLE(libstdcxx-pch,$1,,[build pre-compiled libstdc++ headers])\n   AC_MSG_RESULT([$enable_libstdcxx_pch])\n@@ -1472,7 +1472,7 @@ dnl\n dnl Defines:\n dnl  _GLIBCXX_SJLJ_EXCEPTIONS if the compiler is configured for it\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_SJLJ_EXCEPTIONS, [\n+AC_DEFUN([GLIBCXX_ENABLE_SJLJ_EXCEPTIONS], [\n   AC_MSG_CHECKING([for exception model to use])\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n@@ -1542,7 +1542,7 @@ dnl       Where DEFAULT is either 'yes' or 'no'.  Passing `yes' tries to\n dnl       choose a default style based on linker characteristics.  Passing\n dnl       'no' disables versioning.\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_SYMVERS, [\n+AC_DEFUN([GLIBCXX_ENABLE_SYMVERS], [\n \n GLIBCXX_ENABLE(symvers,$1,[=STYLE],\n   [enables symbol versioning of the shared library],\n@@ -1646,7 +1646,7 @@ dnl Defines:\n dnl  HAVE_GTHR_DEFAULT\n dnl  _GLIBCXX_SUPPORTS_WEAK\n dnl\n-AC_DEFUN(GLIBCXX_ENABLE_THREADS, [\n+AC_DEFUN([GLIBCXX_ENABLE_THREADS], [\n   AC_MSG_CHECKING([for thread model used by GCC])\n   target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n@@ -1670,7 +1670,7 @@ AC_DEFUN(GLIBCXX_ENABLE_THREADS, [\n # Please note that the actual code is *not* freely available.\n \n # serial 1\n-AC_DEFUN(AC_LC_MESSAGES, [\n+AC_DEFUN([AC_LC_MESSAGES], [\n   AC_CHECK_HEADER(locale.h, [\n     AC_CACHE_CHECK([for LC_MESSAGES], ac_cv_val_LC_MESSAGES,\n       [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],"}, {"sha": "eec02800ddbcdc33ee984238e075d3feb89192f0", "filename": "libstdc++-v3/linkage.m4", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f214923cca63228c225294e4c57f54be6e2b610d/libstdc%2B%2B-v3%2Flinkage.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f214923cca63228c225294e4c57f54be6e2b610d/libstdc%2B%2B-v3%2Flinkage.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flinkage.m4?ref=f214923cca63228c225294e4c57f54be6e2b610d", "patch": "@@ -8,7 +8,7 @@ dnl declared when using the c++ compiler\n dnl ASSUMES argument is a math function with ONE parameter\n dnl\n dnl GLIBCXX_CHECK_MATH_DECL_1\n-AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_1, [\n+AC_DEFUN([GLIBCXX_CHECK_MATH_DECL_1], [\n   AC_MSG_CHECKING([for $1 declaration])\n   if test x${glibcxx_cv_func_$1_use+set} != xset; then\n     AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n@@ -40,7 +40,7 @@ dnl\n dnl ASSUMES argument is a math function with ONE parameter\n dnl\n dnl GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1\n-AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1, [\n+AC_DEFUN([GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1], [\n   GLIBCXX_CHECK_MATH_DECL_1($1)\n   if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n@@ -58,7 +58,7 @@ dnl Like GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1, but does a bunch of\n dnl of functions at once.  It's an all-or-nothing check -- either\n dnl HAVE_XYZ is defined for each of the functions, or for none of them.\n dnl Doing it this way saves significant configure time.\n-AC_DEFUN(GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1, [\n+AC_DEFUN([GLIBCXX_CHECK_MATH_DECLS_AND_LINKAGES_1], [\n   AC_MSG_CHECKING([for $1 functions])\n   AC_CACHE_VAL(glibcxx_cv_func_$2_use, [\n     AC_LANG_SAVE\n@@ -80,7 +80,7 @@ dnl declared when using the c++ compiler\n dnl ASSUMES argument is a math function with TWO parameters\n dnl\n dnl GLIBCXX_CHECK_MATH_DECL_2\n-AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_2, [\n+AC_DEFUN([GLIBCXX_CHECK_MATH_DECL_2], [\n   AC_MSG_CHECKING([for $1 declaration])\n   if test x${glibcxx_cv_func_$1_use+set} != xset; then\n     AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n@@ -107,7 +107,7 @@ dnl\n dnl ASSUMES argument is a math function with TWO parameters\n dnl\n dnl GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2\n-AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2, [\n+AC_DEFUN([GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_2], [\n   GLIBCXX_CHECK_MATH_DECL_2($1)\n   if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n@@ -126,7 +126,7 @@ dnl declared when using the c++ compiler\n dnl ASSUMES argument is a math function with THREE parameters\n dnl\n dnl GLIBCXX_CHECK_MATH_DECL_3\n-AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_3, [\n+AC_DEFUN([GLIBCXX_CHECK_MATH_DECL_3], [\n   AC_MSG_CHECKING([for $1 declaration])\n   if test x${glibcxx_cv_func_$1_use+set} != xset; then\n     AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n@@ -153,7 +153,7 @@ dnl\n dnl ASSUMES argument is a math function with THREE parameters\n dnl\n dnl GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3\n-AC_DEFUN(GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3, [\n+AC_DEFUN([GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_3], [\n   GLIBCXX_CHECK_MATH_DECL_3($1)\n   if test x$glibcxx_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)\n@@ -176,7 +176,7 @@ dnl\n dnl ASSUMES argument is a stdlib function without parameters\n dnl\n dnl GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_0\n-AC_DEFUN(GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_0, [\n+AC_DEFUN([GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_0], [\n   AC_MSG_CHECKING([for $1 declaration])\n   if test x${glibcxx_cv_func_$1_use+set} != xset; then\n     AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n@@ -205,7 +205,7 @@ dnl\n dnl ASSUMES argument is a math function with TWO parameters\n dnl\n dnl GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2\n-AC_DEFUN(GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n+AC_DEFUN([GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_2], [\n   AC_MSG_CHECKING([for $1 declaration])\n   if test x${glibcxx_cv_func_$1_use+set} != xset; then\n     AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n@@ -234,7 +234,7 @@ dnl\n dnl ASSUMES argument is a function with THREE parameters\n dnl\n dnl GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_3\n-AC_DEFUN(GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n+AC_DEFUN([GLIBCXX_CHECK_STDLIB_DECL_AND_LINKAGE_3], [\n   AC_MSG_CHECKING([for $1 declaration])\n   if test x${glibcxx_cv_func_$1_use+set} != xset; then\n     AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n@@ -266,7 +266,7 @@ dnl\n dnl ASSUMES argument is a math function with ONE parameter\n dnl\n dnl GLIBCXX_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n-AC_DEFUN(GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n+AC_DEFUN([GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1], [\n   AC_MSG_CHECKING([for $1 declaration])\n   if test x${glibcxx_cv_func_$1_use+set} != xset; then\n     AC_CACHE_VAL(glibcxx_cv_func_$1_use, [\n@@ -316,7 +316,7 @@ dnl check for __builtin_cos\n dnl check for __builtin_cosl\n dnl\n dnl GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n-AC_DEFUN(GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT, [\n+AC_DEFUN([GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT], [\n   dnl Test for builtin math functions.\n   dnl These are made in gcc/c-common.c\n   GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_abs)\n@@ -373,7 +373,7 @@ dnl Define HAVE_STRTOLD if \"strtold\" is declared and links\n dnl Define HAVE_STRTOF if \"strtof\" is declared and links\n dnl\n dnl GLIBCXX_CHECK_STDLIB_SUPPORT\n-AC_DEFUN(GLIBCXX_CHECK_STDLIB_SUPPORT, [\n+AC_DEFUN([GLIBCXX_CHECK_STDLIB_SUPPORT], [\n   ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS='-fno-builtin -D_GNU_SOURCE'\n@@ -394,7 +394,7 @@ dnl\n dnl Define HAVE_CARGF etc if \"cargf\" is found.\n dnl\n dnl GLIBCXX_CHECK_MATH_SUPPORT\n-AC_DEFUN(GLIBCXX_CHECK_MATH_SUPPORT, [\n+AC_DEFUN([GLIBCXX_CHECK_MATH_SUPPORT], [\n   ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS='-fno-builtin -D_GNU_SOURCE'\n@@ -505,7 +505,7 @@ dnl\n dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"copysignl\" is found.\n dnl\n dnl GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-AC_DEFUN(GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT, [\n+AC_DEFUN([GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT], [\n   dnl Check for complex versions of math functions of platform.  This will\n   dnl always pass if libm is available, and fail if it isn't.  If it is\n   dnl available, we assume we'll need it later, so add it to LIBS.\n@@ -543,7 +543,7 @@ AC_DEFUN(GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT, [\n # serial 1\n #\n dnl AC_REPLACE_MATHFUNCS(FUNCTION...)\n-AC_DEFUN(AC_REPLACE_MATHFUNCS,\n+AC_DEFUN([AC_REPLACE_MATHFUNCS],\n [AC_CHECK_FUNCS([$1], , [LIBMATHOBJS=\"$LIBMATHOBJS ${ac_func}.lo\"])])\n \n dnl vim:et:ts=2"}]}