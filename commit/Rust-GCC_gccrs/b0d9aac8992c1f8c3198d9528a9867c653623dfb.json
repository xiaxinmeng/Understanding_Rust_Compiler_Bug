{"sha": "b0d9aac8992c1f8c3198d9528a9867c653623dfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBkOWFhYzg5OTJjMWY4YzMxOThkOTUyOGE5ODY3YzY1MzYyM2RmYg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-16T15:42:36Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-30T17:40:54Z"}, "message": "aarch64: Use RTL builtins for FP ml[as] intrinsics\n\nRewrite floating-point vml[as][q] Neon intrinsics to use RTL builtins\nrather than relying on the GCC vector extensions. Using RTL builtins\nallows control over the emission of fmla/fmls instructions (which we\ndon't want here.)\n\nWith this commit, the code generated by these intrinsics changes from\na fused multiply-add/subtract instruction to an fmul followed by an\nfadd/fsub instruction. If the programmer really wants fmla/fmls\ninstructions, they can use the vfm[as] intrinsics.\n\ngcc/ChangeLog:\n\n2021-02-16  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add float_ml[as]\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_float_mla<mode>):\n\tDefine.\n\t(aarch64_float_mls<mode>): Define.\n\t* config/aarch64/arm_neon.h (vmla_f32): Use RTL builtin\n\tinstead of relying on GCC vector extensions.\n\t(vmla_f64): Likewise.\n\t(vmlaq_f32): Likewise.\n\t(vmlaq_f64): Likewise.\n\t(vmls_f32): Likewise.\n\t(vmls_f64): Likewise.\n\t(vmlsq_f32): Likewise.\n\t(vmlsq_f64): Likewise.\n\t* config/aarch64/iterators.md: Define VDQF_DF mode iterator.", "tree": {"sha": "a21188d7f21698def6fac111aafce95ccfcf3c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a21188d7f21698def6fac111aafce95ccfcf3c57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0d9aac8992c1f8c3198d9528a9867c653623dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d9aac8992c1f8c3198d9528a9867c653623dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d9aac8992c1f8c3198d9528a9867c653623dfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d9aac8992c1f8c3198d9528a9867c653623dfb/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60518e6473248b16db9125504da0351707c35d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60518e6473248b16db9125504da0351707c35d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60518e6473248b16db9125504da0351707c35d1a"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "2a2fc2076b11a83c1de0b9a7847488df73d312be", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d9aac8992c1f8c3198d9528a9867c653623dfb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d9aac8992c1f8c3198d9528a9867c653623dfb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=b0d9aac8992c1f8c3198d9528a9867c653623dfb", "patch": "@@ -668,6 +668,8 @@\n   BUILTIN_VHSDF (TERNOP, fnma, 4, FP)\n   VAR1 (TERNOP, fnma, 4, FP, hf)\n \n+  BUILTIN_VDQF_DF (TERNOP, float_mla, 0, FP)\n+  BUILTIN_VDQF_DF (TERNOP, float_mls, 0, FP)\n   BUILTIN_VDQSF (TERNOP, float_mla_n, 0, FP)\n   BUILTIN_VDQSF (TERNOP, float_mls_n, 0, FP)\n "}, {"sha": "0f96cd0bd512eb8437b6f16f45618f29e1d1526c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d9aac8992c1f8c3198d9528a9867c653623dfb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d9aac8992c1f8c3198d9528a9867c653623dfb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=b0d9aac8992c1f8c3198d9528a9867c653623dfb", "patch": "@@ -2636,6 +2636,38 @@\n   [(set_attr \"type\" \"neon_fp_abs_<stype><q>\")]\n )\n \n+(define_expand \"aarch64_float_mla<mode>\"\n+  [(set (match_operand:VDQF_DF 0 \"register_operand\")\n+\t(plus:VDQF_DF\n+\t  (mult:VDQF_DF\n+\t    (match_operand:VDQF_DF 2 \"register_operand\")\n+\t    (match_operand:VDQF_DF 3 \"register_operand\"))\n+\t  (match_operand:VDQF_DF 1 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_mul<mode>3 (scratch, operands[2], operands[3]));\n+    emit_insn (gen_add<mode>3 (operands[0], operands[1], scratch));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"aarch64_float_mls<mode>\"\n+  [(set (match_operand:VDQF_DF 0 \"register_operand\")\n+\t(minus:VDQF_DF\n+\t  (match_operand:VDQF_DF 1 \"register_operand\")\n+\t  (mult:VDQF_DF\n+\t    (match_operand:VDQF_DF 2 \"register_operand\")\n+\t    (match_operand:VDQF_DF 3 \"register_operand\"))))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_mul<mode>3 (scratch, operands[2], operands[3]));\n+    emit_insn (gen_sub<mode>3 (operands[0], operands[1], scratch));\n+    DONE;\n+  }\n+)\n+\n (define_expand \"aarch64_float_mla_n<mode>\"\n   [(set (match_operand:VDQSF 0 \"register_operand\")\n \t(plus:VDQSF"}, {"sha": "0227cadb7e869ee23dddd7abb71f169093f3cd05", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d9aac8992c1f8c3198d9528a9867c653623dfb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d9aac8992c1f8c3198d9528a9867c653623dfb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=b0d9aac8992c1f8c3198d9528a9867c653623dfb", "patch": "@@ -20347,28 +20347,28 @@ __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmla_f32 (float32x2_t __a, float32x2_t __b, float32x2_t __c)\n {\n-  return __a + __b * __c;\n+  return __builtin_aarch64_float_mlav2sf (__a, __b, __c);\n }\n \n __extension__ extern __inline float64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmla_f64 (float64x1_t __a, float64x1_t __b, float64x1_t __c)\n {\n-  return __a + __b * __c;\n+  return (float64x1_t) {__builtin_aarch64_float_mladf (__a[0], __b[0], __c[0])};\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n {\n-  return __a + __b * __c;\n+  return __builtin_aarch64_float_mlav4sf (__a, __b, __c);\n }\n \n __extension__ extern __inline float64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlaq_f64 (float64x2_t __a, float64x2_t __b, float64x2_t __c)\n {\n-  return __a + __b * __c;\n+  return __builtin_aarch64_float_mlav2df (__a, __b, __c);\n }\n \n /* vmla_lane  */\n@@ -20545,28 +20545,28 @@ __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_f32 (float32x2_t __a, float32x2_t __b, float32x2_t __c)\n {\n-  return __a - __b * __c;\n+  return __builtin_aarch64_float_mlsv2sf (__a, __b, __c);\n }\n \n __extension__ extern __inline float64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_f64 (float64x1_t __a, float64x1_t __b, float64x1_t __c)\n {\n-  return __a - __b * __c;\n+  return (float64x1_t) {__builtin_aarch64_float_mlsdf (__a[0], __b[0], __c[0])};\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n {\n-  return __a - __b * __c;\n+  return __builtin_aarch64_float_mlsv4sf (__a, __b, __c);\n }\n \n __extension__ extern __inline float64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_f64 (float64x2_t __a, float64x2_t __b, float64x2_t __c)\n {\n-  return __a - __b * __c;\n+  return __builtin_aarch64_float_mlsv2df (__a, __b, __c);\n }\n \n /* vmls_lane  */"}, {"sha": "c57aa6bf2f44c910f410d843204ee5601216530f", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d9aac8992c1f8c3198d9528a9867c653623dfb/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d9aac8992c1f8c3198d9528a9867c653623dfb/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=b0d9aac8992c1f8c3198d9528a9867c653623dfb", "patch": "@@ -149,6 +149,7 @@\n \t\t\t     V2SF V4SF V2DF])\n \n ;; Advanced SIMD Float modes, and DF.\n+(define_mode_iterator VDQF_DF [V2SF V4SF V2DF DF])\n (define_mode_iterator VHSDF_DF [(V4HF \"TARGET_SIMD_F16INST\")\n \t\t\t\t(V8HF \"TARGET_SIMD_F16INST\")\n \t\t\t\tV2SF V4SF V2DF DF])"}]}