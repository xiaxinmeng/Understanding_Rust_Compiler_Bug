{"sha": "98dd8c97e44ee8134cecf681045b715a8a73c7cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThkZDhjOTdlNDRlZTgxMzRjZWNmNjgxMDQ1YjcxNWE4YTczYzdjZA==", "commit": {"author": {"name": "Feng Xue", "email": "fxue@os.amperecomputing.com", "date": "2020-01-19T07:49:44Z"}, "committer": {"name": "Feng Xue", "email": "fxue@os.amperecomputing.com", "date": "2020-01-25T14:18:18Z"}, "message": "Remove assertion in get_info_about_necessary_edges\n\n2020-01-25  Feng Xue  <fxue@os.amperecomputing.com>\n\n        PR ipa/93166\n        * ipa-cp.c (get_info_about_necessary_edges): Remove value\n        check assertion.\n\n        PR ipa/93166\n        * g++.dg/pr93166.C: New test.", "tree": {"sha": "6b9b76023b5616842ea59f860062674a3826868c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b9b76023b5616842ea59f860062674a3826868c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98dd8c97e44ee8134cecf681045b715a8a73c7cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98dd8c97e44ee8134cecf681045b715a8a73c7cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98dd8c97e44ee8134cecf681045b715a8a73c7cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98dd8c97e44ee8134cecf681045b715a8a73c7cd/comments", "author": {"login": "feng-xue-ampere", "id": 95893536, "node_id": "U_kgDOBbc4IA", "avatar_url": "https://avatars.githubusercontent.com/u/95893536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feng-xue-ampere", "html_url": "https://github.com/feng-xue-ampere", "followers_url": "https://api.github.com/users/feng-xue-ampere/followers", "following_url": "https://api.github.com/users/feng-xue-ampere/following{/other_user}", "gists_url": "https://api.github.com/users/feng-xue-ampere/gists{/gist_id}", "starred_url": "https://api.github.com/users/feng-xue-ampere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feng-xue-ampere/subscriptions", "organizations_url": "https://api.github.com/users/feng-xue-ampere/orgs", "repos_url": "https://api.github.com/users/feng-xue-ampere/repos", "events_url": "https://api.github.com/users/feng-xue-ampere/events{/privacy}", "received_events_url": "https://api.github.com/users/feng-xue-ampere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feng-xue-ampere", "id": 95893536, "node_id": "U_kgDOBbc4IA", "avatar_url": "https://avatars.githubusercontent.com/u/95893536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feng-xue-ampere", "html_url": "https://github.com/feng-xue-ampere", "followers_url": "https://api.github.com/users/feng-xue-ampere/followers", "following_url": "https://api.github.com/users/feng-xue-ampere/following{/other_user}", "gists_url": "https://api.github.com/users/feng-xue-ampere/gists{/gist_id}", "starred_url": "https://api.github.com/users/feng-xue-ampere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feng-xue-ampere/subscriptions", "organizations_url": "https://api.github.com/users/feng-xue-ampere/orgs", "repos_url": "https://api.github.com/users/feng-xue-ampere/repos", "events_url": "https://api.github.com/users/feng-xue-ampere/events{/privacy}", "received_events_url": "https://api.github.com/users/feng-xue-ampere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d172975f269138ba227f6d4560950265c36df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d172975f269138ba227f6d4560950265c36df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d172975f269138ba227f6d4560950265c36df8"}], "stats": {"total": 222, "additions": 219, "deletions": 3}, "files": [{"sha": "e35efd623e7589e7d656bdb9c37b017e8582c3d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98dd8c97e44ee8134cecf681045b715a8a73c7cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98dd8c97e44ee8134cecf681045b715a8a73c7cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98dd8c97e44ee8134cecf681045b715a8a73c7cd", "patch": "@@ -1,3 +1,9 @@\n+2020-01-25  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR ipa/93166\n+\t* ipa-cp.c (get_info_about_necessary_edges): Remove value\n+\tcheck assertion.\n+\n 2020-01-24  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/92788"}, {"sha": "e762abb896dfe59e1617f1f9b860cb4e7dd258e9", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98dd8c97e44ee8134cecf681045b715a8a73c7cd/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98dd8c97e44ee8134cecf681045b715a8a73c7cd/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=98dd8c97e44ee8134cecf681045b715a8a73c7cd", "patch": "@@ -4175,9 +4175,6 @@ get_info_about_necessary_edges (ipcp_value<valtype> *val, cgraph_node *dest,\n \t      hot |= cs->maybe_hot_p ();\n \t      if (cs->caller != dest)\n \t\tnon_self_recursive = true;\n-\t      else if (src->val)\n-\t\tgcc_assert (values_equal_for_ipcp_p (src->val->value,\n-\t\t\t\t\t\t     val->value));\n \t    }\n \t  cs = get_next_cgraph_edge_clone (cs);\n \t}"}, {"sha": "679583962658f51852de55927979af702cbf2ab4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98dd8c97e44ee8134cecf681045b715a8a73c7cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98dd8c97e44ee8134cecf681045b715a8a73c7cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98dd8c97e44ee8134cecf681045b715a8a73c7cd", "patch": "@@ -1,3 +1,8 @@\n+2020-01-25  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR ipa/93166\n+\t* g++.dg/pr93166.C: New test.\n+\n 2020-01-25  Andrew Pinski <apinski@marvell.com>\n \n \t* gcc.target/aarch64/vec_zeroextend.c: Fix for big-endian."}, {"sha": "e9234ce7a0cbce3480888b319265ee3effad03bc", "filename": "gcc/testsuite/g++.dg/pr93166.C", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98dd8c97e44ee8134cecf681045b715a8a73c7cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93166.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98dd8c97e44ee8134cecf681045b715a8a73c7cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93166.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93166.C?ref=98dd8c97e44ee8134cecf681045b715a8a73c7cd", "patch": "@@ -0,0 +1,208 @@\n+// { dg-do compile }\n+// { dg-options \"-shared -flto -O2 -fPIC -fvisibility=hidden\" }\n+\n+namespace Qt {\n+enum DropAction {};\n+}\n+class QObject;\n+struct QMetaObject {\n+  static void activate(const QMetaObject *, void *);\n+  enum Call {};\n+  struct {\n+    const QMetaObject *superdata;\n+    int *stringdata;\n+    unsigned *data;\n+    typedef void (*StaticMetacallFunction)(QObject *, Call, int, void **);\n+    StaticMetacallFunction static_metacallrelatedMetaObjectsextradata;\n+  } d;\n+};\n+class QString;\n+struct QListData {\n+  struct Data;\n+  Data *d;\n+};\n+template <typename> class QList {\n+  union {\n+    QListData p;\n+    QListData::Data *d;\n+  };\n+\n+public:\n+  ~QList();\n+};\n+class QStringList : QList<QString> {};\n+template <typename> struct QScopedPointerDeleter;\n+class QObjectData;\n+template <typename, typename = QScopedPointerDeleter<QObjectData>>\n+class QScopedPointer {\n+public:\n+  ~QScopedPointer();\n+  QObjectData *d;\n+};\n+\n+template <typename> struct FunctionPointer;\n+template <class Obj, typename Ret, typename... Args>\n+struct FunctionPointer<Ret (Obj::*)(Args...)> {\n+  typedef Obj Object;\n+};\n+\n+class QObject {\n+public:\n+  virtual ~QObject();\n+  virtual void disconnectNotify();\n+  template <typename Func1, typename Func2>\n+  void connect(typename FunctionPointer<Func1>::Object *, Func1,\n+               typename FunctionPointer<Func2>::Object *, Func2);\n+  QScopedPointer<QObjectData> d_ptr;\n+};\n+class QPaintDevicePrivate;\n+class QPaintDevice {\n+public:\n+  virtual ~QPaintDevice();\n+  unsigned short painters;\n+  QPaintDevicePrivate *reserved;\n+};\n+class QWidgetData;\n+class QWidget : public QObject, QPaintDevice {\n+  QWidgetData *data;\n+};\n+class QFrame : public QWidget {};\n+class QMenu;\n+class QMimeData;\n+class QAbstractScrollArea : public QFrame {};\n+class QAbstractItemView : public QAbstractScrollArea {};\n+class QTreeView : public QAbstractItemView {};\n+class QTreeWidgetItem;\n+class QTreeWidget : public QTreeView {};\n+class QSignalMapper;\n+class KActionCollection;\n+class MenuFile;\n+class MenuFolderInfo;\n+class MenuEntryInfo;\n+class MenuSeparatorInfo;\n+class TreeView : QTreeWidget {\n+public:\n+  static const QMetaObject d;\n+  static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **);\n+  void disableAction();\n+  bool dropMimeData(QTreeWidgetItem *, int, const QMimeData *, Qt::DropAction);\n+  KActionCollection *m_ac;\n+  QMenu *m_popupMenu;\n+  int m_clipboard;\n+  MenuFolderInfo *m_clipboardFolderInfo;\n+  MenuEntryInfo *m_clipboardEntryInfo;\n+  bool m_showHidden;\n+  MenuFile *m_menuFile;\n+  MenuFolderInfo *m_rootFolder;\n+  MenuSeparatorInfo *m_separator;\n+  QStringList m_newMenuIds;\n+  QStringList m_newDirectoryList;\n+  bool m_layoutDirty;\n+  bool m_detailedMenuEntries;\n+  bool m_detailedEntriesNamesFirst;\n+  QStringList m_dropMimeTypes;\n+  QSignalMapper *m_sortSignalMapper;\n+};\n+struct {\n+  int data[];\n+} b;\n+unsigned c[]{};\n+void TreeView::qt_static_metacall(QObject *p1, QMetaObject::Call, int,\n+                                  void **p4) {\n+  static_cast<TreeView *>(p1)->dropMimeData(\n+      0, 0, 0, *reinterpret_cast<Qt::DropAction *>(p4));\n+}\n+const QMetaObject TreeView::d{&d, b.data, c, qt_static_metacall};\n+void TreeView::disableAction() { QMetaObject::activate(&d, nullptr); }\n+template <typename> struct QScopedPointerDeleter;\n+class KXMLGUIClientPrivate;\n+class KXMLGUIClient {\n+public:\n+  virtual void m_fn2();\n+  KXMLGUIClient();\n+  virtual ~KXMLGUIClient();\n+  KXMLGUIClientPrivate *const d;\n+};\n+class KXMLGUIBuilderPrivate;\n+class KXMLGUIBuilder {\n+public:\n+  virtual ~KXMLGUIBuilder();\n+  virtual QStringList customTags();\n+  KXMLGUIBuilderPrivate *const d;\n+};\n+\n+class QMainWindow : public QWidget {};\n+class KMainWindowPrivate;\n+class KMainWindow : public QMainWindow {\n+  KMainWindowPrivate *const k_ptr;\n+};\n+class KXmlGuiWindow : public KMainWindow,\n+                      KXMLGUIBuilder,\n+                      virtual KXMLGUIClient {\n+public:\n+  KXmlGuiWindow();\n+};\n+class QSplitter;\n+class QAction;\n+class BasicTab;\n+class TreeView;\n+class KTreeWidgetSearchLine;\n+class KMenuEdit : public KXmlGuiWindow {\n+public:\n+  KMenuEdit();\n+  TreeView *m_tree;\n+  BasicTab *m_basicTab;\n+  QSplitter *m_splitter;\n+  KTreeWidgetSearchLine *m_searchLine;\n+  QAction *m_actionDelete;\n+  bool m_showHidden;\n+};\n+int __attribute__((visibility(\"default\"))) fn1() { new KMenuEdit; return 0; }\n+template <class> struct QTypedArrayData;\n+class QString {\n+public:\n+  ~QString();\n+  QTypedArrayData<unsigned short> *d;\n+};\n+class MenuEntryInfo;\n+class MenuInfo {\n+public:\n+  virtual ~MenuInfo();\n+};\n+class MenuFolderInfo : MenuInfo {\n+public:\n+  void updateFullId(const QString &);\n+  QString id;\n+  QString fullId;\n+  QString caption;\n+  QString genericname;\n+  QString comment;\n+  QString directoryFile;\n+  QString icon;\n+  QList<MenuFolderInfo *> subFolders;\n+  QList<MenuEntryInfo *> entries;\n+  QList<MenuInfo *> initialLayout;\n+  bool dirty;\n+  bool hidden;\n+};\n+void MenuFolderInfo::updateFullId(const QString &) {\n+  for (MenuFolderInfo *a = 0;;)\n+    a->updateFullId(fullId);\n+}\n+\n+MenuFolderInfo *a1, *b1;\n+bool TreeView::dropMimeData(QTreeWidgetItem *, int, const QMimeData *,\n+                            Qt::DropAction) {\n+  b1->updateFullId(a1->fullId);\n+  return true;\n+}\n+\n+class BasicTab {\n+public:\n+  void slotDisableAction();\n+};\n+\n+KMenuEdit::KMenuEdit() {\n+  connect(m_tree, &TreeView::disableAction, m_basicTab,\n+          &BasicTab::slotDisableAction);\n+}"}]}