{"sha": "0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyYzRhOGYxZDI5MDNmOWMwN2I4NmJmOGZhZWFiZTFhMDFlZDM0Yg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-05-04T17:40:05Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-05-04T17:40:05Z"}, "message": "PR translation/80280 - Missing closing quote (%>) c/semantics.c and c/c-typeck.c\n\ngcc/c-family/ChangeLog:\n\n\tPR translation/80280\n\t* c-attribs.c (handle_alias_ifunc_attribute): Quote a %D directive.\n\t(handle_weakref_attribute): Same.\n\nPR translation/80280 - Missing closing quote (%>) c/semantics.c and c/c-typeck.c\n\ngcc/ChangeLog:\n\n\tPR translation/80280\n\t* config/i386/i386.c (ix86_function_versions): Quote a %D directive.\n\nPR translation/80280 - Missing closing quote (%>) c/semantics.c and c/c-typeck.c\n\ngcc/cp/ChangeLog:\n\n\tPR translation/80280\n\t* call.c (print_z_candidate): Add missing quoting to %D and other\n\tlike directives.\n\t(build_op_call_1): Same.\n\t* constraint.cc (diagnose_check_constraint): Same.\n\t* mangle.c (mangle_decl): Same.\n\t* name-lookup.c (cp_binding_level_debug): Same.\n\t(set_decl_namespace): Same.\n\t* parser.c (cp_parser_tx_qualifier_opt): Same.\n\t* pt.c (print_candidates_1): Same.\n\t(check_template_variable): Same.\n\t(tsubst_default_argument): Same.\n\t(most_specialized_partial_spec): Same.\n\t* semantics.c (omp_reduction_lookup): Same.\n\t* tree.c (check_abi_tag_redeclaration): Same.\n\t* typeck.c (comptypes): Same.\n\t* typeck2.c (abstract_virtuals_error_sfinae): Same.\n\nPR translation/80280 - Missing closing quote (%>) c/semantics.c and c/c-typeck.c\n\ngcc/ChangeLog:\n\n\tPR translation/80280\n\t* builtins.c (expand_builtin_object_size): Add missing quoting to\n\t%D and like directives.\n\t* hsa-gen.c (hsa_type_for_scalar_tree_type): Same.\n\t(hsa_type_for_tree_type): Same.\n\t(verify_function_arguments): Same.\n\t* symtab.c (symbol_table::change_decl_assembler_name): Same.\n\t* varasm.c (get_section): Same.\n\t(mark_weak): Same.\n\nPR translation/80280 - Missing closing quote (%>) c/semantics.c and c/c-typeck.c\n\ngcc/objc/ChangeLog:\n\n\tPR translation/80280\n\t* objc-gnu-runtime-abi-01.c (objc_eh_runtime_type): Add missing\n\tquoting to directives.\n\t* objc-next-runtime-abi-01.c (objc_eh_runtime_type): Ditto.\n\t* objc-next-runtime-abi-02.c (next_runtime_02_eh_type): Ditto.\n\nPR translation/80280 - Missing closing quote (%>) c/semantics.c and c/c-typeck.c\n\ngcc/testsuite/ChangeLog:\n\n\tPR translation/80280\n\t* g++.dg/abi/Wabi-2-3.C: Adjust.\n\t* g++.dg/abi/Wabi-3-2.C: Ditto.\n\t* g++.dg/lookup/using17.C: Ditto.\n\t* gcc.dg/format/gcc_diag-1.c (foo): Ditto.\n\nFrom-SVN: r247607", "tree": {"sha": "e7bcef95a7fa8543f14fcb07b73e57a83e3c8747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7bcef95a7fa8543f14fcb07b73e57a83e3c8747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fae724a1e13e63c996dd23b3885be99fe0fea5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fae724a1e13e63c996dd23b3885be99fe0fea5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fae724a1e13e63c996dd23b3885be99fe0fea5d"}], "stats": {"total": 205, "additions": 135, "deletions": 70}, "files": [{"sha": "3e93441c4bf94c7f8010a20dc77e71cc4a51c66f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -1,3 +1,20 @@\n+2017-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR translation/80280\n+\t* builtins.c (expand_builtin_object_size): Add missing quoting to\n+\t%D and like directives.\n+\t* hsa-gen.c (hsa_type_for_scalar_tree_type): Same.\n+\t(hsa_type_for_tree_type): Same.\n+\t(verify_function_arguments): Same.\n+\t* symtab.c (symbol_table::change_decl_assembler_name): Same.\n+\t* varasm.c (get_section): Same.\n+\t(mark_weak): Same.\n+\n+2017-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR translation/80280\n+\t* config/i386/i386.c (ix86_function_versions): Quote a %D directive.\n+\n 2017-05-04  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (generic_addrcost_table):"}, {"sha": "5567fd2dcab18906e1bc4e8018d3dba0f5cf7089", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -9493,7 +9493,7 @@ expand_builtin_object_size (tree exp)\n \n   if (!validate_arglist (exp, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     {\n-      error (\"%Kfirst argument of %D must be a pointer, second integer constant\",\n+      error (\"%Kfirst argument of %qD must be a pointer, second integer constant\",\n \t     exp, fndecl);\n       expand_builtin_trap ();\n       return const0_rtx;\n@@ -9506,7 +9506,7 @@ expand_builtin_object_size (tree exp)\n       || tree_int_cst_sgn (ost) < 0\n       || compare_tree_int (ost, 3) > 0)\n     {\n-      error (\"%Klast argument of %D is not integer constant between 0 and 3\",\n+      error (\"%Klast argument of %qD is not integer constant between 0 and 3\",\n \t     exp, fndecl);\n       expand_builtin_trap ();\n       return const0_rtx;"}, {"sha": "63d41979de7034c09879aeb783321d574c53f890", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -1,3 +1,9 @@\n+2017-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR translation/80280\n+\t* c-attribs.c (handle_alias_ifunc_attribute): Quote a %D directive.\n+\t(handle_weakref_attribute): Same.\n+\n 2017-05-03  Nathan Sidwell  <nathan@acm.org>\n \n \tCanonicalize canonical type hashing"}, {"sha": "695c58c0a14e01c30ded5961268f05d83a0abb98", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -1780,9 +1780,9 @@ handle_alias_ifunc_attribute (bool is_alias, tree *node, tree name, tree args,\n       if (n && n->refuse_visibility_changes)\n \t{\n \t  if (is_alias)\n-\t    error (\"%+D declared alias after being used\", decl);\n+\t    error (\"%+qD declared alias after being used\", decl);\n \t  else\n-\t    error (\"%+D declared ifunc after being used\", decl);\n+\t    error (\"%+qD declared ifunc after being used\", decl);\n \t}\n     }\n \n@@ -1867,7 +1867,7 @@ handle_weakref_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n     {\n       struct symtab_node *n = symtab_node::get (*node);\n       if (n && n->refuse_visibility_changes)\n-\terror (\"%+D declared weakref after being used\", *node);\n+\terror (\"%+qD declared weakref after being used\", *node);\n     }\n \n   return NULL_TREE;"}, {"sha": "dec3aee00483f9505f6c58174d75fb5da82e53a6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -33069,10 +33069,10 @@ ix86_function_versions (tree fn1, tree fn2)\n \t      attr1 = attr2;\n \t    }\n \t  error_at (DECL_SOURCE_LOCATION (fn2),\n-\t\t    \"missing %<target%> attribute for multi-versioned %D\",\n+\t\t    \"missing %<target%> attribute for multi-versioned %qD\",\n \t\t    fn2);\n \t  inform (DECL_SOURCE_LOCATION (fn1),\n-\t\t  \"previous declaration of %D\", fn1);\n+\t\t  \"previous declaration of %qD\", fn1);\n \t  /* Prevent diagnosing of the same error multiple times.  */\n \t  DECL_ATTRIBUTES (fn2)\n \t    = tree_cons (get_identifier (\"target\"),"}, {"sha": "ef1809cc0c5648898bf43fff4c69709eb771ad02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -1,3 +1,23 @@\n+2017-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR translation/80280\n+\t* call.c (print_z_candidate): Add missing quoting to %D and other\n+\tlike directives.\n+\t(build_op_call_1): Same.\n+\t* constraint.cc (diagnose_check_constraint): Same.\n+\t* mangle.c (mangle_decl): Same.\n+\t* name-lookup.c (cp_binding_level_debug): Same.\n+\t(set_decl_namespace): Same.\n+\t* parser.c (cp_parser_tx_qualifier_opt): Same.\n+\t* pt.c (print_candidates_1): Same.\n+\t(check_template_variable): Same.\n+\t(tsubst_default_argument): Same.\n+\t(most_specialized_partial_spec): Same.\n+\t* semantics.c (omp_reduction_lookup): Same.\n+\t* tree.c (check_abi_tag_redeclaration): Same.\n+\t* typeck.c (comptypes): Same.\n+\t* typeck2.c (abstract_virtuals_error_sfinae): Same.\n+\n 2017-05-04  Nathan Sidwell  <nathan@acm.org>\n \n \tMore global trees."}, {"sha": "9401062371e1f6fcded7cbff7a928db7b400f17f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -3457,26 +3457,26 @@ print_z_candidate (location_t loc, const char *msgstr,\n     {\n       cloc = loc;\n       if (candidate->num_convs == 3)\n-\tinform (cloc, \"%s%D(%T, %T, %T) <built-in>\", msg, fn,\n+\tinform (cloc, \"%<%s%D(%T, %T, %T) <built-in>%>\", msg, fn,\n \t\tcandidate->convs[0]->type,\n \t\tcandidate->convs[1]->type,\n \t\tcandidate->convs[2]->type);\n       else if (candidate->num_convs == 2)\n-\tinform (cloc, \"%s%D(%T, %T) <built-in>\", msg, fn,\n+\tinform (cloc, \"%<%s%D(%T, %T) <built-in>%>\", msg, fn,\n \t\tcandidate->convs[0]->type,\n \t\tcandidate->convs[1]->type);\n       else\n-\tinform (cloc, \"%s%D(%T) <built-in>\", msg, fn,\n+\tinform (cloc, \"%<%s%D(%T) <built-in>%>\", msg, fn,\n \t\tcandidate->convs[0]->type);\n     }\n   else if (TYPE_P (fn))\n-    inform (cloc, \"%s%T <conversion>\", msg, fn);\n+    inform (cloc, \"%s%qT <conversion>\", msg, fn);\n   else if (candidate->viable == -1)\n-    inform (cloc, \"%s%#D <near match>\", msg, fn);\n+    inform (cloc, \"%s%#qD <near match>\", msg, fn);\n   else if (DECL_DELETED_FN (fn))\n-    inform (cloc, \"%s%#D <deleted>\", msg, fn);\n+    inform (cloc, \"%s%#qD <deleted>\", msg, fn);\n   else\n-    inform (cloc, \"%s%#D\", msg, fn);\n+    inform (cloc, \"%s%#qD\", msg, fn);\n   if (fn != candidate->fn)\n     {\n       cloc = location_of (candidate->fn);\n@@ -4426,7 +4426,8 @@ build_op_call_1 (tree obj, vec<tree, va_gc> **args, tsubst_flags_t complain)\n       if (complain & tf_error)\n         /* It's no good looking for an overloaded operator() on a\n            pointer-to-member-function.  */\n-        error (\"pointer-to-member function %E cannot be called without an object; consider using .* or ->*\", obj);\n+\terror (\"pointer-to-member function %qE cannot be called without \"\n+\t       \"an object; consider using %<.*%> or %<->*%>\", obj);\n       return error_mark_node;\n     }\n "}, {"sha": "a2c910dd5ba3342c1b8f2d7d0054c4fe17d83307", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -2859,7 +2859,7 @@ diagnose_check_constraint (location_t loc, tree orig, tree cur, tree args)\n     {\n       if (elide_constraint_failure_p ())\n         return;\n-      inform (loc, \"in the expansion of concept %qE %S\", check, sub);\n+      inform (loc, \"in the expansion of concept %<E %S%>\", check, sub);\n       cur = get_concept_definition (decl);\n       tsubst_expr (cur, targs, tf_warning_or_error, NULL_TREE, false);\n       return;"}, {"sha": "9ee74a776ac6ee15d6a6c26a8475f13308080518", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -3906,6 +3906,8 @@ mangle_decl (const tree decl)\n \n       if (warn_abi)\n \t{\n+\t  const char fabi_version[] = \"-fabi-version\";\n+\n \t  if (flag_abi_compat_version != warn_abi_version\n \t      || id2 == NULL_TREE)\n \t    {\n@@ -3921,15 +3923,15 @@ mangle_decl (const tree decl)\n \t\t   && abi_version_at_least (warn_abi_version))\n \t    warning_at (DECL_SOURCE_LOCATION (G.entity), OPT_Wabi,\n \t\t\t\"the mangled name of %qD changed between \"\n-\t\t\t\"-fabi-version=%d (%D) and -fabi-version=%d (%D)\",\n-\t\t\tG.entity, warn_abi_version, id2,\n-\t\t\tsave_ver, id);\n+\t\t\t\"%<%s=%d%> (%qD) and %<%s=%d%> (%qD)\",\n+\t\t\tG.entity, fabi_version, warn_abi_version, id2,\n+\t\t\tfabi_version, save_ver, id);\n \t  else\n \t    warning_at (DECL_SOURCE_LOCATION (G.entity), OPT_Wabi,\n \t\t\t\"the mangled name of %qD changes between \"\n-\t\t\t\"-fabi-version=%d (%D) and -fabi-version=%d (%D)\",\n-\t\t\tG.entity, save_ver, id,\n-\t\t\twarn_abi_version, id2);\n+\t\t\t\"%<%s=%d%> (%qD) and %<%s=%d%> (%qD)\",\n+\t\t\tG.entity, fabi_version, save_ver, id,\n+\t\t\tfabi_version, warn_abi_version, id2);\n \t}\n \n       flag_abi_version = save_ver;"}, {"sha": "971a3bf31a257fe735c885655beb720640a26dbc", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -2070,7 +2070,7 @@ cp_binding_level_debug (cp_binding_level *scope, int line, const char *action)\n {\n   const char *desc = cp_binding_level_descriptor (scope);\n   if (scope->this_entity)\n-    verbatim (\"%s %s(%E) %p %d\\n\", action, desc,\n+    verbatim (\"%s %<%s(%E)%> %p %d\\n\", action, desc,\n \t      scope->this_entity, (void *) scope, line);\n   else\n     verbatim (\"%s %s %p %d\\n\", action, desc, (void *) scope, line);\n@@ -4154,8 +4154,9 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n \t  if (DECL_HIDDEN_FRIEND_P (found))\n \t    {\n \t      pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n-\t\t       \"%qD has not been declared within %D\", decl, scope);\n-\t      inform (DECL_SOURCE_LOCATION (found), \"only here as a friend\");\n+\t\t       \"%qD has not been declared within %qD\", decl, scope);\n+\t      inform (DECL_SOURCE_LOCATION (found),\n+\t\t      \"only here as a %<friend%>\");\n \t    }\n \t  DECL_CONTEXT (decl) = DECL_CONTEXT (found);\n \t  return;"}, {"sha": "ab56f120083ba607dbe5ef0f0c32515a45af36e1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -20370,7 +20370,7 @@ cp_parser_tx_qualifier_opt (cp_parser *parser)\n \t      cp_lexer_consume_token (parser->lexer);\n \t      if (!flag_tm)\n \t\t{\n-\t\t  error (\"%E requires %<-fgnu-tm%>\", name);\n+\t\t  error (\"%qE requires %<-fgnu-tm%>\", name);\n \t\t  return NULL_TREE;\n \t\t}\n \t      else"}, {"sha": "c4d402efd0a7684b0029346c2b5772593a04b84b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -1943,14 +1943,14 @@ print_candidates_1 (tree fns, bool more, const char **str)\n             if (!more && !OVL_NEXT (fns))\n               {\n                 inform (DECL_SOURCE_LOCATION (cand),\n-\t\t\t\"candidate is: %#D\", cand);\n+\t\t\t\"candidate is: %#qD\", cand);\n                 continue;\n               }\n \n             *str = _(\"candidates are:\");\n             spaces = get_spaces (*str);\n           }\n-        inform (DECL_SOURCE_LOCATION (cand), \"%s %#D\", *str, cand);\n+\tinform (DECL_SOURCE_LOCATION (cand), \"%s %#qD\", *str, cand);\n         *str = spaces ? spaces : *str;\n       }\n \n@@ -2583,7 +2583,8 @@ check_template_variable (tree decl)\n   if (template_header_count > wanted)\n     {\n       bool warned = pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n-\t\t\t     \"too many template headers for %D (should be %d)\",\n+\t\t\t     \"too many template headers for %qD \"\n+\t                     \"(should be %d)\",\n \t\t\t     decl, wanted);\n       if (warned && CLASS_TYPE_P (ctx)\n \t  && CLASSTYPE_TEMPLATE_SPECIALIZATION (ctx))\n@@ -11978,7 +11979,7 @@ tsubst_default_argument (tree fn, tree type, tree arg, tsubst_flags_t complain)\n   if (errorcount+sorrycount > errs\n       && (complain & tf_warning_or_error))\n     inform (input_location,\n-\t    \"  when instantiating default argument for call to %D\", fn);\n+\t    \"  when instantiating default argument for call to %qD\", fn);\n \n   /* Make sure the default argument is reasonable.  */\n   arg = check_default_argument (type, arg, complain);\n@@ -21895,7 +21896,7 @@ most_specialized_partial_spec (tree target, tsubst_flags_t complain)\n         {\n \t  tree subst = build_tree_list (TREE_VALUE (t), TREE_PURPOSE (t));\n           inform (DECL_SOURCE_LOCATION (TREE_VALUE (t)),\n-\t\t  \"%s %#S\", spaces ? spaces : str, subst);\n+\t\t  \"%s %#qS\", spaces ? spaces : str, subst);\n           spaces = spaces ? spaces : get_spaces (str);\n         }\n       free (spaces);"}, {"sha": "df94a039bd89831f01cc7edf5e49abfaeb96efaa", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -5255,7 +5255,7 @@ omp_reduction_lookup (location_t loc, tree id, tree type, tree *baselinkp,\n \t  error_at (loc, \"user defined reduction lookup is ambiguous\");\n \t  FOR_EACH_VEC_ELT (ambiguous, idx, udr)\n \t    {\n-\t      inform (DECL_SOURCE_LOCATION (udr), \"%s %#D\", str, udr);\n+\t      inform (DECL_SOURCE_LOCATION (udr), \"%s %#qD\", str, udr);\n \t      if (idx == 0)\n \t\tstr = get_spaces (str);\n \t    }"}, {"sha": "ba1cb33bffaa8000a4607f6071a08e1cfd117ba2", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -4027,7 +4027,7 @@ check_abi_tag_redeclaration (const_tree decl, const_tree old, const_tree new_)\n \t  if (cp_tree_equal (str, ostr))\n \t    goto found;\n \t}\n-      error (\"redeclaration of %qD adds abi tag %E\", decl, str);\n+      error (\"redeclaration of %qD adds abi tag %qE\", decl, str);\n       err = true;\n     found:;\n     }"}, {"sha": "26ef5ed574857ceaf78a2aeb8e2b2f1fbc095d08", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -1430,14 +1430,14 @@ comptypes (tree t1, tree t2, int strict)\n \t       canonical types were different. This is a failure of the\n \t       canonical type propagation code.*/\n \t    internal_error \n-\t      (\"canonical types differ for identical types %T and %T\", \n+\t      (\"canonical types differ for identical types %qT and %qT\",\n \t       t1, t2);\n \t  else if (!result && TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2))\n \t    /* Two types are structurally different, but the canonical\n \t       types are the same. This means we were over-eager in\n \t       assigning canonical types. */\n \t    internal_error \n-\t      (\"same canonical type node for different types %T and %T\",\n+\t      (\"same canonical type node for different types %qT and %qT\",\n \t       t1, t2);\n \t  \n \t  return result;"}, {"sha": "216736dd00055b79555f852cfdaf3ba55cdf9c70", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -384,7 +384,7 @@ abstract_virtuals_error_sfinae (tree decl, tree type, abstract_class_use use,\n       FOR_EACH_VEC_ELT (*pure, ix, fn)\n \tif (! DECL_CLONED_FUNCTION_P (fn)\n \t    || DECL_COMPLETE_DESTRUCTOR_P (fn))\n-\t  inform (DECL_SOURCE_LOCATION (fn), \"\\t%#D\", fn);\n+\t  inform (DECL_SOURCE_LOCATION (fn), \"\\t%#qD\", fn);\n \n       /* Now truncate the vector.  This leaves it non-null, so we know\n \t there are pure virtuals, but empty so we don't list them out"}, {"sha": "4b85e0b267869e5bf0fdd33b23b3e1f3b907a366", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -587,7 +587,7 @@ hsa_type_for_scalar_tree_type (const_tree type, bool min32int)\n     {\n       HSA_SORRY_ATV (EXPR_LOCATION (type),\n \t\t     \"support for HSA does not implement huge or \"\n-\t\t     \"variable-sized type %T\", type);\n+\t\t     \"variable-sized type %qT\", type);\n       return res;\n     }\n \n@@ -616,7 +616,7 @@ hsa_type_for_scalar_tree_type (const_tree type, bool min32int)\n   if (res == BRIG_TYPE_NONE)\n     {\n       HSA_SORRY_ATV (EXPR_LOCATION (type),\n-\t\t     \"support for HSA does not implement type %T\", type);\n+\t\t     \"support for HSA does not implement type %qT\", type);\n       return res;\n     }\n \n@@ -628,7 +628,7 @@ hsa_type_for_scalar_tree_type (const_tree type, bool min32int)\n \t{\n \t  HSA_SORRY_ATV (EXPR_LOCATION (type),\n \t\t\t \"support for HSA does not implement a vector type \"\n-\t\t\t \"where a type and unit size are equal: %T\", type);\n+\t\t\t \"where a type and unit size are equal: %qT\", type);\n \t  return res;\n \t}\n \n@@ -645,7 +645,7 @@ hsa_type_for_scalar_tree_type (const_tree type, bool min32int)\n \t  break;\n \tdefault:\n \t  HSA_SORRY_ATV (EXPR_LOCATION (type),\n-\t\t\t \"support for HSA does not implement type %T\", type);\n+\t\t\t \"support for HSA does not implement type %qT\", type);\n \t}\n     }\n \n@@ -704,7 +704,7 @@ hsa_type_for_tree_type (const_tree type, unsigned HOST_WIDE_INT *dim_p = NULL,\n   if (!tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n     {\n       HSA_SORRY_ATV (EXPR_LOCATION (type), \"support for HSA does not \"\n-\t\t     \"implement huge or variable-sized type %T\", type);\n+\t\t     \"implement huge or variable-sized type %qT\", type);\n       return BRIG_TYPE_NONE;\n     }\n \n@@ -732,8 +732,8 @@ hsa_type_for_tree_type (const_tree type, unsigned HOST_WIDE_INT *dim_p = NULL,\n \t      || !tree_fits_shwi_p (TYPE_MAX_VALUE (domain)))\n \t    {\n \t      HSA_SORRY_ATV (EXPR_LOCATION (type),\n-\t\t\t     \"support for HSA does not implement array %T with \"\n-\t\t\t     \"unknown bounds\", type);\n+\t\t\t     \"support for HSA does not implement array \"\n+\t\t\t     \"%qT with unknown bounds\", type);\n \t      return BRIG_TYPE_NONE;\n \t    }\n \t  HOST_WIDE_INT min = tree_to_shwi (TYPE_MIN_VALUE (domain));\n@@ -3485,14 +3485,14 @@ verify_function_arguments (tree decl)\n   if (DECL_STATIC_CHAIN (decl))\n     {\n       HSA_SORRY_ATV (EXPR_LOCATION (decl),\n-\t\t     \"HSA does not support nested functions: %D\", decl);\n+\t\t     \"HSA does not support nested functions: %qD\", decl);\n       return;\n     }\n   else if (!TYPE_ARG_TYPES (type) || stdarg_p (type))\n     {\n       HSA_SORRY_ATV (EXPR_LOCATION (decl),\n \t\t     \"HSA does not support functions with variadic arguments \"\n-\t\t     \"(or unknown return type): %D\", decl);\n+\t\t     \"(or unknown return type): %qD\", decl);\n       return;\n     }\n }"}, {"sha": "5649ddc92c7afec706050afcb8c1937dfaa14ee4", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -1,3 +1,11 @@\n+2017-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR translation/80280\n+\t* objc-gnu-runtime-abi-01.c (objc_eh_runtime_type): Add missing\n+\tquoting to directives.\n+\t* objc-next-runtime-abi-01.c (objc_eh_runtime_type): Ditto.\n+\t* objc-next-runtime-abi-02.c (next_runtime_02_eh_type): Ditto.\n+\n 2017-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "beeec589841566ec73850c8123c9809fb8f5178e", "filename": "gcc/objc/objc-gnu-runtime-abi-01.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -2165,7 +2165,7 @@ objc_eh_runtime_type (tree type)\n \t we use the c++ typeinfo decl. */\n       return build_eh_type_type (type);\n #else\n-      error (\"non-objective-c type '%T' cannot be caught\", type);\n+      error (\"non-objective-c type %qT cannot be caught\", type);\n       ident = get_identifier (\"ErrorMarkNode\");\n       goto make_err_class;\n #endif"}, {"sha": "7aff7883f211790cc114a2eb3be5a7ed854d3a80", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -2812,7 +2812,7 @@ objc_eh_runtime_type (tree type)\n \t we use c++'s typeinfo decl. */\n       return build_eh_type_type (type);\n #else\n-      error (\"non-objective-c type '%T' cannot be caught\", type);\n+      error (\"non-objective-c type %qT cannot be caught\", type);\n       ident = get_identifier (\"ErrorMarkNode\");\n       goto make_err_class;\n #endif"}, {"sha": "97314860e015adbfb029350b182ca3eae50fd8bc", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -3584,7 +3584,7 @@ next_runtime_02_eh_type (tree type)\n \t case, we use c++'s typeinfo decl.  */\n       return build_eh_type_type (type);\n #else\n-      error (\"non-objective-c type '%T' cannot be caught\", type);\n+      error (\"non-objective-c type %qT cannot be caught\", type);\n       goto err_mark_in;\n #endif\n     }"}, {"sha": "6c41dcff4b70b6143b99d190f366fb88583d01e9", "filename": "gcc/symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -296,7 +296,7 @@ symbol_table::change_decl_assembler_name (tree decl, tree name)\n       const char *old_name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n       if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n \t  && DECL_RTL_SET_P (decl))\n-\twarning (0, \"%D renamed after being referenced in assembly\", decl);\n+\twarning (0, \"%qD renamed after being referenced in assembly\", decl);\n \n       SET_DECL_ASSEMBLER_NAME (decl, name);\n       if (alias)"}, {"sha": "a4d3c322c0ce775d0a044d46a586ac9ddb50fd6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -1,3 +1,11 @@\n+2017-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR translation/80280\n+\t* g++.dg/abi/Wabi-2-3.C: Adjust.\n+\t* g++.dg/abi/Wabi-3-2.C: Ditto.\n+\t* g++.dg/lookup/using17.C: Ditto.\n+\t* gcc.dg/format/gcc_diag-1.c (foo): Ditto.\n+\n 2017-05-04  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/80622"}, {"sha": "d7af9794d6673acc36689a1914e796cd3f406b6e", "filename": "gcc/testsuite/g++.dg/abi/Wabi-2-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2FWabi-2-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2FWabi-2-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2FWabi-2-3.C?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -12,5 +12,5 @@ template <int &> struct S { };\n \n // Expect the diagnostic to reference the ABI version specified via\n // -fabi-version=3 and the ABI version specified via -Wabi=2.\n-void foo (S<N>) { }   // { dg-warning \"the mangled name of .void foo\\\\(S<N>\\\\). changed between -fabi-version=2 \\\\(_Z3foo1SILZ1NEE\\\\) and -fabi-version=3 \\\\(_Z3foo1SIL_Z1NEE\\\\)\" }\n+void foo (S<N>) { }   // { dg-warning \"the mangled name of .void foo\\\\(S<N>\\\\). changed between .-fabi-version=2. \\\\(._Z3foo1SILZ1NEE.\\\\) and .-fabi-version=3. \\\\(._Z3foo1SIL_Z1NEE.\\\\)\" }\n "}, {"sha": "703b277e41e09afd0d0b437fa8bdf649c6642e6c", "filename": "gcc/testsuite/g++.dg/abi/Wabi-3-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2FWabi-3-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2FWabi-3-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2FWabi-3-2.C?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -12,5 +12,5 @@ template <int &> struct S { };\n \n // Expect the diagnostic to reference the ABI version specified via\n // -fabi-version=2 and the ABI version specified via -Wabi=3.\n-void foo (S<N>) { }   // { dg-warning \"the mangled name of .void foo\\\\(S<N>\\\\). changes between -fabi-version=2 \\\\(_Z3foo1SILZ1NEE\\\\) and -fabi-version=3 \\\\(_Z3foo1SIL_Z1NEE\\\\)\" }\n+void foo (S<N>) { }   // { dg-warning \"the mangled name of .void foo\\\\(S<N>\\\\). changes between .-fabi-version=2. \\\\(._Z3foo1SILZ1NEE.\\\\) and .-fabi-version=3. \\\\(._Z3foo1SIL_Z1NEE.\\\\)\" }\n "}, {"sha": "ec2f55183977e0677e154d66e60d9068ede94559", "filename": "gcc/testsuite/g++.dg/lookup/using17.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing17.C?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -3,11 +3,11 @@\n // { dg-do compile }\n \n namespace M {\n-  struct S {}; // { dg-message \"struct M::S\" \"candidate 2\" }\n+  struct S {}; // { dg-message \".struct M::S.\" \"candidate 2\" }\n }\n \n int S;\n-struct S {}; // { dg-message \"candidates are: struct S\" \"candidate 1\" }\n+struct S {}; // { dg-message \"candidates are: .struct S.\" \"candidate 1\" }\n \n using namespace M;\n "}, {"sha": "4dcdb05b8b9c566c36261a169b106aacda58b73a", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-1.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -70,20 +70,21 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   cdiag (\"%m\");\n   cxxdiag (\"%m\");\n \n-  tdiag (\"%D%F%T%V\", t1, t1, t1, t1);\n-  tdiag (\"%+D%+F%+T%+V\", t1, t1, t1, t1);\n+  /* Quote directives to avoid \"warning: conversion used unquoted.\" */\n+  tdiag (\"%<%D%F%T%V%>\", t1, t1, t1, t1);\n+  tdiag (\"%<%+D%+F%+T%+V%>\", t1, t1, t1, t1);\n   tdiag (\"%q+D%q+F%q+T%q+V\", t1, t1, t1, t1);\n-  tdiag (\"%D%D%D%D\", t1, t2, *t3, t4[5]);\n-  cdiag (\"%D%F%T%V\", t1, t1, t1, t1);\n-  cdiag (\"%+D%+F%+T%+V\", t1, t1, t1, t1);\n+  tdiag (\"%<%D%D%D%D%>\", t1, t2, *t3, t4[5]);\n+  cdiag (\"%<%D%F%T%V%>\", t1, t1, t1, t1);\n+  cdiag (\"%<%+D%+F%+T%+V%>\", t1, t1, t1, t1);\n   cdiag (\"%q+D%q+F%q+T%q+V\", t1, t1, t1, t1);\n-  cdiag (\"%D%D%D%D\", t1, t2, *t3, t4[5]);\n-  cdiag (\"%E\", t1);\n-  cxxdiag (\"%A%D%E%F%T%V\", t1, t1, t1, t1, t1, t1);\n-  cxxdiag (\"%D%D%D%D\", t1, t2, *t3, t4[5]);\n-  cxxdiag (\"%#A%#D%#E%#F%#T%#V\", t1, t1, t1, t1, t1, t1);\n-  cxxdiag (\"%+A%+D%+E%+F%+T%+V\", t1, t1, t1, t1, t1, t1);\n-  cxxdiag (\"%+#A%+#D%+#E%+#F%+#T%+#V\", t1, t1, t1, t1, t1, t1);\n+  cdiag (\"%<%D%D%D%D%>\", t1, t2, *t3, t4[5]);\n+  cdiag (\"%<%E%>\", t1);\n+  cxxdiag (\"%<%A%D%E%F%T%V%>\", t1, t1, t1, t1, t1, t1);\n+  cxxdiag (\"%<%D%D%D%D%>\", t1, t2, *t3, t4[5]);\n+  cxxdiag (\"%<%#A%#D%#E%#F%#T%#V%>\", t1, t1, t1, t1, t1, t1);\n+  cxxdiag (\"%<%+A%+D%+E%+F%+T%+V%>\", t1, t1, t1, t1, t1, t1);\n+  cxxdiag (\"%<%+#A%+#D%+#E%+#F%+#T%+#V%>\", t1, t1, t1, t1, t1, t1);\n   cxxdiag (\"%C%L%O%P%Q\", i, i, i, i, i);\n \n   tdiag (\"%v%qv%#v\", i, i, i);\n@@ -113,7 +114,7 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   tdiag (\"%#D\", t1); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cdiag (\"%A\", t1); /* { dg-warning \"format\" \"bogus tree\" } */\n   cdiag (\"%#D\", t1); /* { dg-warning \"format\" \"bogus modifier\" } */\n-  cdiag (\"%+D\", t1);\n+  cdiag (\"%<%+D%>\", t1);\n   cxxdiag (\"%C\"); /* { dg-warning \"format\" \"missing arg\" } */\n   cxxdiag (\"%C\", l); /* { dg-warning \"format\" \"wrong arg\" } */\n   cxxdiag (\"%C\", i, i); /* { dg-warning \"format\" \"extra arg\" } */"}, {"sha": "096871d7e969289ff50fda65d654c78d103734d7", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0f2c4a8f1d2903f9c07b86bf8faeabe1a01ed34b", "patch": "@@ -320,15 +320,15 @@ get_section (const char *name, unsigned int flags, tree decl)\n \t      && decl != sect->named.decl)\n \t    {\n \t      if (decl != NULL && DECL_P (decl))\n-\t\terror (\"%+D causes a section type conflict with %D\",\n+\t\terror (\"%+qD causes a section type conflict with %qD\",\n \t\t       decl, sect->named.decl);\n \t      else\n-\t\terror (\"section type conflict with %D\", sect->named.decl);\n+\t\terror (\"section type conflict with %qD\", sect->named.decl);\n \t      inform (DECL_SOURCE_LOCATION (sect->named.decl),\n \t\t      \"%qD was declared here\", sect->named.decl);\n \t    }\n \t  else if (decl != NULL && DECL_P (decl))\n-\t    error (\"%+D causes a section type conflict\", decl);\n+\t    error (\"%+qD causes a section type conflict\", decl);\n \t  else\n \t    error (\"section type conflict\");\n \t  /* Make sure we don't error about one section multiple times.  */\n@@ -5383,7 +5383,7 @@ mark_weak (tree decl)\n \n   struct symtab_node *n = symtab_node::get (decl);\n   if (n && n->refuse_visibility_changes)\n-    error (\"%+D declared weak after being used\", decl);\n+    error (\"%+qD declared weak after being used\", decl);\n   DECL_WEAK (decl) = 1;\n \n   if (DECL_RTL_SET_P (decl)"}]}