{"sha": "e00e62761dbd91200af4e448ff13b598d918049f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwZTYyNzYxZGJkOTEyMDBhZjRlNDQ4ZmYxM2I1OThkOTE4MDQ5Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-20T07:56:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-20T07:56:52Z"}, "message": "re PR c++/85462 (internal compiler error: in inc_refcount_use, at cp/pt.c:8955)\n\n\tPR c++/85462\n\t* cp-tree.h (tinst_level): Remove in_system_header_p member,\n\tchange refcount member from unsigned char to unsigned short,\n\tadd refcount_infinity static data member, adjust comments.\n\t* pt.c (tinst_level::refcount_infinity): Define.\n\t(inc_refcount_use): Remove assert, don't increment if refcount\n\tis already refcount_infinity, adjust comment.\n\t(dec_refcount_use): Remove assert, don't decrement if refcount\n\tis refcount_infinity, adjust comment.\n\t(push_tinst_level_loc): Formatting fix.\n\n\t* g++.dg/cpp0x/pr85462.C: New test.\n\nFrom-SVN: r259516", "tree": {"sha": "b6a5a85592d6403d62b68e65139c16a6ef74fdf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6a5a85592d6403d62b68e65139c16a6ef74fdf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e00e62761dbd91200af4e448ff13b598d918049f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00e62761dbd91200af4e448ff13b598d918049f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00e62761dbd91200af4e448ff13b598d918049f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00e62761dbd91200af4e448ff13b598d918049f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "774c08306d605bff4ffa217121fc2da45ee240bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774c08306d605bff4ffa217121fc2da45ee240bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774c08306d605bff4ffa217121fc2da45ee240bd"}], "stats": {"total": 96, "additions": 78, "deletions": 18}, "files": [{"sha": "099407b9a14302c9c851bbfae5bb7b6341787b1c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e00e62761dbd91200af4e448ff13b598d918049f", "patch": "@@ -1,3 +1,16 @@\n+2018-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85462\n+\t* cp-tree.h (tinst_level): Remove in_system_header_p member,\n+\tchange refcount member from unsigned char to unsigned short,\n+\tadd refcount_infinity static data member, adjust comments.\n+\t* pt.c (tinst_level::refcount_infinity): Define.\n+\t(inc_refcount_use): Remove assert, don't increment if refcount\n+\tis already refcount_infinity, adjust comment.\n+\t(dec_refcount_use): Remove assert, don't decrement if refcount\n+\tis refcount_infinity, adjust comment.\n+\t(push_tinst_level_loc): Formatting fix.\n+\n 2018-04-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84611"}, {"sha": "5af4928e2fba38d1950f8c58898ad7afcb13db92", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e00e62761dbd91200af4e448ff13b598d918049f", "patch": "@@ -5927,14 +5927,19 @@ struct GTY((chain_next (\"%h.next\"))) tinst_level {\n   /* The location where the template is instantiated.  */\n   location_t locus;\n \n-  /* errorcount+sorrycount when we pushed this level.  */\n+  /* errorcount + sorrycount when we pushed this level.  */\n   unsigned short errors;\n \n-  /* True if the location is in a system header.  */\n-  bool in_system_header_p;\n+  /* Count references to this object.  If refcount reaches\n+     refcount_infinity value, we don't increment or decrement the\n+     refcount anymore, as the refcount isn't accurate anymore.\n+     The object can be still garbage collected if unreferenced from\n+     anywhere, which might keep referenced objects referenced longer than\n+     otherwise necessary.  Hitting the infinity is rare though.  */\n+  unsigned short refcount;\n \n-  /* Count references to this object.  */\n-  unsigned char refcount;\n+  /* Infinity value for the above refcount.  */\n+  static const unsigned short refcount_infinity = (unsigned short) ~0;\n };\n \n bool decl_spec_seq_has_spec_p (const cp_decl_specifier_seq *, cp_decl_spec);"}, {"sha": "e2a12b963ad23d195cd51d1c739b3f5479543df6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e00e62761dbd91200af4e448ff13b598d918049f", "patch": "@@ -8945,15 +8945,14 @@ tinst_level::to_list ()\n   return ret;\n }\n \n-/* Increment OBJ's refcount.  */\n+const unsigned short tinst_level::refcount_infinity;\n+\n+/* Increment OBJ's refcount unless it is already infinite.  */\n static tinst_level *\n inc_refcount_use (tinst_level *obj)\n {\n-  if (obj)\n-    {\n-      ++obj->refcount;\n-      gcc_assert (obj->refcount != 0);\n-    }\n+  if (obj && obj->refcount != tinst_level::refcount_infinity)\n+    ++obj->refcount;\n   return obj;\n }\n \n@@ -8966,15 +8965,16 @@ tinst_level::free (tinst_level *obj)\n   tinst_level_freelist ().free (obj);\n }\n \n-/* Decrement OBJ's refcount.  If it reaches zero, release OBJ's DECL\n-   and OBJ, and start over with the tinst_level object that used to be\n-   referenced by OBJ's NEXT.  */\n+/* Decrement OBJ's refcount if not infinite.  If it reaches zero, release\n+   OBJ's DECL and OBJ, and start over with the tinst_level object that\n+   used to be referenced by OBJ's NEXT.  */\n static void\n dec_refcount_use (tinst_level *obj)\n {\n-  while (obj && !--obj->refcount)\n+  while (obj\n+\t && obj->refcount != tinst_level::refcount_infinity\n+\t && !--obj->refcount)\n     {\n-      gcc_assert (obj->refcount+1 != 0);\n       tinst_level *next = obj->next;\n       tinst_level::free (obj);\n       obj = next;\n@@ -10145,8 +10145,7 @@ push_tinst_level_loc (tree tldcl, tree targs, location_t loc)\n   new_level->tldcl = tldcl;\n   new_level->targs = targs;\n   new_level->locus = loc;\n-  new_level->errors = errorcount+sorrycount;\n-  new_level->in_system_header_p = in_system_header_at (input_location);\n+  new_level->errors = errorcount + sorrycount;\n   new_level->next = NULL;\n   new_level->refcount = 0;\n   set_refcount_ptr (new_level->next, current_tinst_level);"}, {"sha": "3450e1dca70bf8f3d9ed1a13e18c719cb530a9e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e00e62761dbd91200af4e448ff13b598d918049f", "patch": "@@ -1,3 +1,8 @@\n+2018-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85462\n+\t* g++.dg/cpp0x/pr85462.C: New test.\n+\n 2018-04-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/pr85404.c: Require CET target."}, {"sha": "8134d9c69f89373d748c52ee881052c20f00799b", "filename": "gcc/testsuite/g++.dg/cpp0x/pr85462.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85462.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00e62761dbd91200af4e448ff13b598d918049f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85462.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85462.C?ref=e00e62761dbd91200af4e448ff13b598d918049f", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/85462\n+// { dg-do compile { target c++11 } }\n+\n+template <class T> struct D { using d = T *; };\n+template <class, class, class> struct E;\n+template <class T, class U> struct E<T, U, U> { using d = typename D<T>::d; };\n+template <class T> struct G { using d = typename E<T, int, int>::d; };\n+template <class T, class U> typename G<T>::d foo (U);\n+#define A(n) class A##n {};\n+#define B(n) A(n##0) A(n##1) A(n##2) A(n##3) A(n##4) A(n##5) A(n##6) A(n##7) A(n##8) A(n##9)\n+#define C(n) B(n##0) B(n##1) B(n##2) B(n##3) B(n##4) B(n##5) B(n##6) B(n##7) B(n##8) B(n##9)\n+#define D(n) C(n##0) C(n##1) C(n##2) C(n##3) C(n##4)\n+D(1)\n+class H;\n+template <typename>\n+struct I\n+{\n+  bool bar ();\n+#undef A\n+#define A(n) void f##n (A##n *);\n+D(1)\n+  void baz ();\n+};\n+A1000 v;\n+template <typename T>\n+bool I<T>::bar ()\n+{\n+#undef A\n+#define A(n) A##n k##n = *foo<A##n> (v); f##n (&k##n);\n+D(1)\n+  foo<H> (v);\n+  baz ();\n+  return false;\n+}\n+struct J : I<int>\n+{\n+  void qux () { bar (); }\n+};"}]}