{"sha": "bce5091aa995e9faea7c6eb5b11b288bd66bcd98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlNTA5MWFhOTk1ZTlmYWVhN2M2ZWI1YjExYjI4OGJkNjZiY2Q5OA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@cavium.com", "date": "2017-09-13T18:06:36Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2017-09-13T18:06:36Z"}, "message": "re PR tree-optimization/80925 (vect peeling failures)\n\n2017-09-13  Steve Ellcey  <sellcey@cavium.com>\n\n\tPR tree-optimization/80925\n\t* gfortran.dg/vect/vect-2.f90: Add\n\t--param vect-max-peeling-for-alignment=0 option.\n\tRemove unaligned access and peeling checks.\n\t* gfortran.dg/vect/vect-3.f90: Ditto.\n\t* gfortran.dg/vect/vect-4.f90: Ditto.\n\t* gfortran.dg/vect/vect-5.f90: Ditto.\n\nFrom-SVN: r252723", "tree": {"sha": "6f444b15e27153cd85f9825981e7052d64b3fe30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f444b15e27153cd85f9825981e7052d64b3fe30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bce5091aa995e9faea7c6eb5b11b288bd66bcd98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce5091aa995e9faea7c6eb5b11b288bd66bcd98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce5091aa995e9faea7c6eb5b11b288bd66bcd98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/comments", "author": {"login": "sellcey", "id": 25938520, "node_id": "MDQ6VXNlcjI1OTM4NTIw", "avatar_url": "https://avatars.githubusercontent.com/u/25938520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sellcey", "html_url": "https://github.com/sellcey", "followers_url": "https://api.github.com/users/sellcey/followers", "following_url": "https://api.github.com/users/sellcey/following{/other_user}", "gists_url": "https://api.github.com/users/sellcey/gists{/gist_id}", "starred_url": "https://api.github.com/users/sellcey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sellcey/subscriptions", "organizations_url": "https://api.github.com/users/sellcey/orgs", "repos_url": "https://api.github.com/users/sellcey/repos", "events_url": "https://api.github.com/users/sellcey/events{/privacy}", "received_events_url": "https://api.github.com/users/sellcey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13380861fc01c252a4306ccc650120f6020b00b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13380861fc01c252a4306ccc650120f6020b00b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13380861fc01c252a4306ccc650120f6020b00b7"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "f9493be90fad43ffa58ffdb61a628578ba158cac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bce5091aa995e9faea7c6eb5b11b288bd66bcd98", "patch": "@@ -1,3 +1,13 @@\n+2017-09-13  Steve Ellcey  <sellcey@cavium.com>\n+\n+\tPR tree-optimization/80925\n+\t* gfortran.dg/vect/vect-2.f90: Add\n+\t--param vect-max-peeling-for-alignment=0 option.\n+\tRemove unaligned access and peeling checks.\n+\t* gfortran.dg/vect/vect-3.f90: Ditto.\n+\t* gfortran.dg/vect/vect-4.f90: Ditto.\n+\t* gfortran.dg/vect/vect-5.f90: Ditto.\n+\n 2017-09-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/61135"}, {"sha": "956a05cc47cfee006c0cf3466c6f787989bd5a84", "filename": "gcc/testsuite/gfortran.dg/vect/vect-2.f90", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-2.f90?ref=bce5091aa995e9faea7c6eb5b11b288bd66bcd98", "patch": "@@ -1,5 +1,6 @@\n ! { dg-do compile }\n ! { dg-require-effective-target vect_float }\n+! { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" }\n \n SUBROUTINE FOO(A, B, C)\n DIMENSION A(1000000), B(1000000), C(1000000)\n@@ -15,7 +16,4 @@ SUBROUTINE FOO(A, B, C)\n ! support unaligned loads).\n \n ! { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || { ! vector_alignment_reachable } } } } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { target { { vect_no_align && { ! vect_hw_misalign } } && { ! vector_alignment_reachable } } } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } }\n ! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" {target { { vect_no_align && { ! vect_hw_misalign } } || { { ! vector_alignment_reachable  } && { ! vect_hw_misalign } } } } } }"}, {"sha": "b8ccbdd8db283ec25b5ae631136cc393e448abc6", "filename": "gcc/testsuite/gfortran.dg/vect/vect-3.f90", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-3.f90?ref=bce5091aa995e9faea7c6eb5b11b288bd66bcd98", "patch": "@@ -1,5 +1,6 @@\n ! { dg-do compile }\n ! { dg-require-effective-target vect_float }\n+! { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" }\n \n SUBROUTINE SAXPY(X, Y, A, N)\n DIMENSION X(N), Y(N)\n@@ -8,7 +9,4 @@ SUBROUTINE SAXPY(X, Y, A, N)\n \n ! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } }\n ! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { {! vect_no_align} && { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { {! vect_no_align} && { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable}} } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || { ! vector_alignment_reachable} } } } }\n "}, {"sha": "b567cbd8644fc196c922f2b9e9418262cea5be91", "filename": "gcc/testsuite/gfortran.dg/vect/vect-4.f90", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-4.f90?ref=bce5091aa995e9faea7c6eb5b11b288bd66bcd98", "patch": "@@ -1,5 +1,6 @@\n ! { dg-do compile }\n ! { dg-require-effective-target vect_float }\n+! { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" }\n \n ! Peeling to align the store to Y will also align the load from Y.\n ! The load from X may still be misaligned.\n@@ -10,7 +11,4 @@ SUBROUTINE SAXPY(X, Y, A)\n END\n \n ! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } \n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } }\n ! { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 1 \"vect\" } }"}, {"sha": "54887f9af53a3601218d678d4c623c96b2f9a726", "filename": "gcc/testsuite/gfortran.dg/vect/vect-5.f90", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce5091aa995e9faea7c6eb5b11b288bd66bcd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90?ref=bce5091aa995e9faea7c6eb5b11b288bd66bcd98", "patch": "@@ -1,4 +1,5 @@\n ! { dg-require-effective-target vect_int }\n+! { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" }\n \n         Subroutine foo (N, M)\n         Integer N\n@@ -36,7 +37,5 @@ program main\n         end\n \n ! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } }\n ! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } }\n ! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } }"}]}