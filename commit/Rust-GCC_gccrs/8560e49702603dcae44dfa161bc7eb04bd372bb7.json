{"sha": "8560e49702603dcae44dfa161bc7eb04bd372bb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU2MGU0OTcwMjYwM2RjYWU0NGRmYTE2MWJjN2ViMDRiZDM3MmJiNw==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-03-10T02:43:57Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-03-10T02:43:57Z"}, "message": "AlgorithmParameterGeneratorSpi.java: New file.\n\n\t* java/security/AlgorithmParameterGeneratorSpi.java: New file.\n\t* java/security/DigestException.java: New file.\n\t* java/security/GeneralSecurityException.java: New file.\n\t* java/security/InvalidAlgorithmParameterException.java: New file.\n\t* java/security/InvalidKeyException.java: New file.\n\t* java/security/InvalidParameterException.java: New file.\n\t* java/security/Key.java: New file.\n\t* java/security/KeyException.java: New file.\n\t* java/security/KeyPair.java: New file.\n\t* java/security/KeyPairGenerator.java: New file.\n\t* java/security/KeyPairGeneratorSpi.java: New file.\n\t* java/security/NoSuchProviderException.java: New file.\n\t* java/security/PrivateKey.java: New file.\n\t* java/security/Provider.java: New file.\n\t* java/security/PublicKey.java: New file.\n\t* java/security/SecureRandom.java: New file.\n\t* java/security/Security.java: New file.\n\t* java/security/Signature.java: New file.\n\t* java/security/SignatureException.java: New file.\n\t* java/security/interfaces/DSAKey.java: New file.\n\t* java/security/interfaces/DSAParams.java: New file.\n\t* java/security/interfaces/DSAPrivateKey.java: New file.\n\t* java/security/interfaces/DSAPublicKey.java: New file.\n\t* java/security/interfaces/RSAPrivateCrtKey.java: New file.\n\t* java/security/interfaces/RSAPrivateKey.java: New file.\n\t* java/security/interfaces/RSAPublicKey.java: New file.\n\t* java/security/spec/AlgorithmParameterSpec.java: New file.\n\t* java/security/spec/InvalidKeySpecException.java: New file.\n\t* java/security/spec/InvalidParameterSpecException.java: New file.\n\t* java/security/spec/KeySpec.java: New file.\n\t* java/security/spec/RSAPrivateCrtKeySpec.java: New file.\n\t* java/security/spec/RSAPrivateKeySpec.java: New file.\n\t* java/security/spec/RSAPublicKeySpec.java: New file.\n\t* Makefile.am: Added above java.security files.\n\t* Makefile.in: Rebuilt.\n\n\t* java/security/MessageDigest.java: Rewritten.\n\t* java/security/SecureClassLoader.java: Added JDK1.2 comment.\n\nFrom-SVN: r32461", "tree": {"sha": "574fb7f4ddc6a81ad4e9d46c9a034ea9567ce220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/574fb7f4ddc6a81ad4e9d46c9a034ea9567ce220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8560e49702603dcae44dfa161bc7eb04bd372bb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8560e49702603dcae44dfa161bc7eb04bd372bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8560e49702603dcae44dfa161bc7eb04bd372bb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8560e49702603dcae44dfa161bc7eb04bd372bb7/comments", "author": null, "committer": null, "parents": [{"sha": "7238ae533fb7bfc6155075acd058c335a40647a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7238ae533fb7bfc6155075acd058c335a40647a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7238ae533fb7bfc6155075acd058c335a40647a2"}], "stats": {"total": 1564, "additions": 1512, "deletions": 52}, "files": [{"sha": "bc37c8a4bfc9eccbaaa6858134e549b574dadde0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -1,3 +1,44 @@\n+2000-03-09  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* java/security/AlgorithmParameterGeneratorSpi.java: New file.\n+\t* java/security/DigestException.java: New file.\n+\t* java/security/GeneralSecurityException.java: New file.\n+\t* java/security/InvalidAlgorithmParameterException.java: New file.\n+\t* java/security/InvalidKeyException.java: New file.\n+\t* java/security/InvalidParameterException.java: New file.\n+\t* java/security/Key.java: New file.\n+\t* java/security/KeyException.java: New file.\n+\t* java/security/KeyPair.java: New file.\n+\t* java/security/KeyPairGenerator.java: New file.\n+\t* java/security/KeyPairGeneratorSpi.java: New file.\n+\t* java/security/NoSuchProviderException.java: New file.\n+\t* java/security/PrivateKey.java: New file.\n+\t* java/security/Provider.java: New file.\n+\t* java/security/PublicKey.java: New file.\n+\t* java/security/SecureRandom.java: New file.\n+\t* java/security/Security.java: New file.\n+\t* java/security/Signature.java: New file.\n+\t* java/security/SignatureException.java: New file.\n+\t* java/security/interfaces/DSAKey.java: New file.\n+\t* java/security/interfaces/DSAParams.java: New file.\n+\t* java/security/interfaces/DSAPrivateKey.java: New file.\n+\t* java/security/interfaces/DSAPublicKey.java: New file.\n+\t* java/security/interfaces/RSAPrivateCrtKey.java: New file.\n+\t* java/security/interfaces/RSAPrivateKey.java: New file.\n+\t* java/security/interfaces/RSAPublicKey.java: New file.\n+\t* java/security/spec/AlgorithmParameterSpec.java: New file.\n+\t* java/security/spec/InvalidKeySpecException.java: New file.\n+\t* java/security/spec/InvalidParameterSpecException.java: New file.\n+\t* java/security/spec/KeySpec.java: New file.\n+\t* java/security/spec/RSAPrivateCrtKeySpec.java: New file.\n+\t* java/security/spec/RSAPrivateKeySpec.java: New file.\n+\t* java/security/spec/RSAPublicKeySpec.java: New file.\n+\t* Makefile.am: Added above java.security files.\n+\t* Makefile.in: Rebuilt.\n+\n+\t* java/security/MessageDigest.java: Rewritten.\n+\t* java/security/SecureClassLoader.java: Added JDK1.2 comment.\n+\n 2000-03-09  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* README: Updated."}, {"sha": "1926f7d367dc812438ac3671aab9551dc0e65175", "filename": "libjava/Makefile.am", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -702,9 +702,42 @@ java/net/URLStreamHandler.java \\\n java/net/URLStreamHandlerFactory.java \\\n java/net/UnknownHostException.java \\\n java/net/UnknownServiceException.java \\\n+java/security/AlgorithmParameterGeneratorSpi.java \\\n+java/security/DigestException.java \\\n+java/security/GeneralSecurityException.java \\\n+java/security/InvalidAlgorithmParameterException.java \\\n+java/security/InvalidKeyException.java \\\n+java/security/InvalidParameterException.java \\\n+java/security/Key.java \\\n+java/security/KeyException.java \\\n+java/security/KeyPair.java \\\n+java/security/KeyPairGenerator.java \\\n+java/security/KeyPairGeneratorSpi.java \\\n java/security/MessageDigest.java \\\n java/security/NoSuchAlgorithmException.java \\\n+java/security/NoSuchProviderException.java \\\n+java/security/PrivateKey.java \\\n+java/security/Provider.java \\\n+java/security/PublicKey.java \\\n java/security/SecureClassLoader.java \\\n+java/security/SecureRandom.java \\\n+java/security/Security.java \\\n+java/security/Signature.java \\\n+java/security/SignatureException.java \\\n+java/security/interfaces/DSAKey.java \\\n+java/security/interfaces/DSAParams.java \\\n+java/security/interfaces/DSAPrivateKey.java \\\n+java/security/interfaces/DSAPublicKey.java \\\n+java/security/interfaces/RSAPrivateCrtKey.java \\\n+java/security/interfaces/RSAPrivateKey.java \\\n+java/security/interfaces/RSAPublicKey.java \\\n+java/security/spec/AlgorithmParameterSpec.java \\\n+java/security/spec/InvalidKeySpecException.java \\\n+java/security/spec/InvalidParameterSpecException.java \\\n+java/security/spec/KeySpec.java \\\n+java/security/spec/RSAPrivateCrtKeySpec.java \\\n+java/security/spec/RSAPrivateKeySpec.java \\\n+java/security/spec/RSAPublicKeySpec.java \\\n java/text/BreakIterator.java \\\n java/text/CharacterIterator.java \\\n java/text/ChoiceFormat.java \\"}, {"sha": "682317dd9fce6dc471f62409ec34333e3479e540", "filename": "libjava/Makefile.in", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -514,9 +514,42 @@ java/net/URLStreamHandler.java \\\n java/net/URLStreamHandlerFactory.java \\\n java/net/UnknownHostException.java \\\n java/net/UnknownServiceException.java \\\n+java/security/AlgorithmParameterGeneratorSpi.java \\\n+java/security/DigestException.java \\\n+java/security/GeneralSecurityException.java \\\n+java/security/InvalidAlgorithmParameterException.java \\\n+java/security/InvalidKeyException.java \\\n+java/security/InvalidParameterException.java \\\n+java/security/Key.java \\\n+java/security/KeyException.java \\\n+java/security/KeyPair.java \\\n+java/security/KeyPairGenerator.java \\\n+java/security/KeyPairGeneratorSpi.java \\\n java/security/MessageDigest.java \\\n java/security/NoSuchAlgorithmException.java \\\n+java/security/NoSuchProviderException.java \\\n+java/security/PrivateKey.java \\\n+java/security/Provider.java \\\n+java/security/PublicKey.java \\\n java/security/SecureClassLoader.java \\\n+java/security/SecureRandom.java \\\n+java/security/Security.java \\\n+java/security/Signature.java \\\n+java/security/SignatureException.java \\\n+java/security/interfaces/DSAKey.java \\\n+java/security/interfaces/DSAParams.java \\\n+java/security/interfaces/DSAPrivateKey.java \\\n+java/security/interfaces/DSAPublicKey.java \\\n+java/security/interfaces/RSAPrivateCrtKey.java \\\n+java/security/interfaces/RSAPrivateKey.java \\\n+java/security/interfaces/RSAPublicKey.java \\\n+java/security/spec/AlgorithmParameterSpec.java \\\n+java/security/spec/InvalidKeySpecException.java \\\n+java/security/spec/InvalidParameterSpecException.java \\\n+java/security/spec/KeySpec.java \\\n+java/security/spec/RSAPrivateCrtKeySpec.java \\\n+java/security/spec/RSAPrivateKeySpec.java \\\n+java/security/spec/RSAPublicKeySpec.java \\\n java/text/BreakIterator.java \\\n java/text/CharacterIterator.java \\\n java/text/ChoiceFormat.java \\\n@@ -899,10 +932,39 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/net/URLStreamHandlerFactory.P \\\n .deps/java/net/UnknownHostException.P \\\n .deps/java/net/UnknownServiceException.P \\\n+.deps/java/security/AlgorithmParameterGeneratorSpi.P \\\n+.deps/java/security/DigestException.P \\\n+.deps/java/security/GeneralSecurityException.P \\\n+.deps/java/security/InvalidAlgorithmParameterException.P \\\n+.deps/java/security/InvalidKeyException.P \\\n+.deps/java/security/InvalidParameterException.P \\\n+.deps/java/security/Key.P .deps/java/security/KeyException.P \\\n+.deps/java/security/KeyPair.P .deps/java/security/KeyPairGenerator.P \\\n+.deps/java/security/KeyPairGeneratorSpi.P \\\n .deps/java/security/MessageDigest.P \\\n .deps/java/security/NoSuchAlgorithmException.P \\\n-.deps/java/security/SecureClassLoader.P .deps/java/text/BreakIterator.P \\\n-.deps/java/text/CharacterIterator.P .deps/java/text/ChoiceFormat.P \\\n+.deps/java/security/NoSuchProviderException.P \\\n+.deps/java/security/PrivateKey.P .deps/java/security/Provider.P \\\n+.deps/java/security/PublicKey.P .deps/java/security/SecureClassLoader.P \\\n+.deps/java/security/SecureRandom.P .deps/java/security/Security.P \\\n+.deps/java/security/Signature.P \\\n+.deps/java/security/SignatureException.P \\\n+.deps/java/security/interfaces/DSAKey.P \\\n+.deps/java/security/interfaces/DSAParams.P \\\n+.deps/java/security/interfaces/DSAPrivateKey.P \\\n+.deps/java/security/interfaces/DSAPublicKey.P \\\n+.deps/java/security/interfaces/RSAPrivateCrtKey.P \\\n+.deps/java/security/interfaces/RSAPrivateKey.P \\\n+.deps/java/security/interfaces/RSAPublicKey.P \\\n+.deps/java/security/spec/AlgorithmParameterSpec.P \\\n+.deps/java/security/spec/InvalidKeySpecException.P \\\n+.deps/java/security/spec/InvalidParameterSpecException.P \\\n+.deps/java/security/spec/KeySpec.P \\\n+.deps/java/security/spec/RSAPrivateCrtKeySpec.P \\\n+.deps/java/security/spec/RSAPrivateKeySpec.P \\\n+.deps/java/security/spec/RSAPublicKeySpec.P \\\n+.deps/java/text/BreakIterator.P .deps/java/text/CharacterIterator.P \\\n+.deps/java/text/ChoiceFormat.P \\\n .deps/java/text/CollationElementIterator.P \\\n .deps/java/text/CollationKey.P .deps/java/text/Collator.P \\\n .deps/java/text/DateFormat.P .deps/java/text/DateFormatSymbols.P \\"}, {"sha": "476e1bb40f0842723eb9504db27ca6fe4e5d4162", "filename": "libjava/java/security/AlgorithmParameterGeneratorSpi.java", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGeneratorSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGeneratorSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGeneratorSpi.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,25 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 7, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Stubbed.\n+ */\n+\n+// JDK1.2\n+public abstract class AlgorithmParameterGeneratorSpi\n+{\n+  // FIXME: Stubbed.\n+}"}, {"sha": "8c6b2db8af899a21699fc9c6e2e6a9ffc3614bc1", "filename": "libjava/java/security/DigestException.java", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FDigestException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FDigestException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDigestException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+public class DigestException extends GeneralSecurityException\n+{\n+  public DigestException()\n+  {\n+    super();\n+  }\n+\n+  public DigestException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "9d30737285a52ba4980186fe15d64042e004cca3", "filename": "libjava/java/security/GeneralSecurityException.java", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FGeneralSecurityException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FGeneralSecurityException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FGeneralSecurityException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+// JDK1.2\n+public class GeneralSecurityException extends Exception\n+{\n+  public GeneralSecurityException()\n+  {\n+    super();\n+  }\n+\n+  public GeneralSecurityException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "35063a961c21ebbb4edda7f9aaef4c17ca03a7cb", "filename": "libjava/java/security/InvalidAlgorithmParameterException.java", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FInvalidAlgorithmParameterException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FInvalidAlgorithmParameterException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FInvalidAlgorithmParameterException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 2, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+// JDK1.2\n+public class InvalidAlgorithmParameterException extends GeneralSecurityException\n+{\n+  public InvalidAlgorithmParameterException()\n+  {\n+    super();\n+  }\n+\n+  public InvalidAlgorithmParameterException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "3a9a69aade1fa4955f23e67daca2c04a2f8420ee", "filename": "libjava/java/security/InvalidKeyException.java", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FInvalidKeyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FInvalidKeyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FInvalidKeyException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+public class InvalidKeyException extends KeyException\n+{\n+  public InvalidKeyException()\n+  {\n+    super();\n+  }\n+\n+  public InvalidKeyException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "5ece0126b57483443bbfd8c057a42269ed0e2413", "filename": "libjava/java/security/InvalidParameterException.java", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FInvalidParameterException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FInvalidParameterException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FInvalidParameterException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+public class InvalidParameterException extends IllegalArgumentException\n+{\n+  public InvalidParameterException()\n+  {\n+    super();\n+  }\n+\n+  public InvalidParameterException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "4bf32c5b83ebbf6ee66ebbcd37dc1aaeb81066ba", "filename": "libjava/java/security/Key.java", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKey.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,29 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security;\n+import java.io.Serializable;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+public interface Key extends Serializable\n+{\n+  // FIXME: need to set this at some point when serialization is implemented.\n+  public static final long serialVersionUID;\n+\n+  public String getAlgorithm();\n+  public String getFormat();\n+  public byte[] getEncoded();\n+}"}, {"sha": "634d8ce772e25ff0fa5f720e3427642a04ec7afc", "filename": "libjava/java/security/KeyException.java", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKeyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKeyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+public class KeyException extends GeneralSecurityException\n+{\n+  public KeyException()\n+  {\n+    super();\n+  }\n+\n+  public KeyException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "b8b2934733331825eb1f99843b2bf36b7304bbdf", "filename": "libjava/java/security/KeyPair.java", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKeyPair.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKeyPair.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyPair.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,41 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date February 9, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+public class KeyPair /* FIXME: implements serializable */\n+{\n+  public KeyPair (PublicKey publicKey, PrivateKey privateKey)\n+  {\n+    this.publicKey = publicKey;\n+    this.privateKey = privateKey;\n+  }\n+\n+  public PublicKey getPublic ()\n+  {\n+    return publicKey;\n+  }\n+\n+  public PrivateKey getPrivate ()\n+  {\n+    return privateKey;\n+  }\n+\n+  // The keys.\n+  private PublicKey publicKey;\n+  private PrivateKey privateKey;\n+}"}, {"sha": "7954c3270ac170d9b4fb2687ec82a8a4112320d9", "filename": "libjava/java/security/KeyPairGenerator.java", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKeyPairGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKeyPairGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyPairGenerator.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,86 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 10, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Partially implemented to the 1.1 spec.\n+ * It is known not to comply with the 1.2 spec.\n+ */\n+\n+public abstract class KeyPairGenerator extends KeyPairGeneratorSpi\n+{\n+  protected KeyPairGenerator(String algorithm)\n+  {\n+    name = algorithm;\n+  }\n+\n+  public static KeyPairGenerator getInstance(String algorithm)\n+    throws NoSuchAlgorithmException\n+  {\n+    String name = \"KeyPairGenerator.\" + algorithm;\n+    Provider[] provs = Security.getProviders();\n+    for (int i = 0; i < provs.length; ++i)\n+      {\n+\tString val = provs[i].getProperty(name);\n+\tif (val != null)\n+\t  {\n+\t    try\n+\t      {\n+\t\treturn (KeyPairGenerator) Class.forName(val).newInstance();\n+\t      }\n+\t    catch (Throwable _)\n+\t      {\n+\t\t// We just ignore failures.\n+\t      }\n+\t  }\n+      }\n+\n+    throw new NoSuchAlgorithmException(algorithm);\n+  }\n+\n+  public static KeyPairGenerator getInstance(String algorithm, String provider)\n+    throws NoSuchAlgorithmException, NoSuchProviderException\n+  {\n+    String name = \"KeyPairGenerator.\" + algorithm;\n+    Provider p = Security.getProvider(provider);\n+    if (p == null)\n+      throw new NoSuchProviderException(provider);\n+    String val = p.getProperty(name);\n+    if (val != null)\n+      {\n+\ttry\n+\t  {\n+\t    return (KeyPairGenerator) Class.forName(val).newInstance();\n+\t  }\n+\tcatch (Throwable _)\n+\t  {\n+\t    // Nothing.\n+\t  }\n+      }\n+\n+    throw new NoSuchAlgorithmException(algorithm);\n+  }\n+\n+  public String getAlgorithm()\n+  {\n+    return name;\n+  }\n+\n+  public abstract void initialize(int strength, SecureRandom random);\n+  public abstract KeyPair generateKeyPair();\n+\n+  // Algorithm name.\n+  private String name;\n+}"}, {"sha": "46520b4aea94c31e573593c9df931e4489e0f9c7", "filename": "libjava/java/security/KeyPairGeneratorSpi.java", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKeyPairGeneratorSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FKeyPairGeneratorSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyPairGeneratorSpi.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,26 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 7, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Partially implemented.\n+ */\n+\n+// JDK1.2\n+public abstract class KeyPairGeneratorSpi\n+{\n+  public abstract void initialize(int keysize, SecureRandom random);\n+  public abstract KeyPair generateKeyPair();\n+}"}, {"sha": "04546cdde195b4b4245562d07c13c693c0ed611e", "filename": "libjava/java/security/MessageDigest.java", "status": "modified", "additions": 130, "deletions": 50, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FMessageDigest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FMessageDigest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FMessageDigest.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -1,6 +1,6 @@\n // MessageDigest.java\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -10,55 +10,135 @@\n \n package java.security;\n \n-// FIXME: This is just a stub for a proper implementation.\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date February 11, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.1 API Specification.\n+ * Status:  Believed complete and correct to 1.1 spec.\n+ * It is known not to comply with the 1.2 spec.\n+ */\n+\n public abstract class MessageDigest\n {\n-    private static final byte[] dummy = { 0 };\n-\n-    public static MessageDigest getInstance(String algorithm)\n-\tthrows NoSuchAlgorithmException\n-    {\n-\tObject\tobj;\n-\n-\ttry {\n-\t    obj = Class.forName(algorithm).newInstance();\n-\t} catch (Exception e) {\n-\t    throw new NoSuchAlgorithmException(\"algorithm \" \n-\t\t\t\t\t       + algorithm \n-\t\t\t\t\t       + \" not available.\");\n-\t}\n-\t\n-\treturn (MessageDigest) obj;\n-    }\n-\n-    public void update(byte input)\n-    {\n-\t// FIXME\n-    }\n-\n-    public void update(byte[] input, int offset, int len)\n-    {\n-\t// FIXME\n-    }\n-\n-    public void update(byte[] input)\n-    {\n-\t// FIXME\n-    }\n-\n-    public byte[] digest()\n-    {\n-\treturn dummy;\n-    }\n-\n-    public byte[] digest(byte[] input)\n-    {\n-\tupdate(input);\n-\treturn digest();\n-    }\n-    \n-    public void reset()\n-    {\n-\t// FIXME\n-    }\n+  protected MessageDigest (String algorithm)\n+  {\n+    name = algorithm;\n+  }\n+\n+  public static MessageDigest getInstance (String algorithm)\n+    throws NoSuchAlgorithmException\n+  {\n+    String name = \"MessageDigest.\" + algorithm;\n+    Provider[] provs = Security.getProviders ();\n+    for (int i = 0; i < provs.length; ++i)\n+      {\n+\tString val = provs[i].getProperty (name);\n+\tif (val != null)\n+\t  {\n+\t    try\n+\t      {\n+\t\treturn (MessageDigest) Class.forName(val).newInstance ();\n+\t      }\n+\t    catch (Throwable _)\n+\t      {\n+\t\t// We just ignore failures.\n+\t      }\n+\t  }\n+      }\n+\n+    throw new NoSuchAlgorithmException (algorithm);\n+  }\n+\n+  public static MessageDigest getInstance (String algorithm, String provider)\n+    throws NoSuchAlgorithmException, NoSuchProviderException\n+  {\n+    String name = \"MessageDigest.\" + algorithm;\n+    Provider p = Security.getProvider (provider);\n+    if (p == null)\n+      throw new NoSuchProviderException (provider);\n+    String val = p.getProperty (name);\n+    if (val != null)\n+      {\n+\ttry\n+\t  {\n+\t    return (MessageDigest) Class.forName(val).newInstance ();\n+\t  }\n+\tcatch (Throwable _)\n+\t  {\n+\t    // Nothing.\n+\t  }\n+      }\n+\n+    throw new NoSuchAlgorithmException (algorithm);\n+  }\n+\n+  public void update (byte input)\n+  {\n+    engineUpdate (input);\n+  }\n+\n+  public void update (byte[] input, int offset, int len)\n+  {\n+    engineUpdate (input, offset, len);\n+  }\n+\n+  public void update (byte[] input)\n+  {\n+    engineUpdate (input, 0, input.length);\n+  }\n+\n+  public byte[] digest ()\n+  {\n+    return engineDigest ();\n+  }\n+\n+  public byte[] digest (byte[] input)\n+  {\n+    update (input);\n+    return engineDigest ();\n+  }\n+\n+  public String toString ()\n+  {\n+    // There is no spec for this.\n+    return \"[MessageDigest: \" + name + \"]\";\n+  }\n+\n+  public static boolean isEqual (byte[] digesta, byte[] digestb)\n+  {\n+    if (digesta == digestb)\n+      return true;\n+    if (digesta.length != digestb.length)\n+      return false;\n+    for (int i = digesta.length - 1; i >= 0; --i)\n+      if (digesta[i] != digestb[i])\n+\treturn false;\n+    return true;\n+  }\n+\n+  public void reset ()\n+  {\n+    engineReset ();\n+  }\n+\n+  public final String getAlgorithm ()\n+  {\n+    return name;\n+  }\n+\n+  protected abstract void engineUpdate (byte input);\n+  protected abstract void engineUpdate (byte input[], int offset, int len);\n+  protected abstract byte[] engineDigest ();\n+  protected abstract void engineReset ();\n+\n+  public Object clone() throws CloneNotSupportedException\n+  {\n+    return super.clone ();\n+  }\n+\n+  // Algorithm name.\n+  private String name;\n }"}, {"sha": "d7d0c853efa707186c063155ee282b08d2a849a4", "filename": "libjava/java/security/NoSuchProviderException.java", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FNoSuchProviderException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FNoSuchProviderException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FNoSuchProviderException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 4, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+public class NoSuchProviderException extends GeneralSecurityException\n+{\n+  public NoSuchProviderException()\n+  {\n+    super();\n+  }\n+\n+  public NoSuchProviderException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "13b9be34b4d4ecd4b8665fa851f9d985ec8bc174", "filename": "libjava/java/security/PrivateKey.java", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivateKey.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,24 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+public interface PrivateKey extends Key\n+{\n+  // This interface contains no methods or constants.  It merely serves\n+  // to group (and provide type safety for) all private key interfaces.\n+}"}, {"sha": "ac2cd7864b551cfb376feb2bd513535fbd137faa", "filename": "libjava/java/security/Provider.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FProvider.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,53 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+import java.util.Properties;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 7, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Partially implemented.\n+ */\n+\n+public abstract class Provider extends Properties\n+{\n+  // FIXME: Check the following property values against specs!\n+  protected Provider(String name, double version, String info)\n+  {\n+    super();\n+    put(\"java.security.Provider.Name\", name);\n+    put(\"java.security.Provider.Version\", Double.toString(version));\n+    put(\"java.security.Provider.Info\", info);\n+  }\n+\n+  public String getName()\n+  {\n+    return getProperty(\"java.security.Provider.Name\");\n+  }\n+\n+  public double getVersion()\n+  {\n+    return Double.valueOf(getProperty(\"java.security.Provider.Version\")).doubleValue();\n+  }\n+\n+  public String getInfo()\n+  {\n+    return getProperty(\"java.security.Provider.Info\");\n+  }\n+\n+  public String toString()\n+  {\n+    // FIXME: Check this string against the spec.\n+    return getName() + \" \" + getProperty(\"java.security.Provider.Version\");\n+  }\n+}"}, {"sha": "5c30c627e3188faf704effeb1ff2012cedb6acaf", "filename": "libjava/java/security/PublicKey.java", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPublicKey.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,24 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+public interface PublicKey extends Key\n+{\n+  // This interface contains no methods or constants.  It merely serves\n+  // to group (and provide type safety for) all private key interfaces.\n+}"}, {"sha": "f49f8ac214c63ce3cbb87200b3bc345f96bd09c0", "filename": "libjava/java/security/SecureClassLoader.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -8,6 +8,7 @@\n \n package java.security;\n \n+// JDK1.2\n public class SecureClassLoader extends ClassLoader \n {\n     public SecureClassLoader ()"}, {"sha": "6f396dce1e30a9bd10d07e47fa67a80f842cc93d", "filename": "libjava/java/security/SecureRandom.java", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureRandom.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,25 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+import java.util.Random;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 7, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Stubbed.\n+ */\n+\n+public class SecureRandom extends Random\n+{\n+  // FIXME: Stubbed.\n+}"}, {"sha": "87a0088281baebe8be0c2c185c08b43bb5cca311", "filename": "libjava/java/security/Security.java", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSecurity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSecurity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecurity.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,107 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+import java.util.Enumeration;\n+import java.util.Properties;\n+import java.util.Vector;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date February 8, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Still missing the deprecated getAlgorithmProperty method.\n+ */\n+\n+public final class Security\n+{\n+  public static int insertProviderAt (Provider provider, int position)\n+  {\n+    SecurityManager sm = System.getSecurityManager ();\n+    if (sm != null)\n+      {\n+\t// FIXME: need SecurityPermission.\n+\t// sm.checkSecurityAccess (\"insertProvider.\" + provider.getName ());\n+      }\n+    if (providers.indexOf (provider) != -1)\n+      return -1;\n+    if (position > providers.size ())\n+      position = providers.size ();\n+    providers.insertElementAt (provider, position);\n+    return providers.indexOf (provider);\n+  }\n+\n+  public static int addProvider (Provider provider)\n+  {\n+    return insertProviderAt (provider, providers.size ());\n+  }\n+\n+  public static void removeProvider (String name)\n+  {\n+    SecurityManager sm = System.getSecurityManager ();\n+    if (sm != null)\n+      {\n+\t// FIXME: need SecurityPermission.\n+\t// sm.checkSecurityAccess (\"removeProvider.\" + name);\n+      }\n+    Provider p = getProvider (name);\n+    if (p != null)\n+      providers.removeElement (p);\n+  }\n+\n+  public static Provider[] getProviders ()\n+  {\n+    Provider[] r = new Provider[providers.size ()];\n+    providers.copyInto (r);\n+    return r;\n+  }\n+\n+  public static Provider getProvider (String name)\n+  {\n+    Enumeration e = providers.elements ();\n+    while (e.hasMoreElements ())\n+      {\n+\tProvider p = (Provider) e.nextElement ();\n+\tif (name.equals (p.getName ()))\n+\t  return p;\n+      }\n+    return null;\n+  }\n+\n+  public static String getProperty (String key)\n+  {\n+    SecurityManager sm = System.getSecurityManager ();\n+    if (sm != null)\n+      {\n+\t// FIXME: need SecurityPermission.\n+\t// sm.checkSecurityAccess (\"getProperty.\" + key);\n+      }\n+    return props.getProperty (key);\n+  }\n+\n+  public static void setProperty (String key, String value)\n+  {\n+    SecurityManager sm = System.getSecurityManager ();\n+    if (sm != null)\n+      {\n+\t// FIXME: need SecurityPermission.\n+\t// sm.checkSecurityAccess (\"setProperty.\" + key);\n+      }\n+    props.setProperty (key, value);\n+  }\n+\n+  // The providers we list.\n+  private static Vector providers = new Vector ();\n+\n+  // Security propertiesl\n+  private static Properties props = new Properties ();\n+}"}, {"sha": "760f62551d8dfd98858533051cf8946da2ee92d6", "filename": "libjava/java/security/Signature.java", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSignature.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSignature.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignature.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,173 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date February 11, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.1 API Specification.\n+ * Status:  Believed complete and correct to 1.1 spec.\n+ * It is known not to comply with the 1.2 spec.\n+ */\n+\n+public abstract class Signature\n+{\n+  protected Signature (String name)\n+  {\n+    state = UNINITIALIZED;\n+    this.name = name;\n+  }\n+\n+  public static Signature getInstance (String algorithm)\n+    throws NoSuchAlgorithmException\n+  {\n+    String name = \"Signature.\" + algorithm;\n+    Provider[] provs = Security.getProviders ();\n+    for (int i = 0; i < provs.length; ++i)\n+      {\n+\tString val = provs[i].getProperty (name);\n+\tif (val != null)\n+\t  {\n+\t    try\n+\t      {\n+\t\treturn (Signature) Class.forName(val).newInstance ();\n+\t      }\n+\t    catch (Throwable _)\n+\t      {\n+\t\t// We just ignore failures.\n+\t      }\n+\t  }\n+      }\n+\n+    throw new NoSuchAlgorithmException (algorithm);\n+  }\n+\n+  public static Signature getInstance (String algorithm, String provider)\n+    throws NoSuchAlgorithmException, NoSuchProviderException\n+  {\n+    String name = \"Signature.\" + algorithm;\n+    Provider p = Security.getProvider (provider);\n+    if (p == null)\n+      throw new NoSuchProviderException (provider);\n+    String val = p.getProperty (name);\n+    if (val != null)\n+      {\n+\ttry\n+\t  {\n+\t    return (Signature) Class.forName(val).newInstance ();\n+\t  }\n+\tcatch (Throwable _)\n+\t  {\n+\t    // Nothing.\n+\t  }\n+      }\n+\n+    throw new NoSuchAlgorithmException (algorithm);\n+  }\n+\n+  public final void initVerify (PublicKey publicKey)\n+    throws InvalidKeyException\n+  {\n+    engineInitVerify (publicKey);\n+  }\n+\n+  public final void initSign (PrivateKey privateKey)\n+    throws InvalidKeyException\n+  {\n+    engineInitSign (privateKey);\n+  }\n+\n+  public final byte[] sign ()\n+    throws SignatureException\n+  {\n+    return engineSign ();\n+  }\n+\n+  public final boolean verify (byte[] signature)\n+    throws SignatureException\n+  {\n+    return engineVerify (signature);\n+  }\n+\n+  public final void update (byte b)\n+    throws SignatureException\n+  {\n+    engineUpdate (b);\n+  }\n+\n+  public final void update (byte[] data)\n+    throws SignatureException\n+  {\n+    engineUpdate (data, 0, data.length);\n+  }\n+\n+  public final void update (byte[] data, int off, int len)\n+    throws SignatureException\n+  {\n+    engineUpdate (data, off, len);\n+  }\n+\n+  public final String getAlgorithm ()\n+  {\n+    return name;\n+  }\n+\n+  public String toString ()\n+  {\n+    // There is no spec for this.  FIXME: this is a bad choice.\n+    return name + \"; state = \" + state;\n+  }\n+\n+  public final void setParameter (String param, Object value)\n+    throws InvalidParameterException\n+  {\n+    engineSetParameter (param, value);\n+  }\n+\n+  public final Object getParameter (String param)\n+    throws InvalidParameterException\n+  {\n+    return engineGetParameter (param);\n+  }\n+\n+  protected abstract void engineInitVerify (PublicKey publicKey)\n+    throws InvalidKeyException;\n+  protected abstract void engineInitSign (PrivateKey privateKey)\n+    throws InvalidKeyException;\n+  protected abstract void engineUpdate (byte b)\n+    throws SignatureException;\n+  protected abstract void engineUpdate (byte[] b, int off, int len)\n+    throws SignatureException;\n+  protected abstract byte[] engineSign ()\n+    throws SignatureException;\n+  protected abstract boolean engineVerify (byte[] sigBytes)\n+    throws SignatureException;\n+  protected abstract void engineSetParameter (String param, Object value)\n+    throws InvalidParameterException;\n+  protected abstract Object engineGetParameter (String param)\n+    throws InvalidParameterException;\n+\n+  public Object clone() throws CloneNotSupportedException\n+  {\n+    return super.clone ();\n+  }\n+\n+  protected static final int UNINITIALIZED = 0;\n+  protected static final int SIGN          = 2;\n+  protected static final int VERIFY        = 3;\n+\n+  // Current state.\n+  protected int state;\n+\n+  // Name of this object.\n+  private String name;\n+}"}, {"sha": "dc1c87a631794dc5b5d0e2274c34e09eb65ae4c7", "filename": "libjava/java/security/SignatureException.java", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSignatureException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2FSignatureException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignatureException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+public class SignatureException extends GeneralSecurityException\n+{\n+  public SignatureException()\n+  {\n+    super();\n+  }\n+\n+  public SignatureException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "3920d7b455a74733e532bb4ba7292d1abc3990c2", "filename": "libjava/java/security/interfaces/DSAKey.java", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,23 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.interfaces;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+public interface DSAKey\n+{\n+  public DSAParams getParams();\n+}"}, {"sha": "8483bd5cd2c4eaa1e5e51ae82761f969d859cd19", "filename": "libjava/java/security/interfaces/DSAParams.java", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAParams.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAParams.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAParams.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,26 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.interfaces;\n+import java.math.BigInteger;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+public interface DSAParams\n+{\n+  public BigInteger getP();\n+  public BigInteger getQ();\n+  public BigInteger getG();\n+}"}, {"sha": "833ee3af5a7c74fd195d3f60a5fcb5baa5785afd", "filename": "libjava/java/security/interfaces/DSAPrivateKey.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.interfaces;\n+import java.security.PrivateKey;\n+import java.math.BigInteger;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+public interface DSAPrivateKey extends DSAKey, PrivateKey\n+{\n+  public static final long serialVersionUID;\n+\n+  public BigInteger getX();\n+}"}, {"sha": "48949ded243f6e5f4160526f8b14bd07735cbbd3", "filename": "libjava/java/security/interfaces/DSAPublicKey.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.interfaces;\n+import java.security.PublicKey;\n+import java.math.BigInteger;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+public interface DSAPublicKey extends DSAKey, PublicKey\n+{\n+  public static final long serialVersionUID;\n+\n+  public BigInteger getY();\n+}"}, {"sha": "cca294ab4a37b08fa929d0e3d310220689978e75", "filename": "libjava/java/security/interfaces/RSAPrivateCrtKey.java", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateCrtKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateCrtKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateCrtKey.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,30 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.interfaces;\n+import java.math.BigInteger;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+// JDK1.2\n+public interface RSAPrivateCrtKey extends RSAPrivateKey\n+{\n+  public BigInteger getPublicExponent();\n+  public BigInteger getPrimeP();\n+  public BigInteger getPrimeQ();\n+  public BigInteger getPrimeExponentP();\n+  public BigInteger getPrimeExponentQ();\n+  public BigInteger getCrtCoefficient();\n+}"}, {"sha": "4c16b05e248d0fc3a84a6b8deaa24241356a1b5c", "filename": "libjava/java/security/interfaces/RSAPrivateKey.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateKey.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.interfaces;\n+import java.security.PrivateKey;\n+import java.math.BigInteger;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+// JDK1.2\n+public interface RSAPrivateKey extends PrivateKey\n+{\n+  public BigInteger getModulus();\n+  public BigInteger getPrivateExponent();\n+}"}, {"sha": "0bee88df91c7dba2ddfc29da8deca48c447b51b3", "filename": "libjava/java/security/interfaces/RSAPublicKey.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPublicKey.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.interfaces;\n+import java.security.PublicKey;\n+import java.math.BigInteger;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+// JDK1.2\n+public interface RSAPublicKey extends PublicKey\n+{\n+  public BigInteger getModulus();\n+  public BigInteger getPublicExponent();\n+}"}, {"sha": "5781623b746da2e991e46b70f7980fc5e2d89035", "filename": "libjava/java/security/spec/AlgorithmParameterSpec.java", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FAlgorithmParameterSpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FAlgorithmParameterSpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FAlgorithmParameterSpec.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,25 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.spec;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+// JDK1.2\n+public interface AlgorithmParameterSpec\n+{\n+  // This interface contains no methods or constants. Its only purpose is\n+  // to group (and provide type safety for) all key specifications.\n+}"}, {"sha": "632fd251e7a53924a83a4708098c897ad38e4c86", "filename": "libjava/java/security/spec/InvalidKeySpecException.java", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidKeySpecException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidKeySpecException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidKeySpecException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security.spec;\n+import java.security.GeneralSecurityException;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+// JDK1.2\n+public class InvalidKeySpecException extends GeneralSecurityException\n+{\n+  public InvalidKeySpecException()\n+  {\n+    super();\n+  }\n+\n+  public InvalidKeySpecException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "1e2aff5c3f609657a7c1168e8bc117ed3c18d0ea", "filename": "libjava/java/security/spec/InvalidParameterSpecException.java", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidParameterSpecException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidParameterSpecException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidParameterSpecException.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.security.spec;\n+import java.security.GeneralSecurityException;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+\n+// JDK1.2\n+public class InvalidParameterSpecException extends GeneralSecurityException\n+{\n+  public InvalidParameterSpecException()\n+  {\n+    super();\n+  }\n+\n+  public InvalidParameterSpecException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "75e50f9f656da1d17d5aad609fbb0fe0cbf7f3d4", "filename": "libjava/java/security/spec/KeySpec.java", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FKeySpec.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,25 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.spec;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 1, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct.\n+ */\n+ \n+// JDK1.2\n+public interface KeySpec\n+{\n+  // This interface contains no methods or constants. Its only purpose is\n+  // to group (and provide type safety for) all key specifications.\n+}"}, {"sha": "6a31163c09efd135712aeedbe4183169586929ed", "filename": "libjava/java/security/spec/RSAPrivateCrtKeySpec.java", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateCrtKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateCrtKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateCrtKeySpec.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,23 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.spec;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 7, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Stubbed.\n+ */\n+ \n+// JDK1.2\n+public class RSAPrivateCrtKeySpec extends RSAPrivateKeySpec\n+{\n+}"}, {"sha": "4f38a2d0ba595713341931d26213877918c70f35", "filename": "libjava/java/security/spec/RSAPrivateKeySpec.java", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateKeySpec.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,23 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.spec;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 7, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Stubbed.\n+ */\n+ \n+// JDK1.2\n+public class RSAPrivateKeySpec implements KeySpec\n+{\n+}"}, {"sha": "0bdcd22922ef20d5b22573b502ac3b844157d0fa", "filename": "libjava/java/security/spec/RSAPublicKeySpec.java", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPublicKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8560e49702603dcae44dfa161bc7eb04bd372bb7/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPublicKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPublicKeySpec.java?ref=8560e49702603dcae44dfa161bc7eb04bd372bb7", "patch": "@@ -0,0 +1,23 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package java.security.spec;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date February 10, 2000.\n+ */\n+\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Stubbed.\n+ */\n+ \n+// JDK1.2\n+public class RSAPublicKeySpec implements KeySpec\n+{\n+}"}]}