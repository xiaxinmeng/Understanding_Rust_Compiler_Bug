{"sha": "a0e6f05d26d286f5a73007e425b109f0d327e15f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlNmYwNWQyNmQyODZmNWE3MzAwN2U0MjViMTA5ZjBkMzI3ZTE1Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-24T15:17:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-24T15:17:04Z"}, "message": "libstdc++: Fix iota_view::size() to avoid overflow\n\nThis avoids the overflow that occurs when negating the most negative\nvalue of an integral type.\n\nAlso prevent returning signed int when the values have lower rank and\npromote to int.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (ranges::iota_view::size()): Perform all\n\tcalculations in the right unsigned types.\n\t* testsuite/std/ranges/iota/size.cc: New test.", "tree": {"sha": "5c8365724b55a1260eafcfc34f8905134cf4a57e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c8365724b55a1260eafcfc34f8905134cf4a57e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e6f05d26d286f5a73007e425b109f0d327e15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e6f05d26d286f5a73007e425b109f0d327e15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e6f05d26d286f5a73007e425b109f0d327e15f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e6f05d26d286f5a73007e425b109f0d327e15f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "074436cf8cdd2a9ce75cadd36deb8301f00e55b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/074436cf8cdd2a9ce75cadd36deb8301f00e55b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/074436cf8cdd2a9ce75cadd36deb8301f00e55b9"}], "stats": {"total": 123, "additions": 117, "deletions": 6}, "files": [{"sha": "22184006c086ce8e06d58cf66ae00d662588f84c", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e6f05d26d286f5a73007e425b109f0d327e15f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e6f05d26d286f5a73007e425b109f0d327e15f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=a0e6f05d26d286f5a73007e425b109f0d327e15f", "patch": "@@ -889,12 +889,13 @@ namespace ranges\n       {\n \tusing __detail::__is_integer_like;\n \tusing __detail::__to_unsigned_like;\n-\tif constexpr (__is_integer_like<_Winc> && __is_integer_like<_Bound>)\n-\t  return (_M_value < 0)\n-\t    ? ((_M_bound < 0)\n-\t\t? __to_unsigned_like(-_M_value) - __to_unsigned_like(-_M_bound)\n-\t\t: __to_unsigned_like(_M_bound) + __to_unsigned_like(-_M_value))\n-\t    : __to_unsigned_like(_M_bound) - __to_unsigned_like(_M_value);\n+\tif constexpr (integral<_Winc> && integral<_Bound>)\n+\t  {\n+\t    using _Up = make_unsigned_t<decltype(_M_bound - _M_value)>;\n+\t    return _Up(_M_bound) - _Up(_M_value);\n+\t  }\n+\telse if constexpr (__is_integer_like<_Winc>)\n+\t  return __to_unsigned_like(_M_bound) - __to_unsigned_like(_M_value);\n \telse\n \t  return __to_unsigned_like(_M_bound - _M_value);\n       }"}, {"sha": "2a9d3870c5d28335079d72bdf20ffc932f1136f7", "filename": "libstdc++-v3/testsuite/std/ranges/iota/size.cc", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e6f05d26d286f5a73007e425b109f0d327e15f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fsize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e6f05d26d286f5a73007e425b109f0d327e15f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fsize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fsize.cc?ref=a0e6f05d26d286f5a73007e425b109f0d327e15f", "patch": "@@ -0,0 +1,110 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=c++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+#include <limits>\n+\n+template<typename T, typename U>\n+constexpr bool\n+equal(T t, U u) requires std::same_as<T, U>\n+{\n+  return t == u;\n+}\n+\n+template<typename W, typename S = std::make_unsigned_t<W>>\n+void\n+test_integer_iota()\n+{\n+  using std::numeric_limits;\n+\n+  using V = std::ranges::iota_view<W, W>;\n+  static_assert( std::ranges::sized_range<V> );\n+\n+  constexpr V zero(0, 0);\n+  static_assert( equal(zero.size(), (S)0) );\n+\n+  constexpr V min(numeric_limits<W>::min(),\n+\t\t  numeric_limits<W>::min());\n+  static_assert( equal(min.size(), (S)0) );\n+\n+  constexpr V max(numeric_limits<W>::max(),\n+\t\t  numeric_limits<W>::max());\n+  static_assert( equal(max.size(), (S)0) );\n+\n+  constexpr V minmax(numeric_limits<W>::min(),\n+\t\t     numeric_limits<W>::max());\n+  if constexpr (sizeof(W) < sizeof(S))\n+  {\n+    using S2 = std::make_unsigned_t<W>;\n+    static_assert( equal(minmax.size(), (S)numeric_limits<S2>::max()) );\n+  }\n+  else\n+    static_assert( equal(minmax.size(), numeric_limits<S>::max()) );\n+\n+  constexpr V pospos(20, 22);\n+  static_assert( equal(pospos.size(), (S)2) );\n+\n+  if constexpr (std::numeric_limits<W>::is_signed)\n+  {\n+    constexpr V negneg(-20, -2);\n+    static_assert( equal(negneg.size(), (S)18) );\n+\n+    constexpr V negpos(-20, 22);\n+    static_assert( equal(negpos.size(), (S)42) );\n+  }\n+}\n+\n+void\n+test01()\n+{\n+  test_integer_iota<signed char, unsigned int>();\n+  test_integer_iota<signed short, unsigned int>();\n+  test_integer_iota<signed int>();\n+  test_integer_iota<signed long>();\n+  test_integer_iota<signed long long>();\n+  test_integer_iota<unsigned char, unsigned int>();\n+  test_integer_iota<unsigned short, unsigned int>();\n+  test_integer_iota<unsigned int>();\n+  test_integer_iota<unsigned long>();\n+  test_integer_iota<unsigned long long>();\n+\n+#ifdef __SIZEOF_INT128__\n+  // When the target supports __int128 it can be used in iota_view\n+  // even in strict mode where !integral<__int128>.\n+  // Specify the size type explicitly, because make_unsigned_t<__int128>\n+  // is undefined when !integral<__int128>.\n+  test_integer_iota<__int128, unsigned __int128>();\n+  test_integer_iota<unsigned __int128, unsigned __int128>();\n+#endif\n+}\n+\n+constexpr int arr[3] = { 1, 2, 3 };\n+\n+void\n+test02()\n+{\n+  constexpr auto v = std::views::iota(std::begin(arr), std::end(arr));\n+  static_assert( equal(v.size(), std::make_unsigned_t<std::ptrdiff_t>(3)) );\n+\n+  constexpr auto vv = std::views::iota(v.begin(), v.end());\n+  constexpr auto vvsz = vv.size();\n+  static_assert( ! std::numeric_limits<decltype(vvsz)>::is_signed );\n+  static_assert( vvsz == 3 );\n+}"}]}