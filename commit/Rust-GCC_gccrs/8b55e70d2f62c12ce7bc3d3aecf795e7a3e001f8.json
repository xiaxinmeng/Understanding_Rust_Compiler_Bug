{"sha": "8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1NWU3MGQyZjYyYzEyY2U3YmMzZDNhZWNmNzk1ZTdhM2UwMDFmOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-21T14:50:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-21T14:50:06Z"}, "message": "[Ada] Extend legality of Scalar_Storage_Order to formal types\n\nThis patch extends the legality of the GNAT attribute Scalar_Storage_Order,\nto apply to formal private types. Previously this extension applied only\nin GNAT_Mode, to support instantiations of Ada.Sequential_IO, but it is more\ngenerally useful.\n\nThe following must compile quietly:\n\n----\nwith Memory_View_Generic;\nprocedure Main is\n   type T is array (1..10) of integer;\n   package OK is new Memory_View_Generic (T);\n\n   type T2 is new Long_Float;\n   package Wrong is new Memory_View_Generic (T2);\nbegin\n   null;\nend;\n----\nwith System;\ngeneric\n   type Source_Type is private;\npackage Memory_View_Generic is\n   -- various declarations ...\n   SSO : System.Bit_Order := Source_Type'Scalar_Storage_Order;\nend Memory_View_Generic;\n\n2018-05-21  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_attr.adb (Analyze_Attribute, case Scalar_Storage_Order): The\n\tattribute reference is legal within a generic unit when the prefix is a\n\tformal private type.\n\nFrom-SVN: r260444", "tree": {"sha": "17f41073b895892b4f7b9b1d8dca80b622adae42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17f41073b895892b4f7b9b1d8dca80b622adae42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66c0fa2cc9a2dbe62db5bed4fe5310d2e5912baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c0fa2cc9a2dbe62db5bed4fe5310d2e5912baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c0fa2cc9a2dbe62db5bed4fe5310d2e5912baf"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "8233aa4a7fe99c5c6a1661cbca6c70664637c44e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8", "patch": "@@ -1,3 +1,9 @@\n+2018-04-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case Scalar_Storage_Order): The\n+\tattribute reference is legal within a generic unit when the prefix is a\n+\tformal private type.\n+\n 2018-04-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch7.adb (Establish_Transient_Scope): Code cleanup. Do not"}, {"sha": "9cc3055a6d2dcf05701741c0b842d697b83ac096", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=8b55e70d2f62c12ce7bc3d3aecf795e7a3e001f8", "patch": "@@ -5709,11 +5709,15 @@ package body Sem_Attr is\n \n          if not (Is_Record_Type (P_Type) or else Is_Array_Type (P_Type)) then\n \n-            --  In GNAT mode, the attribute applies to generic types as well\n-            --  as composite types, and for non-composite types always returns\n-            --  the default bit order for the target.\n-\n-            if not (GNAT_Mode and then Is_Generic_Type (P_Type))\n+            --  The attribute applies to generic private types (in which case\n+            --  the legality rule is applied in the instance) as well as to\n+            --  composite types. For noncomposite types it always returns the\n+            --  default bit order for the target.\n+            --  Allowing formal private types was originally introduced in\n+            --  GNAT_Mode only, to compile instances of Sequential_IO, but\n+            --  users find it more generally useful in generic units.\n+\n+            if not (Is_Generic_Type (P_Type) and then Is_Private_Type (P_Type))\n               and then not In_Instance\n             then\n                Error_Attr_P\n@@ -11074,7 +11078,7 @@ package body Sem_Attr is\n \n             --  The context may be a constrained access type (however ill-\n             --  advised such subtypes might be) so in order to generate a\n-            --  constraint check when needed set the type of the attribute\n+            --  constraint check we need to set the type of the attribute\n             --  reference to the base type of the context.\n \n             Set_Etype (N, Btyp);\n@@ -11837,6 +11841,8 @@ package body Sem_Attr is\n       if Attr_Id = Attribute_Elaborated then\n          null;\n \n+      --  Should this be restricted to Expander_Active???\n+\n       else\n          Freeze_Expression (P);\n       end if;"}]}