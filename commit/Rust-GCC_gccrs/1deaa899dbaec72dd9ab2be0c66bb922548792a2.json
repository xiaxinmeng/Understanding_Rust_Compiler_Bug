{"sha": "1deaa899dbaec72dd9ab2be0c66bb922548792a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRlYWE4OTlkYmFlYzcyZGQ5YWIyYmUwYzY2YmI5MjI1NDg3OTJhMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-02-13T13:54:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-13T13:54:44Z"}, "message": "i386.md (add?f3, [...]): Enable for TARGET_SSE(2) too.\n\n\n\t* i386.md (add?f3, sub?f3, mul?f3, dif?f3): Enable for TARGET_SSE(2)\n\ttoo.\n\t(fop_sf_comm, fop_df_comm, fop_sf_1, fop_df_1): Support SSE.\n\t(fop_sf_comm_sse, fop_df_comm_sse): New patterns.\n\t(fop_sf_1_sse, fop_df_1_sse): New patterns\n\t(fop_*): Disable float_extend and float patterns for SSE compilation.\n\t* i386.c (output_387_binary_op): Support SSE.\n\nFrom-SVN: r39635", "tree": {"sha": "46fb13b208b862076740ded6ed66bed975ef4a68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46fb13b208b862076740ded6ed66bed975ef4a68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1deaa899dbaec72dd9ab2be0c66bb922548792a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1deaa899dbaec72dd9ab2be0c66bb922548792a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1deaa899dbaec72dd9ab2be0c66bb922548792a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1deaa899dbaec72dd9ab2be0c66bb922548792a2/comments", "author": null, "committer": null, "parents": [{"sha": "42a0aa6ff625569992ba8316810d3470b3441180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a0aa6ff625569992ba8316810d3470b3441180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42a0aa6ff625569992ba8316810d3470b3441180"}], "stats": {"total": 155, "additions": 117, "deletions": 38}, "files": [{"sha": "a5bdf0591cd28eca49197effae9da41572cecfae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1deaa899dbaec72dd9ab2be0c66bb922548792a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1deaa899dbaec72dd9ab2be0c66bb922548792a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1deaa899dbaec72dd9ab2be0c66bb922548792a2", "patch": "@@ -1,3 +1,13 @@\n+Tue Feb 13 14:53:16 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (add?f3, sub?f3, mul?f3, dif?f3): Enable for TARGET_SSE(2)\n+\ttoo.\n+\t(fop_sf_comm, fop_df_comm, fop_sf_1, fop_df_1): Support SSE.\n+\t(fop_sf_comm_sse, fop_df_comm_sse): New patterns.\n+\t(fop_sf_1_sse, fop_df_1_sse): New patterns\n+\t(fop_*): Disable float_extend and float patterns for SSE compilation.\n+\t* i386.c (output_387_binary_op): Support SSE.\n+\n Tue Feb 13 14:16:34 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (dummy_extendsfdf2): Support SSE2"}, {"sha": "bb4d421ed2d7c6e35ecc8fc6e309e04c43af58d5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1deaa899dbaec72dd9ab2be0c66bb922548792a2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1deaa899dbaec72dd9ab2be0c66bb922548792a2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1deaa899dbaec72dd9ab2be0c66bb922548792a2", "patch": "@@ -3762,6 +3762,8 @@ output_387_binary_op (insn, operands)\n {\n   static char buf[30];\n   const char *p;\n+  const char *ssep;\n+  int is_sse = SSE_REG_P (operands[0]) | SSE_REG_P (operands[1]) | SSE_REG_P (operands[2]);\n \n #ifdef ENABLE_CHECKING\n   /* Even if we do not want to check the inputs, this documents input\n@@ -3775,7 +3777,7 @@ output_387_binary_op (insn, operands)\n \t      && (STACK_REG_P (operands[1]) || GET_CODE (operands[1]) == MEM)))\n       && (STACK_TOP_P (operands[1]) || STACK_TOP_P (operands[2])))\n     ; /* ok */\n-  else\n+  else if (!is_sse)\n     abort ();\n #endif\n \n@@ -3787,6 +3789,7 @@ output_387_binary_op (insn, operands)\n \tp = \"fiadd\";\n       else\n \tp = \"fadd\";\n+      ssep = \"add\";\n       break;\n \n     case MINUS:\n@@ -3795,6 +3798,7 @@ output_387_binary_op (insn, operands)\n \tp = \"fisub\";\n       else\n \tp = \"fsub\";\n+      ssep = \"sub\";\n       break;\n \n     case MULT:\n@@ -3803,6 +3807,7 @@ output_387_binary_op (insn, operands)\n \tp = \"fimul\";\n       else\n \tp = \"fmul\";\n+      ssep = \"mul\";\n       break;\n \n     case DIV:\n@@ -3811,12 +3816,22 @@ output_387_binary_op (insn, operands)\n \tp = \"fidiv\";\n       else\n \tp = \"fdiv\";\n+      ssep = \"div\";\n       break;\n \n     default:\n       abort ();\n     }\n \n+  if (is_sse)\n+   {\n+      strcpy (buf, ssep);\n+      if (GET_MODE (operands[0]) == SFmode)\n+\tstrcat (buf, \"ss\\t{%2, %0|%0, %2}\");\n+      else\n+\tstrcat (buf, \"sd\\t{%2, %0|%0, %2}\");\n+      return buf;\n+   }\n   strcpy (buf, p);\n \n   switch (GET_CODE (operands[3]))"}, {"sha": "25718838b768927e01fcd4b5edaabd89f7148b0b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 91, "deletions": 37, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1deaa899dbaec72dd9ab2be0c66bb922548792a2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1deaa899dbaec72dd9ab2be0c66bb922548792a2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1deaa899dbaec72dd9ab2be0c66bb922548792a2", "patch": "@@ -5459,14 +5459,14 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(plus:DF (match_operand:DF 1 \"register_operand\" \"\")\n \t\t (match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 || TARGET_SSE2\"\n   \"\")\n \n (define_expand \"addsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(plus:SF (match_operand:SF 1 \"register_operand\" \"\")\n \t\t (match_operand:SF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 || TARGET_SSE\"\n   \"\")\n \f\n ;; Subtract instructions\n@@ -5664,14 +5664,14 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(minus:DF (match_operand:DF 1 \"register_operand\" \"\")\n \t\t  (match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 || TARGET_SSE2\"\n   \"\")\n \n (define_expand \"subsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(minus:SF (match_operand:SF 1 \"register_operand\" \"\")\n \t\t  (match_operand:SF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 || TARGET_SSE\"\n   \"\")\n \f\n ;; Multiply instructions\n@@ -5845,14 +5845,14 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(mult:DF (match_operand:DF 1 \"register_operand\" \"\")\n \t\t (match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 || TARGET_SSE2\"\n   \"\")\n \n (define_expand \"mulsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(mult:SF (match_operand:SF 1 \"register_operand\" \"\")\n \t\t (match_operand:SF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 || TARGET_SSE\"\n   \"\")\n \f\n ;; Divide instructions\n@@ -5899,14 +5899,14 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n  \t(div:DF (match_operand:DF 1 \"register_operand\" \"\")\n  \t\t(match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n-   \"TARGET_80387\"\n+   \"TARGET_80387 || TARGET_SSE2\"\n    \"\")\n  \n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"register_operand\" \"\")\n \t\t(match_operand:SF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 || TARGET_SSE\"\n   \"\")\n \f\n ;; Remainder instructions.\n@@ -10231,29 +10231,56 @@\n ;; Gcc is slightly more smart about handling normal two address instructions\n ;; so use special patterns for add and mull.\n (define_insn \"*fop_sf_comm\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f#x,x#f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:SF 1 \"register_operand\" \"%0\")\n-\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm\")]))]\n-  \"TARGET_80387 && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+\t\t\t[(match_operand:SF 1 \"register_operand\" \"%0,0\")\n+\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm#x,xm#f\")]))]\n+  \"TARGET_80387 && (!TARGET_SSE || TARGET_MIX_SSE_I387)\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n-        (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n-           (const_string \"fmul\")\n-           (const_string \"fop\")))\n+\t(if_then_else (eq_attr \"alternative\" \"1\")\n+           (const_string \"sse\")\n+\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+\t      (const_string \"fmul\")\n+\t      (const_string \"fop\"))))\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_insn \"*fop_sf_comm_sse\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(match_operator:SF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:SF 1 \"register_operand\" \"%0\")\n+\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"xm\")]))]\n+  \"TARGET_SSE && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*fop_df_comm\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,Y#f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:DF 1 \"register_operand\" \"%0\")\n-\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm\")]))]\n-  \"TARGET_80387 && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+\t\t\t[(match_operand:DF 1 \"register_operand\" \"%0,0\")\n+\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm#Y,Ym#f\")]))]\n+  \"TARGET_80387 && (!TARGET_SSE2 || TARGET_MIX_SSE_I387)\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n-        (if_then_else (match_operand:DF 3 \"mult_operator\" \"\") \n-           (const_string \"fmul\")\n-           (const_string \"fop\")))\n+\t(if_then_else (eq_attr \"alternative\" \"1\")\n+           (const_string \"sse\")\n+\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+\t      (const_string \"fmul\")\n+\t      (const_string \"fop\"))))\n+   (set_attr \"mode\" \"DF\")])\n+\n+(define_insn \"*fop_df_comm_sse\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n+\t(match_operator:DF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:DF 1 \"register_operand\" \"%0\")\n+\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"Ym\")]))]\n+  \"TARGET_SSE2\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*fop_xf_comm\"\n@@ -10283,29 +10310,43 @@\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"*fop_sf_1\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f,x\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"0,fm\")\n-\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n-  \"TARGET_80387\n+\t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"0,fm,0\")\n+\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0,xm#f\")]))]\n+  \"TARGET_80387 && (!TARGET_SSE || TARGET_MIX_SSE_I387)\n    && GET_RTX_CLASS (GET_CODE (operands[3])) != 'c'\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n-        (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n+        (cond [(eq_attr \"alternative\" \"2\")\n+                 (const_string \"sse\")\n+\t       (match_operand:SF 3 \"mult_operator\" \"\") \n                  (const_string \"fmul\")\n                (match_operand:SF 3 \"div_operator\" \"\") \n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"*fop_sf_1_sse\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(match_operator:SF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:SF 1 \"register_operand\" \"0\")\n+\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"xm\")]))]\n+  \"TARGET_SSE\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) != 'c'\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+;; ??? Add SSE splitters for these!\n (define_insn \"*fop_sf_2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n \t  [(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n \t   (match_operand:SF 2 \"register_operand\" \"0,0\")]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\"\n+  \"TARGET_80387 && TARGET_USE_FIOP && !TARGET_SSE\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n@@ -10323,7 +10364,7 @@\n \t(match_operator:SF 3 \"binary_fp_operator\"\n \t  [(match_operand:SF 1 \"register_operand\" \"0,0\")\n \t   (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\"\n+  \"TARGET_80387 && TARGET_USE_FIOP && !TARGET_SSE\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n@@ -10337,29 +10378,42 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*fop_df_1\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,f#Y,Y#f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"0,fm\")\n-\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n-  \"TARGET_80387\n+\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"0,fm,0\")\n+\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0,Ym#f\")]))]\n+  \"TARGET_80387 && (!TARGET_SSE2 || TARGET_MIX_SSE_I387)\n    && GET_RTX_CLASS (GET_CODE (operands[3])) != 'c'\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n+        (cond [(eq_attr \"alternative\" \"2\")\n+                 (const_string \"sse\")\n+\t       (match_operand:DF 3 \"mult_operator\" \"\") \n                  (const_string \"fmul\")\n                (match_operand:DF 3 \"div_operator\" \"\") \n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"DF\")])\n \n+(define_insn \"*fop_df_1_sse\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n+\t(match_operator:DF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:DF 1 \"register_operand\" \"0\")\n+\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"Ym\")]))]\n+  \"TARGET_SSE\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) != 'c'\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; ??? Add SSE splitters for these!\n (define_insn \"*fop_df_2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t   [(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n \t    (match_operand:DF 2 \"register_operand\" \"0,0\")]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\"\n+  \"TARGET_80387 && TARGET_USE_FIOP && !TARGET_SSE2\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n@@ -10377,7 +10431,7 @@\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t   [(match_operand:DF 1 \"register_operand\" \"0,0\")\n \t    (float:DF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\"\n+  \"TARGET_80387 && TARGET_USE_FIOP && !TARGET_SSE2\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n@@ -10413,7 +10467,7 @@\n \t  [(match_operand:DF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:DF\n \t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_SSE2\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:DF 3 \"mult_operator\" \"\") "}]}