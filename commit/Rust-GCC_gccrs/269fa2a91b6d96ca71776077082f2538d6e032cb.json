{"sha": "269fa2a91b6d96ca71776077082f2538d6e032cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY5ZmEyYTkxYjZkOTZjYTcxNzc2MDc3MDgyZjI1MzhkNmUwMzJjYg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-11-11T14:47:19Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2015-11-11T14:47:19Z"}, "message": "LWG 2510, make the default constructors of library tag types explicit.\n\n2015-11-10  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tLWG 2510, make the default constructors of library tag types\n\texplicit.\n\t* include/bits/mutex.h (defer_lock_t, try_lock_t,\n\tadopt_lock_t): Add an explicit default constructor.\n\t* include/bits/stl_pair.h (piecewise_construct_t): Likewise.\n\t* include/bits/uses_allocator.h (allocator_arg_t): Likewise.\n\t* libsupc++/new (nothrow_t): Likewise.\n\t* testsuite/17_intro/tag_type_explicit_ctor.cc: New.\n\nFrom-SVN: r230175", "tree": {"sha": "a2e12c097060dfba72c4948b13a0f5d486705daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2e12c097060dfba72c4948b13a0f5d486705daa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/269fa2a91b6d96ca71776077082f2538d6e032cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269fa2a91b6d96ca71776077082f2538d6e032cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/269fa2a91b6d96ca71776077082f2538d6e032cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269fa2a91b6d96ca71776077082f2538d6e032cb/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78bede6f774bc0d294adafe5e3367c4da10647e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78bede6f774bc0d294adafe5e3367c4da10647e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78bede6f774bc0d294adafe5e3367c4da10647e"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "ebe7755489f3d0f32248f95a546a5b36940cefe0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=269fa2a91b6d96ca71776077082f2538d6e032cb", "patch": "@@ -1,3 +1,14 @@\n+2015-11-10  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tLWG 2510, make the default constructors of library tag types\n+\texplicit.\n+\t* include/bits/mutex.h (defer_lock_t, try_lock_t,\n+\tadopt_lock_t): Add an explicit default constructor.\n+\t* include/bits/stl_pair.h (piecewise_construct_t): Likewise.\n+\t* include/bits/uses_allocator.h (allocator_arg_t): Likewise.\n+\t* libsupc++/new (nothrow_t): Likewise.\n+\t* testsuite/17_intro/tag_type_explicit_ctor.cc: New.\n+\n 2015-11-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/64651"}, {"sha": "dd279899ee9f492b4297f1ab3e7c0bc8e08c4957", "filename": "libstdc++-v3/include/bits/mutex.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmutex.h?ref=269fa2a91b6d96ca71776077082f2538d6e032cb", "patch": "@@ -129,14 +129,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // _GLIBCXX_HAS_GTHREADS\n \n   /// Do not acquire ownership of the mutex.\n-  struct defer_lock_t { };\n+  struct defer_lock_t { explicit defer_lock_t() = default; };\n \n   /// Try to acquire ownership of the mutex without blocking.\n-  struct try_to_lock_t { };\n+  struct try_to_lock_t { explicit try_to_lock_t() = default; };\n \n   /// Assume the calling thread has already obtained mutex ownership\n   /// and manage it.\n-  struct adopt_lock_t { };\n+  struct adopt_lock_t { explicit adopt_lock_t() = default; };\n \n   constexpr defer_lock_t\tdefer_lock { };\n   constexpr try_to_lock_t\ttry_to_lock { };"}, {"sha": "d6f6b86bd4ce47a644c27582a7e60889009664e1", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=269fa2a91b6d96ca71776077082f2538d6e032cb", "patch": "@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n   /// piecewise_construct_t\n-  struct piecewise_construct_t { };\n+  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };\n \n   /// piecewise_construct\n   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();"}, {"sha": "a0f084d9aa9ec6cd2109b640ff89f142ac4ee3d3", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=269fa2a91b6d96ca71776077082f2538d6e032cb", "patch": "@@ -36,7 +36,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// [allocator.tag]\n-  struct allocator_arg_t { };\n+  struct allocator_arg_t { explicit allocator_arg_t() = default; };\n \n   constexpr allocator_arg_t allocator_arg = allocator_arg_t();\n "}, {"sha": "8621f73d5c2412d583784aeca8cb3b1267176cfa", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=269fa2a91b6d96ca71776077082f2538d6e032cb", "patch": "@@ -79,7 +79,12 @@ namespace std\n   };\n #endif\n \n-  struct nothrow_t { };\n+  struct nothrow_t\n+  {\n+#if __cplusplus >= 201103L\n+    explicit nothrow_t() = default;\n+#endif\n+  };\n \n   extern const nothrow_t nothrow;\n "}, {"sha": "4b9d217ccdb4bf5e69056fb006c40b92a6382c19", "filename": "libstdc++-v3/testsuite/17_intro/tag_type_explicit_ctor.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Ftag_type_explicit_ctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269fa2a91b6d96ca71776077082f2538d6e032cb/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Ftag_type_explicit_ctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Ftag_type_explicit_ctor.cc?ref=269fa2a91b6d96ca71776077082f2538d6e032cb", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <new>\n+#include <utility>\n+#include <memory>\n+#include <mutex>\n+\n+void f1(std::nothrow_t);\n+void f2(std::piecewise_construct_t);\n+void f3(std::allocator_arg_t);\n+void f4(std::defer_lock_t);\n+void f5(std::try_to_lock_t);\n+void f6(std::adopt_lock_t);\n+\n+\n+int main()\n+{\n+  std::nothrow_t v1;\n+  std::piecewise_construct_t v2;\n+  std::allocator_arg_t v3;\n+  std::defer_lock_t v4;\n+  std::try_to_lock_t v5;\n+  std::try_to_lock_t v6;\n+  std::nothrow_t v7 = {}; // { dg-error \"explicit\" }\n+  std::piecewise_construct_t v8 = {}; // { dg-error \"explicit\" }\n+  std::allocator_arg_t v9 = {}; // { dg-error \"explicit\" }\n+  std::defer_lock_t v10 = {}; // { dg-error \"explicit\" }\n+  std::try_to_lock_t v11 = {}; // { dg-error \"explicit\" }\n+  std::try_to_lock_t v12 = {}; // { dg-error \"explicit\" }\n+  f1(std::nothrow_t{});\n+  f2(std::piecewise_construct_t{});\n+  f3(std::allocator_arg_t{});\n+  f4(std::defer_lock_t{});\n+  f5(std::try_to_lock_t{});\n+  f6(std::adopt_lock_t{});\n+  f1({}); // { dg-error \"explicit\" }\n+  f2({}); // { dg-error \"explicit\" }\n+  f3({}); // { dg-error \"explicit\" }\n+  f4({}); // { dg-error \"explicit\" }\n+  f5({}); // { dg-error \"explicit\" }\n+  f6({}); // { dg-error \"explicit\" }\n+}"}]}