{"sha": "1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75", "node_id": "C_kwDOANBUbNoAKDFkNDdjMDUxMmEyNjVkNGJiM2FiOWU1NjI1OWZkMWU0ZjRkNDJjNzU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-17T17:49:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-17T17:49:00Z"}, "message": "libatomic: Improve 16-byte atomics on Intel AVX [PR104688]\n\nAs mentioned in the PR, the latest Intel SDM has added:\n\"Processors that enumerate support for Intel\u00ae AVX (by setting the feature flag CPUID.01H:ECX.AVX[bit 28])\nguarantee that the 16-byte memory operations performed by the following instructions will always be\ncarried out atomically:\n\u2022 MOVAPD, MOVAPS, and MOVDQA.\n\u2022 VMOVAPD, VMOVAPS, and VMOVDQA when encoded with VEX.128.\n\u2022 VMOVAPD, VMOVAPS, VMOVDQA32, and VMOVDQA64 when encoded with EVEX.128 and k0 (masking disabled).\n(Note that these instructions require the linear addresses of their memory operands to be 16-byte\naligned.)\"\n\nThe following patch deals with it just on the libatomic library side so far,\ncurrently (since ~ 2017) we emit all the __atomic_* 16-byte builtins as\nlibrary calls since and this is something that we can hopefully backport.\n\nThe patch simply introduces yet another ifunc variant that takes priority\nover the pure CMPXCHG16B one, one that checks AVX and CMPXCHG16B bits and\non non-Intel clears the AVX bit during detection for now (if AMD comes\nwith the same guarantee, we could revert the config/x86/init.c hunk),\nwhich implements 16-byte atomic load as vmovdqa and 16-byte atomic store\nas vmovdqa followed by mfence.\n\n2022-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/104688\n\t* Makefile.am (IFUNC_OPTIONS): Change on x86_64 to -mcx16 -mcx16.\n\t(libatomic_la_LIBADD): Add $(addsuffix _16_2_.lo,$(SIZEOBJS)) for\n\tx86_64.\n\t* Makefile.in: Regenerated.\n\t* config/x86/host-config.h (IFUNC_COND_1): For x86_64 define to\n\tboth AVX and CMPXCHG16B bits.\n\t(IFUNC_COND_2): Define.\n\t(IFUNC_NCOND): For x86_64 define to 2 * (N == 16).\n\t(MAYBE_HAVE_ATOMIC_CAS_16, MAYBE_HAVE_ATOMIC_EXCHANGE_16,\n\tMAYBE_HAVE_ATOMIC_LDST_16): Define to IFUNC_COND_2 rather than\n\tIFUNC_COND_1.\n\t(HAVE_ATOMIC_CAS_16): Redefine to 1 whenever IFUNC_ALT != 0.\n\t(HAVE_ATOMIC_LDST_16): Redefine to 1 whenever IFUNC_ALT == 1.\n\t(atomic_compare_exchange_n): Define whenever IFUNC_ALT != 0\n\ton x86_64 for N == 16.\n\t(__atomic_load_n, __atomic_store_n): Redefine whenever IFUNC_ALT == 1\n\ton x86_64 for N == 16.\n\t(atomic_load_n, atomic_store_n): New functions.\n\t* config/x86/init.c (__libat_feat1_init): On x86_64 clear bit_AVX\n\tif CPU vendor is not Intel.", "tree": {"sha": "082d567edef178aee086ebdb67cb4de18ebd46d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/082d567edef178aee086ebdb67cb4de18ebd46d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ef40ecdc1a442587703a4daed9141cf1ab87b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ef40ecdc1a442587703a4daed9141cf1ab87b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ef40ecdc1a442587703a4daed9141cf1ab87b2"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "d88515e4a03bd812334ae0b7bf4c0bba119455dc", "filename": "libatomic/Makefile.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75/libatomic%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75/libatomic%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FMakefile.am?ref=1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75", "patch": "@@ -138,8 +138,9 @@ IFUNC_OPTIONS\t     = -march=i586\n libatomic_la_LIBADD += $(addsuffix _8_1_.lo,$(SIZEOBJS))\n endif\n if ARCH_X86_64\n-IFUNC_OPTIONS\t     = -mcx16\n-libatomic_la_LIBADD += $(addsuffix _16_1_.lo,$(SIZEOBJS))\n+IFUNC_OPTIONS\t     = -mcx16 -mcx16\n+libatomic_la_LIBADD += $(addsuffix _16_1_.lo,$(SIZEOBJS)) \\\n+\t\t       $(addsuffix _16_2_.lo,$(SIZEOBJS))\n endif\n endif\n "}, {"sha": "80d25653dc75cca995c8b0b2107a55f1234a6d52", "filename": "libatomic/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75/libatomic%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75/libatomic%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FMakefile.in?ref=1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75", "patch": "@@ -96,7 +96,9 @@ target_triplet = @target@\n @ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@\t$(addsuffix \\\n @ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@\t_8_2_.lo,$(SIZEOBJS))\n @ARCH_I386_TRUE@@HAVE_IFUNC_TRUE@am__append_3 = $(addsuffix _8_1_.lo,$(SIZEOBJS))\n-@ARCH_X86_64_TRUE@@HAVE_IFUNC_TRUE@am__append_4 = $(addsuffix _16_1_.lo,$(SIZEOBJS))\n+@ARCH_X86_64_TRUE@@HAVE_IFUNC_TRUE@am__append_4 = $(addsuffix _16_1_.lo,$(SIZEOBJS)) \\\n+@ARCH_X86_64_TRUE@@HAVE_IFUNC_TRUE@\t\t       $(addsuffix _16_2_.lo,$(SIZEOBJS))\n+\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n@@ -435,7 +437,7 @@ libatomic_la_LIBADD = $(foreach s,$(SIZES),$(addsuffix \\\n @ARCH_AARCH64_LINUX_TRUE@@HAVE_IFUNC_TRUE@IFUNC_OPTIONS = -march=armv8-a+lse\n @ARCH_ARM_LINUX_TRUE@@HAVE_IFUNC_TRUE@IFUNC_OPTIONS = -march=armv7-a+fp -DHAVE_KERNEL64\n @ARCH_I386_TRUE@@HAVE_IFUNC_TRUE@IFUNC_OPTIONS = -march=i586\n-@ARCH_X86_64_TRUE@@HAVE_IFUNC_TRUE@IFUNC_OPTIONS = -mcx16\n+@ARCH_X86_64_TRUE@@HAVE_IFUNC_TRUE@IFUNC_OPTIONS = -mcx16 -mcx16\n libatomic_convenience_la_SOURCES = $(libatomic_la_SOURCES)\n libatomic_convenience_la_LIBADD = $(libatomic_la_LIBADD)\n MULTISRCTOP = "}, {"sha": "007b7e14718891e6c4ad3063a14ce654af090b24", "filename": "libatomic/config/x86/host-config.h", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75/libatomic%2Fconfig%2Fx86%2Fhost-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75/libatomic%2Fconfig%2Fx86%2Fhost-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Fx86%2Fhost-config.h?ref=1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75", "patch": "@@ -55,31 +55,37 @@ load_feat1 (void)\n }\n \n #ifdef __x86_64__\n-# define IFUNC_COND_1\t(load_feat1 () & bit_CMPXCHG16B)\n+# define IFUNC_COND_1\t((load_feat1 () & (bit_AVX | bit_CMPXCHG16B)) \\\n+\t\t\t == (bit_AVX | bit_CMPXCHG16B))\n+# define IFUNC_COND_2\t(load_feat1 () & bit_CMPXCHG16B)\n #else\n # define IFUNC_COND_1\t(load_feat1 () & bit_CMPXCHG8B)\n #endif\n \n #ifdef __x86_64__\n-# define IFUNC_NCOND(N) (N == 16)\n+# define IFUNC_NCOND(N) (2 * (N == 16))\n #else\n # define IFUNC_NCOND(N) (N == 8)\n #endif\n \n #ifdef __x86_64__\n # undef MAYBE_HAVE_ATOMIC_CAS_16\n-# define MAYBE_HAVE_ATOMIC_CAS_16\tIFUNC_COND_1\n+# define MAYBE_HAVE_ATOMIC_CAS_16\tIFUNC_COND_2\n # undef MAYBE_HAVE_ATOMIC_EXCHANGE_16\n-# define MAYBE_HAVE_ATOMIC_EXCHANGE_16\tIFUNC_COND_1\n+# define MAYBE_HAVE_ATOMIC_EXCHANGE_16\tIFUNC_COND_2\n # undef MAYBE_HAVE_ATOMIC_LDST_16\n-# define MAYBE_HAVE_ATOMIC_LDST_16\tIFUNC_COND_1\n+# define MAYBE_HAVE_ATOMIC_LDST_16\tIFUNC_COND_2\n /* Since load and store are implemented with CAS, they are not fast.  */\n # undef FAST_ATOMIC_LDST_16\n # define FAST_ATOMIC_LDST_16\t\t0\n-# if IFUNC_ALT == 1\n+# if IFUNC_ALT != 0\n #  undef HAVE_ATOMIC_CAS_16\n #  define HAVE_ATOMIC_CAS_16 1\n # endif\n+# if IFUNC_ALT == 1\n+#  undef HAVE_ATOMIC_LDST_16\n+#  define HAVE_ATOMIC_LDST_16 1\n+# endif\n #else\n # undef MAYBE_HAVE_ATOMIC_CAS_8\n # define MAYBE_HAVE_ATOMIC_CAS_8\tIFUNC_COND_1\n@@ -93,7 +99,7 @@ load_feat1 (void)\n # endif\n #endif\n \n-#if defined(__x86_64__) && N == 16 && IFUNC_ALT == 1\n+#if defined(__x86_64__) && N == 16 && IFUNC_ALT != 0\n static inline bool\n atomic_compare_exchange_n (UTYPE *mptr, UTYPE *eptr, UTYPE newval,\n                            bool weak_p UNUSED, int sm UNUSED, int fm UNUSED)\n@@ -108,6 +114,29 @@ atomic_compare_exchange_n (UTYPE *mptr, UTYPE *eptr, UTYPE newval,\n # define atomic_compare_exchange_n atomic_compare_exchange_n\n #endif /* Have CAS 16 */\n \n+#if defined(__x86_64__) && N == 16 && IFUNC_ALT == 1\n+#define __atomic_load_n(ptr, model) \\\n+  (sizeof (*ptr) == 16 ? atomic_load_n (ptr, model) \\\n+\t\t       : (__atomic_load_n) (ptr, model))\n+#define __atomic_store_n(ptr, val, model) \\\n+  (sizeof (*ptr) == 16 ? atomic_store_n (ptr, val, model) \\\n+\t\t       : (__atomic_store_n) (ptr, val, model))\n+\n+static inline UTYPE\n+atomic_load_n (UTYPE *ptr, int model UNUSED)\n+{\n+  UTYPE ret;\n+  __asm__ (\"vmovdqa\\t{%1, %0|%0, %1}\" : \"=x\" (ret) : \"m\" (*ptr));\n+  return ret;\n+}\n+\n+static inline void\n+atomic_store_n (UTYPE *ptr, UTYPE val, int model UNUSED)\n+{\n+  __asm__ (\"vmovdqa\\t{%1, %0|%0, %1}\\n\\tmfence\" : \"=m\" (*ptr) : \"x\" (val));\n+}\n+#endif\n+\n #endif /* HAVE_IFUNC */\n \n #include_next <host-config.h>"}, {"sha": "6f6499c58c3c1830e6a1c0f57d99adde7d544e1a", "filename": "libatomic/config/x86/init.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75/libatomic%2Fconfig%2Fx86%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75/libatomic%2Fconfig%2Fx86%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Fx86%2Finit.c?ref=1d47c0512a265d4bb3ab9e56259fd1e4f4d42c75", "patch": "@@ -34,6 +34,18 @@ __libat_feat1_init (void)\n   unsigned int eax, ebx, ecx, edx;\n   FEAT1_REGISTER = 0;\n   __get_cpuid (1, &eax, &ebx, &ecx, &edx);\n+#ifdef __x86_64__\n+  if ((FEAT1_REGISTER & (bit_AVX | bit_CMPXCHG16B))\n+      == (bit_AVX | bit_CMPXCHG16B))\n+    {\n+      /* Intel SDM guarantees that 16-byte VMOVDQA on 16-byte aligned address\n+\t is atomic, but so far we don't have this guarantee from AMD.  */\n+      unsigned int ecx2 = 0;\n+      __get_cpuid (0, &eax, &ebx, &ecx2, &edx);\n+      if (ecx2 != signature_INTEL_ecx)\n+\tFEAT1_REGISTER &= ~bit_AVX;\n+    }\n+#endif\n   /* See the load in load_feat1.  */\n   __atomic_store_n (&__libat_feat1, FEAT1_REGISTER, __ATOMIC_RELAXED);\n   return FEAT1_REGISTER;"}]}