{"sha": "3f6f33195bc0ede860ecbf55fe92712f3f503f50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y2ZjMzMTk1YmMwZWRlODYwZWNiZjU1ZmU5MjcxMmYzZjUwM2Y1MA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2018-07-06T22:10:20Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2018-07-06T22:10:20Z"}, "message": "gimplify.h (generic_expr_could_trap_p): Set as global function.\n\ngcc/ChangeLog:\n\n2018-07-06  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* gimplify.h (generic_expr_could_trap_p): Set as global function.\n\t* gimplify.h (generic_expr_could_trap_p): Likwise.\n\t* tree-scalar-evolution.c (expression_expensive_p): Handle COND_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n2018-07-06  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* gcc.dg/tree-ssa/pr64183.c: Disable final value replacement\n\tto preserve the test.\n\t* gcc.target/i386/pr85073.c: Likewise.\n\nFrom-SVN: r262486", "tree": {"sha": "d67ff11dbd4272b079b2d01e3eba1d9861d0b585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d67ff11dbd4272b079b2d01e3eba1d9861d0b585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f6f33195bc0ede860ecbf55fe92712f3f503f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f6f33195bc0ede860ecbf55fe92712f3f503f50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f6f33195bc0ede860ecbf55fe92712f3f503f50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f6f33195bc0ede860ecbf55fe92712f3f503f50/comments", "author": null, "committer": null, "parents": [{"sha": "f290100275139ccb59832bb75ff7fb2606e110d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f290100275139ccb59832bb75ff7fb2606e110d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f290100275139ccb59832bb75ff7fb2606e110d7"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "acaea119eaf40dbf90d2b7173926056c7a74add4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f6f33195bc0ede860ecbf55fe92712f3f503f50", "patch": "@@ -1,3 +1,9 @@\n+2018-07-06  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* gimplify.h (generic_expr_could_trap_p): Set as global function.\n+\t* gimplify.h (generic_expr_could_trap_p): Likwise.\n+\t* tree-scalar-evolution.c (expression_expensive_p): Handle COND_EXPR.\n+\n 2018-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/86401"}, {"sha": "c86ad1ad96279ab7e99839090ac3fea341026071", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3f6f33195bc0ede860ecbf55fe92712f3f503f50", "patch": "@@ -3878,7 +3878,7 @@ gimplify_pure_cond_expr (tree *expr_p, gimple_seq *pre_p)\n    EXPR is GENERIC, while tree_could_trap_p can be called\n    only on GIMPLE.  */\n \n-static bool\n+bool\n generic_expr_could_trap_p (tree expr)\n {\n   unsigned i, n;"}, {"sha": "62ca869083a447597a23d07e69a37ac7eba2f548", "filename": "gcc/gimplify.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Fgimplify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Fgimplify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.h?ref=3f6f33195bc0ede860ecbf55fe92712f3f503f50", "patch": "@@ -83,6 +83,7 @@ extern enum gimplify_status gimplify_arg (tree *, gimple_seq *, location_t,\n extern void gimplify_function_tree (tree);\n extern enum gimplify_status gimplify_va_arg_expr (tree *, gimple_seq *,\n \t\t\t\t\t\t  gimple_seq *);\n+extern bool generic_expr_could_trap_p (tree expr);\n gimple *gimplify_assign (tree, tree, gimple_seq *);\n \n #endif /* GCC_GIMPLIFY_H */"}, {"sha": "541fafb99601da49deaea5b74410a01b7f3a0903", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f6f33195bc0ede860ecbf55fe92712f3f503f50", "patch": "@@ -1,3 +1,9 @@\n+2018-07-06  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* gcc.dg/tree-ssa/pr64183.c: Disable final value replacement\n+\tto preserve the test.\n+\t* gcc.target/i386/pr85073.c: Likewise.\n+\n 2018-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/86401"}, {"sha": "50d0c5a1c5a98b766450482c202c49a06369907b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr64183.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64183.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64183.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64183.c?ref=3f6f33195bc0ede860ecbf55fe92712f3f503f50", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fno-tree-vectorize -fdump-tree-cunroll-details\" } */\n+/* { dg-options \"-O3 -fno-tree-vectorize -fdisable-tree-sccp -fdump-tree-cunroll-details\" } */\n \n int bits;\n unsigned int size;"}, {"sha": "71a5d2353d82ef1e3baa242673def95ab42fd3e6", "filename": "gcc/testsuite/gcc.target/i386/pr85073.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85073.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85073.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85073.c?ref=3f6f33195bc0ede860ecbf55fe92712f3f503f50", "patch": "@@ -1,6 +1,6 @@\n /* PR target/85073 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mbmi\" } */\n+/* { dg-options \"-O2 -mbmi -fdisable-tree-sccp\" } */\n \n int\n foo (unsigned x)"}, {"sha": "8e2900547e093598a64b97c00278341194ac4320", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f6f33195bc0ede860ecbf55fe92712f3f503f50/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=3f6f33195bc0ede860ecbf55fe92712f3f503f50", "patch": "@@ -3508,6 +3508,18 @@ expression_expensive_p (tree expr)\n       return false;\n     }\n \n+  if (code == COND_EXPR)\n+    return (expression_expensive_p (TREE_OPERAND (expr, 0))\n+\t    || (EXPR_P (TREE_OPERAND (expr, 1))\n+\t\t&& EXPR_P (TREE_OPERAND (expr, 2)))\n+\t    /* If either branch has side effects or could trap.  */\n+\t    || TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1))\n+\t    || generic_expr_could_trap_p (TREE_OPERAND (expr, 1))\n+\t    || TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 0))\n+\t    || generic_expr_could_trap_p (TREE_OPERAND (expr, 0))\n+\t    || expression_expensive_p (TREE_OPERAND (expr, 1))\n+\t    || expression_expensive_p (TREE_OPERAND (expr, 2)));\n+\n   switch (TREE_CODE_CLASS (code))\n     {\n     case tcc_binary:"}]}