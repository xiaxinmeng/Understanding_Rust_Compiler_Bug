{"sha": "47b92ff1835ea0aa27c490600c40ae2ddb8681a1", "node_id": "C_kwDOANBUbNoAKDQ3YjkyZmYxODM1ZWEwYWEyN2M0OTA2MDBjNDBhZTJkZGI4NjgxYTE", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-04-08T06:24:03Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-13T11:50:47Z"}, "message": "Fully unify deriving classes into HIR::ExprStmt\n\ngcc/rust/ChangeLog:\n\n\t* hir/tree/rust-hir-full-decls.h\n\t(class ExprStmtWithoutBlock): Remove.\n\t(class ExprStmtWithBlock): Remove.\n\t* hir/tree/rust-hir-stmt.h\n\t(class ExprStmt):\n\tAdd remaining ExprStmtWith{,out}Block functionality.\n\t(class ExprStmtWithoutBlock): Remove.\n\t(class ExprStmtWithBlock): Remove.\n\t* hir/rust-ast-lower-stmt.cc\n\t(ASTLoweringStmt::visit):\n\tLower to HIR::ExprStmt instead of deriving class.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "a29ea3f711627adc8658c9f26806606c54fb374c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a29ea3f711627adc8658c9f26806606c54fb374c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47b92ff1835ea0aa27c490600c40ae2ddb8681a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b92ff1835ea0aa27c490600c40ae2ddb8681a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47b92ff1835ea0aa27c490600c40ae2ddb8681a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b92ff1835ea0aa27c490600c40ae2ddb8681a1/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795"}], "stats": {"total": 74, "additions": 18, "deletions": 56}, "files": [{"sha": "be9add9b8b5891ca8963c13db6062052ea8ba03d", "filename": "gcc/rust/hir/rust-ast-lower-stmt.cc", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b92ff1835ea0aa27c490600c40ae2ddb8681a1/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b92ff1835ea0aa27c490600c40ae2ddb8681a1/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc?ref=47b92ff1835ea0aa27c490600c40ae2ddb8681a1", "patch": "@@ -66,10 +66,8 @@ ASTLoweringStmt::visit (AST::ExprStmtWithBlock &stmt)\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n   translated\n-    = new HIR::ExprStmtWithBlock (mapping,\n-\t\t\t\t  std::unique_ptr<HIR::ExprWithBlock> (expr),\n-\t\t\t\t  stmt.get_locus (),\n-\t\t\t\t  !stmt.is_semicolon_followed ());\n+    = new HIR::ExprStmt (mapping, std::unique_ptr<HIR::ExprWithBlock> (expr),\n+\t\t\t stmt.get_locus (), !stmt.is_semicolon_followed ());\n }\n \n void\n@@ -82,9 +80,8 @@ ASTLoweringStmt::visit (AST::ExprStmtWithoutBlock &stmt)\n   Analysis::NodeMapping mapping (crate_num, stmt.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n-  translated\n-    = new HIR::ExprStmtWithoutBlock (mapping, std::unique_ptr<HIR::Expr> (expr),\n-\t\t\t\t     stmt.get_locus ());\n+  translated = new HIR::ExprStmt (mapping, std::unique_ptr<HIR::Expr> (expr),\n+\t\t\t\t  stmt.get_locus ());\n }\n \n void"}, {"sha": "7b7e3ae3c0b58ba7e7778953d61cc8089e20b237", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b92ff1835ea0aa27c490600c40ae2ddb8681a1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b92ff1835ea0aa27c490600c40ae2ddb8681a1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=47b92ff1835ea0aa27c490600c40ae2ddb8681a1", "patch": "@@ -129,8 +129,6 @@ class AsyncBlockExpr;\n class EmptyStmt;\n class LetStmt;\n class ExprStmt;\n-class ExprStmtWithoutBlock;\n-class ExprStmtWithBlock;\n \n // rust-item.h\n class TypeParam;"}, {"sha": "9d38b03f37a693d80531496c551ffed59a055e56", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 14, "deletions": 47, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b92ff1835ea0aa27c490600c40ae2ddb8681a1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b92ff1835ea0aa27c490600c40ae2ddb8681a1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=47b92ff1835ea0aa27c490600c40ae2ddb8681a1", "patch": "@@ -152,16 +152,25 @@ class LetStmt : public Stmt\n   LetStmt *clone_stmt_impl () const override { return new LetStmt (*this); }\n };\n \n-/* Abstract base class for expression statements (statements containing an\n- * expression) */\n+/* class for expression statements (statements containing an expression) */\n class ExprStmt : public Stmt\n {\n-  // TODO: add any useful virtual functions\n-\n   std::unique_ptr<Expr> expr;\n   Location locus;\n+  bool must_be_unit;\n \n public:\n+  ExprStmt (Analysis::NodeMapping mappings, std::unique_ptr<Expr> expr,\n+\t    Location locus, bool must_be_unit)\n+    : Stmt (std::move (mappings)), expr (std::move (expr)), locus (locus),\n+      must_be_unit (must_be_unit)\n+  {}\n+\n+  ExprStmt (Analysis::NodeMapping mappings, std::unique_ptr<Expr> expr,\n+\t    Location locus)\n+    : ExprStmt (std::move (mappings), std::move (expr), locus, false)\n+  {}\n+\n   std::string as_string () const override;\n \n   Location get_locus () const override final { return locus; }\n@@ -192,54 +201,12 @@ class ExprStmt : public Stmt\n   ExprStmt (ExprStmt &&other) = default;\n   ExprStmt &operator= (ExprStmt &&other) = default;\n \n-protected:\n-  ExprStmt (Analysis::NodeMapping mappings, std::unique_ptr<Expr> expr, Location locus)\n-    : Stmt (std::move (mappings)), expr (std::move (expr)), locus (locus)\n-  {}\n-};\n-\n-/* Statement containing an expression without a block (or, due to technical\n- * difficulties, can only be guaranteed to hold an expression). */\n-class ExprStmtWithoutBlock : public ExprStmt\n-{\n-\n-public:\n-  ExprStmtWithoutBlock (Analysis::NodeMapping mappings,\n-\t\t\tstd::unique_ptr<Expr> expr, Location locus)\n-    : ExprStmt (std::move (mappings), std::move (expr), locus)\n-  {}\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ExprStmtWithoutBlock *clone_stmt_impl () const override\n-  {\n-    return new ExprStmtWithoutBlock (*this);\n-  }\n-};\n-\n-// Statement containing an expression with a block\n-class ExprStmtWithBlock : public ExprStmt\n-{\n-  bool must_be_unit;\n-\n-public:\n-  ExprStmtWithBlock (Analysis::NodeMapping mappings,\n-\t\t     std::unique_ptr<ExprWithBlock> expr, Location locus,\n-\t\t     bool must_be_unit)\n-    : ExprStmt (std::move (mappings), std::move (expr), locus),\n-      must_be_unit (must_be_unit)\n-  {}\n-\n   bool is_unit_check_needed () const override { return must_be_unit; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  ExprStmtWithBlock *clone_stmt_impl () const override\n-  {\n-    return new ExprStmtWithBlock (*this);\n-  }\n+  ExprStmt *clone_stmt_impl () const override { return new ExprStmt (*this); }\n };\n \n } // namespace HIR"}]}