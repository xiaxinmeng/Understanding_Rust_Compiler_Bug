{"sha": "49d8df1b95ac68fee5420a4ad7a0cab006302e0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkOGRmMWI5NWFjNjhmZWU1NDIwYTRhZDdhMGNhYjAwNjMwMmUwZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-06-20T08:11:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-06-20T08:11:46Z"}, "message": "[7/n] PR85694: Add a vect_pattern_detected helper\n\nThis message is a long write-up for a patch that simply adds a common\nroutine for printing the \"vector_foo_pattern: detected:\" messages.\n\nThe reason for doing this is that some routines check for target support\nthemselves and some leave it to vect_pattern_recog_1.  Those that leave\nit to vect_pattern_recog_1 currently print these \"detected:\" messages if\nthe statements have the right form, even if the pattern is eventually\ndiscarded.  IMO that's useful, and a lot of existing scan tests rely on it.\n\nHowever, a later patch makes patterns do their own testing, and stops\nthem creating pattern statements until the tests have passed.  This means\n(a) they need to print the \"detected:\" message earlier and (b) the pattern\nstatement won't be around to print.\n\nThe patch therefore makes all routines print the original statement\nrather than the pattern one.  That information isn't obvious otherwise,\nwhereas vect_pattern_recog_1 already prints the pattern statement\nin the case of a successful match.  This also avoids the previous\nsituation in which a routine could print \"detected:\" and then\nsilently bail out before saying what had been detected.\n\n2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-patterns.c (vect_pattern_detected): New function.\n\t(vect_recog_dot_prod_patternm, vect_recog_sad_pattern)\n\t(vect_recog_widen_mult_pattern, vect_recog_widen_sum_pattern)\n\t(vect_recog_over_widening_pattern, vect_recog_widen_shift_pattern\n\t(vect_recog_rotate_pattern, vect_recog_vector_vector_shift_pattern)\n\t(vect_recog_mult_pattern, vect_recog_divmod_pattern)\n\t(vect_recog_mixed_size_cond_pattern, vect_recog_bool_pattern)\n\t(vect_recog_mask_conversion_pattern)\n\t(vect_try_gather_scatter_pattern): Likewise.\n\nFrom-SVN: r261790", "tree": {"sha": "5c9961ef7e3bed4f2e2291bd90d1a150667c5837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9961ef7e3bed4f2e2291bd90d1a150667c5837"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49d8df1b95ac68fee5420a4ad7a0cab006302e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d8df1b95ac68fee5420a4ad7a0cab006302e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d8df1b95ac68fee5420a4ad7a0cab006302e0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d8df1b95ac68fee5420a4ad7a0cab006302e0e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "259273074e86ec82c73a4420c102912de6baeabd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259273074e86ec82c73a4420c102912de6baeabd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/259273074e86ec82c73a4420c102912de6baeabd"}], "stats": {"total": 148, "additions": 49, "deletions": 99}, "files": [{"sha": "384c6ad49f63ccbb192990a2257899b655ea52c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d8df1b95ac68fee5420a4ad7a0cab006302e0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d8df1b95ac68fee5420a4ad7a0cab006302e0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49d8df1b95ac68fee5420a4ad7a0cab006302e0e", "patch": "@@ -1,3 +1,15 @@\n+2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-patterns.c (vect_pattern_detected): New function.\n+\t(vect_recog_dot_prod_patternm, vect_recog_sad_pattern)\n+\t(vect_recog_widen_mult_pattern, vect_recog_widen_sum_pattern)\n+\t(vect_recog_over_widening_pattern, vect_recog_widen_shift_pattern\n+\t(vect_recog_rotate_pattern, vect_recog_vector_vector_shift_pattern)\n+\t(vect_recog_mult_pattern, vect_recog_divmod_pattern)\n+\t(vect_recog_mixed_size_cond_pattern, vect_recog_bool_pattern)\n+\t(vect_recog_mask_conversion_pattern)\n+\t(vect_try_gather_scatter_pattern): Likewise.\n+\n 2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-patterns.c (vect_get_internal_def): New function."}, {"sha": "3d7f866fe375364e41e866fec957ee3b2b821e76", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 37, "deletions": 99, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d8df1b95ac68fee5420a4ad7a0cab006302e0e/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d8df1b95ac68fee5420a4ad7a0cab006302e0e/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=49d8df1b95ac68fee5420a4ad7a0cab006302e0e", "patch": "@@ -107,6 +107,19 @@ static vect_recog_func vect_vect_recog_func_ptrs[NUM_PATTERNS] = {\n       {\tvect_recog_mask_conversion_pattern, \"mask_conversion\" }\n };\n \n+/* Report that we've found an instance of pattern PATTERN in\n+   statement STMT.  */\n+\n+static void\n+vect_pattern_detected (const char *name, gimple *stmt)\n+{\n+  if (dump_enabled_p ())\n+    {\n+      dump_printf_loc (MSG_NOTE, vect_location, \"%s: detected: \", name);\n+      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n+    }\n+}\n+\n static inline void\n append_pattern_def_seq (stmt_vec_info stmt_info, gimple *stmt)\n {\n@@ -432,22 +445,16 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_in,\n \treturn NULL;\n     }\n \n+  vect_pattern_detected (\"vect_recog_dot_prod_pattern\", last_stmt);\n+\n   half_type = TREE_TYPE (oprnd00);\n   *type_in = half_type;\n   *type_out = type;\n \n-  /* Pattern detected. Create a stmt to be used to replace the pattern: */\n   var = vect_recog_temp_ssa_var (type, NULL);\n   pattern_stmt = gimple_build_assign (var, DOT_PROD_EXPR,\n \t\t\t\t      oprnd00, oprnd01, oprnd1);\n \n-  if (dump_enabled_p ())\n-    {\n-      dump_printf_loc (MSG_NOTE, vect_location,\n-                       \"vect_recog_dot_prod_pattern: detected: \");\n-      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-    }\n-\n   return pattern_stmt;\n }\n \n@@ -632,21 +639,15 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n       || TYPE_PRECISION (sum_type) < TYPE_PRECISION (half_type0) * 2)\n     return NULL;\n \n+  vect_pattern_detected (\"vect_recog_sad_pattern\", last_stmt);\n+\n   *type_in = TREE_TYPE (sad_oprnd0);\n   *type_out = sum_type;\n \n-  /* Pattern detected. Create a stmt to be used to replace the pattern: */\n   tree var = vect_recog_temp_ssa_var (sum_type, NULL);\n   gimple *pattern_stmt = gimple_build_assign (var, SAD_EXPR, sad_oprnd0,\n \t\t\t\t\t      sad_oprnd1, plus_oprnd1);\n \n-  if (dump_enabled_p ())\n-    {\n-      dump_printf_loc (MSG_NOTE, vect_location,\n-                       \"vect_recog_sad_pattern: detected: \");\n-      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-    }\n-\n   return pattern_stmt;\n }\n \n@@ -919,9 +920,7 @@ vect_recog_widen_mult_pattern (vec<gimple *> *stmts,\n \t       TYPE_UNSIGNED (type));\n \n   /* Pattern detected.  */\n-  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-                     \"vect_recog_widen_mult_pattern: detected:\\n\");\n+  vect_pattern_detected (\"vect_recog_widen_mult_pattern\", last_stmt);\n \n   /* Check target support  */\n   vectype = get_vectype_for_scalar_type (half_type0);\n@@ -970,9 +969,6 @@ vect_recog_widen_mult_pattern (vec<gimple *> *stmts,\n \t\t\t\t\t  gimple_assign_lhs (pattern_stmt));\n     }\n \n-  if (dump_enabled_p ())\n-    dump_gimple_stmt_loc (MSG_NOTE, vect_location, TDF_SLIM, pattern_stmt, 0);\n-\n   stmts->safe_push (last_stmt);\n   return pattern_stmt;\n }\n@@ -1230,20 +1226,15 @@ vect_recog_widen_sum_pattern (vec<gimple *> *stmts, tree *type_in,\n      return NULL;\n \n   oprnd0 = gimple_assign_rhs1 (stmt);\n+\n+  vect_pattern_detected (\"vect_recog_widen_sum_pattern\", last_stmt);\n+\n   *type_in = half_type;\n   *type_out = type;\n \n-  /* Pattern detected. Create a stmt to be used to replace the pattern: */\n   var = vect_recog_temp_ssa_var (type, NULL);\n   pattern_stmt = gimple_build_assign (var, WIDEN_SUM_EXPR, oprnd0, oprnd1);\n \n-  if (dump_enabled_p ())\n-    {\n-      dump_printf_loc (MSG_NOTE, vect_location,\n-                       \"vect_recog_widen_sum_pattern: detected: \");\n-      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-    }\n-\n   return pattern_stmt;\n }\n \n@@ -1603,12 +1594,7 @@ vect_recog_over_widening_pattern (vec<gimple *> *stmts,\n     return NULL;\n \n   /* Pattern detected.  */\n-  if (dump_enabled_p ())\n-    {\n-      dump_printf_loc (MSG_NOTE, vect_location,\n-                       \"vect_recog_over_widening_pattern: detected: \");\n-      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-    }\n+  vect_pattern_detected (\"vect_recog_over_widening_pattern\", stmts->last ());\n \n   return pattern_stmt;\n }\n@@ -1740,9 +1726,7 @@ vect_recog_widen_shift_pattern (vec<gimple *> *stmts,\n     return NULL;\n \n   /* Pattern detected.  */\n-  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-                     \"vect_recog_widen_shift_pattern: detected:\\n\");\n+  vect_pattern_detected (\"vect_recog_widen_shift_pattern\", last_stmt);\n \n   /* Check target support.  */\n   vectype = get_vectype_for_scalar_type (half_type0);\n@@ -1773,9 +1757,6 @@ vect_recog_widen_shift_pattern (vec<gimple *> *stmts,\n       STMT_VINFO_VECTYPE (new_stmt_info) = vectype;\n     }\n \n-  if (dump_enabled_p ())\n-    dump_gimple_stmt_loc (MSG_NOTE, vect_location, TDF_SLIM, pattern_stmt, 0);\n-\n   stmts->safe_push (last_stmt);\n   return pattern_stmt;\n }\n@@ -2010,17 +1991,12 @@ vect_recog_rotate_pattern (vec<gimple *> *stmts, tree *type_in, tree *type_out)\n   append_pattern_def_seq (stmt_vinfo, def_stmt);\n \n   /* Pattern detected.  */\n-  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"vect_recog_rotate_pattern: detected:\\n\");\n+  vect_pattern_detected (\"vect_recog_rotate_pattern\", last_stmt);\n \n   /* Pattern supported.  Create a stmt to be used to replace the pattern.  */\n   var = vect_recog_temp_ssa_var (type, NULL);\n   pattern_stmt = gimple_build_assign (var, BIT_IOR_EXPR, var1, var2);\n \n-  if (dump_enabled_p ())\n-    dump_gimple_stmt_loc (MSG_NOTE, vect_location, TDF_SLIM, pattern_stmt, 0);\n-\n   stmts->safe_push (last_stmt);\n   return pattern_stmt;\n }\n@@ -2153,17 +2129,12 @@ vect_recog_vector_vector_shift_pattern (vec<gimple *> *stmts,\n     }\n \n   /* Pattern detected.  */\n-  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-                     \"vect_recog_vector_vector_shift_pattern: detected:\\n\");\n+  vect_pattern_detected (\"vect_recog_vector_vector_shift_pattern\", last_stmt);\n \n   /* Pattern supported.  Create a stmt to be used to replace the pattern.  */\n   var = vect_recog_temp_ssa_var (TREE_TYPE (oprnd0), NULL);\n   pattern_stmt = gimple_build_assign (var, rhs_code, oprnd0, def);\n \n-  if (dump_enabled_p ())\n-    dump_gimple_stmt_loc (MSG_NOTE, vect_location, TDF_SLIM, pattern_stmt, 0);\n-\n   stmts->safe_push (last_stmt);\n   return pattern_stmt;\n }\n@@ -2530,13 +2501,7 @@ vect_recog_mult_pattern (vec<gimple *> *stmts,\n     return NULL;\n \n   /* Pattern detected.  */\n-  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"vect_recog_mult_pattern: detected:\\n\");\n-\n-  if (dump_enabled_p ())\n-    dump_gimple_stmt_loc (MSG_NOTE, vect_location, TDF_SLIM,\n-\t\t\t  pattern_stmt,0);\n+  vect_pattern_detected (\"vect_recog_mult_pattern\", last_stmt);\n \n   stmts->safe_push (last_stmt);\n   *type_in = vectype;\n@@ -2652,9 +2617,7 @@ vect_recog_divmod_pattern (vec<gimple *> *stmts,\n \treturn NULL;\n \n       /* Pattern detected.  */\n-      if (dump_enabled_p ())\n-        dump_printf_loc (MSG_NOTE, vect_location,\n-                         \"vect_recog_divmod_pattern: detected:\\n\");\n+      vect_pattern_detected (\"vect_recog_divmod_pattern\", last_stmt);\n \n       cond = build2 (LT_EXPR, boolean_type_node, oprnd0,\n \t\t     build_int_cst (itype, 0));\n@@ -2738,10 +2701,6 @@ vect_recog_divmod_pattern (vec<gimple *> *stmts,\n \t\t\t\t   signmask);\n \t}\n \n-      if (dump_enabled_p ())\n-\tdump_gimple_stmt_loc (MSG_NOTE, vect_location, TDF_SLIM, pattern_stmt,\n-                              0);\n-\n       stmts->safe_push (last_stmt);\n \n       *type_in = vectype;\n@@ -2992,12 +2951,7 @@ vect_recog_divmod_pattern (vec<gimple *> *stmts,\n     }\n \n   /* Pattern detected.  */\n-  if (dump_enabled_p ())\n-    {\n-      dump_printf_loc (MSG_NOTE, vect_location,\n-                       \"vect_recog_divmod_pattern: detected: \");\n-      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-    }\n+  vect_pattern_detected (\"vect_recog_divmod_pattern\", last_stmt);\n \n   stmts->safe_push (last_stmt);\n \n@@ -3157,9 +3111,7 @@ vect_recog_mixed_size_cond_pattern (vec<gimple *> *stmts, tree *type_in,\n   *type_in = vecitype;\n   *type_out = vectype;\n \n-  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-                     \"vect_recog_mixed_size_cond_pattern: detected:\\n\");\n+  vect_pattern_detected (\"vect_recog_mixed_size_cond_pattern\", last_stmt);\n \n   return pattern_stmt;\n }\n@@ -3729,9 +3681,7 @@ vect_recog_bool_pattern (vec<gimple *> *stmts, tree *type_in,\n       *type_out = vectype;\n       *type_in = vectype;\n       stmts->safe_push (last_stmt);\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_NOTE, vect_location,\n-                         \"vect_recog_bool_pattern: detected:\\n\");\n+      vect_pattern_detected (\"vect_recog_bool_pattern\", last_stmt);\n \n       return pattern_stmt;\n     }\n@@ -3770,9 +3720,7 @@ vect_recog_bool_pattern (vec<gimple *> *stmts, tree *type_in,\n       *type_out = vectype;\n       *type_in = vectype;\n       stmts->safe_push (last_stmt);\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_NOTE, vect_location,\n-                         \"vect_recog_bool_pattern: detected:\\n\");\n+      vect_pattern_detected (\"vect_recog_bool_pattern\", last_stmt);\n \n       return pattern_stmt;\n     }\n@@ -3829,9 +3777,8 @@ vect_recog_bool_pattern (vec<gimple *> *stmts, tree *type_in,\n       *type_out = vectype;\n       *type_in = vectype;\n       stmts->safe_push (last_stmt);\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_NOTE, vect_location,\n-                         \"vect_recog_bool_pattern: detected:\\n\");\n+      vect_pattern_detected (\"vect_recog_bool_pattern\", last_stmt);\n+\n       return pattern_stmt;\n     }\n   else\n@@ -3966,9 +3913,7 @@ vect_recog_mask_conversion_pattern (vec<gimple *> *stmts, tree *type_in,\n       *type_out = vectype1;\n       *type_in = vectype1;\n       stmts->safe_push (last_stmt);\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_NOTE, vect_location,\n-                         \"vect_recog_mask_conversion_pattern: detected:\\n\");\n+      vect_pattern_detected (\"vect_recog_mask_conversion_pattern\", last_stmt);\n \n       return pattern_stmt;\n     }\n@@ -4092,9 +4037,7 @@ vect_recog_mask_conversion_pattern (vec<gimple *> *stmts, tree *type_in,\n       *type_out = vectype1;\n       *type_in = vectype1;\n       stmts->safe_push (last_stmt);\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_NOTE, vect_location,\n-                         \"vect_recog_mask_conversion_pattern: detected:\\n\");\n+      vect_pattern_detected (\"vect_recog_mask_conversion_pattern\", last_stmt);\n \n       return pattern_stmt;\n     }\n@@ -4140,9 +4083,7 @@ vect_recog_mask_conversion_pattern (vec<gimple *> *stmts, tree *type_in,\n   *type_out = vectype1;\n   *type_in = vectype1;\n   stmts->safe_push (last_stmt);\n-  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"vect_recog_mask_conversion_pattern: detected:\\n\");\n+  vect_pattern_detected (\"vect_recog_mask_conversion_pattern\", last_stmt);\n \n   return pattern_stmt;\n }\n@@ -4324,10 +4265,7 @@ vect_try_gather_scatter_pattern (gimple *stmt, stmt_vec_info last_stmt_info,\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n   *type_out = vectype;\n   *type_in = vectype;\n-\n-  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"gather/scatter pattern detected:\\n\");\n+  vect_pattern_detected (\"gather/scatter pattern\", stmt);\n \n   return pattern_stmt;\n }"}]}