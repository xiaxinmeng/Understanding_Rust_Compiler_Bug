{"sha": "3e87f2d6dd6a38e650b77445a38c9ebbe7988e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U4N2YyZDZkZDZhMzhlNjUwYjc3NDQ1YTM4YzllYmJlNzk4OGUyMw==", "commit": {"author": {"name": "Shiva Chen", "email": "shiva0217@gmail.com", "date": "2015-04-21T05:23:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-04-21T05:23:08Z"}, "message": "re PR rtl-optimization/64916 (ira.c update_equiv_regs patch causes gcc/testsuite/gcc.target/arm/pr43920-2.c regression)\n\n       PR rtl-optimization/64916\n        * cfgcleanup.c (values_equal_p): New function.\n        (can_replace_by): Use it.\n\nFrom-SVN: r222256", "tree": {"sha": "d8d39030fcd0c45eb9bf05c00a9256b0f1167388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8d39030fcd0c45eb9bf05c00a9256b0f1167388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e87f2d6dd6a38e650b77445a38c9ebbe7988e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e87f2d6dd6a38e650b77445a38c9ebbe7988e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e87f2d6dd6a38e650b77445a38c9ebbe7988e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e87f2d6dd6a38e650b77445a38c9ebbe7988e23/comments", "author": {"login": "ShivaChen", "id": 32083954, "node_id": "MDQ6VXNlcjMyMDgzOTU0", "avatar_url": "https://avatars.githubusercontent.com/u/32083954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShivaChen", "html_url": "https://github.com/ShivaChen", "followers_url": "https://api.github.com/users/ShivaChen/followers", "following_url": "https://api.github.com/users/ShivaChen/following{/other_user}", "gists_url": "https://api.github.com/users/ShivaChen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShivaChen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShivaChen/subscriptions", "organizations_url": "https://api.github.com/users/ShivaChen/orgs", "repos_url": "https://api.github.com/users/ShivaChen/repos", "events_url": "https://api.github.com/users/ShivaChen/events{/privacy}", "received_events_url": "https://api.github.com/users/ShivaChen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fadf02a4e0daef37ab5cc8a14e66ff4426e21428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fadf02a4e0daef37ab5cc8a14e66ff4426e21428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fadf02a4e0daef37ab5cc8a14e66ff4426e21428"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "47089f366c4dc0d0f150934f5a73309c7e865199", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e87f2d6dd6a38e650b77445a38c9ebbe7988e23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e87f2d6dd6a38e650b77445a38c9ebbe7988e23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e87f2d6dd6a38e650b77445a38c9ebbe7988e23", "patch": "@@ -1,3 +1,9 @@\n+2015-04-20  Shiva Chen  <shiva0217@gmail.com>\n+\n+\tPR rtl-optimization/64916\n+\t* cfgcleanup.c (values_equal_p): New function.\n+\t(can_replace_by): Use it.\n+\n 2015-04-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/65801"}, {"sha": "93f682f6847817facb81d4b073231c3ecc93c206", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e87f2d6dd6a38e650b77445a38c9ebbe7988e23/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e87f2d6dd6a38e650b77445a38c9ebbe7988e23/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=3e87f2d6dd6a38e650b77445a38c9ebbe7988e23", "patch": "@@ -1038,6 +1038,45 @@ equal_different_set_p (rtx p1, rtx s1, rtx p2, rtx s2)\n   return true;\n }\n \n+\n+/* NOTE1 is the REG_EQUAL note, if any, attached to an insn\n+   that is a single_set with a SET_SRC of SRC1.  Similarly\n+   for NOTE2/SRC2.\n+\n+   So effectively NOTE1/NOTE2 are an alternate form of \n+   SRC1/SRC2 respectively.\n+\n+   Return nonzero if SRC1 or NOTE1 has the same constant\n+   integer value as SRC2 or NOTE2.   Else return zero.  */\n+static int\n+values_equal_p (rtx note1, rtx note2, rtx src1, rtx src2)\n+{\n+  if (note1\n+      && note2\n+      && CONST_INT_P (XEXP (note1, 0))\n+      && rtx_equal_p (XEXP (note1, 0), XEXP (note2, 0)))\n+    return 1;\n+\n+  if (!note1\n+      && !note2\n+      && CONST_INT_P (src1)\n+      && CONST_INT_P (src2)\n+      && rtx_equal_p (src1, src2))\n+    return 1;\n+\n+  if (note1\n+      && CONST_INT_P (src2)\n+      && rtx_equal_p (XEXP (note1, 0), src2))\n+    return 1;\n+\n+  if (note2\n+      && CONST_INT_P (src1)\n+      && rtx_equal_p (XEXP (note2, 0), src1))\n+    return 1;\n+\n+  return 0;\n+}\n+\n /* Examine register notes on I1 and I2 and return:\n    - dir_forward if I1 can be replaced by I2, or\n    - dir_backward if I2 can be replaced by I1, or\n@@ -1066,8 +1105,11 @@ can_replace_by (rtx_insn *i1, rtx_insn *i2)\n      set dest to the same value.  */\n   note1 = find_reg_equal_equiv_note (i1);\n   note2 = find_reg_equal_equiv_note (i2);\n-  if (!note1 || !note2 || !rtx_equal_p (XEXP (note1, 0), XEXP (note2, 0))\n-      || !CONST_INT_P (XEXP (note1, 0)))\n+\n+  src1 = SET_SRC (s1);\n+  src2 = SET_SRC (s2);\n+\n+  if (!values_equal_p (note1, note2, src1, src2))\n     return dir_none;\n \n   if (!equal_different_set_p (PATTERN (i1), s1, PATTERN (i2), s2))\n@@ -1079,8 +1121,6 @@ can_replace_by (rtx_insn *i1, rtx_insn *i2)\n        (set (dest) (reg))\n      because we don't know if the reg is live and has the same value at the\n      location of replacement.  */\n-  src1 = SET_SRC (s1);\n-  src2 = SET_SRC (s2);\n   c1 = CONST_INT_P (src1);\n   c2 = CONST_INT_P (src2);\n   if (c1 && c2)"}]}