{"sha": "7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E2ZWQ3NGRiNDlmZGVjOGVlMWVhYmU5N2NmY2RlNTNhMDNkOWZhMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-09-27T01:20:24Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-09-27T01:20:24Z"}, "message": "vsx.md (peephole for optimizing move SF to GPR): Adjust code to eliminate needing to do the shift right 32-bits operation after...\n\n[gcc]\n2017-09-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/vsx.md (peephole for optimizing move SF to GPR):\n\tAdjust code to eliminate needing to do the shift right 32-bits\n\toperation after XSCVDPSPN.\n\n[gcc/testsuite]\n2017-09-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/pr71977-1.c: Update test to know that we\n\tdon't generate a 32-bit shift after doing XSCVDPSPN.\n\t* gcc.target/powerpc/direct-move-float1.c: Likewise.\n\t* gcc.target/powerpc/direct-move-float3.c: New test.\n\nFrom-SVN: r253223", "tree": {"sha": "addb181ae9e1849c56f2074c3e7768d5d69738fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/addb181ae9e1849c56f2074c3e7768d5d69738fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/comments", "author": null, "committer": null, "parents": [{"sha": "f305b2321e7130e32d7a2b924569754f58b8c3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f305b2321e7130e32d7a2b924569754f58b8c3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f305b2321e7130e32d7a2b924569754f58b8c3f3"}], "stats": {"total": 101, "additions": 70, "deletions": 31}, "files": [{"sha": "340e1e8855db2893ccdebed5194ee094c319587d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "patch": "@@ -1,3 +1,9 @@\n+2017-09-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/vsx.md (peephole for optimizing move SF to GPR):\n+\tAdjust code to eliminate needing to do the shift right 32-bits\n+\toperation after XSCVDPSPN.\n+\n 2017-09-26  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* match.pd ((X / Y) == 0 -> X < Y): New pattern."}, {"sha": "35be5dead640b5277847b4d7ee3f53e09ca27a54", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "patch": "@@ -4797,9 +4797,10 @@\n    (SFBOOL_SHL_D\t\t 7)\t\t;; shift left dest\n    (SFBOOL_SHL_A\t\t 8)\t\t;; shift left arg\n    (SFBOOL_MTVSR_D\t\t 9)\t\t;; move to vecter dest\n-   (SFBOOL_BOOL_A_DI\t\t10)\t\t;; SFBOOL_BOOL_A1/A2 as DImode\n-   (SFBOOL_TMP_VSX_DI\t\t11)\t\t;; SFBOOL_TMP_VSX as DImode\n-   (SFBOOL_MTVSR_D_V4SF\t\t12)])\t\t;; SFBOOL_MTVSRD_D as V4SFmode\n+   (SFBOOL_MFVSR_A_V4SF\t\t10)\t\t;; SFBOOL_MFVSR_A as V4SFmode\n+   (SFBOOL_BOOL_A_DI\t\t11)\t\t;; SFBOOL_BOOL_A1/A2 as DImode\n+   (SFBOOL_TMP_VSX_DI\t\t12)\t\t;; SFBOOL_TMP_VSX as DImode\n+   (SFBOOL_MTVSR_D_V4SF\t\t13)])\t\t;; SFBOOL_MTVSRD_D as V4SFmode\n \n ;; Attempt to optimize some common GLIBC operations using logical operations to\n ;; pick apart SFmode operations.  For example, there is code from e_powf.c\n@@ -4837,29 +4838,22 @@\n ;;\n ;; (set (reg:DI reg3) (unspec:DI [(reg:V4SF reg2)] UNSPEC_P8V_RELOAD_FROM_VSX))\n ;;\n-;; (set (reg:DI reg3) (lshiftrt:DI (reg:DI reg3) (const_int 32)))\n+;; (set (reg:DI reg4) (and:DI (reg:DI reg3) (reg:DI reg3)))\n ;;\n-;; (set (reg:DI reg5) (and:DI (reg:DI reg3) (reg:DI reg4)))\n+;; (set (reg:DI reg5) (ashift:DI (reg:DI reg4) (const_int 32)))\n ;;\n-;; (set (reg:DI reg6) (ashift:DI (reg:DI reg5) (const_int 32)))\n+;; (set (reg:SF reg6) (unspec:SF [(reg:DI reg5)] UNSPEC_P8V_MTVSRD))\n ;;\n-;; (set (reg:SF reg7) (unspec:SF [(reg:DI reg6)] UNSPEC_P8V_MTVSRD))\n-;;\n-;; (set (reg:SF reg7) (unspec:SF [(reg:SF reg7)] UNSPEC_VSX_CVSPDPN))\n+;; (set (reg:SF reg6) (unspec:SF [(reg:SF reg6)] UNSPEC_VSX_CVSPDPN))\n \n (define_peephole2\n   [(match_scratch:DI SFBOOL_TMP_GPR \"r\")\n    (match_scratch:V4SF SFBOOL_TMP_VSX \"wa\")\n \n-   ;; MFVSRD\n+   ;; MFVSRWZ (aka zero_extend)\n    (set (match_operand:DI SFBOOL_MFVSR_D \"int_reg_operand\")\n-\t(unspec:DI [(match_operand:V4SF SFBOOL_MFVSR_A \"vsx_register_operand\")]\n-\t\t   UNSPEC_P8V_RELOAD_FROM_VSX))\n-\n-   ;; SRDI\n-   (set (match_dup SFBOOL_MFVSR_D)\n-\t(lshiftrt:DI (match_dup SFBOOL_MFVSR_D)\n-\t\t     (const_int 32)))\n+\t(zero_extend:DI\n+\t (match_operand:SI SFBOOL_MFVSR_A \"vsx_register_operand\")))\n \n    ;; AND/IOR/XOR operation on int\n    (set (match_operand:SI SFBOOL_BOOL_D \"int_reg_operand\")\n@@ -4884,15 +4878,15 @@\n    && (REG_P (operands[SFBOOL_BOOL_A2])\n        || CONST_INT_P (operands[SFBOOL_BOOL_A2]))\n    && (REGNO (operands[SFBOOL_BOOL_D]) == REGNO (operands[SFBOOL_MFVSR_D])\n-       || peep2_reg_dead_p (3, operands[SFBOOL_MFVSR_D]))\n+       || peep2_reg_dead_p (2, operands[SFBOOL_MFVSR_D]))\n    && (REGNO (operands[SFBOOL_MFVSR_D]) == REGNO (operands[SFBOOL_BOOL_A1])\n        || (REG_P (operands[SFBOOL_BOOL_A2])\n \t   && REGNO (operands[SFBOOL_MFVSR_D])\n \t\t== REGNO (operands[SFBOOL_BOOL_A2])))\n    && REGNO (operands[SFBOOL_BOOL_D]) == REGNO (operands[SFBOOL_SHL_A])\n    && (REGNO (operands[SFBOOL_SHL_D]) == REGNO (operands[SFBOOL_BOOL_D])\n-       || peep2_reg_dead_p (4, operands[SFBOOL_BOOL_D]))\n-   && peep2_reg_dead_p (5, operands[SFBOOL_SHL_D])\"\n+       || peep2_reg_dead_p (3, operands[SFBOOL_BOOL_D]))\n+   && peep2_reg_dead_p (4, operands[SFBOOL_SHL_D])\"\n   [(set (match_dup SFBOOL_TMP_GPR)\n \t(ashift:DI (match_dup SFBOOL_BOOL_A_DI)\n \t\t   (const_int 32)))\n@@ -4901,12 +4895,13 @@\n \t(match_dup SFBOOL_TMP_GPR))\n \n    (set (match_dup SFBOOL_MTVSR_D_V4SF)\n-\t(and_ior_xor:V4SF (match_dup SFBOOL_MFVSR_A)\n+\t(and_ior_xor:V4SF (match_dup SFBOOL_MFVSR_A_V4SF)\n \t\t\t  (match_dup SFBOOL_TMP_VSX)))]\n {\n   rtx bool_a1 = operands[SFBOOL_BOOL_A1];\n   rtx bool_a2 = operands[SFBOOL_BOOL_A2];\n   int regno_mfvsr_d = REGNO (operands[SFBOOL_MFVSR_D]);\n+  int regno_mfvsr_a = REGNO (operands[SFBOOL_MFVSR_A]);\n   int regno_tmp_vsx = REGNO (operands[SFBOOL_TMP_VSX]);\n   int regno_mtvsr_d = REGNO (operands[SFBOOL_MTVSR_D]);\n \n@@ -4925,6 +4920,7 @@\n       operands[SFBOOL_BOOL_A_DI] = gen_rtx_REG (DImode, regno_bool_a);\n     }\n \n+  operands[SFBOOL_MFVSR_A_V4SF] = gen_rtx_REG (V4SFmode, regno_mfvsr_a);\n   operands[SFBOOL_TMP_VSX_DI] = gen_rtx_REG (DImode, regno_tmp_vsx);\n   operands[SFBOOL_MTVSR_D_V4SF] = gen_rtx_REG (V4SFmode, regno_mtvsr_d);\n })"}, {"sha": "d4f431339c09b32b227de367dc6b7ccafd483acf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "patch": "@@ -1,3 +1,10 @@\n+2017-09-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pr71977-1.c: Update test to know that we\n+\tdon't generate a 32-bit shift after doing XSCVDPSPN.\n+\t* gcc.target/powerpc/direct-move-float1.c: Likewise.\n+\t* gcc.target/powerpc/direct-move-float3.c: New test.\n+\n 2017-09-26  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* gcc.dg/tree-ssa/cmpdiv.c: New test."}, {"sha": "f5cff6c7c0c2eec99e5f49beef1d0e409a194789", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-float1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float1.c?ref=7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "patch": "@@ -4,10 +4,10 @@\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n /* { dg-options \"-mcpu=power8 -O2\" } */\n-/* { dg-final { scan-assembler \"mtvsrd\" } } */\n-/* { dg-final { scan-assembler \"mfvsrd\" } } */\n-/* { dg-final { scan-assembler \"xscvdpspn\" } } */\n-/* { dg-final { scan-assembler \"xscvspdpn\" } } */\n+/* { dg-final { scan-assembler {\\mmtvsrd\\M}    } } */\n+/* { dg-final { scan-assembler {\\mmfvsrwz\\M}   } } */\n+/* { dg-final { scan-assembler {\\mxscvdpspn\\M} } } */\n+/* { dg-final { scan-assembler {\\mxscvspdpn\\M} } } */\n \n /* Check code generation for direct move for float types.  */\n "}, {"sha": "6e294aabdf792fe3c93d6ec2f775e24d22670bee", "filename": "gcc/testsuite/gcc.target/powerpc/direct-move-float3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdirect-move-float3.c?ref=7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target { powerpc*-*-linux* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n+/* { dg-skip-if \"\" { powerpc*-*-*spe* } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+/* Test that we generate XSCVDPSP instead of FRSP and XSCVDPSPN when we combine\n+   a round from double to float and moving the float value to a GPR.  */\n+\n+union u {\n+  float f;\n+  unsigned int ui;\n+  int si;\n+};\n+\n+unsigned int\n+ui_d (double d)\n+{\n+  union u x;\n+  x.f = d;\n+  return x.ui;\n+}\n+\n+/* { dg-final { scan-assembler     {\\mmfvsrwz\\M}   } } */\n+/* { dg-final { scan-assembler     {\\mxscvdpsp\\M}  } } */\n+/* { dg-final { scan-assembler-not {\\mmfvsrd\\M}    } } */\n+/* { dg-final { scan-assembler-not {\\mmtvsrwz\\M}   } } */\n+/* { dg-final { scan-assembler-not {\\mmtvsrd\\M}    } } */\n+/* { dg-final { scan-assembler-not {\\mxscvdpspn\\M} } } */\n+/* { dg-final { scan-assembler-not {\\msrdi\\M}      } } */"}, {"sha": "65dd3ab6cf4c21fb787e7c064184b64157801e30", "filename": "gcc/testsuite/gcc.target/powerpc/pr71977-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71977-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71977-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71977-1.c?ref=7a6ed74db49fdec8ee1eabe97cfcde53a03d9fa3", "patch": "@@ -23,9 +23,9 @@ mask_and_float_var (float f, uint32_t mask)\n   return u.value;\n }\n \n-/* { dg-final { scan-assembler     \"\\[ \\t\\]xxland \" } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]and \"    } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]mfvsrd \" } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]stxv\"    } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]lxv\"     } } */\n-/* { dg-final { scan-assembler-not \"\\[ \\t\\]srdi \"   } } */\n+/* { dg-final { scan-assembler     {\\mxxland\\M}  } } */\n+/* { dg-final { scan-assembler-not {\\mand\\M}     } } */\n+/* { dg-final { scan-assembler-not {\\mmfvsrd\\M}  } } */\n+/* { dg-final { scan-assembler-not {\\mstxv\\M}    } } */\n+/* { dg-final { scan-assembler-not {\\mlxv\\M}     } } */\n+/* { dg-final { scan-assembler-not {\\msrdi\\M}    } } */"}]}