{"sha": "f2b8b8adbae9968ac30742498a21a92ac70523ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJiOGI4YWRiYWU5OTY4YWMzMDc0MjQ5OGEyMWE5MmFjNzA1MjNmZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-12-01T20:19:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-12-01T20:19:07Z"}, "message": "PR c++/79228 - extensions hide C++14 complex literal operators\n\nlibcpp/\n\t* expr.c (interpret_float_suffix): Ignore 'i' in C++14 and up.\n\t(interpret_int_suffix): Likewise.\ngcc/cp/\n\t* parser.c (cp_parser_userdef_numeric_literal): Be helpful about\n\t'i' in C++14 and up.\n\nFrom-SVN: r255335", "tree": {"sha": "2f9f105e39188cba5d4687ec6140a48fec7e11f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f9f105e39188cba5d4687ec6140a48fec7e11f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2b8b8adbae9968ac30742498a21a92ac70523ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b8b8adbae9968ac30742498a21a92ac70523ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b8b8adbae9968ac30742498a21a92ac70523ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b8b8adbae9968ac30742498a21a92ac70523ff/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0951904f491340404284480603f932bd551aec80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0951904f491340404284480603f932bd551aec80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0951904f491340404284480603f932bd551aec80"}], "stats": {"total": 187, "additions": 175, "deletions": 12}, "files": [{"sha": "89680a20d6bf9fb8753da518b274488b80db367c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -1,3 +1,9 @@\n+2017-12-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/79228 - extensions hide C++14 complex literal operators\n+\t* parser.c (cp_parser_userdef_numeric_literal): Be helpful about\n+\t'i' in C++14 and up.\n+\n 2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_new): Don't clear cilk_simd_fn_info."}, {"sha": "6e4c24362c6e6f335605c62e7c50ede5f1eb7a7a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -4397,11 +4397,75 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n \n   release_tree_vector (args);\n \n-  error (\"unable to find numeric literal operator %qD\", name);\n-  if (!cpp_get_options (parse_in)->ext_numeric_literals)\n-    inform (token->location, \"use -std=gnu++11 or -fext-numeric-literals \"\n+  /* In C++14 the standard library defines complex number suffixes that\n+     conflict with GNU extensions.  Prefer them if <complex> is #included.  */\n+  bool ext = cpp_get_options (parse_in)->ext_numeric_literals;\n+  bool i14 = (cxx_dialect > cxx11\n+\t      && (id_equal (suffix_id, \"i\")\n+\t\t  || id_equal (suffix_id, \"if\")\n+\t\t  || id_equal (suffix_id, \"il\")));\n+  diagnostic_t kind = DK_ERROR;\n+  int opt = 0;\n+\n+  if (i14 && ext)\n+    {\n+      tree cxlit = lookup_qualified_name (std_node,\n+\t\t\t\t\t  get_identifier (\"complex_literals\"),\n+\t\t\t\t\t  0, false, false);\n+      if (cxlit == error_mark_node)\n+\t{\n+\t  /* No <complex>, so pedwarn and use GNU semantics.  */\n+\t  kind = DK_PEDWARN;\n+\t  opt = OPT_Wpedantic;\n+\t}\n+    }\n+\n+  bool complained\n+    = emit_diagnostic (kind, input_location, opt,\n+\t\t       \"unable to find numeric literal operator %qD\", name);\n+\n+  if (!complained)\n+    /* Don't inform either.  */;\n+  else if (i14)\n+    {\n+      inform (token->location, \"add %<using namespace std::complex_literals%> \"\n+\t      \"(from <complex>) to enable the C++14 user-defined literal \"\n+\t      \"suffixes\");\n+      if (ext)\n+\tinform (token->location, \"or use %<j%> instead of %<i%> for the \"\n+\t\t\"GNU built-in suffix\");\n+    }\n+  else if (!ext)\n+    inform (token->location, \"use -fext-numeric-literals \"\n \t    \"to enable more built-in suffixes\");\n-  return error_mark_node;\n+\n+  if (kind == DK_ERROR)\n+    value = error_mark_node;\n+  else\n+    {\n+      /* Use the built-in semantics.  */\n+      tree type;\n+      if (id_equal (suffix_id, \"i\"))\n+\t{\n+\t  if (TREE_CODE (value) == INTEGER_CST)\n+\t    type = integer_type_node;\n+\t  else\n+\t    type = double_type_node;\n+\t}\n+      else if (id_equal (suffix_id, \"if\"))\n+\ttype = float_type_node;\n+      else /* if (id_equal (suffix_id, \"il\")) */\n+\ttype = long_double_type_node;\n+\n+      value = build_complex (build_complex_type (type),\n+\t\t\t     fold_convert (type, integer_zero_node),\n+\t\t\t     fold_convert (type, value));\n+    }\n+\n+  if (cp_parser_uncommitted_to_tentative_parse_p (parser))\n+    /* Avoid repeated diagnostics.  */\n+    token->u.value = value;\n+  return value;\n }\n \n /* Parse a user-defined string constant.  Returns a call to a user-defined"}, {"sha": "ac2db287f3a24b8ab13d15b2c1aef6078118122a", "filename": "gcc/testsuite/g++.dg/cpp0x/gnu_fext-numeric-literals.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -4,7 +4,7 @@\n //  Integer imaginary...\n \n constexpr unsigned long long\n-operator\"\" i(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" i(unsigned long long n) // { dg-warning \"shadowed by implementation\" \"\" { target c++11_only } }\n { return 4 * n + 0; }\n \n constexpr unsigned long long\n@@ -22,7 +22,7 @@ operator\"\" J(unsigned long long n) // { dg-warning \"shadowed by implementation\"\n //  Floating-point imaginary...\n \n constexpr long double\n-operator\"\" i(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" i(long double n) // { dg-warning \"shadowed by implementation\" \"\" { target c++11_only } }\n { return 4.0L * n + 0.0L; }\n \n constexpr long double"}, {"sha": "ff1e7b6d966f7809c4ebdd9186da99fa22fe00ab", "filename": "gcc/testsuite/g++.dg/cpp0x/std_fext-numeric-literals.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -4,7 +4,7 @@\n //  Integer imaginary...\n \n constexpr unsigned long long\n-operator\"\" i(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" i(unsigned long long n) // { dg-warning \"shadowed by implementation\" \"\" { target c++11_only } }\n { return 4 * n + 0; }\n \n constexpr unsigned long long\n@@ -22,7 +22,7 @@ operator\"\" J(unsigned long long n) // { dg-warning \"shadowed by implementation\"\n //  Floating-point imaginary...\n \n constexpr long double\n-operator\"\" i(long double n) // { dg-warning \"shadowed by implementation\" }\n+operator\"\" i(long double n) // { dg-warning \"shadowed by implementation\" \"\" { target c++11_only } }\n { return 4.0L * n + 0.0L; }\n \n constexpr long double"}, {"sha": "5ae2370c3ffdf226fded112ec2fa81d393881fb4", "filename": "gcc/testsuite/g++.dg/cpp1y/complex_literals1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals1.C?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/79228\n+// { dg-do compile { target c++14 } }\n+\n+#include <complex>\n+\n+int main()\n+{\n+  using namespace std::complex_literals;\n+  auto a = std::abs(0.0i);\n+}"}, {"sha": "9b61f3aa534f5f0d204773493dc47e0ffbf3fa7a", "filename": "gcc/testsuite/g++.dg/cpp1y/complex_literals1a.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals1a.C?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/79228\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n+\n+#include <complex>\n+\n+int main()\n+{\n+  auto a = std::abs(0.0i);\t// { dg-error \"literal operator\" }\n+  // { dg-message \"complex_literals\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "6dd9947dab878e4286684f5f57808af0d4500cb6", "filename": "gcc/testsuite/g++.dg/cpp1y/complex_literals2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals2.C?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/79228\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-Wpedantic\" }\n+\n+template <class,class> struct same;\n+template <class T> struct same<T,T> { };\n+\n+int main()\n+{\n+  same<decltype(0i),__complex int>{}; // { dg-warning \"literal operator\" }\n+  // { dg-message \"complex_literals\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"built-in\" \"\" { target *-*-* } .-2 }\n+\n+  same<decltype(0.0i),__complex double>{}; // { dg-warning \"literal operator\" }\n+  // { dg-message \"complex_literals\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"built-in\" \"\" { target *-*-* } .-2 }\n+\n+  same<decltype(0.0if),__complex float>{}; // { dg-warning \"literal operator\" }\n+  // { dg-message \"complex_literals\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"built-in\" \"\" { target *-*-* } .-2 }\n+\n+  same<decltype(0.0il),__complex long double>{}; // { dg-warning \"literal operator\" }\n+  // { dg-message \"complex_literals\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"built-in\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "9ee9f3fd24d6886a3a4cae0ec611a16bc31e0243", "filename": "gcc/testsuite/g++.dg/cpp1y/complex_literals2a.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcomplex_literals2a.C?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/79228\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n+\n+template <class,class> struct same;\n+template <class T> struct same<T,T> { };\n+\n+int main()\n+{\n+  same<decltype(0i),__complex int>{};\n+  same<decltype(0.0i),__complex double>{};\n+  same<decltype(0.0if),__complex float>{};\n+  same<decltype(0.0il),__complex long double>{};\n+}"}, {"sha": "ec0492185f2cb6a2c734aaa016a0652dad8bc22e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -1,3 +1,9 @@\n+2017-12-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/79228 - extensions hide C++14 complex literal operators\n+\t* expr.c (interpret_float_suffix): Ignore 'i' in C++14 and up.\n+\t(interpret_int_suffix): Likewise.\n+\n 2017-11-28  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/82050"}, {"sha": "fe9f6b0188c3b0a9019a440c83a688853fabfa54", "filename": "libcpp/expr.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b8b8adbae9968ac30742498a21a92ac70523ff/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b8b8adbae9968ac30742498a21a92ac70523ff/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=f2b8b8adbae9968ac30742498a21a92ac70523ff", "patch": "@@ -90,6 +90,8 @@ static cpp_num parse_has_include (cpp_reader *, enum include_type);\n static unsigned int\n interpret_float_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n {\n+  size_t orig_len = len;\n+  const uchar *orig_s = s;\n   size_t flags;\n   size_t f, d, l, w, q, i, fn, fnx, fn_bits;\n \n@@ -269,8 +271,20 @@ interpret_float_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n   if (fn && fn_bits == 96)\n     return 0;\n \n-  if (i && !CPP_OPTION (pfile, ext_numeric_literals))\n-    return 0;\n+  if (i)\n+    {\n+      if (!CPP_OPTION (pfile, ext_numeric_literals))\n+\treturn 0;\n+\n+      /* In C++14 and up these suffixes are in the standard library, so treat\n+\t them as user-defined literals.  */\n+      if (CPP_OPTION (pfile, cplusplus)\n+\t  && CPP_OPTION (pfile, lang) > CLK_CXX11\n+\t  && (!memcmp (orig_s, \"i\", orig_len)\n+\t      || !memcmp (orig_s, \"if\", orig_len)\n+\t      || !memcmp (orig_s, \"il\", orig_len)))\n+\treturn 0;\n+    }\n \n   if ((w || q) && !CPP_OPTION (pfile, ext_numeric_literals))\n     return 0;\n@@ -299,6 +313,7 @@ cpp_interpret_float_suffix (cpp_reader *pfile, const char *s, size_t len)\n static unsigned int\n interpret_int_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n {\n+  size_t orig_len = len;\n   size_t u, l, i;\n \n   u = l = i = 0;\n@@ -321,8 +336,20 @@ interpret_int_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n   if (l > 2 || u > 1 || i > 1)\n     return 0;\n \n-  if (i && !CPP_OPTION (pfile, ext_numeric_literals))\n-    return 0;\n+  if (i)\n+    {\n+      if (!CPP_OPTION (pfile, ext_numeric_literals))\n+\treturn 0;\n+\n+      /* In C++14 and up these suffixes are in the standard library, so treat\n+\t them as user-defined literals.  */\n+      if (CPP_OPTION (pfile, cplusplus)\n+\t  && CPP_OPTION (pfile, lang) > CLK_CXX11\n+\t  && (!memcmp (s, \"i\", orig_len)\n+\t      || !memcmp (s, \"if\", orig_len)\n+\t      || !memcmp (s, \"il\", orig_len)))\n+\treturn 0;\n+    }\n \n   return ((i ? CPP_N_IMAGINARY : 0)\n \t  | (u ? CPP_N_UNSIGNED : 0)"}]}