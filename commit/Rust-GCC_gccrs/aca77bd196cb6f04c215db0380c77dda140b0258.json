{"sha": "aca77bd196cb6f04c215db0380c77dda140b0258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNhNzdiZDE5NmNiNmYwNGMyMTVkYjAzODBjNzdkZGExNDBiMDI1OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-10-21T21:44:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-10-21T21:44:04Z"}, "message": "parse.y (operator): Set got_object from got_scope.\n\n        * parse.y (operator): Set got_object from got_scope.\n        Set looking_for_typename.\n        * decl.c (lookup_name_real): Clear val after setting from_obj.\n        Reorganize diagnostic.\n\nFrom-SVN: r37000", "tree": {"sha": "9e176ae2ca30f22b3b8c361b8ed56389f44884f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e176ae2ca30f22b3b8c361b8ed56389f44884f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aca77bd196cb6f04c215db0380c77dda140b0258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca77bd196cb6f04c215db0380c77dda140b0258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca77bd196cb6f04c215db0380c77dda140b0258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca77bd196cb6f04c215db0380c77dda140b0258/comments", "author": null, "committer": null, "parents": [{"sha": "fac045536fefda3972f6c5d42ab60431a41f6d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac045536fefda3972f6c5d42ab60431a41f6d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac045536fefda3972f6c5d42ab60431a41f6d03"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "1c66708438e2a4451ee5a2f18a5b8f7cffecba5c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca77bd196cb6f04c215db0380c77dda140b0258/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca77bd196cb6f04c215db0380c77dda140b0258/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aca77bd196cb6f04c215db0380c77dda140b0258", "patch": "@@ -1,3 +1,10 @@\n+2000-10-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* parse.y (operator): Set got_object from got_scope.\n+\tSet looking_for_typename.\n+\t* decl.c (lookup_name_real): Clear val after setting from_obj.\n+\tReorganize diagnostic.\n+\n 2000-10-20  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (walk_tree): Don't walk into default args.\n@@ -419,7 +426,7 @@ Thu Sep 14 12:10:45 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(cp_parse_init): Adjust.\n \t(do_id): If lastiddecl is NULL, do do_identifier.\n \t(operator): Save scope information.\n-\t(unoperator): new reduction. Restore scope information.\n+\t(unoperator): New reduction. Restore scope information.\n \t(operator_name): Append unoperator. Call frob_opname.\n \t* spew.c (frob_opname): Define.\n "}, {"sha": "8040137c7107cc81d47d22c16aff2cdb3bf075da", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca77bd196cb6f04c215db0380c77dda140b0258/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca77bd196cb6f04c215db0380c77dda140b0258/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=aca77bd196cb6f04c215db0380c77dda140b0258", "patch": "@@ -5946,7 +5946,10 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n       if (got_scope)\n \tgoto done;\n       else if (got_object && val)\n-\tfrom_obj = val;\n+\t{\n+\t  from_obj = val;\n+\t  val = NULL_TREE;\n+\t}\n     }\n   else\n     {\n@@ -6015,13 +6018,12 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \t{\n \t  if (looking_for_typename && TREE_CODE (from_obj) == TYPE_DECL\n \t      && TREE_CODE (val) == TYPE_DECL\n-\t      && TREE_TYPE (from_obj) != TREE_TYPE (val))\n-\t    {\n-\t      cp_pedwarn (\"lookup of `%D' in the scope of `%#T' (`%#T')\",\n-\t\t\t  name, got_object, TREE_TYPE (from_obj));\n-\t      cp_pedwarn (\"  does not match lookup in the current scope (`%#T')\",\n-\t\t\t  TREE_TYPE (val));\n-\t    }\n+\t      && ! same_type_p (TREE_TYPE (from_obj), TREE_TYPE (val)))\n+\t    cp_pedwarn (\"\\\n+lookup of `%D' in the scope of `%#T' (`%#T') \\\n+does not match lookup in the current scope (`%#T')\",\n+\t\t\tname, got_object, TREE_TYPE (from_obj),\n+\t\t\tTREE_TYPE (val));\n \n \t  /* We don't change val to from_obj if got_object depends on\n \t     template parms because that breaks implicit typename for"}, {"sha": "5e998620a67940a72411564e37818cf79f803cde", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca77bd196cb6f04c215db0380c77dda140b0258/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca77bd196cb6f04c215db0380c77dda140b0258/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=aca77bd196cb6f04c215db0380c77dda140b0258", "patch": "@@ -3745,9 +3745,15 @@ conversion_declarator:\n \n operator:\n         OPERATOR\n-        { saved_scopes = tree_cons (got_scope, got_object, saved_scopes); \n-          got_scope = NULL_TREE; got_object = NULL_TREE; }\n+        {\n+\t  saved_scopes = tree_cons (got_scope, got_object, saved_scopes);\n+\t  /* We look for conversion-type-id's in both the class and current\n+\t     scopes, just as for ID in 'ptr->ID::'.  */\n+\t  looking_for_typename = 1; got_object = got_scope;\n+          got_scope = NULL_TREE;\n+\t}\n         ;\n+\n unoperator:\n         { got_scope = TREE_PURPOSE (saved_scopes);\n           got_object = TREE_VALUE (saved_scopes);\n@@ -3821,7 +3827,6 @@ operator_name:\n \t\t{ $$ = frob_opname (ansi_opname (VEC_NEW_EXPR)); }\n \t| operator DELETE '[' ']' unoperator\n \t\t{ $$ = frob_opname (ansi_opname (VEC_DELETE_EXPR)); }\n-\t/* Names here should be looked up in class scope ALSO.  */\n \t| operator type_specifier_seq conversion_declarator unoperator\n \t\t{ $$ = frob_opname (grokoptypename ($2.t, $3)); }\n \t| operator error unoperator"}, {"sha": "e355f2d392a12d94071176f935f3ac0a91a78d7b", "filename": "gcc/testsuite/g++.old-deja/g++.other/lookup19.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca77bd196cb6f04c215db0380c77dda140b0258/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flookup19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca77bd196cb6f04c215db0380c77dda140b0258/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flookup19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flookup19.C?ref=aca77bd196cb6f04c215db0380c77dda140b0258", "patch": "@@ -0,0 +1,54 @@\n+// Test for proper handling of type lookup for conversion operator names.\n+// Build don't link:\n+\n+// Test 1: Only at file scope\n+typedef int B;\n+struct A\n+{\n+  int B;\n+  operator B *();\n+};\n+\n+A::operator B * ()\n+{\n+  return 0;\n+}\n+\n+// Test 2: Only at class scope\n+struct C\n+{\n+  typedef int D;\n+  operator D *();\n+};\n+\n+int D;\n+C::operator D * ()\n+{\n+  return 0;\n+}\n+\n+// Test 3: Matching\n+struct E\n+{\n+  typedef int F;\n+  operator F *();\n+};\n+\n+typedef int F;\n+E::operator F * ()\n+{\n+  return 0;\n+}\n+\n+// Test 4: Conflicting\n+struct G\n+{\n+  typedef int H;\n+  operator H *();\n+};\n+\n+typedef double H;\n+G::operator H * ()\t\t// ERROR - mismatch\n+{\n+  return 0;\n+}"}]}