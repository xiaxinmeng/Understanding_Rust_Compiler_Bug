{"sha": "0b661358bcd72a70bbf4b903db1f0f8de98a6bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI2NjEzNThiY2Q3MmE3MGJiZjRiOTAzZGIxZjBmOGRlOThhNmJiZA==", "commit": {"author": {"name": "Palmer Dabbelt", "email": "palmer@dabbelt.com", "date": "2017-10-25T22:45:55Z"}, "committer": {"name": "Palmer Dabbelt", "email": "palmer@gcc.gnu.org", "date": "2017-10-25T22:45:55Z"}, "message": "RISC-V: Add Sign/Zero extend patterns for PIC loads\n\nLoads on RISC-V are sign-extending by default, but we weren't telling\nGCC this in our PIC load patterns.  This corrects the problem, and adds\na zero-extending pattern as well.\n\ngcc/ChangeLog\n\n2017-10-25  Palmer Dabbelt  <palmer@dabbelt.com>\n\n       * config/riscv/riscv.md (ZERO_EXTEND_LOAD): Define.\n       * config/riscv/pic.md (local_pic_load): Rename to local_pic_load_s,\n       mark as a sign-extending load.\n       (local_pic_load_u): Define.\n\nFrom-SVN: r254092", "tree": {"sha": "1b167da7b2f12ecf6d7fa1c61d3c4d049f8e4f14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b167da7b2f12ecf6d7fa1c61d3c4d049f8e4f14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd/comments", "author": {"login": "palmer-dabbelt", "id": 1383006, "node_id": "MDQ6VXNlcjEzODMwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1383006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palmer-dabbelt", "html_url": "https://github.com/palmer-dabbelt", "followers_url": "https://api.github.com/users/palmer-dabbelt/followers", "following_url": "https://api.github.com/users/palmer-dabbelt/following{/other_user}", "gists_url": "https://api.github.com/users/palmer-dabbelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/palmer-dabbelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palmer-dabbelt/subscriptions", "organizations_url": "https://api.github.com/users/palmer-dabbelt/orgs", "repos_url": "https://api.github.com/users/palmer-dabbelt/repos", "events_url": "https://api.github.com/users/palmer-dabbelt/events{/privacy}", "received_events_url": "https://api.github.com/users/palmer-dabbelt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4273ea2378d5989dac3b8fd532eaed201e048787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4273ea2378d5989dac3b8fd532eaed201e048787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4273ea2378d5989dac3b8fd532eaed201e048787"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "5e297fb8b0fdf396a6b5f69b91ea828bff5bc26d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b661358bcd72a70bbf4b903db1f0f8de98a6bbd", "patch": "@@ -1,3 +1,10 @@\n+2017-10-25  Palmer Dabbelt  <palmer@dabbelt.com>\n+\n+\t* config/riscv/riscv.md (ZERO_EXTEND_LOAD): Define.\n+\t* config/riscv/pic.md (local_pic_load): Rename to local_pic_load_s,\n+\tmark as a sign-extending load.\n+\t(local_pic_load_u): Define.\n+\n 2017-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/82062"}, {"sha": "03b8f9bc669e826d31abc0ffcf08a261d9219880", "filename": "gcc/config/riscv/pic.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd/gcc%2Fconfig%2Friscv%2Fpic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd/gcc%2Fconfig%2Friscv%2Fpic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpic.md?ref=0b661358bcd72a70bbf4b903db1f0f8de98a6bbd", "patch": "@@ -22,13 +22,20 @@\n ;; Simplify PIC loads to static variables.\n ;; These should go away once we figure out how to emit auipc discretely.\n \n-(define_insn \"*local_pic_load<mode>\"\n+(define_insn \"*local_pic_load_s<mode>\"\n   [(set (match_operand:ANYI 0 \"register_operand\" \"=r\")\n-\t(mem:ANYI (match_operand 1 \"absolute_symbolic_operand\" \"\")))]\n+\t(sign_extend:ANYI (mem:ANYI (match_operand 1 \"absolute_symbolic_operand\" \"\"))))]\n   \"USE_LOAD_ADDRESS_MACRO (operands[1])\"\n   \"<load>\\t%0,%1\"\n   [(set (attr \"length\") (const_int 8))])\n \n+(define_insn \"*local_pic_load_u<mode>\"\n+  [(set (match_operand:ZERO_EXTEND_LOAD 0 \"register_operand\" \"=r\")\n+\t(zero_extend:ZERO_EXTEND_LOAD (mem:ZERO_EXTEND_LOAD (match_operand 1 \"absolute_symbolic_operand\" \"\"))))]\n+  \"USE_LOAD_ADDRESS_MACRO (operands[1])\"\n+  \"<load>u\\t%0,%1\"\n+  [(set (attr \"length\") (const_int 8))])\n+\n (define_insn \"*local_pic_load<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(mem:ANYF (match_operand 1 \"absolute_symbolic_operand\" \"\")))"}, {"sha": "9f056bbcda4fe9bc07a24b23c6a5e6cf9c6a013c", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b661358bcd72a70bbf4b903db1f0f8de98a6bbd/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=0b661358bcd72a70bbf4b903db1f0f8de98a6bbd", "patch": "@@ -259,6 +259,9 @@\n ;; Iterator for QImode extension patterns.\n (define_mode_iterator SUPERQI [HI SI (DI \"TARGET_64BIT\")])\n \n+;; Iterator for extending loads.\n+(define_mode_iterator ZERO_EXTEND_LOAD [QI HI (SI \"TARGET_64BIT\")])\n+\n ;; Iterator for hardware integer modes narrower than XLEN.\n (define_mode_iterator SUBX [QI HI (SI \"TARGET_64BIT\")])\n "}]}