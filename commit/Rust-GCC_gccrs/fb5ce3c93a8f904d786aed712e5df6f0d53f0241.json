{"sha": "fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1Y2UzYzkzYThmOTA0ZDc4NmFlZDcxMmU1ZGY2ZjBkNTNmMDI0MQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-31T09:10:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-31T09:10:58Z"}, "message": "re PR c++/11347 (Error on valid expression in default value for int argument to inner template.)\n\ncp:\n\tPR c++/11347\n\t* pt.c (instantiate_class_template): Increment\n\tprocessing_template_decl around the tsubst of a template member\n\tclass.\n\t(tsubst_qualified_id): Assert we do not have a dependent scope.\ntestsuite:\n\tPR c++/11347\n\t* g++.dg/template/memtmpl1.C: New.\n\nFrom-SVN: r69994", "tree": {"sha": "124bcabd3bfecaca917061b037a6d5339781e848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/124bcabd3bfecaca917061b037a6d5339781e848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5ce3c93a8f904d786aed712e5df6f0d53f0241/comments", "author": null, "committer": null, "parents": [{"sha": "8c6ab2db94dd89afd71a17768dac974ff91cbe8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6ab2db94dd89afd71a17768dac974ff91cbe8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6ab2db94dd89afd71a17768dac974ff91cbe8f"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "2f96f9587c64981b339a1611af25cc51fee132d0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5ce3c93a8f904d786aed712e5df6f0d53f0241/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5ce3c93a8f904d786aed712e5df6f0d53f0241/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "patch": "@@ -1,5 +1,11 @@\n 2003-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/11347\n+\t* pt.c (instantiate_class_template): Increment\n+\tprocessing_template_decl around the tsubst of a template member\n+\tclass.\n+\t(tsubst_qualified_id): Assert we do not have a dependent scope.\n+\n \t* pt.c (coerce_template_template_parms, lookup_template_class,\n \tcan_complete_type_without_circularity, instantiate_class_template,\n \ttsubst_decl, unify): Reformat."}, {"sha": "a1f57dcaeea8c2858215ecf2409571aefbd3ddd2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5ce3c93a8f904d786aed712e5df6f0d53f0241/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5ce3c93a8f904d786aed712e5df6f0d53f0241/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "patch": "@@ -5318,7 +5318,11 @@ instantiate_class_template (tree type)\n \t\t     restore these.  */\n \t\t  input_location = DECL_SOURCE_LOCATION (t);\n \n+\t\t  if (TREE_CODE (t) == TEMPLATE_DECL)\n+\t\t    processing_template_decl++;\n \t\t  r = tsubst (t, args, tf_error | tf_warning, NULL_TREE);\n+\t\t  if (TREE_CODE (t) == TEMPLATE_DECL)\n+\t\t    processing_template_decl--;\n \t\t  if (TREE_CODE (r) == VAR_DECL)\n \t\t    {\n \t\t      tree init;\n@@ -7140,22 +7144,13 @@ tsubst_qualified_id (tree qualified_id, tree args,\n   else\n     expr = name;\n \n-  /* This case can occur while determining which of two templates is\n-     the more specialized.  After performing argument deduction, we\n-     check that no invalid types are created.  During that phase, we\n-     may seem uninstantiated template parameters.  */\n-  if (TREE_CODE (scope) == BOUND_TEMPLATE_TEMPLATE_PARM)\n-    {\n-      if (is_template)\n-\texpr = lookup_template_function (expr, template_args);\n-      return build_nt (SCOPE_REF, scope, expr);\n-    }\n-\n+  my_friendly_assert (!dependent_type_p (scope), 20030729);\n+  \n   if (!BASELINK_P (name) && !DECL_P (expr))\n     expr = lookup_qualified_name (scope, expr, /*is_type_p=*/0, false);\n+  \n   if (DECL_P (expr))\n-    check_accessibility_of_qualified_id (expr, \n-\t\t\t\t\t /*object_type=*/NULL_TREE,\n+    check_accessibility_of_qualified_id (expr, /*object_type=*/NULL_TREE,\n \t\t\t\t\t scope);\n   \n   /* Remember that there was a reference to this entity.  */"}, {"sha": "fb4910b5dec320ec070e3902bfa6ee56aa462507", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5ce3c93a8f904d786aed712e5df6f0d53f0241/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5ce3c93a8f904d786aed712e5df6f0d53f0241/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "patch": "@@ -1,3 +1,8 @@\n+2003-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/11347\n+\t* g++.dg/template/memtmpl1.C: New.\n+\n 2003-07-29  Andrew Pinski <pinskia@physics.uc.edu>\n \n \tPR target/11565"}, {"sha": "260dbf8dc0926718cdfa21e6f102268f5e4f3c02", "filename": "gcc/testsuite/g++.dg/template/memtmpl1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5ce3c93a8f904d786aed712e5df6f0d53f0241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemtmpl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5ce3c93a8f904d786aed712e5df6f0d53f0241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemtmpl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemtmpl1.C?ref=fb5ce3c93a8f904d786aed712e5df6f0d53f0241", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 30 Jul 2003 <nathan@codesourcery.com>\n+\n+// PR 11347. ICE in tsubst\n+\n+template <class T> struct T1 {\n+  enum {N};\n+};\n+\n+template<class T> struct T2 {\n+  template <class S, bool Z = T1<S>::N + 1> struct B {};\n+  struct C {};\n+};\n+\n+T2<int> t;\n+\n+T2<int>::B<int> s;\n+"}]}