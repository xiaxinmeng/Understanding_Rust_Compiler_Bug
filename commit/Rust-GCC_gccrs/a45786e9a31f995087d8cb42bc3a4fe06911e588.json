{"sha": "a45786e9a31f995087d8cb42bc3a4fe06911e588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1Nzg2ZTlhMzFmOTk1MDg3ZDhjYjQyYmMzYTRmZTA2OTExZTU4OA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-08-31T04:41:14Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-01T20:58:00Z"}, "message": "Fix target/101934: aarch64 memset code creates unaligned stores for -mstrict-align\n\nThe problem here is the aarch64_expand_setmem code did not check\nSTRICT_ALIGNMENT if it is creating an overlapping store.\nThis patch adds that check and the testcase works.\n\ngcc/ChangeLog:\n\n\tPR target/101934\n\t* config/aarch64/aarch64.c (aarch64_expand_setmem):\n\tCheck STRICT_ALIGNMENT before creating an overlapping\n\tstore.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/101934\n\t* gcc.target/aarch64/memset-strict-align-1.c: New test.", "tree": {"sha": "0e7553eb6a7b0825a66344ab1fbe69cde71d27de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e7553eb6a7b0825a66344ab1fbe69cde71d27de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a45786e9a31f995087d8cb42bc3a4fe06911e588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45786e9a31f995087d8cb42bc3a4fe06911e588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45786e9a31f995087d8cb42bc3a4fe06911e588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45786e9a31f995087d8cb42bc3a4fe06911e588/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4d6dcacfca1b804504515496e6d9de176d7f51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d6dcacfca1b804504515496e6d9de176d7f51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d6dcacfca1b804504515496e6d9de176d7f51e"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "26d59ba1e13758eed47598c101fd214788637be4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45786e9a31f995087d8cb42bc3a4fe06911e588/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45786e9a31f995087d8cb42bc3a4fe06911e588/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a45786e9a31f995087d8cb42bc3a4fe06911e588", "patch": "@@ -23566,8 +23566,8 @@ aarch64_expand_setmem (rtx *operands)\n       /* Do certain trailing copies as overlapping if it's going to be\n \t cheaper.  i.e. less instructions to do so.  For instance doing a 15\n \t byte copy it's more efficient to do two overlapping 8 byte copies than\n-\t 8 + 4 + 2 + 1.  */\n-      if (n > 0 && n < copy_limit / 2)\n+\t 8 + 4 + 2 + 1.  Only do this when -mstrict-align is not supplied.  */\n+      if (n > 0 && n < copy_limit / 2 && !STRICT_ALIGNMENT)\n \t{\n \t  next_mode = smallest_mode_for_size (n, MODE_INT);\n \t  int n_bits = GET_MODE_BITSIZE (next_mode).to_constant ();"}, {"sha": "5cdc8a449684055b040056063084dfce484d827e", "filename": "gcc/testsuite/gcc.target/aarch64/memset-strict-align-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45786e9a31f995087d8cb42bc3a4fe06911e588/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmemset-strict-align-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45786e9a31f995087d8cb42bc3a4fe06911e588/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmemset-strict-align-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmemset-strict-align-1.c?ref=a45786e9a31f995087d8cb42bc3a4fe06911e588", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mstrict-align\" } */\n+\n+struct s { char x[95]; };\n+void foo (struct s *);\n+void bar (void) { struct s s1 = {}; foo (&s1); }\n+\n+/* memset (s1 = {}, sizeof = 95) should be expanded out\n+   such that there are no overlap stores when -mstrict-align\n+   is in use.\n+   so 2 pair 16 bytes stores (64 bytes).\n+   1 16 byte stores\n+   1 8 byte store\n+   1 4 byte store\n+   1 2 byte store\n+   1 1 byte store\n+   */\n+\n+/* { dg-final { scan-assembler-times \"stp\\tq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"str\\tq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"str\\txzr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"str\\twzr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"strh\\twzr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"strb\\twzr\" 1 } } */\n+\n+/* Also one store pair for the frame-pointer and the LR. */\n+/* { dg-final { scan-assembler-times \"stp\\tx\" 1 } } */\n+"}]}