{"sha": "6644b368bec2f708896c6d668ac2af2c0a7e970b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0NGIzNjhiZWMyZjcwODg5NmM2ZDY2OGFjMmFmMmMwYTdlOTcwYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:22:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:22:19Z"}, "message": "bindgen.adb (Gen_Output_File_Ada): Generate pragma No_Run_Time when needed.\n\n2007-04-20  Arnaud Charlet  <charlet@adacore.com>\n\t    Vincent Celier  <celier@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* bindgen.adb (Gen_Output_File_Ada): Generate pragma No_Run_Time when\n\tneeded.\n\t(Gen_Output_File_Ada, Gen_Output_File_C): Never use __attribute\n\t((destructor)) for adafinal, even when switch -a is used.\n\tDo not issue pragma Linker_Destructor for adafinal when switch -a is\n\tused.\n\t(Gen_Object_Files_Options): Add formatting of Linker Options, when\n\tOutput_Linker_Option_List is set. Suppress this formatting when\n\tZero_Formatting is set.\n\tAdd case for CLI_Target.\n\t(System_Restrictions_Used): New flag, used to avoid generating with of\n\tSystem_Restrictions and initialization of the data unless there is\n\tsome use of System.Restrictions in the partition.\n\t(Check_System_Restrictions_Used): New procedure\n\n        * s-stalib.adb: Remove with of System.Restrictions. No longer needed\n\tsince we only with this unit in the binder file if it is used elsewhere\n\tin the partition.\n\nFrom-SVN: r125386", "tree": {"sha": "f742837ffba123bb1ecf7f36cd8d0c73bcdf183d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f742837ffba123bb1ecf7f36cd8d0c73bcdf183d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6644b368bec2f708896c6d668ac2af2c0a7e970b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6644b368bec2f708896c6d668ac2af2c0a7e970b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6644b368bec2f708896c6d668ac2af2c0a7e970b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6644b368bec2f708896c6d668ac2af2c0a7e970b/comments", "author": null, "committer": null, "parents": [{"sha": "b51711b5450e44b790b1db376ed4b9768183ca05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51711b5450e44b790b1db376ed4b9768183ca05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b51711b5450e44b790b1db376ed4b9768183ca05"}], "stats": {"total": 189, "additions": 145, "deletions": 44}, "files": [{"sha": "c5ae10f276841ca0880512768afbec5591515c91", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 144, "deletions": 40, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6644b368bec2f708896c6d668ac2af2c0a7e970b/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6644b368bec2f708896c6d668ac2af2c0a7e970b/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=6644b368bec2f708896c6d668ac2af2c0a7e970b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,7 +40,8 @@ with Table;    use Table;\n with Targparm; use Targparm;\n with Types;    use Types;\n \n-with GNAT.OS_Lib;      use GNAT.OS_Lib;\n+with System.OS_Lib;    use System.OS_Lib;\n+\n with GNAT.Heap_Sort_A; use GNAT.Heap_Sort_A;\n \n package body Bindgen is\n@@ -62,6 +63,14 @@ package body Bindgen is\n    Num_Elab_Calls : Nat := 0;\n    --  Number of generated calls to elaboration routines\n \n+   System_Restrictions_Used : Boolean;\n+   --  Flag indicating whether the unit System.Restrictions is in the closure\n+   --  of the partition. This is set by Check_System_Restrictions_Used, and\n+   --  is used to determine whether or not to initialize the restrictions\n+   --  information in the body of the binder generated file (we do not want\n+   --  to do this unconditionally, since it drags in the System.Restrictions\n+   --  unit unconditionally, which is unpleasand, especially for ZFP etc.)\n+\n    ----------------------------------\n    -- Interface_State Pragma Table --\n    ----------------------------------\n@@ -206,6 +215,10 @@ package body Bindgen is\n    procedure WBI (Info : String) renames Osint.B.Write_Binder_Info;\n    --  Convenient shorthand used throughout\n \n+   procedure Check_System_Restrictions_Used;\n+   --  Sets flag System_Restrictions_Used (Set to True if and only if the unit\n+   --  System.Restrictions is present in the partition, otherwise False).\n+\n    procedure Gen_Adainit_Ada;\n    --  Generates the Adainit procedure (Ada code case)\n \n@@ -341,6 +354,22 @@ package body Bindgen is\n    --  First writes its argument (using Set_String (S)), then writes out the\n    --  contents of statement buffer up to Last, and reset Last to 0\n \n+   ------------------------------------\n+   -- Check_System_Restrictions_Used --\n+   ------------------------------------\n+\n+   procedure Check_System_Restrictions_Used is\n+   begin\n+      for J in Units.First .. Units.Last loop\n+         if Get_Name_String (Units.Table (J).Sfile) = \"s-restri.ads\" then\n+            System_Restrictions_Used := True;\n+            return;\n+         end if;\n+      end loop;\n+\n+      System_Restrictions_Used := False;\n+   end Check_System_Restrictions_Used;\n+\n    ----------------------\n    -- Gen_Adafinal_Ada --\n    ----------------------\n@@ -354,7 +383,7 @@ package body Bindgen is\n       --  If compiling for the JVM, we directly call Adafinal because\n       --  we don't import it via Do_Finalize (see Gen_Output_File_Ada).\n \n-      if Hostparm.Java_VM then\n+      if VM_Target /= No_VM then\n          WBI (\"      System.Standard_Library.Adafinal;\");\n \n       --  If there is no finalization, there is nothing to do\n@@ -416,7 +445,14 @@ package body Bindgen is\n                Set_String (\"      \");\n                Set_String (\"E\");\n                Set_Unit_Number (Unum);\n-               Set_String (\" : Boolean; pragma Import (Ada, \");\n+\n+               case VM_Target is\n+                  when No_VM | JVM_Target =>\n+                     Set_String (\" : Boolean; pragma Import (Ada, \");\n+                  when CLI_Target =>\n+                     Set_String (\" : Boolean; pragma Import (CIL, \");\n+               end case;\n+\n                Set_String (\"E\");\n                Set_Unit_Number (Unum);\n                Set_String (\", \"\"\");\n@@ -426,16 +462,22 @@ package body Bindgen is\n                --  that includes the class name (using '$' separators\n                --  in the case of a child unit name).\n \n-               if Hostparm.Java_VM then\n+               if VM_Target /= No_VM then\n                   for J in 1 .. Name_Len - 2 loop\n-                     if Name_Buffer (J) /= '.' then\n+                     if VM_Target = CLI_Target\n+                       or else Name_Buffer (J) /= '.'\n+                     then\n                         Set_Char (Name_Buffer (J));\n                      else\n                         Set_String (\"$\");\n                      end if;\n                   end loop;\n \n-                  Set_String (\".\");\n+                  if VM_Target /= CLI_Target or else U.Unit_Kind = 's' then\n+                     Set_String (\".\");\n+                  else\n+                     Set_String (\"_pkg.\");\n+                  end if;\n \n                   --  If the unit name is very long, then split the\n                   --  Import link name across lines using \"&\" (occurs\n@@ -828,8 +870,6 @@ package body Bindgen is\n          Set_String (\"';\");\n          Write_Statement_Buffer;\n \n-         --  Generate definition for restrictions string\n-\n          Gen_Restrictions_C;\n \n          WBI (\"   extern const void *__gl_interrupt_states;\");\n@@ -1007,13 +1047,29 @@ package body Bindgen is\n                Set_String (\"      \");\n                Get_Decoded_Name_String_With_Brackets (U.Uname);\n \n-               if Name_Buffer (Name_Len) = 's' then\n-                  Name_Buffer (Name_Len - 1 .. Name_Len + 8) := \"'elab_spec\";\n+               if VM_Target = CLI_Target and then U.Unit_Kind /= 's' then\n+                  if Name_Buffer (Name_Len) = 's' then\n+                     Name_Buffer (Name_Len - 1 .. Name_Len + 12) :=\n+                       \"_pkg'elab_spec\";\n+                  else\n+                     Name_Buffer (Name_Len - 1 .. Name_Len + 12) :=\n+                       \"_pkg'elab_body\";\n+                  end if;\n+\n+                  Name_Len := Name_Len + 12;\n+\n                else\n-                  Name_Buffer (Name_Len - 1 .. Name_Len + 8) := \"'elab_body\";\n+                  if Name_Buffer (Name_Len) = 's' then\n+                     Name_Buffer (Name_Len - 1 .. Name_Len + 8) :=\n+                       \"'elab_spec\";\n+                  else\n+                     Name_Buffer (Name_Len - 1 .. Name_Len + 8) :=\n+                       \"'elab_body\";\n+                  end if;\n+\n+                  Name_Len := Name_Len + 8;\n                end if;\n \n-               Name_Len := Name_Len + 8;\n                Set_Casing (U.Icasing);\n                Set_Name_Buffer;\n                Set_Char (';');\n@@ -1395,7 +1451,6 @@ package body Bindgen is\n       end if;\n \n       if not Cumulative_Restrictions.Set (No_Finalization) then\n-\n          if not No_Main_Subprogram\n            and then Bind_Main_Program\n            and then not Suppress_Standard_Library_On_Target\n@@ -1425,10 +1480,10 @@ package body Bindgen is\n          --  If compiling for the JVM, we directly call Adafinal because\n          --  we don't import it via Do_Finalize (see Gen_Output_File_Ada).\n \n-         if Hostparm.Java_VM then\n-            WBI (\"      System.Standard_Library.Adafinal;\");\n-         else\n+         if VM_Target = No_VM then\n             WBI (\"      Do_Finalize;\");\n+         else\n+            WBI (\"      System.Standard_Library.Adafinal;\");\n          end if;\n       end if;\n \n@@ -1666,6 +1721,9 @@ package body Bindgen is\n       --  in the Linker_Options table of where the first entry from an\n       --  internal file appears.\n \n+      Linker_Option_List_Started : Boolean := False;\n+      --  Set to True when \"LINKER OPTION LIST\" is displayed\n+\n       procedure Write_Linker_Option;\n       --  Write binder info linker option\n \n@@ -1694,12 +1752,24 @@ package body Bindgen is\n             --  Process section if non-null\n \n             if Stop > Start then\n-                  if Output_Linker_Option_List then\n-                     Write_Str (Name_Buffer (Start .. Stop - 1));\n-                     Write_Eol;\n+               if Output_Linker_Option_List then\n+                  if not Zero_Formatting then\n+                     if not Linker_Option_List_Started then\n+                        Linker_Option_List_Started := True;\n+                        Write_Eol;\n+                        Write_Str (\"     LINKER OPTION LIST\");\n+                        Write_Eol;\n+                        Write_Eol;\n+                     end if;\n+\n+                     Write_Str (\"   \");\n                   end if;\n-                  Write_Info_Ada_C\n-                    (\"   --   \", \"\", Name_Buffer (Start .. Stop - 1));\n+\n+                  Write_Str (Name_Buffer (Start .. Stop - 1));\n+                  Write_Eol;\n+               end if;\n+               Write_Info_Ada_C\n+                 (\"   --   \", \"\", Name_Buffer (Start .. Stop - 1));\n             end if;\n \n             Start := Stop + 1;\n@@ -1728,7 +1798,8 @@ package body Bindgen is\n             --  exists, then use it.\n \n             if not Hostparm.Exclude_Missing_Objects\n-              or else GNAT.OS_Lib.Is_Regular_File (Name_Buffer (1 .. Name_Len))\n+              or else\n+                System.OS_Lib.Is_Regular_File (Name_Buffer (1 .. Name_Len))\n             then\n                Write_Info_Ada_C (\"   --   \", \"\", Name_Buffer (1 .. Name_Len));\n \n@@ -1887,6 +1958,10 @@ package body Bindgen is\n          Write_Linker_Option;\n       end loop;\n \n+      if Output_Linker_Option_List and then not Zero_Formatting then\n+         Write_Eol;\n+      end if;\n+\n       if Ada_Bind_File then\n          WBI (\"--  END Object file/option list   \");\n       else\n@@ -1908,11 +1983,11 @@ package body Bindgen is\n \n       Set_PSD_Pragma_Table;\n \n-      --  Override Ada_Bind_File and Bind_Main_Program for Java since\n+      --  Override Ada_Bind_File and Bind_Main_Program for VMs since\n       --  JGNAT only supports Ada code, and the main program is already\n       --  generated by the compiler.\n \n-      if Hostparm.Java_VM then\n+      if VM_Target /= No_VM then\n          Ada_Bind_File := True;\n          Bind_Main_Program := False;\n       end if;\n@@ -1935,12 +2010,13 @@ package body Bindgen is\n \n       --  Generate output file in appropriate language\n \n+      Check_System_Restrictions_Used;\n+\n       if Ada_Bind_File then\n          Gen_Output_File_Ada (Filename);\n       else\n          Gen_Output_File_C (Filename);\n       end if;\n-\n    end Gen_Output_File;\n \n    -------------------------\n@@ -1978,6 +2054,18 @@ package body Bindgen is\n          WBI (\"pragma Restrictions (No_Exception_Handlers);\");\n       end if;\n \n+      --  Same processing for Restrictions (No_Exception_Propagation)\n+\n+      if Cumulative_Restrictions.Set (No_Exception_Propagation) then\n+         WBI (\"pragma Restrictions (No_Exception_Propagation);\");\n+      end if;\n+\n+      --  Same processing for pragma No_Run_Time\n+\n+      if No_Run_Time_Mode then\n+         WBI (\"pragma No_Run_Time;\");\n+      end if;\n+\n       --  Generate with of System so we can reference System.Address\n \n       WBI (\"with System;\");\n@@ -2001,7 +2089,7 @@ package body Bindgen is\n          --  Import C doesn't have the same semantics for JGNAT, we use\n          --  standard Ada.\n \n-         if Hostparm.Java_VM then\n+         if VM_Target /= No_VM then\n             WBI (\"with System.Standard_Library;\");\n          end if;\n       end if;\n@@ -2079,16 +2167,18 @@ package body Bindgen is\n       WBI (\"   procedure \" & Ada_Final_Name.all & \";\");\n       WBI (\"   pragma Export (C, \" & Ada_Final_Name.all & \", \"\"\" &\n            Ada_Final_Name.all & \"\"\");\");\n-\n-      if Use_Pragma_Linker_Constructor then\n-         WBI (\"   pragma Linker_Destructor (\" & Ada_Final_Name.all & \");\");\n-      end if;\n-\n       WBI (\"\");\n       WBI (\"   procedure \" & Ada_Init_Name.all & \";\");\n       WBI (\"   pragma Export (C, \" & Ada_Init_Name.all & \", \"\"\" &\n            Ada_Init_Name.all & \"\"\");\");\n \n+      --  If -a has been specified use pragma Linker_Constructor for the init\n+      --  procedure. No need to use a similar pragma for the final procedure as\n+      --  global finalization will occur when the executable finishes execution\n+      --  and for plugins (shared stand-alone libraries that can be\n+      --  \"unloaded\"), finalization should not occur automatically, otherwise\n+      --  the main executable may not continue to work properly.\n+\n       if Use_Pragma_Linker_Constructor then\n          WBI (\"   pragma Linker_Constructor (\" & Ada_Init_Name.all & \");\");\n       end if;\n@@ -2191,7 +2281,9 @@ package body Bindgen is\n       --  Generate with of System.Restrictions to initialize\n       --  Run_Time_Restrictions.\n \n-      if not Suppress_Standard_Library_On_Target then\n+      if System_Restrictions_Used\n+        and not Suppress_Standard_Library_On_Target\n+      then\n          WBI (\"\");\n          WBI (\"with System.Restrictions;\");\n       end if;\n@@ -2207,7 +2299,7 @@ package body Bindgen is\n          --  In the Java case, pragma Import C cannot be used, so the\n          --  standard Ada constructs will be used instead.\n \n-         if not Hostparm.Java_VM then\n+         if VM_Target = No_VM then\n             WBI (\"\");\n             WBI (\"   procedure Do_Finalize;\");\n             WBI\n@@ -2288,14 +2380,20 @@ package body Bindgen is\n \n       Resolve_Binder_Options;\n \n+      WBI (\"extern void \" & Ada_Final_Name.all & \" (void);\");\n+\n+      --  If -a has been specified use __attribute__((constructor)) for the\n+      --  init procedure. No need to use a similar featute for the final\n+      --  procedure as global finalization will occur when the executable\n+      --  finishes execution and for plugins (shared stand-alone libraries that\n+      --  can be \"unloaded\"), finalization should not occur automatically,\n+      --  otherwise the main executable may not continue to work properly.\n+\n       if Use_Pragma_Linker_Constructor then\n-         WBI (\"extern void \" & Ada_Final_Name.all &\n-              \" (void) __attribute__((destructor));\");\n          WBI (\"extern void \" & Ada_Init_Name.all &\n               \" (void) __attribute__((constructor));\");\n \n       else\n-         WBI (\"extern void \" & Ada_Final_Name.all & \" (void);\");\n          WBI (\"extern void \" & Ada_Init_Name.all & \" (void);\");\n       end if;\n \n@@ -2470,8 +2568,11 @@ package body Bindgen is\n \n    procedure Gen_Restrictions_Ada is\n       Count : Integer;\n+\n    begin\n-      if Suppress_Standard_Library_On_Target then\n+      if Suppress_Standard_Library_On_Target\n+        or not System_Restrictions_Used\n+      then\n          return;\n       end if;\n \n@@ -2569,7 +2670,9 @@ package body Bindgen is\n \n    procedure Gen_Restrictions_C is\n    begin\n-      if Suppress_Standard_Library_On_Target then\n+      if Suppress_Standard_Library_On_Target\n+        or not System_Restrictions_Used\n+      then\n          return;\n       end if;\n \n@@ -2827,7 +2930,8 @@ package body Bindgen is\n       --  The main program generated by JGNAT expects a package called\n       --  ada_<main procedure>.\n \n-      if Hostparm.Java_VM then\n+      if VM_Target /= No_VM then\n+\n          --  Get main program name\n \n          Get_Name_String (Units.Table (First_Unit_Entry).Uname);"}, {"sha": "5cf871461e776fd3a28b4b457576d7a8852f0d65", "filename": "gcc/ada/s-stalib.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6644b368bec2f708896c6d668ac2af2c0a7e970b/gcc%2Fada%2Fs-stalib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6644b368bec2f708896c6d668ac2af2c0a7e970b/gcc%2Fada%2Fs-stalib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.adb?ref=6644b368bec2f708896c6d668ac2af2c0a7e970b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1995-2006 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1995-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,9 +56,6 @@ with System.Memory;\n --  must always be present in a build, even if no unit has a direct with\n --  of this unit.\n \n-with System.Restrictions;\n---  Referenced directly from the binder generated file.\n-\n pragma Warnings (On);\n \n package body System.Standard_Library is"}]}