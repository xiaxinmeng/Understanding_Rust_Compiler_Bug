{"sha": "00cad178a359da70204fe1ef4072f3bdbccb799c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjYWQxNzhhMzU5ZGE3MDIwNGZlMWVmNDA3MmYzYmRiY2NiNzk5Yw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-08-22T17:10:00Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-08-22T17:10:00Z"}, "message": "re PR fortran/86888 ([F08] allocatable components of indirectly recursive type)\n\nfix PR 86888\n\n2018-08-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/86888\n\t* decl.c (gfc_match_data_decl): Allow allocatable components of\n\tindirectly recursive type.\n\t* resolve.c (resolve_component): Remove two errors messages ...\n\t(resolve_fl_derived): ... and replace them by a new one.\n\n2018-08-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/86888\n\t* gfortran.dg/alloc_comp_basics_6.f90: Update an error message and add\n\tan additional case.\n\t* gfortran.dg/alloc_comp_basics_7.f90: New test case.\n\t* gfortran.dg/class_17.f03: Update error message.\n\t* gfortran.dg/class_55.f90: Ditto.\n\t* gfortran.dg/dtio_11.f90: Update error messages.\n\t* gfortran.dg/implicit_actual.f90: Add an error message.\n\t* gfortran.dg/typebound_proc_12.f90: Update error message.\n\nFrom-SVN: r263782", "tree": {"sha": "f646b8c67f7b4755ed8483f32f8217ae818b106b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f646b8c67f7b4755ed8483f32f8217ae818b106b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00cad178a359da70204fe1ef4072f3bdbccb799c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cad178a359da70204fe1ef4072f3bdbccb799c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cad178a359da70204fe1ef4072f3bdbccb799c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cad178a359da70204fe1ef4072f3bdbccb799c/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b56b07639b1bd36383a0763ba80260c4858160ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56b07639b1bd36383a0763ba80260c4858160ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56b07639b1bd36383a0763ba80260c4858160ed"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "2cd5dcf3304d4a87cf0585fce8cc79e471d4990f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -1,3 +1,11 @@\n+2018-08-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/86888\n+\t* decl.c (gfc_match_data_decl): Allow allocatable components of\n+\tindirectly recursive type.\n+\t* resolve.c (resolve_component): Remove two errors messages ...\n+\t(resolve_fl_derived): ... and replace them by a new one.\n+\n 2018-08-21  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Use"}, {"sha": "03298833c98d5ad4a74c3ff05616c06c38c255f3", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -5864,8 +5864,7 @@ gfc_match_data_decl (void)\n       if (current_attr.pointer && gfc_comp_struct (gfc_current_state ()))\n \tgoto ok;\n \n-      if (current_attr.allocatable && gfc_current_state () == COMP_DERIVED\n-\t  && current_ts.u.derived == gfc_current_block ())\n+      if (current_attr.allocatable && gfc_current_state () == COMP_DERIVED)\n \tgoto ok;\n \n       gfc_find_symbol (current_ts.u.derived->name,"}, {"sha": "4ad4dcf780d0084486f7e71d771229f7e5fb7afc", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -14001,28 +14001,6 @@ resolve_component (gfc_component *c, gfc_symbol *sym)\n     CLASS_DATA (c)->ts.u.derived\n                     = gfc_find_dt_in_generic (CLASS_DATA (c)->ts.u.derived);\n \n-  if (!sym->attr.is_class && c->ts.type == BT_DERIVED && !sym->attr.vtype\n-      && c->attr.pointer && c->ts.u.derived->components == NULL\n-      && !c->ts.u.derived->attr.zero_comp)\n-    {\n-      gfc_error (\"The pointer component %qs of %qs at %L is a type \"\n-                 \"that has not been declared\", c->name, sym->name,\n-                 &c->loc);\n-      return false;\n-    }\n-\n-  if (c->ts.type == BT_CLASS && c->attr.class_ok\n-      && CLASS_DATA (c)->attr.class_pointer\n-      && CLASS_DATA (c)->ts.u.derived->components == NULL\n-      && !CLASS_DATA (c)->ts.u.derived->attr.zero_comp\n-      && !UNLIMITED_POLY (c))\n-    {\n-      gfc_error (\"The pointer component %qs of %qs at %L is a type \"\n-                 \"that has not been declared\", c->name, sym->name,\n-                 &c->loc);\n-      return false;\n-    }\n-\n   /* If an allocatable component derived type is of the same type as\n      the enclosing derived type, we need a vtable generating so that\n      the __deallocate procedure is created.  */\n@@ -14258,6 +14236,13 @@ resolve_fl_derived (gfc_symbol *sym)\n \t\t\t  &sym->declared_at))\n     return false;\n \n+  if (sym->components == NULL && !sym->attr.zero_comp)\n+    {\n+      gfc_error (\"Derived type %qs at %L has not been declared\",\n+\t\t  sym->name, &sym->declared_at);\n+      return false;\n+    }\n+\n   /* Resolve the finalizer procedures.  */\n   if (!gfc_resolve_finalizers (sym, NULL))\n     return false;"}, {"sha": "59a9038dd043eacf43228115abbbd0bf1a8d3e76", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -1,3 +1,15 @@\n+2018-08-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/86888\n+\t* gfortran.dg/alloc_comp_basics_6.f90: Update an error message and add\n+\tan additional case.\n+\t* gfortran.dg/alloc_comp_basics_7.f90: New test case.\n+\t* gfortran.dg/class_17.f03: Update error message.\n+\t* gfortran.dg/class_55.f90: Ditto.\n+\t* gfortran.dg/dtio_11.f90: Update error messages.\n+\t* gfortran.dg/implicit_actual.f90: Add an error message.\n+\t* gfortran.dg/typebound_proc_12.f90: Update error message.\n+\n 2018-08-22  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/87052"}, {"sha": "4eb0e49a7e52eaa11d38cf525e500c54d2582e2d", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_basics_6.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_6.f90?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -5,7 +5,8 @@\n ! Contributed by Joost VandeVondele <Joost.VandeVondele@mat.ethz.ch>\n \n   type sysmtx_t\n-     type(ext_complex_t), allocatable :: S(:)  ! { dg-error \"has not been previously defined\" }\n+     type(ext_complex_t), allocatable :: S(:)  ! { dg-error \"has not been declared\" }\n+     class(some_type), allocatable :: X        ! { dg-error \"has not been declared\" }\n   end type\n \n end"}, {"sha": "7229630216996d359cb1bc583b87df4e00ac9de0", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_basics_7.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_7.f90?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! PR 86888: [F08] allocatable components of indirectly recursive type\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+type :: s\n+   type(t), allocatable :: x\n+end type\n+\n+type :: t\n+   type(s), allocatable :: y\n+end type\n+\n+end"}, {"sha": "24b0e7b61f3f6c808595fbb47a7cea888bf02b6c", "filename": "gcc/testsuite/gfortran.dg/class_17.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_17.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_17.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_17.f03?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -56,7 +56,7 @@ end MODULE error_stack_module\n module b_module\n   implicit none\n   type::b_type\n-     class(not_yet_defined_type_type),pointer::b_component  ! { dg-error \"is a type that has not been declared\" }\n+     class(not_yet_defined_type_type),pointer::b_component  ! { dg-error \"has not been declared\" }\n   end type b_type\n end module b_module\n  "}, {"sha": "e629698253617b3d1bf05d5ab13fade228da42de", "filename": "gcc/testsuite/gfortran.dg/class_55.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_55.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_55.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_55.f90?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -5,7 +5,7 @@\n ! Contributed by Sylwester Arabas <slayoo@staszic.waw.pl>\n \n   type :: mpdata_t\n-    class(bcd_t), pointer :: bcx, bcy   ! { dg-error \"is a type that has not been declared\" }\n+    class(bcd_t), pointer :: bcx, bcy   ! { dg-error \"has not been declared\" }\n   end type\n   type(mpdata_t) :: this\n   call this%bcx%fill_halos()            ! { dg-error \"is being used before it is defined\" }"}, {"sha": "cf939328139c030299ce85bf92abd648713de83c", "filename": "gcc/testsuite/gfortran.dg/dtio_11.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_11.f90?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -15,13 +15,13 @@ module m1\n ! PR77533 - used to ICE after error\n module m2\n    type t\n-      type(unknown), pointer :: next ! { dg-error \"is a type that has not been declared\" }\n+      type(unknown), pointer :: next ! { dg-error \"has not been declared\" }\n    contains\n-      procedure :: s\n+      procedure :: s  ! { dg-error \"Non-polymorphic passed-object\" }\n       generic :: write(formatted) => s\n    end type\n contains\n-   subroutine s(x)\n+   subroutine s(x)  ! { dg-error \"Too few dummy arguments\" }\n    end\n end\n "}, {"sha": "79258c88b8799f445820db3e56ede66be640d6ba", "filename": "gcc/testsuite/gfortran.dg/implicit_actual.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_actual.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_actual.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_actual.f90?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -14,7 +14,7 @@ end module global\n \n program snafu\n !  use global\n-  implicit type (t3) (z)\n+  implicit type (t3) (z)  ! { dg-error \"has not been declared\" }\n \n   call foo (zin) ! { dg-error \"defined|Type mismatch\" }\n "}, {"sha": "ea43dab8767d9397eb82961112592647ef550537", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_12.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cad178a359da70204fe1ef4072f3bdbccb799c/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_12.f90?ref=00cad178a359da70204fe1ef4072f3bdbccb799c", "patch": "@@ -5,7 +5,7 @@\n ! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n !\n   TYPE a\n-    TYPE(b), DIMENSION(:), POINTER :: c  ! { dg-error \"type that has not been declared\" }\n+    TYPE(b), DIMENSION(:), POINTER :: c  ! { dg-error \"has not been declared\" }\n   END TYPE\n   TYPE(a), POINTER :: d\n   CALL X(d%c%e)         ! { dg-error \"before it is defined\" }"}]}