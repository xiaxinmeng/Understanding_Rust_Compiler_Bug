{"sha": "7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1YTBmMWI0ZTU0ZjgzMzM3ZDVhMGIwOTNiMGE0MGFlOGNmMjdkNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-17T12:22:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-17T12:22:54Z"}, "message": "re PR tree-optimization/50729 (Silent code gen fault: Value range propagation seems to propagate values across narrowing/widening)\n\n2011-10-17  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/50729\n\t* tree-vrp.c (extract_range_from_unary_expr_1): Remove\n\tredundant test.\n\t(simplify_conversion_using_ranges): Properly test the\n\tintermediate result.\n\n\t* gcc.dg/torture/pr50729.c: New testcase.\n\nFrom-SVN: r180087", "tree": {"sha": "c4d0d2f384a38c365c5371e2b67503ad50a6fb57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d0d2f384a38c365c5371e2b67503ad50a6fb57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9bd6f743843a53de1396c43d1e308e51d40c5c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9bd6f743843a53de1396c43d1e308e51d40c5c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9bd6f743843a53de1396c43d1e308e51d40c5c4"}], "stats": {"total": 59, "additions": 47, "deletions": 12}, "files": [{"sha": "f367a118c7f5496c353d18562e51217cfdcacc6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6", "patch": "@@ -1,3 +1,11 @@\n+2011-10-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50729\n+\t* tree-vrp.c (extract_range_from_unary_expr_1): Remove\n+\tredundant test.\n+\t(simplify_conversion_using_ranges): Properly test the\n+\tintermediate result.\n+\n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n "}, {"sha": "4dc4e786dcafffb16b4ea51b6cdc3f04ee41a774", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6", "patch": "@@ -1,3 +1,8 @@\n+2011-10-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50729\n+\t* gcc.dg/torture/pr50729.c: New testcase.\n+\n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n "}, {"sha": "a1daa7b851fc903c68a5bbfec2c1c56895abc290", "filename": "gcc/testsuite/gcc.dg/torture/pr50729.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50729.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50729.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50729.c?ref=7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+\n+extern void abort (void);\n+unsigned short __attribute__((noinline))\n+foo (int i)\n+{\n+  if (i >= 0\n+      && i <= 0x400000)\n+    return (unsigned short)(signed char)i;\n+  return i;\n+}\n+int main()\n+{\n+  int i;\n+  for (i = 0; i < 0xffff; ++i)\n+    if (foo(i) != (unsigned short)(signed char) i)\n+      abort ();\n+  return 0;\n+}"}, {"sha": "248bc61926f6c431e939968abe9ecd55acabcfdb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=7d5a0f1b4e54f83337d5a0b093b0a40ae8cf27d6", "patch": "@@ -2913,15 +2913,10 @@ extract_range_from_unary_expr_1 (value_range_t *vr,\n \t determining if it evaluates to NULL [0, 0] or non-NULL (~[0, 0]).  */\n       if (POINTER_TYPE_P (type))\n \t{\n-\t  if (CONVERT_EXPR_CODE_P (code))\n-\t    {\n-\t      if (range_is_nonnull (&vr0))\n-\t\tset_value_range_to_nonnull (vr, type);\n-\t      else if (range_is_null (&vr0))\n-\t\tset_value_range_to_null (vr, type);\n-\t      else\n-\t\tset_value_range_to_varying (vr);\n-\t    }\n+\t  if (range_is_nonnull (&vr0))\n+\t    set_value_range_to_nonnull (vr, type);\n+\t  else if (range_is_null (&vr0))\n+\t    set_value_range_to_null (vr, type);\n \t  else\n \t    set_value_range_to_varying (vr);\n \t  return;\n@@ -7288,10 +7283,17 @@ simplify_conversion_using_ranges (gimple stmt)\n \t\t\t      TYPE_UNSIGNED (TREE_TYPE (middleop)));\n   middlemax = double_int_ext (innermax, TYPE_PRECISION (TREE_TYPE (middleop)),\n \t\t\t      TYPE_UNSIGNED (TREE_TYPE (middleop)));\n-  /* If the middle values do not represent a proper range fail.  */\n-  if (double_int_cmp (middlemin, middlemax,\n-\t\t      TYPE_UNSIGNED (TREE_TYPE (middleop))) > 0)\n+  /* If the middle values are not equal to the original values fail.\n+     But only if the inner cast truncates (thus we ignore differences\n+     in extension to handle the case going from a range to an anti-range\n+     and back).  */\n+  if ((TYPE_PRECISION (TREE_TYPE (innerop))\n+       > TYPE_PRECISION (TREE_TYPE (middleop)))\n+      && (!double_int_equal_p (innermin, middlemin)\n+\t  || !double_int_equal_p (innermax, middlemax)))\n     return false;\n+  /* Require that the final conversion applied to both the original\n+     and the intermediate range produces the same result.  */\n   if (!double_int_equal_p (double_int_ext (middlemin,\n \t\t\t\t\t   TYPE_PRECISION (finaltype),\n \t\t\t\t\t   TYPE_UNSIGNED (finaltype)),"}]}