{"sha": "0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzODYwMjdiN2QwODZmNGQ4ZTBiN2Y1YTM3NzhkYjFkMDhlNmEyOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-05-28T08:54:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-28T08:54:55Z"}, "message": "[Ada] Fix internal error on nested record types with representation clause\n\nThis fixes a long-standing issue with the expansion of equality functions\ngenerated for discriminated record types with variant part.  In this case\nthe front-end recursively expands equality functions for the composite\nsub-components, in particular the array sub-components.\n\nBut it systematically uses the unconstrained base type for them, which leads\nto both a more complex equality function, because of the need to compare\nthe bounds, and an additional unchecked conversion from type to base type.\n\nNow this unchecked conversion may block a further expansion of the array\nsub-component, for example if it is a large array of record types subject\nto a component clause that causes it not to start on a byte boundary, and\nthus may lead to an internal error downstream in the back-end.\n\n2018-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_Composite_Equality): For a composite (or FP)\n\tcomponent type, do not expand array equality using the unconstrained\n\tbase type, except for the case where the bounds of the type depend on a\n\tdiscriminant.\n\ngcc/testsuite/\n\n\t* gnat.dg/rep_clause6.adb, gnat.dg/rep_clause6.ads: New testcase.\n\nFrom-SVN: r260834", "tree": {"sha": "d597f254e7673fe8aaa665831c430e8809d697a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d597f254e7673fe8aaa665831c430e8809d697a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/comments", "author": null, "committer": null, "parents": [{"sha": "c84205cd4fb4122a092207542c55a92b62bcb314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84205cd4fb4122a092207542c55a92b62bcb314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c84205cd4fb4122a092207542c55a92b62bcb314"}], "stats": {"total": 103, "additions": 101, "deletions": 2}, "files": [{"sha": "b10bd6ea62541e780a32b147a1a95803017aef66", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "patch": "@@ -1,3 +1,10 @@\n+2018-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Composite_Equality): For a composite (or FP)\n+\tcomponent type, do not expand array equality using the unconstrained\n+\tbase type, except for the case where the bounds of the type depend on a\n+\tdiscriminant.\n+\n 2018-05-28  Ed Schonberg  <schonberg@adacore.com>\n \n \t* einfo.ads, einfo.adb (Needs_Activation_Record): New flag on"}, {"sha": "508123dd13b70362dccd74b8c6800ff544e7c9fa", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "patch": "@@ -2428,12 +2428,34 @@ package body Exp_Ch4 is\n \n          --  For composite component types, and floating-point types, use the\n          --  expansion. This deals with tagged component types (where we use\n-         --  the applicable equality routine) and floating-point, (where we\n+         --  the applicable equality routine) and floating-point (where we\n          --  need to worry about negative zeroes), and also the case of any\n          --  composite type recursively containing such fields.\n \n          else\n-            return Expand_Array_Equality (Nod, Lhs, Rhs, Bodies, Full_Type);\n+            declare\n+               Comp_Typ : Entity_Id;\n+\n+            begin\n+               --  Do the comparison in the type (or its full view) and not in\n+               --  its unconstrained base type, because the latter operation is\n+               --  more complex and would also require an unchecked conversion.\n+\n+               if Is_Private_Type (Typ) then\n+                  Comp_Typ := Underlying_Type (Typ);\n+               else\n+                  Comp_Typ := Typ;\n+               end if;\n+\n+               --  Except for the case where the bounds of the type depend on a\n+               --  discriminant, or else we would run into scoping issues.\n+\n+               if Size_Depends_On_Discriminant (Comp_Typ) then\n+                  Comp_Typ := Full_Type;\n+               end if;\n+\n+               return Expand_Array_Equality (Nod, Lhs, Rhs, Bodies, Comp_Typ);\n+            end;\n          end if;\n \n       --  Case of tagged record types"}, {"sha": "a7edd014a74e2a0d3020935e0be0611116ddf0c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "patch": "@@ -1,3 +1,7 @@\n+2018-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/rep_clause6.adb, gnat.dg/rep_clause6.ads: New testcase.\n+\n 2018-05-28  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/fixedpnt5.adb: New testcase."}, {"sha": "6012ffea7e147a71769e573944ff2599dec3ba2e", "filename": "gcc/testsuite/gnat.dg/rep_clause6.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause6.adb?ref=0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+\n+package body Rep_Clause6 is\n+   procedure Dummy is null;\n+end Rep_Clause6;"}, {"sha": "6b0b0d044c6fd1ad203e5c1c1667717447e438a4", "filename": "gcc/testsuite/gnat.dg/rep_clause6.ads", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause6.ads?ref=0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "patch": "@@ -0,0 +1,61 @@\n+package Rep_Clause6 is\n+\n+   type B1_Type is range 0 .. 2**1 - 1;\n+   for B1_Type'Size use 1;\n+\n+   type U10_Type is range 0 .. 2**10 - 1;\n+   for U10_Type'Size use 10;\n+\n+   type B5_Type is range 0 .. 2**5 - 1;\n+   for B5_Type'Size use 5;\n+\n+   type B11_Type is range 0 .. 2**11 - 1;\n+   for B11_Type'Size use 11;\n+\n+   type Rec1 is record\n+      B1  : B1_Type;\n+      U10 : U10_Type;\n+      B5  : B5_Type;\n+   end record;\n+\n+   for Rec1 use record\n+      B1  at 0 range 0  ..  0;\n+      U10 at 0 range 1  .. 10;\n+      B5  at 0 range 11 .. 15;\n+   end record;\n+   for Rec1'Size use 16;\n+\n+   type Arr is array (1 .. 5) of Rec1;\n+   for Arr'Size use 80;\n+\n+   subtype Header_Type is String (1 .. 16);\n+\n+   type Rec2 is record\n+      Header          : Header_Type;\n+      Spare_5         : B5_Type;\n+      Deleted_Reports : Arr;\n+      Block_End       : B11_Type;\n+   end record;\n+\n+   for Rec2 use record\n+      Header          at 0  range 0  .. 127;\n+      Spare_5         at 16 range 0  ..   4;\n+      Deleted_Reports at 16 range 5  ..  84;\n+      Block_End       at 24 range 21 ..  31;\n+   end record;\n+   for Rec2'Size use 224;\n+\n+   type Enum is (A_Msg, B_Msg, C_Msg, D_Msg);\n+\n+   type Rec3 (Msg_Type : Enum := Enum'First) is record\n+      case Msg_Type is\n+         when A_Msg => A_M : Arr;\n+         when B_Msg => B_M : Arr;\n+         when C_Msg => C_M : Rec2;\n+         when others => null;\n+      end case;\n+   end record;\n+\n+   procedure Dummy;\n+\n+end Rep_Clause6;"}]}