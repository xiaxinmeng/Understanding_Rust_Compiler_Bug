{"sha": "61fad608d4ccacdccacec499f8b3fbe73a125c70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmYWQ2MDhkNGNjYWNkY2NhY2VjNDk5ZjhiM2ZiZTczYTEyNWM3MA==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2018-02-11T18:59:59Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2018-02-11T18:59:59Z"}, "message": "gfortran.texi: Fix typos in documentation of caf_register ().\n\ngcc/fortran/ChangeLog:\n\n2018-02-11  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\t* gfortran.texi: Fix typos in documentation of caf_register ().\n\t* trans-array.c (structure_alloc_comps): Only register a component of\n\ta derived typed corray, not of an ultimate component coarray.\n\nFrom-SVN: r257567", "tree": {"sha": "0719fd8f2ab14e9ff6b5cfcb9ab79b5929aa4c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0719fd8f2ab14e9ff6b5cfcb9ab79b5929aa4c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61fad608d4ccacdccacec499f8b3fbe73a125c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fad608d4ccacdccacec499f8b3fbe73a125c70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fad608d4ccacdccacec499f8b3fbe73a125c70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fad608d4ccacdccacec499f8b3fbe73a125c70/comments", "author": null, "committer": null, "parents": [{"sha": "5f0367d00a18d036cb0d2f7457daeca50d623d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0367d00a18d036cb0d2f7457daeca50d623d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0367d00a18d036cb0d2f7457daeca50d623d8e"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "9d0ab3a23b983dc1358950ca4cad4709b92f7ff6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fad608d4ccacdccacec499f8b3fbe73a125c70/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fad608d4ccacdccacec499f8b3fbe73a125c70/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=61fad608d4ccacdccacec499f8b3fbe73a125c70", "patch": "@@ -1,3 +1,9 @@\n+2018-02-11  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* gfortran.texi: Fix typos in documentation of caf_register ().\n+\t* trans-array.c (structure_alloc_comps): Only register a component of\n+\ta derived typed corray, not of an ultimate component coarray.\n+\n 2018-02-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/54223"}, {"sha": "9ffe6ade66194cb40910ec87889bf89c76cfd012", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fad608d4ccacdccacec499f8b3fbe73a125c70/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fad608d4ccacdccacec499f8b3fbe73a125c70/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=61fad608d4ccacdccacec499f8b3fbe73a125c70", "patch": "@@ -4453,8 +4453,8 @@ is not used then.  On the contrary when\n @code{CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY} is specified, then the\n @var{token} needs to be registered by a previous call with regtype\n @code{CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY} and either the memory specified\n-in the @var{desc}'s data-ptr is registered or allocate when the data-ptr is\n-NULL.\n+in the @var{DESC}'s data-ptr is registered or allocate when the data-ptr is\n+@code{NULL}.\n \n @item @emph{Syntax}:\n @code{void caf_register (size_t size, caf_register_t type, caf_token_t *token,\n@@ -4468,24 +4468,24 @@ allocated; for lock types and event types, the number of elements.\n @item @var{token} @tab intent(out) An opaque pointer identifying the coarray.\n @item @var{desc} @tab intent(inout) The (pseudo) array descriptor.\n @item @var{stat} @tab intent(out) For allocatable coarrays, stores the STAT=;\n-may be NULL\n+may be @code{NULL}\n @item @var{errmsg} @tab intent(out) When an error occurs, this will be set to\n-an error message; may be NULL\n+an error message; may be @code{NULL}\n @item @var{errmsg_len} @tab the buffer size of errmsg.\n @end multitable\n \n @item @emph{NOTES}\n-Nonalloatable coarrays have to be registered prior use from remote images.\n+Nonallocatable coarrays have to be registered prior use from remote images.\n In order to guarantee this, they have to be registered before the main\n program. This can be achieved by creating constructor functions. That is what\n-GCC does such that also nonallocatable coarrays the memory is allocated and no\n-static memory is used.  The token permits to identify the coarray; to the\n+GCC does such that also for nonallocatable coarrays the memory is allocated and\n+no static memory is used.  The token permits to identify the coarray; to the\n processor, the token is a nonaliasing pointer. The library can, for instance,\n store the base address of the coarray in the token, some handle or a more\n complicated struct.  The library may also store the array descriptor\n @var{DESC} when its rank is non-zero.\n \n-For lock types, the value shall only used for checking the allocation\n+For lock types, the value shall only be used for checking the allocation\n status. Note that for critical blocks, the locking is only required on one\n image; in the locking statement, the processor shall always pass an\n image index of one for critical-block lock variables"}, {"sha": "4ffda26ca7d2beeff1a237ed873f67c2087b94ba", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fad608d4ccacdccacec499f8b3fbe73a125c70/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fad608d4ccacdccacec499f8b3fbe73a125c70/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=61fad608d4ccacdccacec499f8b3fbe73a125c70", "patch": "@@ -8747,15 +8747,17 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      cmp_has_alloc_comps = false;\n \t    }\n \n-\t  if (flag_coarray == GFC_FCOARRAY_LIB\n-\t      && (caf_in_coarray (caf_mode) || c->attr.codimension))\n+\t  if (flag_coarray == GFC_FCOARRAY_LIB && caf_in_coarray (caf_mode))\n \t    {\n-\t      /* Register the component with the coarray library.  */\n+\t      /* Register a component of a derived type coarray with the\n+\t\t coarray library.  Do not register ultimate component\n+\t\t coarrays here.  They are treated like regular coarrays and\n+\t\t are either allocated on all images or on none.  */\n \t      tree token;\n \n \t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n \t\t\t\t      decl, cdecl, NULL_TREE);\n-\t      if (c->attr.dimension || c->attr.codimension)\n+\t      if (c->attr.dimension)\n \t\t{\n \t\t  /* Set the dtype, because caf_register needs it.  */\n \t\t  gfc_add_modify (&fnblock, gfc_conv_descriptor_dtype (comp),"}]}