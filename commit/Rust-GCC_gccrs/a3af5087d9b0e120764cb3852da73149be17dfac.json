{"sha": "a3af5087d9b0e120764cb3852da73149be17dfac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhZjUwODdkOWIwZTEyMDc2NGNiMzg1MmRhNzMxNDliZTE3ZGZhYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-05-04T12:23:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-05-04T12:23:50Z"}, "message": "intl.c (locale_encoding, [...]): New.\n\n\t* intl.c (locale_encoding, locale_utf8): New.\n\t(gcc_init_libintl): Initialize locale_encoding and locale_utf8.\n\t* intl.h (locale_encoding, locale_utf8): Declare.\n\t* pretty-print.c: Include ggc.h.  Include iconv.h if HAVE_ICONV.\n\t(pp_base_tree_identifier, decode_utf8_char, identifier_to_locale):\n\tNew.\n\t* pretty-print.h (pp_identifier): Call identifier_to_locale on ID\n\targument.\n\t(pp_tree_identifier): Define to call pp_base_tree_identifier.\n\t(pp_base_tree_identifier): Declare as function.\n\t(identifier_to_locale): Declare.\n\t* Makefile.in (pretty-print.o): Update dependencies.\n\t* varasm.c (finish_aliases_1): Use %qE for identifiers in\n\tdiagnostics.\n\ntestsuite:\n\t* gcc.dg/attr-alias-5.c, gcc.dg/ucnid-7.c: New tests.\n\nFrom-SVN: r147096", "tree": {"sha": "f7e08408fe3883d28eb96bdfd6745551e07b82a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7e08408fe3883d28eb96bdfd6745551e07b82a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3af5087d9b0e120764cb3852da73149be17dfac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3af5087d9b0e120764cb3852da73149be17dfac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3af5087d9b0e120764cb3852da73149be17dfac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3af5087d9b0e120764cb3852da73149be17dfac/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea5cd5f17f80c6f6d6cf8b2a0868675e7c8ea391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5cd5f17f80c6f6d6cf8b2a0868675e7c8ea391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5cd5f17f80c6f6d6cf8b2a0868675e7c8ea391"}], "stats": {"total": 316, "additions": 299, "deletions": 17}, "files": [{"sha": "0897c6f637ff2e042ec9d8a95839ea5c04048b17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -1,3 +1,20 @@\n+2009-05-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* intl.c (locale_encoding, locale_utf8): New.\n+\t(gcc_init_libintl): Initialize locale_encoding and locale_utf8.\n+\t* intl.h (locale_encoding, locale_utf8): Declare.\n+\t* pretty-print.c: Include ggc.h.  Include iconv.h if HAVE_ICONV.\n+\t(pp_base_tree_identifier, decode_utf8_char, identifier_to_locale):\n+\tNew.\n+\t* pretty-print.h (pp_identifier): Call identifier_to_locale on ID\n+\targument.\n+\t(pp_tree_identifier): Define to call pp_base_tree_identifier.\n+\t(pp_base_tree_identifier): Declare as function.\n+\t(identifier_to_locale): Declare.\n+\t* Makefile.in (pretty-print.o): Update dependencies.\n+\t* varasm.c (finish_aliases_1): Use %qE for identifiers in\n+\tdiagnostics.\n+\n 2009-05-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/40015"}, {"sha": "0e13e49eeec12db2b7c12f7c285a291d82a57127", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -3068,7 +3068,7 @@ params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) $(TO\n pointer-set.o: pointer-set.c pointer-set.h $(CONFIG_H) $(SYSTEM_H)\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n pretty-print.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h $(PRETTY_PRINT_H) \\\n-   $(TREE_H)\n+   $(TREE_H) $(GGC_H)\n errors.o : errors.c $(CONFIG_H) $(SYSTEM_H) errors.h $(BCONFIG_H)\n dbgcnt.o: dbgcnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h errors.h $(DBGCNT_H) \\\n    $(TM_H) $(RTL_H) output.h"}, {"sha": "5b486151dcdf471505118bfee4f08e1623f3f6a4", "filename": "gcc/intl.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fintl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fintl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl.c?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -1,5 +1,5 @@\n /* Message translation utilities.\n-   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -34,6 +34,12 @@ const char *open_quote = \"'\";\n /* Closing quotation mark for diagnostics.  */\n const char *close_quote = \"'\";\n \n+/* The name of the locale encoding.  */\n+const char *locale_encoding = NULL;\n+\n+/* Whether the locale is using UTF-8.  */\n+bool locale_utf8 = false;\n+\n #ifdef ENABLE_NLS\n \n /* Initialize the translation library for GCC.  This performs the\n@@ -60,20 +66,22 @@ gcc_init_libintl (void)\n   /* Closing quotation mark.  */\n   close_quote = _(\"'\");\n \n-  if (!strcmp (open_quote, \"`\") && !strcmp (close_quote, \"'\"))\n-    {\n #if defined HAVE_LANGINFO_CODESET\n-      const char *encoding;\n+  locale_encoding = nl_langinfo (CODESET);\n+  if (locale_encoding != NULL\n+      && (!strcasecmp (locale_encoding, \"utf-8\")\n+\t  || !strcasecmp (locale_encoding, \"utf8\")))\n+    locale_utf8 = true;\n #endif\n+\n+  if (!strcmp (open_quote, \"`\") && !strcmp (close_quote, \"'\"))\n+    {\n       /* Untranslated quotes that it may be possible to replace with\n \t U+2018 and U+2019; but otherwise use \"'\" instead of \"`\" as\n \t opening quote.  */\n       open_quote = \"'\";\n #if defined HAVE_LANGINFO_CODESET\n-      encoding = nl_langinfo (CODESET);\n-      if (encoding != NULL\n-\t  && (!strcasecmp (encoding, \"utf-8\")\n-\t      || !strcasecmp (encoding, \"utf8\")))\n+      if (locale_utf8)\n \t{\n \t  open_quote = \"\\xe2\\x80\\x98\";\n \t  close_quote = \"\\xe2\\x80\\x99\";"}, {"sha": "902e7ae423cfa146b0e5a717375ad096fdbdc618", "filename": "gcc/intl.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fintl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fintl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl.h?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -1,5 +1,5 @@\n /* intl.h - internationalization\n-   Copyright 1998, 2001, 2003, 2004, 2007 Free Software Foundation, Inc.\n+   Copyright 1998, 2001, 2003, 2004, 2007, 2009 Free Software Foundation, Inc.\n \n    GCC is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -56,5 +56,7 @@ extern size_t gcc_gettext_width (const char *);\n \n extern const char *open_quote;\n extern const char *close_quote;\n+extern const char *locale_encoding;\n+extern bool locale_utf8;\n \n #endif /* intl.h */"}, {"sha": "d531075c933bdc98962fa88c6f61997a18e43242", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -26,6 +26,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"pretty-print.h\"\n #include \"tree.h\"\n+#include \"ggc.h\"\n+\n+#if HAVE_ICONV\n+#include <iconv.h>\n+#endif\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free  free\n@@ -844,3 +849,228 @@ pp_base_maybe_space (pretty_printer *pp)\n       pp_base (pp)->padding = pp_none;\n     }\n }\n+\n+/* Print the identifier ID to PRETTY-PRINTER.  */\n+\n+void\n+pp_base_tree_identifier (pretty_printer *pp, tree id)\n+{\n+  const char *text = identifier_to_locale (IDENTIFIER_POINTER (id));\n+  pp_append_text (pp, text, text + strlen (text));\n+}\n+\f\n+/* The string starting at P has LEN (at least 1) bytes left; if they\n+   start with a valid UTF-8 sequence, return the length of that\n+   sequence and set *VALUE to the value of that sequence, and\n+   otherwise return 0 and set *VALUE to (unsigned int) -1.  */\n+\n+static int\n+decode_utf8_char (const unsigned char *p, size_t len, unsigned int *value)\n+{\n+  unsigned int t = *p;\n+\n+  if (len == 0)\n+    abort ();\n+  if (t & 0x80)\n+    {\n+      size_t utf8_len = 0;\n+      unsigned int ch;\n+      size_t i;\n+      for (t = *p; t & 0x80; t <<= 1)\n+\tutf8_len++;\n+\n+      if (utf8_len > len || utf8_len < 2 || utf8_len > 6)\n+\t{\n+\t  *value = (unsigned int) -1;\n+\t  return 0;\n+\t}\n+      ch = *p & ((1 << (7 - utf8_len)) - 1);\n+      for (i = 1; i < utf8_len; i++)\n+\t{\n+\t  unsigned int u = p[i];\n+\t  if ((u & 0xC0) != 0x80)\n+\t    {\n+\t      *value = (unsigned int) -1;\n+\t      return 0;\n+\t    }\n+\t  ch = (ch << 6) | (u & 0x3F);\n+\t}\n+      if (   (ch <=      0x7F && utf8_len > 1)\n+\t  || (ch <=     0x7FF && utf8_len > 2)\n+\t  || (ch <=    0xFFFF && utf8_len > 3)\n+\t  || (ch <=  0x1FFFFF && utf8_len > 4)\n+\t  || (ch <= 0x3FFFFFF && utf8_len > 5)\n+\t  || (ch >= 0xD800 && ch <= 0xDFFF))\n+\t{\n+\t  *value = (unsigned int) -1;\n+\t  return 0;\n+\t}\n+      *value = ch;\n+      return utf8_len;\n+    }\n+  else\n+    {\n+      *value = t;\n+      return 1;\n+    }\n+}\n+\n+/* Given IDENT, an identifier in the internal encoding, return a\n+   version of IDENT suitable for diagnostics in the locale character\n+   set: either IDENT itself, or a garbage-collected string converted\n+   to the locale character set and using escape sequences if not\n+   representable in the locale character set or containing control\n+   characters or invalid byte sequences.  Existing backslashes in\n+   IDENT are not doubled, so the result may not uniquely specify the\n+   contents of an arbitrary byte sequence identifier.  */\n+\n+const char *\n+identifier_to_locale (const char *ident)\n+{\n+  const unsigned char *uid = (const unsigned char *) ident;\n+  size_t idlen = strlen (ident);\n+  bool valid_printable_utf8 = true;\n+  bool all_ascii = true;\n+  size_t i;\n+\n+  for (i = 0; i < idlen;)\n+    {\n+      unsigned int c;\n+      size_t utf8_len = decode_utf8_char (&uid[i], idlen - i, &c);\n+      if (utf8_len == 0 || c <= 0x1F || (c >= 0x7F && c <= 0x9F))\n+\t{\n+\t  valid_printable_utf8 = false;\n+\t  break;\n+\t}\n+      if (utf8_len > 1)\n+\tall_ascii = false;\n+      i += utf8_len;\n+    }\n+\n+  /* If IDENT contains invalid UTF-8 sequences (which may occur with\n+     attributes putting arbitrary byte sequences in identifiers), or\n+     control characters, we use octal escape sequences for all bytes\n+     outside printable ASCII.  */\n+  if (!valid_printable_utf8)\n+    {\n+      char *ret = GGC_NEWVEC (char, 4 * idlen + 1);\n+      char *p = ret;\n+      for (i = 0; i < idlen; i++)\n+\t{\n+\t  if (uid[i] > 0x1F && uid[i] < 0x7F)\n+\t    *p++ = uid[i];\n+\t  else\n+\t    {\n+\t      sprintf (p, \"\\\\%03o\", uid[i]);\n+\t      p += 4;\n+\t    }\n+\t}\n+      *p = 0;\n+      return ret;\n+    }\n+\n+  /* Otherwise, if it is valid printable ASCII, or printable UTF-8\n+     with the locale character set being UTF-8, IDENT is used.  */\n+  if (all_ascii || locale_utf8)\n+    return ident;\n+\n+  /* Otherwise IDENT is converted to the locale character set if\n+     possible.  */\n+#if defined ENABLE_NLS && defined HAVE_LANGINFO_CODESET && HAVE_ICONV\n+  if (locale_encoding != NULL)\n+    {\n+      iconv_t cd = iconv_open (locale_encoding, \"UTF-8\");\n+      bool conversion_ok = true;\n+      char *ret = NULL;\n+      if (cd != (iconv_t) -1)\n+\t{\n+\t  size_t ret_alloc = 4 * idlen + 1;\n+\t  for (;;)\n+\t    {\n+\t      /* Repeat the whole conversion process as needed with\n+\t\t larger buffers so non-reversible transformations can\n+\t\t always be detected.  */\n+\t      ICONV_CONST char *inbuf = CONST_CAST (char *, ident);\n+\t      char *outbuf;\n+\t      size_t inbytesleft = idlen;\n+\t      size_t outbytesleft = ret_alloc - 1;\n+\t      size_t iconv_ret;\n+\n+\t      ret = GGC_NEWVEC (char, ret_alloc);\n+\t      outbuf = ret;\n+\n+\t      if (iconv (cd, 0, 0, 0, 0) == (size_t) -1)\n+\t\t{\n+\t\t  conversion_ok = false;\n+\t\t  break;\n+\t\t}\n+\n+\t      iconv_ret = iconv (cd, &inbuf, &inbytesleft,\n+\t\t\t\t &outbuf, &outbytesleft);\n+\t      if (iconv_ret == (size_t) -1 || inbytesleft != 0)\n+\t\t{\n+\t\t  if (errno == E2BIG)\n+\t\t    {\n+\t\t      ret_alloc *= 2;\n+\t\t      ggc_free (ret);\n+\t\t      ret = NULL;\n+\t\t      continue;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      conversion_ok = false;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      else if (iconv_ret != 0)\n+\t\t{\n+\t\t  conversion_ok = false;\n+\t\t  break;\n+\t\t}\n+\t      /* Return to initial shift state.  */\n+\t      if (iconv (cd, 0, 0, &outbuf, &outbytesleft) == (size_t) -1)\n+\t\t{\n+\t\t  if (errno == E2BIG)\n+\t\t    {\n+\t\t      ret_alloc *= 2;\n+\t\t      ggc_free (ret);\n+\t\t      ret = NULL;\n+\t\t      continue;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      conversion_ok = false;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      *outbuf = 0;\n+\t      break;\n+\t    }\n+\t  iconv_close (cd);\n+\t  if (conversion_ok)\n+\t    return ret;\n+\t}\n+    }\n+#endif\n+\n+  /* Otherwise, convert non-ASCII characters in IDENT to UCNs.  */\n+  {\n+    char *ret = GGC_NEWVEC (char, 10 * idlen + 1);\n+    char *p = ret;\n+    for (i = 0; i < idlen;)\n+      {\n+\tunsigned int c;\n+\tsize_t utf8_len = decode_utf8_char (&uid[i], idlen - i, &c);\n+\tif (utf8_len == 1)\n+\t  *p++ = uid[i];\n+\telse\n+\t  {\n+\t    sprintf (p, \"\\\\U%08x\", c);\n+\t    p += 10;\n+\t  }\n+\ti += utf8_len;\n+      }\n+    *p = 0;\n+    return ret;\n+  }\n+}"}, {"sha": "5829225960497b97e91cb7434204c746f767fed2", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -273,10 +273,9 @@ struct pretty_print_info\n    pp_scalar (PP, HOST_WIDEST_INT_PRINT_DEC, (HOST_WIDEST_INT) I)\n #define pp_pointer(PP, P)      pp_scalar (PP, \"%p\", P)\n \n-#define pp_identifier(PP, ID)  pp_string (PP, ID)\n+#define pp_identifier(PP, ID)  pp_string (PP, identifier_to_locale (ID))\n #define pp_tree_identifier(PP, T)                      \\\n-  pp_append_text(PP, IDENTIFIER_POINTER (T), \\\n-                 IDENTIFIER_POINTER (T) + IDENTIFIER_LENGTH (T))\n+  pp_base_tree_identifier (pp_base (PP), T)\n \n #define pp_unsupported_tree(PP, T)                         \\\n   pp_verbatim (pp_base (PP), \"#%qs not supported by %s#\", \\\n@@ -322,6 +321,7 @@ extern void pp_base_character (pretty_printer *, int);\n extern void pp_base_string (pretty_printer *, const char *);\n extern void pp_write_text_to_stream (pretty_printer *pp);\n extern void pp_base_maybe_space (pretty_printer *);\n+extern void pp_base_tree_identifier (pretty_printer *, tree);\n \n /* Switch into verbatim mode and return the old mode.  */\n static inline pp_wrapping_mode_t\n@@ -334,4 +334,6 @@ pp_set_verbatim_wrapping_ (pretty_printer *pp)\n }\n #define pp_set_verbatim_wrapping(PP) pp_set_verbatim_wrapping_ (pp_base (PP))\n \n+extern const char *identifier_to_locale (const char *);\n+\n #endif /* GCC_PRETTY_PRINT_H */"}, {"sha": "9fa40cb4807e7909d2e6c287779f45fefc1b3525", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -1,3 +1,7 @@\n+2009-05-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/attr-alias-5.c, gcc.dg/ucnid-7.c: New tests.\n+\n 2009-05-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/sparc/fpmul-2.c: Replace final_cleanup with optimized."}, {"sha": "554668d212f3e4418937d886b53d55f8e73eb02b", "filename": "gcc/testsuite/gcc.dg/attr-alias-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-5.c?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -0,0 +1,12 @@\n+/* Verify diagnostics for aliases to strings containing extended\n+   identifiers or bad characters.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-require-alias \"\" } */\n+\n+void f0 (void) __attribute__((alias(\"\\xa1\"))); /* { dg-error \"undefined symbol '\\\\\\\\241'\" } */\n+void f1 (void) __attribute__((alias(\"\\u00e9\"))); /* { dg-error \"undefined symbol '\\\\\\\\U000000e9'\" } */\n+void f2 (void) __attribute__((alias(\"\\uffff\"))); /* { dg-error \"undefined symbol '\\\\\\\\U0000ffff'\" } */\n+void f3 (void) __attribute__((alias(\"\\U000fffff\"))); /* { dg-error \"undefined symbol '\\\\\\\\U000fffff'\" } */\n+void f4 (void) __attribute__((alias(\"\\U00ffffff\"))); /* { dg-error \"undefined symbol '\\\\\\\\U00ffffff'\" } */\n+void f5 (void) __attribute__((alias(\"\\U0fffffff\"))); /* { dg-error \"undefined symbol '\\\\\\\\U0fffffff'\" } */"}, {"sha": "fe53a497ffa3686006e50eeb97eb40206f95d035", "filename": "gcc/testsuite/gcc.dg/ucnid-7.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-7.c?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -0,0 +1,7 @@\n+/* Verify diagnostics for extended identifiers refer to UCNs (in the C\n+   locale).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -fextended-identifiers\" } */\n+\n+void *p = &\\u00e9; /* { dg-error \"'\\\\\\\\U000000e9' undeclared\" } */\n+void *q = &\\u1e00; /* { dg-error \"'\\\\\\\\U00001e00' undeclared\" } */"}, {"sha": "0a7b4808b348190bb336424cc6d05bc29fb23012", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3af5087d9b0e120764cb3852da73149be17dfac/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a3af5087d9b0e120764cb3852da73149be17dfac", "patch": "@@ -5344,13 +5344,13 @@ finish_aliases_1 (void)\n       if (target_decl == NULL)\n \t{\n \t  if (! lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl)))\n-\t    error (\"%q+D aliased to undefined symbol %qs\",\n-\t\t   p->decl, IDENTIFIER_POINTER (p->target));\n+\t    error (\"%q+D aliased to undefined symbol %qE\",\n+\t\t   p->decl, p->target);\n \t}\n       else if (DECL_EXTERNAL (target_decl)\n \t       && ! lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl)))\n-\terror (\"%q+D aliased to external symbol %qs\",\n-\t       p->decl, IDENTIFIER_POINTER (p->target));\n+\terror (\"%q+D aliased to external symbol %qE\",\n+\t       p->decl, p->target);\n     }\n }\n "}]}