{"sha": "4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJiZjE0MWNmMTE2ZTNjNTljYmE2NmU5YzUxZmIzM2JjOTA3OTNmMQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-07-06T18:27:41Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-07-06T18:27:41Z"}, "message": "i386.c (ix86_function_ms_hook_prologue): Enable x64 support.\n\n2010-07-06  Kai Tietz  <kai.tietz@onevision.com>\n\n        * config/i386/i386.c (ix86_function_ms_hook_prologue): Enable x64\n        support.\n        (ix86_expand_prologue): Likewise.\n        (ix86_handle_fndecl_attribute): Likewise.\n        (ix86_asm_declare_function_name): New function for\n        ASM_DECLARE_FUNCTION_NAME.\n        * config/i386/i386.h (ASM_DECLARE_FUNCTION_NAME): New macro.\n        * config/i386/cygming.h (ASM_DECLARE_FUNCTION_NAME): Removed.\n        (SUBTARGET_ASM_DECLARE_FUNCTION_NAME): New macro.\n        * config/i386/i386-protos.h (ix86_asm_declare_function_name): New.\n        * doc/extend.texi: Adjust documentation about ms_hook_prologue\n        attribute.\n\nFrom-SVN: r161876", "tree": {"sha": "ef3126f4513a4254e0be8e50d4e20304bb60603a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef3126f4513a4254e0be8e50d4e20304bb60603a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/comments", "author": null, "committer": null, "parents": [{"sha": "15a1f8c52d3c4a019730742c4e802b0458b85b7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a1f8c52d3c4a019730742c4e802b0458b85b7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a1f8c52d3c4a019730742c4e802b0458b85b7e"}], "stats": {"total": 116, "additions": 86, "deletions": 30}, "files": [{"sha": "164b89060601ed3cd6667725aaaf80b17d71a66e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "patch": "@@ -1,3 +1,18 @@\n+2010-07-06  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/i386.c (ix86_function_ms_hook_prologue): Enable x64\n+\tsupport.\n+\t(ix86_expand_prologue): Likewise.\n+\t(ix86_handle_fndecl_attribute): Likewise.\n+\t(ix86_asm_declare_function_name): New function for\n+\tASM_DECLARE_FUNCTION_NAME.\n+\t* config/i386/i386.h (ASM_DECLARE_FUNCTION_NAME): New macro.\n+\t* config/i386/cygming.h (ASM_DECLARE_FUNCTION_NAME): Removed.\n+\t(SUBTARGET_ASM_DECLARE_FUNCTION_NAME): New macro.\n+\t* config/i386/i386-protos.h (ix86_asm_declare_function_name): New.\n+\t* doc/extend.texi: Adjust documentation about ms_hook_prologue\n+\tattribute.\n+\n 2010-07-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (immediate_operand): New mode attribute."}, {"sha": "a970ca2fc08dc52f7acb846361a23ad3320b203e", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "patch": "@@ -269,14 +269,13 @@ do {\t\t\t\t\t\t\\\n /* Write the extra assembler code needed to declare a function\n    properly.  If we are generating SDB debugging information, this\n    will happen automatically, so we only need to handle other cases.  */\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+#undef SUBTARGET_ASM_DECLARE_FUNCTION_NAME\n+#define SUBTARGET_ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       i386_pe_maybe_record_exported_symbol (DECL, NAME, 0);\t\t\\\n       if (write_symbols != SDB_DEBUG)\t\t\t\t\t\\\n \ti386_pe_declare_function_type (FILE, NAME, TREE_PUBLIC (DECL));\t\\\n-      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "021cbe7f166d97ff119e904186e34d377b2b8311", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "patch": "@@ -136,6 +136,7 @@ extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);\n \n extern rtx ix86_libcall_value (enum machine_mode);\n extern bool ix86_function_arg_regno_p (int);\n+extern void ix86_asm_declare_function_name (FILE *, const char *, tree);\n extern int ix86_function_arg_boundary (enum machine_mode, tree);\n extern bool ix86_sol10_return_in_memory (const_tree,const_tree);\n extern rtx ix86_force_to_memory (enum machine_mode, rtx);"}, {"sha": "0c404ae0be3e7085265ecfe18cfb8d3d29456740", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 56, "deletions": 23, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "patch": "@@ -5078,18 +5078,15 @@ ix86_function_type_abi (const_tree fntype)\n static bool\n ix86_function_ms_hook_prologue (const_tree fntype)\n {\n-  if (!TARGET_64BIT)\n+  if (lookup_attribute (\"ms_hook_prologue\", DECL_ATTRIBUTES (fntype)))\n     {\n-      if (lookup_attribute (\"ms_hook_prologue\", DECL_ATTRIBUTES (fntype)))\n-        {\n-          if (decl_function_context (fntype) != NULL_TREE)\n-          {\n-            error_at (DECL_SOURCE_LOCATION (fntype),\n-                \"ms_hook_prologue is not compatible with nested function\");\n-          }\n+      if (decl_function_context (fntype) != NULL_TREE)\n+      {\n+\terror_at (DECL_SOURCE_LOCATION (fntype),\n+\t    \"ms_hook_prologue is not compatible with nested function\");\n+      }\n \n-          return true;\n-        }\n+      return true;\n     }\n   return false;\n }\n@@ -5112,6 +5109,45 @@ ix86_cfun_abi (void)\n   return cfun->machine->call_abi;\n }\n \n+/* Write the extra assembler code needed to declare a function properly.  */\n+\n+void\n+ix86_asm_declare_function_name (FILE *asm_out_file, const char *fname,\n+\t\t\t\ttree decl)\n+{\n+  bool is_ms_hook = ((decl && ix86_function_ms_hook_prologue (decl)) ? true\n+  \t\t\t\t\t\t\t\t     : false);\n+#ifdef SUBTARGET_ASM_DECLARE_FUNCTION_NAME\n+  SUBTARGET_ASM_DECLARE_FUNCTION_NAME (asm_out_file, fname, decl);\n+#endif\n+\n+  if (is_ms_hook)\n+    {\n+      int i, filler_count = (TARGET_64BIT ? 32 : 16);\n+      unsigned int filler_cc = 0xcccccccc;\n+\n+      for (i = 0; i < filler_count; i += 4)\n+\tfprintf (asm_out_file, ASM_LONG \" %#x\\n\", filler_cc);\n+    }\n+\n+  ASM_OUTPUT_LABEL (asm_out_file, fname);\n+\n+  /* Output magic byte marker, if hot-patch attribute is set.\n+     For x86 case frame-pointer prologue will be emitted in\n+     expand_prologue.  */\n+  if (is_ms_hook)\n+    {\n+      if (TARGET_64BIT)\n+\t/* leaq [%rsp + 0], %rsp  */\n+\tasm_fprintf (asm_out_file, ASM_BYTE\n+\t\t     \"0x48, 0x8d, 0xa4, 0x24, \"\n+\t\t     \"0x00, 0x00, 0x00, 0x00\\n\");\n+      else\n+        /* movl.s %edi, %edi.  */\n+\tasm_fprintf (asm_out_file, ASM_BYTE \"0x8b, 0xff\\n\");\n+    }\n+}\n+\n /* regclass.c  */\n extern void init_regs (void);\n \n@@ -8757,21 +8793,24 @@ ix86_expand_prologue (void)\n \n   ix86_compute_frame_layout (&frame);\n \n-  if (ix86_function_ms_hook_prologue (current_function_decl))\n+  if (!TARGET_64BIT && ix86_function_ms_hook_prologue (current_function_decl))\n     {\n       rtx push, mov;\n \n       /* Make sure the function starts with\n-\t 8b ff     movl.s %edi,%edi\n+\t 8b ff     movl.s %edi,%edi (see below in text)\n \t 55        push   %ebp\n \t 8b ec     movl.s %esp,%ebp\n \n \t This matches the hookable function prologue in Win32 API\n \t functions in Microsoft Windows XP Service Pack 2 and newer.\n \t Wine uses this to enable Windows apps to hook the Win32 API\n-\t functions provided by Wine.  */\n-      insn = emit_insn (gen_vswapmov (gen_rtx_REG (SImode, DI_REG),\n-\t\t\t\t      gen_rtx_REG (SImode, DI_REG)));\n+\t functions provided by Wine.\n+\t Remark: Initial nop-move gets emitted by the function\n+\t ix86_asm_declare_function_name and isn't part of this\n+\t function.  The following instruction don't get hard-coded\n+\t in ix86_asm_declare_function_name too, as here notes\n+\t for those instructions are necessary for unwinder/debug.  */\n       push = emit_insn (gen_push (hard_frame_pointer_rtx));\n       mov = emit_insn (gen_vswapmov (hard_frame_pointer_rtx,\n \t\t\t\t     stack_pointer_rtx));\n@@ -26553,15 +26592,9 @@ ix86_handle_fndecl_attribute (tree *node, tree name,\n       return NULL_TREE;\n     }\n \n-  if (TARGET_64BIT)\n-    {\n-      warning (OPT_Wattributes, \"%qE attribute only available for 32-bit\",\n-               name);\n-      return NULL_TREE;\n-    }\n-\n #ifndef HAVE_AS_IX86_SWAP\n-  sorry (\"ms_hook_prologue attribute needs assembler swap suffix support\");\n+  if (!TARGET_64BIT)\n+    sorry (\"ms_hook_prologue attribute needs assembler swap suffix support\");\n #endif\n \n     return NULL_TREE;"}, {"sha": "e7bd36a50e751ca876fc260d14f223b4050e691b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "patch": "@@ -2082,6 +2082,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\n #endif\n \n+/* Write the extra assembler code needed to declare a function\n+   properly.  Target can add additional code by the sub-target\n+   macro SUBTARGET_ASM_DECLARE_FUNCTION_NAME.  */\n+\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n+  ix86_asm_declare_function_name (FILE, NAME, DECL)\n+\n /* Under some conditions we need jump tables in the text section,\n    because the assembler cannot handle label differences between\n    sections.  This is the case for x86_64 on Mach-O for example.  */"}, {"sha": "b9b4a44fd39df75c2547ecb8b2633287b09c102f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf141cf116e3c59cba66e9c51fb33bc90793f1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4bbf141cf116e3c59cba66e9c51fb33bc90793f1", "patch": "@@ -2736,10 +2736,10 @@ the @option{-maccumulate-outgoing-args} option.\n @item ms_hook_prologue\n @cindex @code{ms_hook_prologue} attribute\n \n-On 32 bit i[34567]86-*-* targets, you can use this function attribute to make\n-gcc generate the \"hot-patching\" function prologue used in Win32 API\n-functions in Microsoft Windows XP Service Pack 2 and newer. This requires\n-support for the swap suffix in the assembler. (GNU Binutils 2.19.51 or later)\n+On 32 bit i[34567]86-*-* targets and 64 bit x86_64-*-* targets, you can use\n+this function attribute to make gcc generate the \"hot-patching\" function\n+prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n+and newer.\n \n @item naked\n @cindex function without a prologue/epilogue code"}]}