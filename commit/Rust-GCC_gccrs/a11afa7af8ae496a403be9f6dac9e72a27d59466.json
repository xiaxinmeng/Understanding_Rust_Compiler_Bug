{"sha": "a11afa7af8ae496a403be9f6dac9e72a27d59466", "node_id": "C_kwDOANBUbNoAKGExMWFmYTdhZjhhZTQ5NmE0MDNiZTlmNmRhYzllNzJhMjdkNTk0NjY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-10T11:15:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-11T08:19:49Z"}, "message": "Apply TLC to control dependence compute\n\nThis makes the control dependence compute avoid a find_edge\nand optimizes allocation by embedding the bitmap head into the\nvector of control dependences instead of allocating all of them.\nIt also uses a local bitmap obstack.\n\nThe bitmap changes make it necessary to shuffle some includes.\n\n2021-11-10  Richard Biener  <rguenther@suse.de>\n\n\t* cfganal.h (control_dependences::control_dependence_map):\n\tEmbed bitmap_head.\n\t(control_dependences::m_bitmaps): New.\n\t* cfganal.c (control_dependences::set_control_dependence_map_bit):\n\tAdjust.\n\t(control_dependences::clear_control_dependence_bitmap):\n\tLikewise.\n\t(control_dependences::find_control_dependence): Do not\n\tfind_edge for the abnormal edge test.\n\t(control_dependences::control_dependences): Instead do not\n\tadd abnormal edges to the edge list.  Adjust.\n\t(control_dependences::~control_dependences): Likewise.\n\t(control_dependences::get_edges_dependent_on): Likewise.\n\t* function-tests.c: Include bitmap.h.\n\ngcc/analyzer/\n\t* supergraph.cc: Include bitmap.h.\n\ngcc/c/\n\t* gimple-parser.c: Shuffle bitmap.h include.", "tree": {"sha": "52bb7be98e95276ddcb557d53eb051ebe15bfca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52bb7be98e95276ddcb557d53eb051ebe15bfca8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11afa7af8ae496a403be9f6dac9e72a27d59466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11afa7af8ae496a403be9f6dac9e72a27d59466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11afa7af8ae496a403be9f6dac9e72a27d59466", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11afa7af8ae496a403be9f6dac9e72a27d59466/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97fdde627e64202940112009d45d17f85e4cc61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a97fdde627e64202940112009d45d17f85e4cc61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a97fdde627e64202940112009d45d17f85e4cc61"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "be8cec323276aa499f97fad6509929408594ab5f", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=a11afa7af8ae496a403be9f6dac9e72a27d59466", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graphviz.h\"\n #include \"cgraph.h\"\n #include \"tree-dfa.h\"\n+#include \"bitmap.h\"\n #include \"cfganal.h\"\n #include \"function.h\"\n #include \"json.h\""}, {"sha": "32f22dbb8a73ae14a883dc1629b4fb6a6afbae05", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=a11afa7af8ae496a403be9f6dac9e72a27d59466", "patch": "@@ -56,13 +56,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"cfg.h\"\n #include \"cfghooks.h\"\n+#include \"bitmap.h\"\n #include \"cfganal.h\"\n #include \"tree-cfg.h\"\n #include \"gimple-iterator.h\"\n #include \"cfgloop.h\"\n #include \"tree-phinodes.h\"\n #include \"tree-into-ssa.h\"\n-#include \"bitmap.h\"\n \n \n /* GIMPLE parser state.  */"}, {"sha": "11ab23623ae42d3348c956d8eb2eaf5b15279df0", "filename": "gcc/cfganal.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=a11afa7af8ae496a403be9f6dac9e72a27d59466", "patch": "@@ -362,14 +362,14 @@ control_dependences::set_control_dependence_map_bit (basic_block bb,\n   if (bb == ENTRY_BLOCK_PTR_FOR_FN (cfun))\n     return;\n   gcc_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));\n-  bitmap_set_bit (control_dependence_map[bb->index], edge_index);\n+  bitmap_set_bit (&control_dependence_map[bb->index], edge_index);\n }\n \n /* Clear all control dependences for block BB.  */\n void\n control_dependences::clear_control_dependence_bitmap (basic_block bb)\n {\n-  bitmap_clear (control_dependence_map[bb->index]);\n+  bitmap_clear (&control_dependence_map[bb->index]);\n }\n \n /* Find the immediate postdominator PDOM of the specified basic block BLOCK.\n@@ -402,13 +402,6 @@ control_dependences::find_control_dependence (int edge_index)\n \n   gcc_assert (get_edge_src (edge_index) != EXIT_BLOCK_PTR_FOR_FN (cfun));\n \n-  /* For abnormal edges, we don't make current_block control\n-     dependent because instructions that throw are always necessary\n-     anyway.  */\n-  edge e = find_edge (get_edge_src (edge_index), get_edge_dest (edge_index));\n-  if (e->flags & EDGE_ABNORMAL)\n-    return;\n-\n   if (get_edge_src (edge_index) == ENTRY_BLOCK_PTR_FOR_FN (cfun))\n     ending_block = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n   else\n@@ -440,11 +433,23 @@ control_dependences::control_dependences ()\n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun),\n \t\t  EXIT_BLOCK_PTR_FOR_FN (cfun), next_bb)\n     FOR_EACH_EDGE (e, ei, bb->succs)\n-      m_el.quick_push (std::make_pair (e->src->index, e->dest->index));\n+      {\n+\t/* For abnormal edges, we don't make current_block control\n+\t   dependent because instructions that throw are always necessary\n+\t   anyway.  */\n+\tif (e->flags & EDGE_ABNORMAL)\n+\t  {\n+\t    num_edges--;\n+\t    continue;\n+\t  }\n+\tm_el.quick_push (std::make_pair (e->src->index, e->dest->index));\n+      }\n \n+  bitmap_obstack_initialize (&m_bitmaps);\n   control_dependence_map.create (last_basic_block_for_fn (cfun));\n+  control_dependence_map.quick_grow (last_basic_block_for_fn (cfun));\n   for (int i = 0; i < last_basic_block_for_fn (cfun); ++i)\n-    control_dependence_map.quick_push (BITMAP_ALLOC (NULL));\n+    bitmap_initialize (&control_dependence_map[i], &m_bitmaps);\n   for (int i = 0; i < num_edges; ++i)\n     find_control_dependence (i);\n \n@@ -455,18 +460,17 @@ control_dependences::control_dependences ()\n \n control_dependences::~control_dependences ()\n {\n-  for (unsigned i = 0; i < control_dependence_map.length (); ++i)\n-    BITMAP_FREE (control_dependence_map[i]);\n   control_dependence_map.release ();\n   m_el.release ();\n+  bitmap_obstack_release (&m_bitmaps);\n }\n \n /* Returns the bitmap of edges the basic-block I is dependent on.  */\n \n bitmap\n control_dependences::get_edges_dependent_on (int i)\n {\n-  return control_dependence_map[i];\n+  return &control_dependence_map[i];\n }\n \n /* Returns the edge source with index I from the edge list.  */"}, {"sha": "7ef4319bf1db6ecdc370c9e01f9b642f489b3820", "filename": "gcc/cfganal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Fcfganal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Fcfganal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.h?ref=a11afa7af8ae496a403be9f6dac9e72a27d59466", "patch": "@@ -44,8 +44,9 @@ class control_dependences\n   void set_control_dependence_map_bit (basic_block, int);\n   void clear_control_dependence_bitmap (basic_block);\n   void find_control_dependence (int);\n-  vec<bitmap> control_dependence_map;\n+  vec<bitmap_head> control_dependence_map;\n   vec<std::pair<int, int> > m_el;\n+  bitmap_obstack m_bitmaps;\n };\n \n extern bool mark_dfs_back_edges (void);"}, {"sha": "83020498e481c3f9cdd0396e371f1fc976ac5560", "filename": "gcc/function-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Ffunction-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11afa7af8ae496a403be9f6dac9e72a27d59466/gcc%2Ffunction-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction-tests.c?ref=a11afa7af8ae496a403be9f6dac9e72a27d59466", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"dominance.h\"\n #include \"cfg.h\"\n+#include \"bitmap.h\"\n #include \"cfganal.h\"\n #include \"basic-block.h\"\n #include \"tree-ssa-alias.h\""}]}