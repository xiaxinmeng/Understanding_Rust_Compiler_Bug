{"sha": "70e2e8dc1dcf67876829f1ff69fe77258613394b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBlMmU4ZGMxZGNmNjc4NzY4MjlmMWZmNjlmZTc3MjU4NjEzMzk0Yg==", "commit": {"author": {"name": "Jeroen Frijters", "email": "jeroen@sumatra.nl", "date": "2003-03-14T11:54:38Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2003-03-14T11:54:38Z"}, "message": "ObjectInputStream.java (readObject): Cleaned up the class hierarchy loop.\n\n2003-02-14  Jeroen Frijters  <jeroen@sumatra.nl>\n\n       * java/io/ObjectInputStream.java (readObject): Cleaned up the class\n       hierarchy loop.\n       (readFields(Object,ObjectStreamField[],boolean)): Changed argument\n       list to Object,ObjectStreamClass, moved callReadMethod code up into\n       readObject and added Class argument to all setXxxField calls.\n       (callReadMethod): Changed Class argument to ObjectStreamClass to be\n       consistent with ObjectOutputStream and to facilitate caching the\n       Method in the future.\n       (setBooleanField): Added Class argument.\n       (setByteField): Likewise.\n       (setCharField): Likewise.\n       (setDoubleField): Likewise.\n       (setFloatField): Likewise.\n       (setIntField): Likewise.\n       (setLongField): Likewise.\n       (setShortField): Likewise.\n       (setObjectField): Likewise.\n       * java/io/ObjectOutputStream.java (writeObject): Cleaned up the\n       class hierarchy loop.\n       (defaultWriteObject): Call writeFields with new argument list.\n       (writeFields(Object,ObjectStreamField[],boolean): Changed argument\n       list to Object,ObjectStreamClass, moved callWriteMethod up into\n       writeObject and added Class argument to all getXxxField calls.\n       (callWriteMethod): Added ObjectStreamClass argument to be able to\n       get the proper class to call getMethod on (each class can have (or\n       not have) its own writeObject method).\n       (getBooleanField): Added Class argument.\n       (getByteField): Likewise.\n       (getCharField): Likewise.\n       (getDoubleField): Likewise.\n       (getFloatField): Likewise.\n       (getIntField): Likewise.\n       (getLongField): Likewise.\n       (getShortField): Likewise.\n       (getObjectField): Likewise.\n       * java/io/ObjectStreamClass.java (hasReadMethod): Added method to\n       facilitate caching the Method object in the future.\n\nFrom-SVN: r64351", "tree": {"sha": "43d8921b8292c787208a61bc7776888adfb3900e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d8921b8292c787208a61bc7776888adfb3900e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70e2e8dc1dcf67876829f1ff69fe77258613394b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e2e8dc1dcf67876829f1ff69fe77258613394b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e2e8dc1dcf67876829f1ff69fe77258613394b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e2e8dc1dcf67876829f1ff69fe77258613394b/comments", "author": null, "committer": null, "parents": [{"sha": "a721a60143b225f902f1d65324b6f9f9067b84c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a721a60143b225f902f1d65324b6f9f9067b84c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a721a60143b225f902f1d65324b6f9f9067b84c3"}], "stats": {"total": 240, "additions": 130, "deletions": 110}, "files": [{"sha": "b1d3b49939874985aede1ba3c3b754f0d0c273fe", "filename": "libjava/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2e8dc1dcf67876829f1ff69fe77258613394b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2e8dc1dcf67876829f1ff69fe77258613394b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=70e2e8dc1dcf67876829f1ff69fe77258613394b", "patch": "@@ -1,3 +1,43 @@\n+2003-02-14  Jeroen Frijters  <jeroen@sumatra.nl>\n+\n+\t* java/io/ObjectInputStream.java (readObject): Cleaned up the class\n+\thierarchy loop.\n+\t(readFields(Object,ObjectStreamField[],boolean)): Changed argument\n+\tlist to Object,ObjectStreamClass, moved callReadMethod code up into\n+\treadObject and added Class argument to all setXxxField calls.\n+\t(callReadMethod): Changed Class argument to ObjectStreamClass to be\n+\tconsistent with ObjectOutputStream and to facilitate caching the\n+\tMethod in the future.\n+\t(setBooleanField): Added Class argument.\n+\t(setByteField): Likewise.\n+\t(setCharField): Likewise.\n+\t(setDoubleField): Likewise.\n+\t(setFloatField): Likewise.\n+\t(setIntField): Likewise.\n+\t(setLongField): Likewise.\n+\t(setShortField): Likewise.\n+\t(setObjectField): Likewise.\n+\t* java/io/ObjectOutputStream.java (writeObject): Cleaned up the\n+\tclass hierarchy loop.\n+\t(defaultWriteObject): Call writeFields with new argument list.\n+\t(writeFields(Object,ObjectStreamField[],boolean): Changed argument\n+\tlist to Object,ObjectStreamClass, moved callWriteMethod up into\n+\twriteObject and added Class argument to all getXxxField calls.\n+\t(callWriteMethod): Added ObjectStreamClass argument to be able to\n+\tget the proper class to call getMethod on (each class can have (or\n+\tnot have) its own writeObject method).\n+\t(getBooleanField): Added Class argument.\n+\t(getByteField): Likewise.\n+\t(getCharField): Likewise.\n+\t(getDoubleField): Likewise.\n+\t(getFloatField): Likewise.\n+\t(getIntField): Likewise.\n+\t(getLongField): Likewise.\n+\t(getShortField): Likewise.\n+\t(getObjectField): Likewise.\n+\t* java/io/ObjectStreamClass.java (hasReadMethod): Added method to\n+\tfacilitate caching the Method object in the future.\n+\n 2003-03-12  Andreas Schwab  <schwab@suse.de>\n \n \t* configure.in: Avoid trailing /. in toolexeclibdir."}, {"sha": "7df96e5ffe8b9b81ae13d3108b4f76106b479a5a", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 33, "deletions": 60, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2e8dc1dcf67876829f1ff69fe77258613394b/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2e8dc1dcf67876829f1ff69fe77258613394b/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=70e2e8dc1dcf67876829f1ff69fe77258613394b", "patch": "@@ -368,35 +368,24 @@ public final Object readObject () throws ClassNotFoundException, IOException\n \t      ObjectStreamClass[] hierarchy =\n \t\tObjectStreamClass.getObjectStreamClasses (clazz);\n \t      \n-\t      boolean has_read;\n \t      for (int i=0; i < hierarchy.length; i++)\n \t\t{\n \t\t  this.currentObjectStreamClass = hierarchy[i];\n \t\t  \n \t\t  dumpElementln (\"Reading fields of \"\n \t\t\t\t + this.currentObjectStreamClass.getName ());\n-\t\t  \n-\t\t  has_read = true;\n-\t\t  \n-\t\t  try\n-\t\t    {\n-\t\t      this.currentObjectStreamClass.forClass ().\n-\t\t\tgetDeclaredMethod (\"readObject\", readObjectParams);\n-\t\t    }\n-\t\t  catch (NoSuchMethodException e)\n-\t\t    {\n-\t\t      has_read = false;\n-\t\t    }\n \n \t\t  // XXX: should initialize fields in classes in the hierarchy\n \t\t  // that aren't in the stream\n \t\t  // should skip over classes in the stream that aren't in the\n \t\t  // real classes hierarchy\n-\t\t  readFields (obj, this.currentObjectStreamClass.fields,\n-\t\t\t      has_read, this.currentObjectStreamClass);\n-\n-\t\t  if (has_read)\n+\t\t  \n+\t\t  if (this.currentObjectStreamClass.hasReadMethod())\n \t\t    {\n+\t\t      fieldsAlreadyRead = false;\n+\t\t      boolean oldmode = setBlockDataMode (true);\n+\t\t      callReadMethod (obj, this.currentObjectStreamClass);\n+\t\t      setBlockDataMode (oldmode);\n \t\t      dumpElement (\"ENDBLOCKDATA? \");\n \t\t      try\n \t\t\t{\n@@ -415,6 +404,10 @@ public final Object readObject () throws ClassNotFoundException, IOException\n \t\t\t  dumpElementln (\"no, got IOException\");\n \t\t\t}\n \t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      readFields (obj, currentObjectStreamClass);\n+\t\t    }\n \t\t}\n \n \t      this.currentObject = null;\n@@ -487,9 +480,7 @@ public void defaultReadObject ()\n       throw new NotActiveException (\"defaultReadObject called but fields already read from stream (by defaultReadObject or readFields)\");\n \n     boolean oldmode = setBlockDataMode(false);\n-    readFields (this.currentObject,\n-\t\tthis.currentObjectStreamClass.fields,\n-\t\tfalse, this.currentObjectStreamClass);\n+    readFields (this.currentObject, this.currentObjectStreamClass);\n     setBlockDataMode(oldmode);\n \n     fieldsAlreadyRead = true;\n@@ -1220,20 +1211,10 @@ private void readArrayElements (Object array, Class clazz)\n   }\n \n \n-  private void readFields (Object obj, ObjectStreamField[] stream_fields,\n-\t\t\t   boolean call_read_method,\n-\t\t\t   ObjectStreamClass stream_osc)\n+  private void readFields (Object obj, ObjectStreamClass stream_osc)\n     throws ClassNotFoundException, IOException\n   {\n-    if (call_read_method)\n-      {\n-\tfieldsAlreadyRead = false;\n-\tboolean oldmode = setBlockDataMode (true);\n-\tcallReadMethod (obj, stream_osc.forClass ());\n-\tsetBlockDataMode (oldmode);\n-\treturn;\n-      }\n-\n+    ObjectStreamField[] stream_fields = stream_osc.fields;\n     ObjectStreamField[] real_fields =\n       ObjectStreamClass.lookup (stream_osc.forClass ()).fields;\n \n@@ -1299,7 +1280,7 @@ else if (comp_val > 0)\n \t\tif (!default_initialize && set_value)\n \t\t  dumpElementln (\"  \" + field_name + \": \" + value);\n \t\tif (set_value)\n-\t\t  setBooleanField (obj, field_name, value);\n+\t\t  setBooleanField (obj, stream_osc.forClass (), field_name, value);\n \t      }\n \t    else if (type == Byte.TYPE)\n \t      {\n@@ -1308,7 +1289,7 @@ else if (type == Byte.TYPE)\n \t\tif (!default_initialize && set_value)\n \t\t  dumpElementln (\"  \" + field_name + \": \" + value);\n \t\tif (set_value)\n-\t\t  setByteField (obj, field_name, value);\n+\t\t  setByteField (obj, stream_osc.forClass (), field_name, value);\n \t      }\n \t    else if (type == Character.TYPE)\n \t      {\n@@ -1317,7 +1298,7 @@ else if (type == Character.TYPE)\n \t\tif (!default_initialize && set_value)\n \t\t  dumpElementln (\"  \" + field_name + \": \" + value);\n \t\tif (set_value)\n-\t\t  setCharField (obj, field_name, value);\n+\t\t  setCharField (obj, stream_osc.forClass (), field_name, value);\n \t      }\n \t    else if (type == Double.TYPE)\n \t      {\n@@ -1326,7 +1307,7 @@ else if (type == Double.TYPE)\n \t\tif (!default_initialize && set_value)\n \t\t  dumpElementln (\"  \" + field_name + \": \" + value);\n \t\tif (set_value)\n-\t\t  setDoubleField (obj, field_name, value);\n+\t\t  setDoubleField (obj, stream_osc.forClass (), field_name, value);\n \t      }\n \t    else if (type == Float.TYPE)\n \t      {\n@@ -1335,7 +1316,7 @@ else if (type == Float.TYPE)\n \t\tif (!default_initialize && set_value)\n \t\t  dumpElementln (\"  \" + field_name + \": \" + value);\n \t\tif (set_value)\n-\t\t  setFloatField (obj, field_name, value);\n+\t\t  setFloatField (obj, stream_osc.forClass (), field_name, value);\n \t      }\n \t    else if (type == Integer.TYPE)\n \t      {\n@@ -1344,7 +1325,7 @@ else if (type == Integer.TYPE)\n \t\tif (!default_initialize && set_value)\n \t\t  dumpElementln (\"  \" + field_name + \": \" + value);\n \t\tif (set_value)\n-\t\t  setIntField (obj, field_name, value);\n+\t\t  setIntField (obj, stream_osc.forClass (), field_name, value);\n \t      }\n \t    else if (type == Long.TYPE)\n \t      {\n@@ -1353,7 +1334,7 @@ else if (type == Long.TYPE)\n \t\tif (!default_initialize && set_value)\n \t\t  dumpElementln (\"  \" + field_name + \": \" + value);\n \t\tif (set_value)\n-\t\t  setLongField (obj, field_name, value);\n+\t\t  setLongField (obj, stream_osc.forClass (), field_name, value);\n \t      }\n \t    else if (type == Short.TYPE)\n \t      {\n@@ -1362,14 +1343,14 @@ else if (type == Short.TYPE)\n \t\tif (!default_initialize && set_value)\n \t\t  dumpElementln (\"  \" + field_name + \": \" + value);\n \t\tif (set_value)\n-\t\t  setShortField (obj, field_name, value);\n+\t\t  setShortField (obj, stream_osc.forClass (), field_name, value);\n \t      }\n \t    else\n \t      {\n \t\tObject value =\n \t\t  default_initialize ? null : readObject ();\n \t\tif (set_value)\n-\t\t  setObjectField (obj, field_name,\n+\t\t  setObjectField (obj, stream_osc.forClass (), field_name,\n \t\t\t\t  real_field.getTypeString (), value);\n \t      }\n \t  }\n@@ -1451,8 +1432,9 @@ private static Method getMethod (Class klass, String name, Class args[])\n     return klass.getDeclaredMethod(name, args);\n   }\n \n-  private void callReadMethod (Object obj, Class klass) throws IOException\n+  private void callReadMethod (Object obj, ObjectStreamClass osc) throws IOException\n   {\n+    Class klass = osc.forClass();\n     try\n       {\n \tClass classArgs[] = {ObjectInputStream.class};\n@@ -1486,12 +1468,11 @@ private native Object allocateObject (Class clazz)\n \n   private native void callConstructor (Class clazz, Object obj);\n \n-  private void setBooleanField (Object obj, String field_name,\n+  private void setBooleanField (Object obj, Class klass, String field_name,\n \t\t\t\tboolean val)\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tf.setAccessible(true);\n \tf.setBoolean (obj, val);\n@@ -1501,12 +1482,11 @@ private void setBooleanField (Object obj, String field_name,\n       }    \n   }\n \n-  private void setByteField (Object obj, String field_name,\n+  private void setByteField (Object obj, Class klass, String field_name,\n \t\t\t     byte val)\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tf.setAccessible(true);\n \tf.setByte (obj, val);\n@@ -1516,12 +1496,11 @@ private void setByteField (Object obj, String field_name,\n       }    \n   }\n \n-  private void setCharField (Object obj, String field_name,\n+  private void setCharField (Object obj, Class klass, String field_name,\n \t\t\t     char val)\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tf.setAccessible(true);\n \tf.setChar (obj, val);\n@@ -1531,12 +1510,11 @@ private void setCharField (Object obj, String field_name,\n       }    \n   }\n \n-  private void setDoubleField (Object obj, String field_name,\n+  private void setDoubleField (Object obj, Class klass, String field_name,\n \t\t\t       double val)\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tf.setAccessible(true);\n \tf.setDouble (obj, val);\n@@ -1546,12 +1524,11 @@ private void setDoubleField (Object obj, String field_name,\n       }    \n   }\n \n-  private void setFloatField (Object obj, String field_name,\n+  private void setFloatField (Object obj, Class klass, String field_name,\n \t\t\t      float val)\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tf.setAccessible(true);\n \tf.setFloat (obj, val);\n@@ -1561,12 +1538,11 @@ private void setFloatField (Object obj, String field_name,\n       }    \n   }\n \n-  private void setIntField (Object obj, String field_name,\n+  private void setIntField (Object obj, Class klass, String field_name,\n \t\t\t    int val)\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tf.setAccessible(true);\n \tf.setInt (obj, val);\n@@ -1577,12 +1553,11 @@ private void setIntField (Object obj, String field_name,\n   }\n \n \n-  private void setLongField (Object obj, String field_name,\n+  private void setLongField (Object obj, Class klass, String field_name,\n \t\t\t     long val)\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tf.setAccessible(true);\n \tf.setLong (obj, val);\n@@ -1593,12 +1568,11 @@ private void setLongField (Object obj, String field_name,\n   }\n \n \n-  private void setShortField (Object obj, String field_name,\n+  private void setShortField (Object obj, Class klass, String field_name,\n \t\t\t      short val)\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tf.setAccessible(true);\n \tf.setShort (obj, val);\n@@ -1609,12 +1583,11 @@ private void setShortField (Object obj, String field_name,\n   }\n \n \n-  private void setObjectField (Object obj, String field_name, String type_code,\n+  private void setObjectField (Object obj, Class klass, String field_name, String type_code,\n \t\t\t       Object val)\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tf.setAccessible(true);\n \t// FIXME: We should check the type_code here"}, {"sha": "a051a96f3d8052ad28a57cee176a69e4dec57c0b", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 35, "deletions": 50, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2e8dc1dcf67876829f1ff69fe77258613394b/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2e8dc1dcf67876829f1ff69fe77258613394b/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=70e2e8dc1dcf67876829f1ff69fe77258613394b", "patch": "@@ -354,16 +354,20 @@ public final void writeObject (Object obj) throws IOException\n \t\tObjectStreamClass[] hierarchy =\n \t\t  ObjectStreamClass.getObjectStreamClasses (clazz);\n \n-\t\tboolean has_write;\n \t\tfor (int i=0; i < hierarchy.length; i++)\n \t\t  {\n \t\t    currentObjectStreamClass = hierarchy[i];\n \n \t\t    fieldsAlreadyWritten = false;\n-\t\t    has_write = currentObjectStreamClass.hasWriteMethod ();\n-\n-\t\t    writeFields (obj, currentObjectStreamClass.fields,\n-\t\t\t\t has_write);\n+\t\t    if (currentObjectStreamClass.hasWriteMethod ())\n+\t\t      {\n+\t\t\tsetBlockDataMode (true);\n+\t\t\tcallWriteMethod (obj, currentObjectStreamClass);\n+\t\t\tsetBlockDataMode (false);\n+\t\t\trealOutput.writeByte (TC_ENDBLOCKDATA);\n+\t\t      }\n+\t\t    else\n+\t\t      writeFields (obj, currentObjectStreamClass);\n \t\t  }\n \n \t\tcurrentObject = null;\n@@ -424,7 +428,7 @@ public void defaultWriteObject ()\n     throws IOException, NotActiveException\n   {\n     markFieldsWritten ();\n-    writeFields (currentObject, currentObjectStreamClass.fields, false);\n+    writeFields (currentObject, currentObjectStreamClass);\n   }\n \n \n@@ -1145,22 +1149,12 @@ private void writeArraySizeAndElements (Object array, Class clazz)\n   }\n \n \n-  // writes out FIELDS of OBJECT.  If CALL_WRITE_METHOD is true, use\n-  // object's writeObject (ObjectOutputStream), otherwise use default\n-  // serialization.  FIELDS are already in canonical order.\n-  private void writeFields (Object obj,\n-\t\t\t    ObjectStreamField[] fields,\n-\t\t\t    boolean call_write_method) throws IOException\n+  // writes out FIELDS of OBJECT for the specified ObjectStreamClass.\n+  // FIELDS are already in canonical order.\n+  private void writeFields (Object obj, ObjectStreamClass osc)\n+    throws IOException\n   {\n-    if (call_write_method)\n-      {\n-\tsetBlockDataMode (true);\n-\tcallWriteMethod (obj);\n-\tsetBlockDataMode (false);\n-\trealOutput.writeByte (TC_ENDBLOCKDATA);\n-\treturn;\n-      }\n-\n+    ObjectStreamField[] fields = osc.fields;\n     boolean oldmode = setBlockDataMode (false);\n     String field_name;\n     Class type;\n@@ -1170,23 +1164,23 @@ private void writeFields (Object obj,\n \ttype = fields[i].getType ();\n \n \tif (type == Boolean.TYPE)\n-\t  realOutput.writeBoolean (getBooleanField (obj, field_name));\n+\t  realOutput.writeBoolean (getBooleanField (obj, osc.forClass(), field_name));\n \telse if (type == Byte.TYPE)\n-\t  realOutput.writeByte (getByteField (obj, field_name));\n+\t  realOutput.writeByte (getByteField (obj, osc.forClass(), field_name));\n \telse if (type == Character.TYPE)\n-\t  realOutput.writeChar (getCharField (obj, field_name));\n+\t  realOutput.writeChar (getCharField (obj, osc.forClass(), field_name));\n \telse if (type == Double.TYPE)\n-\t  realOutput.writeDouble (getDoubleField (obj, field_name));\n+\t  realOutput.writeDouble (getDoubleField (obj, osc.forClass(), field_name));\n \telse if (type == Float.TYPE)\n-\t  realOutput.writeFloat (getFloatField (obj, field_name));\n+\t  realOutput.writeFloat (getFloatField (obj, osc.forClass(), field_name));\n \telse if (type == Integer.TYPE)\n-\t  realOutput.writeInt (getIntField (obj, field_name));\n+\t  realOutput.writeInt (getIntField (obj, osc.forClass(), field_name));\n \telse if (type == Long.TYPE)\n-\t  realOutput.writeLong (getLongField (obj, field_name));\n+\t  realOutput.writeLong (getLongField (obj, osc.forClass(), field_name));\n \telse if (type == Short.TYPE)\n-\t  realOutput.writeShort (getShortField (obj, field_name));\n+\t  realOutput.writeShort (getShortField (obj, osc.forClass(), field_name));\n \telse\n-\t  writeObject (getObjectField (obj, field_name,\n+\t  writeObject (getObjectField (obj, osc.forClass(), field_name,\n \t\t\t\t       fields[i].getTypeString ()));\n       }\n     setBlockDataMode (oldmode);\n@@ -1212,9 +1206,9 @@ private boolean setBlockDataMode (boolean on) throws IOException\n   }\n \n \n-  private void callWriteMethod (Object obj) throws IOException\n+  private void callWriteMethod (Object obj, ObjectStreamClass osc) throws IOException\n   {\n-    Class klass = obj.getClass ();\n+    Class klass = osc.forClass();\n     try\n       {\n \tClass classArgs[] = {ObjectOutputStream.class};\n@@ -1243,12 +1237,11 @@ private void callWriteMethod (Object obj) throws IOException\n       }\n   }\n \n-  private boolean getBooleanField (Object obj, String field_name)\n+  private boolean getBooleanField (Object obj, Class klass, String field_name)\n     throws IOException\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tboolean b = f.getBoolean (obj);\n \treturn b;\n@@ -1259,11 +1252,10 @@ private boolean getBooleanField (Object obj, String field_name)\n       }    \n   }\n \n-  private byte getByteField (Object obj, String field_name) throws IOException\n+  private byte getByteField (Object obj, Class klass, String field_name) throws IOException\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tbyte b = f.getByte (obj);\n \treturn b;\n@@ -1274,11 +1266,10 @@ private byte getByteField (Object obj, String field_name) throws IOException\n       }    \n   }\n \n-  private char getCharField (Object obj, String field_name) throws IOException\n+  private char getCharField (Object obj, Class klass, String field_name) throws IOException\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tchar b = f.getChar (obj);\n \treturn b;\n@@ -1289,12 +1280,11 @@ private char getCharField (Object obj, String field_name) throws IOException\n       }    \n   }\n \n-  private double getDoubleField (Object obj, String field_name)\n+  private double getDoubleField (Object obj, Class klass, String field_name)\n     throws IOException\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tdouble b = f.getDouble (obj);\n \treturn b;\n@@ -1305,12 +1295,11 @@ private double getDoubleField (Object obj, String field_name)\n       }    \n   }\n \n-  private float getFloatField (Object obj, String field_name)\n+  private float getFloatField (Object obj, Class klass, String field_name)\n     throws IOException\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tfloat b = f.getFloat (obj);\n \treturn b;\n@@ -1321,11 +1310,10 @@ private float getFloatField (Object obj, String field_name)\n       }    \n   }\n \n-  private int getIntField (Object obj, String field_name) throws IOException\n+  private int getIntField (Object obj, Class klass, String field_name) throws IOException\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tint b = f.getInt (obj);\n \treturn b;\n@@ -1336,11 +1324,10 @@ private int getIntField (Object obj, String field_name) throws IOException\n       }    \n   }\n \n-  private long getLongField (Object obj, String field_name) throws IOException\n+  private long getLongField (Object obj, Class klass, String field_name) throws IOException\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tlong b = f.getLong (obj);\n \treturn b;\n@@ -1351,12 +1338,11 @@ private long getLongField (Object obj, String field_name) throws IOException\n       }    \n   }\n \n-  private short getShortField (Object obj, String field_name)\n+  private short getShortField (Object obj, Class klass, String field_name)\n     throws IOException\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tshort b = f.getShort (obj);\n \treturn b;\n@@ -1367,12 +1353,11 @@ private short getShortField (Object obj, String field_name)\n       }    \n   }\n \n-  private Object getObjectField (Object obj, String field_name,\n+  private Object getObjectField (Object obj, Class klass, String field_name,\n \t\t\t\t String type_code) throws IOException\n   {\n     try\n       {\n-\tClass klass = obj.getClass ();\n \tField f = getField (klass, field_name);\n \tObject o = f.get (obj);\n \t// FIXME: We should check the type_code here"}, {"sha": "19a69ec47bc7fa94dd2cea4c4e86d9e99f0849d3", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2e8dc1dcf67876829f1ff69fe77258613394b/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2e8dc1dcf67876829f1ff69fe77258613394b/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=70e2e8dc1dcf67876829f1ff69fe77258613394b", "patch": "@@ -193,6 +193,28 @@ boolean hasWriteMethod ()\n   }\n \n \n+  // Returns true iff the class that this ObjectStreamClass represents\n+  // has the following method:\n+  //\n+  // private void readObject (ObjectOutputStream)\n+  //\n+  // This method is used by the class to override default\n+  // serialization behavior.\n+  boolean hasReadMethod ()\n+  {\n+      try\n+      {\n+\t  Class[] readObjectParams = { ObjectInputStream.class };\n+\t  forClass ().getDeclaredMethod (\"readObject\", readObjectParams);\n+\t  return true;\n+      }\n+      catch (NoSuchMethodException e)\n+      {\n+\t  return false;\n+      }\n+  }\n+\n+\n   // Returns true iff the class that this ObjectStreamClass represents\n   // implements Serializable but does *not* implement Externalizable.\n   boolean isSerializable ()"}]}