{"sha": "d5b1bb0d197f9141a0f0e510f8d1b598c3df9552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDViMWJiMGQxOTdmOTE0MWEwZjBlNTEwZjhkMWI1OThjM2RmOTU1Mg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-07-07T18:56:20Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-07-09T18:14:11Z"}, "message": "coroutines: Factor code. Match original source location in helpers [NFC].\n\nThis is primarily a source code refactoring, the only change is to\nensure that the outlined functions are marked to begin at the same\nline as the original.  Otherwise, they get the default (which seems\nto be input_location, which corresponds to the closing brace at the\npoint that this is done).  Having the source location point to that\nconfuses some debuggers.\n\nThis is a contributory fix to:\nPR c++/99215 - coroutines: debugging with gdb\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (build_actor_fn): Move common code to\n\tact_des_fn.\n\t(build_destroy_fn): Likewise.\n\t(act_des_fn): Build the void return here.  Ensure that the\n\tsource location matches the original function.", "tree": {"sha": "22b02a9c6fa868894952050897b2d432ef99f625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22b02a9c6fa868894952050897b2d432ef99f625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5b1bb0d197f9141a0f0e510f8d1b598c3df9552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5b1bb0d197f9141a0f0e510f8d1b598c3df9552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5b1bb0d197f9141a0f0e510f8d1b598c3df9552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5b1bb0d197f9141a0f0e510f8d1b598c3df9552/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59045273cc648e354ba72f9188f69927f00802e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59045273cc648e354ba72f9188f69927f00802e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59045273cc648e354ba72f9188f69927f00802e2"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "54ffdc8d06211d41e8c2afcc57ebef56686cde19", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5b1bb0d197f9141a0f0e510f8d1b598c3df9552/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5b1bb0d197f9141a0f0e510f8d1b598c3df9552/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=d5b1bb0d197f9141a0f0e510f8d1b598c3df9552", "patch": "@@ -2155,13 +2155,6 @@ build_actor_fn (location_t loc, tree coro_frame_type, tree actor, tree fnbody,\n   /* One param, the coro frame pointer.  */\n   tree actor_fp = DECL_ARGUMENTS (actor);\n \n-  /* A void return.  */\n-  tree resdecl = build_decl (loc, RESULT_DECL, 0, void_type_node);\n-  DECL_ARTIFICIAL (resdecl) = 1;\n-  DECL_IGNORED_P (resdecl) = 1;\n-  DECL_RESULT (actor) = resdecl;\n-  DECL_COROUTINE_P (actor) = 1;\n-\n   /* We have a definition here.  */\n   TREE_STATIC (actor) = 1;\n \n@@ -2532,15 +2525,8 @@ build_destroy_fn (location_t loc, tree coro_frame_type, tree destroy,\n   /* One param, the coro frame pointer.  */\n   tree destr_fp = DECL_ARGUMENTS (destroy);\n \n-  /* A void return.  */\n-  tree resdecl = build_decl (loc, RESULT_DECL, 0, void_type_node);\n-  DECL_ARTIFICIAL (resdecl) = 1;\n-  DECL_IGNORED_P (resdecl) = 1;\n-  DECL_RESULT (destroy) = resdecl;\n-\n   /* We have a definition here.  */\n   TREE_STATIC (destroy) = 1;\n-  DECL_COROUTINE_P (destroy) = 1;\n \n   tree destr_outer = push_stmt_list ();\n   current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n@@ -4000,15 +3986,19 @@ static tree\n act_des_fn (tree orig, tree fn_type, tree coro_frame_ptr, const char* name)\n {\n   tree fn_name = get_fn_local_identifier (orig, name);\n+  location_t loc = DECL_SOURCE_LOCATION (orig);\n   tree fn = build_lang_decl (FUNCTION_DECL, fn_name, fn_type);\n   DECL_CONTEXT (fn) = DECL_CONTEXT (orig);\n+  DECL_SOURCE_LOCATION (fn) = loc;\n   DECL_ARTIFICIAL (fn) = true;\n   DECL_INITIAL (fn) = error_mark_node;\n+\n   tree id = get_identifier (\"frame_ptr\");\n   tree fp = build_lang_decl (PARM_DECL, id, coro_frame_ptr);\n   DECL_CONTEXT (fp) = fn;\n   DECL_ARG_TYPE (fp) = type_passed_as (coro_frame_ptr);\n   DECL_ARGUMENTS (fn) = fp;\n+\n   /* Copy selected attributes from the original function.  */\n   TREE_USED (fn) = TREE_USED (orig);\n   if (DECL_SECTION_NAME (orig))\n@@ -4020,6 +4010,17 @@ act_des_fn (tree orig, tree fn_type, tree coro_frame_ptr, const char* name)\n   DECL_USER_ALIGN (fn) = DECL_USER_ALIGN (orig);\n   /* Apply attributes from the original fn.  */\n   DECL_ATTRIBUTES (fn) = copy_list (DECL_ATTRIBUTES (orig));\n+\n+  /* A void return.  */\n+  tree resdecl = build_decl (loc, RESULT_DECL, 0, void_type_node);\n+  DECL_CONTEXT (resdecl) = fn;\n+  DECL_ARTIFICIAL (resdecl) = 1;\n+  DECL_IGNORED_P (resdecl) = 1;\n+  DECL_RESULT (fn) = resdecl;\n+\n+  /* This is a coroutine component.  */\n+  DECL_COROUTINE_P (fn) = 1;\n+\n   return fn;\n }\n "}]}