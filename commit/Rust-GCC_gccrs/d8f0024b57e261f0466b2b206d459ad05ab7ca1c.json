{"sha": "d8f0024b57e261f0466b2b206d459ad05ab7ca1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhmMDAyNGI1N2UyNjFmMDQ2NmIyYjIwNmQ0NTlhZDA1YWI3Y2ExYw==", "commit": {"author": {"name": "Frederik Harwath", "email": "frederik@codesourcery.com", "date": "2019-12-03T14:38:54Z"}, "committer": {"name": "Frederik Harwath", "email": "frederik@gcc.gnu.org", "date": "2019-12-03T14:38:54Z"}, "message": "Validate acc_device_t uses\n\nCheck that function arguments of type acc_device_t\nare valid enumeration values in all publicly visible\nfunctions from oacc-init.c.\n\n2019-12-03  Frederik Harwath  <frederik@codesourcery.com>\n\n\tlibgomp/\n\t* oacc-init.c (acc_known_device_type): Add function.\n\t(unknown_device_type_error): Add function.\n \t(name_of_acc_device_t): Change to call unknown_device_type_error\n\ton unknown type.\n\t(resolve_device): Use acc_known_device_type.\n \t(acc_init): Fail if acc_device_t argument is not valid.\n \t(acc_shutdown): Likewise.\n \t(acc_get_num_devices): Likewise.\n \t(acc_set_device_type): Likewise.\n\t(acc_get_device_num): Likewise.\n\t(acc_set_device_num): Likewise.\n \t(acc_on_device): Add comment that argument validity is not checked.\n\nReviewed-by: Thomas Schwinge <thomas@codesourcery.com>\n\nFrom-SVN: r278937", "tree": {"sha": "bd804418fd3de6af0c1bbb21d7bcc8f1344927bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd804418fd3de6af0c1bbb21d7bcc8f1344927bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8f0024b57e261f0466b2b206d459ad05ab7ca1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f0024b57e261f0466b2b206d459ad05ab7ca1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8f0024b57e261f0466b2b206d459ad05ab7ca1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f0024b57e261f0466b2b206d459ad05ab7ca1c/comments", "author": {"login": "frederik-h", "id": 22046314, "node_id": "MDQ6VXNlcjIyMDQ2MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/22046314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederik-h", "html_url": "https://github.com/frederik-h", "followers_url": "https://api.github.com/users/frederik-h/followers", "following_url": "https://api.github.com/users/frederik-h/following{/other_user}", "gists_url": "https://api.github.com/users/frederik-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederik-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederik-h/subscriptions", "organizations_url": "https://api.github.com/users/frederik-h/orgs", "repos_url": "https://api.github.com/users/frederik-h/repos", "events_url": "https://api.github.com/users/frederik-h/events{/privacy}", "received_events_url": "https://api.github.com/users/frederik-h/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83caa34e2a618842e05f59cbb3e2dda93dc23270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83caa34e2a618842e05f59cbb3e2dda93dc23270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83caa34e2a618842e05f59cbb3e2dda93dc23270"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "88b7bb2dc8cf7bc4c288f2320400f5b85d953ee0", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f0024b57e261f0466b2b206d459ad05ab7ca1c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f0024b57e261f0466b2b206d459ad05ab7ca1c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=d8f0024b57e261f0466b2b206d459ad05ab7ca1c", "patch": "@@ -1,3 +1,18 @@\n+2019-12-03  Frederik Harwath  <frederik@codesourcery.com>\n+\n+\t* oacc-init.c (acc_known_device_type): Add function.\n+\t(unknown_device_type_error): Add function.\n+\t(name_of_acc_device_t): Change to call unknown_device_type_error\n+\ton unknown type.\n+\t(resolve_device): Use acc_known_device_type.\n+\t(acc_init): Fail if acc_device_t argument is not valid.\n+\t(acc_shutdown): Likewise.\n+\t(acc_get_num_devices): Likewise.\n+\t(acc_set_device_type): Likewise.\n+\t(acc_get_device_num): Likewise.\n+\t(acc_set_device_num): Likewise.\n+\t(acc_on_device): Add comment that argument validity is not checked.\n+\n 2019-12-03  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* testsuite/lib/libgomp.exp (offload_target_to_openacc_device_type):"}, {"sha": "a444c604d5903f47175588263acf48c556d6a779", "filename": "libgomp/oacc-init.c", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f0024b57e261f0466b2b206d459ad05ab7ca1c/libgomp%2Foacc-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f0024b57e261f0466b2b206d459ad05ab7ca1c/libgomp%2Foacc-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-init.c?ref=d8f0024b57e261f0466b2b206d459ad05ab7ca1c", "patch": "@@ -82,6 +82,18 @@ goacc_register (struct gomp_device_descr *disp)\n   gomp_mutex_unlock (&acc_device_lock);\n }\n \n+static bool\n+known_device_type_p (acc_device_t d)\n+{\n+  return d >= 0 && d < _ACC_device_hwm;\n+}\n+\n+static void\n+unknown_device_type_error (acc_device_t invalid_type)\n+{\n+  gomp_fatal (\"unknown device type %u\", invalid_type);\n+}\n+\n /* OpenACC names some things a little differently.  */\n \n static const char *\n@@ -103,8 +115,9 @@ name_of_acc_device_t (enum acc_device_t type)\n     case acc_device_host: return \"host\";\n     case acc_device_not_host: return \"not_host\";\n     case acc_device_nvidia: return \"nvidia\";\n-    default: gomp_fatal (\"unknown device type %u\", (unsigned) type);\n+    default: unknown_device_type_error (type);\n     }\n+  __builtin_unreachable ();\n }\n \n /* ACC_DEVICE_LOCK must be held before calling this function.  If FAIL_IS_ERROR\n@@ -123,7 +136,7 @@ resolve_device (acc_device_t d, bool fail_is_error)\n \tif (goacc_device_type)\n \t  {\n \t    /* Lookup the named device.  */\n-\t    while (++d != _ACC_device_hwm)\n+\t    while (known_device_type_p (++d))\n \t      if (dispatchers[d]\n \t\t  && !strcasecmp (goacc_device_type,\n \t\t\t\t  get_openacc_name (dispatchers[d]->name))\n@@ -147,7 +160,7 @@ resolve_device (acc_device_t d, bool fail_is_error)\n \n     case acc_device_not_host:\n       /* Find the first available device after acc_device_not_host.  */\n-      while (++d != _ACC_device_hwm)\n+      while (known_device_type_p (++d))\n \tif (dispatchers[d] && dispatchers[d]->get_num_devices_func () > 0)\n \t  goto found;\n       if (d_arg == acc_device_default)\n@@ -168,7 +181,7 @@ resolve_device (acc_device_t d, bool fail_is_error)\n       break;\n \n     default:\n-      if (d > _ACC_device_hwm)\n+      if (!known_device_type_p (d))\n \t{\n \t  if (fail_is_error)\n \t    goto unsupported_device;\n@@ -505,6 +518,9 @@ goacc_attach_host_thread_to_device (int ord)\n void\n acc_init (acc_device_t d)\n {\n+  if (!known_device_type_p (d))\n+    unknown_device_type_error (d);\n+\n   gomp_init_targets_once ();\n \n   gomp_mutex_lock (&acc_device_lock);\n@@ -519,6 +535,9 @@ ialias (acc_init)\n void\n acc_shutdown (acc_device_t d)\n {\n+  if (!known_device_type_p (d))\n+    unknown_device_type_error (d);\n+\n   gomp_init_targets_once ();\n \n   gomp_mutex_lock (&acc_device_lock);\n@@ -533,6 +552,9 @@ ialias (acc_shutdown)\n int\n acc_get_num_devices (acc_device_t d)\n {\n+  if (!known_device_type_p (d))\n+    unknown_device_type_error (d);\n+\n   int n = 0;\n   struct gomp_device_descr *acc_dev;\n \n@@ -564,6 +586,9 @@ ialias (acc_get_num_devices)\n void\n acc_set_device_type (acc_device_t d)\n {\n+  if (!known_device_type_p (d))\n+    unknown_device_type_error (d);\n+\n   struct gomp_device_descr *base_dev, *acc_dev;\n   struct goacc_thread *thr = goacc_thread ();\n \n@@ -647,12 +672,12 @@ ialias (acc_get_device_type)\n int\n acc_get_device_num (acc_device_t d)\n {\n+  if (!known_device_type_p (d))\n+    unknown_device_type_error (d);\n+\n   const struct gomp_device_descr *dev;\n   struct goacc_thread *thr = goacc_thread ();\n \n-  if (d >= _ACC_device_hwm)\n-    gomp_fatal (\"unknown device type %u\", (unsigned) d);\n-\n   acc_prof_info prof_info;\n   acc_api_info api_info;\n   bool profiling_p = GOACC_PROFILING_SETUP_P (thr, &prof_info, &api_info);\n@@ -682,6 +707,9 @@ ialias (acc_get_device_num)\n void\n acc_set_device_num (int ord, acc_device_t d)\n {\n+  if (!known_device_type_p (d))\n+    unknown_device_type_error (d);\n+\n   struct gomp_device_descr *base_dev, *acc_dev;\n   int num_devices;\n \n@@ -728,7 +756,10 @@ ialias (acc_set_device_num)\n    version.\n \n    Compile this with optimization, so that the compiler expands\n-   this, rather than generating infinitely recursive code.  */\n+   this, rather than generating infinitely recursive code.\n+\n+   The function just forwards its argument to __builtin_acc_on_device.  It does\n+   not verify that the argument is a valid acc_device_t enumeration value.  */\n \n int __attribute__ ((__optimize__ (\"O2\")))\n acc_on_device (acc_device_t dev)"}]}