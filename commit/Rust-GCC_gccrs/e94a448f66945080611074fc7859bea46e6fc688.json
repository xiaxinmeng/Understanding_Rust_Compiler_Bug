{"sha": "e94a448f66945080611074fc7859bea46e6fc688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk0YTQ0OGY2Njk0NTA4MDYxMTA3NGZjNzg1OWJlYTQ2ZTZmYzY4OA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-08-06T15:29:37Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-08-06T15:29:37Z"}, "message": "re PR middle-end/37009 (No need to align stack when incoming stack is aligned)\n\ngcc/\n\n2008-08-06  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/37009\n\t* cfgexpand.c (expand_stack_alignment): Check parm_stack_boundary\n\tfor incoming stack boundary.\n\n\t* function.c (assign_parm_find_entry_rtl): Update\n\tparm_stack_boundary.\n\n\t* function.h (rtl_data): Add parm_stack_boundary.\n\n\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Check\n\tparm_stack_boundary for incoming stack boundary.\n\ngcc/testsuite/\n\n2008-08-06  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/37009\n\t* gcc.dg/torture/stackalign/alloca-2.c: New.\n\t* gcc.dg/torture/stackalign/alloca-3.c: Likewise.\n\t* gcc.dg/torture/stackalign/alloca-4.c: Likewise.\n\t* gcc.dg/torture/stackalign/vararg-3.c: Likewise.\n\t* gcc.target/i386/incoming-1.c: Likewise.\n\t* gcc.target/i386/incoming-2.c: Likewise.\n\t* gcc.target/i386/incoming-3.c: Likewise.\n\t* gcc.target/i386/incoming-4.c: Likewise.\n\t* gcc.target/i386/incoming-5.c: Likewise.\n\nFrom-SVN: r138806", "tree": {"sha": "c3135360ae4b38adaeeb7da6a53d15035ce4a458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3135360ae4b38adaeeb7da6a53d15035ce4a458"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e94a448f66945080611074fc7859bea46e6fc688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94a448f66945080611074fc7859bea46e6fc688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94a448f66945080611074fc7859bea46e6fc688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94a448f66945080611074fc7859bea46e6fc688/comments", "author": null, "committer": null, "parents": [{"sha": "e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e088f04bdb2331f7ec6ba0faa4eb2c64982e56c3"}], "stats": {"total": 384, "additions": 380, "deletions": 4}, "files": [{"sha": "a22491f20e07f31d53fdeb5f1335a8e04232b5f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -1,3 +1,17 @@\n+2008-08-06  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/37009\n+\t* cfgexpand.c (expand_stack_alignment): Check parm_stack_boundary\n+\tfor incoming stack boundary.\n+\n+\t* function.c (assign_parm_find_entry_rtl): Update\n+\tparm_stack_boundary.\n+\n+\t* function.h (rtl_data): Add parm_stack_boundary.\n+\n+\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Check\n+\tparm_stack_boundary for incoming stack boundary.\n+\n 2008-08-06  Joseph Myers  <joseph@codesourcery.com>\n \n \t* jump.c (rtx_renumbered_equal_p): Do not call subreg_regno_offset"}, {"sha": "8d1e5d2e3e827a6816bd48e9babf0c70fd023067", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -2184,7 +2184,7 @@ static void\n expand_stack_alignment (void)\n {\n   rtx drap_rtx;\n-  unsigned int preferred_stack_boundary;\n+  unsigned int preferred_stack_boundary, incoming_stack_boundary;\n \n   if (! SUPPORTS_STACK_ALIGNMENT)\n     return;\n@@ -2215,8 +2215,15 @@ expand_stack_alignment (void)\n   if (preferred_stack_boundary > crtl->stack_alignment_needed)\n     crtl->stack_alignment_needed = preferred_stack_boundary;\n \n+  /* The incoming stack frame has to be aligned at least at\n+     parm_stack_boundary.  */\n+  if (crtl->parm_stack_boundary > INCOMING_STACK_BOUNDARY)\n+    incoming_stack_boundary = crtl->parm_stack_boundary;\n+  else\n+    incoming_stack_boundary = INCOMING_STACK_BOUNDARY;\n+\n   crtl->stack_realign_needed\n-    = INCOMING_STACK_BOUNDARY < crtl->stack_alignment_estimated;\n+    = incoming_stack_boundary < crtl->stack_alignment_estimated;\n   crtl->stack_realign_tried = crtl->stack_realign_needed;\n \n   crtl->stack_realign_processed = true;"}, {"sha": "7cd6211054788040bdee2c8a7820bdff4432bc18", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -7614,7 +7614,10 @@ ix86_finalize_stack_realign_flags (void)\n {\n   /* Check if stack realign is really needed after reload, and \n      stores result in cfun */\n-  unsigned int stack_realign = (ix86_incoming_stack_boundary\n+  unsigned int incoming_stack_boundary\n+    = (crtl->parm_stack_boundary > ix86_incoming_stack_boundary\n+       ? crtl->parm_stack_boundary : ix86_incoming_stack_boundary);\n+  unsigned int stack_realign = (incoming_stack_boundary\n \t\t\t\t< (current_function_is_leaf\n \t\t\t\t   ? crtl->max_used_stack_slot_alignment\n \t\t\t\t   : crtl->stack_alignment_needed));"}, {"sha": "73600220c1507071c1b01deac0523a4a8d6975bc", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -2261,6 +2261,11 @@ assign_parm_find_entry_rtl (struct assign_parm_data_all *all,\n \t\t       entry_parm ? data->partial : 0, current_function_decl,\n \t\t       &all->stack_args_size, &data->locate);\n \n+  /* Update parm_stack_boundary if this parameter is passed in the\n+     stack.  */\n+  if (!in_regs && crtl->parm_stack_boundary < data->locate.boundary)\n+    crtl->parm_stack_boundary = data->locate.boundary;\n+\n   /* Adjust offsets to include the pretend args.  */\n   pretend_bytes = all->extra_pretend_bytes - pretend_bytes;\n   data->locate.slot_offset.constant += pretend_bytes;"}, {"sha": "eb85e3c37af964f8a1778ea53925a24dd9792d58", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -339,6 +339,9 @@ struct rtl_data GTY(())\n      to call other functions.  */\n   unsigned int preferred_stack_boundary;\n \n+  /* The minimum alignment of parameter stack.  */\n+  unsigned int parm_stack_boundary;\n+\n   /* The largest alignment of slot allocated on the stack.  */\n   unsigned int max_used_stack_slot_alignment;\n "}, {"sha": "ead96385f803049f6928b4ddc22c14410c301447", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -1,4 +1,18 @@\n+2008-08-06  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/37009\n+\t* gcc.dg/torture/stackalign/alloca-2.c: New.\n+\t* gcc.dg/torture/stackalign/alloca-3.c: Likewise.\n+\t* gcc.dg/torture/stackalign/alloca-4.c: Likewise.\n+\t* gcc.dg/torture/stackalign/vararg-3.c: Likewise.\n+\t* gcc.target/i386/incoming-1.c: Likewise.\n+\t* gcc.target/i386/incoming-2.c: Likewise.\n+\t* gcc.target/i386/incoming-3.c: Likewise.\n+\t* gcc.target/i386/incoming-4.c: Likewise.\n+\t* gcc.target/i386/incoming-5.c: Likewise.\n+\n 2008-08-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n \tPR middle-end/35432\n \t* gcc.c-torture/compile/pr35432.c: New file.\n \n@@ -9,7 +23,7 @@\n \n 2008-08-06  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n- \t* gcc.c-torture/compile/20080806-1.c: New testcase.\n+\t* gcc.c-torture/compile/20080806-1.c: New testcase.\n \n 2008-08-06  Maxim Kuvyrkov  <maxim@codesourcery.com>\n "}, {"sha": "b52dcf06566d78d41b1690f27226912e5505d9d5", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/alloca-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-2.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -0,0 +1,56 @@\n+/* PR middle-end/37009 */\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-msse2\" } */\n+\n+#include <emmintrin.h>\n+#include \"cpuid.h\"\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t16\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+void\n+__attribute__ ((noinline))\n+foo (__m128 x, __m128 y ,__m128 z , int size)\n+{\n+  char *p = __builtin_alloca (size + 1);\n+  aligned i;\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  __m128 x = { 1.0 };\n+  unsigned int eax, ebx, ecx, edx;\n+ \n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run SSE2 test only if host has SSE2 support.  */\n+  if (edx & bit_SSE2)\n+    foo (x, x, x, 5);\n+\n+  return 0;\n+}"}, {"sha": "47f3607c2a5a1477e18d89a3d4dbaf5de1302342", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/alloca-3.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-3.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -0,0 +1,56 @@\n+/* PR middle-end/37009 */\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-msse2\" } */\n+\n+#include <emmintrin.h>\n+#include \"cpuid.h\"\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t16\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+void\n+__attribute__ ((noinline))\n+foo (__m128 x, __m128 y ,__m128 z ,__m128 a, int size)\n+{\n+  char *p = __builtin_alloca (size + 1);\n+  aligned i;\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  __m128 x = { 1.0 };\n+  unsigned int eax, ebx, ecx, edx;\n+ \n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run SSE2 test only if host has SSE2 support.  */\n+  if (edx & bit_SSE2)\n+    foo (x, x, x, x, 5);\n+\n+  return 0;\n+}"}, {"sha": "0ff0d02c43bda7d9bf6d49099541ca5508c3562a", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/alloca-4.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-4.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -0,0 +1,41 @@\n+/* PR middle-end/37009 */\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-m32 -mincoming-stack-boundary=2 -mpreferred-stack-boundary=2\" } */\n+\n+#include \"check.h\"\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+void\n+__attribute__ ((noinline))\n+foo (double x, double y ,double z ,double a, int size)\n+{\n+  char *p = __builtin_alloca (size + 1);\n+  double i;\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+     abort ();\n+    }\n+\n+  check (&i, __alignof__(i));\n+}\n+\n+int\n+main (void)\n+{\n+  double x =  1.0 ;\n+ \n+  foo (x, x, x, x, 5);\n+\n+  return 0;\n+}"}, {"sha": "cac206499ed8b468cb65911860bcf0f6e30ef039", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/vararg-3.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-3.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -0,0 +1,84 @@\n+/* PR middle-end/37009 */\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-msse2\" } */\n+\n+#include <stdarg.h>\n+#include <emmintrin.h>\n+#include \"cpuid.h\"\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t16\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+__m128 a = { 1.0 };\n+\n+void\n+test (va_list arg)\n+{\n+  char *p;\n+  aligned i;\n+  int size;\n+  double x;\n+  __m128 e;\n+\n+  size = va_arg (arg, int);\n+  if (size != 5)\n+    abort ();\n+\n+  p = __builtin_alloca (size + 1);\n+\n+  x = va_arg (arg, double);\n+  if (x != 5.0)\n+    abort ();\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  e = va_arg (arg, __m128);\n+  if (__builtin_memcmp (&e, &a, sizeof (e)))\n+    abort ();\n+}\n+\n+void\n+foo (const char *fmt, ...)\n+{\n+  va_list arg;\n+  va_start (arg, fmt);\n+  test (arg);\n+  va_end (arg);\n+}\n+\n+int\n+main (void)\n+{\n+  __m128 x = { 1.0 };\n+  unsigned int eax, ebx, ecx, edx;\n+ \n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run SSE2 test only if host has SSE2 support.  */\n+  if (edx & bit_SSE2)\n+    foo (\"foo\", 5, 5.0, x);\n+\n+  return 0;\n+}"}, {"sha": "fcc80f1ec2a9091429fc80e14c112d7946f2ef7c", "filename": "gcc/testsuite/gcc.target/i386/incoming-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-1.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/37009 */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-w -msse2 -mpreferred-stack-boundary=2\" } */\n+\n+#include <emmintrin.h>\n+\n+extern void bar (int *);\n+\n+int\n+foo(__m128 x, __m128 y, __m128 z, int size)\n+{\n+  int __attribute((aligned(16))) xxx;\n+\n+  xxx = 2;\n+  bar (&xxx);\n+  return size;\n+}\n+\n+/* { dg-final { scan-assembler \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "cc6c3934253d86c014a9928b78455ac0d42e070c", "filename": "gcc/testsuite/gcc.target/i386/incoming-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-2.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/37009 */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-w -msse2 -mpreferred-stack-boundary=2\" } */\n+\n+#include <emmintrin.h>\n+\n+extern void bar (int *);\n+\n+int\n+foo(__m128 x, __m128 y, __m128 z, __m128 a, int size)\n+{\n+  int __attribute((aligned(16))) xxx;\n+\n+  xxx = 2;\n+  bar (&xxx);\n+  return size;\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[l\\]\\[ \\t\\]\" } } */"}, {"sha": "aad38b53ab471bb05fc845c04febd5a70dea13c9", "filename": "gcc/testsuite/gcc.target/i386/incoming-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-3.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/37009 */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-w -msse2 -mpreferred-stack-boundary=2\" } */\n+\n+#include <emmintrin.h>\n+\n+extern void bar (int *);\n+\n+int\n+foo(__m128 y, int size, ...)\n+{\n+  int __attribute((aligned(16))) xxx;\n+\n+  xxx = 2;\n+  bar (&xxx);\n+  return size;\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[l\\]\\[ \\t\\]\" } } */"}, {"sha": "270024bc15c103791557791dbdd94bb3340b1b17", "filename": "gcc/testsuite/gcc.target/i386/incoming-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-4.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -0,0 +1,20 @@\n+/* PR middle-end/37009 */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-w -msse2 -mpreferred-stack-boundary=2\" } */\n+\n+#include <stdarg.h>\n+#include <emmintrin.h>\n+\n+extern void bar (int *);\n+\n+__m128\n+foo(va_list arg) \n+{\n+  int __attribute((aligned(16))) xxx;\n+\n+  xxx = 2;\n+  bar (&xxx);\n+  return va_arg (arg, __m128);\n+}\n+\n+/* { dg-final { scan-assembler \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "38620bfc938c31c87802327d32c9e6f8b4218d07", "filename": "gcc/testsuite/gcc.target/i386/incoming-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94a448f66945080611074fc7859bea46e6fc688/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-5.c?ref=e94a448f66945080611074fc7859bea46e6fc688", "patch": "@@ -0,0 +1,16 @@\n+/* PR middle-end/37009 */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-m32 -mincoming-stack-boundary=2 -mpreferred-stack-boundary=2\" } */\n+\n+extern void bar (double *);\n+\n+double\n+foo(double x)\n+{\n+  double xxx = x + 13.0;\n+\n+  bar (&xxx);\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"andl\\[\\\\t \\]*\\\\$-8,\\[\\\\t \\]*%esp\" } } */"}]}