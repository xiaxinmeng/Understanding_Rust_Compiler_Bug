{"sha": "36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZhY2MxYTI0MmI1YWIyZjljMjlkNDViY2E4YmVkMmFiMmE4MjIxOA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-12-20T16:46:22Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-12-20T16:46:22Z"}, "message": "expr.c (store_field): Avoid a direct store if the mode is larger than the size of the bit field.\n\n\tgcc/\n\t* expr.c (store_field): Avoid a direct store if the mode is larger\n\tthan the size of the bit field.\n\t* stor-layout.c (layout_decl): If flag_strict_volatile_bitfields,\n\ttreat non-volatile bit fields like volatile ones.\n\t* toplev.c (process_options): Disallow combination of\n\t-fstrict-volatile-bitfields and ABI versions less than 2.\n\t* config/arm/arm.c (arm_option_override): Don't enable\n\tflag_strict_volatile_bitfields if the ABI version is less than 2.\n\t* config/h8300/h8300.c (h8300_option_override): Likewise.\n\t* config/rx/rx.c (rx_option_override): Likewise.\n\t* config/m32c/m32c.c (m32c_option_override): Likewise.\n\t* config/sh/sh.c (sh_option_override): Likewise.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/volatile-bitfields-4.c: New test.\n\t* c-c++-common/abi-bf.c: New test.\n\nFrom-SVN: r182545", "tree": {"sha": "d0a86f6d0ca1212b434d7c1b46b1acf3cc04c3b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0a86f6d0ca1212b434d7c1b46b1acf3cc04c3b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/comments", "author": null, "committer": null, "parents": [{"sha": "51e641f8ef0fc822104911d964ee30f1afea179d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e641f8ef0fc822104911d964ee30f1afea179d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e641f8ef0fc822104911d964ee30f1afea179d"}], "stats": {"total": 82, "additions": 74, "deletions": 8}, "files": [{"sha": "dc47ebeece08fbb6c12b1fafcca1815eab0d72ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -1,3 +1,19 @@\n+2011-12-20  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR middle-end/51200\n+\t* expr.c (store_field): Avoid a direct store if the mode is larger\n+\tthan the size of the bit field.\n+\t* stor-layout.c (layout_decl): If flag_strict_volatile_bitfields,\n+\ttreat non-volatile bit fields like volatile ones.\n+\t* toplev.c (process_options): Disallow combination of\n+\t-fstrict-volatile-bitfields and ABI versions less than 2.\n+\t* config/arm/arm.c (arm_option_override): Don't enable\n+\tflag_strict_volatile_bitfields if the ABI version is less than 2.\n+\t* config/h8300/h8300.c (h8300_option_override): Likewise.\n+\t* config/rx/rx.c (rx_option_override): Likewise.\n+\t* config/m32c/m32c.c (m32c_option_override): Likewise.\n+\t* config/sh/sh.c (sh_option_override): Likewise.\n+\n 2011-12-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/46796"}, {"sha": "b6d619ee7386a7155ae7bce7d239e1ea9bd7baf6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -1989,7 +1989,8 @@ arm_option_override (void)\n \t\t\t   global_options_set.x_param_values);\n \n   /* ARM EABI defaults to strict volatile bitfields.  */\n-  if (TARGET_AAPCS_BASED && flag_strict_volatile_bitfields < 0)\n+  if (TARGET_AAPCS_BASED && flag_strict_volatile_bitfields < 0\n+      && abi_version_at_least(2))\n     flag_strict_volatile_bitfields = 1;\n \n   /* Enable sw prefetching at -O3 for CPUS that have prefetch, and we have deemed"}, {"sha": "3911cd4dda45b77210fe6785f8f13ddb8ddd19d1", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -409,7 +409,7 @@ h8300_option_override (void)\n     }\n \n   /* This target defaults to strict volatile bitfields.  */\n-  if (flag_strict_volatile_bitfields < 0)\n+  if (flag_strict_volatile_bitfields < 0 && abi_version_at_least(2))\n     flag_strict_volatile_bitfields = 1;\n }\n "}, {"sha": "d86a618b02828186b0dfccc02821b1302e3ebb84", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -417,7 +417,7 @@ m32c_option_override (void)\n     flag_ivopts = 0;\n \n   /* This target defaults to strict volatile bitfields.  */\n-  if (flag_strict_volatile_bitfields < 0)\n+  if (flag_strict_volatile_bitfields < 0 && abi_version_at_least(2))\n     flag_strict_volatile_bitfields = 1;\n \n   /* r8c/m16c have no 16-bit indirect call, so thunks are involved."}, {"sha": "4a73285b3389ddffa08e02b0a260deaf373208ab", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -2571,7 +2571,7 @@ rx_option_override (void)\n     }\n \n   /* This target defaults to strict volatile bitfields.  */\n-  if (flag_strict_volatile_bitfields < 0)\n+  if (flag_strict_volatile_bitfields < 0 && abi_version_at_least(2))\n     flag_strict_volatile_bitfields = 1;\n \n   rx_override_options_after_change ();"}, {"sha": "1b289ad29d30e0866a288a60842d6a5061f684cf", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -842,7 +842,7 @@ sh_option_override (void)\n     sh_fix_range (sh_fixed_range_str);\n \n   /* This target defaults to strict volatile bitfields.  */\n-  if (flag_strict_volatile_bitfields < 0)\n+  if (flag_strict_volatile_bitfields < 0 && abi_version_at_least(2))\n     flag_strict_volatile_bitfields = 1;\n }\n \f"}, {"sha": "5747a1709ee9607d39eac713baf1efc1fb922bcc", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -6327,6 +6327,8 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t\t|| bitpos % GET_MODE_ALIGNMENT (mode))\n \t       && SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (target)))\n \t      || (bitpos % BITS_PER_UNIT != 0)))\n+      || (bitsize >= 0 && mode != BLKmode\n+\t  && GET_MODE_BITSIZE (mode) > bitsize)\n       /* If the RHS and field are a constant size and the size of the\n \t RHS isn't the same size as the bitfield, we must use bitfield\n \t operations.  */"}, {"sha": "35320c2fad9ad936b4210ab7bfc2662afa446605", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -622,12 +622,13 @@ layout_decl (tree decl, unsigned int known_align)\n \t  /* See if we can use an ordinary integer mode for a bit-field.\n \t     Conditions are: a fixed size that is correct for another mode,\n \t     occupying a complete byte or bytes on proper boundary,\n-\t     and not volatile or not -fstrict-volatile-bitfields.  */\n+\t     and not -fstrict-volatile-bitfields.  If the latter is set,\n+\t     we unfortunately can't check TREE_THIS_VOLATILE, as a cast\n+\t     may make a volatile object later.  */\n \t  if (TYPE_SIZE (type) != 0\n \t      && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n \t      && GET_MODE_CLASS (TYPE_MODE (type)) == MODE_INT\n-\t      && !(TREE_THIS_VOLATILE (decl)\n-\t\t   && flag_strict_volatile_bitfields > 0))\n+\t      && flag_strict_volatile_bitfields <= 0)\n \t    {\n \t      enum machine_mode xmode\n \t\t= mode_for_size_tree (DECL_SIZE (decl), MODE_INT, 1);"}, {"sha": "8cb5093cb64faffb750fee53c9832aa742e95fff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -1,3 +1,9 @@\n+2011-12-20  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR middle-end/51200\n+\t* gcc.target/arm/volatile-bitfields-4.c: New test.\n+\t* c-c++-common/abi-bf.c: New test.\n+\n 2011-12-20  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/49951"}, {"sha": "05b898609c2dba8970e0f2523e269b766048aa9e", "filename": "gcc/testsuite/c-c++-common/abi-bf.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fabi-bf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fabi-bf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fabi-bf.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-warning \"incompatible\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-fstrict-volatile-bitfields -fabi-version=1\" } */"}, {"sha": "805dab16428d6a9bdd527b803dd46f2737c58f31", "filename": "gcc/testsuite/gcc.target/arm/volatile-bitfields-4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvolatile-bitfields-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvolatile-bitfields-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvolatile-bitfields-4.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"ldr\\[\\\\t \\]+\\[^\\n\\]*,\\[\\\\t \\]*\\\\\\[\\[^\\n\\]*\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"str\\[\\\\t \\]+\\[^\\n\\]*,\\[\\\\t \\]*\\\\\\[\\[^\\n\\]*\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-not \"strb\" } } */\n+\n+struct thing {\n+  unsigned a: 8;\n+  unsigned b: 8;\n+  unsigned c: 8;\n+  unsigned d: 8;\n+};\n+\n+struct thing2 {\n+  volatile unsigned a: 8;\n+  volatile unsigned b: 8;\n+  volatile unsigned c: 8;\n+  volatile unsigned d: 8;\n+};\n+\n+void test1(volatile struct thing *t)\n+{\n+  t->a = 5;\n+}\n+\n+void test2(struct thing2 *t)\n+{\n+  t->a = 5;\n+}"}, {"sha": "efce98fa30fa5d898cd94fc1de4384ca74c19115", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36acc1a242b5ab2f9c29d45bca8bed2ab2a82218/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=36acc1a242b5ab2f9c29d45bca8bed2ab2a82218", "patch": "@@ -1330,6 +1330,13 @@ process_options (void)\n     flag_ira_region\n       = optimize_size || !optimize ? IRA_REGION_ONE : IRA_REGION_MIXED;\n \n+  if (flag_strict_volatile_bitfields > 0 && !abi_version_at_least (2))\n+    {\n+      warning (0, \"-fstrict-volatile-bitfield disabled; \"\n+\t       \"it is incompatible with ABI versions < 2\");\n+      flag_strict_volatile_bitfields = 0;\n+    }\n+\n   /* Unrolling all loops implies that standard loop unrolling must also\n      be done.  */\n   if (flag_unroll_all_loops)"}]}