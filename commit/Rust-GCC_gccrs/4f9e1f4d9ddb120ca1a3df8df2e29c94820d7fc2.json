{"sha": "4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY5ZTFmNGQ5ZGRiMTIwY2ExYTNkZjhkZjJlMjljOTQ4MjBkN2ZjMg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-07-18T20:26:08Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-07-18T20:26:08Z"}, "message": "stl_list.h (struct _List_node_header): New.\n\n2017-07-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_list.h\n\t(struct _List_node_header): New.\n\t(_List_impl()): Fix noexcept qualification.\n\t(_List_impl(_List_impl&&)): New, default.\n\t(_List_base()): Default.\n\t(_List_base(_List_base&&)): Default.\n\t(_List_base::_M_move_nodes): Adapt to use\n\t_List_node_header._M_move_nodes.\n\t(_List_base::_M_init): Likewise.\n\t(list<>()): Default.\n\t(list<>(list&&)): Default.\n\t(list<>::_M_move_assign(list&&, true_type)): Use _M_move_nodes.\n\t(__distance(_List_const_iterator<>, _List_const_iterator<>,\n\tinput_iterator_tag)): Adapt.\n\t* testsuite/23_containers/list/allocator/default_init.cc: New.\n\nFrom-SVN: r250320", "tree": {"sha": "b2a27b9ca8547ecc75a2ad3526145c753fbf0bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2a27b9ca8547ecc75a2ad3526145c753fbf0bb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2/comments", "author": null, "committer": null, "parents": [{"sha": "e822e8858882b88f33a975849c6474031e28ea08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e822e8858882b88f33a975849c6474031e28ea08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e822e8858882b88f33a975849c6474031e28ea08"}], "stats": {"total": 245, "additions": 181, "deletions": 64}, "files": [{"sha": "7af51ac01bc4572be54b2157092a78f5d7f3e671", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2", "patch": "@@ -1,3 +1,21 @@\n+2017-07-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_list.h\n+\t(struct _List_node_header): New.\n+\t(_List_impl()): Fix noexcept qualification.\n+\t(_List_impl(_List_impl&&)): New, default.\n+\t(_List_base()): Default.\n+\t(_List_base(_List_base&&)): Default.\n+\t(_List_base::_M_move_nodes): Adapt to use\n+\t_List_node_header._M_move_nodes.\n+\t(_List_base::_M_init): Likewise.\n+\t(list<>()): Default.\n+\t(list<>(list&&)): Default.\n+\t(list<>::_M_move_assign(list&&, true_type)): Use _M_move_nodes.\n+\t(__distance(_List_const_iterator<>, _List_const_iterator<>,\n+\tinput_iterator_tag)): Adapt.\n+\t* testsuite/23_containers/list/allocator/default_init.cc: New.\n+\n 2017-07-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/mutex (scoped_lock): Reorder std::adopt_lock_t parameter"}, {"sha": "5da19b32eea2ef26e134ade40fba153914ff9a4a", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 92, "deletions": 64, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2", "patch": "@@ -99,6 +99,65 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       _M_unhook() _GLIBCXX_USE_NOEXCEPT;\n     };\n \n+    /// The %list node header.\n+    struct _List_node_header : public _List_node_base\n+    {\n+#if _GLIBCXX_USE_CXX11_ABI\n+      std::size_t _M_size;\n+#endif\n+\n+      _List_node_header() _GLIBCXX_NOEXCEPT\n+      { _M_init(); }\n+\n+#if __cplusplus >= 201103L\n+      _List_node_header(_List_node_header&& __x) noexcept\n+      : _List_node_base{ __x._M_next, __x._M_prev }\n+# if _GLIBCXX_USE_CXX11_ABI\n+      , _M_size(__x._M_size)\n+# endif\n+      {\n+\tif (__x._M_base()->_M_next == __x._M_base())\n+\t  this->_M_next = this->_M_prev = this;\n+\telse\n+\t  {\n+\t    this->_M_next->_M_prev = this->_M_prev->_M_next = this->_M_base();\n+\t    __x._M_init();\n+\t  }\n+      }\n+\n+      void\n+      _M_move_nodes(_List_node_header&& __x)\n+      {\n+\t_List_node_base* const __xnode = __x._M_base();\n+\tif (__xnode->_M_next == __xnode)\n+\t  _M_init();\n+\telse\n+\t  {\n+\t    _List_node_base* const __node = this->_M_base();\n+\t    __node->_M_next = __xnode->_M_next;\n+\t    __node->_M_prev = __xnode->_M_prev;\n+\t    __node->_M_next->_M_prev = __node->_M_prev->_M_next = __node;\n+# if _GLIBCXX_USE_CXX11_ABI\n+\t    _M_size = __x._M_size;\n+# endif\n+\t    __x._M_init();\n+\t  }\n+      }\n+#endif\n+\n+      void\n+      _M_init() _GLIBCXX_NOEXCEPT\n+      {\n+\tthis->_M_next = this->_M_prev = this;\n+#if _GLIBCXX_USE_CXX11_ABI\n+\tthis->_M_size = 0;\n+#endif\n+      }\n+\n+    private:\n+      _List_node_base* _M_base() { return this; }\n+    };\n+\n   _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace detail\n \n@@ -323,45 +382,43 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       struct _List_impl\n       : public _Node_alloc_type\n       {\n-#if _GLIBCXX_USE_CXX11_ABI\n-\t_List_node<size_t> _M_node;\n-#else\n-\t__detail::_List_node_base _M_node;\n-#endif\n+\t__detail::_List_node_header _M_node;\n \n-\t_List_impl() _GLIBCXX_NOEXCEPT\n-\t: _Node_alloc_type(), _M_node()\n+\t_List_impl() _GLIBCXX_NOEXCEPT_IF( noexcept(_Node_alloc_type()) )\n+\t: _Node_alloc_type()\n \t{ }\n \n \t_List_impl(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT\n-\t: _Node_alloc_type(__a), _M_node()\n+\t: _Node_alloc_type(__a)\n \t{ }\n \n #if __cplusplus >= 201103L\n+\t_List_impl(_List_impl&&) = default;\n+\n \t_List_impl(_Node_alloc_type&& __a) noexcept\n-\t: _Node_alloc_type(std::move(__a)), _M_node()\n+\t: _Node_alloc_type(std::move(__a))\n \t{ }\n #endif\n       };\n \n       _List_impl _M_impl;\n \n #if _GLIBCXX_USE_CXX11_ABI\n-      size_t _M_get_size() const { return *_M_impl._M_node._M_valptr(); }\n+      size_t _M_get_size() const { return _M_impl._M_node._M_size; }\n \n-      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }\n+      void _M_set_size(size_t __n) { _M_impl._M_node._M_size = __n; }\n \n-      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }\n+      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }\n \n-      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }\n+      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }\n \n       size_t\n       _M_distance(const __detail::_List_node_base* __first,\n \t\t  const __detail::_List_node_base* __last) const\n       { return _S_distance(__first, __last); }\n \n       // return the stored size\n-      size_t _M_node_count() const { return *_M_impl._M_node._M_valptr(); }\n+      size_t _M_node_count() const { return _M_get_size(); }\n #else\n       // dummy implementations used when the size is not stored\n       size_t _M_get_size() const { return 0; }\n@@ -397,44 +454,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT\n       { return _M_impl; }\n \n-      _List_base()\n-      : _M_impl()\n-      { _M_init(); }\n+#if __cplusplus >= 201103L\n+      _List_base() = default;\n+#else\n+      _List_base() { }\n+#endif\n \n       _List_base(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT\n       : _M_impl(__a)\n-      { _M_init(); }\n+      { }\n \n #if __cplusplus >= 201103L\n-      _List_base(_List_base&& __x) noexcept\n-      : _M_impl(std::move(__x._M_get_Node_allocator()))\n-      { _M_move_nodes(std::move(__x)); }\n+      _List_base(_List_base&&) = default;\n \n       _List_base(_List_base&& __x, _Node_alloc_type&& __a)\n       : _M_impl(std::move(__a))\n       {\n \tif (__x._M_get_Node_allocator() == _M_get_Node_allocator())\n \t  _M_move_nodes(std::move(__x));\n-\telse\n-\t  _M_init(); // Caller must move individual elements.\n+\t// else caller must move individual elements.\n       }\n \n       void\n       _M_move_nodes(_List_base&& __x)\n-      {\n-\tauto* const __xnode = std::__addressof(__x._M_impl._M_node);\n-\tif (__xnode->_M_next == __xnode)\n-\t  _M_init();\n-\telse\n-\t  {\n-\t    auto* const __node = std::__addressof(_M_impl._M_node);\n-\t    __node->_M_next = __xnode->_M_next;\n-\t    __node->_M_prev = __xnode->_M_prev;\n-\t    __node->_M_next->_M_prev = __node->_M_prev->_M_next = __node;\n-\t    _M_set_size(__x._M_get_size());\n-\t    __x._M_init();\n-\t  }\n-      }\n+      { _M_impl._M_node._M_move_nodes(std::move(__x._M_impl._M_node)); }\n #endif\n \n       // This is what actually destroys the list.\n@@ -446,11 +489,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       void\n       _M_init() _GLIBCXX_NOEXCEPT\n-      {\n-\tthis->_M_impl._M_node._M_next = &this->_M_impl._M_node;\n-\tthis->_M_impl._M_node._M_prev = &this->_M_impl._M_node;\n-\t_M_set_size(0);\n-      }\n+      { this->_M_impl._M_node._M_init(); }\n     };\n \n   /**\n@@ -586,11 +625,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        *  @brief  Creates a %list with no elements.\n        */\n-      list()\n #if __cplusplus >= 201103L\n-      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)\n+      list() = default;\n+#else\n+      list() { }\n #endif\n-      : _Base() { }\n \n       /**\n        *  @brief  Creates a %list with no elements.\n@@ -657,13 +696,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  %List move constructor.\n-       *  @param  __x  A %list of identical element and allocator types.\n        *\n-       *  The newly-created %list contains the exact contents of @a __x.\n-       *  The contents of @a __x are a valid, but unspecified %list.\n+       *  The newly-created %list contains the exact contents of the moved\n+       *  instance. The contents of the moved instance are a valid, but\n+       *  unspecified %list.\n        */\n-      list(list&& __x) noexcept\n-      : _Base(std::move(__x)) { }\n+      list(list&&) = default;\n \n       /**\n        *  @brief  Builds a %list from an initializer_list\n@@ -1838,17 +1876,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_move_assign(list&& __x, true_type) noexcept\n       {\n \tthis->_M_clear();\n-\tif (__x.empty())\n-\t  this->_M_init();\n-\telse\n-\t  {\n-\t    this->_M_impl._M_node._M_next = __x._M_impl._M_node._M_next;\n-\t    this->_M_impl._M_node._M_next->_M_prev = &this->_M_impl._M_node;\n-\t    this->_M_impl._M_node._M_prev = __x._M_impl._M_node._M_prev;\n-\t    this->_M_impl._M_node._M_prev->_M_next = &this->_M_impl._M_node;\n-\t    this->_M_set_size(__x._M_get_size());\n-\t    __x._M_init();\n-\t  }\n+\tthis->_M_move_nodes(std::move(__x));\n \tstd::__alloc_on_move(this->_M_get_Node_allocator(),\n \t\t\t     __x._M_get_Node_allocator());\n       }\n@@ -1983,12 +2011,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _GLIBCXX_STD_C::_List_const_iterator<_Tp> __last,\n \t       input_iterator_tag)\n     {\n-      typedef _GLIBCXX_STD_C::_List_node<size_t> _Sentinel;\n+      typedef __detail::_List_node_header _Sentinel;\n       _GLIBCXX_STD_C::_List_const_iterator<_Tp> __beyond = __last;\n       ++__beyond;\n-      bool __whole = __first == __beyond;\n+      const bool __whole = __first == __beyond;\n       if (__builtin_constant_p (__whole) && __whole)\n-\treturn *static_cast<const _Sentinel*>(__last._M_node)->_M_valptr();\n+\treturn static_cast<const _Sentinel*>(__last._M_node)->_M_size;\n \n       ptrdiff_t __n = 0;\n       while (__first != __last)"}, {"sha": "0604e067252a664cd0c75c63ab001066f4990993", "filename": "libstdc++-v3/testsuite/23_containers/list/allocator/default_init.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fallocator%2Fdefault_init.cc?ref=4f9e1f4d9ddb120ca1a3df8df2e29c94820d7fc2", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O0\" }\n+// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+#include <ext/aligned_buffer.h>\n+\n+using T = int;\n+\n+using __gnu_test::default_init_allocator;\n+\n+void test01()\n+{\n+  typedef default_init_allocator<T> alloc_type;\n+  typedef std::list<T, alloc_type> test_type;\n+\n+  __gnu_cxx::__aligned_buffer<test_type> buf;\n+  __builtin_memset(buf._M_addr(), ~0, sizeof(test_type));\n+\n+  VERIFY( buf._M_ptr()->get_allocator().state != 0 );\n+\n+  test_type *tmp = ::new(buf._M_addr()) test_type();\n+\n+  VERIFY( tmp->get_allocator().state == 0 );\n+\n+  tmp->~test_type();\n+}\n+\n+void test02()\n+{\n+  typedef default_init_allocator<T> alloc_type;\n+  typedef std::list<T, alloc_type> test_type;\n+\n+  __gnu_cxx::__aligned_buffer<test_type> buf;\n+  __builtin_memset(buf._M_addr(), ~0, sizeof(test_type));\n+\n+  VERIFY( buf._M_ptr()->get_allocator().state != 0 );\n+\n+  test_type *tmp = ::new(buf._M_addr()) test_type;\n+\n+  VERIFY( tmp->get_allocator().state == 0 );\n+\n+  tmp->~test_type();\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}