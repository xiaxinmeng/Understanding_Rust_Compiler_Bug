{"sha": "206c2d7add4a9bc3955e455bbe2c23a90422fcf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA2YzJkN2FkZDRhOWJjMzk1NWU0NTViYmUyYzIzYTkwNDIyZmNmOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-09-11T09:51:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-11T09:51:17Z"}, "message": "mips.c (mips_symbol_insns_1): Allow LEAs of SYMBOL_FORCE_TO_MEM constants.\n\ngcc/\n\t* config/mips/mips.c (mips_symbol_insns_1): Allow LEAs of\n\tSYMBOL_FORCE_TO_MEM constants.\n\t(mips_rtx_costs): Give a cost of 1 to force_to_mem_operands.\n\t(mips16_rewrite_pool_refs_info): New structure.\n\t(mips16_rewrite_pool_constant): New function, split out from...\n\t(mips16_rewrite_pool_refs): ...here.  Take a pointer to a\n\tmips16_rewrite_pool_refs_info structure rather than a pointer\n\tto a constant pool.  Force force_to_mem_operands into memory.\n\t(mips16_lay_out_constants): Update call to mips16_rewrite_pool_refs.\n\t* config/mips/predicates.md (force_to_mem_operand): New predicate.\n\t* config/mips/constraints.md (kf): New constraint.\n\t* config/mips/mips.md (*movdi_64bit_mips16): Add a d <- kf alternative.\n\t(*movsi_mips16): Likewise.\n\nFrom-SVN: r128365", "tree": {"sha": "3c5276c1b094c85b929083de7f24493b91d6b978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c5276c1b094c85b929083de7f24493b91d6b978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/206c2d7add4a9bc3955e455bbe2c23a90422fcf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206c2d7add4a9bc3955e455bbe2c23a90422fcf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/206c2d7add4a9bc3955e455bbe2c23a90422fcf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/comments", "author": null, "committer": null, "parents": [{"sha": "8144a1a8120beac962f0dfa6dc76dbd00b407aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8144a1a8120beac962f0dfa6dc76dbd00b407aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8144a1a8120beac962f0dfa6dc76dbd00b407aad"}], "stats": {"total": 106, "additions": 89, "deletions": 17}, "files": [{"sha": "470e25478dba65e4d3ef9d187af3b60b79bf6a10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=206c2d7add4a9bc3955e455bbe2c23a90422fcf8", "patch": "@@ -1,3 +1,19 @@\n+2007-09-11  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips.c (mips_symbol_insns_1): Allow LEAs of\n+\tSYMBOL_FORCE_TO_MEM constants.\n+\t(mips_rtx_costs): Give a cost of 1 to force_to_mem_operands.\n+\t(mips16_rewrite_pool_refs_info): New structure.\n+\t(mips16_rewrite_pool_constant): New function, split out from...\n+\t(mips16_rewrite_pool_refs): ...here.  Take a pointer to a\n+\tmips16_rewrite_pool_refs_info structure rather than a pointer\n+\tto a constant pool.  Force force_to_mem_operands into memory.\n+\t(mips16_lay_out_constants): Update call to mips16_rewrite_pool_refs.\n+\t* config/mips/predicates.md (force_to_mem_operand): New predicate.\n+\t* config/mips/constraints.md (kf): New constraint.\n+\t* config/mips/mips.md (*movdi_64bit_mips16): Add a d <- kf alternative.\n+\t(*movsi_mips16): Likewise.\n+\n 2007-09-11  Richard Sandiford  <richard@codesourcery.com>\n \t    Nigel Stephens  <nigel@mips.com>\n \t    David Ung  <davidu@mips.com>"}, {"sha": "98e8d6f2faae9d0fa9a74b1fbae4027c58a0faf3", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=206c2d7add4a9bc3955e455bbe2c23a90422fcf8", "patch": "@@ -82,6 +82,10 @@\n ;; but the DSPr2 version allows any accumulator target.\n (define_register_constraint \"ka\" \"TARGET_DSPR2 ? ACC_REGS : MD_REGS\")\n \n+(define_constraint \"kf\"\n+  \"@internal\"\n+  (match_operand 0 \"force_to_mem_operand\"))\n+\n ;; This is a normal rather than a register constraint because we can\n ;; never use the stack pointer as a reload register.\n (define_constraint \"ks\""}, {"sha": "0e69827296d08cb8c315d5ea4f37445974aeae7a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=206c2d7add4a9bc3955e455bbe2c23a90422fcf8", "patch": "@@ -1908,6 +1908,11 @@ mips_symbol_insns_1 (enum mips_symbol_type type, enum machine_mode mode)\n       return 0;\n \n     case SYMBOL_FORCE_TO_MEM:\n+      /* LEAs will be converted into constant-pool references by\n+\t mips_reorg.  */\n+      if (mode == MAX_MACHINE_MODE)\n+\treturn 1;\n+\n       /* The constant must be loaded from the constant pool.  */\n       return 0;\n \n@@ -3140,6 +3145,11 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total)\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case CONST_DOUBLE:\n+      if (force_to_mem_operand (x, VOIDmode))\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n       cost = mips_const_insns (x);\n       if (cost > 0)\n \t{\n@@ -10099,29 +10109,56 @@ mips16_insn_length (rtx insn)\n   return get_attr_length (insn);\n }\n \n-/* Rewrite *X so that constant pool references refer to the constant's\n-   label instead.  DATA points to the constant pool structure.  */\n+/* If *X is a symbolic constant that refers to the constant pool, add\n+   the constant to POOL and rewrite *X to use the constant's label.  */\n \n-static int\n-mips16_rewrite_pool_refs (rtx *x, void *data)\n+static void\n+mips16_rewrite_pool_constant (struct mips16_constant_pool *pool, rtx *x)\n {\n-  struct mips16_constant_pool *pool = data;\n   rtx base, offset, label;\n \n-  if (MEM_P (*x))\n-    x = &XEXP (*x, 0);\n-  else if (!TARGET_MIPS16_TEXT_LOADS)\n-    return 0;\n-\n   split_const (*x, &base, &offset);\n   if (GET_CODE (base) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (base))\n     {\n       label = add_constant (pool, get_pool_constant (base),\n \t\t\t    get_pool_mode (base));\n       base = gen_rtx_LABEL_REF (Pmode, label);\n       *x = mips_unspec_address_offset (base, offset, SYMBOL_PC_RELATIVE);\n+    }\n+}\n+\n+/* This structure is used to communicate with mips16_rewrite_pool_refs.\n+   INSN is the instruction we're rewriting and POOL points to the current\n+   constant pool.  */\n+struct mips16_rewrite_pool_refs_info {\n+  rtx insn;\n+  struct mips16_constant_pool *pool;\n+};\n+\n+/* Rewrite *X so that constant pool references refer to the constant's\n+   label instead.  DATA points to a mips16_rewrite_pool_refs_info\n+   structure.  */\n+\n+static int\n+mips16_rewrite_pool_refs (rtx *x, void *data)\n+{\n+  struct mips16_rewrite_pool_refs_info *info = data;\n+\n+  if (force_to_mem_operand (*x, Pmode))\n+    {\n+      rtx mem = force_const_mem (GET_MODE (*x), *x);\n+      validate_change (info->insn, x, mem, false);\n+    }\n+\n+  if (MEM_P (*x))\n+    {\n+      mips16_rewrite_pool_constant (info->pool, &XEXP (*x, 0));\n       return -1;\n     }\n+\n+  if (TARGET_MIPS16_TEXT_LOADS)\n+    mips16_rewrite_pool_constant (info->pool, x);\n+\n   return GET_CODE (*x) == CONST ? -1 : 0;\n }\n \n@@ -10131,6 +10168,7 @@ static void\n mips16_lay_out_constants (void)\n {\n   struct mips16_constant_pool pool;\n+  struct mips16_rewrite_pool_refs_info info;\n   rtx insn, barrier;\n \n   if (!TARGET_MIPS16_PCREL_LOADS)\n@@ -10142,7 +10180,11 @@ mips16_lay_out_constants (void)\n     {\n       /* Rewrite constant pool references in INSN.  */\n       if (INSN_P (insn))\n-\tfor_each_rtx (&PATTERN (insn), mips16_rewrite_pool_refs, &pool);\n+\t{\n+\t  info.insn = insn;\n+\t  info.pool = &pool;\n+\t  for_each_rtx (&PATTERN (insn), mips16_rewrite_pool_refs, &info);\n+\t}\n \n       pool.insn_address += mips16_insn_length (insn);\n "}, {"sha": "c1cffb1bc04c361bef32f6dd0478afcc9b800ae8", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=206c2d7add4a9bc3955e455bbe2c23a90422fcf8", "patch": "@@ -3428,13 +3428,13 @@\n    (set_attr \"length\"\t\"4,*,*,*,*,4,4,*,4,*,4,8,*,8,*\")])\n \n (define_insn \"*movdi_64bit_mips16\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,d,m\")\n-\t(match_operand:DI 1 \"move_operand\" \"d,d,y,K,N,U,m,d\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,d,d,m\")\n+\t(match_operand:DI 1 \"move_operand\" \"d,d,y,K,N,kf,U,m,d\"))]\n   \"TARGET_64BIT && TARGET_MIPS16\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"move,move,move,arith,arith,const,load,store\")\n+  [(set_attr \"type\"\t\"move,move,move,arith,arith,load,const,load,store\")\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n@@ -3446,6 +3446,7 @@\n \t\t (if_then_else (match_operand:VOID 1 \"m16_nuimm8_1\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 12))\n+\t\t (const_int 8)\n \t\t (const_string \"*\")\n \t\t (const_string \"*\")\n \t\t (const_string \"*\")])])\n@@ -3524,13 +3525,13 @@\n    (set_attr \"length\"\t\"4,*,*,*,*,4,4,*,4,*,4,4,4,4,4,*,4,*\")])\n \n (define_insn \"*movsi_mips16\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,d,m\")\n-\t(match_operand:SI 1 \"move_operand\" \"d,d,y,K,N,U,m,d\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,d,d,m\")\n+\t(match_operand:SI 1 \"move_operand\" \"d,d,y,K,N,kf,U,m,d\"))]\n   \"TARGET_MIPS16\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"move,move,move,arith,arith,const,load,store\")\n+  [(set_attr \"type\"\t\"move,move,move,arith,arith,load,const,load,store\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n@@ -3542,6 +3543,7 @@\n \t\t (if_then_else (match_operand:VOID 1 \"m16_nuimm8_1\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 12))\n+\t\t (const_int 8)\n \t\t (const_string \"*\")\n \t\t (const_string \"*\")\n \t\t (const_string \"*\")])])"}, {"sha": "6c533e5e80fff1cabf0f79a739ed3d819fa79c74", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206c2d7add4a9bc3955e455bbe2c23a90422fcf8/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=206c2d7add4a9bc3955e455bbe2c23a90422fcf8", "patch": "@@ -227,6 +227,14 @@\n \t  && type == SYMBOL_ABSOLUTE);\n })\n \n+(define_predicate \"force_to_mem_operand\"\n+  (match_code \"const,symbol_ref,label_ref\")\n+{\n+  enum mips_symbol_type symbol_type;\n+  return (mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &symbol_type)\n+\t  && symbol_type == SYMBOL_FORCE_TO_MEM);\n+})\n+\n (define_predicate \"got_disp_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {"}]}