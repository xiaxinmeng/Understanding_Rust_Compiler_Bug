{"sha": "de137957bda4e1bc1c778dd3ce43e6aeede8d306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUxMzc5NTdiZGE0ZTFiYzFjNzc4ZGQzY2U0M2U2YWVlZGU4ZDMwNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-12-13T12:35:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-13T12:35:56Z"}, "message": "cbrtq.c (cbrtq): Use Q suffixed floating point constants instead of L suffixed ones.\n\n\t* math/cbrtq.c (cbrtq): Use Q suffixed floating point constants\n\tinstead of L suffixed ones.\n\t* math/fmaq.c (fmaq): Likewise.\n\t* math/rintq.c (TWO112): Likewise.\n\nFrom-SVN: r194475", "tree": {"sha": "f6549255d38c82758564c06a82765b9e0d30bb92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6549255d38c82758564c06a82765b9e0d30bb92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de137957bda4e1bc1c778dd3ce43e6aeede8d306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de137957bda4e1bc1c778dd3ce43e6aeede8d306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de137957bda4e1bc1c778dd3ce43e6aeede8d306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de137957bda4e1bc1c778dd3ce43e6aeede8d306/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65f141179f4af86da654e1a0787c58f7ecf60c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f141179f4af86da654e1a0787c58f7ecf60c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f141179f4af86da654e1a0787c58f7ecf60c72"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "213233abae6fadbed0e1c4a56f728d1aba3c66cd", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de137957bda4e1bc1c778dd3ce43e6aeede8d306/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de137957bda4e1bc1c778dd3ce43e6aeede8d306/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=de137957bda4e1bc1c778dd3ce43e6aeede8d306", "patch": "@@ -1,3 +1,10 @@\n+2012-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* math/cbrtq.c (cbrtq): Use Q suffixed floating point constants\n+\tinstead of L suffixed ones.\n+\t* math/fmaq.c (fmaq): Likewise.\n+\t* math/rintq.c (TWO112): Likewise.\n+\n 2012-12-03  Tobias Burnus  <burnus@net-b.de>\n \n \t* strtod/strtod_l.c (___STRTOF_INTERNAL): Fix exponent"}, {"sha": "2567d4d5bd3985799be80e6bbd1f947c1b1479c7", "filename": "libquadmath/math/cbrtq.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de137957bda4e1bc1c778dd3ce43e6aeede8d306/libquadmath%2Fmath%2Fcbrtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de137957bda4e1bc1c778dd3ce43e6aeede8d306/libquadmath%2Fmath%2Fcbrtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcbrtq.c?ref=de137957bda4e1bc1c778dd3ce43e6aeede8d306", "patch": "@@ -88,11 +88,11 @@ cbrtq ( __float128 x)\n \n   /* Approximate cube root of number between .5 and 1,\n      peak relative error = 1.2e-6  */\n-  x = ((((1.3584464340920900529734e-1L * x\n-\t  - 6.3986917220457538402318e-1L) * x\n-\t + 1.2875551670318751538055e0L) * x\n-\t- 1.4897083391357284957891e0L) * x\n-       + 1.3304961236013647092521e0L) * x + 3.7568280825958912391243e-1L;\n+  x = ((((1.3584464340920900529734e-1Q * x\n+\t  - 6.3986917220457538402318e-1Q) * x\n+\t + 1.2875551670318751538055e0Q) * x\n+\t- 1.4897083391357284957891e0Q) * x\n+       + 1.3304961236013647092521e0Q) * x + 3.7568280825958912391243e-1Q;\n \n   /* exponent divided by 3 */\n   if (e >= 0)\n@@ -122,9 +122,9 @@ cbrtq ( __float128 x)\n   x = ldexpq (x, e);\n \n   /* Newton iteration */\n-  x -= (x - (z / (x * x))) * 0.3333333333333333333333333333333333333333L;\n-  x -= (x - (z / (x * x))) * 0.3333333333333333333333333333333333333333L;\n-  x -= (x - (z / (x * x))) * 0.3333333333333333333333333333333333333333L;\n+  x -= (x - (z / (x * x))) * 0.3333333333333333333333333333333333333333Q;\n+  x -= (x - (z / (x * x))) * 0.3333333333333333333333333333333333333333Q;\n+  x -= (x - (z / (x * x))) * 0.3333333333333333333333333333333333333333Q;\n \n   if (sign < 0)\n     x = -x;"}, {"sha": "d3c5fb3901a8ea743cb9f458cceb1e08b563beee", "filename": "libquadmath/math/fmaq.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de137957bda4e1bc1c778dd3ce43e6aeede8d306/libquadmath%2Fmath%2Ffmaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de137957bda4e1bc1c778dd3ce43e6aeede8d306/libquadmath%2Fmath%2Ffmaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffmaq.c?ref=de137957bda4e1bc1c778dd3ce43e6aeede8d306", "patch": "@@ -80,15 +80,15 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t  < IEEE854_FLOAT128_BIAS - FLT128_MANT_DIG - 2)\n \t{\n \t  int neg = u.ieee.negative ^ v.ieee.negative;\n-\t  __float128 tiny = neg ? -0x1p-16494L : 0x1p-16494L;\n+\t  __float128 tiny = neg ? -0x1p-16494Q : 0x1p-16494Q;\n \t  if (w.ieee.exponent >= 3)\n \t    return tiny + z;\n \t  /* Scaling up, adding TINY and scaling down produces the\n \t     correct result, because in round-to-nearest mode adding\n \t     TINY has no effect and in other modes double rounding is\n \t     harmless.  But it may not produce required underflow\n \t     exceptions.  */\n-\t  v.value = z * 0x1p114L + tiny;\n+\t  v.value = z * 0x1p114Q + tiny;\n \t  if (TININESS_AFTER_ROUNDING\n \t      ? v.ieee.exponent < 115\n \t      : (w.ieee.exponent == 0\n@@ -100,7 +100,7 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t      volatile __float128 force_underflow = x * y;\n \t      (void) force_underflow;\n \t    }\n-\t  return v.value * 0x1p-114L;\n+\t  return v.value * 0x1p-114Q;\n \t}\n       if (u.ieee.exponent + v.ieee.exponent\n \t  >= 0x7fff + IEEE854_FLOAT128_BIAS - FLT128_MANT_DIG)\n@@ -296,7 +296,7 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t    {\n \t      w.value = a1 + u.value;\n \t      if (w.ieee.exponent == 227)\n-\t\treturn w.value * 0x1p-226L;\n+\t\treturn w.value * 0x1p-226Q;\n \t    }\n \t  /* v.ieee.mant_low & 2 is LSB bit of the result before rounding,\n \t     v.ieee.mant_low & 1 is the round bit and j is our sticky\n@@ -305,8 +305,8 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t  w.ieee.mant_low = ((v.ieee.mant_low & 3) << 1) | j;\n \t  w.ieee.negative = v.ieee.negative;\n \t  v.ieee.mant_low &= ~3U;\n-\t  v.value *= 0x1p-226L;\n-\t  w.value *= 0x1p-2L;\n+\t  v.value *= 0x1p-226Q;\n+\t  w.value *= 0x1p-2Q;\n \t  return v.value + w.value;\n \t}\n       v.ieee.mant_low |= j;"}, {"sha": "15d4c781ba485b1fe66e912f1da2f627966b359b", "filename": "libquadmath/math/rintq.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de137957bda4e1bc1c778dd3ce43e6aeede8d306/libquadmath%2Fmath%2Frintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de137957bda4e1bc1c778dd3ce43e6aeede8d306/libquadmath%2Fmath%2Frintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Frintq.c?ref=de137957bda4e1bc1c778dd3ce43e6aeede8d306", "patch": "@@ -27,8 +27,8 @@\n \n static const __float128\n TWO112[2]={\n-  5.19229685853482762853049632922009600E+33L, /* 0x406F000000000000, 0 */\n- -5.19229685853482762853049632922009600E+33L  /* 0xC06F000000000000, 0 */\n+  5.19229685853482762853049632922009600E+33Q, /* 0x406F000000000000, 0 */\n+ -5.19229685853482762853049632922009600E+33Q  /* 0xC06F000000000000, 0 */\n };\n \n __float128"}]}