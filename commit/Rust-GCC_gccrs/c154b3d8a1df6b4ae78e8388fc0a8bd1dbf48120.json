{"sha": "c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE1NGIzZDhhMWRmNmI0YWU3OGU4Mzg4ZmMwYThiZDFkYmY0ODEyMA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-07T22:34:50Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-07T22:34:50Z"}, "message": "In gcc/testsuite/: 2010-10-07 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/testsuite/:\n2010-10-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * obj-c++.dg/encode-10.mm: New testcase.\n\nIn gcc/cp/:\n2010-10-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * cp-tree.def: Changed type of AT_ENCODE_EXPR from tcc_unary to\n        tcc_expression.\n        * cxx-pretty-print.c (pp_cxx_unary_expression): Added case for\n        AT_ENCODE_EXPR.\n        * error.c (dump_expr): Added case for AT_ENCODE_EXPR.\n        * pt.c (tsubst_copy): Added case for AT_ENCODE_EXPR.\n        (value_dependent_expression_p): Added case for AT_ENCODE_EXPR.\n        (type_dependent_expression_p): Added case for AT_ENCODE_EXPR.\n        * parser.c (cp_parser_objc_encode_expression): Updated comment.\n\nFrom-SVN: r165138", "tree": {"sha": "455473998e5c9ec7c9dd8fd1ad23718ce9ad8d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/455473998e5c9ec7c9dd8fd1ad23718ce9ad8d9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fb996b6d25fc277bc585e1a635c6e6c84492737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb996b6d25fc277bc585e1a635c6e6c84492737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb996b6d25fc277bc585e1a635c6e6c84492737"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "b243c5a46892b2dcdbb94bbbba5a75753a4bf8f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "patch": "@@ -1,3 +1,15 @@\n+2010-10-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* cp-tree.def: Changed type of AT_ENCODE_EXPR from tcc_unary to\n+\ttcc_expression.\n+\t* cxx-pretty-print.c (pp_cxx_unary_expression): Added case for\n+\tAT_ENCODE_EXPR.\n+\t* error.c (dump_expr): Added case for AT_ENCODE_EXPR.\n+\t* pt.c (tsubst_copy): Added case for AT_ENCODE_EXPR.\n+\t(value_dependent_expression_p): Added case for AT_ENCODE_EXPR.\n+\t(type_dependent_expression_p): Added case for AT_ENCODE_EXPR.\n+\t* parser.c (cp_parser_objc_encode_expression): Updated comment.\n+\t\n 2010-10-07  Nicola Pero  <nicola@nicola.brainstorm.co.uk>\n \n \tMerge from apple/trunk branch on FSF servers."}, {"sha": "3f14a837dbd686996d3cf65342e1ce9ac26d44fa", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "patch": "@@ -337,7 +337,7 @@ DEFTREECODE (ALIGNOF_EXPR, \"alignof_expr\", tcc_expression, 1)\n \n /* Represents an Objective-C++ '@encode' expression during template\n    expansion.  */\n-DEFTREECODE (AT_ENCODE_EXPR, \"at_encode_expr\", tcc_unary, 1)\n+DEFTREECODE (AT_ENCODE_EXPR, \"at_encode_expr\", tcc_expression, 1)\n \n /* A STMT_EXPR represents a statement-expression during template\n    expansion.  This is the GCC extension { ( ... ) }.  The"}, {"sha": "bbef2272457e0c28b6c3f8f6247271cd12ead032", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "patch": "@@ -791,6 +791,14 @@ pp_cxx_unary_expression (cxx_pretty_printer *pp, tree t)\n \tpp_unary_expression (pp, TREE_OPERAND (t, 0));\n       break;\n \n+    case AT_ENCODE_EXPR:\n+      pp_cxx_ws_string (pp, \"@encode\");\n+      pp_cxx_whitespace (pp);\n+      pp_cxx_left_paren (pp);\n+      pp_cxx_type_id (pp, TREE_OPERAND (t, 0));\n+      pp_cxx_right_paren (pp);\n+      break;      \n+\n     case NOEXCEPT_EXPR:\n       pp_cxx_ws_string (pp, \"noexcept\");\n       pp_cxx_whitespace (pp);"}, {"sha": "185b361cf007fa5448ca4148ffc0aa44629b8c93", "filename": "gcc/cp/error.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "patch": "@@ -2141,6 +2141,14 @@ dump_expr (tree t, int flags)\n       pp_cxx_right_paren (cxx_pp);\n       break;\n \n+    case AT_ENCODE_EXPR:\n+      pp_cxx_ws_string (cxx_pp, \"@encode\");\n+      pp_cxx_whitespace (cxx_pp);\n+      pp_cxx_left_paren (cxx_pp);\n+      dump_type (TREE_OPERAND (t, 0), flags);\n+      pp_cxx_right_paren (cxx_pp);\n+      break;\n+\n     case NOEXCEPT_EXPR:\n       pp_cxx_ws_string (cxx_pp, \"noexcept\");\n       pp_cxx_whitespace (cxx_pp);"}, {"sha": "f5f4521a2d047af5e90b7659810d0983d5299a8e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "patch": "@@ -21128,6 +21128,12 @@ cp_parser_objc_encode_expression (cp_parser* parser)\n       return error_mark_node;\n     }\n \n+  /* This happens if we find @encode(T) (where T is a template\n+     typename or something dependent on a template typename) when\n+     parsing a template.  In that case, we can't compile it\n+     immediately, but we rather create an AT_ENCODE_EXPR which will\n+     need to be instantiated when the template is used.\n+  */\n   if (dependent_type_p (type))\n     {\n       tree value = build_min (AT_ENCODE_EXPR, size_type_node, type);"}, {"sha": "9afa74d1679b4bbe6d2b0a408a266e3b5a76f1fb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "patch": "@@ -11131,6 +11131,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case ADDR_EXPR:\n     case UNARY_PLUS_EXPR:      /* Unary + */\n     case ALIGNOF_EXPR:\n+    case AT_ENCODE_EXPR:\n     case ARROW_EXPR:\n     case THROW_EXPR:\n     case TYPEID_EXPR:\n@@ -17689,6 +17690,12 @@ value_dependent_expression_p (tree expression)\n \treturn dependent_type_p (expression);\n       return type_dependent_expression_p (expression);\n \n+    case AT_ENCODE_EXPR:\n+      /* An 'encode' expression is value-dependent if the operand is\n+\t type-dependent.  */\n+      expression = TREE_OPERAND (expression, 0);\n+      return dependent_type_p (expression);\n+\n     case NOEXCEPT_EXPR:\n       expression = TREE_OPERAND (expression, 0);\n       /* FIXME why check value-dependency?  */\n@@ -17806,6 +17813,7 @@ type_dependent_expression_p (tree expression)\n   if (TREE_CODE (expression) == PSEUDO_DTOR_EXPR\n       || TREE_CODE (expression) == SIZEOF_EXPR\n       || TREE_CODE (expression) == ALIGNOF_EXPR\n+      || TREE_CODE (expression) == AT_ENCODE_EXPR\n       || TREE_CODE (expression) == NOEXCEPT_EXPR\n       || TREE_CODE (expression) == TRAIT_EXPR\n       || TREE_CODE (expression) == TYPEID_EXPR"}, {"sha": "13fbb7e1c37e6d0301a46328800c1cbbb6f05781", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "patch": "@@ -1,3 +1,7 @@\n+2010-10-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* obj-c++.dg/encode-10.mm: New testcase.\n+\n 2010-10-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc++/23614"}, {"sha": "2b3af88dcb182064e3fdeb8b091089641394a7cb", "filename": "gcc/testsuite/obj-c++.dg/encode-10.mm", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-10.mm?ref=c154b3d8a1df6b4ae78e8388fc0a8bd1dbf48120", "patch": "@@ -0,0 +1,46 @@\n+/* Test for @encode in templates.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+#include <string.h>           \n+#include <stdlib.h>\n+\n+template<typename T>\n+const char *my_encode(int variant)\n+{\n+  const char *result;\n+\n+  switch (variant)\n+    {\n+    case 0:\n+      result = @encode(T);\n+      break;\n+    case 1:\n+      result = @encode(T*);\n+      break;\n+    case 2:\n+      result = @encode(const T*);\n+      break;\n+    default:\n+      result = @encode(int);\n+      break;\n+    }\n+\n+  return result;\n+}\n+\n+int main()\n+{\n+  if (strcmp (@encode(char), my_encode<char>(0)))\n+    abort ();\n+\n+  if (strcmp (@encode(char *), my_encode<char>(1)))\n+    abort ();\n+\n+  if (strcmp (@encode(const char *), my_encode<char>(2)))\n+    abort ();\n+\n+  if (strcmp (@encode(int), my_encode<char>(3)))\n+    abort ();\n+\n+  return 0;\n+}"}]}