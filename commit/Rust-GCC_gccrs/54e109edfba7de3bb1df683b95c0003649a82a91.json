{"sha": "54e109edfba7de3bb1df683b95c0003649a82a91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlMTA5ZWRmYmE3ZGUzYmIxZGY2ODNiOTVjMDAwMzY0OWE4MmE5MQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-04-08T23:41:09Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-04-08T23:41:09Z"}, "message": "re PR pch/13419 (Clarification of invoke.texi requested)\n\n2004-04-08  Geoffrey Keating  <geoffk@apple.com>\n\n\tPR pch/13419\n\tPR pch/14137\n\tRadar #: 3315288\n\t* doc/invoke.texi (Precompiled Headers): Suggest -o\n\tto put an output file in a particular place.  Be more detailed\n\tabout which options affect PCH validity and which options\n\tmight not work.\n\t* c-pch.c (pch_matching): New.\n\t(MATCH_SIZE): New.\n\t(struct c_pch_validity): New field 'match'.\n\t(pch_init): Handle pch_matching.\n\t(c_common_valid_pch): Check pch_matching.\n\nIndex: testsuite/ChangeLog\n2004-04-08  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/pch/valid-1.c, gcc.dg/pch/valid-2.c, gcc.dg/pch/valid-3.c,\n\tgcc.dg/pch/valid-4.c, gcc.dg/pch/valid-5.c, gcc.dg/pch/valid-6.c,\n\tgcc.dg/pch/valid-1.hs, gcc.dg/pch/valid-2.hs, gcc.dg/pch/valid-3.hs,\n\tgcc.dg/pch/valid-4.hs, gcc.dg/pch/valid-5.hs, gcc.dg/pch/valid-6.hs:\n\tNew tests.\n\nFrom-SVN: r80531", "tree": {"sha": "b710236520736bf983ada97e6a7351511798518e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b710236520736bf983ada97e6a7351511798518e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e109edfba7de3bb1df683b95c0003649a82a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e109edfba7de3bb1df683b95c0003649a82a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e109edfba7de3bb1df683b95c0003649a82a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e109edfba7de3bb1df683b95c0003649a82a91/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f07e9f0f286a9b3e672044049816555a8f4b548a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07e9f0f286a9b3e672044049816555a8f4b548a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f07e9f0f286a9b3e672044049816555a8f4b548a"}], "stats": {"total": 181, "additions": 160, "deletions": 21}, "files": [{"sha": "faf7f1c9c200ac2ad369b2fae3a7126b8e97f2c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -1,5 +1,18 @@\n 2004-04-08  Geoffrey Keating  <geoffk@apple.com>\n \n+\tPR pch/13419\n+\tPR pch/14137\n+\tRadar #: 3315288\n+\t* doc/invoke.texi (Precompiled Headers): Suggest -o\n+\tto put an output file in a particular place.  Be more detailed\n+\tabout which options affect PCH validity and which options\n+\tmight not work.\n+\t* c-pch.c (pch_matching): New.\n+\t(MATCH_SIZE): New.\n+\t(struct c_pch_validity): New field 'match'.\n+\t(pch_init): Handle pch_matching.\n+\t(c_common_valid_pch): Check pch_matching.\n+\n \t* explow.c: Fix typo defining default of PROMOTE_FUNCTION_MODE.\n \n 2004-04-08  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "8e2e6f126fa3c4a9f7fc76517e5fb03816627790", "filename": "gcc/c-pch.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -35,6 +35,23 @@ Boston, MA 02111-1307, USA.  */\n #include \"hosthooks.h\"\n #include \"target.h\"\n \n+/* This is a list of flag variables that must match exactly, and their\n+   names for the error message.  The possible values for *flag_var must\n+   fit in a 'signed char'.  */\n+\n+static const struct c_pch_matching \n+{\n+  int *flag_var;\n+  const char *flag_name;\n+} pch_matching[] = {\n+  { &flag_exceptions, \"-fexceptions\" },\n+  { &flag_unit_at_a_time, \"-funit-at-a-time\" }\n+};\n+\n+enum {\n+  MATCH_SIZE = ARRAY_SIZE (pch_matching)\n+};\n+\n /* This structure is read very early when validating the PCH, and\n    might be read for a PCH which is for a completely different compiler\n    for a different operating system.  Thus, it should really only contain\n@@ -52,6 +69,7 @@ struct c_pch_validity\n   unsigned char target_machine_length;\n   unsigned char version_length;\n   unsigned char debug_info_type;\n+  signed char match[MATCH_SIZE];\n   void (*pch_init) (void);\n   size_t target_data_length;\n };\n@@ -120,6 +138,15 @@ pch_init (void)\n   v.target_machine_length = strlen (target_machine);\n   v.version_length = strlen (version_string);\n   v.debug_info_type = write_symbols;\n+  {\n+    size_t i;\n+    for (i = 0; i < MATCH_SIZE; i++)\n+      {\n+\tv.match[i] = *pch_matching[i].flag_var;\n+\tif (v.match[i] != *pch_matching[i].flag_var)\n+\t  abort ();\n+      }\n+  }\n   v.pch_init = &pch_init;\n   target_validity = targetm.get_pch_validity (&v.target_data_length);\n   \n@@ -302,6 +329,20 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n       return 2;\n     }\n \n+  /* Check flags that must match exactly.  */\n+  {\n+    size_t i;\n+    for (i = 0; i < MATCH_SIZE; i++)\n+      if (*pch_matching[i].flag_var != v.match[i])\n+\t{\n+\t  if (cpp_get_options (pfile)->warn_invalid_pch)\n+\t    cpp_error (pfile, CPP_DL_WARNING, \n+\t\t       \"%s: settings for %s do not match\", name,\n+\t\t       pch_matching[i].flag_name);\n+\t  return 2;\n+\t}\n+  }\n+\n   /* If the text segment was not loaded at the same address as it was\n      when the PCH file was created, function pointers loaded from the\n      PCH will not be valid.  We could in theory remap all the function"}, {"sha": "2812bf97c8ad208c54ec127b6f0100a70943148c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -11380,11 +11380,11 @@ they've already been included (in the precompiled header).\n If you need to precompile the same header file for different\n languages, targets, or compiler options, you can instead make a\n @emph{directory} named like @file{all.h.gch}, and put each precompiled\n-header in the directory.  (It doesn't matter what you call the files\n-in the directory, every precompiled header in the directory will be\n-considered.)  The first precompiled header encountered in the\n-directory that is valid for this compilation will be used; they're\n-searched in no particular order.\n+header in the directory, perhaps using @option{-o}.  It doesn't matter\n+what you call the files in the directory, every precompiled header in\n+the directory will be considered.  The first precompiled header\n+encountered in the directory that is valid for this compilation will\n+be used; they're searched in no particular order.\n \n There are many other possibilities, limited only by your imagination,\n good sense, and the constraints of your build system.\n@@ -11394,40 +11394,68 @@ A precompiled header file can be used only when these conditions apply:\n @itemize\n @item\n Only one precompiled header can be used in a particular compilation.\n+\n @item\n A precompiled header can't be used once the first C token is seen.  You\n can have preprocessor directives before a precompiled header; you can\n even include a precompiled header from inside another header, so long as\n there are no C tokens before the @code{#include}.\n+\n @item\n The precompiled header file must be produced for the same language as\n the current compilation.  You can't use a C precompiled header for a C++\n compilation.\n+\n @item\n The precompiled header file must be produced by the same compiler\n version and configuration as the current compilation is using.\n The easiest way to guarantee this is to use the same compiler binary\n for creating and using precompiled headers.\n+\n @item\n-Any macros defined before the precompiled header (including with\n-@option{-D}) must either be defined in the same way as when the\n-precompiled header was generated, or must not affect the precompiled\n-header, which usually means that the they don't appear in the\n-precompiled header at all.\n+Any macros defined before the precompiled header is included must\n+either be defined in the same way as when the precompiled header was\n+generated, or must not affect the precompiled header, which usually\n+means that the they don't appear in the precompiled header at all.\n+\n+The @option{-D} option is one way to define a macro before a\n+precompiled header is included; using a @code{#define} can also do it.\n+There are also some options that define macros implicitly, like\n+@option{-O} and @option{-Wdeprecated}; the same rule applies to macros\n+defined this way.\n+\n+@item If debugging information is output when using the precompiled\n+header, using @option{-g} or similar, the same kind of debugging information\n+must have been output when building the precompiled header.  However,\n+a precompiled header built using @option{-g} can be used in a compilation\n+when no debugging information is being output.\n+\n+@item The same @option{-m} options must generally be used when building\n+and using the precompiled header.  @xref{Submodel Options},\n+for any cases where this rule is relaxed.\n+\n+@item Each of the following options must be the same when building and using\n+the precompiled header:\n+\n+@gccoptlist{-fexceptions -funit-at-a-time}\n+\n @item\n-Certain command-line options must be defined in the same way as when the\n-precompiled header was generated.  At present, it's not clear which\n-options are safe to change and which are not; the safest choice is to\n-use exactly the same options when generating and using the precompiled\n-header.\n+Some other command-line options starting with @option{-f},\n+@option{-p}, or @option{-O} must be defined in the same way as when\n+the precompiled header was generated.  At present, it's not clear\n+which options are safe to change and which are not; the safest choice\n+is to use exactly the same options when generating and using the\n+precompiled header.  The following are known to be safe:\n+\n+@gccoptlist{-pedantic-errors}\n+\n @end itemize\n \n-For all of these but the last, the compiler will automatically ignore\n-the precompiled header if the conditions aren't met.  For the last item,\n-some option changes will cause the precompiled header to be rejected,\n-but not all incompatible option combinations have yet been found.  If\n-you find a new incompatible combination, please consider filing a bug\n-report, see @ref{Bugs}.\n+For all of these except the last, the compiler will automatically\n+ignore the precompiled header if the conditions aren't met.  If you\n+find an option combination that doesn't work and doesn't cause the\n+precompiled header to be ignored, please consider filing a bug report,\n+see @ref{Bugs}.\n \n @node Running Protoize\n @section Running Protoize"}, {"sha": "65dfd9e4ff68e119407c3f777795450c7191d10f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -1,3 +1,11 @@\n+2004-04-08  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/pch/valid-1.c, gcc.dg/pch/valid-2.c, gcc.dg/pch/valid-3.c,\n+\tgcc.dg/pch/valid-4.c, gcc.dg/pch/valid-5.c, gcc.dg/pch/valid-6.c,\n+\tgcc.dg/pch/valid-1.hs, gcc.dg/pch/valid-2.hs, gcc.dg/pch/valid-3.hs,\n+\tgcc.dg/pch/valid-4.hs, gcc.dg/pch/valid-5.hs, gcc.dg/pch/valid-6.hs:\n+\tNew tests.\n+\n 2004-04-08  Paul Brook  <paul@codesourcery.com>\n \n \t* gcc.dg/spill-1.c: New test."}, {"sha": "ebfa85a99497b9d406fb97b8f56f318d621cb752", "filename": "gcc/testsuite/gcc.dg/pch/valid-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.c?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-options \"-I. -Winvalid-pch -g\" } */\n+\n+#include \"valid-1.h\"/* { dg-error \"created with -gnone, but used with -g|No such file|they were invalid\" } */\n+\n+int x;"}, {"sha": "e1ed11df4cc81b1524bb4f0e3582fedf2eacdb38", "filename": "gcc/testsuite/gcc.dg/pch/valid-1.hs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.hs?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-I. -Winvalid-pch -g0\" } */\n+\n+extern int x;"}, {"sha": "a2709967c0728a04603fc02ebf710aa6830eb727", "filename": "gcc/testsuite/gcc.dg/pch/valid-1b.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.c?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-options \"-I. -Winvalid-pch -g0\" } */\n+\n+#include \"valid-1b.h\"\n+\n+int x;"}, {"sha": "6dc358735a7a552e351a5c43f737688d53c8cf9a", "filename": "gcc/testsuite/gcc.dg/pch/valid-1b.hs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.hs?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-I. -Winvalid-pch -g\" } */\n+\n+extern int x;"}, {"sha": "52a2e35a441bc4b10b6a940925d71bd624e37805", "filename": "gcc/testsuite/gcc.dg/pch/valid-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-2.c?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-options \"-I. -Winvalid-pch -fexceptions\" } */\n+\n+#include \"valid-2.h\"/* { dg-error \"settings for -fexceptions do not match|No such file|they were invalid\" } */\n+\n+int x;"}, {"sha": "2497af651c2ea937ee153089acb19d93918d1267", "filename": "gcc/testsuite/gcc.dg/pch/valid-2.hs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-2.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-2.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-2.hs?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1 @@\n+extern int x;"}, {"sha": "741a917df5dde39ec84ec101b1d054bf28a7237d", "filename": "gcc/testsuite/gcc.dg/pch/valid-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-3.c?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-options \"-I. -Winvalid-pch -fno-unit-at-a-time\" } */\n+\n+#include \"valid-3.h\"/* { dg-error \"settings for -funit-at-a-time do not match|No such file|they were invalid\" } */\n+\n+int x;"}, {"sha": "2a0af94c9f798213c1b2e7e546d019decb114bbe", "filename": "gcc/testsuite/gcc.dg/pch/valid-3.hs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-3.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-3.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-3.hs?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-I. -Winvalid-pch -funit-at-a-time\" } */\n+\n+extern int x;"}, {"sha": "1249531ef671e89af53d53ca29a58864bc18fba5", "filename": "gcc/testsuite/gcc.dg/pch/valid-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-4.c?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-I. -Winvalid-pch -Wtrigraphs\" } */\n+\n+#include \"valid-4.h\"\n+\n+char * x = \"??/\";  /* { dg-error \"trigraph\" } */\n+"}, {"sha": "051c720ee3f26e1a35f1227a0a9aa827cdb0c560", "filename": "gcc/testsuite/gcc.dg/pch/valid-4.hs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-4.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-4.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-4.hs?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1 @@\n+extern char * x;"}, {"sha": "4022d0458f26abfc8a57532a3fc461c75e03a0ef", "filename": "gcc/testsuite/gcc.dg/pch/valid-5.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-5.c?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-options \"-I. -Winvalid-pch -pedantic-errors\" } */\n+\n+#include \"valid-5.h\"\n+\n+int x;"}, {"sha": "2497af651c2ea937ee153089acb19d93918d1267", "filename": "gcc/testsuite/gcc.dg/pch/valid-5.hs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-5.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-5.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-5.hs?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1 @@\n+extern int x;"}, {"sha": "f111c31ae998161d8df15921c613640672a73fb6", "filename": "gcc/testsuite/gcc.dg/pch/valid-6.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-6.c?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-options \"-I. -Winvalid-pch -dH -pipe -fcond-mismatch\" } */\n+\n+#include \"valid-6.h\"\n+\n+int x;"}, {"sha": "2497af651c2ea937ee153089acb19d93918d1267", "filename": "gcc/testsuite/gcc.dg/pch/valid-6.hs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-6.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e109edfba7de3bb1df683b95c0003649a82a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-6.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-6.hs?ref=54e109edfba7de3bb1df683b95c0003649a82a91", "patch": "@@ -0,0 +1 @@\n+extern int x;"}]}