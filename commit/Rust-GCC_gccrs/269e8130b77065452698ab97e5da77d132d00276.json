{"sha": "269e8130b77065452698ab97e5da77d132d00276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY5ZTgxMzBiNzcwNjU0NTI2OThhYjk3ZTVkYTc3ZDEzMmQwMDI3Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-05T10:35:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-05T15:09:23Z"}, "message": "libstdc++: Remove workarounds for constraints on alias templates\n\nThe G++ bug has been fixed for a couple of months so we can remove these\nworkarounds that define alias templates in terms of constrained class\ntemplates. We can just apply constraints directly to alias templates as\nspecified in the C++20 working draft.\n\n\t* include/bits/iterator_concepts.h (iter_reference_t)\n\t(iter_rvalue_reference_t, iter_common_reference_t, indirect_result_t):\n\tRemove workarounds for PR c++/67704.\n\t* testsuite/24_iterators/aliases.cc: New test.", "tree": {"sha": "54a4dab63bf4ed6c79b17fc5828c220fbbe0d757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a4dab63bf4ed6c79b17fc5828c220fbbe0d757"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/269e8130b77065452698ab97e5da77d132d00276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269e8130b77065452698ab97e5da77d132d00276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/269e8130b77065452698ab97e5da77d132d00276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269e8130b77065452698ab97e5da77d132d00276/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d3bfc0851ac1b489c4dea5b57dcc08adb20457"}], "stats": {"total": 135, "additions": 79, "deletions": 56}, "files": [{"sha": "76a6e2b542de2d9059189f6f35360fb7395724bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269e8130b77065452698ab97e5da77d132d00276/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269e8130b77065452698ab97e5da77d132d00276/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=269e8130b77065452698ab97e5da77d132d00276", "patch": "@@ -1,3 +1,10 @@\n+2020-02-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (iter_reference_t)\n+\t(iter_rvalue_reference_t, iter_common_reference_t, indirect_result_t):\n+\tRemove workarounds for PR c++/67704.\n+\t* testsuite/24_iterators/aliases.cc: New test.\n+\n 2020-02-05  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/bits/stl_iterator.h (move_iterator::move_iterator): Move __i"}, {"sha": "d9b8958d0a76339f0459d73ab70b8c56835edb47", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 11, "deletions": 56, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269e8130b77065452698ab97e5da77d132d00276/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269e8130b77065452698ab97e5da77d132d00276/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=269e8130b77065452698ab97e5da77d132d00276", "patch": "@@ -70,17 +70,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  { *__t } -> __can_reference;\n \t};\n-\n-    // FIXME: needed due to PR c++/67704\n-    template<__detail::__dereferenceable _Tp>\n-      struct __iter_ref\n-      {\n-\tusing type = decltype(*std::declval<_Tp&>());\n-      };\n   } // namespace __detail\n \n-  template<typename _Tp>\n-    using iter_reference_t = typename __detail::__iter_ref<_Tp>::type;\n+  template<__detail::__dereferenceable _Tp>\n+    using iter_reference_t = decltype(*std::declval<_Tp&>());\n \n   namespace ranges\n   {\n@@ -127,26 +120,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     } // inline namespace __cust\n   } // namespace ranges\n \n-  namespace __detail\n-  {\n-    // FIXME: needed due to PR c++/67704\n-    template<__detail::__dereferenceable _Tp>\n-      struct __iter_rvalue_ref\n-      { };\n-\n-    template<__detail::__dereferenceable _Tp>\n-      requires requires(_Tp& __t)\n-      {\n-\t{ ranges::iter_move(__t) } -> __detail::__can_reference;\n-      }\n-      struct __iter_rvalue_ref<_Tp>\n-      { using type = decltype(ranges::iter_move(std::declval<_Tp&>())); };\n-\n-  } // namespace __detail\n-\n-  template<typename _Tp>\n+  template<__detail::__dereferenceable _Tp>\n+    requires requires(_Tp& __t)\n+    { { ranges::iter_move(__t) } -> __detail::__can_reference; }\n     using iter_rvalue_reference_t\n-      = typename __detail::__iter_rvalue_ref<_Tp>::type;\n+      = decltype(ranges::iter_move(std::declval<_Tp&>()));\n \n   template<typename> struct incrementable_traits { };\n \n@@ -467,18 +445,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       && common_reference_with<iter_rvalue_reference_t<_In>&&,\n \t\t\t       const iter_value_t<_In>&>;\n \n-  namespace __detail\n-  {\n-    // FIXME: needed due to PR c++/67704\n-    template<readable _Tp>\n-      struct __iter_common_ref\n-      : common_reference<iter_reference_t<_Tp>, iter_value_t<_Tp>&>\n-      { };\n-  } // namespace __detail\n-\n-  template<typename _Tp>\n+  template<readable _Tp>\n     using iter_common_reference_t\n-      = typename __detail::__iter_common_ref<_Tp>::type;\n+      = common_reference_t<iter_reference_t<_Tp>, iter_value_t<_Tp>&>;\n \n   /// Requirements for writing a value into an iterator's referenced object.\n   template<typename _Out, typename _Tp>\n@@ -663,24 +632,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       && strict_weak_order<_Fn&, iter_common_reference_t<_I1>,\n \t\t\t   iter_common_reference_t<_I2>>;\n \n-  namespace __detail\n-  {\n-    // FIXME: needed due to PR c++/67704\n-    template<typename _Fn, typename... _Is>\n-      struct __indirect_result\n-      { };\n-\n-    template<typename _Fn, typename... _Is>\n-      requires (readable<_Is> && ...)\n-\t&& invocable<_Fn, iter_reference_t<_Is>...>\n-      struct __indirect_result<_Fn, _Is...>\n-      : invoke_result<_Fn, iter_reference_t<_Is>...>\n-      { };\n-  } // namespace __detail\n-\n   template<typename _Fn, typename... _Is>\n-    using indirect_result_t = typename\n-      __detail::__indirect_result<_Fn, _Is...>::type;\n+    requires (readable<_Is> && ...)\n+      && invocable<_Fn, iter_reference_t<_Is>...>\n+    using indirect_result_t = invoke_result_t<_Fn, iter_reference_t<_Is>...>;\n \n   /// [projected], projected\n   template<readable _Iter, indirectly_regular_unary_invocable<_Iter> _Proj>"}, {"sha": "29bb56ec0d387bef008089403ef76287f8a48747", "filename": "libstdc++-v3/testsuite/24_iterators/aliases.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269e8130b77065452698ab97e5da77d132d00276/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Faliases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269e8130b77065452698ab97e5da77d132d00276/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Faliases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Faliases.cc?ref=269e8130b77065452698ab97e5da77d132d00276", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+template<typename T>\n+struct Dereferenceable { T operator*(); };\n+\n+template<typename T>\n+  concept has_iter_reference\n+    = requires { typename std::iter_reference_t<T>; };\n+\n+template<typename T, typename U>\n+  concept is_iter_reference_for\n+    = has_iter_reference<U> && std::same_as<T, std::iter_reference_t<U>>;\n+\n+static_assert(!has_iter_reference<Dereferenceable<void>>);\n+static_assert(is_iter_reference_for<int, Dereferenceable<int>>);\n+static_assert(is_iter_reference_for<int&, Dereferenceable<int&>>);\n+static_assert(is_iter_reference_for<int&&, Dereferenceable<int&&>>);\n+static_assert(is_iter_reference_for<int&, int*>);\n+static_assert(is_iter_reference_for<const int&, const int*>);\n+\n+template<typename T>\n+  concept has_iter_rvalue_reference\n+    = requires { typename std::iter_rvalue_reference_t<T>; };\n+\n+template<typename T, typename U>\n+  concept is_iter_rvalue_reference_for\n+    = has_iter_rvalue_reference<U>\n+    && std::same_as<T, std::iter_rvalue_reference_t<U>>;\n+\n+static_assert(!has_iter_rvalue_reference<Dereferenceable<void>>);\n+static_assert(is_iter_rvalue_reference_for<int, Dereferenceable<int>>);\n+static_assert(is_iter_rvalue_reference_for<int&&, Dereferenceable<int&>>);\n+static_assert(is_iter_rvalue_reference_for<int&&, Dereferenceable<int&&>>);\n+static_assert(is_iter_rvalue_reference_for<int&&, int*>);\n+static_assert(is_iter_rvalue_reference_for<const int&&, const int*>);\n+\n+// These functions should be found by ADL. std::move is not applied to result.\n+long iter_move(Dereferenceable<short>);\n+long& iter_move(Dereferenceable<short&&>);\n+static_assert(is_iter_rvalue_reference_for<long, Dereferenceable<short>>);\n+static_assert(is_iter_rvalue_reference_for<long&, Dereferenceable<short&&>>);"}]}