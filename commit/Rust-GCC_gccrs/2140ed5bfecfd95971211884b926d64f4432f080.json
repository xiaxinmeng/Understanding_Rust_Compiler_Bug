{"sha": "2140ed5bfecfd95971211884b926d64f4432f080", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0MGVkNWJmZWNmZDk1OTcxMjExODg0YjkyNmQ2NGY0NDMyZjA4MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-28T11:21:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-28T11:21:06Z"}, "message": "(expand_binop): Use expand_divmod to do integer division for DIV of\nMODE_COMPLEX_INT operands.\n\nFrom-SVN: r6670", "tree": {"sha": "3f6fe395db3eda23af5607ebdb6aee6382fe121a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f6fe395db3eda23af5607ebdb6aee6382fe121a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2140ed5bfecfd95971211884b926d64f4432f080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2140ed5bfecfd95971211884b926d64f4432f080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2140ed5bfecfd95971211884b926d64f4432f080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2140ed5bfecfd95971211884b926d64f4432f080/comments", "author": null, "committer": null, "parents": [{"sha": "2f3978449319a9a585f31f22c5fa43f40e5c5922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3978449319a9a585f31f22c5fa43f40e5c5922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3978449319a9a585f31f22c5fa43f40e5c5922"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "4e10e944b2df215db7a0dd2fa56528b0bc545421", "filename": "gcc/optabs.c", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2140ed5bfecfd95971211884b926d64f4432f080/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2140ed5bfecfd95971211884b926d64f4432f080/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=2140ed5bfecfd95971211884b926d64f4432f080", "patch": "@@ -1238,13 +1238,23 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t      real1 = force_reg (submode, real1);\n \n \t      /* Simply divide the real and imaginary parts by `c' */\n-\t      res = expand_binop (submode, binoptab, real0, real1,\n-\t\t\t\t  realr, unsignedp, methods);\n+\t      if (class == MODE_COMPLEX_FLOAT)\n+\t\tres = expand_binop (submode, binoptab, real0, real1,\n+\t\t\t\t    realr, unsignedp, methods);\n+\t      else\n+\t\tres = expand_divmod (0, TRUNC_DIV_EXPR, submode,\n+\t\t\t\t     real0, real1, realr, unsignedp);\n+\n \t      if (res != realr)\n \t\temit_move_insn (realr, res);\n \n-\t      res = expand_binop (submode, binoptab, imag0, real1,\n-\t\t\t\t  imagr, unsignedp, methods);\n+\t      if (class == MODE_COMPLEX_FLOAT)\n+\t\tres = expand_binop (submode, binoptab, imag0, real1,\n+\t\t\t\t    imagr, unsignedp, methods);\n+\t      else\n+\t\tres = expand_divmod (0, TRUNC_DIV_EXPR, submode,\n+\t\t\t\t     imag0, real1, imagr, unsignedp);\n+\n \t      if (res != imagr)\n \t\temit_move_insn (imagr, res);\n \t    }\n@@ -1254,9 +1264,8 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t      rtx divisor;\n \t      rtx real_t;\n \t      rtx imag_t;\n+\t      rtx lhs, rhs;\n \t      \n-\t      optab mulopt = unsignedp ? umul_widen_optab : smul_optab;\n-\n \t      /* Don't fetch these from memory more than once.  */\n \t      real0 = force_reg (submode, real0);\n \t      real1 = force_reg (submode, real1);\n@@ -1266,56 +1275,66 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \n \t      /* Divisor: c*c + d*d */\n \t      divisor = expand_binop (submode, add_optab,\n-\t\t\t\t      expand_binop (submode, mulopt,\n+\t\t\t\t      expand_binop (submode, smul_optab,\n \t\t\t\t\t\t    real1, real1,\n \t\t\t\t\t\t    0, unsignedp, methods),\n-\t\t\t\t      expand_binop (submode, mulopt,\n+\t\t\t\t      expand_binop (submode, smul_optab,\n \t\t\t\t\t\t    imag1, imag1,\n \t\t\t\t\t\t    0, unsignedp, methods),\n \t\t\t\t      0, unsignedp, methods);\n \n \t      if (! imag0)\t/* ((a)(c-id))/divisor */\n \t\t{\t/* (a+i0) / (c+id) = (ac/(cc+dd)) + i(-ad/(cc+dd)) */\n \t\t  /* Calculate the dividend */\n-\t\t  real_t = expand_binop (submode, mulopt, real0, real1,\n+\t\t  real_t = expand_binop (submode, smul_optab, real0, real1,\n \t\t\t\t\t 0, unsignedp, methods);\n \t\t  \n \t\t  imag_t\n \t\t    = expand_unop (submode, neg_optab,\n-\t\t\t\t   expand_binop (submode, mulopt, real0, imag1,\n-\t\t\t\t\t\t 0, unsignedp, methods),\n+\t\t\t\t   expand_binop (submode, smul_optab, real0,\n+\t\t\t\t\t\t imag1, 0, unsignedp, methods),\n \t\t\t\t   0, unsignedp);\n \t\t}\n \t      else\t\t/* ((a+ib)(c-id))/divider */\n \t\t{\n \t\t  /* Calculate the dividend */\n \t\t  real_t = expand_binop (submode, add_optab,\n-\t\t\t\t\t expand_binop (submode, mulopt,\n+\t\t\t\t\t expand_binop (submode, smul_optab,\n \t\t\t\t\t\t       real0, real1,\n \t\t\t\t\t\t       0, unsignedp, methods),\n-\t\t\t\t\t expand_binop (submode, mulopt,\n+\t\t\t\t\t expand_binop (submode, smul_optab,\n \t\t\t\t\t\t       imag0, imag1,\n \t\t\t\t\t\t       0, unsignedp, methods),\n \t\t\t\t\t 0, unsignedp, methods);\n \t\t  \n \t\t  imag_t = expand_binop (submode, sub_optab,\n-\t\t\t\t\t expand_binop (submode, mulopt,\n+\t\t\t\t\t expand_binop (submode, smul_optab,\n \t\t\t\t\t\t       imag0, real1,\n \t\t\t\t\t\t       0, unsignedp, methods),\n-\t\t\t\t\t expand_binop (submode, mulopt,\n+\t\t\t\t\t expand_binop (submode, smul_optab,\n \t\t\t\t\t\t       real0, imag1,\n \t\t\t\t\t\t       0, unsignedp, methods),\n \t\t\t\t\t 0, unsignedp, methods);\n \n \t\t}\n \n-\t      res = expand_binop (submode, binoptab, real_t, divisor,\n-\t\t\t\t  realr, unsignedp, methods);\n+\t      if (class == MODE_COMPLEX_FLOAT)\n+\t\tres = expand_binop (submode, binoptab, real_t, divisor,\n+\t\t\t\t    realr, unsignedp, methods);\n+\t      else\n+\t\tres = expand_divmod (0, TRUNC_DIV_EXPR, submode,\n+\t\t\t\t     real_t, divisor, realr, unsignedp);\n+\n \t      if (res != realr)\n \t\temit_move_insn (realr, res);\n \n-\t      res = expand_binop (submode, binoptab, imag_t, divisor,\n-\t\t\t\t  imagr, unsignedp, methods);\n+\t      if (class == MODE_COMPLEX_FLOAT)\n+\t\tres = expand_binop (submode, binoptab, imag_t, divisor,\n+\t\t\t\t    imagr, unsignedp, methods);\n+\t      else\n+\t\tres = expand_divmod (0, TRUNC_DIV_EXPR, submode,\n+\t\t\t\t     imag_t, divisor, imagr, unsignedp);\n+\n \t      if (res != imagr)\n \t\temit_move_insn (imagr, res);\n \t    }"}]}