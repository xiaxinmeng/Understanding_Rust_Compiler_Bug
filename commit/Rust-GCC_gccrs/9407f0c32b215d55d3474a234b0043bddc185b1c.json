{"sha": "9407f0c32b215d55d3474a234b0043bddc185b1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwN2YwYzMyYjIxNWQ1NWQzNDc0YTIzNGIwMDQzYmRkYzE4NWIxYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-24T17:14:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-24T17:14:27Z"}, "message": "testsuite: C++14 vs. C++17 struct-layout-1.exp testing with ALT_CXX_UNDER_TEST [PR94383]\n\n> I haven't added (yet) checks if the alternate compiler does support these\n> options (I think that can be done incrementally), so for now this testing is\n> done only if the alternate compiler is not used.\n\nThis patch does that, so now when testing against not too old compiler\nit can do the -std=c++14 vs. -std=c++17 testing also between under test and\nalt compilers.\n\n2020-04-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/94383\n\t* g++.dg/compat/struct-layout-1.exp: Use the -std=c++14 vs. -std=c++17\n\tABI compatibility testing even with ALT_CXX_UNDER_TEST, as long as\n\tthat compiler accepts -std=c++14 and -std=c++17 options.", "tree": {"sha": "ad1035682b884c8c35a72db8d39d67bf4c21614b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad1035682b884c8c35a72db8d39d67bf4c21614b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9407f0c32b215d55d3474a234b0043bddc185b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9407f0c32b215d55d3474a234b0043bddc185b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9407f0c32b215d55d3474a234b0043bddc185b1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9407f0c32b215d55d3474a234b0043bddc185b1c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01f5d5e8f9bc4df0b99dd5b825b39e10af543304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f5d5e8f9bc4df0b99dd5b825b39e10af543304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f5d5e8f9bc4df0b99dd5b825b39e10af543304"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "099c76aee60aa0749c0f7d689d8ef594eac4577a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9407f0c32b215d55d3474a234b0043bddc185b1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9407f0c32b215d55d3474a234b0043bddc185b1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9407f0c32b215d55d3474a234b0043bddc185b1c", "patch": "@@ -1,3 +1,10 @@\n+2020-04-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/94383\n+\t* g++.dg/compat/struct-layout-1.exp: Use the -std=c++14 vs. -std=c++17\n+\tABI compatibility testing even with ALT_CXX_UNDER_TEST, as long as\n+\tthat compiler accepts -std=c++14 and -std=c++17 options.\n+\n 2020-04-24  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* lib/target-supports.exp (available_vector_sizes): Add amdgcn."}, {"sha": "f2a20aafafd61a138fd5fc4a2428bc551ef76192", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9407f0c32b215d55d3474a234b0043bddc185b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9407f0c32b215d55d3474a234b0043bddc185b1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp?ref=9407f0c32b215d55d3474a234b0043bddc185b1c", "patch": "@@ -142,7 +142,19 @@ if { $status == 0 } then {\n     file delete -force $tstobjdir\n     file mkdir $tstobjdir\n     set generator_args \"-s $srcdir/$subdir -d $tstobjdir\"\n-    if { $use_alt == 0 } then {\n+    set test_cxx14_vs_cxx17 1\n+    if { $use_alt != 0 } then {\n+\tcompat-use-alt-compiler\n+\tif { [check_no_compiler_messages_nocache compat_alt_has_cxx14 object {\n+\t\tint dummy; } \"-std=c++14\"] == 0 } {\n+\t    set test_cxx14_vs_cxx17 0\n+\t} elseif { [check_no_compiler_messages_nocache compat_alt_has_cxx17 object {\n+\t\tint dummy; } \"-std=c++17\"] == 0 } {\n+\t    set test_cxx14_vs_cxx17 0\n+\t}\n+\tcompat-use-tst-compiler\n+    }\n+    if { $test_cxx14_vs_cxx17 != 0 } then {\n \tset generator_args \"$generator_args -c\"\n     }\n     if [info exists env(RUN_ALL_COMPAT_TESTS) ] then {"}]}