{"sha": "62b233f22449de60755b07c16f16b1a020c0708c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiMjMzZjIyNDQ5ZGU2MDc1NWIwN2MxNmYxNmIxYTAyMGMwNzA4Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-04-05T08:05:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-04-05T08:05:06Z"}, "message": "re PR middle-end/70499 (internal compiler error: in make_ssa_name_fn, at tree-ssanames.c:266)\n\n2016-04-05  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/70499\n\t* gimplify-me.c (gimple_regimplify_operands): Do not rewrite\n\tnon-register type temporaries into SSA.\n\n\t* g++.dg/torture/pr70499.C: New testcase.\n\nFrom-SVN: r234738", "tree": {"sha": "5465e36f6a83bb77f9fd19e1e28dd9eda86cc48e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5465e36f6a83bb77f9fd19e1e28dd9eda86cc48e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62b233f22449de60755b07c16f16b1a020c0708c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b233f22449de60755b07c16f16b1a020c0708c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b233f22449de60755b07c16f16b1a020c0708c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b233f22449de60755b07c16f16b1a020c0708c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc05759d4c26822df221adb12ff6d8a4c28154a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc05759d4c26822df221adb12ff6d8a4c28154a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc05759d4c26822df221adb12ff6d8a4c28154a9"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "b97f4ac848fa59e4452857ddc55fe688b507bea1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b233f22449de60755b07c16f16b1a020c0708c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b233f22449de60755b07c16f16b1a020c0708c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62b233f22449de60755b07c16f16b1a020c0708c", "patch": "@@ -1,3 +1,9 @@\n+2016-04-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70499\n+\t* gimplify-me.c (gimple_regimplify_operands): Do not rewrite\n+\tnon-register type temporaries into SSA.\n+\n 2016-04-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/66223"}, {"sha": "28e467b990e01e3ce3c9f9ebc9bc1f69dadaeda8", "filename": "gcc/gimplify-me.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b233f22449de60755b07c16f16b1a020c0708c/gcc%2Fgimplify-me.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b233f22449de60755b07c16f16b1a020c0708c/gcc%2Fgimplify-me.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify-me.c?ref=62b233f22449de60755b07c16f16b1a020c0708c", "patch": "@@ -299,7 +299,8 @@ gimple_regimplify_operands (gimple *stmt, gimple_stmt_iterator *gsi_p)\n \t  if (need_temp)\n \t    {\n \t      tree temp = create_tmp_reg (TREE_TYPE (lhs));\n-\t      if (gimple_in_ssa_p (cfun))\n+\t      if (gimple_in_ssa_p (cfun)\n+\t\t  && is_gimple_reg_type (TREE_TYPE (lhs)))\n \t\ttemp = make_ssa_name (temp);\n \t      gimple_set_lhs (stmt, temp);\n \t      post_stmt = gimple_build_assign (lhs, temp);"}, {"sha": "baebdb0a21b89fde7fd678fe564e4b716d5e3bfd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b233f22449de60755b07c16f16b1a020c0708c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b233f22449de60755b07c16f16b1a020c0708c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62b233f22449de60755b07c16f16b1a020c0708c", "patch": "@@ -1,3 +1,8 @@\n+2016-04-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70499\n+\t* g++.dg/torture/pr70499.C: New testcase.\n+\n 2016-04-05  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/20030814-6.c: Fix testcase, disable FRE,"}, {"sha": "954fea5de2f75afe3102d48560af25fafd3a1291", "filename": "gcc/testsuite/g++.dg/torture/pr70499.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b233f22449de60755b07c16f16b1a020c0708c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70499.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b233f22449de60755b07c16f16b1a020c0708c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70499.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70499.C?ref=62b233f22449de60755b07c16f16b1a020c0708c", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-w -Wno-psabi\" }\n+// { dg-additional-options \"-mavx\" { target x86_64-*-* i?86-*-* } }\n+\n+typedef double __m256d __attribute__ ((__vector_size__ (32), __may_alias__));\n+\n+struct SIMD {\n+  __m256d data;\n+  SIMD() {};\n+  SIMD (double val) { }\n+  SIMD(__m256d _data) { data = _data; }\n+  SIMD operator* (SIMD a) { return a; }\n+};\n+\n+struct Foo {\n+  SIMD val;\n+  SIMD dval[2];\n+  __attribute__((__always_inline__)) SIMD & Value() throw() { return val; }\n+  __attribute__((__always_inline__)) Foo operator* ( const Foo & y) throw() \n+    {\n+      Foo res;\n+      SIMD hx;\n+      SIMD hy;\n+      res.Value() = hx*hy;\n+      res.dval[0] = hx*hy;\n+      return res;\n+    }\n+};\n+\n+template<typename Tx>  \n+__attribute__((__always_inline__)) inline void inlineFunc(Tx hx[]) {\n+    Tx x = hx[0], y = hx[1];\n+    Tx lam[1] = (x*y);\n+}\n+\n+void FooBarFunc () {\n+  Foo adp[2];\n+  inlineFunc (adp);\n+}"}]}