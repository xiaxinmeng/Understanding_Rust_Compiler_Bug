{"sha": "c275297bdd09468bb84ab839e89f585ca9541fee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI3NTI5N2JkZDA5NDY4YmI4NGFiODM5ZTg5ZjU4NWNhOTU0MWZlZQ==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2008-08-06T06:23:47Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2008-08-06T06:23:47Z"}, "message": "re PR target/35659 (Miscompiled code with -O2 (but not with -O2 -funroll-loops) on ia64)\n\n\tPR target/35659\n\t* haifa-sched.c (sched_insn_is_legitimate_for_speculation_p): Move ...\n\t* sched-deps.c (sched_insn_is_legitimate_for_speculation_p): ... here.\n\tDon't allow predicated instructions for data speculation.\n\t* sched-int.h (sched_insn_is_legitimate_for_speculation_p): Move\n\tdeclaration.\n\nFrom-SVN: r138759", "tree": {"sha": "8f3b78a1d1981ab8d1ecf8b75384494399203c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f3b78a1d1981ab8d1ecf8b75384494399203c58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c275297bdd09468bb84ab839e89f585ca9541fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c275297bdd09468bb84ab839e89f585ca9541fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c275297bdd09468bb84ab839e89f585ca9541fee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c275297bdd09468bb84ab839e89f585ca9541fee/comments", "author": null, "committer": null, "parents": [{"sha": "a0d33ff828f123b1682eeb346885b2f40e2db224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d33ff828f123b1682eeb346885b2f40e2db224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d33ff828f123b1682eeb346885b2f40e2db224"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "7b50bdf77ad0e312283d622ad4133b0cbfb799dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c275297bdd09468bb84ab839e89f585ca9541fee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c275297bdd09468bb84ab839e89f585ca9541fee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c275297bdd09468bb84ab839e89f585ca9541fee", "patch": "@@ -1,3 +1,12 @@\n+2008-08-06  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR target/35659\n+\t* haifa-sched.c (sched_insn_is_legitimate_for_speculation_p): Move ...\n+\t* sched-deps.c (sched_insn_is_legitimate_for_speculation_p): ... here.\n+\tDon't allow predicated instructions for data speculation.\n+\t* sched-int.h (sched_insn_is_legitimate_for_speculation_p): Move\n+\tdeclaration.\n+\n 2008-08-06  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* haifa-sched.c (extend_global): Split to extend_global_data and"}, {"sha": "76282bd0ced7d41fe81302bd6d4101908afcf827", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c275297bdd09468bb84ab839e89f585ca9541fee/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c275297bdd09468bb84ab839e89f585ca9541fee/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=c275297bdd09468bb84ab839e89f585ca9541fee", "patch": "@@ -4019,32 +4019,6 @@ change_pattern (rtx insn, rtx new_pat)\n   dfa_clear_single_insn_cache (insn);\n }\n \n-/* Return true if INSN can potentially be speculated with type DS.  */\n-bool\n-sched_insn_is_legitimate_for_speculation_p (const_rtx insn, ds_t ds)\n-{\n-  if (HAS_INTERNAL_DEP (insn))\n-    return false;\n-\n-  if (!NONJUMP_INSN_P (insn))\n-    return false;\n-\n-  if (SCHED_GROUP_P (insn))\n-    return false;\n-\n-  if (IS_SPECULATION_CHECK_P (insn))\n-    return false;\n-\n-  if (side_effects_p (PATTERN (insn)))\n-    return false;\n-\n-  if ((ds & BE_IN_SPEC)\n-      && may_trap_p (PATTERN (insn)))\n-    return false;\n-\n-  return true;\n-}\n-\n /* -1 - can't speculate,\n    0 - for speculation with REQUEST mode it is OK to use\n    current instruction pattern,"}, {"sha": "bbd7a36a44132ba953b513c1378f2ff052a7599e", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c275297bdd09468bb84ab839e89f585ca9541fee/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c275297bdd09468bb84ab839e89f585ca9541fee/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=c275297bdd09468bb84ab839e89f585ca9541fee", "patch": "@@ -536,6 +536,46 @@ sched_insns_conditions_mutex_p (const_rtx insn1, const_rtx insn2)\n }\n \f\n \n+/* Return true if INSN can potentially be speculated with type DS.  */\n+bool\n+sched_insn_is_legitimate_for_speculation_p (const_rtx insn, ds_t ds)\n+{\n+  if (HAS_INTERNAL_DEP (insn))\n+    return false;\n+\n+  if (!NONJUMP_INSN_P (insn))\n+    return false;\n+\n+  if (SCHED_GROUP_P (insn))\n+    return false;\n+\n+  if (IS_SPECULATION_CHECK_P (insn))\n+    return false;\n+\n+  if (side_effects_p (PATTERN (insn)))\n+    return false;\n+\n+  if (ds & BE_IN_SPEC)\n+    /* The following instructions, which depend on a speculatively scheduled\n+       instruction, cannot be speculatively scheduled along.  */\n+    {\n+      if (may_trap_p (PATTERN (insn)))\n+\t/* If instruction might trap, it cannot be speculatively scheduled.\n+\t   For control speculation it's obvious why and for data speculation\n+\t   it's because the insn might get wrong input if speculation\n+\t   wasn't successful.  */\n+\treturn false;\n+\n+      if ((ds & BE_IN_DATA)\n+\t  && sched_get_condition (insn) != NULL_RTX)\n+\t/* If this is a predicated instruction, then it cannot be\n+\t   speculatively scheduled.  See PR35659.  */\n+\treturn false;\n+    }\n+\n+  return true;\n+}\n+\n /* Initialize LIST_PTR to point to one of the lists present in TYPES_PTR,\n    initialize RESOLVED_P_PTR with true if that list consists of resolved deps,\n    and remove the type of returned [through LIST_PTR] list from TYPES_PTR."}, {"sha": "bfbb86124561c5043e2a89112fe9071d92b55c87", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c275297bdd09468bb84ab839e89f585ca9541fee/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c275297bdd09468bb84ab839e89f585ca9541fee/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=c275297bdd09468bb84ab839e89f585ca9541fee", "patch": "@@ -805,6 +805,7 @@ enum INSN_TRAP_CLASS\n \n /* Functions in sched-deps.c.  */\n extern bool sched_insns_conditions_mutex_p (const_rtx, const_rtx);\n+extern bool sched_insn_is_legitimate_for_speculation_p (const_rtx, ds_t);\n extern void add_dependence (rtx, rtx, enum reg_note);\n extern void sched_analyze (struct deps *, rtx, rtx);\n extern bool deps_pools_are_empty_p (void);\n@@ -838,7 +839,6 @@ extern void sched_finish (void);\n \n extern int try_ready (rtx);\n extern void * xrecalloc (void *, size_t, size_t, size_t);\n-extern bool sched_insn_is_legitimate_for_speculation_p (const_rtx, ds_t);\n extern void unlink_bb_notes (basic_block, basic_block);\n extern void add_block (basic_block, basic_block);\n extern rtx bb_note (basic_block);"}]}