{"sha": "8273aa77d4e122fd036b1555b1a6f2496887e481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3M2FhNzdkNGUxMjJmZDAzNmIxNTU1YjFhNmYyNDk2ODg3ZTQ4MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-01-09T21:46:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-01-09T21:46:13Z"}, "message": "PR libstdc++/80276 fix pretty printers for array smart pointers\n\n\tPR libstdc++/80276\n\t* python/libstdcxx/v6/printers.py (SharedPointerPrinter)\n\t(UniquePointerPrinter): Print correct template argument, not type of\n\tthe pointer.\n\t(TemplateTypePrinter._recognizer.recognize): Handle failure to lookup\n\ta type.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Test unique_ptr of\n\tarray type.\n\t* testsuite/libstdc++-prettyprinters/cxx17.cc: Test shared_ptr and\n\tweak_ptr of array types.\n\nFrom-SVN: r256400", "tree": {"sha": "bc03ad244623172d08b5c2628d2d373fd440eb55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc03ad244623172d08b5c2628d2d373fd440eb55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8273aa77d4e122fd036b1555b1a6f2496887e481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8273aa77d4e122fd036b1555b1a6f2496887e481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8273aa77d4e122fd036b1555b1a6f2496887e481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8273aa77d4e122fd036b1555b1a6f2496887e481/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee6019ce5d3bc7e80ab1d8b8d2fbad3351ff778b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6019ce5d3bc7e80ab1d8b8d2fbad3351ff778b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6019ce5d3bc7e80ab1d8b8d2fbad3351ff778b"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "6c5a2741ba89a4a746387d51cd3f997977e41228", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8273aa77d4e122fd036b1555b1a6f2496887e481/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8273aa77d4e122fd036b1555b1a6f2496887e481/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8273aa77d4e122fd036b1555b1a6f2496887e481", "patch": "@@ -1,3 +1,16 @@\n+2018-01-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/80276\n+\t* python/libstdcxx/v6/printers.py (SharedPointerPrinter)\n+\t(UniquePointerPrinter): Print correct template argument, not type of\n+\tthe pointer.\n+\t(TemplateTypePrinter._recognizer.recognize): Handle failure to lookup\n+\ta type.\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Test unique_ptr of\n+\tarray type.\n+\t* testsuite/libstdc++-prettyprinters/cxx17.cc: Test shared_ptr and\n+\tweak_ptr of array types.\n+\n 2018-01-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/83709"}, {"sha": "d6de0969e1c472b5c3eef0e3562b586b61bd5c6f", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8273aa77d4e122fd036b1555b1a6f2496887e481/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8273aa77d4e122fd036b1555b1a6f2496887e481/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=8273aa77d4e122fd036b1555b1a6f2496887e481", "patch": "@@ -150,7 +150,7 @@ def to_string (self):\n                 state = 'expired, weak count %d' % weakcount\n             else:\n                 state = 'use count %d, weak count %d' % (usecount, weakcount - 1)\n-        return '%s<%s> (%s)' % (self.typename, str(self.pointer.type.target().strip_typedefs()), state)\n+        return '%s<%s> (%s)' % (self.typename, str(self.val.type.template_argument(0)), state)\n \n class UniquePointerPrinter:\n     \"Print a unique_ptr\"\n@@ -169,7 +169,7 @@ def children (self):\n         return SmartPtrIterator(self.pointer)\n \n     def to_string (self):\n-        return ('std::unique_ptr<%s>' % (str(self.pointer.type.target())))\n+        return ('std::unique_ptr<%s>' % (str(self.val.type.template_argument(0))))\n \n def get_value_from_aligned_membuf(buf, valtype):\n     \"\"\"Returns the value held in a __gnu_cxx::__aligned_membuf.\"\"\"\n@@ -1328,9 +1328,13 @@ def recognize(self, type_obj):\n                 for i, sub in enumerate(subs):\n                     if ('{%d}' % (i+1)) in self.subst:\n                         # apply recognizers to subgroup\n+                        try:\n+                            subtype = gdb.lookup_type(sub)\n+                        except gdb.error:\n+                            continue\n                         rep = gdb.types.apply_type_recognizers(\n                                 gdb.types.get_type_recognizers(),\n-                                gdb.lookup_type(sub))\n+                                subtype)\n                         if rep:\n                             subs[i] = rep\n                 subs = [None] + subs"}, {"sha": "0ecc3771351915bc6d01d5d9bb89b2db69a6e7a3", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8273aa77d4e122fd036b1555b1a6f2496887e481/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8273aa77d4e122fd036b1555b1a6f2496887e481/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=8273aa77d4e122fd036b1555b1a6f2496887e481", "patch": "@@ -131,6 +131,12 @@ main()\n   std::unique_ptr<datum> &ruptr = uptr;\n // { dg-final { regexp-test ruptr {std::unique_ptr.datum. = {get\\(\\) = 0x.*}} } }\n \n+  using data = datum[];\n+  std::unique_ptr<data> arrptr (new datum[2]);\n+// { dg-final { regexp-test arrptr {std::unique_ptr.datum \\[\\]. = {get\\(\\) = 0x.*}} } }\n+  std::unique_ptr<data>& rarrptr = arrptr;\n+// { dg-final { regexp-test rarrptr {std::unique_ptr.datum \\[\\]. = {get\\(\\) = 0x.*}} } }\n+\n   ExTuple tpl(6,7);\n // { dg-final { note-test tpl {std::tuple containing = {[1] = 6, [2] = 7}} } }\n   ExTuple &rtpl = tpl;\n@@ -144,6 +150,7 @@ main()\n   use(eums);\n   use(uoms);\n   use(uptr->s);\n+  use(arrptr[0].s);\n \n   std::cout << \"\\n\";\n   return 0;"}, {"sha": "0c7cb4c9bb6c704f979e68ab6ea336c46834cbc7", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx17.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8273aa77d4e122fd036b1555b1a6f2496887e481/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8273aa77d4e122fd036b1555b1a6f2496887e481/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc?ref=8273aa77d4e122fd036b1555b1a6f2496887e481", "patch": "@@ -29,6 +29,7 @@\n #include <string>\n #include <map>\n #include <unordered_set>\n+#include <memory>\n #include <iostream>\n \n using std::any;\n@@ -37,6 +38,8 @@ using std::variant;\n using std::string_view;\n using std::map;\n using std::unordered_set;\n+using std::shared_ptr;\n+using std::weak_ptr;\n \n int\n main()\n@@ -100,6 +103,18 @@ main()\n   unordered_set<int>::node_type n3 = s.extract(3);\n // { dg-final { note-test n1 {node handle for unordered set with element = {3}}}}\n \n+  shared_ptr<int[]> p(new int[1]);\n+  weak_ptr wp = p;\n+  weak_ptr wp2 = p;\n+// { dg-final { regexp-test p {std::shared_ptr.int \\[\\]. \\(use count 1, weak count 2\\) = {get\\(\\) = 0x.*}} } }\n+// { dg-final { regexp-test wp {std::weak_ptr.int \\[\\]. \\(use count 1, weak count 2\\) = {get\\(\\) = 0x.*}} } }\n+\n+  shared_ptr<int[2]> q(new int[2]);\n+  shared_ptr q2 = q;\n+  weak_ptr wq = q;\n+// { dg-final { regexp-test q {std::shared_ptr.int \\[2\\]. \\(use count 2, weak count 1\\) = {get\\(\\) = 0x.*}} } }\n+// { dg-final { regexp-test wq {std::weak_ptr.int \\[2\\]. \\(use count 2, weak count 1\\) = {get\\(\\) = 0x.*}} } }\n+\n   std::cout << \"\\n\";\n   return 0;\t\t\t// Mark SPOT\n }"}]}