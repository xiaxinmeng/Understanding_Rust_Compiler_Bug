{"sha": "440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwYzhhMGE5MWI3ZWExNjAzZTNlMWVhYWU2NGZjMGUxMmYwYzRmMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-04T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-04T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "d537634d8a5a0caa2daec74a58fd4e927197e6a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d537634d8a5a0caa2daec74a58fd4e927197e6a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/comments", "author": null, "committer": null, "parents": [{"sha": "47d25a0314d8f28d399cd93f673df5886ca81d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d25a0314d8f28d399cd93f673df5886ca81d78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d25a0314d8f28d399cd93f673df5886ca81d78"}], "stats": {"total": 355, "additions": 354, "deletions": 1}, "files": [{"sha": "fabfc3b256daf8aec404f25f2d85b1925a11251a", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1,3 +1,7 @@\n+2021-06-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* MAINTAINERS: Add DCO version number.\n+\n 2021-06-02  Jason Merrill  <jason@redhat.com>\n \n \t* MAINTAINERS: Add DCO section."}, {"sha": "06e6dbeaa5a374cb4aac570a681159f4c48e006d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1,3 +1,170 @@\n+2021-06-03  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/cris/cris.md (*addi_reload): Fix empty split condition.\n+\n+2021-06-03  Jim Wilson  <jimw@sifive.com>\n+\n+\t* config.gcc (riscv*-*-*): If --with-riscv-attribute not used,\n+\tturn it on for all riscv targets.\n+\n+2021-06-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* config/i386/i386-expand.c (ix86_expand_vector_set):\n+\tHandle V2HI and V4QI modes.\n+\t(ix86_expand_vector_extract): Ditto.\n+\t* config/i386/mmx.md (*pinsrw): New insn pattern.\n+\t(*pinsrb): Ditto.\n+\t(*pextrw): Ditto.\n+\t(*pextrw_zext): Ditto.\n+\t(*pextrb): Ditto.\n+\t(*pextrb_zext): Ditto.\n+\t(vec_setv2hi): New expander.\n+\t(vec_extractv2hihi): Ditto.\n+\t(vec_setv4qi): Ditto.\n+\t(vec_extractv4qiqi): Ditto.\n+\t(vec_setv8qi): Enable only for TARGET_SSE4_1.\n+\t(vec_extractv8qiqi): Ditto.\n+\n+2021-06-03  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/genfusion.pl (gen_logical_addsubf): Fix input\n+\torder to subf instruction.\n+\t* config/rs6000/fusion.md: Regenerate.\n+\n+2021-06-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* calls.c (get_size_range): Use range_of_expr instead of\n+\tdetermine_value_range.\n+\t* tree-affine.c (expr_to_aff_combination): Same.\n+\t* tree-data-ref.c (split_constant_offset): Same.\n+\t* tree-vrp.c (determine_value_range_1): Remove.\n+\t(determine_value_range): Remove.\n+\t* tree-vrp.h (determine_value_range): Remove.\n+\n+2021-06-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* function-tests.c (test_ranges): Call gimple_range_tests.\n+\t* gimple-range-cache.cc (ranger_cache::range_of_expr): Pass stmt\n+\tto get_tree_range.\n+\t* gimple-range.cc (fur_source::get_operand): Do not call\n+\tget_tree_range or gimple_range_global.\n+\tget_tree_range.\n+\t(get_tree_range): Move to value-query.cc.\n+\tCall get_arith_expr_range.\n+\t(gimple_ranger::range_of_expr): Add argument to get_tree_range.\n+\tInclude gimple-range-tests.cc.\n+\t* gimple-range.h (fold_range): Add argument.\n+\t(get_tree_range): Remove.\n+\t* selftest.h (gimple_range_tests): New.\n+\t* value-query.cc (global_range_query::range_of_expr): Add\n+\tstmt argument.\n+\t(range_query::get_tree_range): Move from gimple-range.cc.\n+\t* value-query.h (class range_query): Add get_tree_range and\n+\tget_arith_expr_range.  Make fur_source a friend.\n+\t* vr-values.c (vr_values::range_of_expr): Pass stmt to\n+\tget_tree_range.\n+\t* gimple-range-tests.cc: New file.\n+\n+2021-06-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::export_global_ranges): Call\n+\t  update_global_range.\n+\t* value-query.cc (update_global_range): New.\n+\t* value-query.h (update_global_range): New.\n+\n+2021-06-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c (diagnostic_show_locus): Don't reject\n+\tprinting the same location twice if there are fix-it hints,\n+\tmultiple locations, or a label.\n+\n+2021-06-03  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* tree-vect-loop.c (vect_transform_loop): Use main loop's various'\n+\tthresholds to narrow the upper bound on epilogue iterations.\n+\n+2021-06-03  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/mve.md (mve_vabsq_f<mode>): Use 'abs' instead of unspec.\n+\t(mve_vabsq_s<mode>): Likewise.\n+\t* config/arm/neon.md (abs<mode>2): Rename to neon_abs<mode>2.\n+\t* config/arm/unspecs.md (VABSQ_F, VABSQ_S): Delete.\n+\t* config/arm/vec-common.md (neg<mode>2): Rename to\n+\t<absneg_str><mode>2.\n+\n+2021-06-03  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* common/config/arc/arc-common.c (arc_option_optimization_table):\n+\tRemove malign-call.\n+\t* config/arc/arc.c (arc_unalign_branch_p): Remove unused function.\n+\t* config/arc/arc.h (TARGET_MIXED_CODE): Remove macro.\n+\t(INDEX_REG_CLASS): Only refer to GENERAL_REGS.\n+\t* config/arc/arc.md (abssi2_mixed): Remove pattern.\n+\t* config/arc/arc.opt (munalign-prob-threshold): Mark it obsolete.\n+\t(malign-call): Likewise.\n+\t(mmixed-code): Likewise.\n+\t* doc/invoke.texi (ARC): Update doc.\n+\n+2021-06-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Use proper Enum values.\n+\t* opts.c (COVERAGE_SANITIZER_OPT): Remove.\n+\t(parse_sanitizer_options): Handle only sanitizer_opts.\n+\t(common_handle_option): Just assign value.\n+\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ipa/99122\n+\t* tree-inline.c (inline_forbidden_p): Remove test on return type.\n+\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.c (loc_list_from_tree_1) <FUNCTION_DECL>: Also generate\n+\tDW_OP_GNU_variable_value referencing an existing DIE at file scope.\n+\t(type_byte_size): Inline into...\n+\t(add_byte_size_attribute): ...this and call add_scalar_info.\n+\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.c (mem_loc_descriptor) <UDIV>: Fix typo.\n+\t(typed_binop_from_tree): New function.\n+\t(loc_list_from_tree_1) <EXACT_DIV_EXPR>: For an unsigned type,\n+\tturn a divide by a power of 2 into a shift.\n+\t<CEIL_DIV_EXPR>: For an unsigned type, use a signed divide if the\n+\tsize of the mode is lower than DWARF2_ADDR_SIZE; otherwise, do a\n+\ttyped divide by calling typed_binop_from_tree.\n+\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.c (scompare_loc_descriptor): Fix head comment.\n+\t(is_handled_procedure_type): Likewise.\n+\t(struct loc_descr_context): Add strict_signedness field.\n+\t(resolve_args_picking_1): Deal with DW_OP_[GNU_]deref_type,\n+\tDW_OP_[GNU_]convert and DW_OP_[GNU_]reinterpret.\n+\t(resolve_args_picking): Minor tweak.\n+\t(function_to_dwarf_procedure): Initialize strict_signedness field.\n+\t(type_byte_size): Likewise.\n+\t(field_byte_offset): Likewise.\n+\t(gen_descr_array_type_die): Likewise.\n+\t(gen_variant_part): Likewise.\n+\t(loc_list_from_tree_1) <CALL_EXPR>: Tidy up and set strict_signedness\n+\tto true when a context is present before evaluating the arguments.\n+\t<COND_EXPR>: Do not generate a useless comparison with zero.\n+\tWhen dereferencing an address, if strict_signedness is true and the\n+\ttype is small and signed, use DW_OP_deref_type to do the dereference\n+\tand then DW_OP_convert to convert back to the generic type.\n+\n+2021-06-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100859\n+\t* tree-inline.c (copy_tree_body_r): Handle iterators on\n+\tOMP_CLAUSE_AFFINITY or OMP_CLAUSE_DEPEND.\n+\n+2021-06-03  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/arc/arc.md (*bbit_di): Remove.\n+\n 2021-06-02  Christoph Muellner  <cmuellner@gcc.gnu.org>\n \n \tPR rtl-optimization/100264"}, {"sha": "8da0c6d18afba3c1299122e3df7a4450496977af", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1 +1 @@\n-20210603\n+20210604"}, {"sha": "9805f1843bae1ad9d7182d178dc241349cf794aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1,3 +1,10 @@\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Add PAT\n+\tlocal constant and use it throughout.  If it is set, use a ref-all\n+\tpointer type for the pointer-to-array field of the fat pointer type.\n+\t<E_Array_Subtype>: Add PAT local constant and use it throughout.\n+\n 2021-05-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* init.c (__gnat_error_handler): Remove register keyword."}, {"sha": "838d5f12aac7ec16f948f4bfe55347bdce914e20", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1,3 +1,13 @@\n+2021-06-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* store.h (store::get_direct_binding): Remove unused decl.\n+\t(store::get_default_binding): Likewise.\n+\n+2021-06-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* svalue.cc (poisoned_svalue::dump_to_pp): Dump type.\n+\t(compound_svalue::dump_to_pp): Dump any type.\n+\n 2021-05-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/100615"}, {"sha": "968322f94119591624dec4fe93b7a6b99bc795f9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1,3 +1,40 @@\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (dump_ada_macros): Minor tweaks.\n+\t(dump_ada_decl_name): Likewise.\n+\t(dump_anonymous_type_name): Remove parent parameter and adjust.\n+\t(dump_sloc): Minor tweak.\n+\t(dump_ada_array_type): Remove type parameter and adjust.\n+\t(dump_ada_enum_type): Remove parent parameter and adjust.\n+\t(dump_ada_node): Adjust calls to above functions.\n+\t(dumped_anonymous_types): New global variable.\n+\t(dump_nested_types_1): Rename into...\n+\t(dump_nested_types): ...this.\n+\t(dump_nested_type): Remove parent and dumped_types parameters.\n+\t<ARRAY_TYPE>: Replace dumped_types with dumped_anonymous_types.\n+\tAdjust calls to dump_anonymous_type_name and dump_ada_array_type.\n+\t(dump_ada_specs): Initialize and free dumped_anonymous_types.\n+\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (pp_ada_tree_identifier): Tidy up.\n+\t(dump_ada_node) <POINTER_TYPE>: Deal specially with external subtypes.\n+\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (dump_ada_enum_type): Dump a prefix for constants.\n+\t(htable_t): New typedef.\n+\t(overloaded_names): Use it.\n+\t(add_name): New function.\n+\t(init_overloaded_names): Use add_name to populate the table and add\n+\tspecial cases for sigaction and stat.\n+\t(overloaded_name_p): Rename into...\n+\t(overloading_index): ...this.  Do not initialize overloaded_names table\n+\there.  Return the index or zero.\n+\t(dump_ada_declaration): Minor tweaks.  Do not skip overloaded functions\n+\tbut add an overloading suffix instead.\n+\t(dump_ada_specs): Initialize overloaded_names tables here.\n+\n 2021-06-01  Martin Liska  <mliska@suse.cz>\n \n \tPR other/100759"}, {"sha": "3a7e3d44d41b2c5581ad6866e3b5a14685f32578", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1,3 +1,9 @@\n+2021-06-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100859\n+\t* c-typeck.c (c_finish_omp_clauses): Move OMP_CLAUSE_AFFINITY\n+\tafter depend only cases.\n+\n 2021-05-31  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/88601"}, {"sha": "6c0f38ce1be752f0342ecd6574622466e4401594", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1,3 +1,33 @@\n+2021-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100592\n+\t* decl.c (make_typename_type): After calling\n+\tlookup_template_class, adjust the result to its TYPE_NAME and\n+\tthen consider the tf_keep_type_decl flag.\n+\n+2021-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100862\n+\t* pt.c (set_current_access_from_decl): Move to ...\n+\t* class.c (set_current_access_from_decl): ... here.\n+\t(handle_using_decl): Use it to propagate the access of the\n+\tusing-enum decl to the copy of the imported enumerator.\n+\t* cp-tree.h (set_current_access_from_decl): Declare.\n+\t* decl.c (build_enumerator): Simplify using make_temp_override\n+\tand set_current_access_from_decl.\n+\n+2021-06-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100859\n+\t* semantics.c (handle_omp_array_sections_1): For\n+\tOMP_CLAUSE_{AFFINITY,DEPEND} handle FIELD_DECL base using\n+\tfinish_non_static_data_member and allow this as base.\n+\t(finish_omp_clauses): Move OMP_CLAUSE_AFFINITY\n+\tafter depend only cases.  Let this be diagnosed by !lvalue_p\n+\tcase for OMP_CLAUSE_{AFFINITY,DEPEND} and remove useless\n+\tassert.\n+\t* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_AFFINITY.\n+\n 2021-06-02  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100838"}, {"sha": "ac63a14d5541fc430f60125209e774c297f6b424", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1,3 +1,58 @@\n+2021-06-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* gcc.target/i386/vperm-v2hi.c: New test.\n+\t* gcc.target/i386/vperm-v4qi.c: Ditto.\n+\n+2021-06-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr80776-1.c: XFAIL and document the reason why.\n+\n+2021-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100592\n+\t* g++.dg/cpp0x/alias-decl-71.C: New test.\n+\n+2021-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100862\n+\t* g++.dg/cpp2a/using-enum-9.C: New test.\n+\n+2021-06-03  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/sve/part_vect_single_iter_epilog.c: New test.\n+\n+2021-06-03  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vabs.c: New test.\n+\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/bit_packed_array6.adb: New test.\n+\t* gnat.dg/bit_packed_array6_pkg.ads: New helper.\n+\n+2021-06-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/spellcheck-options-23.c: New test.\n+\n+2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/inline22.adb: New test.\n+\n+2021-06-03  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/cpunative/info_16: Update implementer.\n+\t* gcc.target/aarch64/cpunative/info_17: Likewise\n+\n+2021-06-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100859\n+\t* g++.dg/gomp/depend-iterator-3.C: New test.\n+\t* g++.dg/gomp/this-1.C: Don't expect any diagnostics for\n+\tthis as base expression of depend array section, expect a different\n+\terror wording for this as depend locator and add testcases\n+\tfor affinity clauses.\n+\n 2021-06-02  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100838"}, {"sha": "676e53054aaa4ab3fdfeaf027a17164cba71e4b1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=440c8a0a91b7ea1603e3e1eaae64fc0e12f0c4f1", "patch": "@@ -1,3 +1,40 @@\n+2021-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_algo.h (__detail::__can_reread_output):\n+\tFactor out this concept from ...\n+\t(__unique_copy_fn::operator()): ... here.  Use the concept\n+\tthroughout.\n+\t* testsuite/std/ranges/range.cc: Remove now ill-formed use\n+\tof range_value_t on an output_range.\n+\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper):\n+\tDefine value_type, pointer and reference member types to void.\n+\n+2021-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100577\n+\t* include/std/ranges (_RangeAdaptorClosure): Document\n+\t_S_has_simple_call_op mechanism.\n+\t(_RangeAdaptor): Document _S_has_simple_extra_args mechanism.\n+\t(__closure_has_simple_call_op): New concept.\n+\t(__adaptor_has_simple_extra_args): Likewise.\n+\t(_Partial<_Adaptor, _Args...>): New partial specialization.\n+\t(_Partial<_Adaptor, _Arg>): Likewise.\n+\t(_Pipe<_Lhs, _Rhs>): Likewise.\n+\t(views::_All::_S_has_simple_call_op): Define to true.\n+\t(views::_Filter::_S_has_simple_extra_args): Likewise.\n+\t(views::_Transform::_S_has_simple_extra_args): Likewise.\n+\t(views::_Take::_S_has_simple_extra_args): Likewise.\n+\t(views::_TakeWhile::_S_has_simple_extra_args): Likewise.\n+\t(views::_Drop::_S_has_simple_extra_args): Likewise.\n+\t(views::_DropWhile::_S_has_simple_extra_args): Likewise.\n+\t(views::_Join::_S_has_simple_call_op): Likewise.\n+\t(views::_Split): Document why we don't define\n+\t_S_has_simple_extra_args to true for this adaptor.\n+\t(views::_Common::_S_has_simple_call_op): Define to true.\n+\t(views::_Reverse::_S_has_simple_call_op): Likewise.\n+\t(views::_Elements::_S_has_simple_call_op): Likewise.\n+\t* testsuite/std/ranges/adaptors/100577.cc: New test.\n+\n 2021-06-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/100863"}]}