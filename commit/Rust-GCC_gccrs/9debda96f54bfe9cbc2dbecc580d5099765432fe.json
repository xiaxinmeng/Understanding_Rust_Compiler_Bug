{"sha": "9debda96f54bfe9cbc2dbecc580d5099765432fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlYmRhOTZmNTRiZmU5Y2JjMmRiZWNjNTgwZDUwOTk3NjU0MzJmZQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain.sandoe@sandoe-acoustics.co.uk", "date": "2010-03-24T22:51:08Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2010-03-24T22:51:08Z"}, "message": "re PR testsuite/42348 (Syntax of dg-skip-if in two obj-c++ tests)\n\n2010-03-24  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n\n\tPR testsuite/42348\n\t* lib/target-supports.exp: Add support for ObjC/ObjC++ tools in\n\tstandard tests.\n\t(check_effective_target_objc2): New proc.\n\t(check_effective_target_next_runtime): New proc.\n\t* lib/objc.exp: Determine which runtime is in force and support it.\n\t* lib/obj-c++.exp: Ditto.\n\nFrom-SVN: r157715", "tree": {"sha": "11901b325f62a78fe1486b244860a4328085cc85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11901b325f62a78fe1486b244860a4328085cc85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9debda96f54bfe9cbc2dbecc580d5099765432fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9debda96f54bfe9cbc2dbecc580d5099765432fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9debda96f54bfe9cbc2dbecc580d5099765432fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9debda96f54bfe9cbc2dbecc580d5099765432fe/comments", "author": null, "committer": null, "parents": [{"sha": "94ad7adc73607526003a3592bc5fdfd2d4b51182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ad7adc73607526003a3592bc5fdfd2d4b51182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ad7adc73607526003a3592bc5fdfd2d4b51182"}], "stats": {"total": 250, "additions": 184, "deletions": 66}, "files": [{"sha": "12021bca4115d10f43e2f9ea78f8dba7b061ce9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9debda96f54bfe9cbc2dbecc580d5099765432fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9debda96f54bfe9cbc2dbecc580d5099765432fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9debda96f54bfe9cbc2dbecc580d5099765432fe", "patch": "@@ -1,3 +1,13 @@\n+2010-03-24  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n+\n+\tPR testsuite/42348\n+\t* lib/target-supports.exp: Add support for ObjC/ObjC++ tools in\n+\tstandard tests.\n+\t(check_effective_target_objc2): New proc.\n+\t(check_effective_target_next_runtime): New proc.\n+\t* lib/objc.exp: Determine which runtime is in force and support it.\n+\t* lib/obj-c++.exp: Ditto.\n+\n 2010-03-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43502"}, {"sha": "45208e65b0bea2f7e1c538a6bf06c6d9ac390361", "filename": "gcc/testsuite/lib/obj-c++.exp", "status": "modified", "additions": 69, "deletions": 35, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9debda96f54bfe9cbc2dbecc580d5099765432fe/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9debda96f54bfe9cbc2dbecc580d5099765432fe/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp?ref=9debda96f54bfe9cbc2dbecc580d5099765432fe", "patch": "@@ -42,10 +42,10 @@ proc obj-c++_version { } {\n     \n     obj-c++_init\n \n-    # ignore any arguments after the command\n+    # Ignore any arguments after the command.\n     set compiler [lindex $OBJCXX_UNDER_TEST 0]\n     \n-    # verify that the compiler exists\n+    # Verify that the compiler exists.\n     if { [is_remote host] || [which $compiler] != 0 } then {\n \tset tmp [remote_exec host \"$compiler -v\"]\n \tset status [lindex $tmp 0];\n@@ -61,7 +61,7 @@ proc obj-c++_version { } {\n \t    clone_output \"Couldn't determine version of [which $compiler]\\n\"\n \t}\n     } else {\n-\t# compiler does not exist (this should have already been detected)\n+\t# Compiler does not exist (this should have already been detected)\n \twarning \"$compiler does not exist\"\n     }\n }\n@@ -93,7 +93,7 @@ proc obj-c++_include_flags { paths } {\n \n #\n # obj-c++_link_flags -- provide new version of obj-c++_link_flags\n-# (originally from libgloss.exp) which knows about the gcc tree structure\n+# (originally from libgloss.exp) which knows about the gcc tree structure.\n #\n \n proc obj-c++_link_flags { paths } {\n@@ -115,27 +115,31 @@ proc obj-c++_link_flags { paths } {\n           append ld_library_path \":${gccpath}/lib\"\n       }\n       if [file exists \"${gccpath}/libg++/libg++.a\"] {\n-          append flags \"-L${gccpath}/libg++ \"\n+          append flags \" -L${gccpath}/libg++ \"\n           append ld_library_path \":${gccpath}/libg++\"\n       }\n       if [file exists \"${gccpath}/libstdc++/libstdc++.a\"] {\n-          append flags \"-L${gccpath}/libstdc++ \"\n+          append flags \" -L${gccpath}/libstdc++ \"\n           append ld_library_path \":${gccpath}/libstdc++\"\n       }\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] {\n+          # Allow for %s spec substitutions\n+          append flags \" -B${gccpath}/libstdc++-v3/src/.libs \"\n           append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n           append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n       }\n       # Look for libstdc++.${shlib_ext}.\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.${shlib_ext}\"] {\n+\t  # Allow for %s spec substitutions\n+\t  append flags \" -B${gccpath}/libstdc++-v3/src/.libs \"\n \t  append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n \t  append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n       }\n       if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n-          append flags \"-L${gccpath}/libiberty \"\n+          append flags \" -L${gccpath}/libiberty \"\n       }\n       if [file exists \"${gccpath}/librx/librx.a\"] {\n-          append flags \"-L${gccpath}/librx \"\n+          append flags \" -L${gccpath}/librx \"\n       }\n \n       set objcpath \"[get_multilibs]\"\n@@ -145,24 +149,23 @@ proc obj-c++_link_flags { paths } {\n       }\n       # Now check if we have a shared only build.\n       if { $libobjc_dir == \"\"} {\n-\t  set libobjc_dir \\\n-\t      [lookfor_file ${objcpath} libobjc/.libs/libobjc.${shlib_ext}]\n-      }\n-      if { $libobjc_dir == \"\"} {\n-\t  set libobjc_dir \\\n-\t      [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.${shlib_ext}]\n+\t  set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc.${shlib_ext}]\n+\t  if { $libobjc_dir == \"\"} {\n+\t      set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.${shlib_ext}]\n+\t  }\n       }\n \n       verbose \"libobjc_dir: $libobjc_dir\"\n \n       if { $libobjc_dir != \"\" } {\n \t  set libobjc_dir [file dirname ${libobjc_dir}]\n-\t  append flags \"-L${libobjc_dir}\"\n+\t  # Allow for %s spec substitutions\n+\t  append flags \" -B${libobjc_dir} \"\n+\t  append flags \" -L${libobjc_dir} \"\n \t  append ld_library_path \":${libobjc_dir}\"\n       }\n       append ld_library_path \\\n \t  [gcc-set-multilib-library-path $OBJCXX_UNDER_TEST]\n-\n     } else {\n       global tool_root_dir;\n \n@@ -264,7 +267,7 @@ proc obj-c++_init { args } {\n \n     if { [string match \"*-*-darwin*\" $target_triplet] } {\n \tlappend ALWAYS_OBJCXXFLAGS \"ldflags=-multiply_defined suppress\"\n-       }\n+    }\n \n     verbose -log \"ALWAYS_OBJCXXFLAGS set to $ALWAYS_OBJCXXFLAGS\"\n \n@@ -284,43 +287,74 @@ proc obj-c++_target_compile { source dest type options } {\n     global OBJCXX_UNDER_TEST\n     global shlib_ext\n \n-    lappend options \"libs=-lobjc\"\n     set shlib_ext [get_shlib_extension]\n-    verbose \"shared lib extension: $shlib_ext\"\n+    verbose \"input-options: $options\" 4\n+\n+    # We have to figure out which runtime will be used on darwin because\n+    # we need to add the include path for the gnu runtime if that is in\n+    # use.\n+    # First, set the default...\n+    if { [istarget \"*-*-darwin*\"] } {\n+\tset nextruntime 1\n+    } else {\n+\tset nextruntime 0\n+    }\n+    verbose \"initial next runtime state : $nextruntime\" 2\n+    # Next, see if we define the option in dg-options...\n+    foreach opt $options {\n+\tif [regexp \".*-fnext-runtime.*\" $opt] {\n+\t    set nextruntime 1\n+\t}\n+\tif [regexp \".*-fgnu-runtime.*\" $opt] {\n+\t    set nextruntime 0\n+\t}\n+    }\n+    verbose \"next runtime state after dg opts: $nextruntime\" 2\n+   \n+    set tgt [target_info name]\n+    if [board_info $tgt exists multilib_flags] {\n+\tset lb [board_info $tgt multilib_flags]\n+\tverbose \"board multilib_flags $lb\" 2\n+\tforeach opt $lb {\n+\t    if [regexp \".*-fnext-runtime.*\" $opt] {\n+\t\tset nextruntime 1\n+\t    }\n+\t    if [regexp \".*-fgnu-runtime.*\" $opt] {\n+\t\tset nextruntime 0\n+\t    }\n+\t}\n+    }\n+    verbose \"next runtime state after any multilib opts: $nextruntime\" 2\n+\n+    lappend options \"libs=-lobjc\"\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n \tlappend options \"libs=${gluefile}\"\n \tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n-    # If we have built libobjc along with the compiler (which usually\n-    # _is not_ the case on Mac OS X systems), point the test harness\n+    # If we have built libobjc along with the compiler, point the test harness\n     # at it (and associated headers).\n \n     set objcpath \"[get_multilibs]\"\n \n     set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc.a]\n     if { $libobjc_dir == \"\"} {\n-      verbose \"see if we have -fgnu-runtime in options\"\n-      if [regexp \".*-fgnu-runtime.*\" \"${options}\" ] {\n-\t  set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.a]\n-      }\n+      set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.a]\n     }\n     if { $libobjc_dir == \"\"} {\n-\tset libobjc_dir \\\n-\t    [lookfor_file ${objcpath} libobjc/.libs/libobjc.${shlib_ext}]\n-    }\n-    if { $libobjc_dir == \"\"} {\n-\tverbose \"see if we have -fgnu-runtime in options\"\n-\tif [regexp \".*-fgnu-runtime.*\" \"${options}\"] {\n-\t set libobjc_dir \\\n-\t     [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.${shlib_ext}]\n+\tset libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc.${shlib_ext}]\n+\tif { $libobjc_dir == \"\"} {\n+\t    set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.${shlib_ext}]\n \t}\n     }\n \n     if { $libobjc_dir != \"\" } {\n-\tset objc_include_dir \"${srcdir}/../../libobjc\"\n-\tlappend options \"additional_flags=-I${objc_include_dir}\"\n+\t# If we are using the gnu runtime, add its includes.\n+\tif { $nextruntime == 0 } {\n+\t    set objc_include_dir \"${srcdir}/../../libobjc\"\n+\t    lappend options \"additional_flags=-I${objc_include_dir}\"\n+\t}\n     }\n \n     lappend options \"additional_flags=[libio_include_flags]\""}, {"sha": "3355a0f2bd699537befca1eed390f2e93af9aea6", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 67, "deletions": 28, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9debda96f54bfe9cbc2dbecc580d5099765432fe/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9debda96f54bfe9cbc2dbecc580d5099765432fe/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=9debda96f54bfe9cbc2dbecc580d5099765432fe", "patch": "@@ -44,7 +44,7 @@ proc default_objc_version { } {\n \n     objc_init\n \n-    # ignore any arguments after the command\n+    # Ignore any arguments after the command.\n     set compiler [lindex $OBJC_UNDER_TEST 0]\n \n     if ![is_remote host] {\n@@ -53,7 +53,7 @@ proc default_objc_version { } {\n \tset compiler_name $compiler\n     }\n \n-    # verify that the compiler exists\n+    # Verify that the compiler exists.\n     if { $compiler_name != 0 } then {\n \tset tmp [remote_exec host \"$compiler -v\"]\n \tset status [lindex $tmp 0]\n@@ -65,7 +65,7 @@ proc default_objc_version { } {\n \t    clone_output \"Couldn't determine version of $compiler_name: $output\\n\"\n \t}\n     } else {\n-\t# compiler does not exist (this should have already been detected)\n+\t# Compiler does not exist (this should have already been detected).\n \twarning \"$compiler does not exist\"\n     }\n }\n@@ -98,7 +98,8 @@ proc objc_init { args } {\n     global gcc_warning_prefix\n     global gcc_error_prefix\n \n-    # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n+    # We set LC_ALL and LANG to C so that we get the same error messages as\n+    # expected.\n     setenv LC_ALL C\n     setenv LANG C\n \n@@ -141,11 +142,48 @@ proc objc_target_compile { source dest type options } {\n     global ld_library_path\n     global objc_libgcc_s_path\n     global shlib_ext\n-\n+    \n+    set shlib_ext [get_shlib_extension]\n     set ld_library_path \".:${objc_libgcc_s_path}\"\n+    \n+    # We have to figure out which runtime will be used on darwin because\n+    # we need to add the include path for the gnu runtime if that is in \n+    # use.\n+    # First set the default...\n+    if { [istarget \"*-*-darwin*\"] } {\n+\tset nextruntime 1\n+    } else {\n+\tset nextruntime 0\n+    }\n+    verbose \"initial next runtime state : $nextruntime\" 2\n+    # Next, see if we define the option in dg-options...\n+    foreach opt $options {\n+\tif [regexp \".*-fnext-runtime.*\" $opt] {\n+\t    set nextruntime 1\n+\t}\n+\tif [regexp \".*-fgnu-runtime.*\" $opt] {\n+\t    set nextruntime 0\n+\t}\n+    }\n+    verbose \"next runtime state after dg opts: $nextruntime\"  2\n+   \n+    set tgt [target_info name]\n+    if [board_info $tgt exists multilib_flags] {\n+\tset lb [board_info $tgt multilib_flags]\n+\tverbose \"board multilib_flags $lb\" 2\n+\tforeach opt $lb {\n+\t    if [regexp \".*-fnext-runtime.*\" $opt] {\n+\t\tset nextruntime 1\n+\t    }\n+\t    if [regexp \".*-fgnu-runtime.*\" $opt] {\n+\t\tset nextruntime 0\n+\t    }\n+\t}\n+    }\n+    verbose \"next runtime state after any multilib opts: $nextruntime\" 2\n+\n     lappend options \"libs=-lobjc\"\n-    set shlib_ext [get_shlib_extension]\n-    verbose \"shared lib extension: $shlib_ext\"\n+    verbose \"shared lib extension: $shlib_ext\" 3\n \n     if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n \tlappend options \"libs=${gluefile}\"\n@@ -167,42 +205,43 @@ proc objc_target_compile { source dest type options } {\n \tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options]\n     }\n \n-    # If we have built libobjc along with the compiler (which usually\n-    # _is not_ the case on Mac OS X systems), point the test harness\n+    # If we have built libobjc along with the compiler, point the test harness\n     # at it (and associated headers).\n \n     set objcpath \"[get_multilibs]\"\n \n     set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc.a]\n-    if { $libobjc_dir == \"\"} {\n-      verbose \"see if we have -fgnu-runtime in options\"\n-      if [regexp \".*-fgnu-runtime.*\" \"${options}\"] {\n+    if { $libobjc_dir == \"\" } {\n+\t# On darwin there is, potentially, a gnu runtime too.\n \tset libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.a]\n-      }\n     }\n-    # Now check if we have a shared only build.\n-    if { $libobjc_dir == \"\"} {\n-     set libobjc_dir \\\n-\t [lookfor_file ${objcpath} libobjc/.libs/libobjc.${shlib_ext}]\n-    }\n-    if { $libobjc_dir == \"\"} {\n-\tverbose \"see if we have -fgnu-runtime in options\"\n-\tif [regexp \".*-fgnu-runtime.*\" \"${options}\"] {\n-\t set libobjc_dir \\\n-\t     [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.${shlib_ext}]\n+    # Perhaps we didn't build static libs.\n+    if { $libobjc_dir == \"\" } {\n+\tset libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc.${shlib_ext}]\n+\t# On darwin there is, potentially, a gnu runtime too.\n+\tif { $libobjc_dir == \"\" } {\n+\t    set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc-gnu.${shlib_ext}]\n \t}\n     }\n+    \n     if { $libobjc_dir != \"\" } {\n-\tset objc_include_dir \"${srcdir}/../../libobjc\"\n-\tlappend options \"additional_flags=-I${objc_include_dir}\"\n+\t# If we are using the gnu runtime, add its includes.\n+\tif { $nextruntime == 0 } {\n+\t    set objc_include_dir \"${srcdir}/../../libobjc\"\n+\t    lappend options \"additional_flags=-I${objc_include_dir}\"\n+\t    verbose \"adding gnu runtime include dir: $objc_include_dir \"\n+\t}\n \tset libobjc_dir [file dirname ${libobjc_dir}]\n-\tset objc_link_flags \"-L${libobjc_dir}\"\n+\t# Allow for %s spec substitutions..\n+\tset objc_link_flags \" -B${libobjc_dir} \"\n+\tlappend options \"additional_flags=${objc_link_flags}\"\n+\tset objc_link_flags \" -L${libobjc_dir} \"\n \tlappend options \"additional_flags=${objc_link_flags}\"\n \tappend ld_library_path \":${libobjc_dir}\"\n     }\n     if { $type == \"precompiled_header\" } {\n \t# If we generating a precompiled header, we have say this is an\n-\t# objective-C header\n+\t# objective-C header.\n \tset source [concat \"-x objective-c-header\" $source]\n     }\n     lappend options \"compiler=$OBJC_UNDER_TEST\"\n@@ -214,7 +253,7 @@ proc objc_target_compile { source dest type options } {\n }\n \n #\n-# objc_pass -- utility to record a testcase passed\n+# objc_pass -- utility to record a testcase passed.\n #\n \n proc objc_pass { testcase cflags } {"}, {"sha": "126ae380fe79782c7d42fa1483fe97d2b4817847", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9debda96f54bfe9cbc2dbecc580d5099765432fe/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9debda96f54bfe9cbc2dbecc580d5099765432fe/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9debda96f54bfe9cbc2dbecc580d5099765432fe", "patch": "@@ -29,10 +29,17 @@\n # If ARGS is not empty, its first element is a string that\n # should be added to the command line.\n #\n-# Assume by default that CONTENTS is C code.  C++ code should contain\n-# \"// C++\" and Fortran code should contain \"! Fortran\".\n+# Assume by default that CONTENTS is C code.  \n+# Otherwise, code should contain:\n+# \"// C++\" for c++,\n+# \"! Fortran\" for Fortran code,\n+# \"/* ObjC\", for ObjC\n+# and \"// ObjC++\" for ObjC++\n+# If the tool is ObjC/ObjC++ then we overide the extension to .m/.mm to \n+# allow for ObjC/ObjC++ specific flags.\n proc check_compile {basename type contents args} {\n     global tool\n+    verbose \"check_compile tool: $tool for $basename\" \n \n     if { [llength $args] > 0 } {\n \tset options [list \"additional_flags=[lindex $args 0]\"]\n@@ -42,8 +49,17 @@ proc check_compile {basename type contents args} {\n     switch -glob -- $contents {\n \t\"*! Fortran*\" { set src ${basename}[pid].f90 }\n \t\"*// C++*\" { set src ${basename}[pid].cc }\n-\tdefault { set src ${basename}[pid].c }\n+\t\"*// ObjC++*\" { set src ${basename}[pid].mm }\n+\t\"*/* ObjC*\" { set src ${basename}[pid].m }\n+\tdefault {\n+\t    switch -- $tool {\n+\t\t\"objc\" { set src ${basename}[pid].m }\n+\t\t\"obj-c++\" { set src ${basename}[pid].mm }\n+\t\tdefault { set src ${basename}[pid].c }\n+\t    }\n+\t}\n     }\n+\n     set compile_type $type\n     switch -glob $type {\n \tassembly { set output ${basename}[pid].s }\n@@ -1188,6 +1204,25 @@ proc check_cxa_atexit_available { } {\n     }]\n }\n \n+proc check_effective_target_objc2 { } {\n+    return [check_no_compiler_messages objc2 object {\n+\t#ifdef __OBJC2__\n+\tint dummy[1];\n+\t#else\n+\t#error\n+\t#endif \n+    }]\n+}\n+\n+proc check_effective_target_next_runtime { } {\n+    return [check_no_compiler_messages objc2 object {\n+\t#ifdef __NEXT_RUNTIME__\n+\tint dummy[1];\n+\t#else\n+\t#error\n+\t#endif \n+    }]\n+}\n \n # Return 1 if we're generating 32-bit code using default options, 0\n # otherwise."}]}