{"sha": "a4474a3854f4fec4bfccad91706f95a6737e6a79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0NzRhMzg1NGY0ZmVjNGJmY2NhZDkxNzA2Zjk1YTY3MzdlNmE3OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-10-11T17:53:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-10-11T17:53:07Z"}, "message": "re PR c++/49855 (internal compiler error: in fold_convert_const_int_from_real)\n\n\tPR c++/49855\n\tPR c++/49896\n\t* cp-tree.def (IMPLICIT_CONV_EXPR): New.\n\t* call.c (perform_implicit_conversion_flags): Build it\n\tinstead of NOP_EXPR.\n\t* cp-objcp-common.c (cp_common_init_ts): It's typed.\n\t* cxx-pretty-print.c (pp_cxx_cast_expression): Handle it.\n\t(pp_cxx_expression): Likewise.\n\t* error.c (dump_expr): Likewise.\n\t* semantics.c (potential_constant_expression_1): Likewise.\n\t* tree.c (cp_tree_equal): Likewise.\n\t(cp_walk_subtrees): Likewise.\n\t* pt.c (iterative_hash_template_arg): Likewise.\n\t(for_each_template_parm_r): Likewise.\n\t(type_dependent_expression_p): Likewise.\n\t(tsubst_copy, tsubst_copy_and_build): Handle IMPLICIT_CONV_EXPR\n\tand CONVERT_EXPR.\n\t* cp-tree.h (IMPLICIT_CONV_EXPR_DIRECT_INIT): New.\n\nFrom-SVN: r179813", "tree": {"sha": "473b4642325a93846dad0753e76e9aebf4091fc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/473b4642325a93846dad0753e76e9aebf4091fc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4474a3854f4fec4bfccad91706f95a6737e6a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4474a3854f4fec4bfccad91706f95a6737e6a79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4474a3854f4fec4bfccad91706f95a6737e6a79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4474a3854f4fec4bfccad91706f95a6737e6a79/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "816e239ae16481accfae7b85359dc6ebce1dd97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/816e239ae16481accfae7b85359dc6ebce1dd97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/816e239ae16481accfae7b85359dc6ebce1dd97b"}], "stats": {"total": 127, "additions": 120, "deletions": 7}, "files": [{"sha": "69c0eeb7b6d0781d08051be5671456dd04b65cf8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -1,3 +1,24 @@\n+2011-10-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49855\n+\tPR c++/49896\n+\t* cp-tree.def (IMPLICIT_CONV_EXPR): New.\n+\t* call.c (perform_implicit_conversion_flags): Build it\n+\tinstead of NOP_EXPR.\n+\t* cp-objcp-common.c (cp_common_init_ts): It's typed.\n+\t* cxx-pretty-print.c (pp_cxx_cast_expression): Handle it.\n+\t(pp_cxx_expression): Likewise.\n+\t* error.c (dump_expr): Likewise.\n+\t* semantics.c (potential_constant_expression_1): Likewise.\n+\t* tree.c (cp_tree_equal): Likewise.\n+\t(cp_walk_subtrees): Likewise.\n+\t* pt.c (iterative_hash_template_arg): Likewise.\n+\t(for_each_template_parm_r): Likewise.\n+\t(type_dependent_expression_p): Likewise.\n+\t(tsubst_copy, tsubst_copy_and_build): Handle IMPLICIT_CONV_EXPR\n+\tand CONVERT_EXPR.\n+\t* cp-tree.h (IMPLICIT_CONV_EXPR_DIRECT_INIT): New.\n+\n 2011-10-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50611"}, {"sha": "7219afe8f59e41ce43bf7ba0451ea1f8f787d5d9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -8397,13 +8397,19 @@ perform_implicit_conversion_flags (tree type, tree expr, tsubst_flags_t complain\n \t}\n       expr = error_mark_node;\n     }\n-  else if (processing_template_decl)\n+  else if (processing_template_decl\n+\t   /* As a kludge, we always perform conversions between scalar\n+\t      types, as IMPLICIT_CONV_EXPR confuses c_finish_omp_for.  */\n+\t   && !(SCALAR_TYPE_P (type) && SCALAR_TYPE_P (TREE_TYPE (expr))))\n     {\n       /* In a template, we are only concerned about determining the\n \t type of non-dependent expressions, so we do not have to\n-\t perform the actual conversion.  */\n-      if (TREE_TYPE (expr) != type)\n-\texpr = build_nop (type, expr);\n+\t perform the actual conversion.  But for initializers, we\n+\t need to be able to perform it at instantiation\n+\t (or fold_non_dependent_expr) time.  */\n+      expr = build1 (IMPLICIT_CONV_EXPR, type, expr);\n+      if (!(flags & LOOKUP_ONLYCONVERTING))\n+\tIMPLICIT_CONV_EXPR_DIRECT_INIT (expr) = true;\n     }\n   else\n     expr = convert_like (conv, expr, complain);"}, {"sha": "035fdcd2f4e40cc4ecbc21d8851a4ea7627506d6", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -267,6 +267,7 @@ cp_common_init_ts (void)\n   MARK_TS_TYPED (CONST_CAST_EXPR);\n   MARK_TS_TYPED (STATIC_CAST_EXPR);\n   MARK_TS_TYPED (DYNAMIC_CAST_EXPR);\n+  MARK_TS_TYPED (IMPLICIT_CONV_EXPR);\n   MARK_TS_TYPED (TEMPLATE_ID_EXPR);\n   MARK_TS_TYPED (ARROW_EXPR);\n   MARK_TS_TYPED (SIZEOF_EXPR);"}, {"sha": "be29870d93eddcf34e4272446ab830556e24d6be", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -250,6 +250,7 @@ DEFTREECODE (REINTERPRET_CAST_EXPR, \"reinterpret_cast_expr\", tcc_unary, 1)\n DEFTREECODE (CONST_CAST_EXPR, \"const_cast_expr\", tcc_unary, 1)\n DEFTREECODE (STATIC_CAST_EXPR, \"static_cast_expr\", tcc_unary, 1)\n DEFTREECODE (DYNAMIC_CAST_EXPR, \"dynamic_cast_expr\", tcc_unary, 1)\n+DEFTREECODE (IMPLICIT_CONV_EXPR, \"implicit_conv_expr\", tcc_unary, 1)\n DEFTREECODE (DOTSTAR_EXPR, \"dotstar_expr\", tcc_expression, 2)\n DEFTREECODE (TYPEID_EXPR, \"typeid_expr\", tcc_expression, 1)\n DEFTREECODE (NOEXCEPT_EXPR, \"noexcept_expr\", tcc_unary, 1)"}, {"sha": "b53accfed65483247376cdb94ed4c5b569a20938", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -72,6 +72,7 @@ c-common.h, not after.\n       DECLTYPE_FOR_LAMBDA_CAPTURE (in DECLTYPE_TYPE)\n       VEC_INIT_EXPR_IS_CONSTEXPR (in VEC_INIT_EXPR)\n       DECL_OVERRIDE_P (in FUNCTION_DECL)\n+      IMPLICIT_CONV_EXPR_DIRECT_INIT (in IMPLICIT_CONV_EXPR)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -3233,6 +3234,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    B b{1,2}, not B b({1,2}) or B b = {1,2}.  */\n #define CONSTRUCTOR_IS_DIRECT_INIT(NODE) (TREE_LANG_FLAG_0 (CONSTRUCTOR_CHECK (NODE)))\n \n+/* True if NODE represents a conversion for direct-initialization in a\n+   template.  Set by perform_implicit_conversion_flags.  */\n+#define IMPLICIT_CONV_EXPR_DIRECT_INIT(NODE) \\\n+  (TREE_LANG_FLAG_0 (IMPLICIT_CONV_EXPR_CHECK (NODE)))\n+\n /* Nonzero means that an object of this type can not be initialized using\n    an initializer list.  */\n #define CLASSTYPE_NON_AGGREGATE(NODE) \\"}, {"sha": "708afc8cdc2b02d611b1140871e323c94ebb3c5a", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -830,6 +830,7 @@ pp_cxx_cast_expression (cxx_pretty_printer *pp, tree t)\n   switch (TREE_CODE (t))\n     {\n     case CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n       pp_cxx_type_id (pp, TREE_TYPE (t));\n       pp_cxx_call_argument_list (pp, TREE_OPERAND (t, 0));\n       break;\n@@ -1084,6 +1085,7 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n       break;\n \n     case CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n       pp_cxx_cast_expression (pp, t);\n       break;\n "}, {"sha": "7d345c98922fa40457afd78b978bf63364a34a4c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -2052,6 +2052,7 @@ dump_expr (tree t, int flags)\n       break;\n \n     CASE_CONVERT:\n+    case IMPLICIT_CONV_EXPR:\n     case VIEW_CONVERT_EXPR:\n       {\n \ttree op = TREE_OPERAND (t, 0);"}, {"sha": "bfbd24443254b455515be6810b9cfc0d4e05b99b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -1591,6 +1591,7 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n       return val;\n \n     case CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n     case STATIC_CAST_EXPR:\n     case REINTERPRET_CAST_EXPR:\n     case CONST_CAST_EXPR:\n@@ -7702,6 +7703,7 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n \n     case MODOP_EXPR:\n     case CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n     case REINTERPRET_CAST_EXPR:\n     case CONST_CAST_EXPR:\n     case STATIC_CAST_EXPR:\n@@ -11714,7 +11716,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n \n /* Like tsubst, but deals with expressions.  This function just replaces\n    template parms; to finish processing the resultant expression, use\n-   tsubst_expr.  */\n+   tsubst_copy_and_build or tsubst_expr.  */\n \n static tree\n tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n@@ -11879,6 +11881,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case CONST_CAST_EXPR:\n     case STATIC_CAST_EXPR:\n     case DYNAMIC_CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n+    case CONVERT_EXPR:\n     case NOP_EXPR:\n       return build1\n \t(code, tsubst (TREE_TYPE (t), args, complain, in_decl),\n@@ -13081,6 +13085,23 @@ tsubst_copy_and_build (tree t,\n \t(tsubst (TREE_TYPE (t), args, complain, in_decl),\n \t RECUR (TREE_OPERAND (t, 0)));\n \n+    case IMPLICIT_CONV_EXPR:\n+      {\n+\ttree type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+\ttree expr = RECUR (TREE_OPERAND (t, 0));\n+\tint flags = LOOKUP_IMPLICIT;\n+\tif (IMPLICIT_CONV_EXPR_DIRECT_INIT (t))\n+\t  flags = LOOKUP_NORMAL;\n+\treturn perform_implicit_conversion_flags (type, expr, complain,\n+\t\t\t\t\t\t  flags);\n+      }\n+\n+    case CONVERT_EXPR:\n+      return build1\n+\t(CONVERT_EXPR,\n+\t tsubst (TREE_TYPE (t), args, complain, in_decl),\n+\t RECUR (TREE_OPERAND (t, 0)));\n+\n     case CAST_EXPR:\n     case REINTERPRET_CAST_EXPR:\n     case CONST_CAST_EXPR:\n@@ -19176,6 +19197,7 @@ type_dependent_expression_p (tree expression)\n       || TREE_CODE (expression) == STATIC_CAST_EXPR\n       || TREE_CODE (expression) == CONST_CAST_EXPR\n       || TREE_CODE (expression) == REINTERPRET_CAST_EXPR\n+      || TREE_CODE (expression) == IMPLICIT_CONV_EXPR\n       || TREE_CODE (expression) == CAST_EXPR)\n     return dependent_type_p (TREE_TYPE (expression));\n "}, {"sha": "189c13ad3e99bb8bf935abf9961e20a367e04a63", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -7481,8 +7481,6 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n       return t;\n \n     case LAMBDA_EXPR:\n-    case DYNAMIC_CAST_EXPR:\n-    case PSEUDO_DTOR_EXPR:\n     case PREINCREMENT_EXPR:\n     case POSTINCREMENT_EXPR:\n     case PREDECREMENT_EXPR:\n@@ -8023,6 +8021,7 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n     case CONST_CAST_EXPR:\n     case STATIC_CAST_EXPR:\n     case REINTERPRET_CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n       return (potential_constant_expression_1\n \t      (TREE_OPERAND (t, 0),\n \t       TREE_CODE (TREE_TYPE (t)) != REFERENCE_TYPE, flags));"}, {"sha": "75aa26503006e225a6af3eb9994d9cd1424c96c3", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -2384,6 +2384,7 @@ cp_tree_equal (tree t1, tree t2)\n     case REINTERPRET_CAST_EXPR:\n     case CONST_CAST_EXPR:\n     case DYNAMIC_CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n     case NEW_EXPR:\n       if (!same_type_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n \treturn false;\n@@ -2994,6 +2995,7 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n     case STATIC_CAST_EXPR:\n     case CONST_CAST_EXPR:\n     case DYNAMIC_CAST_EXPR:\n+    case IMPLICIT_CONV_EXPR:\n       if (TREE_TYPE (*tp))\n \tWALK_SUBTREE (TREE_TYPE (*tp));\n "}, {"sha": "c0684924568c2260d9710e7f8737ffa66f939f25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -1,3 +1,11 @@\n+2011-10-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49855\n+\tPR c++/49896\n+\t* g++.dg/template/constant1.C: New.\n+\t* g++.dg/template/constant2.C: New.\n+\t* g++.dg/cpp0x/constexpr-template3.C: New.\n+\n 2011-10-11  Artjoms Sinkarovs  <artyom.shinkaroff@gmail.com>\n \n \t* gcc.target/i386/warn-vect-op-3.c: New test."}, {"sha": "75b2fc4634e2b283fc0c45a1ca13181234936f53", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-template3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template3.C?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options -std=c++0x }\n+\n+struct A { constexpr operator int() { return 42; } };\n+\n+template<class T>\n+struct B {\n+  static const int versionConst = A();\n+  enum { versionEnum = versionConst };\n+};"}, {"sha": "a2c5a08d366e55b7869bf298428b60ff4ad00cc8", "filename": "gcc/testsuite/g++.dg/template/constant1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant1.C?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/49855\n+\n+extern void foo(int);\n+\n+template <class Key, class Value> void Basic() {\n+  const int kT = 1.5e6;        // <--- causes ICE\n+  int size = kT*2/3;\n+  do {\n+    foo(size);\n+    size = size * 0.5 - 1;\n+  } while (size >= 0 );\n+\n+}"}, {"sha": "f71e4f56a22eb4d3a70f0f29467467ca075ddb47", "filename": "gcc/testsuite/g++.dg/template/constant2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4474a3854f4fec4bfccad91706f95a6737e6a79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant2.C?ref=a4474a3854f4fec4bfccad91706f95a6737e6a79", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/49896\n+\n+template<class C>\n+class test {\n+ protected:\n+  static const int versionConst = 0x80000000;\n+  enum { versionEnum = versionConst };\n+ public:\n+  int getVersion();\n+};\n+\n+template<class C>\n+int test<C>::getVersion() {\n+  return versionEnum;\n+}\n+\n+class dummy_class {};\n+\n+int main() {\n+  test<dummy_class> t;\n+  return t.getVersion();\n+}"}]}