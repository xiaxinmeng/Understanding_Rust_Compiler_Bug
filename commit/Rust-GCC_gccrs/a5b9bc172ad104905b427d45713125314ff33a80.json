{"sha": "a5b9bc172ad104905b427d45713125314ff33a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTViOWJjMTcyYWQxMDQ5MDViNDI3ZDQ1NzEzMTI1MzE0ZmYzM2E4MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:22:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:22:38Z"}, "message": "cse.c (is_dead_reg): Change argument to const_rtx.\n\ngcc/\n\t* cse.c (is_dead_reg): Change argument to const_rtx.\n\t(dead_debug_insn_data): Delete.\n\t(is_dead_debug_insn): Expand commentary.  Turn from being a\n\tfor_each_rtx callback to being a function that examines\n\teach subrtx itself.  Take the fields of dead_debug_insn_data\n\tas argument.\n\t(delete_trivially_dead_insns): Update call accordingly.\n\nFrom-SVN: r214630", "tree": {"sha": "0be231ad1d216e3d21058689600a796f93d1a9c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0be231ad1d216e3d21058689600a796f93d1a9c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5b9bc172ad104905b427d45713125314ff33a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b9bc172ad104905b427d45713125314ff33a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b9bc172ad104905b427d45713125314ff33a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b9bc172ad104905b427d45713125314ff33a80/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f000294852af1e858096f415588b247b51802683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f000294852af1e858096f415588b247b51802683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f000294852af1e858096f415588b247b51802683"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "f9adee3fe8fad1ead2ea884f5924d8849bed4b06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b9bc172ad104905b427d45713125314ff33a80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b9bc172ad104905b427d45713125314ff33a80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5b9bc172ad104905b427d45713125314ff33a80", "patch": "@@ -1,3 +1,13 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* cse.c (is_dead_reg): Change argument to const_rtx.\n+\t(dead_debug_insn_data): Delete.\n+\t(is_dead_debug_insn): Expand commentary.  Turn from being a\n+\tfor_each_rtx callback to being a function that examines\n+\teach subrtx itself.  Take the fields of dead_debug_insn_data\n+\tas argument.\n+\t(delete_trivially_dead_insns): Update call accordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* cse.c (check_for_label_ref): Move earlier in file.  Turn from"}, {"sha": "319b5f89abbc15096432d8ee2c29bb06545cf305", "filename": "gcc/cse.c", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b9bc172ad104905b427d45713125314ff33a80/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b9bc172ad104905b427d45713125314ff33a80/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=a5b9bc172ad104905b427d45713125314ff33a80", "patch": "@@ -6784,7 +6784,7 @@ count_reg_usage (rtx x, int *counts, rtx dest, int incr)\n /* Return true if X is a dead register.  */\n \n static inline int\n-is_dead_reg (rtx x, int *counts)\n+is_dead_reg (const_rtx x, int *counts)\n {\n   return (REG_P (x)\n \t  && REGNO (x) >= FIRST_PSEUDO_REGISTER\n@@ -6871,30 +6871,29 @@ count_stores (rtx x, const_rtx set ATTRIBUTE_UNUSED, void *data)\n     counts[REGNO (x)]++;\n }\n \n-struct dead_debug_insn_data\n-{\n-  int *counts;\n-  rtx *replacements;\n-  bool seen_repl;\n-};\n+/* Return if DEBUG_INSN pattern PAT needs to be reset because some dead\n+   pseudo doesn't have a replacement.  COUNTS[X] is zero if register X\n+   is dead and REPLACEMENTS[X] is null if it has no replacemenet.\n+   Set *SEEN_REPL to true if we see a dead register that does have\n+   a replacement.  */\n \n-/* Return if a DEBUG_INSN needs to be reset because some dead\n-   pseudo doesn't have a replacement.  Callback for for_each_rtx.  */\n-\n-static int\n-is_dead_debug_insn (rtx *loc, void *data)\n+static bool\n+is_dead_debug_insn (const_rtx pat, int *counts, rtx *replacements,\n+\t\t    bool *seen_repl)\n {\n-  rtx x = *loc;\n-  struct dead_debug_insn_data *ddid = (struct dead_debug_insn_data *) data;\n-\n-  if (is_dead_reg (x, ddid->counts))\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, pat, NONCONST)\n     {\n-      if (ddid->replacements && ddid->replacements[REGNO (x)] != NULL_RTX)\n-\tddid->seen_repl = true;\n-      else\n-\treturn 1;\n+      const_rtx x = *iter;\n+      if (is_dead_reg (x, counts))\n+\t{\n+\t  if (replacements && replacements[REGNO (x)] != NULL_RTX)\n+\t    *seen_repl = true;\n+\t  else\n+\t    return true;\n+\t}\n     }\n-  return 0;\n+  return false;\n }\n \n /* Replace a dead pseudo in a DEBUG_INSN with replacement DEBUG_EXPR.\n@@ -7038,22 +7037,19 @@ delete_trivially_dead_insns (rtx_insn *insns, int nreg)\n \n   if (MAY_HAVE_DEBUG_INSNS)\n     {\n-      struct dead_debug_insn_data ddid;\n-      ddid.counts = counts;\n-      ddid.replacements = replacements;\n       for (insn = get_last_insn (); insn; insn = PREV_INSN (insn))\n \tif (DEBUG_INSN_P (insn))\n \t  {\n \t    /* If this debug insn references a dead register that wasn't replaced\n \t       with an DEBUG_EXPR, reset the DEBUG_INSN.  */\n-\t    ddid.seen_repl = false;\n-\t    if (for_each_rtx (&INSN_VAR_LOCATION_LOC (insn),\n-\t\t\t      is_dead_debug_insn, &ddid))\n+\t    bool seen_repl = false;\n+\t    if (is_dead_debug_insn (INSN_VAR_LOCATION_LOC (insn),\n+\t\t\t\t    counts, replacements, &seen_repl))\n \t      {\n \t\tINSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();\n \t\tdf_insn_rescan (insn);\n \t      }\n-\t    else if (ddid.seen_repl)\n+\t    else if (seen_repl)\n \t      {\n \t\tINSN_VAR_LOCATION_LOC (insn)\n \t\t  = simplify_replace_fn_rtx (INSN_VAR_LOCATION_LOC (insn),"}]}