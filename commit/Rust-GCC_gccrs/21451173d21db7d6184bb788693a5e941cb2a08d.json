{"sha": "21451173d21db7d6184bb788693a5e941cb2a08d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0NTExNzNkMjFkYjdkNjE4NGJiNzg4NjkzYTVlOTQxY2IyYTA4ZA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-12-28T19:35:49Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-12-28T19:35:49Z"}, "message": "77th Cygnus<->FSF merge\n\nFrom-SVN: r10894", "tree": {"sha": "6c32b1ffe0f79ba06f97414bef472f4a78625af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c32b1ffe0f79ba06f97414bef472f4a78625af3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21451173d21db7d6184bb788693a5e941cb2a08d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21451173d21db7d6184bb788693a5e941cb2a08d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21451173d21db7d6184bb788693a5e941cb2a08d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21451173d21db7d6184bb788693a5e941cb2a08d/comments", "author": null, "committer": null, "parents": [{"sha": "9ad6177652206b70447c8b8d2289b71c67838c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad6177652206b70447c8b8d2289b71c67838c48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad6177652206b70447c8b8d2289b71c67838c48"}], "stats": {"total": 188, "additions": 140, "deletions": 48}, "files": [{"sha": "a1722c270f6b9883a4224c8bb66b29811cf87e43", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=21451173d21db7d6184bb788693a5e941cb2a08d", "patch": "@@ -1,3 +1,39 @@\n+Thu Dec 28 11:13:15 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (expand_builtin_throw): Use RETURN_ADDR_OFFSET instead of\n+\tNORMAL_RETURN_ADDR_OFFSET.\n+\t(end_eh_unwinder): Ditto.\n+\n+Wed Dec 27 22:18:16 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* gc.c (build_dynamic_cast): Make sure we don't cast away const\n+\twhen dealing with references, and make sure we handle dynamic\n+\tcasting to a cv qualified reference.\n+\n+Thu Dec 21 23:50:35 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (struct eh_context): New structure top hold eh context\n+\tinformation.\n+\t(push_eh_context): New routine.\n+\t(pop_eh_context): Ditto.\n+\t* decl.c (push_cp_function_context): Use them.\n+\t(pop_cp_function_context): Ditto.\n+\n+Wed Dec 20 12:42:51 1995  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_file): Also prune uninteresting functions in the\n+\tinline emission loop.\n+\n+Wed Dec 20 02:32:07 1995  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* sig.c (build_signature_table_constructor): Mark functions\n+\tin the signature as referenced.\n+\n+Tue Dec 19 22:36:56 1995  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_file): Do all the vtable/synthesis stuff before\n+\tthe inline emission stuff.\n+\n Mon Dec 18 15:51:33 1995  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cp-tree.h, decl2.c (flag_weak): New flag to control the use of\n@@ -331,7 +367,7 @@ Wed Oct 11 16:30:34 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \t* parse.y (fn.def1): Call split_specs_attrs in\n \tdeclmods notype_declarator case.\n \n-Mon Nov 20 14:06:28 1995  Mike Stump  <mrs@cygnus.com>\n+Sun Nov 26 14:47:42 1995  Richard Kenner  <kenner@mole.gnu.ai.mit.edu>\n \n \t* Version 2.7.2 released.\n \n@@ -344,7 +380,7 @@ Thu Oct 26 13:59:54 1995  Mike Stump  <mrs@cygnus.com>\n \t* init.c (expand_aggr_init): Handle cv qualifiers on the object's\n \ttype.\n \n-Sun Nov 12 18:09:35 1995  Mike Stump  <mrs@cygnus.com>\n+Sat Nov 11 08:25:55 1995  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* Version 2.7.1 released.\n "}, {"sha": "869d853e819bdbcc516257fdb4a83d25c42d03f0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=21451173d21db7d6184bb788693a5e941cb2a08d", "patch": "@@ -127,6 +127,8 @@ static tree grokparms\t\t\t\tPROTO((tree, int));\n static tree lookup_nested_type\t\t\tPROTO((tree, tree));\n static char *redeclaration_error_message\tPROTO((tree, tree));\n static void grok_op_properties\t\t\tPROTO((tree, int, int));\n+extern void* push_eh_context\t\t \tPROTO(());\n+extern void pop_eh_context\t\t \tPROTO((void *));\n \n tree define_function\t\t\n \tPROTO((char *, tree, enum built_in_function, void (*)(), char *));\n@@ -12807,8 +12809,11 @@ struct cp_function\n   rtx result_rtx;\n   struct cp_function *next;\n   struct binding_level *binding_level;\n+  void* eh_context;\n };\n \n+\n+\n struct cp_function *cp_function_chain;\n \n extern int temp_name_counter;\n@@ -12848,6 +12853,8 @@ push_cp_function_context (context)\n   p->member_init_list = current_member_init_list;\n   p->class_decl = current_class_decl;\n   p->C_C_D = C_C_D;\n+\n+  p->eh_context = push_eh_context ();\n }\n \n /* Restore the variables used during compilation of a C++ function.  */\n@@ -12901,6 +12908,8 @@ pop_cp_function_context (context)\n   current_class_decl = p->class_decl;\n   C_C_D = p->C_C_D;\n \n+  pop_eh_context (p->eh_context);\n+\n   free (p);\n }\n "}, {"sha": "117687a31914696baf3262237585c70e8b129848", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=21451173d21db7d6184bb788693a5e941cb2a08d", "patch": "@@ -3126,53 +3126,46 @@ finish_file ()\n \n     while (reconsider)\n       {\n-\ttree last = saved_inlines = tree_cons (NULL_TREE, NULL_TREE,\n-\t\t\t\t\t       saved_inlines);\n-\ttree last_head = last;\n-\ttree place = TREE_CHAIN (saved_inlines);\n+\ttree *p = &saved_inlines;\n \treconsider = 0;\n \n \twalk_vtables ((void (*)())0, finish_vtable_vardecl);\n \n-\tfor (; place; place = TREE_CHAIN (place))\n+\twhile (*p)\n \t  {\n-\t    tree decl = TREE_VALUE (place);\n+\t    tree decl = TREE_VALUE (*p);\n \n-\t    /* Slice out the empty elements put in just above in the\n-\t       previous reconsidering.  */\n-\t    if (decl == NULL_TREE)\n+\t    if (DECL_ARTIFICIAL (decl) && ! DECL_INITIAL (decl)\n+\t\t&& TREE_USED (decl))\n \t      {\n-\t\tTREE_CHAIN (last) = TREE_CHAIN (place);\n-\t\tcontinue;\n+\t\tsynthesize_method (decl);\n+\t\treconsider = 1;\n \t      }\n \n-\t    if (DECL_ARTIFICIAL (decl) && ! DECL_INITIAL (decl))\n-\t      {\n-\t\tif (TREE_USED (decl))\n-\t\t  {\n-\t\t    synthesize_method (decl);\n-\t\t    if (TREE_ASM_WRITTEN (decl))\n-\t\t      reconsider = 1;\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    last = place;\n-\t\t    continue;\n-\t\t  }\n-\t      }\n+\t    if (TREE_ASM_WRITTEN (decl)\n+\t\t|| (DECL_SAVED_INSNS (decl) == 0 && ! DECL_ARTIFICIAL (decl)))\n+\t      *p = TREE_CHAIN (*p);\n+\t    else\n+\t      p = &TREE_CHAIN (*p);\n+\t  }\n+      }\n \n-\t    if (TREE_ASM_WRITTEN (decl) || DECL_SAVED_INSNS (decl) == 0)\n-\t      {\n-\t\tTREE_CHAIN (last) = TREE_CHAIN (place);\n-\t\tcontinue;\n-\t      }\n+    reconsider = 1;\t\t/* More may be referenced; check again */\n+    while (reconsider)\n+      {\n+\ttree *p = &saved_inlines;\n+\treconsider = 0;\n \n-\t    if ((TREE_PUBLIC (decl) && ! DECL_WEAK (decl))\n-\t\t|| TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n-\t\t|| flag_keep_inline_functions)\n-\t      {\n-\t\tTREE_CHAIN (last) = TREE_CHAIN (place);\n+\twhile (*p)\n+\t  {\n+\t    tree decl = TREE_VALUE (*p);\n \n+\t    if (TREE_ASM_WRITTEN (decl) || DECL_SAVED_INSNS (decl) == 0)\n+\t      *p = TREE_CHAIN (*p);\n+\t    else if ((TREE_PUBLIC (decl) && ! DECL_WEAK (decl))\n+\t\t     || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n+\t\t     || flag_keep_inline_functions)\n+\t      {\n \t\tif (DECL_NOT_REALLY_EXTERN (decl))\n \t\t  {\n \t\t    DECL_EXTERNAL (decl) = 0;\n@@ -3182,10 +3175,10 @@ finish_file ()\n \t\t    permanent_allocation (1);\n \t\t  }\n \n-\t\tcontinue;\n+\t\t*p = TREE_CHAIN (*p);\n \t      }\n-\n-\t    last = place;\n+\t    else\n+\t      p = &TREE_CHAIN (*p);\n \t  }\n       }\n   }"}, {"sha": "38fcb357c6b1cb92dfd686e34ae26af59c66dfb6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=21451173d21db7d6184bb788693a5e941cb2a08d", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"obstack.h\"\n #include \"expr.h\"\n+#include \"output.h\"\n \n tree protect_list;\n \n@@ -330,7 +331,6 @@ tree saved_cleanup;\n int throw_used;\n \n static rtx catch_clauses;\n-static first_catch_label;\n \n static struct ehStack ehstack;\n static struct ehQueue ehqueue;\n@@ -352,6 +352,58 @@ static tree top_label_entry\t\tPROTO((struct labelNode **labelstack));\n static struct ehEntry *copy_eh_entry\tPROTO((struct ehEntry *entry));\n \n \n+/* Routines to save and restore eh context information.  */\n+struct eh_context {\n+  struct ehStack ehstack;\n+  struct ehQueue ehqueue;\n+  rtx catch_clauses;\n+  struct labelNode *false_label_stack;\n+  struct labelNode *caught_return_label_stack;\n+  tree protect_list;\n+};\n+\n+/* Save the context and push into a new one.  */\n+void*\n+push_eh_context ()\n+{\n+  struct eh_context *p\n+    = (struct eh_context*)xmalloc (sizeof (struct eh_context));\n+\n+  p->ehstack = ehstack;\n+  p->ehqueue = ehqueue;\n+  p->catch_clauses = catch_clauses;\n+  p->false_label_stack = false_label_stack;\n+  p->caught_return_label_stack = caught_return_label_stack;\n+  p->protect_list = protect_list;\n+\n+  new_eh_stack (&ehstack);\n+  new_eh_queue (&ehqueue);\n+  catch_clauses = NULL_RTX;\n+  false_label_stack = NULL;\n+  caught_return_label_stack = NULL;\n+  protect_list = NULL_TREE;\n+  \n+  return p;\n+}\n+\n+/* Pop and restore the context.  */\n+void\n+pop_eh_context (vp)\n+     void *vp;\n+{\n+  struct eh_context *p = (struct eh_context *)vp;\n+\n+  protect_list = p->protect_list;\n+  caught_return_label_stack = p->caught_return_label_stack;\n+  false_label_stack = p->false_label_stack;\n+  catch_clauses\t= p->catch_clauses;\n+  ehqueue = p->ehqueue;\n+  ehstack = p->ehstack;\n+\n+  free (p);\n+}\n+\n+\n \n /* All my cheesy stack/queue/misc data structure handling routines\n \n@@ -1323,8 +1375,8 @@ expand_builtin_throw ()\n \n     /* Set it up so that we continue inside, at the top of the loop.  */\n     emit_move_insn (ret_val, gen_rtx (LABEL_REF, Pmode, top_of_loop));\n-#ifdef NORMAL_RETURN_ADDR_OFFSET\n-  return_val_rtx = plus_constant (ret_val, -NORMAL_RETURN_ADDR_OFFSET);\n+#ifdef RETURN_ADDR_OFFSET\n+  return_val_rtx = plus_constant (ret_val, -RETURN_ADDR_OFFSET);\n     if (return_val_rtx != ret_val)\n       emit_move_insn (ret_val, return_val_rtx);\n #endif\n@@ -1434,7 +1486,7 @@ expand_end_eh_spec (raises)\n void\n expand_exception_blocks ()\n {\n-  static rtx funcend;\n+  rtx funcend;\n   rtx insns;\n \n   start_sequence ();\n@@ -1771,8 +1823,8 @@ end_eh_unwinder (end)\n   ret_val = expand_builtin_return_addr (BUILT_IN_RETURN_ADDRESS,\n \t\t\t\t\t0, hard_frame_pointer_rtx);\n   return_val_rtx = copy_to_reg (ret_val);\n-#ifdef NORMAL_RETURN_ADDR_OFFSET\n-  return_val_rtx = plus_constant (return_val_rtx, NORMAL_RETURN_ADDR_OFFSET-1);\n+#ifdef RETURN_ADDR_OFFSET\n+  return_val_rtx = plus_constant (return_val_rtx, RETURN_ADDR_OFFSET-1);\n #else\n   return_val_rtx = plus_constant (return_val_rtx, -1);\n #endif\n@@ -1785,8 +1837,8 @@ end_eh_unwinder (end)\n   emit_move_insn (ret_val, gen_rtx (LABEL_REF, Pmode, label));\n #endif\n \n-#ifdef NORMAL_RETURN_ADDR_OFFSET\n-  return_val_rtx = plus_constant (ret_val, -NORMAL_RETURN_ADDR_OFFSET);\n+#ifdef RETURN_ADDR_OFFSET\n+  return_val_rtx = plus_constant (ret_val, -RETURN_ADDR_OFFSET);\n   if (return_val_rtx != ret_val)\n     emit_move_insn (ret_val, return_val_rtx);\n #endif"}, {"sha": "0337ce3cb896a6e493f40caf34f880715c106442", "filename": "gcc/cp/sig.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2Fsig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21451173d21db7d6184bb788693a5e941cb2a08d/gcc%2Fcp%2Fsig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsig.c?ref=21451173d21db7d6184bb788693a5e941cb2a08d", "patch": "@@ -571,6 +571,7 @@ build_signature_table_constructor (sig_ty, rhs)\n \t      delta = integer_zero_node;\n \t      index = integer_zero_node;\n \t      pfn = build_unary_op (ADDR_EXPR, rhs_method, 0);\n+\t      TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (rhs_method)) = 1;\n \t      TREE_TYPE (pfn) = ptr_type_node;\n \t      TREE_ADDRESSABLE (rhs_method) = 1;\n \t      offset_p = 0;\t/* we can't offset the rhs sig table */\n@@ -595,6 +596,7 @@ build_signature_table_constructor (sig_ty, rhs)\n \t\t\t\t\t       rhstype, 1));\n \t      index = integer_zero_node;\n \t      pfn = build_unary_op (ADDR_EXPR, rhs_method, 0);\n+\t      TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (rhs_method)) = 1;\n \t      TREE_TYPE (pfn) = ptr_type_node;\n \t      TREE_ADDRESSABLE (rhs_method) = 1;\n \t    }"}]}