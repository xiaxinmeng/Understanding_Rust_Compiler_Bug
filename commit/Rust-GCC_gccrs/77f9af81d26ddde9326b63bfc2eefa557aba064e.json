{"sha": "77f9af81d26ddde9326b63bfc2eefa557aba064e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdmOWFmODFkMjZkZGRlOTMyNmI2M2JmYzJlZWZhNTU3YWJhMDY0ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-01-14T13:03:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-01-14T13:03:47Z"}, "message": "convert.c (strip_float_extensions): Look for narrowest type handling FP constants.\n\n\t* convert.c (strip_float_extensions):  Look for narrowest type handling\n\tFP constants.\n\n\t* fold-const.c (fold):  Fold (double)float1 CMP (double)float2 into\n\tfloat1 CMP float2.\n\t* convert.c (strip_float_extensions): Make global.\n\t* tree.h (strip_float_extensions): Declare.\n\n\t* gcc.dg/i386-fpcvt-1.c: New test.\n\t* gcc.dg/i386-fpcvt-2.c: New test.\n\nFrom-SVN: r61279", "tree": {"sha": "c3eb54b4346a9236a335d6192b4c3fb9db3e36ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3eb54b4346a9236a335d6192b4c3fb9db3e36ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77f9af81d26ddde9326b63bfc2eefa557aba064e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f9af81d26ddde9326b63bfc2eefa557aba064e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f9af81d26ddde9326b63bfc2eefa557aba064e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f9af81d26ddde9326b63bfc2eefa557aba064e/comments", "author": null, "committer": null, "parents": [{"sha": "ab5496c4035e9c83e00e4ee1c87b410e6ca2c4e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5496c4035e9c83e00e4ee1c87b410e6ca2c4e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab5496c4035e9c83e00e4ee1c87b410e6ca2c4e5"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "86ce412acedf41c53327d7137fe0262e33e3fd80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77f9af81d26ddde9326b63bfc2eefa557aba064e", "patch": "@@ -1,3 +1,13 @@\n+Tue Jan 14 00:45:33 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* convert.c (strip_float_extensions):  Look for narrowest type handling\n+\tFP constants.\n+\n+\t* fold-const.c (fold):  Fold (double)float1 CMP (double)float2 into\n+\tfloat1 CMP float2.\n+\t* convert.c (strip_float_extensions): Make global.\n+\t* tree.h (strip_float_extensions): Declare.\n+\n 2003-01-14  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* timevar.def: define TV_NAME_LOOKUP."}, {"sha": "98ee7c18d51742b5e039b1a8b3e4ad5adbb2f03b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=77f9af81d26ddde9326b63bfc2eefa557aba064e", "patch": "@@ -1215,7 +1215,7 @@ c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) flags.h toplev.h\n c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    flags.h toplev.h $(C_COMMON_H)\n+    flags.h toplev.h $(C_COMMON_H) real.h\n c-pragma.o: c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n     function.h c-pragma.h toplev.h output.h $(GGC_H) $(TM_P_H) $(C_COMMON_H) gt-c-pragma.h\n mbchar.o: mbchar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) mbchar.h"}, {"sha": "26fb67669379e1bc5e0ef90dd336a4006457c9e9", "filename": "gcc/convert.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=77f9af81d26ddde9326b63bfc2eefa557aba064e", "patch": "@@ -32,8 +32,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"convert.h\"\n #include \"toplev.h\"\n #include \"langhooks.h\"\n-static tree strip_float_extensions PARAMS ((tree));\n-\n+#include \"real.h\"\n /* Convert EXPR to some pointer or reference type TYPE.\n \n    EXPR must be pointer, reference, integer, enumeral, or literal zero;\n@@ -75,12 +74,33 @@ convert_to_pointer (type, expr)\n }\n \n /* Avoid any floating point extensions from EXP.  */\n-static tree\n+tree\n strip_float_extensions (exp)\n      tree exp;\n {\n   tree sub, expt, subt;\n \n+  /*  For floating point constant look up the narrowest type that can hold\n+      it properly and handle it like (type)(narrowest_type)constant.\n+      This way we can optimize for instance a=a*2.0 where \"a\" is float\n+      but 2.0 is double constant.  */\n+  if (TREE_CODE (exp) == REAL_CST)\n+    {\n+      REAL_VALUE_TYPE orig;\n+      tree type = NULL;\n+\n+      orig = TREE_REAL_CST (exp);\n+      if (TYPE_PRECISION (TREE_TYPE (exp)) > TYPE_PRECISION (float_type_node)\n+\t  && exact_real_truncate (TYPE_MODE (float_type_node), &orig))\n+\ttype = float_type_node;\n+      else if (TYPE_PRECISION (TREE_TYPE (exp))\n+\t       > TYPE_PRECISION (double_type_node)\n+\t       && exact_real_truncate (TYPE_MODE (double_type_node), &orig))\n+\ttype = double_type_node;\n+      if (type)\n+\treturn build_real (type, real_value_truncate (TYPE_MODE (type), orig));\n+    }\n+\n   if (TREE_CODE (exp) != NOP_EXPR)\n     return exp;\n "}, {"sha": "726e84551f572731b070c20b708a56f0408df62c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=77f9af81d26ddde9326b63bfc2eefa557aba064e", "patch": "@@ -6041,6 +6041,18 @@ fold (expr)\n \n       if (FLOAT_TYPE_P (TREE_TYPE (arg0)))\n \t{\n+\t  tree targ0 = strip_float_extensions (arg0);\n+\t  tree targ1 = strip_float_extensions (arg1);\n+\t  tree newtype = TREE_TYPE (targ0);\n+\n+\t  if (TYPE_PRECISION (TREE_TYPE (targ1)) > TYPE_PRECISION (newtype))\n+\t    newtype = TREE_TYPE (targ1);\n+\n+\t  /* Fold (double)float1 CMP (double)float2 into float1 CMP float2.  */\n+\t  if (TYPE_PRECISION (newtype) < TYPE_PRECISION (TREE_TYPE (arg0)))\n+\t    return fold (build (code, type, convert (newtype, targ0),\n+\t\t\t\tconvert (newtype, targ1)));\n+\n \t  /* (-a) CMP (-b) -> b CMP a  */\n \t  if (TREE_CODE (arg0) == NEGATE_EXPR\n \t      && TREE_CODE (arg1) == NEGATE_EXPR)"}, {"sha": "b1608daa1f7e89aab37d259657f5e011a7076bde", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77f9af81d26ddde9326b63bfc2eefa557aba064e", "patch": "@@ -1,3 +1,8 @@\n+Tue Jan 14 00:45:03 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/i386-fpcvt-1.c: New test.\n+\t* gcc.dg/i386-fpcvt-2.c: New test.\n+\n 2003-01-14  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/i386-mmx-3.c: New test."}, {"sha": "716073eeeb3b0f7041d466cfdf3c11d4c1f9b005", "filename": "gcc/testsuite/gcc.dg/i386-fpcvt-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fpcvt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fpcvt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fpcvt-1.c?ref=77f9af81d26ddde9326b63bfc2eefa557aba064e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2 -march=athlon\" } */\n+/* { dg-final { scan-assembler-not \"cvtss2sd\" } } */\n+float a,b;\n+main()\n+{\n+  a=b*3.0;\n+}"}, {"sha": "12d149b13992d98abfe8166873795002c8e5a05e", "filename": "gcc/testsuite/gcc.dg/i386-fpcvt-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fpcvt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fpcvt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fpcvt-2.c?ref=77f9af81d26ddde9326b63bfc2eefa557aba064e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2 -march=athlon\" } */\n+/* { dg-final { scan-assembler-not \"cvtss2sd\" } } */\n+float a,b;\n+main()\n+{\n+\treturn a<0.0;\n+}"}, {"sha": "269d05e8305c2ca57f0ed47ce80eff6a7e70b275", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f9af81d26ddde9326b63bfc2eefa557aba064e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=77f9af81d26ddde9326b63bfc2eefa557aba064e", "patch": "@@ -2929,6 +2929,9 @@ extern tree fold_builtin\t\t\t\tPARAMS ((tree));\n extern enum built_in_function builtin_mathfn_code\tPARAMS ((tree));\n extern tree build_function_call_expr\t\t\tPARAMS ((tree, tree));\n \n+/* In convert.c */\n+extern tree strip_float_extensions\t\t\tPARAMS ((tree));\n+\n /* In alias.c */\n extern void record_component_aliases\t\tPARAMS ((tree));\n extern HOST_WIDE_INT get_alias_set\t\tPARAMS ((tree));"}]}