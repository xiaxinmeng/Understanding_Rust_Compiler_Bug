{"sha": "9b580a0b53a3e81eef0656670c4a4a09a5683b42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI1ODBhMGI1M2EzZTgxZWVmMDY1NjY3MGM0YTRhMDlhNTY4M2I0Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-03-10T00:53:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-03-10T00:53:09Z"}, "message": "re PR target/26090 (IA-64 creates DT_TEXTREL binaries)\n\n        PR target/26090\n\t* target.h (targetm.asm.out.reloc_rw_mask): New.\n\t* target-def.h (TARGET_ASM_RELOC_RW_MASK): New.\n\t(TARGET_ASM_OUT): Use it.\n\t* targhooks.c, targhooks.h (default_reloc_rw_mask): New.\n\t* varasm.c (categorize_decl_for_section): Remove shlib argument;\n\tuse the new reloc_rw_mask target hook instead.\n\t(default_section_type_flags_1): Merge into...\n\t(default_section_type_flags): ... here.\n\t(decl_readonly_section_1): Merge into...\n\t(decl_readonly_section): ... here.\n\t(default_elf_select_section_1): Merge into...\n\t(default_elf_select_section): ... here.\n\t(default_unique_section_1): Merge into...\n\t(default_unique_section): ... here.\n\t(compute_reloc_for_rtx_1, compute_reloc_for_rtx): New.\n\t(default_select_rtx_section): Use it.\n\t(default_elf_select_rtx_section): Likewise.\n\t* output.h: Update to match.\n\t* doc/tm.texi (TARGET_ASM_RELOC_RW_MASK): New.\n\t* config/alpha/alpha.c (alpha_elf_reloc_rw_mask): New.\n\t(TARGET_ASM_RELOC_RW_MASK): New.\n\t* config/i386/i386.c (x86_64_elf_select_section): Adjust call\n\tto categorize_decl_for_section.\n\t(x86_64_elf_unique_section): Likewise.\n\t* config/ia64/hpux.h (TARGET_ASM_SELECT_SECTION,\n\tTARGET_ASM_UNIQUE_SECTION, TARGET_ASM_SELECT_RTX_SECTION): Remove.\n\t(TARGET_ASM_RELOC_RW_MASK): New.\n\t* config/ia64/ia64.c (ia64_rwreloc_select_section,\n\tia64_rwreloc_unique_section, ia64_rwreloc_select_rtx_section): Remove.\n\t(ia64_hpux_reloc_rw_mask, ia64_reloc_rw_mask): New.\n\t(TARGET_RWRELOC): Remove.\n\t(ia64_section_type_flags): Adjust call to default_section_type_flags.\n\t* config/ia64/sysv4.h (TARGET_ASM_RELOC_RW_MASK): New.\n\t* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): Remove.\n\t(rs6000_elf_select_section, rs6000_elf_unique_section): Remove.\n\t(rs6000_elf_reloc_rw_mask, rs6000_xcoff_reloc_rw_mask): New.\n\t(rs6000_xcoff_select_section): Use decl_readonly_section.\n\t(rs6000_xcoff_section_type_flags): Use default_section_type_flags.\n\t* config/rs6000/sysv4.h (TARGET_ASM_RELOC_RW_MASK): New.\n\t(TARGET_ASM_SELECT_SECTION, TARGET_ASM_UNIQUE_SECTION): Remove.\n\t(TARGET_SECTION_TYPE_FLAGS): Remove.\n\t* config/rs6000/xcoff.h (TARGET_ASM_RELOC_RW_MASK): New.\n\nFrom-SVN: r122781", "tree": {"sha": "ddb930f60eed9d2395dd9b4695e612928d440a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddb930f60eed9d2395dd9b4695e612928d440a18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b580a0b53a3e81eef0656670c4a4a09a5683b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b580a0b53a3e81eef0656670c4a4a09a5683b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b580a0b53a3e81eef0656670c4a4a09a5683b42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b580a0b53a3e81eef0656670c4a4a09a5683b42/comments", "author": null, "committer": null, "parents": [{"sha": "b22eec88d248d584189d02ff7cc0e199ed7206f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b22eec88d248d584189d02ff7cc0e199ed7206f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b22eec88d248d584189d02ff7cc0e199ed7206f6"}], "stats": {"total": 392, "additions": 217, "deletions": 175}, "files": [{"sha": "2ca30efc6fe3268d63dfba157e3e4cabb9bd4bc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -1,3 +1,49 @@\n+2007-03-09  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/26090\n+\t* target.h (targetm.asm.out.reloc_rw_mask): New.\n+\t* target-def.h (TARGET_ASM_RELOC_RW_MASK): New.\n+\t(TARGET_ASM_OUT): Use it.\n+\t* targhooks.c, targhooks.h (default_reloc_rw_mask): New.\n+\t* varasm.c (categorize_decl_for_section): Remove shlib argument;\n+\tuse the new reloc_rw_mask target hook instead.\n+\t(default_section_type_flags_1): Merge into...\n+\t(default_section_type_flags): ... here.\n+\t(decl_readonly_section_1): Merge into...\n+\t(decl_readonly_section): ... here.\n+\t(default_elf_select_section_1): Merge into...\n+\t(default_elf_select_section): ... here.\n+\t(default_unique_section_1): Merge into...\n+\t(default_unique_section): ... here.\n+\t(compute_reloc_for_rtx_1, compute_reloc_for_rtx): New.\n+\t(default_select_rtx_section): Use it.\n+\t(default_elf_select_rtx_section): Likewise.\n+\t* output.h: Update to match.\n+\t* doc/tm.texi (TARGET_ASM_RELOC_RW_MASK): New.\n+\t* config/alpha/alpha.c (alpha_elf_reloc_rw_mask): New.\n+\t(TARGET_ASM_RELOC_RW_MASK): New.\n+\t* config/i386/i386.c (x86_64_elf_select_section): Adjust call\n+\tto categorize_decl_for_section.\n+\t(x86_64_elf_unique_section): Likewise.\n+\t* config/ia64/hpux.h (TARGET_ASM_SELECT_SECTION,\n+\tTARGET_ASM_UNIQUE_SECTION, TARGET_ASM_SELECT_RTX_SECTION): Remove.\n+\t(TARGET_ASM_RELOC_RW_MASK): New.\n+\t* config/ia64/ia64.c (ia64_rwreloc_select_section,\n+\tia64_rwreloc_unique_section, ia64_rwreloc_select_rtx_section): Remove.\n+\t(ia64_hpux_reloc_rw_mask, ia64_reloc_rw_mask): New.\n+\t(TARGET_RWRELOC): Remove.\n+\t(ia64_section_type_flags): Adjust call to default_section_type_flags.\n+\t* config/ia64/sysv4.h (TARGET_ASM_RELOC_RW_MASK): New.\n+\t* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): Remove.\n+\t(rs6000_elf_select_section, rs6000_elf_unique_section): Remove.\n+\t(rs6000_elf_reloc_rw_mask, rs6000_xcoff_reloc_rw_mask): New.\n+\t(rs6000_xcoff_select_section): Use decl_readonly_section.\n+\t(rs6000_xcoff_section_type_flags): Use default_section_type_flags.\n+\t* config/rs6000/sysv4.h (TARGET_ASM_RELOC_RW_MASK): New.\n+\t(TARGET_ASM_SELECT_SECTION, TARGET_ASM_UNIQUE_SECTION): Remove.\n+\t(TARGET_SECTION_TYPE_FLAGS): Remove.\n+\t* config/rs6000/xcoff.h (TARGET_ASM_RELOC_RW_MASK): New.\n+\n 2007-03-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold_comparison): Remove compile-time evaluation of"}, {"sha": "e6ea03f1b494f7e42eba196674ade3d4d5b5f259", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -9320,6 +9320,14 @@ alpha_file_start (void)\n #endif\n \n #ifdef OBJECT_FORMAT_ELF\n+/* Since we don't have a .dynbss section, we should not allow global\n+   relocations in the .rodata section.  */\n+\n+static int\n+alpha_elf_reloc_rw_mask (void)\n+{\n+  return flag_pic ? 3 : 2;\n+}\n \n /* Return a section for X.  The only special thing we do here is to\n    honor small data.  */\n@@ -10568,6 +10576,8 @@ alpha_init_libfuncs (void)\n #endif\n \n #ifdef OBJECT_FORMAT_ELF\n+#undef  TARGET_ASM_RELOC_RW_MASK\n+#define TARGET_ASM_RELOC_RW_MASK  alpha_elf_reloc_rw_mask\n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define\tTARGET_ASM_SELECT_RTX_SECTION  alpha_elf_select_rtx_section\n #endif"}, {"sha": "469d909b983a4b57a5ecccec7fced2c325a6c949", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -2509,7 +2509,7 @@ x86_64_elf_select_section (tree decl, int reloc,\n     {\n       const char *sname = NULL;\n       unsigned int flags = SECTION_WRITE;\n-      switch (categorize_decl_for_section (decl, reloc, flag_pic))\n+      switch (categorize_decl_for_section (decl, reloc))\n \t{\n \tcase SECCAT_DATA:\n \t  sname = \".ldata\";\n@@ -2576,7 +2576,7 @@ x86_64_elf_unique_section (tree decl, int reloc)\n       /* We only need to use .gnu.linkonce if we don't have COMDAT groups.  */\n       bool one_only = DECL_ONE_ONLY (decl) && !HAVE_COMDAT_GROUP;\n \n-      switch (categorize_decl_for_section (decl, reloc, flag_pic))\n+      switch (categorize_decl_for_section (decl, reloc))\n \t{\n \tcase SECCAT_DATA:\n \tcase SECCAT_DATA_REL:"}, {"sha": "bdf3968e95cdcf8a9cc8faf0728bfdbf8338f1fb", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine GNU compiler.  IA-64 version.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n    Free Software Foundation, Inc.\n    Contributed by Steve Ellcey <sje@cup.hp.com> and\n                   Reva Cuthbertson <reva@cup.hp.com>\n@@ -174,13 +174,8 @@ do {\t\t\t\t\t\t\t\t\\\n \n /* It is illegal to have relocations in shared segments on HPUX.\n    Pretend flag_pic is always set.  */\n-#undef  TARGET_ASM_SELECT_SECTION\n-#define TARGET_ASM_SELECT_SECTION  ia64_rwreloc_select_section\n-#undef  TARGET_ASM_UNIQUE_SECTION\n-#define TARGET_ASM_UNIQUE_SECTION  ia64_rwreloc_unique_section\n-#undef  TARGET_ASM_SELECT_RTX_SECTION\n-#define TARGET_ASM_SELECT_RTX_SECTION  ia64_rwreloc_select_rtx_section\n-#define TARGET_RWRELOC  true\n+#undef  TARGET_ASM_RELOC_RW_MASK\n+#define TARGET_ASM_RELOC_RW_MASK  ia64_hpux_reloc_rw_mask\n \n /* ia64 HPUX has the float and long double forms of math functions.  */\n #undef TARGET_C99_FUNCTIONS"}, {"sha": "dc10abb3dcd8030f9756ee37b6663f0ef13f772b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 22, "deletions": 40, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n \t\t  David Mosberger <davidm@hpl.hp.com>.\n@@ -244,17 +244,12 @@ static void ia64_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n static void ia64_file_start (void);\n static void ia64_globalize_decl_name (FILE *, tree);\n \n+static int ia64_hpux_reloc_rw_mask (void) ATTRIBUTE_UNUSED;\n+static int ia64_reloc_rw_mask (void) ATTRIBUTE_UNUSED;\n static section *ia64_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t unsigned HOST_WIDE_INT);\n static void ia64_output_dwarf_dtprel (FILE *, int, rtx)\n      ATTRIBUTE_UNUSED;\n-static section *ia64_rwreloc_select_section (tree, int, unsigned HOST_WIDE_INT)\n-     ATTRIBUTE_UNUSED;\n-static void ia64_rwreloc_unique_section (tree, int)\n-     ATTRIBUTE_UNUSED;\n-static section *ia64_rwreloc_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t\t\t unsigned HOST_WIDE_INT)\n-     ATTRIBUTE_UNUSED;\n static unsigned int ia64_section_type_flags (tree, const char *, int);\n static void ia64_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n@@ -9374,6 +9369,24 @@ ia64_sysv4_init_libfuncs (void)\n      glibc doesn't have them.  */\n }\n \f\n+/* For HPUX, it is illegal to have relocations in shared segments.  */\n+\n+static int\n+ia64_hpux_reloc_rw_mask (void)\n+{\n+  return 3;\n+}\n+\n+/* For others, relax this so that relocations to local data goes in\n+   read-only segments, but we still cannot allow global relocations\n+   in read-only segments.  */\n+\n+static int\n+ia64_reloc_rw_mask (void)\n+{\n+  return flag_pic ? 3 : 2;\n+}\n+\n /* Return the section to use for X.  The only special thing we do here\n    is to honor small data.  */\n \n@@ -9389,37 +9402,6 @@ ia64_select_rtx_section (enum machine_mode mode, rtx x,\n     return default_elf_select_rtx_section (mode, x, align);\n }\n \n-/* It is illegal to have relocations in shared segments on AIX and HPUX.\n-   Pretend flag_pic is always set.  */\n-\n-static section *\n-ia64_rwreloc_select_section (tree exp, int reloc, unsigned HOST_WIDE_INT align)\n-{\n-  return default_elf_select_section_1 (exp, reloc, align, true);\n-}\n-\n-static void\n-ia64_rwreloc_unique_section (tree decl, int reloc)\n-{\n-  default_unique_section_1 (decl, reloc, true);\n-}\n-\n-static section *\n-ia64_rwreloc_select_rtx_section (enum machine_mode mode, rtx x,\n-\t\t\t\t unsigned HOST_WIDE_INT align)\n-{\n-  section *sect;\n-  int save_pic = flag_pic;\n-  flag_pic = 1;\n-  sect = ia64_select_rtx_section (mode, x, align);\n-  flag_pic = save_pic;\n-  return sect;\n-}\n-\n-#ifndef TARGET_RWRELOC\n-#define TARGET_RWRELOC flag_pic\n-#endif\n-\n static unsigned int\n ia64_section_type_flags (tree decl, const char *name, int reloc)\n {\n@@ -9435,7 +9417,7 @@ ia64_section_type_flags (tree decl, const char *name, int reloc)\n       || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0)\n     flags = SECTION_SMALL;\n \n-  flags |= default_section_type_flags_1 (decl, name, reloc, TARGET_RWRELOC);\n+  flags |= default_section_type_flags (decl, name, reloc);\n   return flags;\n }\n "}, {"sha": "0e03e7d6107429dcf040f0d62ca9662aa90a4aca", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -121,6 +121,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n /* Override default elf definition.  */\n+#undef  TARGET_ASM_RELOC_RW_MASK\n+#define TARGET_ASM_RELOC_RW_MASK  ia64_reloc_rw_mask\n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION  ia64_select_rtx_section\n "}, {"sha": "d80d061c857b7ff356aa16ad6b23e45cb0390a31", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 40, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -656,13 +656,11 @@ static rtx rs6000_emit_set_long_const (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n static bool rs6000_return_in_memory (tree, tree);\n static void rs6000_file_start (void);\n #if TARGET_ELF\n-static unsigned int rs6000_elf_section_type_flags (tree, const char *, int);\n+static int rs6000_elf_reloc_rw_mask (void);\n static void rs6000_elf_asm_out_constructor (rtx, int);\n static void rs6000_elf_asm_out_destructor (rtx, int);\n static void rs6000_elf_end_indicate_exec_stack (void) ATTRIBUTE_UNUSED;\n static void rs6000_elf_asm_init_sections (void);\n-static section *rs6000_elf_select_section (tree, int, unsigned HOST_WIDE_INT);\n-static void rs6000_elf_unique_section (tree, int);\n static section *rs6000_elf_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t       unsigned HOST_WIDE_INT);\n static void rs6000_elf_encode_section_info (tree, rtx, int)\n@@ -673,6 +671,7 @@ static bool rs6000_use_blocks_for_constant_p (enum machine_mode, rtx);\n static void rs6000_xcoff_asm_output_anchor (rtx);\n static void rs6000_xcoff_asm_globalize_label (FILE *, const char *);\n static void rs6000_xcoff_asm_init_sections (void);\n+static int rs6000_xcoff_reloc_rw_mask (void);\n static void rs6000_xcoff_asm_named_section (const char *, unsigned int, tree);\n static section *rs6000_xcoff_select_section (tree, int,\n \t\t\t\t\t     unsigned HOST_WIDE_INT);\n@@ -18928,37 +18927,6 @@ rs6000_elf_select_rtx_section (enum machine_mode mode, rtx x,\n   else\n     return default_elf_select_rtx_section (mode, x, align);\n }\n-\n-/* Implement TARGET_ASM_SELECT_SECTION for ELF targets.  */\n-\n-static section *\n-rs6000_elf_select_section (tree decl, int reloc,\n-\t\t\t   unsigned HOST_WIDE_INT align)\n-{\n-  /* Pretend that we're always building for a shared library when\n-     ABI_AIX, because otherwise we end up with dynamic relocations\n-     in read-only sections.  This happens for function pointers,\n-     references to vtables in typeinfo, and probably other cases.  */\n-  return default_elf_select_section_1 (decl, reloc, align,\n-\t\t\t\t       flag_pic || DEFAULT_ABI == ABI_AIX);\n-}\n-\n-/* A C statement to build up a unique section name, expressed as a\n-   STRING_CST node, and assign it to DECL_SECTION_NAME (decl).\n-   RELOC indicates whether the initial value of EXP requires\n-   link-time relocations.  If you do not define this macro, GCC will use\n-   the symbol name prefixed by `.' as the section name.  Note - this\n-   macro can now be called for uninitialized data items as well as\n-   initialized data and functions.  */\n-\n-static void\n-rs6000_elf_unique_section (tree decl, int reloc)\n-{\n-  /* As above, pretend that we're always building for a shared library\n-     when ABI_AIX, to avoid dynamic relocations in read-only sections.  */\n-  default_unique_section_1 (decl, reloc,\n-\t\t\t    flag_pic || DEFAULT_ABI == ABI_AIX);\n-}\n \f\n /* For a SYMBOL_REF, set generic flags and then perform some\n    target-specific processing.\n@@ -19437,11 +19405,15 @@ rs6000_darwin_file_start (void)\n #endif /* TARGET_MACHO */\n \n #if TARGET_ELF\n-static unsigned int\n-rs6000_elf_section_type_flags (tree decl, const char *name, int reloc)\n+static int\n+rs6000_elf_reloc_rw_mask (void)\n {\n-  return default_section_type_flags_1 (decl, name, reloc,\n-\t\t\t\t       flag_pic || DEFAULT_ABI == ABI_AIX);\n+  if (flag_pic)\n+    return 3;\n+  else if (DEFAULT_ABI == ABI_AIX)\n+    return 2;\n+  else\n+    return 0;\n }\n \n /* Record an element in the table of global constructors.  SYMBOL is\n@@ -19679,6 +19651,12 @@ rs6000_xcoff_asm_init_sections (void)\n   exception_section = data_section;\n }\n \n+static int\n+rs6000_xcoff_reloc_rw_mask (void)\n+{\n+  return 3;\n+}\n+\n static void\n rs6000_xcoff_asm_named_section (const char *name, unsigned int flags,\n \t\t\t\ttree decl ATTRIBUTE_UNUSED)\n@@ -19702,7 +19680,7 @@ static section *\n rs6000_xcoff_select_section (tree decl, int reloc,\n \t\t\t     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n-  if (decl_readonly_section_1 (decl, reloc, 1))\n+  if (decl_readonly_section (decl, reloc))\n     {\n       if (TREE_PUBLIC (decl))\n \treturn read_only_data_section;\n@@ -19774,7 +19752,7 @@ static unsigned int\n rs6000_xcoff_section_type_flags (tree decl, const char *name, int reloc)\n {\n   unsigned int align;\n-  unsigned int flags = default_section_type_flags_1 (decl, name, reloc, 1);\n+  unsigned int flags = default_section_type_flags (decl, name, reloc);\n \n   /* Align to at least UNIT size.  */\n   if (flags & SECTION_CODE)"}, {"sha": "0b1eb1ebb4d916412b96d9b4f9d8b39962bbd697", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -1,6 +1,6 @@\n /* Target definitions for GNU compiler for PowerPC running System V.4\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2006 Free Software Foundation, Inc.\n+   2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n    Contributed by Cygnus Support.\n \n    This file is part of GCC.\n@@ -364,11 +364,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Override default elf definitions.  */\n #define TARGET_ASM_INIT_SECTIONS rs6000_elf_asm_init_sections\n+#undef  TARGET_ASM_RELOC_RW_MASK\n+#define TARGET_ASM_RELOC_RW_MASK rs6000_elf_reloc_rw_mask\n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define\tTARGET_ASM_SELECT_RTX_SECTION rs6000_elf_select_rtx_section\n-#undef\tTARGET_ASM_SELECT_SECTION\n-#define\tTARGET_ASM_SELECT_SECTION  rs6000_elf_select_section\n-#define TARGET_ASM_UNIQUE_SECTION  rs6000_elf_unique_section\n \n /* Return nonzero if this entry is to be written into the constant pool\n    in a special way.  We do so if this is a SYMBOL_REF, LABEL_REF or a CONST\n@@ -533,7 +532,6 @@ extern int fixuplabelno;\n \n #define TARGET_ENCODE_SECTION_INFO  rs6000_elf_encode_section_info\n #define TARGET_IN_SMALL_DATA_P  rs6000_elf_in_small_data_p\n-#define TARGET_SECTION_TYPE_FLAGS  rs6000_elf_section_type_flags\n \n /* The ELF version doesn't encode [DS] or whatever at the end of symbols.  */\n "}, {"sha": "ebf79b51e9d1d87d104b28fa2ac254dc8fe50030", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for some generic XCOFF file format\n-   Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2007 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -88,6 +88,7 @@\n #define TARGET_ASM_OUTPUT_ANCHOR  rs6000_xcoff_asm_output_anchor\n #define TARGET_ASM_GLOBALIZE_LABEL  rs6000_xcoff_asm_globalize_label\n #define TARGET_ASM_INIT_SECTIONS  rs6000_xcoff_asm_init_sections\n+#define TARGET_ASM_RELOC_RW_MASK  rs6000_xcoff_reloc_rw_mask\n #define TARGET_ASM_NAMED_SECTION  rs6000_xcoff_asm_named_section\n #define TARGET_ASM_SELECT_SECTION  rs6000_xcoff_select_section\n #define TARGET_ASM_SELECT_RTX_SECTION  rs6000_xcoff_select_rtx_section"}, {"sha": "ac09e4e7985e66d2e83808cfb8d5955e70e314b5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -6397,6 +6397,18 @@ any assembly code, and before calling any of the section-returning hooks\n described below.\n @end deftypefn\n \n+@deftypefn {Target Hook} TARGET_ASM_RELOC_RW_MASK (void)\n+Return a mask describing how relocations should be treated when\n+selecting sections.  Bit 1 should be set if global relocations\n+should be placed in a read-write section; bit 0 should be set if\n+local relocations should be placed in a read-write section.\n+\n+The default version of this function returns 3 when @option{-fpic}\n+is in effect, and 0 otherwise.  The hook is typically redefined\n+when the target cannot support (some kinds of) dynamic relocations\n+in read-only sections even in executables.\n+@end deftypefn\n+\n @deftypefn {Target Hook} {section *} TARGET_ASM_SELECT_SECTION (tree @var{exp}, int @var{reloc}, unsigned HOST_WIDE_INT @var{align})\n Return the section into which @var{exp} should be placed.  You can\n assume that @var{exp} is either a @code{VAR_DECL} node or a constant of"}, {"sha": "4cb41d4f2f92317bbf68e657f9d3ffc658d0cccf", "filename": "gcc/output.h", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -383,7 +383,6 @@ extern bool first_function_block_is_cold;\n /* Decide whether DECL needs to be in a writable section.\n    RELOC is the same as for SELECT_SECTION.  */\n extern bool decl_readonly_section (tree, int);\n-extern bool decl_readonly_section_1 (tree, int, int);\n \n /* This can be used to compute RELOC for the function above, when\n    given a constant expression.  */\n@@ -580,12 +579,11 @@ extern void switch_to_section (section *);\n extern void output_section_asm_op (const void *);\n \n extern unsigned int default_section_type_flags (tree, const char *, int);\n-extern unsigned int default_section_type_flags_1 (tree, const char *, int, int);\n \n extern bool have_global_bss_p (void);\n extern void default_no_named_section (const char *, unsigned int, tree);\n extern void default_elf_asm_named_section (const char *, unsigned int, tree);\n-extern enum section_category categorize_decl_for_section (tree, int, int);\n+extern enum section_category categorize_decl_for_section (tree, int);\n extern void default_coff_asm_named_section (const char *, unsigned int, tree);\n extern void default_pe_asm_named_section (const char *, unsigned int, tree);\n \n@@ -596,15 +594,9 @@ extern void default_stabs_asm_out_constructor (rtx, int);\n extern void default_named_section_asm_out_constructor (rtx, int);\n extern void default_ctor_section_asm_out_constructor (rtx, int);\n \n-extern section *default_select_section (tree, int,\n-\t\t\t\t\t       unsigned HOST_WIDE_INT);\n-extern section *default_elf_select_section (tree, int,\n-\t\t\t\t\t\t   unsigned HOST_WIDE_INT);\n-extern section *default_elf_select_section_1 (tree, int,\n-\t\t\t\t\t\t     unsigned HOST_WIDE_INT,\n-\t\t\t\t\t\t     int);\n+extern section *default_select_section (tree, int, unsigned HOST_WIDE_INT);\n+extern section *default_elf_select_section (tree, int, unsigned HOST_WIDE_INT);\n extern void default_unique_section (tree, int);\n-extern void default_unique_section_1 (tree, int, int);\n extern section *default_function_rodata_section (tree);\n extern section *default_no_function_rodata_section (tree);\n extern section *default_select_rtx_section (enum machine_mode, rtx,"}, {"sha": "3a17c121543a0c7bca6c87d8ef84b5c267f255fa", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -1,5 +1,5 @@\n /* Default initializers for a generic GCC target.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -97,6 +97,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_ASM_FUNCTION_END_PROLOGUE no_asm_to_stream\n #define TARGET_ASM_FUNCTION_BEGIN_EPILOGUE no_asm_to_stream\n \n+#ifndef TARGET_ASM_RELOC_RW_MASK\n+#define TARGET_ASM_RELOC_RW_MASK default_reloc_rw_mask\n+#endif\n+\n #ifndef TARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION default_select_section\n #endif\n@@ -271,6 +275,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n \t\t\tTARGET_ASM_FUNCTION_EPILOGUE,\t\t\\\n \t\t\tTARGET_ASM_INIT_SECTIONS,\t\t\\\n \t\t\tTARGET_ASM_NAMED_SECTION,\t\t\\\n+\t\t\tTARGET_ASM_RELOC_RW_MASK,\t\t\\\n \t\t\tTARGET_ASM_SELECT_SECTION,\t\t\\\n \t\t\tTARGET_ASM_SELECT_RTX_SECTION,\t\t\\\n \t\t\tTARGET_ASM_UNIQUE_SECTION,\t\t\\"}, {"sha": "476eb8810b117115fa3d25d6300ef7796795c4ee", "filename": "gcc/target.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -1,5 +1,5 @@\n /* Data structure definitions for a generic GCC target.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -162,6 +162,12 @@ struct gcc_target\n        which this section is associated.  */\n     void (* named_section) (const char *name, unsigned int flags, tree decl);\n \n+    /* Return a mask describing how relocations should be treated when\n+       selecting sections.  Bit 1 should be set if global relocations\n+       should be placed in a read-write section; bit 0 should be set if\n+       local relocations should be placed in a read-write section.  */\n+    int (*reloc_rw_mask) (void);\n+\n     /* Return a section for EXP.  It may be a DECL or a constant.  RELOC\n        is nonzero if runtime relocations must be applied; bit 1 will be\n        set if the runtime relocations require non-local name resolution."}, {"sha": "baad65b0cacb29f4b097a716f434f4a6541edc1a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -1,5 +1,5 @@\n /* Default target hook functions.\n-   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -622,4 +622,13 @@ default_handle_c_option (size_t code ATTRIBUTE_UNUSED,\n   return false;\n }\n \n+/* By default, if flag_pic is true, then neither local nor global relocs\n+   should be placed in readonly memory.  */\n+\n+int\n+default_reloc_rw_mask (void)\n+{\n+  return flag_pic ? 3 : 0;\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "062d4f0b5b4a9fe1f8136cc625190cea5f81f414", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -83,3 +83,4 @@ extern enum reg_class default_secondary_reload (bool, rtx, enum reg_class,\n \t\t\t\t\t\tsecondary_reload_info *);\n extern void hook_void_bitmap (bitmap);\n extern bool default_handle_c_option (size_t, const char *, int);\n+extern int default_reloc_rw_mask (void);"}, {"sha": "cf880e83b16f08d2e9f6e00a4d8f9bd918b9f5b7", "filename": "gcc/varasm.c", "status": "modified", "additions": 70, "deletions": 65, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b580a0b53a3e81eef0656670c4a4a09a5683b42/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9b580a0b53a3e81eef0656670c4a4a09a5683b42", "patch": "@@ -5536,19 +5536,12 @@ decl_default_tls_model (tree decl)\n \n unsigned int\n default_section_type_flags (tree decl, const char *name, int reloc)\n-{\n-  return default_section_type_flags_1 (decl, name, reloc, flag_pic);\n-}\n-\n-unsigned int\n-default_section_type_flags_1 (tree decl, const char *name, int reloc,\n-\t\t\t      int shlib)\n {\n   unsigned int flags;\n \n   if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n     flags = SECTION_CODE;\n-  else if (decl && decl_readonly_section_1 (decl, reloc, shlib))\n+  else if (decl && decl_readonly_section (decl, reloc))\n     flags = 0;\n   else if (current_function_decl\n \t   && cfun\n@@ -5748,7 +5741,7 @@ default_select_section (tree decl, int reloc,\n }\n \n enum section_category\n-categorize_decl_for_section (tree decl, int reloc, int shlib)\n+categorize_decl_for_section (tree decl, int reloc)\n {\n   enum section_category ret;\n \n@@ -5769,17 +5762,17 @@ categorize_decl_for_section (tree decl, int reloc, int shlib)\n \t       || TREE_SIDE_EFFECTS (decl)\n \t       || ! TREE_CONSTANT (DECL_INITIAL (decl)))\n \t{\n-\t  if (shlib && (reloc & 2))\n-\t    ret = SECCAT_DATA_REL;\n-\t  else if (shlib && reloc)\n-\t    ret = SECCAT_DATA_REL_LOCAL;\n+\t  /* Here the reloc_rw_mask is not testing whether the section should\n+\t     be read-only or not, but whether the dynamic link will have to\n+\t     do something.  If so, we wish to segregate the data in order to\n+\t     minimize cache misses inside the dynamic linker.  */\n+\t  if (reloc & targetm.asm_out.reloc_rw_mask ())\n+\t    ret = reloc == 1 ? SECCAT_DATA_REL_LOCAL : SECCAT_DATA_REL;\n \t  else\n \t    ret = SECCAT_DATA;\n \t}\n-      else if (shlib && (reloc & 2))\n-\tret = SECCAT_DATA_REL_RO;\n-      else if (shlib && reloc)\n-\tret = SECCAT_DATA_REL_RO_LOCAL;\n+      else if (reloc & targetm.asm_out.reloc_rw_mask ())\n+\tret = reloc == 1 ? SECCAT_DATA_REL_RO_LOCAL : SECCAT_DATA_REL_RO;\n       else if (reloc || flag_merge_constants < 2)\n \t/* C and C++ don't allow different variables to share the same\n \t   location.  -fmerge-all-constants allows even that (at the\n@@ -5792,7 +5785,7 @@ categorize_decl_for_section (tree decl, int reloc, int shlib)\n     }\n   else if (TREE_CODE (decl) == CONSTRUCTOR)\n     {\n-      if ((shlib && reloc)\n+      if ((reloc & targetm.asm_out.reloc_rw_mask ())\n \t  || TREE_SIDE_EFFECTS (decl)\n \t  || ! TREE_CONSTANT (decl))\n \tret = SECCAT_DATA;\n@@ -5832,13 +5825,7 @@ categorize_decl_for_section (tree decl, int reloc, int shlib)\n bool\n decl_readonly_section (tree decl, int reloc)\n {\n-  return decl_readonly_section_1 (decl, reloc, flag_pic);\n-}\n-\n-bool\n-decl_readonly_section_1 (tree decl, int reloc, int shlib)\n-{\n-  switch (categorize_decl_for_section (decl, reloc, shlib))\n+  switch (categorize_decl_for_section (decl, reloc))\n     {\n     case SECCAT_RODATA:\n     case SECCAT_RODATA_MERGE_STR:\n@@ -5858,16 +5845,9 @@ decl_readonly_section_1 (tree decl, int reloc, int shlib)\n section *\n default_elf_select_section (tree decl, int reloc,\n \t\t\t    unsigned HOST_WIDE_INT align)\n-{\n-  return default_elf_select_section_1 (decl, reloc, align, flag_pic);\n-}\n-\n-section *\n-default_elf_select_section_1 (tree decl, int reloc,\n-\t\t\t      unsigned HOST_WIDE_INT align, int shlib)\n {\n   const char *sname;\n-  switch (categorize_decl_for_section (decl, reloc, shlib))\n+  switch (categorize_decl_for_section (decl, reloc))\n     {\n     case SECCAT_TEXT:\n       /* We're not supposed to be called on FUNCTION_DECLs.  */\n@@ -5928,20 +5908,14 @@ default_elf_select_section_1 (tree decl, int reloc,\n \n void\n default_unique_section (tree decl, int reloc)\n-{\n-  default_unique_section_1 (decl, reloc, flag_pic);\n-}\n-\n-void\n-default_unique_section_1 (tree decl, int reloc, int shlib)\n {\n   /* We only need to use .gnu.linkonce if we don't have COMDAT groups.  */\n   bool one_only = DECL_ONE_ONLY (decl) && !HAVE_COMDAT_GROUP;\n   const char *prefix, *name;\n   size_t nlen, plen;\n   char *string;\n \n-  switch (categorize_decl_for_section (decl, reloc, shlib))\n+  switch (categorize_decl_for_section (decl, reloc))\n     {\n     case SECCAT_TEXT:\n       prefix = one_only ? \".gnu.linkonce.t.\" : \".text.\";\n@@ -6002,45 +5976,76 @@ default_unique_section_1 (tree decl, int reloc, int shlib)\n   DECL_SECTION_NAME (decl) = build_string (nlen + plen, string);\n }\n \n+/* Like compute_reloc_for_constant, except for an RTX.  The return value\n+   is a mask for which bit 1 indicates a global relocation, and bit 0\n+   indicates a local relocation.  */\n+\n+static int\n+compute_reloc_for_rtx_1 (rtx *xp, void *data)\n+{\n+  int *preloc = data;\n+  rtx x = *xp;\n+\n+  switch (GET_CODE (x))\n+    {\n+    case SYMBOL_REF:\n+      *preloc |= SYMBOL_REF_LOCAL_P (x) ? 1 : 2;\n+      break;\n+    case LABEL_REF:\n+      *preloc |= 1;\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  return 0;\n+}\n+\n+static int\n+compute_reloc_for_rtx (rtx x)\n+{\n+  int reloc;\n+\n+  switch (GET_CODE (x))\n+    {\n+    case CONST:\n+    case SYMBOL_REF:\n+    case LABEL_REF:\n+      reloc = 0;\n+      for_each_rtx (&x, compute_reloc_for_rtx_1, &reloc);\n+      return reloc;\n+\n+    default:\n+      return 0;\n+    }\n+}\n+\n section *\n default_select_rtx_section (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t    rtx x,\n \t\t\t    unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n-  if (flag_pic)\n-    switch (GET_CODE (x))\n-      {\n-      case CONST:\n-      case SYMBOL_REF:\n-      case LABEL_REF:\n-\treturn data_section;\n-\n-      default:\n-\tbreak;\n-      }\n-\n-  return readonly_data_section;\n+  if (compute_reloc_for_rtx (x) & targetm.asm_out.reloc_rw_mask ())\n+    return data_section;\n+  else\n+    return readonly_data_section;\n }\n \n section *\n default_elf_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t\tunsigned HOST_WIDE_INT align)\n {\n-  /* ??? Handle small data here somehow.  */\n+  int reloc = compute_reloc_for_rtx (x);\n \n-  if (flag_pic)\n-    switch (GET_CODE (x))\n-      {\n-      case CONST:\n-      case SYMBOL_REF:\n-\treturn get_named_section (NULL, \".data.rel.ro\", 3);\n+  /* ??? Handle small data here somehow.  */\n \n-      case LABEL_REF:\n+  if (reloc & targetm.asm_out.reloc_rw_mask ())\n+    {\n+      if (reloc == 1)\n \treturn get_named_section (NULL, \".data.rel.ro.local\", 1);\n-\n-      default:\n-\tbreak;\n-      }\n+      else\n+\treturn get_named_section (NULL, \".data.rel.ro\", 3);\n+    }\n \n   return mergeable_constant_section (mode, align, 0);\n }"}]}