{"sha": "118a3a8ba8497b0b68ebe0f875ce940d84a7315e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE4YTNhOGJhODQ5N2IwYjY4ZWJlMGY4NzVjZTk0MGQ4NGE3MzE1ZQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-06-13T16:24:52Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-06-13T16:24:52Z"}, "message": "c-decl.c (diagnose_mismatched_decls): Improve error message.\n\n2004-06-13  Eric Christopher  <echristo@redhat.com>\n\n\t* c-decl.c (diagnose_mismatched_decls): Improve error message.\n\tRemove unused code.\n\t* c-typeck.c (comptypes): Add location in standard we're checking.\n\n2004-06-13  Eric Christopher  <echristo@redhat.com>\n\n\t* gcc.dg/noncompile/redecl-1.c: Fix error message.\n\nFrom-SVN: r83060", "tree": {"sha": "1610976da3c4d67fa8a457fc78a4dce1d38b223e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1610976da3c4d67fa8a457fc78a4dce1d38b223e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/118a3a8ba8497b0b68ebe0f875ce940d84a7315e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118a3a8ba8497b0b68ebe0f875ce940d84a7315e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/118a3a8ba8497b0b68ebe0f875ce940d84a7315e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/comments", "author": null, "committer": null, "parents": [{"sha": "fc6b41718d2bc46a4062720b5f8a79a67f171bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6b41718d2bc46a4062720b5f8a79a67f171bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6b41718d2bc46a4062720b5f8a79a67f171bb3"}], "stats": {"total": 71, "additions": 30, "deletions": 41}, "files": [{"sha": "604eaea921ca6f8acb0171364e61cafb447c3af8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=118a3a8ba8497b0b68ebe0f875ce940d84a7315e", "patch": "@@ -1,3 +1,9 @@\n+2004-06-13  Eric Christopher  <echristo@redhat.com>\n+\n+\t* c-decl.c (diagnose_mismatched_decls): Improve error message.\n+\tRemove unused code.\n+\t* c-typeck.c (comptypes): Add location in standard we're checking.\n+\n 2004-06-13  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/libgcc-std.ver: Add __unorddf2 and __unordsf2 with"}, {"sha": "2fd53ea7b50bd9e8bd692275c80f1e127eeea8f0", "filename": "gcc/c-decl.c", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=118a3a8ba8497b0b68ebe0f875ce940d84a7315e", "patch": "@@ -603,7 +603,7 @@ push_scope (void)\n \t  scope->depth--;\n \t  sorry (\"GCC supports only %u nested scopes\\n\", scope->depth);\n \t}\n-      \n+\n       current_scope        = scope;\n       keep_next_level_flag = false;\n     }\n@@ -688,7 +688,7 @@ pop_scope (void)\n \t  /* Labels go in BLOCK_VARS.  */\n \t  TREE_CHAIN (p) = BLOCK_VARS (block);\n \t  BLOCK_VARS (block) = p;\n- \n+\n #ifdef ENABLE_CHECKING\n \t  if (I_LABEL_BINDING (b->id) != b) abort ();\n #endif\n@@ -776,7 +776,7 @@ pop_scope (void)\n \t}\n     }\n \n-  \n+\n   /* Dispose of the block that we just made inside some higher level.  */\n   if ((scope->function_body || scope == file_scope) && context)\n     {\n@@ -1138,7 +1138,10 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t}\n       else\n \t{\n-\t  error (\"%Jconflicting types for '%D'\", newdecl, newdecl);\n+\t  if (TYPE_QUALS (newtype) != TYPE_QUALS (oldtype))\n+\t    error (\"%J conflicting type qualifiers for '%D'\", newdecl, newdecl);\n+\t  else\n+\t    error (\"%Jconflicting types for '%D'\", newdecl, newdecl);\n \t  diagnose_arglist_conflict (newdecl, olddecl, newtype, oldtype);\n \t  locate_old_decl (olddecl, error);\n \t  return false;\n@@ -1152,7 +1155,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n     {\n       if (DECL_IN_SYSTEM_HEADER (newdecl) || DECL_IN_SYSTEM_HEADER (olddecl))\n \treturn true;  /* Allow OLDDECL to continue in use.  */\n-      \n+\n       error (\"%Jredefinition of typedef '%D'\", newdecl, newdecl);\n       locate_old_decl (olddecl, error);\n       return false;\n@@ -1182,7 +1185,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  /* Discard the old built-in function.  */\n \t  return false;\n \t}\n-      \n+\n       if (DECL_INITIAL (newdecl))\n \t{\n \t  if (DECL_INITIAL (olddecl)\n@@ -1365,28 +1368,6 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  locate_old_decl (olddecl, error);\n \t  return false;\n \t}\n-\n-      /* These bits are only type qualifiers when applied to objects.  */\n-      if (TREE_THIS_VOLATILE (newdecl) != TREE_THIS_VOLATILE (olddecl))\n-\t{\n-\t  if (TREE_THIS_VOLATILE (newdecl))\n-\t    pedwarn (\"%Jvolatile declaration of '%D' follows \"\n-\t\t     \"non-volatile declaration\", newdecl, newdecl);\n-\t  else\n-\t    pedwarn (\"%Jnon-volatile declaration of '%D' follows \"\n-\t\t     \"volatile declaration\", newdecl, newdecl);\n-\t  pedwarned = true;\n-\t}\n-      if (TREE_READONLY (newdecl) != TREE_READONLY (olddecl))\n-\t{\n-\t  if (TREE_READONLY (newdecl))\n-\t    pedwarn (\"%Jconst declaration of '%D' follows \"\n-\t\t     \"non-const declaration\", newdecl, newdecl);\n-\t  else\n-\t    pedwarn (\"%Jnon-const declaration of '%D' follows \"\n-\t\t     \"const declaration\", newdecl, newdecl);\n-\t  pedwarned = true;\n-\t}\n     }\n \n   /* Optional warning for completely redundant decls.  */\n@@ -1677,7 +1658,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n   merge_decls (newdecl, olddecl, newtype, oldtype);\n   return true;\n }\n-  \n+\n \f\n /* Check whether decl-node NEW shadows an existing declaration.  */\n static void\n@@ -2215,7 +2196,7 @@ lookup_tag (enum tree_code code, tree name, int thislevel_only)\n       /* For our purposes, a tag in the external scope is the same as\n \t a tag in the file scope.  (Primarily relevant to Objective-C\n \t and its builtin structure tags, which get pushed before the\n-\t file scope is created.)  */ \n+\t file scope is created.)  */\n       if (b->contour == current_scope\n \t  || (current_scope == file_scope && b->contour == external_scope))\n \tthislevel = 1;\n@@ -3309,7 +3290,7 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n   if (TREE_CODE (*type) == ENUMERAL_TYPE)\n     {\n       struct lang_type *lt = TYPE_LANG_SPECIFIC (*type);\n-      if (!lt \n+      if (!lt\n           || w < min_precision (lt->enum_min, TYPE_UNSIGNED (*type))\n \t  || w < min_precision (lt->enum_max, TYPE_UNSIGNED (*type)))\n \twarning (\"`%s' is narrower than values of its type\", name);\n@@ -4842,7 +4823,7 @@ get_parm_info (bool ellipsis)\n \t\t/* The %s will be one of 'struct', 'union', or 'enum'.  */\n \t\twarning (\"anonymous %s declared inside parameter list\",\n \t\t\t keyword);\n-\t      \n+\n \t      if (! explained_incomplete_types)\n \t\t{\n \t\t  warning (\"its scope is only this definition or declaration,\"\n@@ -6336,7 +6317,7 @@ finish_function (void)\n   /* Genericize before inlining.  Delay genericizing nested functions\n      until their parent function is genericized.  Since finalizing\n      requires GENERIC, delay that as well.  */\n-     \n+\n   if (DECL_INITIAL (fndecl) && DECL_INITIAL (fndecl) != error_mark_node)\n     {\n       if (!decl_function_context (fndecl))\n@@ -6656,14 +6637,14 @@ c_write_global_declarations_1 (tree globals)\n   tree *vec = xmalloc (sizeof (tree) * len);\n   size_t i;\n   tree decl;\n-  \n+\n   /* Process the decls in the order they were written.  */\n   for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n     vec[i] = decl;\n \n   wrapup_global_declarations (vec, len);\n   check_global_declarations (vec, len);\n-      \n+\n   free (vec);\n }\n "}, {"sha": "321607c22635ec078bc916da8105cb5c28cbdfcd", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=118a3a8ba8497b0b68ebe0f875ce940d84a7315e", "patch": "@@ -598,7 +598,7 @@ comptypes (tree type1, tree type2, int flags)\n   if (TREE_CODE (t1) != TREE_CODE (t2))\n     return 0;\n \n-  /* Qualifiers must match.  */\n+  /* Qualifiers must match. C99 6.7.3p9 */\n \n   if (TYPE_QUALS (t1) != TYPE_QUALS (t2))\n     return 0;"}, {"sha": "0aea15208d678e1812c08773fa6029567501540d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=118a3a8ba8497b0b68ebe0f875ce940d84a7315e", "patch": "@@ -1,3 +1,7 @@\n+2004-06-13  Eric Christopher  <echristo@redhat.com>\n+\n+\t* gcc.dg/noncompile/redecl-1.c: Fix error message.\n+\n 2004-06-12  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.fortran-torture/execute/contained_3.f90: New test.\n@@ -11,8 +15,8 @@\n \n \tPR fortran/14957\n \t* gfortran.fortran-torture/execute/stack_varsize.f90: Correct\n-        syntax errors in end statements of contained subroutines. \n-\t\n+        syntax errors in end statements of contained subroutines.\n+\n 2004-06-12  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/12841\n@@ -17021,4 +17025,3 @@ rlsruhe.de>\n \tcorrespond to c-torture\t1.11.\n \n \t* New file.\n-"}, {"sha": "416c258c0d45541057ef9c21923e8562cf396e24", "filename": "gcc/testsuite/gcc.dg/noncompile/redecl-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fredecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118a3a8ba8497b0b68ebe0f875ce940d84a7315e/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fredecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fredecl-1.c?ref=118a3a8ba8497b0b68ebe0f875ce940d84a7315e", "patch": "@@ -5,6 +5,5 @@ int\n foo ()\n {\n   int bar; /* { dg-error \"previous.*decl\" \"previous.*decl\" } */\n-  volatile int bar; /* { dg-error \"conflicting types\" \"conflicting types\" } */\n+  volatile int bar; /* { dg-error \"conflicting type qualifiers\" \"conflicting type qualifiers\" } */\n }\n-"}]}