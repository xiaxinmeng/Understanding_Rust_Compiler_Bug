{"sha": "2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY5N2Y4MzI0ZmJiMDliMGQ5MjAzNmJhNmE2YjhhMmI4ZDI1NmIyMw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-05T00:17:03Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-05T00:17:03Z"}, "message": "Daily bump.", "tree": {"sha": "27a207ae4d712328e87c6bef164a3cb2bc41578c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27a207ae4d712328e87c6bef164a3cb2bc41578c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/comments", "author": null, "committer": null, "parents": [{"sha": "ded2c2c068f6f2825474758cb03a05070a5837e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded2c2c068f6f2825474758cb03a05070a5837e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded2c2c068f6f2825474758cb03a05070a5837e8"}], "stats": {"total": 499, "additions": 498, "deletions": 1}, "files": [{"sha": "d888dc5798dd1f1e68d70d577fbfa1eec193b63e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "patch": "@@ -1,3 +1,207 @@\n+2021-08-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101570\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/region-model-asm.o.\n+\n+2021-08-04  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101742\n+\t* config/i386/i386.h (STORE_MAX_PIECES): Allow 16/32/64 bytes\n+\tonly if TARGET_INTER_UNIT_MOVES_TO_VEC is true.\n+\n+2021-08-04  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101772\n+\t* config/i386/i386-expand.c (ix86_expand_vector_move): Call\n+\tix86_gen_scratch_sse_rtx to get a scratch SSE register to copy\n+\tdata with SSE register from one memory location to another.\n+\n+2021-08-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.c (expand_perm_with_vpdi): New function.\n+\t(vectorize_vec_perm_const_1): Call expand_perm_with_vpdi.\n+\t* config/s390/vector.md (*vpdi1<mode>, @vpdi1<mode>): Enable a\n+\tparameterized expander.\n+\t(*vpdi4<mode>, @vpdi4<mode>): Likewise.\n+\n+2021-08-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.c (MAX_VECT_LEN): Define macro.\n+\t(struct expand_vec_perm_d): Define struct.\n+\t(expand_perm_with_merge): New function.\n+\t(vectorize_vec_perm_const_1): New function.\n+\t(s390_vectorize_vec_perm_const): New function.\n+\t(TARGET_VECTORIZE_VEC_PERM_CONST): Define target macro.\n+\n+2021-08-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/vector.md (V_HW_64): Remove mode iterator.\n+\t(*vec_load_pair<mode>): Use V_HW_2 instead of V_HW_64.\n+\t* config/s390/vx-builtins.md\n+\t(vec_scatter_element<V_HW_2:mode>_SI): Use V_HW_2 instead of\n+\tV_HW_64.\n+\n+2021-08-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.md (UNSPEC_VEC_PERMI): Remove constant\n+\tdefinition.\n+\t* config/s390/vector.md (*vpdi1<mode>, *vpdi4<mode>): New pattern\n+\tdefinitions.\n+\t* config/s390/vx-builtins.md (*vec_permi<mode>): Emit generic rtx\n+\tinstead of an unspec.\n+\n+2021-08-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390-modes.def: Add more vector modes to support\n+\tconcatenation of two vectors.\n+\t* config/s390/s390-protos.h (s390_expand_merge_perm_const): Add\n+\tprototype.\n+\t(s390_expand_merge): Likewise.\n+\t* config/s390/s390.c (s390_expand_merge_perm_const): New function.\n+\t(s390_expand_merge): New function.\n+\t* config/s390/s390.md (UNSPEC_VEC_MERGEH, UNSPEC_VEC_MERGEL):\n+\tRemove constant definitions.\n+\t* config/s390/vector.md (V_HW_2): Add mode iterators.\n+\t(VI_HW_4, V_HW_4): Rename VI_HW_4 to V_HW_4.\n+\t(vec_2x_nelts, vec_2x_wide): New mode attributes.\n+\t(*vmrhb, *vmrlb, *vmrhh, *vmrlh, *vmrhf, *vmrlf, *vmrhg, *vmrlg):\n+\tNew pattern definitions.\n+\t(vec_widen_umult_lo_<mode>, vec_widen_umult_hi_<mode>)\n+\t(vec_widen_smult_lo_<mode>, vec_widen_smult_hi_<mode>)\n+\t(vec_unpacks_lo_v4sf, vec_unpacks_hi_v4sf, vec_unpacks_lo_v2df)\n+\t(vec_unpacks_hi_v2df): Adjust expanders to emit non-unspec RTX for\n+\tvec merge.\n+\t* config/s390/vx-builtins.md (V_HW_4): Remove mode iterator. Now\n+\tin vector.md.\n+\t(vec_mergeh<mode>, vec_mergel<mode>): Use s390_expand_merge to\n+\temit vec merge pattern.\n+\n+2021-08-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_strip_extend_vec_half):\n+\tDefine.\n+\t(aarch64_rtx_mult_cost): Traverse RTL tree to prevent cost of\n+\tvec_select high-half from being added into Neon multiply\n+\tcost.\n+\t* rtlanal.c (vec_series_highpart_p): Define.\n+\t* rtlanal.h (vec_series_highpart_p): Declare.\n+\n+2021-08-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_strip_duplicate_vec_elt):\n+\tDefine.\n+\t(aarch64_rtx_mult_cost): Traverse RTL tree to prevent\n+\tvec_select cost from being added into Neon multiply cost.\n+\n+2021-08-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vect_better_loop_vinfo_p): Detect cases in\n+\twhich old_loop_vinfo is an epilogue loop that handles a constant\n+\tnumber of iterations.\n+\n+2021-08-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vect_analyze_loop): Print a dump message\n+\twhen a reanalyzed loop fails to be cheaper than the current\n+\tmain loop.\n+\n+2021-08-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c: Fix a typo.\n+\n+2021-08-04  Vincent Lef\u00e8vre  <vincent-gcc@vinc17.net>\n+\n+\tPR gcov-profile/101773\n+\t* gcov-io.c (gcov_close): Check return code of a fclose.\n+\n+2021-08-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR ada/101575\n+\t* dwarf2out.c (dwarf2out_assembly_start): Emit a dummy\n+\t.file statement when needed.\n+\n+2021-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_check_gather_scatter):\n+\tInclude widening conversions only when the result is\n+\tstill handed by native gather or the current offset\n+\tsize not already matches the data size.\n+\tAlso succeed analysis in case there's no native support,\n+\tnoted by a IFN_LAST ifn and a NULL decl.\n+\t(vect_analyze_data_refs): Always consider gathers.\n+\t* tree-vect-patterns.c (vect_recog_gather_scatter_pattern):\n+\tTest for no IFN gather rather than decl gather.\n+\t* tree-vect-stmts.c (vect_model_load_cost): Pass in the\n+\tgather-scatter info and cost emulated gathers accordingly.\n+\t(vect_truncate_gather_scatter_offset): Properly test for\n+\tno IFN gather.\n+\t(vect_use_strided_gather_scatters_p): Likewise.\n+\t(get_load_store_type): Handle emulated gathers and its\n+\trestrictions.\n+\t(vectorizable_load): Likewise.  Emulate them by extracting\n+\tscalar offsets, doing scalar loads and a vector construct.\n+\n+2021-08-04  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101742\n+\t* expr.c (op_by_pieces_d::op_by_pieces_d): Add a max_pieces\n+\targument to set m_max_size.\n+\t(move_by_pieces_d): Pass MOVE_MAX_PIECES to op_by_pieces_d.\n+\t(store_by_pieces_d): Pass STORE_MAX_PIECES to op_by_pieces_d.\n+\t(compare_by_pieces_d): Pass COMPARE_MAX_PIECES to op_by_pieces_d.\n+\n+2021-08-04  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (bit_ior, bit_xor): Canonicalize (X*C1)|(X*C2) and\n+\t(X*C1)^(X*C2) as X*(C1+C2), and related variants, using\n+\ttree_nonzero_bits to ensure that operands are bit-wise disjoint.\n+\n+2021-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (pass_forwprop::execute): Split\n+\tout code to decompose vector loads ...\n+\t(optimize_vector_load): ... here.  Generalize it to\n+\thandle intermediate widening and TARGET_MEM_REF loads\n+\tand apply it to loads with a supported vector mode as well.\n+\n+2021-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101756\n+\t* tree-vect-slp.c (vectorizable_bb_reduc_epilogue): Make sure\n+\tthe result of the reduction epilogue is compatible to the original\n+\tscalar result.\n+\n+2021-08-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101743\n+\t* config/i386/i386.md (peephole2): Refine predicate from\n+\tregister_operand to general_reg_operand.\n+\n+2021-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.h (path_range_query::dump): Mark override.\n+\n+2021-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101769\n+\t* tree-tailcall.c (eliminate_tail_call): Add the created loop\n+\tfor the first recursion and return it via the new output parameter.\n+\t(optimize_tail_call): Pass through new output param.\n+\t(tree_optimize_tail_calls_1): After creating all latches,\n+\tadd the created loop to the loop tree.  Do not mark loops for fixup.\n+\n+2021-08-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Document threader-mode param.\n+\n+2021-08-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (cond_fma<mode>): New expander.\n+\t(cond_fms<mode>): Ditto.\n+\t(cond_fnma<mode>): Ditto.\n+\t(cond_fnms<mode>): Ditto.\n+\n 2021-08-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/vsx.md (*vsx_le_perm_store_<mode>): Use && instead of &."}, {"sha": "6168f4600b0a25d1272b84ec3bee8a2f66af3520", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "patch": "@@ -1 +1 @@\n-20210804\n+20210805"}, {"sha": "43e3c63471198f1911611c965fe8f87399fcaac2", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "patch": "@@ -1,3 +1,39 @@\n+2021-08-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101570\n+\t* analyzer.cc (maybe_reconstruct_from_def_stmt): Add GIMPLE_ASM\n+\tcase.\n+\t* analyzer.h (class asm_output_svalue): New forward decl.\n+\t(class reachable_regions): New forward decl.\n+\t* complexity.cc (complexity::from_vec_svalue): New.\n+\t* complexity.h (complexity::from_vec_svalue): New decl.\n+\t* engine.cc (feasibility_state::maybe_update_for_edge): Handle\n+\tasm stmts by calling on_asm_stmt.\n+\t* region-model-asm.cc: New file.\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_asm_output_svalue): New.\n+\t(region_model_manager::get_or_create_asm_output_svalue): New.\n+\t(region_model_manager::log_stats): Log m_asm_output_values_map.\n+\t* region-model.cc (region_model::on_stmt_pre): Handle GIMPLE_ASM.\n+\t* region-model.h (visitor::visit_asm_output_svalue): New.\n+\t(region_model_manager::get_or_create_asm_output_svalue): New decl.\n+\t(region_model_manager::maybe_fold_asm_output_svalue): New decl.\n+\t(region_model_manager::asm_output_values_map_t): New typedef.\n+\t(region_model_manager::m_asm_output_values_map): New field.\n+\t(region_model::on_asm_stmt): New.\n+\t* store.cc (binding_cluster::on_asm): New.\n+\t* store.h (binding_cluster::on_asm): New decl.\n+\t* svalue.cc (svalue::cmp_ptr): Handle SK_ASM_OUTPUT.\n+\t(asm_output_svalue::dump_to_pp): New.\n+\t(asm_output_svalue::dump_input): New.\n+\t(asm_output_svalue::input_idx_to_asm_idx): New.\n+\t(asm_output_svalue::accept): New.\n+\t* svalue.h (enum svalue_kind): Add SK_ASM_OUTPUT.\n+\t(svalue::dyn_cast_asm_output_svalue): New.\n+\t(class asm_output_svalue): New.\n+\t(is_a_helper <const asm_output_svalue *>::test): New.\n+\t(struct default_hash_traits<asm_output_svalue::key_t>): New.\n+\n 2021-08-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR analyzer/101721"}, {"sha": "5b3e191e5d902608bc2be82a029095357933a62a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "patch": "@@ -1,3 +1,9 @@\n+2021-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101759\n+\t* parser.c (cp_parser_default_argument): Temporarily override\n+\tparser->omp_declare_simd and parser->oacc_routine to NULL.\n+\n 2021-08-02  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/100828"}, {"sha": "04b011beabd5a4280aa6e73adc84396b1c734a34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "patch": "@@ -1,3 +1,123 @@\n+2021-08-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101570\n+\t* gcc.dg/analyzer/asm-x86-1.c: New test.\n+\t* gcc.dg/analyzer/asm-x86-lp64-1.c: New test.\n+\t* gcc.dg/analyzer/asm-x86-lp64-2.c: New test.\n+\t* gcc.dg/analyzer/pr101570.c: New test.\n+\t* gcc.dg/analyzer/torture/asm-x86-linux-array_index_mask_nospec.c:\n+\tNew test.\n+\t* gcc.dg/analyzer/torture/asm-x86-linux-cpuid-paravirt-1.c: New\n+\ttest.\n+\t* gcc.dg/analyzer/torture/asm-x86-linux-cpuid-paravirt-2.c: New\n+\ttest.\n+\t* gcc.dg/analyzer/torture/asm-x86-linux-cpuid.c: New test.\n+\t* gcc.dg/analyzer/torture/asm-x86-linux-rdmsr-paravirt.c: New\n+\ttest.\n+\t* gcc.dg/analyzer/torture/asm-x86-linux-rdmsr.c: New test.\n+\t* gcc.dg/analyzer/torture/asm-x86-linux-wfx_get_ps_timeout-full.c:\n+\tNew test.\n+\t* gcc.dg/analyzer/torture/asm-x86-linux-wfx_get_ps_timeout-reduced.c:\n+\tNew test.\n+\n+2021-08-04  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101742\n+\t* gcc.target/i386/pr101742a.c: New test.\n+\t* gcc.target/i386/pr101742b.c: Likewise.\n+\n+2021-08-04  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101772\n+\t* gcc.target/i386/eh_return-2.c: New test.\n+\n+2021-08-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/perm-vpdi.c: New test.\n+\n+2021-08-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/perm-merge.c: New test.\n+\t* gcc.target/s390/vector/vec-types.h: New test.\n+\n+2021-08-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-permi.c: Removed.\n+\t* gcc.target/s390/zvector/vec_permi.c: New test.\n+\n+2021-08-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/long-double-asm-in-out-hard-fp-reg.c:\n+\tInstead of vpdi with 0 and 5 vmrlg and vmrhg are used now.\n+\t* gcc.target/s390/vector/long-double-asm-inout-hard-fp-reg.c: Likewise.\n+\t* gcc.target/s390/zvector/vec-types.h: New test.\n+\t* gcc.target/s390/zvector/vec_merge.c: New test.\n+\n+2021-08-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vmul_high_cost.c: New test.\n+\n+2021-08-04  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vmul_element_cost.c: New test.\n+\n+2021-08-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cost_model_12.c: New test.\n+\n+2021-08-04  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/101750\n+\t* g++.dg/vect/pr99149.cc: Name class.\n+\n+2021-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/vect-gather-1.c: New testcase.\n+\t* gfortran.dg/vect/vect-8.f90: Adjust.\n+\n+2021-08-04  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/fold-ior-4.c: New test.\n+\n+2021-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101756\n+\t* gcc.dg/vect/bb-slp-pr101756.c: New testcase.\n+\n+2021-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101759\n+\t* g++.dg/gomp/pr101759.C: New test.\n+\t* g++.dg/goacc/pr101759.C: New test.\n+\n+2021-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/ieee/pr29302-1.x: Undo doubly applied patch.\n+\n+2021-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101769\n+\t* g++.dg/tree-ssa/pr101769.C: New testcase.\n+\n+2021-08-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/cond_op_addsubmul_d-2.c: Add\n+\tdg-require-effective-target for avx512.\n+\t* gcc.target/i386/cond_op_addsubmul_q-2.c: Ditto.\n+\t* gcc.target/i386/cond_op_addsubmul_w-2.c: Ditto.\n+\t* gcc.target/i386/cond_op_addsubmuldiv_double-2.c: Ditto.\n+\t* gcc.target/i386/cond_op_addsubmuldiv_float-2.c: Ditto.\n+\t* gcc.target/i386/cond_op_fma_double-2.c: Ditto.\n+\t* gcc.target/i386/cond_op_fma_float-2.c: Ditto.\n+\n+2021-08-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/cond_op_fma_double-1.c: New test.\n+\t* gcc.target/i386/cond_op_fma_double-2.c: New test.\n+\t* gcc.target/i386/cond_op_fma_float-1.c: New test.\n+\t* gcc.target/i386/cond_op_fma_float-2.c: New test.\n+\n 2021-08-03  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* lib/profopt.exp: Pass gdwarf-4 when compiling test to profile; pass -gcov_version=2."}, {"sha": "6845f39d36831e57a4e72cd1731cef2cbec2cf3c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "patch": "@@ -1,3 +1,7 @@\n+2021-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/t-slibgcc-fuchsia: Undo doubly applied patch.\n+\n 2021-07-15  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/morestack.S (R2_SAVE): Define."}, {"sha": "b6b3a0efbe3edd780c4aad2055a9774f4ed289dd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697f8324fbb09b0d92036ba6a6b8a2b8d256b23/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2697f8324fbb09b0d92036ba6a6b8a2b8d256b23", "patch": "@@ -1,3 +1,130 @@\n+2021-08-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/forward_list.h: Add [[nodiscard]] to functions\n+\twith no side-effects.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_queue.h: Likewise.\n+\t* include/bits/stl_stack.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/forward_list: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/safe_iterator.h: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/std/array: Likewise.\n+\t* testsuite/23_containers/array/creation/3_neg.cc: Use\n+\t-Wno-unused-result.\n+\t* testsuite/23_containers/array/debug/back1_neg.cc: Cast result\n+\tto void.\n+\t* testsuite/23_containers/array/debug/back2_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/front1_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/front2_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/square_brackets_operator1_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/debug/square_brackets_operator2_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/23_containers/deque/cons/clear_allocator.cc: Cast\n+\tresult to void.\n+\t* testsuite/23_containers/deque/debug/invalidation/4.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/types/1.cc: Use\n+\t-Wno-unused-result.\n+\t* testsuite/23_containers/list/types/1.cc: Cast result to void.\n+\t* testsuite/23_containers/priority_queue/members/7161.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/queue/members/7157.cc: Likewise.\n+\t* testsuite/23_containers/vector/59829.cc: Likewise.\n+\t* testsuite/23_containers/vector/ext_pointer/types/1.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/ext_pointer/types/2.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/types/1.cc: Use\n+\t-Wno-unused-result.\n+\n+2021-08-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (iter_move): Add\n+\t[[nodiscard]].\n+\t* include/bits/range_access.h (begin, end, cbegin, cend)\n+\t(rbegin, rend, crbegin, crend, size, data, ssize): Likewise.\n+\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n+\t(ranges::cbegin, ranges::cend, ranges::rbegin, ranges::rend)\n+\t(ranges::crbegin, ranges::crend, ranges::size, ranges::ssize)\n+\t(ranges::empty, ranges::data, ranges::cdata): Likewise.\n+\t* include/bits/stl_iterator.h (reverse_iterator, __normal_iterator)\n+\t(back_insert_iterator, front_insert_iterator, insert_iterator)\n+\t(move_iterator, move_sentinel, common_iterator)\n+\t(counted_iterator): Likewise.\n+\t* include/bits/stl_iterator_base_funcs.h (distance, next, prev):\n+\tLikewise.\n+\t* include/bits/stream_iterator.h (istream_iterator)\n+\t(ostream_iterartor): Likewise.\n+\t* include/bits/streambuf_iterator.h (istreambuf_iterator)\n+\t(ostreambuf_iterator): Likewise.\n+\t* include/std/ranges (views::single, views::iota, views::all)\n+\t(views::filter, views::transform, views::take, views::take_while)\n+\t(views::drop, views::drop_while, views::join, views::lazy_split)\n+\t(views::split, views::counted, views::common, views::reverse)\n+\t(views::elements): Likewise.\n+\t* testsuite/20_util/rel_ops.cc: Use -Wno-unused-result.\n+\t* testsuite/24_iterators/move_iterator/greedy_ops.cc: Likewise.\n+\t* testsuite/24_iterators/normal_iterator/greedy_ops.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/reverse_iterator/2.cc: Likewise.\n+\t* testsuite/24_iterators/reverse_iterator/greedy_ops.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/range_access/char/1.cc:\n+\tCast result to void.\n+\t* testsuite/21_strings/basic_string/range_access/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/range_access/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/range_access/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/range_access.cc: Likewise.\n+\t* testsuite/23_containers/deque/range_access.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/range_access.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/range_access.cc: Likewise.\n+\t* testsuite/23_containers/map/range_access.cc: Likewise.\n+\t* testsuite/23_containers/multimap/range_access.cc: Likewise.\n+\t* testsuite/23_containers/multiset/range_access.cc: Likewise.\n+\t* testsuite/23_containers/set/range_access.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/range_access.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/range_access.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/range_access.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/range_access.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/range_access.cc: Likewise.\n+\t* testsuite/24_iterators/customization_points/iter_move.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/istream_iterator/sentinel.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/istreambuf_iterator/sentinel.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/move_iterator/dr2061.cc: Likewise.\n+\t* testsuite/24_iterators/operations/prev_neg.cc: Likewise.\n+\t* testsuite/24_iterators/ostreambuf_iterator/2.cc: Likewise.\n+\t* testsuite/24_iterators/range_access/range_access.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/range_operations/100768.cc: Likewise.\n+\t* testsuite/26_numerics/valarray/range_access2.cc: Likewise.\n+\t* testsuite/28_regex/range_access.cc: Likewise.\n+\t* testsuite/experimental/string_view/range_access/char/1.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/range_access/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/ext/vstring/range_access.cc: Likewise.\n+\t* testsuite/std/ranges/adaptors/take.cc: Likewise.\n+\t* testsuite/std/ranges/p2259.cc: Likewise.\n+\n 2021-08-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/random.tcc (linear_congruential_engine): Do not"}]}