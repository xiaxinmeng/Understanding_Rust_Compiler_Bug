{"sha": "d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "node_id": "C_kwDOANBUbNoAKGQ3ZjhjNzlhNTdlNjY3Y2ZjNzg4ODc4NDQ1N2M0YTBlNmYyYmRjZGE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-03T23:21:15Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T02:59:05Z"}, "message": "RISC-V: Add unary C/C++ API support\n\ngcc/ChangeLog:\n\n\t* config/riscv/iterators.md: Add neg and not.\n\t* config/riscv/riscv-vector-builtins-bases.cc (class unop): New class.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vadd): Rename binop\n\tinto alu.\n\t(vsub): Ditto.\n\t(vand): Ditto.\n\t(vor): Ditto.\n\t(vxor): Ditto.\n\t(vsll): Ditto.\n\t(vsra): Ditto.\n\t(vsrl): Ditto.\n\t(vmin): Ditto.\n\t(vmax): Ditto.\n\t(vminu): Ditto.\n\t(vmaxu): Ditto.\n\t(vmul): Ditto.\n\t(vdiv): Ditto.\n\t(vrem): Ditto.\n\t(vdivu): Ditto.\n\t(vremu): Ditto.\n\t(vrsub): Ditto.\n\t(vneg): Ditto.\n\t(vnot): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct binop_def): Ditto.\n\t(struct alu_def): Ditto.\n\t(SHAPE): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n\t* config/riscv/riscv-vector-builtins.cc: Support unary C/C/++.\n\t* config/riscv/vector-iterators.md: New iterator.\n\t* config/riscv/vector.md (@pred_<optab><mode>): New pattern", "tree": {"sha": "1d6a5ee821f199e725684cc355d02e35edcd4a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d6a5ee821f199e725684cc355d02e35edcd4a1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c129d22de6bde38edcc3a53ed73c0cc5033bb83a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c129d22de6bde38edcc3a53ed73c0cc5033bb83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c129d22de6bde38edcc3a53ed73c0cc5033bb83a"}], "stats": {"total": 149, "additions": 108, "deletions": 41}, "files": [{"sha": "6013f58db6e78a142bde0a1e7bf90baa3b38557a", "filename": "gcc/config/riscv/iterators.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fiterators.md?ref=d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "patch": "@@ -201,7 +201,9 @@\n \t\t\t (smax \"smax\")\n \t\t\t (umin \"umin\")\n \t\t\t (umax \"umax\")\n-\t\t\t (mult \"mul\")])\n+\t\t\t (mult \"mul\")\n+\t\t\t (not \"one_cmpl\")\n+\t\t\t (neg \"neg\")])\n \n ;; <or_optab> code attributes\n (define_code_attr or_optab [(ior \"ior\")\n@@ -224,7 +226,9 @@\n \t\t\t(smax \"max\")\n \t\t\t(umin \"minu\")\n \t\t\t(umax \"maxu\")\n-\t\t\t(mult \"mul\")])\n+\t\t\t(mult \"mul\")\n+\t\t\t(not \"not\")\n+\t\t\t(neg \"neg\")])\n \n ; atomics code attribute\n (define_code_attr atomic_optab"}, {"sha": "0d86bbcd6b1c8ff58304501ba41cdf2f360e31f3", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "patch": "@@ -186,6 +186,17 @@ class vrsub : public function_base\n   }\n };\n \n+/* Implements vneg/vnot.  */\n+template<rtx_code CODE>\n+class unop : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred (CODE, e.vector_mode ()));\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -228,6 +239,8 @@ static CONSTEXPR const binop<DIV> vdiv_obj;\n static CONSTEXPR const binop<MOD> vrem_obj;\n static CONSTEXPR const binop<UDIV> vdivu_obj;\n static CONSTEXPR const binop<UMOD> vremu_obj;\n+static CONSTEXPR const unop<NEG> vneg_obj;\n+static CONSTEXPR const unop<NOT> vnot_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -276,5 +289,7 @@ BASE (vdiv)\n BASE (vrem)\n BASE (vdivu)\n BASE (vremu)\n+BASE (vneg)\n+BASE (vnot)\n \n } // end namespace riscv_vector"}, {"sha": "72ee25655b250815e604bd6fa74fe7988787b76c", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "patch": "@@ -66,6 +66,8 @@ extern const function_base *const vdiv;\n extern const function_base *const vrem;\n extern const function_base *const vdivu;\n extern const function_base *const vremu;\n+extern const function_base *const vneg;\n+extern const function_base *const vnot;\n }\n \n } // end namespace riscv_vector"}, {"sha": "b94e780e91634f3fac5b924c7028885076db0564", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "patch": "@@ -63,40 +63,42 @@ DEF_RVV_FUNCTION (vsoxei16, indexed_loadstore, none_m_preds, all_v_scalar_ptr_ui\n DEF_RVV_FUNCTION (vsoxei32, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint32_index_ops)\n DEF_RVV_FUNCTION (vsoxei64, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint64_index_ops)\n /* 11. Vector Integer Arithmetic Instructions.  */\n-DEF_RVV_FUNCTION (vadd, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vsub, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vand, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vor, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vxor, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vsll, binop, full_preds, iu_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vsra, binop, full_preds, iu_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vsrl, binop, full_preds, iu_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vmin, binop, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vmax, binop, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vminu, binop, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vmaxu, binop, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vmul, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vdiv, binop, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vrem, binop, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vdivu, binop, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vremu, binop, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vadd, binop, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vsub, binop, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vrsub, binop, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vand, binop, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vor, binop, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vxor, binop, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vsll, binop, full_preds, iu_shift_vvx_ops)\n-DEF_RVV_FUNCTION (vsra, binop, full_preds, iu_shift_vvx_ops)\n-DEF_RVV_FUNCTION (vsrl, binop, full_preds, iu_shift_vvx_ops)\n-DEF_RVV_FUNCTION (vmin, binop, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vmax, binop, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vminu, binop, full_preds, u_vvx_ops)\n-DEF_RVV_FUNCTION (vmaxu, binop, full_preds, u_vvx_ops)\n-DEF_RVV_FUNCTION (vmul, binop, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vdiv, binop, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vrem, binop, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vdivu, binop, full_preds, u_vvx_ops)\n-DEF_RVV_FUNCTION (vremu, binop, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vadd, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vsub, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vand, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vor, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vxor, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vsll, alu, full_preds, iu_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vsra, alu, full_preds, iu_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vsrl, alu, full_preds, iu_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vmin, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vmaxu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vmul, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vdiv, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vrem, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vremu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vadd, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vsub, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vrsub, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vand, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vor, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vxor, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vsll, alu, full_preds, iu_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vsra, alu, full_preds, iu_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vsrl, alu, full_preds, iu_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vmin, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vmaxu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vmul, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vdiv, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vrem, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vremu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vneg, alu, full_preds, iu_v_ops)\n+DEF_RVV_FUNCTION (vnot, alu, full_preds, iu_v_ops)\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "d6dc4c7049ecabaae912aff09cb425e5e0506784", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "patch": "@@ -185,8 +185,8 @@ struct indexed_loadstore_def : public function_shape\n   }\n };\n \n-/* binop_def class.  */\n-struct binop_def : public build_base\n+/* alu_def class.  */\n+struct alu_def : public build_base\n {\n   char *get_name (function_builder &b, const function_instance &instance,\n \t\t  bool overloaded_p) const override\n@@ -213,6 +213,6 @@ SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n SHAPE(indexed_loadstore, indexed_loadstore)\n-SHAPE(binop, binop)\n+SHAPE(alu, alu)\n \n } // end namespace riscv_vector"}, {"sha": "b4f6eaa0bba1d7bc878dd5592e1c2a12ce4d4b6b", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "patch": "@@ -28,7 +28,7 @@ extern const function_shape *const vsetvl;\n extern const function_shape *const vsetvlmax;\n extern const function_shape *const loadstore;\n extern const function_shape *const indexed_loadstore;\n-extern const function_shape *const binop;\n+extern const function_shape *const alu;\n }\n \n } // end namespace riscv_vector"}, {"sha": "95a949aab7c6f6a97464c42c19834a7f5ff87271", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "patch": "@@ -260,6 +260,10 @@ static CONSTEXPR const rvv_arg_type_info shift_vv_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector),\n      rvv_arg_type_info (RVV_BASE_shift_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info v_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (vector_type, size) function.  */\n static CONSTEXPR const rvv_arg_type_info vector_size_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_size),\n@@ -469,6 +473,14 @@ static CONSTEXPR const rvv_op_info iu_shift_vvx_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vector_size_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_v_ops\n+  = {iu_ops,\t\t\t/* Types */\n+     OP_TYPE_v,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     v_args /* Args */};\n+\n /* A list of all RVV intrinsic functions.  */\n static function_group_info function_groups[] = {\n #define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\"}, {"sha": "9cc60da91f4250d34833d9155d10ac3bd67ea8b2", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "patch": "@@ -209,6 +209,8 @@\n   smax umax smin umin mult div udiv mod umod\n ])\n \n+(define_code_iterator any_int_unop [neg not])\n+\n (define_code_iterator any_commutative_binop [plus and ior xor\n   smax umax smin umin mult\n ])"}, {"sha": "73c839f45c3ce109970e5863c218e9a539183117", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "patch": "@@ -1531,3 +1531,33 @@\n   \"vrsub.vx\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vialu\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated integer unary operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - vneg.v/vnot.v\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_<optab><mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_int_unop:VI\n+\t    (match_operand:VI 3 \"register_operand\"       \" vr, vr\"))\n+\t  (match_operand:VI 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.v\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vialu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])"}]}