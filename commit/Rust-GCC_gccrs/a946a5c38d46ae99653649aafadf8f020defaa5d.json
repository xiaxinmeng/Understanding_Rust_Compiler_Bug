{"sha": "a946a5c38d46ae99653649aafadf8f020defaa5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk0NmE1YzM4ZDQ2YWU5OTY1MzY0OWFhZmFkZjhmMDIwZGVmYWE1ZA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2016-10-13T12:12:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-10-13T12:12:18Z"}, "message": "sem_prag.ads (Process_Compile_Time_Warning_Or_Error): New overloaded subprogram that factorizes code executed as part of the regular...\n\n2016-10-13  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_prag.ads (Process_Compile_Time_Warning_Or_Error): New\n\toverloaded subprogram that factorizes code executed as part\n\tof the regular processing of these pragmas and as part of its\n\tvalidation after invoking the backend.\n\t* sem_prag.adb (Process_Compile_Time_Warning_Or_Error): New\n\tsubprogram.\n\t(Process_Compile_Time_Warning_Or_Error): If the\n\tcondition is known at compile time then invoke the new overloaded\n\tsubprogram; otherwise register the pragma in a table to validate\n\tit after invoking the backend.\n\t* sem.ads, sem.adb (Unlock): New subprogram.\n\t* sem_attr.adb (Analyze_Attribute [Size]): If we are processing\n\tpragmas Compile_Time_Warning and Compile_Time_Errors after the\n\tbackend has been called then evaluate this attribute if 'Size\n\tis known at compile time.\n\t* gnat1drv.adb (Post_Compilation_Validation_Checks): Validate\n\tcompile time warnings and errors.\n\t* sem_ch13.ads, sem_ch13.adb (Validate_Compile_Time_Warning_Error):\n\tNew subprogram.\n\t(Validate_Compile_Time_Warning_Errors): New subprogram.\n\nFrom-SVN: r241107", "tree": {"sha": "58bad2ff2cb86b921572595ff8d1a1dd40b814d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58bad2ff2cb86b921572595ff8d1a1dd40b814d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a946a5c38d46ae99653649aafadf8f020defaa5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a946a5c38d46ae99653649aafadf8f020defaa5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a946a5c38d46ae99653649aafadf8f020defaa5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a946a5c38d46ae99653649aafadf8f020defaa5d/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c877ae8dc867e29552b5ab4b2367479829b4de69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c877ae8dc867e29552b5ab4b2367479829b4de69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c877ae8dc867e29552b5ab4b2367479829b4de69"}], "stats": {"total": 396, "additions": 308, "deletions": 88}, "files": [{"sha": "0d68ec6511e62cef775bcfa103851883f74f057e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a946a5c38d46ae99653649aafadf8f020defaa5d", "patch": "@@ -1,3 +1,26 @@\n+2016-10-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_prag.ads (Process_Compile_Time_Warning_Or_Error): New\n+\toverloaded subprogram that factorizes code executed as part\n+\tof the regular processing of these pragmas and as part of its\n+\tvalidation after invoking the backend.\n+\t* sem_prag.adb (Process_Compile_Time_Warning_Or_Error): New\n+\tsubprogram.\n+\t(Process_Compile_Time_Warning_Or_Error): If the\n+\tcondition is known at compile time then invoke the new overloaded\n+\tsubprogram; otherwise register the pragma in a table to validate\n+\tit after invoking the backend.\n+\t* sem.ads, sem.adb (Unlock): New subprogram.\n+\t* sem_attr.adb (Analyze_Attribute [Size]): If we are processing\n+\tpragmas Compile_Time_Warning and Compile_Time_Errors after the\n+\tbackend has been called then evaluate this attribute if 'Size\n+\tis known at compile time.\n+\t* gnat1drv.adb (Post_Compilation_Validation_Checks): Validate\n+\tcompile time warnings and errors.\n+\t* sem_ch13.ads, sem_ch13.adb (Validate_Compile_Time_Warning_Error):\n+\tNew subprogram.\n+\t(Validate_Compile_Time_Warning_Errors): New subprogram.\n+\n 2016-10-13  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Analyze_Refined_Depends_In_Decl_Part): Adapt to"}, {"sha": "929bfcc316d681f71c91d2a78ee1a7ac668cf44d", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=a946a5c38d46ae99653649aafadf8f020defaa5d", "patch": "@@ -871,6 +871,18 @@ procedure Gnat1drv is\n \n       Checks.Validate_Alignment_Check_Warnings;\n \n+      --  Validate compile time warnings and errors (using the values for size\n+      --  and alignment annotated by the backend where possible). We need to\n+      --  unlock temporarily these tables to reanalyze their expression.\n+\n+      Atree.Unlock;\n+      Nlists.Unlock;\n+      Sem.Unlock;\n+      Sem_Ch13.Validate_Compile_Time_Warning_Errors;\n+      Sem.Lock;\n+      Nlists.Lock;\n+      Atree.Lock;\n+\n       --  Validate unchecked conversions (using the values for size and\n       --  alignment annotated by the backend where possible).\n "}, {"sha": "f904a506c01b6aea831e00b7098c92a725081837", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=a946a5c38d46ae99653649aafadf8f020defaa5d", "patch": "@@ -1621,6 +1621,15 @@ package body Sem is\n       return ss (Scope_Stack.Last);\n    end sst;\n \n+   ------------\n+   -- Unlock --\n+   ------------\n+\n+   procedure Unlock is\n+   begin\n+      Scope_Stack.Locked := False;\n+   end Unlock;\n+\n    ------------------------\n    -- Walk_Library_Items --\n    ------------------------"}, {"sha": "23b78fcb1db921d8748c1043886e384d5371b651", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=a946a5c38d46ae99653649aafadf8f020defaa5d", "patch": "@@ -253,6 +253,11 @@ package Sem is\n    --  future possibility by making it a counter. As with In_Spec_Expression,\n    --  it must be recursively saved and restored for a Semantics call.\n \n+   In_Compile_Time_Warning_Or_Error : Boolean := False;\n+   --  Switch to indicate that we are validating a pragma Compile_Time_Warning\n+   --  or Compile_Time_Error after the backend has been called (to check these\n+   --  pragmas for size and alignment apropriateness).\n+\n    In_Default_Expr : Boolean := False;\n    --  Switch to indicate that we are analyzing a default component expression.\n    --  As with In_Spec_Expression, it must be recursively saved and restored\n@@ -575,6 +580,9 @@ package Sem is\n    procedure Lock;\n    --  Lock internal tables before calling back end\n \n+   procedure Unlock;\n+   --  Unlock internal tables\n+\n    procedure Semantics (Comp_Unit : Node_Id);\n    --  This procedure is called to perform semantic analysis on the specified\n    --  node which is the N_Compilation_Unit node for the unit."}, {"sha": "0190bd7ebfe66f66ae57d76482641da5cb4ebde5", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a946a5c38d46ae99653649aafadf8f020defaa5d", "patch": "@@ -5746,6 +5746,22 @@ package body Sem_Attr is\n          Check_Not_Incomplete_Type;\n          Check_Not_CPP_Type;\n          Set_Etype (N, Universal_Integer);\n+\n+         --  If we are processing pragmas Compile_Time_Warning and Compile_\n+         --  Time_Errors after the backend has been called and this occurrence\n+         --  of 'Size is known at compile time then it is safe to perform this\n+         --  evaluation. Needed to perform the static evaluation of the full\n+         --  boolean expression of these pragmas.\n+\n+         if In_Compile_Time_Warning_Or_Error\n+           and then Is_Entity_Name (P)\n+           and then (Is_Type (Entity (P))\n+                      or else Ekind (Entity (P)) = E_Enumeration_Literal)\n+           and then Size_Known_At_Compile_Time (Entity (P))\n+         then\n+            Rewrite (N, Make_Integer_Literal (Sloc (N), Esize (Entity (P))));\n+            Analyze (N);\n+         end if;\n       end Size;\n \n       -----------"}, {"sha": "bff49e6430b09cece77766a776c09099b68744a7", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a946a5c38d46ae99653649aafadf8f020defaa5d", "patch": "@@ -30,6 +30,7 @@ with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n+with Expander; use Expander;\n with Exp_Disp; use Exp_Disp;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n@@ -235,6 +236,41 @@ package body Sem_Ch13 is\n    --  is True. This warning inserts the string Msg to describe the construct\n    --  causing biasing.\n \n+   ---------------------------------------------------\n+   -- Table for Validate_Compile_Time_Warning_Error --\n+   ---------------------------------------------------\n+\n+   --  The following table collects pragmas Compile_Time_Error and Compile_\n+   --  Time_Warning for validation. Entries are made by calls to subprogram\n+   --  Validate_Compile_Time_Warning_Error, and the call to the procedure\n+   --  Validate_Compile_Time_Warning_Errors does the actual error checking\n+   --  and posting of warning and error messages. The reason for this delayed\n+   --  processing is to take advantage of back-annotations of attributes size\n+   --  and alignment values performed by the back end.\n+\n+   --  Note: the reason we store a Source_Ptr value instead of a Node_Id is\n+   --  that by the time Validate_Unchecked_Conversions is called, Sprint will\n+   --  already have modified all Sloc values if the -gnatD option is set.\n+\n+   type CTWE_Entry is record\n+      Eloc  : Source_Ptr;\n+      --  Source location used in warnings and error messages\n+\n+      Prag  : Node_Id;\n+      --  Pragma Compile_Time_Error or Compile_Time_Warning\n+\n+      Scope : Node_Id;\n+      --  The scope which encloses the pragma\n+   end record;\n+\n+   package Compile_Time_Warnings_Errors is new Table.Table (\n+     Table_Component_Type => CTWE_Entry,\n+     Table_Index_Type     => Int,\n+     Table_Low_Bound      => 1,\n+     Table_Initial        => 50,\n+     Table_Increment      => 200,\n+     Table_Name           => \"Compile_Time_Warnings_Errors\");\n+\n    ----------------------------------------------\n    -- Table for Validate_Unchecked_Conversions --\n    ----------------------------------------------\n@@ -11405,6 +11441,7 @@ package body Sem_Ch13 is\n    procedure Initialize is\n    begin\n       Address_Clause_Checks.Init;\n+      Compile_Time_Warnings_Errors.Init;\n       Unchecked_Conversions.Init;\n \n       if AAMP_On_Target then\n@@ -13327,6 +13364,79 @@ package body Sem_Ch13 is\n       end loop;\n    end Validate_Address_Clauses;\n \n+   -----------------------------------------\n+   -- Validate_Compile_Time_Warning_Error --\n+   -----------------------------------------\n+\n+   procedure Validate_Compile_Time_Warning_Error (N : Node_Id) is\n+   begin\n+      Compile_Time_Warnings_Errors.Append\n+        (New_Val => CTWE_Entry'(Eloc  => Sloc (N),\n+                                Scope => Current_Scope,\n+                                Prag  => N));\n+   end Validate_Compile_Time_Warning_Error;\n+\n+   ------------------------------------------\n+   -- Validate_Compile_Time_Warning_Errors --\n+   ------------------------------------------\n+\n+   procedure Validate_Compile_Time_Warning_Errors is\n+      procedure Set_Scope (S : Entity_Id);\n+      --  Install all enclosing scopes of S along with S itself\n+\n+      procedure Unset_Scope (S : Entity_Id);\n+      --  Uninstall all enclosing scopes of S along with S itself\n+\n+      ---------------\n+      -- Set_Scope --\n+      ---------------\n+\n+      procedure Set_Scope (S : Entity_Id) is\n+      begin\n+         if S /= Standard_Standard then\n+            Set_Scope (Scope (S));\n+         end if;\n+\n+         Push_Scope (S);\n+      end Set_Scope;\n+\n+      -----------------\n+      -- Unset_Scope --\n+      -----------------\n+\n+      procedure Unset_Scope (S : Entity_Id) is\n+      begin\n+         if S /= Standard_Standard then\n+            Unset_Scope (Scope (S));\n+         end if;\n+\n+         Pop_Scope;\n+      end Unset_Scope;\n+\n+   --  Start of processing for Validate_Compile_Time_Warning_Errors\n+\n+   begin\n+      Expander_Mode_Save_And_Set (False);\n+      In_Compile_Time_Warning_Or_Error := True;\n+\n+      for N in Compile_Time_Warnings_Errors.First ..\n+               Compile_Time_Warnings_Errors.Last\n+      loop\n+         declare\n+            T : CTWE_Entry renames Compile_Time_Warnings_Errors.Table (N);\n+\n+         begin\n+            Set_Scope (T.Scope);\n+            Reset_Analyzed_Flags (T.Prag);\n+            Process_Compile_Time_Warning_Or_Error (T.Prag, T.Eloc);\n+            Unset_Scope (T.Scope);\n+         end;\n+      end loop;\n+\n+      In_Compile_Time_Warning_Or_Error := False;\n+      Expander_Mode_Restore;\n+   end Validate_Compile_Time_Warning_Errors;\n+\n    ---------------------------\n    -- Validate_Independence --\n    ---------------------------"}, {"sha": "af056bebe394f62b5f30f9672ea305d2bd44a282", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=a946a5c38d46ae99653649aafadf8f020defaa5d", "patch": "@@ -188,6 +188,18 @@ package Sem_Ch13 is\n    --  change. A False result is possible only for array, enumeration or\n    --  record types.\n \n+   procedure Validate_Compile_Time_Warning_Error (N : Node_Id);\n+   --  N is a pragma Compile_Time_Error or Compile_Warning_Error whose boolean\n+   --  expression is not known at compile time. This procedure makes an entry\n+   --  in a table. The actual checking is performed by Validate_Compile_Time_\n+   --  Warning_Errors which is invoked after calling the backend.\n+\n+   procedure Validate_Compile_Time_Warning_Errors;\n+   --  This routine is called after calling the backend to validate pragmas\n+   --  Compile_Time_Error and Compile_Time_Warning for size and alignment\n+   --  appropriateness. The reason it is called that late is to take advantage\n+   --  of any back-annotation of size and alignment performed by the backend.\n+\n    procedure Validate_Unchecked_Conversion\n      (N        : Node_Id;\n       Act_Unit : Entity_Id);"}, {"sha": "21e4c7fa15e0db2b69d7aa0753d31ae77209308a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 110, "deletions": 88, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a946a5c38d46ae99653649aafadf8f020defaa5d", "patch": "@@ -7024,94 +7024,9 @@ package body Sem_Prag is\n          Analyze_And_Resolve (Arg1x, Standard_Boolean);\n \n          if Compile_Time_Known_Value (Arg1x) then\n-            if Is_True (Expr_Value (Get_Pragma_Arg (Arg1))) then\n-               declare\n-                  Str   : constant String_Id :=\n-                            Strval (Get_Pragma_Arg (Arg2));\n-                  Len   : constant Nat := String_Length (Str);\n-                  Cont  : Boolean;\n-                  Ptr   : Nat;\n-                  CC    : Char_Code;\n-                  C     : Character;\n-                  Cent  : constant Entity_Id :=\n-                            Cunit_Entity (Current_Sem_Unit);\n-\n-                  Force : constant Boolean :=\n-                            Prag_Id = Pragma_Compile_Time_Warning\n-                              and then\n-                                Is_Spec_Name (Unit_Name (Current_Sem_Unit))\n-                              and then (Ekind (Cent) /= E_Package\n-                                         or else not In_Private_Part (Cent));\n-                  --  Set True if this is the warning case, and we are in the\n-                  --  visible part of a package spec, or in a subprogram spec,\n-                  --  in which case we want to force the client to see the\n-                  --  warning, even though it is not in the main unit.\n-\n-               begin\n-                  --  Loop through segments of message separated by line feeds.\n-                  --  We output these segments as separate messages with\n-                  --  continuation marks for all but the first.\n-\n-                  Cont := False;\n-                  Ptr := 1;\n-                  loop\n-                     Error_Msg_Strlen := 0;\n-\n-                     --  Loop to copy characters from argument to error message\n-                     --  string buffer.\n-\n-                     loop\n-                        exit when Ptr > Len;\n-                        CC := Get_String_Char (Str, Ptr);\n-                        Ptr := Ptr + 1;\n-\n-                        --  Ignore wide chars ??? else store character\n-\n-                        if In_Character_Range (CC) then\n-                           C := Get_Character (CC);\n-                           exit when C = ASCII.LF;\n-                           Error_Msg_Strlen := Error_Msg_Strlen + 1;\n-                           Error_Msg_String (Error_Msg_Strlen) := C;\n-                        end if;\n-                     end loop;\n-\n-                     --  Here with one line ready to go\n-\n-                     Error_Msg_Warn := Prag_Id = Pragma_Compile_Time_Warning;\n-\n-                     --  If this is a warning in a spec, then we want clients\n-                     --  to see the warning, so mark the message with the\n-                     --  special sequence !! to force the warning. In the case\n-                     --  of a package spec, we do not force this if we are in\n-                     --  the private part of the spec.\n-\n-                     if Force then\n-                        if Cont = False then\n-                           Error_Msg_N (\"<<~!!\", Arg1);\n-                           Cont := True;\n-                        else\n-                           Error_Msg_N (\"\\<<~!!\", Arg1);\n-                        end if;\n-\n-                     --  Error, rather than warning, or in a body, so we do not\n-                     --  need to force visibility for client (error will be\n-                     --  output in any case, and this is the situation in which\n-                     --  we do not want a client to get a warning, since the\n-                     --  warning is in the body or the spec private part).\n-\n-                     else\n-                        if Cont = False then\n-                           Error_Msg_N (\"<<~\", Arg1);\n-                           Cont := True;\n-                        else\n-                           Error_Msg_N (\"\\<<~\", Arg1);\n-                        end if;\n-                     end if;\n-\n-                     exit when Ptr > Len;\n-                  end loop;\n-               end;\n-            end if;\n+            Process_Compile_Time_Warning_Or_Error (N, Sloc (Arg1));\n+         else\n+            Sem_Ch13.Validate_Compile_Time_Warning_Error (N);\n          end if;\n       end Process_Compile_Time_Warning_Or_Error;\n \n@@ -29075,6 +28990,113 @@ package body Sem_Prag is\n \n    end Process_Compilation_Unit_Pragmas;\n \n+   -------------------------------------------\n+   -- Process_Compile_Time_Warning_Or_Error --\n+   -------------------------------------------\n+\n+   procedure Process_Compile_Time_Warning_Or_Error\n+     (N     : Node_Id;\n+      Eloc  : Source_Ptr)\n+   is\n+      Arg1  : constant Node_Id := First (Pragma_Argument_Associations (N));\n+      Arg1x : constant Node_Id := Get_Pragma_Arg (Arg1);\n+      Arg2  : constant Node_Id := Next (Arg1);\n+\n+   begin\n+      Analyze_And_Resolve (Arg1x, Standard_Boolean);\n+\n+      if Compile_Time_Known_Value (Arg1x) then\n+         if Is_True (Expr_Value (Arg1x)) then\n+            declare\n+               Cent    : constant Entity_Id := Cunit_Entity (Current_Sem_Unit);\n+               Pname   : constant Name_Id   := Pragma_Name (N);\n+               Prag_Id : constant Pragma_Id := Get_Pragma_Id (Pname);\n+               Str     : constant String_Id := Strval (Get_Pragma_Arg (Arg2));\n+               Str_Len : constant Nat       := String_Length (Str);\n+\n+               Force : constant Boolean :=\n+                         Prag_Id = Pragma_Compile_Time_Warning\n+                           and then Is_Spec_Name (Unit_Name (Current_Sem_Unit))\n+                           and then (Ekind (Cent) /= E_Package\n+                                      or else not In_Private_Part (Cent));\n+               --  Set True if this is the warning case, and we are in the\n+               --  visible part of a package spec, or in a subprogram spec,\n+               --  in which case we want to force the client to see the\n+               --  warning, even though it is not in the main unit.\n+\n+               C    : Character;\n+               CC   : Char_Code;\n+               Cont : Boolean;\n+               Ptr  : Nat;\n+\n+            begin\n+               --  Loop through segments of message separated by line feeds.\n+               --  We output these segments as separate messages with\n+               --  continuation marks for all but the first.\n+\n+               Cont := False;\n+               Ptr  := 1;\n+               loop\n+                  Error_Msg_Strlen := 0;\n+\n+                  --  Loop to copy characters from argument to error message\n+                  --  string buffer.\n+\n+                  loop\n+                     exit when Ptr > Str_Len;\n+                     CC := Get_String_Char (Str, Ptr);\n+                     Ptr := Ptr + 1;\n+\n+                     --  Ignore wide chars ??? else store character\n+\n+                     if In_Character_Range (CC) then\n+                        C := Get_Character (CC);\n+                        exit when C = ASCII.LF;\n+                        Error_Msg_Strlen := Error_Msg_Strlen + 1;\n+                        Error_Msg_String (Error_Msg_Strlen) := C;\n+                     end if;\n+                  end loop;\n+\n+                  --  Here with one line ready to go\n+\n+                  Error_Msg_Warn := Prag_Id = Pragma_Compile_Time_Warning;\n+\n+                  --  If this is a warning in a spec, then we want clients\n+                  --  to see the warning, so mark the message with the\n+                  --  special sequence !! to force the warning. In the case\n+                  --  of a package spec, we do not force this if we are in\n+                  --  the private part of the spec.\n+\n+                  if Force then\n+                     if Cont = False then\n+                        Error_Msg (\"<<~!!\", Eloc);\n+                        Cont := True;\n+                     else\n+                        Error_Msg (\"\\<<~!!\", Eloc);\n+                     end if;\n+\n+                  --  Error, rather than warning, or in a body, so we do not\n+                  --  need to force visibility for client (error will be\n+                  --  output in any case, and this is the situation in which\n+                  --  we do not want a client to get a warning, since the\n+                  --  warning is in the body or the spec private part).\n+\n+                  else\n+                     if Cont = False then\n+                        Error_Msg (\"<<~\", Eloc);\n+                        Cont := True;\n+                     else\n+                        Error_Msg (\"\\<<~\", Eloc);\n+                     end if;\n+                  end if;\n+\n+                  exit when Ptr > Str_Len;\n+               end loop;\n+            end;\n+         end if;\n+      end if;\n+   end Process_Compile_Time_Warning_Or_Error;\n+\n    ------------------------------------\n    -- Record_Possible_Body_Reference --\n    ------------------------------------"}, {"sha": "ae456f529605440e5e73224a4f482659511467d2", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a946a5c38d46ae99653649aafadf8f020defaa5d/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=a946a5c38d46ae99653649aafadf8f020defaa5d", "patch": "@@ -485,6 +485,14 @@ package Sem_Prag is\n    --  Name_uInvariant, and Name_uType_Invariant (_Pre, _Post, _Invariant,\n    --  and _Type_Invariant).\n \n+   procedure Process_Compile_Time_Warning_Or_Error\n+     (N    : Node_Id;\n+      Eloc : Source_Ptr);\n+   --  Common processing for Compile_Time_Error and Compile_Time_Warning of\n+   --  pragma N. Called when the pragma is processed as part of its regular\n+   --  analysis but also called after calling the backend to validate these\n+   --  pragmas for size and alignment apropriateness.\n+\n    procedure Process_Compilation_Unit_Pragmas (N : Node_Id);\n    --  Called at the start of processing compilation unit N to deal with any\n    --  special issues regarding pragmas. In particular, we have to deal with"}]}