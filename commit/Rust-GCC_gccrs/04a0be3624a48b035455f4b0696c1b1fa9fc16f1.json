{"sha": "04a0be3624a48b035455f4b0696c1b1fa9fc16f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhMGJlMzYyNGE0OGIwMzU0NTVmNGIwNjk2YzFiMWZhOWZjMTZmMQ==", "commit": {"author": {"name": "Eric Blake", "email": "ebb9@email.byu.edu", "date": "2003-04-10T23:41:32Z"}, "committer": {"name": "Eric Blake", "email": "ericb@gcc.gnu.org", "date": "2003-04-10T23:41:32Z"}, "message": "re PR java/10253 (String concatenation with int zero, as in \"\"+0, results in the empty string.)\n\n2003-04-10  Eric Blake  <ebb9@email.byu.edu>\n\n\tPR java/10253:\n\t* parse.y (string_convert_int_cst): Always use at least one digit\n\tin string conversion. Remove ASCII dependence.\n\t(merge_string_cste): Fix merging of 3-byte UTF-8 characters.\n\nFrom-SVN: r65443", "tree": {"sha": "8d0c8062d10221dc387a9ab5d862af804182cd53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0c8062d10221dc387a9ab5d862af804182cd53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a0be3624a48b035455f4b0696c1b1fa9fc16f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a0be3624a48b035455f4b0696c1b1fa9fc16f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a0be3624a48b035455f4b0696c1b1fa9fc16f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a0be3624a48b035455f4b0696c1b1fa9fc16f1/comments", "author": null, "committer": null, "parents": [{"sha": "9dd67c6976864c3a44fbebc43dd38684fafc5f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd67c6976864c3a44fbebc43dd38684fafc5f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd67c6976864c3a44fbebc43dd38684fafc5f7b"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "fe99c0a345061b426a20c9d092c600a70bcd2ea3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a0be3624a48b035455f4b0696c1b1fa9fc16f1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a0be3624a48b035455f4b0696c1b1fa9fc16f1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=04a0be3624a48b035455f4b0696c1b1fa9fc16f1", "patch": "@@ -1,3 +1,10 @@\n+2003-04-10  Eric Blake  <ebb9@email.byu.edu>\n+\n+\tPR java/10253:\n+\t* parse.y (string_convert_int_cst): Always use at least one digit\n+\tin string conversion. Remove ASCII dependence.\n+\t(merge_string_cste): Fix merging of 3-byte UTF-8 characters.\n+\n 2003-03-16  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* Make-lang.in: added win32-host.c"}, {"sha": "b5808d4cebb0a96da49df5b20129a9bacfb3e6f1", "filename": "gcc/java/parse.y", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a0be3624a48b035455f4b0696c1b1fa9fc16f1/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a0be3624a48b035455f4b0696c1b1fa9fc16f1/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=04a0be3624a48b035455f4b0696c1b1fa9fc16f1", "patch": "@@ -12489,17 +12489,18 @@ build_assignment (int op, int op_location, tree lhs, tree rhs)\n static char *\n string_convert_int_cst (tree node)\n {\n-  static char buffer[80];\n+  /* Long.MIN_VALUE is -9223372036854775808, 20 characters.  */\n+  static char buffer[21];\n \n   unsigned HOST_WIDE_INT lo = TREE_INT_CST_LOW (node);\n   unsigned HOST_WIDE_INT hi = TREE_INT_CST_HIGH (node);\n-  char *p = buffer + sizeof (buffer) - 1;\n+  char *p = buffer + sizeof (buffer);\n   int neg = 0;\n \n   unsigned HOST_WIDE_INT hibit = (((unsigned HOST_WIDE_INT) 1)\n \t\t\t\t  << (HOST_BITS_PER_WIDE_INT - 1));\n \n-  *p-- = '\\0';\n+  *--p = '\\0';\n \n   /* If negative, note the fact and negate the value.  */\n   if ((hi & hibit))\n@@ -12512,7 +12513,7 @@ string_convert_int_cst (tree node)\n     }\n \n   /* Divide by 10 until there are no bits left.  */\n-  while (hi || lo)\n+  do\n     {\n       unsigned HOST_WIDE_INT acc = 0;\n       unsigned HOST_WIDE_INT outhi = 0, outlo = 0;\n@@ -12544,17 +12545,18 @@ string_convert_int_cst (tree node)\n \t    }\n \t}\n \n-      /* FIXME: ASCII assumption.  */\n-      *p-- = '0' + acc;\n+      /* '0' == 060 in Java, but might not be here (think EBCDIC).  */\n+      *--p = '\\060' + acc;\n \n       hi = outhi;\n       lo = outlo;\n     }\n+  while (hi || lo);\n \n   if (neg)\n-    *p-- = '-';\n+    *--p = '\\055'; /* '-' == 055 in Java, but might not be here.  */\n \n-  return p + 1;\n+  return p;\n }\n \n /* Print an INTEGER_CST node in a static buffer, and return the\n@@ -13678,46 +13680,54 @@ do_merge_string_cste (tree cste, const char *string, int string_len, int after)\n }\n \n /* Tries to merge OP1 (a STRING_CST) and OP2 (if suitable). Return a\n-   new STRING_CST on success, NULL_TREE on failure */\n+   new STRING_CST on success, NULL_TREE on failure.  */\n \n static tree\n merge_string_cste (tree op1, tree op2, int after)\n {\n-  /* Handle two string constants right away */\n+  /* Handle two string constants right away.  */\n   if (TREE_CODE (op2) == STRING_CST)\n     return do_merge_string_cste (op1, TREE_STRING_POINTER (op2),\n \t\t\t\t TREE_STRING_LENGTH (op2), after);\n \n-  /* Reasonable integer constant can be treated right away */\n+  /* Reasonable integer constant can be treated right away.  */\n   if (TREE_CODE (op2) == INTEGER_CST && !TREE_CONSTANT_OVERFLOW (op2))\n     {\n       static const char *const boolean_true = \"true\";\n       static const char *const boolean_false = \"false\";\n       static const char *const null_pointer = \"null\";\n-      char ch[3];\n+      char ch[4];\n       const char *string;\n \n       if (op2 == boolean_true_node)\n \tstring = boolean_true;\n       else if (op2 == boolean_false_node)\n \tstring = boolean_false;\n       else if (op2 == null_pointer_node)\n+\t/* FIXME: null is not a compile-time constant, so it is only safe to\n+\t   merge if the overall expression is non-constant. However, this\n+\t   code always merges without checking the overall expression.  */\n \tstring = null_pointer;\n       else if (TREE_TYPE (op2) == char_type_node)\n \t{\n \t  /* Convert the character into UTF-8.\t*/\n-\t  unsigned char c = (unsigned char) TREE_INT_CST_LOW (op2);\n+\t  unsigned int c = (unsigned int) TREE_INT_CST_LOW (op2);\n \t  unsigned char *p = (unsigned char *) ch;\n-\t  if (0x01 <= c\n-\t      && c <= 0x7f)\n-\t    *p++ = c;\n+\t  if (0x01 <= c && c <= 0x7f)\n+\t    *p++ = (unsigned char) c;\n+\t  else if (c < 0x7ff)\n+\t    {\n+\t      *p++ = (unsigned char) (c >> 6 | 0xc0);\n+\t      *p++ = (unsigned char) ((c & 0x3f) | 0x80);\n+\t    }\n \t  else\n \t    {\n-\t      *p++ = c >> 6 | 0xc0;\n-\t      *p++ = (c & 0x3f) | 0x80;\n+\t      *p++ = (unsigned char) (c >> 12 | 0xe0);\n+\t      *p++ = (unsigned char) (((c >> 6) & 0x3f) | 0x80);\n+\t      *p++ = (unsigned char) ((c & 0x3f) | 0x80);\n \t    }\n \t  *p = '\\0';\n- \n+\n \t  string = ch;\n \t}\n       else"}]}