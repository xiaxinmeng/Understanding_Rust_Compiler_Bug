{"sha": "254ea4774bc05a44f3dd1a56f2f8af66783ca7c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU0ZWE0Nzc0YmMwNWE0NGYzZGQxYTU2ZjJmOGFmNjY3ODNjYTdjNQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2004-03-11T14:25:44Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2004-03-11T14:25:44Z"}, "message": "ffi.c (ffi_prep_incoming_args_UNIX): Get floating point arguments from fp registers only for the first 8 parameter slots.\n\n\t* src/ia64/ffi.c (ffi_prep_incoming_args_UNIX): Get floating point\n\targuments from fp registers only for the first 8 parameter slots.\n\tDon't convert a float parameter when passed in memory.\n\nFrom-SVN: r79323", "tree": {"sha": "ba689ff75b31513162adabcf47e243128c66fba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba689ff75b31513162adabcf47e243128c66fba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/254ea4774bc05a44f3dd1a56f2f8af66783ca7c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254ea4774bc05a44f3dd1a56f2f8af66783ca7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254ea4774bc05a44f3dd1a56f2f8af66783ca7c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254ea4774bc05a44f3dd1a56f2f8af66783ca7c5/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40131a384c12ca47a142e349af17bc14345015ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40131a384c12ca47a142e349af17bc14345015ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40131a384c12ca47a142e349af17bc14345015ff"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "4b966cdd806a1bbf2b1e01a7dfbf66bf13081055", "filename": "libffi/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254ea4774bc05a44f3dd1a56f2f8af66783ca7c5/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254ea4774bc05a44f3dd1a56f2f8af66783ca7c5/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=254ea4774bc05a44f3dd1a56f2f8af66783ca7c5", "patch": "@@ -1,3 +1,9 @@\n+2004-03-11  Andreas Schwab  <schwab@suse.de>\n+\n+\t* src/ia64/ffi.c (ffi_prep_incoming_args_UNIX): Get floating point\n+\targuments from fp registers only for the first 8 parameter slots.\n+\tDon't convert a float parameter when passed in memory.\n+\n 2004-03-09  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* configure: Regenerate for config/accross.m4 correction."}, {"sha": "1dc27dbce4f7461b751d3940db65a8638cc86502", "filename": "libffi/src/ia64/ffi.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254ea4774bc05a44f3dd1a56f2f8af66783ca7c5/libffi%2Fsrc%2Fia64%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254ea4774bc05a44f3dd1a56f2f8af66783ca7c5/libffi%2Fsrc%2Fia64%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fia64%2Fffi.c?ref=254ea4774bc05a44f3dd1a56f2f8af66783ca7c5", "patch": "@@ -196,15 +196,15 @@ ffi_prep_args(struct ia64_args *stack, extended_cif *ecif, int bytes)\n \t      *fp_argp++ = *(float *)(* p_argv);\n \t    }\n \t  /* Also put it into the integer registers or memory: */\n-\t    *(UINT64 *) argp = *(UINT32 *)(* p_argv);\n+\t  *(UINT64 *) argp = *(UINT32 *)(* p_argv);\n \t  break;\n \n \tcase FFI_TYPE_DOUBLE:\n \t  z = 1;\n \t  if (fp_argp - stack->fp_regs < 8)\n \t    *fp_argp++ = *(double *)(* p_argv);\n \t  /* Also put it into the integer registers or memory: */\n-\t    *(double *) argp = *(double *)(* p_argv);\n+\t  *(double *) argp = *(double *)(* p_argv);\n \t  break;\n \n \tcase FFI_TYPE_STRUCT:\n@@ -547,7 +547,7 @@ ffi_prep_incoming_args_UNIX(struct ia64_args *args, void **rvalue,\n   register unsigned int i;\n   register unsigned int avn;\n   register void **p_argv;\n-  register unsigned long *argp = args -> out_regs;\n+  register long *argp = args -> out_regs;\n   unsigned fp_reg_num = 0;\n   register ffi_type **p_arg;\n \n@@ -576,17 +576,15 @@ ffi_prep_incoming_args_UNIX(struct ia64_args *args, void **rvalue,\n \tcase FFI_TYPE_FLOAT:\n \t  z = 1;\n \t  /* Convert argument back to float in place from the saved value */\n-\t  if (fp_reg_num < 8) {\n+\t  if (argp - args->out_regs < 8 && fp_reg_num < 8) {\n \t      *(float *)argp = args -> fp_regs[fp_reg_num++];\n-\t  } else {\n-\t      *(float *)argp = *(double *)argp;\n \t  }\n \t  *p_argv = (void *)argp;\n \t  break;\n \n \tcase FFI_TYPE_DOUBLE:\n \t  z = 1;\n-\t  if (fp_reg_num < 8) {\n+\t  if (argp - args->out_regs < 8 && fp_reg_num < 8) {\n \t      *p_argv = args -> fp_regs + fp_reg_num++;\n \t  } else {\n \t      *p_argv = (void *)argp;\n@@ -598,7 +596,8 @@ ffi_prep_incoming_args_UNIX(struct ia64_args *args, void **rvalue,\n \t      size_t sz = (*p_arg)->size;\n \t      unsigned short element_type;\n               z = ((*p_arg)->size + FFI_SIZEOF_ARG - 1)/FFI_SIZEOF_ARG;\n-\t      if (is_homogeneous_fp_aggregate(*p_arg, 8, &element_type)) {\n+\t      if (argp - args->out_regs < 8\n+\t\t  && is_homogeneous_fp_aggregate(*p_arg, 8, &element_type)) {\n \t\tint nelements = sz/float_type_size(element_type);\n \t\tif (nelements + fp_reg_num >= 8) {\n \t\t  /* hard case NYI.\t*/"}]}