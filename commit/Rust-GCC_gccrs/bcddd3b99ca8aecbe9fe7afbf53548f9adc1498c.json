{"sha": "bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkZGQzYjk5Y2E4YWVjYmU5ZmU3YWZiZjUzNTQ4ZjlhZGMxNDk4Yw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2011-01-25T14:32:52Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2011-01-25T14:32:52Z"}, "message": "rx.h (LIBCALL_VALUE): Do not promote complex types.\n\n\t* config/rx/rx.h (LIBCALL_VALUE): Do not promote complex types.\n\t* config/rx/rx.c (rx_function_value): Likewise.\n\t(rx_promote_function_mode): Likewise.\n\t(gen_safe_add): Place an outsized immediate value inside an UNSPEC\n\tin order to make it legitimate.\n\t* config/rx/rx.md (adddi3_internal): If the second operand is a\n\tMEM make sure that the first operand is the same as the result\n\tregister.\n\t(addsi3_unspec): Delete.\n\t(subdi3): Do not accept immediate operands.\n\t(subdi3_internal): Likewise.\n\n\t* gcc.target/rx/builtins.c: Allow -fipa-cp-clone.\n\t(saturate_add): Delete.\n\t(exchange): Delete.\n\t(main): Do not run saturate_add.\n\t(set_interrupts): Delete.\n\nFrom-SVN: r169232", "tree": {"sha": "a091487c7e958fc9e23809ed845bf179e653467e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a091487c7e958fc9e23809ed845bf179e653467e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e6cb0221424399d27a07d3dadd09ad6967e41cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e6cb0221424399d27a07d3dadd09ad6967e41cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e6cb0221424399d27a07d3dadd09ad6967e41cd"}], "stats": {"total": 101, "additions": 49, "deletions": 52}, "files": [{"sha": "18f0f5ff80c1f6746f8c587d89527f07a97d4ec1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "patch": "@@ -1,3 +1,17 @@\n+2011-01-25  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/rx.h (LIBCALL_VALUE): Do not promote complex types.\n+\t* config/rx/rx.c (rx_function_value): Likewise.\n+\t(rx_promote_function_mode): Likewise.\n+\t(gen_safe_add): Place an outsized immediate value inside an UNSPEC\n+\tin order to make it legitimate.\n+\t* config/rx/rx.md (adddi3_internal): If the second operand is a\n+\tMEM make sure that the first operand is the same as the result\n+\tregister.\n+\t(addsi3_unspec): Delete.\n+\t(subdi3): Do not accept immediate operands.\n+\t(subdi3_internal): Likewise.\n+\n 2011-01-25  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/37273"}, {"sha": "8fa48a35827a7c452fd22add79e624545b63fbe2", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "patch": "@@ -874,7 +874,10 @@ rx_function_value (const_tree ret_type,\n \n   /* RX ABI specifies that small integer types are\n      promoted to int when returned by a function.  */\n-  if (GET_MODE_SIZE (mode) > 0 && GET_MODE_SIZE (mode) < 4)\n+  if (GET_MODE_SIZE (mode) > 0\n+      && GET_MODE_SIZE (mode) < 4\n+      && ! COMPLEX_MODE_P (mode)\n+      )\n     return gen_rtx_REG (SImode, FUNC_RETURN_REGNUM);\n     \n   return gen_rtx_REG (mode, FUNC_RETURN_REGNUM);\n@@ -892,6 +895,7 @@ rx_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n {\n   if (for_return != 1\n       || GET_MODE_SIZE (mode) >= 4\n+      || COMPLEX_MODE_P (mode)\n       || GET_MODE_SIZE (mode) < 1)\n     return mode;\n \n@@ -1324,7 +1328,10 @@ gen_safe_add (rtx dest, rtx src, rtx val, bool is_frame_related)\n     insn = emit_insn (gen_addsi3 (dest, src, val));\n   else\n     {\n-      insn = emit_insn (gen_addsi3_unspec (dest, src, val));\n+      /* Wrap VAL in an UNSPEC so that rx_is_legitimate_constant\n+\t will not reject it.  */\n+      val = gen_rtx_CONST (SImode, gen_rtx_UNSPEC (SImode, gen_rtvec (1, val), UNSPEC_CONST));\n+      insn = emit_insn (gen_addsi3 (dest, src, val));\n \n       if (is_frame_related)\n \t/* We have to provide our own frame related note here"}, {"sha": "7acd3cee798dc80f72ed7eab620afe34c403cc84", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "patch": "@@ -251,6 +251,7 @@ enum reg_class\n \n #define LIBCALL_VALUE(MODE)\t\t\t\t\\\n   gen_rtx_REG (((GET_MODE_CLASS (MODE) != MODE_INT\t\\\n+                 || COMPLEX_MODE_P (MODE)\t\t\\\n \t\t || GET_MODE_SIZE (MODE) >= 4)\t\t\\\n \t\t? (MODE)\t\t\t\t\\\n \t\t: SImode),\t\t\t\t\\"}, {"sha": "99b46b5b2e28116c85f58abc0ba079248799a718", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "patch": "@@ -902,9 +902,9 @@\n )\n \n (define_expand \"adddi3\"\n-  [(set (match_operand:DI          0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"rx_source_operand\" \"\")))]\n+  [(set (match_operand:DI          0 \"register_operand\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t (match_operand:DI 2 \"rx_source_operand\")))]\n   \"\"\n {\n   rtx op0l, op0h, op1l, op1h, op2l, op2h;\n@@ -961,8 +961,18 @@\n \n   if (rtx_equal_p (op0l, op1l))\n     ;\n+  /* It is preferable that op0l == op1l...  */\n   else if (rtx_equal_p (op0l, op2l))\n     x = op1l, op1l = op2l, op2l = x;\n+  /* ... but it is only a requirement if op2l == MEM.  */\n+  else if (MEM_P (op2l))\n+    {\n+      /* Let's hope that we still have a scratch register free.  */\n+      gcc_assert (op1h != scratch);\n+      emit_move_insn (scratch, op2l);\n+      op2l = scratch;\n+    }\n+\n   emit_insn (gen_addsi3_flags (op0l, op1l, op2l));\n \n   if (rtx_equal_p (op0h, op1h))\n@@ -978,22 +988,6 @@\n   DONE;\n })\n \n-;; A pattern to add an integer to a register, regardless of the\n-;; setting of the -mmax-constant-size command line switch.\n-;; See rx.c:gen_safe_add() for more details.\n-(define_insn \"addsi3_unspec\"\n-  [(set (match_operand:SI          0 \"register_operand\"  \"=r,r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\"  \"%0,r\")\n-\t\t (const:SI (unspec:SI [(match_operand 2 \"const_int_operand\" \"n,n\")] UNSPEC_CONST))))\n-   (clobber (reg:CC CC_REG))]\n-  \"\"\n-  \"@\n-  add\\t%2, %0\n-  add\\t%2, %1, %0\"\n-  [(set_attr \"timings\" \"11\")\n-   (set_attr \"length\"   \"6\")]\n-)\n-\n (define_insn \"andsi3\"\n   [(set (match_operand:SI         0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r\")\n \t(and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,r,r,0\")\n@@ -1483,9 +1477,9 @@\n )\n \n (define_expand \"subdi3\"\n-  [(set (match_operand:DI           0 \"register_operand\" \"\")\n-\t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t  (match_operand:DI 2 \"rx_source_operand\" \"\")))]\n+  [(set (match_operand:DI           0 \"register_operand\")\n+\t(minus:DI (match_operand:DI 1 \"register_operand\")\n+\t\t  (match_operand:DI 2 \"rx_compare_operand\")))]\n   \"\"\n {\n   rtx op0l, op0h, op1l, op1h, op2l, op2h;\n@@ -1504,7 +1498,7 @@\n (define_insn_and_split \"subdi3_internal\"\n   [(set (match_operand:SI          0 \"register_operand\"   \"=&r,&r\")\n \t(minus:SI (match_operand:SI 2 \"register_operand\"  \"  0, r\")\n-\t\t  (match_operand:SI 3 \"rx_source_operand\" \"rnQ, r\")))\n+\t\t  (match_operand:SI 3 \"rx_compare_operand\" \"rQ, r\")))\n    (set (match_operand:SI          1 \"register_operand\"   \"= r, r\")\n \t(minus:SI\n \t  (minus:SI"}, {"sha": "edce2987fc4968bd0ca58a47ec3302f8fd8e147f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "patch": "@@ -1,3 +1,11 @@\n+2011-01-25  Nick Clifton  <nickc@redhat.com>\n+\n+\t* gcc.target/rx/builtins.c: Allow -fipa-cp-clone.\n+\t(saturate_add): Delete.\n+\t(exchange): Delete.\n+\t(main): Do not run saturate_add.\n+\t(set_interrupts): Delete.\n+\n 2011-01-25  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/47448"}, {"sha": "d503ed3ef94ad2147186092df89c4429b40c7b86", "filename": "gcc/testsuite/gcc.target/rx/builtins.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Ftestsuite%2Fgcc.target%2Frx%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c/gcc%2Ftestsuite%2Fgcc.target%2Frx%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Frx%2Fbuiltins.c?ref=bcddd3b99ca8aecbe9fe7afbf53548f9adc1498c", "patch": "@@ -1,12 +1,6 @@\n /* { dg-do run } */\n-/* { dg-options \"-fno-ipa-cp-clone\" } */\n \n /* Verify that the RX specific builtin functions work.  */\n-\n-/* IPA CP cloning is disabled because the constant propagation\n-   has no understanding of the saturation behaviour of the\n-   __builtin_rx_sat function and so it will optimize away the\n-   saturation addition test.  */\n    \n #include <stdlib.h>\n #include <stdio.h>\n@@ -25,20 +19,6 @@ half_word_swap (int arg)\n   return __builtin_rx_revw (arg);\n }\n \n-int\n-saturate_add (int arg1, int arg2)\n-{\n-  arg1 += arg2;\n-  return __builtin_rx_sat (arg1);\n-}\n-\n-int\n-exchange (int arg1, int arg2)\n-{\n-  arg1 = __builtin_rx_xchg (arg2);\n-  return arg1;\n-}\n-\n long\n multiply_and_accumulate (long arg1, long arg2, long arg3)\n {\n@@ -118,7 +98,6 @@ int\n main (void)\n {\n   CHECK_1ARG (half_word_swap, 0x12345678, 0x34127856);\n-  CHECK_2ARG (saturate_add, 0x80000000, 0x80000000, 0x80000000);\n   CHECK_3ARG (multiply_and_accumulate, 0x111, 0x222, 0x333, 0x70007);\n   CHECK_1ARG (rxround, 0.5, 1);\n   return 0;\n@@ -163,9 +142,3 @@ rmpa (int * multiplicand, int * multiplier, int num)\n {\n   __builtin_rx_rmpa ();\n }\n-\n-void\n-set_interrupts (void)\n-{\n-  __builtin_mvtipl (3);\n-}"}]}