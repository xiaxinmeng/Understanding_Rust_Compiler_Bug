{"sha": "61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmNmM4NGYyMWE1NDJiMTBjNGQ5MTU3NTFmMWZjNGVjM2QwZjFmZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-12-06T07:07:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-12-06T07:07:57Z"}, "message": "expr.c (expand_expr): Never modify exp in place.\n\n\t* expr.c (expand_expr) <case COND_EXPR>: Never modify exp in place.\n\n\t* gcc.c-torture/execute/20021204-1.c: New test.\n\nFrom-SVN: r59881", "tree": {"sha": "a2ee5aa601c9c1faf0859c1a098aa1167a151400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2ee5aa601c9c1faf0859c1a098aa1167a151400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf97847b372fb2d94eaa08ceda55a52b6907647b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf97847b372fb2d94eaa08ceda55a52b6907647b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf97847b372fb2d94eaa08ceda55a52b6907647b"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "9cd559875debfed1c7cc8d42627350dcac6df9a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff", "patch": "@@ -1,3 +1,7 @@\n+2002-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* expr.c (expand_expr) <case COND_EXPR>: Never modify exp in place.\n+\n 2002-12-05  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa32-linux.h (CANONICALIZE_FUNCPTR_FOR_COMPARE_LIBCALL): Move define."}, {"sha": "144bc008b551291d4fbf9a9028d237646f51cdb9", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff", "patch": "@@ -8618,6 +8618,7 @@ expand_expr (exp, target, tmode, modifier)\n \t    && TREE_CODE_CLASS (TREE_CODE (TREE_OPERAND (exp, 0))) == '<')\n \t  {\n \t    rtx result;\n+\t    tree cond;\n \t    optab boptab = (TREE_CODE (binary_op) == PLUS_EXPR\n \t\t\t    ? (TYPE_TRAP_SIGNED (TREE_TYPE (binary_op))\n \t\t\t       ? addv_optab : add_optab)\n@@ -8627,20 +8628,14 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t    : TREE_CODE (binary_op) == BIT_IOR_EXPR ? ior_optab\n \t\t\t    : xor_optab);\n \n-\t    /* If we had X ? A : A + 1, do this as A + (X == 0).\n-\n-\t       We have to invert the truth value here and then put it\n-\t       back later if do_store_flag fails.  We cannot simply copy\n-\t       TREE_OPERAND (exp, 0) to another variable and modify that\n-\t       because invert_truthvalue can modify the tree pointed to\n-\t       by its argument.  */\n+\t    /* If we had X ? A : A + 1, do this as A + (X == 0).  */\n \t    if (singleton == TREE_OPERAND (exp, 1))\n-\t      TREE_OPERAND (exp, 0)\n-\t\t= invert_truthvalue (TREE_OPERAND (exp, 0));\n+\t      cond = invert_truthvalue (TREE_OPERAND (exp, 0));\n+\t    else\n+\t      cond = TREE_OPERAND (exp, 0);\n \n-\t    result = do_store_flag (TREE_OPERAND (exp, 0),\n-\t\t\t\t    (safe_from_p (temp, singleton, 1)\n-\t\t\t\t     ? temp : NULL_RTX),\n+\t    result = do_store_flag (cond, (safe_from_p (temp, singleton, 1)\n+\t\t\t\t\t   ? temp : NULL_RTX),\n \t\t\t\t    mode, BRANCH_COST <= 1);\n \n \t    if (result != 0 && ! integer_onep (TREE_OPERAND (binary_op, 1)))\n@@ -8658,9 +8653,6 @@ expand_expr (exp, target, tmode, modifier)\n \t\treturn expand_binop (mode, boptab, op1, result, temp,\n \t\t\t\t     unsignedp, OPTAB_LIB_WIDEN);\n \t      }\n-\t    else if (singleton == TREE_OPERAND (exp, 1))\n-\t      TREE_OPERAND (exp, 0)\n-\t\t= invert_truthvalue (TREE_OPERAND (exp, 0));\n \t  }\n \n \tdo_pending_stack_adjust ();"}, {"sha": "7ced2afb62a68e072f5639cc8490ab5aca6bb44b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff", "patch": "@@ -1,3 +1,7 @@\n+2002-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/20021204-1.c: New test.\n+\n 2002-12-04  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.dg/ppc-fmadd-1.c: New file."}, {"sha": "e92c408a7b59e1cc5dfc2fb945c110bf866f194e", "filename": "gcc/testsuite/gcc.c-torture/execute/20021204-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021204-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021204-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021204-1.c?ref=61f6c84f21a542b10c4d915751f1fc4ec3d0f1ff", "patch": "@@ -0,0 +1,25 @@\n+/* This test was miscompiled when using sibling call optimization,\n+   because X ? Y : Y - 1 optimization changed X into !X in place\n+   and haven't reverted it if do_store_flag was successful, so\n+   when expanding the expression the second time it was\n+   !X ? Y : Y - 1.  */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+void foo (int x)\n+{\n+  if (x != 1)\n+    abort ();\n+}\n+\n+int z;\n+\n+int main (int argc, char **argv)\n+{\n+  char *a = \"test\";\n+  char *b = a + 2;\n+\n+  foo (z > 0 ? b - a : b - a - 1);\n+  exit (0);\n+}"}]}