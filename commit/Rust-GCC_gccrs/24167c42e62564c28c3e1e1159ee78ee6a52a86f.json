{"sha": "24167c42e62564c28c3e1e1159ee78ee6a52a86f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxNjdjNDJlNjI1NjRjMjhjM2UxZTExNTllZTc4ZWU2YTUyYTg2Zg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-06-29T20:17:56Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-06-29T20:17:56Z"}, "message": "stl_iterator_base_types.h (_Iter_base): Limit definition to pre-C++11 mode.\n\n2015-06-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_iterator_base_types.h (_Iter_base): Limit definition\n\tto pre-C++11 mode.\n\t* include/debug/functions.h\n\t(__gnu_debug::__valid_range, __gnu_debug::__base): Move...\n\t* include/debug/safe_iterator.h\n\t(__gnu_debug::_Sequence_traits): New.\n\t(__gnu_debug::__get_distance_from_begin): New.\n\t(__gnu_debug::__get_distance_to_end): New.\n\t(__gnu_debug::_Safe_iterator<>::_M_valid_range): Expose iterator range\n\tdistance information. Add optional check_dereferenceable parameter,\n\tdefault true.\n\t(__gnu_debug::_Distance_precision, __gnu_debug::__get_distance): Move\n\tdefault definition...\n\t(__gnu_debug::__get_distance): New overload for _Safe_iterator.\n\t(__gnu_debug::__unsafe): Likewise.\n\t* include/debug/helper_functions.h: ...here. New.\n\t(__gnu_debug::__unsafe): New helper function to remove safe iterator\n\tlayer.\n\t* include/debug/stl_iterator.h: New. Include latter.\n\t* include/bits/stl_iterator.h: Include latter in debug mode.\n\t* include/debug/stl_iterator.tcc: Adapt.\n\t* include/debug/safe_local_iterator.h (__gnu_debug::__get_distance): Add\n\toverload for _Safe_local_iterator.\n\t(__gnu_debug::__unsafe): Likewise.\n\t* include/debug/safe_local_iterator.tcc: Adapt.\n\t* include/debug/macros.h (__glibcxx_check_valid_range2): New.\n\t(__glibcxx_check_insert_range): Add _Dist parameter.\n\t(__glibcxx_check_insert_range_after): Likewise.\n\t(__glibcxx_check_string, __glibcxx_check_string_len): Implement using\n\t_GLIBCXX_DEBUG_PEDASSERT.\n\t* include/debug/deque (deque<>::assign): Remove iterator debug layer\n\twhen possible.\n\t(deque<>::insert): Likewise.\n\t* include/debug/forward_list (__glibcxx_check_valid_fl_range): New.\n\t(forward_list<>::splice_after): Use latter.\n\t(forward_list<>::assign): Remove iterator debug layer when possible.\n\t(forward_list<>::insert_after): Likewise.\n\t(__gnu_debug::_Sequence_traits<>): Partial specialization.\n\t* include/debug/list (list<>::assign): Remove iterator debug layer when\n\tpossible.\n\t(list<>::insert): Likewise.\n\t[__gnu_debug::_Sequence_traits<>]: Partial specialization pre C++11 ABI.\n\t* include/debug/map.h (map<>::insert): Remove iterator debug layer when\n\tpossible.\n\t* include/debug/multimap.h (multimap<>::insert): Likewise.\n\t* include/debug/set.h (set<>::insert): Likewise.\n\t* include/debug/multiset.h (multiset<>::insert): Likewise.\n\t* include/debug/string (basic_string<>::append, basic_string<>::assign,\n\tbasic_string<>::insert, basic_string<>::replace): Likewise.\n\t* include/debug/unordered_map\n\t(unordered_map<>::insert, unordered_multimap<>::insert): Likewise.\n\t* include/debug/unordered_set\n\t(unordered_set<>::insert, unordered_multiset<>insert): Likewise.\n\t* include/debug/vector\n\t(vector<>::assign, vector<>::insert): Likewise.\n\t* include/Makefile.am: Add new debug headers.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r225143", "tree": {"sha": "09a2a458cb2e7de403de7795dba0f8d97bab090f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09a2a458cb2e7de403de7795dba0f8d97bab090f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24167c42e62564c28c3e1e1159ee78ee6a52a86f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24167c42e62564c28c3e1e1159ee78ee6a52a86f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24167c42e62564c28c3e1e1159ee78ee6a52a86f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24167c42e62564c28c3e1e1159ee78ee6a52a86f/comments", "author": null, "committer": null, "parents": [{"sha": "755c71faf3932e6febceb1dca4fbd448a00cc427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755c71faf3932e6febceb1dca4fbd448a00cc427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/755c71faf3932e6febceb1dca4fbd448a00cc427"}], "stats": {"total": 1150, "additions": 904, "deletions": 246}, "files": [{"sha": "90a6e9a877c76f4514477af56f3a4f5b253e2481", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -1,3 +1,63 @@\n+2015-06-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_iterator_base_types.h (_Iter_base): Limit definition\n+\tto pre-C++11 mode.\n+\t* include/debug/functions.h\n+\t(__gnu_debug::__valid_range, __gnu_debug::__base): Move...\n+\t* include/debug/safe_iterator.h\n+\t(__gnu_debug::_Sequence_traits): New.\n+\t(__gnu_debug::__get_distance_from_begin): New.\n+\t(__gnu_debug::__get_distance_to_end): New.\n+\t(__gnu_debug::_Safe_iterator<>::_M_valid_range): Expose iterator range\n+\tdistance information. Add optional check_dereferenceable parameter,\n+\tdefault true.\n+\t(__gnu_debug::_Distance_precision, __gnu_debug::__get_distance): Move\n+\tdefault definition...\n+\t(__gnu_debug::__get_distance): New overload for _Safe_iterator.\n+\t(__gnu_debug::__unsafe): Likewise.\n+\t* include/debug/helper_functions.h: ...here. New.\n+\t(__gnu_debug::__unsafe): New helper function to remove safe iterator\n+\tlayer.\n+\t* include/debug/stl_iterator.h: New. Include latter.\n+\t* include/bits/stl_iterator.h: Include latter in debug mode.\n+\t* include/debug/stl_iterator.tcc: Adapt.\n+\t* include/debug/safe_local_iterator.h (__gnu_debug::__get_distance): Add\n+\toverload for _Safe_local_iterator.\n+\t(__gnu_debug::__unsafe): Likewise.\n+\t* include/debug/safe_local_iterator.tcc: Adapt.\n+\t* include/debug/macros.h (__glibcxx_check_valid_range2): New.\n+\t(__glibcxx_check_insert_range): Add _Dist parameter.\n+\t(__glibcxx_check_insert_range_after): Likewise.\n+\t(__glibcxx_check_string, __glibcxx_check_string_len): Implement using\n+\t_GLIBCXX_DEBUG_PEDASSERT.\n+\t* include/debug/deque (deque<>::assign): Remove iterator debug layer\n+\twhen possible.\n+\t(deque<>::insert): Likewise.\n+\t* include/debug/forward_list (__glibcxx_check_valid_fl_range): New.\n+\t(forward_list<>::splice_after): Use latter.\n+\t(forward_list<>::assign): Remove iterator debug layer when possible.\n+\t(forward_list<>::insert_after): Likewise.\n+\t(__gnu_debug::_Sequence_traits<>): Partial specialization.\n+\t* include/debug/list (list<>::assign): Remove iterator debug layer when\n+\tpossible.\n+\t(list<>::insert): Likewise.\n+\t[__gnu_debug::_Sequence_traits<>]: Partial specialization pre C++11 ABI.\n+\t* include/debug/map.h (map<>::insert): Remove iterator debug layer when\n+\tpossible.\n+\t* include/debug/multimap.h (multimap<>::insert): Likewise.\n+\t* include/debug/set.h (set<>::insert): Likewise.\n+\t* include/debug/multiset.h (multiset<>::insert): Likewise.\n+\t* include/debug/string (basic_string<>::append, basic_string<>::assign,\n+\tbasic_string<>::insert, basic_string<>::replace): Likewise.\n+\t* include/debug/unordered_map\n+\t(unordered_map<>::insert, unordered_multimap<>::insert): Likewise.\n+\t* include/debug/unordered_set\n+\t(unordered_set<>::insert, unordered_multiset<>insert): Likewise.\n+\t* include/debug/vector\n+\t(vector<>::assign, vector<>::insert): Likewise.\n+\t* include/Makefile.am: Add new debug headers.\n+\t* include/Makefile.in: Regenerate.\n+\n 2015-06-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/intro.xml: Document LWG 2108 status."}, {"sha": "05be8ad1b84a6ac1f446332c6c3e7348961f69c8", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -766,6 +766,7 @@ debug_headers = \\\n \t${debug_srcdir}/formatter.h \\\n \t${debug_srcdir}/forward_list \\\n \t${debug_srcdir}/functions.h \\\n+\t${debug_srcdir}/helper_functions.h \\\n \t${debug_srcdir}/list \\\n \t${debug_srcdir}/map \\\n \t${debug_srcdir}/macros.h \\\n@@ -785,6 +786,7 @@ debug_headers = \\\n \t${debug_srcdir}/safe_unordered_container.tcc \\\n \t${debug_srcdir}/set \\\n \t${debug_srcdir}/set.h \\\n+\t${debug_srcdir}/stl_iterator.h \\\n \t${debug_srcdir}/string \\\n \t${debug_srcdir}/unordered_map \\\n \t${debug_srcdir}/unordered_set \\"}, {"sha": "bab83b40018c8a75b44e4ea078bb2622ef393ca3", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -1047,6 +1047,7 @@ debug_headers = \\\n \t${debug_srcdir}/formatter.h \\\n \t${debug_srcdir}/forward_list \\\n \t${debug_srcdir}/functions.h \\\n+\t${debug_srcdir}/helper_functions.h \\\n \t${debug_srcdir}/list \\\n \t${debug_srcdir}/map \\\n \t${debug_srcdir}/macros.h \\\n@@ -1066,6 +1067,7 @@ debug_headers = \\\n \t${debug_srcdir}/safe_unordered_container.tcc \\\n \t${debug_srcdir}/set \\\n \t${debug_srcdir}/set.h \\\n+\t${debug_srcdir}/stl_iterator.h \\\n \t${debug_srcdir}/string \\\n \t${debug_srcdir}/unordered_map \\\n \t${debug_srcdir}/unordered_set \\"}, {"sha": "1060433d0bd9d961f7f7bfb4ea81e5c389e26a75", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -1246,4 +1246,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) (_Iter)\n #endif // C++11\n \n+#ifdef _GLIBCXX_DEBUG\n+# include <debug/stl_iterator.h>\n+#endif\n+\n #endif"}, {"sha": "eba9e398be7ead29df623f3f18000359b91fe926", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -206,6 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   //@}\n \n+#if __cplusplus < 201103L\n   // If _Iterator has a base returns it otherwise _Iterator is returned\n   // untouched\n   template<typename _Iterator, bool _HasBase>\n@@ -223,6 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static iterator_type _S_base(_Iterator __it)\n       { return __it.base(); }\n     };\n+#endif\n \n #if __cplusplus >= 201103L\n   template<typename _InIter>"}, {"sha": "7d15e33606b3bca70da8bfc3b2981301439bf876", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -169,9 +169,14 @@ namespace __debug\n \tvoid\n \tassign(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n-\t  _Base::assign(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::assign(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::assign(__first, __last);\n+\n \t  this->_M_invalidate_all();\n \t}\n \n@@ -460,10 +465,16 @@ namespace __debug\n \tinsert(const_iterator __position,\n \t       _InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_insert_range(__position, __first, __last);\n-\t  _Base_iterator __res = _Base::insert(__position.base(),\n-\t\t\t\t\t       __gnu_debug::__base(__first),\n-\t\t\t\t\t       __gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_insert_range(__position, __first, __last, __dist);\n+\t  _Base_iterator __res;\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    __res = _Base::insert(__position.base(),\n+\t\t\t\t  __gnu_debug::__unsafe(__first),\n+\t\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    __res = _Base::insert(__position.base(), __first, __last);\n+\n \t  this->_M_invalidate_all();\n \t  return iterator(__res, this);\n \t}\n@@ -473,9 +484,16 @@ namespace __debug\n \tinsert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_insert_range(__position, __first, __last);\n-\t  _Base::insert(__position.base(), __gnu_debug::__base(__first),\n-\t\t\t\t\t   __gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_insert_range(__position, __first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__position.base(),\n+\t\t\t  __gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__position.base(), __first, __last);\n+\n \t  this->_M_invalidate_all();\n \t}\n #endif"}, {"sha": "df35bc29cf57bedaa16e6d971b2517baec398cc0", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -36,6 +36,13 @@\n #include <debug/safe_container.h>\n #include <debug/safe_iterator.h>\n \n+// Special validity check for forward_list ranges.\n+#define __glibcxx_check_valid_fl_range(_First,_Last,_Dist)\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(_First._M_valid_range(_Last, _Dist, false),\t\\\n+\t\t      _M_message(__gnu_debug::__msg_valid_range)\t\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_iterator(_Last, #_Last))\n+\n namespace __gnu_debug\n {\n   /// Special iterators swap and invalidation for forward_list because of the\n@@ -269,9 +276,15 @@ namespace __debug\n \tvoid\n \tassign(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n-\t  _Base::assign(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::assign(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::assign(__first, __last);\n+\n \t  this->_M_invalidate_all();\n \t}\n \n@@ -401,11 +414,19 @@ namespace __debug\n \tinsert_after(const_iterator __pos,\n \t\t     _InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_insert_range_after(__pos, __first, __last);\n-\t  return iterator(_Base::insert_after(__pos.base(),\n-\t\t\t\t\t      __gnu_debug::__base(__first),\n-\t\t\t\t\t      __gnu_debug::__base(__last)),\n-\t\t\t  this);\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_insert_range_after(__pos, __first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    return\n+\t      {\n+\t\t_Base::insert_after(__pos.base(),\n+\t\t\t\t    __gnu_debug::__unsafe(__first),\n+\t\t\t\t    __gnu_debug::__unsafe(__last)),\n+\t\tthis\n+\t      };\n+\t  else\n+\t    return { _Base::insert_after(__pos.base(), __first, __last), this };\n \t}\n \n       iterator\n@@ -580,9 +601,10 @@ namespace __debug\n       splice_after(const_iterator __pos, forward_list&& __list,\n \t\t   const_iterator __before, const_iterator __last)\n       {\n+\ttypename __gnu_debug::_Distance_traits<const_iterator>::__type __dist;\n \tauto __listptr = std::__addressof(__list);\n \t__glibcxx_check_insert_after(__pos);\n-\t__glibcxx_check_valid_range(__before, __last);\n+\t__glibcxx_check_valid_fl_range(__before, __last, __dist);\n \t_GLIBCXX_DEBUG_VERIFY(__before._M_attached_to(__listptr),\n \t\t\t      _M_message(__gnu_debug::__msg_splice_other)\n \t\t\t      ._M_sequence(__list, \"list\")\n@@ -801,7 +823,7 @@ namespace __debug\n \n namespace __gnu_debug\n {\n-  template<class _Tp, class _Alloc>\n+  template<typename _Tp, typename _Alloc>\n     struct _BeforeBeginHelper<std::__debug::forward_list<_Tp, _Alloc> >\n     {\n       typedef std::__debug::forward_list<_Tp, _Alloc> _Sequence;\n@@ -820,6 +842,19 @@ namespace __gnu_debug\n \t{ return _S_Is(__it); }\n     };\n \n+  template<typename _Tp, typename _Alloc>\n+    struct _Sequence_traits<std::__debug::forward_list<_Tp, _Alloc> >\n+    {\n+      typedef typename std::__debug::forward_list<_Tp, _Alloc>::iterator _It;\n+\n+      static typename _Distance_traits<_It>::__type\n+      _S_size(const std::__debug::forward_list<_Tp, _Alloc>& __seq)\n+      {\n+\treturn __seq.empty()\n+\t  ? std::make_pair(0, __dp_exact) : std::make_pair(1, __dp_equality);\n+      }\n+    };\n+\n #ifndef _GLIBCXX_DEBUG_PEDANTIC\n   template<class _Tp, class _Alloc>\n     struct _Insert_range_from_self_is_safe<"}, {"sha": "7f0659f5b256d9c6c427dd1e4478fc356acff6b6", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 1, "deletions": 80, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -29,18 +29,14 @@\n #ifndef _GLIBCXX_DEBUG_FUNCTIONS_H\n #define _GLIBCXX_DEBUG_FUNCTIONS_H 1\n \n-#include <bits/c++config.h>\n-#include <bits/stl_iterator_base_types.h>\t// for iterator_traits,\n-\t\t\t\t\t\t// categories and _Iter_base\n-#include <bits/cpp_type_traits.h>\t\t// for __is_integer\n-\n #include <bits/move.h>\t\t\t\t// for __addressof\n #include <bits/stl_function.h>\t\t\t// for less\n #if __cplusplus >= 201103L\n # include <type_traits>\t\t\t\t// for is_lvalue_reference and\n \t\t\t\t\t\t// conditional.\n #endif\n \n+#include <debug/helper_functions.h>\n #include <debug/formatter.h>\n \n namespace __gnu_debug\n@@ -85,58 +81,6 @@ namespace __gnu_debug\n     __check_dereferenceable(const _Tp* __ptr)\n     { return __ptr; }\n \n-  /** If the distance between two random access iterators is\n-   *  nonnegative, assume the range is valid.\n-  */\n-  template<typename _RandomAccessIterator>\n-    inline bool\n-    __valid_range_aux2(const _RandomAccessIterator& __first,\n-\t\t       const _RandomAccessIterator& __last,\n-\t\t       std::random_access_iterator_tag)\n-    { return __last - __first >= 0; }\n-\n-  /** Can't test for a valid range with input iterators, because\n-   *  iteration may be destructive. So we just assume that the range\n-   *  is valid.\n-  */\n-  template<typename _InputIterator>\n-    inline bool\n-    __valid_range_aux2(const _InputIterator&, const _InputIterator&,\n-\t\t       std::input_iterator_tag)\n-    { return true; }\n-\n-  /** We say that integral types for a valid range, and defer to other\n-   *  routines to realize what to do with integral types instead of\n-   *  iterators.\n-  */\n-  template<typename _Integral>\n-    inline bool\n-    __valid_range_aux(const _Integral&, const _Integral&, std::__true_type)\n-    { return true; }\n-\n-  /** We have iterators, so figure out what kind of iterators that are\n-   *  to see if we can check the range ahead of time.\n-  */\n-  template<typename _InputIterator>\n-    inline bool\n-    __valid_range_aux(const _InputIterator& __first,\n-\t\t      const _InputIterator& __last, std::__false_type)\n-    { return __valid_range_aux2(__first, __last,\n-\t\t\t\tstd::__iterator_category(__first)); }\n-\n-  /** Don't know what these iterators are, or if they are even\n-   *  iterators (we may get an integral type for InputIterator), so\n-   *  see if they are integral and pass them on to the next phase\n-   *  otherwise.\n-  */\n-  template<typename _InputIterator>\n-    inline bool\n-    __valid_range(const _InputIterator& __first, const _InputIterator& __last)\n-    {\n-      typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n-      return __valid_range_aux(__first, __last, _Integral());\n-    }\n-\n   /* Checks that [first, last) is a valid range, and then returns\n    * __first. This routine is useful when we can't use a separate\n    * assertion statement because, e.g., we are in a constructor.\n@@ -500,29 +444,6 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n \n-  // Helper struct to detect random access safe iterators.\n-  template<typename _Iterator>\n-    struct __is_safe_random_iterator\n-    {\n-      enum { __value = 0 };\n-      typedef std::__false_type __type;\n-    };\n-\n-  template<typename _Iterator>\n-    struct _Siter_base\n-    : std::_Iter_base<_Iterator, __is_safe_random_iterator<_Iterator>::__value>\n-    { };\n-\n-  /** Helper function to extract base iterator of random access safe iterator\n-      in order to reduce performance impact of debug mode.  Limited to random\n-      access iterator because it is the only category for which it is possible\n-      to check for correct iterators order in the __valid_range function\n-      thanks to the < operator.\n-  */\n-  template<typename _Iterator>\n-    inline typename _Siter_base<_Iterator>::iterator_type\n-    __base(_Iterator __it)\n-    { return _Siter_base<_Iterator>::_S_base(__it); }\n } // namespace __gnu_debug\n \n #endif"}, {"sha": "a2db00d29cc00f4cbca6d25efd863940ba97c4b2", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -0,0 +1,210 @@\n+// Debugging support implementation -*- C++ -*-\n+\n+// Copyright (C) 2003-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file debug/helper_functions.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _GLIBCXX_DEBUG_HELPER_FUNCTIONS_H\n+#define _GLIBCXX_DEBUG_HELPER_FUNCTIONS_H 1\n+\n+#include <bits/stl_iterator_base_types.h>\t// for iterator_traits,\n+\t\t\t\t\t\t// categories and _Iter_base\n+#include <bits/cpp_type_traits.h>\t\t// for __is_integer\n+\n+#include <bits/stl_pair.h>\t\t\t// for pair\n+\n+namespace __gnu_debug\n+{\n+  /** The precision to which we can calculate the distance between\n+   *  two iterators.\n+   */\n+  enum _Distance_precision\n+    {\n+      __dp_none,\t// Not even an iterator type\n+      __dp_equality,\t//< Can compare iterator equality, only\n+      __dp_sign,\t//< Can determine equality and ordering\n+      __dp_exact\t//< Can determine distance precisely\n+    };\n+\n+  template<typename _Iterator,\n+\t   typename = typename std::__is_integer<_Iterator>::__type>\n+    struct _Distance_traits\n+    {\n+    private:\n+      typedef\n+      typename std::iterator_traits<_Iterator>::difference_type _ItDiffType;\n+\n+      template<typename _DiffType,\n+\t       typename = typename std::__is_void<_DiffType>::__type>\n+\tstruct _DiffTraits\n+\t{ typedef _DiffType __type; };\n+\n+      template<typename _DiffType>\n+\tstruct _DiffTraits<_DiffType, std::__true_type>\n+\t{ typedef std::ptrdiff_t __type; };\n+\n+      typedef typename _DiffTraits<_ItDiffType>::__type _DiffType;\n+\n+    public:\n+      typedef std::pair<_DiffType, _Distance_precision> __type;\n+    };\n+\n+  template<typename _Integral>\n+    struct _Distance_traits<_Integral, std::__true_type>\n+    { typedef std::pair<std::ptrdiff_t, _Distance_precision> __type; };\n+\n+  /** Determine the distance between two iterators with some known\n+   *\tprecision.\n+  */\n+  template<typename _Iterator>\n+    inline typename _Distance_traits<_Iterator>::__type\n+    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs,\n+\t\t   std::random_access_iterator_tag)\n+    { return std::make_pair(__rhs - __lhs, __dp_exact); }\n+\n+  template<typename _Iterator>\n+    inline typename _Distance_traits<_Iterator>::__type\n+    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs,\n+\t\t   std::input_iterator_tag)\n+    {\n+      if (__lhs == __rhs)\n+\treturn std::make_pair(0, __dp_exact);\n+\n+      return std::make_pair(1, __dp_equality);\n+    }\n+\n+  template<typename _Iterator>\n+    inline typename _Distance_traits<_Iterator>::__type\n+    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs)\n+    { return __get_distance(__lhs, __rhs, std::__iterator_category(__lhs)); }\n+\n+  /** We say that integral types for a valid range, and defer to other\n+   *  routines to realize what to do with integral types instead of\n+   *  iterators.\n+  */\n+  template<typename _Integral>\n+    inline bool\n+    __valid_range_aux(const _Integral&, const _Integral&,\n+\t\t      typename _Distance_traits<_Integral>::__type& __dist,\n+\t\t      std::__true_type)\n+    {\n+      __dist = std::make_pair(0, __dp_none);\n+      return true;\n+    }\n+\n+  /** We have iterators, so figure out what kind of iterators that are\n+   *  to see if we can check the range ahead of time.\n+  */\n+  template<typename _InputIterator>\n+    inline bool\n+    __valid_range_aux(const _InputIterator& __first,\n+\t\t      const _InputIterator& __last,\n+\t\t      typename _Distance_traits<_InputIterator>::__type& __dist,\n+\t\t      std::__false_type)\n+    {\n+      __dist = __get_distance(__first, __last);\n+      switch (__dist.second)\n+\t{\n+\tcase __dp_none:\n+\t  break;\n+\tcase __dp_equality:\n+\t  if (__dist.first == 0)\n+\t    return true;\n+\t  break;\n+\tcase __dp_sign:\n+\tcase __dp_exact:\n+\t  return __dist.first >= 0;\n+\t}\n+\n+      return true;\n+    }\n+\n+  /** Don't know what these iterators are, or if they are even\n+   *  iterators (we may get an integral type for InputIterator), so\n+   *  see if they are integral and pass them on to the next phase\n+   *  otherwise.\n+  */\n+  template<typename _InputIterator>\n+    inline bool\n+    __valid_range(const _InputIterator& __first, const _InputIterator& __last,\n+\t\t  typename _Distance_traits<_InputIterator>::__type& __dist)\n+    {\n+      typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n+      return __valid_range_aux(__first, __last, __dist, _Integral());\n+    }\n+\n+  template<typename _InputIterator>\n+    inline bool\n+    __valid_range(const _InputIterator& __first, const _InputIterator& __last)\n+    {\n+      typename _Distance_traits<_InputIterator>::__type __dist;\n+      return __valid_range(__first, __last, __dist);\n+    }\n+\n+#if __cplusplus < 201103L\n+  // Helper struct to detect random access safe iterators.\n+  template<typename _Iterator>\n+    struct __is_safe_random_iterator\n+    {\n+      enum { __value = 0 };\n+      typedef std::__false_type __type;\n+    };\n+\n+  template<typename _Iterator>\n+    struct _Siter_base\n+    : std::_Iter_base<_Iterator, __is_safe_random_iterator<_Iterator>::__value>\n+    { };\n+\n+  /** Helper function to extract base iterator of random access safe iterator\n+      in order to reduce performance impact of debug mode.  Limited to random\n+      access iterator because it is the only category for which it is possible\n+      to check for correct iterators order in the __valid_range function\n+      thanks to the < operator.\n+  */\n+  template<typename _Iterator>\n+    inline typename _Siter_base<_Iterator>::iterator_type\n+    __base(_Iterator __it)\n+    { return _Siter_base<_Iterator>::_S_base(__it); }\n+#else\n+  template<typename _Iterator>\n+    inline _Iterator\n+    __base(_Iterator __it)\n+    { return __it; }\n+#endif\n+\n+#if __cplusplus < 201103L\n+  template<typename _Iterator>\n+    struct _Unsafe_type\n+    { typedef _Iterator _Type; };\n+#endif\n+\n+  /* Remove debug mode safe iterator layer, if any. */\n+  template<typename _Iterator>\n+    inline _Iterator\n+    __unsafe(_Iterator __it)\n+    { return __it; }\n+}\n+\n+#endif"}, {"sha": "0f3f1a0e2416b97620ca2a41f2c5c14af2e71ea6", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -177,9 +177,15 @@ namespace __debug\n \tvoid\n \tassign(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n-\t  _Base::assign(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::assign(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::assign(__first, __last);\n+\n \t  this->_M_invalidate_all();\n \t}\n \n@@ -441,21 +447,33 @@ namespace __debug\n \tinsert(const_iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n \t{\n-\t  __glibcxx_check_insert_range(__position, __first, __last);\n-\t  return iterator(_Base::insert(__position.base(),\n-\t\t\t\t\t__gnu_debug::__base(__first),\n-\t\t\t\t\t__gnu_debug::__base(__last)),\n-\t\t\t  this);\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_insert_range(__position, __first, __last, __dist);\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    return\n+\t      {\n+\t\t_Base::insert(__position.base(),\n+\t\t\t      __gnu_debug::__unsafe(__first),\n+\t\t\t      __gnu_debug::__unsafe(__last)),\n+\t\t  this\n+\t      };\n+\t  else\n+\t    return { _Base::insert(__position.base(), __first, __last), this };\n \t}\n #else\n       template<class _InputIterator>\n \tvoid\n \tinsert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n \t{\n-\t  __glibcxx_check_insert_range(__position, __first, __last);\n-\t  _Base::insert(__position.base(), __gnu_debug::__base(__first),\n-\t\t\t\t\t   __gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_insert_range(__position, __first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__position.base(), __gnu_debug::__unsafe(__first),\n+\t\t\t\t\t     __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__position.base(), __first, __last);\n \t}\n #endif\n \n@@ -795,13 +813,29 @@ namespace __debug\n } // namespace __debug\n } // namespace std\n \n-#ifndef _GLIBCXX_DEBUG_PEDANTIC\n namespace __gnu_debug\n {\n+#ifndef _GLIBCXX_USE_CXX11_ABI\n+  // If not using C++11 list::size() is not in O(1) so we do not use it.\n+  template<typename _Tp, typename _Alloc>\n+    struct _Sequence_traits<std::__debug::list<_Tp, _Alloc> >\n+    {\n+      typedef typename std::__debug::list<_Tp, _Alloc>::iterator _It;\n+\n+      static typename _Distance_traits<_It>::__type\n+      _S_size(const std::__debug::list<_Tp, _Alloc>& __seq)\n+      {\n+\treturn __seq.empty()\n+\t  ? std::make_pair(0, __dp_exact) : std::make_pair(1, __dp_equality);\n+      }\n+    };\n+#endif\n+\n+#ifndef _GLIBCXX_DEBUG_PEDANTIC\n   template<class _Tp, class _Alloc>\n     struct _Insert_range_from_self_is_safe<std::__debug::list<_Tp, _Alloc> >\n     { enum { __value = 1 }; };\n-}\n #endif\n+}\n \n #endif"}, {"sha": "a4c2649c843f95b00695ea79e6e897871ef6a88e", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -56,6 +56,12 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__valid_range(_First, _Last),\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n+#define __glibcxx_check_valid_range2(_First,_Last,_Dist)\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__valid_range(_First, _Last, _Dist),\t\\\n+\t\t      _M_message(__gnu_debug::__msg_valid_range)\t\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_iterator(_Last, #_Last))\n+\n // Verify that [_First, _Last) forms a non-empty iterator range.\n #define __glibcxx_check_non_empty_range(_First,_Last)\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_First != _Last,\t\t\t\t\t\\\n@@ -104,8 +110,8 @@ _GLIBCXX_DEBUG_VERIFY(!_Position._M_is_end(),\t\t\t\t\\\n  *  Note that this macro is only valid when the container is a\n  *  _Safe_sequence and the _Position iterator is a _Safe_iterator.\n */\n-#define __glibcxx_check_insert_range(_Position,_First,_Last)\t\t\\\n-__glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n+#define __glibcxx_check_insert_range(_Position,_First,_Last,_Dist)\t\\\n+__glibcxx_check_valid_range2(_First,_Last,_Dist);\t\t\t\\\n __glibcxx_check_insert(_Position);\t\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First,_Last),\\\n \t\t      _M_message(__gnu_debug::__msg_insert_range_from_self)\\\n@@ -123,8 +129,8 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First,_Last),\\\n  *  Note that this macro is only valid when the container is a\n  *  _Safe_sequence and the _Position iterator is a _Safe_iterator.\n */\n-#define __glibcxx_check_insert_range_after(_Position,_First,_Last)\t\\\n-__glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n+#define __glibcxx_check_insert_range_after(_Position,_First,_Last,_Dist)\\\n+  __glibcxx_check_valid_range2(_First,_Last,_Dist);\t\t\t\\\n __glibcxx_check_insert_after(_Position);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First,_Last),\\\n \t\t      _M_message(__gnu_debug::__msg_insert_range_from_self)\\\n@@ -352,13 +358,8 @@ _GLIBCXX_DEBUG_VERIFY(_This.get_allocator() == _Other.get_allocator(),\t\\\n \t\t      _M_message(__gnu_debug::__msg_equal_allocs)\t\\\n \t\t      ._M_sequence(_This, \"this\"))\n \n-#ifdef _GLIBCXX_DEBUG_PEDANTIC\n-#  define __glibcxx_check_string(_String) _GLIBCXX_DEBUG_ASSERT(_String != 0)\n-#  define __glibcxx_check_string_len(_String,_Len) \\\n-       _GLIBCXX_DEBUG_ASSERT(_String != 0 || _Len == 0)\n-#else\n-#  define __glibcxx_check_string(_String)\n-#  define __glibcxx_check_string_len(_String,_Len)\n-#endif\n+#define __glibcxx_check_string(_String) _GLIBCXX_DEBUG_PEDASSERT(_String != 0)\n+#define __glibcxx_check_string_len(_String,_Len) \\\n+  _GLIBCXX_DEBUG_PEDASSERT(_String != 0 || _Len == 0)\n \n #endif"}, {"sha": "9bda8eba1da02925c87486c172ca5100e38cd70f", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -307,9 +307,14 @@ namespace __debug\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n-\t  _Base::insert(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__first, __last);\n \t}\n \n #if __cplusplus >= 201103L"}, {"sha": "b9b0a74c94e59c87b0bfee2553ecda100aff9bbe", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -286,9 +286,14 @@ namespace __debug\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n-\t  _Base::insert(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__first, __last);\n \t}\n \n #if __cplusplus >= 201103L"}, {"sha": "f1f6e2c576a000492a6cf6e48b33d73f7d3a2f1a", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -271,9 +271,14 @@ namespace __debug\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n-\t  _Base::insert(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__first, __last);\n \t}\n \n #if __cplusplus >= 201103L"}, {"sha": "a8bee214e36a229cbb5d23e67cd05e1db2ce04cb", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 156, "deletions": 34, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -41,7 +41,7 @@ namespace __gnu_debug\n   /** Helper struct to deal with sequence offering a before_begin\n    *  iterator.\n    **/\n-  template <typename _Sequence>\n+  template<typename _Sequence>\n     struct _BeforeBeginHelper\n     {\n       template<typename _Iterator>\n@@ -55,38 +55,16 @@ namespace __gnu_debug\n \t{ return __it.base() == __it._M_get_sequence()->_M_base().begin(); }\n     };\n \n-  /** The precision to which we can calculate the distance between\n-   *  two iterators.\n-   */\n-  enum _Distance_precision\n+  /** Sequence traits giving the size of a container if possible. */\n+  template<typename _Sequence>\n+    struct _Sequence_traits\n     {\n-      __dp_equality, //< Can compare iterator equality, only\n-      __dp_sign,     //< Can determine equality and ordering\n-      __dp_exact     //< Can determine distance precisely\n-    };\n-\n-  /** Determine the distance between two iterators with some known\n-   *\tprecision.\n-  */\n-  template<typename _Iterator>\n-    inline std::pair<typename std::iterator_traits<_Iterator>::difference_type,\n-\t\t     _Distance_precision>\n-    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs,\n-\t\t   std::random_access_iterator_tag)\n-    { return std::make_pair(__rhs - __lhs, __dp_exact); }\n+      typedef _Distance_traits<typename _Sequence::iterator> _DistTraits;\n \n-  template<typename _Iterator>\n-    inline std::pair<typename std::iterator_traits<_Iterator>::difference_type,\n-\t\t     _Distance_precision>\n-    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs,\n-\t\t   std::forward_iterator_tag)\n-    { return std::make_pair(__lhs == __rhs? 0 : 1, __dp_equality); }\n-\n-  template<typename _Iterator>\n-    inline std::pair<typename std::iterator_traits<_Iterator>::difference_type,\n-\t\t     _Distance_precision>\n-    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs)\n-    { return __get_distance(__lhs, __rhs, std::__iterator_category(__lhs)); }\n+      static typename _DistTraits::__type\n+      _S_size(const _Sequence& __seq)\n+      { return std::make_pair(__seq.size(), __dp_exact); }\n+    };\n \n   /** \\brief Safe iterator wrapper.\n    *\n@@ -476,7 +454,9 @@ namespace __gnu_debug\n \n       // Is the iterator range [*this, __rhs) valid?\n       bool\n-      _M_valid_range(const _Safe_iterator& __rhs) const;\n+      _M_valid_range(const _Safe_iterator& __rhs,\n+\t\t     std::pair<difference_type, _Distance_precision>& __dist,\n+\t\t     bool __check_dereferenceable = true) const;\n \n       // The sequence this iterator references.\n       typename\n@@ -768,15 +748,157 @@ namespace __gnu_debug\n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     __valid_range(const _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t  const _Safe_iterator<_Iterator, _Sequence>& __last)\n-    { return __first._M_valid_range(__last); }\n+\t\t  const _Safe_iterator<_Iterator, _Sequence>& __last,\n+\t\t  typename _Distance_traits<_Iterator>::__type& __dist)\n+    { return __first._M_valid_range(__last, __dist); }\n+\n+  /** Safe iterators can help to get better distance knowledge. */\n+  template<typename _Iterator, typename _Sequence>\n+    inline typename _Distance_traits<_Iterator>::__type\n+    __get_distance(const _Safe_iterator<_Iterator, _Sequence>& __first,\n+\t\t   const _Safe_iterator<_Iterator, _Sequence>& __last,\n+\t\t   std::random_access_iterator_tag)\n+    { return std::make_pair(__last.base() - __first.base(), __dp_exact); }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    inline typename _Distance_traits<_Iterator>::__type\n+    __get_distance(const _Safe_iterator<_Iterator, _Sequence>& __first,\n+\t\t   const _Safe_iterator<_Iterator, _Sequence>& __last,\n+\t\t   std::input_iterator_tag)\n+    {\n+      typedef typename _Distance_traits<_Iterator>::__type _Diff;\n+      typedef _Sequence_traits<_Sequence> _SeqTraits;\n+\n+      if (__first.base() == __last.base())\n+\treturn std::make_pair(0, __dp_exact);\n+\n+      if (__first._M_is_before_begin())\n+\t{\n+\t  if (__last._M_is_begin())\n+\t    return std::make_pair(1, __dp_exact);\n+\n+\t  return std::make_pair(1, __dp_sign);\n+\t}\n+\n+      if (__first._M_is_begin())\n+\t{\n+\t  if (__last._M_is_before_begin())\n+\t    return std::make_pair(-1, __dp_exact);\n+\n+\t  if (__last._M_is_end())\n+\t    return _SeqTraits::_S_size(*__first._M_get_sequence());\n+\n+\t  return std::make_pair(1, __dp_sign);\n+\t}\n+\n+      if (__first._M_is_end())\n+\t{\n+\t  if (__last._M_is_before_begin())\n+\t    return std::make_pair(-1, __dp_exact);\n+\n+\t  if (__last._M_is_begin())\n+\t    {\n+\t      _Diff __diff = _SeqTraits::_S_size(*__first._M_get_sequence());\n+\t      return std::make_pair(-__diff.first, __diff.second);\n+\t    }\n+\n+\t  return std::make_pair(-1, __dp_sign);\n+\t}\n+\n+      if (__last._M_is_before_begin() || __last._M_is_begin())\n+\treturn std::make_pair(-1, __dp_sign);\n+\n+      if (__last._M_is_end())\n+\treturn std::make_pair(1, __dp_sign);\n+\n+      return std::make_pair(1, __dp_equality);\n+    }\n+\n+  // Get distance from sequence begin to specified iterator.\n+  template<typename _Iterator, typename _Sequence>\n+    inline typename _Distance_traits<_Iterator>::__type\n+    __get_distance_from_begin(const _Safe_iterator<_Iterator, _Sequence>& __it)\n+    {\n+      typedef _Sequence_traits<_Sequence> _SeqTraits;\n+\n+      // No need to consider before_begin as this function is only used in\n+      // _M_can_advance which won't be used for forward_list iterators.\n+      if (__it._M_is_begin())\n+\treturn std::make_pair(0, __dp_exact);\n+\n+      if (__it._M_is_end())\n+\treturn _SeqTraits::_S_size(*__it._M_get_sequence());\n+\n+      typename _Distance_traits<_Iterator>::__type __res\n+\t= __get_distance(__it._M_get_sequence()->_M_base().begin(), __it.base());\n+\n+      if (__res.second == __dp_equality)\n+\treturn std::make_pair(1, __dp_sign);\n+\n+      return __res;\n+    }\n+\n+  // Get distance from specified iterator to sequence end.\n+  template<typename _Iterator, typename _Sequence>\n+    inline typename _Distance_traits<_Iterator>::__type\n+    __get_distance_to_end(const _Safe_iterator<_Iterator, _Sequence>& __it)\n+    {\n+      typedef _Sequence_traits<_Sequence> _SeqTraits;\n+\n+      // No need to consider before_begin as this function is only used in\n+      // _M_can_advance which won't be used for forward_list iterators.\n+      if (__it._M_is_begin())\n+\treturn _SeqTraits::_S_size(*__it._M_get_sequence());\n+\n+      if (__it._M_is_end())\n+\treturn std::make_pair(0, __dp_exact);\n \n+      typename _Distance_traits<_Iterator>::__type __res\n+\t= __get_distance(__it.base(), __it._M_get_sequence()->_M_base().end());\n+\n+      if (__res.second == __dp_equality)\n+\treturn std::make_pair(1, __dp_sign);\n+\n+      return __res;\n+    }\n+\n+#if __cplusplus < 201103L\n   template<typename _Iterator, typename _Sequence>\n     struct __is_safe_random_iterator<_Safe_iterator<_Iterator, _Sequence> >\n     : std::__are_same<std::random_access_iterator_tag,\n                       typename std::iterator_traits<_Iterator>::\n \t\t      iterator_category>\n     { };\n+#else\n+  template<typename _Iterator, typename _Sequence>\n+    _Iterator\n+    __base(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t   std::random_access_iterator_tag)\n+    { return __it.base(); }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    const _Safe_iterator<_Iterator, _Sequence>&\n+    __base(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t   std::input_iterator_tag)\n+    { return __it; }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    auto\n+    __base(const _Safe_iterator<_Iterator, _Sequence>& __it)\n+    -> decltype(__base(__it, std::__iterator_category(__it)))\n+    { return __base(__it, std::__iterator_category(__it)); }\n+#endif\n+\n+#if __cplusplus < 201103L\n+  template<typename _Iterator, typename _Sequence>\n+    struct _Unsafe_type<_Safe_iterator<_Iterator, _Sequence> >\n+    { typedef _Iterator _Type; };\n+#endif\n+\n+  template<typename _Iterator, typename _Sequence>\n+    inline _Iterator\n+    __unsafe(const _Safe_iterator<_Iterator, _Sequence>& __it)\n+    { return __it.base(); }\n \n } // namespace __gnu_debug\n "}, {"sha": "1ad26e3e07b47798872decc82a4fad6e55f56a33", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -38,20 +38,22 @@ namespace __gnu_debug\n     {\n       if (this->_M_singular())\n \treturn false;\n+\n       if (__n == 0)\n \treturn true;\n+\n       if (__n < 0)\n \t{\n \t  std::pair<difference_type, _Distance_precision> __dist =\n-\t    __get_distance(_M_get_sequence()->_M_base().begin(), base());\n+\t    __get_distance_from_begin(*this);\n \t  bool __ok =  ((__dist.second == __dp_exact && __dist.first >= -__n)\n \t\t\t|| (__dist.second != __dp_exact && __dist.first > 0));\n \t  return __ok;\n \t}\n       else\n \t{\n \t  std::pair<difference_type, _Distance_precision> __dist =\n-\t    __get_distance(base(), _M_get_sequence()->_M_base().end());\n+\t    __get_distance_to_end(*this);\n \t  bool __ok = ((__dist.second == __dp_exact && __dist.first >= __n)\n \t\t       || (__dist.second != __dp_exact && __dist.first > 0));\n \t  return __ok;\n@@ -61,37 +63,31 @@ namespace __gnu_debug\n   template<typename _Iterator, typename _Sequence>\n     bool\n     _Safe_iterator<_Iterator, _Sequence>::\n-    _M_valid_range(const _Safe_iterator& __rhs) const\n+    _M_valid_range(const _Safe_iterator& __rhs,\n+\t\t   std::pair<difference_type, _Distance_precision>& __dist,\n+\t\t   bool __check_dereferenceable) const\n     {\n       if (!_M_can_compare(__rhs))\n \treturn false;\n \n-      /* Determine if we can order the iterators without the help of\n-\t the container */\n-      std::pair<difference_type, _Distance_precision> __dist =\n-\t__get_distance(base(), __rhs.base());\n-      switch (__dist.second) {\n-      case __dp_equality:\n-\tif (__dist.first == 0)\n-\t  return true;\n-\tbreak;\n-\n-      case __dp_sign:\n-      case __dp_exact:\n-\treturn __dist.first >= 0;\n-      }\n+      /* Determine iterators order */\n+      __dist = __get_distance(*this, __rhs);\n+      switch (__dist.second)\n+\t{\n+\tcase __dp_equality:\n+\t  if (__dist.first == 0)\n+\t    return true;\n+\t  break;\n \n-      /* We can only test for equality, but check if one of the\n-\t iterators is at an extreme. */\n-      /* Optim for classic [begin, it) or [it, end) ranges, limit checks\n-       * when code is valid.  Note, for the special case of forward_list,\n-       * before_begin replaces the role of begin.  */ \n-      if (_M_is_beginnest() || __rhs._M_is_end())\n-\treturn true;\n-      if (_M_is_end() || __rhs._M_is_beginnest())\n-\treturn false;\n+\tcase __dp_sign:\n+\tcase __dp_exact:\n+\t  // If range is not empty first iterator must be dereferenceable.\n+\t  if (__dist.first > 0)\n+\t    return !__check_dereferenceable || _M_dereferenceable();\n+\t  return __dist.first == 0;\n+\t}\n \n-      // Assume that this is a valid range; we can't check anything else\n+      // Assume that this is a valid range; we can't check anything else.\n       return true;\n     }\n } // namespace __gnu_debug"}, {"sha": "350a1d249edd2f86b64c9df3f4168e1d395502a1", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -322,7 +322,9 @@ namespace __gnu_debug\n \n       // Is the iterator range [*this, __rhs) valid?\n       bool\n-      _M_valid_range(const _Safe_local_iterator& __rhs) const;\n+      _M_valid_range(const _Safe_local_iterator& __rhs,\n+\t\t     std::pair<difference_type,\n+\t\t\t       _Distance_precision>& __dist_info) const;\n \n       // The sequence this iterator references.\n       typename\n@@ -440,8 +442,66 @@ namespace __gnu_debug\n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     __valid_range(const _Safe_local_iterator<_Iterator, _Sequence>& __first,\n-\t\t  const _Safe_local_iterator<_Iterator, _Sequence>& __last)\n-    { return __first._M_valid_range(__last); }\n+\t\t  const _Safe_local_iterator<_Iterator, _Sequence>& __last,\n+\t\t  typename _Distance_traits<_Iterator>::__type& __dist_info)\n+    { return __first._M_valid_range(__last, __dist_info); }\n+\n+  /** Safe local iterators need a special method to get distance between each\n+      other. */\n+  template<typename _Iterator, typename _Sequence>\n+    inline std::pair<typename std::iterator_traits<_Iterator>::difference_type,\n+\t\t     _Distance_precision>\n+    __get_distance(const _Safe_local_iterator<_Iterator, _Sequence>& __first,\n+\t\t   const _Safe_local_iterator<_Iterator, _Sequence>& __last,\n+\t\t   std::input_iterator_tag)\n+    {\n+      if (__first.base() == __last.base())\n+\treturn { 0, __dp_exact };\n+\n+      if (__first._M_is_begin())\n+\t{\n+\t  if (__last._M_is_end())\n+\t    return\n+\t      {\n+\t\t__first._M_get_sequence()->bucket_size(__first.bucket()),\n+\t\t__dp_exact\n+\t      };\n+\n+\t  return { 1, __dp_sign };\n+\t}\n+\n+      if (__first._M_is_end())\n+\t{\n+\t  if (__last._M_is_begin())\n+\t    return\n+\t      {\n+\t\t-__first._M_get_sequence()->bucket_size(__first.bucket()),\n+\t\t__dp_exact\n+\t      };\n+\n+\t  return { -1, __dp_sign };\n+\t}\n+\n+      if (__last._M_is_begin())\n+\treturn { -1, __dp_sign };\n+\n+      if (__last._M_is_end())\n+\treturn { 1, __dp_sign };\n+\n+      return { 1, __dp_equality };\n+    }\n+\n+#if __cplusplus < 201103L\n+  template<typename _Iterator, typename _Sequence>\n+    struct _Unsafe_type<_Safe_local_iterator<_Iterator, _Sequence> >\n+    { typedef _Iterator _Type; };\n+#endif\n+\n+  template<typename _Iterator, typename _Sequence>\n+    inline _Iterator\n+    __unsafe(const _Safe_local_iterator<_Iterator, _Sequence>& __it)\n+    { return __it.base(); }\n+\n } // namespace __gnu_debug\n \n #include <debug/safe_local_iterator.tcc>"}, {"sha": "f846bf78307dea700f7d0fb410044d77550616ed", "filename": "libstdc++-v3/include/debug/safe_local_iterator.tcc", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -34,17 +34,18 @@ namespace __gnu_debug\n   template<typename _Iterator, typename _Sequence>\n     bool\n     _Safe_local_iterator<_Iterator, _Sequence>::\n-    _M_valid_range(const _Safe_local_iterator& __rhs) const\n+    _M_valid_range(const _Safe_local_iterator& __rhs,\n+\t\tstd::pair<difference_type, _Distance_precision>& __dist) const\n     {\n       if (!_M_can_compare(__rhs))\n \treturn false;\n+\n       if (bucket() != __rhs.bucket())\n \treturn false;\n \n       /* Determine if we can order the iterators without the help of\n \t the container */\n-      std::pair<difference_type, _Distance_precision> __dist =\n-\t__get_distance(base(), __rhs.base());\n+      __dist = __get_distance(*this, __rhs);\n       switch (__dist.second)\n \t{\n \tcase __dp_equality:\n@@ -57,15 +58,6 @@ namespace __gnu_debug\n \t  return __dist.first >= 0;\n \t}\n \n-      /* We can only test for equality, but check if one of the\n-\t iterators is at an extreme. */\n-      /* Optim for classic [begin, it) or [it, end) ranges, limit checks\n-       * when code is valid. */\n-      if (_M_is_begin() || __rhs._M_is_end())\n-\treturn true;\n-      if (_M_is_end() || __rhs._M_is_begin())\n-\treturn false;\n-\n       // Assume that this is a valid range; we can't check anything else\n       return true;\n     }"}, {"sha": "1ca6dda9c0e1ff52a51e2487312a731174fcc79a", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -280,9 +280,14 @@ namespace __debug\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n-\t  _Base::insert(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__first, __last);\n \t}\n \n #if __cplusplus >= 201103L"}, {"sha": "d1e57ea75a081ea66c1ca5b06cb45827a0f37ebd", "filename": "libstdc++-v3/include/debug/stl_iterator.h", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -0,0 +1,113 @@\n+// Debugging support implementation -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file debug/stl_iterator.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _GLIBCXX_DEBUG_STL_ITERATOR_H\n+#define _GLIBCXX_DEBUG_STL_ITERATOR_H 1\n+\n+#include <debug/helper_functions.h>\n+\n+namespace __gnu_debug\n+{\n+  // Help Debug mode to see through reverse_iterator.\n+  template<typename _Iterator>\n+    inline bool\n+    __valid_range(const std::reverse_iterator<_Iterator>& __first,\n+\t\t  const std::reverse_iterator<_Iterator>& __last,\n+\t\t  typename _Distance_traits<_Iterator>::__type& __dist)\n+    { return __valid_range(__last.base(), __first.base(), __dist); }\n+\n+  template<typename _Iterator>\n+    inline typename _Distance_traits<_Iterator>::__type\n+    __get_distance(const std::reverse_iterator<_Iterator>& __first,\n+\t\t   const std::reverse_iterator<_Iterator>& __last)\n+    { return __get_distance(__last.base(), __first.base()); }\n+\n+#if __cplusplus < 201103L\n+  template<typename _Iterator>\n+    struct __is_safe_random_iterator<std::reverse_iterator<_Iterator> >\n+      : __is_safe_random_iterator<_Iterator>\n+    { };\n+\n+  template<typename _Iterator>\n+    struct _Unsafe_type<std::reverse_iterator<_Iterator> >\n+    {\n+      typedef typename _Unsafe_type<_Iterator>::_Type _UnsafeType;\n+      typedef std::reverse_iterator<_UnsafeType> _Type;\n+    };\n+\n+  template<typename _Iterator>\n+    inline std::reverse_iterator<typename _Unsafe_type<_Iterator>::_Type>\n+    __unsafe(const std::reverse_iterator<_Iterator>& __it)\n+    {\n+      typedef typename _Unsafe_type<_Iterator>::_Type _UnsafeType;\n+      return std::reverse_iterator<_UnsafeType>(__unsafe(__it.base()));\n+    }\n+#else\n+  template<typename _Iterator>\n+    inline auto\n+    __base(const std::reverse_iterator<_Iterator>& __it)\n+    -> decltype(std::__make_reverse_iterator(__base(__it.base())))\n+    { return std::__make_reverse_iterator(__base(__it.base())); }\n+\n+  template<typename _Iterator>\n+    inline auto\n+    __unsafe(const std::reverse_iterator<_Iterator>& __it)\n+    -> decltype(std::__make_reverse_iterator(__unsafe(__it.base())))\n+    { return std::__make_reverse_iterator(__unsafe(__it.base())); }\n+#endif\n+\n+#if __cplusplus >= 201103L\n+  // Help Debug mode to see through move_iterator.\n+  template<typename _Iterator>\n+    inline bool\n+    __valid_range(const std::move_iterator<_Iterator>& __first,\n+\t\t  const std::move_iterator<_Iterator>& __last,\n+\t\t  typename _Distance_traits<_Iterator>::__type& __dist)\n+    { return __valid_range(__first.base(), __last.base(), __dist); }\n+\n+  template<typename _Iterator>\n+    inline typename _Distance_traits<_Iterator>::__type\n+    __get_distance(const std::move_iterator<_Iterator>& __first,\n+\t\t   const std::move_iterator<_Iterator>& __last)\n+    { return __get_distance(__first.base(), __last.base()); }\n+\n+  template<typename _Iterator>\n+    inline auto\n+    __unsafe(const std::move_iterator<_Iterator>& __it)\n+    -> decltype(std::make_move_iterator(__unsafe(__it.base())))\n+    { return std::make_move_iterator(__unsafe(__it.base())); }\n+\n+  template<typename _Iterator>\n+    inline auto\n+    __base(const std::move_iterator<_Iterator>& __it)\n+    -> decltype(std::make_move_iterator(__base(__it.base())))\n+    { return std::make_move_iterator(__base(__it.base())); }\n+#endif\n+}\n+\n+#endif"}, {"sha": "72ae88e54956e9204d429955fd6067d6108f0f14", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -380,9 +380,15 @@ namespace __gnu_debug\n       basic_string&\n       append(_InputIterator __first, _InputIterator __last)\n       {\n-\t__glibcxx_check_valid_range(__first, __last);\n-\t_Base::append(__gnu_debug::__base(__first),\n-\t\t      __gnu_debug::__base(__last));\n+\ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t__glibcxx_check_valid_range2(__first, __last, __dist);\n+\n+\tif (__dist.second >= __dp_sign)\n+\t  _Base::append(__gnu_debug::__unsafe(__first),\n+\t\t\t__gnu_debug::__unsafe(__last));\n+\telse\n+\t  _Base::append(__first, __last);\n+\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -452,9 +458,15 @@ namespace __gnu_debug\n       basic_string&\n       assign(_InputIterator __first, _InputIterator __last)\n       {\n-\t__glibcxx_check_valid_range(__first, __last);\n-\t_Base::assign(__gnu_debug::__base(__first),\n-\t\t      __gnu_debug::__base(__last));\n+\ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t__glibcxx_check_valid_range2(__first, __last, __dist);\n+\n+\tif (__dist.second >= __dp_sign)\n+\t  _Base::assign(__gnu_debug::__unsafe(__first),\n+\t\t\t__gnu_debug::__unsafe(__last));\n+\telse\n+\t  _Base::assign(__first, __last);\n+\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -533,9 +545,15 @@ namespace __gnu_debug\n       void\n       insert(iterator __p, _InputIterator __first, _InputIterator __last)\n       {\n-\t__glibcxx_check_insert_range(__p, __first, __last);\n-\t_Base::insert(__p.base(), __gnu_debug::__base(__first),\n-\t\t\t\t  __gnu_debug::__base(__last));\n+\ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t__glibcxx_check_insert_range2(__p, __first, __last, __dist);\n+\n+\tif (__dist.second >= __dp_sign)\n+\t  _Base::insert(__p.base(), __gnu_debug::__unsafe(__first),\n+\t\t\t\t    __gnu_debug::__unsafe(__last));\n+\telse\n+\t  _Base::insert(__p.base(), __first, __last);\n+\n \tthis->_M_invalidate_all();\n       }\n \n@@ -676,8 +694,17 @@ namespace __gnu_debug\n \t      _InputIterator __j1, _InputIterator __j2)\n       {\n \t__glibcxx_check_erase_range(__i1, __i2);\n-\t__glibcxx_check_valid_range(__j1, __j2);\n-\t_Base::replace(__i1.base(), __i2.base(), __j1, __j2);\n+\n+\ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t__glibcxx_check_valid_range2(__j1, __j2, __dist);\n+\n+\tif (__dist.second >= __dp_sign)\n+\t  _Base::replace(__i1.base(), __i2.base(),\n+\t\t\t __gnu_debug::__unsafe(__j1),\n+\t\t\t __gnu_debug::__unsafe(__j2));\n+\telse\n+\t  _Base::replace(__i1.base(), __i2.base(), __j1, __j2);\n+\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }"}, {"sha": "41e20d7f2033aa86fcf66ebf86f60bdb0d3763ad", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -364,10 +364,16 @@ namespace __debug\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n \t  size_type __bucket_count = this->bucket_count();\n-\t  _Base::insert(__gnu_debug::__base(__first),\n-\t\t\t  __gnu_debug::__base(__last));\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__first, __last);\n+\n \t  _M_check_rehashed(__bucket_count);\n \t}\n \n@@ -809,10 +815,16 @@ namespace __debug\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n \t  size_type __bucket_count = this->bucket_count();\n-\t  _Base::insert(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__first, __last);\n+\n \t  _M_check_rehashed(__bucket_count);\n \t}\n "}, {"sha": "1e6846140ab3db826df1615daf52d6cca8f35209", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -355,10 +355,16 @@ namespace __debug\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n \t  size_type __bucket_count = this->bucket_count();\n-\t  _Base::insert(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__first, __last);\n+\n \t  _M_check_rehashed(__bucket_count);\n \t}\n \n@@ -799,10 +805,16 @@ namespace __debug\n \tvoid\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n \t  size_type __bucket_count = this->bucket_count();\n-\t  _Base::insert(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__first, __last);\n+\n \t  _M_check_rehashed(__bucket_count);\n \t}\n "}, {"sha": "310009756c0bf696344630ffd1a11fdb51186b8d", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24167c42e62564c28c3e1e1159ee78ee6a52a86f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=24167c42e62564c28c3e1e1159ee78ee6a52a86f", "patch": "@@ -244,9 +244,15 @@ namespace __debug\n \tvoid\n \tassign(_InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_valid_range(__first, __last);\n-\t  _Base::assign(__gnu_debug::__base(__first),\n-\t\t\t__gnu_debug::__base(__last));\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n+\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::assign(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::assign(__first, __last);\n+\n \t  this->_M_invalidate_all();\n \t  this->_M_update_guaranteed_capacity();\n \t}\n@@ -574,16 +580,21 @@ namespace __debug\n \tinsert(const_iterator __position,\n \t       _InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_insert_range(__position, __first, __last);\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_insert_range(__position, __first, __last, __dist);\n \n \t  /* Hard to guess if invalidation will occur, because __last\n \t     - __first can't be calculated in all cases, so we just\n \t     punt here by checking if it did occur. */\n \t  _Base_iterator __old_begin = _M_base().begin();\n \t  difference_type __offset = __position.base() - _Base::cbegin();\n-\t  _Base_iterator __res = _Base::insert(__position.base(),\n-\t\t\t\t\t       __gnu_debug::__base(__first),\n-\t\t\t\t\t       __gnu_debug::__base(__last));\n+\t  _Base_iterator __res;\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    __res = _Base::insert(__position.base(),\n+\t\t\t\t  __gnu_debug::__unsafe(__first),\n+\t\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    __res = _Base::insert(__position.base(), __first, __last);\n \n \t  if (_M_base().begin() != __old_begin)\n \t    this->_M_invalidate_all();\n@@ -598,15 +609,19 @@ namespace __debug\n \tinsert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)\n \t{\n-\t  __glibcxx_check_insert_range(__position, __first, __last);\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_insert_range(__position, __first, __last, __dist);\n \n \t  /* Hard to guess if invalidation will occur, because __last\n \t     - __first can't be calculated in all cases, so we just\n \t     punt here by checking if it did occur. */\n \t  _Base_iterator __old_begin = _M_base().begin();\n \t  difference_type __offset = __position.base() - _Base::begin();\n-\t  _Base::insert(__position.base(), __gnu_debug::__base(__first),\n-\t\t\t\t\t   __gnu_debug::__base(__last));\n+\t  if (__dist.second >= __gnu_debug::__dp_sign)\n+\t    _Base::insert(__position.base(), __gnu_debug::__unsafe(__first),\n+\t\t\t\t\t     __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::insert(__position.base(), __first, __last);\n \n \t  if (_M_base().begin() != __old_begin)\n \t    this->_M_invalidate_all();"}]}