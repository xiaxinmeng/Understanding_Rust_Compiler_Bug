{"sha": "8e8225e69d1173cf0095a59ccf9bad219d016cdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU4MjI1ZTY5ZDExNzNjZjAwOTVhNTljY2Y5YmFkMjE5ZDAxNmNkZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-12T07:28:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-12T07:28:35Z"}, "message": "re PR c/89946 (ICE in assemble_start_function, at varasm.c:1871)\n\n\tPR c/89946\n\t* varasm.c (assemble_start_function): Don't use tree_fits_uhwi_p\n\tand gcc_unreachable if it fails, just call tree_to_uhwi which\n\tverifies that too.  Test TREE_CHAIN instead of list_length > 1.\n\tStart warning message with a lower-case letter.  Formatting fixes.\nc-family/\n\t* c-attribs.c (handle_patchable_function_entry_attribute): Add\n\tfunction comment.  Warn if arguments of the attribute are not positive\n\tinteger constants.\ntestsuite/\n\t* c-c++-common/pr89946.c: New test.\n\nFrom-SVN: r270305", "tree": {"sha": "f7af5b463b314e35498410d956c116c93deeeae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7af5b463b314e35498410d956c116c93deeeae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e8225e69d1173cf0095a59ccf9bad219d016cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e8225e69d1173cf0095a59ccf9bad219d016cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e8225e69d1173cf0095a59ccf9bad219d016cdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e8225e69d1173cf0095a59ccf9bad219d016cdd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c758576accc3eef33c31766352453b0ad1953569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c758576accc3eef33c31766352453b0ad1953569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c758576accc3eef33c31766352453b0ad1953569"}], "stats": {"total": 69, "additions": 52, "deletions": 17}, "files": [{"sha": "e728a9a1692119080f86cb14c9cca04441bc04be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e8225e69d1173cf0095a59ccf9bad219d016cdd", "patch": "@@ -1,5 +1,11 @@\n 2019-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/89946\n+\t* varasm.c (assemble_start_function): Don't use tree_fits_uhwi_p\n+\tand gcc_unreachable if it fails, just call tree_to_uhwi which\n+\tverifies that too.  Test TREE_CHAIN instead of list_length > 1.\n+\tStart warning message with a lower-case letter.  Formatting fixes.\n+\n \tPR rtl-optimization/90026\n \t* cfgcleanup.c (try_optimize_cfg): When removing empty bb with no\n \tsuccessors, look for BARRIERs inside of the whole BB_FOOTER chain"}, {"sha": "aeba529b2325cd70355561efea656cc977be23ee", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8e8225e69d1173cf0095a59ccf9bad219d016cdd", "patch": "@@ -1,3 +1,10 @@\n+2019-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/89946\n+\t* c-attribs.c (handle_patchable_function_entry_attribute): Add\n+\tfunction comment.  Warn if arguments of the attribute are not positive\n+\tinteger constants.\n+\n 2019-04-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (print_destructor): Deal with deleting destructors."}, {"sha": "7e9df674f0b77e52ae52bb0c417871d0abed425e", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=8e8225e69d1173cf0095a59ccf9bad219d016cdd", "patch": "@@ -3988,10 +3988,29 @@ handle_fallthrough_attribute (tree *, tree name, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle a \"patchable_function_entry\" attributes; arguments as in\n+   struct attribute_spec.handler.  */\n+\n static tree\n-handle_patchable_function_entry_attribute (tree *, tree, tree, int, bool *)\n+handle_patchable_function_entry_attribute (tree *, tree name, tree args,\n+\t\t\t\t\t   int, bool *no_add_attrs)\n {\n-  /* Nothing to be done here.  */\n+  for (; args; args = TREE_CHAIN (args))\n+    {\n+      tree val = TREE_VALUE (args);\n+      if (val && TREE_CODE (val) != IDENTIFIER_NODE\n+\t  && TREE_CODE (val) != FUNCTION_DECL)\n+\tval = default_conversion (val);\n+\n+      if (!tree_fits_uhwi_p (val))\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%qE attribute argument %qE is not an integer constant\",\n+\t\t   name, val);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+    }\n   return NULL_TREE;\n }\n "}, {"sha": "fe02e42e21d8a6d4446021a9cbce9890ca5a3441", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e8225e69d1173cf0095a59ccf9bad219d016cdd", "patch": "@@ -1,5 +1,8 @@\n 2019-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/89946\n+\t* c-c++-common/pr89946.c: New test.\n+\n \tPR rtl-optimization/90026\n \t* g++.dg/opt/pr90026.C: New test.\n "}, {"sha": "23acd63fc6a6872f7a25724cd5db0c30aebf6cfe", "filename": "gcc/testsuite/c-c++-common/pr89946.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr89946.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr89946.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr89946.c?ref=8e8225e69d1173cf0095a59ccf9bad219d016cdd", "patch": "@@ -0,0 +1,7 @@\n+/* PR c/89946 */\n+\n+__attribute__((patchable_function_entry (-1))) void foo (void) {}\t/* { dg-warning \"'patchable_function_entry' attribute argument '-1' is not an integer constant\" } */\n+__attribute__((patchable_function_entry (5, -5))) void bar (void) {}\t/* { dg-warning \"'patchable_function_entry' attribute argument '-5' is not an integer constant\" } */\n+int i, j;\n+__attribute__((patchable_function_entry (i))) void baz (void) {}\t/* { dg-warning \"'patchable_function_entry' attribute argument 'i' is not an integer constant\" } */\n+__attribute__((patchable_function_entry (2, j))) void qux (void) {}\t/* { dg-warning \"'patchable_function_entry' attribute argument 'j' is not an integer constant\" } */"}, {"sha": "cb43248ec492d8eb3287f24947b9c17b70cd18ac", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8225e69d1173cf0095a59ccf9bad219d016cdd/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=8e8225e69d1173cf0095a59ccf9bad219d016cdd", "patch": "@@ -1865,28 +1865,20 @@ assemble_start_function (tree decl, const char *fnname)\n       tree pp_val = TREE_VALUE (patchable_function_entry_attr);\n       tree patchable_function_entry_value1 = TREE_VALUE (pp_val);\n \n-      if (tree_fits_uhwi_p (patchable_function_entry_value1))\n-\tpatch_area_size = tree_to_uhwi (patchable_function_entry_value1);\n-      else\n-\tgcc_unreachable ();\n-\n+      patch_area_size = tree_to_uhwi (patchable_function_entry_value1);\n       patch_area_entry = 0;\n-      if (list_length (pp_val) > 1)\n+      if (TREE_CHAIN (pp_val) != NULL_TREE)\n \t{\n-\t  tree patchable_function_entry_value2 =\n-\t    TREE_VALUE (TREE_CHAIN (pp_val));\n-\n-\t  if (tree_fits_uhwi_p (patchable_function_entry_value2))\n-\t    patch_area_entry = tree_to_uhwi (patchable_function_entry_value2);\n-\t  else\n-\t    gcc_unreachable ();\n+\t  tree patchable_function_entry_value2\n+\t    = TREE_VALUE (TREE_CHAIN (pp_val));\n+\t  patch_area_entry = tree_to_uhwi (patchable_function_entry_value2);\n \t}\n     }\n \n   if (patch_area_entry > patch_area_size)\n     {\n       if (patch_area_size > 0)\n-\twarning (OPT_Wattributes, \"Patchable function entry > size\");\n+\twarning (OPT_Wattributes, \"patchable function entry > size\");\n       patch_area_entry = 0;\n     }\n \n@@ -1906,7 +1898,8 @@ assemble_start_function (tree decl, const char *fnname)\n   /* And the area after the label.  Record it if we haven't done so yet.  */\n   if (patch_area_size > patch_area_entry)\n     targetm.asm_out.print_patchable_function_entry (asm_out_file,\n-\t\t\t\t\t     patch_area_size-patch_area_entry,\n+\t\t\t\t\t\t    patch_area_size\n+\t\t\t\t\t\t    - patch_area_entry,\n \t\t\t\t\t\t    patch_area_entry == 0);\n \n   if (lookup_attribute (\"no_split_stack\", DECL_ATTRIBUTES (decl)))"}]}