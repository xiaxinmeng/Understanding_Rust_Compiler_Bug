{"sha": "b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjljMWE3M2U2ZDgzMzFmOGI0ZTViYzliZGJhOGRkZGEyOWM4MDA3Zg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-11T18:45:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-19T13:36:10Z"}, "message": "Trait item functions contain a block expression for its body", "tree": {"sha": "17e44aad70a21d5afb0f7060729b5cc4b31ee369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e44aad70a21d5afb0f7060729b5cc4b31ee369"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2148d2f9749d71a866f93335e1482f133d189b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2148d2f9749d71a866f93335e1482f133d189b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2148d2f9749d71a866f93335e1482f133d189b4e"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "f50e66f03888a8ee862e2c085219a024c45d106d", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f", "patch": "@@ -354,10 +354,12 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\t std::move (function_params),\n \t\t\t\t std::move (return_type),\n \t\t\t\t std::move (where_clause));\n-    HIR::Expr *block_expr\n-      = func.has_definition ()\n-\t  ? ASTLoweringExpr::translate (func.get_definition ().get ())\n-\t  : nullptr;\n+    bool terminated = false;\n+    std::unique_ptr<HIR::BlockExpr> block_expr\n+      = func.has_definition () ? std::unique_ptr<HIR::BlockExpr> (\n+\t  ASTLoweringBlock::translate (func.get_definition ().get (),\n+\t\t\t\t       &terminated))\n+\t\t\t       : nullptr;\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, func.get_node_id (),\n@@ -366,8 +368,8 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \n     HIR::TraitItemFunc *trait_item\n       = new HIR::TraitItemFunc (mapping, std::move (decl),\n-\t\t\t\tstd::unique_ptr<HIR::Expr> (block_expr),\n-\t\t\t\tfunc.get_outer_attrs (), func.get_locus ());\n+\t\t\t\tstd::move (block_expr), func.get_outer_attrs (),\n+\t\t\t\tfunc.get_locus ());\n     translated = trait_item;\n     mappings->insert_hir_trait_item (mapping.get_crate_num (),\n \t\t\t\t     mapping.get_hirid (), translated);\n@@ -423,10 +425,12 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\t std::move (function_params),\n \t\t\t\t std::move (return_type),\n \t\t\t\t std::move (where_clause));\n-    HIR::Expr *block_expr\n-      = method.has_definition ()\n-\t  ? ASTLoweringExpr::translate (method.get_definition ().get ())\n-\t  : nullptr;\n+    bool terminated = false;\n+    std::unique_ptr<HIR::BlockExpr> block_expr\n+      = method.has_definition () ? std::unique_ptr<HIR::BlockExpr> (\n+\t  ASTLoweringBlock::translate (method.get_definition ().get (),\n+\t\t\t\t       &terminated))\n+\t\t\t\t : nullptr;\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, method.get_node_id (),\n@@ -435,7 +439,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \n     HIR::TraitItemFunc *trait_item\n       = new HIR::TraitItemFunc (mapping, std::move (decl),\n-\t\t\t\tstd::unique_ptr<HIR::Expr> (block_expr),\n+\t\t\t\tstd::move (block_expr),\n \t\t\t\tmethod.get_outer_attrs (), method.get_locus ());\n     translated = trait_item;\n     mappings->insert_hir_trait_item (mapping.get_crate_num (),"}, {"sha": "3ce13426f75f4316d7a4307550c62f1243e582a7", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f", "patch": "@@ -2270,16 +2270,16 @@ class TraitItemFunc : public TraitItem\n {\n   AST::AttrVec outer_attrs;\n   TraitFunctionDecl decl;\n-  std::unique_ptr<Expr> block_expr;\n+  std::unique_ptr<BlockExpr> block_expr;\n   Location locus;\n \n public:\n   // Returns whether function has a definition or is just a declaration.\n   bool has_definition () const { return block_expr != nullptr; }\n \n   TraitItemFunc (Analysis::NodeMapping mappings, TraitFunctionDecl decl,\n-\t\t std::unique_ptr<Expr> block_expr, AST::AttrVec outer_attrs,\n-\t\t Location locus)\n+\t\t std::unique_ptr<BlockExpr> block_expr,\n+\t\t AST::AttrVec outer_attrs, Location locus)\n     : TraitItem (mappings), outer_attrs (std::move (outer_attrs)),\n       decl (std::move (decl)), block_expr (std::move (block_expr)),\n       locus (locus)\n@@ -2291,7 +2291,7 @@ class TraitItemFunc : public TraitItem\n       decl (other.decl), locus (other.locus)\n   {\n     if (other.block_expr != nullptr)\n-      block_expr = other.block_expr->clone_expr ();\n+      block_expr = other.block_expr->clone_block_expr ();\n   }\n \n   // Overloaded assignment operator to clone\n@@ -2303,7 +2303,7 @@ class TraitItemFunc : public TraitItem\n     locus = other.locus;\n     mappings = other.mappings;\n     if (other.block_expr != nullptr)\n-      block_expr = other.block_expr->clone_expr ();\n+      block_expr = other.block_expr->clone_block_expr ();\n \n     return *this;\n   }\n@@ -2322,12 +2322,17 @@ class TraitItemFunc : public TraitItem\n \n   bool has_block_defined () const { return block_expr != nullptr; }\n \n-  std::unique_ptr<Expr> &get_block_expr ()\n+  std::unique_ptr<BlockExpr> &get_block_expr ()\n   {\n     rust_assert (has_block_defined ());\n     return block_expr;\n   }\n \n+  const std::string trait_identifier () const override final\n+  {\n+    return decl.get_function_name ();\n+  }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemFunc *clone_trait_item_impl () const override\n@@ -2400,6 +2405,8 @@ class TraitItemConst : public TraitItem\n     return expr;\n   }\n \n+  const std::string trait_identifier () const override final { return name; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemConst *clone_trait_item_impl () const override\n@@ -2474,6 +2481,8 @@ class TraitItemType : public TraitItem\n     return type_param_bounds;\n   }\n \n+  const std::string trait_identifier () const override final { return name; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemType *clone_trait_item_impl () const override"}, {"sha": "b8acf1a6e4095d41d66b68de15fc6afb5555e252", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=b9c1a73e6d8331f8b4e5bc9bdba8ddda29c8007f", "patch": "@@ -646,7 +646,9 @@ class TraitItem\n \n   virtual void accept_vis (HIRVisitor &vis) = 0;\n \n-  const Analysis::NodeMapping &get_mappings () const { return mappings; }\n+  virtual const std::string trait_identifier () const = 0;\n+\n+  const Analysis::NodeMapping get_mappings () const { return mappings; }\n };\n \n class ImplItem"}]}