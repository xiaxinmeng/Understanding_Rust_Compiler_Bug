{"sha": "0db1a7c2e9eec808d271c1ad5c326713f9816dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiMWE3YzJlOWVlYzgwOGQyNzFjMWFkNWMzMjY3MTNmOTgxNmRkMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-19T08:57:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-19T08:57:24Z"}, "message": "re PR middle-end/89303 (memory leak with shared_ptr and enable_shared_from_this)\n\n\tPR middle-end/89303\n\t* g++.dg/torture/pr89303.C: Move everything from std namespace to my\n\tnamespace.\n\nFrom-SVN: r269010", "tree": {"sha": "128930838f9697f81d6f352955c77b7868fa45e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128930838f9697f81d6f352955c77b7868fa45e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0db1a7c2e9eec808d271c1ad5c326713f9816dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db1a7c2e9eec808d271c1ad5c326713f9816dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db1a7c2e9eec808d271c1ad5c326713f9816dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db1a7c2e9eec808d271c1ad5c326713f9816dd3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5fe39d47c336e55acb80aa08e24e307e9262a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5fe39d47c336e55acb80aa08e24e307e9262a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5fe39d47c336e55acb80aa08e24e307e9262a83"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "ab23500edd8cb9bb4bb49c2566f7156fabfc3ded", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db1a7c2e9eec808d271c1ad5c326713f9816dd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db1a7c2e9eec808d271c1ad5c326713f9816dd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0db1a7c2e9eec808d271c1ad5c326713f9816dd3", "patch": "@@ -1,5 +1,9 @@\n 2019-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/89303\n+\t* g++.dg/torture/pr89303.C: Move everything from std namespace to my\n+\tnamespace.\n+\n \tPR c++/89387\n \t* g++.dg/cpp0x/lambda/lambda-89387.C: New test.\n "}, {"sha": "abdd353c6cc22cc5993589196b7623d198315e3c", "filename": "gcc/testsuite/g++.dg/torture/pr89303.C", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db1a7c2e9eec808d271c1ad5c326713f9816dd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr89303.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db1a7c2e9eec808d271c1ad5c326713f9816dd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr89303.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr89303.C?ref=0db1a7c2e9eec808d271c1ad5c326713f9816dd3", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run }\n // { dg-additional-options \"-std=c++14\" }\n \n-namespace std\n+namespace my\n {\n   typedef __SIZE_TYPE__ size_t;\n   typedef decltype(nullptr) nullptr_t;\n@@ -172,28 +172,28 @@ template <class... T> using __void_t = typename void_details ::make_void<T...>::\n \n   template<typename _Tp>\n     constexpr _Tp&&\n-    forward(typename std::remove_reference<_Tp>::type& __t) noexcept\n+    forward(typename my::remove_reference<_Tp>::type& __t) noexcept\n     { return static_cast<_Tp&&>(__t); }\n \n   template<typename _Tp>\n     constexpr _Tp&&\n-    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept\n+    forward(typename my::remove_reference<_Tp>::type&& __t) noexcept\n     {\n       return static_cast<_Tp&&>(__t);\n     }\n \n   template<typename _Tp>\n-    constexpr typename std::remove_reference<_Tp>::type&&\n+    constexpr typename my::remove_reference<_Tp>::type&&\n     move(_Tp&& __t) noexcept\n-    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+    { return static_cast<typename my::remove_reference<_Tp>::type&&>(__t); }\n }\n        \n-inline void* operator new(std::size_t, void* p) { return p; }\n+inline void* operator new(my::size_t, void* p) { return p; }\n \n-extern \"C\" void* malloc(std::size_t);\n+extern \"C\" void* malloc(my::size_t);\n extern \"C\" void free(void*);\n \n-namespace std\n+namespace my\n {\n   template<typename T>\n     class allocator\n@@ -254,7 +254,7 @@ namespace std\n       using value_type = _Tp;\n       using pointer = _Tp*;\n       using const_pointer = const _Tp*;\n-      using size_type = std::size_t;\n+      using size_type = my::size_t;\n \n       static pointer\n       allocate(allocator_type& __a, size_type __n)\n@@ -267,7 +267,7 @@ namespace std\n       template<typename _Up, typename... _Args>\n         static void\n         construct(allocator_type& __a, _Up* __p, _Args&&... __args)\n-        { __a.construct(__p, std::forward<_Args>(__args)...); }\n+        { __a.construct(__p, my::forward<_Args>(__args)...); }\n \n       template<typename _Up>\n         static void\n@@ -282,13 +282,13 @@ namespace std\n       using value_type = typename allocator_traits<_Alloc>::value_type;\n \n       __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept\n-      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)\n+      : _M_alloc(my::__addressof(__a)), _M_ptr(__ptr)\n       { }\n \n       template<typename _Ptr,\n         typename _Req = _Require<is_same<_Ptr, value_type*>>>\n       __allocated_ptr(_Alloc& __a, _Ptr __ptr)\n-      : _M_alloc(std::__addressof(__a)),\n+      : _M_alloc(my::__addressof(__a)),\n       _M_ptr(__ptr)\n       { }\n \n@@ -299,11 +299,11 @@ namespace std\n       ~__allocated_ptr()\n       {\n         if (_M_ptr != nullptr)\n-          std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);\n+          my::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);\n       }\n \n       __allocated_ptr&\n-      operator=(std::nullptr_t) noexcept\n+      operator=(my::nullptr_t) noexcept\n       {\n         _M_ptr = nullptr;\n         return *this;\n@@ -320,7 +320,7 @@ namespace std\n     __allocated_ptr<_Alloc>\n     __allocate_guarded(_Alloc& __a)\n     {\n-      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };\n+      return { __a, my::allocator_traits<_Alloc>::allocate(__a, 1) };\n     }\n \n   template<typename _Tp>\n@@ -350,11 +350,11 @@ namespace std\n       { return static_cast<const _Tp*>(_M_addr()); }\n     };\n \n-  class bad_weak_ptr_ { };\n+  class bad_weak_ptr { };\n \n   inline void\n   __throw_bad_weak_ptr()\n-  { (throw (bad_weak_ptr_())); }\n+  { (throw (bad_weak_ptr())); }\n \n     class _Sp_counted_base\n     {\n@@ -461,7 +461,7 @@ namespace std\n         : _M_impl(__a)\n         {\n           allocator_traits<_Alloc>::construct(__a, _M_ptr(),\n-              std::forward<_Args>(__args)...);\n+              my::forward<_Args>(__args)...);\n         }\n \n       ~_Sp_counted_ptr_inplace() noexcept { }\n@@ -500,10 +500,10 @@ namespace std\n       {\n         typedef _Sp_counted_ptr_inplace<_Tp, _Alloc> _Sp_cp_type;\n         typename _Sp_cp_type::__allocator_type __a2(__a._M_a);\n-        auto __guard = std::__allocate_guarded(__a2);\n+        auto __guard = my::__allocate_guarded(__a2);\n         _Sp_cp_type* __mem = __guard.get();\n         auto __pi = ::new (__mem)\n-          _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);\n+          _Sp_cp_type(__a._M_a, my::forward<_Args>(__args)...);\n         __guard = nullptr;\n         _M_pi = __pi;\n         __p = __pi->_M_ptr();\n@@ -631,7 +631,7 @@ namespace std\n \n       template<typename _Alloc, typename... _Args>\n         shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)\n-        : _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)\n+        : _M_ptr(), _M_refcount(_M_ptr, __tag, my::forward<_Args>(__args)...)\n         { _M_enable_shared_from_this_with(_M_ptr); }\n \n       template<typename _Tp1, typename _Alloc,\n@@ -645,8 +645,8 @@ namespace std\n \n       template<typename _Yp>\n         using __esft_base_t = decltype(__enable_shared_from_this_base(\n-              std::declval<const __shared_count&>(),\n-              std::declval<_Yp*>()));\n+              my::declval<const __shared_count&>(),\n+              my::declval<_Yp*>()));\n \n       template<typename _Yp, typename = void>\n         struct __has_esft_base\n@@ -757,20 +757,20 @@ namespace std\n     allocate_shared(const _Alloc& __a, _Args&&... __args)\n     {\n       return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},\n-        std::forward<_Args>(__args)...);\n+        my::forward<_Args>(__args)...);\n     }\n \n   template<typename _Tp, typename... _Args>\n     inline shared_ptr<_Tp>\n     make_shared(_Args&&... __args)\n     {\n-      typedef typename std::remove_const<_Tp>::type _Tp_nc;\n-      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),\n-           std::forward<_Args>(__args)...);\n+      typedef typename my::remove_const<_Tp>::type _Tp_nc;\n+      return my::allocate_shared<_Tp>(my::allocator<_Tp_nc>(),\n+           my::forward<_Args>(__args)...);\n     }\n }\n \n-class blob final: public std::enable_shared_from_this<blob>\n+class blob final: public my::enable_shared_from_this<blob>\n {\n   int* data;\n \n@@ -780,13 +780,13 @@ public:\n };\n \n static int\n-bar(std::shared_ptr<blob>)\n+bar(my::shared_ptr<blob>)\n {\n   return 0;\n }\n \n int main()\n {\n-  std::shared_ptr<blob> tg = std::make_shared<blob>();\n+  my::shared_ptr<blob> tg = my::make_shared<blob>();\n   return tg->shared_from_this().use_count() - 2;\n }"}]}