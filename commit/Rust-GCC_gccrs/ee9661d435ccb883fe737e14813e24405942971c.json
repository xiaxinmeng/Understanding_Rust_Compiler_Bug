{"sha": "ee9661d435ccb883fe737e14813e24405942971c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU5NjYxZDQzNWNjYjg4M2ZlNzM3ZTE0ODEzZTI0NDA1OTQyOTcxYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-12-25T03:24:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-25T03:24:51Z"}, "message": "re PR c++/69005 (infinite(?) recursion in template instantiations)\n\n\tPR c++/69005\n\n\t* call.c (add_template_candidate_real): Don't try to deduce X(X).\n\nFrom-SVN: r231952", "tree": {"sha": "e65fcae433ddcb754e0829e802b900eff22a553a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e65fcae433ddcb754e0829e802b900eff22a553a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee9661d435ccb883fe737e14813e24405942971c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9661d435ccb883fe737e14813e24405942971c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9661d435ccb883fe737e14813e24405942971c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9661d435ccb883fe737e14813e24405942971c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36e7989ff07dab6bbf4e2f7ea1b577a4027c4772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e7989ff07dab6bbf4e2f7ea1b577a4027c4772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e7989ff07dab6bbf4e2f7ea1b577a4027c4772"}], "stats": {"total": 85, "additions": 63, "deletions": 22}, "files": [{"sha": "4c7e38452ecbd59e83439ed1c08932b48d385181", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9661d435ccb883fe737e14813e24405942971c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9661d435ccb883fe737e14813e24405942971c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee9661d435ccb883fe737e14813e24405942971c", "patch": "@@ -1,3 +1,8 @@\n+2015-12-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/69005\n+\t* call.c (add_template_candidate_real): Don't try to deduce X(X).\n+\n 2015-12-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/66921"}, {"sha": "4f253563417facb91efc5e5c761f58bbd7fa34fa", "filename": "gcc/cp/call.c", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9661d435ccb883fe737e14813e24405942971c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9661d435ccb883fe737e14813e24405942971c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ee9661d435ccb883fe737e14813e24405942971c", "patch": "@@ -3037,6 +3037,34 @@ add_template_candidate_real (struct z_candidate **candidates, tree tmpl,\n   if (len < skip_without_in_chrg)\n     return NULL;\n \n+  if (DECL_CONSTRUCTOR_P (tmpl) && nargs == 2\n+      && same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (first_arg),\n+\t\t\t\t\t\t    TREE_TYPE ((*arglist)[0])))\n+    {\n+      /* 12.8/6 says, \"A declaration of a constructor for a class X is\n+\t ill-formed if its first parameter is of type (optionally cv-qualified)\n+\t X and either there are no other parameters or else all other\n+\t parameters have default arguments. A member function template is never\n+\t instantiated to produce such a constructor signature.\"\n+\n+\t So if we're trying to copy an object of the containing class, don't\n+\t consider a template constructor that has a first parameter type that\n+\t is just a template parameter, as we would deduce a signature that we\n+\t would then reject in the code below.  */\n+      if (tree firstparm = FUNCTION_FIRST_USER_PARMTYPE (tmpl))\n+\t{\n+\t  firstparm = TREE_VALUE (firstparm);\n+\t  if (PACK_EXPANSION_P (firstparm))\n+\t    firstparm = PACK_EXPANSION_PATTERN (firstparm);\n+\t  if (TREE_CODE (firstparm) == TEMPLATE_TYPE_PARM)\n+\t    {\n+\t      gcc_assert (!explicit_targs);\n+\t      reason = invalid_copy_with_fn_template_rejection ();\n+\t      goto fail;\n+\t    }\n+\t}\n+    }\n+\n   nargs_without_in_chrg = ((first_arg_without_in_chrg != NULL_TREE ? 1 : 0)\n \t\t\t   + (len - skip_without_in_chrg));\n   args_without_in_chrg = XALLOCAVEC (tree, nargs_without_in_chrg);\n@@ -3075,34 +3103,15 @@ add_template_candidate_real (struct z_candidate **candidates, tree tmpl,\n       goto fail;\n     }\n \n-  /* In [class.copy]:\n-\n-       A member function template is never instantiated to perform the\n-       copy of a class object to an object of its class type.\n-\n-     It's a little unclear what this means; the standard explicitly\n-     does allow a template to be used to copy a class.  For example,\n-     in:\n-\n-       struct A {\n-\t A(A&);\n-\t template <class T> A(const T&);\n-       };\n-       const A f ();\n-       void g () { A a (f ()); }\n-\n-     the member template will be used to make the copy.  The section\n-     quoted above appears in the paragraph that forbids constructors\n-     whose only parameter is (a possibly cv-qualified variant of) the\n-     class type, and a logical interpretation is that the intent was\n-     to forbid the instantiation of member templates which would then\n-     have that form.  */\n   if (DECL_CONSTRUCTOR_P (fn) && nargs == 2)\n     {\n       tree arg_types = FUNCTION_FIRST_USER_PARMTYPE (fn);\n       if (arg_types && same_type_p (TYPE_MAIN_VARIANT (TREE_VALUE (arg_types)),\n \t\t\t\t    ctype))\n \t{\n+\t  /* We're trying to produce a constructor with a prohibited signature,\n+\t     as discussed above; handle here any cases we didn't catch then,\n+\t     such as X(X<T>).  */\n \t  reason = invalid_copy_with_fn_template_rejection ();\n \t  goto fail;\n \t}"}, {"sha": "fea453740e0bee151089a5e46c477cc3e575a55c", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted50.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9661d435ccb883fe737e14813e24405942971c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9661d435ccb883fe737e14813e24405942971c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted50.C?ref=ee9661d435ccb883fe737e14813e24405942971c", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/69005\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T> T& declval();\n+\n+template<typename _Sig> class function;\n+\n+template<typename _Res, typename _Arg>\n+struct function<_Res(_Arg)>\n+{\n+  function() noexcept { }\n+\n+  function(const function&) { }\n+\n+  template<typename _Functor,\n+\t   typename = decltype(declval<_Functor&>()(declval<_Arg>()))>\n+  function(_Functor) { }\n+\n+  _Res operator()(_Arg) const;\n+};\n+\n+struct Foo {\n+  function<void(Foo)> Func;\n+};\n+\n+extern Foo exfoo;\n+Foo f (exfoo);"}]}