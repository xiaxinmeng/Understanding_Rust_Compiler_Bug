{"sha": "0094f36221a26a8282769390d0f4a2f14602c908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5NGYzNjIyMWEyNmE4MjgyNzY5MzkwZDBmNGEyZjE0NjAyYzkwOA==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-06-05T22:41:29Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-06-05T22:41:29Z"}, "message": "re PR libfortran/27895 (problem with RESHAPE and zero-sized arrays)\n\n\tPR libfortran/27895\n\n\t* resolve.c (compute_last_value_for_triplet): New function.\n\t(check_dimension): Correctly handle zero-sized array sections.\n\tAdd checking on last element of array sections.\n\n\t* gfortran.dg/bounds_check_3.f90: New test.\n\nFrom-SVN: r114414", "tree": {"sha": "ce94ddf6743e1f49f94120c6d4c19f7e8f3da76e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce94ddf6743e1f49f94120c6d4c19f7e8f3da76e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0094f36221a26a8282769390d0f4a2f14602c908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0094f36221a26a8282769390d0f4a2f14602c908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0094f36221a26a8282769390d0f4a2f14602c908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0094f36221a26a8282769390d0f4a2f14602c908/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ac3ed6b75d80704a706dbd2f9f33594d657af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ac3ed6b75d80704a706dbd2f9f33594d657af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ac3ed6b75d80704a706dbd2f9f33594d657af7"}], "stats": {"total": 201, "additions": 192, "deletions": 9}, "files": [{"sha": "776394e71e666926771f089c66cd2d555447d24f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0094f36221a26a8282769390d0f4a2f14602c908/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0094f36221a26a8282769390d0f4a2f14602c908/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0094f36221a26a8282769390d0f4a2f14602c908", "patch": "@@ -1,3 +1,10 @@\n+2006-06-05  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/27895\n+\t* resolve.c (compute_last_value_for_triplet): New function.\n+\t(check_dimension): Correctly handle zero-sized array sections.\n+\tAdd checking on last element of array sections.\n+\n 2006-06-05  Steven G. Kargl  <kargls@comcast.net>\n \n \t* data.c (gfc_assign_data_value):  Fix comment typo.  Remove"}, {"sha": "8e54d3c89fc938831f39a89495bb7b082ad9c451", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 107, "deletions": 5, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0094f36221a26a8282769390d0f4a2f14602c908/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0094f36221a26a8282769390d0f4a2f14602c908/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=0094f36221a26a8282769390d0f4a2f14602c908", "patch": "@@ -2100,12 +2100,86 @@ compare_bound_int (gfc_expr * a, int b)\n }\n \n \n+/* Compare an integer expression with a mpz_t.  */\n+\n+static comparison\n+compare_bound_mpz_t (gfc_expr * a, mpz_t b)\n+{\n+  int i;\n+\n+  if (a == NULL || a->expr_type != EXPR_CONSTANT)\n+    return CMP_UNKNOWN;\n+\n+  if (a->ts.type != BT_INTEGER)\n+    gfc_internal_error (\"compare_bound_int(): Bad expression\");\n+\n+  i = mpz_cmp (a->value.integer, b);\n+\n+  if (i < 0)\n+    return CMP_LT;\n+  if (i > 0)\n+    return CMP_GT;\n+  return CMP_EQ;\n+}\n+\n+\n+/* Compute the last value of a sequence given by a triplet.  \n+   Return 0 if it wasn't able to compute the last value, or if the\n+   sequence if empty, and 1 otherwise.  */\n+\n+static int\n+compute_last_value_for_triplet (gfc_expr * start, gfc_expr * end,\n+\t\t\t\tgfc_expr * stride, mpz_t last)\n+{\n+  mpz_t rem;\n+\n+  if (start == NULL || start->expr_type != EXPR_CONSTANT\n+      || end == NULL || end->expr_type != EXPR_CONSTANT\n+      || (stride != NULL && stride->expr_type != EXPR_CONSTANT))\n+    return 0;\n+\n+  if (start->ts.type != BT_INTEGER || end->ts.type != BT_INTEGER\n+      || (stride != NULL && stride->ts.type != BT_INTEGER))\n+    return 0;\n+\n+  if (stride == NULL || compare_bound_int(stride, 1) == CMP_EQ)\n+    {\n+      if (compare_bound (start, end) == CMP_GT)\n+\treturn 0;\n+      mpz_set (last, end->value.integer);\n+      return 1;\n+    }\n+  \n+  if (compare_bound_int (stride, 0) == CMP_GT)\n+    {\n+      /* Stride is positive */\n+      if (mpz_cmp (start->value.integer, end->value.integer) > 0)\n+\treturn 0;\n+    }\n+  else\n+    {\n+      /* Stride is negative */\n+      if (mpz_cmp (start->value.integer, end->value.integer) < 0)\n+\treturn 0;\n+    }\n+\n+  mpz_init (rem);\n+  mpz_sub (rem, end->value.integer, start->value.integer);\n+  mpz_tdiv_r (rem, rem, stride->value.integer);\n+  mpz_sub (last, end->value.integer, rem);\n+  mpz_clear (rem);\n+\n+  return 1;\n+}\n+\n+\n /* Compare a single dimension of an array reference to the array\n    specification.  */\n \n static try\n check_dimension (int i, gfc_array_ref * ar, gfc_array_spec * as)\n {\n+  mpz_t last_value;\n \n /* Given start, end and stride values, calculate the minimum and\n    maximum referenced indexes.  */\n@@ -2130,13 +2204,41 @@ check_dimension (int i, gfc_array_ref * ar, gfc_array_spec * as)\n \t  return FAILURE;\n \t}\n \n-      if (compare_bound (ar->start[i], as->lower[i]) == CMP_LT)\n-\tgoto bound;\n-      if (compare_bound (ar->start[i], as->upper[i]) == CMP_GT)\n+#define AR_START (ar->start[i] ? ar->start[i] : as->lower[i])\n+#define AR_END (ar->end[i] ? ar->end[i] : as->upper[i])\n+\n+      if (compare_bound (AR_START, AR_END) == CMP_EQ\n+\t  && (compare_bound (AR_START, as->lower[i]) == CMP_LT\n+\t      || compare_bound (AR_START, as->upper[i]) == CMP_GT))\n \tgoto bound;\n \n-      /* TODO: Possibly, we could warn about end[i] being out-of-bound although\n-         it is legal (see 6.2.2.3.1).  */\n+      if (((compare_bound_int (ar->stride[i], 0) == CMP_GT\n+\t    || ar->stride[i] == NULL)\n+\t   && compare_bound (AR_START, AR_END) != CMP_GT)\n+\t  || (compare_bound_int (ar->stride[i], 0) == CMP_LT\n+\t      && compare_bound (AR_START, AR_END) != CMP_LT))\n+\t{\n+\t  if (compare_bound (AR_START, as->lower[i]) == CMP_LT)\n+\t    goto bound;\n+\t  if (compare_bound (AR_START, as->upper[i]) == CMP_GT)\n+\t    goto bound;\n+\t}\n+\n+      mpz_init (last_value);\n+      if (compute_last_value_for_triplet (AR_START, AR_END, ar->stride[i],\n+\t\t\t\t\t  last_value))\n+\t{\n+\t  if (compare_bound_mpz_t (as->lower[i], last_value) == CMP_GT\n+\t      || compare_bound_mpz_t (as->upper[i], last_value) == CMP_LT)\n+\t    {\n+\t      mpz_clear (last_value);\n+\t      goto bound;\n+\t    }\n+\t}\n+      mpz_clear (last_value);\n+\n+#undef AR_START\n+#undef AR_END\n \n       break;\n "}, {"sha": "2a597d4156e17d38047773fd9b22ca020531d085", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0094f36221a26a8282769390d0f4a2f14602c908/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0094f36221a26a8282769390d0f4a2f14602c908/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0094f36221a26a8282769390d0f4a2f14602c908", "patch": "@@ -1,3 +1,8 @@\n+2006-06-05  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/27895\n+\t* gfortran.dg/bounds_check_3.f90: New test.\n+\n 2006-06-05  Mike Stump  <mrs@apple.com>\n \n \t* objc.dg/objc-fast-4.m: Skip for ppc64.\n@@ -10,10 +15,10 @@\n 2006-06-05  Dorit Nuzman  <dorit@il.ibm.com>\n             Victor Kaplansky  <victork@il.ibm.com>\n \t    \n-        PR tree-optimizations/26360\n-        * gcc.dg/vect/vect.exp: Compile tests prefixed with \"no-tree-dce\"\n-        with -fno-tree-dce.\n-        * gcc.dg/vect/no-tree-dce-pr26360.c: New test.\n+\tPR tree-optimizations/26360\n+\t* gcc.dg/vect/vect.exp: Compile tests prefixed with \"no-tree-dce\"\n+\twith -fno-tree-dce.\n+\t* gcc.dg/vect/no-tree-dce-pr26360.c: New test.\n \n 2006-06-05  Paul Thomas  <pault@gcc.gnu.org>\n "}, {"sha": "5fb96b8dd2f322687d286c0840ec90bc857315ec", "filename": "gcc/testsuite/gfortran.dg/bounds_check_3.f90", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0094f36221a26a8282769390d0f4a2f14602c908/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0094f36221a26a8282769390d0f4a2f14602c908/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_3.f90?ref=0094f36221a26a8282769390d0f4a2f14602c908", "patch": "@@ -0,0 +1,69 @@\n+! { dg-do compile }\n+  integer,parameter :: n = 5, m = 8\n+  integer a(10), i\n+\n+  print *, a(15:14) ! don't warn\n+  print *, a(14:15) ! { dg-warning \"is out of bounds\" }\n+  print *, a(-5:-6) ! don't warn\n+  print *, a(-6:-5) ! { dg-warning \"is out of bounds\" }\n+  print *, a(15:14:1) ! don't warn\n+  print *, a(14:15:1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(-5:-6:1) ! don't warn\n+  print *, a(-6:-5:1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(15:14:-1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(14:15:-1) ! don't warn\n+  print *, a(-5:-6:-1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(-6:-5:-1) ! don't warn\n+\n+  print *, a(15:) ! don't warn\n+  print *, a(15::-1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(-1:) ! { dg-warning \"is out of bounds\" }\n+  print *, a(-1::-1) ! don't warn\n+  print *, a(:-1) ! don't warn\n+  print *, a(:-1:-1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(:11) ! { dg-warning \"is out of bounds\" }\n+  print *, a(:11:-1) ! don't warn\n+\n+  print *, a(1:20:10) ! { dg-warning \"is out of bounds\" }\n+  print *, a(1:15:15) ! don't warn\n+  print *, a(1:16:15) ! { dg-warning \"is out of bounds\" }\n+  print *, a(10:15:6) ! don't warn\n+  print *, a(11:15:6) ! { dg-warning \"is out of bounds\" }\n+  print *, a(11:-5:6) ! don't warn\n+\n+  print *, a(10:-8:-9) ! { dg-warning \"is out of bounds\" }\n+  print *, a(10:-7:-9) ! don't warn\n+  \n+  print *, a(0:0:-1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(0:0:1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(0:0) ! { dg-warning \"is out of bounds\" }\n+\n+  print *, a(1:15:i) ! don't warn\n+  print *, a(1:15:n) ! { dg-warning \"is out of bounds\" }\n+  print *, a(1:15:m) ! don't warn\n+\n+  print *, a(1:-5:-m) ! don't warn\n+  print *, a(1:-5:-n) ! { dg-warning \"is out of bounds\" }\n+  print *, a(1:-5:-i) ! don't warn\n+\n+  print *, a(-5:-5) ! { dg-warning \"is out of bounds\" }\n+  print *, a(15:15) ! { dg-warning \"is out of bounds\" }\n+  print *, a(-5:-5:1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(15:15:-1) ! { dg-warning \"is out of bounds\" }\n+  print *, a(-5:-5:2) ! { dg-warning \"is out of bounds\" }\n+  print *, a(15:15:-2) ! { dg-warning \"is out of bounds\" }\n+  print *, a(-5:-5:n) ! { dg-warning \"is out of bounds\" }\n+  print *, a(15:15:-n) ! { dg-warning \"is out of bounds\" }\n+  print *, a(-5:-5:i) ! { dg-warning \"is out of bounds\" }\n+  print *, a(15:15:-i) ! { dg-warning \"is out of bounds\" }\n+  print *, a(5:5) ! don't warn\n+  print *, a(5:5:1) ! don't warn\n+  print *, a(5:5:-1) ! don't warn\n+  print *, a(5:5:2) ! don't warn\n+  print *, a(5:5:-2) ! don't warn\n+  print *, a(5:5:n) ! don't warn\n+  print *, a(5:5:-n) ! don't warn\n+  print *, a(5:5:i) ! don't warn\n+  print *, a(5:5:-i) ! don't warn\n+\n+  end"}]}