{"sha": "260caabe10cde0158b87968a3bac85575301dafa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYwY2FhYmUxMGNkZTAxNThiODc5NjhhM2JhYzg1NTc1MzAxZGFmYQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-02T23:46:24Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-02T23:47:19Z"}, "message": "c++: placeholder type constraint inside range-for [PR99869]\n\nIn the testcase below, during ahead-of-time deduction of a constrained\nauto inside a range-based for loop, we trip over an assert within\ndo_auto_deduction which expects the deduction context to be\nadc_return_type or adc_variable_type, but do_range_for_auto_deduction\ncalls do_auto_deduction with the context defaulted to adc_unspecified.\n\nWe could safely relax the assert to also accept adc_unspecified, but it\nseems the deduction context should really be adc_variable_type here.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99869\n\t* parser.c (do_range_for_auto_deduction): Pass adc_variable_type\n\tto do_auto_deduction.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99869\n\t* g++.dg/cpp2a/concepts-placeholder6.C: New test.", "tree": {"sha": "bbe2e8d154e852dd2848dfcacf9c33082faaef54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbe2e8d154e852dd2848dfcacf9c33082faaef54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/260caabe10cde0158b87968a3bac85575301dafa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260caabe10cde0158b87968a3bac85575301dafa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/260caabe10cde0158b87968a3bac85575301dafa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260caabe10cde0158b87968a3bac85575301dafa/comments", "author": null, "committer": null, "parents": [{"sha": "cf25e27faef75e265e659f39ef6b7d0f1695dfeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf25e27faef75e265e659f39ef6b7d0f1695dfeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf25e27faef75e265e659f39ef6b7d0f1695dfeb"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "808e5b61b1ef9e979518c19a3c5472b8e4ffbb42", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260caabe10cde0158b87968a3bac85575301dafa/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260caabe10cde0158b87968a3bac85575301dafa/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=260caabe10cde0158b87968a3bac85575301dafa", "patch": "@@ -12878,7 +12878,9 @@ do_range_for_auto_deduction (tree decl, tree range_expr)\n \t\t\t\t\t    RO_UNARY_STAR,\n \t\t\t\t\t    tf_warning_or_error);\n \t  TREE_TYPE (decl) = do_auto_deduction (TREE_TYPE (decl),\n-\t\t\t\t\t\titer_decl, auto_node);\n+\t\t\t\t\t\titer_decl, auto_node,\n+\t\t\t\t\t\ttf_warning_or_error,\n+\t\t\t\t\t\tadc_variable_type);\n \t}\n     }\n }"}, {"sha": "fe1e3927129883d35115511871f8d55c44c5d910", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder6.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260caabe10cde0158b87968a3bac85575301dafa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260caabe10cde0158b87968a3bac85575301dafa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder6.C?ref=260caabe10cde0158b87968a3bac85575301dafa", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/99869\n+// { dg-do compile { target c++20 } }\n+\n+template <class T, class U> concept same_as = __is_same(T, U);\n+\n+template <class>\n+void f() {\n+  for (same_as<int> auto c : \"\") {} // { dg-error \"constraint\" }\n+  for (same_as<char> auto c : \"\") {}\n+}"}]}