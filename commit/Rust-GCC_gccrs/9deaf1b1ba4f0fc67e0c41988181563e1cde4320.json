{"sha": "9deaf1b1ba4f0fc67e0c41988181563e1cde4320", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlYWYxYjFiYTRmMGZjNjdlMGM0MTk4ODE4MTU2M2UxY2RlNDMyMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-31T20:03:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-31T20:03:51Z"}, "message": "(rest_of_compilation): Leave DECL_INLINE set even if won't inline.\n\nFrom-SVN: r10916", "tree": {"sha": "f0fd9ea1e3cd08ffbdff6fedf301cb2286826998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0fd9ea1e3cd08ffbdff6fedf301cb2286826998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9deaf1b1ba4f0fc67e0c41988181563e1cde4320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9deaf1b1ba4f0fc67e0c41988181563e1cde4320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9deaf1b1ba4f0fc67e0c41988181563e1cde4320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9deaf1b1ba4f0fc67e0c41988181563e1cde4320/comments", "author": null, "committer": null, "parents": [{"sha": "e1686233d23e7833be81e2cea1341d6938bef265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1686233d23e7833be81e2cea1341d6938bef265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1686233d23e7833be81e2cea1341d6938bef265"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "75797dcb39212a60e24920634633618160e08bae", "filename": "gcc/toplev.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9deaf1b1ba4f0fc67e0c41988181563e1cde4320/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9deaf1b1ba4f0fc67e0c41988181563e1cde4320/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9deaf1b1ba4f0fc67e0c41988181563e1cde4320", "patch": "@@ -2666,21 +2666,18 @@ rest_of_compilation (decl)\n \n   if (DECL_SAVED_INSNS (decl) == 0)\n     {\n-      int specd = DECL_INLINE (decl);\n+      int inlineable = 0;\n       char *lose;\n \n       /* If requested, consider whether to make this function inline.  */\n-      if (specd || flag_inline_functions)\n+      if (DECL_INLINE (decl) || flag_inline_functions)\n \tTIMEVAR (integration_time,\n \t\t {\n \t\t   lose = function_cannot_inline_p (decl);\n-\t\t   /* If not optimizing, then make sure the DECL_INLINE\n-\t\t      bit is off.  */\n \t\t   if (lose || ! optimize)\n \t\t     {\n-\t\t       if (warn_inline && specd)\n+\t\t       if (warn_inline && DECL_INLINE (decl))\n \t\t\t warning_with_decl (decl, lose);\n-\t\t       DECL_INLINE (decl) = 0;\n \t\t       DECL_ABSTRACT_ORIGIN (decl) = 0;\n \t\t       /* Don't really compile an extern inline function.\n \t\t\t  If we can't make it inline, pretend\n@@ -2692,7 +2689,11 @@ rest_of_compilation (decl)\n \t\t\t }\n \t\t     }\n \t\t   else\n-\t\t     DECL_INLINE (decl) = 1;\n+\t\t     /* ??? Note that this has the effect of making it look\n+\t\t\tlike \"inline\" was specified for a function if we choose\n+\t\t\tto inline it.  This isn't quite right, but it's\n+\t\t\tprobably not worth the trouble to fix.  */\n+\t\t     inlineable = DECL_INLINE (decl) = 1;\n \t\t });\n \n       insns = get_insns ();\n@@ -2720,7 +2721,7 @@ rest_of_compilation (decl)\n \n       if (! current_function_contains_functions\n \t  && (DECL_DEFER_OUTPUT (decl)\n-\t      || ((specd || DECL_INLINE (decl))\n+\t      || (DECL_INLINE (decl)\n \t\t  && ((! TREE_PUBLIC (decl) && ! TREE_ADDRESSABLE (decl)\n \t\t       && ! flag_keep_inline_functions)\n \t\t      || DECL_EXTERNAL (decl)))))\n@@ -2748,7 +2749,7 @@ rest_of_compilation (decl)\n \n       /* If we have to compile the function now, save its rtl and subdecls\n \t so that its compilation will not affect what others get.  */\n-      if (DECL_INLINE (decl) || DECL_DEFER_OUTPUT (decl))\n+      if (inlineable || DECL_DEFER_OUTPUT (decl))\n \t{\n #ifdef DWARF_DEBUGGING_INFO\n \t  /* Generate the DWARF info for the \"abstract\" instance of\n@@ -2769,7 +2770,7 @@ rest_of_compilation (decl)\n \n       /* If specified extern inline but we aren't inlining it, we are\n \t done.  */\n-      if (specd && DECL_EXTERNAL (decl))\n+      if (DECL_INLINE (decl) && DECL_EXTERNAL (decl))\n \tgoto exit_rest_of_compilation;\n     }\n "}]}