{"sha": "ccd7751b3424a4e5082a57341789649bc495f0c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NkNzc1MWIzNDI0YTRlNTA4MmE1NzM0MTc4OTY0OWJjNDk1ZjBjNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-03-19T21:03:14Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-03-19T21:03:14Z"}, "message": "re PR fortran/60543 (Function with side effect removed by the optimizer.)\n\n2014-03-18  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/60543\n        PR fortran/60283\n        * gfortran.h (gfc_unset_implicit_pure): New prototype.\n        * resolve.c (gfc_unset_implicit_pure): New.\n        (resolve_structure_cons, resolve_function,\n        pure_subroutine): Use it.\n        * decl.c (match_old_style_init, gfc_match_data,\n        match_pointer_init, variable_decl): Ditto.\n        * expr.c (gfc_check_pointer_assign): Ditto.\n        * intrinsic.c (gfc_intrinsic_sub_interface): Ditto.\n        * io.c (match_vtag, gfc_match_open, gfc_match_close,\n        match_filepos, gfc_match_inquire, gfc_match_print,\n        gfc_match_wait): Ditto.\n        * match.c (gfc_match_critical, gfc_match_stopcode,\n        lock_unlock_statement, sync_statement, gfc_match_allocate,\n        gfc_match_deallocate): Ditto.\n        * parse.c (decode_omp_directive): Ditto.\n        * symbol.c (gfc_add_save): Ditto.\n\n2014-03-18  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/60543\n        PR fortran/60283\n        * gfortran.dg/implicit_pure_4.f90: New.\n\nFrom-SVN: r208687", "tree": {"sha": "b646ebd40aee24f252c9460c48fd6dd3ba729e86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b646ebd40aee24f252c9460c48fd6dd3ba729e86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccd7751b3424a4e5082a57341789649bc495f0c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd7751b3424a4e5082a57341789649bc495f0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd7751b3424a4e5082a57341789649bc495f0c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd7751b3424a4e5082a57341789649bc495f0c6/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d092805ba995e042a89072bcbf2948800d87d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d092805ba995e042a89072bcbf2948800d87d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d092805ba995e042a89072bcbf2948800d87d3f"}], "stats": {"total": 181, "additions": 123, "deletions": 58}, "files": [{"sha": "1036716cd429eb96519cd99fb879d056ad73e05e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -1,3 +1,24 @@\n+2014-03-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60543\n+\tPR fortran/60283\n+\t* gfortran.h (gfc_unset_implicit_pure): New prototype.\n+\t* resolve.c (gfc_unset_implicit_pure): New.\n+\t(resolve_structure_cons, resolve_function,\n+\tpure_subroutine): Use it.\n+\t* decl.c (match_old_style_init, gfc_match_data,\n+\tmatch_pointer_init, variable_decl): Ditto.\n+\t* expr.c (gfc_check_pointer_assign): Ditto.\n+\t* intrinsic.c (gfc_intrinsic_sub_interface): Ditto.\n+\t* io.c (match_vtag, gfc_match_open, gfc_match_close,\n+\tmatch_filepos, gfc_match_inquire, gfc_match_print,\n+\tgfc_match_wait): Ditto.\n+\t* match.c (gfc_match_critical, gfc_match_stopcode,\n+\tlock_unlock_statement, sync_statement, gfc_match_allocate,\n+\tgfc_match_deallocate): Ditto.\n+\t* parse.c (decode_omp_directive): Ditto.\n+\t* symbol.c (gfc_add_save): Ditto.\n+\n 2014-03-18  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/55207"}, {"sha": "4048ac913531fecdd7c606e6ff02169c77656cd8", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -510,9 +510,7 @@ match_old_style_init (const char *name)\n       free (newdata);\n       return MATCH_ERROR;\n     }\n-\n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (gfc_current_ns->proc_name);\n \n   /* Mark the variable as having appeared in a data statement.  */\n   if (!gfc_add_data (&sym->attr, sym->name, &sym->declared_at))\n@@ -571,9 +569,7 @@ gfc_match_data (void)\n       gfc_error (\"DATA statement at %C is not allowed in a PURE procedure\");\n       return MATCH_ERROR;\n     }\n-\n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (gfc_current_ns->proc_name);\n \n   return MATCH_YES;\n \n@@ -1739,6 +1735,7 @@ match_pointer_init (gfc_expr **init, int procptr)\n \t\t \"a PURE procedure\");\n       return MATCH_ERROR;\n     }\n+  gfc_unset_implicit_pure (gfc_current_ns->proc_name);\n \n   /* Match NULL() initialization.  */\n   m = gfc_match_null (init);\n@@ -2046,6 +2043,10 @@ variable_decl (int elem)\n \t      m = MATCH_ERROR;\n \t    }\n \n+\t  if (current_attr.flavor != FL_PARAMETER\n+\t      && gfc_state_stack->state != COMP_DERIVED)\n+\t    gfc_unset_implicit_pure (gfc_current_ns->proc_name);\n+\n \t  if (m != MATCH_YES)\n \t    goto cleanup;\n \t}"}, {"sha": "f6772047e270d00d3ff48d6aeb159c099481bb25", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -3704,8 +3704,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n     }\n \n   if (is_implicit_pure && gfc_impure_variable (rvalue->symtree->n.sym))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n-\n+    gfc_unset_implicit_pure (gfc_current_ns->proc_name);\n \n   if (gfc_has_vector_index (rvalue))\n     {"}, {"sha": "14c202dd41303d5ee09c11d4864e0dc4ef00827c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -2837,6 +2837,7 @@ void gfc_resolve_blocks (gfc_code *, gfc_namespace *);\n int gfc_impure_variable (gfc_symbol *);\n int gfc_pure (gfc_symbol *);\n int gfc_implicit_pure (gfc_symbol *);\n+void gfc_unset_implicit_pure (gfc_symbol *);\n int gfc_elemental (gfc_symbol *);\n bool gfc_resolve_iterator (gfc_iterator *, bool, bool);\n bool find_forall_index (gfc_expr *, gfc_symbol *, int);"}, {"sha": "19d46202e08329f6f2dd9f668ac9da50e5c81ca3", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -4404,13 +4404,16 @@ gfc_intrinsic_sub_interface (gfc_code *c, int error_flag)\n       return MATCH_ERROR;\n     }\n \n-  if (gfc_pure (NULL) && !isym->pure)\n+  if (!isym->pure && gfc_pure (NULL))\n     {\n       gfc_error (\"Subroutine call to intrinsic '%s' at %L is not PURE\", name,\n \t\t &c->loc);\n       return MATCH_ERROR;\n     }\n \n+  if (!isym->pure)\n+    gfc_unset_implicit_pure (NULL);\n+\n   c->resolved_sym->attr.noreturn = isym->noreturn;\n \n   return MATCH_YES;"}, {"sha": "8d3dc46f803457a5e8c49140467078777f08546c", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -1305,16 +1305,17 @@ match_vtag (const io_tag *tag, gfc_expr **v)\n       return MATCH_ERROR;\n     }\n \n-  if (gfc_pure (NULL) && gfc_impure_variable (result->symtree->n.sym))\n+  bool impure = gfc_impure_variable (result->symtree->n.sym);\n+  if (impure && gfc_pure (NULL))\n     {\n       gfc_error (\"Variable %s cannot be assigned in PURE procedure at %C\",\n \t\t tag->name);\n       gfc_free_expr (result);\n       return MATCH_ERROR;\n     }\n \n-  if (gfc_implicit_pure (NULL) && gfc_impure_variable (result->symtree->n.sym))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  if (impure)\n+    gfc_unset_implicit_pure (NULL);\n \n   *v = result;\n   return MATCH_YES;\n@@ -1829,8 +1830,7 @@ gfc_match_open (void)\n       goto cleanup;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   warn = (open->err || open->iostat) ? true : false;\n \n@@ -2242,8 +2242,7 @@ gfc_match_close (void)\n       goto cleanup;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   warn = (close->iostat || close->err) ? true : false;\n \n@@ -2410,8 +2409,7 @@ match_filepos (gfc_statement st, gfc_exec_op op)\n       goto cleanup;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   new_st.op = op;\n   new_st.ext.filepos = fp;\n@@ -3793,8 +3791,7 @@ gfc_match_print (void)\n       return MATCH_ERROR;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   return MATCH_YES;\n }\n@@ -3953,8 +3950,7 @@ gfc_match_inquire (void)\n \t  return MATCH_ERROR;\n \t}\n \n-      if (gfc_implicit_pure (NULL))\n-\tgfc_current_ns->proc_name->attr.implicit_pure = 0;\n+      gfc_unset_implicit_pure (NULL);\n \n       new_st.block = gfc_get_code (EXEC_IOLENGTH);\n       terminate_io (code);\n@@ -4006,8 +4002,7 @@ gfc_match_inquire (void)\n       goto cleanup;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n   \n   if (inquire->id != NULL && inquire->pending == NULL)\n     {\n@@ -4195,8 +4190,7 @@ gfc_match_wait (void)\n       goto cleanup;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   new_st.op = EXEC_WAIT;\n   new_st.ext.wait = wait;"}, {"sha": "4c4609401a003e8331664f872e3ccf4a8fad1974", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -1751,8 +1751,7 @@ gfc_match_critical (void)\n       return MATCH_ERROR;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   if (!gfc_notify_std (GFC_STD_F2008, \"CRITICAL statement at %C\"))\n     return MATCH_ERROR;\n@@ -2676,8 +2675,7 @@ gfc_match_stopcode (gfc_statement st)\n       goto cleanup;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   if (st == ST_STOP && gfc_find_state (COMP_CRITICAL))\n     {\n@@ -2814,8 +2812,7 @@ lock_unlock_statement (gfc_statement st)\n       return MATCH_ERROR;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n@@ -3008,8 +3005,7 @@ sync_statement (gfc_statement st)\n       return MATCH_ERROR;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   if (!gfc_notify_std (GFC_STD_F2008, \"SYNC statement at %C\"))\n     return MATCH_ERROR;\n@@ -3479,15 +3475,15 @@ gfc_match_allocate (void)\n       if (gfc_check_do_variable (tail->expr->symtree))\n \tgoto cleanup;\n \n-      if (gfc_pure (NULL) && gfc_impure_variable (tail->expr->symtree->n.sym))\n+      bool impure = gfc_impure_variable (tail->expr->symtree->n.sym);\n+      if (impure && gfc_pure (NULL))\n \t{\n \t  gfc_error (\"Bad allocate-object at %C for a PURE procedure\");\n \t  goto cleanup;\n \t}\n \n-      if (gfc_implicit_pure (NULL)\n-\t    && gfc_impure_variable (tail->expr->symtree->n.sym))\n-\tgfc_current_ns->proc_name->attr.implicit_pure = 0;\n+      if (impure)\n+\tgfc_unset_implicit_pure (NULL);\n \n       if (tail->expr->ts.deferred)\n \t{\n@@ -3868,14 +3864,15 @@ gfc_match_deallocate (void)\n \n       sym = tail->expr->symtree->n.sym;\n \n-      if (gfc_pure (NULL) && gfc_impure_variable (sym))\n+      bool impure = gfc_impure_variable (sym);\n+      if (impure && gfc_pure (NULL))\n \t{\n \t  gfc_error (\"Illegal allocate-object at %C for a PURE procedure\");\n \t  goto cleanup;\n \t}\n \n-      if (gfc_implicit_pure (NULL) && gfc_impure_variable (sym))\n-\tgfc_current_ns->proc_name->attr.implicit_pure = 0;\n+      if (impure)\n+\tgfc_unset_implicit_pure (NULL);\n \n       if (gfc_is_coarray (tail->expr)\n \t  && gfc_find_state (COMP_DO_CONCURRENT))"}, {"sha": "0faf47a00412e01103ae64377e81067dca955f7c", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -550,8 +550,7 @@ decode_omp_directive (void)\n       return ST_NONE;\n     }\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n \n   old_locus = gfc_current_locus;\n "}, {"sha": "ac58167558b53bbeeb418890d0e35c422e476809", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -1328,22 +1328,19 @@ resolve_structure_cons (gfc_expr *expr, int init)\n \t}\n \n       /* F2003, C1272 (3).  */\n-      if (gfc_pure (NULL) && cons->expr->expr_type == EXPR_VARIABLE\n-\t  && (gfc_impure_variable (cons->expr->symtree->n.sym)\n-\t      || gfc_is_coindexed (cons->expr)))\n+      bool impure = cons->expr->expr_type == EXPR_VARIABLE\n+\t\t    && (gfc_impure_variable (cons->expr->symtree->n.sym)\n+\t\t\t|| gfc_is_coindexed (cons->expr));\n+      if (impure && gfc_pure (NULL))\n \t{\n \t  t = false;\n \t  gfc_error (\"Invalid expression in the structure constructor for \"\n \t\t     \"pointer component '%s' at %L in PURE procedure\",\n \t\t     comp->name, &cons->expr->where);\n \t}\n \n-      if (gfc_implicit_pure (NULL)\n-\t    && cons->expr->expr_type == EXPR_VARIABLE\n-\t    && (gfc_impure_variable (cons->expr->symtree->n.sym)\n-\t\t|| gfc_is_coindexed (cons->expr)))\n-\tgfc_current_ns->proc_name->attr.implicit_pure = 0;\n-\n+      if (impure)\n+\tgfc_unset_implicit_pure (NULL);\n     }\n \n   return t;\n@@ -3006,8 +3003,7 @@ resolve_function (gfc_expr *expr)\n \t  t = false;\n \t}\n \n-      if (gfc_implicit_pure (NULL))\n-\tgfc_current_ns->proc_name->attr.implicit_pure = 0;\n+      gfc_unset_implicit_pure (NULL);\n     }\n \n   /* Functions without the RECURSIVE attribution are not allowed to\n@@ -3072,8 +3068,7 @@ pure_subroutine (gfc_code *c, gfc_symbol *sym)\n     gfc_error (\"Subroutine call to '%s' at %L is not PURE\", sym->name,\n \t       &c->loc);\n \n-  if (gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  gfc_unset_implicit_pure (NULL);\n }\n \n \n@@ -13927,6 +13922,33 @@ gfc_implicit_pure (gfc_symbol *sym)\n }\n \n \n+void\n+gfc_unset_implicit_pure (gfc_symbol *sym)\n+{\n+  gfc_namespace *ns;\n+\n+  if (sym == NULL)\n+    {\n+      /* Check if the current procedure is implicit_pure.  Walk up\n+\t the procedure list until we find a procedure.  */\n+      for (ns = gfc_current_ns; ns; ns = ns->parent)\n+\t{\n+\t  sym = ns->proc_name;\n+\t  if (sym == NULL)\n+\t    return;\n+\n+\t  if (sym->attr.flavor == FL_PROCEDURE)\n+\t    break;\n+\t}\n+    }\n+\n+  if (sym->attr.flavor == FL_PROCEDURE)\n+    sym->attr.implicit_pure = 0;\n+  else\n+    sym->attr.pure = 0;\n+}\n+\n+\n /* Test whether the current procedure is elemental or not.  */\n \n int"}, {"sha": "19d792e0862c68bc4c356caf0cc23fd626f8a853", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -1114,8 +1114,8 @@ gfc_add_save (symbol_attribute *attr, save_state s, const char *name,\n       return false;\n     }\n \n-  if (s == SAVE_EXPLICIT && gfc_implicit_pure (NULL))\n-    gfc_current_ns->proc_name->attr.implicit_pure = 0;\n+  if (s == SAVE_EXPLICIT)\n+    gfc_unset_implicit_pure (NULL);\n \n   if (s == SAVE_EXPLICIT && attr->save == SAVE_EXPLICIT)\n     {"}, {"sha": "839aed7bcaffd24530ddba9a8b9ec3328c976d88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -1,3 +1,9 @@\n+2014-03-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60543\n+\tPR fortran/60283\n+\t* gfortran.dg/implicit_pure_4.f90: New.\n+\n 2014-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51474"}, {"sha": "8563dd721087d7fc437d307b8bde467049889135", "filename": "gcc/testsuite/gfortran.dg/implicit_pure_4.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_pure_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd7751b3424a4e5082a57341789649bc495f0c6/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_pure_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_pure_4.f90?ref=ccd7751b3424a4e5082a57341789649bc495f0c6", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+!\n+! PR fortran/60543\n+! PR fortran/60283\n+!\n+module m\n+contains\n+  REAL(8) FUNCTION random()\n+    CALL RANDOM_NUMBER(random)\n+  END FUNCTION random\n+  REAL(8) FUNCTION random2()\n+    block\n+      block\n+        block\n+          CALL RANDOM_NUMBER(random2)\n+        end block\n+      end block\n+    end block\n+  END FUNCTION random2\n+end module m\n+\n+! { dg-final { scan-module-absence \"m\" \"IMPLICIT_PURE\" } }"}]}