{"sha": "f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkwYWMzZjBlNDBmOGQ3ODc2ZjhhYmVjYzc4MmRkMGJlZmQ0ZTJhNg==", "commit": {"author": {"name": "Uttam Pawar", "email": "uttamp@us.ibm.com", "date": "2004-12-14T18:43:57Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2004-12-14T18:43:57Z"}, "message": "rs6000.c (rs6000_handle_altivec_attribute_tree): Report errors for vector types with invalid component types.\n\n\t* rs6000.c (rs6000_handle_altivec_attribute_tree): Report errors\n\tfor vector types with invalid component types.\ntestsuite:\n\t* gcc.dg/altivec-types-1.c: New test.\n\t* gcc.dg/altivec-types-2.c: New test.\n\t* gcc.dg/altivec-types-3.c: New test.\n\t* gcc.dg/altivec-types-4.c: New test.\n\t* g++.dg/ext/altivec-types-1.C: New test.\n\t* g++.dg/ext/altivec-types-2.C: New test.\n\t* g++.dg/ext/altivec-types-3.C: New test.\n\t* g++.dg/ext/altivec-types-4.C: New test.\n\nCo-Authored-By: Janis Johnson <janis187@us.ibm.com>\n\nFrom-SVN: r92154", "tree": {"sha": "e32f12da38d33977fc29fafc448d5db2d6c15cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e32f12da38d33977fc29fafc448d5db2d6c15cf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/comments", "author": null, "committer": null, "parents": [{"sha": "29bfcb6de7ffe290a8944f067eaba33622bac5f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29bfcb6de7ffe290a8944f067eaba33622bac5f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29bfcb6de7ffe290a8944f067eaba33622bac5f2"}], "stats": {"total": 301, "additions": 294, "deletions": 7}, "files": [{"sha": "a5b07df63fa8b01a68ec4f5b1c30c5fd4340c16a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -1,3 +1,9 @@\n+2004-12-14  Uttam Pawar  <uttamp@us.ibm.com>\n+\t    Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* rs6000.c (rs6000_handle_altivec_attribute_tree): Report errors\n+\tfor vector types with invalid component types.\n+\n 2004-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/18951"}, {"sha": "b2e64f66aac18bd4ea1676c8c08f9b062dfc8bd0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -16999,7 +16999,9 @@ const struct attribute_spec rs6000_attribute_table[] =\n   given declaration.  */\n \n static tree\n-rs6000_handle_altivec_attribute (tree *node, tree name, tree args,\n+rs6000_handle_altivec_attribute (tree *node,\n+\t\t\t\t tree name ATTRIBUTE_UNUSED,\n+\t\t\t\t tree args,\n \t\t\t\t int flags ATTRIBUTE_UNUSED,\n \t\t\t\t bool *no_add_attrs)\n {\n@@ -17020,9 +17022,25 @@ rs6000_handle_altivec_attribute (tree *node, tree name, tree args,\n \n   mode = TYPE_MODE (type);\n \n-  if (rs6000_warn_altivec_long\n-      && (type == long_unsigned_type_node || type == long_integer_type_node))\n-    warning (\"use of 'long' in AltiVec types is deprecated; use 'int'\");\n+  /* Check for invalid AltiVec type qualifiers.  */\n+  if (type == long_unsigned_type_node || type == long_integer_type_node)\n+    {\n+    if (TARGET_64BIT)\n+      error (\"use of %<long%> in AltiVec types is invalid for 64-bit code\");\n+    else if (rs6000_warn_altivec_long)\n+      warning (\"use of %<long%> in AltiVec types is deprecated; use %<int%>\");\n+    }\n+  else if (type == long_long_unsigned_type_node\n+           || type == long_long_integer_type_node)\n+    error (\"use of %<long long%> in AltiVec types is invalid\");\n+  else if (type == double_type_node)\n+    error (\"use of %<double%> in AltiVec types is invalid\");\n+  else if (type == long_double_type_node)\n+    error (\"use of %<long double%> in AltiVec types is invalid\");\n+  else if (type == boolean_type_node)\n+    error (\"use of boolean types in AltiVec types is invalid\");\n+  else if (TREE_CODE (type) == COMPLEX_TYPE)\n+    error (\"use of %<complex%> in AltiVec types is invalid\");\n \n   switch (altivec_type)\n     {\n@@ -17071,9 +17089,7 @@ rs6000_handle_altivec_attribute (tree *node, tree name, tree args,\n \n   *no_add_attrs = true;  /* No need to hang on to the attribute.  */\n \n-  if (!result)\n-    warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n-  else\n+  if (result)\n     *node = reconstruct_complex_type (*node, result);\n \n   return NULL_TREE;"}, {"sha": "28cd86c9452e04d4332a5808950df27b1a7d939a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -1,3 +1,14 @@\n+2004-12-14  Janis Johnson  <janis187@us.ibm.com\n+\n+\t* gcc.dg/altivec-types-1.c: New test.\n+\t* gcc.dg/altivec-types-2.c: New test.\n+\t* gcc.dg/altivec-types-3.c: New test.\n+\t* gcc.dg/altivec-types-4.c: New test.\n+\t* g++.dg/ext/altivec-types-1.C: New test.\n+\t* g++.dg/ext/altivec-types-2.C: New test.\n+\t* g++.dg/ext/altivec-types-3.C: New test.\n+\t* g++.dg/ext/altivec-types-4.C: New test.\n+\n 2004-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/18951"}, {"sha": "9ebab95e4089ee05db2ec7eae45d1ae3767e7af5", "filename": "gcc/testsuite/g++.dg/ext/altivec-types-1.C", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-1.C?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do compile { target powerpc*-*-linux* } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* Valid AltiVec vector types should be accepted with no warnings.  */\n+\n+__vector char vc;\n+__vector unsigned char vuc;\n+__vector signed char vsc;\n+__vector __bool char vbc;\n+__vector short vh;\n+__vector signed short vsh;\n+__vector unsigned short vuh;\n+__vector short int vhi;\n+__vector signed short int vshi;\n+__vector unsigned short int vuhi;\n+__vector __bool short vbh;\n+__vector __bool short int vbhi;\n+__vector int vi;\n+__vector unsigned int vui;\n+__vector signed int vsi;\n+__vector __bool int vbi;\n+__vector unsigned vuj;\n+__vector signed vsj;\n+__vector __bool vbj;\n+__vector float vf;\n+\n+/* These should be rejected as invalid AltiVec types.  */\n+\n+__vector bool vb;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector long long vll;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector unsigned long long vull;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector signed long long vsll;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __bool long long vbll;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector long long int vlli;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector unsigned long long int vulli;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector signed long long int vslli;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __bool long long int vblli;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector double vd1;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector long double vld;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex float vcf;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex double vcd;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex long double vcld;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex signed char vcsc;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned char vcuc;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex short vcss;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned short vcus;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex int vcsi;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned int vcui;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex long vcsl;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned long vcul;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex long long vcsll;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned long long vcull; /* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex float v_cf;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex double v_cd;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex long double v_cld;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex signed char v_csc;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned char v_cuc;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex short v_css;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned short v_cus; /* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex int v_csi;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned int v_cui;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex long v_csl;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned long v_cul;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex long long v_csll;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned long long v_cull; /* { dg-error \"AltiVec types\" \"\" } */\n+\n+/* These should be rejected because the component types are invalid.  We\n+   don't care about the actual error messages here.  */\n+\n+__vector __bool unsigned char vbuc;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool signed char vbsc;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool unsigned short vbuh;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool signed short vbsh;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool unsigned int vbui;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool signed int vbsi;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool unsigned vbuj;\t\t/* { dg-error \"error\" \"\" } */\n+__vector __bool signed vbsj;\t\t/* { dg-error \"error\" \"\" } */\n+__vector signed float vsf;\t\t/* { dg-error \"error\" \"\" } */\n+__vector unsigned float vuf;\t\t/* { dg-error \"error\" \"\" } */\n+__vector short float vsf;\t\t/* { dg-error \"error\" \"\" } */\n+__vector signed double vsd;\t\t/* { dg-error \"error\" \"\" } */\n+__vector unsigned double vud;\t\t/* { dg-error \"error\" \"\" } */\n+__vector short double vsd;\t\t/* { dg-error \"error\" \"\" } */\n+__vector __bool float vbf;\t\t/* { dg-error \"error\" \"\" } */\n+__vector __bool double vbd;\t\t/* { dg-error \"error\" \"\" } */\n+__vector __bool short float blf;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool short double vlbd;\t/* { dg-error \"error\" \"\" } */"}, {"sha": "4f4d3f3a1231d6f397a7dc76621118e0bdeaf6c0", "filename": "gcc/testsuite/g++.dg/ext/altivec-types-2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-2.C?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target powerpc*-*-linux* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* These should get warnings for 32-bit code.  */\n+\n+__vector long vl;\t\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector unsigned long vul;\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector signed long vsl;\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector __bool long int vbli;\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector long int vli;\t\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector unsigned long int vuli;\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector signed long int vsli;\t\t/* { dg-warning \"deprecated\" \"\" } */"}, {"sha": "42fd3ca359ce16961aa39f1e3ad23e224de32311", "filename": "gcc/testsuite/g++.dg/ext/altivec-types-3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-3.C?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target powerpc*-*-linux* } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* These should be rejected for 64-bit code.  */\n+\n+__vector long vl;\t\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector unsigned long vul;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector signed long vsl;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector __bool long int vbli;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector long int vli;\t\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector unsigned long int vuli;\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector signed long int vsli;\t\t/* { dg-error \"invalid for 64\" \"\" } */"}, {"sha": "bc2296cc15e2dfd364f7c8450717f0d8e9353ef9", "filename": "gcc/testsuite/g++.dg/ext/altivec-types-4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-types-4.C?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target powerpc*-*-linux* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-maltivec -mno-warn-altivec-long\" } */\n+\n+/* These should not get warnings for 32-bit code when the warning is\n+   disabled.  */\n+\n+__vector long vl;\n+__vector unsigned long vul;\n+__vector signed long vsl;\n+__vector __bool long int vbli;\n+__vector long int vli;\n+__vector unsigned long int vuli;\n+__vector signed long int vsli;"}, {"sha": "0772abcf7d1691de7f83967e343a4121d6adc0c1", "filename": "gcc/testsuite/gcc.dg/altivec-types-1.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-1.c?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do compile { target powerpc*-*-linux* } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* Valid AltiVec vector types should be accepted with no warnings.  */\n+\n+__vector char vc;\n+__vector unsigned char vuc;\n+__vector signed char vsc;\n+__vector __bool char vbc;\n+__vector short vh;\n+__vector signed short vsh;\n+__vector unsigned short vuh;\n+__vector short int vhi;\n+__vector signed short int vshi;\n+__vector unsigned short int vuhi;\n+__vector __bool short vbh;\n+__vector __bool short int vbhi;\n+__vector int vi;\n+__vector unsigned int vui;\n+__vector signed int vsi;\n+__vector __bool int vbi;\n+__vector unsigned vuj;\n+__vector signed vsj;\n+__vector __bool vbj;\n+__vector float vf;\n+\n+/* These should be rejected as invalid AltiVec types.  */\n+\n+__vector long long vll;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector unsigned long long vull;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector signed long long vsll;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __bool long long vbll;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector long long int vlli;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector unsigned long long int vulli;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector signed long long int vslli;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __bool long long int vblli;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector double vd1;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector long double vld;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Bool vb;\t\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex float vcf;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex double vcd;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex long double vcld;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex signed char vcsc;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned char vcuc;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex short vcss;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned short vcus;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex int vcsi;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned int vcui;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex long vcsl;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned long vcul;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex long long vcsll;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector _Complex unsigned long long vcull; /* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex float v_cf;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex double v_cd;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex long double v_cld;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex signed char v_csc;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned char v_cuc;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex short v_css;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned short v_cus; /* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex int v_csi;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned int v_cui;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex long v_csl;\t\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned long v_cul;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex long long v_csll;\t/* { dg-error \"AltiVec types\" \"\" } */\n+__vector __complex unsigned long long v_cull; /* { dg-error \"AltiVec types\" \"\" } */\n+\n+/* These should be rejected because the component types are invalid.  We\n+   don't care about the actual error messages here.  */\n+\n+__vector __bool unsigned char vbuc;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool signed char vbsc;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool unsigned short vbuh;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool signed short vbsh;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool unsigned int vbui;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool signed int vbsi;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool unsigned vbuj;\t\t/* { dg-error \"error\" \"\" } */\n+__vector __bool signed vbsj;\t\t/* { dg-error \"error\" \"\" } */\n+__vector signed float vsf;\t\t/* { dg-error \"error\" \"\" } */\n+__vector unsigned float vuf;\t\t/* { dg-error \"error\" \"\" } */\n+__vector short float vsf;\t\t/* { dg-error \"error\" \"\" } */\n+__vector signed double vsd;\t\t/* { dg-error \"error\" \"\" } */\n+__vector unsigned double vud;\t\t/* { dg-error \"error\" \"\" } */\n+__vector short double vsd;\t\t/* { dg-error \"error\" \"\" } */\n+__vector __bool float vbf;\t\t/* { dg-error \"error\" \"\" } */\n+__vector __bool double vbd;\t\t/* { dg-error \"error\" \"\" } */\n+__vector __bool short float blf;\t/* { dg-error \"error\" \"\" } */\n+__vector __bool short double vlbd;\t/* { dg-error \"error\" \"\" } */"}, {"sha": "4f4d3f3a1231d6f397a7dc76621118e0bdeaf6c0", "filename": "gcc/testsuite/gcc.dg/altivec-types-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-2.c?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target powerpc*-*-linux* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* These should get warnings for 32-bit code.  */\n+\n+__vector long vl;\t\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector unsigned long vul;\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector signed long vsl;\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector __bool long int vbli;\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector long int vli;\t\t\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector unsigned long int vuli;\t/* { dg-warning \"deprecated\" \"\" } */\n+__vector signed long int vsli;\t\t/* { dg-warning \"deprecated\" \"\" } */"}, {"sha": "42fd3ca359ce16961aa39f1e3ad23e224de32311", "filename": "gcc/testsuite/gcc.dg/altivec-types-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-3.c?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target powerpc*-*-linux* } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* These should be rejected for 64-bit code.  */\n+\n+__vector long vl;\t\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector unsigned long vul;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector signed long vsl;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector __bool long int vbli;\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector long int vli;\t\t\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector unsigned long int vuli;\t/* { dg-error \"invalid for 64\" \"\" } */\n+__vector signed long int vsli;\t\t/* { dg-error \"invalid for 64\" \"\" } */"}, {"sha": "bc2296cc15e2dfd364f7c8450717f0d8e9353ef9", "filename": "gcc/testsuite/gcc.dg/altivec-types-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-types-4.c?ref=f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target powerpc*-*-linux* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-maltivec -mno-warn-altivec-long\" } */\n+\n+/* These should not get warnings for 32-bit code when the warning is\n+   disabled.  */\n+\n+__vector long vl;\n+__vector unsigned long vul;\n+__vector signed long vsl;\n+__vector __bool long int vbli;\n+__vector long int vli;\n+__vector unsigned long int vuli;\n+__vector signed long int vsli;"}]}