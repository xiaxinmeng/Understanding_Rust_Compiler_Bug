{"sha": "1f012f560f6eea9cc07dcf9ee343d7a17692f9bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwMTJmNTYwZjZlZWE5Y2MwN2RjZjllZTM0M2Q3YTE3NjkyZjliYw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-11-20T15:10:26Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-11-20T15:10:26Z"}, "message": "fix hash_table when empty elements are not 0\n\ngcc/ChangeLog:\n\n2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n\n\t* hash-table.h (hash_table::hash_table): Call alloc_entries.\n\t(hash_table::alloc_entries): new method.\n\t(hash_table::expand): Call alloc_entries.\n\t(hash_table::empty): Likewise.\n\nFrom-SVN: r217868", "tree": {"sha": "6b7936d20ee14a50ce2a7310a7f0b65175230ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b7936d20ee14a50ce2a7310a7f0b65175230ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f012f560f6eea9cc07dcf9ee343d7a17692f9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f012f560f6eea9cc07dcf9ee343d7a17692f9bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f012f560f6eea9cc07dcf9ee343d7a17692f9bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f012f560f6eea9cc07dcf9ee343d7a17692f9bc/comments", "author": null, "committer": null, "parents": [{"sha": "d242408fda0bb64230b5446911d860df3e19a3da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d242408fda0bb64230b5446911d860df3e19a3da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d242408fda0bb64230b5446911d860df3e19a3da"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "e0b8c79675b234378ebdfad1c46ce01c73a707ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f012f560f6eea9cc07dcf9ee343d7a17692f9bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f012f560f6eea9cc07dcf9ee343d7a17692f9bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f012f560f6eea9cc07dcf9ee343d7a17692f9bc", "patch": "@@ -1,3 +1,10 @@\n+2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* hash-table.h (hash_table::hash_table): Call alloc_entries.\n+\t(hash_table::alloc_entries): new method.\n+\t(hash_table::expand): Call alloc_entries.\n+\t(hash_table::empty): Likewise.\n+\n 2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* config/i386/i386.c, function.c, trans-mem.c, tree-core.h,"}, {"sha": "5485d06f5bd31ee308b76187592db43e2439a3db", "filename": "gcc/hash-table.h", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f012f560f6eea9cc07dcf9ee343d7a17692f9bc/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f012f560f6eea9cc07dcf9ee343d7a17692f9bc/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=1f012f560f6eea9cc07dcf9ee343d7a17692f9bc", "patch": "@@ -1201,6 +1201,7 @@ class hash_table<Descriptor, Allocator, true>\n   template<typename T> friend void gt_pch_nx (hash_table<T> *,\n \t\t\t\t\t      gt_pointer_operator, void *);\n \n+  value_type *alloc_entries (size_t n) const;\n   value_type *find_empty_slot_for_expand (hashval_t);\n   void expand ();\n   static bool is_deleted (value_type &v)\n@@ -1259,12 +1260,7 @@ hash_table<Descriptor, Allocator, true>::hash_table (size_t size, bool ggc) :\n   size_prime_index = hash_table_higher_prime_index (size);\n   size = prime_tab[size_prime_index].prime;\n \n-  if (!m_ggc)\n-    m_entries = Allocator <value_type> ::data_alloc (size);\n-  else\n-    m_entries = ggc_cleared_vec_alloc<value_type> (size);\n-\n-  gcc_assert (m_entries != NULL);\n+  m_entries = alloc_entries (size);\n   m_size = size;\n   m_size_prime_index = size_prime_index;\n }\n@@ -1282,6 +1278,26 @@ hash_table<Descriptor, Allocator, true>::~hash_table ()\n     ggc_free (m_entries);\n }\n \n+/* This function returns an array of empty hash table elements.  */\n+\n+template<typename Descriptor, template<typename Type> class Allocator>\n+inline typename hash_table<Descriptor, Allocator, true>::value_type *\n+hash_table<Descriptor, Allocator, true>::alloc_entries (size_t n) const\n+{\n+  value_type *nentries;\n+\n+  if (!m_ggc)\n+    nentries = Allocator <value_type> ::data_alloc (n);\n+  else\n+    nentries = ::ggc_cleared_vec_alloc<value_type> (n);\n+\n+  gcc_assert (nentries != NULL);\n+  for (size_t i = 0; i < n; i++)\n+    mark_empty (nentries[i]);\n+\n+  return nentries;\n+}\n+\n /* Similar to find_slot, but without several unwanted side effects:\n     - Does not call equal when it finds an existing entry.\n     - Does not change the count of elements/searches/collisions in the\n@@ -1351,13 +1367,7 @@ hash_table<Descriptor, Allocator, true>::expand ()\n       nsize = osize;\n     }\n \n-  value_type *nentries;\n-  if (!m_ggc)\n-    nentries = Allocator <value_type> ::data_alloc (nsize);\n-  else\n-    nentries = ggc_cleared_vec_alloc<value_type> (nsize);\n-\n-  gcc_assert (nentries != NULL);\n+  value_type *nentries = alloc_entries (nsize);\n   m_entries = nentries;\n   m_size = nsize;\n   m_size_prime_index = nindex;\n@@ -1405,16 +1415,11 @@ hash_table<Descriptor, Allocator, true>::empty ()\n       int nsize = prime_tab[nindex].prime;\n \n       if (!m_ggc)\n-\t{\n-\t  Allocator <value_type> ::data_free (m_entries);\n-\t  m_entries = Allocator <value_type> ::data_alloc (nsize);\n-\t}\n+\tAllocator <value_type> ::data_free (m_entries);\n       else\n-\t{\n-\t  ggc_free (m_entries);\n-\t  m_entries = ggc_cleared_vec_alloc<value_type> (nsize);\n-\t}\n+\tggc_free (m_entries);\n \n+      m_entries = alloc_entries (nsize);\n       m_size = nsize;\n       m_size_prime_index = nindex;\n     }"}]}