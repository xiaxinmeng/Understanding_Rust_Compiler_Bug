{"sha": "35d1b0838cd0a693a3904b9f947e9013ab424c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVkMWIwODM4Y2QwYTY5M2EzOTA0YjlmOTQ3ZTkwMTNhYjQyNGM0MA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-10-26T22:07:37Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-10-26T22:07:37Z"}, "message": "re PR target/52483 (SH Target: Loads from volatile memory leave redundant sign/zero extensions)\n\n\tPR target/52483\n\t* config/sh/predicates.md (general_movdst_operand): Allow reg+reg\n\taddressing, do not use general_operand for memory operands.\n\n\tPR target/52483\n\t* gcc.target/sh/pr52483-1.c: Add tests for memory stores.\n\t* gcc.target/sh/pr52483-2.c: Likewise.\n\t* gcc.target/sh/pr52483-3.c: Likewise.\n\t* gcc.target/sh/pr52483-4.c: Likewise.\n\nFrom-SVN: r204097", "tree": {"sha": "1b4b73beae9e6d7a52db9c2db5b7c2524f32c5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b4b73beae9e6d7a52db9c2db5b7c2524f32c5a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35d1b0838cd0a693a3904b9f947e9013ab424c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d1b0838cd0a693a3904b9f947e9013ab424c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d1b0838cd0a693a3904b9f947e9013ab424c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d1b0838cd0a693a3904b9f947e9013ab424c40/comments", "author": null, "committer": null, "parents": [{"sha": "a6f623d4fa81226585671aeaff269ab97e0ded64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f623d4fa81226585671aeaff269ab97e0ded64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f623d4fa81226585671aeaff269ab97e0ded64"}], "stats": {"total": 180, "additions": 156, "deletions": 24}, "files": [{"sha": "cb4e7bc9f21375b80ad1afd7bb8b1b53d8fd8e4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35d1b0838cd0a693a3904b9f947e9013ab424c40", "patch": "@@ -1,3 +1,9 @@\n+2013-10-26  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52483\n+\t* config/sh/predicates.md (general_movdst_operand): Allow reg+reg\n+\taddressing, do not use general_operand for memory operands.\n+\n 2013-10-26  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tRevert:"}, {"sha": "2643481a82797014df21fb49ecab8d44680b6c08", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=35d1b0838cd0a693a3904b9f947e9013ab424c40", "patch": "@@ -550,17 +550,36 @@\n       && ! (reload_in_progress || reload_completed))\n     return 0;\n \n-  if ((mode == QImode || mode == HImode)\n-      && mode == GET_MODE (op)\n-      && (MEM_P (op)\n-\t  || (GET_CODE (op) == SUBREG && MEM_P (SUBREG_REG (op)))))\n+  if (mode == GET_MODE (op)\n+      && (MEM_P (op) || (GET_CODE (op) == SUBREG && MEM_P (SUBREG_REG (op)))))\n     {\n-      rtx x = XEXP ((MEM_P (op) ? op : SUBREG_REG (op)), 0);\n+      rtx mem_rtx = MEM_P (op) ? op : SUBREG_REG (op);\n+      rtx x = XEXP (mem_rtx, 0);\n \n-      if (GET_CODE (x) == PLUS\n+      if ((mode == QImode || mode == HImode)\n+\t  && GET_CODE (x) == PLUS\n \t  && REG_P (XEXP (x, 0))\n \t  && CONST_INT_P (XEXP (x, 1)))\n \treturn sh_legitimate_index_p (mode, XEXP (x, 1), TARGET_SH2A, false);\n+\n+      /* Allow reg+reg addressing here without validating the register\n+\t numbers.  Usually one of the regs must be R0 or a pseudo reg.\n+\t In some cases it can happen that arguments from hard regs are\n+\t propagated directly into address expressions.  In this cases reload\n+\t will have to fix it up later.  However, allow this only for native\n+\t 1, 2 or 4 byte addresses.  */\n+      if (can_create_pseudo_p () && GET_CODE (x) == PLUS\n+\t  && GET_MODE_SIZE (mode) <= 4\n+\t  && REG_P (XEXP (x, 0)) && REG_P (XEXP (x, 1)))\n+\treturn true;\n+\n+      /* 'general_operand' does not allow volatile mems during RTL expansion to\n+\t avoid matching arithmetic that operates on mems, it seems.\n+\t On SH this leads to redundant sign extensions for QImode or HImode\n+\t stores.  Thus we mimic the behavior but allow volatile mems.  */\n+        if (memory_address_addr_space_p (GET_MODE (mem_rtx), x,\n+\t\t\t\t\t MEM_ADDR_SPACE (mem_rtx)))\n+\t  return true;\n     }\n \n   return general_operand (op, mode);"}, {"sha": "a9aa27d2023387c60527fe4f68de60fb799750db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35d1b0838cd0a693a3904b9f947e9013ab424c40", "patch": "@@ -1,3 +1,11 @@\n+2013-10-26  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52483\n+\t* gcc.target/sh/pr52483-1.c: Add tests for memory stores.\n+\t* gcc.target/sh/pr52483-2.c: Likewise.\n+\t* gcc.target/sh/pr52483-3.c: Likewise.\n+\t* gcc.target/sh/pr52483-4.c: Likewise.\n+\n 2013-10-26  Jeff Law  <law@redhat.com>\n \n \t* g++.dg/torture/pr49309.C: Removed."}, {"sha": "e63d18279f808baee59f6fe8d6de85af1b57b1cd", "filename": "gcc/testsuite/gcc.target/sh/pr52483-1.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-1.c?ref=35d1b0838cd0a693a3904b9f947e9013ab424c40", "patch": "@@ -1,30 +1,54 @@\n-/* Check that loads from volatile mems don't result in redundant sign\n-   extensions.  */\n+/* Check that loads/stores from/to volatile mems don't result in redundant\n+   sign/zero extensions.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n-/* { dg-options \"-O1\" } */\n+/* { dg-options \"-O2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n-/* { dg-final { scan-assembler-not \"exts\" } } */\n+/* { dg-final { scan-assembler-not \"exts|extu\" } } */\n \n int\n test_00 (volatile char* x)\n {\n   return *x;\n }\n \n+void\n+test_100 (volatile char* x, char y)\n+{\n+  *x = y;\n+}\n+\n int\n test_01 (volatile short* x)\n {\n   return *x;\n }\n \n+void\n+test_101 (volatile unsigned char* x, unsigned char y)\n+{\n+  *x = y;\n+}\n+\n int\n test_02 (volatile unsigned char* x)\n {\n   return *x == 0x80;\n }\n \n+void\n+test_102 (volatile short* x, short y)\n+{\n+  *x = y;\n+}\n+\n int\n test_03 (volatile unsigned short* x)\n {\n   return *x == 0xFF80;\n }\n+\n+void\n+test_103 (volatile unsigned short* x, unsigned short y)\n+{\n+  *x = y;\n+}"}, {"sha": "e3626c2149eeb946d096c5d8cd0da244005d7973", "filename": "gcc/testsuite/gcc.target/sh/pr52483-2.c", "status": "modified", "additions": 58, "deletions": 7, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-2.c?ref=35d1b0838cd0a693a3904b9f947e9013ab424c40", "patch": "@@ -1,59 +1,110 @@\n-/* Check that loads from volatile mems utilize displacement addressing\n-   modes and do not result in redundant sign extensions. */\n+/* Check that loads/stores from/to volatile mems utilize displacement\n+   addressing modes and do not result in redundant sign/zero extensions. */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n-/* { dg-final { scan-assembler-times \"@\\\\(5,\" 2 } } */\n-/* { dg-final { scan-assembler-times \"@\\\\(10,\" 2 } } */\n-/* { dg-final { scan-assembler-times \"@\\\\(20,\" 2 } } */\n-/* { dg-final { scan-assembler-times \"@\\\\(40,\" 2 } } */\n-/* { dg-final { scan-assembler-times \"@\\\\(44,\" 2 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(5,\" 4 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(10,\" 4 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(20,\" 4 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(40,\" 4 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(44,\" 4 } } */\n /* { dg-final { scan-assembler-not \"exts\" } } */\n+/* { dg-final { scan-assembler-times \"extu|movu\" 2 } } */\n \n int\n test_00 (volatile char* x)\n {\n   return x[5];\n }\n \n+void\n+test_100 (volatile char* x, char y)\n+{\n+  x[5] = y;\n+}\n+\n int\n test_01 (volatile short* x)\n {\n   return x[5];\n }\n \n+void\n+test_101 (volatile short* x, short y)\n+{\n+  x[5] = y;\n+}\n+\n int\n test_02 (volatile int* x)\n {\n   return x[5];\n }\n \n+void\n+test_102 (volatile int* x, int y)\n+{\n+  x[5] = y;\n+}\n+\n long long\n test_03 (volatile long long* x)\n {\n   return x[5];\n }\n \n+void\n+test_103 (volatile long long* x, long long y)\n+{\n+  x[5] = y;\n+}\n+\n unsigned int\n test_04 (volatile unsigned char* x)\n {\n+  // expected 1x extu.b or movu.b\n   return x[5];\n }\n \n+void\n+test_104 (volatile unsigned char* x, unsigned char y)\n+{\n+  x[5] = y;\n+}\n+\n unsigned int\n test_05 (volatile unsigned short* x)\n {\n+  // expected 1x extu.w or movu.w\n   return x[5];\n }\n+\n+void\n+test_105 (volatile unsigned short* x, unsigned short y)\n+{\n+  x[5] = y;\n+}\n  \n unsigned int\n test_06 (volatile unsigned int* x)\n {\n   return x[5];\n }\n \n+void\n+test_106 (volatile unsigned int* x, unsigned int y)\n+{\n+  x[5] = y;\n+}\n+\n unsigned long long\n test_07 (volatile unsigned long long* x)\n {\n   return x[5];\n }\n+\n+void\n+test_107 (volatile unsigned long long* x, unsigned long long y)\n+{\n+  x[5] = y;\n+}"}, {"sha": "81b03c89b72102455fcb288f9471c83e0c384df3", "filename": "gcc/testsuite/gcc.target/sh/pr52483-3.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-3.c?ref=35d1b0838cd0a693a3904b9f947e9013ab424c40", "patch": "@@ -1,25 +1,43 @@\n-/* Check that loads from volatile mems utilize indexed addressing\n-   modes and do not result in redundant sign extensions. */\n+/* Check that loads/stores from/to volatile mems utilize indexed addressing\n+   modes and do not result in redundant sign/zero extensions. */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n-/* { dg-final { scan-assembler-times \"@\\\\(r0,\" 3 } } */\n-/* { dg-final { scan-assembler-not \"exts\" } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(r0,\" 6 } } */\n+/* { dg-final { scan-assembler-not \"exts|extu\" } } */\n \n int\n test_00 (volatile char* x, unsigned int y)\n {\n   return x[y];\n }\n \n+void\n+test_100 (volatile char* x, unsigned int y, char z)\n+{\n+  x[y] = z;\n+}\n+\n int\n test_01 (volatile short* x, unsigned int y)\n {\n   return x[y];\n }\n \n+void\n+test_101 (volatile short* x, unsigned int y, short z)\n+{\n+  x[y] = z;\n+}\n+\n int\n test_02 (volatile int* x, unsigned int y)\n {\n   return x[y];\n }\n+\n+int\n+test_102 (volatile int* x, unsigned int y, int z)\n+{\n+  x[y] = z;\n+}"}, {"sha": "2f850c1bbfeeedcee30dbdb6b10b3620973139c7", "filename": "gcc/testsuite/gcc.target/sh/pr52483-4.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d1b0838cd0a693a3904b9f947e9013ab424c40/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c?ref=35d1b0838cd0a693a3904b9f947e9013ab424c40", "patch": "@@ -1,12 +1,18 @@\n-/* Check that loads from volatile floating point mems utilize indexed\n-   addressing modes. */\n+/* Check that loads/stores from/to volatile floating point mems utilize\n+   indexed addressing modes. */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n-/* { dg-final { scan-assembler-times \"@\\\\(r0,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(r0,\" 2 } } */\n \n float\n test_00 (volatile float* x, unsigned int y)\n {\n   return x[y];\n }\n+\n+void\n+test_100 (volatile float* x, unsigned int y, float z)\n+{\n+  x[y] = z;\n+}"}]}