{"sha": "9aee022eb9a1128e2fa620573c7b1bb8e953bc1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFlZTAyMmViOWExMTI4ZTJmYTYyMDU3M2M3YjFiYjhlOTUzYmMxYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-02-23T19:49:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-02-23T19:49:31Z"}, "message": "libstdc++/69893 make <tr1/cmath> work with C++11\n\n\tPR libstdc++/69893\n\t* include/tr1/cmath (acosh, asinh, atanh, cbrt, copysign, erf, erfc,\n\texp2, expm1, fdim, fma, fmax, fmin, hypot, ilogb, lgamma, llrint,\n\tllround, log1p, log2, logb, lrint, lround, nan, nearbyint, nextafter,\n\tnexttoward, remainder, remquo, rint, round, scalbln, scalbn, tgamma,\n\ttrunc) [__cplusplus >= 201103L]: Import from namespace std.\n\t(fabs) [__cplusplus < 201103L]: Import from namespace std.\n\t* include/tr1/complex (acosh, asinh, atanh) [__cplusplus >= 201103L]:\n\tLikewise.\n\t* testsuite/tr1/headers/c++200x/complex.cc: Add std::fabs to global\n\tnamespace before including TR1 headers.\n\t* testsuite/tr1/headers/c++200x/math.cc: New test.\n\nFrom-SVN: r233644", "tree": {"sha": "ecf77ef1368d8dc9101a1e1bad3eac912471613f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecf77ef1368d8dc9101a1e1bad3eac912471613f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "067fbd8b4b3a4af6d0948204e42b2f928c5e5282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067fbd8b4b3a4af6d0948204e42b2f928c5e5282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/067fbd8b4b3a4af6d0948204e42b2f928c5e5282"}], "stats": {"total": 241, "additions": 170, "deletions": 71}, "files": [{"sha": "a9ca6dec475405e50e94b202bcf134000f835ef6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9aee022eb9a1128e2fa620573c7b1bb8e953bc1a", "patch": "@@ -1,3 +1,18 @@\n+2016-02-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/69893\n+\t* include/tr1/cmath (acosh, asinh, atanh, cbrt, copysign, erf, erfc,\n+\texp2, expm1, fdim, fma, fmax, fmin, hypot, ilogb, lgamma, llrint,\n+\tllround, log1p, log2, logb, lrint, lround, nan, nearbyint, nextafter,\n+\tnexttoward, remainder, remquo, rint, round, scalbln, scalbn, tgamma,\n+\ttrunc) [__cplusplus >= 201103L]: Import from namespace std.\n+\t(fabs) [__cplusplus < 201103L]: Import from namespace std.\n+\t* include/tr1/complex (acosh, asinh, atanh) [__cplusplus >= 201103L]:\n+\tLikewise.\n+\t* testsuite/tr1/headers/c++200x/complex.cc: Add std::fabs to global\n+\tnamespace before including TR1 headers.\n+\t* testsuite/tr1/headers/c++200x/math.cc: New test.\n+\n 2016-02-23  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR libstdc++/69881"}, {"sha": "48466a02854e5d7235f16854b9e7de1a225da6a7", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 121, "deletions": 66, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=9aee022eb9a1128e2fa620573c7b1bb8e953bc1a", "patch": "@@ -151,6 +151,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if _GLIBCXX_USE_C99_MATH_TR1\n \n+  // Using declarations to bring names from libc's <math.h> into std::tr1.\n+\n   // types\n   using ::double_t;\n   using ::float_t;\n@@ -416,8 +418,77 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if _GLIBCXX_USE_C99_MATH_TR1\n \n-  /// Additional overloads [8.16.4].\n+  /** Additional overloads [8.16.4].\n+   *  @{\n+   */\n+\n+  // For functions defined in C++03 the additional overloads are already\n+  // declared in <cmath> so we can just re-declare them in std::tr1.\n+\n   using std::acos;\n+  using std::asin;\n+  using std::atan;\n+  using std::atan2;\n+  using std::ceil;\n+  using std::cos;\n+  using std::cosh;\n+  using std::exp;\n+  using std::floor;\n+  using std::fmod;\n+  using std::frexp;\n+  using std::ldexp;\n+  using std::log;\n+  using std::log10;\n+  using std::sin;\n+  using std::sinh;\n+  using std::sqrt;\n+  using std::tan;\n+  using std::tanh;\n+\n+#if __cplusplus >= 201103L\n+\n+  // Since C++11, <cmath> defines additional overloads for these functions\n+  // in namespace std.\n+\n+  using std::acosh;\n+  using std::asinh;\n+  using std::atanh;\n+  using std::cbrt;\n+  using std::copysign;\n+  using std::erf;\n+  using std::erfc;\n+  using std::exp2;\n+  using std::expm1;\n+  using std::fdim;\n+  using std::fma;\n+  using std::fmax;\n+  using std::fmin;\n+  using std::hypot;\n+  using std::ilogb;\n+  using std::lgamma;\n+  using std::llrint;\n+  using std::llround;\n+  using std::log1p;\n+  using std::log2;\n+  using std::logb;\n+  using std::lrint;\n+  using std::lround;\n+  using std::nan;\n+  using std::nearbyint;\n+  using std::nextafter;\n+  using std::nexttoward;\n+  using std::remainder;\n+  using std::remquo;\n+  using std::rint;\n+  using std::round;\n+  using std::scalbln;\n+  using std::scalbn;\n+  using std::tgamma;\n+  using std::trunc;\n+\n+#else // __cplusplus < 201103L\n+\n+  // In C++03 we need to provide the additional overloads.\n \n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n@@ -435,8 +506,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     acosh(_Tp __x)\n     { return __builtin_acosh(__x); }\n \n-  using std::asin;\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   asinh(float __x)\n@@ -453,9 +522,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     asinh(_Tp __x)\n     { return __builtin_asinh(__x); }\n \n-  using std::atan;\n-  using std::atan2;\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   atanh(float __x)\n@@ -488,8 +554,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     cbrt(_Tp __x)\n     { return __builtin_cbrt(__x); }\n \n-  using std::ceil;\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   copysign(float __x, float __y)\n@@ -508,9 +572,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return copysign(__type(__x), __type(__y));\n     }\n \n-  using std::cos;\n-  using std::cosh;  \n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   erf(float __x)\n@@ -543,8 +604,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erfc(_Tp __x)\n     { return __builtin_erfc(__x); }\n \n-  using std::exp;\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   exp2(float __x)\n@@ -577,32 +636,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     expm1(_Tp __x)\n     { return __builtin_expm1(__x); }\n \n-  // Note: we deal with fabs in a special way, because an using std::fabs\n-  // would bring in also the overloads for complex types, which in C++0x\n-  // mode have a different return type.\n-  // With __CORRECT_ISO_CPP_MATH_H_PROTO, math.h imports std::fabs in the\n-  // global namespace after the declarations of the float / double / long\n-  // double overloads but before the std::complex overloads.\n-  using ::fabs;\n-\n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n-  inline float\n-  fabs(float __x)\n-  { return __builtin_fabsf(__x); }\n-\n-  inline long double\n-  fabs(long double __x)\n-  { return __builtin_fabsl(__x); }\n-#endif\n-\n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n-    fabs(_Tp __x)\n-    { return __builtin_fabs(__x); }\n-#endif\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   fdim(float __x, float __y)\n@@ -621,8 +654,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fdim(__type(__x), __type(__y));\n     }\n \n-  using std::floor;\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   fma(float __x, float __y, float __z)\n@@ -677,9 +708,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fmin(__type(__x), __type(__y));\n     }\n \n-  using std::fmod;\n-  using std::frexp;\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   hypot(float __x, float __y)\n@@ -714,8 +742,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     ilogb(_Tp __x)\n     { return __builtin_ilogb(__x); }\n \n-  using std::ldexp;\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   lgamma(float __x)\n@@ -764,9 +790,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     llround(_Tp __x)\n     { return __builtin_llround(__x); }\n \n-  using std::log;\n-  using std::log10;\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   log1p(float __x)\n@@ -1000,12 +1023,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     scalbn(_Tp __x, int __ex)\n     { return __builtin_scalbn(__x, __ex); }\n \n-  using std::sin;\n-  using std::sinh;\n-  using std::sqrt;\n-  using std::tan;\n-  using std::tanh;\n-\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   inline float\n   tgamma(float __x)\n@@ -1038,6 +1055,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     trunc(_Tp __x)\n     { return __builtin_trunc(__x); }\n \n+#endif // __cplusplus < 201103L\n+\n+  // @}\n+\n #endif\n _GLIBCXX_END_NAMESPACE_VERSION\n }\n@@ -1050,17 +1071,16 @@ namespace tr1\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // DR 550. What should the return type of pow(float,int) be?\n-  // NB: C++0x and TR1 != C++03.\n-\n-  // The std::tr1::pow(double, double) overload cannot be provided\n-  // here, because it would clash with ::pow(double,double) declared\n-  // in <math.h>, if <tr1/math.h> is included at the same time (raised\n-  // by the fix of PR c++/54537). It is not possible either to use the\n-  // using-declaration 'using ::pow;' here, because if the user code\n-  // has a 'using std::pow;', it would bring the pow(*,int) averloads\n-  // in the tr1 namespace, which is undesirable. Consequently, the\n-  // solution is to forward std::tr1::pow(double,double) to\n-  // std::pow(double,double) via the templatized version below. See\n+  // NB: C++11 and TR1 != C++03.\n+\n+  // We cannot do \"using std::pow;\" because that would bring in unwanted\n+  // pow(*, int) overloads in C++03, with the wrong return type. Instead we\n+  // define all the necessary overloads, but the std::tr1::pow(double, double)\n+  // overload cannot be provided here, because <tr1/math.h> would add it to\n+  // the global namespace where it would clash with ::pow(double,double) from\n+  // libc (revealed by the fix of PR c++/54537).\n+  // The solution is to forward std::tr1::pow(double,double) to\n+  // std::pow(double,double) via the function template below. See\n   // the discussion about this issue here:\n   // http://gcc.gnu.org/ml/gcc-patches/2012-09/msg01278.html\n \n@@ -1082,6 +1102,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::pow(__type(__x), __type(__y));\n     }\n \n+#if __cplusplus >= 201103L\n+  // We also deal with fabs in a special way, because \"using std::fabs;\"\n+  // could bring in C++11's std::fabs<T>(const std::complex<T>&) with a\n+  // different return type from std::tr1::fabs<T>(const std::complex<T>&).\n+  // We define the necessary overloads, except std::tr1::fabs(double) which\n+  // could clash with ::fabs(double) from libc.\n+  // The function template handles double as well as integers, forwarding\n+  // to std::fabs.\n+\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+  inline float\n+  fabs(float __x)\n+  { return __builtin_fabsf(__x); }\n+\n+  inline long double\n+  fabs(long double __x)\n+  { return __builtin_fabsl(__x); }\n+#endif\n+#endif\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    fabs(_Tp __x)\n+    { return std::fabs(__x); }\n+\n+#else  // ! C++11\n+\n+  // For C++03 just use std::fabs as there is no overload for std::complex<>.\n+  using std::fabs;\n+\n+#endif // C++11\n+\n+\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n }\n }"}, {"sha": "9d2de1a926f491cf6d2219fccc7053ca94c6081d", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=9aee022eb9a1128e2fa620573c7b1bb8e953bc1a", "patch": "@@ -48,17 +48,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using std::acos;\n   using std::asin;\n   using std::atan;\n+  using std::acosh;\n+  using std::asinh;\n+  using std::atanh;\n #else\n   template<typename _Tp> std::complex<_Tp> acos(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> asin(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> atan(const std::complex<_Tp>&);\n-#endif\n-\n   template<typename _Tp> std::complex<_Tp> acosh(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> asinh(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> atanh(const std::complex<_Tp>&);\n+#endif\n \n-  // The std::fabs return type in C++0x mode is different (just _Tp).\n+  // The std::fabs return type in C++11 mode is different (just _Tp).\n   template<typename _Tp> std::complex<_Tp> fabs(const std::complex<_Tp>&);\n \n #if __cplusplus < 201103L\n@@ -178,8 +180,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __complex_atan(__z); }\n #endif\n \n-#endif // C++11\n-\n   template<typename _Tp>\n     std::complex<_Tp>\n     __complex_acosh(const std::complex<_Tp>& __z)\n@@ -299,6 +299,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __complex_atanh(__z); }\n #endif\n \n+#endif // C++11\n+\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     /// fabs(__z) [8.1.8]."}, {"sha": "dbf01f5caccc9bcf437cff049755cf9922b80adb", "filename": "libstdc++-v3/testsuite/tr1/headers/c++200x/complex.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders%2Fc%2B%2B200x%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders%2Fc%2B%2B200x%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders%2Fc%2B%2B200x%2Fcomplex.cc?ref=9aee022eb9a1128e2fa620573c7b1bb8e953bc1a", "patch": "@@ -21,6 +21,8 @@\n // check for duplicates of complex overloads of acos, asin, atan and fabs\n \n #include <complex>\n+using std::fabs;\n #include <tr1/cmath>\n #include <tr1/complex>\n \n+auto c = std::tr1::fabs(std::complex<double>{});"}, {"sha": "29b89a4b87f5eeac9cca01b2531360966f1db70e", "filename": "libstdc++-v3/testsuite/tr1/headers/c++200x/math.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders%2Fc%2B%2B200x%2Fmath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aee022eb9a1128e2fa620573c7b1bb8e953bc1a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders%2Fc%2B%2B200x%2Fmath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders%2Fc%2B%2B200x%2Fmath.cc?ref=9aee022eb9a1128e2fa620573c7b1bb8e953bc1a", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/69893\n+// check for duplicate overloads of acosh, asinh, etc.\n+\n+#include <math.h>\n+#include <tr1/cmath>"}]}