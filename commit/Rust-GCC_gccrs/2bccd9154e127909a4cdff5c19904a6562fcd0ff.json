{"sha": "2bccd9154e127909a4cdff5c19904a6562fcd0ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJjY2Q5MTU0ZTEyNzkwOWE0Y2RmZjVjMTk5MDRhNjU2MmZjZDBmZg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-25T18:49:40Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-25T23:28:04Z"}, "message": "Make expr_range_in_bb stmt based rather than block based.\n\nprerequisite to moving to a range_query model, make it stmt based.\n\n\t* gimple-range-gori.cc (gori_compute::expr_range_at_stmt): Rename\n\tfrom expr_range_in_bb and adjust.\n\t(gori_compute::compute_name_range_op): Adjust.\n\t(gori_compute::optimize_logical_operands): Adjust.\n\t(gori_compute::compute_logical_operands_in_chain): Adjust.\n\t(gori_compute::compute_operand1_range): Adjust.\n\t(gori_compute::compute_operand2_range): Adjust.\n\t(ori_compute_cache::cache_stmt): Adjust.\n\t* gimple-range-gori.h (gori_compute): Rename prototype.", "tree": {"sha": "5cf24f7565e481965779699a219f396f67223d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cf24f7565e481965779699a219f396f67223d86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bccd9154e127909a4cdff5c19904a6562fcd0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bccd9154e127909a4cdff5c19904a6562fcd0ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bccd9154e127909a4cdff5c19904a6562fcd0ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bccd9154e127909a4cdff5c19904a6562fcd0ff/comments", "author": null, "committer": null, "parents": [{"sha": "35c78c6fc54721e067ed3a30ddd9184b45c5981d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c78c6fc54721e067ed3a30ddd9184b45c5981d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c78c6fc54721e067ed3a30ddd9184b45c5981d"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "1a4ae45c9861437b9997fa7c2a318aabbfa51854", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bccd9154e127909a4cdff5c19904a6562fcd0ff/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bccd9154e127909a4cdff5c19904a6562fcd0ff/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=2bccd9154e127909a4cdff5c19904a6562fcd0ff", "patch": "@@ -582,10 +582,10 @@ gori_compute::ssa_range_in_bb (irange &r, tree name, basic_block)\n }\n \n void\n-gori_compute::expr_range_in_bb (irange &r, tree expr, basic_block bb)\n+gori_compute::expr_range_at_stmt (irange &r, tree expr, gimple *s)\n {\n   if (gimple_range_ssa_p (expr))\n-    ssa_range_in_bb (r, expr, bb);\n+    ssa_range_in_bb (r, expr, gimple_bb (s));\n   else\n     get_tree_range (r, expr);\n }\n@@ -606,7 +606,7 @@ gori_compute::compute_name_range_op (irange &r, gimple *stmt,\n   // Operand 1 is the name being looked for, evaluate it.\n   if (op1 == name)\n     {\n-      expr_range_in_bb (op1_range, op1, gimple_bb (stmt));\n+      expr_range_at_stmt (op1_range, op1, stmt);\n       if (!op2)\n \t{\n \t  // The second parameter to a unary operation is the range\n@@ -616,7 +616,7 @@ gori_compute::compute_name_range_op (irange &r, gimple *stmt,\n \t  return gimple_range_calc_op1 (r, stmt, lhs, op1_range);\n \t}\n       // If we need the second operand, get a value and evaluate.\n-      expr_range_in_bb (op2_range, op2, gimple_bb (stmt));\n+      expr_range_at_stmt (op2_range, op2, stmt);\n       if (gimple_range_calc_op1 (r, stmt, lhs, op2_range))\n \tr.intersect (op1_range);\n       else\n@@ -626,8 +626,8 @@ gori_compute::compute_name_range_op (irange &r, gimple *stmt,\n \n   if (op2 == name)\n     {\n-      expr_range_in_bb (op1_range, op1, gimple_bb (stmt));\n-      expr_range_in_bb (r, op2, gimple_bb (stmt));\n+      expr_range_at_stmt (op1_range, op1, stmt);\n+      expr_range_at_stmt (r, op2, stmt);\n       if (gimple_range_calc_op2 (op2_range, stmt, lhs, op1_range))\n         r.intersect (op2_range);\n       return true;\n@@ -877,7 +877,7 @@ gori_compute::optimize_logical_operands (tf_range &range,\n     {\n       if (!compute_operand_range (range.false_range, SSA_NAME_DEF_STMT (op),\n \t\t\t\t  m_bool_zero, name))\n-\texpr_range_in_bb (range.false_range, name, gimple_bb (stmt));\n+\texpr_range_at_stmt (range.false_range, name, stmt);\n       range.true_range = range.false_range;\n       return true;\n     }\n@@ -886,7 +886,7 @@ gori_compute::optimize_logical_operands (tf_range &range,\n     {\n       if (!compute_operand_range (range.true_range, SSA_NAME_DEF_STMT (op),\n \t\t\t\t  m_bool_one, name))\n-\texpr_range_in_bb (range.true_range, name, gimple_bb (stmt));\n+\texpr_range_at_stmt (range.true_range, name, stmt);\n       range.false_range = range.true_range;\n       return true;\n     }\n@@ -905,12 +905,12 @@ gori_compute::compute_logical_operands_in_chain (tf_range &range,\n \t\t\t\t\t\t tree op, bool op_in_chain)\n {\n   gimple *src_stmt = gimple_range_ssa_p (op) ? SSA_NAME_DEF_STMT (op) : NULL;\n-  basic_block bb = gimple_bb (stmt);\n-  if (!op_in_chain || (src_stmt != NULL && bb != gimple_bb (src_stmt)))\n+  if (!op_in_chain || (src_stmt != NULL\n+      && gimple_bb (stmt) != gimple_bb (src_stmt)))\n     {\n       // If op is not in the def chain, or defined in this block,\n       // use its known value on entry to the block.\n-      expr_range_in_bb (range.true_range, name, gimple_bb (stmt));\n+      expr_range_at_stmt (range.true_range, name, stmt);\n       range.false_range = range.true_range;\n       return;\n     }\n@@ -920,9 +920,9 @@ gori_compute::compute_logical_operands_in_chain (tf_range &range,\n   // Calculate ranges for true and false on both sides, since the false\n   // path is not always a simple inversion of the true side.\n   if (!compute_operand_range (range.true_range, src_stmt, m_bool_one, name))\n-    expr_range_in_bb (range.true_range, name, bb);\n+    expr_range_at_stmt (range.true_range, name, stmt);\n   if (!compute_operand_range (range.false_range, src_stmt, m_bool_zero, name))\n-    expr_range_in_bb (range.false_range, name, bb);\n+    expr_range_at_stmt (range.false_range, name, stmt);\n }\n \n // Given a logical STMT, calculate true and false for each potential\n@@ -968,12 +968,12 @@ gori_compute::compute_operand1_range (irange &r, gimple *stmt,\n   tree op1 = gimple_range_operand1 (stmt);\n   tree op2 = gimple_range_operand2 (stmt);\n \n-  expr_range_in_bb (op1_range, op1, gimple_bb (stmt));\n+  expr_range_at_stmt (op1_range, op1, stmt);\n \n   // Now calcuated the operand and put that result in r.\n   if (op2)\n     {\n-      expr_range_in_bb (op2_range, op2, gimple_bb (stmt));\n+      expr_range_at_stmt (op2_range, op2, stmt);\n       if (!gimple_range_calc_op1 (r, stmt, lhs, op2_range))\n \treturn false;\n     }\n@@ -1015,8 +1015,8 @@ gori_compute::compute_operand2_range (irange &r, gimple *stmt,\n   tree op1 = gimple_range_operand1 (stmt);\n   tree op2 = gimple_range_operand2 (stmt);\n \n-  expr_range_in_bb (op1_range, op1, gimple_bb (stmt));\n-  expr_range_in_bb (op2_range, op2, gimple_bb (stmt));\n+  expr_range_at_stmt (op1_range, op1, stmt);\n+  expr_range_at_stmt (op2_range, op2, stmt);\n \n   // Intersect with range for op2 based on lhs and op1.\n   if (!gimple_range_calc_op2 (r, stmt, lhs, op1_range))\n@@ -1449,7 +1449,7 @@ gori_compute_cache::cache_stmt (gimple *stmt)\n     {\n       range_operator *handler = range_op_handler (code, TREE_TYPE (lhs));\n       int_range_max op2_range;\n-      expr_range_in_bb (op2_range, op2, gimple_bb (stmt));\n+      expr_range_at_stmt (op2_range, op2, stmt);\n       tree type = TREE_TYPE (op1);\n       handler->op1_range (r_true_side, type, m_bool_one, op2_range);\n       handler->op1_range (r_false_side, type, m_bool_zero, op2_range);"}, {"sha": "8a85d6a2b799c0cdc40d0ef84a5e28f350ef8ee7", "filename": "gcc/gimple-range-gori.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bccd9154e127909a4cdff5c19904a6562fcd0ff/gcc%2Fgimple-range-gori.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bccd9154e127909a4cdff5c19904a6562fcd0ff/gcc%2Fgimple-range-gori.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.h?ref=2bccd9154e127909a4cdff5c19904a6562fcd0ff", "patch": "@@ -161,7 +161,7 @@ class gori_compute : public gori_map\n   virtual bool compute_operand_range (irange &r, gimple *stmt,\n \t\t\t\t      const irange &lhs, tree name);\n \n-  void expr_range_in_bb (irange &r, tree expr, basic_block bb);\n+  void expr_range_at_stmt (irange &r, tree expr, gimple *s);\n   bool compute_logical_operands (irange &r, gimple *stmt,\n \t\t\t\t const irange &lhs,\n \t\t\t\t tree name);"}]}