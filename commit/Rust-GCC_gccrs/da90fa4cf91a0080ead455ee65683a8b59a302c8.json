{"sha": "da90fa4cf91a0080ead455ee65683a8b59a302c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5MGZhNGNmOTFhMDA4MGVhZDQ1NWVlNjU2ODNhOGI1OWEzMDJjOA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-04-09T02:12:11Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-04-09T02:12:11Z"}, "message": "rs6000.c (rs6000_expand_vector_set): Use vnand instead of vnor to exploit possible fusion opportunity in the future.\n\n2014-04-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Use vnand\n\tinstead of vnor to exploit possible fusion opportunity in the\n\tfuture.\n\t(altivec_expand_vec_perm_const_le): Likewise.\n\nFrom-SVN: r209235", "tree": {"sha": "d178cc04e8495fa958a3cf825ccc8c454e33164f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d178cc04e8495fa958a3cf825ccc8c454e33164f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da90fa4cf91a0080ead455ee65683a8b59a302c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da90fa4cf91a0080ead455ee65683a8b59a302c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da90fa4cf91a0080ead455ee65683a8b59a302c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da90fa4cf91a0080ead455ee65683a8b59a302c8/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8312c7fd705c049a40010b442eaeabc3abe22aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8312c7fd705c049a40010b442eaeabc3abe22aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8312c7fd705c049a40010b442eaeabc3abe22aec"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "afc90799640daf57d4f20c7862c26ae5a90fdbbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da90fa4cf91a0080ead455ee65683a8b59a302c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da90fa4cf91a0080ead455ee65683a8b59a302c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da90fa4cf91a0080ead455ee65683a8b59a302c8", "patch": "@@ -1,3 +1,10 @@\n+2014-04-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Use vnand\n+\tinstead of vnor to exploit possible fusion opportunity in the\n+\tfuture.\n+\t(altivec_expand_vec_perm_const_le): Likewise.\n+\n 2014-04-08  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/sync.md (AINT mode_iterator): Move definition."}, {"sha": "f82e0a2df6e3a7b8fe481083ddb80fa618bf87c8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da90fa4cf91a0080ead455ee65683a8b59a302c8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da90fa4cf91a0080ead455ee65683a8b59a302c8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=da90fa4cf91a0080ead455ee65683a8b59a302c8", "patch": "@@ -5635,11 +5635,15 @@ rs6000_expand_vector_set (rtx target, rtx val, int elt)\n \t\t\tUNSPEC_VPERM);\n   else \n     {\n-      /* Invert selector.  */\n+      /* Invert selector.  We prefer to generate VNAND on P8 so\n+         that future fusion opportunities can kick in, but must\n+         generate VNOR elsewhere.  */\n       rtx notx = gen_rtx_NOT (V16QImode, force_reg (V16QImode, x));\n-      rtx andx = gen_rtx_AND (V16QImode, notx, notx);\n+      rtx iorx = (TARGET_P8_VECTOR\n+\t\t  ? gen_rtx_IOR (V16QImode, notx, notx)\n+\t\t  : gen_rtx_AND (V16QImode, notx, notx));\n       rtx tmp = gen_reg_rtx (V16QImode);\n-      emit_move_insn (tmp, andx);\n+      emit_insn (gen_rtx_SET (VOIDmode, tmp, iorx));\n \n       /* Permute with operands reversed and adjusted selector.  */\n       x = gen_rtx_UNSPEC (mode, gen_rtvec (3, reg, target, tmp),\n@@ -30212,12 +30216,12 @@ altivec_expand_vec_perm_const_le (rtx operands[4])\n \n /* Similarly to altivec_expand_vec_perm_const_le, we must adjust the\n    permute control vector.  But here it's not a constant, so we must\n-   generate a vector NOR to do the adjustment.  */\n+   generate a vector NAND or NOR to do the adjustment.  */\n \n void\n altivec_expand_vec_perm_le (rtx operands[4])\n {\n-  rtx notx, andx, unspec;\n+  rtx notx, iorx, unspec;\n   rtx target = operands[0];\n   rtx op0 = operands[1];\n   rtx op1 = operands[2];\n@@ -30236,10 +30240,13 @@ altivec_expand_vec_perm_le (rtx operands[4])\n   if (!REG_P (target))\n     tmp = gen_reg_rtx (mode);\n \n-  /* Invert the selector with a VNOR.  */\n+  /* Invert the selector with a VNAND if available, else a VNOR.\n+     The VNAND is preferred for future fusion opportunities.  */\n   notx = gen_rtx_NOT (V16QImode, sel);\n-  andx = gen_rtx_AND (V16QImode, notx, notx);\n-  emit_move_insn (norreg, andx);\n+  iorx = (TARGET_P8_VECTOR\n+\t  ? gen_rtx_IOR (V16QImode, notx, notx)\n+\t  : gen_rtx_AND (V16QImode, notx, notx));\n+  emit_insn (gen_rtx_SET (VOIDmode, norreg, iorx));\n \n   /* Permute with operands reversed and adjusted selector.  */\n   unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op0, norreg),"}]}