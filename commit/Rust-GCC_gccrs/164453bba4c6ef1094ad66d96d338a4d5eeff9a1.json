{"sha": "164453bba4c6ef1094ad66d96d338a4d5eeff9a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY0NDUzYmJhNGM2ZWYxMDk0YWQ2NmQ5NmQzMzhhNGQ1ZWVmZjlhMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-09-29T20:03:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-09-29T20:03:33Z"}, "message": "builtins.c (expand_builtin_acc_on_device): Delete.\n\n\tgcc/\n\t* builtins.c (expand_builtin_acc_on_device): Delete.\n\t(expand_builtin): Don't call it.\n\t(fold_builtin_1): Fold acc_on_device.\n\n\tlibgomp/\n\t* oacc-init.c (acc_on_device): Force optimization level.\n\nFrom-SVN: r228267", "tree": {"sha": "e164e8279e772b6cb877f619ba62bc39753aee68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e164e8279e772b6cb877f619ba62bc39753aee68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/164453bba4c6ef1094ad66d96d338a4d5eeff9a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164453bba4c6ef1094ad66d96d338a4d5eeff9a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164453bba4c6ef1094ad66d96d338a4d5eeff9a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164453bba4c6ef1094ad66d96d338a4d5eeff9a1/comments", "author": null, "committer": null, "parents": [{"sha": "89a13632e66017585247c655462681486c36caca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a13632e66017585247c655462681486c36caca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a13632e66017585247c655462681486c36caca"}], "stats": {"total": 82, "additions": 37, "deletions": 45}, "files": [{"sha": "7e34d4cfc161d3a8157a41a03f9be6c9f67d1c3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164453bba4c6ef1094ad66d96d338a4d5eeff9a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164453bba4c6ef1094ad66d96d338a4d5eeff9a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=164453bba4c6ef1094ad66d96d338a4d5eeff9a1", "patch": "@@ -1,3 +1,9 @@\n+2015-09-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* builtins.c (expand_builtin_acc_on_device): Delete.\n+\t(expand_builtin): Don't call it.\n+\t(fold_builtin_1): Fold acc_on_device.\n+\n 2015-09-29  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_function_arg): Fix typo in comments."}, {"sha": "15928109247a97534b74d0c9478c89381cf4ad1d", "filename": "gcc/builtins.c", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164453bba4c6ef1094ad66d96d338a4d5eeff9a1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164453bba4c6ef1094ad66d96d338a4d5eeff9a1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=164453bba4c6ef1094ad66d96d338a4d5eeff9a1", "patch": "@@ -5859,46 +5859,6 @@ expand_stack_save (void)\n }\n \n \n-/* Expand OpenACC acc_on_device.\n-\n-   This has to happen late (that is, not in early folding; expand_builtin_*,\n-   rather than fold_builtin_*), as we have to act differently for host and\n-   acceleration device (ACCEL_COMPILER conditional).  */\n-\n-static rtx\n-expand_builtin_acc_on_device (tree exp, rtx target)\n-{\n-  if (!validate_arglist (exp, INTEGER_TYPE, VOID_TYPE))\n-    return NULL_RTX;\n-\n-  tree arg = CALL_EXPR_ARG (exp, 0);\n-\n-  /* Return (arg == v1 || arg == v2) ? 1 : 0.  */\n-  machine_mode v_mode = TYPE_MODE (TREE_TYPE (arg));\n-  rtx v = expand_normal (arg), v1, v2;\n-#ifdef ACCEL_COMPILER\n-  v1 = GEN_INT (GOMP_DEVICE_NOT_HOST);\n-  v2 = GEN_INT (ACCEL_COMPILER_acc_device);\n-#else\n-  v1 = GEN_INT (GOMP_DEVICE_NONE);\n-  v2 = GEN_INT (GOMP_DEVICE_HOST);\n-#endif\n-  machine_mode target_mode = TYPE_MODE (integer_type_node);\n-  if (!target || !register_operand (target, target_mode))\n-    target = gen_reg_rtx (target_mode);\n-  emit_move_insn (target, const1_rtx);\n-  rtx_code_label *done_label = gen_label_rtx ();\n-  do_compare_rtx_and_jump (v, v1, EQ, false, v_mode, NULL_RTX,\n-\t\t\t   NULL, done_label, PROB_EVEN);\n-  do_compare_rtx_and_jump (v, v2, EQ, false, v_mode, NULL_RTX,\n-\t\t\t   NULL, done_label, PROB_EVEN);\n-  emit_move_insn (target, const0_rtx);\n-  emit_label (done_label);\n-\n-  return target;\n-}\n-\n-\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n    (and in mode MODE if that's convenient).\n@@ -7036,9 +6996,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       break;\n \n     case BUILT_IN_ACC_ON_DEVICE:\n-      target = expand_builtin_acc_on_device (exp, target);\n-      if (target)\n-\treturn target;\n+      /* Do library call, if we failed to expand the builtin when\n+\t folding.  */\n       break;\n \n     default:\t/* just do library call, if unknown builtin */\n@@ -10271,6 +10230,27 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n \treturn build_empty_stmt (loc);\n       break;\n \n+    case BUILT_IN_ACC_ON_DEVICE:\n+      /* Don't fold on_device until we know which compiler is active.  */\n+      if (symtab->state == EXPANSION)\n+\t{\n+\t  unsigned val_host = GOMP_DEVICE_HOST;\n+\t  unsigned val_dev = GOMP_DEVICE_NONE;\n+\n+#ifdef ACCEL_COMPILER\n+\t  val_host = GOMP_DEVICE_NOT_HOST;\n+\t  val_dev = ACCEL_COMPILER_acc_device;\n+#endif\n+\t  tree host = build2 (EQ_EXPR, boolean_type_node, arg0,\n+\t\t\t      build_int_cst (integer_type_node, val_host));\n+\t  tree dev = build2 (EQ_EXPR, boolean_type_node, arg0,\n+\t\t\t     build_int_cst (integer_type_node, val_dev));\n+\n+\t  tree result = build2 (TRUTH_OR_EXPR, boolean_type_node, host, dev);\n+\t  return fold_convert (integer_type_node, result);\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "8fbd6c59dee1a0a7e10fce3146e778b93cc62e52", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164453bba4c6ef1094ad66d96d338a4d5eeff9a1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164453bba4c6ef1094ad66d96d338a4d5eeff9a1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=164453bba4c6ef1094ad66d96d338a4d5eeff9a1", "patch": "@@ -1,3 +1,7 @@\n+2015-09-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* oacc-init.c (acc_on_device): Force optimization level.\n+\n 2015-09-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* plugin/plugin-nvptx.c (ARRAYSIZE): Delete."}, {"sha": "28b9e7a90f1b8a7d838bac684ba3c6b9340299d5", "filename": "libgomp/oacc-init.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164453bba4c6ef1094ad66d96d338a4d5eeff9a1/libgomp%2Foacc-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164453bba4c6ef1094ad66d96d338a4d5eeff9a1/libgomp%2Foacc-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-init.c?ref=164453bba4c6ef1094ad66d96d338a4d5eeff9a1", "patch": "@@ -620,10 +620,12 @@ acc_set_device_num (int ord, acc_device_t d)\n \n ialias (acc_set_device_num)\n \n-int\n+/* Compile on_device with optimization, so that the compiler expands\n+   this, rather than generating infinitely recursive code.  */\n+\n+int __attribute__ ((__optimize__ (\"O2\")))\n acc_on_device (acc_device_t dev)\n {\n-  /* Just rely on the compiler builtin.  */\n   return __builtin_acc_on_device (dev);\n }\n "}]}