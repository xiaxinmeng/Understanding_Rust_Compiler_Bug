{"sha": "009db074870ccdf44bafc9d3f604246ddb80974b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5ZGIwNzQ4NzBjY2RmNDRiYWZjOWQzZjYwNDI0NmRkYjgwOTc0Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-06-07T13:01:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-06-07T13:01:27Z"}, "message": "tree.c (build_common_tree_nodes): Also initialize size_type_node.\n\n2011-06-07  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (build_common_tree_nodes): Also initialize size_type_node.\n\tCall set_sizetype from here.\n\n\tc-family/\n\t* c-common.c (c_common_nodes_and_builtins): Do not set\n\tsize_type_node or call set_sizetype.\n\n\tgo/\n\t* go-lang.c (go_langhook_init): Do not set\n\tsize_type_node or call set_sizetype.\n\n\tfortran/\n\t* f95-lang.c (gfc_init_decl_processing): Do not set\n\tsize_type_node or call set_sizetype.\n\n\tjava/\n\t* decl.c (java_init_decl_processing): Properly initialize\n\tsize_type_node.\n\n\tlto/\n\t* lto-lang.c (lto_init): Do not set\n\tsize_type_node or call set_sizetype.\n\n\tada/\n\t* gcc-interface/misc.c (gnat_init): Do not set\n\tsize_type_node or call set_sizetype.\n\nFrom-SVN: r174743", "tree": {"sha": "cbb46e504142fe46fdb3be5ff672c24a8d0d2cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbb46e504142fe46fdb3be5ff672c24a8d0d2cd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/009db074870ccdf44bafc9d3f604246ddb80974b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009db074870ccdf44bafc9d3f604246ddb80974b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009db074870ccdf44bafc9d3f604246ddb80974b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009db074870ccdf44bafc9d3f604246ddb80974b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4592b92ac97f5573c08b16d115c89d3b8157c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4592b92ac97f5573c08b16d115c89d3b8157c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4592b92ac97f5573c08b16d115c89d3b8157c39"}], "stats": {"total": 96, "additions": 55, "deletions": 41}, "files": [{"sha": "4dd12e31dbc0143619ca6cd075d71dfa1384af62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -1,3 +1,8 @@\n+2011-06-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (build_common_tree_nodes): Also initialize size_type_node.\n+\tCall set_sizetype from here.\n+\n 2011-06-07  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/arm/arm.md (*maddhidi4tb, *maddhidi4tt): New define_insns."}, {"sha": "17eb8963a1d6ded8e529b7453b2145f671d71a17", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -1,3 +1,8 @@\n+2011-06-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc-interface/misc.c (gnat_init): Do not set\n+\tsize_type_node or call set_sizetype.\n+\n 2011-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils2.c (gnat_stabilize_reference): Propagate"}, {"sha": "e69668ae852a74070ec7ca3646a62d22bc958fe8", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -309,17 +309,6 @@ gnat_init (void)\n      matter since we'll use the explicit `unsigned char' for Character.  */\n   build_common_tree_nodes (flag_signed_char);\n \n-  /* In Ada, we use the unsigned type corresponding to the width of Pmode as\n-     SIZETYPE.  In most cases when ptr_mode and Pmode differ, C will use the\n-     width of ptr_mode for SIZETYPE, but we get better code using the width\n-     of Pmode.  Note that, although we manipulate negative offsets for some\n-     internal constructs and rely on compile time overflow detection in size\n-     computations, using unsigned types for SIZETYPEs is fine since they are\n-     treated specially by the middle-end, in particular sign-extended.  */\n-  size_type_node = gnat_type_for_mode (Pmode, 1);\n-  set_sizetype (size_type_node);\n-  TYPE_NAME (sizetype) = get_identifier (\"size_type\");\n-\n   /* In Ada, we use an unsigned 8-bit type for the default boolean type.  */\n   boolean_type_node = make_unsigned_type (8);\n   TREE_SET_CODE (boolean_type_node, BOOLEAN_TYPE);"}, {"sha": "1c5f9d3e00153562d111c8dd833d823bfb2d5e3b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -1,3 +1,8 @@\n+2011-06-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Do not set\n+\tsize_type_node or call set_sizetype.\n+\n 2011-06-07  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/49130"}, {"sha": "e5c070f940b7dbea1839621dd6ffb5438ae534fa", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -4666,13 +4666,7 @@ c_common_nodes_and_builtins (void)\n \t\t\t\t\t TYPE_DECL, NULL_TREE,\n \t\t\t\t\t widest_unsigned_literal_type_node));\n \n-  /* `unsigned long' is the standard type for sizeof.\n-     Note that stddef.h uses `unsigned long',\n-     and this must agree, even if long and int are the same size.  */\n-  size_type_node =\n-    TREE_TYPE (identifier_global_value (get_identifier (SIZE_TYPE)));\n   signed_size_type_node = c_common_signed_type (size_type_node);\n-  set_sizetype (size_type_node);\n \n   pid_type_node =\n     TREE_TYPE (identifier_global_value (get_identifier (PID_TYPE)));"}, {"sha": "33199109cc7bac7c7e1aab00d01fdfeeab7f7e9b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -1,3 +1,8 @@\n+2011-06-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* f95-lang.c (gfc_init_decl_processing): Do not set\n+\tsize_type_node or call set_sizetype.\n+\n 2011-06-05  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/49255"}, {"sha": "fea76102c35eddb95e6006dea86e120ee4dd84a9", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -590,9 +590,6 @@ gfc_init_decl_processing (void)\n      want double_type_node to actually have double precision.  */\n   build_common_tree_nodes (false);\n \n-  size_type_node = gfc_build_uint_type (POINTER_SIZE);\n-  set_sizetype (size_type_node);\n-\n   build_common_tree_nodes_2 (0);\n   void_list_node = build_tree_list (NULL_TREE, void_type_node);\n "}, {"sha": "edaadec3c470b935d8822af7db8e45956c014cb2", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -1,3 +1,8 @@\n+2011-06-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* go-lang.c (go_langhook_init): Do not set\n+\tsize_type_node or call set_sizetype.\n+\n 2011-05-27  Ian Lance Taylor  <iant@google.com>\n \n \t* go-backend.c: Include \"output.h\"."}, {"sha": "4687c6e19ba8f508f040ab41059a9b2e2b8adfaf", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -87,15 +87,6 @@ go_langhook_init (void)\n {\n   build_common_tree_nodes (false);\n \n-  /* The sizetype may be \"unsigned long\" or \"unsigned long long\".  */\n-  if (TYPE_MODE (long_unsigned_type_node) == ptr_mode)\n-    size_type_node = long_unsigned_type_node;\n-  else if (TYPE_MODE (long_long_unsigned_type_node) == ptr_mode)\n-    size_type_node = long_long_unsigned_type_node;\n-  else\n-    size_type_node = long_unsigned_type_node;\n-  set_sizetype (size_type_node);\n-\n   build_common_tree_nodes_2 (0);\n \n   /* We must create the gogo IR after calling build_common_tree_nodes"}, {"sha": "b29e9c29f006fb564471729b10c6b1c48e587b8d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -1,3 +1,8 @@\n+2011-06-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* decl.c (java_init_decl_processing): Properly initialize\n+\tsize_type_node.\n+\n 2011-05-30  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR middle-end/46500"}, {"sha": "0ee23742a166a4e2645d94fe68b26233583fdbcb", "filename": "gcc/java/decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -606,7 +606,14 @@ java_init_decl_processing (void)\n \n   /* This is not a java type, however tree-dfa requires a definition for\n      size_type_node.  */\n-  size_type_node = make_unsigned_type (POINTER_SIZE);\n+  if (strcmp (SIZE_TYPE, \"unsigned int\") == 0)\n+    size_type_node = make_unsigned_type (INT_TYPE_SIZE);\n+  else if (strcmp (SIZE_TYPE, \"long unsigned int\") == 0)\n+    size_type_node = make_unsigned_type (LONG_TYPE_SIZE);\n+  else if (strcmp (SIZE_TYPE, \"long long unsigned int\") == 0)\n+    size_type_node = make_unsigned_type (LONG_LONG_TYPE_SIZE);\n+  else\n+    gcc_unreachable ();\n   set_sizetype (size_type_node);\n \n   /* Define these next since types below may used them.  */"}, {"sha": "0d980ee3fc68de9f01a8a051ac35ab10c7a8c9d2", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -1,3 +1,8 @@\n+2011-06-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto-lang.c (lto_init): Do not set\n+\tsize_type_node or call set_sizetype.\n+\n 2011-06-04  Diego Novillo  <dnovillo@google.com>\n \n \t* lto.c (lto_init): New."}, {"sha": "8a4cee029d3c0ebff107aef1c5ceade7ba895c96", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -1087,17 +1087,6 @@ lto_init (void)\n   /* Create the basic integer types.  */\n   build_common_tree_nodes (flag_signed_char);\n \n-  /* Tell the middle end what type to use for the size of objects.  */\n-  if (strcmp (SIZE_TYPE, \"unsigned int\") == 0)\n-    size_type_node = unsigned_type_node;\n-  else if (strcmp (SIZE_TYPE, \"long unsigned int\") == 0)\n-    size_type_node = long_unsigned_type_node;\n-  else if (strcmp (SIZE_TYPE, \"long long unsigned int\") == 0)\n-    size_type_node = long_long_unsigned_type_node;\n-  else\n-    gcc_unreachable ();\n-  set_sizetype (size_type_node);\n-\n   /* The global tree for the main identifier is filled in by\n      language-specific front-end initialization that is not run in the\n      LTO back-end.  It appears that all languages that perform such"}, {"sha": "a2ea14c82acdfb150ccd2666a30d19cf3571d5b4", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009db074870ccdf44bafc9d3f604246ddb80974b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=009db074870ccdf44bafc9d3f604246ddb80974b", "patch": "@@ -9142,6 +9142,7 @@ build_common_tree_nodes (bool signed_char)\n         int128_unsigned_type_node = make_unsigned_type (128);\n       }\n #endif\n+\n   /* Define a boolean type.  This type only represents boolean values but\n      may be larger than char depending on the value of BOOL_TYPE_SIZE.\n      Front ends which want to override this size (i.e. Java) can redefine\n@@ -9151,6 +9152,17 @@ build_common_tree_nodes (bool signed_char)\n   TYPE_MAX_VALUE (boolean_type_node) = build_int_cst (boolean_type_node, 1);\n   TYPE_PRECISION (boolean_type_node) = 1;\n \n+  /* Define what type to use for size_t.  */\n+  if (strcmp (SIZE_TYPE, \"unsigned int\") == 0)\n+    size_type_node = unsigned_type_node;\n+  else if (strcmp (SIZE_TYPE, \"long unsigned int\") == 0)\n+    size_type_node = long_unsigned_type_node;\n+  else if (strcmp (SIZE_TYPE, \"long long unsigned int\") == 0)\n+    size_type_node = long_long_unsigned_type_node;\n+  else\n+    gcc_unreachable ();\n+  set_sizetype (size_type_node);\n+\n   /* Fill in the rest of the sized types.  Reuse existing type nodes\n      when possible.  */\n   intQI_type_node = make_or_reuse_type (GET_MODE_BITSIZE (QImode), 0);"}]}