{"sha": "aa6d7c816c8b6ed5f1348a14ad242fa936d5840f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2ZDdjODE2YzhiNmVkNWYxMzQ4YTE0YWQyNDJmYTkzNmQ1ODQwZg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-05-28T13:41:55Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-28T13:41:55Z"}, "message": "java-tree.h (method_entry): Declare.\n\n\t* java-tree.h (method_entry): Declare.  Declare VECs containing it.\n\t(struct lang_type): Change type of otable_methods, atable_methods, and\n\titable_methods to VECs.  Fix comment for atable_methods.\n\t(emit_symbol_table): Take a VEC instead of a tree.\n\t(get_symbol_table_index): Take a VEC * instead of a tree *.\n\t* class.c (add_table_and_syms): Take a VEC instead of a tree.\n\t(emit_symbol_table): Update for changed parameter type.\n\t* expr.c (get_symbol_table_index): Likewise.\n\nFrom-SVN: r159974", "tree": {"sha": "f6ffb6a81a45d1ae93105382f342bf023cae3ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6ffb6a81a45d1ae93105382f342bf023cae3ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f/comments", "author": null, "committer": null, "parents": [{"sha": "005d613b2d1f0aa304895c9fce7551ead06e9964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005d613b2d1f0aa304895c9fce7551ead06e9964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005d613b2d1f0aa304895c9fce7551ead06e9964"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "3654ae304ebcb1907864425bc3c166c5b002b4c7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=aa6d7c816c8b6ed5f1348a14ad242fa936d5840f", "patch": "@@ -1,3 +1,14 @@\n+2010-05-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* java-tree.h (method_entry): Declare.  Declare VECs containing it.\n+\t(struct lang_type): Change type of otable_methods, atable_methods, and\n+\titable_methods to VECs.  Fix comment for atable_methods.\n+\t(emit_symbol_table): Take a VEC instead of a tree.\n+\t(get_symbol_table_index): Take a VEC * instead of a tree *.\n+\t* class.c (add_table_and_syms): Take a VEC instead of a tree.\n+\t(emit_symbol_table): Update for changed parameter type.\n+\t* expr.c (get_symbol_table_index): Likewise.\n+\n 2010-05-27  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* buildings.c: Pretend to be a backend file by undefining"}, {"sha": "f346ad420f7ec54793d1c90242e54a44aef76252", "filename": "gcc/java/class.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=aa6d7c816c8b6ed5f1348a14ad242fa936d5840f", "patch": "@@ -1720,11 +1720,11 @@ supers_all_compiled (tree type)\n \n static void\n add_table_and_syms (VEC(constructor_elt,gc) **v,\n-                    tree method_slot,\n+                    VEC(method_entry,gc) *methods,\n                     const char *table_name, tree table_slot, tree table_type,\n                     const char *syms_name, tree syms_slot)\n {\n-  if (method_slot == NULL_TREE)\n+  if (methods == NULL)\n     {\n       PUSH_FIELD_VALUE (*v, table_name, null_pointer_node);\n       PUSH_FIELD_VALUE (*v, syms_name, null_pointer_node);\n@@ -2886,31 +2886,27 @@ build_symbol_entry (tree decl, tree special)\n /* Emit a symbol table: used by -findirect-dispatch.  */\n \n tree\n-emit_symbol_table (tree name, tree the_table, tree decl_list,\n+emit_symbol_table (tree name, tree the_table,\n+\t\t   VEC(method_entry,gc) *decl_table,\n                    tree the_syms_decl, tree the_array_element_type,\n \t\t   int element_size)\n {\n-  tree method_list, method, table, list, null_symbol;\n+  tree table, list, null_symbol;\n   tree table_size, the_array_type;\n-  int index;\n+  unsigned index;\n+  method_entry *e;\n   \n   /* Only emit a table if this translation unit actually made any\n      references via it. */\n-  if (decl_list == NULL_TREE)\n+  if (decl_table == NULL)\n     return the_table;\n \n   /* Build a list of _Jv_MethodSymbols for each entry in otable_methods. */\n-  index = 0;\n-  method_list = decl_list;\n-  list = NULL_TREE;  \n-  while (method_list != NULL_TREE)\n-    {\n-      tree special = TREE_PURPOSE (method_list);\n-      method = TREE_VALUE (method_list);\n-      list = tree_cons (NULL_TREE, build_symbol_entry (method, special), list);\n-      method_list = TREE_CHAIN (method_list);\n-      index++;\n-    }\n+  list = NULL_TREE;\n+  for (index = 0; VEC_iterate (method_entry, decl_table, index, e); index++)\n+    list = tree_cons (NULL_TREE,\n+\t\t      build_symbol_entry (e->method, e->special),\n+\t\t      list);\n \n   /* Terminate the list with a \"null\" entry. */\n   null_symbol = build_symbol_table_entry (null_pointer_node,"}, {"sha": "62598e7c6a2c3657a47911508bff255246e4044f", "filename": "gcc/java/expr.c", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=aa6d7c816c8b6ed5f1348a14ad242fa936d5840f", "patch": "@@ -2289,34 +2289,22 @@ invoke_build_dtable (int is_invoke_interface, VEC(tree,gc) *arg_list)\n    reused.  */\n \n int\n-get_symbol_table_index (tree t, tree special, tree *symbol_table)\n+get_symbol_table_index (tree t, tree special,\n+\t\t\tVEC(method_entry,gc) **symbol_table)\n {\n-  int i = 1;\n-  tree method_list;\n+  method_entry *e;\n+  unsigned i;\n \n-  if (*symbol_table == NULL_TREE)\n-    {\n-      *symbol_table = build_tree_list (special, t);\n-      return 1;\n-    }\n-  \n-  method_list = *symbol_table;\n-  \n-  while (1)\n-    {\n-      tree value = TREE_VALUE (method_list);\n-      tree purpose = TREE_PURPOSE (method_list);\n-      if (value == t && purpose == special)\n-\treturn i;\n-      i++;\n-      if (TREE_CHAIN (method_list) == NULL_TREE)\n-        break;\n-      else\n-        method_list = TREE_CHAIN (method_list);\n-    }\n+  for (i = 0; VEC_iterate (method_entry, *symbol_table, i, e); i++)\n+    if (t == e->method && special == e->special)\n+      goto done;\n+\n+  e = VEC_safe_push (method_entry, gc, *symbol_table, NULL);\n+  e->method = t;\n+  e->special = special;\n \n-  TREE_CHAIN (method_list) = build_tree_list (special, t);\n-  return i;\n+ done:\n+  return i+1;\n }\n \n tree "}, {"sha": "f48e4215925146508545730f5a5cb0df364174cb", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6d7c816c8b6ed5f1348a14ad242fa936d5840f/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=aa6d7c816c8b6ed5f1348a14ad242fa936d5840f", "patch": "@@ -916,25 +916,33 @@ struct GTY(()) lang_decl {\n #define TYPE_REFLECTION_DATASIZE(T)\t\t\t\t\t\\\n \t\t\t\t(TYPE_LANG_SPECIFIC (T)->reflection_datasize)\n \n+typedef struct GTY(()) method_entry_d {\n+  tree method;\n+  tree special;\n+} method_entry;\n+\n+DEF_VEC_O(method_entry);\n+DEF_VEC_ALLOC_O(method_entry,gc);\n+\n struct GTY(()) lang_type {\n   tree signature;\n   struct JCF *jcf;\n   struct CPool *cpool;\n   tree cpool_data_ref;\t\t/* Cached */\n   tree package_list;\t\t/* List of package names, progressive */\n \n-  tree otable_methods;          /* List of static decls referred to by this\n-\t\t\t\t   class.  */\n+  VEC(method_entry,gc) *otable_methods; /* List of static decls referred\n+\t\t\t\t\t   to by this class.  */\n   tree otable_decl;\t\t/* The static address table.  */\n   tree otable_syms_decl;\n \n-  tree atable_methods;          /* List of static decls referred to by this\n-\t\t\t\t   class.  */\n+  VEC(method_entry,gc) *atable_methods; /* List of abstract methods\n+\t\t\t\t\t   referred to by this class.  */\n   tree atable_decl;\t\t/* The static address table.  */\n   tree atable_syms_decl;\n \n-  tree itable_methods;          /* List of interfaces methods referred\n-\t\t\t\t   to by this class.  */\n+  VEC(method_entry,gc) *itable_methods; /* List of interface methods\n+\t\t\t\t\t   referred to by this class.  */\n   tree itable_decl;\t\t/* The interfaces table.  */\n   tree itable_syms_decl;\n \n@@ -1103,7 +1111,8 @@ extern void make_class_data (tree);\n extern int alloc_name_constant (int, tree);\n extern int alloc_constant_fieldref (tree, tree);\n extern void emit_register_classes (tree *);\n-extern tree emit_symbol_table (tree, tree, tree, tree, tree, int);\n+extern tree emit_symbol_table (tree, tree, VEC(method_entry,gc) *,\n+\t\t\t       tree, tree, int);\n extern void lang_init_source (int);\n extern void write_classfile (tree);\n extern char *print_int_node (tree);\n@@ -1206,7 +1215,7 @@ extern void register_exception_range(struct eh_range *, int, int);\n extern void finish_method (tree);\n extern void java_expand_body (tree);\n \n-extern int get_symbol_table_index (tree, tree, tree *);\n+extern int get_symbol_table_index (tree, tree, VEC(method_entry,gc) **);\n \n extern tree make_catch_class_record (tree, tree);\n extern tree emit_catch_table (tree);"}]}