{"sha": "1956beb8aa91181d614441e943a76fa7f7d8d51c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk1NmJlYjhhYTkxMTgxZDYxNDQ0MWU5NDNhNzZmYTdmN2Q4ZDUxYw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2016-07-06T12:32:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-06T12:32:35Z"}, "message": "sem_attr.adb (Analyze_Attribute): Allow any expression of discrete type.\n\n2016-07-06  Bob Duff  <duff@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): Allow any expression of\n\tdiscrete type.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Change the\n\tconstant-folding code to correctly handle cases newly allowed\n\tby Analyze_Attribute.\n\nFrom-SVN: r238042", "tree": {"sha": "ab3dafd3172a46b0fe10aff675670eb0e1ee1947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab3dafd3172a46b0fe10aff675670eb0e1ee1947"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1956beb8aa91181d614441e943a76fa7f7d8d51c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1956beb8aa91181d614441e943a76fa7f7d8d51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1956beb8aa91181d614441e943a76fa7f7d8d51c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1956beb8aa91181d614441e943a76fa7f7d8d51c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b4e076985f2c41f93fb8d8f89183ef1244f98ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4e076985f2c41f93fb8d8f89183ef1244f98ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4e076985f2c41f93fb8d8f89183ef1244f98ae"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "9a16f81a4ba3959217cc25aee9ca2b465fd9e628", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1956beb8aa91181d614441e943a76fa7f7d8d51c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1956beb8aa91181d614441e943a76fa7f7d8d51c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1956beb8aa91181d614441e943a76fa7f7d8d51c", "patch": "@@ -1,3 +1,11 @@\n+2016-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Allow any expression of\n+\tdiscrete type.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Change the\n+\tconstant-folding code to correctly handle cases newly allowed\n+\tby Analyze_Attribute.\n+\n 2016-07-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Invoke global_bindings_p"}, {"sha": "47cee2b6af2b2d648132f7583c7c38d6648bdc80", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1956beb8aa91181d614441e943a76fa7f7d8d51c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1956beb8aa91181d614441e943a76fa7f7d8d51c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=1956beb8aa91181d614441e943a76fa7f7d8d51c", "patch": "@@ -3007,50 +3007,57 @@ package body Exp_Attr is\n       -- Enum_Rep --\n       --------------\n \n-      when Attribute_Enum_Rep => Enum_Rep :\n+      when Attribute_Enum_Rep => Enum_Rep : declare\n+         Expr : Node_Id;\n       begin\n-         --  X'Enum_Rep (Y) expands to\n-\n-         --    target-type (Y)\n-\n-         --  This is simply a direct conversion from the enumeration type to\n-         --  the target integer type, which is treated by the back end as a\n-         --  normal integer conversion, treating the enumeration type as an\n-         --  integer, which is exactly what we want. We set Conversion_OK to\n-         --  make sure that the analyzer does not complain about what otherwise\n-         --  might be an illegal conversion.\n+         --  Get the expression, which is X for Enum_Type'Enum_Rep (X)\n+         --  or X'Enum_Rep.\n \n          if Is_Non_Empty_List (Exprs) then\n-            Rewrite (N,\n-              OK_Convert_To (Typ, Relocate_Node (First (Exprs))));\n+            Expr := First (Exprs);\n+         else\n+            Expr := Pref;\n+         end if;\n \n-         --  X'Enum_Rep where X is an enumeration literal is replaced by\n-         --  the literal value.\n+         --  If the expression is an enumeration literal, it is\n+         --  replaced by the literal value.\n \n-         elsif Ekind (Entity (Pref)) = E_Enumeration_Literal then\n+         if Nkind (Expr) in N_Has_Entity\n+           and then Ekind (Entity (Expr)) = E_Enumeration_Literal\n+         then\n             Rewrite (N,\n-              Make_Integer_Literal (Loc, Enumeration_Rep (Entity (Pref))));\n+              Make_Integer_Literal (Loc, Enumeration_Rep (Entity (Expr))));\n \n          --  If this is a renaming of a literal, recover the representation\n          --  of the original. If it renames an expression there is nothing\n          --  to fold.\n \n-         elsif Ekind (Entity (Pref)) = E_Constant\n-           and then Present (Renamed_Object (Entity (Pref)))\n-           and then Is_Entity_Name (Renamed_Object (Entity (Pref)))\n-           and then Ekind (Entity (Renamed_Object (Entity (Pref)))) =\n+         elsif Nkind (Expr) in N_Has_Entity\n+           and then Ekind (Entity (Expr)) = E_Constant\n+           and then Present (Renamed_Object (Entity (Expr)))\n+           and then Is_Entity_Name (Renamed_Object (Entity (Expr)))\n+           and then Ekind (Entity (Renamed_Object (Entity (Expr)))) =\n                       E_Enumeration_Literal\n          then\n             Rewrite (N,\n               Make_Integer_Literal (Loc,\n-                Enumeration_Rep (Entity (Renamed_Object (Entity (Pref))))));\n+                Enumeration_Rep (Entity (Renamed_Object (Entity (Expr))))));\n+\n+         --  If not constant-folded above, Enum_Type'Enum_Rep (X) or\n+         --  X'Enum_Rep expands to\n \n-         --  X'Enum_Rep where X is an object does a direct unchecked conversion\n-         --  of the object value, as described for the type case above.\n+         --    target-type (X)\n+\n+         --  This is simply a direct conversion from the enumeration type to\n+         --  the target integer type, which is treated by the back end as a\n+         --  normal integer conversion, treating the enumeration type as an\n+         --  integer, which is exactly what we want. We set Conversion_OK to\n+         --  make sure that the analyzer does not complain about what otherwise\n+         --  might be an illegal conversion.\n \n          else\n             Rewrite (N,\n-              OK_Convert_To (Typ, Relocate_Node (Pref)));\n+              OK_Convert_To (Typ, Relocate_Node (Expr)));\n          end if;\n \n          Set_Etype (N, Typ);"}, {"sha": "a05ad7e5532fe0ec82aa768943b799b92192a38e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1956beb8aa91181d614441e943a76fa7f7d8d51c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1956beb8aa91181d614441e943a76fa7f7d8d51c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=1956beb8aa91181d614441e943a76fa7f7d8d51c", "patch": "@@ -3742,16 +3742,8 @@ package body Sem_Attr is\n             Check_E1;\n             Check_Discrete_Type;\n             Resolve (E1, P_Base_Type);\n-\n-         else\n-            if not Is_Entity_Name (P)\n-              or else (not Is_Object (Entity (P))\n-                        and then Ekind (Entity (P)) /= E_Enumeration_Literal)\n-            then\n-               Error_Attr_P\n-                 (\"prefix of % attribute must be \" &\n-                  \"discrete type/object or enum literal\");\n-            end if;\n+         elsif not Is_Discrete_Type (Etype (P)) then\n+            Error_Attr_P (\"prefix of % attribute must be of discrete type\");\n          end if;\n \n          Set_Etype (N, Universal_Integer);"}]}