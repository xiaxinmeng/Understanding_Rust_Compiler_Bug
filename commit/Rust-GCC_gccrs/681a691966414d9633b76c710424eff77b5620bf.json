{"sha": "681a691966414d9633b76c710424eff77b5620bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxYTY5MTk2NjQxNGQ5NjMzYjc2YzcxMDQyNGVmZjc3YjU2MjBiZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-02-26T09:36:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-02-26T09:36:39Z"}, "message": "PR libstdc++/28080 (partial)\n\n2007-02-26  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28080 (partial)\n\t* include/std/bitset: Do not include <istream> and <ostream>,\n\t<ios> is enough.\n\t* include/std/iomanip: Do not include the whole <istream>,\n\t<ios> is enough; do not include <functional>; reformat.\n\t* include/std/functional: Do not include <cstddef>.\n\t* include/std/list: Do not include <bits/stl_uninitialized.h>.\n\t* include/std/numeric: Do not include the whole <iterator> and\n\t<bits/stl_function.h>.\n\t* include/std/valarray: Do not include <numeric>.\n\t* include/bits/stl_numeric.h: Include <bits/concept_check.h>.\n\t* src/iostream-inst.cc: Include <istream>.\n\t* include/ext/functional: Include <cstddef>.\n\t* testsuite/util/testsuite_hooks.h: Do not include <locale>,\n\t<ctime> is enough; qualify tm.\n\t* testsuite/util/testsuite_hooks.cc: Qualify tm.\n\n2007-02-26  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.h (class ctype_byname<char>,\n\tclass ctype_byname<wchar_t>): Declare.\n\t* src/ctype.cc (ctype_byname<wchar_t>::ctype_byname(const char*,\n\tsize_t), ctype_byname<wchar_t>::~ctype_byname): Define.\n\t* config/locale/generic/ctype_members.cc (ctype_byname<char>::\n\tctype_byname(const char*, size_t), ctype_byname<char>::~ctype_byname):\n\tLikewise.\n\t* config/locale/gnu/ctype_members.cc (ctype_byname<char>::\n\tctype_byname(const char*, size_t), ctype_byname<char>::~ctype_byname):\n\tLikewise.\n\t* config/locale/darwin/ctype_members.cc (ctype_byname<char>::\n\tctype_byname(const char*, size_t), ctype_byname<char>::~ctype_byname):\n\tLikewise.\n\t* testsuite/22_locale/headers/locale/synopsis.cc: Remove xfail.\n\nFrom-SVN: r122329", "tree": {"sha": "c4bbfc3e34ddfb85bca8cb9f18aef766183785cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4bbfc3e34ddfb85bca8cb9f18aef766183785cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/681a691966414d9633b76c710424eff77b5620bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681a691966414d9633b76c710424eff77b5620bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681a691966414d9633b76c710424eff77b5620bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681a691966414d9633b76c710424eff77b5620bf/comments", "author": null, "committer": null, "parents": [{"sha": "ef585f86e4d2b8ce047f578b5712fd721b31f58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef585f86e4d2b8ce047f578b5712fd721b31f58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef585f86e4d2b8ce047f578b5712fd721b31f58f"}], "stats": {"total": 287, "additions": 181, "deletions": 106}, "files": [{"sha": "9d5103a273ad5d0aef60d8197aa9d71a6207e54e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,3 +1,39 @@\n+2007-02-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/28080 (partial)\n+\t* include/std/bitset: Do not include <istream> and <ostream>,\n+\t<ios> is enough.\n+\t* include/std/iomanip: Do not include the whole <istream>,\n+\t<ios> is enough; do not include <functional>; reformat.\n+\t* include/std/functional: Do not include <cstddef>.\n+\t* include/std/list: Do not include <bits/stl_uninitialized.h>.\n+\t* include/std/numeric: Do not include the whole <iterator> and\n+\t<bits/stl_function.h>.\n+\t* include/std/valarray: Do not include <numeric>.\n+\t* include/bits/stl_numeric.h: Include <bits/concept_check.h>.\n+\t* src/iostream-inst.cc: Include <istream>.\n+\t* include/ext/functional: Include <cstddef>.\n+\t* testsuite/util/testsuite_hooks.h: Do not include <locale>,\n+\t<ctime> is enough; qualify tm.\n+\t* testsuite/util/testsuite_hooks.cc: Qualify tm.\n+\n+2007-02-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.h (class ctype_byname<char>,\n+\tclass ctype_byname<wchar_t>): Declare.\n+\t* src/ctype.cc (ctype_byname<wchar_t>::ctype_byname(const char*,\n+\tsize_t), ctype_byname<wchar_t>::~ctype_byname): Define.\n+\t* config/locale/generic/ctype_members.cc (ctype_byname<char>::\n+\tctype_byname(const char*, size_t), ctype_byname<char>::~ctype_byname):\n+\tLikewise.\n+\t* config/locale/gnu/ctype_members.cc (ctype_byname<char>::\n+\tctype_byname(const char*, size_t), ctype_byname<char>::~ctype_byname):\n+\tLikewise.\n+\t* config/locale/darwin/ctype_members.cc (ctype_byname<char>::\n+\tctype_byname(const char*, size_t), ctype_byname<char>::~ctype_byname):\n+\tLikewise.\n+\t* testsuite/22_locale/headers/locale/synopsis.cc: Remove xfail.\n+\n 2007-02-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/19_diagnostics/headers/cerrno/macros.cc: Include"}, {"sha": "813ec7979dbce0f7ff0720e09a4939a4ad9796ed", "filename": "libstdc++-v3/config/locale/darwin/ctype_members.cc", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // std::ctype implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,16 +41,19 @@ namespace std\n {\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n-  template<>\n-    ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n-    : ctype<char>(0, false, __refs) \n-    { \t\t\n-      if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n-\t{\n-\t  this->_S_destroy_c_locale(this->_M_c_locale_ctype);\n-\t  this->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n-\t}\n-    }\n+\n+  ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n+  : ctype<char>(0, false, __refs) \n+  { \t\t\n+    if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+      {\n+\tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+      }\n+  }\n+\n+  ctype_byname<char>::~ctype_byname()\n+  { }\n \n #ifdef _GLIBCXX_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type"}, {"sha": "0520c223874c380c13994412e31f8913110cfe9a", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // std::ctype implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,16 +40,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n-  template<>\n-    ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n-    : ctype<char>(0, false, __refs) \n-    { \t\n-      if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n-\t{\n-\t  this->_S_destroy_c_locale(this->_M_c_locale_ctype);\n-\t  this->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n-\t}\n-    }\n+  ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n+  : ctype<char>(0, false, __refs) \n+  { \t\n+    if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+      {\n+\tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+      }\n+  }\n+\n+  ctype_byname<char>::~ctype_byname()\n+  { }\n \n #ifdef _GLIBCXX_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type"}, {"sha": "3aec312f89b378c7fbedb0e17e2a1f63e478c489", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // std::ctype implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,19 +41,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n-  template<>\n-    ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n-    : ctype<char>(0, false, __refs) \n-    { \t\t\n-      if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n-\t{\n-\t  this->_S_destroy_c_locale(this->_M_c_locale_ctype);\n-\t  this->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n-\t  this->_M_toupper = this->_M_c_locale_ctype->__ctype_toupper;\n-\t  this->_M_tolower = this->_M_c_locale_ctype->__ctype_tolower;\n-\t  this->_M_table = this->_M_c_locale_ctype->__ctype_b;\n-\t}\n-    }\n+  ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n+  : ctype<char>(0, false, __refs) \n+  { \t\t\n+    if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+      {\n+\tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+\tthis->_M_toupper = this->_M_c_locale_ctype->__ctype_toupper;\n+\tthis->_M_tolower = this->_M_c_locale_ctype->__ctype_tolower;\n+\tthis->_M_table = this->_M_c_locale_ctype->__ctype_b;\n+      }\n+  }\n+\n+  ctype_byname<char>::~ctype_byname()\n+  { }\n \n #ifdef _GLIBCXX_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type"}, {"sha": "0f7cdd3a3ff53fc91b4c1cd83c47958ace186b14", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1510,7 +1511,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class ctype_byname : public ctype<_CharT>\n     {\n     public:\n-      typedef _CharT\t\tchar_type;\n+      typedef typename ctype<_CharT>::mask  mask;\n \n       explicit\n       ctype_byname(const char* __s, size_t __refs = 0);\n@@ -1522,10 +1523,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// 22.2.1.4  Class ctype_byname specializations.\n   template<>\n-    ctype_byname<char>::ctype_byname(const char*, size_t refs);\n+    class ctype_byname<char> : public ctype<char>\n+    {\n+    public:\n+      explicit\n+      ctype_byname(const char* __s, size_t __refs = 0);\n \n+    protected:\n+      virtual\n+      ~ctype_byname();\n+    };\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n-    ctype_byname<wchar_t>::ctype_byname(const char*, size_t refs);\n+    class ctype_byname<wchar_t> : public ctype<wchar_t>\n+    {\n+    public:\n+      explicit\n+      ctype_byname(const char* __s, size_t __refs = 0);\n+\n+    protected:\n+      virtual\n+      ~ctype_byname();\n+    };\n+#endif\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "2c44b180840b8dbe2e803adc23bfe3d38159b852", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // Numeric functions implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,6 +62,7 @@\n #ifndef _STL_NUMERIC_H\n #define _STL_NUMERIC_H 1\n \n+#include <bits/concept_check.h>\n #include <debug/debug.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "bc4ea5beb9edd5f4ed4a3f8d139d76c59457feec", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // Functional extensions -*- C++ -*-\n \n-// Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,6 +65,7 @@\n #pragma GCC system_header\n \n #include <functional>\n+#include <cstddef>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "ec098175012fcc153073bcfe4ff3d6ffb3bef84e", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,6 @@\n // <bitset> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -52,14 +52,12 @@\n \n #include <cstddef>     // For size_t\n #include <cstring>     // For memset\n-#include <limits>      // For numeric_limits\n #include <string>\n #include <bits/functexcept.h>   // For invalid_argument, out_of_range,\n                                 // overflow_error\n-#include <ostream>     // For ostream (operator<<)\n-#include <istream>     // For istream (operator>>)\n+#include <ios>\n \n-#define _GLIBCXX_BITSET_BITS_PER_WORD  numeric_limits<unsigned long>::digits\n+#define _GLIBCXX_BITSET_BITS_PER_WORD  (__CHAR_BIT__ * sizeof(unsigned long))\n #define _GLIBCXX_BITSET_WORDS(__n) \\\n  ((__n) < 1 ? 0 : ((__n) + _GLIBCXX_BITSET_BITS_PER_WORD - 1) \\\n                   / _GLIBCXX_BITSET_BITS_PER_WORD)"}, {"sha": "18413142161fa4add3cb5ab2a07e940a09f82f56", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // <functional> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,7 +52,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <cstddef>\n #include <bits/stl_function.h>\n \n #endif /* _GLIBCXX_FUNCTIONAL */"}, {"sha": "a1bb4149304d6ad16e4ec541bfad88d517d739c0", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // Standard stream manipulators -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,8 +43,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <istream>\n-#include <functional>\n+#include <ios>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -68,16 +68,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Resetiosflags __f)\n+    inline basic_istream<_CharT, _Traits>& \n+    operator>>(basic_istream<_CharT, _Traits>& __is, _Resetiosflags __f)\n     { \n       __is.setf(ios_base::fmtflags(0), __f._M_mask); \n       return __is; \n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Resetiosflags __f)\n+    inline basic_ostream<_CharT, _Traits>& \n+    operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)\n     { \n       __os.setf(ios_base::fmtflags(0), __f._M_mask); \n       return __os; \n@@ -102,15 +102,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setiosflags __f)\n+    inline basic_istream<_CharT, _Traits>& \n+    operator>>(basic_istream<_CharT, _Traits>& __is, _Setiosflags __f)\n     { \n       __is.setf(__f._M_mask); \n       return __is; \n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT,_Traits>& \n+    inline basic_ostream<_CharT, _Traits>& \n     operator<<(basic_ostream<_CharT,_Traits>& __os, _Setiosflags __f)\n     { \n       __os.setf(__f._M_mask); \n@@ -137,19 +137,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setbase __f)\n+    inline basic_istream<_CharT, _Traits>& \n+    operator>>(basic_istream<_CharT, _Traits>& __is, _Setbase __f)\n     {\n       __is.setf(__f._M_base ==  8 ? ios_base::oct : \n-\t      __f._M_base == 10 ? ios_base::dec : \n-\t      __f._M_base == 16 ? ios_base::hex : \n-\t      ios_base::fmtflags(0), ios_base::basefield);\n+\t\t__f._M_base == 10 ? ios_base::dec : \n+\t\t__f._M_base == 16 ? ios_base::hex : \n+\t\tios_base::fmtflags(0), ios_base::basefield);\n       return __is; \n     }\n   \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setbase __f)\n+    inline basic_ostream<_CharT, _Traits>& \n+    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)\n     {\n       __os.setf(__f._M_base ==  8 ? ios_base::oct : \n \t\t__f._M_base == 10 ? ios_base::dec : \n@@ -179,16 +179,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setfill<_CharT> __f)\n+    inline basic_istream<_CharT, _Traits>& \n+    operator>>(basic_istream<_CharT, _Traits>& __is, _Setfill<_CharT> __f)\n     { \n       __is.fill(__f._M_c); \n       return __is; \n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setfill<_CharT> __f)\n+    inline basic_ostream<_CharT, _Traits>& \n+    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)\n     { \n       __os.fill(__f._M_c); \n       return __os; \n@@ -213,16 +213,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setprecision __f)\n+    inline basic_istream<_CharT, _Traits>& \n+    operator>>(basic_istream<_CharT, _Traits>& __is, _Setprecision __f)\n     { \n       __is.precision(__f._M_n); \n       return __is; \n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setprecision __f)\n+    inline basic_ostream<_CharT, _Traits>& \n+    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)\n     { \n       __os.precision(__f._M_n); \n       return __os; \n@@ -247,16 +247,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setw __f)\n+    inline basic_istream<_CharT, _Traits>& \n+    operator>>(basic_istream<_CharT, _Traits>& __is, _Setw __f)\n     { \n       __is.width(__f._M_n); \n       return __is; \n     }\n \n   template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setw __f)\n+    inline basic_ostream<_CharT, _Traits>& \n+    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)\n     { \n       __os.width(__f._M_n); \n       return __os; "}, {"sha": "0a1ce1376151fc7974d7b57c18a5924e9bad6d99", "filename": "libstdc++-v3/include/std/list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // <list> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,7 +67,6 @@\n #include <bits/stl_algobase.h>\n #include <bits/allocator.h>\n #include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n #include <bits/stl_list.h>\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE"}, {"sha": "55ab7a8e1ee84852fa4adbd55ed006a95787b2e4", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -64,8 +64,7 @@\n \n #include <bits/c++config.h>\n #include <cstddef>\n-#include <iterator>\n-#include <bits/stl_function.h>\n+#include <bits/stl_iterator_base_types.h>\n #include <bits/stl_numeric.h>\n \n #endif /* _GLIBCXX_NUMERIC */"}, {"sha": "6b9d63f03ce5ef8ddc8c12b8f1f8a6e23f529693", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // The template and inlines for the -*- C++ -*- valarray class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -43,7 +44,6 @@\n #include <cstddef>\n #include <cmath>\n #include <cstdlib>\n-#include <numeric>\n #include <algorithm>\n #include <debug/debug.h>\n "}, {"sha": "71bf1e1116a08d21076b96ee40124b9647dbf01c", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -98,17 +99,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   ctype<wchar_t>::~ctype() \n   { _S_destroy_c_locale(_M_c_locale_ctype); }\n \n-  template<>\n-    ctype_byname<wchar_t>::ctype_byname(const char* __s, size_t __refs)\n-    : ctype<wchar_t>(__refs) \n-    { \t\t\n-      if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n-\t{\n-\t  this->_S_destroy_c_locale(this->_M_c_locale_ctype);\n-\t  this->_S_create_c_locale(this->_M_c_locale_ctype, __s);\n-\t  this->_M_initialize_ctype();\n-\t}\n-    }\n+  ctype_byname<wchar_t>::ctype_byname(const char* __s, size_t __refs)\n+  : ctype<wchar_t>(__refs) \n+  { \t\t\n+    if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+      {\n+\tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s);\n+\tthis->_M_initialize_ctype();\n+      }\n+  }\n+\n+  ctype_byname<wchar_t>::~ctype_byname() \n+  { }\n+\n #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "5eef130a429c75329d7229799dd2bb13abb7a168", "filename": "libstdc++-v3/src/iostream-inst.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fsrc%2Fiostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Fsrc%2Fiostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fiostream-inst.cc?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,6 +1,7 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -33,6 +34,7 @@\n //\n \n #include <iomanip>\n+#include <istream>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "47a5653a06d0d5d2f8c3d76542cdea052618786a", "filename": "libstdc++-v3/testsuite/22_locale/headers/locale/synopsis.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Fsynopsis.cc?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do compile { xfail *-*-* } }\n-// { dg-excess-errors \"\" }\n+// { dg-do compile }\n \n // Copyright (C) 2007 Free Software Foundation, Inc.\n //"}, {"sha": "bb63f68cd066b5d7d6865133168dd8348971b7c3", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -2,7 +2,8 @@\n \n // Utility subroutines for the C++ library testsuite. \n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -314,11 +315,11 @@ namespace __gnu_test\n   }\n \n   // For use in 22_locale/time_get and time_put.\n-  tm\n+  std::tm\n   test_tm(int sec, int min, int hour, int mday, int mon,\n \t  int year, int wday, int yday, int isdst)\n   {\n-    static tm tmp;\n+    static std::tm tmp;\n     tmp.tm_sec = sec;\n     tmp.tm_min = min;\n     tmp.tm_hour = hour;"}, {"sha": "764c09ece31de87bc8dcbec73b2bca5ee4267911", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a691966414d9633b76c710424eff77b5620bf/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h?ref=681a691966414d9633b76c710424eff77b5620bf", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Utility subroutines for the C++ library testsuite. \n //\n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -59,7 +59,8 @@\n #include <bits/c++config.h>\n #include <bits/functexcept.h>\n #include <cstddef>\n-#include <locale>\n+#include <ctime>\n+\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n #include <sys/stat.h>\n #endif\n@@ -387,8 +388,8 @@ namespace __gnu_test\n   };\n \n   // For use in 22_locale/time_get and time_put.\n-  tm test_tm(int sec, int min, int hour, int mday, int mon,\n-\t     int year, int wday, int yday, int isdst);\n+  std::tm test_tm(int sec, int min, int hour, int mday, int mon,\n+\t\t  int year, int wday, int yday, int isdst);\n \n } // namespace __gnu_test\n "}]}