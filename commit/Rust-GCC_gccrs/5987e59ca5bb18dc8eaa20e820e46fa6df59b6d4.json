{"sha": "5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4N2U1OWNhNWJiMThkYzhlYWEyMGU4MjBlNDZmYTZkZjU5YjZkNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T12:30:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T12:30:25Z"}, "message": "[multiple changes]\n\n2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* rtsfind.adb (RTE, RTE_Record_Component): In\n\tConfigurable_Run_Time_Mode, do not enable front-end inlining.\n\n2009-04-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socthi-vms.adb: Remove now unnecessary WITH clause on\n\tSystem.Address_To_Access_Conversions.\n\n2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb: Guard against ill-formed subunits.\n\n2009-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-calfor.adb (Image): Subtract 0.5 from the sub second component only\n\twhen it is positive.  This avoids a potential constraint error raised\n\tby the conversion to Natural.\n\n2009-04-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* einfo.ads: Minor comment rewording\n\n\t* sem_aggr.adb: Minor comment rewording\n\n\t* sem_ch3.adb, sem_ch6.adb: Minor reformatting\n\n2009-04-20  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (__gnat_is_readable_file): Check for file existence\n\twhen not using ACL (always the case on remote drives).\n\nFrom-SVN: r146405", "tree": {"sha": "aeac84e846faee6687e9981c8ff36e2387111a9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeac84e846faee6687e9981c8ff36e2387111a9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/comments", "author": null, "committer": null, "parents": [{"sha": "3c19e9be432611cd1be9f71a12984fa90919f5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c19e9be432611cd1be9f71a12984fa90919f5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c19e9be432611cd1be9f71a12984fa90919f5d3"}], "stats": {"total": 116, "additions": 87, "deletions": 29}, "files": [{"sha": "ddab7af9bf54787ba0810a695131a2fcf695ae44", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "patch": "@@ -1,3 +1,58 @@\n+2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* rtsfind.adb (RTE, RTE_Record_Component): In\n+\tConfigurable_Run_Time_Mode, do not enable front-end inlining.\n+\n+2009-04-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socthi-vms.adb: Remove now unnecessary WITH clause on\n+\tSystem.Address_To_Access_Conversions.\n+\n+2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb: Guard against ill-formed subunits.\n+\n+2009-04-20  Bob Duff  <duff@adacore.com>\n+\n+\t* output.adb (Flush_Buffer): Do not indent blank lines.\n+\t(Ignore_Output): New procedure for output suppression.\n+\n+2009-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-calfor.adb (Image): Subtract 0.5 from the sub second component only\n+\twhen it is positive.  This avoids a potential constraint error raised\n+\tby the conversion to Natural.\n+\n+2009-04-20  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Array): For the case where the assignment\n+\tinvolves a target that has a specified address, don't set Forward_OK\n+\tand Backward_OK to False if the rhs is an aggregate, since overlap\n+\tcan't occur.\n+\n+2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8,adb (Analyze_Object_Renaming): Reject ambiguous expressions\n+\tin an object renaming declaration when the expected type is an\n+\tanonymous access type.\n+\n+\t* sem_type.adb (Disambiguate): Use anonymousness to resolve a potential\n+\tambiguity when one interpretation is an anonymous access type and the\n+\tother is a named access type, and the context itself is anonymous\n+\n+2009-04-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* einfo.ads: Minor comment rewording\n+\n+\t* sem_aggr.adb: Minor comment rewording\n+\n+\t* sem_ch3.adb, sem_ch6.adb: Minor reformatting\n+\n+2009-04-20  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (__gnat_is_readable_file): Check for file existence\n+\twhen not using ACL (always the case on remote drives).\n+\n 2009-04-20  Robert Dewar  <dewar@adacore.com>\n \n \t* sinfo.ads: Minor comment fixes"}, {"sha": "10e9617022c4eea154a961dd199e908392cd260c", "filename": "gcc/ada/a-calfor.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Fa-calfor.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Fa-calfor.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calfor.adb?ref=5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "patch": "@@ -170,7 +170,12 @@ package body Ada.Calendar.Formatting is\n \n       --  Prevent rounding when converting to natural\n \n-      Sub_Second := Sub_Second * 100.0 - 0.5;\n+      Sub_Second := Sub_Second * 100.0;\n+\n+      if Sub_Second > 0.0 then\n+         Sub_Second := Sub_Second - 0.5;\n+      end if;\n+\n       SS_Nat := Natural (Sub_Second);\n \n       declare\n@@ -249,7 +254,12 @@ package body Ada.Calendar.Formatting is\n \n       --  Prevent rounding when converting to natural\n \n-      Sub_Second := Sub_Second * 100.0 - 0.5;\n+      Sub_Second := Sub_Second * 100.0;\n+\n+      if Sub_Second > 0.0 then\n+         Sub_Second := Sub_Second - 0.5;\n+      end if;\n+\n       SS_Nat := Natural (Sub_Second);\n \n       declare"}, {"sha": "c0ee64416af8ae1c10b1d5a10065855296cb432c", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "patch": "@@ -2637,7 +2637,7 @@ package Einfo is\n --       Present in all entities. Set only in record types that represent the\n --       underlying record view. This view is built for derivations of types\n --       with unknown discriminants; it is a record with the same structure\n---       than its corresponding record type, and whose parent is the full view\n+--       as its corresponding record type, but whose parent is the full view\n --       of the parent in the original type extension.\n \n --    Is_Unsigned_Type (Flag144)"}, {"sha": "afadbb2e5b863e539baaf97999f973db5dc5f298", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "patch": "@@ -31,31 +31,28 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Temporary version for Alpha/VMS\n+--  This is the version for OpenVMS\n \n with GNAT.OS_Lib; use GNAT.OS_Lib;\n with GNAT.Task_Lock;\n \n with Interfaces.C; use Interfaces.C;\n \n-with System.Address_To_Access_Conversions;\n-\n package body GNAT.Sockets.Thin is\n \n    Non_Blocking_Sockets : aliased Fd_Set;\n-   --  When this package is initialized with Process_Blocking_IO set\n-   --  to True, sockets are set in non-blocking mode to avoid blocking\n-   --  the whole process when a thread wants to perform a blocking IO\n-   --  operation. But the user can also set a socket in non-blocking\n-   --  mode by purpose. In order to make a difference between these\n-   --  two situations, we track the origin of non-blocking mode in\n-   --  Non_Blocking_Sockets. If S is in Non_Blocking_Sockets, it has\n-   --  been set in non-blocking mode by the user.\n+   --  When this package is initialized with Process_Blocking_IO set to True,\n+   --  sockets are set in non-blocking mode to avoid blocking the whole process\n+   --  when a thread wants to perform a blocking IO operation. But the user can\n+   --  also set a socket in non-blocking mode by purpose. In order to make a\n+   --  difference between these two situations, we track the origin of\n+   --  non-blocking mode in Non_Blocking_Sockets. If S is in\n+   --  Non_Blocking_Sockets, it has been set in non-blocking mode by the user.\n \n    Quantum : constant Duration := 0.2;\n-   --  When SOSC.Thread_Blocking_IO is False, we set sockets in\n-   --  non-blocking mode and we spend a period of time Quantum between\n-   --  two attempts on a blocking operation.\n+   --  When SOSC.Thread_Blocking_IO is False, we set sockets to non-blocking\n+   --  mode and we spend a period of time Quantum between two attempts on a\n+   --  blocking operation.\n \n    Unknown_System_Error : constant C.Strings.chars_ptr :=\n                             C.Strings.New_String (\"Unknown system error\");"}, {"sha": "774cce1296d581090f001a723fc9539b6db37468", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "patch": "@@ -950,9 +950,6 @@ package body Rtsfind is\n       --  and it prevents spurious visibility conflicts between use-visible\n       --  user entities, and entities in run-time packages.\n \n-      --  In configurable run-time mode, subprograms marked Inline_Always must\n-      --  be inlined, so in the case we retain the Front_End_Inlining mode.\n-\n       Save_Front_End_Inlining : Boolean;\n \n       procedure Check_RPC;\n@@ -1068,7 +1065,7 @@ package body Rtsfind is\n       end if;\n \n       Save_Front_End_Inlining := Front_End_Inlining;\n-      Front_End_Inlining := Configurable_Run_Time_Mode;\n+      Front_End_Inlining := False;\n \n       --  Load unit if unit not previously loaded\n \n@@ -1187,9 +1184,6 @@ package body Rtsfind is\n       --  is both efficient, and it prevents spurious visibility conflicts\n       --  between use-visible user entities, and entities in run-time packages.\n \n-      --  In configurable run-time mode, subprograms marked Inline_Always must\n-      --  be inlined, so in the case we retain the Front_End_Inlining mode.\n-\n       Save_Front_End_Inlining : Boolean;\n \n    begin\n@@ -1198,7 +1192,7 @@ package body Rtsfind is\n       --  declarations.\n \n       Save_Front_End_Inlining := Front_End_Inlining;\n-      Front_End_Inlining      := Configurable_Run_Time_Mode;\n+      Front_End_Inlining      := False;\n \n       --  Load unit if unit not previously loaded\n "}, {"sha": "ce3cb4c73ca1b90669dd2f839431b0109ed25015", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "patch": "@@ -1401,13 +1401,15 @@ package body Sem is\n          --  Comp_Unit_List, if appropriate. This is done after analysis, so if\n          --  this unit depends on some others, they have already been\n          --  appended. We ignore bodies, except for the main unit itself, and\n-         --  everything those bodies depend upon.\n+         --  everything those bodies depend upon. We have also to guard against\n+         --  ill-formed subunits that have an improper context.\n \n          if Ignore_Comp_Units then\n             Do_Analyze;\n             pragma Assert (Ignore_Comp_Units);  --  still\n \n-         elsif Nkind (Unit (Comp_Unit)) in N_Proper_Body\n+         elsif Present (Comp_Unit)\n+           and then  Nkind (Unit (Comp_Unit)) in N_Proper_Body\n            and then not In_Extended_Main_Source_Unit (Comp_Unit)\n          then\n             Ignore_Comp_Units := True;"}, {"sha": "5078bc3deb85a25249352e4982705208f97765bf", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "patch": "@@ -2427,8 +2427,8 @@ package body Sem_Aggr is\n          Ancestor_Typ := Etype (Ancestor);\n          Loc          := Sloc (Ancestor);\n \n-         --  In case of private types with unknown discriminants use the\n-         --  underlying record view if it is available\n+         --  For a private type with unknown discriminants, use the underlying\n+         --  record view if it is available.\n \n          if Has_Unknown_Discriminants (Ancestor_Typ)\n            and then Present (Full_View (Ancestor_Typ))"}]}