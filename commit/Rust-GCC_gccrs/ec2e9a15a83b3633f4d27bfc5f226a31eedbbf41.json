{"sha": "ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyZTlhMTVhODNiMzYzM2Y0ZDI3YmZjNWYyMjZhMzFlZWRiYmY0MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-04-17T13:23:09Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-04-17T13:23:09Z"}, "message": "i386.c (sse_builtin_type): New.\n\n2008-04-17  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (sse_builtin_type): New.\n\t(bdesc_sse_args): Likewise.\n\t(bdesc_sse_3arg): Removed.\n\t(bdesc_2arg): Remove IX86_BUILTIN_AESKEYGENASSIST128.\n\t(bdesc_1arg): Remove IX86_BUILTIN_ROUNDPD and\n\tIX86_BUILTIN_ROUNDPS.\n\t(ix86_init_mmx_sse_builtins): Handle bdesc_sse_args.  Remove\n\tbdesc_sse_3arg.  Remove IX86_BUILTIN_ROUNDPD and\n\tIX86_BUILTIN_ROUNDPS.\n\t(ix86_expand_sse_4_operands_builtin): Removed.\n\t(ix86_expand_sse_operands_builtin): New.\n\t(ix86_expand_unop_builtin): Remove CODE_FOR_sse4_1_roundpd\n\tand CODE_FOR_sse4_1_roundps.\n\t(ix86_expand_builtin): Remove IX86_BUILTIN_AESKEYGENASSIST128.\n\tHandle bdesc_sse_args.  Remove bdesc_sse_3arg.\n\nFrom-SVN: r134391", "tree": {"sha": "d0b8a73a356ec68569aae65e080062b934e8571b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0b8a73a356ec68569aae65e080062b934e8571b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90d6701ef8efaf2371bfa87ca70aee9ea69a9604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d6701ef8efaf2371bfa87ca70aee9ea69a9604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d6701ef8efaf2371bfa87ca70aee9ea69a9604"}], "stats": {"total": 338, "additions": 202, "deletions": 136}, "files": [{"sha": "26258e4898f00b4399fb3b3564e5fc67210b1a66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41", "patch": "@@ -1,3 +1,21 @@\n+2008-04-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (sse_builtin_type): New.\n+\t(bdesc_sse_args): Likewise.\n+\t(bdesc_sse_3arg): Removed.\n+\t(bdesc_2arg): Remove IX86_BUILTIN_AESKEYGENASSIST128.\n+\t(bdesc_1arg): Remove IX86_BUILTIN_ROUNDPD and\n+\tIX86_BUILTIN_ROUNDPS.\n+\t(ix86_init_mmx_sse_builtins): Handle bdesc_sse_args.  Remove\n+\tbdesc_sse_3arg.  Remove IX86_BUILTIN_ROUNDPD and\n+\tIX86_BUILTIN_ROUNDPS.\n+\t(ix86_expand_sse_4_operands_builtin): Removed.\n+\t(ix86_expand_sse_operands_builtin): New.\n+\t(ix86_expand_unop_builtin): Remove CODE_FOR_sse4_1_roundpd\n+\tand CODE_FOR_sse4_1_roundps.\n+\t(ix86_expand_builtin): Remove IX86_BUILTIN_AESKEYGENASSIST128.\n+\tHandle bdesc_sse_args.  Remove bdesc_sse_3arg.\n+\n 2008-04-17  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/35907"}, {"sha": "a582a7ad0737399f1fdac5bb4847e70ee2c22370", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 184, "deletions": 136, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ec2e9a15a83b3633f4d27bfc5f226a31eedbbf41", "patch": "@@ -17984,31 +17984,56 @@ static const struct builtin_description bdesc_crc32[] =\n   { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32di, 0, IX86_BUILTIN_CRC32DI, UNKNOWN, 0 },\n };\n \n-/* SSE builtins with 3 arguments and the last argument must be an immediate or xmm0.  */\n-static const struct builtin_description bdesc_sse_3arg[] =\n+/* SSE */\n+enum sse_builtin_type\n+{\n+  SSE_CTYPE_UNKNOWN,\n+  V4SF_FTYPE_V4SF_INT,\n+  V2DI_FTYPE_V2DI_INT,\n+  V2DF_FTYPE_V2DF_INT,\n+  V16QI_FTYPE_V16QI_V16QI_V16QI,\n+  V4SF_FTYPE_V4SF_V4SF_V4SF,\n+  V2DF_FTYPE_V2DF_V2DF_V2DF,\n+  V16QI_FTYPE_V16QI_V16QI_INT,\n+  V8HI_FTYPE_V8HI_V8HI_INT,\n+  V4SI_FTYPE_V4SI_V4SI_INT,\n+  V4SF_FTYPE_V4SF_V4SF_INT,\n+  V2DI_FTYPE_V2DI_V2DI_INT,\n+  V2DF_FTYPE_V2DF_V2DF_INT\n+};\n+\n+/* SSE builtins with variable number of arguments.  */\n+static const struct builtin_description bdesc_sse_args[] =\n {\n   /* SSE */\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_shufps, \"__builtin_ia32_shufps\", IX86_BUILTIN_SHUFPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_shufps, \"__builtin_ia32_shufps\", IX86_BUILTIN_SHUFPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n \n   /* SSE2 */\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_shufpd, \"__builtin_ia32_shufpd\", IX86_BUILTIN_SHUFPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_shufpd, \"__builtin_ia32_shufpd\", IX86_BUILTIN_SHUFPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n \n   /* SSE4.1 */\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendpd, \"__builtin_ia32_blendpd\", IX86_BUILTIN_BLENDPD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendps, \"__builtin_ia32_blendps\", IX86_BUILTIN_BLENDPS, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendvpd, \"__builtin_ia32_blendvpd\", IX86_BUILTIN_BLENDVPD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendvps, \"__builtin_ia32_blendvps\", IX86_BUILTIN_BLENDVPS, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_dppd, \"__builtin_ia32_dppd\", IX86_BUILTIN_DPPD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_dpps, \"__builtin_ia32_dpps\", IX86_BUILTIN_DPPS, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_insertps, \"__builtin_ia32_insertps128\", IX86_BUILTIN_INSERTPS128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mpsadbw, \"__builtin_ia32_mpsadbw128\", IX86_BUILTIN_MPSADBW128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendvb, \"__builtin_ia32_pblendvb128\", IX86_BUILTIN_PBLENDVB128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendw, \"__builtin_ia32_pblendw128\", IX86_BUILTIN_PBLENDW128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundsd, \"__builtin_ia32_roundsd\", IX86_BUILTIN_ROUNDSD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundss, \"__builtin_ia32_roundss\", IX86_BUILTIN_ROUNDSS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendpd, \"__builtin_ia32_blendpd\", IX86_BUILTIN_BLENDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendps, \"__builtin_ia32_blendps\", IX86_BUILTIN_BLENDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendvpd, \"__builtin_ia32_blendvpd\", IX86_BUILTIN_BLENDVPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendvps, \"__builtin_ia32_blendvps\", IX86_BUILTIN_BLENDVPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_dppd, \"__builtin_ia32_dppd\", IX86_BUILTIN_DPPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_dpps, \"__builtin_ia32_dpps\", IX86_BUILTIN_DPPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_insertps, \"__builtin_ia32_insertps128\", IX86_BUILTIN_INSERTPS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mpsadbw, \"__builtin_ia32_mpsadbw128\", IX86_BUILTIN_MPSADBW128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendvb, \"__builtin_ia32_pblendvb128\", IX86_BUILTIN_PBLENDVB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendw, \"__builtin_ia32_pblendw128\", IX86_BUILTIN_PBLENDW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT },\n+\n+  /* SSE4.1 and SSE5 */\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_roundpd\", IX86_BUILTIN_ROUNDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_INT },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_roundps\", IX86_BUILTIN_ROUNDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_INT },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundsd, \"__builtin_ia32_roundsd\", IX86_BUILTIN_ROUNDSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundss, \"__builtin_ia32_roundss\", IX86_BUILTIN_ROUNDSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n+\n+  /* AES */\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_aeskeygenassist, 0, IX86_BUILTIN_AESKEYGENASSIST128, UNKNOWN, (int) V2DI_FTYPE_V2DI_INT },\n \n   /* PCLMUL */\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_pclmulqdq, 0, IX86_BUILTIN_PCLMULQDQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_pclmulqdq, 0, IX86_BUILTIN_PCLMULQDQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT },\n };\n \n static const struct builtin_description bdesc_2arg[] =\n@@ -18295,7 +18320,6 @@ static const struct builtin_description bdesc_2arg[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_aesenclast, 0, IX86_BUILTIN_AESENCLAST128, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_aesdec, 0, IX86_BUILTIN_AESDEC128, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_aesdeclast, 0, IX86_BUILTIN_AESDECLAST128, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_aeskeygenassist, 0, IX86_BUILTIN_AESKEYGENASSIST128, UNKNOWN, 0 },\n };\n \n static const struct builtin_description bdesc_1arg[] =\n@@ -18370,10 +18394,6 @@ static const struct builtin_description bdesc_1arg[] =\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv2siv2di2, 0, IX86_BUILTIN_PMOVZXDQ128, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_phminposuw, \"__builtin_ia32_phminposuw128\", IX86_BUILTIN_PHMINPOSUW128, UNKNOWN, 0 },\n \n-  /* Fake 1 arg builtins with a constant smaller than 8 bits as the 2nd arg.  */\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd, 0, IX86_BUILTIN_ROUNDPD, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps, 0, IX86_BUILTIN_ROUNDPS, UNKNOWN, 0 },\n-\n   /* AES */\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_aesimc, 0, IX86_BUILTIN_AESIMC128, UNKNOWN, 0 },\n };\n@@ -19175,61 +19195,58 @@ ix86_init_mmx_sse_builtins (void)\n       def_builtin_const (OPTION_MASK_ISA_64BIT, \"__builtin_copysignq\", ftype, IX86_BUILTIN_COPYSIGNQ);\n     }\n \n-  /* Add all SSE builtins that are more or less simple operations on\n-     three operands.  */\n-  for (i = 0, d = bdesc_sse_3arg;\n-       i < ARRAY_SIZE (bdesc_sse_3arg);\n+  /* Add all SSE builtins with variable number of operands.  */\n+  for (i = 0, d = bdesc_sse_args;\n+       i < ARRAY_SIZE (bdesc_sse_args);\n        i++, d++)\n     {\n-      /* Use one of the operands; the target can have a different mode for\n-\t mask-generating compares.  */\n-      enum machine_mode mode;\n       tree type;\n \n       if (d->name == 0)\n \tcontinue;\n-      mode = insn_data[d->icode].operand[1].mode;\n \n-      switch (mode)\n+      switch ((enum sse_builtin_type) d->flag)\n \t{\n-\tcase V16QImode:\n+\tcase V4SF_FTYPE_V4SF_INT:\n+\t  type = v4sf_ftype_v4sf_int;\n+\t  break;\n+\tcase V2DI_FTYPE_V2DI_INT:\n+\t  type = v2di_ftype_v2di_int;\n+\t  break;\n+\tcase V2DF_FTYPE_V2DF_INT:\n+\t  type = v2df_ftype_v2df_int;\n+\t  break;\n+\tcase V16QI_FTYPE_V16QI_V16QI_V16QI:\n+\t  type = v16qi_ftype_v16qi_v16qi_v16qi;\n+\t  break;\n+\tcase V4SF_FTYPE_V4SF_V4SF_V4SF:\n+\t  type = v4sf_ftype_v4sf_v4sf_v4sf;\n+\t  break;\n+\tcase V2DF_FTYPE_V2DF_V2DF_V2DF:\n+\t  type = v2df_ftype_v2df_v2df_v2df;\n+\t  break;\n+\tcase V16QI_FTYPE_V16QI_V16QI_INT:\n \t  type = v16qi_ftype_v16qi_v16qi_int;\n \t  break;\n-\tcase V8HImode:\n+\tcase V8HI_FTYPE_V8HI_V8HI_INT:\n \t  type = v8hi_ftype_v8hi_v8hi_int;\n \t  break;\n-\tcase V4SImode:\n+\tcase V4SI_FTYPE_V4SI_V4SI_INT:\n \t  type = v4si_ftype_v4si_v4si_int;\n \t  break;\n-\tcase V2DImode:\n+\tcase V4SF_FTYPE_V4SF_V4SF_INT:\n+\t  type = v4sf_ftype_v4sf_v4sf_int;\n+\t  break;\n+\tcase V2DI_FTYPE_V2DI_V2DI_INT:\n \t  type = v2di_ftype_v2di_v2di_int;\n \t  break;\n-\tcase V2DFmode:\n+\tcase V2DF_FTYPE_V2DF_V2DF_INT:\n \t  type = v2df_ftype_v2df_v2df_int;\n \t  break;\n-\tcase V4SFmode:\n-\t  type = v4sf_ftype_v4sf_v4sf_int;\n-\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n \n-      /* Override for variable blends.  */\n-      switch (d->icode)\n-\t{\n-\tcase CODE_FOR_sse4_1_blendvpd:\n-\t  type = v2df_ftype_v2df_v2df_v2df;\n-\t  break;\n-\tcase CODE_FOR_sse4_1_blendvps:\n-\t  type = v4sf_ftype_v4sf_v4sf_v4sf;\n-\t  break;\n-\tcase CODE_FOR_sse4_1_pblendvb:\n-\t  type = v16qi_ftype_v16qi_v16qi_v16qi;\n-\t  break;\n-\tdefault:\n-\t  break;\n-\t}\n-\n       def_builtin_const (d->mask, d->name, type, d->code);\n     }\n \n@@ -19586,10 +19603,6 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin_const (OPTION_MASK_ISA_SSE4_1, \"__builtin_ia32_pmovzxdq128\", v2di_ftype_v4si, IX86_BUILTIN_PMOVZXDQ128);\n   def_builtin_const (OPTION_MASK_ISA_SSE4_1, \"__builtin_ia32_pmuldq128\", v2di_ftype_v4si_v4si, IX86_BUILTIN_PMULDQ128);\n \n-  /* SSE4.1 and SSE5 */\n-  def_builtin_const (OPTION_MASK_ISA_ROUND, \"__builtin_ia32_roundpd\", v2df_ftype_v2df_int, IX86_BUILTIN_ROUNDPD);\n-  def_builtin_const (OPTION_MASK_ISA_ROUND, \"__builtin_ia32_roundps\", v4sf_ftype_v4sf_int, IX86_BUILTIN_ROUNDPS);\n-\n   /* SSE4.2. */\n   ftype = build_function_type_list (unsigned_type_node,\n \t\t\t\t    unsigned_type_node,\n@@ -19807,71 +19820,128 @@ safe_vector_operand (rtx x, enum machine_mode mode)\n }\n \n /* Subroutine of ix86_expand_builtin to take care of SSE insns with\n-   4 operands. The third argument must be a constant smaller than 8\n-   bits or xmm0.  */\n+   variable number of operands.  */\n \n static rtx\n-ix86_expand_sse_4_operands_builtin (enum insn_code icode, tree exp,\n-\t\t\t\t    rtx target)\n+ix86_expand_sse_operands_builtin (enum insn_code icode, tree exp,\n+\t\t\t\t  enum sse_builtin_type type,\n+\t\t\t\t  rtx target)\n {\n   rtx pat;\n-  tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  tree arg1 = CALL_EXPR_ARG (exp, 1);\n-  tree arg2 = CALL_EXPR_ARG (exp, 2);\n-  rtx op0 = expand_normal (arg0);\n-  rtx op1 = expand_normal (arg1);\n-  rtx op2 = expand_normal (arg2);\n-  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n-  enum machine_mode mode1 = insn_data[icode].operand[1].mode;\n-  enum machine_mode mode2 = insn_data[icode].operand[2].mode;\n-  enum machine_mode mode3 = insn_data[icode].operand[3].mode;\n+  unsigned int i, nargs;\n+  int num_memory = 0;\n+  struct\n+    {\n+      rtx op;\n+      enum machine_mode mode;\n+    } args[3];\n+  bool last_arg_constant = false;\n+  const struct insn_data *insn_p = &insn_data[icode];\n+  enum machine_mode tmode = insn_p->operand[0].mode;\n \n-  if (VECTOR_MODE_P (mode1))\n-    op0 = safe_vector_operand (op0, mode1);\n-  if (VECTOR_MODE_P (mode2))\n-    op1 = safe_vector_operand (op1, mode2);\n-  if (VECTOR_MODE_P (mode3))\n-    op2 = safe_vector_operand (op2, mode3);\n+  switch (type)\n+    {\n+    case V4SF_FTYPE_V4SF_INT:\n+    case V2DI_FTYPE_V2DI_INT:\n+    case V2DF_FTYPE_V2DF_INT:\n+      nargs = 2;\n+      last_arg_constant = true;\n+      break;\n+    case V16QI_FTYPE_V16QI_V16QI_V16QI:\n+    case V4SF_FTYPE_V4SF_V4SF_V4SF:\n+    case V2DF_FTYPE_V2DF_V2DF_V2DF:\n+      nargs = 3;\n+      break;\n+    case V16QI_FTYPE_V16QI_V16QI_INT:\n+    case V8HI_FTYPE_V8HI_V8HI_INT:\n+    case V4SI_FTYPE_V4SI_V4SI_INT:\n+    case V4SF_FTYPE_V4SF_V4SF_INT:\n+    case V2DI_FTYPE_V2DI_V2DI_INT:\n+    case V2DF_FTYPE_V2DF_V2DF_INT:\n+      nargs = 3;\n+      last_arg_constant = true;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  gcc_assert (nargs <= ARRAY_SIZE (args));\n \n   if (optimize\n       || target == 0\n       || GET_MODE (target) != tmode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+      || ! (*insn_p->operand[0].predicate) (target, tmode))\n     target = gen_reg_rtx (tmode);\n \n-  if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-    op0 = copy_to_mode_reg (mode1, op0);\n-  if ((optimize && !register_operand (op1, mode2))\n-      || !(*insn_data[icode].operand[2].predicate) (op1, mode2))\n-    op1 = copy_to_mode_reg (mode2, op1);\n+  for (i = 0; i < nargs; i++)\n+    {\n+      tree arg = CALL_EXPR_ARG (exp, i);\n+      rtx op = expand_normal (arg);\n+      enum machine_mode mode = insn_p->operand[i + 1].mode;\n+      bool match = (*insn_p->operand[i + 1].predicate) (op, mode);\n \n-  if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n-    switch (icode)\n-      {\n-      case CODE_FOR_sse4_1_blendvpd:\n-      case CODE_FOR_sse4_1_blendvps:\n-      case CODE_FOR_sse4_1_pblendvb:\n-\top2 = copy_to_mode_reg (mode3, op2);\n-\tbreak;\n+      if (last_arg_constant && (i + 1) == nargs)\n+\t{\n+\t  if (!match)\n+\t    switch (icode)\n+\t      {\n+\t      case CODE_FOR_sse4_1_roundpd:\n+\t      case CODE_FOR_sse4_1_roundps:\n+\t      case CODE_FOR_sse4_1_roundsd:\n+\t      case CODE_FOR_sse4_1_roundss:\n+\t      case CODE_FOR_sse4_1_blendps:\n+\t\terror (\"the last argument must be a 4-bit immediate\");\n+\t\treturn const0_rtx;\n+\n+\t      case CODE_FOR_sse4_1_blendpd:\n+\t\terror (\"the last argument must be a 2-bit immediate\");\n+\t\treturn const0_rtx;\n+\n+\t     default:\n+\t\terror (\"the last argument must be an 8-bit immediate\");\n+\t\treturn const0_rtx;\n+\t      }\n+\t}\n+      else\n+\t{\n+\t  if (VECTOR_MODE_P (mode))\n+\t    op = safe_vector_operand (op, mode);\n \n-      case CODE_FOR_sse4_1_roundsd:\n-      case CODE_FOR_sse4_1_roundss:\n-      case CODE_FOR_sse4_1_blendps:\n-\terror (\"the third argument must be a 4-bit immediate\");\n-\treturn const0_rtx;\n+\t  /* If we aren't optimizing, only allow one memory operand to\n+\t     be generated.  */\n+\t  if (memory_operand (op, mode))\n+\t    num_memory++;\n \n-      case CODE_FOR_sse4_1_blendpd:\n-\terror (\"the third argument must be a 2-bit immediate\");\n-\treturn const0_rtx;\n+\t  gcc_assert (GET_MODE (op) == mode\n+\t\t      || GET_MODE (op) == VOIDmode);\n \n-      default:\n-\terror (\"the third argument must be an 8-bit immediate\");\n-\treturn const0_rtx;\n-      }\n+\t  if (optimize || !match || num_memory > 1)\n+\t    op = copy_to_mode_reg (mode, op);\n+\t}\n+\n+      args[i].op = op;\n+      args[i].mode = mode;\n+    }\n+\n+  switch (nargs)\n+    {\n+    case 1:\n+      pat = GEN_FCN (icode) (target, args[0].op);\n+      break;\n+    case 2:\n+      pat = GEN_FCN (icode) (target, args[0].op, args[1].op);\n+      break;\n+    case 3:\n+      pat = GEN_FCN (icode) (target, args[0].op, args[1].op,\n+\t\t\t     args[2].op);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n \n-  pat = GEN_FCN (icode) (target, op0, op1, op2);\n   if (! pat)\n     return 0;\n+\n   emit_insn (pat);\n   return target;\n }\n@@ -20241,28 +20311,7 @@ ix86_expand_unop_builtin (enum insn_code icode, tree exp,\n \top0 = copy_to_mode_reg (mode0, op0);\n     }\n \n-  switch (icode)\n-    {\n-    case CODE_FOR_sse4_1_roundpd:\n-    case CODE_FOR_sse4_1_roundps:\n-\t{\n-\t  tree arg1 = CALL_EXPR_ARG (exp, 1);\n-\t  rtx op1 = expand_normal (arg1);\n-\t  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n-\n-\t  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n-\t    {\n-\t      error (\"the second argument must be a 4-bit immediate\");\n-\t      return const0_rtx;\n-\t    }\n-\t  pat = GEN_FCN (icode) (target, op0, op1);\n-\t}\n-      break;\n-    default:\n-      pat = GEN_FCN (icode) (target, op0);\n-      break;\n-    }\n-\n+  pat = GEN_FCN (icode) (target, op0);\n   if (! pat)\n     return 0;\n   emit_insn (pat);\n@@ -21050,10 +21099,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t\t\t\t     exp, target);\n       break;\n \n-    case IX86_BUILTIN_AESKEYGENASSIST128:\n-      return ix86_expand_binop_imm_builtin (CODE_FOR_aeskeygenassist,\n-\t\t\t\t\t     exp, target);\n-\n     case IX86_BUILTIN_FEMMS:\n       emit_insn (gen_mmx_femms ());\n       return NULL_RTX;\n@@ -21412,12 +21457,15 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       break;\n     }\n \n-  for (i = 0, d = bdesc_sse_3arg;\n-       i < ARRAY_SIZE (bdesc_sse_3arg);\n+  for (i = 0, d = bdesc_sse_args;\n+       i < ARRAY_SIZE (bdesc_sse_args);\n        i++, d++)\n     if (d->code == fcode)\n-      return ix86_expand_sse_4_operands_builtin (d->icode, exp,\n-\t\t\t\t\t\t target);\n+      {\n+\tenum sse_builtin_type type = (enum sse_builtin_type) d->flag;\n+\treturn ix86_expand_sse_operands_builtin (d->icode, exp,\n+\t\t\t\t\t\t type, target);\n+      }\n \n   for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     if (d->code == fcode)"}]}