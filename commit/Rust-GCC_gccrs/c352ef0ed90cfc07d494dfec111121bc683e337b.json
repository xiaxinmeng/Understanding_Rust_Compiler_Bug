{"sha": "c352ef0ed90cfc07d494dfec111121bc683e337b", "node_id": "C_kwDOANBUbNoAKGMzNTJlZjBlZDkwY2ZjMDdkNDk0ZGZlYzExMTEyMWJjNjgzZTMzN2I", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-02-16T19:05:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-02-17T21:22:27Z"}, "message": "c++: avoid duplicate deprecated warning [PR90451]\n\nWe were getting the deprecated warning twice for the same call because we\ncalled mark_used first in finish_qualified_id_expr and then again in\nbuild_over_call.  Let's not call it the first time; C++17 clarified that a\nfunction is used only when it is selected from an overload set, which\nhappens later.\n\nThen I had to add a few more uses in places that don't do anything further\nwith the expression (convert_to_void, finish_decltype_type), and places that\nuse the expression more unusually (cp_build_addr_expr_1,\nconvert_nontype_argument).  The new mark_single_function is mostly so\nthat I only have to put the comment in one place.\n\n\tPR c++/90451\n\ngcc/cp/ChangeLog:\n\n\t* decl2.cc (mark_single_function): New.\n\t* cp-tree.h: Declare it.\n\t* typeck.cc (cp_build_addr_expr_1): mark_used when making a PMF.\n\t* semantics.cc (finish_qualified_id_expr): Not here.\n\t(finish_id_expression_1): Or here.\n\t(finish_decltype_type): Call mark_single_function.\n\t* cvt.cc (convert_to_void): And here.\n\t* pt.cc (convert_nontype_argument): And here.\n\t* init.cc (build_offset_ref): Adjust assert.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/deprecated-14.C: New test.\n\t* g++.dg/warn/deprecated-15.C: New test.", "tree": {"sha": "0c14058aac3509d668d643c748d6077570a80b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c14058aac3509d668d643c748d6077570a80b0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c352ef0ed90cfc07d494dfec111121bc683e337b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c352ef0ed90cfc07d494dfec111121bc683e337b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c352ef0ed90cfc07d494dfec111121bc683e337b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c352ef0ed90cfc07d494dfec111121bc683e337b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efbb17db52afd802300c4dcce208fab326ec2915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbb17db52afd802300c4dcce208fab326ec2915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efbb17db52afd802300c4dcce208fab326ec2915"}], "stats": {"total": 150, "additions": 132, "deletions": 18}, "files": [{"sha": "37d462fca6ebc169ce4cdca20131e365a532ce1f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c352ef0ed90cfc07d494dfec111121bc683e337b", "patch": "@@ -6930,6 +6930,7 @@ extern void no_linkage_error\t\t\t(tree);\n extern void check_default_args\t\t\t(tree);\n extern bool mark_used\t\t\t\t(tree);\n extern bool mark_used\t\t\t        (tree, tsubst_flags_t);\n+extern bool mark_single_function\t        (tree, tsubst_flags_t);\n extern void finish_static_data_member_decl\t(tree, tree, bool, tree, int);\n extern tree cp_build_parm_decl\t\t\t(tree, tree, tree);\n extern void copy_linkage\t\t\t(tree, tree);"}, {"sha": "53aa41368fecb81833a8013692a08781fbcd30aa", "filename": "gcc/cp/cvt.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fcvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fcvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.cc?ref=c352ef0ed90cfc07d494dfec111121bc683e337b", "patch": "@@ -1482,6 +1482,9 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n     default:;\n     }\n   expr = resolve_nondeduced_context (expr, complain);\n+  if (!mark_single_function (expr, complain))\n+    return error_mark_node;\n+\n   {\n     tree probe = expr;\n "}, {"sha": "2e58419ea5155b8f7d80b4ace3774695d280b770", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=c352ef0ed90cfc07d494dfec111121bc683e337b", "patch": "@@ -5718,6 +5718,29 @@ decl_dependent_p (tree decl)\n   return false;\n }\n \n+/* [basic.def.odr] A function is named [and therefore odr-used] by an\n+   expression or conversion if it is the selected member of an overload set in\n+   an overload resolution performed as part of forming that expression or\n+   conversion, unless it is a pure virtual function and either the expression\n+   is not an id-expression naming the function with an explicitly qualified\n+   name or the expression forms a pointer to member.\n+\n+   Mostly, we call mark_used in places that actually do something with a\n+   function, like build_over_call.  But in a few places we end up with a\n+   non-overloaded FUNCTION_DECL that we aren't going to do any more with, like\n+   convert_to_void.  resolve_nondeduced_context is called in those places,\n+   but it's also called in too many other places.  */\n+\n+bool\n+mark_single_function (tree expr, tsubst_flags_t complain)\n+{\n+  if (is_overloaded_fn (expr) == 1\n+      && !mark_used (expr, complain)\n+      && (complain & tf_error))\n+    return false;\n+  return true;\n+}\n+\n /* Mark DECL (either a _DECL or a BASELINK) as \"used\" in the program.\n    If DECL is a specialization or implicitly declared class member,\n    generate the actual definition.  Return false if something goes"}, {"sha": "545d904c0f934357c53f4c81f58210f0284109e2", "filename": "gcc/cp/init.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.cc?ref=c352ef0ed90cfc07d494dfec111121bc683e337b", "patch": "@@ -2362,8 +2362,9 @@ build_offset_ref (tree type, tree member, bool address_p,\n     return error_mark_node;\n \n   gcc_assert (DECL_P (member) || BASELINK_P (member));\n-  /* Callers should call mark_used before this point.  */\n-  gcc_assert (!DECL_P (member) || TREE_USED (member));\n+  /* Callers should call mark_used before this point, except for functions.  */\n+  gcc_assert (!DECL_P (member) || TREE_USED (member)\n+\t      || TREE_CODE (member) == FUNCTION_DECL);\n \n   type = TYPE_MAIN_VARIANT (type);\n   if (!COMPLETE_OR_OPEN_TYPE_P (complete_type (type)))"}, {"sha": "d4a40d517d1b16839f9bbeea84e7577f3afc99ba", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=c352ef0ed90cfc07d494dfec111121bc683e337b", "patch": "@@ -7382,6 +7382,10 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n      for examples.  */\n   if (TYPE_REF_OBJ_P (type) || TYPE_REFFN_P (type))\n     {\n+      /* Check this before we strip *& to avoid redundancy.  */\n+      if (!mark_single_function (expr, complain))\n+\treturn error_mark_node;\n+\n       tree probe_type, probe = expr;\n       if (REFERENCE_REF_P (probe))\n \tprobe = TREE_OPERAND (probe, 0);"}, {"sha": "a2c0eb050e649416bc75d601e502b04011ee2867", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=c352ef0ed90cfc07d494dfec111121bc683e337b", "patch": "@@ -2319,7 +2319,10 @@ finish_qualified_id_expr (tree qualifying_class,\n   if (error_operand_p (expr))\n     return error_mark_node;\n \n-  if ((DECL_P (expr) || BASELINK_P (expr))\n+  if (DECL_P (expr)\n+      /* Functions are marked after overload resolution; avoid redundant\n+\t warnings.  */\n+      && TREE_CODE (expr) != FUNCTION_DECL\n       && !mark_used (expr, complain))\n     return error_mark_node;\n \n@@ -4198,9 +4201,6 @@ finish_id_expression_1 (tree id_expression,\n \t  decl = (adjust_result_of_qualified_name_lookup\n \t\t  (decl, scope, current_nonlambda_class_type()));\n \n-\t  if (TREE_CODE (decl) == FUNCTION_DECL)\n-\t    mark_used (decl);\n-\n \t  cp_warn_deprecated_use_scopes (scope);\n \n \t  if (TYPE_P (scope))\n@@ -4232,18 +4232,6 @@ finish_id_expression_1 (tree id_expression,\n \t  tree first_fn = get_first_fn (decl);\n \t  first_fn = STRIP_TEMPLATE (first_fn);\n \n-\t  /* [basic.def.odr]: \"A function whose name appears as a\n-\t     potentially-evaluated expression is odr-used if it is the unique\n-\t     lookup result\".\n-\n-\t     But only mark it if it's a complete postfix-expression; in a call,\n-\t     ADL might select a different function, and we'll call mark_used in\n-\t     build_over_call.  */\n-\t  if (done\n-\t      && !really_overloaded_fn (decl)\n-\t      && !mark_used (first_fn))\n-\t    return error_mark_node;\n-\n \t  if (!template_arg_p\n \t      && (TREE_CODE (first_fn) == USING_DECL\n \t\t  || (TREE_CODE (first_fn) == FUNCTION_DECL\n@@ -11252,6 +11240,8 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n   /* The type denoted by decltype(e) is defined as follows:  */\n \n   expr = resolve_nondeduced_context (expr, complain);\n+  if (!mark_single_function (expr, complain))\n+    return error_mark_node;\n \n   if (invalid_nonstatic_memfn_p (input_location, expr, complain))\n     return error_mark_node;"}, {"sha": "f796337f73cf6229da303dc41a492df2691d8e73", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=c352ef0ed90cfc07d494dfec111121bc683e337b", "patch": "@@ -6854,6 +6854,12 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t    return error_mark_node;\n \t  }\n \n+\t/* Forming a pointer-to-member is a use of non-pure-virtual fns.  */\n+\tif (TREE_CODE (t) == FUNCTION_DECL\n+\t    && !DECL_PURE_VIRTUAL_P (t)\n+\t    && !mark_used (t, complain) && !(complain & tf_error))\n+\t  return error_mark_node;\n+\n \ttype = build_ptrmem_type (context_for_name_lookup (t),\n \t\t\t\t  TREE_TYPE (t));\n \tt = make_ptrmem_cst (type, t);"}, {"sha": "7ad7ec49c7f1d13a16cc2a3ef4f15168499f9716", "filename": "gcc/testsuite/g++.dg/warn/deprecated-14.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-14.C?ref=c352ef0ed90cfc07d494dfec111121bc683e337b", "patch": "@@ -0,0 +1,72 @@\n+// PR c++/90451\n+// { dg-do compile { target c++11 } }\n+\n+struct myclass{\n+  [[deprecated(\"deprecated-static1\")]] static void stat1() { }\n+  [[deprecated(\"deprecated-static2\")]] static void stat2() { }\n+  [[deprecated(\"deprecated-static3\")]] static void stat3() { }\n+  [[deprecated(\"deprecated-static4\")]] static void stat4() { }\n+\n+  [[deprecated(\"deprecated-non1\")]] void non1() { }\n+  [[deprecated(\"deprecated-non2\")]] void non2() { }\n+};\n+\n+[[deprecated(\"deprecated-global1\")]] void fn1();\n+[[deprecated(\"deprecated-global2\")]] void fn2();\n+[[deprecated(\"deprecated-global3\")]] void fn3();\n+\n+[[deprecated(\"deprecated-global4\")]] void fn4();\n+[[deprecated(\"deprecated-global5\")]] void fn5();\n+[[deprecated(\"deprecated-global6\")]] void fn6();\n+[[deprecated(\"deprecated-global7\")]] void fn7();\n+[[deprecated(\"deprecated-global8\")]] void fn8();\n+\n+namespace N\n+{\n+  [[deprecated(\"deprecated-ns1\")]] void fn1();\n+  [[deprecated(\"deprecated-ns2\")]] void fn2();\n+  [[deprecated(\"deprecated-ns3\")]] void fn3();\n+}\n+\n+int main()\n+{\n+  myclass::stat1(); // { dg-bogus \"deprecated-static1.*deprecated-static1\" }\n+  // { dg-warning \"deprecated-static1\" \"\" { target *-*-* } .-1 }\n+  &myclass::stat2; // { dg-bogus \"deprecated-static2.*deprecated-static2\" }\n+  // { dg-warning \"deprecated-static2\" \"\" { target *-*-* } .-1 }\n+  auto x = myclass::stat3; // { dg-bogus \"deprecated-static3.*deprecated-static3\" }\n+  // { dg-warning \"deprecated-static3\" \"\" { target *-*-* } .-1 }\n+  (void) myclass::stat4; // { dg-bogus \"deprecated-static4.*deprecated-static4\" }\n+  // { dg-warning \"deprecated-static4\" \"\" { target *-*-* } .-1 }\n+\n+  myclass m;\n+  m.myclass::non1(); // { dg-bogus \"deprecated-non1.*deprecated-non1\" }\n+  // { dg-warning \"deprecated-non1\" \"\" { target *-*-* } .-1 }\n+  &myclass::non2; // { dg-bogus \"deprecated-non2.*deprecated-non2\" }\n+  // { dg-warning \"deprecated-non2\" \"\" { target *-*-* } .-1 }\n+\n+  fn1(); // { dg-bogus \"deprecated-global1.*deprecated-global1\" }\n+  // { dg-warning \"deprecated-global1\" \"\" { target *-*-* } .-1 }\n+  &fn2; // { dg-bogus \"deprecated-global2.*deprecated-global2\" }\n+  // { dg-warning \"deprecated-global2\" \"\" { target *-*-* } .-1 }\n+  auto xg = fn3; // { dg-bogus \"deprecated-global2.*deprecated-global3\" }\n+  // { dg-warning \"deprecated-global3\" \"\" { target *-*-* } .-1 }\n+  (void) fn7; // { dg-bogus \"deprecated-global7.*deprecated-global7\" }\n+  // { dg-warning \"deprecated-global7\" \"\" { target *-*-* } .-1 }\n+\n+  ::fn4(); // { dg-bogus \"deprecated-global4.*deprecated-global4\" }\n+  // { dg-warning \"deprecated-global4\" \"\" { target *-*-* } .-1 }\n+  &::fn5; // { dg-bogus \"deprecated-global5.*deprecated-global5\" }\n+  // { dg-warning \"deprecated-global5\" \"\" { target *-*-* } .-1 }\n+  auto xgs = ::fn6; // { dg-bogus \"deprecated-global2.*deprecated-global6\" }\n+  // { dg-warning \"deprecated-global6\" \"\" { target *-*-* } .-1 }\n+  (void) ::fn8; // { dg-bogus \"deprecated-global8.*deprecated-global8\" }\n+  // { dg-warning \"deprecated-global8\" \"\" { target *-*-* } .-1 }\n+\n+  N::fn1(); // { dg-bogus \"deprecated-ns1.*deprecated-ns1\" }\n+  // { dg-warning \"deprecated-ns1\" \"\" { target *-*-* } .-1 }\n+  &N::fn2; // { dg-bogus \"deprecated-ns2.*deprecated-ns2\" }\n+  // { dg-warning \"deprecated-ns2\" \"\" { target *-*-* } .-1 }\n+  auto xgn = N::fn3; // { dg-bogus \"deprecated-ns2.*deprecated-ns3\" }\n+  // { dg-warning \"deprecated-ns3\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "7f25c46a9d7d422fc30de6099c0d5097c36e51d3", "filename": "gcc/testsuite/g++.dg/warn/deprecated-15.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c352ef0ed90cfc07d494dfec111121bc683e337b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-15.C?ref=c352ef0ed90cfc07d494dfec111121bc683e337b", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++11 } }\n+\n+using vfn_t = void();\n+\n+template <vfn_t *T> struct A { };\n+template <vfn_t& T> struct B { };\n+\n+[[deprecated(\"deprecated-global1\")]] void fn1();\n+[[deprecated(\"deprecated-global2\")]] void fn2();\n+\n+A<fn1> a; // { dg-bogus \"deprecated-global1.*deprecated-global1\" }\n+// { dg-warning \"deprecated-global1\" \"\" { target *-*-* } .-1 }\n+B<fn2> b; // { dg-bogus \"deprecated-global2.*deprecated-global2\" }\n+// { dg-warning \"deprecated-global2\" \"\" { target *-*-* } .-1 }"}]}