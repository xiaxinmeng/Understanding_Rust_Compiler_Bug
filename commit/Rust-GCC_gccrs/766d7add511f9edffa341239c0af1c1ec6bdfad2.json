{"sha": "766d7add511f9edffa341239c0af1c1ec6bdfad2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2ZDdhZGQ1MTFmOWVkZmZhMzQxMjM5YzBhZjFjMWVjNmJkZmFkMg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-08-01T08:35:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-01T08:35:04Z"}, "message": "sem_ch6.adb (Analyze_Subprogram_Body): Remove special casing of Raise_Exception\n\n2008-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body): Remove special casing of\n\tRaise_Exception\n\nFrom-SVN: r138483", "tree": {"sha": "d7660e4c4d38071baeb1384270324fdbae8f7086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7660e4c4d38071baeb1384270324fdbae8f7086"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/766d7add511f9edffa341239c0af1c1ec6bdfad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766d7add511f9edffa341239c0af1c1ec6bdfad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766d7add511f9edffa341239c0af1c1ec6bdfad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766d7add511f9edffa341239c0af1c1ec6bdfad2/comments", "author": null, "committer": null, "parents": [{"sha": "bd56b3fca70f2a9f277274847268a9b835f2a740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd56b3fca70f2a9f277274847268a9b835f2a740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd56b3fca70f2a9f277274847268a9b835f2a740"}], "stats": {"total": 15, "additions": 3, "deletions": 12}, "files": [{"sha": "498239a3af522ae56835b32418e68e9ebf3d32a1", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d7add511f9edffa341239c0af1c1ec6bdfad2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d7add511f9edffa341239c0af1c1ec6bdfad2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=766d7add511f9edffa341239c0af1c1ec6bdfad2", "patch": "@@ -1564,6 +1564,7 @@ package body Sem_Ch6 is\n          --  Subprogram_Specification. In such cases, we undo the change\n          --  made by the analysis of the specification and try to find the\n          --  spec again.\n+\n          --  Note that wrappers already have their corresponding specs and\n          --  bodies set during their creation, so if the candidate spec is\n          --  a wrapper, then we definately need to swap all types to their\n@@ -2405,17 +2406,6 @@ package body Sem_Ch6 is\n                        and then No_Return (Ent)\n                      then\n                         Set_Trivial_Subprogram (Stm);\n-\n-                     --  If the procedure name is Raise_Exception, then also\n-                     --  assume that it raises an exception. The main target\n-                     --  here is Ada.Exceptions.Raise_Exception, but this name\n-                     --  is pretty evocative in any context! Note that the\n-                     --  procedure in Ada.Exceptions is not marked No_Return\n-                     --  because of the annoying case of the null exception Id\n-                     --  when operating in Ada 95 mode.\n-\n-                     elsif Chars (Ent) = Name_Raise_Exception then\n-                        Set_Trivial_Subprogram (Stm);\n                      end if;\n                   end;\n                end if;\n@@ -7756,6 +7746,7 @@ package body Sem_Ch6 is\n          --  procedure. Note that it is only at the outer level that we\n          --  do this fiddling, for the spec cases, the already preanalyzed\n          --  parameters are not affected.\n+\n          --  For a postcondition pragma within a generic, preserve the pragma\n          --  for later expansion.\n \n@@ -7891,7 +7882,7 @@ package body Sem_Ch6 is\n          end loop;\n       end if;\n \n-      --  If we had any postconditions and expansion is enabled,, build\n+      --  If we had any postconditions and expansion is enabled, build\n       --  the Postconditions procedure.\n \n       if Present (Plist)"}]}