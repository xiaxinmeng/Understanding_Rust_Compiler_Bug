{"sha": "020b7d98589bbc928b5a66b1ed56b42af8791355", "node_id": "C_kwDOANBUbNoAKDAyMGI3ZDk4NTg5YmJjOTI4YjVhNjZiMWVkNTZiNDJhZjg3OTEzNTU", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-06-28T08:00:14Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-06-28T11:03:04Z"}, "message": "loongarch: exclude LARCH_PROLOGUE_TEMP from SIBCALL_REGS [PR 106096]\n\nThe epilogue may clobber LARCH_PROLOGUE_TEMP ($r13/$t1), so it cannot be\nused for sibcalls.\n\ngcc/ChangeLog:\n\n\tPR target/106096\n\t* config/loongarch/loongarch.h (REG_CLASS_CONTENTS): Exclude\n\t$r13 from SIBCALL_REGS.\n\t* config/loongarch/loongarch.cc (loongarch_regno_to_class):\n\tChange $r13 to JIRL_REGS.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/106096\n\t* g++.target/loongarch/loongarch.exp: New test support file.\n\t* g++.target/loongarch/pr106096.C: New test.", "tree": {"sha": "68e2389af1a27091e7b436947617d176af30f49a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68e2389af1a27091e7b436947617d176af30f49a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/020b7d98589bbc928b5a66b1ed56b42af8791355", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYrrf6AAKCRCsqtIOGecQ\n43VJAQCjd0zkKwjLns/19R/FPIdGsdCw8qAQF2j0S1QU7bsa6AEAwHskET0TX1ID\nvZSxYlHHwFkDx2FtOovRISOlMBOpCgk=\n=2Og2\n-----END PGP SIGNATURE-----", "payload": "tree 68e2389af1a27091e7b436947617d176af30f49a\nparent 88417d77fec57c9d15ac2864b37e84eee575a781\nauthor Xi Ruoyao <xry111@xry111.site> 1656403214 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1656414184 +0800\n\nloongarch: exclude LARCH_PROLOGUE_TEMP from SIBCALL_REGS [PR 106096]\n\nThe epilogue may clobber LARCH_PROLOGUE_TEMP ($r13/$t1), so it cannot be\nused for sibcalls.\n\ngcc/ChangeLog:\n\n\tPR target/106096\n\t* config/loongarch/loongarch.h (REG_CLASS_CONTENTS): Exclude\n\t$r13 from SIBCALL_REGS.\n\t* config/loongarch/loongarch.cc (loongarch_regno_to_class):\n\tChange $r13 to JIRL_REGS.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/106096\n\t* g++.target/loongarch/loongarch.exp: New test support file.\n\t* g++.target/loongarch/pr106096.C: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020b7d98589bbc928b5a66b1ed56b42af8791355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/020b7d98589bbc928b5a66b1ed56b42af8791355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020b7d98589bbc928b5a66b1ed56b42af8791355/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88417d77fec57c9d15ac2864b37e84eee575a781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88417d77fec57c9d15ac2864b37e84eee575a781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88417d77fec57c9d15ac2864b37e84eee575a781"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "c8502b0b0f3aac67c94669ff2f7ab75de9571646", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020b7d98589bbc928b5a66b1ed56b42af8791355/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020b7d98589bbc928b5a66b1ed56b42af8791355/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=020b7d98589bbc928b5a66b1ed56b42af8791355", "patch": "@@ -189,7 +189,7 @@ const enum reg_class loongarch_regno_to_class[FIRST_PSEUDO_REGISTER] = {\n     GR_REGS,\t     GR_REGS,\t      GR_REGS,\t       GR_REGS,\n     JIRL_REGS,       JIRL_REGS,       JIRL_REGS,       JIRL_REGS,\n     JIRL_REGS,       JIRL_REGS,       JIRL_REGS,       JIRL_REGS,\n-    SIBCALL_REGS,    SIBCALL_REGS,    SIBCALL_REGS,    SIBCALL_REGS,\n+    SIBCALL_REGS,    JIRL_REGS,       SIBCALL_REGS,    SIBCALL_REGS,\n     SIBCALL_REGS,    SIBCALL_REGS,    SIBCALL_REGS,    SIBCALL_REGS,\n     SIBCALL_REGS,    GR_REGS,\t      GR_REGS,\t       JIRL_REGS,\n     JIRL_REGS,       JIRL_REGS,       JIRL_REGS,       JIRL_REGS,"}, {"sha": "f9de9a6e4fbdfa9749ad4a7298a0155cd5a40a11", "filename": "gcc/config/loongarch/loongarch.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020b7d98589bbc928b5a66b1ed56b42af8791355/gcc%2Fconfig%2Floongarch%2Floongarch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020b7d98589bbc928b5a66b1ed56b42af8791355/gcc%2Fconfig%2Floongarch%2Floongarch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.h?ref=020b7d98589bbc928b5a66b1ed56b42af8791355", "patch": "@@ -511,7 +511,7 @@ enum reg_class\n #define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000 },\t/* NO_REGS  */\t\t\\\n-  { 0x001ff000, 0x00000000, 0x00000000 },\t/* SIBCALL_REGS  */\t\\\n+  { 0x001fd000, 0x00000000, 0x00000000 },\t/* SIBCALL_REGS  */\t\\\n   { 0xff9ffff0, 0x00000000, 0x00000000 },\t/* JIRL_REGS  */\t\\\n   { 0xfffffffc, 0x00000000, 0x00000000 },\t/* CSR_REGS  */\t\t\\\n   { 0xffffffff, 0x00000000, 0x00000000 },\t/* GR_REGS  */\t\t\\"}, {"sha": "4fd1194a5522d31a90300225adc8364471014c1c", "filename": "gcc/testsuite/g++.target/loongarch/loongarch.exp", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020b7d98589bbc928b5a66b1ed56b42af8791355/gcc%2Ftestsuite%2Fg%2B%2B.target%2Floongarch%2Floongarch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020b7d98589bbc928b5a66b1ed56b42af8791355/gcc%2Ftestsuite%2Fg%2B%2B.target%2Floongarch%2Floongarch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Floongarch%2Floongarch.exp?ref=020b7d98589bbc928b5a66b1ed56b42af8791355", "patch": "@@ -0,0 +1,34 @@\n+# Copyright (C) 2019-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a LoongArch target.\n+if ![istarget loongarch*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\" \"\"\n+\n+# All done.\n+dg-finish"}, {"sha": "5edbda220f71f9283c2a66c6a61c4ac7f852f67c", "filename": "gcc/testsuite/g++.target/loongarch/pr106096.C", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020b7d98589bbc928b5a66b1ed56b42af8791355/gcc%2Ftestsuite%2Fg%2B%2B.target%2Floongarch%2Fpr106096.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020b7d98589bbc928b5a66b1ed56b42af8791355/gcc%2Ftestsuite%2Fg%2B%2B.target%2Floongarch%2Fpr106096.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Floongarch%2Fpr106096.C?ref=020b7d98589bbc928b5a66b1ed56b42af8791355", "patch": "@@ -0,0 +1,75 @@\n+/* PR target/106096\n+   Reduced from gimple-range-path.cc.  It was miscompiled with -O2 and\n+   caused ICE (segfault) building stage 2 libgcc.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+enum E\n+{\n+  TS_TYPED\n+} a;\n+int b, c;\n+char d, e;\n+\n+__attribute__ ((cold, noipa, noinline)) void\n+cold (int *, E, char *, int, char *)\n+{\n+  __builtin_trap ();\n+}\n+\n+int *\n+contains_struct_check (E x)\n+{\n+  if (a)\n+    cold (&b, x, &d, c, &e);\n+  return &b;\n+}\n+\n+struct vrange\n+{\n+  virtual void set_varying (int *);\n+};\n+\n+struct int_range : vrange\n+{\n+  int *m_ranges[510];\n+};\n+\n+__attribute__ ((noipa, noinline)) void\n+vrange::set_varying (int *)\n+{\n+}\n+\n+struct Value_Range\n+{\n+  Value_Range (int *);\n+  int_range m_irange;\n+};\n+\n+__attribute__ ((noipa, noinline)) Value_Range::Value_Range (int *) {}\n+\n+struct path_range_query\n+{\n+  void ssa_range_in_phi (vrange &);\n+  bool m_resolve;\n+};\n+\n+__attribute__ ((noipa, noinline)) void\n+path_range_query::ssa_range_in_phi (vrange &r)\n+{\n+  if (m_resolve)\n+    {\n+      Value_Range (contains_struct_check (TS_TYPED));\n+      return;\n+    }\n+  r.set_varying (contains_struct_check (TS_TYPED));\n+}\n+\n+int\n+main ()\n+{\n+  path_range_query prq{ 0 };\n+  vrange vr;\n+  prq.ssa_range_in_phi (vr);\n+  return 0;\n+}"}]}