{"sha": "5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ2NmQ2M2QyZDg5Y2NiNDZmYmUyYzBjZDYyZDgyYzkxYzVkOTA3Yg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-08-10T12:48:16Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-08-10T12:48:16Z"}, "message": "re PR middle-end/45182 (Failed to build SPEC CPU 2000/2006)\n\n\tPR middle-end/45182\n\t* combine.c (make_compound_operation): Don't try to convert\n\tshifts into multiplications for modes that aren't SCALAR_INT_MODE_P.\n\n\tPR middle-end/45182\n\t* gcc.c-torture/compile/pr45182.c: New test.\n\nFrom-SVN: r163057", "tree": {"sha": "f2218b048b74165afd589a8d755a1be51d4af7ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2218b048b74165afd589a8d755a1be51d4af7ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b/comments", "author": null, "committer": null, "parents": [{"sha": "fabe484df42f056ccd1dc0cd97f69779775c7e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabe484df42f056ccd1dc0cd97f69779775c7e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabe484df42f056ccd1dc0cd97f69779775c7e25"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "68a1c8c7b130482f58ab8ef5462d506ef92f674f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b", "patch": "@@ -1,3 +1,9 @@\n+2010-08-10  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR middle-end/45182\n+\t* combine.c (make_compound_operation): Don't try to convert\n+\tshifts into multiplications for modes that aren't SCALAR_INT_MODE_P.\n+\n 2010-08-10  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (get_object_alignment): Adjust prototype."}, {"sha": "d336e5a56134a510893670ff1b231c81606e3219", "filename": "gcc/combine.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b", "patch": "@@ -7093,7 +7093,9 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n      address, we stay there.  If we have a comparison, set to COMPARE,\n      but once inside, go back to our default of SET.  */\n \n-  next_code = (code == MEM || code == PLUS || code == MINUS ? MEM\n+  next_code = (code == MEM ? MEM\n+\t       : ((code == PLUS || code == MINUS)\n+\t\t  && SCALAR_INT_MODE_P (mode)) ? MEM\n \t       : ((code == COMPARE || COMPARISON_P (x))\n \t\t  && XEXP (x, 1) == const0_rtx) ? COMPARE\n \t       : in_code == COMPARE ? SET : in_code);\n@@ -7127,8 +7129,8 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n     case PLUS:\n       lhs = XEXP (x, 0);\n       rhs = XEXP (x, 1);\n-      lhs = make_compound_operation (lhs, MEM);\n-      rhs = make_compound_operation (rhs, MEM);\n+      lhs = make_compound_operation (lhs, next_code);\n+      rhs = make_compound_operation (rhs, next_code);\n       if (GET_CODE (lhs) == MULT && GET_CODE (XEXP (lhs, 0)) == NEG\n \t  && SCALAR_INT_MODE_P (mode))\n \t{\n@@ -7157,8 +7159,8 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n     case MINUS:\n       lhs = XEXP (x, 0);\n       rhs = XEXP (x, 1);\n-      lhs = make_compound_operation (lhs, MEM);\n-      rhs = make_compound_operation (rhs, MEM);\n+      lhs = make_compound_operation (lhs, next_code);\n+      rhs = make_compound_operation (rhs, next_code);\n       if (GET_CODE (rhs) == MULT && GET_CODE (XEXP (rhs, 0)) == NEG\n \t  && SCALAR_INT_MODE_P (mode))\n \t{"}, {"sha": "3f38faf0fbd4e9e44f8495ddbeec70ff8c925e10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b", "patch": "@@ -1,3 +1,8 @@\n+2010-08-10  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR middle-end/45182\n+\t* gcc.c-torture/compile/pr45182.c: New test.\n+\n 2010-08-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/45236"}, {"sha": "ad27ff88651f47215753ebe05f17ac6489ade0e1", "filename": "gcc/testsuite/gcc.c-torture/compile/pr45182.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr45182.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr45182.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr45182.c?ref=5466d63d2d89ccb46fbe2c0cd62d82c91c5d907b", "patch": "@@ -0,0 +1,10 @@\n+typedef struct TypHeader {\n+  struct TypHeader ** ptr;\n+} *TypHandle;\n+void PlainRange (TypHandle hdList, long lenList, long low, long inc)\n+{\n+  long i;\n+  for (i = 1; i <= lenList; i++ )\n+    (((TypHandle*)((hdList)->ptr))[i] = (((TypHandle) (((long)(low + (i-1) *\n+inc) << 2) + 1))));\n+}"}]}