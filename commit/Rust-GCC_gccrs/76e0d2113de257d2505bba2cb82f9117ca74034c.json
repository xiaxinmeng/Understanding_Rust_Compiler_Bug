{"sha": "76e0d2113de257d2505bba2cb82f9117ca74034c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlMGQyMTEzZGUyNTdkMjUwNWJiYTJjYjgyZjkxMTdjYTc0MDM0Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-17T15:26:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-17T15:26:10Z"}, "message": "(reload): If checking stack, verify frame small enough.\n\nFrom-SVN: r14471", "tree": {"sha": "5589ec2fb0d9cd51eec2cbedc6dda78ab317468a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5589ec2fb0d9cd51eec2cbedc6dda78ab317468a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e0d2113de257d2505bba2cb82f9117ca74034c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e0d2113de257d2505bba2cb82f9117ca74034c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e0d2113de257d2505bba2cb82f9117ca74034c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e0d2113de257d2505bba2cb82f9117ca74034c/comments", "author": null, "committer": null, "parents": [{"sha": "11044f6690c12aa40ed84655c9949e0e3ab16bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11044f6690c12aa40ed84655c9949e0e3ab16bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11044f6690c12aa40ed84655c9949e0e3ab16bd1"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "8ad19a6d8fa9e0237d72ed0c177675e709a58cc8", "filename": "gcc/reload1.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e0d2113de257d2505bba2cb82f9117ca74034c/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e0d2113de257d2505bba2cb82f9117ca74034c/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=76e0d2113de257d2505bba2cb82f9117ca74034c", "patch": "@@ -2162,6 +2162,20 @@ reload (first, global, dumpfile)\n       }\n #endif\n \n+  /* If we are doing stack checking, give a warning if this function's\n+     frame size is larger than we expect.  */\n+  if (flag_stack_check && ! STACK_CHECK_BUILTIN)\n+    {\n+      HOST_WIDE_INT size = get_frame_size () + STACK_CHECK_FIXED_FRAME_SIZE;\n+\n+      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\tif (regs_ever_live[i] && ! fixed_regs[i] && call_used_regs[i])\n+\t  size += UNITS_PER_WORD;\n+\n+      if (size > STACK_CHECK_MAX_FRAME_SIZE)\n+\twarning (\"frame size too large for reliable stack checking\");\n+    }\n+\t\n   /* Indicate that we no longer have known memory locations or constants.  */\n   reg_equiv_constant = 0;\n   reg_equiv_memory_loc = 0;"}]}