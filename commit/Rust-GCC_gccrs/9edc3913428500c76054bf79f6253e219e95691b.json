{"sha": "9edc3913428500c76054bf79f6253e219e95691b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkYzM5MTM0Mjg1MDBjNzYwNTRiZjc5ZjYyNTNlMjE5ZTk1NjkxYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-01T16:51:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-01T16:51:17Z"}, "message": "cp-tree.h (same_type_ignoring_top_level_qualifiers_p): New macro.\n\n\t* cp-tree.h (same_type_ignoring_top_level_qualifiers_p): New\n\tmacro.\n\t* call.c (standard_conversion): Use it.\n\t(direct_reference_binding): Likewise.\n\t(build_over_call): Likewise.\n\t(is_properly_derived_from): Likewise.\n\t(compare_ics): Likewise.\n\t* class.c (resolves_to_fixed_type_p): Likewise.\n\t* optimize.c (declare_return_variable): Likewise.\n\t* pt.c (is_specialization_of): Likewise.\n\t(unify): Likewise.\n\t* typeck.c (comp_target_parms): Likeiwse.\n\t(build_static_cast): Likewise.\n\t(build_reinterpret_cast): Likewise.\n\t(build_const_cast): Likewise.\n\t(comp_ptr_ttypes_real): Likewise.\n\t(comp_ptr_ttypes_const): Likewise.\n\t* typeck2.c (process_init_constructor): Likewise.\n\nFrom-SVN: r33571", "tree": {"sha": "c437d2c343b5450b9585cb769c2373d98349172b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c437d2c343b5450b9585cb769c2373d98349172b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9edc3913428500c76054bf79f6253e219e95691b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edc3913428500c76054bf79f6253e219e95691b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9edc3913428500c76054bf79f6253e219e95691b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edc3913428500c76054bf79f6253e219e95691b/comments", "author": null, "committer": null, "parents": [{"sha": "52e45a606ddb000436509eacf8039bb69860714f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e45a606ddb000436509eacf8039bb69860714f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e45a606ddb000436509eacf8039bb69860714f"}], "stats": {"total": 113, "additions": 75, "deletions": 38}, "files": [{"sha": "efbd8e522040568642d4a8a255841229204aa2f3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9edc3913428500c76054bf79f6253e219e95691b", "patch": "@@ -1,3 +1,24 @@\n+2000-05-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (same_type_ignoring_top_level_qualifiers_p): New\n+\tmacro.\n+\t* call.c (standard_conversion): Use it.\n+\t(direct_reference_binding): Likewise.\n+\t(build_over_call): Likewise.\n+\t(is_properly_derived_from): Likewise.\n+\t(compare_ics): Likewise.\n+\t* class.c (resolves_to_fixed_type_p): Likewise.\n+\t* optimize.c (declare_return_variable): Likewise.\n+\t* pt.c (is_specialization_of): Likewise.\n+\t(unify): Likewise.\n+\t* typeck.c (comp_target_parms): Likeiwse.\n+\t(build_static_cast): Likewise.\n+\t(build_reinterpret_cast): Likewise.\n+\t(build_const_cast): Likewise.\n+\t(comp_ptr_ttypes_real): Likewise.\n+\t(comp_ptr_ttypes_const): Likewise.\n+\t* typeck2.c (process_init_constructor): Likewise.\n+\n 2000-04-30  Scott Snyder <snyder@fnal.gov>\n \n \t* decl.c (finish_destructor_body): Use the base destructor when"}, {"sha": "05251bbb9bd3c56f2929e15c9c80a85672762642", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9edc3913428500c76054bf79f6253e219e95691b", "patch": "@@ -712,8 +712,8 @@ standard_conversion (to, from, expr)\n       enum tree_code ufcode = TREE_CODE (TREE_TYPE (from));\n       enum tree_code utcode = TREE_CODE (TREE_TYPE (to));\n \n-      if (same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (from)),\n-\t\t       TYPE_MAIN_VARIANT (TREE_TYPE (to))))\n+      if (same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (from),\n+\t\t\t\t\t\t     TREE_TYPE (to)))\n \t;\n       else if (utcode == VOID_TYPE && ufcode != OFFSET_TYPE\n \t       && ufcode != FUNCTION_TYPE)\n@@ -729,9 +729,9 @@ standard_conversion (to, from, expr)\n \t  tree tbase = TYPE_OFFSET_BASETYPE (TREE_TYPE (to));\n \n \t  if (DERIVED_FROM_P (fbase, tbase)\n-\t      && (same_type_p \n-\t\t  (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (from))),\n-\t\t   TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (to))))))\n+\t      && (same_type_ignoring_top_level_qualifiers_p\n+\t\t  (TREE_TYPE (TREE_TYPE (from)),\n+\t\t   TREE_TYPE (TREE_TYPE (to)))))\n \t    {\n \t      from = build_offset_type (tbase, TREE_TYPE (TREE_TYPE (from)));\n \t      from = build_pointer_type (from);\n@@ -1007,8 +1007,7 @@ direct_reference_binding (type, conv)\n      either an identity conversion or, if the conversion function\n      returns an entity of a type that is a derived class of the\n      parameter type, a derived-to-base conversion.  */\n-  if (!same_type_p (TYPE_MAIN_VARIANT (t),\n-\t\t    TYPE_MAIN_VARIANT (TREE_TYPE (conv))))\n+  if (!same_type_ignoring_top_level_qualifiers_p (t, TREE_TYPE (conv)))\n     {\n       /* Represent the derived-to-base conversion.  */\n       conv = build_conv (BASE_CONV, t, conv);\n@@ -4076,8 +4075,8 @@ build_over_call (cand, args, flags)\n       if (TREE_CODE (targ) == ADDR_EXPR)\n \t{\n \t  targ = TREE_OPERAND (targ, 0);\n-\t  if (!same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (arg))),\n-\t\t\t    TYPE_MAIN_VARIANT (TREE_TYPE (targ))))\n+\t  if (!same_type_ignoring_top_level_qualifiers_p \n+\t      (TREE_TYPE (TREE_TYPE (arg)), TREE_TYPE (targ)))\n \t    targ = NULL_TREE;\n \t}\n       else\n@@ -4480,8 +4479,7 @@ is_properly_derived_from (derived, base)\n \n   /* We only allow proper derivation here.  The DERIVED_FROM_P macro\n      considers every class derived from itself.  */\n-  return (!same_type_p (TYPE_MAIN_VARIANT (derived),\n-\t\t\tTYPE_MAIN_VARIANT (base))\n+  return (!same_type_ignoring_top_level_qualifiers_p (derived, base)\n \t  && DERIVED_FROM_P (base, derived));\n }\n \n@@ -4870,8 +4868,7 @@ compare_ics (ics1, ics2)\n      which the reference initialized by S1 refers */\n       \n   if (ref_binding1 && ref_binding2\n-      && same_type_p (TYPE_MAIN_VARIANT (to_type1),\n-\t\t      TYPE_MAIN_VARIANT (to_type2)))\n+      && same_type_ignoring_top_level_qualifiers_p (to_type1, to_type2))\n     return comp_cv_qualification (target_type2, target_type1);\n \n   /* Neither conversion sequence is better than the other.  */"}, {"sha": "7198e542ba1eb748cbe1943430113043637c0b86", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9edc3913428500c76054bf79f6253e219e95691b", "patch": "@@ -5215,7 +5215,7 @@ resolves_to_fixed_type_p (instance, nonnull)\n     return 0;\n   if (POINTER_TYPE_P (t))\n     t = TREE_TYPE (t);\n-  return same_type_p (TYPE_MAIN_VARIANT (t), TYPE_MAIN_VARIANT (fixed));\n+  return same_type_ignoring_top_level_qualifiers_p (t, fixed);\n }\n \n \f"}, {"sha": "0909d9550e3475b0bc08260f2600e37542d0aaf1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9edc3913428500c76054bf79f6253e219e95691b", "patch": "@@ -3670,6 +3670,11 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n #define same_type_p(type1, type2) \\\n   comptypes ((type1), (type2), COMPARE_STRICT)\n \n+/* Returns nonzero iff TYPE1 and TYPE2 are the same type, ignoring\n+   top-level qualifiers.  */\n+#define same_type_ignoring_top_level_qualifiers_p(type1, type2) \\\n+  same_type_p (TYPE_MAIN_VARIANT (type1), TYPE_MAIN_VARIANT (type2))\n+\n /* Returns nonzero iff TYPE1 and TYPE2 are the same type, or if TYPE2\n    is derived from TYPE1, or if TYPE2 is a pointer (reference) to a\n    class derived from the type pointed to (referred to) by TYPE1.  */"}, {"sha": "691969de92d0e9c68f3132677d76e69e72da880c", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=9edc3913428500c76054bf79f6253e219e95691b", "patch": "@@ -490,9 +490,10 @@ declare_return_variable (id, use_stmt)\n       my_friendly_assert (id->target_exprs->elements_used != 0,\n \t\t\t  20000430);\n       var = TREE_OPERAND (VARRAY_TOP_TREE (id->target_exprs), 0);\n-      my_friendly_assert (same_type_p (TREE_TYPE (var), \n-\t\t\t\t       TREE_TYPE (result)),\n-\t\t\t  20000430);\n+      my_friendly_assert \n+\t(same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (var), \n+\t\t\t\t\t\t    TREE_TYPE (result)),\n+\t 20000430);\n     }\n   /* Otherwise, make an appropriate copy.  */\n   else"}, {"sha": "ee7f90d31342aee3cf6e123e7aa56f29eb753874", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9edc3913428500c76054bf79f6253e219e95691b", "patch": "@@ -749,8 +749,7 @@ is_specialization_of (decl, tmpl)\n \t   t != NULL_TREE;\n \t   t = CLASSTYPE_USE_TEMPLATE (t)\n \t     ? TREE_TYPE (CLASSTYPE_TI_TEMPLATE (t)) : NULL_TREE)\n-\tif (same_type_p (TYPE_MAIN_VARIANT (t), \n-\t\t\t TYPE_MAIN_VARIANT (TREE_TYPE (tmpl))))\n+\tif (same_type_ignoring_top_level_qualifiers_p (t, TREE_TYPE (tmpl)))\n \t  return 1;\n     }  \n \n@@ -8528,11 +8527,9 @@ unify (tparms, targs, parm, arg, strict)\n \t\t\tTYPE_MAX_VALUE (arg), UNIFY_ALLOW_INTEGER))\n \t    return 1;\n \t}\n-      /* We use the TYPE_MAIN_VARIANT since we have already\n-\t checked cv-qualification at the top of the\n+      /* We have already checked cv-qualification at the top of the\n \t function.  */\n-      else if (!same_type_p (TYPE_MAIN_VARIANT (arg),\n-\t\t\t     TYPE_MAIN_VARIANT (parm)))\n+      else if (!same_type_ignoring_top_level_qualifiers_p (arg, parm))\n \treturn 1;\n \n       /* As far as unification is concerned, this wins.\t Later checks\n@@ -8621,8 +8618,7 @@ unify (tparms, targs, parm, arg, strict)\n \t  return unify (tparms, targs, CLASSTYPE_TI_ARGS (parm),\n \t\t\tCLASSTYPE_TI_ARGS (t), UNIFY_ALLOW_NONE);\n \t}\n-      else if (!same_type_p (TYPE_MAIN_VARIANT (parm),\n-\t\t\t     TYPE_MAIN_VARIANT (arg)))\n+      else if (!same_type_ignoring_top_level_qualifiers_p (parm, arg))\n \treturn 1;\n       return 0;\n "}, {"sha": "12bfb993f970000b7c7777e74cf87610c514ea5e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9edc3913428500c76054bf79f6253e219e95691b", "patch": "@@ -1516,8 +1516,8 @@ comp_target_parms (parms1, parms2, strict)\n \t      continue;\n \t    }\n \t  if (IS_AGGR_TYPE (TREE_TYPE (p1))\n-\t      && !same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (p1)),\n-\t\t\t       TYPE_MAIN_VARIANT (TREE_TYPE (p2))))\n+\t      && !same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (p1),\n+\t\t\t\t\t\t\t     TREE_TYPE (p2)))\n \t    return 0;\n \t}\n       /* Note backwards order due to contravariance.  */\n@@ -5178,8 +5178,9 @@ build_static_cast (type, expr)\n     }\n   else if (TYPE_PTRMEM_P (type) && TYPE_PTRMEM_P (intype))\n     {\n-      if (same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type))),\n-\t\t       TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (intype))))\n+      if (same_type_ignoring_top_level_qualifiers_p\n+\t  (TREE_TYPE (TREE_TYPE (type)),\n+\t   TREE_TYPE (TREE_TYPE (intype)))\n \t  && (binfo = get_binfo (TYPE_OFFSET_BASETYPE (TREE_TYPE (type)),\n \t\t\t\t TYPE_OFFSET_BASETYPE (TREE_TYPE (intype)), 0))\n \t  && ! TREE_VIA_VIRTUAL (binfo))\n@@ -5255,8 +5256,7 @@ build_reinterpret_cast (type, expr)\n \texpr = build_indirect_ref (expr, 0);\n       return expr;\n     }\n-  else if (same_type_p (TYPE_MAIN_VARIANT (intype), \n-\t\t\tTYPE_MAIN_VARIANT (type)))\n+  else if (same_type_ignoring_top_level_qualifiers_p (intype, type))\n     return build_static_cast (type, expr);\n \n   if (TYPE_PTR_P (type) && (TREE_CODE (intype) == INTEGER_TYPE\n@@ -5339,8 +5339,8 @@ build_const_cast (type, expr)\n     }\n \n   intype = TREE_TYPE (expr);\n-\n-  if (same_type_p (TYPE_MAIN_VARIANT (intype), TYPE_MAIN_VARIANT (type)))\n+  \n+  if (same_type_ignoring_top_level_qualifiers_p (intype, type))\n     return build_static_cast (type, expr);\n   else if (TREE_CODE (type) == REFERENCE_TYPE)\n     {\n@@ -6979,7 +6979,7 @@ comp_ptr_ttypes_real (to, from, constp)\n \n       if (TREE_CODE (to) != POINTER_TYPE)\n \treturn \n-\t  same_type_p (TYPE_MAIN_VARIANT (to), TYPE_MAIN_VARIANT (from))\n+\t  same_type_ignoring_top_level_qualifiers_p (to, from)\n \t  && (constp >= 0 || to_more_cv_qualified);\n     }\n }\n@@ -7037,8 +7037,7 @@ comp_ptr_ttypes_const (to, from)\n \t  continue;\n \n       if (TREE_CODE (to) != POINTER_TYPE)\n-\treturn same_type_p (TYPE_MAIN_VARIANT (to), \n-\t\t\t    TYPE_MAIN_VARIANT (from));\n+\treturn same_type_ignoring_top_level_qualifiers_p (to, from);\n     }\n }\n "}, {"sha": "e6f3ef2e0cdb3c23c82804a4f28d31888041903e", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=9edc3913428500c76054bf79f6253e219e95691b", "patch": "@@ -765,8 +765,8 @@ process_init_constructor (type, init, elts)\n \t\t  if (next1 == error_mark_node)\n \t\t    return next1;\n \t\t  my_friendly_assert\n-\t\t    (same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type)),\n-\t\t\t\t  TYPE_MAIN_VARIANT (TREE_TYPE (next1))),\n+\t\t    (same_type_ignoring_top_level_qualifiers_p\n+\t\t     (TREE_TYPE (type), TREE_TYPE (next1)),\n \t\t     981123);\n \t\t  my_friendly_assert (tail1 == 0\n \t\t\t\t      || TREE_CODE (tail1) == TREE_LIST, 319);"}, {"sha": "5bfdbae7afcd8c2a73a31f907d7880d27a4f3e35", "filename": "gcc/testsuite/g++.old-deja/g++.other/inline10.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc3913428500c76054bf79f6253e219e95691b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline10.C?ref=9edc3913428500c76054bf79f6253e219e95691b", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link:\n+// Special g++ Options: -O2\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+struct S\n+{\n+};\n+\n+inline const S f () \n+{\n+  return S ();\n+}\n+\n+void g ()\n+{\n+  S s;\n+  f ();\n+}"}]}