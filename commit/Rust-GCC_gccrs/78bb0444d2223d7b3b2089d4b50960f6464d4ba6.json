{"sha": "78bb0444d2223d7b3b2089d4b50960f6464d4ba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiYjA0NDRkMjIyM2Q3YjNiMjA4OWQ0YjUwOTYwZjY0NjRkNGJhNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-12-10T01:39:32Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-12-10T01:39:32Z"}, "message": "win32.h (_Jv_platform_solib_prefix): New define.\n\n\t* include/win32.h (_Jv_platform_solib_prefix): New define.\n\t(_Jv_platform_solib_suffix): Likewise.\n\t* include/posix.h (_Jv_platform_solib_prefix): New define.\n\t(_Jv_platform_solib_suffix): Likewise.\n\t* java/lang/natRuntime.cc: Include StackTrace.h.\n\t(_load): Use findLibrary and new platform defines.\n\t(nativeGetLibname): Use new platform defines.\n\nFrom-SVN: r59976", "tree": {"sha": "59b0509caff8da0f2b263136eaf28134e6f4c188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b0509caff8da0f2b263136eaf28134e6f4c188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78bb0444d2223d7b3b2089d4b50960f6464d4ba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bb0444d2223d7b3b2089d4b50960f6464d4ba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78bb0444d2223d7b3b2089d4b50960f6464d4ba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bb0444d2223d7b3b2089d4b50960f6464d4ba6/comments", "author": null, "committer": null, "parents": [{"sha": "c53be425f7985fd00baf4fbc49bf2e66d02e5ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c53be425f7985fd00baf4fbc49bf2e66d02e5ecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c53be425f7985fd00baf4fbc49bf2e66d02e5ecb"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "3e1fddacc224b2d8b70dcf1dc85859ebfebc2c04", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bb0444d2223d7b3b2089d4b50960f6464d4ba6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bb0444d2223d7b3b2089d4b50960f6464d4ba6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=78bb0444d2223d7b3b2089d4b50960f6464d4ba6", "patch": "@@ -1,5 +1,13 @@\n 2002-12-09  Tom Tromey  <tromey@redhat.com>\n \n+\t* include/win32.h (_Jv_platform_solib_prefix): New define.\n+\t(_Jv_platform_solib_suffix): Likewise.\n+\t* include/posix.h (_Jv_platform_solib_prefix): New define.\n+\t(_Jv_platform_solib_suffix): Likewise.\n+\t* java/lang/natRuntime.cc: Include StackTrace.h.\n+\t(_load): Use findLibrary and new platform defines.\n+\t(nativeGetLibname): Use new platform defines.\n+\n \t* java/util/natResourceBundle.cc (getCallingClassLoader): Assume\n \t`t' won't be null.\n "}, {"sha": "cdcdb5d45ac6da1b89d67898833d22a886319b9a", "filename": "libjava/include/posix.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bb0444d2223d7b3b2089d4b50960f6464d4ba6/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bb0444d2223d7b3b2089d4b50960f6464d4ba6/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=78bb0444d2223d7b3b2089d4b50960f6464d4ba6", "patch": "@@ -40,6 +40,10 @@ details.  */\n #include <gcj/cni.h>\n #include <java/util/Properties.h>\n \n+// Prefix and suffix for shared libraries.\n+#define _Jv_platform_solib_prefix \"lib\"\n+#define _Jv_platform_solib_suffix \".so\"\n+\n #ifndef DISABLE_JAVA_NET\n #include <java/net/InetAddress.h>\n #endif"}, {"sha": "f05f30d12944eb1f8409d78402e39330ce8ceeef", "filename": "libjava/include/win32.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bb0444d2223d7b3b2089d4b50960f6464d4ba6/libjava%2Finclude%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bb0444d2223d7b3b2089d4b50960f6464d4ba6/libjava%2Finclude%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32.h?ref=78bb0444d2223d7b3b2089d4b50960f6464d4ba6", "patch": "@@ -22,6 +22,10 @@ details.  */\n \n #include <io.h>\n \n+// Prefix and suffix for shared libraries.\n+#define _Jv_platform_solib_prefix \"\"\n+#define _Jv_platform_solib_suffix \".dll\"\n+\n #ifndef DISBALE_JAVA_NET\n \n // these errors cannot occur on Win32"}, {"sha": "f5177b0aa3588d84d88e24692b5ff8fb72e095fb", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 49, "deletions": 19, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bb0444d2223d7b3b2089d4b50960f6464d4ba6/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bb0444d2223d7b3b2089d4b50960f6464d4ba6/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=78bb0444d2223d7b3b2089d4b50960f6464d4ba6", "patch": "@@ -27,6 +27,8 @@ details.  */\n #include <java/lang/StringBuffer.h>\n #include <java/lang/Process.h>\n #include <java/lang/ConcreteProcess.h>\n+#include <java/lang/ClassLoader.h>\n+#include <gnu/gcj/runtime/StackTrace.h>\n \n #include <jni.h>\n \n@@ -161,26 +163,64 @@ java::lang::Runtime::_load (jstring path, jboolean do_search)\n   using namespace java::lang;\n #ifdef USE_LTDL\n   jint len = _Jv_GetStringUTFLength (path);\n-  char buf[len + 1 + 3];\n+  char buf[len + 1 + strlen (_Jv_platform_solib_prefix)\n+\t   + strlen (_Jv_platform_solib_suffix)];\n   int offset = 0;\n-#ifndef WIN32\n-  // On Unix boxes, prefix library name with `lib', for loadLibrary.\n   if (do_search)\n     {\n-      strcpy (buf, \"lib\");\n-      offset = 3;\n+      strcpy (buf, _Jv_platform_solib_prefix);\n+      offset = strlen (_Jv_platform_solib_prefix);\n     }\n-#endif\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), &buf[offset]);\n   buf[offset + total] = '\\0';\n+\n+  char *lib_name = buf;\n+\n+  if (do_search)\n+    {\n+      ClassLoader *sys = ClassLoader::getSystemClassLoader();\n+      ClassLoader *look = NULL;\n+      gnu::gcj::runtime::StackTrace *t = new gnu::gcj::runtime::StackTrace(10);\n+      for (int i = 0; i < 10; ++i)\n+\t{\n+\t  jclass klass = t->classAt(i);\n+\t  if (klass != NULL)\n+\t    {\n+\t      ClassLoader *loader = klass->getClassLoaderInternal();\n+\t      if (loader != NULL && loader != sys)\n+\t\t{\n+\t\t  look = loader;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+      if (look != NULL)\n+\t{\n+\t  // Don't include solib prefix in string passed to\n+\t  // findLibrary.\n+\t  jstring name = look->findLibrary(JvNewStringUTF(&buf[offset]));\n+\t  if (name != NULL)\n+\t    {\n+\t      len = _Jv_GetStringUTFLength (name);\n+\t      lib_name = (char *) _Jv_AllocBytes(len + 1);\n+\t      total = JvGetStringUTFRegion (name, 0,\n+\t\t\t\t\t    name->length(), lib_name);\n+\t      lib_name[total] = '\\0';\n+\t      // Don't append suffixes any more; we have the full file\n+\t      // name.\n+\t      do_search = false;\n+\t    }\n+\t}\n+    }\n+\n   lt_dlhandle h;\n   // FIXME: make sure path is absolute.\n   {\n     // Synchronize on java.lang.Class. This is to protect the class chain from\n     // concurrent modification by class registration calls which may be run\n     // during the dlopen().\n     JvSynchronize sync (&java::lang::Class::class$);\n-    h = do_search ? lt_dlopenext (buf) : lt_dlopen (buf);\n+    h = do_search ? lt_dlopenext (lib_name) : lt_dlopen (lib_name);\n   }\n   if (h == NULL)\n     {\n@@ -602,19 +642,9 @@ java::lang::Runtime::nativeGetLibname (jstring pathname, jstring libname)\n #endif\n     }\n \n-  // FIXME: use platform function here.\n-#ifndef WIN32\n-  sb->append (JvNewStringLatin1 (\"lib\"));\n-#endif\n-\n+  sb->append (JvNewStringLatin1 (_Jv_platform_solib_prefix));\n   sb->append(libname);\n-\n-  // FIXME: use platform function here.\n-#ifdef WIN32\n-  sb->append (JvNewStringLatin1 (\"dll\"));\n-#else\n-  sb->append (JvNewStringLatin1 (\"so\"));\n-#endif\n+  sb->append (JvNewStringLatin1 (_Jv_platform_solib_suffix));\n \n   return sb->toString();\n }"}]}