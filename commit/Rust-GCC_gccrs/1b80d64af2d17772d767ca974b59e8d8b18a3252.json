{"sha": "1b80d64af2d17772d767ca974b59e8d8b18a3252", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI4MGQ2NGFmMmQxNzc3MmQ3NjdjYTk3NGI1OWU4ZDhiMThhMzI1Mg==", "commit": {"author": {"name": "Douglas Gregor", "email": "gregod@cs.rpi.edu", "date": "2003-11-14T00:15:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-11-14T00:15:00Z"}, "message": "debug.html: Users are allowed to specialize in namespace __gnu_debug...\n\n\n2003-11-13  Douglas Gregor  <gregod@cs.rpi.edu>\n\n\t* docs/html/debug.html: Users are allowed to specialize in\n\tnamespace __gnu_debug, unlike in the Apple version of the debug\n\tmode. Clear up a confusing double-negative. Note that\n\tstd::basic_string does provide extra debugging capabilities, but\n\tnot safe iterators.\n\t* include/bits/basic_string.tcc: Make sure there's never an\n\tambiguity when calling __is_null_pointer.\n\t* include/debug/deque: (deque::erase) Properly handle invalidation\n\twhen erasing at the end of the deque.\n\t* include/debug/vector: (vector::swap): Swap _M_guaranteed_capacity.\n\t(vector::clear): Set the guaranteed capacity to 0.\n\t* testsuite/23_containers/deque/invalidation/4.cc: (test04): Test\n\titerator invalidation when erasing at the end of the deque.\n\nFrom-SVN: r73564", "tree": {"sha": "917d0c8c22795ee44263851c5ad26805d48a6fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/917d0c8c22795ee44263851c5ad26805d48a6fa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b80d64af2d17772d767ca974b59e8d8b18a3252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b80d64af2d17772d767ca974b59e8d8b18a3252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b80d64af2d17772d767ca974b59e8d8b18a3252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b80d64af2d17772d767ca974b59e8d8b18a3252/comments", "author": null, "committer": null, "parents": [{"sha": "a2dcfada8a9f5a4d1b53a6b43873e4b807d8f166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dcfada8a9f5a4d1b53a6b43873e4b807d8f166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2dcfada8a9f5a4d1b53a6b43873e4b807d8f166"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "8ebb98a572142e3fec3ae4b5b5b3ace3c9db3eba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b80d64af2d17772d767ca974b59e8d8b18a3252", "patch": "@@ -1,3 +1,19 @@\n+2003-11-13  Douglas Gregor  <gregod@cs.rpi.edu>\n+\n+\t* docs/html/debug.html: Users are allowed to specialize in\n+\tnamespace __gnu_debug, unlike in the Apple version of the debug\n+\tmode. Clear up a confusing double-negative. Note that\n+\tstd::basic_string does provide extra debugging capabilities, but\n+\tnot safe iterators.\n+\t* include/bits/basic_string.tcc: Make sure there's never an\n+\tambiguity when calling __is_null_pointer. \n+\t* include/debug/deque: (deque::erase) Properly handle invalidation\n+\twhen erasing at the end of the deque.\n+\t* include/debug/vector: (vector::swap): Swap _M_guaranteed_capacity. \n+\t(vector::clear): Set the guaranteed capacity to 0.\n+\t* testsuite/23_containers/deque/invalidation/4.cc: (test04): Test\n+\titerator invalidation when erasing at the end of the deque.\n+\n 2003-11-13  Paolo Carlini  <pcarlini@suse.de>\n \t    Petur Runolfsson  <peturr02@ru.is>\n "}, {"sha": "91e13c14429f0867948959e26892049f6b4f9f41", "filename": "libstdc++-v3/docs/html/debug.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html?ref=1b80d64af2d17772d767ca974b59e8d8b18a3252", "patch": "@@ -145,8 +145,7 @@ <h4 class=\"left\">Using the debugging containers without debug\n   functionally equivalent to the standard drop-in containers used in\n   debug mode, but they are available in a separate namespace as GNU\n   extensions and may be used in programs compiled with either release\n-  mode or with debug mode. However, unlike the containers in namespace\n-  <code>std</code>, these containers may not be specialized. The\n+  mode or with debug mode. The\n   following table provides the names and headers of the debugging\n   containers:\n \n@@ -250,7 +249,7 @@ <h4 class=\"left\">Using the debugging containers without debug\n </table>\n \n <h4 class=\"left\">Debug mode semantics</h4>\n-<p>A program that does not use the C++ standard library incorrectly\n+<p>A program that uses the C++ standard library correctly\n   will maintain the same semantics under debug mode as it had with\n   the normal (release) library. All functional and exception-handling\n   guarantees made by the normal library also hold for the debug mode\n@@ -276,7 +275,7 @@ <h4 class=\"left\">Debug mode semantics</h4>\n   library, and is therefore somewhat hazardous. For this reason, the\n   libstdc++ debug mode offers a \"pedantic\" mode (similar to\n   GCC's <code>-pedantic</code> compiler flag) that attempts to emulate\n-  the semantics guaranteed by the C++ standard. In pedantic mode, for\n+  the semantics guaranteed by the C++ standard. For\n   instance, constructing a <code>std::basic_string</code> with a NULL\n   character pointer would result in an exception under normal mode or\n   non-pedantic debug mode (this is a libstdc++ extension), whereas\n@@ -288,6 +287,7 @@ <h4 class=\"left\">Debug mode semantics</h4>\n <p>The following library components provide extra debugging\n   capabilities in debug mode:</p>\n <ul>\n+  <li><code>std::basic_string</code> (no safe iterators)</li>\n   <li><code>std::bitset</code></li>\n   <li><code>std::deque</code></li>\n   <li><code>__gnu_cxx::hash_map</code></li>"}, {"sha": "b62ad8f5572672ba7195637be1107dce839ac6b7", "filename": "libstdc++-v3/docs/html/debug_mode.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug_mode.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug_mode.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug_mode.html?ref=1b80d64af2d17772d767ca974b59e8d8b18a3252", "patch": "@@ -330,7 +330,7 @@ <h4><a name=\"compile_coexistence\">Compile-time coexistence of release- and\n <p>In release mode, we define only the release-mode version of the\n   component with its standard name and do not include the debugging\n   component at all. The release mode version is defined within the\n-  namespace <code>__gnu_nom</code>, and then associated with namespace\n+  namespace <code>__gnu_norm</code>, and then associated with namespace\n   <code>std</code> via a \"strong using\" directive. Minus the\n   namespace associations, this method leaves the behavior of release\n   mode completely unchanged from its behavior prior to the"}, {"sha": "204757b3dc6b464aafc2cf4b679c7f92197a338e", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=1b80d64af2d17772d767ca974b59e8d8b18a3252", "patch": "@@ -52,7 +52,7 @@ namespace std\n \n   template<typename _Type>\n     inline bool\n-    __is_null_pointer(const _Type&)\n+    __is_null_pointer(_Type)\n     { return false; }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>"}, {"sha": "818d59e2b687595260ac56ed5a261265110615db", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=1b80d64af2d17772d767ca974b59e8d8b18a3252", "patch": "@@ -294,7 +294,7 @@ namespace __gnu_debug_def\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n-\tif (__first == begin() || __last == end()-1)\n+        if (__first == begin() || __last == end())\n \t  {\n \t    this->_M_detach_singular();\n \t    for (iterator __position = __first; __position != __last; )"}, {"sha": "53e6f0cc15f11754daa3a2b5184209b5b5a00025", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=1b80d64af2d17772d767ca974b59e8d8b18a3252", "patch": "@@ -34,6 +34,7 @@\n #include <vector>\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n+#include <utility>\n \n namespace __gnu_debug_def\n {\n@@ -328,13 +329,15 @@ namespace __gnu_debug_def\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n+        std::swap(_M_guaranteed_capacity, __x._M_guaranteed_capacity);\n       }\n \n       void \n       clear()\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n+        _M_guaranteed_capacity = 0;\n       }\n \n       _Base&       "}, {"sha": "c8a8b88a9edda358497d3fd832becc1da74277f3", "filename": "libstdc++-v3/testsuite/23_containers/deque/invalidation/4.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b80d64af2d17772d767ca974b59e8d8b18a3252/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F4.cc?ref=1b80d64af2d17772d767ca974b59e8d8b18a3252", "patch": "@@ -55,6 +55,12 @@ void test04()\n   VERIFY(before._M_singular());\n   VERIFY(at._M_singular());\n \n+  // Multiple element erase at end\n+  before = v.begin();\n+  at = before + 3;\n+  v.erase(at, v.end());\n+  *before;\n+\n   // clear()\n   before = v.begin();\n   VERIFY(before._M_dereferenceable());"}]}