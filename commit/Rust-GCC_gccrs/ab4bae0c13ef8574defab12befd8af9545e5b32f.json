{"sha": "ab4bae0c13ef8574defab12befd8af9545e5b32f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI0YmFlMGMxM2VmODU3NGRlZmFiMTJiZWZkOGFmOTU0NWU1YjMyZg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-03T20:14:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-03T20:14:43Z"}, "message": "Fix PR c++/69056 (argument pack deduction failure during overload resolution)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/69056\n\t* pt.c (try_one_overload): Handle comparing argument packs so\n\tthat there is no conflict if we deduced more arguments of an\n\targument pack than were explicitly specified.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/69056\n\tg++.dg/cpp0x/pr69056.C: New test.\n\nFrom-SVN: r233108", "tree": {"sha": "794d580ffa605a72375fed6c65d49cc482cddf4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/794d580ffa605a72375fed6c65d49cc482cddf4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab4bae0c13ef8574defab12befd8af9545e5b32f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4bae0c13ef8574defab12befd8af9545e5b32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab4bae0c13ef8574defab12befd8af9545e5b32f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4bae0c13ef8574defab12befd8af9545e5b32f/comments", "author": null, "committer": null, "parents": [{"sha": "95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "6ac9a648271634e14f7266452d8671d169d53479", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4bae0c13ef8574defab12befd8af9545e5b32f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4bae0c13ef8574defab12befd8af9545e5b32f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab4bae0c13ef8574defab12befd8af9545e5b32f", "patch": "@@ -1,3 +1,10 @@\n+2016-02-03  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/69056\n+\t* pt.c (try_one_overload): Handle comparing argument packs so\n+\tthat there is no conflict if we deduced more arguments of an\n+\targument pack than were explicitly specified.\n+\n 2016-01-31  Jakub Jelinek  <jakub@redhat.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "9cde9c738f6f0e2334e175a2a9875e25c2a36683", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4bae0c13ef8574defab12befd8af9545e5b32f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4bae0c13ef8574defab12befd8af9545e5b32f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ab4bae0c13ef8574defab12befd8af9545e5b32f", "patch": "@@ -18736,6 +18736,28 @@ try_one_overload (tree tparms,\n \t   template args used in the function parm list with our own\n \t   template parms.  Discard them.  */\n \tTREE_VEC_ELT (tempargs, i) = NULL_TREE;\n+      else if (oldelt && ARGUMENT_PACK_P (oldelt))\n+\t{\n+\t  /* Check that the argument at each index of the deduced argument pack\n+\t     is equivalent to the corresponding explicitly specified argument.\n+\t     We may have deduced more arguments than were explicitly specified,\n+\t     and that's OK.  */\n+\t  gcc_assert (ARGUMENT_PACK_INCOMPLETE_P (oldelt));\n+\t  gcc_assert (ARGUMENT_PACK_ARGS (oldelt)\n+\t\t      == ARGUMENT_PACK_EXPLICIT_ARGS (oldelt));\n+\n+\t  tree explicit_pack = ARGUMENT_PACK_ARGS (oldelt);\n+\t  tree deduced_pack = ARGUMENT_PACK_ARGS (elt);\n+\n+\t  if (TREE_VEC_LENGTH (deduced_pack)\n+\t      < TREE_VEC_LENGTH (explicit_pack))\n+\t    return 0;\n+\n+\t  for (int j = 0; j < TREE_VEC_LENGTH (explicit_pack); j++)\n+\t    if (!template_args_equal (TREE_VEC_ELT (explicit_pack, j),\n+\t\t\t\t      TREE_VEC_ELT (deduced_pack, j)))\n+\t      return 0;\n+\t}\n       else if (oldelt && !template_args_equal (oldelt, elt))\n \treturn 0;\n     }"}, {"sha": "1a17a9de3376e116fb7b14c70764192568fde586", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4bae0c13ef8574defab12befd8af9545e5b32f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4bae0c13ef8574defab12befd8af9545e5b32f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab4bae0c13ef8574defab12befd8af9545e5b32f", "patch": "@@ -1,3 +1,8 @@\n+2016-02-03  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/69056\n+\tg++.dg/cpp0x/pr69056.C: New test.\n+\n 2016-02-03  Vladimir Makarov  <vmakarov@redhat.com>\n \t    Alexandre Oliva  <aoliva@redhat.com>\n "}, {"sha": "ab4e071b1b56f1c646d3b8c8dcfd6fd6ba312153", "filename": "gcc/testsuite/g++.dg/cpp0x/pr69056.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4bae0c13ef8574defab12befd8af9545e5b32f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr69056.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4bae0c13ef8574defab12befd8af9545e5b32f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr69056.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr69056.C?ref=ab4bae0c13ef8574defab12befd8af9545e5b32f", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target c++11 } }\n+// PR c++/69056\n+\n+template <typename T, typename... Args>\n+void resolver(int (*) (T, Args...));\n+\n+int funcA(int, float) { return 0; }\n+int funcA(double) { return 0; }\n+\n+int funcB(int, float, char) { return 0; }\n+int funcB(int, bool) { return 0; }\n+int funcB(double) { return 0; }\n+\n+int funcC(int) { return 0; }\n+int funcC(double) { return 0; }\n+\n+void\n+foo (void)\n+{\n+  resolver (&funcA); // { dg-error \"no match\" }\n+  resolver<int> (&funcA);\n+  resolver<double> (&funcA);\n+\n+  resolver<int> (&funcB); // { dg-error \"no match\" }\n+  resolver<int, char> (&funcB); // { dg-error \"no match\" }\n+  resolver<int, float> (&funcB);\n+\n+  resolver<int> (&funcC);\n+  resolver<int, float> (&funcC); // { dg-error \"no match\" }\n+}"}]}