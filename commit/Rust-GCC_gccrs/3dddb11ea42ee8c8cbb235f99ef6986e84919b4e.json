{"sha": "3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkZGIxMWVhNDJlZThjOGNiYjIzNWY5OWVmNjk4NmU4NDkxOWI0ZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-07-31T12:26:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T12:26:19Z"}, "message": "sem_util.ads (Find_Specific_Type): Moved here from exp_disp.adb.\n\n2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.ads (Find_Specific_Type): Moved here from exp_disp.adb.\n\t* sem_util.adb (Find_Specific_Type): If type is untagged private,\n\tretrieve full view so that primitive operations can be located.\n\t* exp_disp.adb Move Find_Specific_Type to sem_util.\n\t* exp_ch4.adb (Expand_N_Op_Eq): If operands are class-wide, use\n\tFind_Specific_Type to locate primitive equality.\n\t* exp_util.adb (Make_CW_Equivalent_Type): A class_wide equivalent\n\ttype does not require initialization.\n\t* exp_attr.adb (Compile_Stream_Body_In_Scope): Within an instance\n\tbody all visibility is established, and the enclosing package\n\tdeclarations must not be installed.\n\nFrom-SVN: r213345", "tree": {"sha": "9cb2ffd0f833fe97277a9207f023a1eef322dba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cb2ffd0f833fe97277a9207f023a1eef322dba5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9420f51f051e07b8c60e36e1ef45806788d4e590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9420f51f051e07b8c60e36e1ef45806788d4e590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9420f51f051e07b8c60e36e1ef45806788d4e590"}], "stats": {"total": 98, "additions": 65, "deletions": 33}, "files": [{"sha": "f806a8b8371c25344773ad7dd879208a5f0cb13b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "patch": "@@ -1,3 +1,17 @@\n+2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads (Find_Specific_Type): Moved here from exp_disp.adb.\n+\t* sem_util.adb (Find_Specific_Type): If type is untagged private,\n+\tretrieve full view so that primitive operations can be located.\n+\t* exp_disp.adb Move Find_Specific_Type to sem_util.\n+\t* exp_ch4.adb (Expand_N_Op_Eq): If operands are class-wide, use\n+\tFind_Specific_Type to locate primitive equality.\n+\t* exp_util.adb (Make_CW_Equivalent_Type): A class_wide equivalent\n+\ttype does not require initialization.\n+\t* exp_attr.adb (Compile_Stream_Body_In_Scope): Within an instance\n+\tbody all visibility is established, and the enclosing package\n+\tdeclarations must not be installed.\n+\n 2014-07-31  Yannick Moy  <moy@adacore.com>\n \n \t* sem_parg.adb, sem_prag.ads (Collect_Subprogram_Inputs_Outputs):"}, {"sha": "97ed8874b511bc962170bcff3bc6f7ff09a90079", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "patch": "@@ -106,6 +106,8 @@ package body Exp_Attr is\n    --  We suppress checks for array/record reads, since the rule is that these\n    --  are like assignments, out of range values due to uninitialized storage,\n    --  or other invalid values do NOT cause a Constraint_Error to be raised.\n+   --  If we are within an instance body all visibility has been established\n+   --  already and there is no need to install the package.\n \n    procedure Expand_Access_To_Protected_Op\n      (N    : Node_Id;\n@@ -630,6 +632,11 @@ package body Exp_Attr is\n       if Is_Hidden (Arr)\n         and then not In_Open_Scopes (Scop)\n         and then Ekind (Scop) = E_Package\n+\n+        --  If we are within an instance body, then all visibility has been\n+        --  established already and there is no need to install the package.\n+\n+        and then not In_Instance_Body\n       then\n          Push_Scope (Scop);\n          Install_Visible_Declarations (Scop);"}, {"sha": "92bde0d8e539ed04d1abfde168846325764fd8e3", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "patch": "@@ -7300,15 +7300,15 @@ package body Exp_Ch4 is\n                Op_Name := Node (Prim);\n \n             --  Find the type's predefined equality or an overriding\n-            --  user- defined equality. The reason for not simply calling\n+            --  user-defined equality. The reason for not simply calling\n             --  Find_Prim_Op here is that there may be a user-defined\n-            --  overloaded equality op that precedes the equality that we want,\n-            --  so we have to explicitly search (e.g., there could be an\n-            --  equality with two different parameter types).\n+            --  overloaded equality op that precedes the equality that we\n+            --  want, so we have to explicitly search (e.g., there could be\n+            --  an equality with two different parameter types).\n \n             else\n                if Is_Class_Wide_Type (Typl) then\n-                  Typl := Root_Type (Typl);\n+                  Typl := Find_Specific_Type (Typl);\n                end if;\n \n                Prim := First_Elmt (Primitive_Operations (Typl));"}, {"sha": "99105e0ea4f1052aee2dc73522dfc9e975362279", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "patch": "@@ -75,12 +75,6 @@ package body Exp_Disp is\n    --  Ada 2005 (AI-251): Returns the fixed position in the dispatch table\n    --  of the default primitive operations.\n \n-   function Find_Specific_Type (CW : Entity_Id) return Entity_Id;\n-   --  Find specific type of a class-wide type, and handle the case of an\n-   --  incomplete type coming either from a limited_with clause or from an\n-   --  incomplete type declaration. Shouldn't this be in Sem_Util? It seems\n-   --  like a general purpose semantic routine ???\n-\n    function Has_DT (Typ : Entity_Id) return Boolean;\n    pragma Inline (Has_DT);\n    --  Returns true if we generate a dispatch table for tagged type Typ\n@@ -1987,25 +1981,6 @@ package body Exp_Disp is\n       end if;\n    end Expand_Interface_Thunk;\n \n-   ------------------------\n-   -- Find_Specific_Type --\n-   ------------------------\n-\n-   function Find_Specific_Type (CW : Entity_Id) return Entity_Id is\n-      Typ : Entity_Id := Root_Type (CW);\n-\n-   begin\n-      if Ekind (Typ) = E_Incomplete_Type then\n-         if From_Limited_With (Typ) then\n-            Typ := Non_Limited_View (Typ);\n-         else\n-            Typ := Full_View (Typ);\n-         end if;\n-      end if;\n-\n-      return Typ;\n-   end Find_Specific_Type;\n-\n    --------------------------\n    -- Has_CPP_Constructors --\n    --------------------------"}, {"sha": "a61efab750d9a10870dc0fbc87a5cd100759394d", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "patch": "@@ -5860,10 +5860,14 @@ package body Exp_Util is\n \n       Set_Is_Class_Wide_Equivalent_Type (Equiv_Type);\n \n+      --  A class_wide equivalent type does not require initialization\n+\n+      Set_Suppress_Initialization (Equiv_Type);\n+\n       if not Is_Interface (Root_Typ) then\n          Append_To (Comp_List,\n            Make_Component_Declaration (Loc,\n-             Defining_Identifier =>\n+             Defining_Identifier  =>\n                Make_Defining_Identifier (Loc, Name_uParent),\n              Component_Definition =>\n                Make_Component_Definition (Loc,\n@@ -5882,9 +5886,9 @@ package body Exp_Util is\n       Append_To (List_Def,\n         Make_Full_Type_Declaration (Loc,\n           Defining_Identifier => Equiv_Type,\n-          Type_Definition =>\n+          Type_Definition     =>\n             Make_Record_Definition (Loc,\n-              Component_List =>\n+              Component_List  =>\n                 Make_Component_List (Loc,\n                   Component_Items => Comp_List,\n                   Variant_Part    => Empty))));"}, {"sha": "fb5068a3d4f778c1336a544d55a7740169788ed3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "patch": "@@ -5932,6 +5932,32 @@ package body Sem_Util is\n       end loop;\n    end Find_Placement_In_State_Space;\n \n+   ------------------------\n+   -- Find_Specific_Type --\n+   ------------------------\n+\n+   function Find_Specific_Type (CW : Entity_Id) return Entity_Id is\n+      Typ : Entity_Id := Root_Type (CW);\n+\n+   begin\n+      if Ekind (Typ) = E_Incomplete_Type then\n+         if From_Limited_With (Typ) then\n+            Typ := Non_Limited_View (Typ);\n+         else\n+            Typ := Full_View (Typ);\n+         end if;\n+      end if;\n+\n+      if Is_Private_Type (Typ)\n+        and then not Is_Tagged_Type (Typ)\n+        and then Present (Full_View (Typ))\n+      then\n+         return Full_View (Typ);\n+      else\n+         return Typ;\n+      end if;\n+   end Find_Specific_Type;\n+\n    -----------------------------\n    -- Find_Static_Alternative --\n    -----------------------------"}, {"sha": "c9dc734f74789ff12011cf5dacd56d79b930d0a5", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dddb11ea42ee8c8cbb235f99ef6986e84919b4e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=3dddb11ea42ee8c8cbb235f99ef6986e84919b4e", "patch": "@@ -568,6 +568,12 @@ package Sem_Util is\n    --  Call is set to the node for the corresponding call. If the node N is not\n    --  an actual parameter then Formal and Call are set to Empty.\n \n+   function Find_Specific_Type (CW : Entity_Id) return Entity_Id;\n+   --  Find specific type of a class-wide type, and handle the case of an\n+   --  incomplete type coming either from a limited_with clause or from an\n+   --  incomplete type declaration. If resulting type is private return its\n+   --  full view.\n+\n    function Find_Body_Discriminal\n      (Spec_Discriminant : Entity_Id) return Entity_Id;\n    --  Given a discriminant of the record type that implements a task or"}]}