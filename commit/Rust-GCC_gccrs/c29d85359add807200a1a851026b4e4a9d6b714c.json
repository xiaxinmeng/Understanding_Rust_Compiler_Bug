{"sha": "c29d85359add807200a1a851026b4e4a9d6b714c", "node_id": "C_kwDOANBUbNoAKGMyOWQ4NTM1OWFkZDgwNzIwMGExYTg1MTAyNmI0ZTRhOWQ2YjcxNGM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-01-25T12:31:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-01-25T12:37:23Z"}, "message": "tree-optimization/108523 - fix endless iteration in VN\n\nThe following fixes not converging iteration in value-numbering of\nPHI nodes when we use an equivalence to prove the PHI node is\ndegenerate.  We have to avoid the situation where we oscillate\nbetween the two equivalent values because the result is fed back\nvia a backedge.\n\n\tPR tree-optimization/108523\n\t* tree-ssa-sccvn.cc (visit_phi): Avoid using the exclusive\n\tbackedge value for the result when using predication to\n\tprove equivalence.", "tree": {"sha": "145ca6779497b995647b3e4786414b3df9406b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/145ca6779497b995647b3e4786414b3df9406b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c29d85359add807200a1a851026b4e4a9d6b714c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29d85359add807200a1a851026b4e4a9d6b714c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29d85359add807200a1a851026b4e4a9d6b714c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29d85359add807200a1a851026b4e4a9d6b714c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f66385086e6a957c337eef97aec01cf30c162d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f66385086e6a957c337eef97aec01cf30c162d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f66385086e6a957c337eef97aec01cf30c162d"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "edb553b07cbae654c6ea759a844e7d3fda95877b", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29d85359add807200a1a851026b4e4a9d6b714c/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29d85359add807200a1a851026b4e4a9d6b714c/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=c29d85359add807200a1a851026b4e4a9d6b714c", "patch": "@@ -5826,7 +5826,7 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n   poly_int64 soff, doff;\n   unsigned n_executable = 0;\n   edge_iterator ei;\n-  edge e;\n+  edge e, sameval_e = NULL;\n \n   /* TODO: We could check for this in initialization, and replace this\n      with a gcc_assert.  */\n@@ -5867,7 +5867,10 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \t\t && ssa_undefined_value_p (def, false))\n \t  seen_undef = def;\n \telse if (sameval == VN_TOP)\n-\t  sameval = def;\n+\t  {\n+\t    sameval = def;\n+\t    sameval_e = e;\n+\t  }\n \telse if (!expressions_equal_p (def, sameval))\n \t  {\n \t    /* We know we're arriving only with invariant addresses here,\n@@ -5916,6 +5919,8 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \t\t\t    fprintf (dump_file, \" are equal on edge %d -> %d\\n\",\n \t\t\t\t     e->src->index, e->dest->index);\n \t\t\t  }\n+\t\t\tif (sameval_e && (sameval_e->flags & EDGE_DFS_BACK))\n+\t\t\t  sameval = def;\n \t\t\tcontinue;\n \t\t      }\n \t\t    /* If on all previous edges the value was equal to def\n@@ -5935,14 +5940,17 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \t\t\t\t     EDGE_PRED (bb, 0)->src->index,\n \t\t\t\t     EDGE_PRED (bb, 0)->dest->index);\n \t\t\t  }\n-\t\t\tsameval = def;\n+\t\t\tif (!(e->flags & EDGE_DFS_BACK))\n+\t\t\t  sameval = def;\n \t\t\tcontinue;\n \t\t      }\n \t\t  }\n \t      }\n \t    sameval = NULL_TREE;\n \t    break;\n \t  }\n+\telse\n+\t  sameval_e = NULL;\n       }\n \n   /* If the value we want to use is flowing over the backedge and we"}]}