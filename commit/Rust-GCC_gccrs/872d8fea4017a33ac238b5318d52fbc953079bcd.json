{"sha": "872d8fea4017a33ac238b5318d52fbc953079bcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcyZDhmZWE0MDE3YTMzYWMyMzhiNTMxOGQ1MmZiYzk1MzA3OWJjZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-07-05T23:07:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-07-05T23:07:18Z"}, "message": "Add class __versa_string, a versatile \"basic_string-type\" class...\n\n2005-07-05  Paolo Carlini  <pcarlini@suse.de>\n\n\tAdd class __versa_string, a versatile \"basic_string-type\" class:\n\tan additional, non-standard, template parameter allows to specify\n\tthe preferred base class. Two are provided: __rc_string_base,\n\twhich implements a behavior very similar to our standard string,\n\tand __sso_string_base, not reference-counted and optimized for\n\tshort strings.\n\t* include/ext/rc_string_base.h: New.\n\t* include/ext/sso_string_base.h: Likewise.\n\t* include/ext/vstring.h: Likewise.\n\t* include/ext/vstring.tcc: Likewise.\n\t* include/ext/vstring_fwd.h: Likewise.\n\t* include/ext/vstring_util.h: Likewise.\n\t* include/Makefile.am: Add.\n\t* include/Makefile.in: Regenerate.\n\t* testsuite/ext/vstring/explicit_instantiation/1.cc: New.\n\t* testsuite/ext/vstring/explicit_instantiation/2.cc: Likewise.\n\t* testsuite/ext/vstring/explicit_instantiation/char/1.cc: Likewise.\n\t* testsuite/ext/vstring/explicit_instantiation/wchar_t/1.cc: Likewise.\n\n\t* Makefile.in: Regenerate with autotools 1.9.3 (to date, the version\n\tofficially used by v3).\n\t* aclocal.m4: Likewise.\n\t* libmath/Makefile.in: Likewise.\n\t* libsupc++/Makefile.in: Likewise.\n\t* po/Makefile.in: Likewise.\n\t* src/Makefile.in: Likewise.\n\t* testsuite/Makefile.in: Likewise.\n\nFrom-SVN: r101639", "tree": {"sha": "81a5fd77bf0fb0e4cb75071bebe0f22365d736a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81a5fd77bf0fb0e4cb75071bebe0f22365d736a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/872d8fea4017a33ac238b5318d52fbc953079bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872d8fea4017a33ac238b5318d52fbc953079bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/872d8fea4017a33ac238b5318d52fbc953079bcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872d8fea4017a33ac238b5318d52fbc953079bcd/comments", "author": null, "committer": null, "parents": [{"sha": "83522e1870ae67d6b8c52980083e0cae67055f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83522e1870ae67d6b8c52980083e0cae67055f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83522e1870ae67d6b8c52980083e0cae67055f9d"}], "stats": {"total": 5023, "additions": 4903, "deletions": 120}, "files": [{"sha": "1d0d2ed0450cbb8a910fdd5ce41d997f6cee638e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -1,3 +1,33 @@\n+2005-07-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tAdd class __versa_string, a versatile \"basic_string-type\" class:\n+\tan additional, non-standard, template parameter allows to specify\n+\tthe preferred base class. Two are provided: __rc_string_base,\n+\twhich implements a behavior very similar to our standard string,\n+\tand __sso_string_base, not reference-counted and optimized for\n+\tshort strings. \n+\t* include/ext/rc_string_base.h: New.\n+\t* include/ext/sso_string_base.h: Likewise.\n+\t* include/ext/vstring.h: Likewise.\n+\t* include/ext/vstring.tcc: Likewise.\n+\t* include/ext/vstring_fwd.h: Likewise.\n+\t* include/ext/vstring_util.h: Likewise.\n+\t* include/Makefile.am: Add.\n+\t* include/Makefile.in: Regenerate.\n+\t* testsuite/ext/vstring/explicit_instantiation/1.cc: New.\n+\t* testsuite/ext/vstring/explicit_instantiation/2.cc: Likewise.\n+\t* testsuite/ext/vstring/explicit_instantiation/char/1.cc: Likewise.\n+\t* testsuite/ext/vstring/explicit_instantiation/wchar_t/1.cc: Likewise.\n+\n+\t* Makefile.in: Regenerate with autotools 1.9.3 (to date, the version\n+\tofficially used by v3).\n+\t* aclocal.m4: Likewise.\n+\t* libmath/Makefile.in: Likewise.\n+\t* libsupc++/Makefile.in: Likewise.\n+\t* po/Makefile.in: Likewise.\n+\t* src/Makefile.in: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n 2005-07-01  Paolo Carlini  <pcarlini@suse.de>\n \n         Port from libstdcxx_so_7-branch:"}, {"sha": "5350407138b1283db209033ba0c23cac2c55be95", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -1,8 +1,8 @@\n-# Makefile.in generated by automake 1.9.5 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# 2003, 2004  Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -408,13 +408,7 @@ uninstall-info-am:\n #     (which will cause the Makefiles to be regenerated when you run `make');\n # (2) otherwise, pass the desired values on the `make' command line.\n $(RECURSIVE_TARGETS):\n-\t@failcom='exit 1'; \\\n-\tfor f in x $$MAKEFLAGS; do \\\n-\t  case $$f in \\\n-\t    *=* | --[!k]*);; \\\n-\t    *k*) failcom='fail=yes';; \\\n-\t  esac; \\\n-\tdone; \\\n+\t@set fnord $$MAKEFLAGS; amf=$$2; \\\n \tdot_seen=no; \\\n \ttarget=`echo $@ | sed s/-recursive//`; \\\n \tlist='$(SUBDIRS)'; for subdir in $$list; do \\\n@@ -426,21 +420,15 @@ $(RECURSIVE_TARGETS):\n \t    local_target=\"$$target\"; \\\n \t  fi; \\\n \t  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \\\n-\t  || eval $$failcom; \\\n+\t   || case \"$$amf\" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \\\n \tdone; \\\n \tif test \"$$dot_seen\" = \"no\"; then \\\n \t  $(MAKE) $(AM_MAKEFLAGS) \"$$target-am\" || exit 1; \\\n \tfi; test -z \"$$fail\"\n \n mostlyclean-recursive clean-recursive distclean-recursive \\\n maintainer-clean-recursive:\n-\t@failcom='exit 1'; \\\n-\tfor f in x $$MAKEFLAGS; do \\\n-\t  case $$f in \\\n-\t    *=* | --[!k]*);; \\\n-\t    *k*) failcom='fail=yes';; \\\n-\t  esac; \\\n-\tdone; \\\n+\t@set fnord $$MAKEFLAGS; amf=$$2; \\\n \tdot_seen=no; \\\n \tcase \"$@\" in \\\n \t  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \\\n@@ -461,7 +449,7 @@ maintainer-clean-recursive:\n \t    local_target=\"$$target\"; \\\n \t  fi; \\\n \t  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \\\n-\t  || eval $$failcom; \\\n+\t   || case \"$$amf\" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \\\n \tdone && test -z \"$$fail\"\n tags-recursive:\n \tlist='$(SUBDIRS)'; for subdir in $$list; do \\"}, {"sha": "9c72982dce1fa1e7c8c8b6f3cd6980f7a5a57323", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 222, "deletions": 88, "changes": 310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -1,7 +1,7 @@\n-# generated automatically by aclocal 1.9.5 -*- Autoconf -*-\n+# generated automatically by aclocal 1.9.3 -*- Autoconf -*-\n \n-# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-# 2005  Free Software Foundation, Inc.\n+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+# Free Software Foundation, Inc.\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -11,11 +11,23 @@\n # even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n # PARTICULAR PURPOSE.\n \n-# Copyright (C) 2002, 2003, 2005  Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n+#                                                        -*- Autoconf -*-\n+# Copyright (C) 2002, 2003  Free Software Foundation, Inc.\n+# Generated from amversion.in; do not edit by hand.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n \n # AM_AUTOMAKE_VERSION(VERSION)\n # ----------------------------\n@@ -28,15 +40,26 @@ AC_DEFUN([AM_AUTOMAKE_VERSION], [am__api_version=\"1.9\"])\n # Call AM_AUTOMAKE_VERSION so it can be traced.\n # This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-\t [AM_AUTOMAKE_VERSION([1.9.5])])\n+\t [AM_AUTOMAKE_VERSION([1.9.3])])\n \n-# AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n+# AM_AUX_DIR_EXPAND\n \n-# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n+# Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n \n # For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets\n # $ac_aux_dir to `$srcdir/foo'.  In other projects, it is set to\n@@ -83,16 +106,26 @@ AC_PREREQ([2.50])dnl\n am_aux_dir=`cd $ac_aux_dir && pwd`\n ])\n \n-# AM_CONDITIONAL                                            -*- Autoconf -*-\n+# AM_CONDITIONAL                                              -*- Autoconf -*-\n \n-# Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005\n-# Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n+# Copyright (C) 1997, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n \n-# serial 7\n+# serial 6\n \n # AM_CONDITIONAL(NAME, SHELL-CONDITION)\n # -------------------------------------\n@@ -116,19 +149,30 @@ AC_CONFIG_COMMANDS_PRE(\n Usually this means the macro was only invoked conditionally.]])\n fi])])\n \n-# Do all the work for Automake.                             -*- Autoconf -*-\n+# Do all the work for Automake.                            -*- Autoconf -*-\n+\n+# This macro actually does too much some checks are only needed if\n+# your package does certain things.  But this isn't really a big deal.\n \n-# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n # Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n \n-# serial 12\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n \n-# This macro actually does too much.  Some checks are only needed if\n-# your package does certain things.  But this isn't really a big deal.\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+# serial 11\n \n # AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])\n # AM_INIT_AUTOMAKE([OPTIONS])\n@@ -256,17 +300,28 @@ AC_DEFUN([AM_PROG_INSTALL_SH],\n install_sh=${install_sh-\"$am_aux_dir/install-sh\"}\n AC_SUBST(install_sh)])\n \n-# Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n+# Add --enable-maintainer-mode option to configure.\n # From Jim Meyering\n \n-# Copyright (C) 1996, 1998, 2000, 2001, 2002, 2003, 2004, 2005\n+# Copyright (C) 1996, 1998, 2000, 2001, 2002, 2003, 2004\n # Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n \n-# serial 4\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+# serial 3\n \n AC_DEFUN([AM_MAINTAINER_MODE],\n [AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n@@ -285,16 +340,27 @@ AC_DEFUN([AM_MAINTAINER_MODE],\n \n AU_DEFUN([jm_MAINTAINER_MODE], [AM_MAINTAINER_MODE])\n \n-# Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-\n+#  -*- Autoconf -*-\n \n-# Copyright (C) 1997, 1999, 2000, 2001, 2003, 2005\n-# Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n \n-# serial 4\n+# Copyright (C) 1997, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+# serial 3\n \n # AM_MISSING_PROG(NAME, PROGRAM)\n # ------------------------------\n@@ -320,16 +386,27 @@ else\n fi\n ])\n \n-# Copyright (C) 2003, 2004, 2005  Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n-\n # AM_PROG_MKDIR_P\n # ---------------\n # Check whether `mkdir -p' is supported, fallback to mkinstalldirs otherwise.\n-#\n+\n+# Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n # Automake 1.8 used `mkdir -m 0755 -p --' to ensure that directories\n # created by `make install' are always world readable, even if the\n # installer happens to have an overly restrictive umask (e.g. 077).\n@@ -383,14 +460,25 @@ else\n fi\n AC_SUBST([mkdir_p])])\n \n-# Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005\n+# Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004\n # Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n \n-# serial 5\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+# serial 4\n \n # AM_ENABLE_MULTILIB([MAKEFILE], [REL-TO-TOP-SRCDIR])\n # ---------------------------------------------------\n@@ -441,15 +529,26 @@ multi_basedir=\"$multi_basedir\"\n CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n CC=\"$CC\"])])dnl\n \n-# Helper functions for option handling.                     -*- Autoconf -*-\n+# Helper functions for option handling.                    -*- Autoconf -*-\n \n-# Copyright (C) 2001, 2002, 2003, 2005  Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n+# Copyright (C) 2001, 2002, 2003  Free Software Foundation, Inc.\n \n-# serial 3\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+# serial 2\n \n # _AM_MANGLE_OPTION(NAME)\n # -----------------------\n@@ -474,16 +573,28 @@ AC_DEFUN([_AM_SET_OPTIONS],\n AC_DEFUN([_AM_IF_OPTION],\n [m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])\n \n-# Check to make sure that the build environment is sane.    -*- Autoconf -*-\n-\n-# Copyright (C) 1996, 1997, 2000, 2001, 2003, 2005\n-# Free Software Foundation, Inc.\n #\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n+# Check to make sure that the build environment is sane.\n+#\n \n-# serial 4\n+# Copyright (C) 1996, 1997, 2000, 2001, 2003 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+# serial 3\n \n # AM_SANITY_CHECK\n # ---------------\n@@ -526,14 +637,25 @@ Check your system clock])\n fi\n AC_MSG_RESULT(yes)])\n \n-# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n-\n # AM_PROG_INSTALL_STRIP\n-# ---------------------\n+\n+# Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n # One issue with vendor `install' (even GNU) is that you can't\n # specify the program used to strip binaries.  This is especially\n # annoying in cross-compiling environments, where the build's strip\n@@ -556,13 +678,25 @@ AC_SUBST([INSTALL_STRIP_PROGRAM])])\n \n # Check how to create a tarball.                            -*- Autoconf -*-\n \n-# Copyright (C) 2004, 2005  Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n+# Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+# serial 1\n \n-# serial 2\n \n # _AM_PROG_TAR(FORMAT)\n # --------------------"}, {"sha": "869a01a29a6b12db25d04d8b70ad255ff3682e16", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -456,7 +456,13 @@ ext_headers = \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n-\t${ext_srcdir}/typelist.h \n+\t${ext_srcdir}/typelist.h \\\n+\t${ext_srcdir}/rc_string_base.h \\\n+\t${ext_srcdir}/sso_string_base.h \\\n+\t${ext_srcdir}/vstring.h \\\n+\t${ext_srcdir}/vstring.tcc \\\n+\t${ext_srcdir}/vstring_fwd.h \\\n+\t${ext_srcdir}/vstring_util.h\t\n \n \n tr1_srcdir = ${glibcxx_srcdir}/include/tr1"}, {"sha": "221d5d4882d3f380acb7ebc5214481200519aebc", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -1,8 +1,8 @@\n-# Makefile.in generated by automake 1.9.5 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# 2003, 2004  Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -666,7 +666,13 @@ ext_headers = \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n-\t${ext_srcdir}/typelist.h \n+\t${ext_srcdir}/typelist.h \\\n+\t${ext_srcdir}/rc_string_base.h \\\n+\t${ext_srcdir}/sso_string_base.h \\\n+\t${ext_srcdir}/vstring.h \\\n+\t${ext_srcdir}/vstring.tcc \\\n+\t${ext_srcdir}/vstring_fwd.h \\\n+\t${ext_srcdir}/vstring_util.h\t\n \n tr1_srcdir = ${glibcxx_srcdir}/include/tr1\n tr1_builddir = ./tr1"}, {"sha": "4d71021731b81d5d0136e1a5b953d790ededca7a", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "added", "additions": 663, "deletions": 0, "changes": 663, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,663 @@\n+// Reference-counted versatile string base -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ext/rc_string_base.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _RC_STRING_BASE_H\n+#define _RC_STRING_BASE_H 1\n+\n+#include <bits/atomicity.h>\n+\n+namespace __gnu_cxx\n+{\n+  /**\n+   *  @if maint\n+   *  Documentation?  What's that?\n+   *  Nathan Myers <ncm@cantrip.org>.\n+   *\n+   *  A string looks like this:\n+   *\n+   *  @code\n+   *                                        [_Rep]\n+   *                                        _M_length\n+   *   [__rc_string_base<char_type>]        _M_capacity\n+   *   _M_dataplus                          _M_refcount\n+   *   _M_p ---------------->               unnamed array of char_type\n+   *  @endcode\n+   *\n+   *  Where the _M_p points to the first character in the string, and\n+   *  you cast it to a pointer-to-_Rep and subtract 1 to get a\n+   *  pointer to the header.\n+   *\n+   *  This approach has the enormous advantage that a string object\n+   *  requires only one allocation.  All the ugliness is confined\n+   *  within a single pair of inline functions, which each compile to\n+   *  a single \"add\" instruction: _Rep::_M_refdata(), and\n+   *  __rc_string_base::_M_rep(); and the allocation function which gets a\n+   *  block of raw bytes and with room enough and constructs a _Rep\n+   *  object at the front.\n+   *\n+   *  The reason you want _M_data pointing to the character array and\n+   *  not the _Rep is so that the debugger can see the string\n+   *  contents. (Probably we should add a non-inline member to get\n+   *  the _Rep for the debugger to use, so users can check the actual\n+   *  string length.)\n+   *\n+   *  Note that the _Rep object is a POD so that you can have a\n+   *  static \"empty string\" _Rep object already \"constructed\" before\n+   *  static constructors have run.  The reference-count encoding is\n+   *  chosen so that a 0 indicates one reference, so you never try to\n+   *  destroy the empty-string _Rep object.\n+   *\n+   *  All but the last paragraph is considered pretty conventional\n+   *  for a C++ string implementation.\n+   *  @endif\n+  */\n+ template<typename _CharT, typename _Traits, typename _Alloc>\n+    class __rc_string_base\n+    : protected __vstring_utility<_CharT, _Traits, _Alloc>\n+    {\n+    public:\n+      typedef _Traits\t\t\t\t\t    traits_type;\n+      typedef typename _Traits::char_type\t\t    value_type;\n+      typedef _Alloc\t\t\t\t\t    allocator_type;\n+\n+      typedef typename __vstring_utility<_CharT, _Traits, _Alloc>::\n+        _CharT_alloc_type                                   _CharT_alloc_type;\n+      typedef typename _CharT_alloc_type::size_type\t    size_type;\n+\n+      // The maximum number of individual char_type elements of an\n+      // individual string is determined by _S_max_size. This is the\n+      // value that will be returned by max_size().  (Whereas npos\n+      // is the maximum number of bytes the allocator can allocate.)\n+      // If one was to divvy up the theoretical largest size string,\n+      // with a terminating character and m _CharT elements, it'd\n+      // look like this:\n+      // npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)\n+      // Solving for m:\n+      // m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1\n+      // In addition, this implementation quarters this amount.\n+      static const size_type\t_S_max_size;\n+\n+    private:\n+      static const _CharT\t_S_terminal;\n+\n+      // _Rep: string representation\n+      //   Invariants:\n+      //   1. String really contains _M_length + 1 characters: due to 21.3.4\n+      //      must be kept null-terminated.\n+      //   2. _M_capacity >= _M_length\n+      //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).\n+      //   3. _M_refcount has three states:\n+      //      -1: leaked, one reference, no ref-copies allowed, non-const.\n+      //       0: one reference, non-const.\n+      //     n>0: n + 1 references, operations require a lock, const.\n+      //   4. All fields==0 is an empty string, given the extra storage\n+      //      beyond-the-end for a null terminator; thus, the shared\n+      //      empty string representation needs no constructor.\n+      struct _Rep\n+      {\n+\tsize_type\t\t_M_length;\n+\tsize_type\t\t_M_capacity;\n+\t_Atomic_word\t\t_M_refcount;\n+\n+\ttypedef typename _Alloc::template rebind<size_type>::other _Raw_alloc;\n+\n+ \t_CharT*\n+\t_M_refdata()\n+\t{ return reinterpret_cast<_CharT*>(this + 1); }\n+\n+\tvoid\n+\t_M_set_length(size_type __n)\n+\t{ \n+\t  _M_refcount = 0;  // One reference.\n+\t  _M_length = __n;\n+\t  // grrr. (per 21.3.4)\n+\t  // You cannot leave those LWG people alone for a second.\n+\t  traits_type::assign(_M_refdata()[__n], _S_terminal);\n+\t}\n+\n+\t// Create & Destroy\n+\tstatic _Rep*\n+\t_S_create(size_type, size_type, const _Alloc&);\n+\n+\tvoid\n+\t_M_destroy(const _Alloc&) throw();\n+\n+\t_CharT*\n+\t_M_clone(const _Alloc&, size_type __res = 0);\n+      };\n+\n+      struct _Rep_empty : _Rep\n+      {\n+\t_CharT                  _M_terminal;\n+      };\n+\n+      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n+      struct _Alloc_hider : _Alloc\n+      {\n+\t_Alloc_hider(_CharT* __dat, const _Alloc& __a)\n+\t: _Alloc(__a), _M_p(__dat) { }\n+\n+\t_CharT* _M_p; // The actual data.\n+      };\n+\n+      // Data Member (private):\n+      mutable _Alloc_hider\t_M_dataplus;\n+\n+      static _Rep_empty&\n+      _S_empty_rep()\n+      {\n+\tstatic _Rep_empty _Empty_rep;\n+\treturn _Empty_rep;\n+      }\n+\n+      _CharT*\n+      _M_data(_CharT* __p)\n+      { return (_M_dataplus._M_p = __p); }\n+\n+      _Rep*\n+      _M_rep() const\n+      { return &((reinterpret_cast<_Rep*>(_M_data()))[-1]); }\n+\n+      _CharT*\n+      _M_refcopy() const throw()\n+      {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+\tif (__builtin_expect(_M_rep() != &_S_empty_rep(), false))\n+#endif\n+\t  __atomic_add(&_M_rep()->_M_refcount, 1);\n+\treturn _M_data();\n+      }  // XXX MT\n+\n+      _CharT*\n+      _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2) const\n+      {\n+\treturn (!_M_is_leaked() && __alloc1 == __alloc2)\n+\t        ? _M_refcopy() : _M_rep()->_M_clone(__alloc1);\n+      }\n+\n+      void\n+      _M_dispose(const _Alloc& __a)\n+      {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+\tif (__builtin_expect(_M_rep() != &_S_empty_rep(), false))\n+#endif\n+\t  if (__exchange_and_add(&_M_rep()->_M_refcount, -1) <= 0)\n+\t    _M_rep()->_M_destroy(__a);\n+      }  // XXX MT\n+\n+      void\n+      _M_leak_hard();\n+\n+      // _S_construct_aux is used to implement the 21.3.1 para 15 which\n+      // requires special behaviour if _InIter is an integral type\n+      template<class _InIterator>\n+        static _CharT*\n+        _S_construct_aux(_InIterator __beg, _InIterator __end,\n+\t\t\t const _Alloc& __a, __false_type)\n+\t{\n+          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n+          return _S_construct(__beg, __end, __a, _Tag());\n+\t}\n+\n+      template<class _InIterator>\n+        static _CharT*\n+        _S_construct_aux(_InIterator __beg, _InIterator __end,\n+\t\t\t const _Alloc& __a, __true_type)\n+\t{ return _S_construct(static_cast<size_type>(__beg),\n+\t\t\t      static_cast<value_type>(__end), __a); }\n+\n+      template<class _InIterator>\n+        static _CharT*\n+        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)\n+\t{\n+\t  typedef typename std::__is_integer<_InIterator>::__type _Integral;\n+\t  return _S_construct_aux(__beg, __end, __a, _Integral());\n+        }\n+\n+      // For Input Iterators, used in istreambuf_iterators, etc.\n+      template<class _InIterator>\n+        static _CharT*\n+         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n+\t\t      std::input_iterator_tag);\n+      \n+      // For forward_iterators up to random_access_iterators, used for\n+      // string::iterator, _CharT*, etc.\n+      template<class _FwdIterator>\n+        static _CharT*\n+        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,\n+\t\t     std::forward_iterator_tag);\n+\n+      static _CharT*\n+      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);\n+\n+    public:\n+      _CharT*\n+      _M_data() const\n+      { return _M_dataplus._M_p; }\n+\n+      size_type\n+      _M_length() const\n+      { return _M_rep()->_M_length; }\n+\n+      size_type\n+      _M_capacity() const\n+      { return _M_rep()->_M_capacity; }\n+\n+      bool\n+      _M_is_shared() const\n+      { return _M_rep()->_M_refcount > 0; }\n+\n+      bool\n+      _M_is_leaked() const\n+      { return _M_rep()->_M_refcount < 0; }\n+\n+      void\n+      _M_set_sharable()\n+      { _M_rep()->_M_refcount = 0; }\n+\n+      void\n+      _M_set_leaked()\n+      { _M_rep()->_M_refcount = -1; }\n+\n+      void\n+      _M_set_length(size_type __n)\n+      { _M_rep()->_M_set_length(__n); }\n+\n+      void\n+      _M_leak()    // for use in begin() & non-const op[]\n+      {\n+\tif (!_M_is_leaked())\n+\t  _M_leak_hard();\n+      }\n+\n+      __rc_string_base()\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n+#else\n+      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()) { }\n+#endif\n+      __rc_string_base(const _Alloc& __a);\n+\n+      __rc_string_base(const __rc_string_base& __rcs);\n+\n+      __rc_string_base(size_type __n, _CharT __c, const _Alloc& __a);\n+\n+      template<typename _InputIterator>\n+        __rc_string_base(_InputIterator __beg, _InputIterator __end,\n+\t\t    const _Alloc& __a);\n+\n+      ~__rc_string_base()\n+      { _M_dispose(_M_get_allocator()); }      \n+\n+      allocator_type\n+      _M_get_allocator() const\n+      { return _M_dataplus; }\n+\n+      void\n+      _M_swap(__rc_string_base& __rcs)\n+      {\n+\t_CharT* __tmp = _M_data();\n+\t_M_data(__rcs._M_data());\n+\t__rcs._M_data(__tmp);\n+      }\n+\n+      void\n+      _M_assign(const __rc_string_base& __rcs);\n+\n+      void\n+      _M_reserve(size_type __res);\n+\n+      void\n+      _M_mutate(size_type __pos, size_type __len1, size_type __len2);\n+    };\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    const typename __rc_string_base<_CharT, _Traits, _Alloc>::size_type\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    _S_max_size = (((static_cast<size_type>(-1) - sizeof(_Rep))\n+\t\t    / sizeof(_CharT)) - 1) / 4;\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    const _CharT\n+    __rc_string_base<_CharT, _Traits, _Alloc>::_S_terminal = _CharT();\n+\n+    template<typename _CharT, typename _Traits, typename _Alloc>\n+    typename __rc_string_base<_CharT, _Traits, _Alloc>::_Rep*\n+    __rc_string_base<_CharT, _Traits, _Alloc>::_Rep::\n+    _S_create(size_type __capacity, size_type __old_capacity,\n+\t      const _Alloc& __alloc)\n+    {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 83.  String::npos vs. string::max_size()\n+      if (__capacity > _S_max_size)\n+\tstd::__throw_length_error(__N(\"__rc_string_base::_Rep::_S_create\"));\n+\n+      // The standard places no restriction on allocating more memory\n+      // than is strictly needed within this layer at the moment or as\n+      // requested by an explicit application call to reserve().\n+\n+      // Many malloc implementations perform quite poorly when an\n+      // application attempts to allocate memory in a stepwise fashion\n+      // growing each allocation size by only 1 char.  Additionally,\n+      // it makes little sense to allocate less linear memory than the\n+      // natural blocking size of the malloc implementation.\n+      // Unfortunately, we would need a somewhat low-level calculation\n+      // with tuned parameters to get this perfect for any particular\n+      // malloc implementation.  Fortunately, generalizations about\n+      // common features seen among implementations seems to suffice.\n+\n+      // __pagesize need not match the actual VM page size for good\n+      // results in practice, thus we pick a common value on the low\n+      // side.  __malloc_header_size is an estimate of the amount of\n+      // overhead per memory allocation (in practice seen N * sizeof\n+      // (void*) where N is 0, 2 or 4).  According to folklore,\n+      // picking this value on the high side is better than\n+      // low-balling it (especially when this algorithm is used with\n+      // malloc implementations that allocate memory blocks rounded up\n+      // to a size which is a power of 2).\n+      const size_type __pagesize = 4096;\n+      const size_type __malloc_header_size = 4 * sizeof(void*);\n+\n+      // The below implements an exponential growth policy, necessary to\n+      // meet amortized linear time requirements of the library: see\n+      // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.\n+      // It's active for allocations requiring an amount of memory above\n+      // system pagesize. This is consistent with the requirements of the\n+      // standard: http://gcc.gnu.org/ml/libstdc++/2001-07/msg00130.html\n+      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)\n+\t__capacity = 2 * __old_capacity;\n+\n+      // NB: Need an array of char_type[__capacity], plus a terminating\n+      // null char_type() element, plus enough for the _Rep data structure,\n+      // plus sizeof(size_type) - 1 to upper round to a size multiple\n+      // of sizeof(size_type).\n+      // Whew. Seemingly so needy, yet so elemental.\n+      size_type __size = ((__capacity + 1) * sizeof(_CharT) + sizeof(_Rep)\n+\t\t\t  + sizeof(size_type) - 1);\n+\n+      const size_type __adj_size = __size + __malloc_header_size;\n+      if (__adj_size > __pagesize && __capacity > __old_capacity)\n+\t{\n+\t  const size_type __extra = __pagesize - __adj_size % __pagesize;\n+\t  __capacity += __extra / sizeof(_CharT);\n+\t  // Never allocate a string bigger than _S_max_size.\n+\t  if (__capacity > _S_max_size)\n+\t    __capacity = _S_max_size;\n+\t  __size = ((__capacity + 1) * sizeof(_CharT) + sizeof(_Rep)\n+\t\t    + sizeof(size_type) - 1);\n+\t}\n+\n+      // NB: Might throw, but no worries about a leak, mate: _Rep()\n+      // does not throw.\n+      void* __place = _Raw_alloc(__alloc).allocate(__size\n+\t\t\t\t\t\t   / sizeof(size_type));\n+      _Rep *__p = new (__place) _Rep;\n+      __p->_M_capacity = __capacity;\n+      return __p;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __rc_string_base<_CharT, _Traits, _Alloc>::_Rep::\n+    _M_destroy(const _Alloc& __a) throw ()\n+    {\n+      const size_type __size = ((_M_capacity + 1) * sizeof(_CharT)\n+\t\t\t\t+ sizeof(_Rep) + sizeof(size_type) - 1);\n+      _Raw_alloc(__a).deallocate(reinterpret_cast<size_type*>(this),\n+\t\t\t\t __size / sizeof(size_type));\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    _CharT*\n+    __rc_string_base<_CharT, _Traits, _Alloc>::_Rep::\n+    _M_clone(const _Alloc& __alloc, size_type __res)\n+    {\n+      // Requested capacity of the clone.\n+      const size_type __requested_cap = _M_length + __res;\n+      _Rep* __r = _Rep::_S_create(__requested_cap, _M_capacity, __alloc);\n+\n+      if (_M_length)\n+\t_S_copy(__r->_M_refdata(), _M_refdata(), _M_length);\n+\n+      __r->_M_set_length(_M_length);\n+      return __r->_M_refdata();\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    __rc_string_base(const _Alloc& __a)\n+    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a) { }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    __rc_string_base(const __rc_string_base& __rcs)\n+    : _M_dataplus(__rcs._M_grab(_Alloc(__rcs._M_get_allocator()),\n+\t\t\t\t__rcs._M_get_allocator()),\n+\t\t  __rcs._M_get_allocator()) { }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    __rc_string_base(size_type __n, _CharT __c, const _Alloc& __a)\n+    : _M_dataplus(_S_construct(__n, __c, __a), __a)\n+    { }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    template<typename _InputIterator>\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    __rc_string_base(_InputIterator __beg, _InputIterator __end,\n+\t\t     const _Alloc& __a)\n+    : _M_dataplus(_S_construct(__beg, __end, __a), __a)\n+    { }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    _M_leak_hard()\n+    {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+      if (_M_rep() == &_S_empty_rep())\n+\treturn;\n+#endif\n+      if (_M_is_shared())\n+\t_M_mutate(0, 0, 0);\n+      _M_set_leaked();\n+    }\n+\n+  // NB: This is the special case for Input Iterators, used in\n+  // istreambuf_iterators, etc.\n+  // Input Iterators have a cost structure very different from\n+  // pointers, calling for a different coding style.\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    template<typename _InIterator>\n+      _CharT*\n+      __rc_string_base<_CharT, _Traits, _Alloc>::\n+      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n+\t\t   std::input_iterator_tag)\n+      {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+\tif (__beg == __end && __a == _Alloc())\n+\t  return _S_empty_rep()._M_refdata();\n+#endif\n+\t// Avoid reallocation for common case.\n+\t_CharT __buf[128];\n+\tsize_type __len = 0;\n+\twhile (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))\n+\t  {\n+\t    __buf[__len++] = *__beg;\n+\t    ++__beg;\n+\t  }\n+\t_Rep* __r = _Rep::_S_create(__len, size_type(0), __a);\n+\t_S_copy(__r->_M_refdata(), __buf, __len);\n+\ttry\n+\t  {\n+\t    while (__beg != __end)\n+\t      {\n+\t\tif (__len == __r->_M_capacity)\n+\t\t  {\n+\t\t    // Allocate more space.\n+\t\t    _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);\n+\t\t    _S_copy(__another->_M_refdata(), __r->_M_refdata(), __len);\n+\t\t    __r->_M_destroy(__a);\n+\t\t    __r = __another;\n+\t\t  }\n+\t\t__r->_M_refdata()[__len++] = *__beg;\n+\t\t++__beg;\n+\t      }\n+\t  }\n+\tcatch(...)\n+\t  {\n+\t    __r->_M_destroy(__a);\n+\t    __throw_exception_again;\n+\t  }\n+\t__r->_M_set_length(__len);\n+\treturn __r->_M_refdata();\n+      }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    template <typename _InIterator>\n+      _CharT*\n+      __rc_string_base<_CharT, _Traits, _Alloc>::\n+      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n+\t\t   std::forward_iterator_tag)\n+      {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+\tif (__beg == __end && __a == _Alloc())\n+\t  return _S_empty_rep()._M_refdata();\n+#endif\n+\t// NB: Not required, but considered best practice.\n+\tif (__builtin_expect(__is_null_p(__beg) && __beg != __end, 0))\n+\t  std::__throw_logic_error(__N(\"__rc_string_base::\"\n+\t\t\t\t       \"_S_construct NULL not valid\"));\n+\n+\tconst size_type __dnew = static_cast<size_type>(std::distance(__beg,\n+\t\t\t\t\t\t\t\t      __end));\n+\t// Check for out_of_range and length_error exceptions.\n+\t_Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);\n+\ttry\n+\t  { _S_copy_chars(__r->_M_refdata(), __beg, __end); }\n+\tcatch(...)\n+\t  {\n+\t    __r->_M_destroy(__a);\n+\t    __throw_exception_again;\n+\t  }\n+\t__r->_M_set_length(__dnew);\n+\treturn __r->_M_refdata();\n+      }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    _CharT*\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)\n+    {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+      if (__n == 0 && __a == _Alloc())\n+\treturn _S_empty_rep()._M_refdata();\n+#endif\n+      // Check for out_of_range and length_error exceptions.\n+      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);\n+      if (__n)\n+\t_S_assign(__r->_M_refdata(), __n, __c);\n+\n+      __r->_M_set_length(__n);\n+      return __r->_M_refdata();\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    _M_assign(const __rc_string_base& __rcs)\n+    {\n+      if (_M_rep() != __rcs._M_rep())\n+\t{\n+\t  const allocator_type __a = _M_get_allocator();\n+\t  _CharT* __tmp = __rcs._M_grab(__a, __rcs._M_get_allocator());\n+\t  _M_dispose(__a);\n+\t  _M_data(__tmp);\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    _M_reserve(size_type __res)\n+    {\n+      if (__res != _M_capacity() || _M_is_shared())\n+\t{\n+\t  // Make sure we don't shrink below the current size.\n+\t  if (__res < _M_length())\n+\t    __res = _M_length();\n+\t  \n+\t  const allocator_type __a = _M_get_allocator();\n+\t  _CharT* __tmp = _M_rep()->_M_clone(__a, __res - _M_length());\n+\t  _M_dispose(__a);\n+\t  _M_data(__tmp);\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    _M_mutate(size_type __pos, size_type __len1, size_type __len2)\n+    {\n+      const size_type __old_size = _M_length();\n+      const size_type __new_size = __old_size + __len2 - __len1;\n+      const size_type __how_much = __old_size - __pos - __len1;\n+      \n+      if (__new_size > _M_capacity() || _M_is_shared())\n+\t{\n+\t  // Must reallocate.\n+\t  const allocator_type __a = _M_get_allocator();\n+\t  _Rep* __r = _Rep::_S_create(__new_size, _M_capacity(), __a);\n+\n+\t  if (__pos)\n+\t    _S_copy(__r->_M_refdata(), _M_data(), __pos);\n+\t  if (__how_much)\n+\t    _S_copy(__r->_M_refdata() + __pos + __len2,\n+\t\t    _M_data() + __pos + __len1, __how_much);\n+\n+\t  _M_dispose(__a);\n+\t  _M_data(__r->_M_refdata());\n+\t}\n+      else if (__how_much && __len1 != __len2)\n+\t{\n+\t  // Work in-place.\n+\t  _S_move(_M_data() + __pos + __len2,\n+\t\t  _M_data() + __pos + __len1, __how_much);\n+\t}\n+      _M_rep()->_M_set_length(__new_size);\n+    }\n+} // namespace __gnu_cxx\n+\n+#endif /* _RC_STRING_BASE_H */"}, {"sha": "718c5048e321aae931e0e58190e08b2ad68bef1a", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "added", "additions": 582, "deletions": 0, "changes": 582, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,582 @@\n+// Short-string-optimized versatile string base -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ext/sso_string_base.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _SSO_STRING_BASE_H\n+#define _SSO_STRING_BASE_H 1\n+\n+namespace __gnu_cxx\n+{\n+  // N.B. According to 3.9/10 and 9/4, POD types can have user-defined \n+  // constructors: in that case, cannot be member of an union (9.5/1).\n+  // See, f.i., class gnu_char_type in the testsuite.\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   bool = std::__is_scalar<_CharT>::__value>\n+    struct __sso_string_local\n+    {\n+      typedef typename __vstring_utility<_CharT, _Traits, _Alloc>::\n+        _CharT_alloc_type::size_type                        size_type;\n+\n+      enum { _S_local_capacity = 15 };\n+      \n+      union\n+      {\n+\t_CharT               _M_local_data[_S_local_capacity + 1];\n+\tsize_type            _M_allocated_capacity;\n+      };\n+    };\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    struct __sso_string_local<_CharT, _Traits, _Alloc, false>\n+    {\n+      typedef typename __vstring_utility<_CharT, _Traits, _Alloc>::\n+        _CharT_alloc_type::size_type                        size_type;\n+\n+      enum { _S_local_capacity = 15 };\n+\n+      _CharT                 _M_local_data[_S_local_capacity + 1];\n+      size_type              _M_allocated_capacity;\n+    };\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    class __sso_string_base\n+    : protected __vstring_utility<_CharT, _Traits, _Alloc>,\n+      private __sso_string_local<_CharT, _Traits, _Alloc>\n+    {\n+      typedef __sso_string_local<_CharT, _Traits, _Alloc>   _Local;\n+\n+    public:\n+      typedef _Traits\t\t\t\t\t    traits_type;\n+      typedef typename _Traits::char_type\t\t    value_type;\n+      typedef _Alloc\t\t\t\t\t    allocator_type;\n+\n+      typedef typename __vstring_utility<_CharT, _Traits, _Alloc>::\n+        _CharT_alloc_type                                   _CharT_alloc_type;\n+      typedef typename _CharT_alloc_type::size_type\t    size_type;\n+      \n+      // The maximum number of individual char_type elements of an\n+      // individual string is determined by _S_max_size. This is the\n+      // value that will be returned by max_size().  (Whereas npos\n+      // is the maximum number of bytes the allocator can allocate.)\n+      // If one was to divvy up the theoretical largest size string,\n+      // with a terminating character and m _CharT elements, it'd\n+      // look like this:\n+      // npos = m * sizeof(_CharT) + sizeof(_CharT)\n+      // Solving for m:\n+      // m = npos / sizeof(CharT) - 1\n+      // In addition, this implementation quarters this amount.\n+      static const size_type\t_S_max_size;\n+\n+    private:\n+      static const _CharT\t_S_terminal;\n+\n+      using _Local::_S_local_capacity;\n+      using _Local::_M_local_data;\n+      using _Local::_M_allocated_capacity;\n+\n+      // Create & Destroy\n+      _CharT*\n+      _M_create(size_type&, size_type);\n+      \n+      void\n+      _M_dispose() throw()\n+      {\n+\tif (!_M_is_local())\n+\t  _M_destroy(_M_allocated_capacity + 1);\n+      }\n+\n+      void\n+      _M_destroy(size_type) throw();\n+\n+      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n+      struct _Alloc_hider : _Alloc\n+      {\n+\t_Alloc_hider(const _Alloc& __a, _CharT* __ptr)\n+\t: _Alloc(__a), _M_p(__ptr) { }\n+\n+\t_CharT* _M_p; // The actual data.\n+      };\n+\n+      // Data Members (private):\n+      _Alloc_hider\t        _M_dataplus;\n+      size_type                 _M_string_length;\n+\n+      _CharT*\n+      _M_data(_CharT* __p)\n+      { return (_M_dataplus._M_p = __p); }\n+\n+      void\n+      _M_length(size_type __length)\n+      { _M_string_length = __length; }\n+\n+      void\n+      _M_capacity(size_type __capacity)\n+      { _M_allocated_capacity = __capacity; }\n+\n+      bool\n+      _M_is_local() const\n+      { return _M_data() == _M_local_data; }\n+\n+      // _M_construct_aux is used to implement the 21.3.1 para 15 which\n+      // requires special behaviour if _InIter is an integral type\n+      template<class _InIterator>\n+        void\n+        _M_construct_aux(_InIterator __beg, _InIterator __end, __false_type)\n+\t{\n+          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n+          _M_construct(__beg, __end, _Tag());\n+\t}\n+\n+      template<class _InIterator>\n+        void\n+        _M_construct_aux(_InIterator __beg, _InIterator __end, __true_type)\n+\t{ _M_construct(static_cast<size_type>(__beg),\n+\t\t       static_cast<value_type>(__end)); }\n+\n+      template<class _InIterator>\n+        void\n+        _M_construct(_InIterator __beg, _InIterator __end)\n+\t{\n+\t  typedef typename std::__is_integer<_InIterator>::__type _Integral;\n+\t  _M_construct_aux(__beg, __end, _Integral());\n+        }\n+\n+      // For Input Iterators, used in istreambuf_iterators, etc.\n+      template<class _InIterator>\n+        void\n+        _M_construct(_InIterator __beg, _InIterator __end,\n+\t\t     std::input_iterator_tag);\n+      \n+      // For forward_iterators up to random_access_iterators, used for\n+      // string::iterator, _CharT*, etc.\n+      template<class _FwdIterator>\n+        void\n+        _M_construct(_FwdIterator __beg, _FwdIterator __end,\n+\t\t     std::forward_iterator_tag);\n+\n+      void\n+      _M_construct(size_type __req, _CharT __c);\n+\n+    public:\n+      _CharT*\n+      _M_data() const\n+      { return _M_dataplus._M_p; }\n+\n+      size_type\n+      _M_length() const\n+      { return _M_string_length; }\n+\n+      size_type\n+      _M_capacity() const\n+      {\n+\treturn _M_is_local() ? size_type(_S_local_capacity)\n+\t                     : _M_allocated_capacity; \n+      }\n+\n+      bool\n+      _M_is_shared() const\n+      { return false; }\n+\n+      bool\n+      _M_is_leaked() const\n+      { return false; }\n+\n+      void\n+      _M_set_sharable() { }\n+\n+      void\n+      _M_set_leaked() { }\n+\n+      void\n+      _M_set_length(size_type __n)\n+      {\n+\t_M_length(__n);\n+\t// grrr. (per 21.3.4)\n+\t// You cannot leave those LWG people alone for a second.\n+\ttraits_type::assign(_M_data()[__n], _S_terminal);\n+      }\n+\n+      void\n+      _M_leak() { }\n+\n+      __sso_string_base()\n+      : _M_dataplus(_Alloc(), _M_local_data)\n+      { _M_set_length(0); }\n+\n+      __sso_string_base(const _Alloc& __a);\n+\n+      __sso_string_base(const __sso_string_base& __rcs);\n+\n+      __sso_string_base(size_type __n, _CharT __c, const _Alloc& __a);\n+\n+      template<typename _InputIterator>\n+        __sso_string_base(_InputIterator __beg, _InputIterator __end,\n+\t\t\t  const _Alloc& __a);\n+\n+      ~__sso_string_base()\n+      { _M_dispose(); }\n+\n+      allocator_type\n+      _M_get_allocator() const\n+      { return _M_dataplus; }\n+\n+      void\n+      _M_swap(__sso_string_base& __rcs);\n+\n+      void\n+      _M_assign(const __sso_string_base& __rcs);\n+\n+      void\n+      _M_reserve(size_type __res);\n+\n+      void\n+      _M_mutate(size_type __pos, size_type __len1, size_type __len2);\n+    };\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    _M_destroy(size_type __size) throw()\n+    { _CharT_alloc_type(_M_get_allocator()).deallocate(_M_data(), __size); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    _M_swap(__sso_string_base& __rcs)\n+    {\n+      const bool __local = _M_is_local();\n+      const bool __rcs_local = __rcs._M_is_local();\n+      \n+      if (__local && __rcs_local)\n+\t{\n+\t  _CharT __tmp_data[_S_local_capacity + 1];\n+\t  const size_type __tmp_length = __rcs._M_length();\n+\t  _S_copy(__tmp_data, __rcs._M_data(), __rcs._M_length() + 1);\n+\t  __rcs._M_length(_M_length());\n+\t  _S_copy(__rcs._M_data(), _M_data(), _M_length() + 1);\n+\t  _M_length(__tmp_length);\n+\t  _S_copy(_M_data(), __tmp_data, __tmp_length + 1);\n+\t}\n+      else if (__local && !__rcs_local)\n+\t{\n+\t  const size_type __tmp_capacity = __rcs._M_allocated_capacity;\n+\t  const size_type __tmp_length = __rcs._M_length();\n+\t  _CharT* __tmp_ptr = __rcs._M_data();\n+\t  __rcs._M_data(__rcs._M_local_data);\n+\t  _S_copy(__rcs._M_data(), _M_data(), _M_length() + 1);\n+\t  __rcs._M_length(_M_length());\n+\t  _M_data(__tmp_ptr);\n+\t  _M_length(__tmp_length);\n+\t  _M_capacity(__tmp_capacity);\n+\t}\n+      else if (!__local && __rcs_local)\n+\t{\n+\t  const size_type __tmp_capacity = _M_allocated_capacity;\n+\t  const size_type __tmp_length = _M_length();\n+\t  _CharT* __tmp_ptr = _M_data();\n+\t  _M_data(_M_local_data);\n+\t  _S_copy(_M_data(), __rcs._M_data(), __rcs._M_length() + 1);\n+\t  _M_length(__rcs._M_length());\n+\t  __rcs._M_data(__tmp_ptr);\n+\t  __rcs._M_length(__tmp_length);\n+\t  __rcs._M_capacity(__tmp_capacity);\n+\t}\n+      else\n+\t{\n+\t  const size_type __tmp_capacity = _M_allocated_capacity;\n+\t  const size_type __tmp_length = _M_length();\n+\t  _CharT* __tmp_ptr = _M_data();\n+\t  _M_data(__rcs._M_data());\n+\t  _M_length(__rcs._M_length());\n+\t  _M_capacity(__rcs._M_allocated_capacity);\n+\t  __rcs._M_data(__tmp_ptr);\n+\t  __rcs._M_length(__tmp_length);\n+\t  __rcs._M_capacity(__tmp_capacity);\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    const typename __sso_string_base<_CharT, _Traits, _Alloc>::size_type\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    _S_max_size = ((static_cast<size_type>(-1) / sizeof(_CharT)) - 1) / 4;\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    const _CharT\n+    __sso_string_base<_CharT, _Traits, _Alloc>::_S_terminal = _CharT();\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    _CharT*\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    _M_create(size_type& __capacity, size_type __old_capacity)\n+    {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 83.  String::npos vs. string::max_size()\n+      if (__capacity > _S_max_size)\n+\tstd::__throw_length_error(__N(\"__sso_string_base::_M_create\"));\n+\n+      // The below implements an exponential growth policy, necessary to\n+      // meet amortized linear time requirements of the library: see\n+      // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.\n+      // It's active for allocations requiring an amount of memory above\n+      // system pagesize. This is consistent with the requirements of the\n+      // standard: http://gcc.gnu.org/ml/libstdc++/2001-07/msg00130.html\n+      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)\n+\t__capacity = 2 * __old_capacity;\n+\n+      // NB: Need an array of char_type[__capacity], plus a terminating\n+      // null char_type() element.\n+      return _CharT_alloc_type(_M_get_allocator()).allocate(__capacity + 1);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    __sso_string_base(const _Alloc& __a)\n+    : _M_dataplus(__a, _M_local_data)\n+    { _M_set_length(0); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    __sso_string_base(const __sso_string_base& __rcs)\n+    : _M_dataplus(__rcs._M_get_allocator(), _M_local_data)\n+    { _M_construct(__rcs._M_data(), __rcs._M_data() + __rcs._M_length()); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    __sso_string_base(size_type __n, _CharT __c, const _Alloc& __a)\n+    : _M_dataplus(__a, _M_local_data)\n+    { _M_construct(__n, __c); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    template<typename _InputIterator>\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    __sso_string_base(_InputIterator __beg, _InputIterator __end,\n+\t\t      const _Alloc& __a)\n+    : _M_dataplus(__a, _M_local_data)\n+    { _M_construct(__beg, __end); }\n+\n+  // NB: This is the special case for Input Iterators, used in\n+  // istreambuf_iterators, etc.\n+  // Input Iterators have a cost structure very different from\n+  // pointers, calling for a different coding style.\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    template<typename _InIterator>\n+      void\n+      __sso_string_base<_CharT, _Traits, _Alloc>::\n+      _M_construct(_InIterator __beg, _InIterator __end,\n+\t\t   std::input_iterator_tag)\n+      {\n+\t// Avoid reallocation for common case.\n+\tsize_type __len = 0;\n+\tsize_type __capacity = size_type(_S_local_capacity);\n+\n+\twhile (__beg != __end && __len < __capacity)\n+\t  {\n+\t    _M_data()[__len++] = *__beg;\n+\t    ++__beg;\n+\t  }\n+\t\n+\ttry\n+\t  {\n+\t    while (__beg != __end)\n+\t      {\n+\t\tif (__len == __capacity)\n+\t\t  {\n+\t\t    // Allocate more space.\n+\t\t    __capacity = __len + 1;\n+\t\t    _CharT* __another = _M_create(__capacity, __len);\n+\t\t    _S_copy(__another, _M_data(), __len);\n+\t\t    _M_dispose();\n+\t\t    _M_data(__another);\n+\t\t    _M_capacity(__capacity);\n+\t\t  }\n+\t\t_M_data()[__len++] = *__beg;\n+\t\t++__beg;\n+\t      }\n+\t  }\n+\tcatch(...)\n+\t  {\n+\t    _M_dispose();\n+\t    __throw_exception_again;\n+\t  }\n+\n+\t_M_set_length(__len);\n+      }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    template <typename _InIterator>\n+      void\n+      __sso_string_base<_CharT, _Traits, _Alloc>::\n+      _M_construct(_InIterator __beg, _InIterator __end,\n+\t\t   std::forward_iterator_tag)\n+      {\n+\t// NB: Not required, but considered best practice.\n+\tif (__builtin_expect(__is_null_p(__beg) && __beg != __end, 0))\n+\t  std::__throw_logic_error(__N(\"__sso_string_base::\"\n+\t\t\t\t       \"_M_construct NULL not valid\"));\n+\n+\tsize_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n+\n+\tif (__dnew > size_type(_S_local_capacity))\n+\t  {\n+\t    _M_data(_M_create(__dnew, size_type(0)));\n+\t    _M_capacity(__dnew);\n+\t  }\n+\n+\t// Check for out_of_range and length_error exceptions.\n+\ttry\n+\t  { _S_copy_chars(_M_data(), __beg, __end); }\n+\tcatch(...)\n+\t  {\n+\t    _M_dispose();\n+\t    __throw_exception_again;\n+\t  }\n+\n+\t_M_set_length(__dnew);\n+      }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    _M_construct(size_type __n, _CharT __c)\n+    {\n+      if (__n > size_type(_S_local_capacity))\n+\t{\n+\t  _M_data(_M_create(__n, size_type(0)));\n+\t  _M_capacity(__n);\n+\t}\n+\n+      if (__n)\n+\t_S_assign(_M_data(), __n, __c);\n+\n+      _M_set_length(__n);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    _M_assign(const __sso_string_base& __rcs)\n+    {\n+      if (this != &__rcs)\n+\t{\n+\t  size_type __size = __rcs._M_length();\n+\n+\t  _CharT* __tmp = _M_local_data;\n+\t  if (__size > size_type(_S_local_capacity))\n+\t    __tmp = _M_create(__size, size_type(0));\n+\n+\t  _M_dispose();\n+\t  _M_data(__tmp);\n+\n+\t  if (__size)\n+\t    _S_copy(_M_data(), __rcs._M_data(), __size);\n+\n+\t  if (!_M_is_local())\n+\t    _M_capacity(__size);\n+\n+\t  _M_set_length(__size);\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    _M_reserve(size_type __res)\n+    {\n+      const size_type __capacity = _M_capacity();\n+      if (__res != __capacity)\n+\t{\n+\t  // Make sure we don't shrink below the current size.\n+\t  if (__res < _M_length())\n+\t    __res = _M_length();\n+\n+\t  if (__res > __capacity\n+\t      || __res > size_type(_S_local_capacity))\n+\t    {\n+\t      _CharT* __tmp = _M_create(__res, __capacity);\n+\t      if (_M_length())\n+\t\t_S_copy(__tmp, _M_data(), _M_length());\n+\t      _M_dispose();\n+\t      _M_data(__tmp);\n+\t      _M_capacity(__res);\n+\t    }\n+\t  else if (!_M_is_local())\n+\t    {\n+\t      const size_type __tmp_capacity = _M_allocated_capacity;\n+\t      if (_M_length())\n+\t\t_S_copy(_M_local_data, _M_data(), _M_length());\n+\t      _M_destroy(__tmp_capacity + 1);\n+\t      _M_data(_M_local_data);\n+\t    }\t  \n+\t  \n+\t  _M_set_length(_M_length());\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    _M_mutate(size_type __pos, size_type __len1, size_type __len2)\n+    {\n+      const size_type __old_size = _M_length();\n+      const size_type __new_size = __old_size + __len2 - __len1;\n+      const size_type __how_much = __old_size - __pos - __len1;\n+      \n+      if (__new_size > _M_capacity())\n+\t{\n+\t  // Must reallocate.\n+\t  size_type __new_capacity = __new_size;\n+\t  _CharT* __r = _M_create(__new_capacity, _M_capacity());\n+\n+\t  if (__pos)\n+\t    _S_copy(__r, _M_data(), __pos);\n+\t  if (__how_much)\n+\t    _S_copy(__r + __pos + __len2,\n+\t\t    _M_data() + __pos + __len1, __how_much);\n+\n+\t  _M_dispose();\n+\t  _M_data(__r);\n+\t  _M_capacity(__new_capacity);\n+\t}\n+      else if (__how_much && __len1 != __len2)\n+\t{\n+\t  // Work in-place.\n+\t  _S_move(_M_data() + __pos + __len2,\n+\t\t  _M_data() + __pos + __len1, __how_much);\n+\t}\n+\n+      _M_set_length(__new_size);\n+    }\n+} // namespace __gnu_cxx\n+\n+#endif /* _SSO_STRING_BASE_H */"}, {"sha": "15508001cfd04068c4c047d04e55675ca7fcecf3", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "added", "additions": 2178, "deletions": 0, "changes": 2178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,2178 @@\n+// Versatile string -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ext/vstring.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _VSTRING_H\n+#define _VSTRING_H 1\n+\n+#pragma GCC system_header\n+\n+#include <ext/vstring_util.h>\n+#include <ext/rc_string_base.h>\n+#include <ext/sso_string_base.h>\n+\n+namespace __gnu_cxx\n+{\n+  /**\n+   *  @class __versa_string vstring.h\n+   *  @brief  Managing sequences of characters and character-like objects.\n+   */\n+\n+  // Template class __versa_string\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    class __versa_string\n+    : private _Base<_CharT, _Traits, _Alloc>\n+    {\n+      typedef _Base<_CharT, _Traits, _Alloc>                __vstring_base;      \n+      typedef typename __vstring_base::_CharT_alloc_type    _CharT_alloc_type;\n+\n+      // Types:\n+    public:\n+      typedef _Traits\t\t\t\t\t    traits_type;\n+      typedef typename _Traits::char_type\t\t    value_type;\n+      typedef _Alloc\t\t\t\t\t    allocator_type;\n+      typedef typename _CharT_alloc_type::size_type\t    size_type;\n+      typedef typename _CharT_alloc_type::difference_type   difference_type;\n+      typedef typename _CharT_alloc_type::reference\t    reference;\n+      typedef typename _CharT_alloc_type::const_reference   const_reference;\n+      typedef typename _CharT_alloc_type::pointer\t    pointer;\n+      typedef typename _CharT_alloc_type::const_pointer\t    const_pointer;\n+      typedef __gnu_cxx::__normal_iterator<pointer, __versa_string>  iterator;\n+      typedef __gnu_cxx::__normal_iterator<const_pointer, __versa_string>\n+                                                            const_iterator;\n+      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n+      typedef std::reverse_iterator<iterator>\t\t    reverse_iterator;\n+\n+      // Data Members (public):\n+      // NB: This is an unsigned type, and thus represents the maximum\n+      // size that the allocator can hold.\n+      ///  Value returned by various member functions when they fail.\n+      static const size_type\tnpos = static_cast<size_type>(-1);\n+\n+    private:\n+      size_type\n+      _M_check(size_type __pos, const char* __s) const\n+      {\n+\tif (__pos > this->size())\n+\t  std::__throw_out_of_range(__N(__s));\n+\treturn __pos;\n+      }\n+\n+      void\n+      _M_check_length(size_type __n1, size_type __n2, const char* __s) const\n+      {\n+\tif (this->max_size() - (this->size() - __n1) < __n2)\n+\t  std::__throw_length_error(__N(__s));\n+      }\n+\n+      // NB: _M_limit doesn't check for a bad __pos value.\n+      size_type\n+      _M_limit(size_type __pos, size_type __off) const\n+      {\n+\tconst bool __testoff =  __off < this->size() - __pos;\n+\treturn __testoff ? __off : this->size() - __pos;\n+      }\n+\n+      // True if _Rep and source do not overlap.\n+      bool\n+      _M_disjunct(const _CharT* __s) const\n+      {\n+\treturn (std::less<const _CharT*>()(__s, this->_M_data())\n+\t\t|| std::less<const _CharT*>()(this->_M_data()\n+\t\t\t\t\t      + this->size(), __s));\n+      }\n+\n+      // For the internal use we have functions similar to `begin'/`end'\n+      // but they do not call _M_leak.\n+      iterator\n+      _M_ibegin() const\n+      { return iterator(this->_M_data()); }\n+\n+      iterator\n+      _M_iend() const\n+      { return iterator(this->_M_data() + this->_M_length()); }\n+\n+    public:\n+      // Construct/copy/destroy:\n+      // NB: We overload ctors in some cases instead of using default\n+      // arguments, per 17.4.4.4 para. 2 item 2.\n+\n+      /**\n+       *  @brief  Default constructor creates an empty string.\n+       */\n+      __versa_string()\n+      : __vstring_base() { }\n+      \n+      /**\n+       *  @brief  Construct an empty string using allocator @a a.\n+       */\n+      explicit\n+      __versa_string(const _Alloc& __a)\n+      : __vstring_base(__a) { }\n+\n+      // NB: per LWG issue 42, semantics different from IS:\n+      /**\n+       *  @brief  Construct string with copy of value of @a str.\n+       *  @param  str  Source string.\n+       */\n+      __versa_string(const __versa_string& __str)\n+      : __vstring_base(__str) { }\n+\n+      /**\n+       *  @brief  Construct string as copy of a substring.\n+       *  @param  str  Source string.\n+       *  @param  pos  Index of first character to copy from.\n+       *  @param  n  Number of characters to copy (default remainder).\n+       */\n+      __versa_string(const __versa_string& __str, size_type __pos,\n+\t\t     size_type __n = npos)\n+      : __vstring_base(__str._M_data()\n+\t\t       + __str._M_check(__pos,\n+\t\t\t\t\t\"__versa_string::__versa_string\"),\n+\t\t       __str._M_data() + __str._M_limit(__pos, __n)\n+\t\t       + __pos, _Alloc()) { }\n+\n+      /**\n+       *  @brief  Construct string as copy of a substring.\n+       *  @param  str  Source string.\n+       *  @param  pos  Index of first character to copy from.\n+       *  @param  n  Number of characters to copy.\n+       *  @param  a  Allocator to use.\n+       */\n+      __versa_string(const __versa_string& __str, size_type __pos,\n+\t\t     size_type __n, const _Alloc& __a)\n+      : __vstring_base(__str._M_data()\n+\t\t       + __str._M_check(__pos,\n+\t\t\t\t\t\"__versa_string::__versa_string\"),\n+\t\t       __str._M_data() + __str._M_limit(__pos, __n)\n+\t\t       + __pos, __a) { }\n+\n+      /**\n+       *  @brief  Construct string initialized by a character array.\n+       *  @param  s  Source character array.\n+       *  @param  n  Number of characters to copy.\n+       *  @param  a  Allocator to use (default is default allocator).\n+       *\n+       *  NB: @a s must have at least @a n characters, '\\0' has no special\n+       *  meaning.\n+       */\n+      __versa_string(const _CharT* __s, size_type __n,\n+\t\t     const _Alloc& __a = _Alloc())\n+      : __vstring_base(__s, __s + __n, __a) { }\n+\n+      /**\n+       *  @brief  Construct string as copy of a C string.\n+       *  @param  s  Source C string.\n+       *  @param  a  Allocator to use (default is default allocator).\n+       */\n+      __versa_string(const _CharT* __s, const _Alloc& __a = _Alloc())\n+      : __vstring_base(__s, __s ? __s + traits_type::length(__s) :\n+\t\t       __s + npos, __a) { }\n+\n+      /**\n+       *  @brief  Construct string as multiple characters.\n+       *  @param  n  Number of characters.\n+       *  @param  c  Character to use.\n+       *  @param  a  Allocator to use (default is default allocator).\n+       */\n+      __versa_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())\n+      : __vstring_base(__n, __c, __a) { }\n+\n+      /**\n+       *  @brief  Construct string as copy of a range.\n+       *  @param  beg  Start of range.\n+       *  @param  end  End of range.\n+       *  @param  a  Allocator to use (default is default allocator).\n+       */\n+      template<class _InputIterator>\n+        __versa_string(_InputIterator __beg, _InputIterator __end,\n+\t\t       const _Alloc& __a = _Alloc())\n+\t: __vstring_base(__beg, __end, __a) { }\n+\n+      /**\n+       *  @brief  Destroy the string instance.\n+       */\n+      ~__versa_string() { }\t\n+\n+      /**\n+       *  @brief  Assign the value of @a str to this string.\n+       *  @param  str  Source string.\n+       */\n+      __versa_string&\n+      operator=(const __versa_string& __str) \n+      { return this->assign(__str); }\n+\n+      /**\n+       *  @brief  Copy contents of @a s into this string.\n+       *  @param  s  Source null-terminated string.\n+       */\n+      __versa_string&\n+      operator=(const _CharT* __s) \n+      { return this->assign(__s); }\n+\n+      /**\n+       *  @brief  Set value to string of length 1.\n+       *  @param  c  Source character.\n+       *\n+       *  Assigning to a character makes this string length 1 and\n+       *  (*this)[0] == @a c.\n+       */\n+      __versa_string&\n+      operator=(_CharT __c) \n+      { \n+\tthis->assign(1, __c); \n+\treturn *this;\n+      }\n+\n+      // Iterators:\n+      /**\n+       *  Returns a read/write iterator that points to the first character in\n+       *  the %string.  Unshares the string.\n+       */\n+      iterator\n+      begin()\n+      {\n+\tthis->_M_leak();\n+\treturn iterator(this->_M_data());\n+      }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  character in the %string.\n+       */\n+      const_iterator\n+      begin() const\n+      { return const_iterator(this->_M_data()); }\n+\n+      /**\n+       *  Returns a read/write iterator that points one past the last\n+       *  character in the %string.  Unshares the string.\n+       */\n+      iterator\n+      end()\n+      {\n+\tthis->_M_leak();\n+\treturn iterator(this->_M_data() + this->size());\n+      }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past the\n+       *  last character in the %string.\n+       */\n+      const_iterator\n+      end() const\n+      { return const_iterator(this->_M_data() + this->size()); }\n+\n+      /**\n+       *  Returns a read/write reverse iterator that points to the last\n+       *  character in the %string.  Iteration is done in reverse element\n+       *  order.  Unshares the string.\n+       */\n+      reverse_iterator\n+      rbegin()\n+      { return reverse_iterator(this->end()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to the last character in the %string.  Iteration is done in\n+       *  reverse element order.\n+       */\n+      const_reverse_iterator\n+      rbegin() const\n+      { return const_reverse_iterator(this->end()); }\n+\n+      /**\n+       *  Returns a read/write reverse iterator that points to one before the\n+       *  first character in the %string.  Iteration is done in reverse\n+       *  element order.  Unshares the string.\n+       */\n+      reverse_iterator\n+      rend()\n+      { return reverse_iterator(this->begin()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to one before the first character in the %string.  Iteration\n+       *  is done in reverse element order.\n+       */\n+      const_reverse_iterator\n+      rend() const\n+      { return const_reverse_iterator(this->begin()); }\n+\n+    public:\n+      // Capacity:\n+      ///  Returns the number of characters in the string, not including any\n+      ///  null-termination.\n+      size_type\n+      size() const\n+      { return this->_M_length(); }\n+\n+      ///  Returns the number of characters in the string, not including any\n+      ///  null-termination.\n+      size_type\n+      length() const\n+      { return this->_M_length(); }\n+\n+      /// Returns the size() of the largest possible %string.\n+      size_type\n+      max_size() const\n+      { return __vstring_base::_S_max_size; }\n+\n+      /**\n+       *  @brief  Resizes the %string to the specified number of characters.\n+       *  @param  n  Number of characters the %string should contain.\n+       *  @param  c  Character to fill any new elements.\n+       *\n+       *  This function will %resize the %string to the specified\n+       *  number of characters.  If the number is smaller than the\n+       *  %string's current size the %string is truncated, otherwise\n+       *  the %string is extended and new elements are set to @a c.\n+       */\n+      void\n+      resize(size_type __n, _CharT __c);\n+\n+      /**\n+       *  @brief  Resizes the %string to the specified number of characters.\n+       *  @param  n  Number of characters the %string should contain.\n+       *\n+       *  This function will resize the %string to the specified length.  If\n+       *  the new size is smaller than the %string's current size the %string\n+       *  is truncated, otherwise the %string is extended and new characters\n+       *  are default-constructed.  For basic types such as char, this means\n+       *  setting them to 0.\n+       */\n+      void\n+      resize(size_type __n)\n+      { this->resize(__n, _CharT()); }\n+\n+      /**\n+       *  Returns the total number of characters that the %string can hold\n+       *  before needing to allocate more memory.\n+       */\n+      size_type\n+      capacity() const\n+      { return this->_M_capacity(); }\n+\n+      /**\n+       *  @brief  Attempt to preallocate enough memory for specified number of\n+       *          characters.\n+       *  @param  res_arg  Number of characters required.\n+       *  @throw  std::length_error  If @a res_arg exceeds @c max_size().\n+       *\n+       *  This function attempts to reserve enough memory for the\n+       *  %string to hold the specified number of characters.  If the\n+       *  number requested is more than max_size(), length_error is\n+       *  thrown.\n+       *\n+       *  The advantage of this function is that if optimal code is a\n+       *  necessity and the user can determine the string length that will be\n+       *  required, the user can reserve the memory in %advance, and thus\n+       *  prevent a possible reallocation of memory and copying of %string\n+       *  data.\n+       */\n+      void\n+      reserve(size_type __res_arg = 0)\n+      {\tthis->_M_reserve(__res_arg); }\n+\n+      /**\n+       *  Erases the string, making it empty.\n+       */\n+      void\n+      clear()\n+      { this->_M_mutate(0, this->size(), 0); }\n+\n+      /**\n+       *  Returns true if the %string is empty.  Equivalent to *this == \"\".\n+       */\n+      bool\n+      empty() const\n+      { return this->size() == 0; }\n+\n+      // Element access:\n+      /**\n+       *  @brief  Subscript access to the data contained in the %string.\n+       *  @param  pos  The index of the character to access.\n+       *  @return  Read-only (constant) reference to the character.\n+       *\n+       *  This operator allows for easy, array-style, data access.\n+       *  Note that data access with this operator is unchecked and\n+       *  out_of_range lookups are not defined. (For checked lookups\n+       *  see at().)\n+       */\n+      const_reference\n+      operator[] (size_type __pos) const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(__pos <= this->size());\n+\treturn this->_M_data()[__pos];\n+      }\n+\n+      /**\n+       *  @brief  Subscript access to the data contained in the %string.\n+       *  @param  pos  The index of the character to access.\n+       *  @return  Read/write reference to the character.\n+       *\n+       *  This operator allows for easy, array-style, data access.\n+       *  Note that data access with this operator is unchecked and\n+       *  out_of_range lookups are not defined. (For checked lookups\n+       *  see at().)  Unshares the string.\n+       */\n+      reference\n+      operator[](size_type __pos)\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(__pos < this->size());\n+\tthis->_M_leak();\n+\treturn this->_M_data()[__pos];\n+      }\n+\n+      /**\n+       *  @brief  Provides access to the data contained in the %string.\n+       *  @param n The index of the character to access.\n+       *  @return  Read-only (const) reference to the character.\n+       *  @throw  std::out_of_range  If @a n is an invalid index.\n+       *\n+       *  This function provides for safer data access.  The parameter is\n+       *  first checked that it is in the range of the string.  The function\n+       *  throws out_of_range if the check fails.\n+       */\n+      const_reference\n+      at(size_type __n) const\n+      {\n+\tif (__n >= this->size())\n+\t  std::__throw_out_of_range(__N(\"__versa_string::at\"));\n+\treturn this->_M_data()[__n];\n+      }\n+\n+      /**\n+       *  @brief  Provides access to the data contained in the %string.\n+       *  @param n The index of the character to access.\n+       *  @return  Read/write reference to the character.\n+       *  @throw  std::out_of_range  If @a n is an invalid index.\n+       *\n+       *  This function provides for safer data access.  The parameter is\n+       *  first checked that it is in the range of the string.  The function\n+       *  throws out_of_range if the check fails.  Success results in\n+       *  unsharing the string.\n+       */\n+      reference\n+      at(size_type __n)\n+      {\n+\tif (__n >= this->size())\n+\t  std::__throw_out_of_range(__N(\"__versa_string::at\"));\n+\tthis->_M_leak();\n+\treturn this->_M_data()[__n];\n+      }\n+\n+      // Modifiers:\n+      /**\n+       *  @brief  Append a string to this string.\n+       *  @param str  The string to append.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      operator+=(const __versa_string& __str)\n+      { return this->append(__str); }\n+\n+      /**\n+       *  @brief  Append a C string.\n+       *  @param s  The C string to append.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      operator+=(const _CharT* __s)\n+      { return this->append(__s); }\n+\n+      /**\n+       *  @brief  Append a character.\n+       *  @param c  The character to append.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      operator+=(_CharT __c)\n+      { \n+\tthis->push_back(__c);\n+\treturn *this;\n+      }\n+\n+      /**\n+       *  @brief  Append a string to this string.\n+       *  @param str  The string to append.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      append(const __versa_string& __str);\n+\n+      /**\n+       *  @brief  Append a substring.\n+       *  @param str  The string to append.\n+       *  @param pos  Index of the first character of str to append.\n+       *  @param n  The number of characters to append.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range if @a pos is not a valid index.\n+       *\n+       *  This function appends @a n characters from @a str starting at @a pos\n+       *  to this string.  If @a n is is larger than the number of available\n+       *  characters in @a str, the remainder of @a str is appended.\n+       */\n+      __versa_string&\n+      append(const __versa_string& __str, size_type __pos, size_type __n);\n+\n+      /**\n+       *  @brief  Append a C substring.\n+       *  @param s  The C string to append.\n+       *  @param n  The number of characters to append.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      append(const _CharT* __s, size_type __n);\n+\n+      /**\n+       *  @brief  Append a C string.\n+       *  @param s  The C string to append.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      append(const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->append(__s, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Append multiple characters.\n+       *  @param n  The number of characters to append.\n+       *  @param c  The character to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  Appends n copies of c to this string.\n+       */\n+      __versa_string&\n+      append(size_type __n, _CharT __c);\n+\n+      /**\n+       *  @brief  Append a range of characters.\n+       *  @param first  Iterator referencing the first character to append.\n+       *  @param last  Iterator marking the end of the range.\n+       *  @return  Reference to this string.\n+       *\n+       *  Appends characters in the range [first,last) to this string.\n+       */\n+      template<class _InputIterator>\n+        __versa_string&\n+        append(_InputIterator __first, _InputIterator __last)\n+        { return this->replace(_M_iend(), _M_iend(), __first, __last); }\n+\n+      /**\n+       *  @brief  Append a single character.\n+       *  @param c  Character to append.\n+       */\n+      void\n+      push_back(_CharT __c)\n+      { \n+\tconst size_type __len = 1 + this->size();\n+\tif (__len > this->capacity() || this->_M_is_shared())\n+\t  this->reserve(__len);\n+\ttraits_type::assign(this->_M_data()[this->size()], __c);\n+\tthis->_M_set_length(__len);\n+      }\n+\n+      /**\n+       *  @brief  Set value to contents of another string.\n+       *  @param  str  Source string to use.\n+       *  @return  Reference to this string.\n+       */\n+      __versa_string&\n+      assign(const __versa_string& __str)\n+      {\n+\tthis->_M_assign(__str);\n+\treturn *this;\n+      }\n+\n+      /**\n+       *  @brief  Set value to a substring of a string.\n+       *  @param str  The string to use.\n+       *  @param pos  Index of the first character of str.\n+       *  @param n  Number of characters to use.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range if @a pos is not a valid index.\n+       *\n+       *  This function sets this string to the substring of @a str consisting\n+       *  of @a n characters at @a pos.  If @a n is is larger than the number\n+       *  of available characters in @a str, the remainder of @a str is used.\n+       */\n+      __versa_string&\n+      assign(const __versa_string& __str, size_type __pos, size_type __n)\n+      { return this->assign(__str._M_data()\n+\t\t\t    + __str._M_check(__pos, \"__versa_string::assign\"),\n+\t\t\t    __str._M_limit(__pos, __n)); }\n+\n+      /**\n+       *  @brief  Set value to a C substring.\n+       *  @param s  The C string to use.\n+       *  @param n  Number of characters to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  This function sets the value of this string to the first @a n\n+       *  characters of @a s.  If @a n is is larger than the number of\n+       *  available characters in @a s, the remainder of @a s is used.\n+       */\n+      __versa_string&\n+      assign(const _CharT* __s, size_type __n);\n+\n+      /**\n+       *  @brief  Set value to contents of a C string.\n+       *  @param s  The C string to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  This function sets the value of this string to the value of @a s.\n+       *  The data is copied, so there is no dependence on @a s once the\n+       *  function returns.\n+       */\n+      __versa_string&\n+      assign(const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->assign(__s, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Set value to multiple characters.\n+       *  @param n  Length of the resulting string.\n+       *  @param c  The character to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  This function sets the value of this string to @a n copies of\n+       *  character @a c.\n+       */\n+      __versa_string&\n+      assign(size_type __n, _CharT __c)\n+      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }\n+\n+      /**\n+       *  @brief  Set value to a range of characters.\n+       *  @param first  Iterator referencing the first character to append.\n+       *  @param last  Iterator marking the end of the range.\n+       *  @return  Reference to this string.\n+       *\n+       *  Sets value of string to characters in the range [first,last).\n+      */\n+      template<class _InputIterator>\n+        __versa_string&\n+        assign(_InputIterator __first, _InputIterator __last)\n+        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }\n+\n+      /**\n+       *  @brief  Insert multiple characters.\n+       *  @param p  Iterator referencing location in string to insert at.\n+       *  @param n  Number of characters to insert\n+       *  @param c  The character to insert.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts @a n copies of character @a c starting at the position\n+       *  referenced by iterator @a p.  If adding characters causes the length\n+       *  to exceed max_size(), length_error is thrown.  The value of the\n+       *  string doesn't change if an error is thrown.\n+      */\n+      void\n+      insert(iterator __p, size_type __n, _CharT __c)\n+      {\tthis->replace(__p, __p, __n, __c);  }\n+\n+      /**\n+       *  @brief  Insert a range of characters.\n+       *  @param p  Iterator referencing location in string to insert at.\n+       *  @param beg  Start of range.\n+       *  @param end  End of range.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts characters in range [beg,end).  If adding characters causes\n+       *  the length to exceed max_size(), length_error is thrown.  The value\n+       *  of the string doesn't change if an error is thrown.\n+      */\n+      template<class _InputIterator>\n+        void\n+        insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n+        { this->replace(__p, __p, __beg, __end); }\n+\n+      /**\n+       *  @brief  Insert value of a string.\n+       *  @param pos1  Iterator referencing location in string to insert at.\n+       *  @param str  The string to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts value of @a str starting at @a pos1.  If adding characters\n+       *  causes the length to exceed max_size(), length_error is thrown.  The\n+       *  value of the string doesn't change if an error is thrown.\n+      */\n+      __versa_string&\n+      insert(size_type __pos1, const __versa_string& __str)\n+      { return this->insert(__pos1, __str, size_type(0), __str.size()); }\n+\n+      /**\n+       *  @brief  Insert a substring.\n+       *  @param pos1  Iterator referencing location in string to insert at.\n+       *  @param str  The string to insert.\n+       *  @param pos2  Start of characters in str to insert.\n+       *  @param n  Number of characters to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *  @throw  std::out_of_range  If @a pos1 > size() or\n+       *  @a pos2 > @a str.size().\n+       *\n+       *  Starting at @a pos1, insert @a n character of @a str beginning with\n+       *  @a pos2.  If adding characters causes the length to exceed\n+       *  max_size(), length_error is thrown.  If @a pos1 is beyond the end of\n+       *  this string or @a pos2 is beyond the end of @a str, out_of_range is\n+       *  thrown.  The value of the string doesn't change if an error is\n+       *  thrown.\n+      */\n+      __versa_string&\n+      insert(size_type __pos1, const __versa_string& __str,\n+\t     size_type __pos2, size_type __n)\n+      { return this->insert(__pos1, __str._M_data()\n+\t\t\t    + __str._M_check(__pos2, \"__versa_string::insert\"),\n+\t\t\t    __str._M_limit(__pos2, __n)); }\n+\n+      /**\n+       *  @brief  Insert a C substring.\n+       *  @param pos  Iterator referencing location in string to insert at.\n+       *  @param s  The C string to insert.\n+       *  @param n  The number of characters to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *  @throw  std::out_of_range  If @a pos is beyond the end of this\n+       *  string.\n+       *\n+       *  Inserts the first @a n characters of @a s starting at @a pos.  If\n+       *  adding characters causes the length to exceed max_size(),\n+       *  length_error is thrown.  If @a pos is beyond end(), out_of_range is\n+       *  thrown.  The value of the string doesn't change if an error is\n+       *  thrown.\n+      */\n+      __versa_string&\n+      insert(size_type __pos, const _CharT* __s, size_type __n);\n+\n+      /**\n+       *  @brief  Insert a C string.\n+       *  @param pos  Iterator referencing location in string to insert at.\n+       *  @param s  The C string to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *  @throw  std::out_of_range  If @a pos is beyond the end of this\n+       *  string.\n+       *\n+       *  Inserts the first @a n characters of @a s starting at @a pos.  If\n+       *  adding characters causes the length to exceed max_size(),\n+       *  length_error is thrown.  If @a pos is beyond end(), out_of_range is\n+       *  thrown.  The value of the string doesn't change if an error is\n+       *  thrown.\n+      */\n+      __versa_string&\n+      insert(size_type __pos, const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->insert(__pos, __s, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Insert multiple characters.\n+       *  @param pos  Index in string to insert at.\n+       *  @param n  Number of characters to insert\n+       *  @param c  The character to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *  @throw  std::out_of_range  If @a pos is beyond the end of this\n+       *  string.\n+       *\n+       *  Inserts @a n copies of character @a c starting at index @a pos.  If\n+       *  adding characters causes the length to exceed max_size(),\n+       *  length_error is thrown.  If @a pos > length(), out_of_range is\n+       *  thrown.  The value of the string doesn't change if an error is\n+       *  thrown.\n+      */\n+      __versa_string&\n+      insert(size_type __pos, size_type __n, _CharT __c)\n+      { return _M_replace_aux(_M_check(__pos, \"__versa_string::insert\"),\n+\t\t\t      size_type(0), __n, __c); }\n+\n+      /**\n+       *  @brief  Insert one character.\n+       *  @param p  Iterator referencing position in string to insert at.\n+       *  @param c  The character to insert.\n+       *  @return  Iterator referencing newly inserted char.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts character @a c at position referenced by @a p.  If adding\n+       *  character causes the length to exceed max_size(), length_error is\n+       *  thrown.  If @a p is beyond end of string, out_of_range is thrown.\n+       *  The value of the string doesn't change if an error is thrown.\n+      */\n+      iterator\n+      insert(iterator __p, _CharT __c)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());\n+\tconst size_type __pos = __p - _M_ibegin();\n+\t_M_replace_aux(__pos, size_type(0), size_type(1), __c);\n+\tthis->_M_set_leaked();\n+\treturn _M_ibegin() + __pos;\n+      }\n+\n+      /**\n+       *  @brief  Remove characters.\n+       *  @param pos  Index of first character to remove (default 0).\n+       *  @param n  Number of characters to remove (default remainder).\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos is beyond the end of this\n+       *  string.\n+       *\n+       *  Removes @a n characters from this string starting at @a pos.  The\n+       *  length of the string is reduced by @a n.  If there are < @a n\n+       *  characters to remove, the remainder of the string is truncated.  If\n+       *  @a p is beyond end of string, out_of_range is thrown.  The value of\n+       *  the string doesn't change if an error is thrown.\n+      */\n+      __versa_string&\n+      erase(size_type __pos = 0, size_type __n = npos)\n+      { \n+\tthis->_M_mutate(_M_check(__pos, \"__versa_string::erase\"),\n+\t\t\t_M_limit(__pos, __n), size_type(0));\n+\treturn *this;\n+      }\n+\n+      /**\n+       *  @brief  Remove one character.\n+       *  @param position  Iterator referencing the character to remove.\n+       *  @return  iterator referencing same location after removal.\n+       *\n+       *  Removes the character at @a position from this string. The value\n+       *  of the string doesn't change if an error is thrown.\n+      */\n+      iterator\n+      erase(iterator __position)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()\n+\t\t\t\t && __position < _M_iend());\n+\tconst size_type __pos = __position - _M_ibegin();\n+\tthis->_M_mutate(__pos, size_type(1), size_type(0));\n+\tthis->_M_set_leaked();\n+\treturn _M_ibegin() + __pos;\n+      }\n+\n+      /**\n+       *  @brief  Remove a range of characters.\n+       *  @param first  Iterator referencing the first character to remove.\n+       *  @param last  Iterator referencing the end of the range.\n+       *  @return  Iterator referencing location of first after removal.\n+       *\n+       *  Removes the characters in the range [first,last) from this string.\n+       *  The value of the string doesn't change if an error is thrown.\n+      */\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__first >= _M_ibegin() && __first <= __last\n+\t\t\t\t && __last <= _M_iend());\n+        const size_type __pos = __first - _M_ibegin();\n+\tthis->_M_mutate(__pos, __last - __first, size_type(0));\n+\tthis->_M_set_leaked();\n+\treturn _M_ibegin() + __pos;\n+      }\n+\n+      /**\n+       *  @brief  Replace characters with value from another string.\n+       *  @param pos  Index of first character to replace.\n+       *  @param n  Number of characters to be replaced.\n+       *  @param str  String to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos is beyond the end of this\n+       *  string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [pos,pos+n) from this string.\n+       *  In place, the value of @a str is inserted.  If @a pos is beyond end\n+       *  of string, out_of_range is thrown.  If the length of the result\n+       *  exceeds max_size(), length_error is thrown.  The value of the string\n+       *  doesn't change if an error is thrown.\n+      */\n+      __versa_string&\n+      replace(size_type __pos, size_type __n, const __versa_string& __str)\n+      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }\n+\n+      /**\n+       *  @brief  Replace characters with value from another string.\n+       *  @param pos1  Index of first character to replace.\n+       *  @param n1  Number of characters to be replaced.\n+       *  @param str  String to insert.\n+       *  @param pos2  Index of first character of str to use.\n+       *  @param n2  Number of characters from str to use.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos1 > size() or @a pos2 >\n+       *  str.size().\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [pos1,pos1 + n) from this\n+       *  string.  In place, the value of @a str is inserted.  If @a pos is\n+       *  beyond end of string, out_of_range is thrown.  If the length of the\n+       *  result exceeds max_size(), length_error is thrown.  The value of the\n+       *  string doesn't change if an error is thrown.\n+      */\n+      __versa_string&\n+      replace(size_type __pos1, size_type __n1, const __versa_string& __str,\n+\t      size_type __pos2, size_type __n2)\n+      {\n+\treturn this->replace(__pos1, __n1, __str._M_data()\n+\t\t\t     + __str._M_check(__pos2,\n+\t\t\t\t\t      \"__versa_string::replace\"),\n+\t\t\t     __str._M_limit(__pos2, __n2));\n+      }\n+\n+      /**\n+       *  @brief  Replace characters with value of a C substring.\n+       *  @param pos  Index of first character to replace.\n+       *  @param n1  Number of characters to be replaced.\n+       *  @param s  C string to insert.\n+       *  @param n2  Number of characters from @a s to use.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos1 > size().\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [pos,pos + n1) from this string.\n+       *  In place, the first @a n2 characters of @a s are inserted, or all\n+       *  of @a s if @a n2 is too large.  If @a pos is beyond end of string,\n+       *  out_of_range is thrown.  If the length of result exceeds max_size(),\n+       *  length_error is thrown.  The value of the string doesn't change if\n+       *  an error is thrown.\n+      */\n+      __versa_string&\n+      replace(size_type __pos, size_type __n1, const _CharT* __s,\n+\t      size_type __n2);\n+\n+      /**\n+       *  @brief  Replace characters with value of a C string.\n+       *  @param pos  Index of first character to replace.\n+       *  @param n1  Number of characters to be replaced.\n+       *  @param s  C string to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos > size().\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [pos,pos + n1) from this string.\n+       *  In place, the first @a n characters of @a s are inserted.  If @a\n+       *  pos is beyond end of string, out_of_range is thrown.  If the length\n+       *  of result exceeds max_size(), length_error is thrown.  The value of\n+       *  the string doesn't change if an error is thrown.\n+      */\n+      __versa_string&\n+      replace(size_type __pos, size_type __n1, const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->replace(__pos, __n1, __s, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Replace characters with multiple characters.\n+       *  @param pos  Index of first character to replace.\n+       *  @param n1  Number of characters to be replaced.\n+       *  @param n2  Number of characters to insert.\n+       *  @param c  Character to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos > size().\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [pos,pos + n1) from this string.\n+       *  In place, @a n2 copies of @a c are inserted.  If @a pos is beyond\n+       *  end of string, out_of_range is thrown.  If the length of result\n+       *  exceeds max_size(), length_error is thrown.  The value of the string\n+       *  doesn't change if an error is thrown.\n+      */\n+      __versa_string&\n+      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\n+      { return _M_replace_aux(_M_check(__pos, \"__versa_string::replace\"),\n+\t\t\t      _M_limit(__pos, __n1), __n2, __c); }\n+\n+      /**\n+       *  @brief  Replace range of characters with string.\n+       *  @param i1  Iterator referencing start of range to replace.\n+       *  @param i2  Iterator referencing end of range to replace.\n+       *  @param str  String value to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [i1,i2).  In place, the value of\n+       *  @a str is inserted.  If the length of result exceeds max_size(),\n+       *  length_error is thrown.  The value of the string doesn't change if\n+       *  an error is thrown.\n+      */\n+      __versa_string&\n+      replace(iterator __i1, iterator __i2, const __versa_string& __str)\n+      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }\n+\n+      /**\n+       *  @brief  Replace range of characters with C substring.\n+       *  @param i1  Iterator referencing start of range to replace.\n+       *  @param i2  Iterator referencing end of range to replace.\n+       *  @param s  C string value to insert.\n+       *  @param n  Number of characters from s to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [i1,i2).  In place, the first @a\n+       *  n characters of @a s are inserted.  If the length of result exceeds\n+       *  max_size(), length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      __versa_string&\n+      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);\n+      }\n+\n+      /**\n+       *  @brief  Replace range of characters with C string.\n+       *  @param i1  Iterator referencing start of range to replace.\n+       *  @param i2  Iterator referencing end of range to replace.\n+       *  @param s  C string value to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [i1,i2).  In place, the\n+       *  characters of @a s are inserted.  If the length of result exceeds\n+       *  max_size(), length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      __versa_string&\n+      replace(iterator __i1, iterator __i2, const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->replace(__i1, __i2, __s, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Replace range of characters with multiple characters\n+       *  @param i1  Iterator referencing start of range to replace.\n+       *  @param i2  Iterator referencing end of range to replace.\n+       *  @param n  Number of characters to insert.\n+       *  @param c  Character to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [i1,i2).  In place, @a n copies\n+       *  of @a c are inserted.  If the length of result exceeds max_size(),\n+       *  length_error is thrown.  The value of the string doesn't change if\n+       *  an error is thrown.\n+      */\n+      __versa_string&\n+      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\treturn _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);\n+      }\n+\n+      /**\n+       *  @brief  Replace range of characters with range.\n+       *  @param i1  Iterator referencing start of range to replace.\n+       *  @param i2  Iterator referencing end of range to replace.\n+       *  @param k1  Iterator referencing start of range to insert.\n+       *  @param k2  Iterator referencing end of range to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [i1,i2).  In place, characters\n+       *  in the range [k1,k2) are inserted.  If the length of result exceeds\n+       *  max_size(), length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      template<class _InputIterator>\n+        __versa_string&\n+        replace(iterator __i1, iterator __i2,\n+\t\t_InputIterator __k1, _InputIterator __k2)\n+        {\n+\t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t   && __i2 <= _M_iend());\n+\t  __glibcxx_requires_valid_range(__k1, __k2);\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n+\t  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());\n+\t}\n+\n+      // Specializations for the common case of pointer and iterator:\n+      // useful to avoid the overhead of temporary buffering in _M_replace.\n+      __versa_string&\n+      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t     __k1, __k2 - __k1);\n+      }\n+\n+      __versa_string&\n+      replace(iterator __i1, iterator __i2,\n+\t      const _CharT* __k1, const _CharT* __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t     __k1, __k2 - __k1);\n+      }\n+\n+      __versa_string&\n+      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t     __k1.base(), __k2 - __k1);\n+      }\n+\n+      __versa_string&\n+      replace(iterator __i1, iterator __i2,\n+\t      const_iterator __k1, const_iterator __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t     __k1.base(), __k2 - __k1);\n+      }\n+      \n+    private:\n+      template<class _Integer>\n+\t__versa_string&\n+\t_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,\n+\t\t\t    _Integer __val, __true_type)\n+        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }\n+\n+      template<class _InputIterator>\n+\t__versa_string&\n+\t_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,\n+\t\t\t    _InputIterator __k2, __false_type);\n+\n+      __versa_string&\n+      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n+\t\t     _CharT __c);\n+\n+      __versa_string&\n+      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n+\t\t      size_type __n2);\n+\n+    public:\n+\n+      /**\n+       *  @brief  Copy substring into C string.\n+       *  @param s  C string to copy value into.\n+       *  @param n  Number of characters to copy.\n+       *  @param pos  Index of first character to copy.\n+       *  @return  Number of characters actually copied\n+       *  @throw  std::out_of_range  If pos > size().\n+       *\n+       *  Copies up to @a n characters starting at @a pos into the C string @a\n+       *  s.  If @a pos is greater than size(), out_of_range is thrown.\n+      */\n+      size_type\n+      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;\n+\n+      /**\n+       *  @brief  Swap contents with another string.\n+       *  @param s  String to swap with.\n+       *\n+       *  Exchanges the contents of this string with that of @a s in constant\n+       *  time.\n+      */\n+      void\n+      swap(__versa_string& __s);\n+\n+      // String operations:\n+      /**\n+       *  @brief  Return const pointer to null-terminated contents.\n+       *\n+       *  This is a handle to internal data.  Do not modify or dire things may\n+       *  happen.\n+      */\n+      const _CharT*\n+      c_str() const\n+      { return this->_M_data(); }\n+\n+      /**\n+       *  @brief  Return const pointer to contents.\n+       *\n+       *  This is a handle to internal data.  Do not modify or dire things may\n+       *  happen.\n+      */\n+      const _CharT*\n+      data() const\n+      { return this->_M_data(); }\n+\n+      /**\n+       *  @brief  Return copy of allocator used to construct this string.\n+      */\n+      allocator_type\n+      get_allocator() const\n+      { return this->_M_get_allocator(); }\n+\n+      /**\n+       *  @brief  Find position of a C substring.\n+       *  @param s  C string to locate.\n+       *  @param pos  Index of character to search from.\n+       *  @param n  Number of characters from @a s to search for.\n+       *  @return  Index of start of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for the first @a n characters\n+       *  in @a s within this string.  If found, returns the index where it\n+       *  begins.  If not found, returns npos.\n+      */\n+      size_type\n+      find(const _CharT* __s, size_type __pos, size_type __n) const;\n+\n+      /**\n+       *  @brief  Find position of a string.\n+       *  @param str  String to locate.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of start of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for value of @a str within\n+       *  this string.  If found, returns the index where it begins.  If not\n+       *  found, returns npos.\n+      */\n+      size_type\n+      find(const __versa_string& __str, size_type __pos = 0) const\n+      { return this->find(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find position of a C string.\n+       *  @param s  C string to locate.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of start of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for the value of @a s within\n+       *  this string.  If found, returns the index where it begins.  If not\n+       *  found, returns npos.\n+      */\n+      size_type\n+      find(const _CharT* __s, size_type __pos = 0) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find position of a character.\n+       *  @param c  Character to locate.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for @a c within this string.\n+       *  If found, returns the index where it was found.  If not found,\n+       *  returns npos.\n+      */\n+      size_type\n+      find(_CharT __c, size_type __pos = 0) const;\n+\n+      /**\n+       *  @brief  Find last position of a string.\n+       *  @param str  String to locate.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @return  Index of start of last occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for value of @a str within\n+       *  this string.  If found, returns the index where it begins.  If not\n+       *  found, returns npos.\n+      */\n+      size_type\n+      rfind(const __versa_string& __str, size_type __pos = npos) const\n+      { return this->rfind(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find last position of a C substring.\n+       *  @param s  C string to locate.\n+       *  @param pos  Index of character to search back from.\n+       *  @param n  Number of characters from s to search for.\n+       *  @return  Index of start of last occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for the first @a n\n+       *  characters in @a s within this string.  If found, returns the index\n+       *  where it begins.  If not found, returns npos.\n+      */\n+      size_type\n+      rfind(const _CharT* __s, size_type __pos, size_type __n) const;\n+\n+      /**\n+       *  @brief  Find last position of a C string.\n+       *  @param s  C string to locate.\n+       *  @param pos  Index of character to start search at (default 0).\n+       *  @return  Index of start of  last occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for the value of @a s within\n+       *  this string.  If found, returns the index where it begins.  If not\n+       *  found, returns npos.\n+      */\n+      size_type\n+      rfind(const _CharT* __s, size_type __pos = npos) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->rfind(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find last position of a character.\n+       *  @param c  Character to locate.\n+       *  @param pos  Index of character to search back from (default 0).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for @a c within this string.\n+       *  If found, returns the index where it was found.  If not found,\n+       *  returns npos.\n+      */\n+      size_type\n+      rfind(_CharT __c, size_type __pos = npos) const;\n+\n+      /**\n+       *  @brief  Find position of a character of string.\n+       *  @param str  String containing characters to locate.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for one of the characters of\n+       *  @a str within this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_of(const __versa_string& __str, size_type __pos = 0) const\n+      { return this->find_first_of(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find position of a character of C substring.\n+       *  @param s  String containing characters to locate.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @param n  Number of characters from s to search for.\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for one of the first @a n\n+       *  characters of @a s within this string.  If found, returns the index\n+       *  where it was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;\n+\n+      /**\n+       *  @brief  Find position of a character of C string.\n+       *  @param s  String containing characters to locate.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for one of the characters of\n+       *  @a s within this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_of(const _CharT* __s, size_type __pos = 0) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find_first_of(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find position of a character.\n+       *  @param c  Character to locate.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for the character @a c within\n+       *  this string.  If found, returns the index where it was found.  If\n+       *  not found, returns npos.\n+       *\n+       *  Note: equivalent to find(c, pos).\n+      */\n+      size_type\n+      find_first_of(_CharT __c, size_type __pos = 0) const\n+      { return this->find(__c, __pos); }\n+\n+      /**\n+       *  @brief  Find last position of a character of string.\n+       *  @param str  String containing characters to locate.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for one of the characters of\n+       *  @a str within this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_last_of(const __versa_string& __str, size_type __pos = npos) const\n+      { return this->find_last_of(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find last position of a character of C substring.\n+       *  @param s  C string containing characters to locate.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @param n  Number of characters from s to search for.\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for one of the first @a n\n+       *  characters of @a s within this string.  If found, returns the index\n+       *  where it was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;\n+\n+      /**\n+       *  @brief  Find last position of a character of C string.\n+       *  @param s  C string containing characters to locate.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for one of the characters of\n+       *  @a s within this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_last_of(const _CharT* __s, size_type __pos = npos) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find_last_of(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find last position of a character.\n+       *  @param c  Character to locate.\n+       *  @param pos  Index of character to search back from (default 0).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for @a c within this string.\n+       *  If found, returns the index where it was found.  If not found,\n+       *  returns npos.\n+       *\n+       *  Note: equivalent to rfind(c, pos).\n+      */\n+      size_type\n+      find_last_of(_CharT __c, size_type __pos = npos) const\n+      { return this->rfind(__c, __pos); }\n+\n+      /**\n+       *  @brief  Find position of a character not in string.\n+       *  @param str  String containing characters to avoid.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for a character not contained\n+       *  in @a str within this string.  If found, returns the index where it\n+       *  was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_not_of(const __versa_string& __str, size_type __pos = 0) const\n+      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find position of a character not in C substring.\n+       *  @param s  C string containing characters to avoid.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @param n  Number of characters from s to consider.\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for a character not contained\n+       *  in the first @a n characters of @a s within this string.  If found,\n+       *  returns the index where it was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_not_of(const _CharT* __s, size_type __pos,\n+\t\t\tsize_type __n) const;\n+\n+      /**\n+       *  @brief  Find position of a character not in C string.\n+       *  @param s  C string containing characters to avoid.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for a character not contained\n+       *  in @a s within this string.  If found, returns the index where it\n+       *  was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find_first_not_of(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find position of a different character.\n+       *  @param c  Character to avoid.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches forward for a character other than @a c\n+       *  within this string.  If found, returns the index where it was found.\n+       *  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_not_of(_CharT __c, size_type __pos = 0) const;\n+\n+      /**\n+       *  @brief  Find last position of a character not in string.\n+       *  @param str  String containing characters to avoid.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for a character not\n+       *  contained in @a str within this string.  If found, returns the index\n+       *  where it was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_last_not_of(const __versa_string& __str,\n+\t\t       size_type __pos = npos) const\n+      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find last position of a character not in C substring.\n+       *  @param s  C string containing characters to avoid.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @param n  Number of characters from s to consider.\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for a character not\n+       *  contained in the first @a n characters of @a s within this string.\n+       *  If found, returns the index where it was found.  If not found,\n+       *  returns npos.\n+      */\n+      size_type\n+      find_last_not_of(const _CharT* __s, size_type __pos,\n+\t\t       size_type __n) const;\n+      /**\n+       *  @brief  Find position of a character not in C string.\n+       *  @param s  C string containing characters to avoid.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for a character not\n+       *  contained in @a s within this string.  If found, returns the index\n+       *  where it was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_last_not_of(const _CharT* __s, size_type __pos = npos) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find_last_not_of(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find last position of a different character.\n+       *  @param c  Character to avoid.\n+       *  @param pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a pos, searches backward for a character other than\n+       *  @a c within this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_last_not_of(_CharT __c, size_type __pos = npos) const;\n+\n+      /**\n+       *  @brief  Get a substring.\n+       *  @param pos  Index of first character (default 0).\n+       *  @param n  Number of characters in substring (default remainder).\n+       *  @return  The new string.\n+       *  @throw  std::out_of_range  If pos > size().\n+       *\n+       *  Construct and return a new string using the @a n characters starting\n+       *  at @a pos.  If the string is too short, use the remainder of the\n+       *  characters.  If @a pos is beyond the end of the string, out_of_range\n+       *  is thrown.\n+      */\n+      __versa_string\n+      substr(size_type __pos = 0, size_type __n = npos) const\n+      {\n+\treturn __versa_string(*this, _M_check(__pos, \"__versa_string::substr\"),\n+\t\t\t      __n);\n+      }\n+\n+      /**\n+       *  @brief  Compare to a string.\n+       *  @param str  String to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Returns an integer < 0 if this string is ordered before @a str, 0 if\n+       *  their values are equivalent, or > 0 if this string is ordered after\n+       *  @a str.  Determines the effective length rlen of the strings to\n+       *  compare as the smallest of size() and str.size().  The function\n+       *  then compares the two strings by calling traits::compare(data(),\n+       *  str.data(),rlen).  If the result of the comparison is nonzero returns\n+       *  it, otherwise the shorter one is ordered first.\n+      */\n+      int\n+      compare(const __versa_string& __str) const\n+      {\n+\tconst size_type __size = this->size();\n+\tconst size_type __osize = __str.size();\n+\tconst size_type __len = std::min(__size, __osize);\n+\n+\tint __r = traits_type::compare(this->_M_data(), __str.data(), __len);\n+\tif (!__r)\n+\t  __r =  __size - __osize;\n+\treturn __r;\n+      }\n+\n+      /**\n+       *  @brief  Compare substring to a string.\n+       *  @param pos  Index of first character of substring.\n+       *  @param n  Number of characters in substring.\n+       *  @param str  String to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Form the substring of this string from the @a n characters starting\n+       *  at @a pos.  Returns an integer < 0 if the substring is ordered\n+       *  before @a str, 0 if their values are equivalent, or > 0 if the\n+       *  substring is ordered after @a str.  Determines the effective length\n+       *  rlen of the strings to compare as the smallest of the length of the\n+       *  substring and @a str.size().  The function then compares the two\n+       *  strings by calling traits::compare(substring.data(),str.data(),rlen).\n+       *  If the result of the comparison is nonzero returns it, otherwise the\n+       *  shorter one is ordered first.\n+      */\n+      int\n+      compare(size_type __pos, size_type __n,\n+\t      const __versa_string& __str) const;\n+\n+      /**\n+       *  @brief  Compare substring to a substring.\n+       *  @param pos1  Index of first character of substring.\n+       *  @param n1  Number of characters in substring.\n+       *  @param str  String to compare against.\n+       *  @param pos2  Index of first character of substring of str.\n+       *  @param n2  Number of characters in substring of str.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Form the substring of this string from the @a n1 characters starting\n+       *  at @a pos1.  Form the substring of @a str from the @a n2 characters\n+       *  starting at @a pos2.  Returns an integer < 0 if this substring is\n+       *  ordered before the substring of @a str, 0 if their values are\n+       *  equivalent, or > 0 if this substring is ordered after the substring\n+       *  of @a str.  Determines the effective length rlen of the strings\n+       *  to compare as the smallest of the lengths of the substrings.  The\n+       *  function then compares the two strings by calling\n+       *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).\n+       *  If the result of the comparison is nonzero returns it, otherwise the\n+       *  shorter one is ordered first.\n+      */\n+      int\n+      compare(size_type __pos1, size_type __n1, const __versa_string& __str,\n+\t      size_type __pos2, size_type __n2) const;\n+\n+      /**\n+       *  @brief  Compare to a C string.\n+       *  @param s  C string to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Returns an integer < 0 if this string is ordered before @a s, 0 if\n+       *  their values are equivalent, or > 0 if this string is ordered after\n+       *  @a s.  Determines the effective length rlen of the strings to\n+       *  compare as the smallest of size() and the length of a string\n+       *  constructed from @a s.  The function then compares the two strings\n+       *  by calling traits::compare(data(),s,rlen).  If the result of the\n+       *  comparison is nonzero returns it, otherwise the shorter one is\n+       *  ordered first.\n+      */\n+      int\n+      compare(const _CharT* __s) const;\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 5 String::compare specification questionable\n+      /**\n+       *  @brief  Compare substring to a C string.\n+       *  @param pos  Index of first character of substring.\n+       *  @param n1  Number of characters in substring.\n+       *  @param s  C string to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Form the substring of this string from the @a n1 characters starting\n+       *  at @a pos.  Returns an integer < 0 if the substring is ordered\n+       *  before @a s, 0 if their values are equivalent, or > 0 if the\n+       *  substring is ordered after @a s.  Determines the effective length\n+       *  rlen of the strings to compare as the smallest of the length of the \n+       *  substring and the length of a string constructed from @a s.  The\n+       *  function then compares the two string by calling\n+       *  traits::compare(substring.data(),s,rlen).  If the result of the\n+       *  comparison is nonzero returns it, otherwise the shorter one is\n+       *  ordered first.\n+      */\n+      int\n+      compare(size_type __pos, size_type __n1, const _CharT* __s) const;\n+\n+      /**\n+       *  @brief  Compare substring against a character array.\n+       *  @param pos1  Index of first character of substring.\n+       *  @param n1  Number of characters in substring.\n+       *  @param s  character array to compare against.\n+       *  @param n2  Number of characters of s.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Form the substring of this string from the @a n1 characters starting\n+       *  at @a pos1.  Form a string from the first @a n2 characters of @a s.\n+       *  Returns an integer < 0 if this substring is ordered before the string\n+       *  from @a s, 0 if their values are equivalent, or > 0 if this substring\n+       *  is ordered after the string from @a s.   Determines the effective\n+       *  length rlen of the strings to compare as the smallest of the length\n+       *  of the substring and @a n2.  The function then compares the two\n+       *  strings by calling traits::compare(substring.data(),s,rlen).  If the\n+       *  result of the comparison is nonzero returns it, otherwise the shorter\n+       *  one is ordered first.\n+       *\n+       *  NB: s must have at least n2 characters, '\\0' has no special\n+       *  meaning.\n+      */\n+      int\n+      compare(size_type __pos, size_type __n1, const _CharT* __s,\n+\t      size_type __n2) const;\n+    };\n+\n+  // operator+\n+  /**\n+   *  @brief  Concatenate two strings.\n+   *  @param lhs  First string.\n+   *  @param rhs  Last string.\n+   *  @return  New string with value of @a lhs followed by @a rhs.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    {\n+      __versa_string<_CharT, _Traits, _Alloc, _Base> __str(__lhs);\n+      __str.append(__rhs);\n+      return __str;\n+    }\n+\n+  /**\n+   *  @brief  Concatenate C string and string.\n+   *  @param lhs  First string.\n+   *  @param rhs  Last string.\n+   *  @return  New string with value of @a lhs followed by @a rhs.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const _CharT* __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs);\n+\n+  /**\n+   *  @brief  Concatenate character and string.\n+   *  @param lhs  First string.\n+   *  @param rhs  Last string.\n+   *  @return  New string with @a lhs followed by @a rhs.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(_CharT __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs);\n+\n+  /**\n+   *  @brief  Concatenate string and C string.\n+   *  @param lhs  First string.\n+   *  @param rhs  Last string.\n+   *  @return  New string with @a lhs followed by @a rhs.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      const _CharT* __rhs)\n+    {\n+      __versa_string<_CharT, _Traits, _Alloc, _Base> __str(__lhs);\n+      __str.append(__rhs);\n+      return __str;\n+    }\n+\n+  /**\n+   *  @brief  Concatenate string and character.\n+   *  @param lhs  First string.\n+   *  @param rhs  Last string.\n+   *  @return  New string with @a lhs followed by @a rhs.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      _CharT __rhs)\n+    {\n+      typedef __versa_string<_CharT, _Traits, _Alloc, _Base>\n+\t                                                __string_type;\n+      typedef typename __string_type::size_type\t\t__size_type;\n+      __string_type __str(__lhs);\n+      __str.append(__size_type(1), __rhs);\n+      return __str;\n+    }\n+\n+  // operator ==\n+  /**\n+   *  @brief  Test equivalence of two strings.\n+   *  @param lhs  First string.\n+   *  @param rhs  Second string.\n+   *  @return  True if @a lhs.compare(@a rhs) == 0.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator==(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __lhs.compare(__rhs) == 0; }\n+\n+  /**\n+   *  @brief  Test equivalence of C string and string.\n+   *  @param lhs  C string.\n+   *  @param rhs  String.\n+   *  @return  True if @a rhs.compare(@a lhs) == 0.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator==(const _CharT* __lhs,\n+\t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __rhs.compare(__lhs) == 0; }\n+\n+  /**\n+   *  @brief  Test equivalence of string and C string.\n+   *  @param lhs  String.\n+   *  @param rhs  C string.\n+   *  @return  True if @a lhs.compare(@a rhs) == 0.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator==(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t       const _CharT* __rhs)\n+    { return __lhs.compare(__rhs) == 0; }\n+\n+  // operator !=\n+  /**\n+   *  @brief  Test difference of two strings.\n+   *  @param lhs  First string.\n+   *  @param rhs  Second string.\n+   *  @return  True if @a lhs.compare(@a rhs) != 0.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator!=(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __rhs.compare(__lhs) != 0; }\n+\n+  /**\n+   *  @brief  Test difference of C string and string.\n+   *  @param lhs  C string.\n+   *  @param rhs  String.\n+   *  @return  True if @a rhs.compare(@a lhs) != 0.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator!=(const _CharT* __lhs,\n+\t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __rhs.compare(__lhs) != 0; }\n+\n+  /**\n+   *  @brief  Test difference of string and C string.\n+   *  @param lhs  String.\n+   *  @param rhs  C string.\n+   *  @return  True if @a lhs.compare(@a rhs) != 0.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator!=(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t       const _CharT* __rhs)\n+    { return __lhs.compare(__rhs) != 0; }\n+\n+  // operator <\n+  /**\n+   *  @brief  Test if string precedes string.\n+   *  @param lhs  First string.\n+   *  @param rhs  Second string.\n+   *  @return  True if @a lhs precedes @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator<(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __lhs.compare(__rhs) < 0; }\n+\n+  /**\n+   *  @brief  Test if string precedes C string.\n+   *  @param lhs  String.\n+   *  @param rhs  C string.\n+   *  @return  True if @a lhs precedes @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator<(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      const _CharT* __rhs)\n+    { return __lhs.compare(__rhs) < 0; }\n+\n+  /**\n+   *  @brief  Test if C string precedes string.\n+   *  @param lhs  C string.\n+   *  @param rhs  String.\n+   *  @return  True if @a lhs precedes @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator<(const _CharT* __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __rhs.compare(__lhs) > 0; }\n+\n+  // operator >\n+  /**\n+   *  @brief  Test if string follows string.\n+   *  @param lhs  First string.\n+   *  @param rhs  Second string.\n+   *  @return  True if @a lhs follows @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator>(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __lhs.compare(__rhs) > 0; }\n+\n+  /**\n+   *  @brief  Test if string follows C string.\n+   *  @param lhs  String.\n+   *  @param rhs  C string.\n+   *  @return  True if @a lhs follows @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator>(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      const _CharT* __rhs)\n+    { return __lhs.compare(__rhs) > 0; }\n+\n+  /**\n+   *  @brief  Test if C string follows string.\n+   *  @param lhs  C string.\n+   *  @param rhs  String.\n+   *  @return  True if @a lhs follows @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator>(const _CharT* __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __rhs.compare(__lhs) < 0; }\n+\n+  // operator <=\n+  /**\n+   *  @brief  Test if string doesn't follow string.\n+   *  @param lhs  First string.\n+   *  @param rhs  Second string.\n+   *  @return  True if @a lhs doesn't follow @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator<=(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __lhs.compare(__rhs) <= 0; }\n+\n+  /**\n+   *  @brief  Test if string doesn't follow C string.\n+   *  @param lhs  String.\n+   *  @param rhs  C string.\n+   *  @return  True if @a lhs doesn't follow @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator<=(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t       const _CharT* __rhs)\n+    { return __lhs.compare(__rhs) <= 0; }\n+\n+  /**\n+   *  @brief  Test if C string doesn't follow string.\n+   *  @param lhs  C string.\n+   *  @param rhs  String.\n+   *  @return  True if @a lhs doesn't follow @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator<=(const _CharT* __lhs,\n+\t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __rhs.compare(__lhs) >= 0; }\n+\n+  // operator >=\n+  /**\n+   *  @brief  Test if string doesn't precede string.\n+   *  @param lhs  First string.\n+   *  @param rhs  Second string.\n+   *  @return  True if @a lhs doesn't precede @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator>=(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __lhs.compare(__rhs) >= 0; }\n+\n+  /**\n+   *  @brief  Test if string doesn't precede C string.\n+   *  @param lhs  String.\n+   *  @param rhs  C string.\n+   *  @return  True if @a lhs doesn't precede @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator>=(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t       const _CharT* __rhs)\n+    { return __lhs.compare(__rhs) >= 0; }\n+\n+  /**\n+   *  @brief  Test if C string doesn't precede string.\n+   *  @param lhs  C string.\n+   *  @param rhs  String.\n+   *  @return  True if @a lhs doesn't precede @a rhs.  False otherwise.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline bool\n+    operator>=(const _CharT* __lhs,\n+\t       const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return __rhs.compare(__lhs) <= 0; }\n+\n+  /**\n+   *  @brief  Swap contents of two strings.\n+   *  @param lhs  First string.\n+   *  @param rhs  Second string.\n+   *\n+   *  Exchanges the contents of @a lhs and @a rhs in constant time.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline void\n+    swap(__versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { __lhs.swap(__rhs); }\n+\n+} // namespace __gnu_cxx\n+\n+namespace std\n+{\n+  /**\n+   *  @brief  Read stream into a string.\n+   *  @param is  Input stream.\n+   *  @param str  Buffer to store into.\n+   *  @return  Reference to the input stream.\n+   *\n+   *  Stores characters from @a is into @a str until whitespace is found, the\n+   *  end of the stream is encountered, or str.max_size() is reached.  If\n+   *  is.width() is non-zero, that is the limit on the number of characters\n+   *  stored into @a str.  Any previous contents of @a str are erased.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+           template <typename, typename, typename> class _Base>\n+    basic_istream<_CharT, _Traits>&\n+    operator>>(basic_istream<_CharT, _Traits>& __is,\n+\t       __gnu_cxx::__versa_string<_CharT, _Traits,\n+\t                                 _Alloc, _Base>& __str);\n+\n+  /**\n+   *  @brief  Write string to a stream.\n+   *  @param os  Output stream.\n+   *  @param str  String to write out.\n+   *  @return  Reference to the output stream.\n+   *\n+   *  Output characters of @a str into os following the same rules as for\n+   *  writing a C string.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+           template <typename, typename, typename> class _Base>\n+    basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t       const __gnu_cxx::__versa_string<_CharT, _Traits,\n+\t                                       _Alloc, _Base>& __str);\n+\n+  /**\n+   *  @brief  Read a line from stream into a string.\n+   *  @param is  Input stream.\n+   *  @param str  Buffer to store into.\n+   *  @param delim  Character marking end of line.\n+   *  @return  Reference to the input stream.\n+   *\n+   *  Stores characters from @a is into @a str until @a delim is found, the\n+   *  end of the stream is encountered, or str.max_size() is reached.  If\n+   *  is.width() is non-zero, that is the limit on the number of characters\n+   *  stored into @a str.  Any previous contents of @a str are erased.  If @a\n+   *  delim was encountered, it is extracted but not stored into @a str.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+           template <typename, typename, typename> class _Base>\n+    basic_istream<_CharT, _Traits>&\n+    getline(basic_istream<_CharT, _Traits>& __is,\n+\t    __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>& __str,\n+\t    _CharT __delim);\n+\n+  /**\n+   *  @brief  Read a line from stream into a string.\n+   *  @param is  Input stream.\n+   *  @param str  Buffer to store into.\n+   *  @return  Reference to the input stream.\n+   *\n+   *  Stores characters from is into @a str until '\\n' is found, the end of\n+   *  the stream is encountered, or str.max_size() is reached.  If is.width()\n+   *  is non-zero, that is the limit on the number of characters stored into\n+   *  @a str.  Any previous contents of @a str are erased.  If end of line was\n+   *  encountered, it is extracted but not stored into @a str.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+           template <typename, typename, typename> class _Base>\n+    inline basic_istream<_CharT, _Traits>&\n+    getline(basic_istream<_CharT, _Traits>& __is,\n+\t    __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>& __str)\n+    { return getline(__is, __str, __is.widen('\\n')); }      \n+\n+} // namespace std\n+\n+#ifndef _GLIBCXX_EXPORT_TEMPLATE\n+# include \"vstring.tcc\" \n+#endif\n+\n+#endif /* _VSTRING_H */"}, {"sha": "c760b5807a5e57d3a1fe93597dcfaedb733c66ca", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "added", "additions": 803, "deletions": 0, "changes": 803, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,803 @@\n+// Versatile string -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ext/vstring.tcc\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _VSTRING_TCC\n+#define _VSTRING_TCC 1\n+\n+#pragma GCC system_header\n+\n+namespace __gnu_cxx\n+{\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    const typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::npos;\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    assign(const _CharT* __s, size_type __n)\n+    {\n+      __glibcxx_requires_string_len(__s, __n);\n+      _M_check_length(this->size(), __n, \"__versa_string::assign\");\n+      if (_M_disjunct(__s) || this->_M_is_shared())\n+\treturn _M_replace_safe(size_type(0), this->size(), __s, __n);\n+      else\n+\t{\n+\t  // Work in-place.\n+\t  const size_type __pos = __s - this->_M_data();\n+\t  if (__pos >= __n)\n+\t    this->_S_copy(this->_M_data(), __s, __n);\n+\t  else if (__pos)\n+\t    this->_S_move(this->_M_data(), __s, __n);\n+\t  this->_M_set_length(__n);\n+\t  return *this;\n+\t}\n+     }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    append(size_type __n, _CharT __c)\n+    {\n+      if (__n)\n+\t{\n+\t  _M_check_length(size_type(0), __n, \"__versa_string::append\");\t  \n+\t  const size_type __len = __n + this->size();\n+\t  if (__len > this->capacity() || this->_M_is_shared())\n+\t    this->reserve(__len);\n+\t  this->_S_assign(this->_M_data() + this->size(), __n, __c);\n+\t  this->_M_set_length(__len);\n+\t}\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    append(const _CharT* __s, size_type __n)\n+    {\n+      __glibcxx_requires_string_len(__s, __n);\n+      if (__n)\n+\t{\n+\t  _M_check_length(size_type(0), __n, \"__versa_string::append\");\n+\t  const size_type __len = __n + this->size();\n+\t  if (__len > this->capacity() || this->_M_is_shared())\n+\t    {\n+\t      if (_M_disjunct(__s))\n+\t\tthis->reserve(__len);\n+\t      else\n+\t\t{\n+\t\t  const size_type __off = __s - this->_M_data();\n+\t\t  this->reserve(__len);\n+\t\t  __s = this->_M_data() + __off;\n+\t\t}\n+\t    }\n+\t  this->_S_copy(this->_M_data() + this->size(), __s, __n);\n+\t  this->_M_set_length(__len);\n+\t}\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    append(const __versa_string& __str)\n+    {\n+      const size_type __size = __str.size();\n+      if (__size)\n+\t{\n+\t  const size_type __len = __size + this->size();\n+\t  if (__len > this->capacity() || this->_M_is_shared())\n+\t    this->reserve(__len);\n+\t  this->_S_copy(this->_M_data() + this->size(), __str._M_data(),\n+\t\t\t__size);\n+\t  this->_M_set_length(__len);\n+\t}\n+      return *this;\n+    }    \n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    append(const __versa_string& __str, size_type __pos, size_type __n)\n+    {\n+      __str._M_check(__pos, \"__versa_string::append\");\n+      __n = __str._M_limit(__pos, __n);\n+      if (__n)\n+\t{\n+\t  const size_type __len = __n + this->size();\n+\t  if (__len > this->capacity() || this->_M_is_shared())\n+\t    this->reserve(__len);\n+\t  this->_S_copy(this->_M_data() + this->size(),\n+\t\t\t__str._M_data() + __pos, __n);\n+\t  this->_M_set_length(__len);\t  \n+\t}\n+      return *this;\n+    }\n+\n+   template<typename _CharT, typename _Traits, typename _Alloc,\n+\t    template <typename, typename, typename> class _Base>\n+     __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+     insert(size_type __pos, const _CharT* __s, size_type __n)\n+     {\n+       __glibcxx_requires_string_len(__s, __n);\n+       _M_check(__pos, \"__versa_string::insert\");\n+       _M_check_length(size_type(0), __n, \"__versa_string::insert\");\n+       if (_M_disjunct(__s) || this->_M_is_shared())\n+         return _M_replace_safe(__pos, size_type(0), __s, __n);\n+       else\n+         {\n+           // Work in-place.\n+           const size_type __off = __s - this->_M_data();\n+           this->_M_mutate(__pos, 0, __n);\n+           __s = this->_M_data() + __off;\n+           _CharT* __p = this->_M_data() + __pos;\n+           if (__s  + __n <= __p)\n+             this->_S_copy(__p, __s, __n);\n+           else if (__s >= __p)\n+             this->_S_copy(__p, __s + __n, __n);\n+           else\n+             {\n+\t       const size_type __nleft = __p - __s;\n+               this->_S_copy(__p, __s, __nleft);\n+               this->_S_copy(__p + __nleft, __p + __n, __n - __nleft);\n+             }\n+           return *this;\n+         }\n+     }\n+\n+   template<typename _CharT, typename _Traits, typename _Alloc,\n+\t    template <typename, typename, typename> class _Base>\n+     __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+     replace(size_type __pos, size_type __n1, const _CharT* __s,\n+\t     size_type __n2)\n+     {\n+       __glibcxx_requires_string_len(__s, __n2);\n+       _M_check(__pos, \"__versa_string::replace\");\n+       __n1 = _M_limit(__pos, __n1);\n+       _M_check_length(__n1, __n2, \"__versa_string::replace\");\n+       bool __left;\n+       if (_M_disjunct(__s) || this->_M_is_shared())\n+         return _M_replace_safe(__pos, __n1, __s, __n2);\n+       else if ((__left = __s + __n2 <= this->_M_data() + __pos)\n+\t\t|| this->_M_data() + __pos + __n1 <= __s)\n+\t {\n+\t   // Work in-place: non-overlapping case.\n+\t   size_type __off = __s - this->_M_data();\n+\t   __left ? __off : (__off += __n2 - __n1);\n+\t   this->_M_mutate(__pos, __n1, __n2);\n+\t   this->_S_copy(this->_M_data() + __pos,\n+\t\t\t this->_M_data() + __off, __n2);\n+\t   return *this;\n+\t }\n+       else\n+\t {\n+\t   // Todo: overlapping case.\n+\t   const __versa_string __tmp(__s, __n2);\n+\t   return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);\n+\t }\n+     }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    void\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    swap(__versa_string& __s)\n+    {\n+      if (this->_M_is_leaked())\n+\tthis->_M_set_sharable();\n+      if (__s._M_is_leaked())\n+\t__s._M_set_sharable();\n+      if (this->get_allocator() == __s.get_allocator())\n+\tthis->_M_swap(__s);\n+      // The code below can usually be optimized away.\n+      else\n+\t{\n+\t  const __versa_string __tmp1(_M_ibegin(), _M_iend(),\n+\t\t\t\t      __s.get_allocator());\n+\t  const __versa_string __tmp2(__s._M_ibegin(), __s._M_iend(),\n+\t\t\t\t      this->get_allocator());\n+\t  *this = __tmp2;\n+\t  __s = __tmp1;\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    void\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    resize(size_type __n, _CharT __c)\n+    {\n+      const size_type __size = this->size();\n+      _M_check_length(__size, __n, \"__versa_string::resize\");\n+      if (__size < __n)\n+\tthis->append(__n - __size, __c);\n+      else if (__n < __size)\n+\tthis->erase(__n);\n+      // else nothing (in particular, avoid calling _M_mutate() unnecessarily.)\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    template<typename _InputIterator>\n+      __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+      __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,\n+\t\t\t  _InputIterator __k2, __false_type)\n+      {\n+\tconst __versa_string __s(__k1, __k2);\n+\tconst size_type __n1 = __i2 - __i1;\n+\t_M_check_length(__n1, __s.size(),\n+\t\t\t\"__versa_string::_M_replace_dispatch\");\n+\treturn _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),\n+\t\t\t       __s.size());\n+      }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n+\t\t   _CharT __c)\n+    {\n+      _M_check_length(__n1, __n2, \"__versa_string::_M_replace_aux\");\n+      this->_M_mutate(__pos1, __n1, __n2);\n+      if (__n2)\n+\tthis->_S_assign(this->_M_data() + __pos1, __n2, __c);\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n+\t\t    size_type __n2)\n+    {\n+      this->_M_mutate(__pos1, __n1, __n2);\n+      if (__n2)\n+\tthis->_S_copy(this->_M_data() + __pos1, __s, __n2);\n+      return *this;\n+    }\n+   \n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const _CharT* __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc>& __rhs)\n+    {\n+      __glibcxx_requires_string(__lhs);\n+      typedef __versa_string<_CharT, _Traits, _Alloc> __string_type;\n+      typedef typename __string_type::size_type\t  __size_type;\n+      const __size_type __len = _Traits::length(__lhs);\n+      __string_type __str;\n+      __str.reserve(__len + __rhs.size());\n+      __str.append(__lhs, __len);\n+      __str.append(__rhs);\n+      return __str;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(_CharT __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    {\n+      typedef __versa_string<_CharT, _Traits, _Alloc> __string_type;\n+      typedef typename __string_type::size_type\t  __size_type;\n+      __string_type __str;\n+      const __size_type __len = __rhs.size();\n+      __str.reserve(__len + 1);\n+      __str.append(__size_type(1), __lhs);\n+      __str.append(__rhs);\n+      return __str;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    copy(_CharT* __s, size_type __n, size_type __pos) const\n+    {\n+      _M_check(__pos, \"__versa_string::copy\");\n+      __n = _M_limit(__pos, __n);\n+      __glibcxx_requires_string_len(__s, __n);\n+      if (__n)\n+\tthis->_S_copy(__s, this->_M_data() + __pos, __n);\n+      // 21.3.5.7 par 3: do not append null.  (good.)\n+      return __n;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    find(const _CharT* __s, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__s, __n);\n+      size_type __ret = npos;\n+      const size_type __size = this->size();\n+      if (__pos + __n <= __size)\n+\t{\n+\t  const _CharT* __data = this->_M_data();\n+\t  const _CharT* __p = std::search(__data + __pos, __data + __size,\n+\t\t\t\t\t  __s, __s + __n, traits_type::eq);\n+\t  if (__p != __data + __size || __n == 0)\n+\t    __ret = __p - __data;\n+\t}\n+      return __ret;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    find(_CharT __c, size_type __pos) const\n+    {\n+      size_type __ret = npos;\n+      const size_type __size = this->size();\n+      if (__pos < __size)\n+\t{\n+\t  const _CharT* __data = this->_M_data();\n+\t  const size_type __n = __size - __pos;\n+\t  const _CharT* __p = traits_type::find(__data + __pos, __n, __c);\n+\t  if (__p)\n+\t    __ret = __p - __data;\n+\t}\n+      return __ret;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    rfind(const _CharT* __s, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__s, __n);\n+      const size_type __size = this->size();\n+      if (__n <= __size)\n+\t{\n+\t  __pos = std::min(size_type(__size - __n), __pos);\n+\t  const _CharT* __data = this->_M_data();\n+\t  do\n+\t    {\n+\t      if (traits_type::compare(__data + __pos, __s, __n) == 0)\n+\t\treturn __pos;\n+\t    }\n+\t  while (__pos-- > 0);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    rfind(_CharT __c, size_type __pos) const\n+    {\n+      size_type __size = this->size();\n+      if (__size)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  for (++__size; __size-- > 0; )\n+\t    if (traits_type::eq(this->_M_data()[__size], __c))\n+\t      return __size;\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__s, __n);\n+      for (; __n && __pos < this->size(); ++__pos)\n+\t{\n+\t  const _CharT* __p = traits_type::find(__s, __n,\n+\t\t\t\t\t\tthis->_M_data()[__pos]);\n+\t  if (__p)\n+\t    return __pos;\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__s, __n);\n+      size_type __size = this->size();\n+      if (__size && __n)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  do\n+\t    {\n+\t      if (traits_type::find(__s, __n, this->_M_data()[__size]))\n+\t\treturn __size;\n+\t    }\n+\t  while (__size-- != 0);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__s, __n);\n+      for (; __pos < this->size(); ++__pos)\n+\tif (!traits_type::find(__s, __n, this->_M_data()[__pos]))\n+\t  return __pos;\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    find_first_not_of(_CharT __c, size_type __pos) const\n+    {\n+      for (; __pos < this->size(); ++__pos)\n+\tif (!traits_type::eq(this->_M_data()[__pos], __c))\n+\t  return __pos;\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__s, __n);\n+      size_type __size = this->size();\n+      if (__size)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  do\n+\t    {\n+\t      if (!traits_type::find(__s, __n, this->_M_data()[__size]))\n+\t\treturn __size;\n+\t    }\n+\t  while (__size--);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    find_last_not_of(_CharT __c, size_type __pos) const\n+    {\n+      size_type __size = this->size();\n+      if (__size)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  do\n+\t    {\n+\t      if (!traits_type::eq(this->_M_data()[__size], __c))\n+\t\treturn __size;\n+\t    }\n+\t  while (__size--);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    int\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    compare(size_type __pos, size_type __n, const __versa_string& __str) const\n+    {\n+      _M_check(__pos, \"__versa_string::compare\");\n+      __n = _M_limit(__pos, __n);\n+      const size_type __osize = __str.size();\n+      const size_type __len = std::min(__n, __osize);\n+      int __r = traits_type::compare(this->_M_data() + __pos,\n+\t\t\t\t     __str.data(), __len);\n+      if (!__r)\n+\t__r = __n - __osize;\n+      return __r;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    int\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    compare(size_type __pos1, size_type __n1, const __versa_string& __str,\n+\t    size_type __pos2, size_type __n2) const\n+    {\n+      _M_check(__pos1, \"__versa_string::compare\");\n+      __str._M_check(__pos2, \"__versa_string::compare\");\n+      __n1 = _M_limit(__pos1, __n1);\n+      __n2 = __str._M_limit(__pos2, __n2);\n+      const size_type __len = std::min(__n1, __n2);\n+      int __r = traits_type::compare(this->_M_data() + __pos1,\n+\t\t\t\t     __str.data() + __pos2, __len);\n+      if (!__r)\n+\t__r = __n1 - __n2;\n+      return __r;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    int\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n+    compare(const _CharT* __s) const\n+    {\n+      __glibcxx_requires_string(__s);\n+      const size_type __size = this->size();\n+      const size_type __osize = traits_type::length(__s);\n+      const size_type __len = std::min(__size, __osize);\n+      int __r = traits_type::compare(this->_M_data(), __s, __len);\n+      if (!__r)\n+\t__r = __size - __osize;\n+      return __r;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    int\n+    __versa_string <_CharT, _Traits, _Alloc, _Base>::\n+    compare(size_type __pos, size_type __n1, const _CharT* __s) const\n+    {\n+      __glibcxx_requires_string(__s);\n+      _M_check(__pos, \"__versa_string::compare\");\n+      __n1 = _M_limit(__pos, __n1);\n+      const size_type __osize = traits_type::length(__s);\n+      const size_type __len = std::min(__n1, __osize);\n+      int __r = traits_type::compare(this->_M_data() + __pos, __s, __len);\n+      if (!__r)\n+\t__r = __n1 - __osize;\n+      return __r;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    int\n+    __versa_string <_CharT, _Traits, _Alloc, _Base>::\n+    compare(size_type __pos, size_type __n1, const _CharT* __s,\n+\t    size_type __n2) const\n+    {\n+      __glibcxx_requires_string_len(__s, __n2);\n+      _M_check(__pos, \"__versa_string::compare\");\n+      __n1 = _M_limit(__pos, __n1);\n+      const size_type __len = std::min(__n1, __n2);\n+      int __r = traits_type::compare(this->_M_data() + __pos, __s, __len);\n+      if (!__r)\n+\t__r = __n1 - __n2;\n+      return __r;\n+    }\n+\n+} // namespace __gnu_cxx\n+\n+namespace std\n+{\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+           template <typename, typename, typename> class _Base>\n+    basic_istream<_CharT, _Traits>&\n+    operator>>(basic_istream<_CharT, _Traits>& __in,\n+\t       __gnu_cxx::__versa_string<_CharT, _Traits,\n+\t                                 _Alloc, _Base>& __str)\n+    {\n+      typedef basic_istream<_CharT, _Traits>\t        __istream_type;\n+      typedef typename __istream_type::int_type\t\t__int_type;\n+      typedef typename __istream_type::__streambuf_type __streambuf_type;\n+      typedef typename __istream_type::__ctype_type\t__ctype_type;\n+      typedef __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>\n+\t                                                __string_type;\n+      typedef typename __string_type::size_type\t\t__size_type;\n+\n+      __size_type __extracted = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      typename __istream_type::sentry __cerb(__in, false);\n+      if (__cerb)\n+\t{\n+\t  try\n+\t    {\n+\t      // Avoid reallocation for common case.\n+\t      __str.erase();\n+\t      _CharT __buf[128];\n+\t      __size_type __len = 0;\n+\t      const streamsize __w = __in.width();\n+\t      const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)\n+\t\t                              : __str.max_size();\n+\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n+\t      const __int_type __eof = _Traits::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !_Traits::eq_int_type(__c, __eof)\n+\t\t     && !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n+\t\t{\n+\t\t  if (__len == sizeof(__buf) / sizeof(_CharT))\n+\t\t    {\n+\t\t      __str.append(__buf, sizeof(__buf) / sizeof(_CharT));\n+\t\t      __len = 0;\n+\t\t    }\n+\t\t  __buf[__len++] = _Traits::to_char_type(__c);\n+\t\t  ++__extracted;\n+\t\t  __c = __sb->snextc();\n+\t\t}\n+\t      __str.append(__buf, __len);\n+\n+\t      if (_Traits::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      __in.width(0);\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(ios_base::badbit);\n+\t    }\n+\t}\n+      // 211.  operator>>(istream&, string&) doesn't set failbit\n+      if (!__extracted)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }      \n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+           template <typename, typename, typename> class _Base>\n+    basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __out,\n+\t       const __gnu_cxx::__versa_string<_CharT, _Traits,\n+\t                                       _Alloc, _Base>& __str)\n+    {\n+      typedef basic_ostream<_CharT, _Traits>            __ostream_type;\n+\n+      typename __ostream_type::sentry __cerb(__out);\n+      if (__cerb)\n+\t{\n+\t  const streamsize __w = __out.width();\n+\t  streamsize __len = static_cast<streamsize>(__str.size());\n+\t  const _CharT* __s = __str.data();\n+\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 25. String operator<< uses width() value wrong\n+\t  if (__w > __len)\n+\t    {\n+\t      _CharT* __cs = (static_cast<\n+\t\t\t      _CharT*>(__builtin_alloca(sizeof(_CharT) * __w)));\n+\t      __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,\n+\t\t\t\t\t     __s, __w, __len, false);\n+\t      __s = __cs;\n+\t      __len = __w;\n+\t    }\n+\t  __out._M_write(__s, __len);\n+\t  __out.width(0);\n+\t}\n+      return __out;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+           template <typename, typename, typename> class _Base>\n+    basic_istream<_CharT, _Traits>&\n+    getline(basic_istream<_CharT, _Traits>& __in,\n+\t    __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>& __str,\n+\t    _CharT __delim)\n+    {\n+      typedef basic_istream<_CharT, _Traits>\t        __istream_type;\n+      typedef typename __istream_type::int_type\t\t__int_type;\n+      typedef typename __istream_type::__streambuf_type __streambuf_type;\n+      typedef typename __istream_type::__ctype_type\t__ctype_type;\n+      typedef __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>\n+\t                                                __string_type;\n+      typedef typename __string_type::size_type\t\t__size_type;\n+\n+      __size_type __extracted = 0;\n+      const __size_type __n = __str.max_size();\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      typename __istream_type::sentry __cerb(__in, true);\n+      if (__cerb)\n+\t{\n+\t  try\n+\t    {\n+\t      // Avoid reallocation for common case.\n+\t      __str.erase();\n+\t      _CharT __buf[128];\n+\t      __size_type __len = 0;\n+\t      const __int_type __idelim = _Traits::to_int_type(__delim);\n+\t      const __int_type __eof = _Traits::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !_Traits::eq_int_type(__c, __eof)\n+\t\t     && !_Traits::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  if (__len == sizeof(__buf) / sizeof(_CharT))\n+\t\t    {\n+\t\t      __str.append(__buf, sizeof(__buf) / sizeof(_CharT));\n+\t\t      __len = 0;\n+\t\t    }\n+\t\t  __buf[__len++] = _Traits::to_char_type(__c);\n+\t\t  ++__extracted;\n+\t\t  __c = __sb->snextc();\n+\t\t}\n+\t      __str.append(__buf, __len);\n+\n+\t      if (_Traits::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      else if (_Traits::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  ++__extracted;\t\t  \n+\t\t  __sb->sbumpc();\n+\t\t}\n+\t      else\n+\t\t__err |= ios_base::failbit;\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(ios_base::badbit);\n+\t    }\n+\t}\n+      if (!__extracted)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }      \n+  \n+} // namespace std\n+\n+#endif // _VSTRING_TCC"}, {"sha": "58a634c56179a23da4d69ba676a5bf5e1dab4fea", "filename": "libstdc++-v3/include/ext/vstring_fwd.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,74 @@\n+// Versatile string forward -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ext/vstring_fwd.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _VSTRING_FWD_H\n+#define _VSTRING_FWD_H 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <bits/char_traits.h>\n+#include <memory> \t// For allocator.\n+\n+namespace __gnu_cxx\n+{\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    class __sso_string_base;\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    class __rc_string_base;\n+\n+  template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n+           typename _Alloc = std::allocator<_CharT>,\n+\t   template\n+\t   <typename, typename, typename> class _Base = __sso_string_base>\n+    class __versa_string;\n+\n+  typedef __versa_string<char>                              __vstring;\n+  typedef __vstring                                         __sso_string;\n+  typedef \n+  __versa_string<char, std::char_traits<char>,\n+\t\t std::allocator<char>, __rc_string_base>    __rc_string;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  typedef __versa_string<wchar_t>                           __wvstring;\n+  typedef __wvstring                                        __wsso_string;\n+  typedef\n+  __versa_string<wchar_t, std::char_traits<wchar_t>,\n+\t\t std::allocator<wchar_t>, __rc_string_base> __wrc_string;\n+#endif  \n+} // namespace __gnu_cxx\n+\n+#endif /* _VSTRING_FWD_H */"}, {"sha": "e44548d846ef84c3d7d106814ff76989752ff643", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,162 @@\n+// Versatile string utilities -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ext/vstring_util.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _VSTRING_UTIL_H\n+#define _VSTRING_UTIL_H 1\n+\n+#pragma GCC system_header\n+\n+#include <ext/vstring_fwd.h>\n+#include <debug/debug.h>\n+#include <bits/stl_function.h>  // For less\n+#include <bits/functexcept.h>\n+#include <locale>\n+#include <algorithm> // For std::distance, srd::search.\n+\n+namespace __gnu_cxx\n+{\n+  template<typename _Type>\n+    inline bool\n+    __is_null_p(_Type* __ptr)\n+    { return __ptr == 0; }\n+\n+  template<typename _Type>\n+    inline bool\n+    __is_null_p(_Type)\n+    { return false; }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    struct __vstring_utility\n+    {\n+      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;\n+\n+      typedef _Traits\t\t\t\t\t    traits_type;      \n+      typedef typename _Traits::char_type\t\t    value_type;\n+      typedef typename _CharT_alloc_type::size_type\t    size_type;\n+      typedef typename _CharT_alloc_type::pointer\t    pointer;\n+      typedef typename _CharT_alloc_type::const_pointer\t    const_pointer;\n+\n+      // For __sso_string.\n+      typedef __gnu_cxx::\n+      __normal_iterator<pointer, __gnu_cxx::\n+\t\t\t__versa_string<_CharT, _Traits, _Alloc,\n+\t\t\t\t       __sso_string_base> >\n+        __sso_iterator;\n+      typedef __gnu_cxx::\n+      __normal_iterator<const_pointer, __gnu_cxx::\n+\t\t\t__versa_string<_CharT, _Traits, _Alloc,\n+\t\t\t\t       __sso_string_base> >\n+        __const_sso_iterator;\n+\n+      // For __rc_string.\n+      typedef __gnu_cxx::\n+      __normal_iterator<pointer, __gnu_cxx::\n+\t\t\t__versa_string<_CharT, _Traits, _Alloc,\n+\t\t\t\t       __rc_string_base> >\n+        __rc_iterator;\n+      typedef __gnu_cxx::\n+      __normal_iterator<const_pointer, __gnu_cxx::\n+\t\t\t__versa_string<_CharT, _Traits, _Alloc,\n+\t\t\t\t       __rc_string_base> >\n+        __const_rc_iterator;\n+\n+      // When __n = 1 way faster than the general multichar\n+      // traits_type::copy/move/assign.\n+      static void\n+      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)\n+      {\n+\tif (__n == 1)\n+\t  traits_type::assign(*__d, *__s);\n+\telse\n+\t  traits_type::copy(__d, __s, __n);\n+      }\n+\n+      static void\n+      _S_move(_CharT* __d, const _CharT* __s, size_type __n)\n+      {\n+\tif (__n == 1)\n+\t  traits_type::assign(*__d, *__s);\n+\telse\n+\t  traits_type::move(__d, __s, __n);\t  \n+      }\n+\n+      static void\n+      _S_assign(_CharT* __d, size_type __n, _CharT __c)\n+      {\n+\tif (__n == 1)\n+\t  traits_type::assign(*__d, __c);\n+\telse\n+\t  traits_type::assign(__d, __n, __c);\t  \n+      }\n+\n+      // _S_copy_chars is a separate template to permit specialization\n+      // to optimize for the common case of pointers as iterators.\n+      template<class _Iterator>\n+        static void\n+        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n+        {\n+\t  for (; __k1 != __k2; ++__k1, ++__p)\n+\t    traits_type::assign(*__p, *__k1); // These types are off.\n+\t}\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, __sso_iterator __k1, __sso_iterator __k2)\n+      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, __const_sso_iterator __k1,\n+\t\t    __const_sso_iterator __k2)\n+      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, __rc_iterator __k1, __rc_iterator __k2)\n+      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, __const_rc_iterator __k1,\n+\t\t    __const_rc_iterator __k2)\n+      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)\n+      { _S_copy(__p, __k1, __k2 - __k1); }\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)\n+      { _S_copy(__p, __k1, __k2 - __k1); }\n+    };\n+} // namespace __gnu_cxx\n+\n+#endif /* _VSTRING_UTIL_H */"}, {"sha": "f3aaf3eae7f3b49db5561a2afb93ae27a769942c", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -1,8 +1,8 @@\n-# Makefile.in generated by automake 1.9.5 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# 2003, 2004  Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved."}, {"sha": "5d1c1390131bef7753fe0c45e4ca5239797a1f51", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -1,8 +1,8 @@\n-# Makefile.in generated by automake 1.9.5 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# 2003, 2004  Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved."}, {"sha": "9f4bacab3e7a31c54fefe7224fa87427ceffe7bd", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -1,8 +1,8 @@\n-# Makefile.in generated by automake 1.9.5 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# 2003, 2004  Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved."}, {"sha": "076115b2e4c3aad99a1464bcd2729fb30009dad2", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -1,8 +1,8 @@\n-# Makefile.in generated by automake 1.9.5 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# 2003, 2004  Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved."}, {"sha": "91e1874ebabf994c8969d66a1486353b812748d9", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -1,8 +1,8 @@\n-# Makefile.in generated by automake 1.9.5 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# 2003, 2004  Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved."}, {"sha": "97a1f7452918e26ef3a3ba21ce6917f0750746bd", "filename": "libstdc++-v3/testsuite/ext/vstring/explicit_instantiation/1.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2F1.cc?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of __versa_string\n+\n+#include <ext/vstring.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/21770\n+template class __gnu_cxx::__versa_string<int, std::char_traits<int>,\n+\t\t\t\t\t std::allocator<char> >;"}, {"sha": "8606c8160a2fd02320c55eb458965637f7461d54", "filename": "libstdc++-v3/testsuite/ext/vstring/explicit_instantiation/2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2F2.cc?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of __versa_string\n+\n+#include <ext/vstring.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/21770\n+template class __gnu_cxx::__versa_string<int, std::char_traits<int>,\n+\t\t\t\t\t std::allocator<char>,\n+\t\t\t\t\t __gnu_cxx::__sso_string_base>;\n+\n+template class __gnu_cxx::__versa_string<int, std::char_traits<int>,\n+\t\t\t\t\t std::allocator<char>,\n+\t\t\t\t\t __gnu_cxx::__rc_string_base>;"}, {"sha": "661e99e4a7b26c8f71272ce8d857e9c5230f1dfa", "filename": "libstdc++-v3/testsuite/ext/vstring/explicit_instantiation/char/1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2Fchar%2F1.cc?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of __versa_string\n+\n+#include <ext/vstring.h>\n+\n+// { dg-do compile }\n+\n+template class __gnu_cxx::__versa_string<char, std::char_traits<char>,\n+\t\t\t\t\t std::allocator<char>,\n+\t\t\t\t\t __gnu_cxx::__sso_string_base>;\n+\n+template class __gnu_cxx::__versa_string<char, std::char_traits<char>,\n+\t\t\t\t\t std::allocator<char>,\n+\t\t\t\t\t __gnu_cxx::__rc_string_base>;"}, {"sha": "e8f0b959f5536756c3c37f00f281a4a67fe4fa05", "filename": "libstdc++-v3/testsuite/ext/vstring/explicit_instantiation/wchar_t/1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872d8fea4017a33ac238b5318d52fbc953079bcd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fexplicit_instantiation%2Fwchar_t%2F1.cc?ref=872d8fea4017a33ac238b5318d52fbc953079bcd", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of __versa_string\n+\n+#include <ext/vstring.h>\n+\n+// { dg-do compile }\n+\n+template class __gnu_cxx::__versa_string<wchar_t, std::char_traits<wchar_t>,\n+\t\t\t\t\t std::allocator<wchar_t>,\n+\t\t\t\t\t __gnu_cxx::__sso_string_base>;\n+\n+template class __gnu_cxx::__versa_string<wchar_t, std::char_traits<wchar_t>,\n+\t\t\t\t\t std::allocator<wchar_t>,\n+\t\t\t\t\t __gnu_cxx::__rc_string_base>;"}]}