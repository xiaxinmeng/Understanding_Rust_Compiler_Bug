{"sha": "83bdc9f70347e6438822e719c30c3793c81df18e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNiZGM5ZjcwMzQ3ZTY0Mzg4MjJlNzE5YzMwYzM3OTNjODFkZjE4ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-29T16:30:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-29T17:11:46Z"}, "message": "c++: Fix unordered entity array [PR 98843]\n\nA couple of module invariants are that the modules are always\nallocated in ascending order and appended to the module array.  The\nentity array is likewise ordered, with each module having spans in\nthat array in ascending order.  Prior to header-units, this was\nprovided by the way import declarations were encountered.  With\nheader-units we need to load the preprocessor state of header units\nbefore we parse the C++, and this can lead to incorrect ordering of\nthe entity array.  I had made the initialization of a module's\nlanguage state a little too lazy.  This moves the allocation of entity\narray spans into the initial read of a module, thus ensuring the\nordering of those spans.  We won't be looking in them until we've\nloaded the language portions of that particular module, and even if we\ndid, we'd find NULLs there and issue a diagnostic.\n\n\tPR c++/98843\n\tgcc/cp/\n\t* module.cc (module_state_config): Add num_entities field.\n\t(module_state::read_entities): The entity_ary span is\n\talready allocated.\n\t(module_state::write_config): Write num_entities.\n\t(module_state::read_config): Read num_entities.\n\t(module_state::write): Set config's num_entities.\n\t(module_state::read_initial): Allocate the entity ary\n\tspan here.\n\t(module_state::read_language): Do not set entity_lwm\n\there.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr98843_a.C: New.\n\t* g++.dg/modules/pr98843_b.H: New.\n\t* g++.dg/modules/pr98843_c.C: New.", "tree": {"sha": "7896170a775ad200579e23fa8ce711c9190a3788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7896170a775ad200579e23fa8ce711c9190a3788"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83bdc9f70347e6438822e719c30c3793c81df18e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83bdc9f70347e6438822e719c30c3793c81df18e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83bdc9f70347e6438822e719c30c3793c81df18e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83bdc9f70347e6438822e719c30c3793c81df18e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dd1f944547eb6560c3e15a4b705ae1ac236df75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd1f944547eb6560c3e15a4b705ae1ac236df75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd1f944547eb6560c3e15a4b705ae1ac236df75"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "2d761452505db80b709954d70cf115b083fcc49b", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bdc9f70347e6438822e719c30c3793c81df18e/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bdc9f70347e6438822e719c30c3793c81df18e/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=83bdc9f70347e6438822e719c30c3793c81df18e", "patch": "@@ -4064,6 +4064,7 @@ import_entity_module (unsigned index)\n     /* This is an index for an exported entity.  */\n     return (*modules)[0];\n \n+  /* Do not include the current TU (not an off-by-one error).  */\n   unsigned pos = 1;\n   unsigned len = modules->length () - pos;\n   while (len)\n@@ -14480,14 +14481,15 @@ struct module_state_config {\n   const char *dialect_str;\n   unsigned num_imports;\n   unsigned num_partitions;\n+  unsigned num_entities;\n   unsigned ordinary_locs;\n   unsigned macro_locs;\n   unsigned ordinary_loc_align;\n \n public:\n   module_state_config ()\n     :dialect_str (get_dialect ()),\n-     num_imports (0), num_partitions (0),\n+     num_imports (0), num_partitions (0), num_entities (0),\n      ordinary_locs (0), macro_locs (0), ordinary_loc_align (0)\n   {\n   }\n@@ -15286,23 +15288,17 @@ module_state::read_entities (unsigned count, unsigned lwm, unsigned hwm)\n   dump () && dump (\"Reading entities\");\n   dump.indent ();\n \n-  vec_safe_reserve (entity_ary, count);\n-  unsigned ix;\n-  for (ix = 0; ix != count; ix++)\n+  for (binding_slot *slot = entity_ary->begin () + entity_lwm; count--; slot++)\n     {\n       unsigned snum = sec.u ();\n       if (snum && (snum - lwm) >= (hwm - lwm))\n \tsec.set_overrun ();\n       if (sec.get_overrun ())\n \tbreak;\n \n-      binding_slot slot;\n-      slot.u.binding = NULL_TREE;\n       if (snum)\n-\tslot.set_lazy (snum << 2);\n-      entity_ary->quick_push (slot);\n+\tslot->set_lazy (snum << 2);\n     }\n-  entity_num = ix;\n \n   dump.outdent ();\n   if (!sec.end (from ()))\n@@ -17301,6 +17297,7 @@ module_state::write_config (elf_out *to, module_state_config &config,\n \n   cfg.u (config.num_imports);\n   cfg.u (config.num_partitions);\n+  cfg.u (config.num_entities);\n \n   cfg.u (config.ordinary_locs);\n   cfg.u (config.macro_locs);\n@@ -17484,6 +17481,7 @@ module_state::read_config (module_state_config &config)\n \n   config.num_imports = cfg.u ();\n   config.num_partitions = cfg.u ();\n+  config.num_entities = cfg.u ();\n \n   config.ordinary_locs = cfg.u ();\n   config.macro_locs = cfg.u ();\n@@ -17717,6 +17715,7 @@ module_state::write (elf_out *to, cpp_reader *reader)\n \n   /* Write the entitites.  None happens if we contain namespaces or\n      nothing. */\n+  config.num_entities = counts[MSC_entities];\n   if (counts[MSC_entities])\n     write_entities (to, sccs, counts[MSC_entities], &crc);\n \n@@ -17818,6 +17817,21 @@ module_state::read_initial (cpp_reader *reader)\n   gcc_checking_assert (mod == MODULE_UNKNOWN);\n   gcc_checking_assert (this != (*modules)[0]);\n \n+  {\n+    /* Allocate space in the entities array now -- that array must be\n+       monotionically in step with the modules array.  */\n+    entity_lwm = vec_safe_length (entity_ary);\n+    entity_num = config.num_entities;\n+    gcc_checking_assert (modules->length () == 1\n+\t\t\t || modules->last ()->entity_lwm <= entity_lwm);\n+    vec_safe_reserve (entity_ary, config.num_entities);\n+\n+    binding_slot slot;\n+    slot.u.binding = NULL_TREE;\n+    for (unsigned count = config.num_entities; count--;)\n+      entity_ary->quick_push (slot);\n+  }\n+\n   /* We'll run out of other resources before we run out of module\n      indices.  */\n   mod = modules->length ();\n@@ -17939,8 +17953,8 @@ module_state::read_language (bool outermost)\n \n   function_depth++; /* Prevent unexpected GCs.  */\n \n-  /* Read the entity table.  */\n-  entity_lwm = vec_safe_length (entity_ary);\n+  if (counts[MSC_entities] != entity_num)\n+    ok = false;\n   if (ok && counts[MSC_entities]\n       && !read_entities (counts[MSC_entities],\n \t\t\t counts[MSC_sec_lwm], counts[MSC_sec_hwm]))"}, {"sha": "97820cff3cc68effd09763d9fc537e0ac5a9576e", "filename": "gcc/testsuite/g++.dg/modules/pr98843_a.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bdc9f70347e6438822e719c30c3793c81df18e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98843_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bdc9f70347e6438822e719c30c3793c81df18e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98843_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98843_a.C?ref=83bdc9f70347e6438822e719c30c3793c81df18e", "patch": "@@ -0,0 +1,5 @@\n+// { dg-additional-options -fmodules-ts }\n+// PR 98843 ICE due to inconsistent entity_ary order\n+\n+export module foo;\n+export void *frob ();"}, {"sha": "d6734bd382d3575af01f600e6155e93a63dbc40e", "filename": "gcc/testsuite/g++.dg/modules/pr98843_b.H", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bdc9f70347e6438822e719c30c3793c81df18e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98843_b.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bdc9f70347e6438822e719c30c3793c81df18e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98843_b.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98843_b.H?ref=83bdc9f70347e6438822e719c30c3793c81df18e", "patch": "@@ -0,0 +1,12 @@\n+// { dg-additional-options -fmodule-header }\n+// PR 98843 ICE due to inconsistent entity_ary order\n+\n+template<int I> int Fn () \n+{\n+  return I;\n+}\n+\n+template<> int Fn<1> () \n+{\n+  return 0;\n+}"}, {"sha": "a176e09410e5d394b9dbb52b79897ab0571d8c22", "filename": "gcc/testsuite/g++.dg/modules/pr98843_c.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83bdc9f70347e6438822e719c30c3793c81df18e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98843_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83bdc9f70347e6438822e719c30c3793c81df18e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98843_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98843_c.C?ref=83bdc9f70347e6438822e719c30c3793c81df18e", "patch": "@@ -0,0 +1,10 @@\n+// { dg-additional-options -fmodules-ts }\n+// PR 98843 ICE due to inconsistent entity_ary order\n+\n+import foo;\n+import \"pr98843_b.H\";\n+\n+int main ()\n+{\n+  return Fn<1> ();\n+}"}]}