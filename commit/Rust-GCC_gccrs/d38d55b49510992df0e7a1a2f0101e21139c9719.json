{"sha": "d38d55b49510992df0e7a1a2f0101e21139c9719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4ZDU1YjQ5NTEwOTkyZGYwZTdhMWEyZjAxMDFlMjExMzljOTcxOQ==", "commit": {"author": {"name": "David O'Brien", "email": "obrien@dragon.nuxi.com", "date": "2000-10-07T06:56:14Z"}, "committer": {"name": "David O'Brien", "email": "obrien@gcc.gnu.org", "date": "2000-10-07T06:56:14Z"}, "message": "elf.h: Standardize the formatting.\n\n2000-10-06  David O'Brien  <obrien@FreeBSD.org>\n* config/alpha/elf.h: Standardize the formatting.\n\nApproved by:  Richard Henderson <rth@cygnus.com>\n              Message-ID: <20001006233422.D23128@cygnus.com>\n\nFrom-SVN: r36772", "tree": {"sha": "1c48e077327646180e39f24b2b4b4da984b177e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c48e077327646180e39f24b2b4b4da984b177e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d38d55b49510992df0e7a1a2f0101e21139c9719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38d55b49510992df0e7a1a2f0101e21139c9719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38d55b49510992df0e7a1a2f0101e21139c9719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38d55b49510992df0e7a1a2f0101e21139c9719/comments", "author": null, "committer": null, "parents": [{"sha": "94984e91a22d3251be947522154db8578775d00b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94984e91a22d3251be947522154db8578775d00b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94984e91a22d3251be947522154db8578775d00b"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "fea8809b5a4a4d20c97fc8036a90bea4cbde4a54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38d55b49510992df0e7a1a2f0101e21139c9719/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38d55b49510992df0e7a1a2f0101e21139c9719/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d38d55b49510992df0e7a1a2f0101e21139c9719", "patch": "@@ -1,3 +1,7 @@\n+2000-10-06  David O'Brien  <obrien@dragon.nuxi.com>\n+\n+\t* config/alpha/elf.h: Standardize the formatting.\n+\n 2000-10-06  David O'Brien  <obrien@FreeBSD.org>\n \n \t* config/alpha/elf.h: Protect the ASM_OUTPUT_IDENT definition with an"}, {"sha": "7676af4481c2a01977ec42d8dc595c13404680bb", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38d55b49510992df0e7a1a2f0101e21139c9719/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38d55b49510992df0e7a1a2f0101e21139c9719/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=d38d55b49510992df0e7a1a2f0101e21139c9719", "patch": "@@ -26,18 +26,18 @@ Boston, MA 02111-1307, USA.    */\n #define DBX_DEBUGGING_INFO\n #define DWARF2_DEBUGGING_INFO\n \n-#undef PREFERRED_DEBUGGING_TYPE\n+#undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n #undef ASM_FINAL_SPEC\n \n-#undef CC1_SPEC\n+#undef  CC1_SPEC\n #define CC1_SPEC  \"%{G*}\"\n \n-#undef ASM_SPEC\n+#undef  ASM_SPEC\n #define ASM_SPEC  \"%{G*} %{relax:-relax} %{gdwarf*:-no-mdebug}\"\n \n-#undef LINK_SPEC\n+#undef  LINK_SPEC\n #define LINK_SPEC \"-m elf64alpha %{G*} %{relax:-relax}\t\t\\\n   %{O*:-O3} %{!O*:-O1}\t\t\t\t\t\t\\\n   %{shared:-shared}\t\t\t\t\t\t\\\n@@ -48,7 +48,7 @@ Boston, MA 02111-1307, USA.    */\n     %{static:-static}}\"\n \n /* Output at beginning of assembler file.  */\n-#undef ASM_FILE_START\n+#undef  ASM_FILE_START\n #define ASM_FILE_START(FILE)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   if (write_symbols != DWARF2_DEBUG)\t\t\t\t\\\n@@ -100,8 +100,8 @@ do {\t\t\t\t \t\t\t\t\\\n \n #define SKIP_ASM_OP\t\"\\t.zero\\t\"\n \n-#undef ASM_OUTPUT_SKIP\n-#define ASM_OUTPUT_SKIP(FILE,SIZE) \\\n+#undef  ASM_OUTPUT_SKIP\n+#define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n   fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n \n /* Output the label which precedes a jumptable.  Note that for all svr4\n@@ -115,12 +115,12 @@ do {\t\t\t\t \t\t\t\t\\\n #define ALIGN_ASM_OP \"\\t.align\\t\"\n \n #ifndef ASM_OUTPUT_BEFORE_CASE_LABEL\n-#define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE) \\\n+#define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE) \\\n   ASM_OUTPUT_ALIGN ((FILE), 2);\n #endif\n \n-#undef ASM_OUTPUT_CASE_LABEL\n-#define ASM_OUTPUT_CASE_LABEL(FILE,PREFIX,NUM,JUMPTABLE)\t\t\\\n+#undef  ASM_OUTPUT_CASE_LABEL\n+#define ASM_OUTPUT_CASE_LABEL(FILE, PREFIX, NUM, JUMPTABLE)\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ASM_OUTPUT_BEFORE_CASE_LABEL (FILE, PREFIX, NUM, JUMPTABLE)\t\t\\\n     ASM_OUTPUT_INTERNAL_LABEL (FILE, PREFIX, NUM);\t\t\t\\\n@@ -140,7 +140,7 @@ do {\t\t\t\t \t\t\t\t\\\n \n #define COMMON_ASM_OP\t\"\\t.comm\\t\"\n \n-#undef ASM_OUTPUT_ALIGNED_COMMON\n+#undef  ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n@@ -153,7 +153,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    the linker seems to want the alignment of data objects\n    to depend on their types.  We do exactly that here.  */\n \n-#undef ASM_OUTPUT_ALIGNED_LOCAL\n+#undef  ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if ((SIZE) <= g_switch_value)\t\t\t\t\t\t\\\n@@ -197,7 +197,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    values from a double-quoted string WITHOUT HAVING A TERMINATING NUL\n    AUTOMATICALLY APPENDED.  This is the same for most svr4 assemblers.  */\n \n-#undef ASCII_DATA_ASM_OP\n+#undef  ASCII_DATA_ASM_OP\n #define ASCII_DATA_ASM_OP\t\"\\t.ascii\\t\"\n \n /* Support const sections and the ctors and dtors sections for g++.\n@@ -249,14 +249,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n    should override this definition in the target-specific file which\n    includes this file.  */\n \n-#undef EXTRA_SECTIONS\n+#undef  EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_sbss, in_sdata\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n    definition in the target-specific file which includes this file.  */\n \n-#undef EXTRA_SECTION_FUNCTIONS\n+#undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n   SECTION_FUNCTION_TEMPLATE(ctors_section, in_ctors, CTORS_SECTION_ASM_OP) \\\n@@ -269,7 +269,7 @@ extern void dtors_section\t\tPARAMS ((void));\n extern void sbss_section\t\tPARAMS ((void));\n extern void sdata_section\t\tPARAMS ((void));\n \n-#undef READONLY_DATA_SECTION\n+#undef  READONLY_DATA_SECTION\n #define READONLY_DATA_SECTION() const_section ()\n \n #define CONST_SECTION_FUNCTION\t\t\t\t\t\\\n@@ -309,7 +309,7 @@ void FN ()\t\t\t\t\t\\\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE, NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n@@ -319,7 +319,7 @@ void FN ()\t\t\t\t\t\\\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+#define ASM_OUTPUT_DESTRUCTOR(FILE, NAME)      \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n     fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n@@ -332,7 +332,7 @@ void FN ()\t\t\t\t\t\\\n    or a constant of some sort.  RELOC indicates whether forming\n    the initial value of DECL requires link-time relocations.  */\n \n-#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL, RELOC)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -383,8 +383,9 @@ void FN ()\t\t\t\t\t\\\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n \n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX) const_section()\n+#undef  SELECT_RTX_SECTION\n+#define SELECT_RTX_SECTION(MODE, RTX) \\\n+   const_section()\n \n /* Define the strings used for the special svr4 .type and .size directives.\n    These strings generally do not vary from one system running svr4 to\n@@ -397,13 +398,13 @@ void FN ()\t\t\t\t\t\\\n \n /* This is how we tell the assembler that a symbol is weak.  */\n \n-#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n+#define ASM_WEAKEN_LABEL(FILE, NAME) \\\n   do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n        fputc ('\\n', FILE); } while (0)\n \n /* This is how we tell the assembler that two symbols have the same value.  */\n \n-#define ASM_OUTPUT_DEF(FILE,NAME1,NAME2) \\\n+#define ASM_OUTPUT_DEF(FILE, NAME1, NAME2) \\\n   do { assemble_name(FILE, NAME1); \t \\\n        fputs(\" = \", FILE);\t\t \\\n        assemble_name(FILE, NAME2);\t \\\n@@ -520,7 +521,7 @@ void FN ()\t\t\t\t\t\\\n #define STRING_ASM_OP\t\"\\t.string\\t\"\n \n /* GAS is the only Alpha/ELF assembler.  */\n-#undef TARGET_GAS\n+#undef  TARGET_GAS\n #define TARGET_GAS\t(1)\n \n /* Provide a STARTFILE_SPEC appropriate for ELF.  Here we add the"}]}