{"sha": "81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiN2ZmMDc5YTI4NTFkNWY1ZDNiM2EwMWQxOGMzYWYyZTE2NWRhNA==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2015-07-30T10:35:45Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2015-07-30T10:35:45Z"}, "message": "regex_automaton.h (_State_base, _State<>): Remove _TraitsT dependency from _State<>...\n\n\t* include/bits/regex_automaton.h (_State_base, _State<>):\n\tRemove _TraitsT dependency from _State<>; Make matcher member\n\tinto the union to reduce struct size.\n\t* include/bits/regex_automaton.tcc (_State_base<>::_M_print,\n\t_State_base<>::_M_dot, _StateSeq<>::_M_clone):\n\tAdjust to fit the interface. Factor out common parts in\n\t_M_clone as _State<>::_M_has_alt.\n\t* include/bits/regex_executor.h (_Executer<>::_M_lookahead):\n\tOnly pass state id instead of the whole state.\n\t* include/bits/regex_executor.tcc (_Executer<>::_M_dfs,\n\t_Executer<>::_M_lookahead): Adjust to fit the interface.\n\t* include/std/regex: Include <ext/aligned_buffer.h>\n\nFrom-SVN: r226395", "tree": {"sha": "35b1028b25f85381df4bc25af72e1c025f3455de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b1028b25f85381df4bc25af72e1c025f3455de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15827d124af737d95f4b728d5980f65c5d9bc9b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15827d124af737d95f4b728d5980f65c5d9bc9b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15827d124af737d95f4b728d5980f65c5d9bc9b9"}], "stats": {"total": 131, "additions": 103, "deletions": 28}, "files": [{"sha": "806d3d9bab90209428b9710c3e2e0ab72cfaca4b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "patch": "@@ -1,3 +1,18 @@\n+2015-07-30  Tim Shen  <timshen@google.com>\n+\n+\t* include/bits/regex_automaton.h (_State_base, _State<>):\n+\tRemove _TraitsT dependency from _State<>; Make matcher member\n+\tinto the union to reduce struct size.\n+\t* include/bits/regex_automaton.tcc (_State_base<>::_M_print,\n+\t_State_base<>::_M_dot, _StateSeq<>::_M_clone):\n+\tAdjust to fit the interface. Factor out common parts in\n+\t_M_clone as _State<>::_M_has_alt.\n+\t* include/bits/regex_executor.h (_Executer<>::_M_lookahead):\n+\tOnly pass state id instead of the whole state.\n+\t* include/bits/regex_executor.tcc (_Executer<>::_M_dfs,\n+\t_Executer<>::_M_lookahead): Adjust to fit the interface.\n+\t* include/std/regex: Include <ext/aligned_buffer.h>\n+\n 2015-07-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/any (any::operator=(const any&)): Check for"}, {"sha": "b6ab3071ba777d1978ae56b4cb8024aea0bbdee5", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 76, "deletions": 11, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "patch": "@@ -72,7 +72,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   struct _State_base\n   {\n+  protected:\n     _Opcode      _M_opcode;           // type of outgoing transition\n+\n+  public:\n     _StateIdT    _M_next;             // outgoing transition\n     union // Since they are mutually exclusive.\n     {\n@@ -87,16 +90,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// quantifiers (ungreedy if set true)\n \tbool       _M_neg;\n       };\n+      // For _S_opcode_match\n+      __gnu_cxx::__aligned_membuf<_Matcher<char>> _M_matcher_storage;\n     };\n \n+  protected:\n     explicit _State_base(_Opcode __opcode)\n     : _M_opcode(__opcode), _M_next(_S_invalid_state_id)\n     { }\n \n-  protected:\n-    ~_State_base() = default;\n-\n   public:\n+    bool\n+    _M_has_alt()\n+    {\n+      return _M_opcode == _S_opcode_alternative\n+\t|| _M_opcode == _S_opcode_repeat\n+\t|| _M_opcode == _S_opcode_subexpr_lookahead;\n+    }\n+\n #ifdef _GLIBCXX_DEBUG\n     std::ostream&\n     _M_print(std::ostream& ostr) const;\n@@ -107,14 +118,67 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n   };\n \n-  template<typename _TraitsT>\n+  template<typename _Char_type>\n     struct _State : _State_base\n     {\n-      typedef _Matcher<typename _TraitsT::char_type> _MatcherT;\n+      typedef _Matcher<_Char_type> _MatcherT;\n+      static_assert(sizeof(_MatcherT) == sizeof(_Matcher<char>),\n+\t\t    \"std::function<bool(T)> has the same size as \"\n+\t\t    \"std::function<bool(char)>\");\n+      static_assert(alignof(_MatcherT) == alignof(_Matcher<char>),\n+\t\t    \"std::function<bool(T)> has the same alignment as \"\n+\t\t    \"std::function<bool(char)>\");\n+\n+      explicit\n+      _State(_Opcode __opcode) : _State_base(__opcode)\n+      {\n+\tif (_M_opcode() == _S_opcode_match)\n+\t  new (this->_M_matcher_storage._M_addr()) _MatcherT();\n+      }\n \n-      _MatcherT      _M_matches;        // for _S_opcode_match\n+      _State(const _State& __rhs) : _State_base(__rhs)\n+      {\n+\tif (__rhs._M_opcode() == _S_opcode_match)\n+\t  new (this->_M_matcher_storage._M_addr())\n+\t    _MatcherT(__rhs._M_get_matcher());\n+      }\n \n-      explicit _State(_Opcode __opcode) : _State_base(__opcode) { }\n+      _State(_State&& __rhs) : _State_base(__rhs)\n+      {\n+\tif (__rhs._M_opcode() == _S_opcode_match)\n+\t  new (this->_M_matcher_storage._M_addr())\n+\t    _MatcherT(std::move(__rhs._M_get_matcher()));\n+      }\n+\n+      _State&\n+      operator=(const _State&) = delete;\n+\n+      ~_State()\n+      {\n+\tif (_M_opcode() == _S_opcode_match)\n+\t  _M_get_matcher().~_MatcherT();\n+      }\n+\n+      // Since correct ctor and dtor rely on _M_opcode, it's better not to\n+      // change it over time.\n+      _Opcode\n+      _M_opcode() const\n+      { return _State_base::_M_opcode; }\n+\n+      bool\n+      _M_matches(_Char_type __char) const\n+      { return _M_get_matcher()(__char); }\n+\n+      _MatcherT&\n+      _M_get_matcher()\n+      { return *static_cast<_MatcherT*>(this->_M_matcher_storage._M_addr()); }\n+\n+      const _MatcherT&\n+      _M_get_matcher() const\n+      {\n+\treturn *static_cast<const _MatcherT*>(\n+\t    this->_M_matcher_storage._M_addr());\n+      }\n     };\n \n   struct _NFA_base\n@@ -155,10 +219,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _TraitsT>\n     struct _NFA\n-    : _NFA_base, std::vector<_State<_TraitsT>>\n+    : _NFA_base, std::vector<_State<typename _TraitsT::char_type>>\n     {\n-      typedef _State<_TraitsT>\t\t\t\t_StateT;\n-      typedef _Matcher<typename _TraitsT::char_type>\t_MatcherT;\n+      typedef typename _TraitsT::char_type\t_Char_type;\n+      typedef _State<_Char_type>\t\t_StateT;\n+      typedef _Matcher<_Char_type>\t\t_MatcherT;\n \n       _NFA(const typename _TraitsT::locale_type& __loc, _FlagT __flags)\n       : _NFA_base(__flags)\n@@ -202,7 +267,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_insert_matcher(_MatcherT __m)\n       {\n \t_StateT __tmp(_S_opcode_match);\n-\t__tmp._M_matches = std::move(__m);\n+\t__tmp._M_get_matcher() = std::move(__m);\n \treturn _M_insert_state(std::move(__tmp));\n       }\n "}, {"sha": "cecc4074f18115861c5dbd5f72246cf9a54a082f", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "patch": "@@ -174,13 +174,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       for (auto& __it : *this)\n \t{\n-\t  while (__it._M_next >= 0 && (*this)[__it._M_next]._M_opcode\n+\t  while (__it._M_next >= 0 && (*this)[__it._M_next]._M_opcode()\n \t\t == _S_opcode_dummy)\n \t    __it._M_next = (*this)[__it._M_next]._M_next;\n-\t  if (__it._M_opcode == _S_opcode_alternative\n-\t      || __it._M_opcode == _S_opcode_repeat\n-\t      || __it._M_opcode == _S_opcode_subexpr_lookahead)\n-\t    while (__it._M_alt >= 0 && (*this)[__it._M_alt]._M_opcode\n+\t  if (__it._M_has_alt())\n+\t    while (__it._M_alt >= 0 && (*this)[__it._M_alt]._M_opcode()\n \t\t   == _S_opcode_dummy)\n \t      __it._M_alt = (*this)[__it._M_alt]._M_next;\n \t}\n@@ -200,11 +198,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __stack.pop();\n \t  auto __dup = _M_nfa[__u];\n \t  // _M_insert_state() never return -1\n-\t  auto __id = _M_nfa._M_insert_state(__dup);\n+\t  auto __id = _M_nfa._M_insert_state(std::move(__dup));\n \t  __m[__u] = __id;\n-\t  if (__dup._M_opcode == _S_opcode_alternative\n-\t      || __dup._M_opcode == _S_opcode_repeat\n-\t      || __dup._M_opcode == _S_opcode_subexpr_lookahead)\n+\t  if (__dup._M_has_alt())\n \t    if (__dup._M_alt != _S_invalid_state_id\n \t\t&& __m.count(__dup._M_alt) == 0)\n \t      __stack.push(__dup._M_alt);\n@@ -223,9 +219,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      _GLIBCXX_DEBUG_ASSERT(__m.count(__ref._M_next) > 0);\n \t      __ref._M_next = __m[__ref._M_next];\n \t    }\n-\t  if (__ref._M_opcode == _S_opcode_alternative\n-\t      || __ref._M_opcode == _S_opcode_repeat\n-\t      || __ref._M_opcode == _S_opcode_subexpr_lookahead)\n+\t  if (__ref._M_has_alt())\n \t    if (__ref._M_alt != _S_invalid_state_id)\n \t      {\n \t\t_GLIBCXX_DEBUG_ASSERT(__m.count(__ref._M_alt) > 0);"}, {"sha": "f3f8876f41f05642f8760790eab5db70f47fdd22", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "patch": "@@ -148,7 +148,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_word_boundary() const;\n \n       bool\n-      _M_lookahead(_State<_TraitsT> __state);\n+      _M_lookahead(_StateIdT __next);\n \n        // Holds additional information used in BFS-mode.\n       template<typename _SearchMode, typename _ResultsVec>"}, {"sha": "3fd17f69e2c4b2175d28ffdc0fe341a989e2e1bf", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "patch": "@@ -145,11 +145,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _BiIter, typename _Alloc, typename _TraitsT,\n \t   bool __dfs_mode>\n     bool _Executor<_BiIter, _Alloc, _TraitsT, __dfs_mode>::\n-    _M_lookahead(_State<_TraitsT> __state)\n+    _M_lookahead(_StateIdT __next)\n     {\n       _ResultsVec __what(_M_cur_results.size());\n       _Executor __sub(_M_current, _M_end, __what, _M_re, _M_flags);\n-      __sub._M_states._M_start = __state._M_alt;\n+      __sub._M_states._M_start = __next;\n       if (__sub._M_search_from_first())\n \t{\n \t  for (size_t __i = 0; __i < __what.size(); __i++)\n@@ -203,7 +203,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const auto& __state = _M_nfa[__i];\n       // Every change on _M_cur_results and _M_current will be rolled back after\n       // finishing the recursion step.\n-      switch (__state._M_opcode)\n+      switch (__state._M_opcode())\n \t{\n \t// _M_alt branch is \"match once more\", while _M_next is \"get me out\n \t// of this quantifier\". Executing _M_next first or _M_alt first don't\n@@ -280,7 +280,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// Here __state._M_alt offers a single start node for a sub-NFA.\n \t// We recursively invoke our algorithm to match the sub-NFA.\n \tcase _S_opcode_subexpr_lookahead:\n-\t  if (_M_lookahead(__state) == !__state._M_neg)\n+\t  if (_M_lookahead(__state._M_alt) == !__state._M_neg)\n \t    _M_dfs(__match_mode, __state._M_next);\n \t  break;\n \tcase _S_opcode_match:"}, {"sha": "b6fe4c74051db748ff47db7fa0814bfc8e77c90e", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "patch": "@@ -53,6 +53,7 @@\n #include <map>\n #include <cstring>\n \n+#include <ext/aligned_buffer.h>\n #include <bits/regex_constants.h>\n #include <bits/regex_error.h>\n #include <bits/regex_automaton.h>"}]}