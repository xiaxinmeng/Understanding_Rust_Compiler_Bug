{"sha": "2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRhYWQ2NWVhZjRiMzQwNmQwNGQ2YmE0NzU4YjEyMDMxMmVkMGEwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-18T19:28:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-18T19:28:40Z"}, "message": "re PR libstdc++/39802 (std::num_get fails to parse negative zero input correctly)\n\n2009-04-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/39802\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_int\n\t(_InIter, _InIter, ios_base&, ios_base::iostate&, _ValueT&)):\n\tAlways accept negative values, for unsigned types too.\n\t* testsuite/22_locale/num_get/get/char/39802.cc: New.\n\t* testsuite/22_locale/num_get/get/wchar_t/39802.cc: Likewise.\n\nFrom-SVN: r146323", "tree": {"sha": "c2d965f605e2cc49ed79113b10c1508656af5be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2d965f605e2cc49ed79113b10c1508656af5be1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2daad65eaf4b3406d04d6ba4758b120312ed0a0c/comments", "author": null, "committer": null, "parents": [{"sha": "2505c5edcac3fbc0a39ad74c63bab1534ee6e491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2505c5edcac3fbc0a39ad74c63bab1534ee6e491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2505c5edcac3fbc0a39ad74c63bab1534ee6e491"}], "stats": {"total": 182, "additions": 174, "deletions": 8}, "files": [{"sha": "22736cdf2b7f568c2dbdc29b5fc68fb4278a5172", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2daad65eaf4b3406d04d6ba4758b120312ed0a0c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2daad65eaf4b3406d04d6ba4758b120312ed0a0c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "patch": "@@ -1,14 +1,25 @@\n+2009-04-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/39802\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_int\n+\t(_InIter, _InIter, ios_base&, ios_base::iostate&, _ValueT&)):\n+\tAlways accept negative values, for unsigned types too.\n+\t* testsuite/22_locale/num_get/get/char/39802.cc: New.\n+\t* testsuite/22_locale/num_get/get/wchar_t/39802.cc: Likewise.\n+\n 2009-04-18  Jan Hubicka  <jh@suse.cz>\n \n \t* include/debug/formater.h: Include bits/c++config.h.\n \t(_M_error): Mark noreturn.\n \t* include/bits/c++config (_GLIBCXX_PURE, _GLIBCXX_CONST,\n \t_GLIBCXX_NORETURN): New.\n \t* include/bits/stl_tree.h (_Rb_tree_increment, _Rb_tree_increment,\n-\t_Rb_tree_decrement, _Rb_tree_decrement, _Rb_tree_black_count): Mark pure.\n-\t* include/c_compatibility/stdatomic.h (atomic_flag_test_and_set_explicit,\n-\tatomic_flag_clear_explicit, __atomic_flag_wait_explicit,\n-\t__atomic_flag_for_address): Mark by throw ().\n+\t_Rb_tree_decrement, _Rb_tree_decrement, _Rb_tree_black_count):\n+\tMark pure.\n+\t* include/c_compatibility/stdatomic.h\n+\t(atomic_flag_test_and_set_explicit, atomic_flag_clear_explicit,\n+\t__atomic_flag_wait_explicit, __atomic_flag_for_address):\n+\tMark by throw ().\n \t* src/atomic.cc (atomic_flag_test_and_set_explicit,\n \tatomic_flag_clear_explicit, __atomic_flag_wait_explicit,\n \t__atomic_flag_for_address): Mark by throw ()."}, {"sha": "ba8f3988fd65a816c786993964a72a20737cd171", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2daad65eaf4b3406d04d6ba4758b120312ed0a0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2daad65eaf4b3406d04d6ba4758b120312ed0a0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "patch": "@@ -379,8 +379,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \tif (!__testeof)\n \t  {\n \t    __c = *__beg;\n-\t    if (__gnu_cxx::__numeric_traits<_ValueT>::__is_signed)\n-\t      __negative = __c == __lit[__num_base::_S_iminus];\n+\t    __negative = __c == __lit[__num_base::_S_iminus];\n \t    if ((__negative || __c == __lit[__num_base::_S_iplus])\n \t\t&& !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t\t&& !(__c == __lc->_M_decimal_point))\n@@ -449,7 +448,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t  __found_grouping.reserve(32);\n \tbool __testfail = false;\n \tbool __testoverflow = false;\n-\tconst __unsigned_type __max = __negative\n+\tconst __unsigned_type __max =\n+\t  (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)\n \t  ? -__gnu_cxx::__numeric_traits<_ValueT>::__min\n \t  : __gnu_cxx::__numeric_traits<_ValueT>::__max;\n \tconst __unsigned_type __smax = __max / __base;\n@@ -552,7 +552,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t  }\n \telse if (__testoverflow)\n \t  {\n-\t    if (__negative)\n+\t    if (__negative\n+\t\t&& __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)\n \t      __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;\n \t    else\n \t      __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;"}, {"sha": "b31050895a598a65096057e4b9f8b1aec54b5c74", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/39802.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2daad65eaf4b3406d04d6ba4758b120312ed0a0c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F39802.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2daad65eaf4b3406d04d6ba4758b120312ed0a0c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F39802.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F39802.cc?ref=2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/39802\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  stringstream ss;\n+  const num_get<char>& ng = use_facet<num_get<char> >(ss.getloc()); \n+  ios_base::iostate err;\n+  iterator_type end;\n+  const string empty;\n+\n+  unsigned long ul0 = 1;\n+  const unsigned long ul1 = numeric_limits<unsigned long>::max();\n+\n+  ss << \"-0\";\n+  err = ios_base::goodbit;\n+  end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ul0 == 0 );\n+\n+  ss.clear();\n+  ss.str(empty);\n+  ss << \"-1\";\n+  err = ios_base::goodbit;\n+  end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ul0 == ul1 );\n+\n+  ss.clear();\n+  ss.str(empty);\n+  ss << '-' << ul1;\n+  err = ios_base::goodbit;\n+  end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ul0 == 1 );\n+\n+  ss.clear();\n+  ss.str(empty);\n+  ss << '-' << ul1 << '0';\n+  err = ios_base::goodbit;\n+  end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( ul0 == ul1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "67138d1dac54b08700cd555080973958af540cd6", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/39802.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2daad65eaf4b3406d04d6ba4758b120312ed0a0c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F39802.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2daad65eaf4b3406d04d6ba4758b120312ed0a0c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F39802.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F39802.cc?ref=2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/39802\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  wstringstream ss;\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(ss.getloc()); \n+  ios_base::iostate err;\n+  iterator_type end;\n+  const wstring empty;\n+\n+  unsigned long ul0 = 1;\n+  const unsigned long ul1 = numeric_limits<unsigned long>::max();\n+\n+  ss << L\"-0\";\n+  err = ios_base::goodbit;\n+  end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ul0 == 0 );\n+\n+  ss.clear();\n+  ss.str(empty);\n+  ss << L\"-1\";\n+  err = ios_base::goodbit;\n+  end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ul0 == ul1 );\n+\n+  ss.clear();\n+  ss.str(empty);\n+  ss << L'-' << ul1;\n+  err = ios_base::goodbit;\n+  end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ul0 == 1 );\n+\n+  ss.clear();\n+  ss.str(empty);\n+  ss << L'-' << ul1 << L'0';\n+  err = ios_base::goodbit;\n+  end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( ul0 == ul1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}