{"sha": "fe7eb484d309fefb7366b3838900e632da9dd234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3ZWI0ODRkMzA5ZmVmYjczNjZiMzgzODkwMGU2MzJkYTlkZDIzNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-21T02:24:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-21T02:24:17Z"}, "message": "re PR c++/49216 ([C++0x] ICE on compiling new-expression with braced-init-list for arrays)\n\n\tPR c++/49216\n\t* init.c (build_vec_init): Don't try to use a CONSTRUCTOR when\n\tbase is a pointer.\n\t* typeck2.c (process_init_constructor_array): Use {} for classes,\n\ttoo.\n\t* call.c (convert_like_real): Handle substitution failure.\n\nFrom-SVN: r175237", "tree": {"sha": "34baaeacaa4ccbe65ec562c07c7c1a3b6fbf5f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34baaeacaa4ccbe65ec562c07c7c1a3b6fbf5f48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe7eb484d309fefb7366b3838900e632da9dd234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7eb484d309fefb7366b3838900e632da9dd234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7eb484d309fefb7366b3838900e632da9dd234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7eb484d309fefb7366b3838900e632da9dd234/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "344bf2e1a23979f149b9489155dfe2ee74e38273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344bf2e1a23979f149b9489155dfe2ee74e38273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344bf2e1a23979f149b9489155dfe2ee74e38273"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "a48f9c5a6b7160112f3d7a475f404788e5b1c10d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe7eb484d309fefb7366b3838900e632da9dd234", "patch": "@@ -1,5 +1,12 @@\n 2011-06-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49216\n+\t* init.c (build_vec_init): Don't try to use a CONSTRUCTOR when\n+\tbase is a pointer.\n+\t* typeck2.c (process_init_constructor_array): Use {} for classes,\n+\ttoo.\n+\t* call.c (convert_like_real): Handle substitution failure.\n+\n \tPR c++/48138\n \t* pt.c (canonicalize_type_argument): New.\n \t(convert_template_argument, unify): Use it."}, {"sha": "caf95b077ce4b8d7883644c73244d7bfe07b215f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=fe7eb484d309fefb7366b3838900e632da9dd234", "patch": "@@ -5621,7 +5621,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    expr = build_cplus_new (totype, expr, complain);\n \n \t    /* Remember that this was list-initialization.  */\n-\t    if (convs->check_narrowing)\n+\t    if (convs->check_narrowing && expr != error_mark_node)\n \t      TARGET_EXPR_LIST_INIT_P (expr) = true;\n \t  }\n "}, {"sha": "3c347a4521f983a2c84914731bf5f0185c9a1754", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=fe7eb484d309fefb7366b3838900e632da9dd234", "patch": "@@ -3082,8 +3082,9 @@ build_vec_init (tree base, tree maxindex, tree init,\n       unsigned HOST_WIDE_INT idx;\n       tree field, elt;\n       /* Should we try to create a constant initializer?  */\n-      bool try_const = (literal_type_p (inner_elt_type)\n-\t\t\t|| TYPE_HAS_CONSTEXPR_CTOR (inner_elt_type));\n+      bool try_const = (TREE_CODE (atype) == ARRAY_TYPE\n+\t\t\t&& (literal_type_p (inner_elt_type)\n+\t\t\t    || TYPE_HAS_CONSTEXPR_CTOR (inner_elt_type)));\n       bool saw_non_const = false;\n       bool saw_const = false;\n       /* If we're initializing a static array, we want to do static"}, {"sha": "ff2949c510d2fed81206f84e199720905ba56a5b", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=fe7eb484d309fefb7366b3838900e632da9dd234", "patch": "@@ -1051,14 +1051,9 @@ process_init_constructor_array (tree type, tree init,\n \tif (type_build_ctor_call (TREE_TYPE (type)))\n \t  {\n \t    /* If this type needs constructors run for default-initialization,\n-\t      we can't rely on the back end to do it for us, so build up\n-\t      TARGET_EXPRs.  If the type in question is a class, just build\n-\t      one up; if it's an array, recurse.  */\n-\t    if (MAYBE_CLASS_TYPE_P (TREE_TYPE (type)))\n-              next = build_functional_cast (TREE_TYPE (type), NULL_TREE,\n-                                            complain);\n-\t    else\n-\t      next = build_constructor (init_list_type_node, NULL);\n+\t      we can't rely on the back end to do it for us, so make the\n+\t      initialization explicit by list-initializing from {}.  */\n+\t    next = build_constructor (init_list_type_node, NULL);\n \t    next = digest_init (TREE_TYPE (type), next, complain);\n \t  }\n \telse if (!zero_init_p (TREE_TYPE (type)))"}, {"sha": "3da23b1bf84b004ff2172c70103952b8c81d88cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe7eb484d309fefb7366b3838900e632da9dd234", "patch": "@@ -1,3 +1,8 @@\n+2011-06-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49216\n+\t* g++.dg/cpp0x/initlist53.C: New.\n+\n 2011-06-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "750ebbacb96c1ef2688edd9a38bafb941e5b96bc", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist53.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7eb484d309fefb7366b3838900e632da9dd234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist53.C?ref=fe7eb484d309fefb7366b3838900e632da9dd234", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/49216\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+#include <initializer_list>\n+extern \"C\" void abort();\n+\n+bool constructed;\n+\n+struct A\n+{\n+  A(std::initializer_list<int>) { constructed = true; }\n+};\n+\n+int main() {\n+  new A[1]{};\n+  int *p = new int[1]{};\n+  if (p[0] != 0 || !constructed)\n+    abort();\n+}"}]}