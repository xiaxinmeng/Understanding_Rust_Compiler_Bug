{"sha": "a4d674fc530e3a274c86887967eb820a664787da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRkNjc0ZmM1MzBlM2EyNzRjODY4ODc5NjdlYjgyMGE2NjQ3ODdkYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-04-04T19:19:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-04-04T19:19:30Z"}, "message": "re PR c++/25185 (deep typedef substitution in error message)\n\n        PR c++/25185\n        * error.c (dump_template_bindings): Look through typedefs in\n        typename results.\n        (dump_type) [TYPENAME_TYPE]: Print the typedef name if any.\n        (find_typenames_r): Also collect typedefs.\n        * pt.c (unify): Strip typedefs.\n\nFrom-SVN: r145550", "tree": {"sha": "7b4bc71795218eb2c8c2cae02b63194fbc85ad9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b4bc71795218eb2c8c2cae02b63194fbc85ad9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4d674fc530e3a274c86887967eb820a664787da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d674fc530e3a274c86887967eb820a664787da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d674fc530e3a274c86887967eb820a664787da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d674fc530e3a274c86887967eb820a664787da/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63787194e1a9a90650caf40922dc09b31a0501bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63787194e1a9a90650caf40922dc09b31a0501bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63787194e1a9a90650caf40922dc09b31a0501bd"}], "stats": {"total": 82, "additions": 63, "deletions": 19}, "files": [{"sha": "688b1a8441e5504244038fd6d04b0609603ba596", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a4d674fc530e3a274c86887967eb820a664787da", "patch": "@@ -1,5 +1,12 @@\n 2009-04-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/25185\n+\t* error.c (dump_template_bindings): Look through typedefs in\n+\ttypename results.\n+\t(dump_type) [TYPENAME_TYPE]: Print the typedef name if any.\n+\t(find_typenames_r): Also collect typedefs.\n+\t* pt.c (unify): Strip typedefs.\n+\n \tPR c++/39608\n \t* semantics.c (finish_id_expression): Don't assume a dependent\n \tmember of the current instantiation isn't a valid integral"}, {"sha": "8b31980331f1987199194905c6f9b8c11cf796b6", "filename": "gcc/cp/error.c", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a4d674fc530e3a274c86887967eb820a664787da", "patch": "@@ -275,11 +275,15 @@ dump_template_bindings (tree parms, tree args, VEC(tree,gc)* typenames)\n     {\n       if (need_comma)\n \tpp_separate_with_comma (cxx_pp);\n-      dump_type (t, 0);\n+      dump_type (t, TFF_PLAIN_IDENTIFIER);\n       pp_cxx_whitespace (cxx_pp);\n       pp_equal (cxx_pp);\n       pp_cxx_whitespace (cxx_pp);\n-      dump_type (tsubst (t, args, tf_none, NULL_TREE), 0);\n+      t = tsubst (t, args, tf_none, NULL_TREE);\n+      /* Strip typedefs.  We can't just use TFF_CHASE_TYPEDEF because\n+\t pp_simple_type_specifier doesn't know about it.  */\n+      t = canonical_type_variant (t);\n+      dump_type (t, TFF_PLAIN_IDENTIFIER);\n     }\n }\n \n@@ -390,6 +394,12 @@ dump_type (tree t, int flags)\n       break;\n     }\n     case TYPENAME_TYPE:\n+      if (! (flags & TFF_CHASE_TYPEDEF)\n+\t  && DECL_ORIGINAL_TYPE (TYPE_NAME (t)))\n+\t{\n+\t  dump_decl (TYPE_NAME (t), TFF_PLAIN_IDENTIFIER);\n+\t  break;\n+\t}\n       pp_cxx_cv_qualifier_seq (cxx_pp, t);\n       pp_cxx_identifier (cxx_pp,\n \t\t\t TYPENAME_IS_ENUM_P (t) ? \"enum\"\n@@ -1089,7 +1099,7 @@ dump_template_decl (tree t, int flags)\n }\n \n /* find_typenames looks through the type of the function template T\n-   and returns a VEC containing any TYPENAME_TYPEs it finds.  */\n+   and returns a VEC containing any typedefs or TYPENAME_TYPEs it finds.  */\n \n struct find_typenames_t\n {\n@@ -1098,26 +1108,27 @@ struct find_typenames_t\n };\n \n static tree\n-find_typenames_r (tree *tp, int *walk_subtrees, void *data)\n+find_typenames_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED, void *data)\n {\n   struct find_typenames_t *d = (struct find_typenames_t *)data;\n+  tree mv = NULL_TREE;\n+\n+  if (TYPE_P (*tp) && is_typedef_decl (TYPE_NAME (*tp)))\n+    /* Add the type of the typedef without any additional cv-quals.  */\n+    mv = TREE_TYPE (TYPE_NAME (*tp));\n+  else if (TREE_CODE (*tp) == TYPENAME_TYPE)\n+    /* Add the typename without any cv-qualifiers.  */\n+    mv = TYPE_MAIN_VARIANT (*tp);\n+\n+  if (mv && (mv == *tp || !pointer_set_insert (d->p_set, mv)))\n+    VEC_safe_push (tree, gc, d->typenames, mv);\n \n-  if (TREE_CODE (*tp) == TYPENAME_TYPE)\n-    {\n-      /* Discard any cv-qualifiers.  */\n-      tree mv = TYPE_MAIN_VARIANT (*tp);\n-      if (mv == *tp || !pointer_set_insert (d->p_set, mv))\n-\tVEC_safe_push (tree, gc, d->typenames, mv);\n-      *walk_subtrees = 0;\n-    }\n   /* Search into class template arguments, which cp_walk_subtrees\n      doesn't do.  */\n-  else if (CLASS_TYPE_P (*tp) && CLASSTYPE_TEMPLATE_INFO (*tp))\n-    {\n-      cp_walk_tree (&CLASSTYPE_TI_ARGS (*tp), find_typenames_r,\n-\t\t    data, d->p_set);\n-      *walk_subtrees = 0;\n-    }\n+  if (CLASS_TYPE_P (*tp) && CLASSTYPE_TEMPLATE_INFO (*tp))\n+    cp_walk_tree (&CLASSTYPE_TI_ARGS (*tp), find_typenames_r,\n+\t\t  data, d->p_set);\n+\n   return NULL_TREE;\n }\n "}, {"sha": "3e3d4f250f28862c0ac86f3c011a29602e138be6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a4d674fc530e3a274c86887967eb820a664787da", "patch": "@@ -13538,6 +13538,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t     ISO C++, so we can do as we please here.  */\n \t  if (variably_modified_type_p (arg, NULL_TREE))\n \t    return 1;\n+\n+\t  /* Strip typedefs as in convert_template_argument.  */\n+\t  arg = canonical_type_variant (arg);\n \t}\n \n       /* If ARG is a parameter pack or an expansion, we cannot unify"}, {"sha": "57947f5ad6571f976187e0184827c7058bb0b8fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a4d674fc530e3a274c86887967eb820a664787da", "patch": "@@ -1,3 +1,8 @@\n+2009-04-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/25185\n+\t* g++.dg/template/error38.C: Add more tests.\n+\n 2009-04-04  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37614"}, {"sha": "e26345f29a3ae4d720667865c1fe2ea6844f0c59", "filename": "gcc/testsuite/g++.dg/template/error38.C", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d674fc530e3a274c86887967eb820a664787da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror38.C?ref=a4d674fc530e3a274c86887967eb820a664787da", "patch": "@@ -1,19 +1,37 @@\n-// Testcase for printing typename bindings as well as template args\n+// Testcase for printing typename/typedef bindings as well as template args\n // in diagnostics (PR c++/25185)\n \n template <class T>\n struct A {\n   typename T::type f();\t\t// { dg-message \"typename T::type = void*\" }\n   void f(int i = 0);\t\t// { dg-message \"\" }\n+\n+  typedef typename T::type mytype;\n+  mytype g();\t\t\t// { dg-message \"mytype = void*\" }\n+  void g(int i = 0);\t\t// { dg-message \"\" }\n };\n \n struct B\n {\n   typedef void* type;\n };\n \n+// Also make sure that deduced template arguments get canonicalized.\n+\n+template <class T>\n+void f (T &t);\t\t\t// { dg-message \"T = int\" }\n+\n+template <class T>\n+void f (T &t, int = 0);\t\t// { dg-message \"\" }\n+\n+typedef int myint;\n+myint i;\n+\n int main()\n {\n   A<B> a;\n   a.f();\t\t\t// { dg-error \"\" }\n+  a.g();\t\t\t// { dg-error \"\" }\n+\n+  f(i);\t\t\t\t// { dg-error \"\" }\n }"}]}