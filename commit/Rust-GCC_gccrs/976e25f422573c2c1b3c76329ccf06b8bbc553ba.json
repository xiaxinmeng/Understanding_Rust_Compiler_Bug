{"sha": "976e25f422573c2c1b3c76329ccf06b8bbc553ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2ZTI1ZjQyMjU3M2MyYzFiM2M3NjMyOWNjZjA2YjhiYmM1NTNiYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-08-09T23:39:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-09T23:39:16Z"}, "message": "stl_bvector.h (vector<bool>::_M_copy_aligned): New.\n\n2006-08-09  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_bvector.h (vector<bool>::_M_copy_aligned): New.\n\t(vector<bool>::vector(const vector&), operator=(const vector&),\n\treserve(size_type), _M_fill_insert(iterator, size_type, bool),\n\t_M_insert_range(iterator, _ForwardIterator, _ForwardIterator,\n\tstd::forward_iterator_tag), _M_insert_aux(iterator, bool)): Use it.\n\t* testsuite/performance/23_containers/copy_construct/\n\tvector_bool.cc: New.\n\n\t* testsuite/23_containers/vector/bool/cons/1.cc: New.\n\t* testsuite/23_containers/vector/bool/cons/2.cc: Likewise.\n\n\t* include/bits/stl_bvector.h (vector<bool>::_M_fill): Remove.\n\t(fill(_Bit_iterator, _Bit_iterator, const bool&)): New.\n\t(vector<bool>::_M_fill_insert(iterator, size_type, bool)): Adjust.\n\n\t* include/bits/stl_bvector.h (_M_initialize_range(_InputIterator,\n\t_InputIterator, std::input_iterator_tag)): Remove redundant\n\tassignments.\n\n\t* include/bits/stl_algo.h (find(istreambuf_iterator<>,\n\tistreambuf_iterator<>, _CharT)): Adjust signature.\n\t* include/bits/streambuf_iterator.h: Likewise.\n\t* include/std/std_streambuf.h: Likewise.\n\nFrom-SVN: r116049", "tree": {"sha": "bdd424a1faf4485407949da30fe1da76b5adad9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdd424a1faf4485407949da30fe1da76b5adad9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/976e25f422573c2c1b3c76329ccf06b8bbc553ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976e25f422573c2c1b3c76329ccf06b8bbc553ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976e25f422573c2c1b3c76329ccf06b8bbc553ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976e25f422573c2c1b3c76329ccf06b8bbc553ba/comments", "author": null, "committer": null, "parents": [{"sha": "80b3502bcb2084033db37fda38458d0442a37f01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b3502bcb2084033db37fda38458d0442a37f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80b3502bcb2084033db37fda38458d0442a37f01"}], "stats": {"total": 504, "additions": 474, "deletions": 30}, "files": [{"sha": "6fc3dbaa545170efad15e23b98c7bc68c8fd4163", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=976e25f422573c2c1b3c76329ccf06b8bbc553ba", "patch": "@@ -1,3 +1,29 @@\n+2006-08-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_bvector.h (vector<bool>::_M_copy_aligned): New.\n+\t(vector<bool>::vector(const vector&), operator=(const vector&),\n+\treserve(size_type), _M_fill_insert(iterator, size_type, bool),\n+\t_M_insert_range(iterator, _ForwardIterator, _ForwardIterator,\n+\tstd::forward_iterator_tag), _M_insert_aux(iterator, bool)): Use it.\n+\t* testsuite/performance/23_containers/copy_construct/\n+\tvector_bool.cc: New.\n+\n+\t* testsuite/23_containers/vector/bool/cons/1.cc: New.\n+\t* testsuite/23_containers/vector/bool/cons/2.cc: Likewise.\n+\n+\t* include/bits/stl_bvector.h (vector<bool>::_M_fill): Remove.\n+\t(fill(_Bit_iterator, _Bit_iterator, const bool&)): New.\n+\t(vector<bool>::_M_fill_insert(iterator, size_type, bool)): Adjust.\n+\n+\t* include/bits/stl_bvector.h (_M_initialize_range(_InputIterator,\n+\t_InputIterator, std::input_iterator_tag)): Remove redundant\n+\tassignments.\n+\n+\t* include/bits/stl_algo.h (find(istreambuf_iterator<>,\n+\tistreambuf_iterator<>, _CharT)): Adjust signature.\n+\t* include/bits/streambuf_iterator.h: Likewise.\n+\t* include/std/std_streambuf.h: Likewise.\t\n+\n 2006-08-09  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algobase.h (fill(const _Deque_iterator<>&,"}, {"sha": "582b2721dfa2ddc551e56fee828e8a73eb5e7bf6", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=976e25f422573c2c1b3c76329ccf06b8bbc553ba", "patch": "@@ -302,7 +302,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT>\n     typename __enable_if<istreambuf_iterator<_CharT>,\n \t\t\t __is_char<_CharT>::__value>::__type\n-    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, _CharT);\n+    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n+\t const _CharT&);\n \n   /**\n    *  @brief Find the first occurrence of a value in a sequence."}, {"sha": "d728ce5bf8c3d6f75194e54203859930ab1fafad", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=976e25f422573c2c1b3c76329ccf06b8bbc553ba", "patch": "@@ -354,6 +354,20 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n   operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)\n   { return __x + __n; }\n \n+  inline void\n+  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)\n+  {\n+    if (__first._M_p != __last._M_p)\n+      {\n+\tstd::__fill<true>::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);\n+\tstd::__fill<true>::fill(__first, _Bit_iterator(__first._M_p + 1, 0),\n+\t\t\t\t__x);\n+\tstd::__fill<true>::fill(_Bit_iterator(__last._M_p, 0), __last, __x);\n+      }\n+    else\n+      std::__fill<true>::fill(__first, __last, __x);\n+  }\n+\n   template<class _Alloc>\n     struct _Bvector_base\n     {\n@@ -479,7 +493,7 @@ template<typename _Alloc>\n     : _Base(__x._M_get_Bit_allocator())\n     {\n       _M_initialize(__x.size());\n-      std::copy(__x.begin(), __x.end(), this->_M_impl._M_start);\n+      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);\n     }\n \n     template<class _InputIterator>\n@@ -503,8 +517,8 @@ template<typename _Alloc>\n \t  this->_M_deallocate();\n \t  _M_initialize(__x.size());\n \t}\n-      std::copy(__x.begin(), __x.end(), begin());\n-      this->_M_impl._M_finish = begin() + difference_type(__x.size());\n+      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),\n+\t\t\t\t\t\tbegin());\n       return *this;\n     }\n \n@@ -612,8 +626,8 @@ template<typename _Alloc>\n       if (this->capacity() < __n)\n \t{\n \t  _Bit_type* __q = this->_M_allocate(__n);\n-\t  this->_M_impl._M_finish = std::copy(begin(), end(), \n-\t\t\t\t\t      iterator(__q, 0));\n+\t  this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),\n+\t\t\t\t\t\t    iterator(__q, 0));\n \t  this->_M_deallocate();\n \t  this->_M_impl._M_start = iterator(__q, 0);\n \t  this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)\n@@ -745,18 +759,14 @@ template<typename _Alloc>\n \n    \n   protected:\n-\n-    void\n-    _M_fill(iterator __first, iterator __last, bool __x)\n+    // Precondition: __first._M_offset == 0 && __result._M_offset == 0.\n+    iterator\n+    _M_copy_aligned(const_iterator __first, const_iterator __last,\n+\t\t    iterator __result)\n     {\n-      if (__first._M_p != __last._M_p)\n-\t{\n-\t  std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);\n-\t  std::fill(__first, iterator(__first._M_p + 1, 0), __x);\n-\t  std::fill(iterator(__last._M_p, 0), __last, __x);\n-\t}\n-      else\n-\tstd::fill(__first, __last, __x);\n+      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);\n+      return std::copy(const_iterator(__last._M_p, 0), __last,\n+\t\t       iterator(__q, 0));\n     }\n \n     void\n@@ -792,9 +802,6 @@ template<typename _Alloc>\n       _M_initialize_range(_InputIterator __first, _InputIterator __last,\n \t\t\t  std::input_iterator_tag)\n       {\n-\tthis->_M_impl._M_start = iterator();\n-\tthis->_M_impl._M_finish = iterator();\n-\tthis->_M_impl._M_end_of_storage = 0;\n \tfor (; __first != __last; ++__first)\n \t  push_back(*__first);\n       }\n@@ -892,15 +899,16 @@ template<typename _Alloc>\n \t{\n \t  std::copy_backward(__position, end(),\n \t\t\t     this->_M_impl._M_finish + difference_type(__n));\n-\t  _M_fill(__position, __position + difference_type(__n), __x);\n+\t  std::fill(__position, __position + difference_type(__n), __x);\n \t  this->_M_impl._M_finish += difference_type(__n);\n \t}\n       else\n \t{\n \t  const size_type __len = size() + std::max(size(), __n);\n \t  _Bit_type * __q = this->_M_allocate(__len);\n-\t  iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n-\t  _M_fill(__i, __i + difference_type(__n), __x);\n+\t  iterator __i = _M_copy_aligned(begin(), __position,\n+\t\t\t\t\t iterator(__q, 0));\n+\t  std::fill(__i, __i + difference_type(__n), __x);\n \t  this->_M_impl._M_finish = std::copy(__position, end(),\n \t\t\t\t\t      __i + difference_type(__n));\n \t  this->_M_deallocate();\n@@ -943,8 +951,8 @@ template<typename _Alloc>\n \t      {\n \t\tconst size_type __len = size() + std::max(size(), __n);\n \t\t_Bit_type * __q = this->_M_allocate(__len);\n-\t\titerator __i = std::copy(begin(), __position,\n-\t\t\t\t\t iterator(__q, 0));\n+\t\titerator __i = _M_copy_aligned(begin(), __position,\n+\t\t\t\t\t       iterator(__q, 0));\n \t\t__i = std::copy(__first, __last, __i);\n \t\tthis->_M_impl._M_finish = std::copy(__position, end(), __i);\n \t\tthis->_M_deallocate();\n@@ -972,7 +980,8 @@ template<typename _Alloc>\n \t  const size_type __len = size() ? 2 * size()\n \t                                 : static_cast<size_type>(_S_word_bit);\n \t  _Bit_type * __q = this->_M_allocate(__len);\n-\t  iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n+\t  iterator __i = _M_copy_aligned(begin(), __position,\n+\t\t\t\t\t iterator(__q, 0));\n \t  *__i++ = __x;\n \t  this->_M_impl._M_finish = std::copy(__position, end(), __i);\n \t  this->_M_deallocate();"}, {"sha": "46915314a7e602517ff2beb20ceb1f03b0ed4d7e", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=976e25f422573c2c1b3c76329ccf06b8bbc553ba", "patch": "@@ -83,7 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tfriend typename __enable_if<istreambuf_iterator<_CharT2>,\n \t                            __is_char<_CharT2>::__value>::__type\n \tfind(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n-\t     _CharT2);\n+\t     const _CharT2&);\n \n     private:\n       // 24.5.3 istreambuf_iterator\n@@ -363,7 +363,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     typename __enable_if<istreambuf_iterator<_CharT>,\n \t\t\t __is_char<_CharT>::__value>::__type\n     find(istreambuf_iterator<_CharT> __first,\n-\t istreambuf_iterator<_CharT> __last, _CharT __val)\n+\t istreambuf_iterator<_CharT> __last, const _CharT& __val)\n     {\n       typedef istreambuf_iterator<_CharT>                  __is_iterator_type;\n       typedef typename __is_iterator_type::traits_type     traits_type;"}, {"sha": "40ef0d819733929e9e8c903cfe7130bae562b5e5", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=976e25f422573c2c1b3c76329ccf06b8bbc553ba", "patch": "@@ -67,7 +67,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT>\n     typename __enable_if<istreambuf_iterator<_CharT>,\n \t\t\t __is_char<_CharT>::__value>::__type\n-    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, _CharT);\n+    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n+\t const _CharT&);\n \n   /**\n    *  @brief  The actual work of input and output (interface).\n@@ -174,7 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         friend typename __enable_if<istreambuf_iterator<_CharT2>,\n \t\t\t\t    __is_char<_CharT2>::__value>::__type\n         find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n-\t     _CharT2);\n+\t     const _CharT2&);\n \n       template<typename _CharT2, typename _Traits2>\n         friend basic_istream<_CharT2, _Traits2>&"}, {"sha": "0eb8da1c1c069080acb1e10d15086c5c247b8b03", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/cons/1.cc", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2F1.cc?ref=976e25f422573c2c1b3c76329ccf06b8bbc553ba", "patch": "@@ -0,0 +1,179 @@\n+// 2006-08-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.5 vector<bool> copy construct\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+const bool A1[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n+\t\t   0, 1, 1};\n+const bool A2[] = {1, 0, 1, 1, 1, 1, 1};\n+const bool A3[] = {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1};\n+const bool A4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t   1};\n+const bool A5[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 1, 1};\n+const bool A6[] = {1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1};\n+const bool A7[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1, 0};\n+const bool A8[] = {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 0};\n+const bool A9[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t   \n+\t\t   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 0};\n+\n+const unsigned N1 = sizeof(A1) / sizeof(bool);\n+const unsigned N2 = sizeof(A2) / sizeof(bool);\n+const unsigned N3 = sizeof(A3) / sizeof(bool);\n+const unsigned N4 = sizeof(A4) / sizeof(bool);\n+const unsigned N5 = sizeof(A5) / sizeof(bool);\n+const unsigned N6 = sizeof(A6) / sizeof(bool);\n+const unsigned N7 = sizeof(A7) / sizeof(bool);\n+const unsigned N8 = sizeof(A8) / sizeof(bool);\n+const unsigned N9 = sizeof(A9) / sizeof(bool);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::vector<bool>  vec_type;\n+\n+  const vec_type v1_ref(A1, A1 + N1);\n+  vec_type v1(v1_ref);\n+  VERIFY( v1.size() == v1_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v1_ref.begin()) );\n+ \n+  const vec_type v2_ref(A2, A2 + N2);\n+  vec_type v2(v2_ref);\n+  VERIFY( v2.size() == v2_ref.size() );\n+  VERIFY( std::equal(v2.begin(), v2.end(), v2_ref.begin()) );\n+\n+  const vec_type v3_ref(A3, A3 + N3);\n+  vec_type v3(v3_ref);\n+  VERIFY( v3.size() == v3_ref.size() );\n+  VERIFY( std::equal(v3.begin(), v3.end(), v3_ref.begin()) );\n+\n+  const vec_type v4_ref(A4, A4 + N4);\n+  vec_type v4(v4_ref);\n+  VERIFY( v4.size() == v4_ref.size() );\n+  VERIFY( std::equal(v4.begin(), v4.end(), v4_ref.begin()) );\n+\n+  const vec_type v5_ref(A5, A5 + N5);\n+  vec_type v5(v5_ref);\n+  VERIFY( v5.size() == v5_ref.size() );\n+  VERIFY( std::equal(v5.begin(), v5.end(), v5_ref.begin()) );\n+\n+  const vec_type v6_ref(A6, A6 + N6);\n+  vec_type v6(v6_ref);\n+  VERIFY( v6.size() == v6_ref.size() );\n+  VERIFY( std::equal(v6.begin(), v6.end(), v6_ref.begin()) );\n+\n+  const vec_type v7_ref(A7, A7 + N7);\n+  vec_type v7(v7_ref);\n+  VERIFY( v7.size() == v7_ref.size() );\n+  VERIFY( std::equal(v7.begin(), v7.end(), v7_ref.begin()) );\n+\n+  const vec_type v8_ref(A8, A8 + N8);\n+  vec_type v8(v8_ref);\n+  VERIFY( v8.size() == v8_ref.size() );\n+  VERIFY( std::equal(v8.begin(), v8.end(), v8_ref.begin()) );\n+  \n+  const vec_type v9_ref(A9, A9 + N9);\n+  vec_type v9(v9_ref);\n+  VERIFY( v9.size() == v9_ref.size() );\n+  VERIFY( std::equal(v9.begin(), v9.end(), v9_ref.begin()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "621c7d98d08f25bdff5250ca2b9db151a01be02e", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/cons/2.cc", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2F2.cc?ref=976e25f422573c2c1b3c76329ccf06b8bbc553ba", "patch": "@@ -0,0 +1,181 @@\n+// 2006-08-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.5 vector<bool> assignment operator\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+const bool A1[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n+\t\t   0, 1, 1};\n+const bool A2[] = {1, 0, 1, 1, 1, 1, 1};\n+const bool A3[] = {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1};\n+const bool A4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t   1};\n+const bool A5[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 1, 1};\n+const bool A6[] = {1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1};\n+const bool A7[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1, 0};\n+const bool A8[] = {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 0};\n+const bool A9[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t   \n+\t\t   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 0};\n+\n+const unsigned N1 = sizeof(A1) / sizeof(bool);\n+const unsigned N2 = sizeof(A2) / sizeof(bool);\n+const unsigned N3 = sizeof(A3) / sizeof(bool);\n+const unsigned N4 = sizeof(A4) / sizeof(bool);\n+const unsigned N5 = sizeof(A5) / sizeof(bool);\n+const unsigned N6 = sizeof(A6) / sizeof(bool);\n+const unsigned N7 = sizeof(A7) / sizeof(bool);\n+const unsigned N8 = sizeof(A8) / sizeof(bool);\n+const unsigned N9 = sizeof(A9) / sizeof(bool);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::vector<bool>  vec_type;\n+\n+  vec_type v1;\n+\n+  const vec_type v1_ref(A1, A1 + N1);\n+  v1 = v1_ref;\n+  VERIFY( v1.size() == v1_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v1_ref.begin()) );\n+ \n+  const vec_type v2_ref(A2, A2 + N2);\n+  v1 = v2_ref;\n+  VERIFY( v1.size() == v2_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v2_ref.begin()) );\n+\n+  const vec_type v3_ref(A3, A3 + N3);\n+  v1 = v3_ref;\n+  VERIFY( v1.size() == v3_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v3_ref.begin()) );\n+\n+  const vec_type v4_ref(A4, A4 + N4);\n+  v1 = v4_ref;\n+  VERIFY( v1.size() == v4_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v4_ref.begin()) );\n+\n+  const vec_type v5_ref(A5, A5 + N5);\n+  v1 = v5_ref;\n+  VERIFY( v1.size() == v5_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v5_ref.begin()) );\n+\n+  const vec_type v6_ref(A6, A6 + N6);\n+  v1 = v6_ref;\n+  VERIFY( v1.size() == v6_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v6_ref.begin()) );\n+\n+  const vec_type v7_ref(A7, A7 + N7);\n+  v1 = v7_ref;\n+  VERIFY( v1.size() == v7_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v7_ref.begin()) );\n+\n+  const vec_type v8_ref(A8, A8 + N8);\n+  v1 = v8_ref;\n+  VERIFY( v1.size() == v8_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v8_ref.begin()) );\n+  \n+  const vec_type v9_ref(A9, A9 + N9);\n+  v1 = v9_ref;\n+  VERIFY( v1.size() == v9_ref.size() );\n+  VERIFY( std::equal(v1.begin(), v1.end(), v9_ref.begin()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "43f74a5f2c9f24303e4d3164f9c5768c8624f1b9", "filename": "libstdc++-v3/testsuite/performance/23_containers/copy_construct/vector_bool.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcopy_construct%2Fvector_bool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976e25f422573c2c1b3c76329ccf06b8bbc553ba/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcopy_construct%2Fvector_bool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcopy_construct%2Fvector_bool.cc?ref=976e25f422573c2c1b3c76329ccf06b8bbc553ba", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  start_counters(time, resource);\n+  const std::vector<bool> ref(100000);\n+\n+  for (unsigned i = 0; i < 1000000; ++i)\n+    std::vector<bool> v(ref);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n+  return 0;\n+}"}]}