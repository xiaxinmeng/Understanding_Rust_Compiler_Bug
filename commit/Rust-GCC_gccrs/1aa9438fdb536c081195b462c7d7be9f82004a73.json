{"sha": "1aa9438fdb536c081195b462c7d7be9f82004a73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhOTQzOGZkYjUzNmMwODExOTViNDYyYzdkN2JlOWY4MjAwNGE3Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-05-26T10:05:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-05-26T10:05:05Z"}, "message": "re PR tree-optimization/49161 (Fix VRP on switch stmts)\n\n\tPR tree-optimization/49161\n\t* tree-vrp.c (struct case_info): New type.\n\t(compare_case_labels): Sort case_info structs instead of\n\ttrees, and not primarily by CASE_LABEL uids but by\n\tlabel_for_block indexes.\n\t(find_switch_asserts): Put case labels into struct case_info\n\tarray instead of TREE_VEC, adjust sorting, compare label_for_block\n\tvalues instead of CASE_LABELs.\n\n\t* gcc.c-torture/execute/pr49161.c: New test.\n\nFrom-SVN: r174270", "tree": {"sha": "8bca149e3f780e52c9095bee5dec1c249b4481f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bca149e3f780e52c9095bee5dec1c249b4481f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aa9438fdb536c081195b462c7d7be9f82004a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa9438fdb536c081195b462c7d7be9f82004a73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa9438fdb536c081195b462c7d7be9f82004a73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa9438fdb536c081195b462c7d7be9f82004a73/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0dd5327a4608ea3db17ed4af83d6b31d792c2768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd5327a4608ea3db17ed4af83d6b31d792c2768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd5327a4608ea3db17ed4af83d6b31d792c2768"}], "stats": {"total": 120, "additions": 96, "deletions": 24}, "files": [{"sha": "14503137b5aedb874c9d1ff0e2a2565e661661de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa9438fdb536c081195b462c7d7be9f82004a73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa9438fdb536c081195b462c7d7be9f82004a73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1aa9438fdb536c081195b462c7d7be9f82004a73", "patch": "@@ -1,3 +1,14 @@\n+2011-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/49161\n+\t* tree-vrp.c (struct case_info): New type.\n+\t(compare_case_labels): Sort case_info structs instead of\n+\ttrees, and not primarily by CASE_LABEL uids but by\n+\tlabel_for_block indexes.\n+\t(find_switch_asserts): Put case labels into struct case_info\n+\tarray instead of TREE_VEC, adjust sorting, compare label_for_block\n+\tvalues instead of CASE_LABELs.\n+\n 2011-05-26  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \t* config/arm/neon.md (\"orn<mode>3_neon\"): Canonicalize not."}, {"sha": "27f468d308c40703225640ca69472fd9724a6e8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa9438fdb536c081195b462c7d7be9f82004a73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa9438fdb536c081195b462c7d7be9f82004a73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aa9438fdb536c081195b462c7d7be9f82004a73", "patch": "@@ -1,3 +1,8 @@\n+2011-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/49161\n+\t* gcc.c-torture/execute/pr49161.c: New test.\n+\n 2011-05-26  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \t* gcc.target/arm/neon-vorn-vbic.c: New test."}, {"sha": "cc822dae8c3cde3bf0b235da1c8b191a5e271d3f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr49161.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa9438fdb536c081195b462c7d7be9f82004a73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49161.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa9438fdb536c081195b462c7d7be9f82004a73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49161.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49161.c?ref=1aa9438fdb536c081195b462c7d7be9f82004a73", "patch": "@@ -0,0 +1,46 @@\n+/* PR tree-optimization/49161 */\n+\n+extern void abort (void);\n+\n+int c;\n+\n+__attribute__((noinline, noclone)) void\n+bar (int x)\n+{\n+  if (x != c++)\n+    abort ();\n+}\n+\n+__attribute__((noinline, noclone)) void\n+foo (int x)\n+{\n+  switch (x)\n+    {\n+    case 3: goto l1;\n+    case 4: goto l2;\n+    case 6: goto l3;\n+    default: return;\n+    }\n+l1:\n+  goto l4;\n+l2:\n+  goto l4;\n+l3:\n+  bar (-1);\n+l4:\n+  bar (0);\n+  if (x != 4)\n+    bar (1);\n+  if (x != 3)\n+    bar (-1);\n+  bar (2);\n+}\n+\n+int\n+main ()\n+{\n+  foo (3);\n+  if (c != 3)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "8fcf629addecac26ba0e8ba1508321b3ee7c1a48", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa9438fdb536c081195b462c7d7be9f82004a73/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa9438fdb536c081195b462c7d7be9f82004a73/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1aa9438fdb536c081195b462c7d7be9f82004a73", "patch": "@@ -4673,28 +4673,35 @@ find_conditional_asserts (basic_block bb, gimple last)\n   return need_assert;\n }\n \n-/* Compare two case labels sorting first by the destination label uid\n+struct case_info\n+{\n+  tree expr;\n+  basic_block bb;\n+};\n+\n+/* Compare two case labels sorting first by the destination bb index\n    and then by the case value.  */\n \n static int\n compare_case_labels (const void *p1, const void *p2)\n {\n-  const_tree const case1 = *(const_tree const*)p1;\n-  const_tree const case2 = *(const_tree const*)p2;\n-  unsigned int uid1 = DECL_UID (CASE_LABEL (case1));\n-  unsigned int uid2 = DECL_UID (CASE_LABEL (case2));\n+  const struct case_info *ci1 = (const struct case_info *) p1;\n+  const struct case_info *ci2 = (const struct case_info *) p2;\n+  int idx1 = ci1->bb->index;\n+  int idx2 = ci2->bb->index;\n \n-  if (uid1 < uid2)\n+  if (idx1 < idx2)\n     return -1;\n-  else if (uid1 == uid2)\n+  else if (idx1 == idx2)\n     {\n       /* Make sure the default label is first in a group.  */\n-      if (!CASE_LOW (case1))\n+      if (!CASE_LOW (ci1->expr))\n \treturn -1;\n-      else if (!CASE_LOW (case2))\n+      else if (!CASE_LOW (ci2->expr))\n \treturn 1;\n       else\n-        return tree_int_cst_compare (CASE_LOW (case1), CASE_LOW (case2));\n+\treturn tree_int_cst_compare (CASE_LOW (ci1->expr),\n+\t\t\t\t     CASE_LOW (ci2->expr));\n     }\n   else\n     return 1;\n@@ -4715,8 +4722,8 @@ find_switch_asserts (basic_block bb, gimple last)\n   gimple_stmt_iterator bsi;\n   tree op;\n   edge e;\n-  tree vec2;\n-  size_t n = gimple_switch_num_labels(last);\n+  struct case_info *ci;\n+  size_t n = gimple_switch_num_labels (last);\n #if GCC_VERSION >= 4000\n   unsigned int idx;\n #else\n@@ -4731,36 +4738,38 @@ find_switch_asserts (basic_block bb, gimple last)\n     return false;\n \n   /* Build a vector of case labels sorted by destination label.  */\n-  vec2 = make_tree_vec (n);\n+  ci = XNEWVEC (struct case_info, n);\n   for (idx = 0; idx < n; ++idx)\n-    TREE_VEC_ELT (vec2, idx) = gimple_switch_label (last, idx);\n-  qsort (&TREE_VEC_ELT (vec2, 0), n, sizeof (tree), compare_case_labels);\n+    {\n+      ci[idx].expr = gimple_switch_label (last, idx);\n+      ci[idx].bb = label_to_block (CASE_LABEL (ci[idx].expr));\n+    }\n+  qsort (ci, n, sizeof (struct case_info), compare_case_labels);\n \n   for (idx = 0; idx < n; ++idx)\n     {\n       tree min, max;\n-      tree cl = TREE_VEC_ELT (vec2, idx);\n+      tree cl = ci[idx].expr;\n+      basic_block cbb = ci[idx].bb;\n \n       min = CASE_LOW (cl);\n       max = CASE_HIGH (cl);\n \n       /* If there are multiple case labels with the same destination\n \t we need to combine them to a single value range for the edge.  */\n-      if (idx + 1 < n\n-\t  && CASE_LABEL (cl) == CASE_LABEL (TREE_VEC_ELT (vec2, idx + 1)))\n+      if (idx + 1 < n && cbb == ci[idx + 1].bb)\n \t{\n \t  /* Skip labels until the last of the group.  */\n \t  do {\n \t    ++idx;\n-\t  } while (idx < n\n-\t\t   && CASE_LABEL (cl) == CASE_LABEL (TREE_VEC_ELT (vec2, idx)));\n+\t  } while (idx < n && cbb == ci[idx].bb);\n \t  --idx;\n \n \t  /* Pick up the maximum of the case label range.  */\n-\t  if (CASE_HIGH (TREE_VEC_ELT (vec2, idx)))\n-\t    max = CASE_HIGH (TREE_VEC_ELT (vec2, idx));\n+\t  if (CASE_HIGH (ci[idx].expr))\n+\t    max = CASE_HIGH (ci[idx].expr);\n \t  else\n-\t    max = CASE_LOW (TREE_VEC_ELT (vec2, idx));\n+\t    max = CASE_LOW (ci[idx].expr);\n \t}\n \n       /* Nothing to do if the range includes the default label until we\n@@ -4769,7 +4778,7 @@ find_switch_asserts (basic_block bb, gimple last)\n \tcontinue;\n \n       /* Find the edge to register the assert expr on.  */\n-      e = find_edge (bb, label_to_block (CASE_LABEL (cl)));\n+      e = find_edge (bb, cbb);\n \n       /* Register the necessary assertions for the operand in the\n \t SWITCH_EXPR.  */\n@@ -4787,6 +4796,7 @@ find_switch_asserts (basic_block bb, gimple last)\n \t}\n     }\n \n+  XDELETEVEC (ci);\n   return need_assert;\n }\n "}]}