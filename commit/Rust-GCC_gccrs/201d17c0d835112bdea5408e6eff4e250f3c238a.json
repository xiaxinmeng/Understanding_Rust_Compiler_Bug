{"sha": "201d17c0d835112bdea5408e6eff4e250f3c238a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxZDE3YzBkODM1MTEyYmRlYTU0MDhlNmVmZjRlMjUwZjNjMjM4YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-02-13T20:23:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-13T20:23:58Z"}, "message": "re PR c/82210 (Having _Alignas in a struct with VLAs causes writing to one array to overwrite another)\n\n\tPR c/82210\n\t* stor-layout.c (place_field): For variable length fields, adjust\n\toffset_align afterwards not just based on the field's alignment,\n\tbut also on the size.\n\n\t* gcc.c-torture/execute/pr82210.c: New test.\n\nFrom-SVN: r257635", "tree": {"sha": "92d22bae34f8e96ab555625eb004d08a97d5a9d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92d22bae34f8e96ab555625eb004d08a97d5a9d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/201d17c0d835112bdea5408e6eff4e250f3c238a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201d17c0d835112bdea5408e6eff4e250f3c238a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201d17c0d835112bdea5408e6eff4e250f3c238a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201d17c0d835112bdea5408e6eff4e250f3c238a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9aa484f5a9c74509ecf9722a518b962f0634dad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa484f5a9c74509ecf9722a518b962f0634dad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa484f5a9c74509ecf9722a518b962f0634dad2"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "c58d419556baf04198e8cb14830555ce62b12f8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201d17c0d835112bdea5408e6eff4e250f3c238a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201d17c0d835112bdea5408e6eff4e250f3c238a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=201d17c0d835112bdea5408e6eff4e250f3c238a", "patch": "@@ -1,5 +1,10 @@\n 2018-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/82210\n+\t* stor-layout.c (place_field): For variable length fields, adjust\n+\toffset_align afterwards not just based on the field's alignment,\n+\tbut also on the size.\n+\n \tPR middle-end/84309\n \t* match.pd (pow(C,x) -> exp(log(C)*x)): Use exp2s and log2s instead\n \tof exps and logs in the use_exp2 case."}, {"sha": "5fdf81a9a25f567301215b57fff957aca23d8b40", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201d17c0d835112bdea5408e6eff4e250f3c238a/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201d17c0d835112bdea5408e6eff4e250f3c238a/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=201d17c0d835112bdea5408e6eff4e250f3c238a", "patch": "@@ -1622,6 +1622,30 @@ place_field (record_layout_info rli, tree field)\n \t= size_binop (PLUS_EXPR, rli->offset, DECL_SIZE_UNIT (field));\n       rli->bitpos = bitsize_zero_node;\n       rli->offset_align = MIN (rli->offset_align, desired_align);\n+\n+      if (!multiple_of_p (bitsizetype, DECL_SIZE (field),\n+\t\t\t  bitsize_int (rli->offset_align)))\n+\t{\n+\t  tree type = strip_array_types (TREE_TYPE (field));\n+\t  /* The above adjusts offset_align just based on the start of the\n+\t     field.  The field might not have a size that is a multiple of\n+\t     that offset_align though.  If the field is an array of fixed\n+\t     sized elements, assume there can be any multiple of those\n+\t     sizes.  If it is a variable length aggregate or array of\n+\t     variable length aggregates, assume worst that the end is\n+\t     just BITS_PER_UNIT aligned.  */\n+\t  if (TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST)\n+\t    {\n+\t      if (TREE_INT_CST_LOW (TYPE_SIZE (type)))\n+\t\t{\n+\t\t  unsigned HOST_WIDE_INT sz\n+\t\t    = least_bit_hwi (TREE_INT_CST_LOW (TYPE_SIZE (type)));\n+\t\t  rli->offset_align = MIN (rli->offset_align, sz);\n+\t\t}\n+\t    }\n+\t  else\n+\t    rli->offset_align = MIN (rli->offset_align, BITS_PER_UNIT);\n+\t}\n     }\n   else if (targetm.ms_bitfield_layout_p (rli->t))\n     {"}, {"sha": "19c0832f2cd65438483113f91b3046deafb03a38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201d17c0d835112bdea5408e6eff4e250f3c238a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201d17c0d835112bdea5408e6eff4e250f3c238a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=201d17c0d835112bdea5408e6eff4e250f3c238a", "patch": "@@ -1,5 +1,8 @@\n 2018-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/82210\n+\t* gcc.c-torture/execute/pr82210.c: New test.\n+\n \tPR middle-end/84309\n \t* gcc.dg/pr84309-2.c: New test.\n "}, {"sha": "48fb715570ad80af565d52f22234d7b1cb9f3b7d", "filename": "gcc/testsuite/gcc.c-torture/execute/pr82210.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201d17c0d835112bdea5408e6eff4e250f3c238a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr82210.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201d17c0d835112bdea5408e6eff4e250f3c238a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr82210.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr82210.c?ref=201d17c0d835112bdea5408e6eff4e250f3c238a", "patch": "@@ -0,0 +1,26 @@\n+/* PR c/82210 */\n+\n+void\n+foo (int size)\n+{\n+  int i;\n+  struct S {\n+    __attribute__((aligned (16))) struct T { short c; } a[size];\n+    int b[size];\n+  } s;\n+\n+  for (i = 0; i < size; i++)\n+    s.a[i].c = 0x1234;\n+  for (i = 0; i < size; i++)\n+    s.b[i] = 0;\n+  for (i = 0; i < size; i++)\n+    if (s.a[i].c != 0x1234 || s.b[i] != 0)\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo (15);\n+  return 0;\n+}"}]}