{"sha": "022e30c0b67a70587b22fc67f7a7e11e0600005f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIyZTMwYzBiNjdhNzA1ODdiMjJmYzY3ZjdhN2UxMWUwNjAwMDA1Zg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2010-07-10T14:57:25Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2010-07-10T14:57:25Z"}, "message": "re PR fortran/44773 (Unnecessary temporaries increase the runtime for channel.f90 by ~70%)\n\n2010-07-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/44773\n\t* trans-expr.c (arrayfunc_assign_needs_temporary): No temporary\n\tif the lhs has never been host associated, as well as not being\n\tuse associated, a pointer or a target.\n\t* resolve.c (resolve_variable): Mark variables that are host\n\tassociated.\n\t* gfortran.h: Add the host_assoc bit to the symbol_attribute\n\tstructure.\n\nFrom-SVN: r162038", "tree": {"sha": "80d52358390417552d8db01d6fc4df580bda732c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d52358390417552d8db01d6fc4df580bda732c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/022e30c0b67a70587b22fc67f7a7e11e0600005f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/022e30c0b67a70587b22fc67f7a7e11e0600005f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/022e30c0b67a70587b22fc67f7a7e11e0600005f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/022e30c0b67a70587b22fc67f7a7e11e0600005f/comments", "author": null, "committer": null, "parents": [{"sha": "ccf134c74c7d1bc0511fdc648c9996164c44437d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf134c74c7d1bc0511fdc648c9996164c44437d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf134c74c7d1bc0511fdc648c9996164c44437d"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "e4837b45300e177a9f94ab2d761efee3f963b6e5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/022e30c0b67a70587b22fc67f7a7e11e0600005f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/022e30c0b67a70587b22fc67f7a7e11e0600005f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=022e30c0b67a70587b22fc67f7a7e11e0600005f", "patch": "@@ -1,3 +1,14 @@\n+2010-07-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/44773\n+\t* trans-expr.c (arrayfunc_assign_needs_temporary): No temporary\n+\tif the lhs has never been host associated, as well as not being\n+\tuse associated, a pointer or a target.\n+\t* resolve.c (resolve_variable): Mark variables that are host\n+\tassociated.\n+\t* gfortran.h: Add the host_assoc bit to the symbol_attribute\n+\tstructure.\n+\n 2010-07-09  Janus Weil  <janus@gcc.gnu.org>\n \n \t* intrinsic.texi: Add documentation for SAME_TYPE_AS, EXTENDS_TYPE_OF,"}, {"sha": "60864807db62331ed16ea8153423a536c8cb90b3", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/022e30c0b67a70587b22fc67f7a7e11e0600005f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/022e30c0b67a70587b22fc67f7a7e11e0600005f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=022e30c0b67a70587b22fc67f7a7e11e0600005f", "patch": "@@ -682,7 +682,8 @@ typedef struct\n     use_assoc:1,\t\t/* Symbol has been use-associated.  */\n     use_only:1,\t\t\t/* Symbol has been use-associated, with ONLY.  */\n     use_rename:1,\t\t/* Symbol has been use-associated and renamed.  */\n-    imported:1;\t\t\t/* Symbol has been associated by IMPORT.  */\n+    imported:1,\t\t\t/* Symbol has been associated by IMPORT.  */\n+    host_assoc:1;\t\t/* Symbol has been host associated.  */ \n \n   unsigned in_namelist:1, in_common:1, in_equivalence:1;\n   unsigned function:1, subroutine:1, procedure:1;"}, {"sha": "98d1e079e50c408c05bcf74c7c8aa3e5fdad8d18", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/022e30c0b67a70587b22fc67f7a7e11e0600005f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/022e30c0b67a70587b22fc67f7a7e11e0600005f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=022e30c0b67a70587b22fc67f7a7e11e0600005f", "patch": "@@ -4772,6 +4772,15 @@ resolve_variable (gfc_expr *e)\n \tsym->entry_id = current_entry_id + 1;\n     }\n \n+  /* If a symbol has been host_associated mark it.  This is used latter,\n+     to identify if aliasing is possible via host association.  */\n+  if (sym->attr.flavor == FL_VARIABLE\n+\t&& gfc_current_ns->parent\n+\t&& (gfc_current_ns->parent == sym->ns\n+\t      || (gfc_current_ns->parent->parent\n+\t\t    && gfc_current_ns->parent->parent == sym->ns)))\n+    sym->attr.host_assoc = 1;\n+\n resolve_procedure:\n   if (t == SUCCESS && resolve_procedure_expression (e) == FAILURE)\n     t = FAILURE;"}, {"sha": "5f2eda29693d8e898f19e9aeabbad81a6c27baa5", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/022e30c0b67a70587b22fc67f7a7e11e0600005f/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/022e30c0b67a70587b22fc67f7a7e11e0600005f/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=022e30c0b67a70587b22fc67f7a7e11e0600005f", "patch": "@@ -4978,6 +4978,11 @@ arrayfunc_assign_needs_temporary (gfc_expr * expr1, gfc_expr * expr2)\n       if (!expr2->value.function.esym->attr.contained)\n \treturn false;\n \n+      /* A temporary is not needed if the lhs has never been host\n+\t associated and the procedure is contained.  */\n+      else if (!sym->attr.host_assoc)\n+\treturn false;\n+\n       /* A temporary is not needed if the variable is local and not\n \t a pointer, a target or a result.  */\n       if (sym->ns->parent"}]}