{"sha": "52e4630c51f511137b0018fe9f5661182fd5e668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlNDYzMGM1MWY1MTExMzdiMDAxOGZlOWY1NjYxMTgyZmQ1ZTY2OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-09-03T09:50:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-09-03T09:50:24Z"}, "message": "tree-ssa-pre.c (alloc_expression_id): Use quick_grow_cleared.\n\n2014-09-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (alloc_expression_id): Use quick_grow_cleared.\n\t(struct bb_bitmap_sets): Remove deferred member.\n\t(BB_DEFERRED): Remove.\n\t(defer_or_phi_translate_block): Remove.\n\t(compute_antic_aux): Remove deferring of blocks, assert\n\tproper iteration order.\n\t(compute_antic): Do not set BB_DEFERRED.\n\t(eliminate): Allocate el_avail of proper size initially.\n\nFrom-SVN: r214864", "tree": {"sha": "882e4e61d3ffa293a665c23587a84deb29bbd685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/882e4e61d3ffa293a665c23587a84deb29bbd685"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52e4630c51f511137b0018fe9f5661182fd5e668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e4630c51f511137b0018fe9f5661182fd5e668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e4630c51f511137b0018fe9f5661182fd5e668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e4630c51f511137b0018fe9f5661182fd5e668/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f44e960ea3c175eb8ec92b6872b8a2ef6775dba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f44e960ea3c175eb8ec92b6872b8a2ef6775dba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f44e960ea3c175eb8ec92b6872b8a2ef6775dba"}], "stats": {"total": 108, "additions": 26, "deletions": 82}, "files": [{"sha": "9f0828fe48e8f140b239df62cc36eeef29c5ce6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4630c51f511137b0018fe9f5661182fd5e668/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4630c51f511137b0018fe9f5661182fd5e668/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52e4630c51f511137b0018fe9f5661182fd5e668", "patch": "@@ -1,3 +1,14 @@\n+2014-09-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (alloc_expression_id): Use quick_grow_cleared.\n+\t(struct bb_bitmap_sets): Remove deferred member.\n+\t(BB_DEFERRED): Remove.\n+\t(defer_or_phi_translate_block): Remove.\n+\t(compute_antic_aux): Remove deferring of blocks, assert\n+\tproper iteration order.\n+\t(compute_antic): Do not set BB_DEFERRED.\n+\t(eliminate): Allocate el_avail of proper size initially.\n+\n 2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.h (FIRST_PARM_OFFSET): Set proper location"}, {"sha": "5f32b59096928c9e059d351325bc96f4da54e551", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 15, "deletions": 82, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e4630c51f511137b0018fe9f5661182fd5e668/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e4630c51f511137b0018fe9f5661182fd5e668/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=52e4630c51f511137b0018fe9f5661182fd5e668", "patch": "@@ -272,11 +272,10 @@ alloc_expression_id (pre_expr expr)\n     {\n       unsigned version = SSA_NAME_VERSION (PRE_EXPR_NAME (expr));\n       /* vec::safe_grow_cleared allocates no headroom.  Avoid frequent\n-\t re-allocations by using vec::reserve upfront.  There is no\n-\t vec::quick_grow_cleared unfortunately.  */\n+\t re-allocations by using vec::reserve upfront.  */\n       unsigned old_len = name_to_id.length ();\n       name_to_id.reserve (num_ssa_names - old_len);\n-      name_to_id.safe_grow_cleared (num_ssa_names);\n+      name_to_id.quick_grow_cleared (num_ssa_names);\n       gcc_assert (name_to_id[version] == 0);\n       name_to_id[version] = expr->id;\n     }\n@@ -427,10 +426,6 @@ typedef struct bb_bitmap_sets\n   /* True if we have visited this block during ANTIC calculation.  */\n   unsigned int visited : 1;\n \n-  /* True we have deferred processing this block during ANTIC\n-     calculation until its successor is processed.  */\n-  unsigned int deferred : 1;\n-\n   /* True when the block contains a call that might not return.  */\n   unsigned int contains_may_not_return_call : 1;\n } *bb_value_sets_t;\n@@ -444,7 +439,6 @@ typedef struct bb_bitmap_sets\n #define NEW_SETS(BB)\t((bb_value_sets_t) ((BB)->aux))->new_sets\n #define EXPR_DIES(BB)\t((bb_value_sets_t) ((BB)->aux))->expr_dies\n #define BB_VISITED(BB)\t((bb_value_sets_t) ((BB)->aux))->visited\n-#define BB_DEFERRED(BB) ((bb_value_sets_t) ((BB)->aux))->deferred\n #define BB_MAY_NOTRETURN(BB) ((bb_value_sets_t) ((BB)->aux))->contains_may_not_return_call\n \n \n@@ -2085,26 +2079,6 @@ static sbitmap has_abnormal_preds;\n \n static sbitmap changed_blocks;\n \n-/* Decide whether to defer a block for a later iteration, or PHI\n-   translate SOURCE to DEST using phis in PHIBLOCK.  Return false if we\n-   should defer the block, and true if we processed it.  */\n-\n-static bool\n-defer_or_phi_translate_block (bitmap_set_t dest, bitmap_set_t source,\n-\t\t\t      basic_block block, basic_block phiblock)\n-{\n-  if (!BB_VISITED (phiblock))\n-    {\n-      bitmap_set_bit (changed_blocks, block->index);\n-      BB_VISITED (block) = 0;\n-      BB_DEFERRED (block) = 1;\n-      return false;\n-    }\n-  else\n-    phi_translate_set (dest, source, block, phiblock);\n-  return true;\n-}\n-\n /* Compute the ANTIC set for BLOCK.\n \n    If succs(BLOCK) > 1 then\n@@ -2144,30 +2118,8 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n   else if (single_succ_p (block))\n     {\n       basic_block succ_bb = single_succ (block);\n-\n-      /* We trade iterations of the dataflow equations for having to\n-\t phi translate the maximal set, which is incredibly slow\n-\t (since the maximal set often has 300+ members, even when you\n-\t have a small number of blocks).\n-\t Basically, we defer the computation of ANTIC for this block\n-\t until we have processed it's successor, which will inevitably\n-\t have a *much* smaller set of values to phi translate once\n-\t clean has been run on it.\n-\t The cost of doing this is that we technically perform more\n-\t iterations, however, they are lower cost iterations.\n-\n-\t Timings for PRE on tramp3d-v4:\n-\t without maximal set fix: 11 seconds\n-\t with maximal set fix/without deferring: 26 seconds\n-\t with maximal set fix/with deferring: 11 seconds\n-     */\n-\n-      if (!defer_or_phi_translate_block (ANTIC_OUT, ANTIC_IN (succ_bb),\n-\t\t\t\t\tblock, succ_bb))\n-\t{\n-\t  changed = true;\n-\t  goto maybe_dump_sets;\n-\t}\n+      gcc_assert (BB_VISITED (succ_bb));\n+      phi_translate_set (ANTIC_OUT, ANTIC_IN (succ_bb), block, succ_bb);\n     }\n   /* If we have multiple successors, we take the intersection of all of\n      them.  Note that in the case of loop exit phi nodes, we may have\n@@ -2187,20 +2139,11 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n \t    worklist.quick_push (e->dest);\n \t}\n \n-      /* Of multiple successors we have to have visited one already.  */\n-      if (!first)\n-\t{\n-\t  bitmap_set_bit (changed_blocks, block->index);\n-\t  BB_VISITED (block) = 0;\n-\t  BB_DEFERRED (block) = 1;\n-\t  changed = true;\n-\t  goto maybe_dump_sets;\n-\t}\n+      /* Of multiple successors we have to have visited one already\n+         which is guaranteed by iteration order.  */\n+      gcc_assert (first != NULL);\n \n-      if (!gimple_seq_empty_p (phi_nodes (first)))\n-\tphi_translate_set (ANTIC_OUT, ANTIC_IN (first), block, first);\n-      else\n-\tbitmap_set_copy (ANTIC_OUT, ANTIC_IN (first));\n+      phi_translate_set (ANTIC_OUT, ANTIC_IN (first), block, first);\n \n       FOR_EACH_VEC_ELT (worklist, i, bprime)\n \t{\n@@ -2248,23 +2191,14 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n  maybe_dump_sets:\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      if (!BB_DEFERRED (block) || BB_VISITED (block))\n-\t{\n-\t  if (ANTIC_OUT)\n-\t    print_bitmap_set (dump_file, ANTIC_OUT, \"ANTIC_OUT\", block->index);\n+      if (ANTIC_OUT)\n+\tprint_bitmap_set (dump_file, ANTIC_OUT, \"ANTIC_OUT\", block->index);\n \n-\t  print_bitmap_set (dump_file, ANTIC_IN (block), \"ANTIC_IN\",\n-\t\t\t    block->index);\n+      print_bitmap_set (dump_file, ANTIC_IN (block), \"ANTIC_IN\",\n+\t\t\tblock->index);\n \n-\t  if (S)\n-\t    print_bitmap_set (dump_file, S, \"S\", block->index);\n-\t}\n-      else\n-\t{\n-\t  fprintf (dump_file,\n-\t\t   \"Block %d was deferred for a future iteration.\\n\",\n-\t\t   block->index);\n-\t}\n+      if (S)\n+\tprint_bitmap_set (dump_file, S, \"S\", block->index);\n     }\n   if (old)\n     bitmap_set_free (old);\n@@ -2446,7 +2380,6 @@ compute_antic (void)\n \t}\n \n       BB_VISITED (block) = 0;\n-      BB_DEFERRED (block) = 0;\n \n       /* While we are here, give empty ANTIC_IN sets to each block.  */\n       ANTIC_IN (block) = bitmap_set_new ();\n@@ -4498,7 +4431,7 @@ eliminate (bool do_pre)\n \n   el_to_remove.create (0);\n   el_todo = 0;\n-  el_avail.create (0);\n+  el_avail.create (num_ssa_names);\n   el_avail_stack.create (0);\n \n   eliminate_dom_walker (CDI_DOMINATORS,"}]}