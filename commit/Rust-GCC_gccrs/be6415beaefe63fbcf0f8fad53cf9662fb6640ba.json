{"sha": "be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2NDE1YmVhZWZlNjNmYmNmMGY4ZmFkNTNjZjk2NjJmYjY2NDBiYQ==", "commit": {"author": {"name": "Gary Benson", "email": "gbenson@redhat.com", "date": "2006-08-14T14:24:52Z"}, "committer": {"name": "Gary Benson", "email": "gary@gcc.gnu.org", "date": "2006-08-14T14:24:52Z"}, "message": "Thread.java (accessControlState): New field.\n\n2006-08-14  Gary Benson  <gbenson@redhat.com>\n\n\t* java/lang/Thread.java (accessControlState): New field.\n\t* java/security/VMAccessControlState.java: New file.\n\t* java/security/natVMAccessControlState.cc: Likewise.\n\t* java/security/VMAccessController.java\n\t(contexts, inGetContext): Removed.\n\t(pushContext, popContext, getContext): Use VMAccessControlState.\n\t* Makefile.am (nat_source_files): Updated.\n\t* sources.am, Makefile.in: Rebuilt.\n\nFrom-SVN: r116128", "tree": {"sha": "7fe539e40e9ebdcbc39e02be15bd5107a3797cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fe539e40e9ebdcbc39e02be15bd5107a3797cac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/comments", "author": null, "committer": null, "parents": [{"sha": "2b3969faee4094c5b857bf024e8ce4b7d832dc2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3969faee4094c5b857bf024e8ce4b7d832dc2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3969faee4094c5b857bf024e8ce4b7d832dc2d"}], "stats": {"total": 218, "additions": 181, "deletions": 37}, "files": [{"sha": "836c083280ffb8e3e2265ab3119135588b55d798", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "patch": "@@ -1,3 +1,14 @@\n+2006-08-14  Gary Benson  <gbenson@redhat.com>\n+\n+\t* java/lang/Thread.java (accessControlState): New field.\n+\t* java/security/VMAccessControlState.java: New file.\n+\t* java/security/natVMAccessControlState.cc: Likewise.\n+\t* java/security/VMAccessController.java\n+\t(contexts, inGetContext): Removed.\n+\t(pushContext, popContext, getContext): Use VMAccessControlState.\n+\t* Makefile.am (nat_source_files): Updated.\n+\t* sources.am, Makefile.in: Rebuilt.\n+\n 2006-08-10  Gary Benson  <gbenson@redhat.com>\n \n \t* include/java-stack.h (GetAccessControlStack): Change return"}, {"sha": "06049fd7d51d3947f617238730682c9be8f6f0c3", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "patch": "@@ -829,6 +829,7 @@ java/net/natURLClassLoader.cc \\\n java/nio/channels/natVMChannels.cc \\\n java/nio/natDirectByteBufferImpl.cc \\\n java/security/natVMAccessController.cc \\\n+java/security/natVMAccessControlState.cc \\\n java/text/natCollator.cc \\\n java/util/natResourceBundle.cc \\\n java/util/natVMTimeZone.cc \\"}, {"sha": "01ce21c38b227036a2852677879506f4559c13d0", "filename": "libjava/Makefile.in", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "patch": "@@ -293,6 +293,7 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc jvmti.cc exception.cc \\\n \tjava/nio/channels/natVMChannels.cc \\\n \tjava/nio/natDirectByteBufferImpl.cc \\\n \tjava/security/natVMAccessController.cc \\\n+\tjava/security/natVMAccessControlState.cc \\\n \tjava/text/natCollator.cc java/util/natResourceBundle.cc \\\n \tjava/util/natVMTimeZone.cc java/util/logging/natLogger.cc \\\n \tjava/util/zip/natDeflater.cc java/util/zip/natInflater.cc \\\n@@ -339,6 +340,7 @@ am__objects_2 = gnu/classpath/natSystemProperties.lo \\\n \tjava/nio/channels/natVMChannels.lo \\\n \tjava/nio/natDirectByteBufferImpl.lo \\\n \tjava/security/natVMAccessController.lo \\\n+\tjava/security/natVMAccessControlState.lo \\\n \tjava/text/natCollator.lo java/util/natResourceBundle.lo \\\n \tjava/util/natVMTimeZone.lo java/util/logging/natLogger.lo \\\n \tjava/util/zip/natDeflater.lo java/util/zip/natInflater.lo\n@@ -4232,6 +4234,7 @@ classpath/java/security/SignedObject.java \\\n classpath/java/security/Signer.java \\\n classpath/java/security/UnrecoverableKeyException.java \\\n classpath/java/security/UnresolvedPermission.java \\\n+java/security/VMAccessControlState.java \\\n java/security/VMAccessController.java \\\n java/security/VMSecureRandom.java\n \n@@ -7151,6 +7154,7 @@ java/net/natURLClassLoader.cc \\\n java/nio/channels/natVMChannels.cc \\\n java/nio/natDirectByteBufferImpl.cc \\\n java/security/natVMAccessController.cc \\\n+java/security/natVMAccessControlState.cc \\\n java/text/natCollator.cc \\\n java/util/natResourceBundle.cc \\\n java/util/natVMTimeZone.cc \\\n@@ -7663,6 +7667,9 @@ java/security/$(DEPDIR)/$(am__dirstamp):\n \t@: > java/security/$(DEPDIR)/$(am__dirstamp)\n java/security/natVMAccessController.lo: java/security/$(am__dirstamp) \\\n \tjava/security/$(DEPDIR)/$(am__dirstamp)\n+java/security/natVMAccessControlState.lo:  \\\n+\tjava/security/$(am__dirstamp) \\\n+\tjava/security/$(DEPDIR)/$(am__dirstamp)\n java/text/$(am__dirstamp):\n \t@$(mkdir_p) java/text\n \t@: > java/text/$(am__dirstamp)\n@@ -7972,6 +7979,8 @@ mostlyclean-compile:\n \t-rm -f java/nio/channels/natVMChannels.lo\n \t-rm -f java/nio/natDirectByteBufferImpl.$(OBJEXT)\n \t-rm -f java/nio/natDirectByteBufferImpl.lo\n+\t-rm -f java/security/natVMAccessControlState.$(OBJEXT)\n+\t-rm -f java/security/natVMAccessControlState.lo\n \t-rm -f java/security/natVMAccessController.$(OBJEXT)\n \t-rm -f java/security/natVMAccessController.lo\n \t-rm -f java/text/natCollator.$(OBJEXT)\n@@ -8094,6 +8103,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@java/net/$(DEPDIR)/natVMNetworkInterface.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/$(DEPDIR)/natDirectByteBufferImpl.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/channels/$(DEPDIR)/natVMChannels.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@java/security/$(DEPDIR)/natVMAccessControlState.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/security/$(DEPDIR)/natVMAccessController.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/text/$(DEPDIR)/natCollator.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/util/$(DEPDIR)/natResourceBundle.Plo@am__quote@"}, {"sha": "0cc4afdea1916b4582a28109571a2cd41d2ae8b2", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "patch": "@@ -144,6 +144,11 @@ public class Thread implements Runnable\n   /** The uncaught exception handler.  */\n   UncaughtExceptionHandler exceptionHandler;\n \n+  /** The access control state for this thread.  Package accessible\n+    * for use by java.security.VMAccessControlState's native method.\n+    */\n+  Object accessControlState = null;\n+  \n   // This describes the top-most interpreter frame for this thread.\n   RawData interp_frame;\n "}, {"sha": "360f08a5b6bbe73fa78b45b8e79e09d2f20c6590", "filename": "libjava/java/security/VMAccessControlState.java", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fjava%2Fsecurity%2FVMAccessControlState.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fjava%2Fsecurity%2FVMAccessControlState.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FVMAccessControlState.java?ref=be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "patch": "@@ -0,0 +1,103 @@\n+/* VMAccessControlState.java -- per-thread state for the access controller.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This program is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+This program is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.security;\n+\n+import java.util.LinkedList;\n+\n+class VMAccessControlState\n+{\n+  /**\n+   * A list of {@link AccessControlContext} objects (which can be\n+   * null) for each call to {@link AccessController#doPrivileged()} in\n+   * the thread's call stack.\n+   */\n+  private LinkedList contexts = new LinkedList();\n+\n+  /**\n+   * A flag indicating that we are within a call to {@link\n+   * VMAccessController#getContext()}.\n+   */\n+  private boolean inGetContext = false;\n+\n+  /**\n+   * Not directly instantiable: use getThreadState() instead.\n+   */\n+  private VMAccessControlState() {}\n+\n+  /**\n+   * Return an object representing the access control state of this\n+   * thread.\n+   *\n+   * @return The access control state of this thread, or\n+   * <code>null</code> if the VM is not initialized to the point of\n+   * being able to return this.\n+   */\n+  static native VMAccessControlState getThreadState();\n+\n+  /**\n+   * Indicate whether this thread is within a call to {@link\n+   * VMAccessController#getContext()}.\n+   *\n+   * @return <code>true</code> if this thread is within a call to\n+   * {@link VMAccessController#getContext()}.\n+   */\n+  boolean isInGetContext()\n+  {\n+    return inGetContext;\n+  }\n+\n+  /**\n+   * Specify whether this thread is within a call to {@link\n+   * VMAccessController#getContext()}.\n+   */\n+  void setInGetContext(boolean inGetContext)\n+  {\n+    this.inGetContext = inGetContext;\n+  }\n+  \n+  /**\n+   * Return a list of {@link AccessControlContext} objects (which can\n+   * be null) for each call to {@link AccessController#doPrivileged()}\n+   * in the thread's call stack.\n+   *\n+   * @return a list of {@link AccessControlContext} objects.\n+   */\n+  LinkedList getContexts()\n+  {\n+    return contexts;\n+  }\n+}"}, {"sha": "8436c9ccb60b8ccb7c5d4004ff31d4da17cda478", "filename": "libjava/java/security/VMAccessController.java", "status": "modified", "additions": 18, "deletions": 37, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fjava%2Fsecurity%2FVMAccessController.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fjava%2Fsecurity%2FVMAccessController.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FVMAccessController.java?ref=be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "patch": "@@ -45,21 +45,6 @@\n   // Fields.\n   // -------------------------------------------------------------------------\n \n-  /**\n-   * This is a per-thread stack of AccessControlContext objects (which can\n-   * be null) for each call to AccessController.doPrivileged in each thread's\n-   * call stack. We use this to remember which context object corresponds to\n-   * which call.\n-   */\n-  private static final ThreadLocal contexts = new ThreadLocal();\n-\n-  /**\n-   * This is a Boolean that, if set, tells getContext that it has already\n-   * been called once, allowing us to handle recursive permission checks\n-   * caused by methods getContext calls.\n-   */\n-  private static final ThreadLocal inGetContext = new ThreadLocal();\n-\n   /**\n    * And we return this all-permissive context to ensure that privileged\n    * methods called from getContext succeed.\n@@ -103,19 +88,15 @@ private VMAccessController() { }\n    */\n   static void pushContext (AccessControlContext acc)\n   {\n-    if (Thread.currentThread() == null)\n+    // Can't really do anything while the VM is initializing.\n+    VMAccessControlState state = VMAccessControlState.getThreadState();\n+    if (state == null)\n       return;\n \n     if (DEBUG)\n       debug(\"pushing \" + acc);\n-    LinkedList stack = (LinkedList) contexts.get();\n-    if (stack == null)\n-      {\n-         if (DEBUG)\n-           debug(\"no stack... creating \");\n-        stack = new LinkedList();\n-        contexts.set(stack);\n-      }\n+\n+    LinkedList stack = state.getContexts();\n     stack.addFirst(acc);\n   }\n \n@@ -127,20 +108,20 @@ static void pushContext (AccessControlContext acc)\n    */\n   static void popContext()\n   {\n-    if (Thread.currentThread() == null)\n+    // Can't really do anything while the VM is initializing.\n+    VMAccessControlState state = VMAccessControlState.getThreadState();\n+    if (state == null)\n       return;\n \n     if (DEBUG)\n       debug(\"popping context\");\n \n     // Stack should never be null, nor should it be empty, if this method\n     // and its counterpart has been called properly.\n-    LinkedList stack = (LinkedList) contexts.get();\n-    if (stack != null)\n+    LinkedList stack = state.getContexts();\n+    if (!stack.isEmpty())\n       {\n-        stack.removeFirst();\n-        if (stack.isEmpty())\n-          contexts.set(null);\n+\tstack.removeFirst();\n       }\n     else if (DEBUG)\n       {\n@@ -159,7 +140,8 @@ static AccessControlContext getContext()\n   {\n     // If the VM is initializing return the all-permissive context\n     // so that any security checks succeed.\n-    if (Thread.currentThread() == null)\n+    VMAccessControlState state = VMAccessControlState.getThreadState();\n+    if (state == null)\n       return DEFAULT_CONTEXT;\n \n     // If we are already in getContext, but called a method that needs\n@@ -168,15 +150,14 @@ static AccessControlContext getContext()\n     //\n     // XXX is this necessary? We should verify if there are any calls in\n     // the stack below this method that require permission checks.\n-    Boolean inCall = (Boolean) inGetContext.get();\n-    if (inCall != null && inCall.booleanValue())\n+    if (state.isInGetContext())\n       {\n         if (DEBUG)\n           debug(\"already in getContext\");\n         return DEFAULT_CONTEXT;\n       }\n \n-    inGetContext.set(Boolean.TRUE);\n+    state.setInGetContext(true);\n \n     Object[] stack = getStack();\n     Class[] classes = (Class[]) stack[0];\n@@ -210,8 +191,8 @@ static AccessControlContext getContext()\n             // If there was a call to doPrivileged with a supplied context,\n             // return that context. If using JAAS doAs*, it should be \n \t    // a context with a SubjectDomainCombiner\n-            LinkedList l = (LinkedList) contexts.get();\n-            if (l != null)\n+            LinkedList l = state.getContexts();\n+            if (!l.isEmpty())\n               context = (AccessControlContext) l.getFirst();\n           }\n \n@@ -256,7 +237,7 @@ static AccessControlContext getContext()\n     else\n       context = new AccessControlContext (result);\n \n-    inGetContext.set(Boolean.FALSE);\n+    state.setInGetContext(false);\n     return context;\n   }\n "}, {"sha": "a4c14cdd44149fce8648f3325a2af728d7cae9af", "filename": "libjava/java/security/natVMAccessControlState.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fjava%2Fsecurity%2FnatVMAccessControlState.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fjava%2Fsecurity%2FnatVMAccessControlState.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FnatVMAccessControlState.cc?ref=be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "patch": "@@ -0,0 +1,32 @@\n+// natVMAccessControlState.cc -- Native part of the VMAccessControlState class.\n+\n+/* Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <java/lang/Thread.h>\n+#include <java/security/VMAccessControlState.h>\n+\n+java::security::VMAccessControlState *\n+java::security::VMAccessControlState::getThreadState ()\n+{\n+  java::lang::Thread *thread = java::lang::Thread::currentThread ();\n+  if (thread == NULL)\n+    return NULL;\n+\n+  VMAccessControlState *state =\n+    reinterpret_cast<VMAccessControlState *> (thread->accessControlState);\n+  if (state == NULL)\n+    thread->accessControlState = state = new VMAccessControlState ();\n+\n+  return state;\n+}"}, {"sha": "a18ad9430e94df7e1efbc1ca97694cd917990d52", "filename": "libjava/sources.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6415beaefe63fbcf0f8fad53cf9662fb6640ba/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=be6415beaefe63fbcf0f8fad53cf9662fb6640ba", "patch": "@@ -5330,6 +5330,7 @@ classpath/java/security/SignedObject.java \\\n classpath/java/security/Signer.java \\\n classpath/java/security/UnrecoverableKeyException.java \\\n classpath/java/security/UnresolvedPermission.java \\\n+java/security/VMAccessControlState.java \\\n java/security/VMAccessController.java \\\n java/security/VMSecureRandom.java\n "}]}