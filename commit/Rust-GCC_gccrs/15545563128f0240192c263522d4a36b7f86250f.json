{"sha": "15545563128f0240192c263522d4a36b7f86250f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU1NDU1NjMxMjhmMDI0MDE5MmMyNjM1MjJkNGEzNmI3Zjg2MjUwZg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-07T08:47:25Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-11T10:06:15Z"}, "message": "[libatomic] Add nvptx support\n\nAdd nvptx support to libatomic.\n\nGiven that atomic_test_and_set is not implemented for nvptx (PR96964), the\ncompiler translates __atomic_test_and_set falling back onto the \"Failing all\nelse, assume a single threaded environment and simply perform the operation\"\ncase in expand_atomic_test_and_set, so it doesn't map onto an actual atomic\noperation.\n\nStill, that counts as supported for the configure test of libatomic, so we\nend up with HAVE_ATOMIC_TAS_1/2/4/8/16 == 1, and the corresponding\n__atomic_test_and_set_1/2/4/8/16 in libatomic all using that non-atomic\nimplementation.\n\nFix this by adding an atomic_test_and_set expansion for nvptx, that uses\nlibatomics __atomic_test_and_set_1.\n\nThis again makes the configure tests for HAVE_ATOMIC_TAS_1/2/4/8/16 fail, so\ninstead we use this case in tas_n.c:\n...\n/* If this type is smaller than word-sized, fall back to a word-sized\n   compare-and-swap loop.  */\nbool\nSIZE(libat_test_and_set) (UTYPE *mptr, int smodel)\n...\nwhich for __atomic_test_and_set_8 uses INVERT_MASK_8.\n\nAdd INVERT_MASK_8 in libatomic_i.h, as well as MASK_8.\n\nTested libatomic testsuite on nvptx.\n\ngcc/ChangeLog:\n\n\tPR target/96964\n\t* config/nvptx/nvptx.md (define_expand \"atomic_test_and_set\"): New\n\texpansion.\n\nlibatomic/ChangeLog:\n\n\tPR target/96898\n\t* configure.tgt: Add nvptx.\n\t* libatomic_i.h (MASK_8, INVERT_MASK_8): New macro definition.\n\t* config/nvptx/host-config.h: New file.\n\t* config/nvptx/lock.c: New file.", "tree": {"sha": "746bb4c9e006aa697779062ec38bfd6e35ff6fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/746bb4c9e006aa697779062ec38bfd6e35ff6fea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15545563128f0240192c263522d4a36b7f86250f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15545563128f0240192c263522d4a36b7f86250f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15545563128f0240192c263522d4a36b7f86250f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15545563128f0240192c263522d4a36b7f86250f/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae0de5621120b16295fe6b73ca044d4c576af6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae0de5621120b16295fe6b73ca044d4c576af6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae0de5621120b16295fe6b73ca044d4c576af6d"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "6178e6a0f777c663aa7ed80f99f95805da532576", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15545563128f0240192c263522d4a36b7f86250f/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15545563128f0240192c263522d4a36b7f86250f/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=15545563128f0240192c263522d4a36b7f86250f", "patch": "@@ -1667,6 +1667,22 @@\n   \"%.\\\\tatom%A1.b%T0.<logic>\\\\t%0, %1, %2;\"\n   [(set_attr \"atomic\" \"true\")])\n \n+(define_expand \"atomic_test_and_set\"\n+  [(match_operand:SI 0 \"nvptx_register_operand\")\t;; bool success output\n+   (match_operand:QI 1 \"memory_operand\")\t\t;; memory\n+   (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n+  \"\"\n+{\n+  rtx libfunc;\n+  rtx addr;\n+  libfunc = init_one_libfunc (\"__atomic_test_and_set_1\");\n+  addr = convert_memory_address (ptr_mode, XEXP (operands[1], 0));\n+  emit_library_call_value (libfunc, operands[0], LCT_NORMAL, SImode,\n+\t\t\t  addr, ptr_mode,\n+\t\t\t  operands[2], SImode);\n+  DONE;\n+})\n+\n (define_insn \"nvptx_barsync\"\n   [(unspec_volatile [(match_operand:SI 0 \"nvptx_nonmemory_operand\" \"Ri\")\n \t\t     (match_operand:SI 1 \"const_int_operand\")]"}, {"sha": "eb9de81f388eaa2d12f4a582b96b15f1b9ff6504", "filename": "libatomic/config/nvptx/host-config.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15545563128f0240192c263522d4a36b7f86250f/libatomic%2Fconfig%2Fnvptx%2Fhost-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15545563128f0240192c263522d4a36b7f86250f/libatomic%2Fconfig%2Fnvptx%2Fhost-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Fnvptx%2Fhost-config.h?ref=15545563128f0240192c263522d4a36b7f86250f", "patch": "@@ -0,0 +1,56 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of the GNU Atomic Library (libatomic).\n+\n+   Libatomic is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libatomic is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Copied from libatomic/config/posix/host-config.h.  */\n+\n+/* Included after all more target-specific host-config.h.  */\n+\n+\n+#ifndef protect_start_end\n+# ifdef HAVE_ATTRIBUTE_VISIBILITY\n+#  pragma GCC visibility push(hidden)\n+# endif\n+\n+void libat_lock_1 (void *ptr);\n+void libat_unlock_1 (void *ptr);\n+\n+static inline UWORD\n+protect_start (void *ptr)\n+{\n+  libat_lock_1 (ptr);\n+  return 0;\n+}\n+\n+static inline void\n+protect_end (void *ptr, UWORD dummy UNUSED)\n+{\n+  libat_unlock_1 (ptr);\n+}\n+\n+# define protect_start_end 1\n+# ifdef HAVE_ATTRIBUTE_VISIBILITY\n+#  pragma GCC visibility pop\n+# endif\n+#endif /* protect_start_end */\n+\n+#include_next <host-config.h>"}, {"sha": "dea85a3e5bd42acaa33f86300d4ff636b34ddae6", "filename": "libatomic/config/nvptx/lock.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15545563128f0240192c263522d4a36b7f86250f/libatomic%2Fconfig%2Fnvptx%2Flock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15545563128f0240192c263522d4a36b7f86250f/libatomic%2Fconfig%2Fnvptx%2Flock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Fnvptx%2Flock.c?ref=15545563128f0240192c263522d4a36b7f86250f", "patch": "@@ -0,0 +1,56 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of the GNU Atomic Library (libatomic).\n+\n+   Libatomic is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libatomic is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Functions libat_lock_n/libat_unlock_n based on GOMP_atomic_start/end in\n+   libgomp/atomic.c.  */\n+\n+#include \"libatomic_i.h\"\n+\n+static int atomic_lock;\n+\n+void\n+libat_lock_n (void *ptr __attribute__((unused)),\n+\t      size_t n __attribute__((unused)))\n+{\n+  while (__sync_lock_test_and_set (&atomic_lock, 1))\n+    ;  /* Spin.  */\n+}\n+\n+void\n+libat_unlock_n (void *ptr __attribute__((unused)),\n+\t\tsize_t n __attribute__((unused)))\n+{\n+  __sync_lock_release (&atomic_lock);\n+}\n+\n+void\n+libat_lock_1 (void *ptr)\n+{\n+  libat_lock_n (ptr, 1);\n+}\n+\n+void\n+libat_unlock_1 (void *ptr)\n+{\n+  libat_unlock_n (ptr, 1);\n+}"}, {"sha": "7834e0a6528360e73a7b866b4aacd15d112ec9b5", "filename": "libatomic/configure.tgt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15545563128f0240192c263522d4a36b7f86250f/libatomic%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15545563128f0240192c263522d4a36b7f86250f/libatomic%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure.tgt?ref=15545563128f0240192c263522d4a36b7f86250f", "patch": "@@ -174,6 +174,9 @@ case \"${target}\" in\n \tUNSUPPORTED=1\n \t;;\n \n+  nvptx*-*-*)\n+\t;;\n+\n   *)\n \t# Who are you?\n \tUNSUPPORTED=1"}, {"sha": "37de992102430f41ee380a83db6cd539fe21d914", "filename": "libatomic/libatomic_i.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15545563128f0240192c263522d4a36b7f86250f/libatomic%2Flibatomic_i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15545563128f0240192c263522d4a36b7f86250f/libatomic%2Flibatomic_i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Flibatomic_i.h?ref=15545563128f0240192c263522d4a36b7f86250f", "patch": "@@ -109,9 +109,11 @@ typedef unsigned UWORD __attribute__((mode(word)));\n #define MASK_1\t\t((UWORD)0xff)\n #define MASK_2\t\t((UWORD)0xffff)\n #define MASK_4\t\t((UWORD)0xffffffff)\n+#define MASK_8\t\t((UWORD)0xffffffffffffffff)\n #define INVERT_MASK_1\t((UWORD)WORDS_BIGENDIAN << ((WORDSIZE - 1) * CHAR_BIT))\n #define INVERT_MASK_2\t((UWORD)WORDS_BIGENDIAN << ((WORDSIZE - 2) * CHAR_BIT))\n #define INVERT_MASK_4\t((UWORD)WORDS_BIGENDIAN << ((WORDSIZE - 4) * CHAR_BIT))\n+#define INVERT_MASK_8\t((UWORD)WORDS_BIGENDIAN << ((WORDSIZE - 8) * CHAR_BIT))\n \n /* Most of the files in this library are compiled multiple times with\n    N defined to be a power of 2 between 1 and 16.  The SIZE macro is"}]}