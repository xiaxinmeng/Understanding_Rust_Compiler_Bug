{"sha": "afb03408e0b8683bced2c82adfe6c7d4524a9845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZiMDM0MDhlMGI4NjgzYmNlZDJjODJhZGZlNmM3ZDQ1MjRhOTg0NQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-06-10T17:20:30Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-06-10T17:20:30Z"}, "message": "cpphash.h (_cpp_read_logical_line_trad, [...]): Update prototypes.\n\n\t* cpphash.h (_cpp_read_logical_line_trad,\n\t_cpp_expansions_different_trad): Update prototypes.\n\t* cpplex.c (continue_after_nul): New.\n\t* cppmain.c: Include cpphash.h.\n\t(scan_translation_unit_trad): New.\n\t(cpp_preprocess_file): Call it.\n\t* cpptrad.c (_cpp_read_logical_line_trad): Take new parameter\n\toverlay.\n\t(_cpp_expansions_different_trad): Update prototype.\n\nFrom-SVN: r54446", "tree": {"sha": "3647064a5aa3fefaeb653cfe1fe72a31f0f47578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3647064a5aa3fefaeb653cfe1fe72a31f0f47578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afb03408e0b8683bced2c82adfe6c7d4524a9845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb03408e0b8683bced2c82adfe6c7d4524a9845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb03408e0b8683bced2c82adfe6c7d4524a9845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb03408e0b8683bced2c82adfe6c7d4524a9845/comments", "author": null, "committer": null, "parents": [{"sha": "2754d3c5acdcddf405360d38a9c071c0280c06ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2754d3c5acdcddf405360d38a9c071c0280c06ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2754d3c5acdcddf405360d38a9c071c0280c06ce"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "4409487121a25549fb49edd22c6beadc1ef39ba1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afb03408e0b8683bced2c82adfe6c7d4524a9845", "patch": "@@ -1,3 +1,15 @@\n+2002-06-10  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpphash.h (_cpp_read_logical_line_trad,\n+\t_cpp_expansions_different_trad): Update prototypes.\n+\t* cpplex.c (continue_after_nul): New.\n+\t* cppmain.c: Include cpphash.h.\n+\t(scan_translation_unit_trad): New.\n+\t(cpp_preprocess_file): Call it.\n+\t* cpptrad.c (_cpp_read_logical_line_trad): Take new parameter\n+\toverlay.\n+\t(_cpp_expansions_different_trad): Update prototype.\n+\n Mon Jun 10 18:02:24 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \tFix cfi generation for SH[1-4]:"}, {"sha": "0fa3e139b19abf543135bd6316abc9137609667b", "filename": "gcc/cpphash.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=afb03408e0b8683bced2c82adfe6c7d4524a9845", "patch": "@@ -510,13 +510,14 @@ extern void _cpp_do_file_change PARAMS ((cpp_reader *, enum lc_reason,\n extern void _cpp_pop_buffer PARAMS ((cpp_reader *));\n \n /* In cpptrad.c.  */\n-extern bool _cpp_read_logical_line_trad PARAMS ((cpp_reader *));\n+extern bool _cpp_read_logical_line_trad PARAMS ((cpp_reader *, int));\n extern void _cpp_overlay_buffer PARAMS ((cpp_reader *pfile, const uchar *,\n \t\t\t\t\t size_t));\n extern cpp_hashnode *_cpp_lex_identifier_trad PARAMS ((cpp_reader *));\n extern void _cpp_set_trad_context PARAMS ((cpp_reader *));\n extern bool _cpp_create_trad_definition PARAMS ((cpp_reader *, cpp_macro *));\n-extern bool _cpp_expansions_different_trad PARAMS ((cpp_macro *, cpp_macro *));\n+extern bool _cpp_expansions_different_trad PARAMS ((const cpp_macro *,\n+\t\t\t\t\t\t    const cpp_macro *));\n \n /* Utility routines and macros.  */\n #define DSC(str) (const uchar *)str, sizeof str - 1"}, {"sha": "66eb01ffecdc9f8f2ecc768c48ee60124fe98f8c", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=afb03408e0b8683bced2c82adfe6c7d4524a9845", "patch": "@@ -891,7 +891,7 @@ continue_after_nul (pfile)\n \n   buffer->saved_flags = BOL;\n   if (CPP_OPTION (pfile, traditional))\n-    more = _cpp_read_logical_line_trad (pfile);\n+    more = _cpp_read_logical_line_trad (pfile, true);\n   else\n     {\n       /* Stop parsing arguments with a CPP_EOF.  When we finally come"}, {"sha": "a5487e7cba38a3592fe90a14f365ba90c7c78617", "filename": "gcc/cppmain.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=afb03408e0b8683bced2c82adfe6c7d4524a9845", "patch": "@@ -24,6 +24,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"config.h\"\n #include \"system.h\"\n #include \"cpplib.h\"\n+#include \"cpphash.h\"\n #include \"intl.h\"\n \n /* Encapsulates state used to convert the stream of tokens coming from\n@@ -42,6 +43,7 @@ static void setup_callbacks PARAMS ((cpp_reader *));\n \n /* General output routines.  */\n static void scan_translation_unit PARAMS ((cpp_reader *));\n+static void scan_translation_unit_trad PARAMS ((cpp_reader *));\n static void check_multiline_token PARAMS ((const cpp_string *));\n static int dump_macro PARAMS ((cpp_reader *, cpp_hashnode *, void *));\n \n@@ -104,6 +106,8 @@ cpp_preprocess_file (pfile)\n \t cpp_scan_nooutput or cpp_get_token next.  */\n       if (options->no_output)\n \tcpp_scan_nooutput (pfile);\n+      else if (options->traditional)\n+\tscan_translation_unit_trad (pfile);\n       else\n \tscan_translation_unit (pfile);\n \n@@ -217,6 +221,22 @@ check_multiline_token (str)\n       print.line++;\n }\n \n+static void\n+scan_translation_unit_trad (pfile)\n+     cpp_reader *pfile;\n+{\n+  bool more;\n+  size_t len;\n+\n+  do\n+    {\n+      more = _cpp_read_logical_line_trad (pfile, false);\n+      len = pfile->trad_out_cur - pfile->trad_out_base;\n+      fwrite (pfile->trad_out_base, 1, len, print.outf);\n+    }\n+  while (more);\n+}\n+\n /* If the token read on logical line LINE needs to be output on a\n    different line to the current one, output the required newlines or\n    a line marker, and return 1.  Otherwise return 0.  */"}, {"sha": "18d5adbbd7af4440c5050d5d48a46390fe699811", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb03408e0b8683bced2c82adfe6c7d4524a9845/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=afb03408e0b8683bced2c82adfe6c7d4524a9845", "patch": "@@ -298,15 +298,18 @@ restore_buff (pfile)\n /* Reads a logical line into the output buffer.  Returns TRUE if there\n    is more text left in the buffer.  */\n bool\n-_cpp_read_logical_line_trad (pfile)\n+_cpp_read_logical_line_trad (pfile, overlay)\n      cpp_reader *pfile;\n+     int overlay;\n {\n   cpp_buffer *buffer;\n-  unsigned int first_line;\n+  unsigned int first_line = 0;\n \n-  restore_buff (pfile);\n-\n-  first_line = pfile->line = pfile->trad_line;\n+  if (overlay)\n+    {\n+      restore_buff (pfile);\n+      first_line = pfile->line = pfile->trad_line;\n+    }\n \n   buffer = pfile->buffer;\n   if (buffer->cur == buffer->rlimit)\n@@ -330,10 +333,14 @@ _cpp_read_logical_line_trad (pfile)\n   scan_out_logical_line (pfile, NULL);\n   buffer->cur = CUR (pfile->context);\n \n-  pfile->trad_line = pfile->line;\n-  pfile->line = first_line;\n-  _cpp_overlay_buffer (pfile, pfile->trad_out_base,\n-\t\t       pfile->trad_out_cur - pfile->trad_out_base);\n+  if (overlay)\n+    {\n+      pfile->trad_line = pfile->line;\n+      pfile->line = first_line;\n+      _cpp_overlay_buffer (pfile, pfile->trad_out_base,\n+\t\t\t   pfile->trad_out_cur - pfile->trad_out_base);\n+    }\n+\n   return true;\n }\n \n@@ -855,7 +862,7 @@ canonicalize_text (dest, src, len, pquote)\n    than in the form of their whitespace.  */\n bool\n _cpp_expansions_different_trad (macro1, macro2)\n-     cpp_macro *macro1, *macro2;\n+     const cpp_macro *macro1, *macro2;\n {\n   uchar *p1 = xmalloc (macro1->count + macro2->count);\n   uchar *p2 = p1 + macro1->count;"}]}