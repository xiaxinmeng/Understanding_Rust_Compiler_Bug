{"sha": "57b26d65cd33a98131cc54f4709959371cdc7789", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiMjZkNjVjZDMzYTk4MTMxY2M1NGY0NzA5OTU5MzcxY2RjNzc4OQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-11-26T13:50:47Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-11-26T13:50:47Z"}, "message": "[AArch64] Add sqrdmah, sqrdmsh instructions.\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_sqmovun<mode>): Fix some white-space.\n\t(aarch64_<sur>qmovun<mode>): Likewise.\n\t(aarch64_sqrdml<SQRDMLH_AS:rdma_as>h<mode>): New.\n\t(aarch64_sqrdml<SQRDMLH_AS:rdma_as>h_lane<mode>): New.\n\t(aarch64_sqrdml<SQRDMLH_AS:rdma_as>h_laneq<mode>): New.\n\t* config/aarch64/iterators.md (UNSPEC_SQRDMLAH): New.\n\t(UNSPEC_SQRDMLSH): New.\n\t(SQRDMLH_AS): New.\n\t(rdma_as): New.\n\nFrom-SVN: r230959", "tree": {"sha": "fa9c4a7d4e61e162278e00d2d185178a7cfc6693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa9c4a7d4e61e162278e00d2d185178a7cfc6693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b26d65cd33a98131cc54f4709959371cdc7789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b26d65cd33a98131cc54f4709959371cdc7789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b26d65cd33a98131cc54f4709959371cdc7789", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b26d65cd33a98131cc54f4709959371cdc7789/comments", "author": null, "committer": null, "parents": [{"sha": "afad440642488b64e75138ed6febd4cc41898b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afad440642488b64e75138ed6febd4cc41898b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afad440642488b64e75138ed6febd4cc41898b57"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "6c0d4d864271fd9763a339e85b23c138c4426b24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b26d65cd33a98131cc54f4709959371cdc7789/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b26d65cd33a98131cc54f4709959371cdc7789/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57b26d65cd33a98131cc54f4709959371cdc7789", "patch": "@@ -1,3 +1,16 @@\n+2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_sqmovun<mode>): Fix some white-space.\n+\t(aarch64_<sur>qmovun<mode>): Likewise.\n+\t(aarch64_sqrdml<SQRDMLH_AS:rdma_as>h<mode>): New.\n+\t(aarch64_sqrdml<SQRDMLH_AS:rdma_as>h_lane<mode>): New.\n+\t(aarch64_sqrdml<SQRDMLH_AS:rdma_as>h_laneq<mode>): New.\n+\t* config/aarch64/iterators.md (UNSPEC_SQRDMLAH): New.\n+\t(UNSPEC_SQRDMLSH): New.\n+\t(SQRDMLH_AS): New.\n+\t(rdma_as): New.\n+\n 2015-11-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66721"}, {"sha": "7910484baf0377d89211f9945d6bbc66103f8fc8", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b26d65cd33a98131cc54f4709959371cdc7789/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b26d65cd33a98131cc54f4709959371cdc7789/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=57b26d65cd33a98131cc54f4709959371cdc7789", "patch": "@@ -3081,7 +3081,7 @@\n    \"TARGET_SIMD\"\n    \"sqxtun\\\\t%<vn2>0<Vmntype>, %<v>1<Vmtype>\"\n    [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n- )\n+)\n \n ;; sqmovn and uqmovn\n \n@@ -3092,7 +3092,7 @@\n   \"TARGET_SIMD\"\n   \"<sur>qxtn\\\\t%<vn2>0<Vmntype>, %<v>1<Vmtype>\"\n    [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n- )\n+)\n \n ;; <su>q<absneg>\n \n@@ -3180,6 +3180,96 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n )\n \n+;; sqrdml[as]h.\n+\n+(define_insn \"aarch64_sqrdml<SQRDMLH_AS:rdma_as>h<mode>\"\n+  [(set (match_operand:VSDQ_HSI 0 \"register_operand\" \"=w\")\n+\t(unspec:VSDQ_HSI\n+\t  [(match_operand:VSDQ_HSI 1 \"register_operand\" \"0\")\n+\t   (match_operand:VSDQ_HSI 2 \"register_operand\" \"w\")\n+\t   (match_operand:VSDQ_HSI 3 \"register_operand\" \"w\")]\n+\t  SQRDMLH_AS))]\n+   \"TARGET_SIMD_RDMA\"\n+   \"sqrdml<SQRDMLH_AS:rdma_as>h\\\\t%<v>0<Vmtype>, %<v>2<Vmtype>, %<v>3<Vmtype>\"\n+   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_long\")]\n+)\n+\n+;; sqrdml[as]h_lane.\n+\n+(define_insn \"aarch64_sqrdml<SQRDMLH_AS:rdma_as>h_lane<mode>\"\n+  [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n+\t(unspec:VDQHS\n+\t  [(match_operand:VDQHS 1 \"register_operand\" \"0\")\n+\t   (match_operand:VDQHS 2 \"register_operand\" \"w\")\n+\t   (vec_select:<VEL>\n+\t     (match_operand:<VCOND> 3 \"register_operand\" \"w\")\n+\t     (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))]\n+\t  SQRDMLH_AS))]\n+   \"TARGET_SIMD_RDMA\"\n+   {\n+     operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n+     return\n+      \"sqrdml<SQRDMLH_AS:rdma_as>h\\\\t%0.<Vtype>, %2.<Vtype>, %3.<Vetype>[%4]\";\n+   }\n+   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqrdml<SQRDMLH_AS:rdma_as>h_lane<mode>\"\n+  [(set (match_operand:SD_HSI 0 \"register_operand\" \"=w\")\n+\t(unspec:SD_HSI\n+\t  [(match_operand:SD_HSI 1 \"register_operand\" \"0\")\n+\t   (match_operand:SD_HSI 2 \"register_operand\" \"w\")\n+\t   (vec_select:<VEL>\n+\t     (match_operand:<VCOND> 3 \"register_operand\" \"w\")\n+\t     (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))]\n+\t  SQRDMLH_AS))]\n+   \"TARGET_SIMD_RDMA\"\n+   {\n+     operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n+     return\n+      \"sqrdml<SQRDMLH_AS:rdma_as>h\\\\t%<v>0, %<v>2, %3.<Vetype>[%4]\";\n+   }\n+   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+;; sqrdml[as]h_laneq.\n+\n+(define_insn \"aarch64_sqrdml<SQRDMLH_AS:rdma_as>h_laneq<mode>\"\n+  [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n+\t(unspec:VDQHS\n+\t  [(match_operand:VDQHS 1 \"register_operand\" \"0\")\n+\t   (match_operand:VDQHS 2 \"register_operand\" \"w\")\n+\t   (vec_select:<VEL>\n+\t     (match_operand:<VCONQ> 3 \"register_operand\" \"w\")\n+\t     (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))]\n+\t  SQRDMLH_AS))]\n+   \"TARGET_SIMD_RDMA\"\n+   {\n+     operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n+     return\n+      \"sqrdml<SQRDMLH_AS:rdma_as>h\\\\t%0.<Vtype>, %2.<Vtype>, %3.<Vetype>[%4]\";\n+   }\n+   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqrdml<SQRDMLH_AS:rdma_as>h_laneq<mode>\"\n+  [(set (match_operand:SD_HSI 0 \"register_operand\" \"=w\")\n+\t(unspec:SD_HSI\n+\t  [(match_operand:SD_HSI 1 \"register_operand\" \"0\")\n+\t   (match_operand:SD_HSI 2 \"register_operand\" \"w\")\n+\t   (vec_select:<VEL>\n+\t     (match_operand:<VCONQ> 3 \"register_operand\" \"w\")\n+\t     (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))]\n+\t  SQRDMLH_AS))]\n+   \"TARGET_SIMD_RDMA\"\n+   {\n+     operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n+     return\n+      \"sqrdml<SQRDMLH_AS:rdma_as>h\\\\t%<v>0, %<v>2, %3.<v>[%4]\";\n+   }\n+   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n ;; vqdml[sa]l\n \n (define_insn \"aarch64_sqdml<SBINQOPS:as>l<mode>\""}, {"sha": "9343c9cd1c837946731f9b40f3c174cd8168d246", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b26d65cd33a98131cc54f4709959371cdc7789/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b26d65cd33a98131cc54f4709959371cdc7789/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=57b26d65cd33a98131cc54f4709959371cdc7789", "patch": "@@ -304,6 +304,8 @@\n     UNSPEC_PMULL2       ; Used in aarch64-simd.md.\n     UNSPEC_REV_REGLIST  ; Used in aarch64-simd.md.\n     UNSPEC_VEC_SHR      ; Used in aarch64-simd.md.\n+    UNSPEC_SQRDMLAH     ; Used in aarch64-simd.md.\n+    UNSPEC_SQRDMLSH     ; Used in aarch64-simd.md.\n ])\n \n ;; ------------------------------------------------------------------\n@@ -975,6 +977,8 @@\n                                UNSPEC_SQSHRN UNSPEC_UQSHRN\n                                UNSPEC_SQRSHRN UNSPEC_UQRSHRN])\n \n+(define_int_iterator SQRDMLH_AS [UNSPEC_SQRDMLAH UNSPEC_SQRDMLSH])\n+\n (define_int_iterator PERMUTE [UNSPEC_ZIP1 UNSPEC_ZIP2\n \t\t\t      UNSPEC_TRN1 UNSPEC_TRN2\n \t\t\t      UNSPEC_UZP1 UNSPEC_UZP2])\n@@ -1149,3 +1153,5 @@\n \t\t\t  (UNSPEC_SHA1M \"m\")])\n \n (define_int_attr sha256_op [(UNSPEC_SHA256H \"\") (UNSPEC_SHA256H2 \"2\")])\n+\n+(define_int_attr rdma_as [(UNSPEC_SQRDMLAH \"a\") (UNSPEC_SQRDMLSH \"s\")])"}]}