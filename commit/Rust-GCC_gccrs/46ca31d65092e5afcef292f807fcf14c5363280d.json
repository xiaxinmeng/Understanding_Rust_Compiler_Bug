{"sha": "46ca31d65092e5afcef292f807fcf14c5363280d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjYTMxZDY1MDkyZTVhZmNlZjI5MmY4MDdmY2YxNGM1MzYzMjgwZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-18T15:25:54Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-18T15:27:37Z"}, "message": "i386: Implement 4-byte vector support [PR100637]\n\nAdd infrastructure, logic and arithmetic support for 4-byte vectors.\nThese can be used with SSE2 targets, where movd instructions from/to\nXMM registers are available.  x86_64 ABI passes 4-byte vectors in\ninteger registers, so also add logic operations with integer registers.\n\n2021-05-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100637\n\t* config/i386/i386.h (VALID_SSE2_REG_MODE):\n\tAdd V4QI and V2HI modes.\n\t(VALID_INT_MODE_P): Ditto.\n\t* config/i386/mmx.md (VI_32): New mode iterator.\n\t(mmxvecsize): Handle V4QI and V2HI.\n\t(Yv_Yw): Ditto.\n\t(mov<VI_32:mode>): New expander.\n\t(*mov<mode>_internal): New insn pattern.\n\t(movmisalign<VI_32:mode>): New expander.\n\t(neg<VI_32:mode>): New expander.\n\t(<plusminus:insn><VI_32:mode>3): New expander.\n\t(*<plusminus:insn><VI_32:mode>3): New insn pattern.\n\t(mulv2hi3): New expander.\n\t(*mulv2hi3): New insn pattern.\n\t(one_cmpl<VI_32:mode>2): New expander.\n\t(*andnot<VI_32:mode>3): New insn pattern.\n\t(<any_logic:code><VI_32:mode>3): New expander.\n\t(*<any_logic:code><VI_32:mode>3): New insn pattern.\n\ngcc/testsuite/\n\n\tPR target/100637\n\t* gcc.target/i386/pr100637-1b.c: New test.\n\t* gcc.target/i386/pr100637-1w.c: Ditto.\n\n\t* gcc.target/i386/pr92658-avx2-2.c: Do not XFAIL scan for pmovsxbq.\n\t* gcc.target/i386/pr92658-avx2.c: Do not XFAIL scan for pmovzxbq.\n\t* gcc.target/i386/pr92658-avx512vl.c: Do not XFAIL scan for vpmovdb.\n\t* gcc.target/i386/pr92658-sse4-2.c: Do not XFAIL scan for\n\tpmovsxbd and pmovsxwq.\n\t* gcc.target/i386/pr92658-sse4.c: Do not XFAIL scan for\n\tpmovzxbd and pmovzxwq.", "tree": {"sha": "bf4070431fa8bed5ef42d23e03cf3fb97d6e8d50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf4070431fa8bed5ef42d23e03cf3fb97d6e8d50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46ca31d65092e5afcef292f807fcf14c5363280d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ca31d65092e5afcef292f807fcf14c5363280d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ca31d65092e5afcef292f807fcf14c5363280d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ca31d65092e5afcef292f807fcf14c5363280d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3711a5a58674bd17b19bcf4e3f2edd60ba76c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3711a5a58674bd17b19bcf4e3f2edd60ba76c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d3711a5a58674bd17b19bcf4e3f2edd60ba76c1"}], "stats": {"total": 277, "additions": 260, "deletions": 17}, "files": [{"sha": "d15f9b25df56f25ddd162988f28ec44c6b69cb12", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=46ca31d65092e5afcef292f807fcf14c5363280d", "patch": "@@ -1007,6 +1007,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define VALID_SSE2_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n+   || (MODE) == V4QImode || (MODE) == V2HImode\t\t\t\t\\\n    || (MODE) == V2DImode || (MODE) == DFmode)\n \n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n@@ -1034,12 +1035,14 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == SCmode || (MODE) == DCmode || (MODE) == XCmode)\t\t\\\n \n #define VALID_INT_MODE_P(MODE)\t\t\t\t\t\t\\\n-  ((MODE) == QImode || (MODE) == HImode || (MODE) == SImode\t\t\\\n-   || (MODE) == DImode\t\t\t\t\t\t\t\\\n-   || (MODE) == CQImode || (MODE) == CHImode || (MODE) == CSImode\t\\\n-   || (MODE) == CDImode\t\t\t\t\t\t\t\\\n-   || (TARGET_64BIT && ((MODE) == TImode || (MODE) == CTImode\t\t\\\n-\t\t\t|| (MODE) == TFmode || (MODE) == TCmode)))\n+  ((MODE) == QImode || (MODE) == HImode\t\t\t\t\t\\\n+   || (MODE) == SImode || (MODE) == DImode\t\t\t\t\\\n+   || (MODE) == CQImode || (MODE) == CHImode\t\t\t\t\\\n+   || (MODE) == CSImode || (MODE) == CDImode\t\t\t\t\\\n+   || (TARGET_64BIT\t\t\t\t\t\t\t\\\n+       && ((MODE) == TImode || (MODE) == CTImode\t\t\t\\\n+\t   || (MODE) == TFmode || (MODE) == TCmode))\t\t\t\\\n+   || (MODE) == V4QImode || (MODE) == V2HImode)\n \n /* Return true for modes passed in SSE registers.  */\n #define SSE_REG_MODE_P(MODE)\t\t\t\t\t\t\\"}, {"sha": "7806b62dbe06f699991693b56353e365ba16eebd", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 191, "deletions": 4, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=46ca31d65092e5afcef292f807fcf14c5363280d", "patch": "@@ -57,11 +57,15 @@\n (define_mode_iterator MMXMODE24 [V4HI V2SI])\n (define_mode_iterator MMXMODE248 [V4HI V2SI V1DI])\n \n+;; All 32bit integer vector modes\n+(define_mode_iterator VI_32 [V4QI V2HI])\n+\n ;; All V2S* modes\n (define_mode_iterator V2FI [V2SF V2SI])\n \n ;; Mapping from integer vector mode to mnemonic suffix\n-(define_mode_attr mmxvecsize [(V8QI \"b\") (V4HI \"w\") (V2SI \"d\") (V1DI \"q\")])\n+(define_mode_attr mmxvecsize\n+  [(V8QI \"b\") (V4QI \"b\") (V4HI \"w\") (V2HI \"w\") (V2SI \"d\") (V1DI \"q\")])\n \n (define_mode_attr mmxdoublemode\n   [(V8QI \"V8HI\") (V4HI \"V4SI\")])\n@@ -74,7 +78,8 @@\n   [(V2SF \"v2si\") (V2SI \"v2si\") (V4HI \"v4hi\") (V8QI \"v8qi\")])\n \n (define_mode_attr Yv_Yw\n-  [(V8QI \"Yw\") (V4HI \"Yw\") (V2SI \"Yv\") (V1DI \"Yv\") (V2SF \"Yv\")])\n+  [(V8QI \"Yw\") (V4QI \"Yw\") (V4HI \"Yw\") (V2HI \"Yw\")\n+   (V2SI \"Yv\") (V1DI \"Yv\") (V2SF \"Yv\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n@@ -233,6 +238,80 @@\n   DONE;\n })\n \n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:VI_32 0 \"nonimmediate_operand\")\n+\t(match_operand:VI_32 1 \"nonimmediate_operand\"))]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_vector_move (<MODE>mode, operands);\n+  DONE;\n+})\n+\n+(define_insn \"*mov<mode>_internal\"\n+  [(set (match_operand:VI_32 0 \"nonimmediate_operand\"\n+    \"=r ,m ,v,v,v,m,r,v\")\n+\t(match_operand:VI_32 1 \"general_operand\"\n+    \"rmC,rC,C,v,m,v,v,r\"))]\n+  \"TARGET_SSE2 &&\n+   !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_IMOV:\n+      return \"mov{l}\\t{%1, %0|%0, %1}\";\n+\n+    case TYPE_SSELOG1:\n+      return standard_sse_constant_opcode (insn, operands);\n+\n+    case TYPE_SSEMOV:\n+      return ix86_output_ssemov (insn, operands);\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (const_string \"sselog1\")\n+\t    (eq_attr \"alternative\" \"3,4,5,6,7\")\n+\t      (const_string \"ssemov\")\n+\t   ]\n+\t   (const_string \"imov\")))\n+   (set (attr \"prefix\")\n+     (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n+       (const_string \"maybe_vex\")\n+       (const_string \"orig\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (and (eq_attr \"type\" \"ssemov\") (eq_attr \"mode\" \"SI\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set (attr \"mode\")\n+     (cond [(eq_attr \"alternative\" \"2,3\")\n+\t      (cond [(match_test \"TARGET_AVX\")\n+\t\t       (const_string \"TI\")\n+\t\t     (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t       (const_string \"V4SF\")\n+\t\t    ]\n+\t\t    (const_string \"TI\"))\n+\t   ]\n+\t   (const_string \"SI\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"6\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"7\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n+\n+(define_expand \"movmisalign<mode>\"\n+  [(set (match_operand:VI_32 0 \"nonimmediate_operand\")\n+\t(match_operand:VI_32 1 \"nonimmediate_operand\"))]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_vector_move (<MODE>mode, operands);\n+  DONE;\n+})\n+\n (define_insn \"sse_movntq\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m,m\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"y,r\")]\n@@ -1229,6 +1308,14 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n+(define_expand \"neg<mode>2\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n+\t(minus:MMXMODEI\n+\t  (match_dup 2)\n+\t  (match_operand:MMXMODEI 1 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n+\n (define_expand \"mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODEI8 0 \"register_operand\")\n \t(plusminus:MMXMODEI8\n@@ -1248,8 +1335,10 @@\n (define_insn \"*mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODEI8 0 \"register_operand\" \"=y,x,<Yv_Yw>\")\n         (plusminus:MMXMODEI8\n-\t  (match_operand:MMXMODEI8 1 \"register_mmxmem_operand\" \"<comm>0,0,<Yv_Yw>\")\n-\t  (match_operand:MMXMODEI8 2 \"register_mmxmem_operand\" \"ym,x,<Yv_Yw>\")))]\n+\t  (match_operand:MMXMODEI8 1 \"register_mmxmem_operand\"\n+\t    \"<comm>0,0,<Yv_Yw>\")\n+\t  (match_operand:MMXMODEI8 2 \"register_mmxmem_operand\"\n+\t    \"ym,x,<Yv_Yw>\")))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n@@ -1261,6 +1350,36 @@\n    (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_expand \"neg<mode>2\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(minus:VI_32\n+\t  (match_dup 2)\n+\t  (match_operand:VI_32 1 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n+  \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n+\n+(define_expand \"<insn><mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(plusminus:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\")\n+\t  (match_operand:VI_32 2 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_insn \"*<insn><mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,<Yv_Yw>\")\n+        (plusminus:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\" \"<comm>0,<Yv_Yw>\")\n+\t  (match_operand:VI_32 2 \"register_operand\" \"x,<Yv_Yw>\")))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"@\n+   p<plusminus_mnemonic><mmxvecsize>\\t{%2, %0|%0, %2}\n+   vp<plusminus_mnemonic><mmxvecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODE12 0 \"register_operand\")\n \t(sat_plusminus:MMXMODE12\n@@ -1314,6 +1433,26 @@\n    (set_attr \"type\" \"mmxmul,ssemul,ssemul\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_expand \"mulv2hi3\"\n+  [(set (match_operand:V2HI 0 \"register_operand\")\n+        (mult:V2HI (match_operand:V2HI 1 \"register_operand\")\n+\t\t   (match_operand:V2HI 2 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V2HImode, operands);\")\n+\n+(define_insn \"*mulv2hi3\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=x,Yw\")\n+        (mult:V2HI (match_operand:V2HI 1 \"register_operand\" \"%0,Yw\")\n+\t\t   (match_operand:V2HI 2 \"register_operand\" \"x,Yw\")))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (MULT, V2HImode, operands)\"\n+  \"@\n+   pmullw\\t{%2, %0|%0, %2}\n+   vpmullw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssemul\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"mmx_smulv4hi3_highpart\"\n   [(set (match_operand:V4HI 0 \"register_operand\")\n \t(truncate:V4HI\n@@ -1839,6 +1978,14 @@\n   \"TARGET_MMX_WITH_SSE\"\n   \"operands[2] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\")\n \n+(define_expand \"one_cmpl<mode>2\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(xor:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\")\n+\t  (match_dup 2)))]\n+  \"TARGET_SSE2\"\n+  \"operands[2] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\")\n+\n (define_insn \"mmx_andnot<mode>3\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,x,x,v\")\n \t(and:MMXMODEI\n@@ -1855,6 +2002,22 @@\n    (set_attr \"type\" \"mmxadd,sselog,sselog,sselog\")\n    (set_attr \"mode\" \"DI,TI,TI,TI\")])\n \n+(define_insn \"*andnot<mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=r,x,x,v\")\n+\t(and:VI_32\n+\t  (not:VI_32 (match_operand:VI_32 1 \"register_operand\" \"r,0,x,v\"))\n+\t  (match_operand:VI_32 2 \"register_operand\" \"r,x,x,v\")))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   andn\\t{%2, %1, %0|%0, %1, %2}\n+   pandn\\t{%2, %0|%0, %2}\n+   vpandn\\t{%2, %1, %0|%0, %1, %2}\n+   vpandnd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"bmi,noavx,avx,avx512vl\")\n+   (set_attr \"type\" \"bitmanip,sselog,sselog,sselog\")\n+   (set_attr \"btver2_decode\" \"direct,*,*,*\")\n+   (set_attr \"mode\" \"SI,TI,TI,TI\")])\n+\n (define_expand \"mmx_<code><mode>3\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\")\n \t(any_logic:MMXMODEI\n@@ -1888,6 +2051,30 @@\n    (set_attr \"type\" \"mmxadd,sselog,sselog,sselog\")\n    (set_attr \"mode\" \"DI,TI,TI,TI\")])\n \n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(any_logic:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\")\n+\t  (match_operand:VI_32 2 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_insn \"*<code><mode>3\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=r,x,x,v\")\n+        (any_logic:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\" \"%0,0,x,v\")\n+\t  (match_operand:VI_32 2 \"register_operand\" \"r,x,x,v\")))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"@\n+   <logic>\\t{%2, %0|%0, %2}\n+   p<logic>\\t{%2, %0|%0, %2}\n+   vp<logic>\\t{%2, %1, %0|%0, %1, %2}\n+   vp<logic>d\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,noavx,avx,avx512vl\")\n+   (set_attr \"type\" \"alu,sselog,sselog,sselog\")\n+   (set_attr \"mode\" \"SI,TI,TI,TI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral element swizzling"}, {"sha": "3e7445ad9bbc39e2eaf1e11815f0b9fff75b5ec7", "filename": "gcc/testsuite/gcc.target/i386/pr100637-1b.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1b.c?ref=46ca31d65092e5afcef292f807fcf14c5363280d", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -dp\" } */\n+\n+typedef char __v4qi __attribute__ ((__vector_size__ (4)));\n+\n+__v4qi and (__v4qi a, __v4qi b) { return a & b; };\n+/* { dg-final { scan-assembler \"andv4qi3\" } } */\n+\n+__v4qi andn (__v4qi a, __v4qi b) { return a & ~b; };\n+/* { dg-final { scan-assembler \"andnotv4qi3\" } } */\n+\n+__v4qi or  (__v4qi a, __v4qi b) { return a | b; };\n+/* { dg-final { scan-assembler \"iorv4qi3\" } } */\n+\n+__v4qi xor  (__v4qi a, __v4qi b) { return a ^ b; };\n+__v4qi not  (__v4qi a) { return ~a; };\n+/* { dg-final { scan-assembler-times \"xorv4qi3\" 2 } } */\n+\n+__v4qi plus  (__v4qi a, __v4qi b) { return a + b; };\n+/* { dg-final { scan-assembler \"addv4qi3\" } } */\n+\n+__v4qi minus  (__v4qi a, __v4qi b) { return a - b; };\n+__v4qi neg  (__v4qi a) { return -a; };\n+/* { dg-final { scan-assembler-times \"subv4qi3\" 2 } } */"}, {"sha": "ed1baeb3acde7cdb76f81245596045cb088e2369", "filename": "gcc/testsuite/gcc.target/i386/pr100637-1w.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1w.c?ref=46ca31d65092e5afcef292f807fcf14c5363280d", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -dp\" } */\n+\n+typedef short __v2hi __attribute__ ((__vector_size__ (4)));\n+\n+__v2hi and (__v2hi a, __v2hi b) { return a & b; };\n+/* { dg-final { scan-assembler \"andv2hi3\" } } */\n+\n+__v2hi andn (__v2hi a, __v2hi b) { return a & ~b; };\n+/* { dg-final { scan-assembler \"andnotv2hi3\" } } */\n+\n+__v2hi or  (__v2hi a, __v2hi b) { return a | b; };\n+/* { dg-final { scan-assembler \"iorv2hi3\" } } */\n+\n+__v2hi xor  (__v2hi a, __v2hi b) { return a ^ b; };\n+__v2hi not  (__v2hi a) { return ~a; };\n+/* { dg-final { scan-assembler-times \"xorv2hi3\" 2 } } */\n+\n+__v2hi plus  (__v2hi a, __v2hi b) { return a + b; };\n+/* { dg-final { scan-assembler \"addv2hi3\" } } */\n+\n+__v2hi minus  (__v2hi a, __v2hi b) { return a - b; };\n+__v2hi neg  (__v2hi a) { return -a; };\n+/* { dg-final { scan-assembler-times \"subv2hi3\" 2 } } */\n+\n+__v2hi mul  (__v2hi a, __v2hi b) { return a * b; };\n+/* { dg-final { scan-assembler \"mulv2hi3\" } } */"}, {"sha": "6c30702c39d9db53b07e99fbe5974bbe9d52718a", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx2-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2-2.c?ref=46ca31d65092e5afcef292f807fcf14c5363280d", "patch": "@@ -109,7 +109,7 @@ bar_s8_s64 (v4di * dst, v32qi src)\n   dst[0] = *(v4di *) tem;\n }\n \n-/* { dg-final { scan-assembler-times \"pmovsxbq\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"pmovsxbq\" 2 } } */\n \n void\n foo_s16_s32 (v8si * dst, v16hi * __restrict src)"}, {"sha": "70b5bdbc38e14330967e3f85921055bf571e7abe", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2.c?ref=46ca31d65092e5afcef292f807fcf14c5363280d", "patch": "@@ -109,7 +109,7 @@ bar_u8_u64 (v4di * dst, v32qi src)\n   dst[0] = *(v4di *) tem;\n }\n \n-/* { dg-final { scan-assembler-times \"pmovzxbq\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"pmovzxbq\" 2 } } */\n \n void\n foo_u16_u32 (v8si * dst, v16hi * __restrict src)"}, {"sha": "a9f7d7e6499ee534757c8a7fb5df56268c215ffe", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx512vl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512vl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512vl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512vl.c?ref=46ca31d65092e5afcef292f807fcf14c5363280d", "patch": "@@ -126,4 +126,4 @@ truncdb_128 (v16qi * dst, v4si * __restrict src)\n /* { dg-final { scan-assembler-times \"vpmovqb\" 2 { xfail *-*-* } } } */\n /* { dg-final { scan-assembler-times \"vpmovdw\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovdw\" 2 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vpmovdb\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vpmovdb\" 2 } } */"}, {"sha": "53e89ad105267f18f47d63767cbe3f4e471a3ad3", "filename": "gcc/testsuite/gcc.target/i386/pr92658-sse4-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4-2.c?ref=46ca31d65092e5afcef292f807fcf14c5363280d", "patch": "@@ -61,7 +61,7 @@ bar_s8_s32 (v4si * dst, v16qi src)\n   dst[0] = *(v4si *) tem;\n }\n \n-/* { dg-final { scan-assembler-times \"pmovsxbd\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"pmovsxbd\" 2 } } */\n \n void\n foo_s8_s64 (v2di * dst, v16qi * __restrict src)\n@@ -125,7 +125,7 @@ bar_s16_s64 (v2di * dst, v8hi src)\n   dst[0] = *(v2di *) tem;\n }\n \n-/* { dg-final { scan-assembler-times \"pmovsxwq\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"pmovsxwq\" 2 } } */\n \n void\n foo_s32_s64 (v2di * dst, v4si * __restrict src)"}, {"sha": "e12e1639b7d6ea6584e6ee65a652ee835ebf0c43", "filename": "gcc/testsuite/gcc.target/i386/pr92658-sse4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca31d65092e5afcef292f807fcf14c5363280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4.c?ref=46ca31d65092e5afcef292f807fcf14c5363280d", "patch": "@@ -61,7 +61,7 @@ bar_u8_u32 (v4si * dst, v16qi src)\n   dst[0] = *(v4si *) tem;\n }\n \n-/* { dg-final { scan-assembler-times \"pmovzxbd\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"pmovzxbd\" 2 } } */\n \n void\n foo_u8_u64 (v2di * dst, v16qi * __restrict src)\n@@ -125,7 +125,7 @@ bar_u16_u64 (v2di * dst, v8hi src)\n   dst[0] = *(v2di *) tem;\n }\n \n-/* { dg-final { scan-assembler-times \"pmovzxwq\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"pmovzxwq\" 2 } } */\n \n void\n foo_u32_u64 (v2di * dst, v4si * __restrict src)"}]}