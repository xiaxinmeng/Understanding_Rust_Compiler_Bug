{"sha": "e92730aac525a97dec0cba215934148f7cb55bf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyNzMwYWFjNTI1YTk3ZGVjMGNiYTIxNTkzNDE0OGY3Y2I1NWJmOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-02-02T19:06:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-02-02T19:06:55Z"}, "message": "cp-tree.h (build_expr_ptr_wrapper, can_free): Remove.\n\n\t* cp-tree.h (build_expr_ptr_wrapper, can_free): Remove.\n\t* tree.c (build_expr_ptr_wrapper, can_free, permanent_obstack):\n\tRemove.\n\t* call.c (convert_class_to_reference, build_user_type_conversion_1,\n\tadd_warning): Change build_expr_ptr_wrapper to build_ptr_wrapper.\n\nFrom-SVN: r39412", "tree": {"sha": "ef9b1f12bcd84bddbea8535c6a3aebfcff32263a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef9b1f12bcd84bddbea8535c6a3aebfcff32263a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e92730aac525a97dec0cba215934148f7cb55bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92730aac525a97dec0cba215934148f7cb55bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e92730aac525a97dec0cba215934148f7cb55bf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92730aac525a97dec0cba215934148f7cb55bf9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2146a45e8e6ba1fb48a4cd5321bba73b88e3630d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2146a45e8e6ba1fb48a4cd5321bba73b88e3630d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2146a45e8e6ba1fb48a4cd5321bba73b88e3630d"}], "stats": {"total": 48, "additions": 11, "deletions": 37}, "files": [{"sha": "edb2039938afdb35a2b73cc48701d00b9e6629b9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e92730aac525a97dec0cba215934148f7cb55bf9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e92730aac525a97dec0cba215934148f7cb55bf9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e92730aac525a97dec0cba215934148f7cb55bf9", "patch": "@@ -1,3 +1,11 @@\n+2001-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (build_expr_ptr_wrapper, can_free): Remove.\n+\t* tree.c (build_expr_ptr_wrapper, can_free, permanent_obstack):\n+\tRemove.\n+\t* call.c (convert_class_to_reference, build_user_type_conversion_1,\n+\tadd_warning): Change build_expr_ptr_wrapper to build_ptr_wrapper.\n+\n 2001-02-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Make-lang.in (g++spec.o): Add DRIVER_DEFINES to the list"}, {"sha": "59bed97d92da85e5a3b7eda30df95c9e53cbcc74", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e92730aac525a97dec0cba215934148f7cb55bf9/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e92730aac525a97dec0cba215934148f7cb55bf9/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e92730aac525a97dec0cba215934148f7cb55bf9", "patch": "@@ -1000,7 +1000,7 @@ convert_class_to_reference (t, s, expr)\n   conv = build_conv (USER_CONV,\n \t\t     non_reference (TREE_TYPE (TREE_TYPE (cand->fn))),\n \t\t     conv);\n-  TREE_OPERAND (conv, 1) = build_expr_ptr_wrapper (cand);\n+  TREE_OPERAND (conv, 1) = build_ptr_wrapper (cand);\n   ICS_USER_FLAG (conv) = 1;\n   if (cand->viable == -1)\n     ICS_BAD_FLAG (conv) = 1;\n@@ -2516,7 +2516,7 @@ build_user_type_conversion_1 (totype, expr, flags)\n     (USER_CONV,\n      (DECL_CONSTRUCTOR_P (cand->fn)\n       ? totype : non_reference (TREE_TYPE (TREE_TYPE (cand->fn)))),\n-     expr, build_expr_ptr_wrapper (cand));\n+     expr, build_ptr_wrapper (cand));\n   ICS_USER_FLAG (cand->second_conv) = 1;\n   if (cand->viable == -1)\n     ICS_BAD_FLAG (cand->second_conv) = 1;\n@@ -5039,7 +5039,7 @@ add_warning (winner, loser)\n      struct z_candidate *winner, *loser;\n {\n   winner->warnings = tree_cons (NULL_PTR,\n-\t\t\t\tbuild_expr_ptr_wrapper (loser),\n+\t\t\t\tbuild_ptr_wrapper (loser),\n \t\t\t\twinner->warnings);\n }\n "}, {"sha": "3ec2778f08c9a08a42b1dad5539a4248e329de3c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e92730aac525a97dec0cba215934148f7cb55bf9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e92730aac525a97dec0cba215934148f7cb55bf9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e92730aac525a97dec0cba215934148f7cb55bf9", "patch": "@@ -4392,13 +4392,11 @@ extern tree decl_namespace_context\t\tPARAMS ((tree));\n extern tree lvalue_type\t\t\t\tPARAMS ((tree));\n extern tree error_type\t\t\t\tPARAMS ((tree));\n extern tree build_ptr_wrapper\t\t\tPARAMS ((void *));\n-extern tree build_expr_ptr_wrapper\t\tPARAMS ((void *));\n extern tree build_int_wrapper\t\t\tPARAMS ((int));\n extern tree build_srcloc_here\t\t\tPARAMS ((void));\n extern int varargs_function_p\t\t\tPARAMS ((tree));\n extern int really_overloaded_fn\t\t\tPARAMS ((tree));\n extern int cp_tree_equal\t\t\tPARAMS ((tree, tree));\n-extern int can_free\t\t\t\tPARAMS ((struct obstack *, tree));\n extern tree no_linkage_check\t\t\tPARAMS ((tree));\n extern void debug_binfo\t\t\t\tPARAMS ((tree));\n extern tree build_dummy_object\t\t\tPARAMS ((tree));"}, {"sha": "d027726b3daccdc94d24049f6f0ceada06f5f27c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e92730aac525a97dec0cba215934148f7cb55bf9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e92730aac525a97dec0cba215934148f7cb55bf9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e92730aac525a97dec0cba215934148f7cb55bf9", "patch": "@@ -408,8 +408,6 @@ break_out_calls (exp)\n \n }\n \f\n-extern struct obstack permanent_obstack;\n-\n /* Here is how primitive or already-canonicalized types' hash\n    codes are made.  MUST BE CONSISTENT WITH tree.c !!! */\n #define TYPE_HASH(TYPE) ((HOST_WIDE_INT) (TYPE) & 0777777)\n@@ -1838,27 +1836,6 @@ get_type_decl (t)\n   return 0;\n }\n \n-int\n-can_free (obstack, t)\n-     struct obstack *obstack;\n-     tree t;\n-{\n-  int size = 0;\n-\n-  if (TREE_CODE (t) == TREE_VEC)\n-    size = (TREE_VEC_LENGTH (t)-1) * sizeof (tree) + sizeof (struct tree_vec);\n-  else\n-    my_friendly_abort (42);\n-\n-#define ROUND(x) ((x + obstack_alignment_mask (obstack)) \\\n-\t\t  & ~ obstack_alignment_mask (obstack))\n-  if ((char *)t + ROUND (size) == obstack_next_free (obstack))\n-    return 1;\n-#undef ROUND\n-\n-  return 0;\n-}\n-\n /* Return first vector element whose BINFO_TYPE is ELEM.\n    Return 0 if ELEM is not in VEC.  VEC may be NULL_TREE.  */\n \n@@ -2061,15 +2038,6 @@ build_ptr_wrapper (ptr)\n   return t;\n }\n \n-/* Same, but on the expression_obstack.  */\n-\n-tree\n-build_expr_ptr_wrapper (ptr)\n-     void *ptr;\n-{\n-  return build_ptr_wrapper (ptr);\n-}\n-\n /* Build a wrapper around some integer I so we can use it as a tree.  */\n \n tree"}]}