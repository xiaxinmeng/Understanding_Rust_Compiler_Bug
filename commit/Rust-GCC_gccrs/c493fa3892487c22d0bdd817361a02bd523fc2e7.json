{"sha": "c493fa3892487c22d0bdd817361a02bd523fc2e7", "node_id": "C_kwDOANBUbNoAKGM0OTNmYTM4OTI0ODdjMjJkMGJkZDgxNzM2MWEwMmJkNTIzZmMyZTc", "commit": {"author": {"name": "Christoph M\u00fcllner", "email": "christoph.muellner@vrull.eu", "date": "2022-07-29T03:19:56Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2023-03-15T08:56:52Z"}, "message": "riscv: thead: Add support for the XTheadBb ISA extension\n\nThis patch adds support for the XTheadBb ISA extension.\nThus, there is a functional overlap of the new instructions with\nexisting Bitmanip instruction, which allows a good amount of code\nsharing. However, the vendor extensions are cleanly separated from\nthe standard extensions (e.g. by using INSN expand pattern that\nwill re-emit RTL that matches the patterns of either Bitmanip or\nXThead INSNs).\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md (clzdi2): New expand.\n\t(clzsi2): New expand.\n\t(ctz<mode>2): New expand.\n\t(popcount<mode>2): New expand.\n\t(<bitmanip_optab>si2): Rename INSN.\n\t(*<bitmanip_optab>si2): Hide INSN name.\n\t(<bitmanip_optab>di2): Rename INSN.\n\t(*<bitmanip_optab>di2): Hide INSN name.\n\t(rotrsi3): Remove INSN.\n\t(rotr<mode>3): Add expand.\n\t(*rotrsi3): New INSN.\n\t(rotrdi3): Rename INSN.\n\t(*rotrdi3): Hide INSN name.\n\t(rotrsi3_sext): Rename INSN.\n\t(*rotrsi3_sext): Hide INSN name.\n\t(bswap<mode>2): Remove INSN.\n\t(bswapdi2): Add expand.\n\t(bswapsi2): Add expand.\n\t(*bswap<mode>2): Hide INSN name.\n\t* config/riscv/riscv.cc (riscv_rtx_costs): Add costs for sign\n\textraction.\n\t* config/riscv/riscv.md (extv<mode>): New expand.\n\t(extzv<mode>): New expand.\n\t* config/riscv/thead.md (*th_srri<mode>3): New INSN.\n\t(*th_ext<mode>): New INSN.\n\t(*th_extu<mode>): New INSN.\n\t(*th_clz<mode>2): New INSN.\n\t(*th_rev<mode>2): New INSN.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/xtheadbb-ext.c: New test.\n\t* gcc.target/riscv/xtheadbb-extu-2.c: New test.\n\t* gcc.target/riscv/xtheadbb-extu.c: New test.\n\t* gcc.target/riscv/xtheadbb-ff1.c: New test.\n\t* gcc.target/riscv/xtheadbb-rev.c: New test.\n\t* gcc.target/riscv/xtheadbb-srri.c: New test.\n\nSigned-off-by: Christoph M\u00fcllner <christoph.muellner@vrull.eu>", "tree": {"sha": "6d44dab5ab6d97d00b24c21815512373d039c604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d44dab5ab6d97d00b24c21815512373d039c604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c493fa3892487c22d0bdd817361a02bd523fc2e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c493fa3892487c22d0bdd817361a02bd523fc2e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c493fa3892487c22d0bdd817361a02bd523fc2e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c493fa3892487c22d0bdd817361a02bd523fc2e7/comments", "author": {"login": "cmuellner", "id": 92810, "node_id": "MDQ6VXNlcjkyODEw", "avatar_url": "https://avatars.githubusercontent.com/u/92810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmuellner", "html_url": "https://github.com/cmuellner", "followers_url": "https://api.github.com/users/cmuellner/followers", "following_url": "https://api.github.com/users/cmuellner/following{/other_user}", "gists_url": "https://api.github.com/users/cmuellner/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmuellner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmuellner/subscriptions", "organizations_url": "https://api.github.com/users/cmuellner/orgs", "repos_url": "https://api.github.com/users/cmuellner/repos", "events_url": "https://api.github.com/users/cmuellner/events{/privacy}", "received_events_url": "https://api.github.com/users/cmuellner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d328d3a6f8756ed61b3cdf3675b24051f7d3b2ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d328d3a6f8756ed61b3cdf3675b24051f7d3b2ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d328d3a6f8756ed61b3cdf3675b24051f7d3b2ef"}], "stats": {"total": 294, "additions": 288, "deletions": 6}, "files": [{"sha": "7aa591689ba87c1bb68730ea1d760ba6749c7ee8", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -185,6 +185,26 @@\n \n ;; ZBB extension.\n \n+(define_expand \"clzdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(clz:DI (match_operand:DI 1 \"register_operand\")))]\n+  \"TARGET_64BIT && (TARGET_ZBB || TARGET_XTHEADBB)\")\n+\n+(define_expand \"clzsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(clz:SI (match_operand:SI 1 \"register_operand\")))]\n+  \"TARGET_ZBB || (!TARGET_64BIT && TARGET_XTHEADBB)\")\n+\n+(define_expand \"ctz<mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(ctz:GPR (match_operand:GPR 1 \"register_operand\")))]\n+  \"TARGET_ZBB\")\n+\n+(define_expand \"popcount<mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(popcount:GPR (match_operand:GPR 1 \"register_operand\")))]\n+  \"TARGET_ZBB\")\n+\n (define_insn \"*<optab>_not<mode>\"\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n         (bitmanip_bitwise:X (not:X (match_operand:X 1 \"register_operand\" \"r\"))\n@@ -216,7 +236,7 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<X:MODE>\")])\n \n-(define_insn \"<bitmanip_optab>si2\"\n+(define_insn \"*<bitmanip_optab>si2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (clz_ctz_pcnt:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"TARGET_ZBB\"\n@@ -233,7 +253,7 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"<bitmanip_optab>di2\"\n+(define_insn \"*<bitmanip_optab>di2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (clz_ctz_pcnt:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"TARGET_64BIT && TARGET_ZBB\"\n@@ -273,23 +293,33 @@\n   [(set_attr \"type\" \"bitmanip,load\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"rotrsi3\"\n+(define_expand \"rotr<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(rotatert:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t     (match_operand:QI 2 \"arith_operand\")))]\n+  \"TARGET_ZBB || TARGET_XTHEADBB\"\n+{\n+  if (TARGET_XTHEADBB && !immediate_operand (operands[2], VOIDmode))\n+    FAIL;\n+})\n+\n+(define_insn \"*rotrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:QI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ZBB || TARGET_ZBKB\"\n   \"ror%i2%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n-(define_insn \"rotrdi3\"\n+(define_insn \"*rotrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(rotatert:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:QI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_64BIT && (TARGET_ZBB || TARGET_ZBKB)\"\n   \"ror%i2\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n-(define_insn \"rotrsi3_sext\"\n+(define_insn \"*rotrsi3_sext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\"))))]\n@@ -329,7 +359,17 @@\n   \"TARGET_ZBB\"\n   \"orc.b\\t%0,%1\")\n \n-(define_insn \"bswap<mode>2\"\n+(define_expand \"bswapdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(bswap:DI (match_operand:DI 1 \"register_operand\")))]\n+  \"TARGET_64BIT && (TARGET_ZBB || TARGET_XTHEADBB)\")\n+\n+(define_expand \"bswapsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(bswap:SI (match_operand:SI 1 \"register_operand\")))]\n+  \"(!TARGET_64BIT && TARGET_ZBB) || TARGET_XTHEADBB\")\n+\n+(define_insn \"*bswap<mode>2\"\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n         (bswap:X (match_operand:X 1 \"register_operand\" \"r\")))]\n   \"TARGET_ZBB || TARGET_ZBKB\""}, {"sha": "217f407009267e6ec5644e3d6ed549e143668432", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -2420,6 +2420,15 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n \t  *total = COSTS_N_INSNS (SINGLE_SHIFT_COST);\n \t  return true;\n \t}\n+      gcc_fallthrough ();\n+    case SIGN_EXTRACT:\n+      if (TARGET_XTHEADBB && outer_code == SET\n+\t  && CONST_INT_P (XEXP (x, 1))\n+\t  && CONST_INT_P (XEXP (x, 2)))\n+\t{\n+\t  *total = COSTS_N_INSNS (SINGLE_SHIFT_COST);\n+\t  return true;\n+\t}\n       return false;\n \n     case ASHIFT:"}, {"sha": "c53c1a7609e32db6c4dae660d60bb0dbe0b21aad", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -3096,6 +3096,26 @@\n   \"prefetch.i\\t%a0\"\n )\n \n+(define_expand \"extv<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+\t(sign_extract:GPR (match_operand:GPR 1 \"register_operand\" \"r\")\n+\t\t\t (match_operand 2 \"const_int_operand\")\n+\t\t\t (match_operand 3 \"const_int_operand\")))]\n+  \"TARGET_XTHEADBB\"\n+)\n+\n+(define_expand \"extzv<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+\t(zero_extract:GPR (match_operand:GPR 1 \"register_operand\" \"r\")\n+\t\t\t (match_operand 2 \"const_int_operand\")\n+\t\t\t (match_operand 3 \"const_int_operand\")))]\n+  \"TARGET_XTHEADBB\"\n+{\n+  if (TARGET_XTHEADBB\n+      && (INTVAL (operands[2]) < 8) && (INTVAL (operands[3]) == 0))\n+    FAIL;\n+})\n+\n (include \"bitmanip.md\")\n (include \"crypto.md\")\n (include \"sync.md\")"}, {"sha": "372d4603543fb53db0fc8b4fec959290e6bf4416", "filename": "gcc/config/riscv/thead.md", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Fconfig%2Friscv%2Fthead.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Fconfig%2Friscv%2Fthead.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fthead.md?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -30,6 +30,67 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<X:MODE>\")])\n \n+;; XTheadBb\n+\n+(define_insn \"*th_srri<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+\t(rotatert:GPR (match_operand:GPR 1 \"register_operand\" \"r\")\n+\t\t     (match_operand 2 \"const_int_operand\" \"n\")))]\n+  \"TARGET_XTHEADBB && (TARGET_64BIT || <MODE>mode == SImode)\"\n+  {\n+    bool wform = TARGET_64BIT && (<MODE>mode == SImode);\n+    operands[2] = GEN_INT (INTVAL (operands[2])\n+                  & (GET_MODE_BITSIZE (<MODE>mode) - 1));\n+    return wform ? \"th.srriw\\t%0,%1,%2\" : \"th.srri\\t%0,%1,%2\";\n+  }\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n+(define_insn \"*th_ext<mode>4\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+\t(sign_extract:GPR (match_operand:GPR 1 \"register_operand\" \"r\")\n+\t\t\t(match_operand 2 \"const_int_operand\")\n+\t\t\t(match_operand 3 \"const_int_operand\")))]\n+  \"TARGET_XTHEADBB\"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + INTVAL (operands[3]) - 1);\n+  return \"th.ext\\t%0,%1,%2,%3\";\n+}\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n+(define_insn \"*th_extu<mode>4\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+\t(zero_extract:GPR (match_operand:GPR 1 \"register_operand\" \"r\")\n+\t\t\t(match_operand 2 \"const_int_operand\")\n+\t\t\t(match_operand 3 \"const_int_operand\")))]\n+  \"TARGET_XTHEADBB\"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + INTVAL (operands[3]) - 1);\n+  return \"th.extu\\t%0,%1,%2,%3\";\n+}\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n+(define_insn \"*th_clz<mode>2\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(clz:X (match_operand:X 1 \"register_operand\" \"r\")))]\n+  \"TARGET_XTHEADBB\"\n+  \"th.ff1\\t%0,%1\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<X:MODE>\")])\n+\n+(define_insn \"*th_rev<mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+\t(bswap:GPR (match_operand:GPR 1 \"register_operand\" \"r\")))]\n+  \"TARGET_XTHEADBB && (TARGET_64BIT || <MODE>mode == SImode)\"\n+  {\n+    bool wform = TARGET_64BIT && (<MODE>mode == SImode);\n+    return wform ? \"th.revw\\t%0,%1\" : \"th.rev\\t%0,%1\";\n+  }\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n ;; XTheadBs\n \n (define_insn \"*th_tst<mode>3\""}, {"sha": "60fb7d44e39e51b904edb975a22c195fb65a664b", "filename": "gcc/testsuite/gcc.target/riscv/xtheadbb-ext.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-ext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-ext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-ext.c?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_xtheadbb\" { target { rv32 } } } */\n+/* { dg-options \"-march=rv64gc_xtheadbb\" { target { rv64 } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Os\" \"-Og\" } } */\n+\n+struct bar\n+{\n+  long a:9;\n+  long b:26;\n+  long c:22;\n+};\n+\n+long\n+foo (struct bar *s)\n+{\n+  return s->b;\n+}\n+\n+/* { dg-final { scan-assembler \"th.ext\\t\" } } */\n+/* { dg-final { scan-assembler-not \"andi\" } } */"}, {"sha": "029be93f401a23b2bb6f1cb06ed179fda4dd4893", "filename": "gcc/testsuite/gcc.target/riscv/xtheadbb-extu-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-extu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-extu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-extu-2.c?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_xtheadbb\" { target { rv32 } } } */\n+/* { dg-options \"-march=rv64gc_xtheadbb\" { target { rv64 } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Os\" \"-Og\" } } */\n+\n+struct bar\n+{\n+  unsigned long a:6;\n+  unsigned long b:26;\n+  unsigned long c:22;\n+};\n+\n+/* We prefer andi over th.extu because it can be compressed.  */\n+\n+unsigned long\n+foo (struct bar *s)\n+{\n+  return s->a;\n+}\n+\n+/* { dg-final { scan-assembler-not \"th.extu\\t\" } } */\n+/* { dg-final { scan-assembler \"andi\\t\" } } */"}, {"sha": "e0492f1f5adc2390c7afbd8c1cb6224c5a02bd0b", "filename": "gcc/testsuite/gcc.target/riscv/xtheadbb-extu.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-extu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-extu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-extu.c?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_xtheadbb\" { target { rv32 } } } */\n+/* { dg-options \"-march=rv64gc_xtheadbb\" { target { rv64 } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Os\" \"-Og\" } } */\n+\n+struct bar\n+{\n+  unsigned long a:5;\n+  unsigned long b:26;\n+  unsigned long c:22;\n+};\n+\n+unsigned long\n+foo (struct bar *s)\n+{\n+  return s->b;\n+}\n+\n+/* { dg-final { scan-assembler \"th.extu\\t\" } } */\n+/* { dg-final { scan-assembler-not \"andi\" } } */\n+/* { dg-final { scan-assembler-not \"slli\" } } */\n+/* { dg-final { scan-assembler-not \"srli\" } } */"}, {"sha": "72038c4e28100947b571775e1447e04c9d52e39e", "filename": "gcc/testsuite/gcc.target/riscv/xtheadbb-ff1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-ff1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-ff1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-ff1.c?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_xtheadbb\" { target { rv32 } } } */\n+/* { dg-options \"-march=rv64gc_xtheadbb\" { target { rv64 } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Os\" \"-Og\" } } */\n+\n+int\n+foo (unsigned long a)\n+{\n+  return __builtin_clzl (a);\n+}\n+\n+int\n+bar (unsigned long a)\n+{\n+  return __builtin_ctzl (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"th.ff1\\t\" 2 } } */"}, {"sha": "411d52007d26885128b2f9d942e0a2e1a199879a", "filename": "gcc/testsuite/gcc.target/riscv/xtheadbb-rev.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-rev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-rev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-rev.c?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_xtheadbb\" { target { rv32 } } } */\n+/* { dg-options \"-march=rv64gc_xtheadbb\" { target { rv64 } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-O1\" \"-Og\" } } */\n+\n+unsigned int\n+foo32 (unsigned int x)\n+{\n+  return (((x << 24) & 0xff000000)\n+\t  | ((x << 8) & 0xff0000)\n+\t  | ((x >> 8) & 0xff00)\n+\t  | ((x >> 24) & 0xff));\n+}\n+\n+unsigned int\n+foo32_1 (unsigned int x)\n+{\n+  return __builtin_bswap32 (x);\n+}\n+\n+#if __riscv_xlen == 64\n+unsigned long\n+foo64 (unsigned long x)\n+{\n+  return (((x << 56) & 0xff00000000000000ull)\n+\t  | ((x << 40) & 0xff000000000000ull)\n+\t  | ((x << 24) & 0xff0000000000ull)\n+\t  | ((x << 8) & 0xff00000000ull)\n+\t  | ((x >> 8) & 0xff000000)\n+\t  | ((x >> 24) & 0xff0000)\n+\t  | ((x >> 40) & 0xff00)\n+\t  | ((x >> 56) & 0xff));\n+}\n+\n+unsigned long\n+foo64_1 (unsigned long x)\n+{\n+  return __builtin_bswap64 (x);\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-times \"th.rev\\t\" 2 { target { rv32 } } } } */\n+\n+/* { dg-final { scan-assembler-times \"th.revw\\t\" 2 { target { rv64 } } } } */\n+/* { dg-final { scan-assembler-times \"th.rev\\t\" 2 { target { rv64 } } } } */"}, {"sha": "973ed175f17babc461c37ded1ca6edd341c79d57", "filename": "gcc/testsuite/gcc.target/riscv/xtheadbb-srri.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-srri.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c493fa3892487c22d0bdd817361a02bd523fc2e7/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-srri.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadbb-srri.c?ref=c493fa3892487c22d0bdd817361a02bd523fc2e7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_xtheadbb\" { target { rv32 } } } */\n+/* { dg-options \"-march=rv64gc_xtheadbb\" { target { rv64 } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+unsigned long\n+foo1 (unsigned long rs1)\n+{\n+    unsigned sz = sizeof(unsigned long) * 8;\n+    unsigned shamt = sz - 11;\n+    return (rs1 << shamt) | (rs1 >> (sz - shamt));\n+}\n+\n+unsigned int\n+foo2 (unsigned int rs1)\n+{\n+    unsigned sz = sizeof(unsigned int) * 8;\n+    unsigned shamt = sz - 11;\n+    return (rs1 << shamt) | (rs1 >> (sz - shamt));\n+}\n+\n+/* { dg-final { scan-assembler-times \"th.srri\\t\" 2 { target { rv32 } } } } */\n+\n+/* { dg-final { scan-assembler-times \"th.srri\\t\" 1 { target { rv64 } } } } */\n+/* { dg-final { scan-assembler-times \"th.srriw\\t\" 1 { target { rv64 } } } } */"}]}