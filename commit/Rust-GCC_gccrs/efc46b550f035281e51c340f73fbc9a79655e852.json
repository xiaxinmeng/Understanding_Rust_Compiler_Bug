{"sha": "efc46b550f035281e51c340f73fbc9a79655e852", "node_id": "C_kwDOANBUbNoAKGVmYzQ2YjU1MGYwMzUyODFlNTFjMzQwZjczZmJjOWE3OTY1NWU4NTI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-01T19:42:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-01T19:42:49Z"}, "message": "libcpp: Avoid PREV_WHITE and other random content on CPP_PADDING tokens\n\nThe funlike_invocation_p macro never triggered, the other\nasserts did on some tests, see below for a full list.\nThis seems to be caused by #pragma/_Pragma handling.\ndo_pragma does:\n          pfile->directive_result.src_loc = pragma_token_virt_loc;\n          pfile->directive_result.type = CPP_PRAGMA;\n          pfile->directive_result.flags = pragma_token->flags;\n          pfile->directive_result.val.pragma = p->u.ident;\nwhen it sees a pragma, while start_directive does:\n  pfile->directive_result.type = CPP_PADDING;\nand so does _cpp_do__Pragma.\nNow, for #pragma lex.cc will just ignore directive_result if\nit has CPP_PADDING type:\n              if (_cpp_handle_directive (pfile, result->flags & PREV_WHITE))\n                {\n                  if (pfile->directive_result.type == CPP_PADDING)\n                    continue;\n                  result = &pfile->directive_result;\n                }\nbut destringize_and_run does not:\n  if (pfile->directive_result.type == CPP_PRAGMA)\n    {\n...\n    }\n  else\n    {\n      count = 1;\n      toks = XNEW (cpp_token);\n      toks[0] = pfile->directive_result;\nand from there it will copy type member of CPP_PADDING, but all the\nother members from the last CPP_PRAGMA before it.\nSmall testcase for it with no option (at least no -fopenmp or -fopenmp-simd).\n #pragma GCC push_options\n #pragma GCC ignored \"-Wformat\"\n #pragma GCC pop_options\nvoid\nfoo ()\n{\n  _Pragma (\"omp simd\")\n  for (int i = 0; i < 64; i++)\n    ;\n}\n\nHere is a patch that replaces those\n      toks = XNEW (cpp_token);\n      toks[0] = pfile->directive_result;\nlines with\n      toks = &pfile->avoid_paste;\n\n2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n\n\t* directives.cc (destringize_and_run): Push &pfile->avoid_paste\n\tinstead of a copy of pfile->directive_result for the CPP_PADDING\n\tcase.", "tree": {"sha": "db24d6e1e8d6050bd61ba5f68a2d9474a201edaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db24d6e1e8d6050bd61ba5f68a2d9474a201edaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc46b550f035281e51c340f73fbc9a79655e852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc46b550f035281e51c340f73fbc9a79655e852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc46b550f035281e51c340f73fbc9a79655e852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc46b550f035281e51c340f73fbc9a79655e852/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa882c3e3bf642e0ef30772e4b54a2851497db96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa882c3e3bf642e0ef30772e4b54a2851497db96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa882c3e3bf642e0ef30772e4b54a2851497db96"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "f804a441f394f1a5830d412b6e41a478a1bd69b5", "filename": "libcpp/directives.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc46b550f035281e51c340f73fbc9a79655e852/libcpp%2Fdirectives.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc46b550f035281e51c340f73fbc9a79655e852/libcpp%2Fdirectives.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.cc?ref=efc46b550f035281e51c340f73fbc9a79655e852", "patch": "@@ -1954,8 +1954,7 @@ destringize_and_run (cpp_reader *pfile, const cpp_string *in,\n   else\n     {\n       count = 1;\n-      toks = XNEW (cpp_token);\n-      toks[0] = pfile->directive_result;\n+      toks = &pfile->avoid_paste;\n \n       /* If we handled the entire pragma internally, make sure we get the\n \t line number correct for the next token.  */"}]}