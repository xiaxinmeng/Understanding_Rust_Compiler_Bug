{"sha": "8b5e12023b56dfc83c037053612b08f5ee7eac61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1ZTEyMDIzYjU2ZGZjODNjMDM3MDUzNjEyYjA4ZjVlZTdlYWM2MQ==", "commit": {"author": {"name": "Sergey Ostanevich", "email": "sergos.gnu@gmail.com", "date": "2013-11-28T07:54:58Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-11-28T07:54:58Z"}, "message": "common.opt: Introduced a new option -fsimd-cost-model.\n\ngcc/\n\t* common.opt: Introduced a new option -fsimd-cost-model.\n\t* doc/invoke.texi: Introduced a new openmp-simd warning and\n\ta new -fsimd-cost-model option.\n\t* tree-vectorizer.h (unlimited_cost_model): Interface updated\n\tto rely on the particular loop info.\n\t* tree-vect-data-refs.c (vect_peeling_hash_insert): Ditto.\n\t(vect_peeling_hash_choose_best_peeling): Ditto.\n\t(vect_enhance_data_refs_alignment): Ditto.\n\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Ditto.\n\t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Ditto\n\tplus added openmp-simd warining.\n\ngcc/c-family/\n\t* c.opt (Wopenmp-simd): New.\n\ngcc/fortran/\n\t* lang.opt (Wopenmp-simd): New.\n\nFrom-SVN: r205475", "tree": {"sha": "bea8238b89ef5aab5339621f7b4ebff4f5333c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bea8238b89ef5aab5339621f7b4ebff4f5333c76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5e12023b56dfc83c037053612b08f5ee7eac61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5e12023b56dfc83c037053612b08f5ee7eac61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5e12023b56dfc83c037053612b08f5ee7eac61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5e12023b56dfc83c037053612b08f5ee7eac61/comments", "author": {"login": "sergos", "id": 19816844, "node_id": "MDQ6VXNlcjE5ODE2ODQ0", "avatar_url": "https://avatars.githubusercontent.com/u/19816844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergos", "html_url": "https://github.com/sergos", "followers_url": "https://api.github.com/users/sergos/followers", "following_url": "https://api.github.com/users/sergos/following{/other_user}", "gists_url": "https://api.github.com/users/sergos/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergos/subscriptions", "organizations_url": "https://api.github.com/users/sergos/orgs", "repos_url": "https://api.github.com/users/sergos/repos", "events_url": "https://api.github.com/users/sergos/events{/privacy}", "received_events_url": "https://api.github.com/users/sergos/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0da87f3783422d0c4b952f7f6d373e6d51a84d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0da87f3783422d0c4b952f7f6d373e6d51a84d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0da87f3783422d0c4b952f7f6d373e6d51a84d3"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "e280c2484f59274311e1864d3a144ecca6ca5513", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -1,3 +1,17 @@\n+2013-11-28  Sergey Ostanevich  <sergos.gnu@gmail.com>\n+\n+\t* common.opt: Introduced a new option -fsimd-cost-model.\n+\t* doc/invoke.texi: Introduced a new openmp-simd warning and\n+\ta new -fsimd-cost-model option.\n+\t* tree-vectorizer.h (unlimited_cost_model): Interface updated\n+\tto rely on the particular loop info.\n+\t* tree-vect-data-refs.c (vect_peeling_hash_insert): Ditto.\n+\t(vect_peeling_hash_choose_best_peeling): Ditto.\n+\t(vect_enhance_data_refs_alignment): Ditto.\n+\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Ditto.\n+\t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Ditto\n+\tplus added openmp-simd warining.\n+\n 2013-11-27   H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/59311"}, {"sha": "f4e09381e72f306d7da7a8993acbcebfe98763bf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -1,3 +1,7 @@\n+2013-11-28  Sergey Ostanevich  <sergos.gnu@gmail.com>\n+\n+\t* c.opt (Wopenmp-simd): New.\n+\n 2013-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-ubsan.h (ubsan_instrument_return): New prototype."}, {"sha": "2e9a3df0a874092f978d3d02990234a38e3f3841", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -596,6 +596,10 @@ Wold-style-definition\n C ObjC Var(warn_old_style_definition) Warning\n Warn if an old-style parameter definition is used\n \n+Wopenmp-simd\n+C C++ Var(warn_openmp_simd) Warning LangEnabledBy(C C++,Wall)\n+Warn if a simd directive is overridden by the vectorizer cost model\n+\n Woverlength-strings\n C ObjC C++ ObjC++ Var(warn_overlength_strings) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n Warn if a string is longer than the maximum portable length specified by the standard"}, {"sha": "9ece68324672c816096cda94402b63c5556bf2fb", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -2300,6 +2300,10 @@ fvect-cost-model=\n Common Joined RejectNegative Enum(vect_cost_model) Var(flag_vect_cost_model) Init(VECT_COST_MODEL_DEFAULT)\n Specifies the cost model for vectorization\n  \n+fsimd-cost-model=\n+Common Joined RejectNegative Enum(vect_cost_model) Var(flag_simd_cost_model) Init(VECT_COST_MODEL_UNLIMITED)\n+Specifies the vectorization cost model for code marked with a simd directive\n+\n Enum\n Name(vect_cost_model) Type(enum vect_cost_model) UnknownError(unknown vectorizer cost model %qs)\n "}, {"sha": "2d074a2d52a6ab647801f6f264de2a252ffafbc3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -256,7 +256,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wlogical-op -Wlong-long @gol\n -Wmain -Wmaybe-uninitialized -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-include-dirs @gol\n--Wno-multichar  -Wnonnull  -Wno-overflow @gol\n+-Wno-multichar  -Wnonnull  -Wno-overflow -Wopenmp-simd @gol\n -Woverlength-strings  -Wpacked  -Wpacked-bitfield-compat  -Wpadded @gol\n -Wparentheses  -Wpedantic-ms-format -Wno-pedantic-ms-format @gol\n -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n@@ -3321,6 +3321,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wmaybe-uninitialized @gol\n -Wmissing-braces @r{(only for C/ObjC)} @gol\n -Wnonnull  @gol\n+-Wopenmp-simd @gol\n -Wparentheses  @gol\n -Wpointer-sign  @gol\n -Wreorder   @gol\n@@ -4815,6 +4816,12 @@ attribute.\n @opindex Woverflow\n Do not warn about compile-time overflow in constant expressions.\n \n+@item -Wopenmp-simd\n+@opindex Wopenm-simd\n+Warn if the vectorizer cost model overrides the OpenMP or the Cilk Plus\n+simd directive set by user.  The @option{-fsimd-cost-model=unlimited} can\n+be used to relax the cost model.\n+\n @item -Woverride-init @r{(C and Objective-C only)}\n @opindex Woverride-init\n @opindex Wno-override-init\n@@ -8071,6 +8078,14 @@ is equal to the @code{dynamic} model.\n The default cost model depends on other optimization flags and is\n either @code{dynamic} or @code{cheap}.\n \n+@item -fsimd-cost-model=@var{model}\n+@opindex fsimd-cost-model\n+Alter the cost model used for vectorization of loops marked with the OpenMP\n+or Cilk Plus simd directive.  The @var{model} argument should be one of\n+@code{unlimited}, @code{dynamic}, @code{cheap}.  All values of @var{model}\n+have the same meaning as described in @option{-fvect-cost-model} and by\n+default a cost model defined with @option{-fvect-cost-model} is used.\n+\n @item -ftree-vrp\n @opindex ftree-vrp\n Perform Value Range Propagation on trees.  This is similar to the"}, {"sha": "124a45894f09f6da75a102143680d4b0ef3cfce8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -1,3 +1,7 @@\n+2013-11-28  Sergey Ostanevich  <sergos.gnu@gmail.com>\n+\n+\t* lang.opt (Wopenmp-simd): New.\n+\n 2013-11-25  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/59143"}, {"sha": "0d328c84a6359e00208aa7ce597402c75f1a3273", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -257,6 +257,10 @@ Wintrinsics-std\n Fortran Warning\n Warn on intrinsics not part of the selected standard\n \n+Wopenmp-simd\n+Fortran\n+; Documented in C\n+\n Wreal-q-constant\n Fortran Warning\n Warn about real-literal-constants with 'q' exponent-letter"}, {"sha": "87d151f836dfc2c11971c8955fb11fee7dd43777", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -1097,7 +1097,8 @@ vect_peeling_hash_insert (loop_vec_info loop_vinfo, struct data_reference *dr,\n       *new_slot = slot;\n     }\n \n-  if (!supportable_dr_alignment && unlimited_cost_model ())\n+  if (!supportable_dr_alignment\n+      && unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n     slot->count += VECT_MAX_COST;\n }\n \n@@ -1207,7 +1208,7 @@ vect_peeling_hash_choose_best_peeling (loop_vec_info loop_vinfo,\n    res.peel_info.dr = NULL;\n    res.body_cost_vec = stmt_vector_for_cost ();\n \n-   if (!unlimited_cost_model ())\n+   if (!unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n      {\n        res.inside_cost = INT_MAX;\n        res.outside_cost = INT_MAX;\n@@ -1436,15 +1437,15 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n                  vectorization factor.\n                  We do this automtically for cost model, since we calculate cost\n                  for every peeling option.  */\n-              if (unlimited_cost_model ())\n+              if (unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n                 possible_npeel_number = vf /nelements;\n \n               /* Handle the aligned case. We may decide to align some other\n                  access, making DR unaligned.  */\n               if (DR_MISALIGNMENT (dr) == 0)\n                 {\n                   npeel_tmp = 0;\n-                  if (unlimited_cost_model ())\n+                  if (unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n                     possible_npeel_number++;\n                 }\n "}, {"sha": "25bf334edf807c217b070427cf20bbd6abb4f135", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -2716,7 +2716,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n   void *target_cost_data = LOOP_VINFO_TARGET_COST_DATA (loop_vinfo);\n \n   /* Cost model disabled.  */\n-  if (unlimited_cost_model ())\n+  if (unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n     {\n       dump_printf_loc (MSG_NOTE, vect_location, \"cost model disabled.\\n\");\n       *ret_min_profitable_niters = 0;\n@@ -2949,6 +2949,10 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n   /* vector version will never be profitable.  */\n   else\n     {\n+      if (LOOP_VINFO_LOOP (loop_vinfo)->force_vect)\n+\twarning_at (vect_location, OPT_Wopenmp_simd, \"vectorization \"\n+\t\t    \"did not happen for a simd loop\");\n+\n       if (dump_enabled_p ())\n         dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t \"cost model: the vector iteration cost = %d \""}, {"sha": "2387c0d9dfc39c9e7e395dfeb6c5238ca8510bb7", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -2176,7 +2176,7 @@ vect_slp_analyze_bb_1 (basic_block bb)\n     }\n \n   /* Cost model: check if the vectorization is worthwhile.  */\n-  if (!unlimited_cost_model ()\n+  if (!unlimited_cost_model (NULL)\n       && !vect_bb_vectorization_profitable_p (bb_vinfo))\n     {\n       if (dump_enabled_p ())"}, {"sha": "4427d6a7b335049441ca889e19149a022f29d5b0", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5e12023b56dfc83c037053612b08f5ee7eac61/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=8b5e12023b56dfc83c037053612b08f5ee7eac61", "patch": "@@ -915,9 +915,12 @@ known_alignment_for_access_p (struct data_reference *data_ref_info)\n \n /* Return true if the vect cost model is unlimited.  */\n static inline bool\n-unlimited_cost_model ()\n+unlimited_cost_model (loop_p loop)\n {\n-  return flag_vect_cost_model == VECT_COST_MODEL_UNLIMITED;\n+  if (loop != NULL && loop->force_vect\n+      && flag_simd_cost_model != VECT_COST_MODEL_DEFAULT)\n+    return flag_simd_cost_model == VECT_COST_MODEL_UNLIMITED;\n+  return (flag_vect_cost_model == VECT_COST_MODEL_UNLIMITED);\n }\n \n /* Source location */"}]}