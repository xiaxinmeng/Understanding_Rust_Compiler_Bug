{"sha": "3a0bd58fac55e8cdd4c2674bf10ca6998337236a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwYmQ1OGZhYzU1ZThjZGQ0YzI2NzRiZjEwY2E2OTk4MzM3MjM2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-12-02T21:33:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-02T21:33:06Z"}, "message": "re PR c++/92695 (P1064R0 - virtual constexpr fails if object taken from array)\n\n\tPR c++/92695\n\t* constexpr.c (cxx_eval_constant_expression) <case OBJ_TYPE_REF>: Use\n\tSTRIP_NOPS before checking for ADDR_EXPR.\n\n\t* g++.dg/cpp2a/constexpr-virtual15.C: New test.\n\nFrom-SVN: r278912", "tree": {"sha": "f0c60e9477184eb1365fc89d2a98acf3dd055a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0c60e9477184eb1365fc89d2a98acf3dd055a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a0bd58fac55e8cdd4c2674bf10ca6998337236a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0bd58fac55e8cdd4c2674bf10ca6998337236a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0bd58fac55e8cdd4c2674bf10ca6998337236a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0bd58fac55e8cdd4c2674bf10ca6998337236a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "871a8fab25b34ed43de1fd38ae0291e17ef53d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871a8fab25b34ed43de1fd38ae0291e17ef53d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/871a8fab25b34ed43de1fd38ae0291e17ef53d1b"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "9ca25aea63561f651ab71f6071ca9cd82651ff66", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0bd58fac55e8cdd4c2674bf10ca6998337236a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0bd58fac55e8cdd4c2674bf10ca6998337236a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3a0bd58fac55e8cdd4c2674bf10ca6998337236a", "patch": "@@ -1,3 +1,9 @@\n+2019-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/92695\n+\t* constexpr.c (cxx_eval_constant_expression) <case OBJ_TYPE_REF>: Use\n+\tSTRIP_NOPS before checking for ADDR_EXPR.\n+\n 2019-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/60228"}, {"sha": "cc3ef1056f2816a743a5533acec8892398de516e", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0bd58fac55e8cdd4c2674bf10ca6998337236a/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0bd58fac55e8cdd4c2674bf10ca6998337236a/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3a0bd58fac55e8cdd4c2674bf10ca6998337236a", "patch": "@@ -5548,6 +5548,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \ttree obj = OBJ_TYPE_REF_OBJECT (t);\n \tobj = cxx_eval_constant_expression (ctx, obj, lval, non_constant_p,\n \t\t\t\t\t    overflow_p);\n+\tSTRIP_NOPS (obj);\n \t/* We expect something in the form of &x.D.2103.D.2094; get x. */\n \tif (TREE_CODE (obj) != ADDR_EXPR\n \t    || !DECL_P (get_base_address (TREE_OPERAND (obj, 0))))"}, {"sha": "4ec5a264eddec50f2df5605aa10f6ee364f8a651", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0bd58fac55e8cdd4c2674bf10ca6998337236a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0bd58fac55e8cdd4c2674bf10ca6998337236a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a0bd58fac55e8cdd4c2674bf10ca6998337236a", "patch": "@@ -1,3 +1,8 @@\n+2019-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/92695\n+\t* g++.dg/cpp2a/constexpr-virtual15.C: New test.\n+\n 2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/92741"}, {"sha": "cb55aa3bb5609919887d1ea7adc8aed327e24668", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual15.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0bd58fac55e8cdd4c2674bf10ca6998337236a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0bd58fac55e8cdd4c2674bf10ca6998337236a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual15.C?ref=3a0bd58fac55e8cdd4c2674bf10ca6998337236a", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/92695\n+// { dg-do compile { target c++2a } }\n+\n+struct A { virtual int get() = 0; };\n+struct B : A { constexpr int get() override { return 10; } };\n+struct D { B b[2]; A* c{&(b[0])}; };\n+static_assert(D{}.c->get() == 10);"}]}