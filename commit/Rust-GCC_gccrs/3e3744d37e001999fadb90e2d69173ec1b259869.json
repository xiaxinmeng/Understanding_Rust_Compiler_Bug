{"sha": "3e3744d37e001999fadb90e2d69173ec1b259869", "node_id": "C_kwDOANBUbNoAKDNlMzc0NGQzN2UwMDE5OTlmYWRiOTBlMmQ2OTE3M2VjMWIyNTk4Njk", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-27T13:34:18Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-27T13:34:18Z"}, "message": "libstdc++: testsuite: complex proj requirements\n\nThe template version of complex::proj returns its argument without\ntesting for infinities, and that's all we have when neither C99\ncomplex nor C99 math functions are available, and it seems too hard to\ndo better without isinf and copysign.\n\nI suppose just calling them and expecting users will supply\nspecializations as needed has been ruled out, and so has refraining\nfrom defining it when it can't be implemented correctly.\n\nIt's pointless to run the proj.cc test under these circumstances, so\narrange for it to be skipped.  In an unusual way, after trying to\nintroduce dg-require tests for ccomplex-or-cmath, and found their\nresults to be misleading due to variations across -std=* versions.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/26_numerics/complex/proj.cc: Skip test in the\n\tcircumstances in which the implementation of proj is known to\n\tbe broken.", "tree": {"sha": "d3ed14020a91d7b7ff3263c0b4687522109b54de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3ed14020a91d7b7ff3263c0b4687522109b54de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e3744d37e001999fadb90e2d69173ec1b259869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3744d37e001999fadb90e2d69173ec1b259869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3744d37e001999fadb90e2d69173ec1b259869", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3744d37e001999fadb90e2d69173ec1b259869/comments", "author": null, "committer": null, "parents": [{"sha": "0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3bb459e59e61bc52218dc6aa41c746d309f6a2"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "69f8153c06f0533fb0aac0702c39134c4dafeebb", "filename": "libstdc++-v3/testsuite/26_numerics/complex/proj.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3744d37e001999fadb90e2d69173ec1b259869/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fproj.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3744d37e001999fadb90e2d69173ec1b259869/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fproj.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fproj.cc?ref=3e3744d37e001999fadb90e2d69173ec1b259869", "patch": "@@ -397,6 +397,19 @@ test03()\n int\n main()\n {\n+  /* If neither of these macros is nonzero, proj calls a\n+     specialization of the __complex_proj template, that just returns\n+     its argument, without testing for infinities, rendering the whole\n+     test pointless, and failing (as intended/noted in the\n+     implementation) the cases that involve infinities.  Alas, the\n+     normal ways to skip tests may not work: we don't have a test for\n+     C99_COMPLEX, and these macros may vary depending on -std=*, but\n+     macro tests wouldn't take them into account.  */\n+#if ! (_GLIBCXX_USE_C99_COMPLEX || _GLIBCXX_USE_C99_MATH_TR1)\n+  if (true)\n+    return 0;\n+#endif\n+\n   test01();\n   test02();\n   test03();"}]}