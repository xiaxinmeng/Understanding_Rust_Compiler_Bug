{"sha": "e189d5c931c5d94fd7487a2d1df9454d0b124eeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4OWQ1YzkzMWM1ZDk0ZmQ3NDg3YTJkMWRmOTQ1NGQwYjEyNGVlYg==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2020-09-23T21:48:21Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2020-09-28T13:11:52Z"}, "message": "rs6000: Add tests for _mm_insert_epi{8,32,64}\n\nCopied from gcc.target/i386.\n\n2020-09-23  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/sse4_1-pinsrb.c: New test.\n\t* gcc.target/powerpc/sse4_1-pinsrd.c: New test.\n\t* gcc.target/powerpc/sse4_1-pinsrq.c: New test.", "tree": {"sha": "1bdaa4290b40d13e58e637ff55d604144e28b15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bdaa4290b40d13e58e637ff55d604144e28b15f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e189d5c931c5d94fd7487a2d1df9454d0b124eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e189d5c931c5d94fd7487a2d1df9454d0b124eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e189d5c931c5d94fd7487a2d1df9454d0b124eeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e189d5c931c5d94fd7487a2d1df9454d0b124eeb/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d09cc91574bfd4f4d49f7f45e54af4fe0a35e9a"}], "stats": {"total": 250, "additions": 250, "deletions": 0}, "files": [{"sha": "4fa5e83ce7ca9a6402ecf196a8f3033c2e6afc8f", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pinsrb.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e189d5c931c5d94fd7487a2d1df9454d0b124eeb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pinsrb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e189d5c931c5d94fd7487a2d1df9454d0b124eeb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pinsrb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pinsrb.c?ref=e189d5c931c5d94fd7487a2d1df9454d0b124eeb", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x00\n+#define msk1 0x01\n+#define msk2 0x02\n+#define msk3 0x03\n+#define msk4 0x04\n+#define msk5 0x05\n+#define msk6 0x06\n+#define msk7 0x07\n+#define msk8 0x08\n+#define msk9 0x09\n+#define mskA 0x0A\n+#define mskB 0x0B\n+#define mskC 0x0C\n+#define mskD 0x0D\n+#define mskE 0x0E\n+#define mskF 0x0F\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+      unsigned char c[16];\n+    } res [16], val, tmp;\n+  int masks[16];\n+  unsigned char ins[4] = { 3, 4, 5, 6 };\n+  int i;\n+\n+  val.i[0] = 0x35251505;\n+  val.i[1] = 0x75655545;\n+  val.i[2] = 0xB5A59585;\n+  val.i[3] = 0xF5E5D5C5;\n+\n+  /* Check pinsrb imm8, r32, xmm.  */\n+  res[0].x = _mm_insert_epi8 (val.x, ins[0], msk0);\n+  res[1].x = _mm_insert_epi8 (val.x, ins[0], msk1);\n+  res[2].x = _mm_insert_epi8 (val.x, ins[0], msk2);\n+  res[3].x = _mm_insert_epi8 (val.x, ins[0], msk3);\n+  res[4].x = _mm_insert_epi8 (val.x, ins[0], msk4);\n+  res[5].x = _mm_insert_epi8 (val.x, ins[0], msk5);\n+  res[6].x = _mm_insert_epi8 (val.x, ins[0], msk6);\n+  res[7].x = _mm_insert_epi8 (val.x, ins[0], msk7);\n+  res[8].x = _mm_insert_epi8 (val.x, ins[0], msk8);\n+  res[9].x = _mm_insert_epi8 (val.x, ins[0], msk9);\n+  res[10].x = _mm_insert_epi8 (val.x, ins[0], mskA);\n+  res[11].x = _mm_insert_epi8 (val.x, ins[0], mskB);\n+  res[12].x = _mm_insert_epi8 (val.x, ins[0], mskC);\n+  res[13].x = _mm_insert_epi8 (val.x, ins[0], mskD);\n+  res[14].x = _mm_insert_epi8 (val.x, ins[0], mskE);\n+  res[15].x = _mm_insert_epi8 (val.x, ins[0], mskF);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+  masks[4] = msk4;\n+  masks[5] = msk5;\n+  masks[6] = msk6;\n+  masks[7] = msk7;\n+  masks[8] = msk8;\n+  masks[9] = msk9;\n+  masks[10] = mskA;\n+  masks[11] = mskB;\n+  masks[12] = mskC;\n+  masks[13] = mskD;\n+  masks[14] = mskE;\n+  masks[15] = mskF;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.c[masks[i]] = ins[0];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+    \n+  /* Check pinsrb imm8, m8, xmm.  */\n+  for (i = 0; i < 16; i++)\n+    {\n+      res[i].x = _mm_insert_epi8 (val.x, ins[i % 4], msk0);\n+      masks[i] = msk0;\n+    }\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.c[masks[i]] = ins[i % 4];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}, {"sha": "0bec936d0745baac672325d95f18c36285809f38", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pinsrd.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e189d5c931c5d94fd7487a2d1df9454d0b124eeb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pinsrd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e189d5c931c5d94fd7487a2d1df9454d0b124eeb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pinsrd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pinsrd.c?ref=e189d5c931c5d94fd7487a2d1df9454d0b124eeb", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x00\n+#define msk1 0x01\n+#define msk2 0x02\n+#define msk3 0x03\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } res [4], val, tmp;\n+  static unsigned int ins[4] = { 3, 4, 5, 6 };\n+  int masks[4];\n+  int i;\n+\n+  val.i[0] = 55;\n+  val.i[1] = 55;\n+  val.i[2] = 55;\n+  val.i[3] = 55;\n+\n+  /* Check pinsrd imm8, r32, xmm.  */\n+  res[0].x = _mm_insert_epi32 (val.x, ins[0], msk0);\n+  res[1].x = _mm_insert_epi32 (val.x, ins[0], msk1);\n+  res[2].x = _mm_insert_epi32 (val.x, ins[0], msk2);\n+  res[3].x = _mm_insert_epi32 (val.x, ins[0], msk3);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.i[masks[i]] = ins[0];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+    \n+  /* Check pinsrd imm8, m32, xmm.  */\n+  for (i = 0; i < 4; i++)\n+    {\n+      res[i].x = _mm_insert_epi32 (val.x, ins[i], msk0);\n+      masks[i] = msk0;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.i[masks[i]] = ins[i];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}, {"sha": "395c20e663d4b4794a4c90995d2cde29461eb30a", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pinsrq.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e189d5c931c5d94fd7487a2d1df9454d0b124eeb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pinsrq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e189d5c931c5d94fd7487a2d1df9454d0b124eeb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pinsrq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pinsrq.c?ref=e189d5c931c5d94fd7487a2d1df9454d0b124eeb", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x00\n+#define msk1 0x01\n+\n+static void\n+__attribute__((noinline))\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned long long ll[2];\n+    } res [4], val, tmp;\n+  int masks[4];\n+  static unsigned long long ins[2] =\n+    { 0xAABBAABBAABBAABBLL, 0xCCDDCCDDCCDDCCDDLL };\n+  int i;\n+\n+  val.ll[0] = 0x0807060504030201LL;\n+  val.ll[1] = 0x100F0E0D0C0B0A09LL;\n+\n+  /* Check pinsrq imm8, r64, xmm.  */\n+  res[0].x = _mm_insert_epi64 (val.x, ins[0], msk0);\n+  res[1].x = _mm_insert_epi64 (val.x, ins[0], msk1);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.ll[masks[i]] = ins[0];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+    \n+  /* Check pinsrq imm8, m64, xmm.  */\n+  for (i = 0; i < 2; i++)\n+    {\n+      res[i].x = _mm_insert_epi64 (val.x, ins[i], msk0);\n+      masks[i] = msk0;\n+    }\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.ll[masks[i]] = ins[i];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}]}