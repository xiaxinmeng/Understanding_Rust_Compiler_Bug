{"sha": "d742ff4ba1609fe71d0a9396483b95d375e4599a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0MmZmNGJhMTYwOWZlNzFkMGE5Mzk2NDgzYjk1ZDM3NWU0NTk5YQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2013-09-10T16:46:55Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2013-09-10T16:46:55Z"}, "message": "re PR target/58361 (Wrong floating point code generated for ARM target)\n\n\tPR target/58361\n\t* arm/vfp.md (combine_vcvt_f32_<FCVTI32typename>): Fix pattern to\n\tsupport conditional execution.\n\t(combine_vcvt_f64_<FCVTI32typename>): Likewise.\n\nFrom-SVN: r202475", "tree": {"sha": "0de0c179386f1b6a4d999a5b2ffd8cee0ff882fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0de0c179386f1b6a4d999a5b2ffd8cee0ff882fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d742ff4ba1609fe71d0a9396483b95d375e4599a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d742ff4ba1609fe71d0a9396483b95d375e4599a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d742ff4ba1609fe71d0a9396483b95d375e4599a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d742ff4ba1609fe71d0a9396483b95d375e4599a/comments", "author": null, "committer": null, "parents": [{"sha": "1329f0c4e27f29cef728a9ab0329e1dd287a7812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1329f0c4e27f29cef728a9ab0329e1dd287a7812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1329f0c4e27f29cef728a9ab0329e1dd287a7812"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "78282ea70e2e915bf030fad32435ef35267f1983", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d742ff4ba1609fe71d0a9396483b95d375e4599a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d742ff4ba1609fe71d0a9396483b95d375e4599a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d742ff4ba1609fe71d0a9396483b95d375e4599a", "patch": "@@ -1,3 +1,10 @@\n+2013-09-10  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/58361\n+\t* arm/vfp.md (combine_vcvt_f32_<FCVTI32typename>): Fix pattern to\n+\tsupport conditional execution.\n+\t(combine_vcvt_f64_<FCVTI32typename>): Likewise.\n+\n 2013-09-10  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* lra.c (lra): Clear lra_optional_reload_pseudos before every"}, {"sha": "0b10c130d70d05daa47f2970d8c3e8c6c42a8a69", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d742ff4ba1609fe71d0a9396483b95d375e4599a/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d742ff4ba1609fe71d0a9396483b95d375e4599a/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=d742ff4ba1609fe71d0a9396483b95d375e4599a", "patch": "@@ -1217,37 +1217,40 @@\n    (set_attr \"type\" \"fcmpd\")]\n )\n \n-;; Fixed point to floating point conversions. \n+;; Fixed point to floating point conversions.\n (define_code_iterator FCVT [unsigned_float float])\n (define_code_attr FCVTI32typename [(unsigned_float \"u32\") (float \"s32\")])\n \n (define_insn \"*combine_vcvt_f32_<FCVTI32typename>\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=t\")\n \t(mult:SF (FCVT:SF (match_operand:SI 1 \"s_register_operand\" \"0\"))\n-\t\t (match_operand 2 \n+\t\t (match_operand 2\n \t\t\t\"const_double_vcvt_power_of_two_reciprocal\" \"Dt\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP3 && !flag_rounding_math\"\n-  \"vcvt.f32.<FCVTI32typename>\\\\t%0, %1, %v2\"\n- [(set_attr \"predicable\" \"no\")\n-  (set_attr \"type\" \"f_cvti2f\")]\n+  \"vcvt%?.f32.<FCVTI32typename>\\\\t%0, %1, %v2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"f_cvti2f\")]\n )\n \n ;; Not the ideal way of implementing this. Ideally we would be able to split\n ;; this into a move to a DP register and then a vcvt.f64.i32\n (define_insn \"*combine_vcvt_f64_<FCVTI32typename>\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=x,x,w\")\n \t(mult:DF (FCVT:DF (match_operand:SI 1 \"s_register_operand\" \"r,t,r\"))\n-\t\t (match_operand 2 \n+\t\t (match_operand 2\n \t\t     \"const_double_vcvt_power_of_two_reciprocal\" \"Dt,Dt,Dt\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP3 && !flag_rounding_math \n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP3 && !flag_rounding_math\n   && !TARGET_VFP_SINGLE\"\n   \"@\n-  vmov.f32\\\\t%0, %1\\;vcvt.f64.<FCVTI32typename>\\\\t%P0, %P0, %v2\n-  vmov.f32\\\\t%0, %1\\;vcvt.f64.<FCVTI32typename>\\\\t%P0, %P0, %v2\n-  vmov.f64\\\\t%P0, %1, %1\\;vcvt.f64.<FCVTI32typename>\\\\t%P0, %P0, %v2\"\n- [(set_attr \"predicable\" \"no\")\n-  (set_attr \"type\" \"f_cvti2f\")\n-  (set_attr \"length\" \"8\")]\n+  vmov%?.f32\\\\t%0, %1\\;vcvt%?.f64.<FCVTI32typename>\\\\t%P0, %P0, %v2\n+  vmov%?.f32\\\\t%0, %1\\;vcvt%?.f64.<FCVTI32typename>\\\\t%P0, %P0, %v2\n+  vmov%?.f64\\\\t%P0, %1, %1\\;vcvt%?.f64.<FCVTI32typename>\\\\t%P0, %P0, %v2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"ce_count\" \"2\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"f_cvti2f\")\n+   (set_attr \"length\" \"8\")]\n )\n \n ;; Store multiple insn used in function prologue."}]}