{"sha": "72f52f3081af48ddddcb9e541c33fbbddfb4215d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJmNTJmMzA4MWFmNDhkZGRkY2I5ZTU0MWMzM2ZiYmRkZmI0MjE1ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-08-22T18:03:59Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-08-22T18:03:59Z"}, "message": "Support __builtin_isinf_sign for new floating-point types (PR middle-end/77269).\n\nThe __builtin_isinf_sign folding uses a type-specific signbit built-in\nfunction, meaning it only works for the types float, double and long\ndouble, not for types such as _FloatN, _FloatNx, __float128.  Since\nthe signbit built-in function is now type-generic, that can be used\nunconditionally, much as the code uses the type-generic isinf built-in\nfunction unconditionally, and this patch makes it do so, thereby\nenabling __builtin_isinf_sign (which glibc uses to expand the isinf\nmacro since that macro in glibc traditionally provided the stronger\nguarantees about the return value given by __builtin_isinf_sign) to\nwork for all floating-point types.\n\nThe test gcc.dg/torture/builtin-isinf_sign-1.c needs updating because\nit tests that comparisons of calls to __builtin_isinf_sign to\nconditional expressions involving __builtin_isinf and\n__builtin_signbit* get optimized away, and with a change of what\nparticular built-in function for signbit is used, GCC doesn't notice\nthe expressions with type-generic and non-type-generic built-in\nfunctions are equivalent at -O0 or -O1 (it does optimize away the\noriginal test at -O2).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\n\tPR middle-end/77269\ngcc:\n\t* builtins.c (fold_builtin_classify): Use builtin_decl_explicit\n\t(BUILT_IN_SIGNBIT) to expand __builtin_isinf_sign.\n\ngcc/testsuite:\n\t* gcc.dg/torture/builtin-isinf_sign-1.c: Use __builtin_signbit not\n\t__builtin_signbitf and __builtin_signbitl in expected generic\n\texpansion.\n\t* gcc.dg/torture/float128-tg-2.c, gcc.dg/torture/float128x-tg-2.c,\n\tgcc.dg/torture/float16-tg-2.c, gcc.dg/torture/float32-tg-2.c,\n\tgcc.dg/torture/float32x-tg-2.c, gcc.dg/torture/float64-tg-2.c,\n\tgcc.dg/torture/float64x-tg-2.c, gcc.dg/torture/floatn-tg-2.h: New\n\ttests.\n\nFrom-SVN: r239665", "tree": {"sha": "92790e144d0acb87113da7350151c0896d7f9232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92790e144d0acb87113da7350151c0896d7f9232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72f52f3081af48ddddcb9e541c33fbbddfb4215d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f52f3081af48ddddcb9e541c33fbbddfb4215d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72f52f3081af48ddddcb9e541c33fbbddfb4215d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f52f3081af48ddddcb9e541c33fbbddfb4215d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27abac26489e547861904edf53ce1f9d3358a20d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27abac26489e547861904edf53ce1f9d3358a20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27abac26489e547861904edf53ce1f9d3358a20d"}], "stats": {"total": 142, "additions": 138, "deletions": 4}, "files": [{"sha": "3cb421cfead5dc2dcbda2e146646b900938a1594", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -1,3 +1,9 @@\n+2016-08-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/77269\n+\t* builtins.c (fold_builtin_classify): Use builtin_decl_explicit\n+\t(BUILT_IN_SIGNBIT) to expand __builtin_isinf_sign.\n+\n 2016-08-22  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* print-tree.c (print_node) [VECTOR_CST]: Coalesce the output of"}, {"sha": "b981bcd281af29cdbb1d6bcc1e9f93b769708897", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -7881,8 +7881,7 @@ fold_builtin_classify (location_t loc, tree fndecl, tree arg, int builtin_index)\n \t/* In a boolean context, GCC will fold the inner COND_EXPR to\n \t   1.  So e.g. \"if (isinf_sign(x))\" would be folded to just\n \t   \"if (isinf(x) ? 1 : 0)\" which becomes \"if (isinf(x))\". */\n-\ttree signbit_fn = mathfn_built_in_1\n-\t  (TREE_TYPE (arg), CFN_BUILT_IN_SIGNBIT, 0);\n+\ttree signbit_fn = builtin_decl_explicit (BUILT_IN_SIGNBIT);\n \ttree isinf_fn = builtin_decl_explicit (BUILT_IN_ISINF);\n \ttree tmp = NULL_TREE;\n "}, {"sha": "0a82b69d0586faa5e7332844fe10c6ccaeedfe12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -1,3 +1,15 @@\n+2016-08-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/77269\n+\t* gcc.dg/torture/builtin-isinf_sign-1.c: Use __builtin_signbit not\n+\t__builtin_signbitf and __builtin_signbitl in expected generic\n+\texpansion.\n+\t* gcc.dg/torture/float128-tg-2.c, gcc.dg/torture/float128x-tg-2.c,\n+\tgcc.dg/torture/float16-tg-2.c, gcc.dg/torture/float32-tg-2.c,\n+\tgcc.dg/torture/float32x-tg-2.c, gcc.dg/torture/float64-tg-2.c,\n+\tgcc.dg/torture/float64x-tg-2.c, gcc.dg/torture/floatn-tg-2.h: New\n+\ttests.\n+\n 2016-08-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/torture/float128-builtin.c,"}, {"sha": "2579c6875ec20b12a706ebe44dd41cd98a678b23", "filename": "gcc/testsuite/gcc.dg/torture/builtin-isinf_sign-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-isinf_sign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-isinf_sign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-isinf_sign-1.c?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -15,13 +15,13 @@ foo (float f, double d, long double ld)\n   /* Test the generic expansion of isinf_sign.  */\n \n   if (__builtin_isinf_sign(f)\n-      != (__builtin_isinf(f) ? (__builtin_signbitf(f) ? -1 : 1) : 0))\n+      != (__builtin_isinf(f) ? (__builtin_signbit(f) ? -1 : 1) : 0))\n     link_error (__LINE__);\n   if (__builtin_isinf_sign(d)\n       != (__builtin_isinf(d) ? (__builtin_signbit(d) ? -1 : 1) : 0))\n     link_error (__LINE__);\n   if (__builtin_isinf_sign(ld)\n-      != (__builtin_isinf(ld) ? (__builtin_signbitl(ld) ? -1 : 1) : 0))\n+      != (__builtin_isinf(ld) ? (__builtin_signbit(ld) ? -1 : 1) : 0))\n     link_error (__LINE__);\n \n #ifdef __OPTIMIZE__"}, {"sha": "c7a32b176e884d36b0b7c572a470c4da534212dc", "filename": "gcc/testsuite/gcc.dg/torture/float128-tg-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-tg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-tg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-tg-2.c?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float128 type-generic built-in functions: __builtin_isinf_sign.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float128 } */\n+/* { dg-require-effective-target float128_runtime } */\n+\n+#define WIDTH 128\n+#define EXT 0\n+#include \"floatn-tg-2.h\""}, {"sha": "e5c1b0c6989e89d80d02d6a694716a06b59fedfd", "filename": "gcc/testsuite/gcc.dg/torture/float128x-tg-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-tg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-tg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-tg-2.c?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float128x type-generic built-in functions: __builtin_isinf_sign.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float128x } */\n+/* { dg-require-effective-target float128x_runtime } */\n+\n+#define WIDTH 128\n+#define EXT 1\n+#include \"floatn-tg-2.h\""}, {"sha": "4236018b0e7ae6bad97e9028956141f96560c547", "filename": "gcc/testsuite/gcc.dg/torture/float16-tg-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-tg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-tg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-tg-2.c?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float16 type-generic built-in functions: __builtin_isinf_sign.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float16 } */\n+/* { dg-require-effective-target float16_runtime } */\n+\n+#define WIDTH 16\n+#define EXT 0\n+#include \"floatn-tg-2.h\""}, {"sha": "80441d720e236e904beadac14116279ca36c1af1", "filename": "gcc/testsuite/gcc.dg/torture/float32-tg-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-tg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-tg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-tg-2.c?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float32 type-generic built-in functions: __builtin_isinf_sign.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float32 } */\n+/* { dg-require-effective-target float32_runtime } */\n+\n+#define WIDTH 32\n+#define EXT 0\n+#include \"floatn-tg-2.h\""}, {"sha": "897130a280fa9442748d60cd8e4b2f6d87d48b20", "filename": "gcc/testsuite/gcc.dg/torture/float32x-tg-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-tg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-tg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-tg-2.c?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float32x type-generic built-in functions: __builtin_isinf_sign.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float32x } */\n+/* { dg-require-effective-target float32x_runtime } */\n+\n+#define WIDTH 32\n+#define EXT 1\n+#include \"floatn-tg-2.h\""}, {"sha": "dddaa82122a3148765d6352c93bc7320f318ea11", "filename": "gcc/testsuite/gcc.dg/torture/float64-tg-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-tg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-tg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-tg-2.c?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float64 type-generic built-in functions: __builtin_isinf_sign.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float64 } */\n+/* { dg-require-effective-target float64_runtime } */\n+\n+#define WIDTH 64\n+#define EXT 0\n+#include \"floatn-tg-2.h\""}, {"sha": "647d10406f0bab0740e71b225f0f1062a9e2e499", "filename": "gcc/testsuite/gcc.dg/torture/float64x-tg-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-tg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-tg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-tg-2.c?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float64x type-generic built-in functions: __builtin_isinf_sign.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float64x } */\n+/* { dg-require-effective-target float64x_runtime } */\n+\n+#define WIDTH 64\n+#define EXT 1\n+#include \"floatn-tg-2.h\""}, {"sha": "1060da61292ea0ada09254e7b6b7a466907db7d5", "filename": "gcc/testsuite/gcc.dg/torture/floatn-tg-2.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-tg-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f52f3081af48ddddcb9e541c33fbbddfb4215d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-tg-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-tg-2.h?ref=72f52f3081af48ddddcb9e541c33fbbddfb4215d", "patch": "@@ -0,0 +1,54 @@\n+/* Tests for _FloatN / _FloatNx types: compile and execution tests for\n+   type-generic built-in functions: __builtin_isinf_sign.  Before\n+   including this file, define WIDTH as the value N; define EXT to 1\n+   for _FloatNx and 0 for _FloatN.  */\n+\n+#define __STDC_WANT_IEC_60559_TYPES_EXT__\n+#include <float.h>\n+\n+#define CONCATX(X, Y) X ## Y\n+#define CONCAT(X, Y) CONCATX (X, Y)\n+#define CONCAT3(X, Y, Z) CONCAT (CONCAT (X, Y), Z)\n+#define CONCAT4(W, X, Y, Z) CONCAT (CONCAT (CONCAT (W, X), Y), Z)\n+\n+#if EXT\n+# define TYPE CONCAT3 (_Float, WIDTH, x)\n+# define CST(C) CONCAT4 (C, f, WIDTH, x)\n+# define MAX CONCAT3 (FLT, WIDTH, X_MAX)\n+#else\n+# define TYPE CONCAT (_Float, WIDTH)\n+# define CST(C) CONCAT3 (C, f, WIDTH)\n+# define MAX CONCAT3 (FLT, WIDTH, _MAX)\n+#endif\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+volatile TYPE inf = __builtin_inf (), nanval = __builtin_nan (\"\");\n+volatile TYPE neginf = -__builtin_inf (), negnanval = -__builtin_nan (\"\");\n+volatile TYPE zero = CST (0.0), negzero = -CST (0.0), one = CST (1.0);\n+volatile TYPE max = MAX, negmax = -MAX;\n+\n+int\n+main (void)\n+{\n+  if (__builtin_isinf_sign (inf) != 1)\n+    abort ();\n+  if (__builtin_isinf_sign (neginf) != -1)\n+    abort ();\n+  if (__builtin_isinf_sign (nanval) != 0)\n+    abort ();\n+  if (__builtin_isinf_sign (negnanval) != 0)\n+    abort ();\n+  if (__builtin_isinf_sign (zero) != 0)\n+    abort ();\n+  if (__builtin_isinf_sign (negzero) != 0)\n+    abort ();\n+  if (__builtin_isinf_sign (one) != 0)\n+    abort ();\n+  if (__builtin_isinf_sign (max) != 0)\n+    abort ();\n+  if (__builtin_isinf_sign (negmax) != 0)\n+    abort ();\n+  exit (0);\n+}"}]}