{"sha": "516119bd60f8544888280be3823db10beeafbf2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2MTE5YmQ2MGY4NTQ0ODg4MjgwYmUzODIzZGIxMGJlZWFmYmYyYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-11-10T23:29:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-11-10T23:29:59Z"}, "message": "revert: re PR rtl-optimization/63620 (RELOAD lost SET_GOT dependency on Darwin)\n\n2014-11-11  Uros Bizjak  <ubizjak@gmail.com>\n\n\tRevert:\n\t2014-10-31  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/63620\n\t* config/i386/i386-protos.h (ix86_use_pseudo_pic_reg): Declare.\n\t* config/i386/i386.c (ix86_use_pseudo_pic_reg): Export.\n\t* config/i386/i386.md (*pushtf): Allow only CONST_DOUBLEs that won't\n\tbe reloaded through memory.\n\t(*pushxf): Ditto.\n\t(*pushdf): Ditto.\n\ntestsuite/ChangeLog:\n\n2014-11-11  Uros Bizjak  <ubizjak@gmail.com>\n\t    Ilya Enkovich  <ilya.enkovich@intel.com>\n\n\tPR target/63620\n\t* gcc.target/i386/pr63620.c: New test.\n\n\nCo-Authored-By: Ilya Enkovich <ilya.enkovich@intel.com>\n\nFrom-SVN: r217325", "tree": {"sha": "54e59b494ea3f189280a62389db0ee8dca762d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e59b494ea3f189280a62389db0ee8dca762d42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/516119bd60f8544888280be3823db10beeafbf2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516119bd60f8544888280be3823db10beeafbf2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516119bd60f8544888280be3823db10beeafbf2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516119bd60f8544888280be3823db10beeafbf2a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "debede8184ef325f402e4f761eb0061a90525b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/debede8184ef325f402e4f761eb0061a90525b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/debede8184ef325f402e4f761eb0061a90525b43"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "bceacd68518dc47b1cb7b4101d993b58637c1330", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516119bd60f8544888280be3823db10beeafbf2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516119bd60f8544888280be3823db10beeafbf2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=516119bd60f8544888280be3823db10beeafbf2a", "patch": "@@ -1,3 +1,16 @@\n+2014-11-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tRevert:\n+\t2014-10-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/63620\n+\t* config/i386/i386-protos.h (ix86_use_pseudo_pic_reg): Declare.\n+\t* config/i386/i386.c (ix86_use_pseudo_pic_reg): Export.\n+\t* config/i386/i386.md (*pushtf): Allow only CONST_DOUBLEs that won't\n+\tbe reloaded through memory.\n+\t(*pushxf): Ditto.\n+\t(*pushdf): Ditto.\n+\n 2014-11-11  Jakub Jelinek  <jakub@redhat.com>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "c4870d20108c8f118e19b1c8898fefd87226aa41", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=516119bd60f8544888280be3823db10beeafbf2a", "patch": "@@ -42,8 +42,6 @@ extern enum calling_abi ix86_function_type_abi (const_tree);\n \n extern void ix86_reset_previous_fndecl (void);\n \n-extern bool ix86_use_pseudo_pic_reg (void);\n-\n #ifdef RTX_CODE\n extern int standard_80387_constant_p (rtx);\n extern const char *standard_80387_constant_opcode (rtx);"}, {"sha": "7a59252624ad9d086ed9c69cb95c4f9c4c160c6d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=516119bd60f8544888280be3823db10beeafbf2a", "patch": "@@ -6184,7 +6184,7 @@ ix86_maybe_switch_abi (void)\n \n /* Return 1 if pseudo register should be created and used to hold\n    GOT address for PIC code.  */\n-bool\n+static bool\n ix86_use_pseudo_pic_reg (void)\n {\n   if ((TARGET_64BIT"}, {"sha": "0df66ea6c0ad7feaae9b966455dc290deb3ad3ce", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=516119bd60f8544888280be3823db10beeafbf2a", "patch": "@@ -2779,15 +2779,10 @@\n \f\n ;; Floating point push instructions.\n \n-;; %%% Remove CONST_DOUBLE workaround after PR63620 is fixed!\n (define_insn \"*pushtf\"\n   [(set (match_operand:TF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:TF 1 \"general_no_elim_operand\" \"x,*roF\"))]\n-  \"(TARGET_64BIT || TARGET_SSE)\n-   && (!ix86_use_pseudo_pic_reg ()\n-       || !can_create_pseudo_p ()\n-       || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || standard_sse_constant_p (operands[1]))\"\n+  \"TARGET_64BIT || TARGET_SSE\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n@@ -2809,14 +2804,10 @@\n   operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n })\n \n-;; %%% Remove CONST_DOUBLE workaround after PR63620 is fixed!\n (define_insn \"*pushxf\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Yx*roF\"))]\n-  \"!ix86_use_pseudo_pic_reg ()\n-   || !can_create_pseudo_p ()\n-   || GET_CODE (operands[1]) != CONST_DOUBLE\n-   || standard_80387_constant_p (operands[1]) > 0\"\n+  \"\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n@@ -2844,17 +2835,10 @@\n   operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n })\n \n-;; %%% Remove CONST_DOUBLE workaround after PR63620 is fixed!\n (define_insn \"*pushdf\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<,<\")\n \t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Yd*roF,rmF,x\"))]\n-  \"!ix86_use_pseudo_pic_reg ()\n-   || !can_create_pseudo_p ()\n-   || GET_CODE (operands[1]) != CONST_DOUBLE\n-   || (!(TARGET_SSE2 && TARGET_SSE_MATH)\n-       && standard_80387_constant_p (operands[1]) > 0)\n-   || (TARGET_SSE2 && TARGET_SSE_MATH\n-       && standard_sse_constant_p (operands[1]))\"\n+  \"\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();"}, {"sha": "5a9d4dedd75689fe2f78312f7b35f91064b69933", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=516119bd60f8544888280be3823db10beeafbf2a", "patch": "@@ -1,3 +1,9 @@\n+2014-11-11  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR target/63620\n+\t* gcc.target/i386/pr63620.c: New test.\n+\n 2014-11-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/tm/memopt-15.c: Add -msse2 to dg-options."}, {"sha": "bf3843550acaa0c709e1a2b4540708434a020d3c", "filename": "gcc/testsuite/gcc.target/i386/pr63620.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63620.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516119bd60f8544888280be3823db10beeafbf2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63620.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63620.c?ref=516119bd60f8544888280be3823db10beeafbf2a", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/63620 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-O2 -fpic -mfpmath=sse -msse\" } */\n+\n+static const __float128 cf = 0.1E+30Q;\n+\n+typedef __float128 (*func)(__float128 x);\n+\n+__float128\n+test (__float128 x, int p, func f)\n+{\n+  x = f (x);\n+  if (p)\n+    x = f (cf);\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"get_pc_thunk\" } } */"}]}