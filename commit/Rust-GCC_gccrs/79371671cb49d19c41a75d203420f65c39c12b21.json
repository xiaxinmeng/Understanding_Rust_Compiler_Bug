{"sha": "79371671cb49d19c41a75d203420f65c39c12b21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzNzE2NzFjYjQ5ZDE5YzQxYTc1ZDIwMzQyMGY2NWMzOWMxMmIyMQ==", "commit": {"author": {"name": "Will Wray", "email": "wjwray@gmail.com", "date": "2018-10-12T03:35:48Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-10-12T03:35:48Z"}, "message": "re PR c++/87364 (Pretty print of enumerator never prints the id, always falls back to C-style cast output)\n\n\tPR c++/87364\n\t* c-pretty-print.h (pp_c_type_cast): Prototype.\n\t(pp_c_integer_constant): Likewise.\n\t* c-pretty-print.c (pp_c_type_cast): No longer static.\n\t(pp_c_integer_constant): Likewise.\n\t(pp_c_enumeration_constant): Fix loop termination when finding\n\tname of constant.  No longer returns a value.  Call\n\tpp_c_integer_constant.\n\t(c_pretty_printer::constant): Update for changes to\n\tpp_c_enumeration_constant.\n\n\tPR c++/87364\n\t* cxx-pretty-print.c (pp_cxx_enumeration_constant): New function.\n\t(cxx_pretty_printer::constant): Use it.\n\nFrom-SVN: r265077", "tree": {"sha": "ba6b0fbe86184862b329e056b407eb62eab5ee58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba6b0fbe86184862b329e056b407eb62eab5ee58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79371671cb49d19c41a75d203420f65c39c12b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79371671cb49d19c41a75d203420f65c39c12b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79371671cb49d19c41a75d203420f65c39c12b21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79371671cb49d19c41a75d203420f65c39c12b21/comments", "author": {"login": "willwray", "id": 3172718, "node_id": "MDQ6VXNlcjMxNzI3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3172718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willwray", "html_url": "https://github.com/willwray", "followers_url": "https://api.github.com/users/willwray/followers", "following_url": "https://api.github.com/users/willwray/following{/other_user}", "gists_url": "https://api.github.com/users/willwray/gists{/gist_id}", "starred_url": "https://api.github.com/users/willwray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willwray/subscriptions", "organizations_url": "https://api.github.com/users/willwray/orgs", "repos_url": "https://api.github.com/users/willwray/repos", "events_url": "https://api.github.com/users/willwray/events{/privacy}", "received_events_url": "https://api.github.com/users/willwray/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b8c3649a512c4cd1a846a2f3e86150e824cbb41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8c3649a512c4cd1a846a2f3e86150e824cbb41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8c3649a512c4cd1a846a2f3e86150e824cbb41"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "3d5fd4faf7259450afb8370b9ab30f6df7a4209e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=79371671cb49d19c41a75d203420f65c39c12b21", "patch": "@@ -1,3 +1,16 @@\n+2018-10-11  Will Wray  <wjwray@gmail.com>\n+\n+\tPR c++/87364\n+\t* c-pretty-print.h (pp_c_type_cast): Prototype.\n+\t(pp_c_integer_constant): Likewise.\n+\t* c-pretty-print.c (pp_c_type_cast): No longer static.\n+\t(pp_c_integer_constant): Likewise.\n+\t(pp_c_enumeration_constant): Fix loop termination when finding\n+\tname of constant.  No longer returns a value.  Call\n+\tpp_c_integer_constant.\n+\t(c_pretty_printer::constant): Update for changes to\n+\tpp_c_enumeration_constant.\n+\n 2018-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-lex.c (c_common_has_attribute): Return 201803 instead of 20180312"}, {"sha": "bdd5567614d44a2bca93df2a86c4b5cc7d23edb9", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=79371671cb49d19c41a75d203420f65c39c12b21", "patch": "@@ -192,7 +192,7 @@ pp_c_cv_qualifiers (c_pretty_printer *pp, int qualifiers, bool func_type)\n \n /* Pretty-print T using the type-cast notation '( type-name )'.  */\n \n-static void\n+void\n pp_c_type_cast (c_pretty_printer *pp, tree t)\n {\n   pp_c_left_paren (pp);\n@@ -908,7 +908,7 @@ pp_c_void_constant (c_pretty_printer *pp)\n \n /* Pretty-print an INTEGER literal.  */\n \n-static void\n+void\n pp_c_integer_constant (c_pretty_printer *pp, tree i)\n {\n   if (tree_fits_shwi_p (i))\n@@ -968,21 +968,20 @@ pp_c_bool_constant (c_pretty_printer *pp, tree b)\n     pp_unsupported_tree (pp, b);\n }\n \n-/* Attempt to print out an ENUMERATOR.  Return true on success.  Else return\n-   false; that means the value was obtained by a cast, in which case\n-   print out the type-id part of the cast-expression -- the casted value\n-   is then printed by pp_c_integer_literal.  */\n+/* Given a value e of ENUMERAL_TYPE:\n+   Print out the first ENUMERATOR id with value e, if one is found,\n+   else print out the value as a C-style cast (type-id)value.  */\n \n-static bool\n+static void\n pp_c_enumeration_constant (c_pretty_printer *pp, tree e)\n {\n-  bool value_is_named = true;\n   tree type = TREE_TYPE (e);\n   tree value;\n \n   /* Find the name of this constant.  */\n   for (value = TYPE_VALUES (type);\n-       value != NULL_TREE && !tree_int_cst_equal (TREE_VALUE (value), e);\n+       value != NULL_TREE\n+\t&& !tree_int_cst_equal (DECL_INITIAL (TREE_VALUE (value)), e);\n        value = TREE_CHAIN (value))\n     ;\n \n@@ -992,10 +991,8 @@ pp_c_enumeration_constant (c_pretty_printer *pp, tree e)\n     {\n       /* Value must have been cast.  */\n       pp_c_type_cast (pp, type);\n-      value_is_named = false;\n+      pp_c_integer_constant (pp, e);\n     }\n-\n-  return value_is_named;\n }\n \n /* Print out a REAL value as a decimal-floating-constant.  */\n@@ -1140,9 +1137,8 @@ c_pretty_printer::constant (tree e)\n \t  pp_c_bool_constant (this, e);\n \telse if (type == char_type_node)\n \t  pp_c_character_constant (this, e);\n-\telse if (TREE_CODE (type) == ENUMERAL_TYPE\n-\t\t && pp_c_enumeration_constant (this, e))\n-\t  ;\n+\telse if (TREE_CODE (type) == ENUMERAL_TYPE)\n+\t  pp_c_enumeration_constant (this, e))\n \telse\n \t  pp_c_integer_constant (this, e);\n       }"}, {"sha": "ac824a38d625b57a6df248e21b0ec53c45a98b53", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=79371671cb49d19c41a75d203420f65c39c12b21", "patch": "@@ -128,11 +128,13 @@ void pp_c_logical_or_expression (c_pretty_printer *, tree);\n void pp_c_expression_list (c_pretty_printer *, tree);\n void pp_c_constructor_elts (c_pretty_printer *, vec<constructor_elt, va_gc> *);\n void pp_c_call_argument_list (c_pretty_printer *, tree);\n+void pp_c_type_cast (c_pretty_printer *, tree);\n void pp_c_cast_expression (c_pretty_printer *, tree);\n void pp_c_init_declarator (c_pretty_printer *, tree);\n void pp_c_ws_string (c_pretty_printer *, const char *);\n void pp_c_identifier (c_pretty_printer *, const char *);\n void pp_c_string_literal (c_pretty_printer *, tree);\n+void pp_c_integer_constant (c_pretty_printer *, tree);\n \n void print_c_tree (FILE *file, tree t);\n "}, {"sha": "bbeb45c5e5252550c216cc2c354a47cb54d1bc24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=79371671cb49d19c41a75d203420f65c39c12b21", "patch": "@@ -1,3 +1,9 @@\n+2018-10-11  Will Wray  <wjwray@gmail.com>\n+\n+\tPR c++/87364\n+\t* cxx-pretty-print.c (pp_cxx_enumeration_constant): New function.\n+\t(cxx_pretty_printer::constant): Use it.\n+\n 2018-10-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/84993"}, {"sha": "c138c508c66e436e3e22183f575461cee45e11e3", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79371671cb49d19c41a75d203420f65c39c12b21/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=79371671cb49d19c41a75d203420f65c39c12b21", "patch": "@@ -294,6 +294,39 @@ pp_cxx_qualified_id (cxx_pretty_printer *pp, tree t)\n     }\n }\n \n+/* Given a value e of ENUMERAL_TYPE:\n+   Print out the first ENUMERATOR id with value e, if one is found,\n+   (including nested names but excluding the enum name if unscoped)\n+   else print out the value as a C-style cast (type-id)value.  */\n+\n+static void\n+pp_cxx_enumeration_constant (cxx_pretty_printer *pp, tree e)\n+{\n+  tree type = TREE_TYPE (e);\n+  tree value;\n+\n+  /* Find the name of this constant.  */\n+  for (value = TYPE_VALUES (type);\n+       value != NULL_TREE\n+\t&& !tree_int_cst_equal (DECL_INITIAL (TREE_VALUE (value)), e);\n+       value = TREE_CHAIN (value))\n+    ;\n+\n+  if (value != NULL_TREE)\n+    {\n+      if (!ENUM_IS_SCOPED (type))\n+\ttype = get_containing_scope (type);\n+      pp_cxx_nested_name_specifier (pp, type);\n+      pp->id_expression (TREE_PURPOSE (value));\n+    }\n+  else\n+    {\n+      /* Value must have been cast.  */\n+       pp_c_type_cast (pp, type);\n+       pp_c_integer_constant (pp, e);\n+    }\n+}\n+\n \n void\n cxx_pretty_printer::constant (tree t)\n@@ -317,6 +350,11 @@ cxx_pretty_printer::constant (tree t)\n \t  pp_string (this, \"nullptr\");\n \t  break;\n \t}\n+      else if (TREE_CODE (TREE_TYPE (t)) == ENUMERAL_TYPE)\n+\t{\n+\t  pp_cxx_enumeration_constant (this, t);\n+\t  break;\n+\t}\n       /* fall through.  */\n \n     default:"}]}