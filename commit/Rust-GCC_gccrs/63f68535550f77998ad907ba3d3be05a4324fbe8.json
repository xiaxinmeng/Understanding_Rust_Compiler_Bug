{"sha": "63f68535550f77998ad907ba3d3be05a4324fbe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNmNjg1MzU1NTBmNzc5OThhZDkwN2JhM2QzYmUwNWE0MzI0ZmJlOA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@foss.st.com", "date": "2021-07-15T12:57:18Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@foss.st.com", "date": "2021-08-23T09:05:43Z"}, "message": "arm: Fix multilib mapping for CDE extensions [PR100856]\n\nThis is a followup to Srinath's recent patch: the newly added test is\nfailing e.g. on arm-linux-gnueabihf without R/M profile multilibs.\n\nIt is also failing on arm-eabi with R/M profile multilibs if the\nexecution engine does not support v8.1-M instructions.\n\nThe patch avoids this by adding check_effective_target_FUNC_multilib\nin target-supports.exp which effectively checks whether the target\nsupports linking and execution, like what is already done for other\nARM effective targets.  pr100856.c is updated to use it instead of\narm_v8_1m_main_cde_mve_ok (which makes the testcase a bit of a\nduplicate with check_effective_target_FUNC_multilib).\n\nIn addition, I noticed that requiring MVE does not seem necessary and\nthis enables the test to pass even when targeting a CPU without MVE:\nsince the test does not involve actual CDE instructions, it can pass\non other architecture versions.  For instance, when requiring MVE, we\nhave to use cortex-m55 under QEMU for the test to pass because the\nmemset() that comes from v8.1-m.main+mve multilib uses LOB\ninstructions (DLS) (memset is used during startup).  Keeping\narm_v8_1m_main_cde_mve_ok would mean we would enable the test provided\nwe have the right multilibs, causing a runtime error if the simulator\ndoes not support LOB instructions (e.g. when targeting cortex-m7).\n\nI do not update sourcebuild.texi since the CDE effective targets are\nalready collectively documented.\n\nFinally, the patch fixes two typos in comments.\n\n2021-07-15  Christophe Lyon  <christophe.lyon@foss.st.com>\n\n\tPR target/100856\n\tgcc/\n\t* config/arm/arm.opt: Fix typo.\n\t* config/arm/t-rmprofile: Fix typo.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/acle/pr100856.c: Use arm_v8m_main_cde_multilib\n\tand arm_v8m_main_cde.\n\t* lib/target-supports.exp: Add\n\tcheck_effective_target_FUNC_multilib for ARM CDE.", "tree": {"sha": "bb089e61af7f1135490395142dc2eb112fca69a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb089e61af7f1135490395142dc2eb112fca69a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63f68535550f77998ad907ba3d3be05a4324fbe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f68535550f77998ad907ba3d3be05a4324fbe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63f68535550f77998ad907ba3d3be05a4324fbe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f68535550f77998ad907ba3d3be05a4324fbe8/comments", "author": null, "committer": null, "parents": [{"sha": "3bc75533d1f87f0617be6c1af98804f9127ec637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc75533d1f87f0617be6c1af98804f9127ec637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc75533d1f87f0617be6c1af98804f9127ec637"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "7417b55122afb2f4752d7b88df1981250a5a86fd", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f68535550f77998ad907ba3d3be05a4324fbe8/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f68535550f77998ad907ba3d3be05a4324fbe8/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=63f68535550f77998ad907ba3d3be05a4324fbe8", "patch": "@@ -82,7 +82,7 @@ EnumValue\n Enum(arm_arch) String(native) Value(-1) DriverOnly\n \n ; Set to the name of target architecture which is required for\n-; multilib linking.  This option is undocumented becuase it\n+; multilib linking.  This option is undocumented because it\n ; should not be used by the users.\n mlibarch=\n Target RejectNegative JoinedOrMissing NoDWARFRecord DriverOnly Undocumented"}, {"sha": "a6036bf0a5191a3cac3bfbe2329783204d5c3ef4", "filename": "gcc/config/arm/t-rmprofile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f68535550f77998ad907ba3d3be05a4324fbe8/gcc%2Fconfig%2Farm%2Ft-rmprofile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f68535550f77998ad907ba3d3be05a4324fbe8/gcc%2Fconfig%2Farm%2Ft-rmprofile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-rmprofile?ref=63f68535550f77998ad907ba3d3be05a4324fbe8", "patch": "@@ -54,7 +54,7 @@ MULTILIB_REQUIRED\t+= mthumb/march=armv8.1-m.main+mve/mfloat-abi=hard\n MULTILIB_MATCHES\t+= march?armv6s-m=march?armv6-m\n \n # For all MULITIB_MATCHES for v8-m and above add mlibarch? on the right hand side\n-# of = in the variant string instead of march?.  This is needed becuase all the\n+# of = in the variant string instead of march?.  This is needed because all the\n # MULITIB_MATCHES variant strings are compared with mlibarch option for multilib\n # linking.\n "}, {"sha": "adbe1ab08f72c26c22aaa2a25ccb5003e0b14d56", "filename": "gcc/testsuite/gcc.target/arm/acle/pr100856.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f68535550f77998ad907ba3d3be05a4324fbe8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fpr100856.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f68535550f77998ad907ba3d3be05a4324fbe8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fpr100856.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fpr100856.c?ref=63f68535550f77998ad907ba3d3be05a4324fbe8", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n-/* { dg-require-effective-target arm_v8_1m_main_cde_mve_ok } */\n-/* { dg-add-options arm_v8_1m_main_cde_mve } */\n+/* { dg-require-effective-target arm_v8m_main_cde_multilib } */\n+/* { dg-add-options arm_v8m_main_cde } */\n \n #include \"arm_cde.h\"\n "}, {"sha": "66ce48d7dfd0b75fde65bbc264120c6e1b15a588", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f68535550f77998ad907ba3d3be05a4324fbe8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f68535550f77998ad907ba3d3be05a4324fbe8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=63f68535550f77998ad907ba3d3be05a4324fbe8", "patch": "@@ -5518,6 +5518,24 @@ foreach { armfunc armflag armdef arminc } {\n \t    global et_FUNC_flags\n \t    return \"$flags $et_FUNC_flags\"\n \t}\n+\n+\tproc check_effective_target_FUNC_multilib { } {\n+\t    if { ! [check_effective_target_FUNC_ok] } {\n+\t\treturn 0;\n+\t    }\n+\t    return [check_runtime FUNC_multilib {\n+\t\t#if !(DEF)\n+\t\t#error \"DEF failed\"\n+\t\t#endif\n+\t\t#include <arm_cde.h>\n+\t\tINC\n+\t\tint\n+\t\tmain (void)\n+\t\t{\n+\t\t    return 0;\n+\t\t}\n+\t    } [add_options_for_FUNC \"\"]]\n+        }\n     }]\n }\n "}]}