{"sha": "8ae8bad7e558ce916c52e91a4e1879557f287bbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFlOGJhZDdlNTU4Y2U5MTZjNTJlOTFhNGUxODc5NTU3ZjI4N2JiYw==", "commit": {"author": {"name": "Chenghua Xu", "email": "paul.hua.gm@gmail.com", "date": "2018-11-07T08:25:17Z"}, "committer": {"name": "Chenghua Xu", "email": "paulhua@gcc.gnu.org", "date": "2018-11-07T08:25:17Z"}, "message": "Add support for Loongson MMI instructions.\n\ngcc/\n\t* config.gcc (extra_headers): Add loongson-mmiintrin.h.\n\t* config/mips/loongson.md: Move to ...\n\t* config/mips/loongson-mmi.md: here; Adjustment.\n\t* config/mips/loongson.h: Move to ...\n\tState as deprecated. Include loongson-mmiintrin.h for back\n\tcompatibility and warning.\n\t* config/mips/loongson-mmiintrin.h: ... here.\n\t* config/mips/mips.c (mips_hard_regno_mode_ok_uncached,\n\tmips_vector_mode_supported_p, AVAIL_NON_MIPS16): Use\n\tTARGET_LOONGSON_MMI instead of TARGET_LOONGSON_VECTORS.\n\t(mips_option_override): Make sure MMI use hard float;\n\t(mips_shift_truncation_mask, mips_expand_vpc_loongson_even_odd,\n\tmips_expand_vpc_loongson_pshufh, mips_expand_vpc_loongson_bcast,\n\tmips_expand_vector_init): Use TARGET_LOONGSON_MMI instead of\n\tTARGET_LOONGSON_VECTORS.\n\t* gcc/config/mips/mips.h (TARGET_LOONGSON_VECTORS): Delete.\n\t(TARGET_CPU_CPP_BUILTINS): Add __mips_loongson_mmi.\n\t(MIPS_ASE_DSP_SPEC, MIPS_ASE_LOONGSON_MMI_SPEC): New.\n\t(BASE_DRIVER_SELF_SPECS): march=loongson2e/2f/3a implies\n\t-mloongson-mmi.\n\t(SHIFT_COUNT_TRUNCATED): Use TARGET_LOONGSON_MMI instead of\n\tTARGET_LOONGSON_VECTORS.\n\t* gcc/config/mips/mips.md (MOVE64, MOVE128): Use\n\tTARGET_LOONGSON_MMI instead of TARGET_LOONGSON_VECTORS.\n\t(Loongson MMI patterns): Include loongson-mmi.md instead of\n\tloongson.md.\n\t* gcc/config/mips/mips.opt (-mloongson-mmi): New option.\n\t* gcc/doc/invoke.texi (-mloongson-mmi): Document.\n\ngcc/testsuite/\n\t* gcc.target/mips/loongson-shift-count-truncated-1.c\n\t(dg-options): Run under -mloongson-mmi option.\n\tInclude loongson-mmiintrin.h instead of loongson.h.\n\t* gcc.target/mips/loongson-simd.c: Likewise.\n\t* gcc.target/mips/mips.exp (mips_option_groups): Add\n\t-mloongson-mmi option.\n\t(mips-dg-options): Add mips_option_dependency options \"-mips16\" vs\n\t\"-mno-loongson-mmi\", \"-mmicromips\" vs \"-mno-loongson-mmi\",\n\t\"-msoft-float\" vs \"-mno-loongson-mmi\".\n\t(mips-dg-init): Add -mloongson-mmi option.\n\t* lib/target-supports.exp: Rename check_mips_loongson_hw_available\n\tto check_mips_loongson_mmi_hw_available.\n\tRename check_effective_target_mips_loongson_runtime to\n\tcheck_effective_target_mips_loongson_mmi_runtime.\n\t(check_effective_target_vect_int): Use mips_loongson_mmi instead\n\tof mips_loongson when check et-is-effective-target.\n\t(add_options_for_mips_loongson_mmi): New proc.\n\tRename check_effective_target_mips_loongson to\n\tcheck_effective_target_mips_loongson_mmi.\n\t(check_effective_target_vect_shift,\n\tcheck_effective_target_whole_vector_shift,\n\tcheck_effective_target_vect_no_int_min_max,\n\tcheck_effective_target_vect_no_align,\n\tcheck_effective_target_vect_short_mult,\n\tcheck_vect_support_and_set_flags):Use mips_loongson_mmi instead\n\tof mips_loongson when check et-is-effective-target.\n\nFrom-SVN: r265862", "tree": {"sha": "523ee57f754d7e641cf932c9910c5346b6481a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/523ee57f754d7e641cf932c9910c5346b6481a1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ae8bad7e558ce916c52e91a4e1879557f287bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae8bad7e558ce916c52e91a4e1879557f287bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae8bad7e558ce916c52e91a4e1879557f287bbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae8bad7e558ce916c52e91a4e1879557f287bbc/comments", "author": {"login": "ChenghuaXu", "id": 87753117, "node_id": "MDQ6VXNlcjg3NzUzMTE3", "avatar_url": "https://avatars.githubusercontent.com/u/87753117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChenghuaXu", "html_url": "https://github.com/ChenghuaXu", "followers_url": "https://api.github.com/users/ChenghuaXu/followers", "following_url": "https://api.github.com/users/ChenghuaXu/following{/other_user}", "gists_url": "https://api.github.com/users/ChenghuaXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChenghuaXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChenghuaXu/subscriptions", "organizations_url": "https://api.github.com/users/ChenghuaXu/orgs", "repos_url": "https://api.github.com/users/ChenghuaXu/repos", "events_url": "https://api.github.com/users/ChenghuaXu/events{/privacy}", "received_events_url": "https://api.github.com/users/ChenghuaXu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50258c4dcb13c1f3342e153d409416987e4ca100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50258c4dcb13c1f3342e153d409416987e4ca100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50258c4dcb13c1f3342e153d409416987e4ca100"}], "stats": {"total": 1734, "additions": 937, "deletions": 797}, "files": [{"sha": "c33ab7f13d68f5c7455bf461c9f1a1c0009de42e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -1,3 +1,34 @@\n+2018-11-07  Chenghua Xu  <paul.hua.gm@gmail.com>\n+\n+\t* config.gcc (extra_headers): Add loongson-mmiintrin.h.\n+\t* config/mips/loongson.md: Move to ...\n+\t* config/mips/loongson-mmi.md: here; Adjustment.\n+\t* config/mips/loongson.h: Move to ...\n+\tState as deprecated. Include loongson-mmiintrin.h for back\n+\tcompatibility and warning.\n+\t* config/mips/loongson-mmiintrin.h: ... here.\n+\t* config/mips/mips.c (mips_hard_regno_mode_ok_uncached,\n+\tmips_vector_mode_supported_p, AVAIL_NON_MIPS16): Use\n+\tTARGET_LOONGSON_MMI instead of TARGET_LOONGSON_VECTORS.\n+\t(mips_option_override): Make sure MMI use hard float;\n+\t(mips_shift_truncation_mask, mips_expand_vpc_loongson_even_odd,\n+\tmips_expand_vpc_loongson_pshufh, mips_expand_vpc_loongson_bcast,\n+\tmips_expand_vector_init): Use TARGET_LOONGSON_MMI instead of\n+\tTARGET_LOONGSON_VECTORS.\n+\t* gcc/config/mips/mips.h (TARGET_LOONGSON_VECTORS): Delete.\n+\t(TARGET_CPU_CPP_BUILTINS): Add __mips_loongson_mmi.\n+\t(MIPS_ASE_DSP_SPEC, MIPS_ASE_LOONGSON_MMI_SPEC): New.\n+\t(BASE_DRIVER_SELF_SPECS): march=loongson2e/2f/3a implies\n+\t-mloongson-mmi.\n+\t(SHIFT_COUNT_TRUNCATED): Use TARGET_LOONGSON_MMI instead of\n+\tTARGET_LOONGSON_VECTORS.\n+\t* gcc/config/mips/mips.md (MOVE64, MOVE128): Use\n+\tTARGET_LOONGSON_MMI instead of TARGET_LOONGSON_VECTORS.\n+\t(Loongson MMI patterns): Include loongson-mmi.md instead of\n+\tloongson.md.\n+\t* gcc/config/mips/mips.opt (-mloongson-mmi): New option.\n+\t* gcc/doc/invoke.texi (-mloongson-mmi): Document.\n+\n 2018-11-07  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/87906"}, {"sha": "7578ff03825e4f82690fbfb5d1a045323165adc4", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -458,7 +458,7 @@ microblaze*-*-*)\n mips*-*-*)\n \tcpu_type=mips\n \td_target_objs=\"mips-d.o\"\n-\textra_headers=\"loongson.h msa.h\"\n+\textra_headers=\"loongson.h loongson-mmiintrin.h msa.h\"\n \textra_objs=\"frame-header-opt.o\"\n \textra_options=\"${extra_options} g.opt fused-madd.opt mips/mips-tables.opt\"\n \t;;"}, {"sha": "b126e625ed5bd3514768cf62a89f7bc85ad899db", "filename": "gcc/config/mips/loongson-mmi.md", "status": "renamed", "additions": 77, "deletions": 78, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Floongson-mmi.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Floongson-mmi.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson-mmi.md?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -1,5 +1,4 @@\n-;; Machine description for Loongson-specific patterns, such as\n-;; ST Microelectronics Loongson-2E/2F etc.\n+;; Machine description for Loongson MultiMedia extensions Instructions (MMI).\n ;; Copyright (C) 2008-2018 Free Software Foundation, Inc.\n ;; Contributed by CodeSourcery.\n ;;\n@@ -102,7 +101,7 @@\n (define_expand \"mov<mode>\"\n   [(set (match_operand:VWHB 0)\n \t(match_operand:VWHB 1))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   if (mips_legitimize_move (<MODE>mode, operands[0], operands[1]))\n     DONE;\n@@ -112,7 +111,7 @@\n (define_insn \"mov<mode>_internal\"\n   [(set (match_operand:VWHB 0 \"nonimmediate_operand\" \"=m,f,d,f,  d,  m,  d\")\n \t(match_operand:VWHB 1 \"move_operand\"          \"f,m,f,dYG,dYG,dYG,m\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"move_type\" \"fpstore,fpload,mfc,mtc,move,store,load\")\n    (set_attr \"mode\" \"DI\")])\n@@ -122,7 +121,7 @@\n (define_expand \"vec_init<mode><unitmode>\"\n   [(set (match_operand:VWHB 0 \"register_operand\")\n \t(match_operand 1 \"\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   mips_expand_vector_init (operands[0], operands[1]);\n   DONE;\n@@ -135,7 +134,7 @@\n \t(unspec:VHB [(truncate:<V_inner>\n \t\t       (match_operand:DI 1 \"reg_or_0_operand\" \"Jd\"))]\n \t\t    UNSPEC_LOONGSON_VINIT))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"dmtc1\\t%z1,%0\"\n   [(set_attr \"move_type\" \"mtc\")\n    (set_attr \"mode\" \"DI\")])\n@@ -146,7 +145,7 @@\n \t(vec_concat:V2SI\n \t  (match_operand:SI 1 \"register_operand\" \"f\")\n \t  (match_operand:SI 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpcklwd\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -160,7 +159,7 @@\n \t  (match_operand:VWH 1 \"register_operand\" \"f\"))\n \t (ss_truncate:<V_squash>\n \t  (match_operand:VWH 2 \"register_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"packss<V_squash_double_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -172,7 +171,7 @@\n \t  (match_operand:VH 1 \"register_operand\" \"f\"))\n \t (us_truncate:<V_squash>\n \t  (match_operand:VH 2 \"register_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"packus<V_squash_double_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -181,7 +180,7 @@\n   [(set (match_operand:VWHB 0 \"register_operand\" \"=f\")\n         (plus:VWHB (match_operand:VWHB 1 \"register_operand\" \"f\")\n \t\t   (match_operand:VWHB 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"padd<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -196,7 +195,7 @@\n         (unspec:DI [(match_operand:DI 1 \"register_operand\" \"f\")\n \t\t    (match_operand:DI 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PADDD))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"paddd\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -205,7 +204,7 @@\n   [(set (match_operand:VHB 0 \"register_operand\" \"=f\")\n         (ss_plus:VHB (match_operand:VHB 1 \"register_operand\" \"f\")\n \t\t     (match_operand:VHB 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"padds<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -214,7 +213,7 @@\n   [(set (match_operand:VHB 0 \"register_operand\" \"=f\")\n         (us_plus:VHB (match_operand:VHB 1 \"register_operand\" \"f\")\n \t\t     (match_operand:VHB 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"paddus<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -224,7 +223,7 @@\n         (and:VWHBDI\n \t (not:VWHBDI (match_operand:VWHBDI 1 \"register_operand\" \"f\"))\n \t (match_operand:VWHBDI 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pandn\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -233,7 +232,7 @@\n   [(set (match_operand:VWHB 0 \"register_operand\" \"=f\")\n \t(and:VWHB (match_operand:VWHB 1 \"register_operand\" \"f\")\n \t\t  (match_operand:VWHB 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"and\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -242,7 +241,7 @@\n   [(set (match_operand:VWHB 0 \"register_operand\" \"=f\")\n \t(ior:VWHB (match_operand:VWHB 1 \"register_operand\" \"f\")\n \t\t  (match_operand:VWHB 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"or\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -251,7 +250,7 @@\n   [(set (match_operand:VWHB 0 \"register_operand\" \"=f\")\n \t(xor:VWHB (match_operand:VWHB 1 \"register_operand\" \"f\")\n \t\t  (match_operand:VWHB 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"xor\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -261,15 +260,15 @@\n \t(and:VWHB\n \t  (not:VWHB (match_operand:VWHB 1 \"register_operand\" \"f\"))\n \t  (not:VWHB (match_operand:VWHB 2 \"register_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"nor\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n ;; Logical NOT.\n (define_insn \"one_cmpl<mode>2\"\n   [(set (match_operand:VWHB 0 \"register_operand\" \"=f\")\n \t(not:VWHB (match_operand:VWHB 1 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"nor\\t%0,%1,%1\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -279,7 +278,7 @@\n         (unspec:VHB [(match_operand:VHB 1 \"register_operand\" \"f\")\n \t\t     (match_operand:VHB 2 \"register_operand\" \"f\")]\n \t\t    UNSPEC_LOONGSON_PAVG))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pavg<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -289,7 +288,7 @@\n         (unspec:VWHB [(match_operand:VWHB 1 \"register_operand\" \"f\")\n \t\t      (match_operand:VWHB 2 \"register_operand\" \"f\")]\n \t\t     UNSPEC_LOONGSON_PCMPEQ))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pcmpeq<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -299,7 +298,7 @@\n         (unspec:VWHB [(match_operand:VWHB 1 \"register_operand\" \"f\")\n \t\t      (match_operand:VWHB 2 \"register_operand\" \"f\")]\n \t\t     UNSPEC_LOONGSON_PCMPGT))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pcmpgt<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -309,7 +308,7 @@\n         (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"f\")\n \t\t      (match_operand:SI 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PEXTR))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pextrh\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -322,7 +321,7 @@\n \t    (match_operand:V4HI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 4) (const_int 1)\n \t\t     (const_int 2) (const_int 3)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pinsrh_0\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -334,7 +333,7 @@\n \t    (match_operand:V4HI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 2) (const_int 3)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pinsrh_1\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -346,7 +345,7 @@\n \t    (match_operand:V4HI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 4) (const_int 3)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pinsrh_2\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -358,7 +357,7 @@\n \t    (match_operand:V4HI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 4)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pinsrh_3\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -368,7 +367,7 @@\n \t\t      (match_operand:SI 2 \"register_operand\" \"f\")\n \t\t      (match_operand:SI 3 \"const_0_to_3_operand\" \"\")]\n \t\t     UNSPEC_LOONGSON_PINSRH))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pinsrh_%3\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -378,7 +377,7 @@\n \t\t      (match_operand:HI 2 \"register_operand\" \"f\")\n \t\t      (match_operand:SI 3 \"const_0_to_3_operand\" \"\")]\n \t\t     UNSPEC_LOONGSON_PINSRH))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   rtx ext = gen_reg_rtx (SImode);\n   emit_move_insn (ext, gen_lowpart (SImode, operands[2]));\n@@ -391,7 +390,7 @@\n         (unspec:V2SI [(match_operand:V4HI 1 \"register_operand\" \"f\")\n \t\t      (match_operand:V4HI 2 \"register_operand\" \"f\")]\n \t\t     UNSPEC_LOONGSON_PMADD))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pmaddhw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -400,7 +399,7 @@\n    (match_operand:V4HI 1 \"register_operand\" \"\")\n    (match_operand:V4HI 2 \"register_operand\" \"\")\n    (match_operand:V2SI 3 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   rtx t = gen_reg_rtx (V2SImode);\n   emit_insn (gen_loongson_pmaddhw (t, operands[1], operands[2]));\n@@ -413,15 +412,15 @@\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=f\")\n         (smax:V4HI (match_operand:V4HI 1 \"register_operand\" \"f\")\n \t\t   (match_operand:V4HI 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pmaxsh\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n (define_expand \"smax<mode>3\"\n   [(match_operand:VWB 0 \"register_operand\" \"\")\n    (match_operand:VWB 1 \"register_operand\" \"\")\n    (match_operand:VWB 2 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   mips_expand_vec_minmax (operands[0], operands[1], operands[2],\n \t\t\t  gen_loongson_pcmpgt<V_suffix>, false);\n@@ -433,7 +432,7 @@\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=f\")\n         (umax:V8QI (match_operand:V8QI 1 \"register_operand\" \"f\")\n \t\t   (match_operand:V8QI 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pmaxub\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -442,15 +441,15 @@\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=f\")\n         (smin:V4HI (match_operand:V4HI 1 \"register_operand\" \"f\")\n \t\t   (match_operand:V4HI 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pminsh\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n (define_expand \"smin<mode>3\"\n   [(match_operand:VWB 0 \"register_operand\" \"\")\n    (match_operand:VWB 1 \"register_operand\" \"\")\n    (match_operand:VWB 2 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   mips_expand_vec_minmax (operands[0], operands[1], operands[2],\n \t\t\t  gen_loongson_pcmpgt<V_suffix>, true);\n@@ -462,7 +461,7 @@\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=f\")\n         (umin:V8QI (match_operand:V8QI 1 \"register_operand\" \"f\")\n \t\t   (match_operand:V8QI 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pminub\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -471,7 +470,7 @@\n   [(set (match_operand:VB 0 \"register_operand\" \"=f\")\n         (unspec:VB [(match_operand:VB 1 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PMOVMSK))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pmovmsk<V_suffix>\\t%0,%1\"\n   [(set_attr \"type\" \"fabs\")])\n \n@@ -481,7 +480,7 @@\n         (unspec:VH [(match_operand:VH 1 \"register_operand\" \"f\")\n \t\t    (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PMULHU))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pmulhu<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -491,7 +490,7 @@\n         (unspec:VH [(match_operand:VH 1 \"register_operand\" \"f\")\n \t\t    (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PMULH))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pmulh<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -500,7 +499,7 @@\n   [(set (match_operand:VH 0 \"register_operand\" \"=f\")\n         (mult:VH (match_operand:VH 1 \"register_operand\" \"f\")\n                  (match_operand:VH 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pmull<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -510,7 +509,7 @@\n         (unspec:DI [(match_operand:VW 1 \"register_operand\" \"f\")\n \t\t    (match_operand:VW 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PMULU))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pmulu<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -520,7 +519,7 @@\n         (unspec:VB [(match_operand:VB 1 \"register_operand\" \"f\")\n \t\t    (match_operand:VB 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PASUBUB))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pasubub\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -529,15 +528,15 @@\n   [(set (match_operand:<V_stretch_half> 0 \"register_operand\" \"=f\")\n         (unspec:<V_stretch_half> [(match_operand:VB 1 \"register_operand\" \"f\")]\n \t\t\t\t UNSPEC_LOONGSON_BIADD))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"biadd\\t%0,%1\"\n   [(set_attr \"type\" \"fabs\")])\n \n (define_insn \"reduc_uplus_v8qi\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=f\")\n \t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"f\")]\n \t\t     UNSPEC_LOONGSON_BIADD))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"biadd\\t%0,%1\"\n   [(set_attr \"type\" \"fabs\")])\n \n@@ -547,7 +546,7 @@\n         (unspec:<V_stretch_half> [(match_operand:VB 1 \"register_operand\" \"f\")\n \t\t\t\t  (match_operand:VB 2 \"register_operand\" \"f\")]\n \t\t\t\t UNSPEC_LOONGSON_PSADBH))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pasubub\\t%0,%1,%2;biadd\\t%0,%0\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -557,7 +556,7 @@\n         (unspec:VH [(match_operand:VH 1 \"register_operand\" \"f\")\n \t\t    (match_operand:SI 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PSHUFH))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"pshufh\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")])\n \n@@ -566,7 +565,7 @@\n   [(set (match_operand:VWH 0 \"register_operand\" \"=f\")\n         (ashift:VWH (match_operand:VWH 1 \"register_operand\" \"f\")\n \t\t    (match_operand:SI 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"psll<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -575,7 +574,7 @@\n   [(set (match_operand:VWH 0 \"register_operand\" \"=f\")\n         (ashiftrt:VWH (match_operand:VWH 1 \"register_operand\" \"f\")\n \t\t      (match_operand:SI 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"psra<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -584,7 +583,7 @@\n   [(set (match_operand:VWH 0 \"register_operand\" \"=f\")\n         (lshiftrt:VWH (match_operand:VWH 1 \"register_operand\" \"f\")\n \t\t      (match_operand:SI 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"psrl<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -593,7 +592,7 @@\n   [(set (match_operand:VWHB 0 \"register_operand\" \"=f\")\n         (minus:VWHB (match_operand:VWHB 1 \"register_operand\" \"f\")\n \t\t    (match_operand:VWHB 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"psub<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -606,7 +605,7 @@\n         (unspec:DI [(match_operand:DI 1 \"register_operand\" \"f\")\n \t\t    (match_operand:DI 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PSUBD))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"psubd\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -615,7 +614,7 @@\n   [(set (match_operand:VHB 0 \"register_operand\" \"=f\")\n         (ss_minus:VHB (match_operand:VHB 1 \"register_operand\" \"f\")\n \t\t      (match_operand:VHB 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"psubs<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -624,7 +623,7 @@\n   [(set (match_operand:VHB 0 \"register_operand\" \"=f\")\n         (us_minus:VHB (match_operand:VHB 1 \"register_operand\" \"f\")\n \t\t      (match_operand:VHB 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"psubus<V_suffix>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")])\n \n@@ -639,7 +638,7 @@\n \t\t     (const_int 5) (const_int 13)\n \t\t     (const_int 6) (const_int 14)\n \t\t     (const_int 7) (const_int 15)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpckhbh\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -651,7 +650,7 @@\n \t    (match_operand:V4HI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 2) (const_int 6)\n \t\t     (const_int 3) (const_int 7)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpckhhw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -665,7 +664,7 @@\n \t\t     (const_int 12) (const_int 13)\n \t\t     (const_int 6)  (const_int 7)\n \t\t     (const_int 14) (const_int 15)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpckhhw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -676,7 +675,7 @@\n \t    (match_operand:V2SI 1 \"register_operand\" \"f\")\n \t    (match_operand:V2SI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 1) (const_int 3)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpckhwd\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -690,7 +689,7 @@\n \t\t     (const_int 6) (const_int 7)\n \t\t     (const_int 12) (const_int 13)\n \t\t     (const_int 14) (const_int 15)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpckhwd\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -702,7 +701,7 @@\n \t    (match_operand:V4HI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 2) (const_int 3)\n \t\t     (const_int 6) (const_int 7)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpckhwd\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -717,7 +716,7 @@\n \t\t     (const_int 1) (const_int 9)\n \t\t     (const_int 2) (const_int 10)\n \t\t     (const_int 3) (const_int 11)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpcklbh\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -729,7 +728,7 @@\n \t    (match_operand:V4HI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 1) (const_int 5)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpcklhw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -743,7 +742,7 @@\n \t\t     (const_int 8)  (const_int 9)\n \t\t     (const_int 2)  (const_int 3)\n \t\t     (const_int 10) (const_int 11)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpcklhw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")])\n \n@@ -754,7 +753,7 @@\n \t    (match_operand:V2SI 1 \"register_operand\" \"f\")\n \t    (match_operand:V2SI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 0) (const_int 2)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpcklwd\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -768,7 +767,7 @@\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 8) (const_int 9)\n \t\t     (const_int 10) (const_int 11)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpcklwd\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -780,14 +779,14 @@\n \t    (match_operand:V4HI 2 \"register_operand\" \"f\"))\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 4) (const_int 5)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"punpcklwd\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n (define_expand \"vec_unpacks_lo_<mode>\"\n   [(match_operand:<V_stretch_half> 0 \"register_operand\" \"\")\n    (match_operand:VHB 1 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   mips_expand_vec_unpack (operands, false, false);\n   DONE;\n@@ -796,7 +795,7 @@\n (define_expand \"vec_unpacks_hi_<mode>\"\n   [(match_operand:<V_stretch_half> 0 \"register_operand\" \"\")\n    (match_operand:VHB 1 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   mips_expand_vec_unpack (operands, false, true);\n   DONE;\n@@ -805,7 +804,7 @@\n (define_expand \"vec_unpacku_lo_<mode>\"\n   [(match_operand:<V_stretch_half> 0 \"register_operand\" \"\")\n    (match_operand:VHB 1 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   mips_expand_vec_unpack (operands, true, false);\n   DONE;\n@@ -814,7 +813,7 @@\n (define_expand \"vec_unpacku_hi_<mode>\"\n   [(match_operand:<V_stretch_half> 0 \"register_operand\" \"\")\n    (match_operand:VHB 1 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   mips_expand_vec_unpack (operands, true, true);\n   DONE;\n@@ -826,7 +825,7 @@\n         (unspec:VWHBDI [(match_operand:VWHBDI 1 \"register_operand\" \"f\")\n                         (match_operand:SI 2 \"register_operand\" \"f\")]\n                        UNSPEC_LOONGSON_DSLL))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"dsll\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -835,7 +834,7 @@\n         (unspec:VWHBDI [(match_operand:VWHBDI 1 \"register_operand\" \"f\")\n                         (match_operand:SI 2 \"register_operand\" \"f\")]\n                        UNSPEC_LOONGSON_DSRL))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"dsrl\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcvt\")])\n \n@@ -844,14 +843,14 @@\n         (vec_select:<V_inner>\n           (match_operand:VWHB 1 \"register_operand\" \"f\")\n           (parallel [(const_int 0)])))]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n   \"mfc1\\t%0,%1\"\n   [(set_attr \"type\" \"mfc\")])\n \n (define_expand \"reduc_plus_scal_<mode>\"\n   [(match_operand:<V_inner> 0 \"register_operand\" \"\")\n    (match_operand:VWHB 1 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   rtx tmp = gen_reg_rtx (GET_MODE (operands[1]));\n   mips_expand_vec_reduc (tmp, operands[1], gen_add<mode>3);\n@@ -862,7 +861,7 @@\n (define_expand \"reduc_smax_scal_<mode>\"\n   [(match_operand:<V_inner> 0 \"register_operand\" \"\")\n    (match_operand:VWHB 1 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   rtx tmp = gen_reg_rtx (GET_MODE (operands[1]));\n   mips_expand_vec_reduc (tmp, operands[1], gen_smax<mode>3);\n@@ -873,7 +872,7 @@\n (define_expand \"reduc_smin_scal_<mode>\"\n   [(match_operand:<V_inner> 0 \"register_operand\" \"\")\n    (match_operand:VWHB 1 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   rtx tmp = gen_reg_rtx (GET_MODE (operands[1]));\n   mips_expand_vec_reduc (tmp, operands[1], gen_smin<mode>3);\n@@ -884,7 +883,7 @@\n (define_expand \"reduc_umax_scal_<mode>\"\n   [(match_operand:<V_inner> 0 \"register_operand\" \"\")\n    (match_operand:VB 1 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   rtx tmp = gen_reg_rtx (GET_MODE (operands[1]));\n   mips_expand_vec_reduc (tmp, operands[1], gen_umax<mode>3);\n@@ -895,7 +894,7 @@\n (define_expand \"reduc_umin_scal_<mode>\"\n   [(match_operand:<V_inner> 0 \"register_operand\" \"\")\n    (match_operand:VB 1 \"register_operand\" \"\")]\n-  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n+  \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\"\n {\n   rtx tmp = gen_reg_rtx (GET_MODE (operands[1]));\n   mips_expand_vec_reduc (tmp, operands[1], gen_umin<mode>3);", "previous_filename": "gcc/config/mips/loongson.md"}, {"sha": "6f35fb5b8421e550f50e6a4fb3e5560094198f28", "filename": "gcc/config/mips/loongson-mmiintrin.h", "status": "added", "additions": 691, "deletions": 0, "changes": 691, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Floongson-mmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Floongson-mmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson-mmiintrin.h?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -0,0 +1,691 @@\n+/* Intrinsics for Loongson MultiMedia extension Instructions operations.\n+\n+   Copyright (C) 2008-2018 Free Software Foundation, Inc.\n+   Contributed by CodeSourcery.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _GCC_LOONGSON_MMIINTRIN_H\n+#define _GCC_LOONGSON_MMIINTRIN_H\n+\n+#if !defined(__mips_loongson_mmi)\n+# error \"You must select -mloongson-mmi or -march=loongson2e/2f/3a to use\n+\t loongson-mmiintrin.h\"\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#include <stdint.h>\n+\n+/* Vectors of unsigned bytes, halfwords and words.  */\n+typedef uint8_t uint8x8_t __attribute__((vector_size (8)));\n+typedef uint16_t uint16x4_t __attribute__((vector_size (8)));\n+typedef uint32_t uint32x2_t __attribute__((vector_size (8)));\n+\n+/* Vectors of signed bytes, halfwords and words.  */\n+typedef int8_t int8x8_t __attribute__((vector_size (8)));\n+typedef int16_t int16x4_t __attribute__((vector_size (8)));\n+typedef int32_t int32x2_t __attribute__((vector_size (8)));\n+\n+/* SIMD intrinsics.\n+   Unless otherwise noted, calls to the functions below will expand into\n+   precisely one machine instruction, modulo any moves required to\n+   satisfy register allocation constraints.  */\n+\n+/* Pack with signed saturation.  */\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+packsswh (int32x2_t s, int32x2_t t)\n+{\n+  return __builtin_loongson_packsswh (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+packsshb (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_packsshb (s, t);\n+}\n+\n+/* Pack with unsigned saturation.  */\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+packushb (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_packushb (s, t);\n+}\n+\n+/* Vector addition, treating overflow by wraparound.  */\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+paddw_u (uint32x2_t s, uint32x2_t t)\n+{\n+  return __builtin_loongson_paddw_u (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+paddh_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_paddh_u (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+paddb_u (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_paddb_u (s, t);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+paddw_s (int32x2_t s, int32x2_t t)\n+{\n+  return __builtin_loongson_paddw_s (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+paddh_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_paddh_s (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+paddb_s (int8x8_t s, int8x8_t t)\n+{\n+  return __builtin_loongson_paddb_s (s, t);\n+}\n+\n+/* Addition of doubleword integers, treating overflow by wraparound.  */\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+paddd_u (uint64_t s, uint64_t t)\n+{\n+  return __builtin_loongson_paddd_u (s, t);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+paddd_s (int64_t s, int64_t t)\n+{\n+  return __builtin_loongson_paddd_s (s, t);\n+}\n+\n+/* Vector addition, treating overflow by signed saturation.  */\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+paddsh (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_paddsh (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+paddsb (int8x8_t s, int8x8_t t)\n+{\n+  return __builtin_loongson_paddsb (s, t);\n+}\n+\n+/* Vector addition, treating overflow by unsigned saturation.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+paddush (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_paddush (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+paddusb (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_paddusb (s, t);\n+}\n+\n+/* Logical AND NOT.  */\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+pandn_ud (uint64_t s, uint64_t t)\n+{\n+  return __builtin_loongson_pandn_ud (s, t);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+pandn_uw (uint32x2_t s, uint32x2_t t)\n+{\n+  return __builtin_loongson_pandn_uw (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pandn_uh (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_pandn_uh (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+pandn_ub (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_pandn_ub (s, t);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+pandn_sd (int64_t s, int64_t t)\n+{\n+  return __builtin_loongson_pandn_sd (s, t);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+pandn_sw (int32x2_t s, int32x2_t t)\n+{\n+  return __builtin_loongson_pandn_sw (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pandn_sh (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pandn_sh (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+pandn_sb (int8x8_t s, int8x8_t t)\n+{\n+  return __builtin_loongson_pandn_sb (s, t);\n+}\n+\n+/* Average.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pavgh (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_pavgh (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+pavgb (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_pavgb (s, t);\n+}\n+\n+/* Equality test.  */\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+pcmpeqw_u (uint32x2_t s, uint32x2_t t)\n+{\n+  return __builtin_loongson_pcmpeqw_u (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pcmpeqh_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_pcmpeqh_u (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+pcmpeqb_u (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_pcmpeqb_u (s, t);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+pcmpeqw_s (int32x2_t s, int32x2_t t)\n+{\n+  return __builtin_loongson_pcmpeqw_s (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pcmpeqh_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pcmpeqh_s (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+pcmpeqb_s (int8x8_t s, int8x8_t t)\n+{\n+  return __builtin_loongson_pcmpeqb_s (s, t);\n+}\n+\n+/* Greater-than test.  */\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+pcmpgtw_u (uint32x2_t s, uint32x2_t t)\n+{\n+  return __builtin_loongson_pcmpgtw_u (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pcmpgth_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_pcmpgth_u (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+pcmpgtb_u (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_pcmpgtb_u (s, t);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+pcmpgtw_s (int32x2_t s, int32x2_t t)\n+{\n+  return __builtin_loongson_pcmpgtw_s (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pcmpgth_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pcmpgth_s (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+pcmpgtb_s (int8x8_t s, int8x8_t t)\n+{\n+  return __builtin_loongson_pcmpgtb_s (s, t);\n+}\n+\n+/* Extract halfword.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pextrh_u (uint16x4_t s, int field /* 0--3.  */)\n+{\n+  return __builtin_loongson_pextrh_u (s, field);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pextrh_s (int16x4_t s, int field /* 0--3.  */)\n+{\n+  return __builtin_loongson_pextrh_s (s, field);\n+}\n+\n+/* Insert halfword.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pinsrh_0_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_pinsrh_0_u (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pinsrh_1_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_pinsrh_1_u (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pinsrh_2_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_pinsrh_2_u (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pinsrh_3_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_pinsrh_3_u (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pinsrh_0_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pinsrh_0_s (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pinsrh_1_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pinsrh_1_s (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pinsrh_2_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pinsrh_2_s (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pinsrh_3_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pinsrh_3_s (s, t);\n+}\n+\n+/* Multiply and add.  */\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+pmaddhw (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pmaddhw (s, t);\n+}\n+\n+/* Maximum of signed halfwords.  */\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pmaxsh (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pmaxsh (s, t);\n+}\n+\n+/* Maximum of unsigned bytes.  */\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+pmaxub (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_pmaxub (s, t);\n+}\n+\n+/* Minimum of signed halfwords.  */\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pminsh (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pminsh (s, t);\n+}\n+\n+/* Minimum of unsigned bytes.  */\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+pminub (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_pminub (s, t);\n+}\n+\n+/* Move byte mask.  */\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+pmovmskb_u (uint8x8_t s)\n+{\n+  return __builtin_loongson_pmovmskb_u (s);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+pmovmskb_s (int8x8_t s)\n+{\n+  return __builtin_loongson_pmovmskb_s (s);\n+}\n+\n+/* Multiply unsigned integers and store high result.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pmulhuh (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_pmulhuh (s, t);\n+}\n+\n+/* Multiply signed integers and store high result.  */\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pmulhh (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pmulhh (s, t);\n+}\n+\n+/* Multiply signed integers and store low result.  */\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pmullh (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_pmullh (s, t);\n+}\n+\n+/* Multiply unsigned word integers.  */\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+pmuluw (uint32x2_t s, uint32x2_t t)\n+{\n+  return __builtin_loongson_pmuluw (s, t);\n+}\n+\n+/* Absolute difference.  */\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+pasubub (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_pasubub (s, t);\n+}\n+\n+/* Sum of unsigned byte integers.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+biadd (uint8x8_t s)\n+{\n+  return __builtin_loongson_biadd (s);\n+}\n+\n+/* Sum of absolute differences.\n+   Note that this intrinsic expands into two machine instructions:\n+   PASUBUB followed by BIADD.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+psadbh (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_psadbh (s, t);\n+}\n+\n+/* Shuffle halfwords.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+pshufh_u (uint16x4_t dest, uint16x4_t s, uint8_t order)\n+{\n+  return __builtin_loongson_pshufh_u (s, order);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+pshufh_s (int16x4_t dest, int16x4_t s, uint8_t order)\n+{\n+  return __builtin_loongson_pshufh_s (s, order);\n+}\n+\n+/* Shift left logical.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+psllh_u (uint16x4_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psllh_u (s, amount);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+psllh_s (int16x4_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psllh_s (s, amount);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+psllw_u (uint32x2_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psllw_u (s, amount);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+psllw_s (int32x2_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psllw_s (s, amount);\n+}\n+\n+/* Shift right logical.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+psrlh_u (uint16x4_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psrlh_u (s, amount);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+psrlh_s (int16x4_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psrlh_s (s, amount);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+psrlw_u (uint32x2_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psrlw_u (s, amount);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+psrlw_s (int32x2_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psrlw_s (s, amount);\n+}\n+\n+/* Shift right arithmetic.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+psrah_u (uint16x4_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psrah_u (s, amount);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+psrah_s (int16x4_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psrah_s (s, amount);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+psraw_u (uint32x2_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psraw_u (s, amount);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+psraw_s (int32x2_t s, uint8_t amount)\n+{\n+  return __builtin_loongson_psraw_s (s, amount);\n+}\n+\n+/* Vector subtraction, treating overflow by wraparound.  */\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+psubw_u (uint32x2_t s, uint32x2_t t)\n+{\n+  return __builtin_loongson_psubw_u (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+psubh_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_psubh_u (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+psubb_u (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_psubb_u (s, t);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+psubw_s (int32x2_t s, int32x2_t t)\n+{\n+  return __builtin_loongson_psubw_s (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+psubh_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_psubh_s (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+psubb_s (int8x8_t s, int8x8_t t)\n+{\n+  return __builtin_loongson_psubb_s (s, t);\n+}\n+\n+/* Subtraction of doubleword integers, treating overflow by wraparound.  */\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+psubd_u (uint64_t s, uint64_t t)\n+{\n+  return __builtin_loongson_psubd_u (s, t);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+psubd_s (int64_t s, int64_t t)\n+{\n+  return __builtin_loongson_psubd_s (s, t);\n+}\n+\n+/* Vector subtraction, treating overflow by signed saturation.  */\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+psubsh (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_psubsh (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+psubsb (int8x8_t s, int8x8_t t)\n+{\n+  return __builtin_loongson_psubsb (s, t);\n+}\n+\n+/* Vector subtraction, treating overflow by unsigned saturation.  */\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+psubush (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_psubush (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+psubusb (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_psubusb (s, t);\n+}\n+\n+/* Unpack high data.  */\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+punpckhwd_u (uint32x2_t s, uint32x2_t t)\n+{\n+  return __builtin_loongson_punpckhwd_u (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+punpckhhw_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_punpckhhw_u (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+punpckhbh_u (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_punpckhbh_u (s, t);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+punpckhwd_s (int32x2_t s, int32x2_t t)\n+{\n+  return __builtin_loongson_punpckhwd_s (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+punpckhhw_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_punpckhhw_s (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+punpckhbh_s (int8x8_t s, int8x8_t t)\n+{\n+  return __builtin_loongson_punpckhbh_s (s, t);\n+}\n+\n+/* Unpack low data.  */\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+punpcklwd_u (uint32x2_t s, uint32x2_t t)\n+{\n+  return __builtin_loongson_punpcklwd_u (s, t);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+punpcklhw_u (uint16x4_t s, uint16x4_t t)\n+{\n+  return __builtin_loongson_punpcklhw_u (s, t);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+punpcklbh_u (uint8x8_t s, uint8x8_t t)\n+{\n+  return __builtin_loongson_punpcklbh_u (s, t);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+punpcklwd_s (int32x2_t s, int32x2_t t)\n+{\n+  return __builtin_loongson_punpcklwd_s (s, t);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+punpcklhw_s (int16x4_t s, int16x4_t t)\n+{\n+  return __builtin_loongson_punpcklhw_s (s, t);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+punpcklbh_s (int8x8_t s, int8x8_t t)\n+{\n+  return __builtin_loongson_punpcklbh_s (s, t);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"}, {"sha": "3880e4cb77fb6abe2655b87d3ef23548256183c9", "filename": "gcc/config/mips/loongson.h", "status": "modified", "additions": 6, "deletions": 663, "changes": 669, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Floongson.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Floongson.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson.h?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -1,4 +1,4 @@\n-/* Intrinsics for ST Microelectronics Loongson-2E/2F SIMD operations.\n+/* Intrinsics for Loongson MultiMedia extension Instructions operations.\n \n    Copyright (C) 2008-2018 Free Software Foundation, Inc.\n    Contributed by CodeSourcery.\n@@ -24,667 +24,10 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef _GCC_LOONGSON_H\n-#define _GCC_LOONGSON_H\n-\n-#if !defined(__mips_loongson_vector_rev)\n-# error \"You must select -march=loongson2e or -march=loongson2f to use loongson.h\"\n-#endif\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n-#include <stdint.h>\n-\n-/* Vectors of unsigned bytes, halfwords and words.  */\n-typedef uint8_t uint8x8_t __attribute__((vector_size (8)));\n-typedef uint16_t uint16x4_t __attribute__((vector_size (8)));\n-typedef uint32_t uint32x2_t __attribute__((vector_size (8)));\n-\n-/* Vectors of signed bytes, halfwords and words.  */\n-typedef int8_t int8x8_t __attribute__((vector_size (8)));\n-typedef int16_t int16x4_t __attribute__((vector_size (8)));\n-typedef int32_t int32x2_t __attribute__((vector_size (8)));\n-\n-/* SIMD intrinsics.\n-   Unless otherwise noted, calls to the functions below will expand into\n-   precisely one machine instruction, modulo any moves required to\n-   satisfy register allocation constraints.  */\n-\n-/* Pack with signed saturation.  */\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-packsswh (int32x2_t s, int32x2_t t)\n-{\n-  return __builtin_loongson_packsswh (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-packsshb (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_packsshb (s, t);\n-}\n-\n-/* Pack with unsigned saturation.  */\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-packushb (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_packushb (s, t);\n-}\n-\n-/* Vector addition, treating overflow by wraparound.  */\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-paddw_u (uint32x2_t s, uint32x2_t t)\n-{\n-  return __builtin_loongson_paddw_u (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-paddh_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_paddh_u (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-paddb_u (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_paddb_u (s, t);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-paddw_s (int32x2_t s, int32x2_t t)\n-{\n-  return __builtin_loongson_paddw_s (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-paddh_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_paddh_s (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-paddb_s (int8x8_t s, int8x8_t t)\n-{\n-  return __builtin_loongson_paddb_s (s, t);\n-}\n-\n-/* Addition of doubleword integers, treating overflow by wraparound.  */\n-__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n-paddd_u (uint64_t s, uint64_t t)\n-{\n-  return __builtin_loongson_paddd_u (s, t);\n-}\n-\n-__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n-paddd_s (int64_t s, int64_t t)\n-{\n-  return __builtin_loongson_paddd_s (s, t);\n-}\n-\n-/* Vector addition, treating overflow by signed saturation.  */\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-paddsh (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_paddsh (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-paddsb (int8x8_t s, int8x8_t t)\n-{\n-  return __builtin_loongson_paddsb (s, t);\n-}\n-\n-/* Vector addition, treating overflow by unsigned saturation.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-paddush (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_paddush (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-paddusb (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_paddusb (s, t);\n-}\n-\n-/* Logical AND NOT.  */\n-__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n-pandn_ud (uint64_t s, uint64_t t)\n-{\n-  return __builtin_loongson_pandn_ud (s, t);\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-pandn_uw (uint32x2_t s, uint32x2_t t)\n-{\n-  return __builtin_loongson_pandn_uw (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pandn_uh (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_pandn_uh (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-pandn_ub (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_pandn_ub (s, t);\n-}\n-\n-__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n-pandn_sd (int64_t s, int64_t t)\n-{\n-  return __builtin_loongson_pandn_sd (s, t);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-pandn_sw (int32x2_t s, int32x2_t t)\n-{\n-  return __builtin_loongson_pandn_sw (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pandn_sh (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pandn_sh (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-pandn_sb (int8x8_t s, int8x8_t t)\n-{\n-  return __builtin_loongson_pandn_sb (s, t);\n-}\n-\n-/* Average.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pavgh (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_pavgh (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-pavgb (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_pavgb (s, t);\n-}\n-\n-/* Equality test.  */\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-pcmpeqw_u (uint32x2_t s, uint32x2_t t)\n-{\n-  return __builtin_loongson_pcmpeqw_u (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pcmpeqh_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_pcmpeqh_u (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-pcmpeqb_u (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_pcmpeqb_u (s, t);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-pcmpeqw_s (int32x2_t s, int32x2_t t)\n-{\n-  return __builtin_loongson_pcmpeqw_s (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pcmpeqh_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pcmpeqh_s (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-pcmpeqb_s (int8x8_t s, int8x8_t t)\n-{\n-  return __builtin_loongson_pcmpeqb_s (s, t);\n-}\n-\n-/* Greater-than test.  */\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-pcmpgtw_u (uint32x2_t s, uint32x2_t t)\n-{\n-  return __builtin_loongson_pcmpgtw_u (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pcmpgth_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_pcmpgth_u (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-pcmpgtb_u (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_pcmpgtb_u (s, t);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-pcmpgtw_s (int32x2_t s, int32x2_t t)\n-{\n-  return __builtin_loongson_pcmpgtw_s (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pcmpgth_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pcmpgth_s (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-pcmpgtb_s (int8x8_t s, int8x8_t t)\n-{\n-  return __builtin_loongson_pcmpgtb_s (s, t);\n-}\n-\n-/* Extract halfword.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pextrh_u (uint16x4_t s, int field /* 0--3 */)\n-{\n-  return __builtin_loongson_pextrh_u (s, field);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pextrh_s (int16x4_t s, int field /* 0--3 */)\n-{\n-  return __builtin_loongson_pextrh_s (s, field);\n-}\n-\n-/* Insert halfword.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pinsrh_0_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_pinsrh_0_u (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pinsrh_1_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_pinsrh_1_u (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pinsrh_2_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_pinsrh_2_u (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pinsrh_3_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_pinsrh_3_u (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pinsrh_0_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pinsrh_0_s (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pinsrh_1_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pinsrh_1_s (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pinsrh_2_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pinsrh_2_s (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pinsrh_3_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pinsrh_3_s (s, t);\n-}\n-\n-/* Multiply and add.  */\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-pmaddhw (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pmaddhw (s, t);\n-}\n-\n-/* Maximum of signed halfwords.  */\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pmaxsh (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pmaxsh (s, t);\n-}\n-\n-/* Maximum of unsigned bytes.  */\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-pmaxub (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_pmaxub (s, t);\n-}\n-\n-/* Minimum of signed halfwords.  */\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pminsh (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pminsh (s, t);\n-}\n-\n-/* Minimum of unsigned bytes.  */\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-pminub (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_pminub (s, t);\n-}\n-\n-/* Move byte mask.  */\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-pmovmskb_u (uint8x8_t s)\n-{\n-  return __builtin_loongson_pmovmskb_u (s);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-pmovmskb_s (int8x8_t s)\n-{\n-  return __builtin_loongson_pmovmskb_s (s);\n-}\n-\n-/* Multiply unsigned integers and store high result.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pmulhuh (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_pmulhuh (s, t);\n-}\n-\n-/* Multiply signed integers and store high result.  */\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pmulhh (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pmulhh (s, t);\n-}\n-\n-/* Multiply signed integers and store low result.  */\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pmullh (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_pmullh (s, t);\n-}\n-\n-/* Multiply unsigned word integers.  */\n-__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n-pmuluw (uint32x2_t s, uint32x2_t t)\n-{\n-  return __builtin_loongson_pmuluw (s, t);\n-}\n-\n-/* Absolute difference.  */\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-pasubub (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_pasubub (s, t);\n-}\n-\n-/* Sum of unsigned byte integers.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-biadd (uint8x8_t s)\n-{\n-  return __builtin_loongson_biadd (s);\n-}\n-\n-/* Sum of absolute differences.\n-   Note that this intrinsic expands into two machine instructions:\n-   PASUBUB followed by BIADD.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-psadbh (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_psadbh (s, t);\n-}\n-\n-/* Shuffle halfwords.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-pshufh_u (uint16x4_t dest, uint16x4_t s, uint8_t order)\n-{\n-  return __builtin_loongson_pshufh_u (s, order);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-pshufh_s (int16x4_t dest, int16x4_t s, uint8_t order)\n-{\n-  return __builtin_loongson_pshufh_s (s, order);\n-}\n-\n-/* Shift left logical.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-psllh_u (uint16x4_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psllh_u (s, amount);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-psllh_s (int16x4_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psllh_s (s, amount);\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-psllw_u (uint32x2_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psllw_u (s, amount);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-psllw_s (int32x2_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psllw_s (s, amount);\n-}\n-\n-/* Shift right logical.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-psrlh_u (uint16x4_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psrlh_u (s, amount);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-psrlh_s (int16x4_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psrlh_s (s, amount);\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-psrlw_u (uint32x2_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psrlw_u (s, amount);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-psrlw_s (int32x2_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psrlw_s (s, amount);\n-}\n-\n-/* Shift right arithmetic.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-psrah_u (uint16x4_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psrah_u (s, amount);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-psrah_s (int16x4_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psrah_s (s, amount);\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-psraw_u (uint32x2_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psraw_u (s, amount);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-psraw_s (int32x2_t s, uint8_t amount)\n-{\n-  return __builtin_loongson_psraw_s (s, amount);\n-}\n-\n-/* Vector subtraction, treating overflow by wraparound.  */\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-psubw_u (uint32x2_t s, uint32x2_t t)\n-{\n-  return __builtin_loongson_psubw_u (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-psubh_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_psubh_u (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-psubb_u (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_psubb_u (s, t);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-psubw_s (int32x2_t s, int32x2_t t)\n-{\n-  return __builtin_loongson_psubw_s (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-psubh_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_psubh_s (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-psubb_s (int8x8_t s, int8x8_t t)\n-{\n-  return __builtin_loongson_psubb_s (s, t);\n-}\n-\n-/* Subtraction of doubleword integers, treating overflow by wraparound.  */\n-__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n-psubd_u (uint64_t s, uint64_t t)\n-{\n-  return __builtin_loongson_psubd_u (s, t);\n-}\n-\n-__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n-psubd_s (int64_t s, int64_t t)\n-{\n-  return __builtin_loongson_psubd_s (s, t);\n-}\n-\n-/* Vector subtraction, treating overflow by signed saturation.  */\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-psubsh (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_psubsh (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-psubsb (int8x8_t s, int8x8_t t)\n-{\n-  return __builtin_loongson_psubsb (s, t);\n-}\n-\n-/* Vector subtraction, treating overflow by unsigned saturation.  */\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-psubush (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_psubush (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-psubusb (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_psubusb (s, t);\n-}\n-\n-/* Unpack high data.  */\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-punpckhwd_u (uint32x2_t s, uint32x2_t t)\n-{\n-  return __builtin_loongson_punpckhwd_u (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-punpckhhw_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_punpckhhw_u (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-punpckhbh_u (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_punpckhbh_u (s, t);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-punpckhwd_s (int32x2_t s, int32x2_t t)\n-{\n-  return __builtin_loongson_punpckhwd_s (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-punpckhhw_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_punpckhhw_s (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-punpckhbh_s (int8x8_t s, int8x8_t t)\n-{\n-  return __builtin_loongson_punpckhbh_s (s, t);\n-}\n-\n-/* Unpack low data.  */\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-punpcklwd_u (uint32x2_t s, uint32x2_t t)\n-{\n-  return __builtin_loongson_punpcklwd_u (s, t);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-punpcklhw_u (uint16x4_t s, uint16x4_t t)\n-{\n-  return __builtin_loongson_punpcklhw_u (s, t);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-punpcklbh_u (uint8x8_t s, uint8x8_t t)\n-{\n-  return __builtin_loongson_punpcklbh_u (s, t);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-punpcklwd_s (int32x2_t s, int32x2_t t)\n-{\n-  return __builtin_loongson_punpcklwd_s (s, t);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-punpcklhw_s (int16x4_t s, int16x4_t t)\n-{\n-  return __builtin_loongson_punpcklhw_s (s, t);\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-punpcklbh_s (int8x8_t s, int8x8_t t)\n-{\n-  return __builtin_loongson_punpcklbh_s (s, t);\n-}\n-\n-#ifdef __cplusplus\n-}\n-#endif\n \n+#if !defined(_GCC_LOONGSON_MMIINTRIN_H)\n+#warning  \\\n+  loongson.h will be deprecated without further notice at a future date. \\\n+  Please use loongson-mmiintrin.h instead.\n+#include \"loongson-mmiintrin.h\"\n #endif"}, {"sha": "b579c3c3a2ad6e3a644e9191a24416807728d006", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -12797,8 +12797,9 @@ mips_hard_regno_mode_ok_uncached (unsigned int regno, machine_mode mode)\n       if (mode == CCFmode)\n \treturn !(TARGET_FLOATXX && (regno & 1) != 0);\n \n-      /* Allow 64-bit vector modes for Loongson-2E/2F.  */\n-      if (TARGET_LOONGSON_VECTORS\n+      /* Allow 64-bit vector modes for Loongson MultiMedia extensions\n+\t Instructions (MMI).  */\n+      if (TARGET_LOONGSON_MMI\n \t  && (mode == V2SImode\n \t      || mode == V4HImode\n \t      || mode == V8QImode\n@@ -13368,7 +13369,7 @@ mips_vector_mode_supported_p (machine_mode mode)\n     case E_V2SImode:\n     case E_V4HImode:\n     case E_V8QImode:\n-      return TARGET_LOONGSON_VECTORS;\n+      return TARGET_LOONGSON_MMI;\n \n     default:\n       return MSA_SUPPORTED_MODE_P (mode);\n@@ -15203,7 +15204,7 @@ AVAIL_NON_MIPS16 (dspr2, TARGET_DSPR2)\n AVAIL_NON_MIPS16 (dsp_32, !TARGET_64BIT && TARGET_DSP)\n AVAIL_NON_MIPS16 (dsp_64, TARGET_64BIT && TARGET_DSP)\n AVAIL_NON_MIPS16 (dspr2_32, !TARGET_64BIT && TARGET_DSPR2)\n-AVAIL_NON_MIPS16 (loongson, TARGET_LOONGSON_VECTORS)\n+AVAIL_NON_MIPS16 (loongson, TARGET_LOONGSON_MMI)\n AVAIL_NON_MIPS16 (cache, TARGET_CACHE_BUILTIN)\n AVAIL_NON_MIPS16 (msa, TARGET_MSA)\n \n@@ -20164,6 +20165,12 @@ mips_option_override (void)\n       TARGET_DSPR2 = false;\n     }\n \n+  /* Make sure that when TARGET_LOONGSON_MMI is true, TARGET_HARD_FLOAT_ABI\n+     is true.  In o32 pairs of floating-point registers provide 64-bit\n+     values.  */\n+  if (TARGET_LOONGSON_MMI &&  !TARGET_HARD_FLOAT_ABI)\n+    error (\"%<-mloongson-mmi%> must be used with %<-mhard-float%>\");\n+\n   /* .eh_frame addresses should be the same width as a C pointer.\n      Most MIPS ABIs support only one pointer size, so the assembler\n      will usually know exactly how big an .eh_frame address is.\n@@ -21149,12 +21156,12 @@ void mips_function_profiler (FILE *file)\n \n /* Implement TARGET_SHIFT_TRUNCATION_MASK.  We want to keep the default\n    behavior of TARGET_SHIFT_TRUNCATION_MASK for non-vector modes even\n-   when TARGET_LOONGSON_VECTORS is true.  */\n+   when TARGET_LOONGSON_MMI is true.  */\n \n static unsigned HOST_WIDE_INT\n mips_shift_truncation_mask (machine_mode mode)\n {\n-  if (TARGET_LOONGSON_VECTORS && VECTOR_MODE_P (mode))\n+  if (TARGET_LOONGSON_MMI && VECTOR_MODE_P (mode))\n     return 0;\n \n   return GET_MODE_BITSIZE (mode) - 1;\n@@ -21255,7 +21262,7 @@ mips_expand_vpc_loongson_even_odd (struct expand_vec_perm_d *d)\n   unsigned i, odd, nelt = d->nelt;\n   rtx t0, t1, t2, t3;\n \n-  if (!(TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS))\n+  if (!(TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI))\n     return false;\n   /* Even-odd for V2SI/V2SFmode is matched by interleave directly.  */\n   if (nelt < 4)\n@@ -21312,7 +21319,7 @@ mips_expand_vpc_loongson_pshufh (struct expand_vec_perm_d *d)\n   unsigned i, mask;\n   rtx rmask;\n \n-  if (!(TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS))\n+  if (!(TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI))\n     return false;\n   if (d->vmode != V4HImode)\n     return false;\n@@ -21364,7 +21371,7 @@ mips_expand_vpc_loongson_bcast (struct expand_vec_perm_d *d)\n   unsigned i, elt;\n   rtx t0, t1;\n \n-  if (!(TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS))\n+  if (!(TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI))\n     return false;\n   /* Note that we've already matched V2SI via punpck and V4HI via pshufh.  */\n   if (d->vmode != V8QImode)\n@@ -21958,7 +21965,7 @@ mips_expand_vector_init (rtx target, rtx vals)\n     }\n \n   /* Loongson is the only cpu with vectors with more elements.  */\n-  gcc_assert (TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS);\n+  gcc_assert (TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI);\n \n   /* If all values are identical, broadcast the value.  */\n   if (all_same)"}, {"sha": "27c0222ee46a6204ca48f78c24047c21eab61d86", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -319,13 +319,6 @@ struct mips_cpu_info {\n #define TUNE_I6400                  (mips_tune == PROCESSOR_I6400)\n #define TUNE_P6600                  (mips_tune == PROCESSOR_P6600)\n \n-/* Whether vector modes and intrinsics for ST Microelectronics\n-   Loongson-2E/2F processors should be enabled.  In o32 pairs of\n-   floating-point registers provide 64-bit values.  */\n-#define TARGET_LOONGSON_VECTORS\t    (TARGET_HARD_FLOAT_ABI\t\t\\\n-\t\t\t\t     && (TARGET_LOONGSON_2EF\t\t\\\n-\t\t\t\t\t || TARGET_LOONGSON_3A))\n-\n /* True if the pre-reload scheduler should try to create chains of\n    multiply-add or multiply-subtract instructions.  For example,\n    suppose we have:\n@@ -596,9 +589,12 @@ struct mips_cpu_info {\n       if (TARGET_ABICALLS)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__mips_abicalls\");\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      /* Whether Loongson vector modes are enabled.  */                 \\\n-      if (TARGET_LOONGSON_VECTORS)\t\t\t\t\t\\\n-        builtin_define (\"__mips_loongson_vector_rev\");                  \\\n+      /* Whether Loongson vector modes are enabled.  */\t\t\t\\\n+      if (TARGET_LOONGSON_MMI)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips_loongson_vector_rev\");\t\t\\\n+\t  builtin_define (\"__mips_loongson_mmi\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Historical Octeon macro.  */\t\t\t\t\t\\\n       if (TARGET_OCTEON)\t\t\t\t\t\t\\\n@@ -880,14 +876,23 @@ struct mips_cpu_info {\n \n /* A spec that infers the:\n    -mnan=2008 setting from a -mips argument,\n-   -mdsp setting from a -march argument.  */\n-#define BASE_DRIVER_SELF_SPECS \\\n-  MIPS_ISA_NAN2008_SPEC,       \\\n+   -mdsp setting from a -march argument.\n+   -mloongson-mmi setting from a -march argument.  */\n+#define BASE_DRIVER_SELF_SPECS\t\\\n+  MIPS_ISA_NAN2008_SPEC,\t\\\n+  MIPS_ASE_DSP_SPEC, \t\t\\\n+  MIPS_ASE_LOONGSON_MMI_SPEC\n+\n+#define MIPS_ASE_DSP_SPEC \\\n   \"%{!mno-dsp: \\\n      %{march=24ke*|march=34kc*|march=34kf*|march=34kx*|march=1004k* \\\n        |march=interaptiv: -mdsp} \\\n      %{march=74k*|march=m14ke*: %{!mno-dspr2: -mdspr2 -mdsp}}}\"\n \n+#define MIPS_ASE_LOONGSON_MMI_SPEC\t\t\t\t\t\t\\\n+  \"%{!mno-loongson-mmi:\t\t\t\t\t\t\t\t\\\n+     %{march=loongson2e|march=loongson2f|march=loongson3a: -mloongson-mmi}}\"\n+\n #define DRIVER_SELF_SPECS \\\n   MIPS_ISA_LEVEL_SPEC,\t  \\\n   BASE_DRIVER_SELF_SPECS\n@@ -1361,6 +1366,7 @@ struct mips_cpu_info {\n %{mcrc} %{mno-crc} \\\n %{mginv} %{mno-ginv} \\\n %{mmsa} %{mno-msa} \\\n+%{mloongson-mmi} %{mno-loongson-mmi} \\\n %{msmartmips} %{mno-smartmips} \\\n %{mmt} %{mno-mt} \\\n %{mfix-rm7000} %{mno-fix-rm7000} \\\n@@ -2638,9 +2644,9 @@ typedef struct mips_args {\n #define SLOW_BYTE_ACCESS (!TARGET_MIPS16)\n \n /* Standard MIPS integer shifts truncate the shift amount to the\n-   width of the shifted operand.  However, Loongson vector shifts\n+   width of the shifted operand.  However, Loongson MMI shifts\n    do not truncate the shift amount at all.  */\n-#define SHIFT_COUNT_TRUNCATED (!TARGET_LOONGSON_VECTORS)\n+#define SHIFT_COUNT_TRUNCATED (!TARGET_LOONGSON_MMI)\n \n \n /* Specify the machine mode that pointers have."}, {"sha": "a88c1c531348895c5e5d3f69cc463b34eb47c58d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -834,9 +834,9 @@\n (define_mode_iterator MOVE64\n   [DI DF\n    (V2SF \"TARGET_HARD_FLOAT && TARGET_PAIRED_SINGLE_FLOAT\")\n-   (V2SI \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\")\n-   (V4HI \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\")\n-   (V8QI \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\")])\n+   (V2SI \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\")\n+   (V4HI \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\")\n+   (V8QI \"TARGET_HARD_FLOAT && TARGET_LOONGSON_MMI\")])\n \n ;; 128-bit modes for which we provide move patterns on 64-bit targets.\n (define_mode_iterator MOVE128 [TI TF])\n@@ -863,9 +863,9 @@\n   [(DF \"!TARGET_64BIT && TARGET_DOUBLE_FLOAT\")\n    (DI \"!TARGET_64BIT && TARGET_DOUBLE_FLOAT\")\n    (V2SF \"!TARGET_64BIT && TARGET_PAIRED_SINGLE_FLOAT\")\n-   (V2SI \"!TARGET_64BIT && TARGET_LOONGSON_VECTORS\")\n-   (V4HI \"!TARGET_64BIT && TARGET_LOONGSON_VECTORS\")\n-   (V8QI \"!TARGET_64BIT && TARGET_LOONGSON_VECTORS\")\n+   (V2SI \"!TARGET_64BIT && TARGET_LOONGSON_MMI\")\n+   (V4HI \"!TARGET_64BIT && TARGET_LOONGSON_MMI\")\n+   (V8QI \"!TARGET_64BIT && TARGET_LOONGSON_MMI\")\n    (TF \"TARGET_64BIT && TARGET_FLOAT64\")])\n \n ;; In GPR templates, a string like \"<d>subu\" will expand to \"subu\" in the\n@@ -7690,8 +7690,8 @@\n ; microMIPS patterns.\n (include \"micromips.md\")\n \n-; ST-Microelectronics Loongson-2E/2F-specific patterns.\n-(include \"loongson.md\")\n+; Loongson MultiMedia extensions Instructions (MMI) patterns.\n+(include \"loongson-mmi.md\")\n \n ; The MIPS MSA Instructions.\n (include \"mips-msa.md\")"}, {"sha": "6767c47fa6533545fc0129e4b8cd0eb205c94e05", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -459,3 +459,7 @@ Enum(mips_cb_setting) String(optimal) Value(MIPS_CB_OPTIMAL)\n \n EnumValue\n Enum(mips_cb_setting) String(always) Value(MIPS_CB_ALWAYS)\n+\n+mloongson-mmi\n+Target Report Mask(LOONGSON_MMI)\n+Use Loongson MultiMedia extensions Instructions (MMI) instructions."}, {"sha": "1ba91a1fdff19cae4c9f45cc8f21770eafa015fd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -920,6 +920,7 @@ Objective-C and Objective-C++ Dialects}.\n -mginv -mno-ginv @gol\n -mmicromips  -mno-micromips @gol\n -mmsa  -mno-msa @gol\n+-mloongson-mmi  -mno-loongson-mmi @gol\n -mfpu=@var{fpu-type} @gol\n -msmartmips  -mno-smartmips @gol\n -mpaired-single  -mno-paired-single  -mdmx  -mno-mdmx @gol\n@@ -21286,6 +21287,12 @@ Use (do not use) the MIPS Cyclic Redundancy Check (CRC) instructions.\n @opindex mno-ginv\n Use (do not use) the MIPS Global INValidate (GINV) instructions.\n \n+@item -mloongson-mmi\n+@itemx -mno-loongson-mmi\n+@opindex mloongson-mmi\n+@opindex mno-loongson-mmi\n+Use (do not use) the MIPS Loongson MultiMedia extensions Instructions (MMI).\n+\n @item -mlong64\n @opindex mlong64\n Force @code{long} types to be 64 bits wide.  See @option{-mlong32} for"}, {"sha": "961328618d7b0328c293e8e15482ebce82ced921", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -1,3 +1,32 @@\n+2018-11-07  Chenghua Xu  <paul.hua.gm@gmail.com>\n+\n+\t* gcc.target/mips/loongson-shift-count-truncated-1.c\n+\t(dg-options): Run under -mloongson-mmi option.\n+\tInclude loongson-mmiintrin.h instead of loongson.h.\n+\t* gcc.target/mips/loongson-simd.c: Likewise.\n+\t* gcc.target/mips/mips.exp (mips_option_groups): Add\n+\t-mloongson-mmi option.\n+\t(mips-dg-options): Add mips_option_dependency options \"-mips16\" vs\n+\t\"-mno-loongson-mmi\", \"-mmicromips\" vs \"-mno-loongson-mmi\",\n+\t\"-msoft-float\" vs \"-mno-loongson-mmi\".\n+\t(mips-dg-init): Add -mloongson-mmi option.\n+\t* lib/target-supports.exp: Rename check_mips_loongson_hw_available\n+\tto check_mips_loongson_mmi_hw_available.\n+\tRename check_effective_target_mips_loongson_runtime to\n+\tcheck_effective_target_mips_loongson_mmi_runtime.\n+\t(check_effective_target_vect_int): Use mips_loongson_mmi instead\n+\tof mips_loongson when check et-is-effective-target.\n+\t(add_options_for_mips_loongson_mmi): New proc.\n+\tRename check_effective_target_mips_loongson to\n+\tcheck_effective_target_mips_loongson_mmi.\n+\t(check_effective_target_vect_shift,\n+\tcheck_effective_target_whole_vector_shift,\n+\tcheck_effective_target_vect_no_int_min_max,\n+\tcheck_effective_target_vect_no_align,\n+\tcheck_effective_target_vect_short_mult,\n+\tcheck_vect_support_and_set_flags):Use mips_loongson_mmi instead\n+\tof mips_loongson when check et-is-effective-target.\n+\n 2018-11-07  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/87906"}, {"sha": "6e22c0e110bd5d53387f3f9f20b3c9ad0658d0fa", "filename": "gcc/testsuite/gcc.target/mips/loongson-shift-count-truncated-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Floongson-shift-count-truncated-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Floongson-shift-count-truncated-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Floongson-shift-count-truncated-1.c?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -4,11 +4,11 @@\n /* loongson.h does not handle or check for MIPS16ness.  There doesn't\n    seem any good reason for it to, given that the Loongson processors\n    do not support MIPS16.  */\n-/* { dg-options \"isa=loongson -mhard-float -mno-mips16 (REQUIRES_STDLIB)\" } */\n+/* { dg-options \"-mloongson-mmi -mhard-float -mno-mips16 (REQUIRES_STDLIB)\" } */\n /* See PR 52155.  */\n-/* { dg-options \"isa=loongson -mhard-float -mno-mips16 -mlong64\" { mips*-*-elf* && ilp32 } } */\n+/* { dg-options \"-mloongson-mmi -mhard-float -mno-mips16 -mlong64\" { mips*-*-elf* && ilp32 } } */\n \n-#include \"loongson.h\"\n+#include \"loongson-mmiintrin.h\"\n #include <assert.h>\n \n typedef union { int32x2_t v; int32_t a[2]; } int32x2_encap_t;"}, {"sha": "34fdcecc6dce76ca93a38f72ca3bc427e698eae6", "filename": "gcc/testsuite/gcc.target/mips/loongson-simd.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Floongson-simd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Floongson-simd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Floongson-simd.c?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -26,9 +26,9 @@ along with GCC; see the file COPYING3.  If not see\n    because inclusion of some system headers e.g. stdint.h will fail due to not\n    finding stubs-o32_hard.h.  */\n /* { dg-require-effective-target mips_nanlegacy } */\n-/* { dg-options \"isa=loongson -mhard-float -mno-micromips -mno-mips16 -flax-vector-conversions (REQUIRES_STDLIB)\" } */\n+/* { dg-options \"-mloongson-mmi -mhard-float -mno-micromips -mno-mips16 -flax-vector-conversions (REQUIRES_STDLIB)\" } */\n \n-#include \"loongson.h\"\n+#include \"loongson-mmiintrin.h\"\n #include <stdio.h>\n #include <stdint.h>\n #include <assert.h>"}, {"sha": "9e447b554f30acca51e2cae669df11cd9db1e49c", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -296,6 +296,7 @@ foreach option {\n     mcount-ra-address\n     odd-spreg\n     msa\n+    loongson-mmi\n } {\n     lappend mips_option_groups $option \"-m(no-|)$option\"\n }\n@@ -883,6 +884,12 @@ proc mips-dg-init {} {\n \t    \"-mno-msa\"\n \t    #endif\n \n+\t    #ifdef __mips_loongson_mmi\n+\t    \"-mloongson-mmi\"\n+\t    #else\n+\t    \"-mno-loongson-mmi\"\n+\t    #endif\n+\n \t    0\n \t};\n     } 0]\n@@ -1045,6 +1052,9 @@ proc mips-dg-options { args } {\n     mips_option_dependency options \"-mno-plt\" \"addressing=unknown\"\n     mips_option_dependency options \"-mabicalls\" \"-G0\"\n     mips_option_dependency options \"-mno-gpopt\" \"-mexplicit-relocs\"\n+    mips_option_dependency options \"-mips16\" \"-mno-loongson-mmi\"\n+    mips_option_dependency options \"-mmicromips\" \"-mno-loongson-mmi\"\n+    mips_option_dependency options \"-msoft-float\" \"-mno-loongson-mmi\"\n \n     # Work out information about the current ABI.\n     set abi_test_option_p [mips_test_option_p options abi]"}, {"sha": "76c393d85c91318e90d032ebdd82bb461764129d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae8bad7e558ce916c52e91a4e1879557f287bbc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8ae8bad7e558ce916c52e91a4e1879557f287bbc", "patch": "@@ -1896,20 +1896,20 @@ proc check_mpaired_single_hw_available { } {\n # Return 1 if the target supports executing Loongson vector instructions,\n # 0 otherwise.  Cache the result.\n \n-proc check_mips_loongson_hw_available { } {\n-    return [check_cached_effective_target mips_loongson_hw_available {\n+proc check_mips_loongson_mmi_hw_available { } {\n+    return [check_cached_effective_target mips_loongson_mmi_hw_available {\n \t# If this is not the right target then we can skip the test.\n \tif { !([istarget mips*-*-*]) } {\n \t    expr 0\n \t} else {\n-\t    check_runtime_nocache mips_loongson_hw_available {\n-\t      #include <loongson.h>\n+\t    check_runtime_nocache mips_loongson_mmi_hw_available {\n+\t      #include <loongson-mmiintrin.h>\n \t      int main()\n \t      {\n \t\tasm volatile (\"paddw $f2,$f4,$f6\");\n \t\treturn 0;\n \t      }\n-\t    } \"\"\n+\t    } \"-mloongson-mmi\"\n \t}\n     }]\n }\n@@ -1963,9 +1963,9 @@ proc check_effective_target_mpaired_single_runtime { } {\n \n # Return 1 if the target supports running Loongson executables, 0 otherwise.\n \n-proc check_effective_target_mips_loongson_runtime { } {\n-    if { [check_effective_target_mips_loongson]\n-\t && [check_mips_loongson_hw_available] } {\n+proc check_effective_target_mips_loongson_mmi_runtime { } {\n+    if { [check_effective_target_mips_loongson_mmi]\n+\t && [check_mips_loongson_mmi_hw_available] } {\n \treturn 1\n     }\n     return 0\n@@ -3085,7 +3085,7 @@ proc check_effective_target_vect_int { } {\n \t || [istarget aarch64*-*-*]\n \t || [is-effective-target arm_neon]\n \t || ([istarget mips*-*-*]\n-\t     && ([et-is-effective-target mips_loongson]\n+\t     && ([et-is-effective-target mips_loongson_mmi]\n \t     || [et-is-effective-target mips_msa]))\n \t || ([istarget s390*-*-*]\n \t     && [check_effective_target_s390_vx])\n@@ -4708,11 +4708,24 @@ proc add_options_for_mips_msa { flags } {\n   return \"$flags -mmsa\"\n }\n \n+# Add the options needed for MIPS Loongson MMI Architecture.\n+\n+proc add_options_for_mips_loongson_mmi { flags } {\n+  if { ! [check_effective_target_mips_loongson_mmi] } {\n+    return \"$flags\"\n+  }\n+  return \"$flags -mloongson-mmi\"\n+}\n+\n+\n # Return 1 if this a Loongson-2E or -2F target using an ABI that supports\n # the Loongson vector modes.\n \n-proc check_effective_target_mips_loongson { } {\n+proc check_effective_target_mips_loongson_mmi { } {\n     return [check_no_compiler_messages loongson assembly {\n+\t#if !defined(__mips_loongson_mmi)\n+\t#error !__mips_loongson_mmi\n+\t#endif\n \t#if !defined(__mips_loongson_vector_rev)\n \t#error !__mips_loongson_vector_rev\n \t#endif\n@@ -5311,7 +5324,7 @@ proc check_effective_target_vect_shift { } {\n \t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && ([et-is-effective-target mips_msa]\n-\t\t     || [et-is-effective-target mips_loongson]))\n+\t\t     || [et-is-effective-target mips_loongson_mmi]))\n \t     || ([istarget s390*-*-*]\n \t\t && [check_effective_target_s390_vx]) }}]\n }\n@@ -5324,7 +5337,7 @@ proc check_effective_target_whole_vector_shift { } {\n \t || ([is-effective-target arm_neon]\n \t     && [check_effective_target_arm_little_endian])\n \t || ([istarget mips*-*-*]\n-\t     && [et-is-effective-target mips_loongson])\n+\t     && [et-is-effective-target mips_loongson_mmi])\n \t || ([istarget s390*-*-*]\n \t     && [check_effective_target_s390_vx]) } {\n \tset answer 1\n@@ -5464,7 +5477,7 @@ proc check_effective_target_vect_no_int_min_max { } {\n \t     || [istarget spu-*-*]\n \t     || [istarget alpha*-*-*]\n \t     || ([istarget mips*-*-*]\n-\t\t && [et-is-effective-target mips_loongson]) }}]\n+\t\t && [et-is-effective-target mips_loongson_mmi]) }}]\n }\n \n # Return 1 if the target plus current options does not support a vector\n@@ -5933,7 +5946,7 @@ proc check_effective_target_vect_no_align { } {\n \t     || [check_effective_target_arm_vect_no_misalign]\n \t     || ([istarget powerpc*-*-*] && [check_p8vector_hw_available])\n \t     || ([istarget mips*-*-*]\n-\t\t && [et-is-effective-target mips_loongson]) }}]\n+\t\t && [et-is-effective-target mips_loongson_mmi]) }}]\n }\n \n # Return 1 if the target supports a vector misalign access, 0 otherwise.\n@@ -6167,7 +6180,7 @@ proc check_effective_target_vect_short_mult { } {\n \t     || [check_effective_target_arm32]\n \t     || ([istarget mips*-*-*]\n \t\t && ([et-is-effective-target mips_msa]\n-\t\t     || [et-is-effective-target mips_loongson]))\n+\t\t     || [et-is-effective-target mips_loongson_mmi]))\n \t     || ([istarget s390*-*-*]\n \t\t && [check_effective_target_s390_vx]) }}]\n }\n@@ -8155,8 +8168,8 @@ proc check_vect_support_and_set_flags { } {\n \tif { [check_effective_target_mpaired_single] } {\n \t    lappend EFFECTIVE_TARGETS mpaired_single\n \t}\n-\tif { [check_effective_target_mips_loongson] } {\n-\t    lappend EFFECTIVE_TARGETS mips_loongson\n+\tif { [check_effective_target_mips_loongson_mmi] } {\n+\t    lappend EFFECTIVE_TARGETS mips_loongson_mmi\n \t}\n \tif { [check_effective_target_mips_msa] } {\n \t    lappend EFFECTIVE_TARGETS mips_msa"}]}