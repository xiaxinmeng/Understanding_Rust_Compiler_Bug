{"sha": "07d7d2f4d162b6afbca9f103f0af913e5d9956f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdkN2QyZjRkMTYyYjZhZmJjYTlmMTAzZjBhZjkxM2U1ZDk5NTZmOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2004-01-12T12:59:38Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-01-12T12:59:38Z"}, "message": "re PR target/13585 (Incorrect optimisation of call to sfunc)\n\n\tPR target/13585\n\t* sh-protos.h (check_use_sfunc_addr): Declare.\n\t* sh.c (extract_sfunc_addr, check_use_sfunc_addr): New functions.\n\t* sh.md (use_sfunc_addr): Use check_use_sfunc_addr in insn predicate.\n\nFrom-SVN: r75717", "tree": {"sha": "f09f63e49d892db0078f774f0763051f1cacb399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f09f63e49d892db0078f774f0763051f1cacb399"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07d7d2f4d162b6afbca9f103f0af913e5d9956f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d7d2f4d162b6afbca9f103f0af913e5d9956f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07d7d2f4d162b6afbca9f103f0af913e5d9956f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d7d2f4d162b6afbca9f103f0af913e5d9956f9/comments", "author": null, "committer": null, "parents": [{"sha": "f6ea0188bf449405a32c5676a7db513abe039aab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ea0188bf449405a32c5676a7db513abe039aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ea0188bf449405a32c5676a7db513abe039aab"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "d379c803f8994f7a106bf10dc0127b257899612c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7d2f4d162b6afbca9f103f0af913e5d9956f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7d2f4d162b6afbca9f103f0af913e5d9956f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07d7d2f4d162b6afbca9f103f0af913e5d9956f9", "patch": "@@ -1,3 +1,10 @@\n+2004-01-09  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\tPR target/13585\n+\t* sh-protos.h (check_use_sfunc_addr): Declare.\n+\t* sh.c (extract_sfunc_addr, check_use_sfunc_addr): New functions.\n+\t* sh.md (use_sfunc_addr): Use check_use_sfunc_addr in insn predicate.\n+\n 2004-01-12  Jan Hubicka  <jh@suse.cz>\n \n \t* alias.c:  Invlude varray.h"}, {"sha": "fc96b19377770e3ea3f23e48ff3ad3898bde859a", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7d2f4d162b6afbca9f103f0af913e5d9956f9/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7d2f4d162b6afbca9f103f0af913e5d9956f9/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=07d7d2f4d162b6afbca9f103f0af913e5d9956f9", "patch": "@@ -125,6 +125,7 @@ extern bool sh_cannot_change_mode_class\n extern void sh_mark_label (rtx, int);\n extern int sh_register_move_cost\n   (enum machine_mode mode, enum reg_class, enum reg_class);\n+extern int check_use_sfunc_addr (rtx, rtx);\n \n #ifdef HARD_CONST\n extern void fpscr_set_from_mem (int, HARD_REG_SET);"}, {"sha": "85f4aa6e639bdbdc0c861b58c8a13e4cd7c540c0", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7d2f4d162b6afbca9f103f0af913e5d9956f9/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7d2f4d162b6afbca9f103f0af913e5d9956f9/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=07d7d2f4d162b6afbca9f103f0af913e5d9956f9", "patch": "@@ -9167,4 +9167,51 @@ sh_expand_t_scc (enum rtx_code code, rtx target)\n   return 1;\n }\n \n+/* INSN is an sfunc; return the rtx that describes the address used.  */\n+static rtx\n+extract_sfunc_addr (rtx insn)\n+{\n+  rtx pattern, part = NULL_RTX;\n+  int len, i;\n+\n+  pattern = PATTERN (insn);\n+  len = XVECLEN (pattern, 0);\n+  for (i = 0; i < len; i++)\n+    {\n+      part = XVECEXP (pattern, 0, i);\n+      if (GET_CODE (part) == USE && GET_MODE (XEXP (part, 0)) == Pmode\n+\t  && GENERAL_REGISTER_P (true_regnum (XEXP (part, 0))))\n+\treturn XEXP (part, 0);\n+    }\n+  if (GET_CODE (XVECEXP (pattern, 0, 0)) == UNSPEC_VOLATILE)\n+    return XVECEXP (XVECEXP (pattern, 0, 0), 0, 1);\n+  abort ();\n+}\n+\n+/* Verify that the register in use_sfunc_addr still agrees with the address\n+   used in the sfunc.  This prevents fill_slots_from_thread from changing\n+   use_sfunc_addr.\n+   INSN is the use_sfunc_addr instruction, and REG is the register it\n+   guards.  */\n+int\n+check_use_sfunc_addr (rtx insn, rtx reg)\n+{\n+  /* Search for the sfunc.  It should really come right after INSN.  */\n+  while ((insn = NEXT_INSN (insn)))\n+    {\n+      if (GET_CODE (insn) == CODE_LABEL || GET_CODE (insn) == JUMP_INSN)\n+\tbreak;\n+      if (! INSN_P (insn))\n+\tcontinue;\n+\t\n+      if (GET_CODE (PATTERN (insn)) == SEQUENCE)\n+\tinsn = XVECEXP (PATTERN (insn), 0, 0);\n+      if (GET_CODE (PATTERN (insn)) != PARALLEL\n+\t  || get_attr_type (insn) != TYPE_SFUNC)\n+\tcontinue;\n+      return rtx_equal_p (extract_sfunc_addr (insn), reg);\n+    }\n+  abort ();\n+}\n+\n #include \"gt-sh.h\""}, {"sha": "099d930a6c2406f420e078a056374af80e58d6a1", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7d2f4d162b6afbca9f103f0af913e5d9956f9/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7d2f4d162b6afbca9f103f0af913e5d9956f9/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=07d7d2f4d162b6afbca9f103f0af913e5d9956f9", "patch": "@@ -1245,7 +1245,7 @@\n (define_insn \"use_sfunc_addr\"\n   [(set (reg:SI PR_REG)\n \t(unspec:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_SFUNC))]\n-  \"TARGET_SH1\"\n+  \"TARGET_SH1 && check_use_sfunc_addr (insn, operands[0])\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n "}]}