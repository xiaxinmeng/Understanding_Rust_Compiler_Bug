{"sha": "a20fd5ac2eb9316dd87135ceb445702dc4d78aa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwZmQ1YWMyZWI5MzE2ZGQ4NzEzNWNlYjQ0NTcwMmRjNGQ3OGFhMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-04-28T19:47:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-04-28T19:47:12Z"}, "message": "re PR rtl-optimization/6475 (zlib miscompilation with gcc-3.1)\n\n\tPR optimization/6475\n\t* reload1.c (alter_reg): Only call set_mem_expr if I is home pseudo\n\tregister of REGNO_DECL (i).\n\t* Makefile.in (reload1.o): Add $(TREE_H).\n\n\t* gcc.dg/20020426-2.c: New test.\n\nFrom-SVN: r52855", "tree": {"sha": "ea8960f1f233199a802a603713111bcde03517c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea8960f1f233199a802a603713111bcde03517c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87ed109f1f7fab7afc05afca460523a2493c0f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ed109f1f7fab7afc05afca460523a2493c0f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ed109f1f7fab7afc05afca460523a2493c0f43"}], "stats": {"total": 202, "additions": 198, "deletions": 4}, "files": [{"sha": "a4ae41fc7e815c7b72cc79e0245929c68510820e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a20fd5ac2eb9316dd87135ceb445702dc4d78aa2", "patch": "@@ -1,3 +1,10 @@\n+2002-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR optimization/6475\n+\t* reload1.c (alter_reg): Only call set_mem_expr if I is home pseudo\n+\tregister of REGNO_DECL (i).\n+\t* Makefile.in (reload1.o): Add $(TREE_H).\n+\n 2002-04-28  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppexp.c (lex): Update to use state.skip_eval."}, {"sha": "319e14fa1fbaadd9398b62a00ce7eae71bc4e422", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a20fd5ac2eb9316dd87135ceb445702dc4d78aa2", "patch": "@@ -1537,7 +1537,7 @@ reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h output.h \\\n reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) real.h flags.h \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) hard-reg-set.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) output.h function.h toplev.h cselib.h $(TM_P_H) \\\n-   except.h\n+   except.h $(TREE_H)\n caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h \\\n    $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) function.h \\\n    $(RECOG_H) reload.h $(EXPR_H) toplev.h $(TM_P_H)"}, {"sha": "840b1cbd49762da98c538d0affa32123c51acd57", "filename": "gcc/reload1.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a20fd5ac2eb9316dd87135ceb445702dc4d78aa2", "patch": "@@ -41,6 +41,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"real.h\"\n #include \"toplev.h\"\n #include \"except.h\"\n+#include \"tree.h\"\n \n /* This file contains the reload pass of the compiler, which is\n    run after register allocation has been done.  It checks that\n@@ -2067,10 +2068,19 @@ alter_reg (i, from_reg)\n \t memory.  If this is a shared MEM, make a copy.  */\n       if (REGNO_DECL (i))\n \t{\n-\t  if (from_reg != -1 && spill_stack_slot[from_reg] == x)\n-\t    x = copy_rtx (x);\n+\t  rtx decl = DECL_RTL_IF_SET (REGNO_DECL (i));\n \n-\t  set_mem_expr (x, REGNO_DECL (i));\n+\t  /* We can do this only for the DECLs home pseudo, not for\n+\t     any copies of it, since otherwise when the stack slot\n+\t     is reused, nonoverlapping_memrefs_p might think they\n+\t     cannot overlap.  */\n+\t  if (decl && GET_CODE (decl) == REG && REGNO (decl) == (unsigned) i)\n+\t    {\n+\t      if (from_reg != -1 && spill_stack_slot[from_reg] == x)\n+\t\tx = copy_rtx (x);\n+\n+\t      set_mem_expr (x, REGNO_DECL (i));\n+\t    }\n \t}\n \n       /* Save the stack slot for later.  */"}, {"sha": "173ab5ce21bb3fd22e1794bbb5659169f2e1a24a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a20fd5ac2eb9316dd87135ceb445702dc4d78aa2", "patch": "@@ -1,3 +1,7 @@\n+2002-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20020426-2.c: New test.\n+\n 2002-04-28  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/if-mop.c: Update."}, {"sha": "8ac170986e11450e2c363d8564a5557b10cf9b49", "filename": "gcc/testsuite/gcc.dg/20020426-2.c", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2Ftestsuite%2Fgcc.dg%2F20020426-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20fd5ac2eb9316dd87135ceb445702dc4d78aa2/gcc%2Ftestsuite%2Fgcc.dg%2F20020426-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020426-2.c?ref=a20fd5ac2eb9316dd87135ceb445702dc4d78aa2", "patch": "@@ -0,0 +1,173 @@\n+/* PR optimization/6475\n+   Distilled from zlib sources.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -frename-registers -fomit-frame-pointer -fPIC -mcpu=i686\" { target i?86-*-* } } */\n+\n+typedef struct\n+{\n+  union\n+  {\n+    struct\n+    {\n+      unsigned char a3;\n+      unsigned char a4;\n+    } a2;\n+    unsigned int a5;\n+  } a0;\n+  unsigned int a1;\n+} A;\n+\n+static int\n+foo (unsigned int *b, unsigned int n, unsigned int s, const unsigned int *d,\n+     const unsigned int *e, A **t, unsigned int *m, A *hp, unsigned int *hn,\n+     unsigned int *v)\n+{\n+  unsigned int a, c[15 + 1], f;\n+  int g, h;\n+  unsigned int i, j, k;\n+  int l;\n+  unsigned int ee;\n+  unsigned int *p;\n+  A *q, r, *u[15];\n+  int w;\n+  unsigned int x[15 + 1], *xx;\n+  int y;\n+  unsigned int z;\n+  p = c;\n+  *p++ = 0; *p++ = 0; *p++ = 0; *p++ = 0;\n+  *p++ = 0; *p++ = 0; *p++ = 0; *p++ = 0;\n+  *p++ = 0; *p++ = 0; *p++ = 0; *p++ = 0;\n+  *p++ = 0; *p++ = 0; *p++ = 0; *p++ = 0;\n+  p = b;\n+  i = n;\n+  do\n+    c[*p++]++;\n+  while (--i);\n+  if (c[0] == n)\n+    {\n+      *t = (A *) 0;\n+      *m = 0;\n+      return 0;\n+    }\n+  l = *m;\n+  for (j = 1; j <= 15; j++)\n+    if (c[j])\n+      break;\n+  k = j;\n+  if ((unsigned int) l < j)\n+    l = j;\n+  for (i = 15; i; i--)\n+    if (c[i])\n+      break;\n+  g = i;\n+  if ((unsigned int) l > i)\n+    l = i;\n+  *m = l;\n+  for (y = 1 << j; j < i; j++, y <<= 1)\n+    if ((y -= c[j]) < 0)\n+      return -3;\n+  if ((y -= c[i]) < 0)\n+    return -3;\n+  c[i] += y;\n+  x[1] = j = 0;\n+  p = c + 1;\n+  xx = x + 2;\n+  while (--i)\n+    *xx++ = (j += *p++);\n+  p = b;\n+  i = 0;\n+  do\n+    if ((j = *p++) != 0)\n+      v[x[j]++] = i;\n+  while (++i < n);\n+  n = x[g];\n+  x[0] = i = 0;\n+  p = v;\n+  h = -1;\n+  w = -l;\n+  u[0] = (A *) 0;\n+  q = (A *) 0;\n+  z = 0;\n+  for (; k <= g; k++)\n+    {\n+      a = c[k];\n+      while (a--)\n+\t{\n+\t  while (k > w + l)\n+\t    {\n+\t      h++;\n+\t      w += l;\n+\t      z = g - w;\n+\t      z = z > (unsigned int) l ? l : z;\n+\t      if ((f = 1 << (j = k - w)) > a + 1)\n+\t\t{\n+\t\t  f -= a + 1;\n+\t\t  xx = c + k;\n+\t\t  if (j < z)\n+\t\t    while (++j < z)\n+\t\t      {\n+\t\t\tif ((f <<= 1) <= *++xx)\n+\t\t\t  break;\n+\t\t\tf -= *xx;\n+\t\t      }\n+\t\t}\n+\t      z = 1 << j;\n+\t      if (*hn + z > 1440)\n+\t\treturn -3;\n+\t      u[h] = q = hp + *hn;\n+\t      *hn += z;\n+\t      if (h)\n+\t\t{\n+\t\t  x[h] = i;\n+\t\t  r.a0.a2.a4 = (unsigned char) l;\n+\t\t  r.a0.a2.a3 = (unsigned char) j;\n+\t\t  j = i >> (w - l);\n+\t\t  r.a1 = (unsigned int) (q - u[h - 1] - j);\n+\t\t  u[h - 1][j] = r;\n+\t\t}\n+\t      else\n+\t\t*t = q;\n+\t    }\n+\t  r.a0.a2.a4 = (unsigned char) (k - w);\n+\t  if (p >= v + n)\n+\t    r.a0.a2.a3 = 128 + 64;\n+\t  else if (*p < s)\n+\t    {\n+\t      r.a0.a2.a3 = (unsigned char) (*p < 256 ? 0 : 32 + 64);\n+\t      r.a1 = *p++;\n+\t    }\n+\t  else\n+\t    {\n+\t      r.a0.a2.a3 = (unsigned char) (e[*p - s] + 16 + 64);\n+\t      r.a1 = d[*p++ - s];\n+\t    }\n+\t  f = 1 << (k - w);\n+\t  for (j = i >> w; j < z; j += f)\n+\t    q[j] = r;\n+\t  for (j = 1 << (k - 1); i & j; j >>= 1)\n+\t    i ^= j;\n+\t  i ^= j;\n+\t  ee = (1 << w) - 1;\n+\t  while ((i & ee) != x[h])\n+\t    {\n+\t      h--;\n+\t      w -= l;\n+\t      ee = (1 << w) - 1;\n+\t    }\n+\t}\n+    }\n+  return y != 0 && g != 1 ? (-5) : 0;\n+}\n+\n+int a[19] = { 3, 4, 0, 2, 2, [17] = 3, 3 };\n+int d[19];\n+A h[1440];\n+\n+int\n+main (void)\n+{\n+  int b = 0, c = 0;\n+  A *e = 0;\n+  foo (a, 19, 19, 0, 0, &e, &b, h, &c, d);\n+  exit (0);"}]}