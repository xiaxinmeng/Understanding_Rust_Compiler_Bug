{"sha": "167a5b77978fd30959290d5649d96534ae8db9a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY3YTViNzc5NzhmZDMwOTU5MjkwZDU2NDlkOTY1MzRhZThkYjlhMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-04-10T06:53:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-10T06:53:28Z"}, "message": "re PR target/80324 (_mm512_reduce_xxx type instrinsics are missing)\n\n\tPR target/80324\n\t* config/i386/avx512fintrin.h (_mm512_reduce_add_epi32,\n\t_mm512_reduce_mul_epi32, _mm512_reduce_and_epi32,\n\t_mm512_reduce_or_epi32, _mm512_mask_reduce_add_epi32,\n\t_mm512_mask_reduce_mul_epi32, _mm512_mask_reduce_and_epi32,\n\t_mm512_mask_reduce_or_epi32, _mm512_reduce_min_epi32,\n\t_mm512_reduce_max_epi32, _mm512_reduce_min_epu32,\n\t_mm512_reduce_max_epu32, _mm512_mask_reduce_min_epi32,\n\t_mm512_mask_reduce_max_epi32, _mm512_mask_reduce_min_epu32,\n\t_mm512_mask_reduce_max_epu32, _mm512_reduce_add_ps,\n\t_mm512_reduce_mul_ps, _mm512_mask_reduce_add_ps,\n\t_mm512_mask_reduce_mul_ps, _mm512_reduce_min_ps, _mm512_reduce_max_ps,\n\t_mm512_mask_reduce_min_ps, _mm512_mask_reduce_max_ps,\n\t_mm512_reduce_add_epi64, _mm512_reduce_mul_epi64,\n\t_mm512_reduce_and_epi64, _mm512_reduce_or_epi64,\n\t_mm512_mask_reduce_add_epi64, _mm512_mask_reduce_mul_epi64,\n\t_mm512_mask_reduce_and_epi64, _mm512_mask_reduce_or_epi64,\n\t_mm512_reduce_min_epi64, _mm512_reduce_max_epi64,\n\t_mm512_mask_reduce_min_epi64, _mm512_mask_reduce_max_epi64,\n\t_mm512_reduce_min_epu64, _mm512_reduce_max_epu64,\n\t_mm512_mask_reduce_min_epu64, _mm512_mask_reduce_max_epu64,\n\t_mm512_reduce_add_pd, _mm512_reduce_mul_pd, _mm512_mask_reduce_add_pd,\n\t_mm512_mask_reduce_mul_pd, _mm512_reduce_min_pd, _mm512_reduce_max_pd,\n\t_mm512_mask_reduce_min_pd, _mm512_mask_reduce_max_pd): New intrinsics.\n\n\t* gcc.target/i386/avx512f-reduce-op-1.c: New test.\n\nFrom-SVN: r246798", "tree": {"sha": "c280c4393efd41ca224141f307730b89f7324ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c280c4393efd41ca224141f307730b89f7324ea5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/167a5b77978fd30959290d5649d96534ae8db9a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167a5b77978fd30959290d5649d96534ae8db9a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167a5b77978fd30959290d5649d96534ae8db9a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167a5b77978fd30959290d5649d96534ae8db9a3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab9ead30e841b906c813075c4a0045f14b7b277a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9ead30e841b906c813075c4a0045f14b7b277a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9ead30e841b906c813075c4a0045f14b7b277a"}], "stats": {"total": 906, "additions": 906, "deletions": 0}, "files": [{"sha": "1f7f645aead3bed588eb2d9fb52764da25a60ae3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167a5b77978fd30959290d5649d96534ae8db9a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167a5b77978fd30959290d5649d96534ae8db9a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=167a5b77978fd30959290d5649d96534ae8db9a3", "patch": "@@ -1,3 +1,30 @@\n+2017-04-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80324\n+\t* config/i386/avx512fintrin.h (_mm512_reduce_add_epi32,\n+\t_mm512_reduce_mul_epi32, _mm512_reduce_and_epi32,\n+\t_mm512_reduce_or_epi32, _mm512_mask_reduce_add_epi32,\n+\t_mm512_mask_reduce_mul_epi32, _mm512_mask_reduce_and_epi32,\n+\t_mm512_mask_reduce_or_epi32, _mm512_reduce_min_epi32,\n+\t_mm512_reduce_max_epi32, _mm512_reduce_min_epu32,\n+\t_mm512_reduce_max_epu32, _mm512_mask_reduce_min_epi32,\n+\t_mm512_mask_reduce_max_epi32, _mm512_mask_reduce_min_epu32,\n+\t_mm512_mask_reduce_max_epu32, _mm512_reduce_add_ps,\n+\t_mm512_reduce_mul_ps, _mm512_mask_reduce_add_ps,\n+\t_mm512_mask_reduce_mul_ps, _mm512_reduce_min_ps, _mm512_reduce_max_ps,\n+\t_mm512_mask_reduce_min_ps, _mm512_mask_reduce_max_ps,\n+\t_mm512_reduce_add_epi64, _mm512_reduce_mul_epi64,\n+\t_mm512_reduce_and_epi64, _mm512_reduce_or_epi64,\n+\t_mm512_mask_reduce_add_epi64, _mm512_mask_reduce_mul_epi64,\n+\t_mm512_mask_reduce_and_epi64, _mm512_mask_reduce_or_epi64,\n+\t_mm512_reduce_min_epi64, _mm512_reduce_max_epi64,\n+\t_mm512_mask_reduce_min_epi64, _mm512_mask_reduce_max_epi64,\n+\t_mm512_reduce_min_epu64, _mm512_reduce_max_epu64,\n+\t_mm512_mask_reduce_min_epu64, _mm512_mask_reduce_max_epu64,\n+\t_mm512_reduce_add_pd, _mm512_reduce_mul_pd, _mm512_mask_reduce_add_pd,\n+\t_mm512_mask_reduce_mul_pd, _mm512_reduce_min_pd, _mm512_reduce_max_pd,\n+\t_mm512_mask_reduce_min_pd, _mm512_mask_reduce_max_pd): New intrinsics.\n+\n 2017-04-08  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/70478"}, {"sha": "afc80d62d62c17776a3eb19705ff96fce6671cc7", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 464, "deletions": 0, "changes": 464, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167a5b77978fd30959290d5649d96534ae8db9a3/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167a5b77978fd30959290d5649d96534ae8db9a3/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=167a5b77978fd30959290d5649d96534ae8db9a3", "patch": "@@ -13282,6 +13282,470 @@ _mm512_cmpgt_epu64_mask (__m512i __A, __m512i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+#undef __MM512_REDUCE_OP\n+#define __MM512_REDUCE_OP(op) \\\n+  __v8si __T1 = (__v8si) _mm512_extracti64x4_epi64 (__A, 1);\t\t\\\n+  __v8si __T2 = (__v8si) _mm512_extracti64x4_epi64 (__A, 0);\t\t\\\n+  __m256i __T3 = (__m256i) (__T1 op __T2);\t\t\t\t\\\n+  __v4si __T4 = (__v4si) _mm256_extracti128_si256 (__T3, 1);\t\t\\\n+  __v4si __T5 = (__v4si) _mm256_extracti128_si256 (__T3, 0);\t\t\\\n+  __v4si __T6 = __T4 op __T5;\t\t\t\t\t\t\\\n+  __v4si __T7 = __builtin_shuffle (__T6, (__v4si) { 2, 3, 0, 1 });\t\\\n+  __v4si __T8 = __T6 op __T7;\t\t\t\t\t\t\\\n+  return __T8[0] op __T8[1]\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_add_epi32 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (+);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_mul_epi32 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (*);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_and_epi32 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (&);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_or_epi32 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (|);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_add_epi32 (__mmask16 __U, __m512i __A)\n+{\n+  __A = _mm512_maskz_mov_epi32 (__U, __A);\n+  __MM512_REDUCE_OP (+);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_mul_epi32 (__mmask16 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi32 (_mm512_set1_epi32 (1), __U, __A);\n+  __MM512_REDUCE_OP (*);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_and_epi32 (__mmask16 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi32 (_mm512_set1_epi32 (~0), __U, __A);\n+  __MM512_REDUCE_OP (&);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_or_epi32 (__mmask16 __U, __m512i __A)\n+{\n+  __A = _mm512_maskz_mov_epi32 (__U, __A);\n+  __MM512_REDUCE_OP (|);\n+}\n+\n+#undef __MM512_REDUCE_OP\n+#define __MM512_REDUCE_OP(op) \\\n+  __m256i __T1 = (__m256i) _mm512_extracti64x4_epi64 (__A, 1);\t\t\\\n+  __m256i __T2 = (__m256i) _mm512_extracti64x4_epi64 (__A, 0);\t\t\\\n+  __m256i __T3 = _mm256_##op (__T1, __T2);\t\t\t\t\\\n+  __m128i __T4 = (__m128i) _mm256_extracti128_si256 (__T3, 1);\t\t\\\n+  __m128i __T5 = (__m128i) _mm256_extracti128_si256 (__T3, 0);\t\t\\\n+  __m128i __T6 = _mm_##op (__T4, __T5);\t\t\t\t\t\\\n+  __m128i __T7 = (__m128i) __builtin_shuffle ((__v4si) __T6,\t\t\\\n+\t\t\t\t\t      (__v4si) { 2, 3, 0, 1 });\t\\\n+  __m128i __T8 = _mm_##op (__T6, __T7);\t\t\t\t\t\\\n+  __m128i __T9 = (__m128i) __builtin_shuffle ((__v4si) __T8,\t\t\\\n+\t\t\t\t\t      (__v4si) { 1, 0, 1, 0 });\t\\\n+  __v4si __T10 = (__v4si) _mm_##op (__T8, __T9);\t\t\t\\\n+  return __T10[0]\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_min_epi32 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (min_epi32);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_max_epi32 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (max_epi32);\n+}\n+\n+extern __inline unsigned int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_min_epu32 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (min_epu32);\n+}\n+\n+extern __inline unsigned int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_max_epu32 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (max_epu32);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_min_epi32 (__mmask16 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi32 (_mm512_set1_epi32 (__INT_MAX__), __U, __A);\n+  __MM512_REDUCE_OP (min_epi32);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_max_epi32 (__mmask16 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi32 (_mm512_set1_epi32 (-__INT_MAX__ - 1), __U, __A);\n+  __MM512_REDUCE_OP (max_epi32);\n+}\n+\n+extern __inline unsigned int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_min_epu32 (__mmask16 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi32 (_mm512_set1_epi32 (~0), __U, __A);\n+  __MM512_REDUCE_OP (min_epu32);\n+}\n+\n+extern __inline unsigned int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_max_epu32 (__mmask16 __U, __m512i __A)\n+{\n+  __A = _mm512_maskz_mov_epi32 (__U, __A);\n+  __MM512_REDUCE_OP (max_epu32);\n+}\n+\n+#undef __MM512_REDUCE_OP\n+#define __MM512_REDUCE_OP(op) \\\n+  __m256 __T1 = (__m256) _mm512_extractf64x4_pd ((__m512d) __A, 1);\t\\\n+  __m256 __T2 = (__m256) _mm512_extractf64x4_pd ((__m512d) __A, 0);\t\\\n+  __m256 __T3 = __T1 op __T2;\t\t\t\t\t\t\\\n+  __m128 __T4 = _mm256_extractf128_ps (__T3, 1);\t\t\t\\\n+  __m128 __T5 = _mm256_extractf128_ps (__T3, 0);\t\t\t\\\n+  __m128 __T6 = __T4 op __T5;\t\t\t\t\t\t\\\n+  __m128 __T7 = __builtin_shuffle (__T6, (__v4si) { 2, 3, 0, 1 });\t\\\n+  __m128 __T8 = __T6 op __T7;\t\t\t\t\t\t\\\n+  return __T8[0] op __T8[1]\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_add_ps (__m512 __A)\n+{\n+  __MM512_REDUCE_OP (+);\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_mul_ps (__m512 __A)\n+{\n+  __MM512_REDUCE_OP (*);\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_add_ps (__mmask16 __U, __m512 __A)\n+{\n+  __A = _mm512_maskz_mov_ps (__U, __A);\n+  __MM512_REDUCE_OP (+);\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_mul_ps (__mmask16 __U, __m512 __A)\n+{\n+  __A = _mm512_mask_mov_ps (_mm512_set1_ps (1.0f), __U, __A);\n+  __MM512_REDUCE_OP (*);\n+}\n+\n+#undef __MM512_REDUCE_OP\n+#define __MM512_REDUCE_OP(op) \\\n+  __m256 __T1 = (__m256) _mm512_extractf64x4_pd ((__m512d) __A, 1);\t\\\n+  __m256 __T2 = (__m256) _mm512_extractf64x4_pd ((__m512d) __A, 0);\t\\\n+  __m256 __T3 = _mm256_##op (__T1, __T2);\t\t\t\t\\\n+  __m128 __T4 = _mm256_extractf128_ps (__T3, 1);\t\t\t\\\n+  __m128 __T5 = _mm256_extractf128_ps (__T3, 0);\t\t\t\\\n+  __m128 __T6 = _mm_##op (__T4, __T5);\t\t\t\t\t\\\n+  __m128 __T7 = __builtin_shuffle (__T6, (__v4si) { 2, 3, 0, 1 });\t\\\n+  __m128 __T8 = _mm_##op (__T6, __T7);\t\t\t\t\t\\\n+  __m128 __T9 = __builtin_shuffle (__T8, (__v4si) { 1, 0, 1, 0 });\t\\\n+  __m128 __T10 = _mm_##op (__T8, __T9);\t\t\t\t\t\\\n+  return __T10[0]\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_min_ps (__m512 __A)\n+{\n+  __MM512_REDUCE_OP (min_ps);\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_max_ps (__m512 __A)\n+{\n+  __MM512_REDUCE_OP (max_ps);\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_min_ps (__mmask16 __U, __m512 __A)\n+{\n+  __A = _mm512_mask_mov_ps (_mm512_set1_ps (__builtin_inff ()), __U, __A);\n+  __MM512_REDUCE_OP (min_ps);\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_max_ps (__mmask16 __U, __m512 __A)\n+{\n+  __A = _mm512_mask_mov_ps (_mm512_set1_ps (-__builtin_inff ()), __U, __A);\n+  __MM512_REDUCE_OP (max_ps);\n+}\n+\n+#undef __MM512_REDUCE_OP\n+#define __MM512_REDUCE_OP(op) \\\n+  __v4di __T1 = (__v4di) _mm512_extracti64x4_epi64 (__A, 1);\t\t\\\n+  __v4di __T2 = (__v4di) _mm512_extracti64x4_epi64 (__A, 0);\t\t\\\n+  __m256i __T3 = (__m256i) (__T1 op __T2);\t\t\t\t\\\n+  __v2di __T4 = (__v2di) _mm256_extracti128_si256 (__T3, 1);\t\t\\\n+  __v2di __T5 = (__v2di) _mm256_extracti128_si256 (__T3, 0);\t\t\\\n+  __v2di __T6 = __T4 op __T5;\t\t\t\t\t\t\\\n+  return __T6[0] op __T6[1]\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_add_epi64 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (+);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_mul_epi64 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (*);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_and_epi64 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (&);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_or_epi64 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (|);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_add_epi64 (__mmask8 __U, __m512i __A)\n+{\n+  __A = _mm512_maskz_mov_epi64 (__U, __A);\n+  __MM512_REDUCE_OP (+);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_mul_epi64 (__mmask8 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi64 (_mm512_set1_epi64 (1LL), __U, __A);\n+  __MM512_REDUCE_OP (*);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_and_epi64 (__mmask8 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi64 (_mm512_set1_epi64 (~0LL), __U, __A);\n+  __MM512_REDUCE_OP (&);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_or_epi64 (__mmask8 __U, __m512i __A)\n+{\n+  __A = _mm512_maskz_mov_epi64 (__U, __A);\n+  __MM512_REDUCE_OP (|);\n+}\n+\n+#undef __MM512_REDUCE_OP\n+#define __MM512_REDUCE_OP(op) \\\n+  __m512i __T1 = _mm512_shuffle_i64x2 (__A, __A, 0x4e);\t\t\t\\\n+  __m512i __T2 = _mm512_##op (__A, __T1);\t\t\t\t\\\n+  __m512i __T3\t\t\t\t\t\t\t\t\\\n+    = (__m512i) __builtin_shuffle ((__v8di) __T2,\t\t\t\\\n+\t\t\t\t   (__v8di) { 2, 3, 0, 1, 6, 7, 4, 5 });\\\n+  __m512i __T4 = _mm512_##op (__T2, __T3);\t\t\t\t\\\n+  __m512i __T5\t\t\t\t\t\t\t\t\\\n+    = (__m512i) __builtin_shuffle ((__v8di) __T4,\t\t\t\\\n+\t\t\t\t   (__v8di) { 1, 0, 3, 2, 5, 4, 7, 6 });\\\n+  __v8di __T6 = (__v8di) _mm512_##op (__T4, __T5);\t\t\t\\\n+  return __T6[0]\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_min_epi64 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (min_epi64);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_max_epi64 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (max_epi64);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_min_epi64 (__mmask8 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi64 (_mm512_set1_epi64 (__LONG_LONG_MAX__),\n+\t\t\t       __U, __A);\n+  __MM512_REDUCE_OP (min_epi64);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_max_epi64 (__mmask8 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi64 (_mm512_set1_epi64 (-__LONG_LONG_MAX__ - 1),\n+\t\t\t       __U, __A);\n+  __MM512_REDUCE_OP (max_epi64);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_min_epu64 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (min_epu64);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_max_epu64 (__m512i __A)\n+{\n+  __MM512_REDUCE_OP (max_epu64);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_min_epu64 (__mmask8 __U, __m512i __A)\n+{\n+  __A = _mm512_mask_mov_epi64 (_mm512_set1_epi64 (~0LL), __U, __A);\n+  __MM512_REDUCE_OP (min_epu64);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_max_epu64 (__mmask8 __U, __m512i __A)\n+{\n+  __A = _mm512_maskz_mov_epi64 (__U, __A);\n+  __MM512_REDUCE_OP (max_epu64);\n+}\n+\n+#undef __MM512_REDUCE_OP\n+#define __MM512_REDUCE_OP(op) \\\n+  __m256d __T1 = (__m256d) _mm512_extractf64x4_pd (__A, 1);\t\t\\\n+  __m256d __T2 = (__m256d) _mm512_extractf64x4_pd (__A, 0);\t\t\\\n+  __m256d __T3 = __T1 op __T2;\t\t\t\t\t\t\\\n+  __m128d __T4 = _mm256_extractf128_pd (__T3, 1);\t\t\t\\\n+  __m128d __T5 = _mm256_extractf128_pd (__T3, 0);\t\t\t\\\n+  __m128d __T6 = __T4 op __T5;\t\t\t\t\t\t\\\n+  return __T6[0] op __T6[1]\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_add_pd (__m512d __A)\n+{\n+  __MM512_REDUCE_OP (+);\n+}\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_mul_pd (__m512d __A)\n+{\n+  __MM512_REDUCE_OP (*);\n+}\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_add_pd (__mmask8 __U, __m512d __A)\n+{\n+  __A = _mm512_maskz_mov_pd (__U, __A);\n+  __MM512_REDUCE_OP (+);\n+}\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_mul_pd (__mmask8 __U, __m512d __A)\n+{\n+  __A = _mm512_mask_mov_pd (_mm512_set1_pd (1.0), __U, __A);\n+  __MM512_REDUCE_OP (*);\n+}\n+\n+#undef __MM512_REDUCE_OP\n+#define __MM512_REDUCE_OP(op) \\\n+  __m256d __T1 = (__m256d) _mm512_extractf64x4_pd (__A, 1);\t\t\\\n+  __m256d __T2 = (__m256d) _mm512_extractf64x4_pd (__A, 0);\t\t\\\n+  __m256d __T3 = _mm256_##op (__T1, __T2);\t\t\t\t\\\n+  __m128d __T4 = _mm256_extractf128_pd (__T3, 1);\t\t\t\\\n+  __m128d __T5 = _mm256_extractf128_pd (__T3, 0);\t\t\t\\\n+  __m128d __T6 = _mm_##op (__T4, __T5);\t\t\t\t\t\\\n+  __m128d __T7 = (__m128d) __builtin_shuffle (__T6, (__v2di) { 1, 0 });\t\\\n+  __m128d __T8 = _mm_##op (__T6, __T7);\t\t\t\t\t\\\n+  return __T8[0]\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_min_pd (__m512d __A)\n+{\n+  __MM512_REDUCE_OP (min_pd);\n+}\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_max_pd (__m512d __A)\n+{\n+  __MM512_REDUCE_OP (max_pd);\n+}\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_min_pd (__mmask8 __U, __m512d __A)\n+{\n+  __A = _mm512_mask_mov_pd (_mm512_set1_pd (__builtin_inf ()), __U, __A);\n+  __MM512_REDUCE_OP (min_pd);\n+}\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_max_pd (__mmask8 __U, __m512d __A)\n+{\n+  __A = _mm512_mask_mov_pd (_mm512_set1_pd (-__builtin_inf ()), __U, __A);\n+  __MM512_REDUCE_OP (max_pd);\n+}\n+\n+#undef __MM512_REDUCE_OP\n+\n #ifdef __DISABLE_AVX512F__\n #undef __DISABLE_AVX512F__\n #pragma GCC pop_options"}, {"sha": "c94c7c475d61205cf96a904fdbe9e72deb09c128", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167a5b77978fd30959290d5649d96534ae8db9a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167a5b77978fd30959290d5649d96534ae8db9a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=167a5b77978fd30959290d5649d96534ae8db9a3", "patch": "@@ -1,3 +1,8 @@\n+2017-04-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80324\n+\t* gcc.target/i386/avx512f-reduce-op-1.c: New test.\n+\n 2017-04-08  Martin Liska  <mliska@suse.cz>\n \n \tRevert:"}, {"sha": "a66bf9c1291c6f6e621b9cec3dc14b9729156b23", "filename": "gcc/testsuite/gcc.target/i386/avx512f-reduce-op-1.c", "status": "added", "additions": 410, "deletions": 0, "changes": 410, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167a5b77978fd30959290d5649d96534ae8db9a3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-reduce-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167a5b77978fd30959290d5649d96534ae8db9a3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-reduce-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-reduce-op-1.c?ref=167a5b77978fd30959290d5649d96534ae8db9a3", "patch": "@@ -0,0 +1,410 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+__attribute__((noinline, noclone)) int\n+test_reduce_add_epi32 (__m512i a)\n+{\n+  return _mm512_reduce_add_epi32 (a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_reduce_mul_epi32 (__m512i a)\n+{\n+  return _mm512_reduce_mul_epi32 (a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_reduce_and_epi32 (__m512i a)\n+{\n+  return _mm512_reduce_and_epi32 (a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_reduce_or_epi32 (__m512i a)\n+{\n+  return _mm512_reduce_or_epi32 (a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_mask_reduce_add_epi32 (__mmask16 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_add_epi32 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_mask_reduce_mul_epi32 (__mmask16 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_mul_epi32 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_mask_reduce_and_epi32 (__mmask16 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_and_epi32 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_mask_reduce_or_epi32 (__mmask16 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_or_epi32 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_reduce_min_epi32 (__m512i a)\n+{\n+  return _mm512_reduce_min_epi32 (a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_reduce_max_epi32 (__m512i a)\n+{\n+  return _mm512_reduce_max_epi32 (a);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned int\n+test_reduce_min_epu32 (__m512i a)\n+{\n+  return _mm512_reduce_min_epu32 (a);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned int\n+test_reduce_max_epu32 (__m512i a)\n+{\n+  return _mm512_reduce_max_epu32 (a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_mask_reduce_min_epi32 (__mmask16 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_min_epi32 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+test_mask_reduce_max_epi32 (__mmask16 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_max_epi32 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned int\n+test_mask_reduce_min_epu32 (__mmask16 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_min_epu32 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned int\n+test_mask_reduce_max_epu32 (__mmask16 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_max_epu32 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) float\n+test_reduce_add_ps (__m512 a)\n+{\n+  return _mm512_reduce_add_ps (a);\n+}\n+\n+__attribute__((noinline, noclone)) float\n+test_reduce_mul_ps (__m512 a)\n+{\n+  return _mm512_reduce_mul_ps (a);\n+}\n+\n+__attribute__((noinline, noclone)) float\n+test_mask_reduce_add_ps (__mmask16 u, __m512 a)\n+{\n+  return _mm512_mask_reduce_add_ps (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) float\n+test_mask_reduce_mul_ps (__mmask16 u, __m512 a)\n+{\n+  return _mm512_mask_reduce_mul_ps (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) float\n+test_reduce_min_ps (__m512 a)\n+{\n+  return _mm512_reduce_min_ps (a);\n+}\n+\n+__attribute__((noinline, noclone)) float\n+test_reduce_max_ps (__m512 a)\n+{\n+  return _mm512_reduce_max_ps (a);\n+}\n+\n+__attribute__((noinline, noclone)) float\n+test_mask_reduce_min_ps (__mmask16 u, __m512 a)\n+{\n+  return _mm512_mask_reduce_min_ps (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) float\n+test_mask_reduce_max_ps (__mmask16 u, __m512 a)\n+{\n+  return _mm512_mask_reduce_max_ps (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_reduce_add_epi64 (__m512i a)\n+{\n+  return _mm512_reduce_add_epi64 (a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_reduce_mul_epi64 (__m512i a)\n+{\n+  return _mm512_reduce_mul_epi64 (a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_reduce_and_epi64 (__m512i a)\n+{\n+  return _mm512_reduce_and_epi64 (a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_reduce_or_epi64 (__m512i a)\n+{\n+  return _mm512_reduce_or_epi64 (a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_mask_reduce_add_epi64 (__mmask8 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_add_epi64 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_mask_reduce_mul_epi64 (__mmask8 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_mul_epi64 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_mask_reduce_and_epi64 (__mmask8 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_and_epi64 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_mask_reduce_or_epi64 (__mmask8 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_or_epi64 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_reduce_min_epi64 (__m512i a)\n+{\n+  return _mm512_reduce_min_epi64 (a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_reduce_max_epi64 (__m512i a)\n+{\n+  return _mm512_reduce_max_epi64 (a);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned long long\n+test_reduce_min_epu64 (__m512i a)\n+{\n+  return _mm512_reduce_min_epu64 (a);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned long long\n+test_reduce_max_epu64 (__m512i a)\n+{\n+  return _mm512_reduce_max_epu64 (a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_mask_reduce_min_epi64 (__mmask8 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_min_epi64 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+test_mask_reduce_max_epi64 (__mmask8 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_max_epi64 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned long long\n+test_mask_reduce_min_epu64 (__mmask8 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_min_epu64 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned long long\n+test_mask_reduce_max_epu64 (__mmask8 u, __m512i a)\n+{\n+  return _mm512_mask_reduce_max_epu64 (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) double\n+test_reduce_add_pd (__m512d a)\n+{\n+  return _mm512_reduce_add_pd (a);\n+}\n+\n+__attribute__((noinline, noclone)) double\n+test_reduce_mul_pd (__m512d a)\n+{\n+  return _mm512_reduce_mul_pd (a);\n+}\n+\n+__attribute__((noinline, noclone)) double\n+test_mask_reduce_add_pd (__mmask8 u, __m512d a)\n+{\n+  return _mm512_mask_reduce_add_pd (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) double\n+test_mask_reduce_mul_pd (__mmask8 u, __m512d a)\n+{\n+  return _mm512_mask_reduce_mul_pd (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) double\n+test_reduce_min_pd (__m512d a)\n+{\n+  return _mm512_reduce_min_pd (a);\n+}\n+\n+__attribute__((noinline, noclone)) double\n+test_reduce_max_pd (__m512d a)\n+{\n+  return _mm512_reduce_max_pd (a);\n+}\n+\n+__attribute__((noinline, noclone)) double\n+test_mask_reduce_min_pd (__mmask8 u, __m512d a)\n+{\n+  return _mm512_mask_reduce_min_pd (u, a);\n+}\n+\n+__attribute__((noinline, noclone)) double\n+test_mask_reduce_max_pd (__mmask8 u, __m512d a)\n+{\n+  return _mm512_mask_reduce_max_pd (u, a);\n+}\n+\n+#define TESTOP(opname, op, type, suffix, neutral) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    type r1 = _mm512_reduce_##opname##_##suffix (v.x);\t\t\t\\\n+    type r2 = test_reduce_##opname##_##suffix (v.x);\t\t\t\\\n+    type r3 = neutral;\t\t\t\t\t\t\t\\\n+    if (r1 != r2)\t\t\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+    for (int i = 0; i < SIZE; i++)\t\t\t\t\t\\\n+      r3 = r3 op v.a[i];\t\t\t\t\t\t\\\n+    if (r1 != r3)\t\t\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+    type r4 = _mm512_mask_reduce_##opname##_##suffix (MASK_VALUE, v.x);\t\\\n+    type r5 = test_mask_reduce_##opname##_##suffix (MASK_VALUE, v.x);\t\\\n+    if (r4 != r5)\t\t\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+    r3 = neutral;\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < SIZE; i++)\t\t\t\t\t\\\n+      if (MASK_VALUE & (1 << i))\t\t\t\t\t\\\n+\tr3 = r3 op v.a[i];\t\t\t\t\t\t\\\n+    if (r4 != r3)\t\t\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+    type r6 = _mm512_mask_reduce_##opname##_##suffix (0, v.x);\t\t\\\n+    type r7 = test_mask_reduce_##opname##_##suffix (0, v.x);\t\t\\\n+    if (r6 != r7 || r6 != neutral)\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+#define TEST_EPI32(c1, c2, c3, c4, c5, c6, c7, c8, \\\n+\t\t   c9, c10, c11, c12, c13, c14, c15, c16)\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UNION_TYPE (AVX512F_LEN, i_d) v;\t\t\t\t\t\\\n+    v.x = _mm512_set_epi32 (c1, c2, c3, c4, c5, c6, c7, c8,\t\t\\\n+\t\t\t    c9, c10, c11, c12, c13, c14, c15, c16);\t\\\n+    TESTOP (add, +, int, epi32, 0);\t\t\t\t\t\\\n+    TESTOP (mul, *, int, epi32, 1);\t\t\t\t\t\\\n+    TESTOP (and, &, int, epi32, ~0);\t\t\t\t\t\\\n+    TESTOP (or, |, int, epi32, 0);\t\t\t\t\t\\\n+    TESTOP (min, < v.a[i] ? r3 :, int, epi32, __INT_MAX__);\t\t\\\n+    TESTOP (max, > v.a[i] ? r3 :, int, epi32, -__INT_MAX__ - 1);\t\\\n+    TESTOP (min, < (unsigned) v.a[i] ? r3 :, unsigned, epu32, ~0U);\t\\\n+    TESTOP (max, > (unsigned) v.a[i] ? r3 :, unsigned, epu32, 0);\t\\\n+  } while (0)\n+\n+#define TEST_PS(c1, c2, c3, c4, c5, c6, c7, c8, \\\n+\t\tc9, c10, c11, c12, c13, c14, c15, c16)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UNION_TYPE (AVX512F_LEN, ) v;\t\t\t\t\t\\\n+    v.x = _mm512_set_ps (c1, c2, c3, c4, c5, c6, c7, c8,\t\t\\\n+\t\t\t c9, c10, c11, c12, c13, c14, c15, c16);\t\\\n+    TESTOP (add, +, float, ps, 0.0f);\t\t\t\t\t\\\n+    TESTOP (mul, *, float, ps, 1.0f);\t\t\t\t\t\\\n+    TESTOP (min, < v.a[i] ? r3 :, float, ps, __builtin_inff ());\t\\\n+    TESTOP (max, > v.a[i] ? r3 :, float, ps, -__builtin_inff ());\t\\\n+  } while (0)\n+\n+static void\n+test_epi32_ps (void)\n+{\n+  TEST_EPI32 (1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4);\n+  TEST_EPI32 (-1, 15, -1, 7, -1, 7, -1, -1, 6, 6, -1, -1, -1, -1, 7, 6);\n+  TEST_PS (1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4);\n+  TEST_PS (1.25f, 2.25f, -0.25f, 4.0f, -2.0f, 4.0f, -3.0f, 2.0f,\n+           -0.5f, -1.0f, 1.0f, -1.0f, 1.0f, 1.0f, 2.0f, 4.0f);\n+}\n+\n+#undef SIZE\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+#define TEST_EPI64(c1, c2, c3, c4, c5, c6, c7, c8) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UNION_TYPE (AVX512F_LEN, i_q) v;\t\t\t\t\t\\\n+    v.x = _mm512_set_epi64 (c1, c2, c3, c4, c5, c6, c7, c8);\t\t\\\n+    TESTOP (add, +, long long, epi64, 0);\t\t\t\t\\\n+    TESTOP (mul, *, long long, epi64, 1);\t\t\t\t\\\n+    TESTOP (and, &, long long, epi64, ~0LL);\t\t\t\t\\\n+    TESTOP (or, |, long long, epi64, 0);\t\t\t\t\\\n+    TESTOP (min, < v.a[i] ? r3 :, long long, epi64, __LONG_LONG_MAX__);\t\\\n+    TESTOP (max, > v.a[i] ? r3 :, long long, epi64,\t\t\t\\\n+\t    -__LONG_LONG_MAX__ - 1);\t\t\t\t\t\\\n+    TESTOP (min, < (unsigned long long) v.a[i] ? r3 :,\t\t\t\\\n+\t    unsigned long long, epu64, ~0ULL);\t\t\t\t\\\n+    TESTOP (max, > (unsigned long long) v.a[i] ? r3 :,\t\t\t\\\n+\t    unsigned long long, epu64, 0);\t\t\t\t\\\n+  } while (0)\n+\n+#define TEST_PD(c1, c2, c3, c4, c5, c6, c7, c8) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UNION_TYPE (AVX512F_LEN, d) v;\t\t\t\t\t\\\n+    v.x = _mm512_set_pd (c1, c2, c3, c4, c5, c6, c7, c8);\t\t\\\n+    TESTOP (add, +, double, pd, 0.0);\t\t\t\t\t\\\n+    TESTOP (mul, *, double, pd, 1.0);\t\t\t\t\t\\\n+    TESTOP (min, < v.a[i] ? r3 :, double, pd, __builtin_inf ());\t\\\n+    TESTOP (max, > v.a[i] ? r3 :, double, pd, -__builtin_inf ());\t\\\n+  } while (0)\n+\n+static void\n+test_epi64_pd (void)\n+{\n+  TEST_EPI64 (1, 2, 3, 4, 5, 6, 6, 5);\n+  TEST_EPI64 (-1, 15, -1, 7, -1, 7, -1, -1);\n+  TEST_PD (1, 2, 3, 4, 5, 6, 6, 5);\n+  TEST_PD (1.25f, 2.25f, -0.25f, 4.0f, -2.0f, 4.0f, -3.0f, 2.0f);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  test_epi32_ps ();\n+  test_epi64_pd ();\n+}"}]}