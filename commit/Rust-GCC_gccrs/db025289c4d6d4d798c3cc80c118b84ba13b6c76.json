{"sha": "db025289c4d6d4d798c3cc80c118b84ba13b6c76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwMjUyODljNGQ2ZDRkNzk4YzNjYzgwYzExOGI4NGJhMTNiNmM3Ng==", "commit": {"author": {"name": "Bruce Korb", "email": "autogen@linuxbox.com", "date": "1999-10-19T13:22:45Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "1999-10-19T13:22:45Z"}, "message": "use genfixes within Makefile.in and move comments to README\n\nFrom-SVN: r30086", "tree": {"sha": "e94b9f109e679de5254141f785b29f14d54a84a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e94b9f109e679de5254141f785b29f14d54a84a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db025289c4d6d4d798c3cc80c118b84ba13b6c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db025289c4d6d4d798c3cc80c118b84ba13b6c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db025289c4d6d4d798c3cc80c118b84ba13b6c76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db025289c4d6d4d798c3cc80c118b84ba13b6c76/comments", "author": null, "committer": null, "parents": [{"sha": "0c70c30f29b27ba2020262a8a77f516403b8c5ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c70c30f29b27ba2020262a8a77f516403b8c5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c70c30f29b27ba2020262a8a77f516403b8c5ca"}], "stats": {"total": 365, "additions": 239, "deletions": 126}, "files": [{"sha": "fa012f66d06026a006368213d4e5df62c9bf62cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db025289c4d6d4d798c3cc80c118b84ba13b6c76", "patch": "@@ -1,3 +1,11 @@\n+1999-10-19  Bruce Korb  <autogen@linuxbox.com>\n+\n+        * fixinc/Makefile.in: Change the generation rules to run `genfixes'\n+        in the source tree when the generated targets are out of date\n+        * fixinc/genfixes: Alter it to run individual fixes for make.\n+\t* fixinc/README: rewrite\n+\t* fixinc/inclhack.def: moved initial comments to README\n+\n Tue Oct 19 14:01:34 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* toplev.c (main): Do not generate an error message if an"}, {"sha": "8c3f5dcfa479f81a35bb8b965e06e718e28aa2ed", "filename": "gcc/fixinc/Makefile.in", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2Ffixinc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2Ffixinc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FMakefile.in?ref=db025289c4d6d4d798c3cc80c118b84ba13b6c76", "patch": "@@ -76,7 +76,7 @@ gen : $(SH_TARGET) fixincl.x\n \n $(FIOBJ): $(HDR)\n \n-fixincl: $(FIOBJ)\n+fixincl: $(FIOBJ) fixfixes fixtests\n \t@echo $(CC) -o $@ $(FIOBJ) $(LIBERTY) $(LIB) ; \\\n \tif $(CC) -o $@ $(FIOBJ) $(LIBERTY) $(LIB) ; then : ; else \\\n \trm -f $@ ; (echo \"#! /bin/sh\" ; echo exit 1 ) > $@ ; \\\n@@ -99,33 +99,13 @@ server.o : server.c server.h\n procopen.o : procopen.c server.h\n \n fixincl.x: fixincl.tpl inclhack.def\n-\t@if ( autogen --help > /dev/null 2>&1 ) ; then \\\n-\t\techo autogen -T fixincl.tpl -b fixincl inclhack.def ; \\\n-\t\tautogen -T $(srcdir)/fixincl.tpl -b fixincl \\\n-\t\t\t$(srcdir)/inclhack.def ; \\\n-\telse echo You need to install autogen ; \\\n-\t\tif [ `pwd` != `cd $(srcdir) ; pwd` ] ; then \\\n-\t\t\tcp $(srcdir)/$@ . ; \\\n-\t\telse touch $@ ; fi ; fi\n+\tcd $(srcdir) ; ./genfixes $@\n \n inclhack.sh: inclhack.def inclhack.tpl hackshell.tpl\n-\t@if ( autogen --help > /dev/null 2>&1 ) ; then \\\n-\t\techo autogen inclhack.def ; \\\n-\t\tautogen -L$(srcdir) $(srcdir)/inclhack.def ; \\\n-\telse echo You need to install autogen ; \\\n-\t\tif [ `pwd` != `cd $(srcdir) ; pwd` ] ; then \\\n-\t\t\tcp $(srcdir)/$@ . ; \\\n-\t\telse touch $@ ; fi ; fi\n+\tcd $(srcdir) ; ./genfixes $@\n \n fixincl.sh: inclhack.def inclhack.tpl\n-\t@if ( autogen --help > /dev/null 2>&1 ) ; then \\\n-\t\techo autogen -DPROGRAM=1 -b fixincl inclhack.def ; \\\n-\t\tautogen -DPROGRAM=1 -b fixincl -L$(srcdir) \\\n-\t\t\t$(srcdir)/inclhack.def ; touch $@ ; \\\n-\telse echo You need to install autogen ; \\\n-\t\tif [ `pwd` != `cd $(srcdir) ; pwd` ] ; then \\\n-\t\t\tcp $(srcdir)/$@ . ; \\\n-\t\telse touch $@ ; fi ; fi\n+\tcd $(srcdir) ; ./genfixes $@\n \n clean:\n \trm -f *.o $(TARGETS) fixincl.x"}, {"sha": "85117f475502d79cf2dd1d0058811badb6667cc3", "filename": "gcc/fixinc/README", "status": "modified", "additions": 181, "deletions": 37, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2Ffixinc%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2Ffixinc%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FREADME?ref=db025289c4d6d4d798c3cc80c118b84ba13b6c76", "patch": "@@ -1,42 +1,13 @@\n \n-The fast-fixincludes system now, to the best of our collective belief,\n-correctly implements exactly the same functionality as the previous\n-fixincludes and fixinc.* shell scripts.  On systems where many fixes\n-are required, this is accomplished by putting most of the\n-functionality into a binary executable.  On systems that had dedicated\n-fixinc.* shell scripts, those scripts are still used by default until\n-they can be converted.\n+FIXINCLUDES OPERATION\n+=====================\n \n-POSSIBLE PROBLEMS\n-\n-There may be some systems on which the fixinc binary program appears\n-to be functional, but fails to work.  Current thinking is that this\n-is due to some new process limitations (fork() calls) on those\n-systems.  If you are experiencing this problem, then copy the script\n-${src}/gcc/fixinc/inclhack.sh into ${builddir}/gcc/fixinc.sh and run\n-make again.\n-\n-And, *please* also report the problem with a description of\n-the failure mode (symptoms) and the output from:\n-\n-        egcs/config.guess\n-\n-to me:  Bruce Korb <fixincludes@autogen.freeservers.com>\n-\n-TO DO\n-\n-* fixincl needs to be converted to use gcc's system.h, libiberty, and\n-  other portability frameworks.\n-\n-\n-THEORY OF OPERATION\n-\n-See also:  http://autogen.freeservers.com\n+See also:  http://autogen.linuxbox.com/fixincludes\n \n The set of fixes required was distilled down to just the data required\n to specify what needed to happen for each fix.  Those data were edited\n into a new file named gcc/fixinc/inclhack.def.  A program called\n-AutoGen (http://autogen.freeservers.com) uses these definitions to\n+AutoGen (http://autogen.linuxbox.com) uses these definitions to\n instantiate several different templates (gcc/fixinc/*.tpl) that then\n produces a fixincludes replacement shell script (inclhack.sh), a\n replacement binary program (fixincl.x) and a script to drive the\n@@ -51,9 +22,182 @@ use the current fixinc.* for that system instead.\n \n Usually, the mkfixinc.sh script will be able to detect when\n the binary is not runable.  If you do have problems, however,\n-please see \"POSSIBLE PROBLEMS\" above.  Thank you.\n+please try configuring \"--without-fast-fixincludes\".  Thank you.\n \n Regards,\n-\tBruce <fixincludes@autogen.freeservers.com>\n-\tRobert <RobertLipe@usa.net>\n-\tManfred <manfred@s-direktnet.de>\n+\tBruce <autogen@linuxbox.com>\n+\n+\n+\n+POSSIBLE PROBLEMS\n+=================\n+\n+There may be some systems on which the fixinc binary program appears\n+to be functional, but fails to work.  If you are experiencing this\n+problem, then copy the script ${src}/gcc/fixinc/inclhack.sh into\n+${builddir}/gcc/fixinc.sh and run make again.\n+\n+And, *please* also report the problem with a description of\n+the failure mode (symptoms) and the output from:\n+\n+        egcs/config.guess\n+\n+to me:  Bruce Korb <autogen@linuxbox.com>\n+\n+\n+\n+GCC MAINTAINER INFORMATION\n+==========================\n+\n+If you are having some problem with a system header that is either\n+broken by the manufacturer, or is broken by the fixinclude process,\n+then you will need to alter or add information to the include fix\n+definitions file, ``inclhack.def''.  Please also send relevant\n+information to gcc-bugs@gcc.gnu.org, gcc-patches@gcc.gnu.org and,\n+please, to me:  autogen@linuxbox.com.\n+\n+Here are the rules for making fixes in the inclhack.def file:\n+\n+1.  Every fix must have a \"hackname\" that is compatible with C syntax\n+    for variable names and is unique without regard to alphabetic case.\n+    Please keep them alphabetical by this name.  :-)\n+\n+2.  If the problem is known to exist only in certain files,\n+    then name each such file with a \"files = \" entry.\n+\n+3.  It is relatively expensive to fire off a process to fix a source\n+    file, therefore write apply tests to avoid unnecessary fix\n+    processes.  The preferred apply tests are \"select\", \"bypass\" and\n+    \"c_test\" because they are performed internally.  \"test\" sends\n+    a command to a server shell that actually fires off one or more\n+    processes to do the testing.  Avoid it, if you can, but it is\n+    still more efficient than a fix process.\n+\n+    These tests are required to:\n+\n+    1.  Be positive for all header files that require the fix.\n+\n+    It is desireable to:\n+\n+    2.  Be negative as often as possible whenever the fix is not\n+        required, avoiding the process overhead.\n+\n+    It is nice if:\n+\n+    3.  The expression is as simple as possible to both\n+        process and uderstand by people.  :-)\n+\n+        Please take advantage of the fact AutoGen will glue\n+        together string fragments.  It helps.  Also take note\n+        that double quote strings and single quote strings have\n+        different formation rules.  Double quote strings are\n+        a tiny superset of C string syntax.  Single quote strings\n+        follow shell single quote string formation rules, except\n+        that the backslash is processed before '\\\\', '\\'' and '#'\n+        characters (using C character syntax).\n+\n+    Examples of test specifications:\n+\n+      hackname = broken_assert_stdio;\n+      files    = assert.h;\n+      select   = stderr;\n+      bypass   = \"include.*stdio.h\";\n+\n+    The ``broken_assert_stdio'' fix will be applied only to a file\n+    named \"assert.h\" if it contains the string \"stderr\" _and_ it\n+    does _not_ contain the expression \"include.*stdio.h\".\n+\n+      hackname = no_double_slash;\n+      c_test   = \"double_slash\";\n+\n+    The ``no_double_slash'' fix will be applied if the\n+    ``double_slash_test()'' function says to.  See ``fixtests.c''\n+    for documentation on how to include new functions into that\n+    module.\n+\n+4.  There are currently four methods of fixing a file:\n+\n+    1.  a series of sed expressions.  Each will be an individual\n+        \"-e\" argument to a single invocation of sed.\n+\n+    2.  a shell script.  These scripts are _required_ to read all\n+        of stdin in order to avoid pipe stalls.  They may choose to\n+        discard the input.\n+\n+    3.  A C language subroutine method for both tests and fixes.\n+\n+    4.  Replacement text.  If the replacement is empty, then\n+        no fix is applied.  Otherwise, the replacement text is written\n+        to the output file and no further fixes are applied.\n+\n+        Replacement text \"fixes\" must be first in this file!!\n+\n+    Examples of fixes:\n+    ------------------\n+\n+      hackname = AAA_ki_iface;\n+      replace; /* empty replacement -> no fixing the file */\n+\n+    When this ``fix'' is invoked, it will prevent any fixes\n+    from being applied.\n+\n+    ------------------\n+\n+      hackname = AAB_svr4_no_varargs;\n+      replace  = \"/* This file was generated by fixincludes.  */\\n\"\n+                 \"#ifndef _SYS_VARARGS_H\\n\"\n+                 \"#define _SYS_VARARGS_H\\n\\n\"\n+\n+                 \"#ifdef __STDC__\\n\"\n+                 \"#include <stdarg.h>\\n\"\n+                 \"#else\\n\"\n+                 \"#include <varargs.h>\\n\"\n+                 \"#endif\\n\\n\"\n+\n+                 \"#endif  /* _SYS_VARARGS_H */\\n\";\n+\n+    When this ``fix'' is invoked, the replacement text will be\n+    emitted into the replacement include file.  No further fixes\n+    will be applied.\n+\n+    ------------------\n+\n+      hackname = dec_intern_asm;\n+      files    = c_asm.h;\n+      sed = \"/^[ \\t]*float[ \\t]*fasm/i\\\\\\n#ifdef __DECC\\n\";\n+      sed = \"/^[ \\t]*#[ \\t]*pragma[ \\t]*intrinsic([ \\t]*dasm/a\\\\\\n\"\n+            \"#endif\\n\";\n+\n+    When this ``fix'' is invoked, sed will be run on the original\n+    file with two \"-e\" arguments.  Since these arguments have double\n+    quoted string values, the strings actually passed to ``sed''\n+    will have been processed in the same fashion that the C compiler\n+    processes its string specifications.  Including the concatenation\n+    of the two pieces of the second sed \"-e\" argument.\n+\n+    ------------------\n+\n+      hackname = m88k_multi_incl;\n+      shell    =\n+        \"echo Fixing $file, to protect against multiple inclusion. >&2\n+        cpp_wrapper=`echo $file | sed -e 's,\\\\.,_,g' -e 's,/,_,g'`\n+        echo \\\"#ifndef __GCC_GOT_${cpp_wrapper}_\\\"\n+        echo \\\"#define __GCC_GOT_${cpp_wrapper}_\\\"\n+        cat\n+        echo \\\"#endif /* ! __GCC_GOT_${cpp_wrapper}_ */\\\"\";\n+\n+    This is a shell script fix.  Note the ``cat'' without any arguments.\n+    This will drain stdin.  If the contents of the file were to be\n+    discarded, you would have to have something like ``cat > /dev/null''\n+    in the script.\n+\n+    ------------------\n+\n+      hackname = no_double_slash;\n+      c_fix    = \"no_double_slash\";\n+\n+    This specifies a fix to be supplied via a hand coded internal\n+    function named ``no_double_slash_fix()''.  See ``fixfixes.c''\n+    for documentation on how to include new functions into that\n+    module.\n+"}, {"sha": "25964a0ea030fa33e6879b1125d49a1a63ec60c3", "filename": "gcc/fixinc/genfixes", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2Ffixinc%2Fgenfixes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2Ffixinc%2Fgenfixes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgenfixes?ref=db025289c4d6d4d798c3cc80c118b84ba13b6c76", "patch": "@@ -3,11 +3,47 @@\n SHELL=/bin/sh\n export SHELL\n \n-echo AutoGen-ing inclhack.sh\n-autogen inclhack.def\n+if [ $# -eq 0 ] ; then\n+  echo AutoGen-ing inclhack.sh\n+  autogen inclhack.def\n \n-echo AutoGen-ing fixincl.x\n-autogen -T fixincl.tpl -b fixincl inclhack.def\n+  echo AutoGen-ing fixincl.x\n+  autogen -T fixincl.tpl -b fixincl inclhack.def\n \n-echo AutoGen-ing fixincl.sh\n-autogen -DPROGRAM=1 -b fixincl inclhack.def\n+  echo AutoGen-ing fixincl.sh\n+  autogen -DPROGRAM=1 -b fixincl inclhack.def\n+  exit 0\n+fi\n+\n+if (autogen --help > /dev/null 2>&1) ; then : ; else\n+  echo \"AutoGen does not appear to be correctly installed.\"\n+  echo \"Please download and install:\"\n+  echo \"   ftp://sourceware.cygnus.com/pub/egcs/infrastructure/autogen.tar.gz\"\n+  exit 1\n+fi\n+\n+set -e\n+\n+case \"$1\" in\n+inclhack.def )\n+  echo AutoGen-ing inclhack.sh\n+  autogen inclhack.sh\n+  ;;\n+\n+fixincl.x )\n+  echo AutoGen-ing fixincl.x\n+  autogen -T fixincl.tpl -b fixincl inclhack.def\n+  ;;\n+\n+fixincl.sh )\n+  echo AutoGen-ing fixincl.sh\n+  autogen -DPROGRAM=1 -b fixincl inclhack.def\n+  ;;\n+\n+* )\n+  echo genfixes cannot create $1\n+  exit 1\n+  ;;\n+esac\n+\n+exit 0"}, {"sha": "43847f8eb5d6b3eafed0ba3a4d3ef13854eb6e21", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 4, "deletions": 59, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db025289c4d6d4d798c3cc80c118b84ba13b6c76/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=db025289c4d6d4d798c3cc80c118b84ba13b6c76", "patch": "@@ -1,69 +1,14 @@\n+\n /* -*- Mode: C -*-  */\n \n autogen definitions inclhack;\n \n /*\n \n-Define all the fixes we know about for repairing damaged headers\n-\n-The rules for making fixes:\n-\n-1.  Every fix must have a \"hackname\" that is compatible with C syntax\n-    for variable names and is unique without regard to alphabetic case.\n-\n-2.  If the problem is known to exist only in certain files,\n-    then name each such file with a \"files = \" entry.\n-\n-3.  It is relatively expensive to fire off a process to fix a source\n-    file, therefore write apply tests to avoid unnecessary fix\n-    processes.  The preferred apply tests are \"select\" and \"bypass\"\n-    because they are performed internally.  \"test\" sends a command\n-    to a server shell that actually fires off one or more processes\n-    to do the testing.  Avoid it, if you can, but it is still more\n-    efficient than a fix process.\n-\n-    These tests are required to:\n-\n-    1.  Be positive for all header files that require the fix.\n-\n-    It is desireable to:\n-\n-    2.  Be negative as often as possible whenever the fix is not\n-        required, avoiding the process overhead.\n-\n-    It is nice if:\n-\n-    3.  The expression is as simple as possible to both\n-        process and uderstand by people.  :-)\n-\n-        Please take advantage of the fact AutoGen will glue\n-        together string fragments.  It helps.  Also take note\n-        that double quote strings and single quote strings have\n-        different formation rules.  Double quote strings are\n-        a tiny superset of C string syntax.  Single quote strings\n-        follow shell single quote string formation rules, except\n-        that the backslash is processed before '\\\\', '\\'' and '#'\n-        characters (using C character syntax).\n-\n-4.  There are currently four methods of fixing a file:\n-\n-    1.  a series of sed expressions.  Each will be an individual\n-        \"-e\" argument to a single invocation of sed.\n-\n-    2.  a shell script.  These scripts are _required_ to read all\n-        of stdin in order to avoid pipe stalls.  They may choose to\n-        discard the input.\n-\n-    3.  A C language subroutine method for both tests and fixes.\n-\n-    4.  Replacement text.  If the replacement is empty, then\n-        no fix is applied.  Otherwise, the replacement text is written\n-        to the output file and no further fixes are applied.\n-\n-        Replacement text \"fixes\" must be first in this file!!\n-\n+Define all the fixes we know about for repairing damaged headers.\n+Please see the README before adding or changing entries in this file.\n \n-    Now, first:  DO NOT DO BROKEN FIXES (empty replacement fixes) */\n+Now, first:  DO NOT DO BROKEN FIXES (empty replacement fixes) */\n \n \n /*"}]}