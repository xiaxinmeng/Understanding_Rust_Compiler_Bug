{"sha": "6f7585deedc140667fd496b48c9fc4f7d625605c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3NTg1ZGVlZGMxNDA2NjdmZDQ5NmI0OGM5ZmM0ZjdkNjI1NjA1Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-05-24T22:36:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-05-26T14:47:46Z"}, "message": "jit: check for void types [PR 95296]\n\nPR jit/95296 reports an ICE when using libgccjit to create a local of void\ntype.\n\nThis patch adds checking to various API entrypoints in libgccjit.c so that\nthey fail gracefully with an error if the client code attempts to create\nvarious kinds of rvalues or types involving void types.\nThe patch documents these and various pre-existing restrictions on types\nin the API.\n\ngcc/jit/ChangeLog:\n\tPR jit/95296\n\t* docs/topics/expressions.rst (Unary Operations): Document that\n\tresult_type of gcc_jit_context_new_unary_op must be a numeric type.\n\t(Binary Operations): Likewise for gcc_jit_context_new_binary_op.\n\t(Global variables): Document that \"type\" of\n\tgcc_jit_context_new_global must be non-`void`.\n\t* docs/topics/function-pointers.rst\n\t(gcc_jit_context_new_function_ptr_type): Document that the\n\tparam_types must be non-void, but that return_type may be.\n\t* docs/topics/functions.rst (Params): Document that\n\tgcc_jit_context_new_param's type must be non-void.\n\t(Functions): Likewise for gcc_jit_function_new_local.\n\t* docs/topics/types.rst (gcc_jit_context_new_array_type): Document\n\tthat the type must be non-void.\n\t(gcc_jit_context_new_field): Likewise.\n\t* docs/_build/texinfo/Makefile: Regenerate.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* libgccjit.c (gcc_jit_context_new_array_type): Fail if\n\telement_type is void.\n\t(gcc_jit_context_new_field): Likewise for \"type\".\n\t(gcc_jit_context_new_function_ptr_type): Likewise for each\n\telement of param_types.\n\t(gcc_jit_context_new_param): Likewise for \"type\".\n\t(gcc_jit_context_new_global): Likewise.\n\t(gcc_jit_function_new_local): Likewise.\n\t(gcc_jit_type_get_aligned): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/95296\n\t* jit.dg/test-error-gcc_jit_context_new_global-void-type.c: New\n\ttest.\n\t* jit.dg/test-error-gcc_jit_function_new_local-void-type.c: New\n\ttest.\n\t* jit.dg/test-fuzzer.c (fuzzer_init): Allow for make_random_type\n\tto return NULL.\n\t(get_random_type): Allow for elements in f->types to be NULL.", "tree": {"sha": "c95d7f29482b6cb3ca5575d40475f4262ffa8fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c95d7f29482b6cb3ca5575d40475f4262ffa8fea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f7585deedc140667fd496b48c9fc4f7d625605c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7585deedc140667fd496b48c9fc4f7d625605c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7585deedc140667fd496b48c9fc4f7d625605c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7585deedc140667fd496b48c9fc4f7d625605c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6232d02b4fce4c67d39815aa8fb956e4b10a4e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b"}], "stats": {"total": 4077, "additions": 1478, "deletions": 2599}, "files": [{"sha": "81c60f502bfa6fbf9409cf33f6a9632050493abf", "filename": "gcc/jit/docs/_build/texinfo/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2FMakefile?ref=6f7585deedc140667fd496b48c9fc4f7d625605c", "patch": "@@ -43,8 +43,8 @@ uninstall-info: info\n \t-$(TEXI2PDF) '$<'\n \n clean:\n-\t-rm -f *.info *.pdf *.txt *.html\n-\t-rm -f *.log *.ind *.aux *.toc *.syn *.idx *.out *.ilg *.pla *.ky *.pg\n-\t-rm -f *.vr *.tp *.fn *.fns *.def *.defs *.cp *.cps *.ge *.ges *.mo\n+\trm -f *.info *.pdf *.txt *.html\n+\trm -f *.log *.ind *.aux *.toc *.syn *.idx *.out *.ilg *.pla *.ky *.pg\n+\trm -f *.vr *.tp *.fn *.fns *.def *.defs *.cp *.cps *.ge *.ges *.mo\n \n .PHONY: all info plaintext html pdf install-info uninstall-info clean"}, {"sha": "8795b1d08dc82d2ebe91c7f4f7e653312ff51486", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 1377, "deletions": 2588, "changes": 3965, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=6f7585deedc140667fd496b48c9fc4f7d625605c"}, {"sha": "d783ceea51a801c0d49af84d6cac5ce34bf2b144", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=6f7585deedc140667fd496b48c9fc4f7d625605c", "patch": "@@ -162,6 +162,8 @@ Unary Operations\n \n    Build a unary operation out of an input rvalue.\n \n+   The parameter ``result_type`` must be a numeric type.\n+\n .. type:: enum gcc_jit_unary_op\n \n The available unary operations are:\n@@ -227,6 +229,8 @@ Binary Operations\n \n    Build a binary operation out of two constituent rvalues.\n \n+   The parameter ``result_type`` must be a numeric type.\n+\n .. type:: enum gcc_jit_binary_op\n \n The available binary operations are:\n@@ -547,6 +551,8 @@ Global variables\n \n    Add a new global variable of the given type and name to the context.\n \n+   The parameter ``type`` must be non-`void`.\n+\n    The parameter ``name`` must be non-NULL.  The call takes a copy of the\n    underlying string, so it is valid to pass in a pointer to an on-stack\n    buffer."}, {"sha": "7d2fa8b278dfbbb55d3efcbf5f3f3ce5bf42df40", "filename": "gcc/jit/docs/topics/function-pointers.rst", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunction-pointers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunction-pointers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunction-pointers.rst?ref=6f7585deedc140667fd496b48c9fc4f7d625605c", "patch": "@@ -78,3 +78,5 @@ Here's an example of creating a function pointer type corresponding to C's\n \n    Generate a :c:type:`gcc_jit_type` for a function pointer with the\n    given return type and parameters.\n+\n+   Each of `param_types` must be non-`void`; `return_type` may be `void`."}, {"sha": "29ce96c1e56f15cef44da38927a7c9ce4f19f5b4", "filename": "gcc/jit/docs/topics/functions.rst", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst?ref=6f7585deedc140667fd496b48c9fc4f7d625605c", "patch": "@@ -35,6 +35,8 @@ Params\n    In preparation for creating a function, create a new parameter of the\n    given type and name.\n \n+   The parameter ``type`` must be non-`void`.\n+\n    The parameter ``name`` must be non-NULL.  The call takes a copy of the\n    underlying string, so it is valid to pass in a pointer to an on-stack\n    buffer.\n@@ -148,6 +150,8 @@ Functions\n    Create a new local variable within the function, of the given type and\n    name.\n \n+   The parameter ``type`` must be non-`void`.\n+\n    The parameter ``name`` must be non-NULL.  The call takes a copy of the\n    underlying string, so it is valid to pass in a pointer to an on-stack\n    buffer."}, {"sha": "ea7c8ff4542d6781f85873e48c133b1eb72da56f", "filename": "gcc/jit/docs/topics/types.rst", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst?ref=6f7585deedc140667fd496b48c9fc4f7d625605c", "patch": "@@ -115,13 +115,13 @@ Pointers, `const`, and `volatile`\n                                                gcc_jit_type *element_type, \\\n                                                int num_elements)\n \n-   Given type \"T\", get type \"T[N]\" (for a constant N).\n+   Given non-`void` type \"T\", get type \"T[N]\" (for a constant N).\n \n .. function::  gcc_jit_type *\\\n                gcc_jit_type_get_aligned (gcc_jit_type *type, \\\n                                          size_t alignment_in_bytes)\n \n-   Given type \"T\", get type:\n+   Given non-`void` type \"T\", get type:\n \n    .. code-block:: c\n \n@@ -243,6 +243,8 @@ You can model C `struct` types by creating :c:type:`gcc_jit_struct *` and\n \n    Construct a new field, with the given type and name.\n \n+   The parameter ``type`` must be non-`void`.\n+\n    The parameter ``name`` must be non-NULL.  The call takes a copy of the\n    underlying string, so it is valid to pass in a pointer to an on-stack\n    buffer."}, {"sha": "3d04f6db3affd18443efd8dad19a0156bd616e06", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=6f7585deedc140667fd496b48c9fc4f7d625605c", "patch": "@@ -527,6 +527,8 @@ gcc_jit_context_new_array_type (gcc_jit_context *ctxt,\n   /* LOC can be NULL.  */\n   RETURN_NULL_IF_FAIL (element_type, ctxt, loc, \"NULL type\");\n   RETURN_NULL_IF_FAIL (num_elements >= 0, ctxt, NULL, \"negative size\");\n+  RETURN_NULL_IF_FAIL (!element_type->is_void (), ctxt, loc,\n+\t\t       \"void type for elements\");\n \n   return (gcc_jit_type *)ctxt->new_array_type (loc,\n \t\t\t\t\t       element_type,\n@@ -556,6 +558,11 @@ gcc_jit_context_new_field (gcc_jit_context *ctxt,\n     \"unknown size for field \\\"%s\\\" (type: %s)\",\n     name,\n     type->get_debug_string ());\n+  RETURN_NULL_IF_FAIL_PRINTF1 (\n+    !type->is_void (),\n+    ctxt, loc,\n+    \"void type for field \\\"%s\\\"\",\n+    name);\n \n   return (gcc_jit_field *)ctxt->new_field (loc, type, name);\n }\n@@ -786,10 +793,15 @@ gcc_jit_context_new_function_ptr_type (gcc_jit_context *ctxt,\n     ctxt, loc,\n     \"NULL param_types creating function pointer type\");\n   for (int i = 0; i < num_params; i++)\n-    RETURN_NULL_IF_FAIL_PRINTF1 (\n-      param_types[i],\n-      ctxt, loc,\n-      \"NULL parameter type %i creating function pointer type\", i);\n+    {\n+      RETURN_NULL_IF_FAIL_PRINTF1 (param_types[i],\n+\t\t\t\t   ctxt, loc,\n+\t\t\t\t   \"NULL parameter type %i\"\n+\t\t\t\t   \" creating function pointer type\", i);\n+      RETURN_NULL_IF_FAIL_PRINTF1 (!param_types[i]->is_void (),\n+\t\t\t\t   ctxt, loc,\n+\t\t\t\t   \"void type for param %i\", i);\n+    }\n \n   return (gcc_jit_type*)\n     ctxt->new_function_ptr_type (loc, return_type,\n@@ -816,6 +828,9 @@ gcc_jit_context_new_param (gcc_jit_context *ctxt,\n   /* LOC can be NULL.  */\n   RETURN_NULL_IF_FAIL (type, ctxt, loc, \"NULL type\");\n   RETURN_NULL_IF_FAIL (name, ctxt, loc, \"NULL name\");\n+  RETURN_NULL_IF_FAIL_PRINTF1 (!type->is_void (),\n+\t\t\t       ctxt, loc,\n+\t\t\t       \"void type for param \\\"%s\\\"\", name);\n \n   return (gcc_jit_param *)ctxt->new_param (loc, type, name);\n }\n@@ -1093,6 +1108,11 @@ gcc_jit_context_new_global (gcc_jit_context *ctxt,\n     \"unknown size for global \\\"%s\\\" (type: %s)\",\n     name,\n     type->get_debug_string ());\n+  RETURN_NULL_IF_FAIL_PRINTF1 (\n+    !type->is_void (),\n+    ctxt, loc,\n+    \"void type for global \\\"%s\\\"\",\n+    name);\n \n   return (gcc_jit_lvalue *)ctxt->new_global (loc, kind, type, name);\n }\n@@ -1911,6 +1931,11 @@ gcc_jit_function_new_local (gcc_jit_function *func,\n     \"unknown size for local \\\"%s\\\" (type: %s)\",\n     name,\n     type->get_debug_string ());\n+  RETURN_NULL_IF_FAIL_PRINTF1 (\n+    !type->is_void (),\n+    ctxt, loc,\n+    \"void type for local \\\"%s\\\"\",\n+    name);\n \n   return (gcc_jit_lvalue *)func->new_local (loc, type, name);\n }\n@@ -3068,6 +3093,7 @@ gcc_jit_type_get_aligned (gcc_jit_type *type,\n     (pow2_or_zerop (alignment_in_bytes), ctxt, NULL,\n      \"alignment not a power of two: %zi\",\n      alignment_in_bytes);\n+  RETURN_NULL_IF_FAIL (!type->is_void (), ctxt, NULL, \"void type\");\n \n   return (gcc_jit_type *)type->get_aligned (alignment_in_bytes);\n }"}, {"sha": "c310da6a885a01b13fe00d3a62d3131e424823bd", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_context_new_global-void-type.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_new_global-void-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_new_global-void-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_new_global-void-type.c?ref=6f7585deedc140667fd496b48c9fc4f7d625605c", "patch": "@@ -0,0 +1,25 @@\n+#include <libgccjit.h>\n+\n+#include \"harness.h\"\n+\n+/* Try to create a \"void\" global; the API ought to complain.  */\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_type *void_type\n+    = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_context_new_global (ctxt, NULL, GCC_JIT_GLOBAL_EXPORTED,\n+\t\t\t      void_type, \"i\");\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_context_new_global:\"\n+\t\t      \" void type for global \\\"i\\\"\");\n+}"}, {"sha": "254abc0c14696b8b9233f1c1a691b537c8f649e0", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_function_new_local-void-type.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_function_new_local-void-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_function_new_local-void-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_function_new_local-void-type.c?ref=6f7585deedc140667fd496b48c9fc4f7d625605c", "patch": "@@ -0,0 +1,27 @@\n+#include <libgccjit.h>\n+\n+#include \"harness.h\"\n+\n+/* Try to create a \"void\" local; the API ought to complain.  */\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+    gcc_jit_type *void_type\n+      = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+    gcc_jit_function *func\n+      = gcc_jit_context_new_function (ctxt, NULL, GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t      void_type, \"test_fn\", 0, NULL, 0);\n+    gcc_jit_function_new_local(func, NULL, void_type, \"i\");\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_function_new_local:\"\n+\t\t      \" void type for local \\\"i\\\"\");\n+}"}, {"sha": "4fd49dacf6d4f0722f235944b3d26497d03c11ff", "filename": "gcc/testsuite/jit.dg/test-fuzzer.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-fuzzer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7585deedc140667fd496b48c9fc4f7d625605c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-fuzzer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-fuzzer.c?ref=6f7585deedc140667fd496b48c9fc4f7d625605c", "patch": "@@ -96,7 +96,6 @@ fuzzer_init (fuzzer *f, gcc_jit_context *ctxt, unsigned int seed)\n   for (i = 0; i < num_types; i++)\n     {\n       gcc_jit_type *type = make_random_type (f);\n-      assert (type);\n       f->types[f->num_types++] = type;\n     }\n \n@@ -188,7 +187,6 @@ get_random_type (fuzzer *f)\n   if (i < NUM_TYPES)\n     return gcc_jit_context_get_type (f->ctxt, types[i]);\n   assert ((i - NUM_TYPES) < f->num_types);\n-  assert (f->types[i - NUM_TYPES]);\n   return f->types[i - NUM_TYPES];\n }\n "}]}