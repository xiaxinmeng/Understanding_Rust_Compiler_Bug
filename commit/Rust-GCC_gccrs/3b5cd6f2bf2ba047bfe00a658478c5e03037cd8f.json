{"sha": "3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1Y2Q2ZjJiZjJiYTA0N2JmZTAwYTY1ODQ3OGM1ZTAzMDM3Y2Q4Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-06T15:45:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-06T15:45:10Z"}, "message": "re PR c++/53862 ([C++11] sorry, unimplemented: use of 'type_pack_expansion' in template)\n\n\tPR c++/53862\n\t* pt.c (tsubst_arg_types): Add \"end\" parameter.\n\t(check_undeduced_parms): Use it.\n\nFrom-SVN: r189334", "tree": {"sha": "7e5d952e473656b625d4c3337c1c40088b94a970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e5d952e473656b625d4c3337c1c40088b94a970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df947b0a640b9c8306e4ef0a64a330df9f82b46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df947b0a640b9c8306e4ef0a64a330df9f82b46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df947b0a640b9c8306e4ef0a64a330df9f82b46e"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "f40753924450175f4d8fecaa42f483a8973ade93", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f", "patch": "@@ -1,5 +1,9 @@\n 2012-07-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53862\n+\t* pt.c (tsubst_arg_types): Add \"end\" parameter.\n+\t(check_undeduced_parms): Use it.\n+\n \t* cp-tree.h (DECL_DECLARES_TYPE_P): Check DECL_TYPE_TEMPLATE_P.\n \n \tPR c++/53858"}, {"sha": "72b0c4f18b219c0f74abc8ca8a1f46e0aca28d75", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f", "patch": "@@ -171,7 +171,7 @@ static tree tsubst_template_parms (tree, tree, tsubst_flags_t);\n static void regenerate_decl_from_template (tree, tree);\n static tree most_specialized_class (tree, tree, tsubst_flags_t);\n static tree tsubst_aggr_type (tree, tree, tsubst_flags_t, tree, int);\n-static tree tsubst_arg_types (tree, tree, tsubst_flags_t, tree);\n+static tree tsubst_arg_types (tree, tree, tree, tsubst_flags_t, tree);\n static tree tsubst_function_type (tree, tree, tsubst_flags_t, tree);\n static bool check_specialization_scope (void);\n static tree process_partial_specialization (tree);\n@@ -10500,11 +10500,14 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n   return r;\n }\n \n-/* Substitute into the ARG_TYPES of a function type.  */\n+/* Substitute into the ARG_TYPES of a function type.\n+   If END is a TREE_CHAIN, leave it and any following types\n+   un-substituted.  */\n \n static tree\n tsubst_arg_types (tree arg_types,\n \t\t  tree args,\n+\t\t  tree end,\n \t\t  tsubst_flags_t complain,\n \t\t  tree in_decl)\n {\n@@ -10514,11 +10517,11 @@ tsubst_arg_types (tree arg_types,\n   tree expanded_args = NULL_TREE;\n   tree default_arg;\n \n-  if (!arg_types || arg_types == void_list_node)\n+  if (!arg_types || arg_types == void_list_node || arg_types == end)\n     return arg_types;\n \n   remaining_arg_types = tsubst_arg_types (TREE_CHAIN (arg_types),\n-\t\t\t\t\t  args, complain, in_decl);\n+\t\t\t\t\t  args, end, complain, in_decl);\n   if (remaining_arg_types == error_mark_node)\n     return error_mark_node;\n \n@@ -10643,7 +10646,7 @@ tsubst_function_type (tree t,\n     }\n \n   /* Substitute the argument types.  */\n-  arg_types = tsubst_arg_types (TYPE_ARG_TYPES (t), args,\n+  arg_types = tsubst_arg_types (TYPE_ARG_TYPES (t), args, NULL_TREE,\n \t\t\t\tcomplain, in_decl);\n   if (arg_types == error_mark_node)\n     return error_mark_node;\n@@ -16757,12 +16760,9 @@ check_undeduced_parms (tree targs, tree args, tree end)\n       }\n   if (found)\n     {\n-      for (; args != end; args = TREE_CHAIN (args))\n-\t{\n-\t  tree substed = tsubst (TREE_VALUE (args), targs, tf_none, NULL_TREE);\n-\t  if (substed == error_mark_node)\n-\t    return true;\n-\t}\n+      tree substed = tsubst_arg_types (args, targs, end, tf_none, NULL_TREE);\n+      if (substed == error_mark_node)\n+\treturn true;\n     }\n   return false;\n }"}, {"sha": "0e79dc33fb757cf4a3375945f8ba0eb9cb45726b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f", "patch": "@@ -1,5 +1,8 @@\n 2012-07-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53862\n+\t* g++.dg/cpp0x/variadic134.C: New.\n+\n \tPR c++/53858\n \t* g++.dg/cpp0x/alias-decl-20.C: New.\n "}, {"sha": "d4181b02c8e31f2fb2f72fc2182df310f4de3def", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic134.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic134.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic134.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic134.C?ref=3b5cd6f2bf2ba047bfe00a658478c5e03037cd8f", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/53862\n+// { dg-do compile { target c++11 } }\n+\n+typedef unsigned long size_t;\n+\n+template<typename> struct is_scalar { static const bool value = true; };\n+template<bool, typename T> struct enable_if { typedef T type; };\n+\n+template <size_t N, typename... Args>\n+void f(Args...) {}\n+\n+template <size_t N, typename T, typename... Args>\n+typename enable_if<is_scalar<T>::value, void>::type f(T, Args...) {}\n+\n+int main() {\n+    f<1>(1);\n+}"}]}