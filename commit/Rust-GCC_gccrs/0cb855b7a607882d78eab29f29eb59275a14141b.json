{"sha": "0cb855b7a607882d78eab29f29eb59275a14141b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNiODU1YjdhNjA3ODgyZDc4ZWFiMjlmMjllYjU5Mjc1YTE0MTQxYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-12-09T18:24:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-09T18:24:53Z"}, "message": "re PR libstdc++/25288 (std::list insert members should have no effects if an exception is thrown)\n\n2005-12-09  Paolo Carlini  <pcarlini@suse.de>\n\t    Howard Hinnant  <hhinnant@apple.com>\n\n\tPR libstdc++/25288\n\t* include/bits/stl_list.h (list<>::_M_insert_dispatch, _M_fill_insert):\n\tRemove.\n\t(_M_initialize_dispatch, _M_fill_initialize): Add.\n\t(list(size_type, const value_type&, const allocator_type&),\n\tlist(const list&), list(_InputIterator, _InputIterator,\n\tconst allocator_type&): Use the latter.\n\t(insert(iterator, size_type, const value_type&), insert(iterator,\n\t_InputIterator, _InputIterator)): Use construction & splice.\n\t* testsuite/23_containers/list/modifiers/insert/25288.cc: New.\n\t* testsuite/testsuite_allocator.h (class throw_allocator): Add.\n\n\t* include/bits/stl_list.h (list<>::insert, erase): Fix wrong comments.\n\nCo-Authored-By: Howard Hinnant <hhinnant@apple.com>\n\nFrom-SVN: r108313", "tree": {"sha": "9879bdf34403fa29be857b0581633a4fe854420e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9879bdf34403fa29be857b0581633a4fe854420e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cb855b7a607882d78eab29f29eb59275a14141b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb855b7a607882d78eab29f29eb59275a14141b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb855b7a607882d78eab29f29eb59275a14141b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb855b7a607882d78eab29f29eb59275a14141b/comments", "author": null, "committer": null, "parents": [{"sha": "f38c945d06502df344d9cdee1a95121ea4a0745b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38c945d06502df344d9cdee1a95121ea4a0745b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38c945d06502df344d9cdee1a95121ea4a0745b"}], "stats": {"total": 292, "additions": 236, "deletions": 56}, "files": [{"sha": "6cedb5e8ddd6edf696e6269a38d3432b614a2c07", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb855b7a607882d78eab29f29eb59275a14141b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb855b7a607882d78eab29f29eb59275a14141b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0cb855b7a607882d78eab29f29eb59275a14141b", "patch": "@@ -1,3 +1,20 @@\n+2005-12-09  Paolo Carlini  <pcarlini@suse.de>\n+\t    Howard Hinnant  <hhinnant@apple.com>\n+\n+\tPR libstdc++/25288\n+\t* include/bits/stl_list.h (list<>::_M_insert_dispatch, _M_fill_insert):\n+\tRemove.\n+\t(_M_initialize_dispatch, _M_fill_initialize): Add.\n+\t(list(size_type, const value_type&, const allocator_type&),\n+\tlist(const list&), list(_InputIterator, _InputIterator,\n+\tconst allocator_type&): Use the latter.\n+\t(insert(iterator, size_type, const value_type&), insert(iterator,\n+\t_InputIterator, _InputIterator)): Use construction & splice.\n+\t* testsuite/23_containers/list/modifiers/insert/25288.cc: New.\n+\t* testsuite/testsuite_allocator.h (class throw_allocator): Add.\n+\n+\t* include/bits/stl_list.h (list<>::insert, erase): Fix wrong comments.\n+\n 2005-12-08  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_vector.h (vector<>::size, resize, capacity,"}, {"sha": "f93a03224ccbde8bbb7d78416e6478e548819a93", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 51, "deletions": 55, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb855b7a607882d78eab29f29eb59275a14141b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb855b7a607882d78eab29f29eb59275a14141b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=0cb855b7a607882d78eab29f29eb59275a14141b", "patch": "@@ -479,7 +479,7 @@ namespace _GLIBCXX_STD\n       list(size_type __n, const value_type& __value = value_type(),\n \t   const allocator_type& __a = allocator_type())\n       : _Base(__a)\n-      { this->insert(begin(), __n, __value); }\n+      { _M_fill_initialize(__n, __value); }\n \n       /**\n        *  @brief  %List copy constructor.\n@@ -490,7 +490,7 @@ namespace _GLIBCXX_STD\n        */\n       list(const list& __x)\n       : _Base(__x.get_allocator())\n-      { this->insert(begin(), __x.begin(), __x.end()); }\n+      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }\n \n       /**\n        *  @brief  Builds a %list from a range.\n@@ -500,17 +500,16 @@ namespace _GLIBCXX_STD\n        *  Create a %list consisting of copies of the elements from\n        *  [@a first,@a last).  This is linear in N (where N is\n        *  distance(@a first,@a last)).\n-       *\n-       *  @if maint\n-       *  We don't need any dispatching tricks here, because insert does all of\n-       *  that anyway.\n-       *  @endif\n        */\n       template<typename _InputIterator>\n         list(_InputIterator __first, _InputIterator __last,\n \t     const allocator_type& __a = allocator_type())\n         : _Base(__a)\n-        { this->insert(begin(), __first, __last); }\n+        { \n+\t  // Check whether it's an integral type.  If so, it's not an iterator.\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n+\t  _M_initialize_dispatch(__first, __last, _Integral());\n+\t}\n \n       /**\n        *  No explicit dtor needed as the _Base dtor takes care of\n@@ -798,13 +797,15 @@ namespace _GLIBCXX_STD\n        *  This function will insert a specified number of copies of the\n        *  given data before the location specified by @a position.\n        *\n-       *  Due to the nature of a %list this operation can be done in\n-       *  constant time, and does not invalidate iterators and\n-       *  references.\n+       *  This operation is linear in the number of elements inserted and\n+       *  does not invalidate iterators and references.\n        */\n       void\n       insert(iterator __position, size_type __n, const value_type& __x)\n-      { _M_fill_insert(__position, __n, __x); }\n+      {  \n+\tlist __tmp(__n, __x, get_allocator());\n+\tsplice(__position, __tmp);\n+      }\n \n       /**\n        *  @brief  Inserts a range into the %list.\n@@ -816,18 +817,16 @@ namespace _GLIBCXX_STD\n        *  first,@a last) into the %list before the location specified by\n        *  @a position.\n        *\n-       *  Due to the nature of a %list this operation can be done in\n-       *  constant time, and does not invalidate iterators and\n-       *  references.\n+       *  This operation is linear in the number of elements inserted and\n+       *  does not invalidate iterators and references.\n        */\n       template<typename _InputIterator>\n         void\n         insert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n         {\n-\t  // Check whether it's an integral type.  If so, it's not an iterator.\n-\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n-\t  _M_insert_dispatch(__position, __first, __last, _Integral());\n+\t  list __tmp(__first, __last, get_allocator());\n+\t  splice(__position, __tmp);\n \t}\n \n       /**\n@@ -859,13 +858,12 @@ namespace _GLIBCXX_STD\n        *  This function will erase the elements in the range @a\n        *  [first,last) and shorten the %list accordingly.\n        *\n-       *  Due to the nature of a %list this operation can be done in\n-       *  constant time, and only invalidates iterators/references to\n-       *  the element being removed.  The user is also cautioned that\n-       *  this function only erases the elements, and that if the\n-       *  elements themselves are pointers, the pointed-to memory is not\n-       *  touched in any way.  Managing the pointer is the user's\n-       *  responsibilty.\n+       *  This operation is linear time in the size of the range and only\n+       *  invalidates iterators/references to the element being removed.\n+       *  The user is also cautioned that this function only erases the\n+       *  elements, and that if the elements themselves are pointers, the\n+       *  pointed-to memory is not touched in any way.  Managing the pointer\n+       *  is the user's responsibilty.\n        */\n       iterator\n       erase(iterator __first, iterator __last)\n@@ -1071,60 +1069,58 @@ namespace _GLIBCXX_STD\n         sort(_StrictWeakOrdering);\n \n     protected:\n-      // Internal assign functions follow.\n+      // Internal constructor functions follow.\n \n-      // Called by the range assign to implement [23.1.1]/9\n+      // Called by the range constructor to implement [23.1.1]/9\n       template<typename _Integer>\n         void\n-        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n+        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)\n         {\n-\t  _M_fill_assign(static_cast<size_type>(__n),\n-\t\t\t static_cast<value_type>(__val));\n+\t  _M_fill_initialize(static_cast<size_type>(__n),\n+\t\t\t     static_cast<value_type>(__x));\n \t}\n \n-      // Called by the range assign to implement [23.1.1]/9\n+      // Called by the range constructor to implement [23.1.1]/9\n       template<typename _InputIterator>\n         void\n-        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n-\t\t\t   __false_type);\n+        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n+\t\t\t       __false_type)\n+        {\n+\t  for (; __first != __last; ++__first)\n+\t    push_back(*__first);\n+\t}\n \n-      // Called by assign(n,t), and the range assign when it turns out\n+      // Called by list(n,v,a), and the range constructor when it turns out\n       // to be the same thing.\n       void\n-      _M_fill_assign(size_type __n, const value_type& __val);\n+      _M_fill_initialize(size_type __n, const value_type& __x)\n+      {\n+\tfor (; __n > 0; --__n)\n+\t  push_back(__x);\n+      }\n \n \n-      // Internal insert functions follow.\n+      // Internal assign functions follow.\n \n-      // Called by the range insert to implement [23.1.1]/9\n+      // Called by the range assign to implement [23.1.1]/9\n       template<typename _Integer>\n         void\n-        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,\n-\t\t\t   __true_type)\n+        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n         {\n-\t  _M_fill_insert(__pos, static_cast<size_type>(__n),\n-\t\t\t static_cast<value_type>(__x));\n+\t  _M_fill_assign(static_cast<size_type>(__n),\n+\t\t\t static_cast<value_type>(__val));\n \t}\n \n-      // Called by the range insert to implement [23.1.1]/9\n+      // Called by the range assign to implement [23.1.1]/9\n       template<typename _InputIterator>\n         void\n-        _M_insert_dispatch(iterator __pos,\n-\t\t\t   _InputIterator __first, _InputIterator __last,\n-\t\t\t   __false_type)\n-        {\n-\t  for (; __first != __last; ++__first)\n-\t    _M_insert(__pos, *__first);\n-\t}\n+        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n+\t\t\t   __false_type);\n \n-      // Called by insert(p,n,x), and the range insert when it turns out\n+      // Called by assign(n,t), and the range assign when it turns out\n       // to be the same thing.\n       void\n-      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)\n-      {\n-\tfor (; __n > 0; --__n)\n-\t  _M_insert(__pos, __x);\n-      }\n+      _M_fill_assign(size_type __n, const value_type& __val);\n \n \n       // Moves the elements from [first,last) before position."}, {"sha": "a2297180d6b45f36d64b846e56b6bb8f590c96b7", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/insert/25288.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb855b7a607882d78eab29f29eb59275a14141b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb855b7a607882d78eab29f29eb59275a14141b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc?ref=0cb855b7a607882d78eab29f29eb59275a14141b", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.2.3 list modifiers [lib.list.modifiers]\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+// libstdc++/25288\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef __gnu_test::throw_allocator<int> my_alloc;\n+  typedef std::list<int, my_alloc > my_list;\n+\n+  for (int j = 0; j < 10; ++j)\n+    for (int i = 0; i < 10; ++i)\n+      {\n+\tmy_alloc alloc1(j + i);\n+\tmy_list list1(alloc1);\n+\t\n+\tfor (int k = 0; k < j; ++k)\n+\t  list1.push_back(-(k + 1));\n+      \n+\ttry\n+\t  {\n+\t    list1.insert(list1.begin(), 10, 99);\n+\t    VERIFY( false );\n+\t  }\n+\tcatch (std::bad_alloc&)\n+\t  {\n+\t    VERIFY( true );\n+\t  }\n+\tcatch (...)\n+\t  {\n+\t    VERIFY( false );\n+\t  }\n+\t\n+\tVERIFY( list1.size() == my_list::size_type(j) );\n+\tVERIFY( list1.size() == 0 || list1.back() == -j );\n+\tVERIFY( list1.size() == 0 || list1.front() == -1 );\n+\n+\tmy_alloc alloc2(j + i);\n+\tmy_list list2(alloc2);\n+\t\n+\tconst int data[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+\t\n+\tfor (int k = 0; k < j; ++k)\n+\t  list2.push_back(-(k + 1));\n+\t\n+\ttry\n+\t  {\n+\t    list2.insert(list2.begin(), data, data + 10);\n+\t    VERIFY( false );\n+\t  }\n+\tcatch (std::bad_alloc&)\n+\t  {\n+\t    VERIFY( true );\n+\t  }\n+\tcatch (...)\n+\t  {\n+\t    VERIFY( false );\n+\t  }\n+\n+\tVERIFY( list2.size() == my_list::size_type(j) );\n+\tVERIFY( list2.size() == 0 || list2.back() == -j );\n+\tVERIFY( list2.size() == 0 || list2.front() == -1 );\n+      }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "307a0384dc5e36404b51b34979cb4a5ade560b63", "filename": "libstdc++-v3/testsuite/testsuite_allocator.h", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb855b7a607882d78eab29f29eb59275a14141b/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb855b7a607882d78eab29f29eb59275a14141b/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h?ref=0cb855b7a607882d78eab29f29eb59275a14141b", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Testing allocator for the C++ library testsuite.\n //\n-// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -229,6 +229,81 @@ namespace __gnu_test\n \t}\n       throw;\n     }\n+\n+  template<typename Tp>\n+    class throw_allocator\n+    {\n+    public:\n+      typedef std::size_t                         size_type;\n+      typedef std::ptrdiff_t                      difference_type;\n+      typedef Tp*                                 pointer;\n+      typedef const Tp*                           const_pointer;\n+      typedef Tp&                                 reference;\n+      typedef const Tp&                           const_reference;\n+      typedef Tp                                  value_type;\n+      \n+      template<typename Tp1>\n+        struct rebind\n+\t{ typedef throw_allocator<Tp1> other; };\n+\n+      throw_allocator() throw()\n+      : count(size_type(-1)) { }\n+\n+      throw_allocator(size_type c) throw()\n+      : count(c) { }\n+      \n+      template<typename Tp1>\n+        throw_allocator(const throw_allocator<Tp1>& b) throw()\n+\t: count(b.get_count()) { }\n+\n+      size_type get_count() const { return count; }\n+      \n+      pointer\n+      address(reference x) const { return &x; }\n+    \n+      const_pointer\n+      address(const_reference x) const { return &x; }\n+    \n+      pointer\n+      allocate(size_type n, const void* = 0)\n+      {\n+        if (count == 0)\n+\t  throw std::bad_alloc();\n+\t\n+\tif (count != size_type(-1))\n+\t  --count;\n+        \n+\treturn static_cast<Tp*>(::operator new(n * sizeof(Tp)));\n+      }\n+      \n+      void\n+      deallocate(pointer p, size_type)\n+      { ::operator delete(p); }\n+      \n+      size_type\n+      max_size() const throw() \n+      { return size_type(-1) / sizeof(Tp); }\n+      \n+      void \n+      construct(pointer p, const Tp& val) \n+      { ::new(p) Tp(val); }\n+    \n+      void \n+      destroy(pointer p) { p->~Tp(); }\n+\n+    private:\n+      template<typename Tp1>\n+        friend inline bool\n+        operator==(const throw_allocator&, const throw_allocator<Tp1>&)\n+        { return true; }\n+\n+      template<typename Tp1>\n+        friend inline bool\n+        operator!=(const throw_allocator&, const throw_allocator<Tp1>&)\n+        { return false; }\n+      \n+      size_type count;\n+    };\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_ALLOCATOR_H"}]}