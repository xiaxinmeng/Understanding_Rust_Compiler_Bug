{"sha": "0937fb69fec34dfefa6c9bc790c41c756a580720", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkzN2ZiNjlmZWMzNGRmZWZhNmM5YmM3OTBjNDFjNzU2YTU4MDcyMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-22T10:30:29Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-22T10:30:29Z"}, "message": "CFStrings for Darwin\n\ngcc/testsuite:\n\tBased on the CFString implementation in FSF apple/trunk branch.\n\t\n\t* lib/objc-dg.exp (objc-dg-runtest): Merge flags and additional flags\n\tso that the latter can be used in dg-skip and dg-xfail clauses.\n\t* lib/obj-c++-dg.exp (obj-c++-dg-runtest): Likewise.\n\t* obj-c++.dg/template-4.mm: Don't use CFStrings on Darwin. Update test\n\tto use dg-additional-files for Object1.\n\t* obj-c++.dg/const-str-7.mm: Don't use CFStrings on Darwin. Update test\n\tto use dg-additional-files for Object1, move to torture/strings/.\n\t* obj-c++.dg/const-str-4.mm: Likewise.\n\t* obj-c++.dg/const-str-3.mm: Likewise.\n\t* obj-c++.dg/const-str-8.mm: Likewise.\n\t* obj-c++.dg/const-str-9.mm: Likewise.\n\t* obj-c++.dg/const-str-10.mm: Likewise.\n\t* obj-c++.dg/const-str-10.mm: Likewise.\n\t* obj-c++.dg/const-str-1.mm: Don't use CFStrings on Darwin. Update test\n\tto use dg-additional-files for Object1, move to strings/.\n\t* obj-c++.dg/const-str-2.mm: Likewise.\n\t* obj-c++.dg/const-str-5.mm: Likewise.\n\t* obj-c++.dg/const-str-6.mm: Likewise.\n\t* obj-c++.dg/const-str-12.mm: Likewise.\n\t* obj-c++.dg/strings/strings.exp: New.\n\t* obj-c++.dg/strings/const-cfstring-2.mm: New.\n\t* obj-c++.dg/strings/const-cfstring-5.mm: New.\n\t* obj-c++.dg/torture/strings/strings.exp: New.\n\t* obj-c++.dg/torture/strings/string1.mm: New.\n\t* obj-c++.dg/torture/strings/const-cfstring-1.mm: New.\n\t* obj-c++.dg/torture/strings/const-cfstring-3.mm: New.\n\t* obj-c++.dg/torture/strings/const-cfstring-4.mm: New.\n\t\n\t* objc/execute/string1.m: Don't use CFStrings on Darwin. Update test\n\tto use dg-additional-files for Object1, move to objc.dg/torture/strings/.\n\t* objc/execute/string2.m: Likewise.\n\t* objc/execute/string3.m: Likewise.\n\t* objc/execute/string3.m: Likewise.\n\t* objc.dg/foreach-2.m: Don't use CFStrings on Darwin.\n\t* objc.dg/foreach-4.m: Likewise.\n\t* objc.dg/foreach-5.m: Likewise.\n\t* objc.dg/const-str-3.m: Don't use CFStrings on Darwin. Update test\n\tto use dg-additional-files for Object1, move to objc.dg/torture/strings/.\n\t* objc.dg/const-str-4.m: Likewise.\n\t* objc.dg/const-str-7.m: Likewise.\n\t* objc.dg/const-str-8.m: Likewise.\n\t* objc.dg/const-str-9.m: Likewise.\n\t* objc.dg/const-str-10.m: Likewise.\n\t* objc.dg/const-str-11.m: Likewise.\n\t* objc.dg/const-str-1.m: Don't use CFStrings on Darwin. Update test\n\tto use dg-additional-files for Object1, move to objc.dg/strings/.\n\t* objc.dg/const-str-2.m: Likewise.\n\t* objc.dg/const-str-5.m: Likewise.\n\t* objc.dg/const-str-6.m: Likewise.\n\t* objc.dg/const-str-12.m: Likewise.\n\t* objc.dg/const-str-12b.m: Likewise.\n\t* objc.dg/strings/strings.exp: New.\n\t* objc.dg/strings/const-cfstring-2.m: New.\n\t* objc.dg/strings/const-cfstring-5.m: New.\n\t* objc.dg/torture/strings/strings.exp: New.\n\t* objc.dg/torture/strings/const-cfstring-1.m: New.\n\t* objc.dg/torture/strings/const-cfstring-3.m: New.\n\t* objc.dg/torture/strings/const-cfstring-4.m: New.\n\nFrom-SVN: r165821", "tree": {"sha": "916b049eac8cff20aa58e64aa7d6469d396a6c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/916b049eac8cff20aa58e64aa7d6469d396a6c68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0937fb69fec34dfefa6c9bc790c41c756a580720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0937fb69fec34dfefa6c9bc790c41c756a580720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0937fb69fec34dfefa6c9bc790c41c756a580720", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0937fb69fec34dfefa6c9bc790c41c756a580720/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2670598830de0d9a1a65724d15dd428eae38e6f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2670598830de0d9a1a65724d15dd428eae38e6f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2670598830de0d9a1a65724d15dd428eae38e6f2"}], "stats": {"total": 951, "additions": 822, "deletions": 129}, "files": [{"sha": "b279dc3a002ea15f906e806fd0571098e1f4ff5d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,3 +1,66 @@\n+2010-10-21  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tBased on the CFString implementation in FSF apple/trunk branch.\n+\t\n+\t* lib/objc-dg.exp (objc-dg-runtest): Merge flags and additional flags\n+\tso that the latter can be used in dg-skip and dg-xfail clauses.\n+\t* lib/obj-c++-dg.exp (obj-c++-dg-runtest): Likewise.\n+\t* obj-c++.dg/template-4.mm: Don't use CFStrings on Darwin. Update test\n+\tto use dg-additional-files for Object1.\n+\t* obj-c++.dg/const-str-7.mm: Don't use CFStrings on Darwin. Update test\n+\tto use dg-additional-files for Object1, move to torture/strings/.\n+\t* obj-c++.dg/const-str-4.mm: Likewise.\n+\t* obj-c++.dg/const-str-3.mm: Likewise.\n+\t* obj-c++.dg/const-str-8.mm: Likewise.\n+\t* obj-c++.dg/const-str-9.mm: Likewise.\n+\t* obj-c++.dg/const-str-10.mm: Likewise.\n+\t* obj-c++.dg/const-str-10.mm: Likewise.\n+\t* obj-c++.dg/const-str-1.mm: Don't use CFStrings on Darwin. Update test\n+\tto use dg-additional-files for Object1, move to strings/.\n+\t* obj-c++.dg/const-str-2.mm: Likewise.\n+\t* obj-c++.dg/const-str-5.mm: Likewise.\n+\t* obj-c++.dg/const-str-6.mm: Likewise.\n+\t* obj-c++.dg/const-str-12.mm: Likewise.\n+\t* obj-c++.dg/strings/strings.exp: New.\n+\t* obj-c++.dg/strings/const-cfstring-2.mm: New.\n+\t* obj-c++.dg/strings/const-cfstring-5.mm: New.\n+\t* obj-c++.dg/torture/strings/strings.exp: New.\n+\t* obj-c++.dg/torture/strings/string1.mm: New.\n+\t* obj-c++.dg/torture/strings/const-cfstring-1.mm: New.\n+\t* obj-c++.dg/torture/strings/const-cfstring-3.mm: New.\n+\t* obj-c++.dg/torture/strings/const-cfstring-4.mm: New.\n+\t\n+\t* objc/execute/string1.m: Don't use CFStrings on Darwin. Update test\n+\tto use dg-additional-files for Object1, move to objc.dg/torture/strings/.\n+\t* objc/execute/string2.m: Likewise.\n+\t* objc/execute/string3.m: Likewise.\n+\t* objc/execute/string3.m: Likewise.\n+\t* objc.dg/foreach-2.m: Don't use CFStrings on Darwin.\n+\t* objc.dg/foreach-4.m: Likewise.\n+\t* objc.dg/foreach-5.m: Likewise.\n+\t* objc.dg/const-str-3.m: Don't use CFStrings on Darwin. Update test\n+\tto use dg-additional-files for Object1, move to objc.dg/torture/strings/.\n+\t* objc.dg/const-str-4.m: Likewise.\n+\t* objc.dg/const-str-7.m: Likewise.\n+\t* objc.dg/const-str-8.m: Likewise.\n+\t* objc.dg/const-str-9.m: Likewise.\n+\t* objc.dg/const-str-10.m: Likewise.\n+\t* objc.dg/const-str-11.m: Likewise.\n+\t* objc.dg/const-str-1.m: Don't use CFStrings on Darwin. Update test\n+\tto use dg-additional-files for Object1, move to objc.dg/strings/.\n+\t* objc.dg/const-str-2.m: Likewise.\n+\t* objc.dg/const-str-5.m: Likewise.\n+\t* objc.dg/const-str-6.m: Likewise.\n+\t* objc.dg/const-str-12.m: Likewise.\n+\t* objc.dg/const-str-12b.m: Likewise.\n+\t* objc.dg/strings/strings.exp: New.\n+\t* objc.dg/strings/const-cfstring-2.m: New.\n+\t* objc.dg/strings/const-cfstring-5.m: New.\n+\t* objc.dg/torture/strings/strings.exp: New.\n+\t* objc.dg/torture/strings/const-cfstring-1.m: New.\n+\t* objc.dg/torture/strings/const-cfstring-3.m: New.\n+\t* objc.dg/torture/strings/const-cfstring-4.m: New.\n+\n 2010-10-22  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* gcc.target/arm/synchronize.c: Permit dmb or mcr in assembler scan."}, {"sha": "13263aeff47018bd109f44576d4610bab4dced19", "filename": "gcc/testsuite/lib/obj-c++-dg.exp", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B-dg.exp?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -30,5 +30,44 @@ proc obj-c++-dg-prune { system text } {\n # Modified dg-runtest that can cycle through a list of optimization options\n # as c-torture does.\n proc obj-c++-dg-runtest { testcases default-extra-flags } {\n-    return [gcc-dg-runtest $testcases ${default-extra-flags}]\n-}\n+    global runtests\n+\n+    # Some callers set torture options themselves; don't override those.\n+    set existing_torture_options [torture-options-exist]\n+    if { $existing_torture_options == 0 } {\n+\tglobal DG_TORTURE_OPTIONS LTO_TORTURE_OPTIONS\n+\ttorture-init\n+\tset-torture-options $DG_TORTURE_OPTIONS [list {}] $LTO_TORTURE_OPTIONS\n+    }\n+    dump-torture-options\n+\n+    foreach test $testcases {\n+\tglobal torture_with_loops torture_without_loops\n+\t# If we're only testing specific files and this isn't one of\n+\t# them, skip it.\n+\tif ![runtest_file_p $runtests $test] {\n+\t    continue\n+        }\n+\n+\t# Look for a loop within the source code - if we don't find one,\n+\t# don't pass -funroll[-all]-loops.\n+\tif [expr [search_for $test \"for*(\"]+[search_for $test \"while*(\"]] {\n+\t    set option_list $torture_with_loops\n+\t} else {\n+\t    set option_list $torture_without_loops\n+\t}\n+\n+\tset nshort [file tail [file dirname $test]]/[file tail $test]\n+\n+\tforeach flags $option_list {\n+\t    # combine flags so that dg-skip & xfail will see the extras.\n+\t    set combined_flags \"$flags ${default-extra-flags}\"\n+\t    verbose \"Testing $nshort, $combined_flags\" 1\n+\t    dg-test $test $combined_flags \"\"\n+\t}\n+    }\n+\n+    if { $existing_torture_options == 0 } {\n+\ttorture-finish\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "54e8b2d6ff3377aa4cfacccc41e60d64f1d93c5d", "filename": "gcc/testsuite/lib/objc-dg.exp", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Flib%2Fobjc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Flib%2Fobjc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-dg.exp?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -31,5 +31,44 @@ proc objc-dg-prune { system text } {\n # Modified dg-runtest that can cycle through a list of optimization options\n # as c-torture does.\n proc objc-dg-runtest { testcases default-extra-flags } {\n-    return [gcc-dg-runtest $testcases ${default-extra-flags}]\n+    global runtests\n+\n+    # Some callers set torture options themselves; don't override those.\n+    set existing_torture_options [torture-options-exist]\n+    if { $existing_torture_options == 0 } {\n+\tglobal DG_TORTURE_OPTIONS LTO_TORTURE_OPTIONS\n+\ttorture-init\n+\tset-torture-options $DG_TORTURE_OPTIONS [list {}] $LTO_TORTURE_OPTIONS\n+    }\n+    dump-torture-options\n+\n+    foreach test $testcases {\n+\tglobal torture_with_loops torture_without_loops\n+\t# If we're only testing specific files and this isn't one of\n+\t# them, skip it.\n+\tif ![runtest_file_p $runtests $test] {\n+\t    continue\n+        }\n+\n+\t# Look for a loop within the source code - if we don't find one,\n+\t# don't pass -funroll[-all]-loops.\n+\tif [expr [search_for $test \"for*(\"]+[search_for $test \"while*(\"]] {\n+\t    set option_list $torture_with_loops\n+\t} else {\n+\t    set option_list $torture_without_loops\n+\t}\n+\n+\tset nshort [file tail [file dirname $test]]/[file tail $test]\n+\n+\tforeach flags $option_list {\n+\t    # combine flags so that dg-skip & xfail will see the extras.\n+\t    set combined_flags \"$flags ${default-extra-flags}\"\n+\t    verbose \"Testing $nshort, $combined_flags\" 1\n+\t    dg-test $test $combined_flags \"\"\n+\t}\n+    }\n+\n+    if { $existing_torture_options == 0 } {\n+\ttorture-finish\n+    }\n }"}, {"sha": "14ae68c6c501ca5cc451bbae286fd27ed5eeeb6b", "filename": "gcc/testsuite/obj-c++.dg/strings/const-cfstring-2.mm", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-cfstring-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-cfstring-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-cfstring-2.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,27 @@\n+/* Test the -Wnonportable-cfstrings option, which should give\n+   warnings if non-ASCII characters are embedded in constant\n+   CFStrings.  This will only work on MacOS X 10.2 and later.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings -Wnonportable-cfstrings\" } */\n+\n+#import <Foundation/NSString.h>\n+#import <CoreFoundation/CFString.h>\n+\n+#ifndef __CONSTANT_CFSTRINGS__\n+#error The -fconstant-cfstrings option is not functioning properly\n+#endif\n+\n+void foo(void) {\n+  NSString *s1 = @\"Compile-time string literal\";\n+  CFStringRef s2 = CFSTR(\"Compile-time string literal\");\n+  NSString *s3 = @\"Non-ASCII literal - \\222\";         /* { dg-warning \"non-ASCII character in CFString literal\" } */\n+  CFStringRef s4 = CFSTR(\"\\222 - Non-ASCII literal\"); /* { dg-warning \"non-ASCII character in CFString literal\" } */\n+  CFStringRef s5 = CFSTR(\"Non-ASCII (\\222) literal\"); /* { dg-warning \"non-ASCII character in CFString literal\" } */\n+  NSString *s6 = @\"\\0Embedded NUL\";         /* { dg-warning \"embedded NUL in CFString literal\" } */\n+  CFStringRef s7 = CFSTR(\"Embedded \\0NUL\"); /* { dg-warning \"embedded NUL in CFString literal\" } */\n+  CFStringRef s8 = CFSTR(\"Embedded NUL\\0\"); /* { dg-warning \"embedded NUL in CFString literal\" } */\n+}"}, {"sha": "13cb7895779ef1f1ec1a8c404752bdfd0de73d53", "filename": "gcc/testsuite/obj-c++.dg/strings/const-cfstring-5.mm", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-cfstring-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-cfstring-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-cfstring-5.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,26 @@\n+/* Test if constant CFStrings may be passed back as ObjC strings.  */\n+/* Author: Ziemowit Laski  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Foo: Object {\n+  char *cString;\n+  unsigned int len;\n+}\n++ (Foo *)description;\n+@end\n+\n+@interface Bar: Object\n++ (Foo *) getString: (int) which;\n+@end\n+\n+@implementation Bar\n++ (Foo *) getString: (int) which {\n+  return which? [Foo description]: @\"Hello\";\n+}\n+@end"}, {"sha": "754c99bf1ae4f2e4f798a1be1b2af76940211b77", "filename": "gcc/testsuite/obj-c++.dg/strings/const-str-1.mm", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-1.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,5 +1,6 @@\n /* Test errors for constant strings.  */\n /* { dg-do compile } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n #ifdef __cplusplus\n extern void baz(...);", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-1.mm"}, {"sha": "921d055659c097f9387338250817a9ddbd98560f", "filename": "gcc/testsuite/obj-c++.dg/strings/const-str-12.mm", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-12.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,11 +1,11 @@\n /* Test if ObjC types play nice in conditional expressions.  */\n /* Author: Ziemowit Laski  */\n \n-/* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-do compile } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n \n @interface Foo: Object {\n   char *cString;\n@@ -19,7 +19,7 @@ + (Foo *) getString: (int) which;\n @end\n \n #ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-struct fudge_objc_class _FooClassReference;\n+Class _FooClassReference;\n #else\n struct objc_class _FooClassReference;\n #endif", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-12.mm"}, {"sha": "e9e2fc93db28ef3227a0265d14b96a08e115a136", "filename": "gcc/testsuite/obj-c++.dg/strings/const-str-2.mm", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-2.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,6 +1,7 @@\n /* Test the -fconstant-string-class flag error.  */\n /* { dg-do compile } */\n /* { dg-options \"-fconstant-string-class=\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=\" { target *-*-darwin* } } */\n \n { dg-error \"no class name specified|missing argument\" \"\" { target *-*-* } 0 }\n ", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-2.mm"}, {"sha": "8c12a0c11d35dbd8c68581868ab4167bc2a5ac14", "filename": "gcc/testsuite/obj-c++.dg/strings/const-str-5.mm", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-5.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,8 +1,9 @@\n /* Positive test case for constant string layout.  */\n /* Contributed by Ziemowit Laski  <zlaski@apple.com>.  */\n \n-/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n /* { dg-do compile } */\n+/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyConstantString\" { target *-*-darwin* } } */\n \n @interface MyBase {\n   const char *p;", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-5.mm"}, {"sha": "69954d9f42296b6f4c8002dd6d39f40f53411a0b", "filename": "gcc/testsuite/obj-c++.dg/strings/const-str-6.mm", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-6.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,8 +1,9 @@\n /* Negative test case for constant string layout.  */\n /* Contributed by Ziemowit Laski  <zlaski@apple.com>.  */\n \n-/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n /* { dg-do compile } */\n+/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyConstantString\" { target *-*-darwin* } } */\n \n @interface MyBase {\n   char p;", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-6.mm"}, {"sha": "82cd925bb23fdf8a9a889fb44dcef84739fe3a9c", "filename": "gcc/testsuite/obj-c++.dg/strings/strings.exp", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fstrings.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fstrings.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fstrings.exp?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,45 @@\n+# String tests that only need to run at default optimization.\n+\n+# Copyright (C) 2010 Free Software Foundation, Inc.\n+# \n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Load support procs.\n+load_lib obj-c++-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_OBJCXXFLAGS\n+if ![info exists DEFAULT_OBJCXXFLAGS] then {\n+    set DEFAULT_OBJCXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.mm]]\n+\n+# Main loop.\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_OBJCXXFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  dg-runtest $tests \"-fnext-runtime\" $DEFAULT_OBJCXXFLAGS\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "4d96a47a35afe34b8e90acda1ad4c295462d5493", "filename": "gcc/testsuite/obj-c++.dg/template-4.mm", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -2,6 +2,9 @@\n \n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.mm\" } */\n+\n #include \"../objc-obj-c++-shared/Object1.h\"\n #include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdarg.h>\n@@ -76,4 +79,3 @@ int main(void) {\n   CHECK_IF(abc(a1, a2) * t.k == 35);\n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a11b5266f40e7eb8c9054f349aea03915f1edbcb", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-cfstring-1.mm", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-cfstring-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-cfstring-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-cfstring-1.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,59 @@\n+/* Test the -fconstant-cfstrings option for constructing\n+   compile-time immutable CFStrings, and their interoperation\n+   with both Cocoa and CoreFoundation.  This will only work\n+   on MacOS X 10.1.2 and later.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings -framework Cocoa\" } */\n+\n+#import <Foundation/NSString.h>\n+#import <CoreFoundation/CFString.h>\n+#include <stdlib.h>\n+\n+void printOut(NSString *str) {\n+  NSLog(@\"The value of str is: %@\", str);\n+}\n+\n+CFStringRef s0a = CFSTR(\"Compile-time string literal\");\n+CFStringRef s0b = CFSTR(\"Compile-time string literal\");\n+\n+void checkNSRange(NSRange r) {\n+  if (r.location != 6 || r.length != 5) {\n+    printOut(@\"Range check failed\");\n+    abort();\n+  }\n+}\n+\n+void checkCFRange(CFRange r) {\n+  if (r.location != 6 || r.length != 5) {\n+    printOut(@\"Range check failed\");\n+    abort();\n+  }\n+}\n+\n+int main(void) {\n+  const NSString *s1 = @\"Compile-time string literal\";\n+  CFStringRef s2 = CFSTR(\"Compile-time string literal\");\n+\n+  checkNSRange([@\"Hello World\" rangeOfString:@\"World\"]);\n+  checkNSRange([(id)CFSTR(\"Hello World\") rangeOfString:@\"World\"]);\n+  checkNSRange([@\"Hello World\" rangeOfString:(id)CFSTR(\"World\")]);\n+  checkNSRange([(id)CFSTR(\"Hello World\") rangeOfString:(id)CFSTR(\"World\")]);\n+\n+  checkCFRange(CFStringFind((CFStringRef)@\"Hello World\", (CFStringRef)@\"World\", 0));\n+  checkCFRange(CFStringFind(CFSTR(\"Hello World\"), (CFStringRef)@\"World\", 0));\n+  checkCFRange(CFStringFind((CFStringRef)@\"Hello World\", CFSTR(\"World\"), 0));\n+  checkCFRange(CFStringFind(CFSTR(\"Hello World\"), CFSTR(\"World\"), 0));\n+\n+  /* Check for string uniquing.  */\n+  if (s0a != s0b || s0a != s2 || s1 != (id)s2) {\n+    NSLog(@\"String uniquing failed\");\n+    abort ();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "4a61429886b5d1aba4ae9cf6dbe434963868092d", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-cfstring-3.mm", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-cfstring-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-cfstring-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-cfstring-3.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,27 @@\n+/* Test for assigning compile-time constant-string objects to static variables.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings -framework Foundation\" } */\n+\n+#include <stdlib.h>\n+\n+typedef const struct __CFString * CFStringRef;\n+static CFStringRef appKey = (CFStringRef) @\"com.apple.soundpref\";\n+\n+static int CFPreferencesSynchronize (CFStringRef ref) {\n+  return ref == appKey;\n+}\n+\n+static void PrefsSynchronize()\n+{\n+    if(!CFPreferencesSynchronize(appKey))\n+      abort();\n+}\n+\n+int main(void) {\n+  PrefsSynchronize();\n+  return 0;\n+}"}, {"sha": "1155db5f83f5cd2236239877af102f526f609573", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-cfstring-4.mm", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-cfstring-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-cfstring-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-cfstring-4.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,21 @@\n+/* Test if constant CFStrings get placed in the correct section and that the\n+   layout of the object is correct for both m32 and m64.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings\" } */\n+\n+typedef const struct __CFString * CFStringRef;\n+static CFStringRef appKey = (CFStringRef) @\"com.apple.soundpref\";\n+\n+void *foo (void)\n+{\n+  void *a = (void *)appKey;\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \".section __DATA, __cfstring\" } } */\n+/* { dg-final { scan-assembler \".long\\t___CFConstantStringClassReference\\n\\t.long\\t1992\\n\\t.long\\t.*\\n\\t.long\\t19\\n\" { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \".quad\\t___CFConstantStringClassReference\\n\\t.long\\t1992\\n\\t.space 4\\n\\t.quad\\t.*\\n\\t.quad\\t19\\n\" { target { *-*-darwin* && {  lp64 } } } } } */"}, {"sha": "f61a47481c66deba12846cfcc5d01eb94e38624f", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-10.mm", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-10.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -4,8 +4,9 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n \n @interface NSString: Object\n @end", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-10.mm"}, {"sha": "4abab369a20ec7c9205f932ffdb33003d5225a37", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-11.mm", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-11.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -5,8 +5,9 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-fconstant-string-class=XStr\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=XStr\" { target *-*-darwin* } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n \n @interface XString: Object {\n @protected\n@@ -20,10 +21,10 @@ @interface XStr : XString {\n }\n @end\n \n-#ifndef NEXT_OBJC_USE_NEW_INTERFACE\n-extern struct objc_class _XStrClassReference;\n-#else\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n extern Class _XStrClassReference;\n+#else\n+extern struct objc_class _XStrClassReference;\n #endif\n \n const XStr *appKey = @\"MyApp\";", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-11.mm"}, {"sha": "edcbef0396e6bfbcfc2fa4a97f7ef57dd90e3cd4", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-3.mm", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-3.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -2,12 +2,14 @@\n    runtime.  */\n /* Developed by Markus Hitter <mah@jump-ing.de>.  */\n \n-/* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-do run { target *-*-darwin* } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n+#import \"../../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../../objc-obj-c++-shared/next-mapping.h\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <memory.h>\n@@ -55,4 +57,4 @@ int main () {\n   printf([@\"This is a working constant string object\\n\" customString]);\n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-3.mm"}, {"sha": "c2cadd3df96cb61924b8c5258309270ae64aeec2", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-4.mm", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-4.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,7 +1,9 @@\n /* Ensure that the preprocessor handles ObjC string constants gracefully. */\n /* Author: Ziemowit Laski <zlaski@apple.com> */\n-/* { dg-options \"-fconstant-string-class=MyString\" } */ \n+\n /* { dg-do run  { target *-*-darwin* } } */\n+/* { dg-options \"-fconstant-string-class=MyString\" } */ \n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyString\" { target *-*-darwin* } } */\n \n #include <stdlib.h>\n ", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-4.mm"}, {"sha": "d58cb91a7bb306a7dab7b92c5a463faf615618b7", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-7.mm", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-7.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -2,12 +2,12 @@\n    scopes.  */\n /* Developed by Andrew Pinski <pinskia@physics.uc.edu> */\n \n-/* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-do run } */\n-/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n@@ -21,7 +21,7 @@ - (char *)customString;\n @end\n \n #ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-struct fudge_objc_class _FooClassReference;\n+Class  _FooClassReference;\n #else\n struct objc_class _FooClassReference;\n #endif\n@@ -44,4 +44,3 @@ int main () {\n    }\n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-7.mm"}, {"sha": "17997b628420d609bd62d0a7b6364d67e77698bd", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-8.mm", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-8.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,10 +1,12 @@\n /* Test for assigning compile-time constant-string objects to static variables.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n \n-/* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-do run { target *-*-darwin* } } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n @interface Foo: Object {\n@@ -40,5 +42,3 @@ int main () {\n   PrefsSynchronize();\n   return 0;\n }\n-\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-8.mm"}, {"sha": "7c99f6b5d36fcfe581b16afa7d455f78b44d2989", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-9.mm", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-9.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -3,8 +3,9 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n \n @interface NSConstantString: Object {\n   char *cString;", "previous_filename": "gcc/testsuite/obj-c++.dg/const-str-9.mm"}, {"sha": "df315fb87849dc4ca26dbbd28a5ddd818142492c", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/string1.mm", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstring1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstring1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstring1.mm?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,23 @@\n+/* Based on a test case contributed by Nicola Pero.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n+\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/next-mapping.h\"\n+\n+#include <string.h>\n+#include <stdlib.h>\n+\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/NXConstStr.h>\n+#endif\n+\n+int main(int argc, char **args)\n+{\n+  if (strcmp ([@\"this is a string\" cString], \"this is a string\"))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "180401c3b7617a9bed74d18c5aba20234e139699", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/strings.exp", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstrings.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstrings.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstrings.exp?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,34 @@\n+# String tests that should be run at all optimization levels.\n+\n+# Copyright (C) 2010 Free Software Foundation, Inc.\n+# \n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+load_lib obj-c++-dg.exp\n+\n+dg-init\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.mm]]\n+\n+obj-c++-dg-runtest $tests \"-fgnu-runtime\"\n+\n+# Darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  obj-c++-dg-runtest $tests \"-fnext-runtime\"\n+}\n+\n+dg-finish"}, {"sha": "e44222311a7bd13a6e645d4f77f33d515b2f0bb9", "filename": "gcc/testsuite/objc.dg/foreach-2.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-2.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -3,10 +3,11 @@\n */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n /* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #endif"}, {"sha": "55484d7dd5a95256254acaa9a2d69769b4430ec8", "filename": "gcc/testsuite/objc.dg/foreach-4.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-4.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -3,6 +3,7 @@\n */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n /* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n \n #import \"../objc-obj-c++-shared/Object1.h\""}, {"sha": "ae06d670257e262546d36a1f9e68dde83341b71f", "filename": "gcc/testsuite/objc.dg/foreach-5.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-5.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -3,6 +3,7 @@\n */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n /* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n \n #import \"../objc-obj-c++-shared/Object1.h\""}, {"sha": "14ae68c6c501ca5cc451bbae286fd27ed5eeeb6b", "filename": "gcc/testsuite/objc.dg/strings/const-cfstring-2.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-cfstring-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-cfstring-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-cfstring-2.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,27 @@\n+/* Test the -Wnonportable-cfstrings option, which should give\n+   warnings if non-ASCII characters are embedded in constant\n+   CFStrings.  This will only work on MacOS X 10.2 and later.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings -Wnonportable-cfstrings\" } */\n+\n+#import <Foundation/NSString.h>\n+#import <CoreFoundation/CFString.h>\n+\n+#ifndef __CONSTANT_CFSTRINGS__\n+#error The -fconstant-cfstrings option is not functioning properly\n+#endif\n+\n+void foo(void) {\n+  NSString *s1 = @\"Compile-time string literal\";\n+  CFStringRef s2 = CFSTR(\"Compile-time string literal\");\n+  NSString *s3 = @\"Non-ASCII literal - \\222\";         /* { dg-warning \"non-ASCII character in CFString literal\" } */\n+  CFStringRef s4 = CFSTR(\"\\222 - Non-ASCII literal\"); /* { dg-warning \"non-ASCII character in CFString literal\" } */\n+  CFStringRef s5 = CFSTR(\"Non-ASCII (\\222) literal\"); /* { dg-warning \"non-ASCII character in CFString literal\" } */\n+  NSString *s6 = @\"\\0Embedded NUL\";         /* { dg-warning \"embedded NUL in CFString literal\" } */\n+  CFStringRef s7 = CFSTR(\"Embedded \\0NUL\"); /* { dg-warning \"embedded NUL in CFString literal\" } */\n+  CFStringRef s8 = CFSTR(\"Embedded NUL\\0\"); /* { dg-warning \"embedded NUL in CFString literal\" } */\n+}"}, {"sha": "13cb7895779ef1f1ec1a8c404752bdfd0de73d53", "filename": "gcc/testsuite/objc.dg/strings/const-cfstring-5.m", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-cfstring-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-cfstring-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-cfstring-5.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,26 @@\n+/* Test if constant CFStrings may be passed back as ObjC strings.  */\n+/* Author: Ziemowit Laski  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Foo: Object {\n+  char *cString;\n+  unsigned int len;\n+}\n++ (Foo *)description;\n+@end\n+\n+@interface Bar: Object\n++ (Foo *) getString: (int) which;\n+@end\n+\n+@implementation Bar\n++ (Foo *) getString: (int) which {\n+  return which? [Foo description]: @\"Hello\";\n+}\n+@end"}, {"sha": "754c99bf1ae4f2e4f798a1be1b2af76940211b77", "filename": "gcc/testsuite/objc.dg/strings/const-str-1.m", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-1.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,5 +1,6 @@\n /* Test errors for constant strings.  */\n /* { dg-do compile } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n #ifdef __cplusplus\n extern void baz(...);", "previous_filename": "gcc/testsuite/objc.dg/const-str-1.m"}, {"sha": "93059018647c15c9d17732e4e46b212589086eee", "filename": "gcc/testsuite/objc.dg/strings/const-str-12.m", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "previous_filename": "gcc/testsuite/objc.dg/const-str-12.m"}, {"sha": "cad481e15a015f02e0ebc1f0b7aca47868b08437", "filename": "gcc/testsuite/objc.dg/strings/const-str-12b.m", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12b.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12b.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12b.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,11 +1,12 @@\n /* Test if ObjC types play nice in conditional expressions.  */\n /* Author: Ziemowit Laski  */\n \n-/* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-do compile } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/next-mapping.h\"\n \n @interface Foo: Object {\n   char *cString;", "previous_filename": "gcc/testsuite/objc.dg/const-str-12b.m"}, {"sha": "49ab06304330075bc839539161dedbe487d878d5", "filename": "gcc/testsuite/objc.dg/strings/const-str-2.m", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-2.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,6 +1,7 @@\n /* Test the -fconstant-string-class flag error.  */\n /* { dg-do compile } */\n-/* { dg-options \"-fconstant-string-class=\" } */\n+/* { dg-options \"-fconstant-string-class=\" { target *-*-* } } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=\" { target *-*-darwin* } } */\n \n { dg-error \"no class name specified|missing argument\" \"\" { target *-*-* } 0 }\n ", "previous_filename": "gcc/testsuite/objc.dg/const-str-2.m"}, {"sha": "42071767adb7fb5882b28bb3aa2a658664e5b0b1", "filename": "gcc/testsuite/objc.dg/strings/const-str-5.m", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-5.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,8 +1,9 @@\n /* Positive test case for constant string layout.  */\n /* Contributed by Ziemowit Laski  <zlaski@apple.com>.  */\n \n-/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n /* { dg-do compile } */\n+/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyConstantString\" { target *-*-darwin* } } */ \n \n @interface MyBase {\n   const char *p;", "previous_filename": "gcc/testsuite/objc.dg/const-str-5.m"}, {"sha": "fca7643af3788e0061c9f938af30533a5c344901", "filename": "gcc/testsuite/objc.dg/strings/const-str-6.m", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-6.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,8 +1,9 @@\n /* Negative test case for constant string layout.  */\n /* Contributed by Ziemowit Laski  <zlaski@apple.com>.  */\n \n-/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n /* { dg-do compile } */\n+/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyConstantString\" { target *-*-darwin* } } */ \n \n @interface MyBase {\n   char p;", "previous_filename": "gcc/testsuite/objc.dg/const-str-6.m"}, {"sha": "823c2871a572d361052e896c646616bbfb5d1c96", "filename": "gcc/testsuite/objc.dg/strings/strings.exp", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fstrings.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fstrings.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fstrings.exp?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,46 @@\n+# String tests that only need to run at default optimization.\n+\n+# Copyright (C) 2010 Free Software Foundation, Inc.\n+# \n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Load support procs.\n+\n+load_lib objc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.m]]\n+\n+# Main loop.\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_CFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  dg-runtest $tests \"-fnext-runtime\" $DEFAULT_CFLAGS\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "a11b5266f40e7eb8c9054f349aea03915f1edbcb", "filename": "gcc/testsuite/objc.dg/torture/strings/const-cfstring-1.m", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-1.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,59 @@\n+/* Test the -fconstant-cfstrings option for constructing\n+   compile-time immutable CFStrings, and their interoperation\n+   with both Cocoa and CoreFoundation.  This will only work\n+   on MacOS X 10.1.2 and later.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings -framework Cocoa\" } */\n+\n+#import <Foundation/NSString.h>\n+#import <CoreFoundation/CFString.h>\n+#include <stdlib.h>\n+\n+void printOut(NSString *str) {\n+  NSLog(@\"The value of str is: %@\", str);\n+}\n+\n+CFStringRef s0a = CFSTR(\"Compile-time string literal\");\n+CFStringRef s0b = CFSTR(\"Compile-time string literal\");\n+\n+void checkNSRange(NSRange r) {\n+  if (r.location != 6 || r.length != 5) {\n+    printOut(@\"Range check failed\");\n+    abort();\n+  }\n+}\n+\n+void checkCFRange(CFRange r) {\n+  if (r.location != 6 || r.length != 5) {\n+    printOut(@\"Range check failed\");\n+    abort();\n+  }\n+}\n+\n+int main(void) {\n+  const NSString *s1 = @\"Compile-time string literal\";\n+  CFStringRef s2 = CFSTR(\"Compile-time string literal\");\n+\n+  checkNSRange([@\"Hello World\" rangeOfString:@\"World\"]);\n+  checkNSRange([(id)CFSTR(\"Hello World\") rangeOfString:@\"World\"]);\n+  checkNSRange([@\"Hello World\" rangeOfString:(id)CFSTR(\"World\")]);\n+  checkNSRange([(id)CFSTR(\"Hello World\") rangeOfString:(id)CFSTR(\"World\")]);\n+\n+  checkCFRange(CFStringFind((CFStringRef)@\"Hello World\", (CFStringRef)@\"World\", 0));\n+  checkCFRange(CFStringFind(CFSTR(\"Hello World\"), (CFStringRef)@\"World\", 0));\n+  checkCFRange(CFStringFind((CFStringRef)@\"Hello World\", CFSTR(\"World\"), 0));\n+  checkCFRange(CFStringFind(CFSTR(\"Hello World\"), CFSTR(\"World\"), 0));\n+\n+  /* Check for string uniquing.  */\n+  if (s0a != s0b || s0a != s2 || s1 != (id)s2) {\n+    NSLog(@\"String uniquing failed\");\n+    abort ();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "4a61429886b5d1aba4ae9cf6dbe434963868092d", "filename": "gcc/testsuite/objc.dg/torture/strings/const-cfstring-3.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-3.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,27 @@\n+/* Test for assigning compile-time constant-string objects to static variables.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings -framework Foundation\" } */\n+\n+#include <stdlib.h>\n+\n+typedef const struct __CFString * CFStringRef;\n+static CFStringRef appKey = (CFStringRef) @\"com.apple.soundpref\";\n+\n+static int CFPreferencesSynchronize (CFStringRef ref) {\n+  return ref == appKey;\n+}\n+\n+static void PrefsSynchronize()\n+{\n+    if(!CFPreferencesSynchronize(appKey))\n+      abort();\n+}\n+\n+int main(void) {\n+  PrefsSynchronize();\n+  return 0;\n+}"}, {"sha": "1155db5f83f5cd2236239877af102f526f609573", "filename": "gcc/testsuite/objc.dg/torture/strings/const-cfstring-4.m", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-4.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,21 @@\n+/* Test if constant CFStrings get placed in the correct section and that the\n+   layout of the object is correct for both m32 and m64.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* So far, CFString is darwin-only.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mconstant-cfstrings\" } */\n+\n+typedef const struct __CFString * CFStringRef;\n+static CFStringRef appKey = (CFStringRef) @\"com.apple.soundpref\";\n+\n+void *foo (void)\n+{\n+  void *a = (void *)appKey;\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \".section __DATA, __cfstring\" } } */\n+/* { dg-final { scan-assembler \".long\\t___CFConstantStringClassReference\\n\\t.long\\t1992\\n\\t.long\\t.*\\n\\t.long\\t19\\n\" { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \".quad\\t___CFConstantStringClassReference\\n\\t.long\\t1992\\n\\t.space 4\\n\\t.quad\\t.*\\n\\t.quad\\t19\\n\" { target { *-*-darwin* && {  lp64 } } } } } */"}, {"sha": "c170f389dfb8718794dd5e73bc2d71b9624ff3c4", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-10.m", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-10.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -4,8 +4,9 @@\n \n /* { dg-do compile { target { *-*-darwin* } } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n \n @interface NSString: Object\n @end", "previous_filename": "gcc/testsuite/objc.dg/const-str-10.m"}, {"sha": "9f3705ef211dcfe95bc2e641608576c2724d9d08", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-11.m", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-11.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -5,8 +5,9 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-fconstant-string-class=XStr\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=XStr\" { target *-*-darwin* } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n \n @interface XString: Object {\n @protected", "previous_filename": "gcc/testsuite/objc.dg/const-str-11.m"}, {"sha": "ca2df5a89ec79868795142d5ebf674287e4708f0", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-3.m", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-3.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,11 +1,13 @@\n /* Test the -fconstant-string-class=Foo option under the NeXT runtime.  */\n /* Developed by Markus Hitter <mah@jump-ing.de>.  */\n /* { dg-do run } */\n-/* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/next-mapping.h\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n@@ -49,5 +51,3 @@ int main () {\n   printf([@\"This is a working constant string object\\n\" customString]);\n   return 0;\n }\n-\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"", "previous_filename": "gcc/testsuite/objc.dg/const-str-3.m"}, {"sha": "446b075da951f346011ead8aead80e3a2c460ea0", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-4.m", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-4.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,7 +1,8 @@\n /* Ensure that the preprocessor handles ObjC string constants gracefully. */\n /* Author: Ziemowit Laski <zlaski@apple.com> */\n-/* { dg-options \"-fconstant-string-class=MyString \" } */ \n /* { dg-do run  } */\n+/* { dg-options \"-fconstant-string-class=MyString \" } */ \n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyString \" { target *-*-darwin* } } */ \n \n extern void abort(void);\n ", "previous_filename": "gcc/testsuite/objc.dg/const-str-4.m"}, {"sha": "7221e28d48bd4a526e361df6861c1c4a79532ae8", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-7.m", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-7.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,9 +1,11 @@\n /* Test to make sure that the const objc strings are the same across scopes. */\n /* Developed by Andrew Pinski <pinskia@physics.uc.edu> */\n-/* { dg-options \"-fconstant-string-class=Foo \" } */\n /* { dg-do run } */\n+/* { dg-options \"-fconstant-string-class=Foo \" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n@@ -15,10 +17,10 @@ @interface Foo: Object {\n - (char *)customString;\n @end\n \n-#ifndef NEXT_OBJC_USE_NEW_INTERFACE\n-struct objc_class _FooClassReference;\n-#else\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n Class _FooClassReference;\n+#else\n+struct objc_class _FooClassReference;\n #endif\n \n @implementation Foo : Object\n@@ -38,5 +40,3 @@ int main () {\n    }\n   return 0;\n }\n-\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"", "previous_filename": "gcc/testsuite/objc.dg/const-str-7.m"}, {"sha": "c5bacaf437f19a34d51d432f459e5acbe276ebe1", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-8.m", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-8.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -1,9 +1,11 @@\n /* Test for assigning compile-time constant-string objects to static variables.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n-/* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-do run } */\n+/* { dg-options \"-fconstant-string-class=Foo\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n #include <stdlib.h>\n \n @interface Foo: Object {\n@@ -12,10 +14,10 @@ @interface Foo: Object {\n }\n @end\n \n-#ifndef NEXT_OBJC_USE_NEW_INTERFACE\n-struct objc_class _FooClassReference;\n-#else\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n Class _FooClassReference;\n+#else\n+struct objc_class _FooClassReference;\n #endif\n \n @implementation Foo : Object\n@@ -39,5 +41,3 @@ int main () {\n   PrefsSynchronize();\n   return 0;\n }\n-\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"", "previous_filename": "gcc/testsuite/objc.dg/const-str-8.m"}, {"sha": "ddbe93dde09a22010150a1282ac2e4773adcb4d5", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-9.m", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-9.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -3,8 +3,9 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n \n @interface NSConstantString: Object {\n   char *cString;", "previous_filename": "gcc/testsuite/objc.dg/const-str-9.m"}, {"sha": "76d3c9b0756d8589f2c32b68abd94bba27134ac1", "filename": "gcc/testsuite/objc.dg/torture/strings/string1.m", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring1.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,23 @@\n+/* Based on a test case contributed by Nicola Pero.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n+\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/next-mapping.h\"\n+\n+#include <string.h>\n+#include <stdlib.h>\n+\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/NXConstStr.h>\n+#endif\n+\n+int main(int argc, void **args)\n+{\n+  if (strcmp ([@\"this is a string\" cString], \"this is a string\"))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "90e4db1e33cf2bf9e0d0134b7d08eed6de4baec6", "filename": "gcc/testsuite/objc.dg/torture/strings/string2.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring2.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,24 @@\n+/* Based on a test case contributed by Nicola Pero.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n+\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/next-mapping.h\"\n+\n+#include <string.h>\n+#include <stdlib.h>\n+\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/NXConstStr.h>\n+#endif\n+\n+int main(int argc, void **args)\n+{\n+  if (strcmp ([@\"this \" @\"is \" @\"a \" @\"string\" cString],\n+              \"this \" \"is \" \"a \" \"string\"))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "ca08fed8d00eca574ac0b91c70f0c83b0b83e428", "filename": "gcc/testsuite/objc.dg/torture/strings/string3.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring3.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,24 @@\n+/* Based on a test case contributed by Nicola Pero.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n+\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../../objc-obj-c++-shared/next-mapping.h\"\n+#include <string.h>\n+#include <stdlib.h>\n+\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/NXConstStr.h>\n+#endif\n+\n+#define STRING \"this is a string\"\n+\n+int main (int argc, void **args)\n+{\n+  if (strcmp ([@STRING cString], STRING))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "caa877e4de717c338cb0168b30b6e8b231f1a018", "filename": "gcc/testsuite/objc.dg/torture/strings/string4.m", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstring4.m?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,22 @@\n+/* Based on a test case contributed by Nicola Pero.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n+\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../../objc-obj-c++-shared/next-mapping.h\"\n+#include <string.h>\n+#include <stdlib.h>\n+\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/NXConstStr.h>\n+#endif\n+\n+int main(int argc, void **args)\n+{\n+  if ([@\"this is a string\" length] != strlen (\"this is a string\"))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "e309186136ded7ffd30384b08223f431c068b4c2", "filename": "gcc/testsuite/objc.dg/torture/strings/strings.exp", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstrings.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0937fb69fec34dfefa6c9bc790c41c756a580720/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstrings.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fstrings.exp?ref=0937fb69fec34dfefa6c9bc790c41c756a580720", "patch": "@@ -0,0 +1,34 @@\n+# String tests that should be run at all optimization levels.\n+\n+# Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+load_lib objc-dg.exp\n+load_lib target-supports-dg.exp\n+\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.m]]\n+\n+objc-dg-runtest $tests \"-fgnu-runtime\"\n+\n+# Darwin targets also test with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  objc-dg-runtest $tests \"-fnext-runtime\"\n+}\n+\n+dg-finish"}, {"sha": "acc486ab21f7937fed6637b24f72ed2671b87e6c", "filename": "gcc/testsuite/objc/execute/string1.m", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring1.m?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -1,16 +0,0 @@\n-/* Based on a test case contributed by Nicola Pero.  */\n-\n-#import \"../../objc-obj-c++-shared/next-mapping.h\"\n-#include <string.h>\n-#include <stdlib.h>\n-\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/NXConstStr.h>\n-#endif\n-\n-int main(int argc, void **args)\n-{\n-  if (strcmp ([@\"this is a string\" cString], \"this is a string\"))\n-    abort ();\n-  return 0;\n-}"}, {"sha": "32e70616916a8e4bd38cf3c48caa7fe44534e790", "filename": "gcc/testsuite/objc/execute/string2.m", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring2.m?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -1,17 +0,0 @@\n-/* Based on a test case contributed by Nicola Pero.  */\n-\n-#import \"../../objc-obj-c++-shared/next-mapping.h\"\n-#include <string.h>\n-#include <stdlib.h>\n-\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/NXConstStr.h>\n-#endif\n-\n-int main(int argc, void **args)\n-{\n-  if (strcmp ([@\"this \" @\"is \" @\"a \" @\"string\" cString],\n-              \"this \" \"is \" \"a \" \"string\"))\n-    abort ();\n-  return 0;\n-}"}, {"sha": "2595a09c19a198561936e63229a6b061cb6f56b4", "filename": "gcc/testsuite/objc/execute/string3.m", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring3.m?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -1,18 +0,0 @@\n-/* Based on a test case contributed by Nicola Pero.  */\n-\n-#import \"../../objc-obj-c++-shared/next-mapping.h\"\n-#include <string.h>\n-#include <stdlib.h>\n-\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/NXConstStr.h>\n-#endif\n-\n-#define STRING \"this is a string\"\n-\n-int main (int argc, void **args)\n-{\n-  if (strcmp ([@STRING cString], STRING))\n-    abort ();\n-  return 0;\n-}"}, {"sha": "a7bcf431d5280fb8c080cbdbce5862d34c1e170d", "filename": "gcc/testsuite/objc/execute/string4.m", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring4.m?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -1,16 +0,0 @@\n-/* Based on a test case contributed by Nicola Pero.  */\n-\n-#import \"../../objc-obj-c++-shared/next-mapping.h\"\n-#include <string.h>\n-#include <stdlib.h>\n-\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/NXConstStr.h>\n-#endif\n-\n-int main(int argc, void **args)\n-{\n-  if ([@\"this is a string\" length] != strlen (\"this is a string\"))\n-    abort ();\n-  return 0;\n-}"}]}