{"sha": "b52110d478b71ec2e1f099b3c1b539228a9bdaea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyMTEwZDQ3OGI3MWVjMmUxZjA5OWIzYzFiNTM5MjI4YTliZGFlYQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-07-07T14:30:14Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-07-07T14:30:14Z"}, "message": "rs6000.md (UNSPEC_SYNC, [...]): Delete.\n\n\t* config/rs6000/rs6000.md (UNSPEC_SYNC, UNSPEC_SYNC_OP,\n\tUNSPEC_SYNC_SWAP, UNSPEC_LWSYNC, UNSPEC_ISYNC): Delete.\n\t(UNSPECV_LL, UNSPECV_SC, UNSPECV_ATOMIC, UNSPECV_SYNC,\n\tUNSPECV_SYNC_OP, UNSPECV_CMPXCHG, UNSPECV_LWSYNC, UNSPECV_ISYNC): New.\n\t(define_attr \"type\"): Add isync, sync, load_l, store_c.\n\t* config/rs6000/sync.md (memory_barrier): Change to define_expand.\n\tCreate scratch volatile MEM.\n\t(sync_internal): New.  POWER mnemonic is dcs, not ics.  Attribute\n\tsync.\n\t(load_locked_<mode>): New.\n\t(store_conditional_<mode>): New.\n\t(sync_compare_and_swap<mode>): Replace with splitter.\n\t(sync_lock_test_and_set<mode>): Replace with splitter.\n\t(sync_<fetchop><mode>): Change to unspec_volatile UNSPECV_SYNC_OP\n\tand UNSPECV_ISYNC.\n\t(isync): Change to unspec_volatile UNSPECV_ISYNC.  POWER mnemonic\n\tis ics.  Attribute isync.\n\t(lwsync): Change to unspec_volatile UNSPECV_LWSYNC.  Attribute\n\tlwsync.\n\t* config/rs6000/rs6000.c (rs6000_emit_sync): Use UNSPEC_VOLATILE\n\tand UNSPECV_SYNC_OP.\n\t(emit_unlikely_jump): New.\n\t(emit_load_locked): New.\n\t(emit_store_conditional): New.\n\t(rs6000_split_compare_and_swap): New.\n\t(rs6000_split_lock_test_and_set): New.\n\t(is_dispatch_slot_restricted): Return 4 for TYPE_LOAD_L,\n\tTYPE_STORE_C, TYPE_ISYNC, TYPE_SYNC.\n\t* config/rs6000/rs6000-protos.h (rs6000_split_compare_and_swap,\n\trs6000_split_lock_test_and_set): Declare.\n\t* config/rs6000/{40x.md,440.md,603.md,6xx.md,7450.md,7xx.md,8540.md,\n\tmpc.md,power4.md,power5.md,rios1.md,rios2.md,rs64.md): Add load_l,\n\tstore_c, isync, sync.\n\nFrom-SVN: r101712", "tree": {"sha": "955cd40d8715a07dc2818bb9bbd6b997d6646a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/955cd40d8715a07dc2818bb9bbd6b997d6646a4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b52110d478b71ec2e1f099b3c1b539228a9bdaea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52110d478b71ec2e1f099b3c1b539228a9bdaea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52110d478b71ec2e1f099b3c1b539228a9bdaea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52110d478b71ec2e1f099b3c1b539228a9bdaea/comments", "author": null, "committer": null, "parents": [{"sha": "456f9beaadde15da4885551550399b8acc870e54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456f9beaadde15da4885551550399b8acc870e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456f9beaadde15da4885551550399b8acc870e54"}], "stats": {"total": 479, "additions": 372, "deletions": 107}, "files": [{"sha": "1536408978b2cd8ea6b9a119123c2c57e8389c17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -1,3 +1,39 @@\n+2005-07-07  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (UNSPEC_SYNC, UNSPEC_SYNC_OP,\n+\tUNSPEC_SYNC_SWAP, UNSPEC_LWSYNC, UNSPEC_ISYNC): Delete.\n+\t(UNSPECV_LL, UNSPECV_SC, UNSPECV_ATOMIC, UNSPECV_SYNC,\n+\tUNSPECV_SYNC_OP, UNSPECV_CMPXCHG, UNSPECV_LWSYNC, UNSPECV_ISYNC): New.\n+\t(define_attr \"type\"): Add isync, sync, load_l, store_c.\n+\t* config/rs6000/sync.md (memory_barrier): Change to define_expand.\n+\tCreate scratch volatile MEM.\n+\t(sync_internal): New.  POWER mnemonic is dcs, not ics.  Attribute\n+\tsync.\n+\t(load_locked_<mode>): New.\n+\t(store_conditional_<mode>): New.\n+\t(sync_compare_and_swap<mode>): Replace with splitter.\n+\t(sync_lock_test_and_set<mode>): Replace with splitter.\n+\t(sync_<fetchop><mode>): Change to unspec_volatile UNSPECV_SYNC_OP\n+\tand UNSPECV_ISYNC.\n+\t(isync): Change to unspec_volatile UNSPECV_ISYNC.  POWER mnemonic\n+\tis ics.  Attribute isync.\n+\t(lwsync): Change to unspec_volatile UNSPECV_LWSYNC.  Attribute\n+\tlwsync.\n+\t* config/rs6000/rs6000.c (rs6000_emit_sync): Use UNSPEC_VOLATILE\n+\tand UNSPECV_SYNC_OP.\n+\t(emit_unlikely_jump): New.\n+\t(emit_load_locked): New.\n+\t(emit_store_conditional): New.\n+\t(rs6000_split_compare_and_swap): New.\n+\t(rs6000_split_lock_test_and_set): New.\n+\t(is_dispatch_slot_restricted): Return 4 for TYPE_LOAD_L,\n+\tTYPE_STORE_C, TYPE_ISYNC, TYPE_SYNC.\n+\t* config/rs6000/rs6000-protos.h (rs6000_split_compare_and_swap,\n+\trs6000_split_lock_test_and_set): Declare.\n+\t* config/rs6000/{40x.md,440.md,603.md,6xx.md,7450.md,7xx.md,8540.md,\n+\tmpc.md,power4.md,power5.md,rios1.md,rios2.md,rs64.md): Add load_l,\n+\tstore_c, isync, sync.\n+\n 2005-07-07  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Makefile.in (echo_quoted_to_gtyp): New template for outputing"}, {"sha": "c1fdce0fc2510dad0f34d0ade1d67d714214ff04", "filename": "gcc/config/rs6000/40x.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F40x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F40x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F40x.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -27,7 +27,8 @@\n ;; In-order execution\n ;; Max issue two insns/cycle (includes one branch)\n (define_insn_reservation \"ppc403-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n+\t\t\tload_l,store_c,sync\")\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"iu_40x\")\n \n@@ -102,7 +103,7 @@\n   \"iu_40x\")\n \n (define_insn_reservation \"ppc403-jmpreg\" 1\n-  (and (eq_attr \"type\" \"jmpreg,branch\")\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"bpu_40x\")\n \n@@ -112,6 +113,7 @@\n   \"bpu_40x\")\n \n (define_insn_reservation \"ppc405-float\" 11\n-  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,fpcompare,fp,dmul,sdiv,ddiv\")\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,\\\n+\t\t\tfpcompare,fp,dmul,sdiv,ddiv\")\n        (eq_attr \"cpu\" \"ppc405\"))\n   \"fpu_405*10\")"}, {"sha": "6b1b4554d1464dc2be511e570a9f95acee0f70b9", "filename": "gcc/config/rs6000/440.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F440.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F440.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F440.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -34,7 +34,8 @@\n \n \n (define_insn_reservation \"ppc440-load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n+\t\t\tload_l,store_c,sync\")\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_l_pipe\")\n \n@@ -86,7 +87,7 @@\n   \"ppc440_issue,ppc440_i_pipe*33\")\n \n (define_insn_reservation \"ppc440-branch\" 1\n-  (and (eq_attr \"type\" \"branch,jmpreg\")\n+  (and (eq_attr \"type\" \"branch,jmpreg,isync\")\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_i_pipe\")\n "}, {"sha": "b094d2a8af71bbcbb400328c96f54adafe98856b", "filename": "gcc/config/rs6000/603.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F603.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F603.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F603.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -39,11 +39,11 @@\n ;; CR insns get executed in the SRU.  Not modelled.\n \n (define_insn_reservation \"ppc603-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load,load_ext,load_ux,load_u,load_l\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"lsu_603\")\n \n-(define_insn_reservation \"ppc603-store\" 1\n+(define_insn_reservation \"ppc603-store\" 2\n   (and (eq_attr \"type\" \"store,store_ux,store_u,fpstore,fpstore_ux,fpstore_u\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"lsu_603\")\n@@ -53,6 +53,11 @@\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"lsu_603\")\n \n+(define_insn_reservation \"ppc603-storec\" 8\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"lsu_603\")\n+\n (define_insn_reservation \"ppc603-integer\" 1\n   (and (eq_attr \"type\" \"integer,insert_word\")\n        (eq_attr \"cpu\" \"ppc603\"))\n@@ -126,7 +131,7 @@\n   \"sru_603\")\n \n (define_insn_reservation \"ppc603-mfjmpr\" 2\n-  (and (eq_attr \"type\" \"mfjmpr\")\n+  (and (eq_attr \"type\" \"mfjmpr,isync,sync\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"sru_603\")\n "}, {"sha": "deb0e89c0580b5046d91a6daea5dfe63aa5c7b87", "filename": "gcc/config/rs6000/6xx.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F6xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F6xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F6xx.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -63,6 +63,16 @@\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   \"lsu_6xx\")\n \n+(define_insn_reservation \"ppc604-llsc\" 3\n+  (and (eq_attr \"type\" \"load_l,store_c\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n+  \"lsu_6xx\")\n+  \n+(define_insn_reservation \"ppc630-llsc\" 4\n+  (and (eq_attr \"type\" \"load_l,store_c\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+  \n (define_insn_reservation \"ppc604-integer\" 1\n   (and (eq_attr \"type\" \"integer,insert_word\")\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n@@ -242,3 +252,23 @@\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   \"bpu_6xx\")\n \n+(define_insn_reservation \"ppc604-isync\" 0\n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n+  \"bpu_6xx\")\n+  \n+(define_insn_reservation \"ppc630-isync\" 6\n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"bpu_6xx\")\n+  \n+(define_insn_reservation \"ppc604-sync\" 35\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n+  \"lsu_6xx\")\n+  \n+(define_insn_reservation \"ppc630-sync\" 26\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+  "}, {"sha": "99e87125fb95e10eaab5b6e9ac6f713930f8cc95", "filename": "gcc/config/rs6000/7450.md", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F7450.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F7450.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7450.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -64,6 +64,16 @@\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,lsu_7450*3\")\n \n+(define_insn_reservation \"ppc7450-llsc\" 3\n+  (and (eq_attr \"type\" \"load_l,store_c\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n+(define_insn_reservation \"ppc7450-sync\" 35\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n (define_insn_reservation \"ppc7450-integer\" 1\n   (and (eq_attr \"type\" \"integer,insert_word\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n@@ -142,7 +152,7 @@\n   \"nothing,mciu_7450*2\")\n \n (define_insn_reservation \"ppc7450-jmpreg\" 1\n-  (and (eq_attr \"type\" \"jmpreg,branch\")\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"nothing,bpu_7450\")\n "}, {"sha": "77e58a3cb6c958bd869a1a3532caabbef1f54b1d", "filename": "gcc/config/rs6000/7xx.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F7xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F7xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7xx.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -48,16 +48,22 @@\n \n (define_insn_reservation \"ppc750-load\" 2\n   (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,\\\n-\t\t        load_ux,load_u,fpload,fpload_ux,fpload_u,vecload\")\n+\t\t        load_ux,load_u,fpload,fpload_ux,fpload_u,\\\n+\t\t\tvecload,load_l\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"ppc750_du,lsu_7xx\")\n \n-(define_insn_reservation \"ppc750-store\" 1\n+(define_insn_reservation \"ppc750-store\" 2\n   (and (eq_attr \"type\" \"store,store_ux,store_u,\\\n \t\t        fpstore,fpstore_ux,fpstore_u,vecstore\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"ppc750_du,lsu_7xx\")\n \n+(define_insn_reservation \"ppc750-storec\" 8\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,lsu_7xx\")\n+\n (define_insn_reservation \"ppc750-integer\" 1\n   (and (eq_attr \"type\" \"integer,insert_word\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n@@ -137,10 +143,10 @@\n (define_insn_reservation \"ppc750-crlogical\" 3\n   (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  \"ppc750_du,sru_7xx*2\")\n+  \"nothing,sru_7xx*2\")\n \n (define_insn_reservation \"ppc750-mtjmpr\" 2\n-  (and (eq_attr \"type\" \"mtjmpr\")\n+  (and (eq_attr \"type\" \"mtjmpr,isync,sync\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"nothing,sru_7xx*2\")\n \n@@ -150,7 +156,7 @@\n   \"nothing,sru_7xx*2\")\n \n (define_insn_reservation \"ppc750-jmpreg\" 1\n-  (and (eq_attr \"type\" \"jmpreg,branch\")\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"nothing,bpu_7xx\")\n "}, {"sha": "b42e2472a415c58f60381e435f01dfb140542177", "filename": "gcc/config/rs6000/8540.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F8540.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2F8540.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F8540.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -104,7 +104,7 @@\n \n ;; Branch.  Actually this latency time is not used by the scheduler.\n (define_insn_reservation \"ppc8540_branch\" 1\n-  (and (eq_attr \"type\" \"jmpreg,branch\")\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n        (eq_attr \"cpu\" \"ppc8540\"))\n   \"ppc8540_decode,ppc8540_bu,ppc8540_retire\")\n \n@@ -151,13 +151,14 @@\n \n ;; Loads\n (define_insn_reservation \"ppc8540_load\" 3\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n+\t\t\tload_l,sync\")\n        (eq_attr \"cpu\" \"ppc8540\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n \n ;; Stores.\n (define_insn_reservation \"ppc8540_store\" 3\n-  (and (eq_attr \"type\" \"store,store_ux,store_u\")\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n        (eq_attr \"cpu\" \"ppc8540\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n "}, {"sha": "242382c01322a534b087e361197a5658ad618df8", "filename": "gcc/config/rs6000/mpc.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Fmpc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Fmpc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmpc.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -27,7 +27,8 @@\n ;; 505/801/821/823\n \n (define_insn_reservation \"mpccore-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n+\t\t\tload_l,store_c,sync\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"lsu_mpc\")\n \n@@ -103,7 +104,7 @@\n   \"bpu_mpc\")\n \n (define_insn_reservation \"mpccore-jmpreg\" 1\n-  (and (eq_attr \"type\" \"jmpreg,branch,cr_logical,delayed_cr,mfcr,mtcr\")\n+  (and (eq_attr \"type\" \"jmpreg,branch,cr_logical,delayed_cr,mfcr,mtcr,isync\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"bpu_mpc\")\n "}, {"sha": "53ac066d856a45522429a1cd0b77406a0b5e7231", "filename": "gcc/config/rs6000/power4.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Fpower4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Fpower4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower4.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -174,6 +174,12 @@\n   |(du3_power4,lsu2_power4,vec_power4)\\\n   |(du4_power4,lsu1_power4,vec_power4)\")\n \n+(define_insn_reservation \"power4-llsc\" 11\n+  (and (eq_attr \"type\" \"load_l,store_c,sync\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+  lsu1_power4\")\n+\n \n ; Integer latency is 2 cycles\n (define_insn_reservation \"power4-integer\" 2\n@@ -354,6 +360,12 @@\n   |(du3_power4,fpu2_power4*35)\\\n   |(du4_power4,fpu2_power4*35)\")\n \n+(define_insn_reservation \"power4-isync\" 2\n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+  lsu1_power4\")\n+\n \n ; VMX\n (define_insn_reservation \"power4-vecsimple\" 2"}, {"sha": "ce6892605d1f3ad06a01bc6ca84c7571fe977e26", "filename": "gcc/config/rs6000/power5.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Fpower5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Fpower5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower5.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -135,6 +135,12 @@\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5,lsu1_power5+iu2_power5,fpu1_power5\")\n \n+(define_insn_reservation \"power5-llsc\" 11\n+  (and (eq_attr \"type\" \"load_l,store_c,sync\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+  lsu1_power5\")\n+\n \n ; Integer latency is 2 cycles\n (define_insn_reservation \"power5-integer\" 2\n@@ -307,3 +313,9 @@\n   |(du3_power5,fpu2_power5*35)\\\n   |(du4_power5,fpu2_power5*35)\")\n \n+(define_insn_reservation \"power5-isync\" 2 \n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+  lsu1_power5\")\n+"}, {"sha": "945ee10dd0697b4317e90f35e78df7f16c75dd5d", "filename": "gcc/config/rs6000/rios1.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frios1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frios1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frios1.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -26,7 +26,8 @@\n ;; RIOS1  32-bit IU, FPU, BPU\n \n (define_insn_reservation \"rios1-load\" 2\n-  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u\")\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n+\t\t        load_l,store_c,sync\")\n        (eq_attr \"cpu\" \"rios1,ppc601\"))\n   \"iu_rios1\")\n \n@@ -183,7 +184,7 @@\n   \"iu_rios1,bpu_rios1\")\n \n (define_insn_reservation \"rios1-branch\" 1\n-  (and (eq_attr \"type\" \"jmpreg,branch\")\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n        (eq_attr \"cpu\" \"rios1,ppc601\"))\n   \"bpu_rios1\")\n "}, {"sha": "6c0966ede41de671123da7dad3504be9f62ce01a", "filename": "gcc/config/rs6000/rios2.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frios2.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -29,7 +29,8 @@\n \n (define_insn_reservation \"rios2-load\" 2\n   (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,\\\n-\t\t        load_ux,load_u,fpload,fpload_ux,fpload_u\")\n+\t\t        load_ux,load_u,fpload,fpload_ux,fpload_u,\\\n+\t\t\tload_l,store_c,sync\")\n        (eq_attr \"cpu\" \"rios2\"))\n   \"iu1_rios2|iu2_rios2\")\n \n@@ -121,7 +122,7 @@\n   \"iu1_rios2,bpu_rios2\")\n \n (define_insn_reservation \"rios2-branch\" 1\n-  (and (eq_attr \"type\" \"jmpreg,branch\")\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n        (eq_attr \"cpu\" \"rios2\"))\n   \"bpu_rios2\")\n "}, {"sha": "20bdded1cca0e0f851fe62744b082189162143a5", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -82,6 +82,8 @@ extern int rs6000_emit_vector_cond_expr (rtx, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_emit_minmax (rtx, enum rtx_code, rtx, rtx);\n extern void rs6000_emit_sync (enum rtx_code, enum machine_mode,\n \t\t\t      rtx, rtx, rtx, rtx, bool);\n+extern void rs6000_split_compare_and_swap (rtx, rtx, rtx, rtx, rtx);\n+extern void rs6000_split_lock_test_and_set (rtx, rtx, rtx, rtx);\n extern void rs6000_emit_swdivsf (rtx, rtx, rtx);\n extern void rs6000_emit_swdivdf (rtx, rtx, rtx);\n extern void output_toc (FILE *, rtx, int, enum machine_mode);"}, {"sha": "921d16ff78333068fcfbc01dd1aa446eee14a85b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 114, "deletions": 3, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -11643,8 +11643,9 @@ rs6000_emit_sync (enum rtx_code code, enum machine_mode mode,\n   set_after = gen_rtx_SET (VOIDmode, after, the_op);\n   set_before = gen_rtx_SET (VOIDmode, before, used_m);\n   set_atomic = gen_rtx_SET (VOIDmode, used_m,\n-\t\t\t    gen_rtx_UNSPEC (used_mode, gen_rtvec (1, the_op),\n-\t\t\t\t\t    UNSPEC_SYNC_OP));\n+\t\t\t    gen_rtx_UNSPEC_VOLATILE (used_mode,\n+\t\t\t\t\t\t     gen_rtvec (1, the_op),\n+\t\t\t\t\t\t     UNSPECV_SYNC_OP));\n   cc_scratch = gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (CCmode));\n \n   if (code == PLUS && used_mode != mode)\n@@ -11675,7 +11676,112 @@ rs6000_emit_sync (enum rtx_code code, enum machine_mode mode,\n     emit_insn (gen_isync ());\n }\n \n-/* Emit instructions to move SRC to DST.  Called by splitters for\n+/* A subroutine of the atomic operation splitters.  Jump to LABEL if\n+   COND is true.  Mark the jump as unlikely to be taken.  */\n+\n+static void\n+emit_unlikely_jump (rtx cond, rtx label)\n+{\n+  rtx very_unlikely = GEN_INT (REG_BR_PROB_BASE / 100 - 1);\n+  rtx x;\n+\n+  x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n+  x = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, x));\n+  REG_NOTES (x) = gen_rtx_EXPR_LIST (REG_BR_PROB, very_unlikely, NULL_RTX);\n+}\n+\n+/* A subroutine of the atomic operation splitters.  Emit a load-locked\n+   instruction in MODE.  */\n+\n+static void\n+emit_load_locked (enum machine_mode mode, rtx reg, rtx mem)\n+{\n+  rtx (*fn) (rtx, rtx) = NULL;\n+  if (mode == SImode)\n+    fn = gen_load_locked_si;\n+  else if (mode == DImode)\n+    fn = gen_load_locked_di;\n+  emit_insn (fn (reg, mem));\n+}\n+\n+/* A subroutine of the atomic operation splitters.  Emit a store-conditional\n+   instruction in MODE.  */\n+\n+static void\n+emit_store_conditional (enum machine_mode mode, rtx res, rtx mem, rtx val)\n+{\n+  rtx (*fn) (rtx, rtx, rtx) = NULL;\n+  if (mode == SImode)\n+    fn = gen_store_conditional_si;\n+  else if (mode == DImode)\n+    fn = gen_store_conditional_di;\n+\n+  if (PPC405_ERRATUM77)\n+    emit_insn (gen_memory_barrier ());\n+\n+  emit_insn (fn (res, mem, val));\n+}\n+\n+/* Expand an atomic compare and swap operation.  MEM is the memory on which\n+   to operate.  OLDVAL is the old value to be compared.  NEWVAL is the new\n+   value to be stored.  SCRATCH is a scratch GPR.  */\n+\n+void\n+rs6000_split_compare_and_swap (rtx retval, rtx mem, rtx oldval, rtx newval,\n+\t\t\t       rtx scratch)\n+{\n+  enum machine_mode mode = GET_MODE (mem);\n+  rtx label1, label2, x, cond = gen_rtx_REG (CCmode, CR0_REGNO);\n+\n+  emit_insn (gen_memory_barrier ());\n+\n+  label1 = gen_rtx_LABEL_REF (VOIDmode, gen_label_rtx ());\n+  label2 = gen_rtx_LABEL_REF (VOIDmode, gen_label_rtx ());\n+  emit_label (XEXP (label1, 0));\n+\n+  emit_load_locked (mode, retval, mem);\n+\n+  x = gen_rtx_COMPARE (CCmode, retval, oldval);\n+  emit_insn (gen_rtx_SET (VOIDmode, cond, x));\n+\n+  x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n+  emit_unlikely_jump (x, label2);\n+\n+  emit_move_insn (scratch, newval);\n+  emit_store_conditional (mode, cond, mem, scratch);\n+\n+  x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n+  emit_unlikely_jump (x, label1);\n+\n+  emit_insn (gen_isync ());\n+  emit_label (XEXP (label2, 0));\n+}\n+\n+/* Expand an atomic test and set operation.  MEM is the memory on which\n+   to operate.  VAL is the value set.  SCRATCH is a scratch GPR.  */\n+\n+void\n+rs6000_split_lock_test_and_set (rtx retval, rtx mem, rtx val, rtx scratch)\n+{\n+  enum machine_mode mode = GET_MODE (mem);\n+  rtx label, x, cond = gen_rtx_REG (CCmode, CR0_REGNO);\n+\n+  emit_insn (gen_memory_barrier ());\n+\n+  label = gen_rtx_LABEL_REF (VOIDmode, gen_label_rtx ());\n+  emit_label (XEXP (label, 0));\n+\n+  emit_load_locked (mode, retval, mem);\n+  emit_move_insn (scratch, val);\n+  emit_store_conditional (mode, cond, mem, scratch);\n+\n+  x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n+  emit_unlikely_jump (x, label);\n+\n+  emit_insn (gen_isync ());\n+}\n+\n+  /* Emit instructions to move SRC to DST.  Called by splitters for\n    multi-register moves.  It will emit at most one instruction for\n    each register that is accessed; that is, it won't emit li/lis pairs\n    (or equivalent for 64-bit code).  One of SRC or DST must be a hard\n@@ -15795,6 +15901,11 @@ is_dispatch_slot_restricted (rtx insn)\n     case TYPE_IDIV:\n     case TYPE_LDIV:\n       return 2;\n+    case TYPE_LOAD_L:\n+    case TYPE_STORE_C:\n+    case TYPE_ISYNC:\n+    case TYPE_SYNC:\n+      return 4;\n     default:\n       if (rs6000_cpu == PROCESSOR_POWER5\n \t  && is_cracked_insn (insn))"}, {"sha": "1381f7d7865d176cb38af454e2e9990ed434f99d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -52,11 +52,6 @@\n    (UNSPEC_FIX_TRUNC_TF\t\t30)\t; fadd, rounding towards zero\n    (UNSPEC_MV_CR_GT\t\t31)\t; move_from_CR_eq_bit\n    (UNSPEC_STFIWX\t\t32)\n-   (UNSPEC_SYNC\t\t\t33)\n-   (UNSPEC_SYNC_OP\t\t34)\n-   (UNSPEC_SYNC_SWAP\t\t35)\n-   (UNSPEC_LWSYNC\t\t36)\n-   (UNSPEC_ISYNC\t\t37)\n    (UNSPEC_POPCNTB\t\t38)\n    (UNSPEC_FRES\t\t\t39)\n    (UNSPEC_SP_SET\t\t40)\n@@ -69,12 +64,20 @@\n \n (define_constants\n   [(UNSPECV_BLOCK\t\t0)\n+   (UNSPECV_LL\t\t\t1)\t; load-locked\n+   (UNSPECV_SC\t\t\t2)\t; store-conditional\n+   (UNSPECV_ATOMIC\t\t3)\n+   (UNSPECV_SYNC\t\t4)\n+   (UNSPECV_SYNC_OP\t\t5)\n+   (UNSPECV_CMPXCHG\t\t6)\n+   (UNSPECV_LWSYNC\t\t7)\n+   (UNSPECV_ISYNC\t\t8)\n    (UNSPECV_EH_RR\t\t9)\t; eh_reg_restore\n   ])\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n-(define_attr \"type\" \"integer,two,three,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,insert_word,branch,cmp,fast_compare,compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv\"\n+(define_attr \"type\" \"integer,two,three,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,insert_word,branch,cmp,fast_compare,compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv,isync,sync,load_l,store_c\"\n   (const_string \"integer\"))\n \n ;; Length (in bytes)."}, {"sha": "503130f332643a00b5ec56fcc43c3a02b0d62a2e", "filename": "gcc/config/rs6000/rs64.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frs64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Frs64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs64.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -41,6 +41,11 @@\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"lsu_rs64\")\n \n+(define_insn_reservation \"rs64a-llsc\" 2\n+  (and (eq_attr \"type\" \"load_l,store_c\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"lsu_rs64\")\n+\n (define_insn_reservation \"rs64a-integer\" 1\n   (and (eq_attr \"type\" \"integer,insert_word\")\n        (eq_attr \"cpu\" \"rs64a\"))\n@@ -136,3 +141,13 @@\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"bpu_rs64\")\n \n+(define_insn_reservation \"rs64a-isync\" 6\n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"bpu_rs64\")\n+\n+(define_insn_reservation \"rs64a-sync\" 1\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  \"lsu_rs64\")\n+"}, {"sha": "a98dc1545d350574fbec24dbcb2df0d33d669796", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 91, "deletions": 75, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52110d478b71ec2e1f099b3c1b539228a9bdaea/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=b52110d478b71ec2e1f099b3c1b539228a9bdaea", "patch": "@@ -22,51 +22,77 @@\n (define_mode_attr larx [(SI \"lwarx\") (DI \"ldarx\")])\n (define_mode_attr stcx [(SI \"stwcx.\") (DI \"stdcx.\")])\n \n-(define_insn \"memory_barrier\"\n-  [(set (mem:BLK (match_scratch 0 \"X\"))\n-\t(unspec:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_SYNC))]\n+(define_expand \"memory_barrier\"\n+  [(set (mem:BLK (match_dup 0))\n+        (unspec_volatile:BLK [(mem:BLK (match_dup 0))] UNSPECV_SYNC))]\n   \"\"\n-  \"{ics|sync}\")\n-\n-(define_expand \"sync_compare_and_swap<mode>\"\n-  [(parallel [(set (match_operand:GPR 1 \"memory_operand\" \"\")\n-\t\t   (unspec:GPR [(match_dup 1)\n-\t\t\t\t(match_operand:GPR 2 \"reg_or_short_operand\" \"\")\n-\t\t\t\t(match_operand:GPR 3 \"gpc_reg_operand\" \"\")]\n-\t\t\t       UNSPEC_SYNC_SWAP))\n-\t      (set (match_operand:GPR 0 \"gpc_reg_operand\" \"\") (match_dup 1))\n-\t      (set (mem:BLK (match_scratch 5 \"\"))\n-\t\t   (unspec:BLK [(mem:BLK (match_scratch 6 \"\"))] UNSPEC_SYNC))\n-\t      (clobber (match_scratch:CC 4 \"\"))])]\n-  \"TARGET_POWERPC\")\n-\n-(define_insn \"sync_compare_and_swap<mode>_internal\"\n-  [(set (match_operand:GPR 1 \"memory_operand\" \"+Z\")\n-\t(unspec:GPR [(match_dup 1)\n-\t\t     (match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")\n-\t\t     (match_operand:GPR 3 \"gpc_reg_operand\" \"r\")]\n-\t\t    UNSPEC_SYNC_SWAP))\n-   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\") (match_dup 1))\n-   (set (mem:BLK (match_scratch 5 \"X\"))\n-\t(unspec:BLK [(mem:BLK (match_scratch 6 \"X\"))] UNSPEC_SYNC))\n-   (clobber (match_scratch:CC 4 \"=&x\"))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"sync\\n\\t<larx> %0,%y1\\n\\tcmp<wd>%I2 %0,%2\\n\\tbne- $+12\\n\\t<stcx> %3,%y1\\n\\tbne- $-16\\n\\tisync\"\n-  [(set_attr \"length\" \"28\")])\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n+(define_insn \"*sync_internal\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+        (unspec_volatile:BLK [(match_operand:BLK 1 \"\" \"\")] UNSPECV_SYNC))]\n+  \"\"\n+  \"{dcs|sync}\"\n+  [(set_attr \"type\" \"sync\")])\n+\n+(define_insn \"load_locked_<mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec_volatile:GPR\n+\t  [(match_operand:GPR 1 \"memory_operand\" \"m\")] UNSPECV_LL))]\n+  \"TARGET_POWERPC\"\n+  \"<larx> %0,%y1\"\n+  [(set_attr \"type\" \"load_l\")])\n+\n+(define_insn \"store_conditional_<mode>\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(const_int 0)] UNSPECV_SC))\n+   (set (match_operand:GPR 1 \"memory_operand\" \"=m\")\n+\t(match_operand:GPR 2 \"gpc_reg_operand\" \"r\"))]\n+  \"TARGET_POWERPC\"\n+  \"<stcx> %2,%y1\"\n+  [(set_attr \"type\" \"store_c\")])\n+\n+(define_insn_and_split \"sync_compare_and_swap<mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+m\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+\t  [(match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")\n+\t   (match_operand:GPR 3 \"gpc_reg_operand\" \"r\")]\n+\t  UNSPECV_CMPXCHG))\n+   (clobber (match_scratch:GPR 4 \"=&r\"))\n+   (clobber (match_scratch:CC 5 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rs6000_split_compare_and_swap (operands[0], operands[1], operands[2],\n+\t\t\t\t operands[3], operands[4]);\n+  DONE;\n+})\n \n-(define_insn \"sync_compare_and_swap<mode>_ppc405\"\n-  [(set (match_operand:GPR 1 \"memory_operand\" \"+Z\")\n-\t(unspec:GPR [(match_dup 1)\n-\t\t     (match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")\n-\t\t     (match_operand:GPR 3 \"gpc_reg_operand\" \"r\")]\n-\t\t    UNSPEC_SYNC_SWAP))\n-   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\") (match_dup 1))\n-   (set (mem:BLK (match_scratch 5 \"X\"))\n-\t(unspec:BLK [(mem:BLK (match_scratch 6 \"X\"))] UNSPEC_SYNC))\n+(define_insn_and_split \"sync_lock_test_and_set<mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n+        (match_operand:GPR 1 \"memory_operand\" \"+m\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+\t  [(match_operand:GPR 2 \"reg_or_short_operand\" \"rL\")]\n+\t  UNSPECV_CMPXCHG))\n+   (clobber (match_scratch:GPR 3 \"=&r\"))\n    (clobber (match_scratch:CC 4 \"=&x\"))]\n-  \"TARGET_POWERPC && PPC405_ERRATUM77\"\n-  \"sync\\n\\t<larx> %0,%y1\\n\\tcmp<wd>%I2 %0,%2\\n\\tbne- $+12\\n\\tsync\\n\\t<stcx> %3,%y1\\n\\tbne- $-16\\n\\tisync\"\n-  [(set_attr \"length\" \"32\")])\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rs6000_split_lock_test_and_set (operands[0], operands[1], operands[2],\n+\t\t\t\t  operands[3]);\n+  DONE;\n+})\n \n (define_expand \"sync_add<mode>\"\n   [(use (match_operand:INT1 0 \"memory_operand\" \"\"))\n@@ -296,8 +322,8 @@\n \t\t (match_operand:GPR 1 \"add_operand\" \"rI,L\")))\n    (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b,&b\") (match_dup 0))\n    (set (match_dup 0) \n-\t(unspec:GPR [(plus:GPR (match_dup 0) (match_dup 1))]\n-\t\t   UNSPEC_SYNC_OP))\n+\t(unspec_volatile:GPR [(plus:GPR (match_dup 0) (match_dup 1))]\n+\t\t   UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 4 \"=&x,&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"@\n@@ -313,10 +339,10 @@\n \t\t(and:SI (not:SI (match_dup 4)) (match_dup 0))))\n    (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n    (set (match_dup 0) \n-\t(unspec:SI [(ior:SI (and:SI (plus:SI (match_dup 0) (match_dup 1))\n+\t(unspec_volatile:SI [(ior:SI (and:SI (plus:SI (match_dup 0) (match_dup 1))\n \t\t\t\t    (match_dup 4))\n \t\t\t    (and:SI (not:SI (match_dup 4)) (match_dup 0)))]\n-\t\t   UNSPEC_SYNC_OP))\n+\t\t   UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 5 \"=&x\"))\n    (clobber (match_scratch:SI 6 \"=&r\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n@@ -329,8 +355,8 @@\n \t\t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))\n    (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n    (set (match_dup 0) \n-\t(unspec:GPR [(minus:GPR (match_dup 0) (match_dup 1))]\n-\t\t   UNSPEC_SYNC_OP))\n+\t(unspec_volatile:GPR [(minus:GPR (match_dup 0) (match_dup 1))]\n+\t\t   UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 4 \"=&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"<larx> %3,%y0\\n\\tsubf %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n@@ -342,8 +368,8 @@\n \t\t(match_operand:SI 1 \"and_operand\" \"r,T,K,L\")))\n    (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b,&b,&b,&b\") (match_dup 0))\n    (set (match_dup 0) \n-\t(unspec:SI [(and:SI (match_dup 0) (match_dup 1))]\n-\t\t   UNSPEC_SYNC_OP))\n+\t(unspec_volatile:SI [(and:SI (match_dup 0) (match_dup 1))]\n+\t\t   UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 4 \"=&x,&x,&x,&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"@\n@@ -359,8 +385,8 @@\n \t\t(match_operand:DI 1 \"and_operand\" \"r,S,T,K,J\")))\n    (set (match_operand:DI 3 \"gpc_reg_operand\" \"=&b,&b,&b,&b,&b\") (match_dup 0))\n    (set (match_dup 0) \n-\t(unspec:DI [(and:DI (match_dup 0) (match_dup 1))]\n-\t\t   UNSPEC_SYNC_OP))\n+\t(unspec_volatile:DI [(and:DI (match_dup 0) (match_dup 1))]\n+\t\t   UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 4 \"=&x,&x,&x,&x,&x\"))]\n   \"TARGET_POWERPC64\"\n   \"@\n@@ -377,7 +403,7 @@\n \t [(match_operand:SI 0 \"memory_operand\" \"+Z,Z,Z\")\n \t  (match_operand:SI 1 \"logical_operand\" \"r,K,L\")]))\n    (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:SI [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (set (match_dup 0) (unspec_volatile:SI [(match_dup 4)] UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 5 \"=&x,&x,&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"@\n@@ -392,7 +418,7 @@\n \t [(match_operand:DI 0 \"memory_operand\" \"+Z,Z,Z\")\n \t  (match_operand:DI 1 \"logical_operand\" \"r,K,JF\")]))\n    (set (match_operand:DI 3 \"gpc_reg_operand\" \"=&b,&b,&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:DI [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (set (match_dup 0) (unspec_volatile:DI [(match_dup 4)] UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 5 \"=&x,&x,&x\"))]\n   \"TARGET_POWERPC64\"\n   \"@\n@@ -407,7 +433,7 @@\n \t [(not:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\"))\n \t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")]))\n    (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:GPR [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (set (match_dup 0) (unspec_volatile:GPR [(match_dup 4)] UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 5 \"=&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"<larx> %3,%y0\\n\\t%q4 %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n@@ -424,7 +450,7 @@\n \t\t  (match_operand:SI 5 \"logical_operand\" \"rK\"))\n \t  (match_operand:SI 1 \"gpc_reg_operand\" \"r\")]))\n    (set (match_operand:SI 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:SI [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (set (match_dup 0) (unspec_volatile:SI [(match_dup 4)] UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 6 \"=&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"lwarx %3,%y0\\n\\txor%I2 %2,%3,%5\\n\\t%q4 %2,%2,%1\\n\\tstwcx. %2,%y0\\n\\tbne- $-16\"\n@@ -436,7 +462,7 @@\n \t [(not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))\n \t  (match_operand:GPR 0 \"memory_operand\" \"+Z\")]))\n    (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:GPR [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (set (match_dup 0) (unspec_volatile:GPR [(match_dup 4)] UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 5 \"=&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"<larx> %3,%y0\\n\\t%q4 %2,%3,%1\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n@@ -448,29 +474,18 @@\n \t [(not:GPR (match_operand:GPR 0 \"memory_operand\" \"+Z\"))\n \t  (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))]))\n    (set (match_operand:GPR 3 \"gpc_reg_operand\" \"=&b\") (match_dup 0))\n-   (set (match_dup 0) (unspec:GPR [(match_dup 4)] UNSPEC_SYNC_OP))\n+   (set (match_dup 0) (unspec_volatile:GPR [(match_dup 4)] UNSPECV_SYNC_OP))\n    (clobber (match_scratch:CC 5 \"=&x\"))]\n   \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n   \"<larx> %3,%y0\\n\\t%q4 %2,%1,%3\\n\\t<stcx> %2,%y0\\n\\tbne- $-12\"\n   [(set_attr \"length\" \"16\")])\n \n (define_insn \"isync\"\n   [(set (mem:BLK (match_scratch 0 \"X\"))\n-        (unspec:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_ISYNC))]\n-  \"TARGET_POWERPC\"\n-  \"isync\")\n-\n-(define_insn \"sync_lock_test_and_set<mode>\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+Z\"))\n-   (set (match_dup 1) (unspec:GPR [(match_operand:GPR 2 \"gpc_reg_operand\" \"r\")] \n-\t\t\t\t UNSPEC_SYNC_OP))\n-   (clobber (match_scratch:CC 3 \"=&x\"))\n-   (set (mem:BLK (match_scratch 4 \"X\"))\n-        (unspec:BLK [(mem:BLK (match_scratch 5 \"X\"))] UNSPEC_ISYNC))]\n-  \"TARGET_POWERPC && !PPC405_ERRATUM77\"\n-  \"<larx> %0,%y1\\n\\t<stcx> %2,%y1\\n\\tbne- $-8\\n\\tisync\"\n-  [(set_attr \"length\" \"16\")])\n+        (unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPECV_ISYNC))]\n+  \"\"\n+  \"{ics|isync}\"\n+  [(set_attr \"type\" \"isync\")])\n \n (define_expand \"sync_lock_release<mode>\"\n   [(set (match_operand:INT 0 \"memory_operand\")\n@@ -486,7 +501,8 @@\n ; Some AIX assemblers don't accept lwsync, so we use a .long.\n (define_insn \"lwsync\"\n   [(set (mem:BLK (match_scratch 0 \"X\"))\n-        (unspec:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_LWSYNC))]\n+        (unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPECV_LWSYNC))]\n   \"\"\n-  \".long 0x7c2004ac\")\n+  \".long 0x7c2004ac\"\n+  [(set_attr \"type\" \"sync\")])\n "}]}