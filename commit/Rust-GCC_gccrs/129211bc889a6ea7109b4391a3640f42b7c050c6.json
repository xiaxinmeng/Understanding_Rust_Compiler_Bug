{"sha": "129211bc889a6ea7109b4391a3640f42b7c050c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5MjExYmM4ODlhNmVhNzEwOWI0MzkxYTM2NDBmNDJiN2MwNTBjNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-10T00:47:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-05-10T00:47:12Z"}, "message": "c-common.h (enum cxx_dialect): Add cxx_unset.\n\ngcc/c-family/\n\t* c-common.h (enum cxx_dialect): Add cxx_unset.\n\t* c-common.c (cxx_dialect): Initialize to cxx_unset.\n\t* c-opts.c (c_common_post_options): Set C++ dialect to C++98 if unset.\ngcc/testsuite/\n\t* lib/target-supports.exp (cxx_default): New global.\n\t(check_effective_target_c++11_only)\n\t(check_effective_target_c++14_only)\n\t(check_effective_target_c++98_only)\n\t(check_effective_target_c++1z_only): Check it.\n\nFrom-SVN: r222977", "tree": {"sha": "abc6b9a35cdb67ca394fce8184e12cc975701e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abc6b9a35cdb67ca394fce8184e12cc975701e3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129211bc889a6ea7109b4391a3640f42b7c050c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129211bc889a6ea7109b4391a3640f42b7c050c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129211bc889a6ea7109b4391a3640f42b7c050c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129211bc889a6ea7109b4391a3640f42b7c050c6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "381bf11ee990736088f97d64e10ed1a406b4e28a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381bf11ee990736088f97d64e10ed1a406b4e28a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/381bf11ee990736088f97d64e10ed1a406b4e28a"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "568b2c60bf3a7029be27ed3bb7353095c0fc439a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=129211bc889a6ea7109b4391a3640f42b7c050c6", "patch": "@@ -1,5 +1,9 @@\n 2015-05-09  Jason Merrill  <jason@redhat.com>\n \n+\t* c-common.h (enum cxx_dialect): Add cxx_unset.\n+\t* c-common.c (cxx_dialect): Initialize to cxx_unset.\n+\t* c-opts.c (c_common_post_options): Set C++ dialect to C++98 if unset.\n+\n \t* c.opt (std=c++14): Remove Undocumented flag and experimental warning.\n \t(std=gnu++0x): Mark as Undocumented.\n \t(std=gnu++1y): Add deprecated message."}, {"sha": "93b306020781a4593e56ec1be8297c3e1488db4d", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=129211bc889a6ea7109b4391a3640f42b7c050c6", "patch": "@@ -256,9 +256,9 @@ const char *constant_string_class_name;\n \n int flag_use_repository;\n \n-/* The C++ dialect being used. C++98 is the default.  */\n+/* The C++ dialect being used.  Default set in c_common_post_options.  */\n \n-enum cxx_dialect cxx_dialect = cxx98;\n+enum cxx_dialect cxx_dialect = cxx_unset;\n \n /* Maximum template instantiation depth.  This limit exists to limit the\n    time it takes to notice excessively recursive template instantiations."}, {"sha": "5c1fa7b98687f6e39f7516d72460698a0d593620", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=129211bc889a6ea7109b4391a3640f42b7c050c6", "patch": "@@ -671,6 +671,7 @@ extern int flag_use_repository;\n /* The supported C++ dialects.  */\n \n enum cxx_dialect {\n+  cxx_unset,\n   /* C++98 with TC1  */\n   cxx98,\n   cxx03 = cxx98,"}, {"sha": "bd99871583b6d9ae0d71478f936c533d7d4562e8", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=129211bc889a6ea7109b4391a3640f42b7c050c6", "patch": "@@ -896,6 +896,10 @@ c_common_post_options (const char **pfilename)\n   if (flag_abi_version == 0)\n     flag_abi_version = 8;\n \n+  /* Set C++ standard to C++98 if not specified on the command line.  */\n+  if (c_dialect_cxx () && cxx_dialect == cxx_unset)\n+    set_std_cxx98 (/*ISO*/false);\n+\n   if (cxx_dialect >= cxx11)\n     {\n       /* If we're allowing C++0x constructs, don't warn about C++98"}, {"sha": "49b758efbe777a45a547969ab077bba94ee86c9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=129211bc889a6ea7109b4391a3640f42b7c050c6", "patch": "@@ -1,3 +1,11 @@\n+2015-05-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* lib/target-supports.exp (cxx_default): New global.\n+\t(check_effective_target_c++11_only)\n+\t(check_effective_target_c++14_only)\n+\t(check_effective_target_c++98_only)\n+\t(check_effective_target_c++1z_only): Check it.\n+\n 2015-05-09  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/64454"}, {"sha": "3728927dccc8a32b0ab716f93d715bb36443c44c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129211bc889a6ea7109b4391a3640f42b7c050c6/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=129211bc889a6ea7109b4391a3640f42b7c050c6", "patch": "@@ -5892,15 +5892,23 @@ proc check_effective_target_c++ { } {\n  return 0\n }\n \n+set cxx_default \"c++98\"\n # Check whether the current active language standard supports the features\n-# of C++11/C++14 by checking for the presence of one of the -std\n-# flags.  This assumes that the default for the compiler is C++98, and that\n+# of C++11/C++14 by checking for the presence of one of the -std flags.\n+# This assumes that the default for the compiler is $cxx_default, and that\n # there will never be multiple -std= arguments on the command line.\n proc check_effective_target_c++11_only { } {\n+    global cxx_default\n     if ![check_effective_target_c++] {\n \treturn 0\n     }\n-    return [check-flags { { } { } { -std=c++0x -std=gnu++0x -std=c++11 -std=gnu++11 } }]\n+    if [check-flags { { } { } { -std=c++0x -std=gnu++0x -std=c++11 -std=gnu++11 } }] {\n+\treturn 1\n+    }\n+    if { $cxx_default == \"c++11\" && [check-flags { { } { } { } { -std=* } }] } {\n+\treturn 1\n+    }\n+    return 0\n }\n proc check_effective_target_c++11 { } {\n     if [check_effective_target_c++11_only] {\n@@ -5912,14 +5920,21 @@ proc check_effective_target_c++11_down { } {\n     if ![check_effective_target_c++] {\n \treturn 0\n     }\n-    return ![check_effective_target_c++14]\n+    return [expr ![check_effective_target_c++14] ]\n }\n \n proc check_effective_target_c++14_only { } {\n+    global cxx_default\n     if ![check_effective_target_c++] {\n \treturn 0\n     }\n-    return [check-flags { { } { } { -std=c++14 -std=gnu++14 -std=c++14 -std=gnu++14 } }]\n+    if [check-flags { { } { } { -std=c++14 -std=gnu++14 -std=c++14 -std=gnu++14 } }] {\n+\treturn 1\n+    }\n+    if { $cxx_default == \"c++14\" && [check-flags { { } { } { } { -std=* } }] } {\n+\treturn 1\n+    }\n+    return 0\n }\n \n proc check_effective_target_c++14 { } {\n@@ -5932,21 +5947,35 @@ proc check_effective_target_c++14_down { } {\n     if ![check_effective_target_c++] {\n \treturn 0\n     }\n-    return ![check_effective_target_c++1z]\n+    return [expr ![check_effective_target_c++1z] ]\n }\n \n proc check_effective_target_c++98_only { } {\n+    global cxx_default\n     if ![check_effective_target_c++] {\n \treturn 0\n     }\n-    return ![check_effective_target_c++11]\n+    if [check-flags { { } { } { -std=c++98 -std=gnu++98 -std=c++03 -std=gnu++03 } }] {\n+\treturn 1\n+    }\n+    if { $cxx_default == \"c++98\" && [check-flags { { } { } { } { -std=* } }] } {\n+\treturn 1\n+    }\n+    return 0\n }\n \n proc check_effective_target_c++1z_only { } {\n+    global cxx_default\n     if ![check_effective_target_c++] {\n \treturn 0\n     }\n-    return [check-flags { { } { } { -std=c++1z -std=gnu++1z } }]\n+    if [check-flags { { } { } { -std=c++17 -std=gnu++17 -std=c++1z -std=gnu++1z } }] {\n+\treturn 1\n+    }\n+    if { $cxx_default == \"c++17\" && [check-flags { { } { } { } { -std=* } }] } {\n+\treturn 1\n+    }\n+    return 0\n }\n proc check_effective_target_c++1z { } {\n     return [check_effective_target_c++1z_only]"}]}