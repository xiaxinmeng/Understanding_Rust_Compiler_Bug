{"sha": "9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkOWQyYmViMDIxMjk1NWM2MmNkZmNmNzQwMWVhYWJkNDViMjQ2Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:15:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:15:28Z"}, "message": "[multiple changes]\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch3.adb (Array_Type_Declaration): Create declarations for Itypes\n\tcreated in Alfa mode, instead of inserting artificial declarations of\n\tnon-Itypes in the tree.\n\t* sem_util.adb, sem_util.ads (Itype_Has_Declaration): New function to\n\tknow if an Itype has a corresponding declaration, as defined in\n\titypes.ads.\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* gnat1drv.adb: Minor rewrite.\n\n2011-08-29  Bob Duff  <duff@adacore.com>\n\n\t* s-tasuti.adb (Make_Passive): Work around race condition in\n\tMake_Independent, which can cause Wait_Count to be zero. So instead of\n\tasserting that Wait_Count > 0, and then decrementing it, decrement it\n\tonly if Wait_Count > 0.\n\t* s-taskin.ads (Wait_Count, Alive_Count, Awake_Count): All of these\n\tshould be nonnegative, so declare them Natural instead of Integer.\n\nFrom-SVN: r178240", "tree": {"sha": "7d95b487803259803db0b51cf7168742d49402a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d95b487803259803db0b51cf7168742d49402a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/comments", "author": null, "committer": null, "parents": [{"sha": "833eaa8a3dc786183340f972c6188cc188510d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833eaa8a3dc786183340f972c6188cc188510d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833eaa8a3dc786183340f972c6188cc188510d00"}], "stats": {"total": 135, "additions": 95, "deletions": 40}, "files": [{"sha": "6ebe68778a2dfecc7d0fdf4a0c1c0be3673e554d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "patch": "@@ -1,3 +1,25 @@\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb (Array_Type_Declaration): Create declarations for Itypes\n+\tcreated in Alfa mode, instead of inserting artificial declarations of\n+\tnon-Itypes in the tree.\n+\t* sem_util.adb, sem_util.ads (Itype_Has_Declaration): New function to\n+\tknow if an Itype has a corresponding declaration, as defined in\n+\titypes.ads.\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat1drv.adb: Minor rewrite.\n+\n+2011-08-29  Bob Duff  <duff@adacore.com>\n+\n+\t* s-tasuti.adb (Make_Passive): Work around race condition in\n+\tMake_Independent, which can cause Wait_Count to be zero. So instead of\n+\tasserting that Wait_Count > 0, and then decrementing it, decrement it\n+\tonly if Wait_Count > 0.\n+\t* s-taskin.ads (Wait_Count, Alive_Count, Awake_Count): All of these\n+\tshould be nonnegative, so declare them Natural instead of Integer.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch5.adb, sem_ch3.adb, a-cihama.adb, a-cihama.ads, exp_ch7.adb,"}, {"sha": "ffb3e24cdef6194067561ac41f1925c38deca186", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "patch": "@@ -478,8 +478,8 @@ procedure Gnat1drv is\n \n          --  We would prefer to suppress the expansion of tagged types and\n          --  dispatching calls, so that one day GNATprove can handle them\n-         --  directly. Unfortunately, this is causing problems on H513-015, so\n-         --  keep this expansion for the time being. ???\n+         --  directly. Unfortunately, this is causing problems in some cases,\n+         --  so keep this expansion for the time being.\n \n          Tagged_Type_Expansion := True;\n       end if;"}, {"sha": "40772c94d09568da6c82e56154380daa5d20d713", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -566,7 +566,7 @@ package System.Tasking is\n       --  Protection: Set by Activator before Self is activated, and only read\n       --  and modified by Self after that.\n \n-      Wait_Count : Integer;\n+      Wait_Count : Natural;\n       --  This count is used by a task that is waiting for other tasks. At all\n       --  other times, the value should be zero. It is used differently in\n       --  several different states. Since a task cannot be in more than one of\n@@ -942,13 +942,13 @@ package System.Tasking is\n       --  not write this field until the master is complete, the\n       --  synchronization should be adequate to prevent races.\n \n-      Alive_Count : Integer := 0;\n+      Alive_Count : Natural := 0;\n       --  Number of tasks directly dependent on this task (including itself)\n       --  that are still \"alive\", i.e. not terminated.\n       --\n       --  Protection: Self.L\n \n-      Awake_Count : Integer := 0;\n+      Awake_Count : Natural := 0;\n       --  Number of tasks directly dependent on this task (including itself)\n       --  still \"awake\", i.e., are not terminated and not waiting on a\n       --  terminate alternative."}, {"sha": "a6b362ee2aa7257792655d8e82c7d3afcd97d60f", "filename": "gcc/ada/s-tasuti.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fs-tasuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fs-tasuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.adb?ref=9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -504,12 +504,14 @@ package body System.Tasking.Utilities is\n            (Debug.Trace\n             (Self_ID, \"Make_Passive: Phase 1, parent waiting\", 'M'));\n \n-         --  If parent is in Master_Completion_Sleep, it\n-         --  cannot be on a terminate alternative, hence\n-         --  it cannot have Awake_Count of zero.\n+         --  If parent is in Master_Completion_Sleep, it cannot be on a\n+         --  terminate alternative, hence it cannot have Wait_Count of\n+         --  zero. ???Except that the race condition in Make_Independent can\n+         --  cause Wait_Count to be zero, so we need to check for that.\n \n-         pragma Assert (P.Common.Wait_Count > 0);\n-         P.Common.Wait_Count := P.Common.Wait_Count - 1;\n+         if P.Common.Wait_Count > 0 then\n+            P.Common.Wait_Count := P.Common.Wait_Count - 1;\n+         end if;\n \n          if P.Common.Wait_Count = 0 then\n             Wakeup (P, Master_Completion_Sleep);"}, {"sha": "0c2c043a545643a7931e3313c08f06aa5a623d08", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "patch": "@@ -4741,26 +4741,20 @@ package body Sem_Ch3 is\n \n          Make_Index (Index, P, Related_Id, Nb_Index);\n \n-         --  In formal verification mode, create an explicit subtype for every\n-         --  index if not already a subtype_mark, and replace the existing type\n-         --  of index by this new type. Having a declaration for all type\n+         --  In formal verification mode, create an explicit declaration for\n+         --  Itypes created for index types. Having a declaration for all type\n          --  entities facilitates the task of the formal verification back-end.\n+         --  Notice that this declaration is not attached to the tree.\n \n          if ALFA_Mode\n-           and then not Nkind_In (Index, N_Identifier, N_Expanded_Name)\n+           and then Is_Itype (Etype (Index))\n          then\n             declare\n                Loc     : constant Source_Ptr := Sloc (Def);\n-               New_E   : Entity_Id;\n-               Decl    : Entity_Id;\n                Sub_Ind : Node_Id;\n+               Decl    : Entity_Id;\n \n             begin\n-               New_E :=\n-                 New_External_Entity\n-                   (E_Void, Current_Scope, Sloc (P), Related_Id, 'D',\n-                    Nb_Index, 'T');\n-\n                if Nkind (Index) = N_Subtype_Indication then\n                   Sub_Ind := Relocate_Node (Index);\n                else\n@@ -4775,11 +4769,10 @@ package body Sem_Ch3 is\n \n                Decl :=\n                  Make_Subtype_Declaration (Loc,\n-                   Defining_Identifier => New_E,\n+                   Defining_Identifier => Etype (Index),\n                    Subtype_Indication  => Sub_Ind);\n \n-               Insert_Action (Parent (Def), Decl);\n-               Set_Etype (Index, New_E);\n+               Analyze (Decl);\n             end;\n          end if;\n \n@@ -4799,34 +4792,29 @@ package body Sem_Ch3 is\n \n       if Present (Component_Typ) then\n \n-         --  In formal verification mode, create an explicit subtype for the\n-         --  component type if not already a subtype_mark. Having a declaration\n-         --  for all type entities facilitates the task of the formal\n-         --  verification back-end.\n+         Element_Type := Process_Subtype (Component_Typ, P, Related_Id, 'C');\n+\n+         --  In formal verification mode, create an explicit declaration for\n+         --  the Itype created for a component type. Having a declaration for\n+         --  all type entities facilitates the task of the formal verification\n+         --  back-end. Notice that this declaration is not attached to the\n+         --  tree.\n \n          if ALFA_Mode\n-           and then Nkind (Component_Typ) = N_Subtype_Indication\n+           and then Is_Itype (Element_Type)\n          then\n             declare\n                Loc  : constant Source_Ptr := Sloc (Def);\n                Decl : Entity_Id;\n \n             begin\n-               Element_Type :=\n-                 New_External_Entity\n-                   (E_Void, Current_Scope, Sloc (P), Related_Id, 'C', 0, 'T');\n-\n                Decl :=\n                  Make_Subtype_Declaration (Loc,\n                    Defining_Identifier => Element_Type,\n                    Subtype_Indication  => Relocate_Node (Component_Typ));\n \n-               Insert_Action (Parent (Def), Decl);\n+               Analyze (Decl);\n             end;\n-\n-         else\n-            Element_Type :=\n-              Process_Subtype (Component_Typ, P, Related_Id, 'C');\n          end if;\n \n          Set_Etype (Component_Typ, Element_Type);\n@@ -4915,6 +4903,30 @@ package body Sem_Ch3 is\n                                (Implicit_Base, Finalize_Storage_Only\n                                                         (Element_Type));\n \n+         --  In ALFA mode, generate a declaration for Itype T, so that the\n+         --  formal verification back-end can use it.\n+\n+         if ALFA_Mode\n+           and then Is_Itype (T)\n+         then\n+            declare\n+               Loc  : constant Source_Ptr := Sloc (Def);\n+               Decl : Node_Id;\n+\n+            begin\n+               Decl := Make_Full_Type_Declaration (Loc,\n+                  Defining_Identifier => T,\n+                  Type_Definition     =>\n+                   Make_Constrained_Array_Definition (Loc,\n+                     Discrete_Subtype_Definitions =>\n+                       New_Copy_List (Discrete_Subtype_Definitions (Def)),\n+                     Component_Definition         =>\n+                       Relocate_Node (Component_Definition (Def))));\n+\n+               Analyze (Decl);\n+            end;\n+         end if;\n+\n       --  Unconstrained array case\n \n       else"}, {"sha": "b4dac3cfc5e9bd7387674ed132489ea2021f0cb6", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "patch": "@@ -8507,6 +8507,20 @@ package body Sem_Util is\n       end if;\n    end Is_Volatile_Object;\n \n+   ---------------------------\n+   -- Itype_Has_Declaration --\n+   ---------------------------\n+\n+   function Itype_Has_Declaration (Id : Entity_Id) return Boolean is\n+   begin\n+      pragma Assert (Is_Itype (Id));\n+      return Present (Parent (Id))\n+        and then Nkind_In (Parent (Id),\n+                           N_Full_Type_Declaration,\n+                           N_Subtype_Declaration)\n+        and then Defining_Entity (Parent (Id)) = Id;\n+   end Itype_Has_Declaration;\n+\n    -------------------------\n    -- Kill_Current_Values --\n    -------------------------"}, {"sha": "b3844d896085ab663d2233756351ced4dc467872", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd9d2beb0212955c62cdfcf7401eaabd45b2462/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=9fd9d2beb0212955c62cdfcf7401eaabd45b2462", "patch": "@@ -969,6 +969,11 @@ package Sem_Util is\n    --  for something actually declared as volatile, not for an object that gets\n    --  treated as volatile (see Einfo.Treat_As_Volatile).\n \n+   function Itype_Has_Declaration (Id : Entity_Id) return Boolean;\n+   --  Applies to Itypes. True if the Itype is attached to a declaration for\n+   --  the type through its Parent field, which may or not be present in the\n+   --  tree.\n+\n    procedure Kill_Current_Values (Last_Assignment_Only : Boolean := False);\n    --  This procedure is called to clear all constant indications from all\n    --  entities in the current scope and in any parent scopes if the current"}]}