{"sha": "a3d7ab9203a202ce75c26e56082b8f3786ba3db3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkN2FiOTIwM2EyMDJjZTc1YzI2ZTU2MDgyYjhmMzc4NmJhM2RiMw==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2013-05-13T19:48:15Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2013-05-13T19:48:15Z"}, "message": "re PR target/56975 (dllimport broken on i686-pc-cygwin)\n\n2013-05-13  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/56975\n\t* config/i386/cygming.h (TARGET_PECOFF): Define as true.\n\t* config/i386/i386.h (TARGET_PECOFF): Define by default\n\tas false.\n\t(PIC_OFFSET_TABLE_REGNUM): Use TARGET_PECOFF.\n\t* config/i386/i386.c (ix86_option_override_internal):\n\tLikewise.\n\t(ix86_expand_prologue): Likewise.\n\t(ix86_expand_split_stack_prologue): Likewise.\n\t(legitimate_pic_address_disp_p): Likewise.\n\t(legitimize_pic_address): Likewise.\n\t(legitimize_tls_address): Likewise.\n\t(legitimize_pe_coff_symbol): Likewise.\n\t(output_pic_addr_const): Likewise.\n\t(construct_plt_address): Likewise.\n\t(ix86_expand_call): Likewise.\n\t(x86_output_mi_thunk): Likewise.\n\t(x86_function_profiler): Likewise.\n\nFrom-SVN: r198852", "tree": {"sha": "f1716dc6f04bafc928ed5d205a243dfe3a686547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1716dc6f04bafc928ed5d205a243dfe3a686547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3d7ab9203a202ce75c26e56082b8f3786ba3db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d7ab9203a202ce75c26e56082b8f3786ba3db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3d7ab9203a202ce75c26e56082b8f3786ba3db3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d7ab9203a202ce75c26e56082b8f3786ba3db3/comments", "author": null, "committer": null, "parents": [{"sha": "7c0b157d7cd49c57b769726e6838359014512e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c0b157d7cd49c57b769726e6838359014512e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c0b157d7cd49c57b769726e6838359014512e73"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "e6ba1144c9eb351adf0bf6602e6426c28466a0b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d7ab9203a202ce75c26e56082b8f3786ba3db3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d7ab9203a202ce75c26e56082b8f3786ba3db3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3d7ab9203a202ce75c26e56082b8f3786ba3db3", "patch": "@@ -1,3 +1,24 @@\n+2013-05-13  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/56975\n+\t* config/i386/cygming.h (TARGET_PECOFF): Define as true.\n+\t* config/i386/i386.h (TARGET_PECOFF): Define by default\n+\tas false.\n+\t(PIC_OFFSET_TABLE_REGNUM): Use TARGET_PECOFF.\n+\t* config/i386/i386.c (ix86_option_override_internal):\n+\tLikewise.\n+\t(ix86_expand_prologue): Likewise.\n+\t(ix86_expand_split_stack_prologue): Likewise.\n+\t(legitimate_pic_address_disp_p): Likewise.\n+\t(legitimize_pic_address): Likewise.\n+\t(legitimize_tls_address): Likewise.\n+\t(legitimize_pe_coff_symbol): Likewise.\n+\t(output_pic_addr_const): Likewise.\n+\t(construct_plt_address): Likewise.\n+\t(ix86_expand_call): Likewise.\n+\t(x86_output_mi_thunk): Likewise.\n+\t(x86_function_profiler): Likewise.\n+\n 2013-05-13  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_simd_mov<mode>): Group"}, {"sha": "27187641aad1c737240a3ceaba6c9ac411b5526e", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d7ab9203a202ce75c26e56082b8f3786ba3db3/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d7ab9203a202ce75c26e56082b8f3786ba3db3/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=a3d7ab9203a202ce75c26e56082b8f3786ba3db3", "patch": "@@ -55,6 +55,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef DEFAULT_ABI\n #define DEFAULT_ABI (TARGET_64BIT ? MS_ABI : SYSV_ABI)\n \n+#undef TARGET_PECOFF\n+#define TARGET_PECOFF 1\n+\n #if ! defined (USE_MINGW64_LEADING_UNDERSCORES)\n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX (TARGET_64BIT ? \"\" : \"_\")"}, {"sha": "a5727a11bbe3e984e966f06d9f8440c98d65fa01", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d7ab9203a202ce75c26e56082b8f3786ba3db3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d7ab9203a202ce75c26e56082b8f3786ba3db3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a3d7ab9203a202ce75c26e56082b8f3786ba3db3", "patch": "@@ -3248,7 +3248,7 @@ ix86_option_override_internal (bool main_args_p)\n \t use of rip-relative addressing.  This eliminates fixups that\n \t would otherwise be needed if this object is to be placed in a\n \t DLL, and is essentially just as efficient as direct addressing.  */\n-      if (TARGET_64BIT && (TARGET_RDOS || DEFAULT_ABI == MS_ABI))\n+      if (TARGET_64BIT && (TARGET_RDOS || TARGET_PECOFF))\n \tix86_cmodel = CM_MEDIUM_PIC, flag_pic = 1;\n       else if (TARGET_64BIT)\n \tix86_cmodel = flag_pic ? CM_SMALL_PIC : CM_SMALL;\n@@ -10594,7 +10594,7 @@ ix86_expand_prologue (void)\n   pic_reg_used = false;\n   /* We don't use pic-register for pe-coff target.  */\n   if (pic_offset_table_rtx\n-      && DEFAULT_ABI != MS_ABI\n+      && !TARGET_PECOFF\n       && (df_regs_ever_live_p (REAL_PIC_OFFSET_TABLE_REGNUM)\n \t  || crtl->profile))\n     {\n@@ -11400,7 +11400,7 @@ ix86_expand_split_stack_prologue (void)\n \t}\n \n       if ((ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC)\n-          && DEFAULT_ABI != MS_ABI)\n+          && !TARGET_PECOFF)\n \t{\n \t  HOST_WIDE_INT argval;\n \n@@ -12125,7 +12125,7 @@ legitimate_pic_address_disp_p (rtx disp)\n \t      || (TARGET_DLLIMPORT_DECL_ATTRIBUTES && SYMBOL_REF_DLLIMPORT_P (op0)))\n \t    return false;\n \n-\t  if (DEFAULT_ABI == MS_ABI)\n+\t  if (TARGET_PECOFF)\n \t    {\n \t      if (is_imported_p (op0))\n \t\treturn true;\n@@ -12212,7 +12212,7 @@ legitimate_pic_address_disp_p (rtx disp)\n       if ((GET_CODE (XVECEXP (disp, 0, 0)) == SYMBOL_REF\n \t   || GET_CODE (XVECEXP (disp, 0, 0)) == LABEL_REF)\n \t  && !TARGET_64BIT)\n-        return DEFAULT_ABI != MS_ABI && gotoff_operand (XVECEXP (disp, 0, 0), Pmode);\n+        return !TARGET_PECOFF && gotoff_operand (XVECEXP (disp, 0, 0), Pmode);\n       return false;\n     case UNSPEC_GOTTPOFF:\n     case UNSPEC_GOTNTPOFF:\n@@ -12556,7 +12556,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n   if (TARGET_64BIT && legitimate_pic_address_disp_p (addr))\n     new_rtx = addr;\n-  else if (TARGET_64BIT && DEFAULT_ABI != MS_ABI\n+  else if (TARGET_64BIT && !TARGET_PECOFF\n \t   && ix86_cmodel != CM_SMALL_PIC && gotoff_operand (addr, Pmode))\n     {\n       rtx tmpreg;\n@@ -12591,7 +12591,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n       else\n         new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, tmpreg);\n     }\n-  else if (!TARGET_64BIT && DEFAULT_ABI != MS_ABI && gotoff_operand (addr, Pmode))\n+  else if (!TARGET_64BIT && !TARGET_PECOFF && gotoff_operand (addr, Pmode))\n     {\n       /* This symbol may be referenced via a displacement from the PIC\n \t base address (@GOTOFF).  */\n@@ -12628,7 +12628,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n       /* For x64 PE-COFF there is no GOT table.  So we use address\n          directly.  */\n-      if (TARGET_64BIT && DEFAULT_ABI == MS_ABI)\n+      if (TARGET_64BIT && TARGET_PECOFF)\n \t{\n \t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_PCREL);\n \t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n@@ -12706,7 +12706,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n \t  /* Check first to see if this is a constant offset from a @GOTOFF\n \t     symbol reference.  */\n-\t  if (DEFAULT_ABI != MS_ABI && gotoff_operand (op0, Pmode)\n+\t  if (!TARGET_PECOFF && gotoff_operand (op0, Pmode)\n \t      && CONST_INT_P (op1))\n \t    {\n \t      if (!TARGET_64BIT)\n@@ -12850,7 +12850,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \n       if (!TARGET_64BIT)\n \t{\n-\t  if (flag_pic && DEFAULT_ABI != MS_ABI)\n+\t  if (flag_pic && !TARGET_PECOFF)\n \t    pic = pic_offset_table_rtx;\n \t  else\n \t    {\n@@ -13173,7 +13173,7 @@ legitimize_dllimport_symbol (rtx symbol, bool want_reg)\n static rtx\n legitimize_pe_coff_symbol (rtx addr, bool inreg)\n {\n-  if (DEFAULT_ABI != MS_ABI)\n+  if (!TARGET_PECOFF)\n     return NULL_RTX;\n \n   if (TARGET_DLLIMPORT_DECL_ATTRIBUTES)\n@@ -13455,7 +13455,7 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n #endif\n \t  assemble_name (file, name);\n \t}\n-      if (!TARGET_MACHO && !(TARGET_64BIT && DEFAULT_ABI == MS_ABI)\n+      if (!TARGET_MACHO && !(TARGET_64BIT && TARGET_PECOFF)\n \t  && code == 'P' && ! SYMBOL_REF_LOCAL_P (x))\n \tfputs (\"@PLT\", file);\n       break;\n@@ -23701,7 +23701,7 @@ construct_plt_address (rtx symbol)\n   rtx tmp, unspec;\n \n   gcc_assert (GET_CODE (symbol) == SYMBOL_REF);\n-  gcc_assert (ix86_cmodel == CM_LARGE_PIC && DEFAULT_ABI != MS_ABI);\n+  gcc_assert (ix86_cmodel == CM_LARGE_PIC && !TARGET_PECOFF);\n   gcc_assert (Pmode == DImode);\n \n   tmp = gen_reg_rtx (Pmode);\n@@ -23754,7 +23754,7 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n     }\n \n   if (ix86_cmodel == CM_LARGE_PIC\n-      && DEFAULT_ABI != MS_ABI\n+      && !TARGET_PECOFF\n       && MEM_P (fnaddr)\n       && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF\n       && !local_symbolic_operand (XEXP (fnaddr, 0), VOIDmode))\n@@ -35102,7 +35102,7 @@ x86_output_mi_thunk (FILE *file,\n   if (TARGET_64BIT)\n     {\n       if (!flag_pic || targetm.binds_local_p (function)\n-\t  || DEFAULT_ABI == MS_ABI)\n+\t  || TARGET_PECOFF)\n \t;\n       else\n \t{\n@@ -35215,7 +35215,7 @@ x86_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n       fprintf (file, \"\\tleaq\\t%sP%d(%%rip),%%r11\\n\", LPREFIX, labelno);\n #endif\n \n-      if (DEFAULT_ABI == SYSV_ABI && flag_pic)\n+      if (!TARGET_PECOFF && flag_pic)\n \tfprintf (file, \"\\tcall\\t*%s@GOTPCREL(%%rip)\\n\", mcount_name);\n       else\n \tfprintf (file, \"\\tcall\\t%s\\n\", mcount_name);"}, {"sha": "1e03635091be0e0c7ee374f6830d2599c214db23", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d7ab9203a202ce75c26e56082b8f3786ba3db3/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d7ab9203a202ce75c26e56082b8f3786ba3db3/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a3d7ab9203a202ce75c26e56082b8f3786ba3db3", "patch": "@@ -537,6 +537,9 @@ extern tree x86_mfence;\n /* This is re-defined by cygming.h.  */\n #define TARGET_SEH 0\n \n+/* This is re-defined by cygming.h.  */\n+#define TARGET_PECOFF 0\n+\n /* The default abi used by target.  */\n #define DEFAULT_ABI SYSV_ABI\n \n@@ -1187,7 +1190,7 @@ enum target_cpu_default\n \n #define PIC_OFFSET_TABLE_REGNUM\t\t\t\t\\\n   ((TARGET_64BIT && (ix86_cmodel == CM_SMALL_PIC\t\\\n-                     || DEFAULT_ABI == MS_ABI))\t\t\\\n+                     || TARGET_PECOFF))\t\t\\\n    || !flag_pic ? INVALID_REGNUM\t\t\t\\\n    : reload_completed ? REGNO (pic_offset_table_rtx)\t\\\n    : REAL_PIC_OFFSET_TABLE_REGNUM)"}]}