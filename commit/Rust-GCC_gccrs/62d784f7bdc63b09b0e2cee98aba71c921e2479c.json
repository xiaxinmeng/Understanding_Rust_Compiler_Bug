{"sha": "62d784f7bdc63b09b0e2cee98aba71c921e2479c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkNzg0ZjdiZGM2M2IwOWIwZTJjZWU5OGFiYTcxYzkyMWUyNDc5Yw==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-03-21T08:29:36Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-03-21T08:29:36Z"}, "message": "ChangeLog gcc/\n\n2011-03-21  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/12171\n\t* doc/plugins.texi: Adjust documentation\n\tfor plugin register_callback.\n\t* tree.h (attribute_spec): Add new member\n\taffects_type_identity.\n\t- Zitierten Text anzeigen -\n\t* attribs.c (empty_attribute_table): Adjust\n\tattribute_spec initializers.\n\t* config/alpha/alpha.c: Likewise.\n\t* config/arc/arc.c: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/avr/avr.c: Likewise.\n\t* config/bfin/bfin.c: Likewise.\n\t* config/crx/crx.c: Likewise.\n\t* config/darwin.h: Likewise.\n\t* config/h8300/h8300.c: Likewise.\n\t* config/i386/cygming.h: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/m32c/m32c.c: Likewise.\n\t* config/m32r/m32r.c: Likewise.\n\t* config/m68hc11/m68hc11.c: Likewise.\n\t* config/m68k/m68k.c: Likewise.\n\t* config/mcore/mcore.c: Likewise.\n\t* config/mep/mep.c: Likewise.\n\t* config/microblaze/microblaze.c: Likewise.\n\t* config/mips/mips.c: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/rx/rx.c: Likewise.\n\t* config/sh/sh.c: Likewise.\n\t* config/sol2.h: Likewise.\n\t* config/sparc/sparc.c: Likewise.\n\t* config/spu/spu.c: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/v850/v850.c: Likewise.\n\nChangeLog gcc/cp\n\n2011-03-21  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/12171\n\t* tree.c (cxx_attribute_table): Adjust table.\n\nChangeLog gcc/testsuite\n\n2011-03-21  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/12171\n\t* g++.dg/plugin/attribute_plugin.c: Adjust test.\n\nChangeLog gcc/java\n\n2011-03-21  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/12171\n\t* lang.c (java_attribute_table): Adjust table.\n\nChangeLog gcc/lto\n\n2011-03-21  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/12171\n\t* lto-lang.c (lto_attribute_table): Adjust table.\n\nChangeLog gcc/ada\n\n2011-03-21  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/12171\n\t* gcc-interface/utils.c (gnat_internal_attribute_table):\n\tAdd new element.\n\nChangeLog gcc/c-family\n\n2011-03-17  Kai Tietz\n\n\tPR target/12171\n\t* c-common.c (c_common_attribute_table):\n\tAdd new element.\n\t(c_common_format_attribute_table): Likewise.\n\nFrom-SVN: r171209", "tree": {"sha": "e05c05657897259c998014c2877b14a892676c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e05c05657897259c998014c2877b14a892676c7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d784f7bdc63b09b0e2cee98aba71c921e2479c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d784f7bdc63b09b0e2cee98aba71c921e2479c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d784f7bdc63b09b0e2cee98aba71c921e2479c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d784f7bdc63b09b0e2cee98aba71c921e2479c/comments", "author": null, "committer": null, "parents": [{"sha": "54833ec0a6bcc91163da4c3f7a017a2f73879cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54833ec0a6bcc91163da4c3f7a017a2f73879cd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54833ec0a6bcc91163da4c3f7a017a2f73879cd1"}], "stats": {"total": 765, "additions": 484, "deletions": 281}, "files": [{"sha": "14f4cad74ef933c4c4a0b45cf2e548c9e863d8e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -1,3 +1,41 @@\n+2011-03-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/12171\n+\t* doc/plugins.texi: Adjust documentation\n+\tfor plugin register_callback.\n+\t* tree.h (attribute_spec): Add new member\n+\taffects_type_identity.\n+\t- Zitierten Text anzeigen -\n+\t* attribs.c (empty_attribute_table): Adjust\n+\tattribute_spec initializers.\n+\t* config/alpha/alpha.c: Likewise.\n+\t* config/arc/arc.c: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/avr/avr.c: Likewise.\n+\t* config/bfin/bfin.c: Likewise.\n+\t* config/crx/crx.c: Likewise.\n+\t* config/darwin.h: Likewise.\n+\t* config/h8300/h8300.c: Likewise.\n+\t* config/i386/cygming.h: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/m32c/m32c.c: Likewise.\n+\t* config/m32r/m32r.c: Likewise.\n+\t* config/m68hc11/m68hc11.c: Likewise.\n+\t* config/m68k/m68k.c: Likewise.\n+\t* config/mcore/mcore.c: Likewise.\n+\t* config/mep/mep.c: Likewise.\n+\t* config/microblaze/microblaze.c: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/rx/rx.c: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sol2.h: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\t* config/spu/spu.c: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/v850/v850.c: Likewise.\n+\n 2011-03-21  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* simplify-rtx.c (simplify_binary_operation_1): Handle"}, {"sha": "46e4e22f2c9922b41a060d05965390292ff83e26", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -1,3 +1,9 @@\n+2011-03-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/12171\n+\t* gcc-interface/utils.c (gnat_internal_attribute_table):\n+\tAdd new element.\n+\n 2011-03-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (elaborate_expression_1): Try harder to find"}, {"sha": "6db63751e154421b3ed73055114f6e2420edc35e", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -104,29 +104,42 @@ static tree fake_attribute_handler      (tree *, tree, tree, int, bool *);\n    this minimal set of attributes to accommodate the needs of builtins.  */\n const struct attribute_spec gnat_internal_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"const\",        0, 0,  true,  false, false, handle_const_attribute   },\n-  { \"nothrow\",      0, 0,  true,  false, false, handle_nothrow_attribute },\n-  { \"pure\",         0, 0,  true,  false, false, handle_pure_attribute },\n-  { \"no vops\",      0, 0,  true,  false, false, handle_novops_attribute },\n-  { \"nonnull\",      0, -1, false, true,  true,  handle_nonnull_attribute },\n-  { \"sentinel\",     0, 1,  false, true,  true,  handle_sentinel_attribute },\n-  { \"noreturn\",     0, 0,  true,  false, false, handle_noreturn_attribute },\n-  { \"leaf\",         0, 0,  true,  false, false, handle_leaf_attribute },\n-  { \"malloc\",       0, 0,  true,  false, false, handle_malloc_attribute },\n-  { \"type generic\", 0, 0,  false, true, true, handle_type_generic_attribute },\n-\n-  { \"vector_size\",  1, 1,  false, true, false,  handle_vector_size_attribute },\n-  { \"vector_type\",  0, 0,  false, true, false,  handle_vector_type_attribute },\n-  { \"may_alias\",    0, 0, false, true, false, NULL },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"const\",        0, 0,  true,  false, false, handle_const_attribute,\n+    false },\n+  { \"nothrow\",      0, 0,  true,  false, false, handle_nothrow_attribute,\n+    false },\n+  { \"pure\",         0, 0,  true,  false, false, handle_pure_attribute,\n+    false },\n+  { \"no vops\",      0, 0,  true,  false, false, handle_novops_attribute,\n+    false },\n+  { \"nonnull\",      0, -1, false, true,  true,  handle_nonnull_attribute,\n+    false },\n+  { \"sentinel\",     0, 1,  false, true,  true,  handle_sentinel_attribute,\n+    false },\n+  { \"noreturn\",     0, 0,  true,  false, false, handle_noreturn_attribute,\n+    false },\n+  { \"leaf\",         0, 0,  true,  false, false, handle_leaf_attribute,\n+    false },\n+  { \"malloc\",       0, 0,  true,  false, false, handle_malloc_attribute,\n+    false },\n+  { \"type generic\", 0, 0,  false, true, true, handle_type_generic_attribute,\n+    false },\n+\n+  { \"vector_size\",  1, 1,  false, true, false,  handle_vector_size_attribute,\n+    false },\n+  { \"vector_type\",  0, 0,  false, true, false,  handle_vector_type_attribute,\n+    false },\n+  { \"may_alias\",    0, 0, false, true, false, NULL, false },\n \n   /* ??? format and format_arg are heavy and not supported, which actually\n      prevents support for stdio builtins, which we however declare as part\n      of the common builtins.def contents.  */\n-  { \"format\",     3, 3,  false, true,  true,  fake_attribute_handler },\n-  { \"format_arg\", 1, 1,  false, true,  true,  fake_attribute_handler },\n+  { \"format\",     3, 3,  false, true,  true,  fake_attribute_handler, false },\n+  { \"format_arg\", 1, 1,  false, true,  true,  fake_attribute_handler, false },\n \n-  { NULL,         0, 0, false, false, false, NULL }\n+  { NULL,         0, 0, false, false, false, NULL, false }\n };\n \n /* Associates a GNAT tree node to a GCC tree node. It is used in"}, {"sha": "ce977d4a3371c31b1b1dc8f39e8564c6c386cbef", "filename": "gcc/attribs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -57,7 +57,7 @@ static bool attributes_initialized = false;\n \n static const struct attribute_spec empty_attribute_table[] =\n {\n-  { NULL, 0, 0, false, false, false, NULL }\n+  { NULL, 0, 0, false, false, false, NULL, false }\n };\n \n /* Return base name of the attribute.  Ie '__attr__' is turned into 'attr'."}, {"sha": "ad2da89cb216c105b0c0b9b514fe701284557394", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -1,3 +1,10 @@\n+2011-03-17  Kai Tietz\n+\n+\tPR target/12171\n+\t* c-common.c (c_common_attribute_table):\n+\tAdd new element.\n+\t(c_common_format_attribute_table): Likewise.\n+\n 2011-03-18  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt (fconstexpr-depth): Add Var(max_constexpr_depth)."}, {"sha": "3f1b964401f721ca317ff1c726ba623f98e40f74", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 61, "deletions": 58, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -583,136 +583,139 @@ const unsigned int num_c_common_reswords =\n /* Table of machine-independent attributes common to all C-like languages.  */\n const struct attribute_spec c_common_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n   { \"packed\",                 0, 0, false, false, false,\n-\t\t\t      handle_packed_attribute },\n+\t\t\t      handle_packed_attribute , false},\n   { \"nocommon\",               0, 0, true,  false, false,\n-\t\t\t      handle_nocommon_attribute },\n+\t\t\t      handle_nocommon_attribute, false},\n   { \"common\",                 0, 0, true,  false, false,\n-\t\t\t      handle_common_attribute },\n+\t\t\t      handle_common_attribute, false },\n   /* FIXME: logically, noreturn attributes should be listed as\n      \"false, true, true\" and apply to function types.  But implementing this\n      would require all the places in the compiler that use TREE_THIS_VOLATILE\n      on a decl to identify non-returning functions to be located and fixed\n      to check the function type instead.  */\n   { \"noreturn\",               0, 0, true,  false, false,\n-\t\t\t      handle_noreturn_attribute },\n+\t\t\t      handle_noreturn_attribute, false },\n   { \"volatile\",               0, 0, true,  false, false,\n-\t\t\t      handle_noreturn_attribute },\n+\t\t\t      handle_noreturn_attribute, false },\n   { \"noinline\",               0, 0, true,  false, false,\n-\t\t\t      handle_noinline_attribute },\n+\t\t\t      handle_noinline_attribute, false },\n   { \"noclone\",                0, 0, true,  false, false,\n-\t\t\t      handle_noclone_attribute },\n+\t\t\t      handle_noclone_attribute, false },\n   { \"leaf\",                   0, 0, true,  false, false,\n-\t\t\t      handle_leaf_attribute },\n+\t\t\t      handle_leaf_attribute, false },\n   { \"always_inline\",          0, 0, true,  false, false,\n-\t\t\t      handle_always_inline_attribute },\n+\t\t\t      handle_always_inline_attribute, false },\n   { \"gnu_inline\",             0, 0, true,  false, false,\n-\t\t\t      handle_gnu_inline_attribute },\n+\t\t\t      handle_gnu_inline_attribute, false },\n   { \"artificial\",             0, 0, true,  false, false,\n-\t\t\t      handle_artificial_attribute },\n+\t\t\t      handle_artificial_attribute, false },\n   { \"flatten\",                0, 0, true,  false, false,\n-\t\t\t      handle_flatten_attribute },\n+\t\t\t      handle_flatten_attribute, false },\n   { \"used\",                   0, 0, true,  false, false,\n-\t\t\t      handle_used_attribute },\n+\t\t\t      handle_used_attribute, false },\n   { \"unused\",                 0, 0, false, false, false,\n-\t\t\t      handle_unused_attribute },\n+\t\t\t      handle_unused_attribute, false },\n   { \"externally_visible\",     0, 0, true,  false, false,\n-\t\t\t      handle_externally_visible_attribute },\n+\t\t\t      handle_externally_visible_attribute, false },\n   /* The same comments as for noreturn attributes apply to const ones.  */\n   { \"const\",                  0, 0, true,  false, false,\n-\t\t\t      handle_const_attribute },\n+\t\t\t      handle_const_attribute, false },\n   { \"transparent_union\",      0, 0, false, false, false,\n-\t\t\t      handle_transparent_union_attribute },\n+\t\t\t      handle_transparent_union_attribute, false },\n   { \"constructor\",            0, 1, true,  false, false,\n-\t\t\t      handle_constructor_attribute },\n+\t\t\t      handle_constructor_attribute, false },\n   { \"destructor\",             0, 1, true,  false, false,\n-\t\t\t      handle_destructor_attribute },\n+\t\t\t      handle_destructor_attribute, false },\n   { \"mode\",                   1, 1, false,  true, false,\n-\t\t\t      handle_mode_attribute },\n+\t\t\t      handle_mode_attribute, false },\n   { \"section\",                1, 1, true,  false, false,\n-\t\t\t      handle_section_attribute },\n+\t\t\t      handle_section_attribute, false },\n   { \"aligned\",                0, 1, false, false, false,\n-\t\t\t      handle_aligned_attribute },\n+\t\t\t      handle_aligned_attribute, false },\n   { \"weak\",                   0, 0, true,  false, false,\n-\t\t\t      handle_weak_attribute },\n+\t\t\t      handle_weak_attribute, false },\n   { \"ifunc\",                  1, 1, true,  false, false,\n-\t\t\t      handle_ifunc_attribute },\n+\t\t\t      handle_ifunc_attribute, false },\n   { \"alias\",                  1, 1, true,  false, false,\n-\t\t\t      handle_alias_attribute },\n+\t\t\t      handle_alias_attribute, false },\n   { \"weakref\",                0, 1, true,  false, false,\n-\t\t\t      handle_weakref_attribute },\n+\t\t\t      handle_weakref_attribute, false },\n   { \"no_instrument_function\", 0, 0, true,  false, false,\n-\t\t\t      handle_no_instrument_function_attribute },\n+\t\t\t      handle_no_instrument_function_attribute,\n+\t\t\t      false },\n   { \"malloc\",                 0, 0, true,  false, false,\n-\t\t\t      handle_malloc_attribute },\n+\t\t\t      handle_malloc_attribute, false },\n   { \"returns_twice\",          0, 0, true,  false, false,\n-\t\t\t      handle_returns_twice_attribute },\n+\t\t\t      handle_returns_twice_attribute, false },\n   { \"no_stack_limit\",         0, 0, true,  false, false,\n-\t\t\t      handle_no_limit_stack_attribute },\n+\t\t\t      handle_no_limit_stack_attribute, false },\n   { \"pure\",                   0, 0, true,  false, false,\n-\t\t\t      handle_pure_attribute },\n+\t\t\t      handle_pure_attribute, false },\n   /* For internal use (marking of builtins) only.  The name contains space\n      to prevent its usage in source code.  */\n   { \"no vops\",                0, 0, true,  false, false,\n-\t\t\t      handle_novops_attribute },\n+\t\t\t      handle_novops_attribute, false },\n   { \"deprecated\",             0, 1, false, false, false,\n-\t\t\t      handle_deprecated_attribute },\n+\t\t\t      handle_deprecated_attribute, false },\n   { \"vector_size\",\t      1, 1, false, true, false,\n-\t\t\t      handle_vector_size_attribute },\n+\t\t\t      handle_vector_size_attribute, false },\n   { \"visibility\",\t      1, 1, false, false, false,\n-\t\t\t      handle_visibility_attribute },\n+\t\t\t      handle_visibility_attribute, false },\n   { \"tls_model\",\t      1, 1, true,  false, false,\n-\t\t\t      handle_tls_model_attribute },\n+\t\t\t      handle_tls_model_attribute, false },\n   { \"nonnull\",                0, -1, false, true, true,\n-\t\t\t      handle_nonnull_attribute },\n+\t\t\t      handle_nonnull_attribute, false },\n   { \"nothrow\",                0, 0, true,  false, false,\n-\t\t\t      handle_nothrow_attribute },\n-  { \"may_alias\",\t      0, 0, false, true, false, NULL },\n+\t\t\t      handle_nothrow_attribute, false },\n+  { \"may_alias\",\t      0, 0, false, true, false, NULL, false },\n   { \"cleanup\",\t\t      1, 1, true, false, false,\n-\t\t\t      handle_cleanup_attribute },\n+\t\t\t      handle_cleanup_attribute, false },\n   { \"warn_unused_result\",     0, 0, false, true, true,\n-\t\t\t      handle_warn_unused_result_attribute },\n+\t\t\t      handle_warn_unused_result_attribute, false },\n   { \"sentinel\",               0, 1, false, true, true,\n-\t\t\t      handle_sentinel_attribute },\n+\t\t\t      handle_sentinel_attribute, false },\n   /* For internal use (marking of builtins) only.  The name contains space\n      to prevent its usage in source code.  */\n   { \"type generic\",           0, 0, false, true, true,\n-\t\t\t      handle_type_generic_attribute },\n+\t\t\t      handle_type_generic_attribute, false },\n   { \"alloc_size\",\t      1, 2, false, true, true,\n-\t\t\t      handle_alloc_size_attribute },\n+\t\t\t      handle_alloc_size_attribute, false },\n   { \"cold\",                   0, 0, true,  false, false,\n-\t\t\t      handle_cold_attribute },\n+\t\t\t      handle_cold_attribute, false },\n   { \"hot\",                    0, 0, true,  false, false,\n-\t\t\t      handle_hot_attribute },\n+\t\t\t      handle_hot_attribute, false },\n   { \"warning\",\t\t      1, 1, true,  false, false,\n-\t\t\t      handle_error_attribute },\n+\t\t\t      handle_error_attribute, false },\n   { \"error\",\t\t      1, 1, true,  false, false,\n-\t\t\t      handle_error_attribute },\n+\t\t\t      handle_error_attribute, false },\n   { \"target\",                 1, -1, true, false, false,\n-\t\t\t      handle_target_attribute },\n+\t\t\t      handle_target_attribute, false },\n   { \"optimize\",               1, -1, true, false, false,\n-\t\t\t      handle_optimize_attribute },\n+\t\t\t      handle_optimize_attribute, false },\n   { \"no_split_stack\",\t      0, 0, true,  false, false,\n-\t\t\t      handle_no_split_stack_attribute },\n+\t\t\t      handle_no_split_stack_attribute, false },\n   /* For internal use (marking of builtins and runtime functions) only.\n      The name contains space to prevent its usage in source code.  */\n   { \"fn spec\",\t \t      1, 1, false, true, true,\n-\t\t\t      handle_fnspec_attribute },\n-  { NULL,                     0, 0, false, false, false, NULL }\n+\t\t\t      handle_fnspec_attribute, false },\n+  { NULL,                     0, 0, false, false, false, NULL, false }\n };\n \n /* Give the specifications for the format attributes, used by C and all\n    descendants.  */\n \n const struct attribute_spec c_common_format_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n   { \"format\",                 3, 3, false, true,  true,\n-\t\t\t      handle_format_attribute },\n+\t\t\t      handle_format_attribute, false },\n   { \"format_arg\",             1, 1, false, true,  true,\n-\t\t\t      handle_format_arg_attribute },\n-  { NULL,                     0, 0, false, false, false, NULL }\n+\t\t\t      handle_format_arg_attribute, false },\n+  { NULL,                     0, 0, false, false, false, NULL, false }\n };\n \n /* Return identifier for address space AS.  */"}, {"sha": "78b4d1789e6f4baa8a48a3ee91cce0e83baac4e8", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -7582,9 +7582,10 @@ common_object_handler (tree *node, tree name ATTRIBUTE_UNUSED,\n \n static const struct attribute_spec vms_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { COMMON_OBJECT,   0, 1, true,  false, false, common_object_handler },\n-  { NULL,            0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { COMMON_OBJECT,   0, 1, true,  false, false, common_object_handler, false },\n+  { NULL,            0, 0, false, false, false, NULL, false }\n };\n \n void"}, {"sha": "fa92ccf7479b2a3e0979856d3bda6d271e2ebc8d", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -107,9 +107,11 @@ static void arc_conditional_register_usage (void);\n \n static const struct attribute_spec arc_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt\", 1, 1, true,  false, false, arc_handle_interrupt_attribute },\n-  { NULL,        0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"interrupt\", 1, 1, true,  false, false, arc_handle_interrupt_attribute,\n+    false },\n+  { NULL,        0, 0, false, false, false, NULL, false }\n };\n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "e863e8c19689882f303204d1e8ac3c3d680f598e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -255,20 +255,25 @@ static reg_class_t arm_preferred_rename_class (reg_class_t rclass);\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n   /* Function calls made to this symbol must be done indirectly, because\n      it may lie outside of the 26 bit addressing range of a normal function\n      call.  */\n-  { \"long_call\",    0, 0, false, true,  true,  NULL },\n+  { \"long_call\",    0, 0, false, true,  true,  NULL, false },\n   /* Whereas these functions are always known to reside within the 26 bit\n      addressing range.  */\n-  { \"short_call\",   0, 0, false, true,  true,  NULL },\n+  { \"short_call\",   0, 0, false, true,  true,  NULL, false },\n   /* Specify the procedure call conventions for a function.  */\n-  { \"pcs\",          1, 1, false, true,  true,  arm_handle_pcs_attribute },\n+  { \"pcs\",          1, 1, false, true,  true,  arm_handle_pcs_attribute,\n+    false },\n   /* Interrupt Service Routines have special prologue and epilogue requirements.  */\n-  { \"isr\",          0, 1, false, false, false, arm_handle_isr_attribute },\n-  { \"interrupt\",    0, 1, false, false, false, arm_handle_isr_attribute },\n-  { \"naked\",        0, 0, true,  false, false, arm_handle_fndecl_attribute },\n+  { \"isr\",          0, 1, false, false, false, arm_handle_isr_attribute,\n+    false },\n+  { \"interrupt\",    0, 1, false, false, false, arm_handle_isr_attribute,\n+    false },\n+  { \"naked\",        0, 0, true,  false, false, arm_handle_fndecl_attribute,\n+    false },\n #ifdef ARM_PE\n   /* ARM/PE has three new attributes:\n      interfacearm - ?\n@@ -279,15 +284,17 @@ static const struct attribute_spec arm_attribute_table[] =\n      them with spaces.  We do NOT support this.  Instead, use __declspec\n      multiple times.\n   */\n-  { \"dllimport\",    0, 0, true,  false, false, NULL },\n-  { \"dllexport\",    0, 0, true,  false, false, NULL },\n-  { \"interfacearm\", 0, 0, true,  false, false, arm_handle_fndecl_attribute },\n+  { \"dllimport\",    0, 0, true,  false, false, NULL, false },\n+  { \"dllexport\",    0, 0, true,  false, false, NULL, false },\n+  { \"interfacearm\", 0, 0, true,  false, false, arm_handle_fndecl_attribute,\n+    false },\n #elif TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-  { \"dllimport\",    0, 0, false, false, false, handle_dll_attribute },\n-  { \"dllexport\",    0, 0, false, false, false, handle_dll_attribute },\n-  { \"notshared\",    0, 0, false, true, false, arm_handle_notshared_attribute },\n+  { \"dllimport\",    0, 0, false, false, false, handle_dll_attribute, false },\n+  { \"dllexport\",    0, 0, false, false, false, handle_dll_attribute, false },\n+  { \"notshared\",    0, 0, false, true, false, arm_handle_notshared_attribute,\n+    false },\n #endif\n-  { NULL,           0, 0, false, false, false, NULL }\n+  { NULL,           0, 0, false, false, false, NULL, false }\n };\n \n /* Set default optimization options.  */"}, {"sha": "f9211886be5898f4d7e0eaadb2ec70cee3232e68", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -129,14 +129,21 @@ section *progmem_section;\n /* AVR attributes.  */\n static const struct attribute_spec avr_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"progmem\",   0, 0, false, false, false,  avr_handle_progmem_attribute },\n-  { \"signal\",    0, 0, true,  false, false,  avr_handle_fndecl_attribute },\n-  { \"interrupt\", 0, 0, true,  false, false,  avr_handle_fndecl_attribute },\n-  { \"naked\",     0, 0, false, true,  true,   avr_handle_fntype_attribute },\n-  { \"OS_task\",   0, 0, false, true,  true,   avr_handle_fntype_attribute },\n-  { \"OS_main\",   0, 0, false, true,  true,   avr_handle_fntype_attribute },\n-  { NULL,        0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"progmem\",   0, 0, false, false, false,  avr_handle_progmem_attribute,\n+    false },\n+  { \"signal\",    0, 0, true,  false, false,  avr_handle_fndecl_attribute,\n+    false },\n+  { \"interrupt\", 0, 0, true,  false, false,  avr_handle_fndecl_attribute,\n+    false },\n+  { \"naked\",     0, 0, false, true,  true,   avr_handle_fntype_attribute,\n+    false },\n+  { \"OS_task\",   0, 0, false, true,  true,   avr_handle_fntype_attribute,\n+    false },\n+  { \"OS_main\",   0, 0, false, true,  true,   avr_handle_fntype_attribute,\n+    false },\n+  { NULL,        0, 0, false, false, false, NULL, false }\n };\n \n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */"}, {"sha": "0e05e724788e76dd90a7d2e11d461c784c4bbe04", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -5765,21 +5765,30 @@ bfin_handle_l2_attribute (tree *node, tree ARG_UNUSED (name),\n /* Table of valid machine attributes.  */\n static const struct attribute_spec bfin_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt_handler\", 0, 0, false, true,  true, handle_int_attribute },\n-  { \"exception_handler\", 0, 0, false, true,  true, handle_int_attribute },\n-  { \"nmi_handler\", 0, 0, false, true,  true, handle_int_attribute },\n-  { \"nesting\", 0, 0, false, true,  true, NULL },\n-  { \"kspisusp\", 0, 0, false, true,  true, NULL },\n-  { \"saveall\", 0, 0, false, true,  true, NULL },\n-  { \"longcall\",  0, 0, false, true,  true,  bfin_handle_longcall_attribute },\n-  { \"shortcall\", 0, 0, false, true,  true,  bfin_handle_longcall_attribute },\n-  { \"l1_text\", 0, 0, true, false, false,  bfin_handle_l1_text_attribute },\n-  { \"l1_data\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute },\n-  { \"l1_data_A\", 0, 0, true, false, false, bfin_handle_l1_data_attribute },\n-  { \"l1_data_B\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute },\n-  { \"l2\", 0, 0, true, false, false,  bfin_handle_l2_attribute },\n-  { NULL, 0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"interrupt_handler\", 0, 0, false, true,  true, handle_int_attribute,\n+    false },\n+  { \"exception_handler\", 0, 0, false, true,  true, handle_int_attribute,\n+    false },\n+  { \"nmi_handler\", 0, 0, false, true,  true, handle_int_attribute, false },\n+  { \"nesting\", 0, 0, false, true,  true, NULL, false },\n+  { \"kspisusp\", 0, 0, false, true,  true, NULL, false },\n+  { \"saveall\", 0, 0, false, true,  true, NULL, false },\n+  { \"longcall\",  0, 0, false, true,  true,  bfin_handle_longcall_attribute,\n+    false },\n+  { \"shortcall\", 0, 0, false, true,  true,  bfin_handle_longcall_attribute,\n+    false },\n+  { \"l1_text\", 0, 0, true, false, false,  bfin_handle_l1_text_attribute,\n+    false },\n+  { \"l1_data\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute,\n+    false },\n+  { \"l1_data_A\", 0, 0, true, false, false, bfin_handle_l1_data_attribute,\n+    false },\n+  { \"l1_data_B\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute,\n+    false },\n+  { \"l2\", 0, 0, true, false, false,  bfin_handle_l2_attribute, false },\n+  { NULL, 0, 0, false, false, false, NULL, false }\n };\n \f\n /* Implementation of TARGET_ASM_INTEGER.  When using FD-PIC, we need to"}, {"sha": "8f635d5a171e1516727d1f5c9155835c39dd0c7d", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -183,8 +183,8 @@ static void crx_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \n static const struct attribute_spec crx_attribute_table[] = {\n   /* ISRs have special prologue and epilogue requirements. */\n-  {\"interrupt\", 0, 0, false, true, true, NULL},\n-  {NULL, 0, 0, false, false, false, NULL}\n+  {\"interrupt\", 0, 0, false, true, true, NULL, false},\n+  {NULL, 0, 0, false, false, false, NULL, false}\n };\n \n /* Option handling.  */"}, {"sha": "e3f69601d9b8e4af2c194f89b3e33a374a2deb7e", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -726,11 +726,12 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n /* Extra attributes for Darwin.  */\n #define SUBTARGET_ATTRIBUTE_TABLE\t\t\t\t\t     \\\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */ \\\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,     \\\n+       affects_type_identity } */\t\t\t\t\t\t     \\\n   { \"apple_kext_compatibility\", 0, 0, false, true, false,\t\t     \\\n-    darwin_handle_kext_attribute },\t\t\t\t\t     \\\n+    darwin_handle_kext_attribute, false },\t\t\t\t     \\\n   { \"weak_import\", 0, 0, true, false, false,\t\t\t\t     \\\n-    darwin_handle_weak_import_attribute }\n+    darwin_handle_weak_import_attribute, false }\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\"}, {"sha": "774863cbea733fd154b30e675314586abac6c3ea", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -5367,15 +5367,23 @@ h8300_insert_attributes (tree node, tree *attributes)\n \n static const struct attribute_spec h8300_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt_handler\", 0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n-  { \"saveall\",           0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n-  { \"OS_Task\",           0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n-  { \"monitor\",           0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n-  { \"function_vector\",   0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n-  { \"eightbit_data\",     0, 0, true,  false, false, h8300_handle_eightbit_data_attribute },\n-  { \"tiny_data\",         0, 0, true,  false, false, h8300_handle_tiny_data_attribute },\n-  { NULL,                0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"interrupt_handler\", 0, 0, true,  false, false,\n+    h8300_handle_fndecl_attribute, false },\n+  { \"saveall\",           0, 0, true,  false, false,\n+    h8300_handle_fndecl_attribute, false },\n+  { \"OS_Task\",           0, 0, true,  false, false,\n+    h8300_handle_fndecl_attribute, false },\n+  { \"monitor\",           0, 0, true,  false, false,\n+    h8300_handle_fndecl_attribute, false },\n+  { \"function_vector\",   0, 0, true,  false, false,\n+    h8300_handle_fndecl_attribute, false },\n+  { \"eightbit_data\",     0, 0, true,  false, false,\n+    h8300_handle_eightbit_data_attribute, false },\n+  { \"tiny_data\",         0, 0, true,  false, false,\n+    h8300_handle_tiny_data_attribute, false },\n+  { NULL,                0, 0, false, false, false, NULL, false }\n };\n \n "}, {"sha": "41ca7992411d7a65ceb8a2794c26ff6acf2f9cb7", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -454,8 +454,10 @@ do {\t\t\t\t\t\t\\\n #define TARGET_USE_LOCAL_THUNK_ALIAS_P(DECL) (!DECL_ONE_ONLY (DECL))\n \n #define SUBTARGET_ATTRIBUTE_TABLE \\\n-  { \"selectany\", 0, 0, true, false, false, ix86_handle_selectany_attribute }\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  { \"selectany\", 0, 0, true, false, false, ix86_handle_selectany_attribute, \\\n+    false }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n \n /*  mcount() does not need a counter variable.  */\n #undef NO_PROFILE_COUNTERS"}, {"sha": "d158969eef341290e74d4b7a526d2e9dcb56f3aa", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -32723,45 +32723,56 @@ ix86_expand_round (rtx operand0, rtx operand1)\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ix86_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n   /* Stdcall attribute says callee is responsible for popping arguments\n      if they are not variable.  */\n-  { \"stdcall\",   0, 0, false, true,  true,  ix86_handle_cconv_attribute },\n+  { \"stdcall\",   0, 0, false, true,  true,  ix86_handle_cconv_attribute,\n+    true },\n   /* Fastcall attribute says callee is responsible for popping arguments\n      if they are not variable.  */\n-  { \"fastcall\",  0, 0, false, true,  true,  ix86_handle_cconv_attribute },\n+  { \"fastcall\",  0, 0, false, true,  true,  ix86_handle_cconv_attribute,\n+    true },\n   /* Thiscall attribute says callee is responsible for popping arguments\n      if they are not variable.  */\n-  { \"thiscall\",  0, 0, false, true,  true,  ix86_handle_cconv_attribute },\n+  { \"thiscall\",  0, 0, false, true,  true,  ix86_handle_cconv_attribute,\n+    true },\n   /* Cdecl attribute says the callee is a normal C declaration */\n-  { \"cdecl\",     0, 0, false, true,  true,  ix86_handle_cconv_attribute },\n+  { \"cdecl\",     0, 0, false, true,  true,  ix86_handle_cconv_attribute,\n+    true },\n   /* Regparm attribute specifies how many integer arguments are to be\n      passed in registers.  */\n-  { \"regparm\",   1, 1, false, true,  true,  ix86_handle_cconv_attribute },\n+  { \"regparm\",   1, 1, false, true,  true,  ix86_handle_cconv_attribute,\n+    true },\n   /* Sseregparm attribute says we are using x86_64 calling conventions\n      for FP arguments.  */\n-  { \"sseregparm\", 0, 0, false, true, true, ix86_handle_cconv_attribute },\n+  { \"sseregparm\", 0, 0, false, true, true, ix86_handle_cconv_attribute,\n+    true },\n   /* force_align_arg_pointer says this function realigns the stack at entry.  */\n   { (const char *)&ix86_force_align_arg_pointer_string, 0, 0,\n-    false, true,  true, ix86_handle_cconv_attribute },\n+    false, true,  true, ix86_handle_cconv_attribute, false },\n #if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-  { \"dllimport\", 0, 0, false, false, false, handle_dll_attribute },\n-  { \"dllexport\", 0, 0, false, false, false, handle_dll_attribute },\n-  { \"shared\",    0, 0, true,  false, false, ix86_handle_shared_attribute },\n+  { \"dllimport\", 0, 0, false, false, false, handle_dll_attribute, false },\n+  { \"dllexport\", 0, 0, false, false, false, handle_dll_attribute, false },\n+  { \"shared\",    0, 0, true,  false, false, ix86_handle_shared_attribute,\n+    false },\n #endif\n-  { \"ms_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute },\n-  { \"gcc_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute },\n+  { \"ms_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute,\n+    false },\n+  { \"gcc_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute,\n+    false },\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n   SUBTARGET_ATTRIBUTE_TABLE,\n #endif\n   /* ms_abi and sysv_abi calling convention function attributes.  */\n-  { \"ms_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute },\n-  { \"sysv_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute },\n-  { \"ms_hook_prologue\", 0, 0, true, false, false, ix86_handle_fndecl_attribute },\n+  { \"ms_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute, true },\n+  { \"sysv_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute, true },\n+  { \"ms_hook_prologue\", 0, 0, true, false, false, ix86_handle_fndecl_attribute,\n+    false },\n   { \"callee_pop_aggregate_return\", 1, 1, false, true, true,\n-    ix86_handle_callee_pop_aggregate_return },\n+    ix86_handle_callee_pop_aggregate_return, true },\n   /* End element.  */\n-  { NULL,        0, 0, false, false, false, NULL }\n+  { NULL,        0, 0, false, false, false, NULL, false }\n };\n \n /* Implement targetm.vectorize.builtin_vectorization_cost.  */"}, {"sha": "55a55e8a593d7b670b0f2d9735109b5dc43f5085", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -342,15 +342,18 @@ static section * ia64_hpux_function_section (tree, enum node_frequency,\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"syscall_linkage\", 0, 0, false, true,  true,  NULL },\n-  { \"model\",\t       1, 1, true, false, false, ia64_handle_model_attribute },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"syscall_linkage\", 0, 0, false, true,  true,  NULL, false },\n+  { \"model\",\t       1, 1, true, false, false, ia64_handle_model_attribute,\n+    false },\n #if TARGET_ABI_OPEN_VMS\n-  { \"common_object\",   1, 1, true, false, false, ia64_vms_common_object_attribute},\n+  { \"common_object\",   1, 1, true, false, false,\n+    ia64_vms_common_object_attribute, false },\n #endif\n   { \"version_id\",      1, 1, true, false, false,\n-    ia64_handle_version_id_attribute },\n-  { NULL,\t       0, 0, false, false, false, NULL }\n+    ia64_handle_version_id_attribute, false },\n+  { NULL,\t       0, 0, false, false, false, NULL, false }\n };\n \n /* Implement overriding of the optimization options.  */"}, {"sha": "56f9cf5ccca01d8d2efb3013cff7839d54d09d00", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -3232,11 +3232,12 @@ current_function_special_page_vector (rtx x)\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE m32c_attribute_table\n static const struct attribute_spec m32c_attribute_table[] = {\n-  {\"interrupt\", 0, 0, false, false, false, interrupt_handler},\n-  {\"bank_switch\", 0, 0, false, false, false, interrupt_handler},\n-  {\"fast_interrupt\", 0, 0, false, false, false, interrupt_handler},\n-  {\"function_vector\", 1, 1, true,  false, false, function_vector_handler},\n-  {0, 0, 0, 0, 0, 0, 0}\n+  {\"interrupt\", 0, 0, false, false, false, interrupt_handler, false},\n+  {\"bank_switch\", 0, 0, false, false, false, interrupt_handler, false},\n+  {\"fast_interrupt\", 0, 0, false, false, false, interrupt_handler, false},\n+  {\"function_vector\", 1, 1, true,  false, false, function_vector_handler,\n+   false},\n+  {0, 0, 0, 0, 0, 0, 0, false}\n };\n \n #undef TARGET_COMP_TYPE_ATTRIBUTES"}, {"sha": "820aa8de1a1c1c8acb07bc0cd52432875e9b2ecf", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -108,10 +108,12 @@ static void m32r_trampoline_init (rtx, tree, rtx);\n \n static const struct attribute_spec m32r_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt\", 0, 0, true,  false, false, NULL },\n-  { \"model\",     1, 1, true,  false, false, m32r_handle_model_attribute },\n-  { NULL,        0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"interrupt\", 0, 0, true,  false, false, NULL, false },\n+  { \"model\",     1, 1, true,  false, false, m32r_handle_model_attribute,\n+    false },\n+  { NULL,        0, 0, false, false, false, NULL, false }\n };\n \n static const struct default_options m32r_option_optimization_table[] ="}, {"sha": "1e414102c3f1fed985e4fb8db7954342e965190b", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -231,13 +231,19 @@ static const struct processor_costs m6812_cost = {\n \n static const struct attribute_spec m68hc11_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt\", 0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n-  { \"trap\",      0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n-  { \"far\",       0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n-  { \"near\",      0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n-  { \"page0\",     0, 0, false, false, false, m68hc11_handle_page0_attribute },\n-  { NULL,        0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"interrupt\", 0, 0, false, true,  true,  m68hc11_handle_fntype_attribute,\n+    false },\n+  { \"trap\",      0, 0, false, true,  true,  m68hc11_handle_fntype_attribute,\n+    false },\n+  { \"far\",       0, 0, false, true,  true,  m68hc11_handle_fntype_attribute,\n+    false },\n+  { \"near\",      0, 0, false, true,  true,  m68hc11_handle_fntype_attribute,\n+    false },\n+  { \"page0\",     0, 0, false, false, false, m68hc11_handle_page0_attribute,\n+    false },\n+  { NULL,        0, 0, false, false, false, NULL, false }\n };\n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "5810aa43228d9daa8c5aea99e4af06c13e23dbb7", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -298,11 +298,15 @@ const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n \n static const struct attribute_spec m68k_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt\", 0, 0, true,  false, false, m68k_handle_fndecl_attribute },\n-  { \"interrupt_handler\", 0, 0, true,  false, false, m68k_handle_fndecl_attribute },\n-  { \"interrupt_thread\", 0, 0, true,  false, false, m68k_handle_fndecl_attribute },\n-  { NULL,                0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"interrupt\", 0, 0, true,  false, false, m68k_handle_fndecl_attribute,\n+    false },\n+  { \"interrupt_handler\", 0, 0, true,  false, false,\n+    m68k_handle_fndecl_attribute, false },\n+  { \"interrupt_thread\", 0, 0, true,  false, false,\n+    m68k_handle_fndecl_attribute, false },\n+  { NULL,                0, 0, false, false, false, NULL, false }\n };\n \n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "093ac2f2de0100777d749795c2b1edfcece8e22e", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -143,11 +143,13 @@ static void       mcore_option_override\t\t(void);\n \n static const struct attribute_spec mcore_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"dllexport\", 0, 0, true,  false, false, NULL },\n-  { \"dllimport\", 0, 0, true,  false, false, NULL },\n-  { \"naked\",     0, 0, true,  false, false, mcore_handle_naked_attribute },\n-  { NULL,        0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"dllexport\", 0, 0, true,  false, false, NULL, false },\n+  { \"dllimport\", 0, 0, true,  false, false, NULL, false },\n+  { \"naked\",     0, 0, true,  false, false, mcore_handle_naked_attribute,\n+    false },\n+  { NULL,        0, 0, false, false, false, NULL, false }\n };\n \n /* What options are we going to default to specific settings when"}, {"sha": "73bb45d6c66b2920f7d042523d09657b7006d4d6", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -4088,17 +4088,19 @@ mep_validate_vliw (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static const struct attribute_spec mep_attribute_table[11] =\n {\n-  /* name         min max decl   type   func   handler */\n-  { \"based\",        0, 0, false, false, false, mep_validate_based_tiny },\n-  { \"tiny\",         0, 0, false, false, false, mep_validate_based_tiny },\n-  { \"near\",         0, 0, false, false, false, mep_validate_near_far },\n-  { \"far\",          0, 0, false, false, false, mep_validate_near_far },\n-  { \"disinterrupt\", 0, 0, false, false, false, mep_validate_disinterrupt },\n-  { \"interrupt\",    0, 0, false, false, false, mep_validate_interrupt },\n-  { \"io\",           0, 1, false, false, false, mep_validate_io_cb },\n-  { \"cb\",           0, 1, false, false, false, mep_validate_io_cb },\n-  { \"vliw\",         0, 0, false, true,  false, mep_validate_vliw },\n-  { NULL,           0, 0, false, false, false, NULL }\n+  /* name         min max decl   type   func   handler\n+     affects_type_identity */\n+  { \"based\",        0, 0, false, false, false, mep_validate_based_tiny, false },\n+  { \"tiny\",         0, 0, false, false, false, mep_validate_based_tiny, false },\n+  { \"near\",         0, 0, false, false, false, mep_validate_near_far, false },\n+  { \"far\",          0, 0, false, false, false, mep_validate_near_far, false },\n+  { \"disinterrupt\", 0, 0, false, false, false, mep_validate_disinterrupt,\n+    false },\n+  { \"interrupt\",    0, 0, false, false, false, mep_validate_interrupt, false },\n+  { \"io\",           0, 1, false, false, false, mep_validate_io_cb, false },\n+  { \"cb\",           0, 1, false, false, false, mep_validate_io_cb, false },\n+  { \"vliw\",         0, 0, false, true,  false, mep_validate_vliw, false },\n+  { NULL,           0, 0, false, false, false, NULL, false }\n };\n \n static bool"}, {"sha": "a38545f4a1b54a2848f654c270148ad2dab3354c", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -195,10 +195,14 @@ int interrupt_handler;\n int save_volatiles;\n \n const struct attribute_spec microblaze_attribute_table[] = {\n-  /* name         min_len, max_len, decl_req, type_req, fn_type, req_handler */\n-  {\"interrupt_handler\", 0,       0,     true,    false,   false,        NULL},\n-  {\"save_volatiles\"   , 0,       0,     true,    false,   false,        NULL},\n-  { NULL,        \t0,       0,    false,    false,   false,        NULL}\n+  /* name         min_len, max_len, decl_req, type_req, fn_type, req_handler,\n+     affects_type_identity */\n+  {\"interrupt_handler\", 0,       0,     true,    false,   false,        NULL,\n+    false },\n+  {\"save_volatiles\"   , 0,       0,     true,    false,   false,        NULL,\n+    false },\n+  { NULL,        \t0,       0,    false,    false,   false,        NULL,\n+    false }\n };\n \n static int microblaze_interrupt_function_p (tree);"}, {"sha": "11d8ff0369a32a21a043baf0bb8894aa25538577", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -641,22 +641,23 @@ const enum reg_class mips_regno_to_class[FIRST_PSEUDO_REGISTER] = {\n \n /* The value of TARGET_ATTRIBUTE_TABLE.  */\n static const struct attribute_spec mips_attribute_table[] = {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"long_call\",   0, 0, false, true,  true,  NULL },\n-  { \"far\",     \t   0, 0, false, true,  true,  NULL },\n-  { \"near\",        0, 0, false, true,  true,  NULL },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       om_diagnostic } */\n+  { \"long_call\",   0, 0, false, true,  true,  NULL, false },\n+  { \"far\",     \t   0, 0, false, true,  true,  NULL, false },\n+  { \"near\",        0, 0, false, true,  true,  NULL, false },\n   /* We would really like to treat \"mips16\" and \"nomips16\" as type\n      attributes, but GCC doesn't provide the hooks we need to support\n      the right conversion rules.  As declaration attributes, they affect\n      code generation but don't carry other semantics.  */\n-  { \"mips16\", \t   0, 0, true,  false, false, NULL },\n-  { \"nomips16\",    0, 0, true,  false, false, NULL },\n+  { \"mips16\", \t   0, 0, true,  false, false, NULL, false },\n+  { \"nomips16\",    0, 0, true,  false, false, NULL, false },\n   /* Allow functions to be specified as interrupt handlers */\n-  { \"interrupt\",   0, 0, false, true,  true, NULL },\n-  { \"use_shadow_register_set\",\t0, 0, false, true,  true, NULL },\n-  { \"keep_interrupts_masked\",\t0, 0, false, true,  true, NULL },\n-  { \"use_debug_exception_return\", 0, 0, false, true,  true, NULL },\n-  { NULL,\t   0, 0, false, false, false, NULL }\n+  { \"interrupt\",   0, 0, false, true,  true, NULL, false },\n+  { \"use_shadow_register_set\",\t0, 0, false, true,  true, NULL, false },\n+  { \"keep_interrupts_masked\",\t0, 0, false, true,  true, NULL, false },\n+  { \"use_debug_exception_return\", 0, 0, false, true,  true, NULL, false },\n+  { NULL,\t   0, 0, false, false, false, NULL, false }\n };\n \f\n /* A table describing all the processors GCC knows about.  Names are"}, {"sha": "eca1b44f4ec3a5b5cc18b369be924df6ba1fa13b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -1303,16 +1303,22 @@ static const char alt_reg_names[][8] =\n \n static const struct attribute_spec rs6000_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"altivec\",   1, 1, false, true,  false, rs6000_handle_altivec_attribute },\n-  { \"longcall\",  0, 0, false, true,  true,  rs6000_handle_longcall_attribute },\n-  { \"shortcall\", 0, 0, false, true,  true,  rs6000_handle_longcall_attribute },\n-  { \"ms_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute },\n-  { \"gcc_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"altivec\",   1, 1, false, true,  false, rs6000_handle_altivec_attribute,\n+    false },\n+  { \"longcall\",  0, 0, false, true,  true,  rs6000_handle_longcall_attribute,\n+    false },\n+  { \"shortcall\", 0, 0, false, true,  true,  rs6000_handle_longcall_attribute,\n+    false },\n+  { \"ms_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute,\n+    false },\n+  { \"gcc_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute,\n+    false },\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n   SUBTARGET_ATTRIBUTE_TABLE,\n #endif\n-  { NULL,        0, 0, false, false, false, NULL }\n+  { NULL,        0, 0, false, false, false, NULL, false }\n };\n \n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */"}, {"sha": "592f3118ddf82b65669b2ad222b0773301508dd2", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -2237,11 +2237,15 @@ rx_handle_func_attribute (tree * node,\n /* Table of RX specific attributes.  */\n const struct attribute_spec rx_attribute_table[] =\n {\n-  /* Name, min_len, max_len, decl_req, type_req, fn_type_req, handler.  */\n-  { \"fast_interrupt\", 0, 0, true, false, false, rx_handle_func_attribute },\n-  { \"interrupt\",      0, 0, true, false, false, rx_handle_func_attribute },\n-  { \"naked\",          0, 0, true, false, false, rx_handle_func_attribute },\n-  { NULL,             0, 0, false, false, false, NULL }\n+  /* Name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+     affects_type_identity.  */\n+  { \"fast_interrupt\", 0, 0, true, false, false, rx_handle_func_attribute,\n+    false },\n+  { \"interrupt\",      0, 0, true, false, false, rx_handle_func_attribute,\n+    false },\n+  { \"naked\",          0, 0, true, false, false, rx_handle_func_attribute,\n+    false },\n+  { NULL,             0, 0, false, false, false, NULL, false }\n };\n \n /* Extra processing for target specific command line options.  */"}, {"sha": "ee52c32a422c642efb00f80f67a1ba4e2d1d874e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -306,15 +306,24 @@ static void sh_conditional_register_usage (void);\n \f\n static const struct attribute_spec sh_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt_handler\", 0, 0, true,  false, false, sh_handle_interrupt_handler_attribute },\n-  { \"sp_switch\",         1, 1, true,  false, false, sh_handle_sp_switch_attribute },\n-  { \"trap_exit\",         1, 1, true,  false, false, sh_handle_trap_exit_attribute },\n-  { \"renesas\",           0, 0, false, true, false, sh_handle_renesas_attribute },\n-  { \"trapa_handler\",     0, 0, true,  false, false, sh_handle_interrupt_handler_attribute },\n-  { \"nosave_low_regs\",   0, 0, true,  false, false, sh_handle_interrupt_handler_attribute },\n-  { \"resbank\",           0, 0, true,  false, false, sh_handle_resbank_handler_attribute },\n-  { \"function_vector\",   1, 1, true,  false, false, sh2a_handle_function_vector_handler_attribute },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"interrupt_handler\", 0, 0, true,  false, false,\n+    sh_handle_interrupt_handler_attribute, false },\n+  { \"sp_switch\",         1, 1, true,  false, false,\n+     sh_handle_sp_switch_attribute, false },\n+  { \"trap_exit\",         1, 1, true,  false, false,\n+    sh_handle_trap_exit_attribute, false },\n+  { \"renesas\",           0, 0, false, true, false,\n+    sh_handle_renesas_attribute, false },\n+  { \"trapa_handler\",     0, 0, true,  false, false,\n+    sh_handle_interrupt_handler_attribute, false },\n+  { \"nosave_low_regs\",   0, 0, true,  false, false,\n+    sh_handle_interrupt_handler_attribute, false },\n+  { \"resbank\",           0, 0, true,  false, false,\n+    sh_handle_resbank_handler_attribute, false },\n+  { \"function_vector\",   1, 1, true,  false, false,\n+    sh2a_handle_function_vector_handler_attribute, false },\n #ifdef SYMBIAN\n   /* Symbian support adds three new attributes:\n      dllexport - for exporting a function/variable that will live in a dll\n@@ -323,10 +332,12 @@ static const struct attribute_spec sh_attribute_table[] =\n      Microsoft allows multiple declspecs in one __declspec, separating\n      them with spaces.  We do NOT support this.  Instead, use __declspec\n      multiple times.  */\n-  { \"dllimport\",         0, 0, true,  false, false, sh_symbian_handle_dll_attribute },\n-  { \"dllexport\",         0, 0, true,  false, false, sh_symbian_handle_dll_attribute },\n+  { \"dllimport\",         0, 0, true,  false, false,\n+    sh_symbian_handle_dll_attribute, false },\n+  { \"dllexport\",         0, 0, true,  false, false,\n+    sh_symbian_handle_dll_attribute, false },\n #endif\n-  { NULL,                0, 0, false, false, false, NULL }\n+  { NULL,                0, 0, false, false, false, NULL, false }\n };\n \n /* Set default optimization options.  */"}, {"sha": "7d081c6d40b39227ea71695eb8e5f220dd24475d", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -257,8 +257,8 @@ __enable_execute_stack (void *addr)\t\t\t\t\t\\\n /* #pragma init and #pragma fini are implemented on top of init and\n    fini attributes.  */\n #define SOLARIS_ATTRIBUTE_TABLE\t\t\t\t\t\t\\\n-  { \"init\",      0, 0, true,  false,  false, NULL },\t\t\t\\\n-  { \"fini\",      0, 0, true,  false,  false, NULL }\n+  { \"init\",      0, 0, true,  false,  false, NULL, false },\t\t\\\n+  { \"fini\",      0, 0, true,  false,  false, NULL, false }\n \n /* Solaris/x86 as and gas support the common ELF .section/.pushsection\n    syntax.  */"}, {"sha": "03edae50adf70ae0c8a9dc69fab4d826c77b4fd0", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -469,9 +469,10 @@ static enum machine_mode sparc_preferred_simd_mode (enum machine_mode);\n /* Table of valid machine attributes.  */\n static const struct attribute_spec sparc_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       do_diagnostic } */\n   SUBTARGET_ATTRIBUTE_TABLE,\n-  { NULL,        0, 0, false, false, false, NULL }\n+  { NULL,        0, 0, false, false, false, NULL, false }\n };\n #endif\n \f"}, {"sha": "46bc586c2c75dac0ebd4cb01fdf2fcaf715a5e98", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -293,10 +293,13 @@ spu_libgcc_shift_count_mode (void);\n /*  Table of machine attributes.  */\n static const struct attribute_spec spu_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"naked\",          0, 0, true,  false, false, spu_handle_fndecl_attribute },\n-  { \"spu_vector\",     0, 0, false, true,  false, spu_handle_vector_attribute },\n-  { NULL,             0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"naked\",          0, 0, true,  false, false, spu_handle_fndecl_attribute,\n+    false },\n+  { \"spu_vector\",     0, 0, false, true,  false, spu_handle_vector_attribute,\n+    false },\n+  { NULL,             0, 0, false, false, false, NULL, false }\n };\n \f\n /*  TARGET overrides.  */"}, {"sha": "052285c284afdb35d27b67258011df603dd78ef0", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -2170,11 +2170,15 @@ static tree xstormy16_handle_below100_attribute\n \n static const struct attribute_spec xstormy16_attribute_table[] =\n {\n-  /* name, min_len, max_len, decl_req, type_req, fn_type_req, handler.  */\n-  { \"interrupt\", 0, 0, false, true,  true,  xstormy16_handle_interrupt_attribute },\n-  { \"BELOW100\",  0, 0, false, false, false, xstormy16_handle_below100_attribute },\n-  { \"below100\",  0, 0, false, false, false, xstormy16_handle_below100_attribute },\n-  { NULL,        0, 0, false, false, false, NULL }\n+  /* name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+     affects_type_identity.  */\n+  { \"interrupt\", 0, 0, false, true,  true,\n+    xstormy16_handle_interrupt_attribute , false },\n+  { \"BELOW100\",  0, 0, false, false, false,\n+    xstormy16_handle_below100_attribute, false },\n+  { \"below100\",  0, 0, false, false, false,\n+    xstormy16_handle_below100_attribute, false },\n+  { NULL,        0, 0, false, false, false, NULL, false }\n };\n \n /* Handle an \"interrupt\" attribute;"}, {"sha": "e3a19ff5e58174102b4ddf33a58a603b3f345010", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -3118,13 +3118,19 @@ v850_issue_rate (void)\n \n static const struct attribute_spec v850_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt_handler\", 0, 0, true,  false, false, v850_handle_interrupt_attribute },\n-  { \"interrupt\",         0, 0, true,  false, false, v850_handle_interrupt_attribute },\n-  { \"sda\",               0, 0, true,  false, false, v850_handle_data_area_attribute },\n-  { \"tda\",               0, 0, true,  false, false, v850_handle_data_area_attribute },\n-  { \"zda\",               0, 0, true,  false, false, v850_handle_data_area_attribute },\n-  { NULL,                0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"interrupt_handler\", 0, 0, true,  false, false,\n+    v850_handle_interrupt_attribute, false },\n+  { \"interrupt\",         0, 0, true,  false, false,\n+    v850_handle_interrupt_attribute, false },\n+  { \"sda\",               0, 0, true,  false, false,\n+    v850_handle_data_area_attribute, false },\n+  { \"tda\",               0, 0, true,  false, false,\n+    v850_handle_data_area_attribute, false },\n+  { \"zda\",               0, 0, true,  false, false,\n+    v850_handle_data_area_attribute, false },\n+  { NULL,                0, 0, false, false, false, NULL, false }\n };\n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "37124b43c2510e03023bedb827920fbdc3008572", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -1,3 +1,8 @@\n+2011-03-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/12171\n+\t* tree.c (cxx_attribute_table): Adjust table.\n+\n 2011-03-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48162"}, {"sha": "070ba810a49fcd3e0ba788ab9209edea0e5bbbdb", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -2611,11 +2611,15 @@ zero_init_p (const_tree t)\n /* Table of valid C++ attributes.  */\n const struct attribute_spec cxx_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"java_interface\", 0, 0, false, false, false, handle_java_interface_attribute },\n-  { \"com_interface\",  0, 0, false, false, false, handle_com_interface_attribute },\n-  { \"init_priority\",  1, 1, true,  false, false, handle_init_priority_attribute },\n-  { NULL,\t      0, 0, false, false, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n+  { \"java_interface\", 0, 0, false, false, false,\n+    handle_java_interface_attribute, false },\n+  { \"com_interface\",  0, 0, false, false, false,\n+    handle_com_interface_attribute, false },\n+  { \"init_priority\",  1, 1, true,  false, false,\n+    handle_init_priority_attribute, false },\n+  { NULL,\t      0, 0, false, false, false, NULL, false }\n };\n \n /* Handle a \"java_interface\" attribute; arguments as in"}, {"sha": "6e878e6689598705e88bf856c17dc2a1c7cb0e83", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -331,7 +331,7 @@ handle_user_attribute (tree *node, tree name, tree args,\n \n /* Attribute definition */\n static struct attribute_spec user_attr =\n-  @{ \"user\", 1, 1, false,  false, false, handle_user_attribute @};\n+  @{ \"user\", 1, 1, false,  false, false, handle_user_attribute, false @};\n \n /* Plugin callback called during attribute registration.\n Registered with register_callback (plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL)"}, {"sha": "e384294bf4630e032fa2c6e69791704cc3b24ada", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -1,3 +1,8 @@\n+2011-03-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/12171\n+\t* lang.c (java_attribute_table): Adjust table.\n+\n 2011-02-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* jvspec.c (jvgenmain_spec): Remove %{a*}."}, {"sha": "6a117d79fcceedad8c441558ce09dd0900c50770", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -75,8 +75,8 @@ static tree java_eh_personality (void);\n const struct attribute_spec java_attribute_table[] =\n {\n  { \"nonnull\",                0, -1, false, true, true,\n-\t\t\t      NULL },\n-  { NULL,                     0, 0, false, false, false, NULL }\n+\t\t\t      NULL, false },\n+  { NULL,                     0, 0, false, false, false, NULL, false }\n };\n \n /* Used to avoid printing error messages with bogus function"}, {"sha": "124b0e75697df1bf1920b22dbac43649c3ed3890", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -1,3 +1,8 @@\n+2011-03-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/12171\n+\t* lto-lang.c (lto_attribute_table): Adjust table.\n+\n 2011-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/47807"}, {"sha": "aa928b6df62214865963e896d0db6afa1ff4dca1", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -52,42 +52,44 @@ static tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n /* Table of machine-independent attributes supported in GIMPLE.  */\n const struct attribute_spec lto_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       do_diagnostic } */\n   { \"noreturn\",               0, 0, true,  false, false,\n-\t\t\t      handle_noreturn_attribute },\n+\t\t\t      handle_noreturn_attribute, false },\n   { \"leaf\",\t\t      0, 0, true,  false, false,\n-\t\t\t      handle_leaf_attribute },\n+\t\t\t      handle_leaf_attribute, false },\n   /* The same comments as for noreturn attributes apply to const ones.  */\n   { \"const\",                  0, 0, true,  false, false,\n-\t\t\t      handle_const_attribute },\n+\t\t\t      handle_const_attribute, false },\n   { \"malloc\",                 0, 0, true,  false, false,\n-\t\t\t      handle_malloc_attribute },\n+\t\t\t      handle_malloc_attribute, false },\n   { \"pure\",                   0, 0, true,  false, false,\n-\t\t\t      handle_pure_attribute },\n+\t\t\t      handle_pure_attribute, false },\n   { \"no vops\",                0, 0, true,  false, false,\n-\t\t\t      handle_novops_attribute },\n+\t\t\t      handle_novops_attribute, false },\n   { \"nonnull\",                0, -1, false, true, true,\n-\t\t\t      handle_nonnull_attribute },\n+\t\t\t      handle_nonnull_attribute, false },\n   { \"nothrow\",                0, 0, true,  false, false,\n-\t\t\t      handle_nothrow_attribute },\n+\t\t\t      handle_nothrow_attribute, false },\n   { \"sentinel\",               0, 1, false, true, true,\n-\t\t\t      handle_sentinel_attribute },\n+\t\t\t      handle_sentinel_attribute, false },\n   { \"type generic\",           0, 0, false, true, true,\n-\t\t\t      handle_type_generic_attribute },\n-  { NULL,                     0, 0, false, false, false, NULL }\n+\t\t\t      handle_type_generic_attribute, false },\n+  { NULL,                     0, 0, false, false, false, NULL, false }\n };\n \n /* Give the specifications for the format attributes, used by C and all\n    descendants.  */\n \n const struct attribute_spec lto_format_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n+       affects_type_identity } */\n   { \"format\",                 3, 3, false, true,  true,\n-\t\t\t      handle_format_attribute },\n+\t\t\t      handle_format_attribute, false },\n   { \"format_arg\",             1, 1, false, true,  true,\n-\t\t\t      handle_format_arg_attribute },\n-  { NULL,                     0, 0, false, false, false, NULL }\n+\t\t\t      handle_format_arg_attribute, false },\n+  { NULL,                     0, 0, false, false, false, NULL, false }\n };\n \n enum built_in_attribute"}, {"sha": "acb8524d9ad05aef7e81e78152dc8903ac5bc9ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -1,3 +1,8 @@\n+2011-03-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/12171\n+\t* g++.dg/plugin/attribute_plugin.c: Adjust test.\n+\n 2011-03-21  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* gcc.target/arm/xor-and.c: New."}, {"sha": "8de5f44cbf8721521fc20b491a63b5c8af1b7feb", "filename": "gcc/testsuite/g++.dg/plugin/attribute_plugin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -26,7 +26,7 @@ handle_user_attribute (tree *node, tree name, tree args,\n /* Attribute definition */\n \n static struct attribute_spec user_attr =\n-  { \"user\", 1, 1, false,  false, false, handle_user_attribute };\n+  { \"user\", 1, 1, false,  false, false, handle_user_attribute, false };\n \n /* Plugin callback called during attribute registration */\n "}, {"sha": "eb5e4cab96fee6c47f373f9282f99be36208d9c7", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d784f7bdc63b09b0e2cee98aba71c921e2479c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=62d784f7bdc63b09b0e2cee98aba71c921e2479c", "patch": "@@ -4329,6 +4329,8 @@ struct attribute_spec\n      by the rest of this structure.  */\n   tree (*const handler) (tree *node, tree name, tree args,\n \t\t\t\t int flags, bool *no_add_attrs);\n+  /* Specifies if attribute affects type's identity.  */\n+  const bool affects_type_identity;\n };\n \n /* Flags that may be passed in the third argument of decl_attributes, and"}]}