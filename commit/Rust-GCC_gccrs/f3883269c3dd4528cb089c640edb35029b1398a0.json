{"sha": "f3883269c3dd4528cb089c640edb35029b1398a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM4ODMyNjljM2RkNDUyOGNiMDg5YzY0MGVkYjM1MDI5YjEzOThhMA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-02-11T18:44:05Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-02-11T18:44:05Z"}, "message": "re PR fortran/54223 (Statement function statement with dummy arguments that are also OPTIONAL may crash in wrong calls)\n\n2018-02-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/54223\n\tPR fortran/84276\n\t* interface.c (compare_actual_formal): Add in_statement_function\n\tbool parameter.  Skip check of INTENT attribute for statement\n\tfunctions.  Arguments to a statement function cannot be optional,\n\tissue error for missing argument.\n\t(gfc_procedure_use, gfc_ppc_use, gfc_arglist_matches_symbol): Use\n\tin_statement_function.\n\n2018-02-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/54223\n\tPR fortran/84276\n\t* gfortran.dg/statement_function_1.f90: New test.\n\t* gfortran.dg/statement_function_2.f90: New test.\n\nFrom-SVN: r257565", "tree": {"sha": "b65b027b9db3990712080a76dafddb627b91f43b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b65b027b9db3990712080a76dafddb627b91f43b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3883269c3dd4528cb089c640edb35029b1398a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3883269c3dd4528cb089c640edb35029b1398a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3883269c3dd4528cb089c640edb35029b1398a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3883269c3dd4528cb089c640edb35029b1398a0/comments", "author": null, "committer": null, "parents": [{"sha": "e519d2e8199746e9d2b6ef70de55f7331df5bc47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e519d2e8199746e9d2b6ef70de55f7331df5bc47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e519d2e8199746e9d2b6ef70de55f7331df5bc47"}], "stats": {"total": 97, "additions": 87, "deletions": 10}, "files": [{"sha": "d5c2675a427717b3f331892497e21a99bfed9078", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f3883269c3dd4528cb089c640edb35029b1398a0", "patch": "@@ -1,3 +1,14 @@\n+2018-02-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/54223\n+\tPR fortran/84276\n+\t* interface.c (compare_actual_formal): Add in_statement_function\n+\tbool parameter.  Skip check of INTENT attribute for statement\n+\tfunctions.  Arguments to a statement function cannot be optional,\n+\tissue error for missing argument.\n+\t(gfc_procedure_use, gfc_ppc_use, gfc_arglist_matches_symbol): Use\n+\t in_statement_function.\n+\n 2018-02-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/84074"}, {"sha": "a5f3f4dda16393ddb84064510293c2eb9a8aec04", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=f3883269c3dd4528cb089c640edb35029b1398a0", "patch": "@@ -2835,7 +2835,8 @@ lookup_arg_fuzzy (const char *arg, gfc_formal_arglist *arguments)\n \n static bool\n compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n-\t \t       int ranks_must_agree, int is_elemental, locus *where)\n+\t \t       int ranks_must_agree, int is_elemental,\n+\t\t       bool in_statement_function, locus *where)\n {\n   gfc_actual_arglist **new_arg, *a, *actual;\n   gfc_formal_arglist *f;\n@@ -3204,8 +3205,9 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t}\n \n       /* Check intent = OUT/INOUT for definable actual argument.  */\n-      if ((f->sym->attr.intent == INTENT_OUT\n-\t  || f->sym->attr.intent == INTENT_INOUT))\n+      if (!in_statement_function\n+\t  && (f->sym->attr.intent == INTENT_OUT\n+\t      || f->sym->attr.intent == INTENT_INOUT))\n \t{\n \t  const char* context = (where\n \t\t\t\t ? _(\"actual argument to INTENT = OUT/INOUT\")\n@@ -3310,7 +3312,8 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t       \"at %L\", where);\n \t  return false;\n \t}\n-      if (!f->sym->attr.optional)\n+      if (!f->sym->attr.optional\n+\t  || (in_statement_function && f->sym->attr.optional))\n \t{\n \t  if (where)\n \t    gfc_error (\"Missing actual argument for argument %qs at %L\",\n@@ -3598,6 +3601,7 @@ check_intents (gfc_formal_arglist *f, gfc_actual_arglist *a)\n bool\n gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n {\n+  gfc_actual_arglist *a;\n   gfc_formal_arglist *dummy_args;\n \n   /* Warn about calls with an implicit interface.  Special case\n@@ -3631,8 +3635,6 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \n   if (sym->attr.if_source == IFSRC_UNKNOWN)\n     {\n-      gfc_actual_arglist *a;\n-\n       if (sym->attr.pointer)\n \t{\n \t  gfc_error (\"The pointer object %qs at %L must have an explicit \"\n@@ -3724,9 +3726,12 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \n   dummy_args = gfc_sym_get_dummy_args (sym);\n \n-  if (!compare_actual_formal (ap, dummy_args, 0, sym->attr.elemental, where))\n+  /* For a statement function, check that types and type parameters of actual\n+     arguments and dummy arguments match.  */\n+  if (!compare_actual_formal (ap, dummy_args, 0, sym->attr.elemental,\n+\t\t\t      sym->attr.proc == PROC_ST_FUNCTION, where))\n     return false;\n-\n+ \n   if (!check_intents (dummy_args, *ap))\n     return false;\n \n@@ -3773,7 +3778,7 @@ gfc_ppc_use (gfc_component *comp, gfc_actual_arglist **ap, locus *where)\n     }\n \n   if (!compare_actual_formal (ap, comp->ts.interface->formal, 0,\n-\t\t\t      comp->attr.elemental, where))\n+\t\t\t      comp->attr.elemental, false, where))\n     return;\n \n   check_intents (comp->ts.interface->formal, *ap);\n@@ -3798,7 +3803,7 @@ gfc_arglist_matches_symbol (gfc_actual_arglist** args, gfc_symbol* sym)\n   dummy_args = gfc_sym_get_dummy_args (sym);\n \n   r = !sym->attr.elemental;\n-  if (compare_actual_formal (args, dummy_args, r, !r, NULL))\n+  if (compare_actual_formal (args, dummy_args, r, !r, false, NULL))\n     {\n       check_intents (dummy_args, *args);\n       if (warn_aliasing)"}, {"sha": "9d84fca2d98d8edfada9826203bef6d809f4f60f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3883269c3dd4528cb089c640edb35029b1398a0", "patch": "@@ -1,3 +1,10 @@\n+2018-02-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/54223\n+\tPR fortran/84276\n+\t* gfortran.dg/statement_function_1.f90: New test.\n+\t* gfortran.dg/statement_function_2.f90: New test.\n+\n 2018-02-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/84074"}, {"sha": "f26f25c871295cc08fd7293731a681213a3a7dc8", "filename": "gcc/testsuite/gfortran.dg/statement_function_1.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatement_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatement_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatement_function_1.f90?ref=f3883269c3dd4528cb089c640edb35029b1398a0", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! PR fortran/84276\n+      subroutine stepns(hh, h, s, w)\n+      real, intent(inout) :: h, hh, s\n+      real, intent(out) :: w\n+      real :: qofs\n+      integer i\n+      qofs(s) = s\n+      w = qofs(hh + h)\n+      i = 42\n+      w = qofs(i)       ! { dg-error \"Type mismatch in argument\" }\n+      end subroutine stepns\n+\n+      subroutine step(hh, h, s, w)\n+      real, intent(inout) :: h, hh, s\n+      real, intent(out) :: w\n+      real :: qofs\n+      integer i\n+      qofs(s, i) = i * s\n+      i = 42\n+      w = qofs(hh, i)\n+!\n+! The following line should cause an error, because keywords are not\n+! allowed in a function with an implicit interface.\n+!\n+      w = qofs(i = i, s = hh)\n+      end subroutine step\n+! { dg-prune-output \" Obsolescent feature\" }"}, {"sha": "703ca1716caf87ccf62cfd897ffbadf2e8b00e15", "filename": "gcc/testsuite/gfortran.dg/statement_function_2.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatement_function_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3883269c3dd4528cb089c640edb35029b1398a0/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatement_function_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstatement_function_2.f90?ref=f3883269c3dd4528cb089c640edb35029b1398a0", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! PR fortran/54223\n+subroutine r(d)\n+    implicit none\n+    integer, optional :: d\n+    integer :: h, q\n+    q(d) = d + 1     ! statement function statement\n+    h = q(d)\n+end subroutine r\n+\n+subroutine s(x)\n+    implicit none\n+    integer, optional :: x\n+    integer :: g, z\n+    g(x) = x + 1     ! statement function statement\n+    z = g()          ! { dg-error \"Missing actual argument\" }\n+end subroutine s\n+\n+subroutine t(a)\n+    implicit none\n+    integer :: a\n+    integer :: f, y\n+    f(a) = a + 1     ! statement function statement\n+    y = f()          ! { dg-error \"Missing actual argument\" }\n+end subroutine t\n+! { dg-prune-output \" Obsolescent feature\" }"}]}