{"sha": "6b61bca48f4d07a471176ab1285ae346d8a8dc6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2MWJjYTQ4ZjRkMDdhNDcxMTc2YWIxMjg1YWUzNDZkOGE4ZGM2YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-10-10T17:10:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-10T17:10:47Z"}, "message": "2003-10-10  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/ostream.tcc (operator<<(basic_ostream&, _CharT))\n\tAvoid unnecessarily calling __builtin_alloca and dealing\n\texplicitly with width() smaller than zero.\n\t(operator<<(basic_ostream&, char), operator<<(basic_ostream&,\n\tconst _CharT*), operator<<(basic_ostream<_CharT, _Traits>&,\n\tconst char*), operator<<(basic_ostream<char, _Traits>&,\n\tconst char*), operator<<(basic_ostream, const basic_string&)):\n\tLikewise.\n\nFrom-SVN: r72302", "tree": {"sha": "809614ad8ac2d034a844a7aa54550d9e0f67a2e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/809614ad8ac2d034a844a7aa54550d9e0f67a2e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b61bca48f4d07a471176ab1285ae346d8a8dc6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b61bca48f4d07a471176ab1285ae346d8a8dc6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b61bca48f4d07a471176ab1285ae346d8a8dc6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b61bca48f4d07a471176ab1285ae346d8a8dc6a/comments", "author": null, "committer": null, "parents": [{"sha": "fc45d351334f0e3d8247eda15861d992fa10f7e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc45d351334f0e3d8247eda15861d992fa10f7e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc45d351334f0e3d8247eda15861d992fa10f7e9"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "865d9be2a6f1cbeae2142ced762de869cb3104ac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b61bca48f4d07a471176ab1285ae346d8a8dc6a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b61bca48f4d07a471176ab1285ae346d8a8dc6a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6b61bca48f4d07a471176ab1285ae346d8a8dc6a", "patch": "@@ -1,3 +1,14 @@\n+2003-10-10  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/ostream.tcc (operator<<(basic_ostream&, _CharT))\n+\tAvoid unnecessarily calling __builtin_alloca and dealing\n+\texplicitly with width() smaller than zero.\n+\t(operator<<(basic_ostream&, char), operator<<(basic_ostream&,\n+\tconst _CharT*), operator<<(basic_ostream<_CharT, _Traits>&,\n+\tconst char*), operator<<(basic_ostream<char, _Traits>&,\n+\tconst char*), operator<<(basic_ostream, const basic_string&)):\n+\tLikewise.\n+\n 2003-10-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/linker-map.gnu: Make more *_type_info bits visible."}, {"sha": "fee2f2757dffacc330bafde353e012128fcd2343", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b61bca48f4d07a471176ab1285ae346d8a8dc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b61bca48f4d07a471176ab1285ae346d8a8dc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=6b61bca48f4d07a471176ab1285ae346d8a8dc6a", "patch": "@@ -471,17 +471,18 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      const streamsize __w = __out.width() > 0 ? __out.width() : 0;\n-\t      _CharT* __pads = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * (__w + 1)));\n-\t      __pads[0] = __c;\n+\t      const streamsize __w = __out.width();\n \t      streamsize __len = 1;\n+\t      _CharT* __cs = &__c;\n \t      if (__w > __len)\n \t\t{\n-\t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __pads, \n+\t\t  __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t       * __w));\n+\t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs, \n \t\t\t\t\t\t &__c, __w, __len, false);\n \t\t  __len = __w;\n \t\t}\n-\t      __out._M_write(__pads, __len);\n+\t      __out._M_write(__cs, __len);\n \t      __out.width(0);\n \t    }\n \t  catch(...)\n@@ -507,17 +508,17 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      const streamsize __w = __out.width() > 0 ? __out.width() : 0;\n-\t      char* __pads = static_cast<char*>(__builtin_alloca(__w + 1));\n-\t      __pads[0] = __c;\n+\t      const streamsize __w = __out.width();\n \t      streamsize __len = 1;\n+\t      char* __cs = &__c;\n \t      if (__w > __len)\n \t\t{\n-\t\t  __pad<char, _Traits>::_S_pad(__out, __out.fill(), __pads, \n+\t\t  __cs = static_cast<char*>(__builtin_alloca(__w));\n+\t\t  __pad<char, _Traits>::_S_pad(__out, __out.fill(), __cs, \n \t\t\t\t\t       &__c, __w, __len, false);\n \t\t  __len = __w;\n \t\t}\n-\t      __out._M_write(__pads, __len);\n+\t      __out._M_write(__cs, __len);\n \t      __out.width(0);\n \t    }\n \t  catch(...)\n@@ -542,14 +543,15 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      const streamsize __w = __out.width() > 0 ? __out.width() : 0;\n-\t      _CharT* __pads = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));\n+\t      const streamsize __w = __out.width();\n \t      streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n \t      if (__w > __len)\n \t\t{\n-\t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __pads, \n+\t\t  _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t\t       * __w));\n+\t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs, \n \t\t\t\t\t\t __s, __w, __len, false);\n-\t\t  __s = __pads;\n+\t\t  __s = __cs;\n \t\t  __len = __w;\n \t\t}\n \t      __out._M_write(__s, __len);\n@@ -583,22 +585,23 @@ namespace std\n       if (__cerb && __s)\n \t{\n \t  size_t __clen = __traits_type::length(__s);\n-\t  _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * (__clen + 1)));\n+\t  _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t       * __clen));\n \t  for (size_t  __i = 0; __i < __clen; ++__i)\n \t    __ws[__i] = __out.widen(__s[__i]);\n \t  _CharT* __str = __ws;\n \t  \n \t  try \n \t    {\n+\t      const streamsize __w = __out.width();\n \t      streamsize __len = static_cast<streamsize>(__clen);\n-\t      const streamsize __w = __out.width() > 0 ? __out.width() : 0;\n-\t      _CharT* __pads = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));\n-\t      \n \t      if (__w > __len)\n \t\t{\n-\t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __pads, \n+\t\t  _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t\t       * __w));\n+\t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs, \n \t\t\t\t\t\t __ws, __w, __len, false);\n-\t\t  __str = __pads;\n+\t\t  __str = __cs;\n \t\t  __len = __w;\n \t\t}\n \t      __out._M_write(__str, __len);\n@@ -629,15 +632,14 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      const streamsize __w = __out.width() > 0 ? __out.width() : 0;\n-\t      char* __pads = static_cast<char*>(__builtin_alloca(__w));\n+\t      const streamsize __w = __out.width();\n \t      streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n-\n \t      if (__w > __len)\n \t\t{\n-\t\t  __pad<char, _Traits>::_S_pad(__out, __out.fill(), __pads, \n+\t\t  char* __cs = static_cast<char*>(__builtin_alloca(__w));\n+\t\t  __pad<char, _Traits>::_S_pad(__out, __out.fill(), __cs, \n \t\t\t\t\t\t __s, __w, __len, false);\n-\t\t  __s = __pads;\n+\t\t  __s = __cs;\n \t\t  __len = __w;\n \t\t}\n \t      __out._M_write(__s, __len);\n@@ -667,18 +669,19 @@ namespace std\n       typename __ostream_type::sentry __cerb(__out);\n       if (__cerb)\n \t{\n-\t  const _CharT* __s = __str.data();\n-\t  const streamsize __w = __out.width() > 0 ? __out.width() : 0;\n-\t  _CharT* __pads = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));\n+\t  const streamsize __w = __out.width();\n \t  streamsize __len = static_cast<streamsize>(__str.size());\n+\t  const _CharT* __s = __str.data();\n #ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 25. String operator<< uses width() value wrong\n #endif\n \t  if (__w > __len)\n \t    {\n-\t      __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __pads, __s, \n+\t      _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t\t   * __w));\n+\t      __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs, __s,\n \t\t\t\t\t     __w, __len, false);\n-\t      __s = __pads;\n+\t      __s = __cs;\n \t      __len = __w;\n \t    }\n \t  __out._M_write(__s, __len);"}]}