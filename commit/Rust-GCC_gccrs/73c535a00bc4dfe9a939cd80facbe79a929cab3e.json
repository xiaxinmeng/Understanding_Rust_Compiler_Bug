{"sha": "73c535a00bc4dfe9a939cd80facbe79a929cab3e", "node_id": "C_kwDOANBUbNoAKDczYzUzNWEwMGJjNGRmZTlhOTM5Y2Q4MGZhY2JlNzlhOTI5Y2FiM2U", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-10-09T06:34:38Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-10-12T07:25:08Z"}, "message": "Support reduc_{plus,smax,smin,umax,umin}_scal_v4qi.\n\ngcc/ChangeLog\n\n\tPR target/102483\n\t* config/i386/i386-expand.c (emit_reduc_half): Handle\n\tV4QImode.\n\t* config/i386/mmx.md (reduc_<code>_scal_v4qi): New expander.\n\t(reduc_plus_scal_v4qi): Ditto.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/i386/pr102483.c: New test.\n\t* gcc.target/i386/pr102483-2.c: New test.", "tree": {"sha": "071029587c5f80fe0a96caf365d2d5671708e203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/071029587c5f80fe0a96caf365d2d5671708e203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73c535a00bc4dfe9a939cd80facbe79a929cab3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c535a00bc4dfe9a939cd80facbe79a929cab3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c535a00bc4dfe9a939cd80facbe79a929cab3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c535a00bc4dfe9a939cd80facbe79a929cab3e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d61ce6ab04ee98f1f64b54436bca96054cc62329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d61ce6ab04ee98f1f64b54436bca96054cc62329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d61ce6ab04ee98f1f64b54436bca96054cc62329"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "6e2b7920d2be1f4f7fe8147d22dc9d0c8f0b2a47", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c535a00bc4dfe9a939cd80facbe79a929cab3e/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c535a00bc4dfe9a939cd80facbe79a929cab3e/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=73c535a00bc4dfe9a939cd80facbe79a929cab3e", "patch": "@@ -16054,6 +16054,11 @@ emit_reduc_half (rtx dest, rtx src, int i)\n     case E_V2DFmode:\n       tem = gen_vec_interleave_highv2df (dest, src, src);\n       break;\n+    case E_V4QImode:\n+      d = gen_reg_rtx (V1SImode);\n+      tem = gen_mmx_lshrv1si3 (d, gen_lowpart (V1SImode, src),\n+\t\t\t       GEN_INT (i / 2));\n+      break;\n     case E_V4HImode:\n       d = gen_reg_rtx (V1DImode);\n       tem = gen_mmx_lshrv1di3 (d, gen_lowpart (V1DImode, src),"}, {"sha": "6c5cbcfa52c603c9aebd2afca4b3340a30e918d0", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c535a00bc4dfe9a939cd80facbe79a929cab3e/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c535a00bc4dfe9a939cd80facbe79a929cab3e/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=73c535a00bc4dfe9a939cd80facbe79a929cab3e", "patch": "@@ -3989,6 +3989,18 @@\n   DONE;\n })\n \n+(define_expand \"reduc_<code>_scal_v4qi\"\n+  [(smaxmin:V4QI\n+     (match_operand:QI 0 \"register_operand\")\n+     (match_operand:V4QI 1 \"register_operand\"))]\n+  \"TARGET_SSE4_1\"\n+{\n+  rtx tmp = gen_reg_rtx (V4QImode);\n+  ix86_expand_reduc (gen_<code>v4qi3, tmp, operands[1]);\n+  emit_insn (gen_vec_extractv4qiqi (operands[0], tmp, const0_rtx));\n+  DONE;\n+})\n+\n (define_expand \"reduc_<code>_scal_v4hi\"\n   [(umaxmin:V4HI\n      (match_operand:HI 0 \"register_operand\")\n@@ -4001,6 +4013,39 @@\n   DONE;\n })\n \n+(define_expand \"reduc_<code>_scal_v4qi\"\n+  [(umaxmin:V4QI\n+     (match_operand:QI 0 \"register_operand\")\n+     (match_operand:V4QI 1 \"register_operand\"))]\n+  \"TARGET_SSE4_1\"\n+{\n+  rtx tmp = gen_reg_rtx (V4QImode);\n+  ix86_expand_reduc (gen_<code>v4qi3, tmp, operands[1]);\n+  emit_insn (gen_vec_extractv4qiqi (operands[0], tmp, const0_rtx));\n+  DONE;\n+})\n+\n+(define_expand \"reduc_plus_scal_v4qi\"\n+ [(plus:V4QI\n+    (match_operand:QI 0 \"register_operand\")\n+    (match_operand:V4QI 1 \"register_operand\"))]\n+ \"TARGET_SSE2\"\n+{\n+  rtx op1 = gen_reg_rtx (V16QImode);\n+  emit_insn (gen_vec_setv4si_0 (lowpart_subreg (V4SImode, op1, V16QImode),\n+\t\t\t\tCONST0_RTX (V4SImode),\n+\t\t\t\tlowpart_subreg (SImode,\n+\t\t\t\t\t\toperands[1],\n+\t\t\t\t\t\tV4QImode)));\n+  rtx tmp = gen_reg_rtx (V16QImode);\n+  emit_move_insn (tmp, CONST0_RTX (V16QImode));\n+  rtx tmp2 = gen_reg_rtx (V2DImode);\n+  emit_insn (gen_sse2_psadbw (tmp2, op1, tmp));\n+  tmp2 = gen_lowpart (V16QImode, tmp2);\n+  emit_insn (gen_vec_extractv16qiqi (operands[0], tmp2, const0_rtx));\n+  DONE;\n+})\n+\n (define_expand \"usadv8qi\"\n   [(match_operand:V2SI 0 \"register_operand\")\n    (match_operand:V8QI 1 \"register_operand\")"}, {"sha": "d477c53db0837a7c696a880af4704798e6d46b1a", "filename": "gcc/testsuite/gcc.target/i386/pr102483-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c535a00bc4dfe9a939cd80facbe79a929cab3e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102483-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c535a00bc4dfe9a939cd80facbe79a929cab3e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102483-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102483-2.c?ref=73c535a00bc4dfe9a939cd80facbe79a929cab3e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include \"pr102483.c\"\n+\n+static void\n+sse4_1_test ()\n+{\n+  char p[4] = { -103, 23, 41, -56 };\n+  unsigned char up[4] = { 100, 30, 255, 9 };\n+\n+  char res = reduce_add (p);\n+  if (res != -95)\n+    abort ();\n+  if (reduce_smin (p) != -103)\n+    abort ();\n+  if (reduce_smax (p) != 41)\n+    abort ();\n+  if (reduce_umin (up) != 9)\n+    abort ();\n+  if (reduce_umax (up) != 255)\n+    abort();\n+}"}, {"sha": "681b57598ef291119932786fa4152201abd5f428", "filename": "gcc/testsuite/gcc.target/i386/pr102483.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c535a00bc4dfe9a939cd80facbe79a929cab3e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102483.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c535a00bc4dfe9a939cd80facbe79a929cab3e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102483.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102483.c?ref=73c535a00bc4dfe9a939cd80facbe79a929cab3e", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1 -ftree-vectorize -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"\\.REDUC_MIN\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\.REDUC_MAX\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\.REDUC_PLUS\" 1 \"optimized\" } } */\n+\n+char\n+__attribute__((noipa, optimize(\"Ofast\"),target(\"sse4.1\")))\n+reduce_add (char* p)\n+{\n+  char sum = 0;\n+  for (int i = 0; i != 4; i++)\n+    sum += p[i];\n+  return sum;\n+}\n+\n+#define MAX(a, b) ((a) > (b) ? (a) : (b))\n+#define MIN(a, b) ((a) > (b) ? (b) : (a))\n+\n+unsigned char\n+__attribute__((noipa, optimize(\"Ofast\"),target(\"sse4.1\")))\n+reduce_umax (unsigned char* p)\n+{\n+  unsigned char sum = p[0];\n+  for (int i = 0; i != 4; i++)\n+    sum = MAX(sum, p[i]);\n+  return sum;\n+}\n+\n+unsigned char\n+__attribute__((noipa, optimize(\"Ofast\"),target(\"sse4.1\")))\n+reduce_umin (unsigned char* p)\n+{\n+  unsigned char sum = p[0];\n+  for (int i = 0; i != 4; i++)\n+    sum = MIN(sum, p[i]);\n+  return sum;\n+}\n+\n+char\n+__attribute__((noipa, optimize(\"Ofast\"),target(\"sse4.1\")))\n+reduce_smax (char* p)\n+{\n+  char sum = p[0];\n+  for (int i = 0; i != 4; i++)\n+    sum = MAX(sum, p[i]);\n+  return sum;\n+}\n+\n+char\n+__attribute__((noipa, optimize(\"Ofast\"),target(\"sse4.1\")))\n+reduce_smin (char* p)\n+{\n+  char sum = p[0];\n+  for (int i = 0; i != 4; i++)\n+    sum = MIN(sum, p[i]);\n+  return sum;\n+}"}]}