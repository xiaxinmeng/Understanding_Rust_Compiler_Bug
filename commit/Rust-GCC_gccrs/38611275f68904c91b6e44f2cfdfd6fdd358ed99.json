{"sha": "38611275f68904c91b6e44f2cfdfd6fdd358ed99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2MTEyNzVmNjg5MDRjOTFiNmU0NGYyY2ZkZmQ2ZmRkMzU4ZWQ5OQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-12-16T21:03:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-12-16T21:03:50Z"}, "message": "trans.h (gfc_build_indirect_ref): Remove declaration.\n\n2005-12-16  Richard Guenther  <rguenther@suse.de>\n\n\t* trans.h (gfc_build_indirect_ref): Remove declaration.\n\t* trans.c (gfc_build_indirect_ref): Remove.\n\t* trans-array.c (gfc_trans_array_ctor_element): Use\n\tbuild_fold_indirect_ref instead of gfc_build_indirect_ref.\n\t(gfc_trans_array_constructor_value): Likewise.\n\t(gfc_conv_array_index_offset): Likewise.\n\t(gfc_conv_scalarized_array_ref): Likewise.\n\t(gfc_conv_array_ref): Likewise.\n\t(gfc_trans_dummy_array_bias): Likewise.\n\t(gfc_conv_expr_descriptor): Likewise.\n\t(gfc_conv_array_parameter): Likewise.\n\t* trans-decl.c (gfc_finish_cray_pointee): Likewise.\n\t(gfc_get_symbol_decl): Likewise.\n\t* trans-expr.c (gfc_conv_substring): Likewise.\n\t(gfc_conv_component_ref): Likewise.\n\t(gfc_conv_variable): Likewise.\n\t(gfc_add_interface_mapping): Likewise.\n\t(gfc_conv_function_call): Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_ichar): Likewise.\n\t(gfc_conv_intrinsic_transfer): Likewise.\n\t* trans-io.c (nml_get_addr_expr): Likewise.\n\t(transfer_namelist_element): Likewise.\n\t(transfer_expr): Likewise.\n\t* trans-stmt.c (gfc_trans_nested_forall_loop): Likewise.\n\t(allocate_temp_for_forall_nest_1): Likewise.\n\t(gfc_trans_forall_1): Likewise.\n\nFrom-SVN: r108678", "tree": {"sha": "ea84006c094f88ea06e93849946999daf67890c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea84006c094f88ea06e93849946999daf67890c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38611275f68904c91b6e44f2cfdfd6fdd358ed99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38611275f68904c91b6e44f2cfdfd6fdd358ed99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38611275f68904c91b6e44f2cfdfd6fdd358ed99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38611275f68904c91b6e44f2cfdfd6fdd358ed99/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06b1145579432ef77e572b9538b68971146f0468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b1145579432ef77e572b9538b68971146f0468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b1145579432ef77e572b9538b68971146f0468"}], "stats": {"total": 118, "additions": 64, "deletions": 54}, "files": [{"sha": "298b67260f1f96660083d33ea12ba1209786169e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=38611275f68904c91b6e44f2cfdfd6fdd358ed99", "patch": "@@ -1,3 +1,32 @@\n+2005-12-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans.h (gfc_build_indirect_ref): Remove declaration.\n+\t* trans.c (gfc_build_indirect_ref): Remove.\n+\t* trans-array.c (gfc_trans_array_ctor_element): Use\n+\tbuild_fold_indirect_ref instead of gfc_build_indirect_ref.\n+\t(gfc_trans_array_constructor_value): Likewise.\n+\t(gfc_conv_array_index_offset): Likewise.\n+\t(gfc_conv_scalarized_array_ref): Likewise.\n+\t(gfc_conv_array_ref): Likewise.\n+\t(gfc_trans_dummy_array_bias): Likewise.\n+\t(gfc_conv_expr_descriptor): Likewise.\n+\t(gfc_conv_array_parameter): Likewise.\n+\t* trans-decl.c (gfc_finish_cray_pointee): Likewise.\n+\t(gfc_get_symbol_decl): Likewise.\n+\t* trans-expr.c (gfc_conv_substring): Likewise.\n+\t(gfc_conv_component_ref): Likewise.\n+\t(gfc_conv_variable): Likewise.\n+\t(gfc_add_interface_mapping): Likewise.\n+\t(gfc_conv_function_call): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_ichar): Likewise.\n+\t(gfc_conv_intrinsic_transfer): Likewise.\n+\t* trans-io.c (nml_get_addr_expr): Likewise.\n+\t(transfer_namelist_element): Likewise.\n+\t(transfer_expr): Likewise.\n+\t* trans-stmt.c (gfc_trans_nested_forall_loop): Likewise.\n+\t(allocate_temp_for_forall_nest_1): Likewise.\n+\t(gfc_trans_forall_1): Likewise.\n+\n 2005-12-16  Richard Guenther  <rguenther@suse.de>\n \n \t* trans-array.c (gfc_conv_descriptor_data_addr): Use"}, {"sha": "2ecbc502d523e2e75798254856312e3d1a2fbdef", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=38611275f68904c91b6e44f2cfdfd6fdd358ed99", "patch": "@@ -932,7 +932,7 @@ gfc_trans_array_ctor_element (stmtblock_t * pblock, tree desc,\n   gfc_conv_expr (se, expr);\n \n   /* Store the value.  */\n-  tmp = gfc_build_indirect_ref (gfc_conv_descriptor_data_get (desc));\n+  tmp = build_fold_indirect_ref (gfc_conv_descriptor_data_get (desc));\n   tmp = gfc_build_array_ref (tmp, offset);\n   if (expr->ts.type == BT_CHARACTER)\n     {\n@@ -1157,7 +1157,7 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \n \t      /* Use BUILTIN_MEMCPY to assign the values.  */\n \t      tmp = gfc_conv_descriptor_data_get (desc);\n-\t      tmp = gfc_build_indirect_ref (tmp);\n+\t      tmp = build_fold_indirect_ref (tmp);\n \t      tmp = gfc_build_array_ref (tmp, *poffset);\n \t      tmp = build_fold_addr_expr (tmp);\n \t      init = build_fold_addr_expr (init);\n@@ -1827,7 +1827,7 @@ gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n \t\t\t       index, gfc_conv_array_stride (desc, 0));\n \n \t  /* Read the vector to get an index into info->descriptor.  */\n-\t  data = gfc_build_indirect_ref (gfc_conv_array_data (desc));\n+\t  data = build_fold_indirect_ref (gfc_conv_array_data (desc));\n \t  index = gfc_build_array_ref (data, index);\n \t  index = gfc_evaluate_now (index, &se->pre);\n \n@@ -1891,7 +1891,7 @@ gfc_conv_scalarized_array_ref (gfc_se * se, gfc_array_ref * ar)\n      dimensions.  */\n   index = fold_build2 (PLUS_EXPR, gfc_array_index_type, index, info->offset);\n \n-  tmp = gfc_build_indirect_ref (info->data);\n+  tmp = build_fold_indirect_ref (info->data);\n   se->expr = gfc_build_array_ref (tmp, index);\n }\n \n@@ -1980,7 +1980,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar)\n       \n   /* Access the calculated element.  */\n   tmp = gfc_conv_array_data (se->expr);\n-  tmp = gfc_build_indirect_ref (tmp);\n+  tmp = build_fold_indirect_ref (tmp);\n   se->expr = gfc_build_array_ref (tmp, index);\n }\n \n@@ -3482,7 +3482,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n   type = TREE_TYPE (tmpdesc);\n   gcc_assert (GFC_ARRAY_TYPE_P (type));\n   dumdesc = GFC_DECL_SAVED_DESCRIPTOR (tmpdesc);\n-  dumdesc = gfc_build_indirect_ref (dumdesc);\n+  dumdesc = build_fold_indirect_ref (dumdesc);\n   gfc_start_block (&block);\n \n   if (sym->ts.type == BT_CHARACTER\n@@ -3707,7 +3707,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n       stmt = gfc_finish_block (&cleanup);\n \t\n       /* Only do the cleanup if the array was repacked.  */\n-      tmp = gfc_build_indirect_ref (dumdesc);\n+      tmp = build_fold_indirect_ref (dumdesc);\n       tmp = gfc_conv_descriptor_data_get (tmp);\n       tmp = build2 (NE_EXPR, boolean_type_node, tmp, tmpdesc);\n       stmt = build3_v (COND_EXPR, tmp, stmt, build_empty_stmt ());\n@@ -3961,7 +3961,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       if (expr->ts.type == BT_CHARACTER)\n \t{\n \t  gfc_conv_expr (&rse, expr);\n-\t  rse.expr = gfc_build_indirect_ref (rse.expr);\n+\t  rse.expr = build_fold_indirect_ref (rse.expr);\n \t}\n       else\n         gfc_conv_expr_val (&rse, expr);\n@@ -4119,7 +4119,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \n       /* Point the data pointer at the first element in the section.  */\n       tmp = gfc_conv_array_data (desc);\n-      tmp = gfc_build_indirect_ref (tmp);\n+      tmp = build_fold_indirect_ref (tmp);\n       tmp = gfc_build_array_ref (tmp, offset);\n       offset = gfc_build_addr_expr (gfc_array_dataptr_type (desc), tmp);\n       gfc_conv_descriptor_data_set (&loop.pre, parm, offset);\n@@ -4228,7 +4228,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n       gfc_init_block (&block);\n       /* Only if it was repacked.  This code needs to be executed before the\n          loop cleanup code.  */\n-      tmp = gfc_build_indirect_ref (desc);\n+      tmp = build_fold_indirect_ref (desc);\n       tmp = gfc_conv_array_data (tmp);\n       tmp = build2 (NE_EXPR, boolean_type_node, ptr, tmp);\n       tmp = build3_v (COND_EXPR, tmp, stmt, build_empty_stmt ());"}, {"sha": "53d9225dc2518ce98d37fc4b7582d250183dc8ad", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=38611275f68904c91b6e44f2cfdfd6fdd358ed99", "patch": "@@ -368,7 +368,7 @@ gfc_finish_cray_pointee (tree decl, gfc_symbol *sym)\n \n   /* Parameters need to be dereferenced.  */\n   if (sym->cp_pointer->attr.dummy) \n-    ptr_decl = gfc_build_indirect_ref (ptr_decl);\n+    ptr_decl = build_fold_indirect_ref (ptr_decl);\n \n   /* Check to see if we're dealing with a variable-sized array.  */\n   if (sym->attr.dimension\n@@ -382,7 +382,7 @@ gfc_finish_cray_pointee (tree decl, gfc_symbol *sym)\n     {\n       ptr_decl = convert (build_pointer_type (TREE_TYPE (decl)),\n \t\t\t  ptr_decl);\n-      value = gfc_build_indirect_ref (ptr_decl);\n+      value = build_fold_indirect_ref (ptr_decl);\n     }\n \n   SET_DECL_VALUE_EXPR (decl, value);\n@@ -856,7 +856,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t  if (sym->attr.pointer && sym->attr.dummy\n \t\t&& sym->attr.dimension)\n \t    {\n-\t      tmp = gfc_build_indirect_ref (sym->backend_decl);\n+\t      tmp = build_fold_indirect_ref (sym->backend_decl);\n \t      etype = gfc_get_element_type (TREE_TYPE (tmp));\n \t      if (TYPE_SIZE_UNIT (etype) == NULL_TREE)\n \t\t{"}, {"sha": "bbda8941b78c432e06ae6fa6f3f9f48bd317b981", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=38611275f68904c91b6e44f2cfdfd6fdd358ed99", "patch": "@@ -232,7 +232,7 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind)\n       if (TYPE_STRING_FLAG (TREE_TYPE (se->expr)))\n \ttmp = se->expr;\n       else\n-\ttmp = gfc_build_indirect_ref (se->expr);\n+\ttmp = build_fold_indirect_ref (se->expr);\n       tmp = gfc_build_array_ref (tmp, start.expr);\n       se->expr = gfc_build_addr_expr (type, tmp);\n     }\n@@ -284,7 +284,7 @@ gfc_conv_component_ref (gfc_se * se, gfc_ref * ref)\n     }\n \n   if (c->pointer && c->dimension == 0 && c->ts.type != BT_CHARACTER)\n-    se->expr = gfc_build_indirect_ref (se->expr);\n+    se->expr = build_fold_indirect_ref (se->expr);\n }\n \n \n@@ -372,19 +372,19 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n \t      && (sym->attr.dummy\n \t\t  || sym->attr.function\n \t\t  || sym->attr.result))\n-\t    se->expr = gfc_build_indirect_ref (se->expr);\n+\t    se->expr = build_fold_indirect_ref (se->expr);\n \t}\n       else\n \t{\n           /* Dereference non-character scalar dummy arguments.  */\n \t  if (sym->attr.dummy && !sym->attr.dimension)\n-\t    se->expr = gfc_build_indirect_ref (se->expr);\n+\t    se->expr = build_fold_indirect_ref (se->expr);\n \n           /* Dereference scalar hidden result.  */\n \t  if (gfc_option.flag_f2c && sym->ts.type == BT_COMPLEX\n \t      && (sym->attr.function || sym->attr.result)\n \t      && !sym->attr.dimension && !sym->attr.pointer)\n-\t    se->expr = gfc_build_indirect_ref (se->expr);\n+\t    se->expr = build_fold_indirect_ref (se->expr);\n \n           /* Dereference non-character pointer variables. \n \t     These must be dummies, results, or scalars.  */\n@@ -393,7 +393,7 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n \t\t  || sym->attr.function\n \t\t  || sym->attr.result\n \t\t  || !sym->attr.dimension))\n-\t    se->expr = gfc_build_indirect_ref (se->expr);\n+\t    se->expr = build_fold_indirect_ref (se->expr);\n \t}\n \n       ref = expr->ref;\n@@ -1291,20 +1291,20 @@ gfc_add_interface_mapping (gfc_interface_mapping * mapping,\n \n       value = fold_convert (tmp, se->expr);\n       if (sym->attr.pointer)\n-\tvalue = gfc_build_indirect_ref (value);\n+\tvalue = build_fold_indirect_ref (value);\n     }\n \n   /* If the argument is a scalar or a pointer to an array, dereference it.  */\n   else if (!sym->attr.dimension || sym->attr.pointer)\n-    value = gfc_build_indirect_ref (se->expr);\n+    value = build_fold_indirect_ref (se->expr);\n \n   /* If the argument is an array descriptor, use it to determine\n      information about the actual argument's shape.  */\n   else if (POINTER_TYPE_P (TREE_TYPE (se->expr))\n \t   && GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (TREE_TYPE (se->expr))))\n     {\n       /* Get the actual argument's descriptor.  */\n-      desc = gfc_build_indirect_ref (se->expr);\n+      desc = build_fold_indirect_ref (se->expr);\n \n       /* Create the replacement variable.  */\n       tmp = gfc_conv_descriptor_data_get (desc);\n@@ -1748,7 +1748,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n         x = f()\n      where f is pointer valued, we have to dereference the result.  */\n   if (!se->want_pointer && !byref && sym->attr.pointer)\n-    se->expr = gfc_build_indirect_ref (se->expr);\n+    se->expr = build_fold_indirect_ref (se->expr);\n \n   /* f2c calling conventions require a scalar default real function to\n      return a double precision result.  Convert this back to default\n@@ -1793,7 +1793,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t    {\n \t      /* Dereference for character pointer results.  */\n \t      if (sym->attr.pointer || sym->attr.allocatable)\n-\t\tse->expr = gfc_build_indirect_ref (var);\n+\t\tse->expr = build_fold_indirect_ref (var);\n \t      else\n \t        se->expr = var;\n \n@@ -1802,7 +1802,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t  else\n \t    {\n \t      gcc_assert (sym->ts.type == BT_COMPLEX && gfc_option.flag_f2c);\n-\t      se->expr = gfc_build_indirect_ref (var);\n+\t      se->expr = build_fold_indirect_ref (var);\n \t    }\n \t}\n     }"}, {"sha": "9be6448f32dc5ae237489feb50054ce449088668", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=38611275f68904c91b6e44f2cfdfd6fdd358ed99", "patch": "@@ -2177,7 +2177,7 @@ gfc_conv_intrinsic_ichar (gfc_se * se, gfc_expr * expr)\n   arg = build1 (NOP_EXPR, pchar_type_node, arg);\n   type = gfc_typenode_for_spec (&expr->ts);\n \n-  se->expr = gfc_build_indirect_ref (arg);\n+  se->expr = build_fold_indirect_ref (arg);\n   se->expr = convert (type, se->expr);\n }\n \n@@ -2341,7 +2341,7 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n     }\n   else\n     {\n-      se->expr = gfc_build_indirect_ref (ptr);\n+      se->expr = build_fold_indirect_ref (ptr);\n     }\n }\n "}, {"sha": "82aa5bad9f0a476c93b1de5b2c47caeb58670bbc", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=38611275f68904c91b6e44f2cfdfd6fdd358ed99", "patch": "@@ -1164,7 +1164,7 @@ nml_get_addr_expr (gfc_symbol * sym, gfc_component * c,\n \n   dummy_arg_flagged = POINTER_TYPE_P (TREE_TYPE(tmp));\n \n-  itmp = (dummy_arg_flagged) ? gfc_build_indirect_ref (tmp) : tmp;\n+  itmp = (dummy_arg_flagged) ? build_fold_indirect_ref (tmp) : tmp;\n \n   /* If an array, set flag and use indirect ref. if built.  */\n \n@@ -1196,7 +1196,7 @@ nml_get_addr_expr (gfc_symbol * sym, gfc_component * c,\n   /* If scalar dummy, resolve indirect reference now.  */\n \n   if (dummy_arg_flagged && !array_flagged)\n-    tmp = gfc_build_indirect_ref (tmp);\n+    tmp = build_fold_indirect_ref (tmp);\n \n   gcc_assert (tmp && POINTER_TYPE_P (TREE_TYPE (tmp)));\n \n@@ -1322,7 +1322,7 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n \n       /* Provide the RECORD_TYPE to build component references.  */\n \n-      tree expr = gfc_build_indirect_ref (addr_expr);\n+      tree expr = build_fold_indirect_ref (addr_expr);\n \n       for (cmp = ts->derived->components; cmp; cmp = cmp->next)\n \t{\n@@ -1692,7 +1692,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n \targ2 = se->string_length;\n       else\n \t{\n-\t  tmp = gfc_build_indirect_ref (addr_expr);\n+\t  tmp = build_fold_indirect_ref (addr_expr);\n \t  gcc_assert (TREE_CODE (TREE_TYPE (tmp)) == ARRAY_TYPE);\n \t  arg2 = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (tmp)));\n \t}\n@@ -1702,7 +1702,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n     case BT_DERIVED:\n       /* Recurse into the elements of the derived type.  */\n       expr = gfc_evaluate_now (addr_expr, &se->pre);\n-      expr = gfc_build_indirect_ref (expr);\n+      expr = build_fold_indirect_ref (expr);\n \n       for (c = ts->derived->components; c; c = c->next)\n \t{"}, {"sha": "1fea1dc8f7b4a151e9613766a878c126f79d138a", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=38611275f68904c91b6e44f2cfdfd6fdd358ed99", "patch": "@@ -1471,7 +1471,7 @@ gfc_trans_nested_forall_loop (forall_info * nested_forall_info, tree body,\n                 {\n                   /* If a mask was specified make the assignment conditional.  */\n                   if (pmask)\n-\t\t    tmp = gfc_build_indirect_ref (mask);\n+\t\t    tmp = build_fold_indirect_ref (mask);\n                   else\n                     tmp = mask;\n                   tmp = gfc_build_array_ref (tmp, maskindex);\n@@ -1890,7 +1890,7 @@ allocate_temp_for_forall_nest_1 (tree type, tree size, stmtblock_t * block,\n   temp1 = gfc_do_allocate (bytesize, size, ptemp1, block, type);\n \n   if (*ptemp1)\n-    tmp = gfc_build_indirect_ref (temp1);\n+    tmp = build_fold_indirect_ref (temp1);\n   else\n     tmp = temp1;\n \n@@ -2404,7 +2404,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n       se.expr = convert (smallest_boolean_type_node, se.expr);\n \n       if (pmask)\n-\ttmp = gfc_build_indirect_ref (mask);\n+\ttmp = build_fold_indirect_ref (mask);\n       else\n \ttmp = mask;\n       tmp = gfc_build_array_ref (tmp, maskindex);"}, {"sha": "50a78fca305b4e139fb497c62ff537218baf97be", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=38611275f68904c91b6e44f2cfdfd6fdd358ed99", "patch": "@@ -282,22 +282,6 @@ gfc_build_addr_expr (tree type, tree t)\n }\n \n \n-/* Build an INDIRECT_REF with its natural type.  */\n-\n-tree\n-gfc_build_indirect_ref (tree t)\n-{\n-  tree type = TREE_TYPE (t);\n-  gcc_assert (POINTER_TYPE_P (type));\n-  type = TREE_TYPE (type);\n-\n-  if (TREE_CODE (t) == ADDR_EXPR)\n-    return TREE_OPERAND (t, 0);\n-  else\n-    return build1 (INDIRECT_REF, type, t);\n-}\n-\n-\n /* Build an ARRAY_REF with its natural type.  */\n \n tree"}, {"sha": "9f789ae33c534b635bae1f272e733460b3a76b22", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38611275f68904c91b6e44f2cfdfd6fdd358ed99/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=38611275f68904c91b6e44f2cfdfd6fdd358ed99", "patch": "@@ -351,9 +351,6 @@ tree gfc_build_function_call (tree, tree);\n /* Build an ADDR_EXPR.  */\n tree gfc_build_addr_expr (tree, tree);\n \n-/* Build an INDIRECT_REF.  */\n-tree gfc_build_indirect_ref (tree);\n-\n /* Build an ARRAY_REF.  */\n tree gfc_build_array_ref (tree, tree);\n "}]}