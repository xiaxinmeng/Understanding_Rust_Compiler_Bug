{"sha": "1686923c4b739d4f9a5162230bb14611ca501ede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY4NjkyM2M0YjczOWQ0ZjlhNTE2MjIzMGJiMTQ2MTFjYTUwMWVkZQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2016-09-13T21:25:04Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-09-13T21:25:04Z"}, "message": "re PR rtl-optimization/77289 (ICE in extract_constrain_insn, at recog.c:2212 on powerpc64)\n\n2016-09-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR rtl-optimization/77289\n        * lra-constraints.c (get_final_hard_regno): Removed.\n        (get_hard_regno): Add new parameter final_p.\n        (get_reg_class): Directly call lra_get_elimination_hard_regno.\n        (operands_match_p): Adjust call to get_hard_regno.\n        (uses_hard_regs_p): Likewise.\n        (process_alt_operands): Likewise.\n\nFrom-SVN: r240124", "tree": {"sha": "359b810b17e97ce8a4b36f6ca0272733dc437377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/359b810b17e97ce8a4b36f6ca0272733dc437377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1686923c4b739d4f9a5162230bb14611ca501ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1686923c4b739d4f9a5162230bb14611ca501ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1686923c4b739d4f9a5162230bb14611ca501ede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1686923c4b739d4f9a5162230bb14611ca501ede/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a713b234edc3b9e76c9abc593a5872415d7d225a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a713b234edc3b9e76c9abc593a5872415d7d225a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a713b234edc3b9e76c9abc593a5872415d7d225a"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "97ceeb55897472de51c047c5dcf5841a6b889504", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1686923c4b739d4f9a5162230bb14611ca501ede/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1686923c4b739d4f9a5162230bb14611ca501ede/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1686923c4b739d4f9a5162230bb14611ca501ede", "patch": "@@ -1,3 +1,13 @@\n+2016-09-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR rtl-optimization/77289\n+\t* lra-constraints.c (get_final_hard_regno): Removed.\n+\t(get_hard_regno): Add new parameter final_p.\n+\t(get_reg_class): Directly call lra_get_elimination_hard_regno.\n+\t(operands_match_p): Adjust call to get_hard_regno.\n+\t(uses_hard_regs_p): Likewise.\n+\t(process_alt_operands): Likewise.\n+\n 2016-09-13  Joe Seymour  <joe.s@somniumtech.com>\n \n \tPR target/70713"}, {"sha": "bf5b521f51cd444e6e24064706aac59951db5312", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1686923c4b739d4f9a5162230bb14611ca501ede/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1686923c4b739d4f9a5162230bb14611ca501ede/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=1686923c4b739d4f9a5162230bb14611ca501ede", "patch": "@@ -182,27 +182,15 @@ get_try_hard_regno (int regno)\n   return ira_class_hard_regs[rclass][0];\n }\n \n-/* Return the final hard regno which will be after elimination.\n-   We do this because the final hard regno could have a different class.  */\n-static int\n-get_final_hard_regno (int regno)\n-{\n-  if (! HARD_REGISTER_NUM_P (regno))\n-    regno = lra_get_regno_hard_regno (regno);\n-  if (regno < 0)\n-    return regno;\n-  return lra_get_elimination_hard_regno (regno);\n-}\n-\n /* Return the hard regno of X after removing its subreg.  If X is not\n    a register or a subreg of a register, return -1.  If X is a pseudo,\n-   use its assignment.  We do not process register eliminiations while\n-   matching constraints.  See PR77289.  */\n+   use its assignment.  If FINAL_P return the final hard regno which will\n+   be after elimination.  */\n static int\n-get_hard_regno (rtx x)\n+get_hard_regno (rtx x, bool final_p)\n {\n   rtx reg;\n-  int offset, hard_regno;\n+  int hard_regno;\n \n   reg = x;\n   if (SUBREG_P (x))\n@@ -213,11 +201,12 @@ get_hard_regno (rtx x)\n     hard_regno = lra_get_regno_hard_regno (hard_regno);\n   if (hard_regno < 0)\n     return -1;\n-  offset = 0;\n+  if (final_p)\n+    hard_regno = lra_get_elimination_hard_regno (hard_regno);\n   if (SUBREG_P (x))\n-    offset += subreg_regno_offset (hard_regno, GET_MODE (reg),\n-\t\t\t\t   SUBREG_BYTE (x),  GET_MODE (x));\n-  return hard_regno + offset;\n+    hard_regno += subreg_regno_offset (hard_regno, GET_MODE (reg),\n+\t\t\t\t       SUBREG_BYTE (x),  GET_MODE (x));\n+  return hard_regno;\n }\n \n /* If REGNO is a hard register or has been allocated a hard register,\n@@ -229,11 +218,11 @@ get_reg_class (int regno)\n {\n   int hard_regno;\n \n-  if ((hard_regno = regno) >= FIRST_PSEUDO_REGISTER)\n+  if (! HARD_REGISTER_NUM_P (hard_regno = regno))\n     hard_regno = lra_get_regno_hard_regno (regno);\n   if (hard_regno >= 0)\n     {\n-      hard_regno = get_final_hard_regno (hard_regno);\n+      hard_regno = lra_get_elimination_hard_regno (hard_regno);\n       return REGNO_REG_CLASS (hard_regno);\n     }\n   if (regno >= new_regno_start)\n@@ -694,7 +683,7 @@ operands_match_p (rtx x, rtx y, int y_hard_regno)\n     {\n       int j;\n \n-      i = get_hard_regno (x);\n+      i = get_hard_regno (x, false);\n       if (i < 0)\n \tgoto slow;\n \n@@ -1713,7 +1702,7 @@ uses_hard_regs_p (rtx x, HARD_REG_SET set)\n \n   if (REG_P (x))\n     {\n-      x_hard_regno = get_final_hard_regno (REGNO (x));\n+      x_hard_regno = get_hard_regno (x, true);\n       return (x_hard_regno >= 0\n \t      && overlaps_hard_reg_set_p (set, mode, x_hard_regno));\n     }\n@@ -1840,7 +1829,7 @@ process_alt_operands (int only_alternative)\n \n       op = no_subreg_reg_operand[nop] = *curr_id->operand_loc[nop];\n       /* The real hard regno of the operand after the allocation.  */\n-      hard_regno[nop] = get_hard_regno (op);\n+      hard_regno[nop] = get_hard_regno (op, true);\n \n       operand_reg[nop] = reg = op;\n       biggest_mode[nop] = GET_MODE (op);\n@@ -2001,7 +1990,7 @@ process_alt_operands (int only_alternative)\n \t\t    lra_assert (nop > m);\n \n \t\t    this_alternative_matches = m;\n-\t\t    m_hregno = get_hard_regno (*curr_id->operand_loc[m]);\n+\t\t    m_hregno = get_hard_regno (*curr_id->operand_loc[m], false);\n \t\t    /* We are supposed to match a previous operand.\n \t\t       If we do, we win if that one did.  If we do\n \t\t       not, count both of the operands as losers."}]}