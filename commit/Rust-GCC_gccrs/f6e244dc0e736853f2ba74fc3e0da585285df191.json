{"sha": "f6e244dc0e736853f2ba74fc3e0da585285df191", "node_id": "C_kwDOANBUbNoAKGY2ZTI0NGRjMGU3MzY4NTNmMmJhNzRmYzNlMGRhNTg1Mjg1ZGYxOTE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-19T17:01:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-19T17:01:25Z"}, "message": "Merge #1134\n\n1134: Fix ICE during HIR lowering of ExprWithBlock MatchExpr r=philberty a=philberty\n\nWhen we are lowering blocks using the visitor pattern we must use the\r\nBaseClass of ExprWithBlock to abstract away the notion that this expr\r\nhas a block such that we can handle cases like a block expr vs expressions\r\nwith a block. This makes the usage of hir lowering of match expressions to\r\nbe recursive, if we had more fine grained visitors in the AST we could fix\r\nthese types of problems with compile time enforced interfaces.\r\n\r\nFixes #858\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "5ab0a7755139bf957cd6398a4c76716185442b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ab0a7755139bf957cd6398a4c76716185442b80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6e244dc0e736853f2ba74fc3e0da585285df191", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXurlCRBK7hj4Ov3rIwAAJMAIAIbN/Z8b2lqOYzKVMvm/yxFt\neCTgekH4fw10nofpOaWi3vuwabEW3uKXDNk9G4zz7mnSR25wXjJLfCHaeGnKhsRY\n5ChQB+eDJbVMJ4vveLDPpDi3eYHa+pqM8Y7n0vRxHJwGGKozxiPTqBVobd0cXjtY\n8V/fxLx5j+hyR15FqeDBbGVoaA5uT6PfTzHvaxldAdxKHEoHzMY2Yajh4Th12JGH\nPFO0zypnfi79MeInznXB7EYsrC+dYwiqhte4wra6RnPftsSdNvq2R256N1z8hww+\nj4qE3d/nixsoKu6K3czGMXazH5RIF6UoF+eZIWgkWrifdBDfrnOui+881e7Quw0=\n=M/m5\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ab0a7755139bf957cd6398a4c76716185442b80\nparent 4152743451a73591fa60bc52f0b28447ef4a8878\nparent 5528001eca60bb115e6afc94105ecc7b3820eb52\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650387685 +0000\ncommitter GitHub <noreply@github.com> 1650387685 +0000\n\nMerge #1134\n\n1134: Fix ICE during HIR lowering of ExprWithBlock MatchExpr r=philberty a=philberty\n\nWhen we are lowering blocks using the visitor pattern we must use the\r\nBaseClass of ExprWithBlock to abstract away the notion that this expr\r\nhas a block such that we can handle cases like a block expr vs expressions\r\nwith a block. This makes the usage of hir lowering of match expressions to\r\nbe recursive, if we had more fine grained visitors in the AST we could fix\r\nthese types of problems with compile time enforced interfaces.\r\n\r\nFixes #858\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e244dc0e736853f2ba74fc3e0da585285df191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e244dc0e736853f2ba74fc3e0da585285df191", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e244dc0e736853f2ba74fc3e0da585285df191/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4152743451a73591fa60bc52f0b28447ef4a8878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4152743451a73591fa60bc52f0b28447ef4a8878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4152743451a73591fa60bc52f0b28447ef4a8878"}, {"sha": "5528001eca60bb115e6afc94105ecc7b3820eb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5528001eca60bb115e6afc94105ecc7b3820eb52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5528001eca60bb115e6afc94105ecc7b3820eb52"}], "stats": {"total": 132, "additions": 86, "deletions": 46}, "files": [{"sha": "512f4709c6dab2adc39699b1f44b760881805d4e", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e244dc0e736853f2ba74fc3e0da585285df191/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e244dc0e736853f2ba74fc3e0da585285df191/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=f6e244dc0e736853f2ba74fc3e0da585285df191", "patch": "@@ -191,6 +191,8 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n \n   void visit (AST::WhileLoopExpr &expr) override;\n \n+  void visit (AST::MatchExpr &expr) override;\n+\n private:\n   ASTLoweringExprWithBlock ()\n     : ASTLoweringBase (), translated (nullptr), terminated (false)"}, {"sha": "022002e18e204174bcf1cbe5cce30ba325a7005e", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e244dc0e736853f2ba74fc3e0da585285df191/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e244dc0e736853f2ba74fc3e0da585285df191/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=f6e244dc0e736853f2ba74fc3e0da585285df191", "patch": "@@ -674,52 +674,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::MatchExpr &expr) override\n   {\n-    HIR::Expr *branch_value\n-      = ASTLoweringExpr::translate (expr.get_scrutinee_expr ().get ());\n-\n-    std::vector<HIR::MatchCase> match_arms;\n-    for (auto &match_case : expr.get_match_cases ())\n-      {\n-\tHIR::Expr *kase_expr\n-\t  = ASTLoweringExpr::translate (match_case.get_expr ().get ());\n-\n-\tHIR::Expr *kase_guard_expr = nullptr;\n-\tif (match_case.get_arm ().has_match_arm_guard ())\n-\t  {\n-\t    kase_guard_expr = ASTLoweringExpr::translate (\n-\t      match_case.get_arm ().get_guard_expr ().get ());\n-\t  }\n-\n-\tstd::vector<std::unique_ptr<HIR::Pattern> > match_arm_patterns;\n-\tfor (auto &pattern : match_case.get_arm ().get_patterns ())\n-\t  {\n-\t    HIR::Pattern *ptrn = ASTLoweringPattern::translate (pattern.get ());\n-\t    match_arm_patterns.push_back (std::unique_ptr<HIR::Pattern> (ptrn));\n-\t  }\n-\n-\tHIR::MatchArm arm (std::move (match_arm_patterns), expr.get_locus (),\n-\t\t\t   std::unique_ptr<HIR::Expr> (kase_guard_expr),\n-\t\t\t   match_case.get_arm ().get_outer_attrs ());\n-\n-\tauto crate_num = mappings->get_current_crate ();\n-\tAnalysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t       mappings->get_next_hir_id (crate_num),\n-\t\t\t\t       UNKNOWN_LOCAL_DEFID);\n-\n-\tHIR::MatchCase kase (std::move (mapping), std::move (arm),\n-\t\t\t     std::unique_ptr<HIR::Expr> (kase_expr));\n-\tmatch_arms.push_back (std::move (kase));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::MatchExpr (mapping, std::unique_ptr<HIR::Expr> (branch_value),\n-\t\t\t    std::move (match_arms), expr.get_inner_attrs (),\n-\t\t\t    expr.get_outer_attrs (), expr.get_locus ());\n+    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::RangeFromToExpr &expr) override"}, {"sha": "64c8f3671026aaaa52f4643efaaeb1803638367d", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e244dc0e736853f2ba74fc3e0da585285df191/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e244dc0e736853f2ba74fc3e0da585285df191/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=f6e244dc0e736853f2ba74fc3e0da585285df191", "patch": "@@ -299,6 +299,57 @@ ASTLoweringExprWithBlock::visit (AST::WhileLoopExpr &expr)\n \t\t\t      expr.get_outer_attrs ());\n }\n \n+void\n+ASTLoweringExprWithBlock::visit (AST::MatchExpr &expr)\n+{\n+  HIR::Expr *branch_value\n+    = ASTLoweringExpr::translate (expr.get_scrutinee_expr ().get ());\n+\n+  std::vector<HIR::MatchCase> match_arms;\n+  for (auto &match_case : expr.get_match_cases ())\n+    {\n+      HIR::Expr *kase_expr\n+\t= ASTLoweringExpr::translate (match_case.get_expr ().get ());\n+\n+      HIR::Expr *kase_guard_expr = nullptr;\n+      if (match_case.get_arm ().has_match_arm_guard ())\n+\t{\n+\t  kase_guard_expr = ASTLoweringExpr::translate (\n+\t    match_case.get_arm ().get_guard_expr ().get ());\n+\t}\n+\n+      std::vector<std::unique_ptr<HIR::Pattern> > match_arm_patterns;\n+      for (auto &pattern : match_case.get_arm ().get_patterns ())\n+\t{\n+\t  HIR::Pattern *ptrn = ASTLoweringPattern::translate (pattern.get ());\n+\t  match_arm_patterns.push_back (std::unique_ptr<HIR::Pattern> (ptrn));\n+\t}\n+\n+      HIR::MatchArm arm (std::move (match_arm_patterns), expr.get_locus (),\n+\t\t\t std::unique_ptr<HIR::Expr> (kase_guard_expr),\n+\t\t\t match_case.get_arm ().get_outer_attrs ());\n+\n+      auto crate_num = mappings->get_current_crate ();\n+      Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t     mappings->get_next_hir_id (crate_num),\n+\t\t\t\t     UNKNOWN_LOCAL_DEFID);\n+\n+      HIR::MatchCase kase (std::move (mapping), std::move (arm),\n+\t\t\t   std::unique_ptr<HIR::Expr> (kase_expr));\n+      match_arms.push_back (std::move (kase));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::MatchExpr (mapping, std::unique_ptr<HIR::Expr> (branch_value),\n+\t\t\t  std::move (match_arms), expr.get_inner_attrs (),\n+\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n+}\n+\n // rust-ast-lower-expr.h\n \n void"}, {"sha": "5a43f3e1b1aa8122d489d5287559f2727a6e3df8", "filename": "gcc/testsuite/rust/execute/torture/issue-858.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e244dc0e736853f2ba74fc3e0da585285df191/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-858.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e244dc0e736853f2ba74fc3e0da585285df191/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-858.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-858.rs?ref=f6e244dc0e736853f2ba74fc3e0da585285df191", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-output \"Result: 123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo<T> {\n+    A,\n+    B(T),\n+}\n+\n+fn main() -> i32 {\n+    let result = Foo::B(123);\n+\n+    match result {\n+        Foo::A => unsafe {\n+            let a = \"A\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::B(x) => unsafe {\n+            let a = \"Result: %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x);\n+        },\n+    }\n+\n+    0\n+}"}]}