{"sha": "81d8de64f337e66e476b429a3923fa6b6f303b4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkOGRlNjRmMzM3ZTY2ZTQ3NmI0MjlhMzkyM2ZhNmI2ZjMwM2I0ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-01-10T12:41:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-01-10T12:41:40Z"}, "message": "re PR testsuite/46230 (several vectorization tests FAIL or XPASS on SPARC)\n\n\tPR testsuite/46230\n\t* gcc.dg/vect/vect-peel-1.c (main): Prevent initialization loop from\n\tbeing vectorized.  Adjust dg-final pattern.  Remove XFAIL.\n\t* gcc.dg/vect/vect-peel-2.c (main): Likewise.\n\t* gcc.dg/vect/vect-peel-4.c (main): Prevent initialization loop from\n\tbeing vectorized.  Adjust dg-final pattern.\n\nFrom-SVN: r168628", "tree": {"sha": "4d34ca019518bc87f033510aacc66e752409cb30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d34ca019518bc87f033510aacc66e752409cb30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81d8de64f337e66e476b429a3923fa6b6f303b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d8de64f337e66e476b429a3923fa6b6f303b4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d8de64f337e66e476b429a3923fa6b6f303b4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d8de64f337e66e476b429a3923fa6b6f303b4d/comments", "author": null, "committer": null, "parents": [{"sha": "af08e73446231a10e66f6d1dc79bcb860b2e08d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af08e73446231a10e66f6d1dc79bcb860b2e08d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af08e73446231a10e66f6d1dc79bcb860b2e08d1"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "a7cc3161c2b533208706010fc64c0fe762399e0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d8de64f337e66e476b429a3923fa6b6f303b4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d8de64f337e66e476b429a3923fa6b6f303b4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81d8de64f337e66e476b429a3923fa6b6f303b4d", "patch": "@@ -1,5 +1,12 @@\n 2011-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n+\tPR testsuite/46230\n+\t* gcc.dg/vect/vect-peel-1.c (main): Prevent initialization loop from\n+\tbeing vectorized.  Adjust dg-final pattern.  Remove XFAIL.\n+\t* gcc.dg/vect/vect-peel-2.c (main): Likewise.\n+\t* gcc.dg/vect/vect-peel-4.c (main): Prevent initialization loop from\n+\tbeing vectorized.  Adjust dg-final pattern.\n+\n \tPR testsuite/46230\n \t* gcc.dg/vect/pr33804.c: XFAIL only for ilp32.\n \t* gcc.dg/vect/slp-24.c: Likewise."}, {"sha": "58a0cdbf203bdc497079c43dbb5d167f14034446", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-1.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d8de64f337e66e476b429a3923fa6b6f303b4d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d8de64f337e66e476b429a3923fa6b6f303b4d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c?ref=81d8de64f337e66e476b429a3923fa6b6f303b4d", "patch": "@@ -40,13 +40,15 @@ int main (void)\n   check_vect ();\n \n   for (i = 0; i <= N+6; i++)\n-    ib[i] = i;\n+    {\n+      asm volatile (\"\" : \"+r\" (i));\n+      ib[i] = i;\n+    }\n \n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail  vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_element_align  } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail  vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_element_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "126c2cf1139131535722eea55411c39d277f6002", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-2.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d8de64f337e66e476b429a3923fa6b6f303b4d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d8de64f337e66e476b429a3923fa6b6f303b4d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-2.c?ref=81d8de64f337e66e476b429a3923fa6b6f303b4d", "patch": "@@ -41,13 +41,15 @@ int main (void)\n   check_vect ();\n \n   for (i = 0; i <= N+6; i++)\n-    ib[i] = i;\n+    {\n+      asm volatile (\"\" : \"+r\" (i));\n+      ib[i] = i;\n+    }\n \n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail  vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_element_align  } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_element_align } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target vect_element_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a71d4c4eba0f94f778b90738f8879cb7109d943c", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-4.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d8de64f337e66e476b429a3923fa6b6f303b4d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d8de64f337e66e476b429a3923fa6b6f303b4d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c?ref=81d8de64f337e66e476b429a3923fa6b6f303b4d", "patch": "@@ -36,12 +36,15 @@ int main (void)\n   check_vect ();\n \n   for (i = 0; i <= N+6; i++)\n-    ib[i] = i;\n+    {\n+      asm volatile (\"\" : \"+r\" (i));\n+      ib[i] = i;\n+    }\n \n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail vect_no_align } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}