{"sha": "a11dd268604fe020dbfb861155e73998a4b5fc4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExZGQyNjg2MDRmZTAyMGRiZmI4NjExNTVlNzM5OThhNGI1ZmM0ZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-03-02T02:47:40Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-02T02:47:40Z"}, "message": "re PR other/26489 (compilation of c++ fails in eh_alloc.cc on NetBSD)\n\n\n\tPR other/26489\n\t* gthr-posix.h (__gthrw2): Define to take three parameters, the\n\tdeclared name, the weak reference name, and the typeof name.\n\t(__gthrw): Avoid expanding the declared name suffix.\n\t(__gthrw3): New Tru64 specific macro to simplify the OSF/1 decls.\n\nFrom-SVN: r111633", "tree": {"sha": "2f46e8e2fb6192000d7327536aca2cfecea64ab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f46e8e2fb6192000d7327536aca2cfecea64ab0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11dd268604fe020dbfb861155e73998a4b5fc4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11dd268604fe020dbfb861155e73998a4b5fc4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11dd268604fe020dbfb861155e73998a4b5fc4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11dd268604fe020dbfb861155e73998a4b5fc4e/comments", "author": null, "committer": null, "parents": [{"sha": "1a1d0917518f2e70a04881abd0be4082259243f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1d0917518f2e70a04881abd0be4082259243f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a1d0917518f2e70a04881abd0be4082259243f5"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "6d1159d2a2baae2fab996c576086934e5b20e7ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11dd268604fe020dbfb861155e73998a4b5fc4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11dd268604fe020dbfb861155e73998a4b5fc4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a11dd268604fe020dbfb861155e73998a4b5fc4e", "patch": "@@ -1,3 +1,11 @@\n+2006-03-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR other/26489\n+\t* gthr-posix.h (__gthrw2): Define to take three parameters, the\n+\tdeclared name, the weak reference name, and the typeof name.\n+\t(__gthrw): Avoid expanding the declared name suffix.\n+\t(__gthrw3): New Tru64 specific macro to simplify the OSF/1 decls.\n+\n 2006-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2.h (DW_TAG_condition, DW_TAG_shared_type): New constants"}, {"sha": "62f83b3ffbcbe05ef40b45a7f7de71577a0ca48a", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11dd268604fe020dbfb861155e73998a4b5fc4e/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11dd268604fe020dbfb861155e73998a4b5fc4e/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=a11dd268604fe020dbfb861155e73998a4b5fc4e", "patch": "@@ -59,30 +59,31 @@ typedef pthread_mutex_t __gthread_recursive_mutex_t;\n #endif\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n-# define __gthrw2(name,name2) \\\n-  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name2)));\n+# define __gthrw2(name,name2,type) \\\n+  static __typeof(type) name __attribute__ ((__weakref__(#name2)));\n # define __gthrw_(name) __gthrw_ ## name\n #else\n-# define __gthrw2(name,name2)\n+# define __gthrw2(name,name2,type)\n # define __gthrw_(name) name\n #endif\n \n /* Typically, __gthrw_foo is a weak reference to symbol foo.  */\n-#define __gthrw(name) __gthrw2(name,name)\n+#define __gthrw(name) __gthrw2(__gthrw_ ## name,name,name)\n \n /* On Tru64, /usr/include/pthread.h uses #pragma extern_prefix \"__\" to\n    map a subset of the POSIX pthread API to mangled versions of their\n    names.  */\n #if defined(__osf__) && defined(_PTHREAD_USE_MANGLED_NAMES_)\n-__gthrw2(pthread_once,__pthread_once)\n-__gthrw2(pthread_getspecific,__pthread_getspecific)\n-__gthrw2(pthread_setspecific,__pthread_setspecific)\n-__gthrw2(pthread_create,__pthread_create)\n-__gthrw2(pthread_cancel,__pthread_cancel)\n-__gthrw2(pthread_mutex_lock,__pthread_mutex_lock)\n-__gthrw2(pthread_mutex_trylock,__pthread_mutex_trylock)\n-__gthrw2(pthread_mutex_unlock,__pthread_mutex_unlock)\n-__gthrw2(pthread_mutex_init,__pthread_mutex_init)\n+#define __gthrw3(name) __gthrw2(__gthrw_ ## name, __ ## name, name)\n+__gthrw3(pthread_once)\n+__gthrw3(pthread_getspecific)\n+__gthrw3(pthread_setspecific)\n+__gthrw3(pthread_create)\n+__gthrw3(pthread_cancel)\n+__gthrw3(pthread_mutex_lock)\n+__gthrw3(pthread_mutex_trylock)\n+__gthrw3(pthread_mutex_unlock)\n+__gthrw3(pthread_mutex_init)\n #else\n __gthrw(pthread_once)\n __gthrw(pthread_getspecific)\n@@ -105,14 +106,14 @@ __gthrw(pthread_mutexattr_destroy)\n #if defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)\n /* Objective-C.  */\n #if defined(__osf__) && defined(_PTHREAD_USE_MANGLED_NAMES_)\n-__gthrw2(pthread_cond_broadcast,__pthread_cond_broadcast)\n-__gthrw2(pthread_cond_destroy,__pthread_cond_destroy)\n-__gthrw2(pthread_cond_init,__pthread_cond_init)\n-__gthrw2(pthread_cond_signal,__pthread_cond_signal)\n-__gthrw2(pthread_cond_wait,__pthread_cond_wait)\n-__gthrw2(pthread_exit,__pthread_exit)\n-__gthrw2(pthread_mutex_destroy,__pthread_mutex_destroy)\n-__gthrw2(pthread_self,__pthread_self)\n+__gthrw3(pthread_cond_broadcast)\n+__gthrw3(pthread_cond_destroy)\n+__gthrw3(pthread_cond_init)\n+__gthrw3(pthread_cond_signal)\n+__gthrw3(pthread_cond_wait)\n+__gthrw3(pthread_exit)\n+__gthrw3(pthread_mutex_destroy)\n+__gthrw3(pthread_self)\n #else\n __gthrw(pthread_cond_broadcast)\n __gthrw(pthread_cond_destroy)"}]}