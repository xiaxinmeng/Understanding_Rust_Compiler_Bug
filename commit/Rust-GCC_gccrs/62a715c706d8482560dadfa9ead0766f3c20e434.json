{"sha": "62a715c706d8482560dadfa9ead0766f3c20e434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhNzE1YzcwNmQ4NDgyNTYwZGFkZmE5ZWFkMDc2NmYzYzIwZTQzNA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2020-01-27T12:51:03Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2020-01-27T12:51:03Z"}, "message": "[ARC] Propagate uncached type attribute to each member of a struct.\n\nLike `packed` type attribute, the ARC's `uncached` type attribute\nneeds to be propagated to each member of the struct where it is used,\ntriggering the .di flag for any access of the struct members. However,\nany complex CFG manipulation may drop memory pointer type attributes,\nleading to the impossibility to discriminate the direct accesses from\nnormal ones. To solve this issue, we will treat the direct memory\naccessed specially via unspecs.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\tPetro Karashchenko  <petro.karashchenko@ring.com>\n\n\t* config/arc/arc.c (arc_is_uncached_mem_p): Check struct\n\tattributes if needed.\n\t(prepare_move_operands): Generate special\n\tunspec instruction for direct access.\n\t(arc_isuncached_mem_p): Propagate uncached attribute to each\n\tstructure member.\n\t* config/arc/arc.md (VUNSPEC_ARC_LDDI): Define.\n\t(VUNSPEC_ARC_STDI): Likewise.\n\t(ALLI): New mode iterator.\n\t(mALLI): New mode attribute.\n\t(lddi): New instruction pattern.\n\t(stdi): Likewise.\n\t(stdidi_split): Split instruction for architectures which are not\n\tsupporting ll64 option.\n\t(lddidi_split): Likewise.\n\ntestsuite/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\tPetro Karashchenko  <petro.karashchenko@ring.com>\n\n\t* gcc.target/arc/uncached-1.c: Update test.\n\t* gcc.target/arc/uncached-2.c: Likewise.\n\t* gcc.target/arc/uncached-3.c: New test.\n\t* gcc.target/arc/uncached-4.c: Likewise.\n\t* gcc.target/arc/uncached-5.c: Likewise.\n\t* gcc.target/arc/uncached-6.c: Likewise.\n\t* gcc.target/arc/uncached-7.c: Likewise.\n\t* gcc.target/arc/uncached-8.c: Likewise.\n\t* gcc.target/arc/arc.exp (ll64): New predicate.", "tree": {"sha": "3baedb4dc834dcf675bd8f39c44eba8b6b4254fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3baedb4dc834dcf675bd8f39c44eba8b6b4254fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62a715c706d8482560dadfa9ead0766f3c20e434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a715c706d8482560dadfa9ead0766f3c20e434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a715c706d8482560dadfa9ead0766f3c20e434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a715c706d8482560dadfa9ead0766f3c20e434/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2744b8b286cbdeecbb6ab03e015dc847a2fb42a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2744b8b286cbdeecbb6ab03e015dc847a2fb42a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2744b8b286cbdeecbb6ab03e015dc847a2fb42a2"}], "stats": {"total": 393, "additions": 351, "deletions": 42}, "files": [{"sha": "2cc61d68cf35f031f4c3b1bd68c21c281d91e74b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -1,3 +1,22 @@\n+2020-01-27  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    Petro Karashchenko  <petro.karashchenko@ring.com>\n+\n+\t* config/arc/arc.c (arc_is_uncached_mem_p): Check struct\n+\tattributes if needed.\n+\t(prepare_move_operands): Generate special unspec instruction for\n+\tdirect access.\n+\t(arc_isuncached_mem_p): Propagate uncached attribute to each\n+\tstructure member.\n+\t* config/arc/arc.md (VUNSPEC_ARC_LDDI): Define.\n+\t(VUNSPEC_ARC_STDI): Likewise.\n+\t(ALLI): New mode iterator.\n+\t(mALLI): New mode attribute.\n+\t(lddi): New instruction pattern.\n+\t(stdi): Likewise.\n+\t(stdidi_split): Split instruction for architectures which are not\n+\tsupporting ll64 option.\n+\t(lddidi_split): Likewise.\n+\n 2020-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/92989"}, {"sha": "e1a865f02e699a8ed477e842ef4480d5f1e26d10", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 78, "deletions": 40, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -9091,49 +9091,71 @@ arc_get_aux_arg (rtx pat, int *auxr)\n bool\n prepare_move_operands (rtx *operands, machine_mode mode)\n {\n-  /* First handle aux attribute.  */\n-  if (mode == SImode\n-      && (MEM_P (operands[0]) || MEM_P (operands[1])))\n+  if ((MEM_P (operands[0]) || MEM_P (operands[1]))\n+      && SCALAR_INT_MODE_P (mode))\n     {\n-      rtx tmp;\n-      int auxr = 0;\n-      if (MEM_P (operands[0]) && arc_is_aux_reg_p (operands[0]))\n+      /* First handle aux attribute.  */\n+      if (mode == SImode)\n \t{\n-\t  /* Save operation.  */\n-\t  if (arc_get_aux_arg (operands[0], &auxr))\n+\t  rtx tmp;\n+\t  int auxr = 0;\n+\t  if (MEM_P (operands[0]) && arc_is_aux_reg_p (operands[0]))\n \t    {\n-\t      tmp = gen_reg_rtx (SImode);\n-\t      emit_move_insn (tmp, GEN_INT (auxr));\n+\t      /* Save operation.  */\n+\t      if (arc_get_aux_arg (operands[0], &auxr))\n+\t\t{\n+\t\t  tmp = gen_reg_rtx (SImode);\n+\t\t  emit_move_insn (tmp, GEN_INT (auxr));\n+\t\t}\n+\t      else\n+\t\ttmp = XEXP (operands[0], 0);\n+\n+\t      operands[1] = force_reg (SImode, operands[1]);\n+\t      emit_insn (gen_rtx_UNSPEC_VOLATILE\n+\t\t\t (VOIDmode, gen_rtvec (2, operands[1], tmp),\n+\t\t\t  VUNSPEC_ARC_SR));\n+\t      return true;\n \t    }\n-\t  else\n+\t  if (MEM_P (operands[1]) && arc_is_aux_reg_p (operands[1]))\n \t    {\n-\t      tmp = XEXP (operands[0], 0);\n+\t      if (arc_get_aux_arg (operands[1], &auxr))\n+\t\t{\n+\t\t  tmp = gen_reg_rtx (SImode);\n+\t\t  emit_move_insn (tmp, GEN_INT (auxr));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  tmp = XEXP (operands[1], 0);\n+\t\t  gcc_assert (GET_CODE (tmp) == SYMBOL_REF);\n+\t\t}\n+\t      /* Load operation.  */\n+\t      gcc_assert (REG_P (operands[0]));\n+\t      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t\t      gen_rtx_UNSPEC_VOLATILE\n+\t\t\t\t      (SImode, gen_rtvec (1, tmp),\n+\t\t\t\t       VUNSPEC_ARC_LR)));\n+\t      return true;\n \t    }\n-\n-\t  operands[1] = force_reg (SImode, operands[1]);\n+\t}\n+      /* Second, we check for the uncached.  */\n+      if (arc_is_uncached_mem_p (operands[0]))\n+\t{\n+\t  if (!REG_P (operands[1]))\n+\t    operands[1] = force_reg (mode, operands[1]);\n \t  emit_insn (gen_rtx_UNSPEC_VOLATILE\n-\t\t     (VOIDmode, gen_rtvec (2, operands[1], tmp),\n-\t\t      VUNSPEC_ARC_SR));\n+\t\t     (VOIDmode, gen_rtvec (2, operands[0], operands[1]),\n+\t\t      VUNSPEC_ARC_STDI));\n \t  return true;\n \t}\n-      if (MEM_P (operands[1]) && arc_is_aux_reg_p (operands[1]))\n+      if (arc_is_uncached_mem_p (operands[1]))\n \t{\n-\t  if (arc_get_aux_arg (operands[1], &auxr))\n-\t    {\n-\t      tmp = gen_reg_rtx (SImode);\n-\t      emit_move_insn (tmp, GEN_INT (auxr));\n-\t    }\n-\t  else\n-\t    {\n-\t      tmp = XEXP (operands[1], 0);\n-\t      gcc_assert (GET_CODE (tmp) == SYMBOL_REF);\n-\t    }\n-\t  /* Load operation.  */\n-\t  gcc_assert (REG_P (operands[0]));\n-\t  emit_insn (gen_rtx_SET (operands[0],\n-\t\t\t\t  gen_rtx_UNSPEC_VOLATILE\n-\t\t\t\t  (SImode, gen_rtvec (1, tmp),\n-\t\t\t\t   VUNSPEC_ARC_LR)));\n+\t  if (MEM_P (operands[0]))\n+\t    operands[0] = force_reg (mode, operands[0]);\n+\t  emit_insn (gen_rtx_SET\n+\t\t     (operands[0],\n+\t\t      gen_rtx_UNSPEC_VOLATILE\n+\t\t      (mode, gen_rtvec (1, operands[1]),\n+\t\t       VUNSPEC_ARC_LDDI)));\n \t  return true;\n \t}\n     }\n@@ -11162,24 +11184,40 @@ arc_is_uncached_mem_p (rtx pat)\n     return false;\n \n   /* Get the attributes.  */\n-  if (TREE_CODE (addr) == MEM_REF)\n+  if (TREE_CODE (addr) == MEM_REF\n+      || TREE_CODE (addr) == VAR_DECL)\n     {\n       attrs = TYPE_ATTRIBUTES (TREE_TYPE (addr));\n       if (lookup_attribute (\"uncached\", attrs))\n \treturn true;\n-\n+    }\n+  if (TREE_CODE (addr) == MEM_REF)\n+    {\n       attrs = TYPE_ATTRIBUTES (TREE_TYPE (TREE_OPERAND (addr, 0)));\n       if (lookup_attribute (\"uncached\", attrs))\n \treturn true;\n-    }\n-\n-  /* For COMPONENT_REF, use the FIELD_DECL from tree operand 1.  */\n-  if (TREE_CODE (addr) == COMPONENT_REF)\n-    {\n       attrs = TYPE_ATTRIBUTES (TREE_TYPE (TREE_OPERAND (addr, 1)));\n       if (lookup_attribute (\"uncached\", attrs))\n \treturn true;\n     }\n+\n+  /* Check the definitions of the structs.  */\n+  while (handled_component_p (addr))\n+    {\n+      if (TREE_CODE (addr) == COMPONENT_REF)\n+\t{\n+\t  attrs = TYPE_ATTRIBUTES (TREE_TYPE (addr));\n+\t  if (lookup_attribute (\"uncached\", attrs))\n+\t    return true;\n+\t  attrs = TYPE_ATTRIBUTES (TREE_TYPE (TREE_OPERAND (addr, 0)));\n+\t  if (lookup_attribute (\"uncached\", attrs))\n+\t    return true;\n+\t  attrs = TYPE_ATTRIBUTES (TREE_TYPE (TREE_OPERAND (addr, 1)));\n+\t  if (lookup_attribute (\"uncached\", attrs))\n+\t    return true;\n+\t}\n+      addr = TREE_OPERAND (addr, 0);\n+    }\n   return false;\n }\n "}, {"sha": "46cb254ed28e805f62ee764cb9bf3814bf923fb8", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -164,6 +164,8 @@\n   VUNSPEC_ARC_BLOCKAGE\n   VUNSPEC_ARC_EH_RETURN\n   VUNSPEC_ARC_ARC600_RTIE\n+  VUNSPEC_ARC_LDDI\n+  VUNSPEC_ARC_STDI\n   ])\n \n (define_constants\n@@ -4682,6 +4684,64 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   [(set_attr \"length\" \"8,4,8,4\")\n    (set_attr \"type\" \"sr,sr,sr,sr\")])\n \n+(define_mode_iterator ALLI [QI HI SI (DI \"TARGET_LL64\")])\n+(define_mode_attr mALLI [(QI \"b\") (HI \"%_\") (SI \"\") (DI \"d\")])\n+\n+(define_insn \"lddi<mode>\"\n+  [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:ALLI [(match_operand:ALLI 1 \"memory_operand\" \"m\")]\n+\t\t\t      VUNSPEC_ARC_LDDI))]\n+  \"\"\n+  \"ld<mALLI>%U1.di\\\\t%0,%1\"\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"stdi<mode>\"\n+  [(unspec_volatile [(match_operand:ALLI 0 \"memory_operand\"    \"m,m,Usc\")\n+\t\t     (match_operand:ALLI 1 \"nonmemory_operand\" \"r,Cm3,i\")]\n+\t\t    VUNSPEC_ARC_STDI)]\n+  \"\"\n+  \"st<mALLI>%U0.di\\\\t%1,%0\"\n+  [(set_attr \"length\" \"*,*,8\")\n+   (set_attr \"type\" \"store\")])\n+\n+(define_insn_and_split \"*stdidi_split\"\n+  [(unspec_volatile [(match_operand:DI 0 \"memory_operand\"   \"m\")\n+\t\t     (match_operand:DI 1 \"register_operand\" \"r\")]\n+\t\t    VUNSPEC_ARC_STDI)]\n+  \"!TARGET_LL64\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(unspec_volatile:SI [(match_dup 2) (match_dup 3)] VUNSPEC_ARC_STDI)\n+   (unspec_volatile:SI [(match_dup 4) (match_dup 5)] VUNSPEC_ARC_STDI)]\n+  \"\n+  {\n+   operands[3] = gen_lowpart (SImode, operands[1]);\n+   operands[5] = gen_highpart_mode (SImode, DImode, operands[1]);\n+   operands[2] = gen_lowpart (SImode, operands[0]);\n+   operands[4] = gen_highpart (SImode, operands[0]);\n+  }\n+  \"\n+  )\n+\n+(define_insn_and_split \"*lddidi_split\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:DI [(match_operand:DI 1 \"memory_operand\" \"m\")]\n+\t\t\t    VUNSPEC_ARC_LDDI))]\n+  \"!TARGET_LL64\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (unspec_volatile:SI [(match_dup 3)] VUNSPEC_ARC_LDDI))\n+   (set (match_dup 4) (unspec_volatile:SI [(match_dup 5)] VUNSPEC_ARC_LDDI))]\n+  \"\n+  {\n+   operands[3] = gen_lowpart (SImode, operands[1]);\n+   operands[5] = gen_highpart (SImode, operands[1]);\n+   operands[2] = gen_lowpart (SImode, operands[0]);\n+   operands[4] = gen_highpart (SImode, operands[0]);\n+  }\n+  \"\n+  )\n+\n (define_insn \"trap_s\"\n   [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\" \"L,Cal\")]\n \t\t   VUNSPEC_ARC_TRAP_S)]"}, {"sha": "991934272e06c7c9c1680f975988c40c46b2df55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -1,3 +1,14 @@\n+2020-01-27  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    Petro Karashchenko  <petro.karashchenko@ring.com>\n+\n+\t* gcc.target/arc/uncached-3.c: New test.\n+\t* gcc.target/arc/uncached-4.c: Likewise.\n+\t* gcc.target/arc/uncached-5.c: Likewise.\n+\t* gcc.target/arc/uncached-6.c: Likewise.\n+\t* gcc.target/arc/uncached-7.c: Likewise.\n+\t* gcc.target/arc/uncached-8.c: Likewise.\n+\t* gcc.target/arc/arc.exp (ll64): New predicate.\n+\n 2020-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/torture/pr93170.c: New test."}, {"sha": "501d4589c53c622d2af5092b7c28bdac9b462893", "filename": "gcc/testsuite/gcc.target/arc/arc.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc.exp?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -122,6 +122,15 @@ proc check_effective_target_dpfp { } {\n     }]\n }\n \n+# Return 1 if this is a compiler supporting LL64 option.\n+proc check_effective_target_ll64 { } {\n+    return [check_no_compiler_messages ll64 assembly {\n+\t#if !defined(__ARC_LL64__)\n+\t#error No ARC LL64\n+\t#endif\n+    }]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "fa5ecb7b7d395921306e548523b74ac7aa7164fe", "filename": "gcc/testsuite/gcc.target/arc/uncached-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-1.c?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -8,4 +8,4 @@ int get_stat (void)\n   return *status;\n }\n \n-/* { dg-final { scan-assembler-times \"ld\\.di\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ld\\.di\" 2 } } */"}, {"sha": "9d6bfbbb50e5c55097f5082fe63e19abc96b9c75", "filename": "gcc/testsuite/gcc.target/arc/uncached-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-2.c?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -6,4 +6,4 @@ void clkgen_switch(unsigned int base, unsigned int offset, int val)\n     (volatile unsigned int __attribute__ ((uncached)) *) (base + offset);\n   *dest = val;\n }\n-/* { dg-final { scan-assembler-times \"st\\.di\" 1 } } */\n+/* { dg-final { scan-assembler-times \"st\\.di\" 2 } } */"}, {"sha": "f2a317b2816280d2f009cbe0b9da6b0bb0462c87", "filename": "gcc/testsuite/gcc.target/arc/uncached-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-3.c?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+\n+typedef volatile struct {\n+    int a;\n+    char *b;\n+} __attribute__((uncached)) my_type_t;\n+\n+my_type_t x;\n+\n+void foo (my_type_t *p)\n+{\n+    p->a = 10;\n+    p->b = 0;\n+}\n+\n+void bar (void)\n+{\n+    x.a = 10;\n+    x.b = 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"st\\.di\" 4 } } */"}, {"sha": "fecb16648b8e7a864137bb9950bf7ae45cee4493", "filename": "gcc/testsuite/gcc.target/arc/uncached-4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-4.c?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+\n+#include <stddef.h>\n+\n+typedef enum\n+{\n+ e1,\n+ e2\n+} my_enum_t;\n+\n+typedef struct\n+{\n+  int a;\n+  int *p;\n+} my_struct_t;\n+\n+typedef volatile struct\n+{\n+  my_enum_t a;\n+  my_struct_t b;\n+} __attribute__((uncached)) my_type_t;\n+\n+my_type_t x;\n+\n+void foo (my_type_t *p)\n+{\n+  p->a = e2;\n+  p->b.a = 10;\n+  p->b.p = NULL;\n+  *p->b.p = 10;\n+}\n+\n+void bar (void)\n+{\n+  x.a = e2;\n+  x.b.a = 10;\n+  x.b.p = NULL;\n+  *x.b.p = 10;\n+}\n+\n+/* { dg-final { scan-assembler-times \"st\\.di\" 6 } } */\n+/* { dg-final { scan-assembler-times \"ld\\.di\" 2 } } */"}, {"sha": "4fe0464fdde32b0bef0d626c1e3d2d5dadde588f", "filename": "gcc/testsuite/gcc.target/arc/uncached-5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-5.c?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options \"-O1\" } */\n+/* { dg-do compile } */\n+\n+#define RegWrSI(a,v)  (*(volatile __attribute__((uncached)) int *)(a)=(v))\n+#define RegWrQI(a,v)  (*(volatile __attribute__((uncached)) char *)(a)=(v))\n+#define RegWrHI(a,v)  (*(volatile __attribute__((uncached)) short *)(a)=(v))\n+#define RegWrDI(a,v)  (*(volatile __attribute__((uncached)) long long *)(a)=(v))\n+\n+void foo (int arg, void *p)\n+{\n+  RegWrDI (p  , arg);\n+  RegWrHI (p++, arg);\n+  RegWrSI (p++, arg);\n+  RegWrQI (p++, arg);\n+}\n+\n+void bar (void)\n+{\n+  RegWrQI (0x40000, 1);\n+  RegWrHI (0x40010, 2);\n+  RegWrSI (0x40020, 4);\n+  RegWrDI (0x40040, 8);\n+}\n+\n+/* { dg-final { scan-assembler-times \"stb\\.di\" 2 } } */\n+/* { dg-final { scan-assembler-times \"st\\[hw\\]\\.di\" 2 } } */\n+/* { dg-final { scan-assembler-times \"std\\.di\" 2 { target { ll64 } } } } */\n+/* { dg-final { scan-assembler-times \"st\\.di\" 2 { target { ll64 } } } } */\n+/* { dg-final { scan-assembler-times \"st\\.di\" 6 { target { ! { ll64 } } } } } */"}, {"sha": "581a9eccb3b9db9c1763489cc8852ea4450680fb", "filename": "gcc/testsuite/gcc.target/arc/uncached-6.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-6.c?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-options \"-O1\" } */\n+/* { dg-do compile } */\n+\n+#define RegRdSI(v,a) ((v) = *(volatile __attribute__((uncached)) int *)(a))\n+#define RegRdQI(v,a) ((v) = *(volatile __attribute__((uncached)) char *)(a))\n+#define RegRdHI(v,a) ((v) = *(volatile __attribute__((uncached)) short *)(a))\n+#define RegRdDI(v,a) \\\n+  ((v) = *(volatile __attribute__((uncached)) long long *)(a))\n+\n+char a0;\n+short a1;\n+int a2;\n+long long a3;\n+\n+void foox (void *p)\n+{\n+  RegRdQI (a0, p++);\n+  RegRdHI (a1, p++);\n+  RegRdSI (a2, p++);\n+  RegRdDI (a3, p  );\n+}\n+\n+void barx (int arg)\n+{\n+  RegRdQI (a0, 0x40000);\n+  RegRdHI (a1, 0x40010);\n+  RegRdSI (a2, 0x40020);\n+  RegRdDI (a3, 0x40040);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldb\\.di\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ld\\[hw\\]\\.di\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ldd\\.di\" 2 { target { ll64 } } } } */\n+/* { dg-final { scan-assembler-times \"ld\\.di\" 2 { target { ll64 } } } } */\n+/* { dg-final { scan-assembler-times \"ld\\.di\" 6 { target { ! { ll64 } } } } } */"}, {"sha": "4001b8bd821a3523ec191aefd58777be38961b4e", "filename": "gcc/testsuite/gcc.target/arc/uncached-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-7.c?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-O1\" } */\n+/* { dg-do compile } */\n+\n+volatile __attribute__((uncached)) int s[20];\n+\n+void s_acc(void)\n+{\n+    s[10] = 15;\n+}\n+\n+/* { dg-final { scan-assembler-times \"st\\.di\" 1 } } */"}, {"sha": "060229b11df43d944e41a2590e5606aabcbfb180", "filename": "gcc/testsuite/gcc.target/arc/uncached-8.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a715c706d8482560dadfa9ead0766f3c20e434/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached-8.c?ref=62a715c706d8482560dadfa9ead0766f3c20e434", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+\n+#include <stddef.h>\n+\n+typedef struct\n+{\n+  int a;\n+} my_structB_t;\n+\n+typedef struct\n+{\n+  my_structB_t b;\n+} __attribute__((uncached))  my_structA_t;\n+\n+typedef volatile struct\n+{\n+  my_structA_t c;\n+} my_type_t;\n+\n+my_type_t x;\n+\n+void foo (my_type_t *p)\n+{\n+  p->c.b.a = 10;\n+}\n+\n+void bar (void)\n+{\n+  x.c.b.a = 10;\n+}\n+\n+/* { dg-final { scan-assembler-times \"st\\.di\" 1 } } */\n+/* { dg-final { scan-assembler-times \"st\\.as\\.di\" 1 } } */"}]}