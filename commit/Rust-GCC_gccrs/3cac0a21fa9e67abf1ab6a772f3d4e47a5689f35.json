{"sha": "3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NhYzBhMjFmYTllNjdhYmYxYWI2YTc3MmYzZDRlNDdhNTY4OWYzNQ==", "commit": {"author": {"name": "Philippe De Muyter", "email": "phdm@macqel.be", "date": "1998-03-23T22:29:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-03-23T22:29:33Z"}, "message": "m68k.md (ashldi_const): Allow shift count in range ]32,63].\n\n        * m68k/m68k.md (ashldi_const): Allow shift count in range ]32,63].\n        (ashldi3): Allow constant shift count in range ]32,63].\n        (ashrdi_const, ashrid3, lshrdi_const, lshrdi3): Likewise.\n\nFrom-SVN: r18784", "tree": {"sha": "f67b56b230f62516591cb12b5d486d5f0c652c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67b56b230f62516591cb12b5d486d5f0c652c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35/comments", "author": {"login": "phdm", "id": 2923420, "node_id": "MDQ6VXNlcjI5MjM0MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2923420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phdm", "html_url": "https://github.com/phdm", "followers_url": "https://api.github.com/users/phdm/followers", "following_url": "https://api.github.com/users/phdm/following{/other_user}", "gists_url": "https://api.github.com/users/phdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/phdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phdm/subscriptions", "organizations_url": "https://api.github.com/users/phdm/orgs", "repos_url": "https://api.github.com/users/phdm/repos", "events_url": "https://api.github.com/users/phdm/events{/privacy}", "received_events_url": "https://api.github.com/users/phdm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4da0595618774151d44c3d1a51b292fc8ef62e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da0595618774151d44c3d1a51b292fc8ef62e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da0595618774151d44c3d1a51b292fc8ef62e85"}], "stats": {"total": 77, "additions": 55, "deletions": 22}, "files": [{"sha": "2e57db9a7a74c04f06ee2fe1d97bc48a078d382c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35", "patch": "@@ -1,3 +1,9 @@\n+Mon Mar 23 23:26:42 1998  Philippe De Muyter  <phdm@macqel.be>\n+\n+\t* m68k/m68k.md (ashldi_const): Allow shift count in range ]32,63].\n+\t(ashldi3): Allow constant shift count in range ]32,63].\n+\t(ashrdi_const, ashrid3, lshrdi_const, lshrdi3): Likewise.\n+\n 1998-03-22  Mark Mitchell  <mmitchell@usa.net>\n \n \t* tree.h (IS_EXPR_CODE_CLASS): New macro."}, {"sha": "0a96bc08e084821f11342f3fa70a2bf80159bece", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 49, "deletions": 22, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35", "patch": "@@ -4458,9 +4458,9 @@\n   [(set (match_operand:DI 0 \"general_operand\" \"=d\")\n \t(ashift:DI (match_operand:DI 1 \"general_operand\" \"0\")\n \t\t     (match_operand 2 \"const_int_operand\" \"n\")))]\n-  \"(INTVAL (operands[2]) == 1\n+  \"((INTVAL (operands[2]) >= 1 && INTVAL (operands[2]) <= 3)\n     || INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16\n-   || INTVAL (operands[2]) == 2 || INTVAL (operands[2]) == 3)\"\n+    || (INTVAL (operands[2]) > 32 && INTVAL (operands[2]) <= 63))\"\n   \"*\n {\n   operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n@@ -4470,10 +4470,19 @@\n     return \\\"rol%.l %#8,%1\\;rol%.l %#8,%0\\;move%.b %1,%0\\;clr%.b %1\\\";\n   else if (INTVAL (operands[2]) == 16)\n     return \\\"swap %1\\;swap %0\\;move%.w %1,%0\\;clr%.w %1\\\";\n+  else if (INTVAL (operands[2]) == 48)\n+    return \\\"mov%.l %1,%0\\;swap %0\\;clr%.l %1\\;clr%.w %0\\\";\n   else if (INTVAL (operands[2]) == 2)\n     return \\\"add%.l %1,%1\\;addx%.l %0,%0\\;add%.l %1,%1\\;addx%.l %0,%0\\\";\n-  else/* if (INTVAL (operands[2]) == 3)*/\n+  else if (INTVAL (operands[2]) == 3)\n     return \\\"add%.l %1,%1\\;addx%.l %0,%0\\;add%.l %1,%1\\;addx%.l %0,%0\\;add%.l %1,%1\\;addx%.l %0,%0\\\";\n+  else /* 32 < INTVAL (operands[2]) <= 63 */\n+    {\n+      operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 32);\n+      output_asm_insn (INTVAL (operands[2]) <= 8 ? \\\"asl%.l %2,%1\\\" :\n+\t\t\t\\\"moveq %2,%0\\;asl%.l %0,%1\\\", operands);\n+      return \\\"mov%.l %1,%0\\;moveq %#0,%1\\\";\n+    }\n } \")\n \n (define_expand \"ashldi3\"\n@@ -4484,9 +4493,9 @@\n   \"\n {\n   if (GET_CODE (operands[2]) != CONST_INT\n-  || (INTVAL (operands[2]) != 1 && INTVAL (operands[2]) != 32\n+  || ((INTVAL (operands[2]) < 1 || INTVAL (operands[2]) > 3)\n      && INTVAL (operands[2]) != 8 && INTVAL (operands[2]) != 16\n-     && INTVAL (operands[2]) != 2 && INTVAL (operands[2]) != 3))\n+     && (INTVAL (operands[2]) < 32 || INTVAL (operands[2]) > 63)))\n     FAIL;\n } \")\n \n@@ -4650,10 +4659,10 @@\n \t(ashiftrt:DI (match_operand:DI 1 \"general_operand\" \"0\")\n \t\t     (match_operand 2 \"const_int_operand\" \"n\")))]\n   \"!TARGET_5200 \n-    && ((INTVAL (operands[2]) == 1 || INTVAL (operands[2]) == 2\n-    || INTVAL (operands[2]) == 3 || INTVAL (operands[2]) == 8\n-    || INTVAL (operands[2]) == 16 || INTVAL (operands[2]) == 31\n-    || INTVAL (operands[2]) == 63))\"\n+    && ((INTVAL (operands[2]) >= 1 && INTVAL (operands[2]) <= 3)\n+    || INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16\n+    || INTVAL (operands[2]) == 31\n+    || (INTVAL (operands[2]) > 32 && INTVAL (operands[2]) <= 63))\"\n   \"*\n {\n   operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n@@ -4666,12 +4675,23 @@\n     return \\\"move%.b %0,%1\\;asr%.l %#8,%0\\;ror%.l %#8,%1\\\";\n   else if (INTVAL (operands[2]) == 16)\n     return \\\"move%.w %0,%1\\;clr%.w %0\\;swap %1\\;ext%.l %0\\\";\n+  else if (INTVAL (operands[2]) == 48)\n+    return \\\"swap %0\\;ext%.l %0\\;move%.l %0,%1\\;smi %0\\;ext%.w %0\\\";\n   else if (INTVAL (operands[2]) == 31)\n     return \\\"add%.l %1,%1\\;addx%.l %0,%0\\;move%.l %0,%1\\;subx%.l %0,%0\\\";\n   else if (INTVAL (operands[2]) == 2)\n     return \\\"asr%.l %#1,%0\\;roxr%.l %#1,%1\\;asr%.l %#1,%0\\;roxr%.l %#1,%1\\\";\n-  else/* if (INTVAL (operands[2]) == 3)*/\n+  else if (INTVAL (operands[2]) == 3)\n     return \\\"asr%.l %#1,%0\\;roxr%.l %#1,%1\\;asr%.l %#1,%0\\;roxr%.l %#1,%1\\;asr%.l %#1,%0\\;roxr%.l %#1,%1\\\";\n+  else /* 32 < INTVAL (operands[2]) <= 63 */\n+    {\n+      operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 32);\n+      output_asm_insn (INTVAL (operands[2]) <= 8 ? \\\"asr%.l %2,%0\\\" :\n+\t\t\t\\\"moveq %2,%1\\;asr%.l %1,%0\\\", operands);\n+      output_asm_insn (\\\"mov%.l %0,%1\\;smi %0\\\", operands);\n+      return INTVAL (operands[2]) >= 15 ? \\\"ext%.w %d0\\\" :\n+\t     TARGET_68020 ? \\\"extb%.l %0\\\" : \\\"ext%.w %0\\;ext%.l %0\\\";\n+    }\n } \")\n \n (define_expand \"ashrdi3\"\n@@ -4682,10 +4702,9 @@\n   \"\n {\n   if (GET_CODE (operands[2]) != CONST_INT\n-  || (INTVAL (operands[2]) != 1 && INTVAL (operands[2]) != 2\n-     && INTVAL (operands[2]) != 3 && INTVAL (operands[2]) != 8\n-     && INTVAL (operands[2]) != 16 && INTVAL (operands[2]) != 31\n-     && INTVAL (operands[2]) != 32 && INTVAL (operands[2]) != 63))\n+  || ((INTVAL (operands[2]) < 1 || INTVAL (operands[2]) > 3)\n+     && INTVAL (operands[2]) != 8 && INTVAL (operands[2]) != 16\n+     && (INTVAL (operands[2]) < 31 || INTVAL (operands[2]) > 63)))\n     FAIL;\n } \")\n \n@@ -4811,9 +4830,9 @@\n \t(lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"0\")\n \t\t     (match_operand 2 \"const_int_operand\" \"n\")))]\n   \"!TARGET_5200\n-    && ((INTVAL (operands[2]) == 1 || INTVAL (operands[2]) == 2\n-    || INTVAL (operands[2]) == 3 || INTVAL (operands[2]) == 8\n-    || INTVAL (operands[2]) == 16 || INTVAL (operands[2]) == 63))\"\n+    && ((INTVAL (operands[2]) >= 1 && INTVAL (operands[2]) <= 3)\n+    || INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16\n+    || (INTVAL (operands[2]) > 32 && INTVAL (operands[2]) <= 63))\"\n   \"*\n {\n   operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n@@ -4826,10 +4845,19 @@\n     return \\\"move%.b %0,%1\\;lsr%.l %#8,%0\\;ror%.l %#8,%1\\\";\n   else if (INTVAL (operands[2]) == 16)\n     return \\\"move%.w %0,%1\\;clr%.w %0\\;swap %1\\;swap %0\\\";\n+  else if (INTVAL (operands[2]) == 48)\n+    return \\\"move%.l %0,%1\\;clr%.w %1\\;clr%.l %0\\;swap %1\\\";\n   else if (INTVAL (operands[2]) == 2)\n     return \\\"lsr%.l %#1,%0\\;roxr%.l %#1,%1\\;lsr%.l %#1,%0\\;roxr%.l %#1,%1\\\";\n-  else /*if (INTVAL (operands[2]) == 3)*/\n+  else if (INTVAL (operands[2]) == 3)\n     return \\\"lsr%.l %#1,%0\\;roxr%.l %#1,%1\\;lsr%.l %#1,%0\\;roxr%.l %#1,%1\\;lsr%.l %#1,%0\\;roxr%.l %#1,%1\\\";\n+  else /* 32 < INTVAL (operands[2]) <= 63 */\n+    {\n+      operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 32);\n+      output_asm_insn (INTVAL (operands[2]) <= 8 ? \\\"lsr%.l %2,%0\\\" :\n+\t\t\t\\\"moveq %2,%1\\;lsr%.l %1,%0\\\", operands);\n+      return \\\"mov%.l %0,%1\\;moveq %#0,%0\\\";\n+    }\n } \")\n \n (define_expand \"lshrdi3\"\n@@ -4840,10 +4868,9 @@\n   \"\n {\n   if (GET_CODE (operands[2]) != CONST_INT\n-  || (INTVAL (operands[2]) != 1 && INTVAL (operands[2]) != 2\n-     && INTVAL (operands[2]) != 3 && INTVAL (operands[2]) != 8\n-     && INTVAL (operands[2]) != 16 && INTVAL (operands[2]) != 32\n-     && INTVAL (operands[2]) != 63))\n+  || ((INTVAL (operands[2]) < 1 || INTVAL (operands[2]) > 3)\n+     && INTVAL (operands[2]) != 8 && INTVAL (operands[2]) != 16\n+     && (INTVAL (operands[2]) < 32 || INTVAL (operands[2]) > 63)))\n     FAIL;\n } \")\n "}]}