{"sha": "344951b639a5f6f41c21c6cad04b0580c58aa12e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ0OTUxYjYzOWE1ZjZmNDFjMjFjNmNhZDA0YjA1ODBjNThhYTEyZQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-06-17T14:05:24Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-26T19:31:14Z"}, "message": "rs6000: Add MMA builtins\n\n2021-06-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtin-new.def: Add mma stanza.", "tree": {"sha": "1f14af1f74ae8a13cd966474e6304e8d6045ebbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f14af1f74ae8a13cd966474e6304e8d6045ebbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/344951b639a5f6f41c21c6cad04b0580c58aa12e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344951b639a5f6f41c21c6cad04b0580c58aa12e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344951b639a5f6f41c21c6cad04b0580c58aa12e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344951b639a5f6f41c21c6cad04b0580c58aa12e/comments", "author": null, "committer": null, "parents": [{"sha": "4e84e381f27113b20c8adac4430813931962c917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e84e381f27113b20c8adac4430813931962c917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e84e381f27113b20c8adac4430813931962c917"}], "stats": {"total": 416, "additions": 416, "deletions": 0}, "files": [{"sha": "d6174fe1a6eb8ff57aa8bbb65293f36dea4ea481", "filename": "gcc/config/rs6000/rs6000-builtin-new.def", "status": "modified", "additions": 416, "deletions": 0, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344951b639a5f6f41c21c6cad04b0580c58aa12e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344951b639a5f6f41c21c6cad04b0580c58aa12e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def?ref=344951b639a5f6f41c21c6cad04b0580c58aa12e", "patch": "@@ -3329,3 +3329,419 @@\n \n   const unsigned long long __builtin_pextd (unsigned long long, unsigned long long);\n     PEXTD pextd {}\n+\n+\n+[mma]\n+  void __builtin_mma_assemble_acc (v512 *, vuc, vuc, vuc, vuc);\n+    ASSEMBLE_ACC nothing {mma}\n+\n+  v512 __builtin_mma_assemble_acc_internal (vuc, vuc, vuc, vuc);\n+    ASSEMBLE_ACC_INTERNAL mma_assemble_acc {mma}\n+\n+  void __builtin_mma_assemble_pair (v256 *, vuc, vuc);\n+    ASSEMBLE_PAIR nothing {mma}\n+\n+  v256 __builtin_mma_assemble_pair_internal (vuc, vuc);\n+    ASSEMBLE_PAIR_INTERNAL vsx_assemble_pair {mma}\n+\n+  void __builtin_mma_build_acc (v512 *, vuc, vuc, vuc, vuc);\n+    BUILD_ACC nothing {mma}\n+\n+  v512 __builtin_mma_build_acc_internal (vuc, vuc, vuc, vuc);\n+    BUILD_ACC_INTERNAL mma_assemble_acc {mma}\n+\n+  void __builtin_mma_disassemble_acc (void *, v512 *);\n+    DISASSEMBLE_ACC nothing {mma,quad}\n+\n+  vuc __builtin_mma_disassemble_acc_internal (v512, const int<2>);\n+    DISASSEMBLE_ACC_INTERNAL mma_disassemble_acc {mma}\n+\n+  void __builtin_mma_disassemble_pair (void *, v256 *);\n+    DISASSEMBLE_PAIR nothing {mma,pair}\n+\n+  vuc __builtin_mma_disassemble_pair_internal (v256, const int<2>);\n+    DISASSEMBLE_PAIR_INTERNAL vsx_disassemble_pair {mma}\n+\n+  void __builtin_mma_pmxvbf16ger2 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2 nothing {mma}\n+\n+  v512 __builtin_mma_pmxvbf16ger2_internal (vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2_INTERNAL mma_pmxvbf16ger2 {mma}\n+\n+  void __builtin_mma_pmxvbf16ger2nn (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2NN nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvbf16ger2nn_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2NN_INTERNAL mma_pmxvbf16ger2nn {mma,quad}\n+\n+  void __builtin_mma_pmxvbf16ger2np (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2NP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvbf16ger2np_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2NP_INTERNAL mma_pmxvbf16ger2np {mma,quad}\n+\n+  void __builtin_mma_pmxvbf16ger2pn (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2PN nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvbf16ger2pn_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2PN_INTERNAL mma_pmxvbf16ger2pn {mma,quad}\n+\n+  void __builtin_mma_pmxvbf16ger2pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvbf16ger2pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVBF16GER2PP_INTERNAL mma_pmxvbf16ger2pp {mma,quad}\n+\n+  void __builtin_mma_pmxvf16ger2 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2 nothing {mma}\n+\n+  v512 __builtin_mma_pmxvf16ger2_internal (vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2_INTERNAL mma_pmxvf16ger2 {mma}\n+\n+  void __builtin_mma_pmxvf16ger2nn (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2NN nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvf16ger2nn_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2NN_INTERNAL mma_pmxvf16ger2nn {mma,quad}\n+\n+  void __builtin_mma_pmxvf16ger2np (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2NP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvf16ger2np_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2NP_INTERNAL mma_pmxvf16ger2np {mma,quad}\n+\n+  void __builtin_mma_pmxvf16ger2pn (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2PN nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvf16ger2pn_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2PN_INTERNAL mma_pmxvf16ger2pn {mma,quad}\n+\n+  void __builtin_mma_pmxvf16ger2pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvf16ger2pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVF16GER2PP_INTERNAL mma_pmxvf16ger2pp {mma,quad}\n+\n+  void __builtin_mma_pmxvf32ger (v512 *, vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GER nothing {mma}\n+\n+  v512 __builtin_mma_pmxvf32ger_internal (vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GER_INTERNAL mma_pmxvf32ger {mma}\n+\n+  void __builtin_mma_pmxvf32gernn (v512 *, vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GERNN nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvf32gernn_internal (v512, vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GERNN_INTERNAL mma_pmxvf32gernn {mma,quad}\n+\n+  void __builtin_mma_pmxvf32gernp (v512 *, vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GERNP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvf32gernp_internal (v512, vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GERNP_INTERNAL mma_pmxvf32gernp {mma,quad}\n+\n+  void __builtin_mma_pmxvf32gerpn (v512 *, vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GERPN nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvf32gerpn_internal (v512, vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GERPN_INTERNAL mma_pmxvf32gerpn {mma,quad}\n+\n+  void __builtin_mma_pmxvf32gerpp (v512 *, vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GERPP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvf32gerpp_internal (v512, vuc, vuc, const int<4>, const int<4>);\n+    PMXVF32GERPP_INTERNAL mma_pmxvf32gerpp {mma,quad}\n+\n+  void __builtin_mma_pmxvf64ger (v512 *, v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GER nothing {mma,pair}\n+\n+  v512 __builtin_mma_pmxvf64ger_internal (v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GER_INTERNAL mma_pmxvf64ger {mma,pair}\n+\n+  void __builtin_mma_pmxvf64gernn (v512 *, v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GERNN nothing {mma,pair,quad}\n+\n+  v512 __builtin_mma_pmxvf64gernn_internal (v512, v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GERNN_INTERNAL mma_pmxvf64gernn {mma,pair,quad}\n+\n+  void __builtin_mma_pmxvf64gernp (v512 *, v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GERNP nothing {mma,pair,quad}\n+\n+  v512 __builtin_mma_pmxvf64gernp_internal (v512, v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GERNP_INTERNAL mma_pmxvf64gernp {mma,pair,quad}\n+\n+  void __builtin_mma_pmxvf64gerpn (v512 *, v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GERPN nothing {mma,pair,quad}\n+\n+  v512 __builtin_mma_pmxvf64gerpn_internal (v512, v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GERPN_INTERNAL mma_pmxvf64gerpn {mma,pair,quad}\n+\n+  void __builtin_mma_pmxvf64gerpp (v512 *, v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GERPP nothing {mma,pair,quad}\n+\n+  v512 __builtin_mma_pmxvf64gerpp_internal (v512, v256, vuc, const int<4>, const int<2>);\n+    PMXVF64GERPP_INTERNAL mma_pmxvf64gerpp {mma,pair,quad}\n+\n+  void __builtin_mma_pmxvi16ger2 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVI16GER2 nothing {mma}\n+\n+  v512 __builtin_mma_pmxvi16ger2_internal (vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVI16GER2_INTERNAL mma_pmxvi16ger2 {mma}\n+\n+  void __builtin_mma_pmxvi16ger2pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVI16GER2PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvi16ger2pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVI16GER2PP_INTERNAL mma_pmxvi16ger2pp {mma,quad}\n+\n+  void __builtin_mma_pmxvi16ger2s (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVI16GER2S nothing {mma}\n+\n+  v512 __builtin_mma_pmxvi16ger2s_internal (vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVI16GER2S_INTERNAL mma_pmxvi16ger2s {mma}\n+\n+  void __builtin_mma_pmxvi16ger2spp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVI16GER2SPP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvi16ger2spp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<2>);\n+    PMXVI16GER2SPP_INTERNAL mma_pmxvi16ger2spp {mma,quad}\n+\n+  void __builtin_mma_pmxvi4ger8 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<8>);\n+    PMXVI4GER8 nothing {mma}\n+\n+  v512 __builtin_mma_pmxvi4ger8_internal (vuc, vuc, const int<4>, const int<4>, const int<8>);\n+    PMXVI4GER8_INTERNAL mma_pmxvi4ger8 {mma}\n+\n+  void __builtin_mma_pmxvi4ger8pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+    PMXVI4GER8PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvi4ger8pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+    PMXVI4GER8PP_INTERNAL mma_pmxvi4ger8pp {mma,quad}\n+\n+  void __builtin_mma_pmxvi8ger4 (v512 *, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+    PMXVI8GER4 nothing {mma}\n+\n+  v512 __builtin_mma_pmxvi8ger4_internal (vuc, vuc, const int<4>, const int<4>, const int<4>);\n+    PMXVI8GER4_INTERNAL mma_pmxvi8ger4 {mma}\n+\n+  void __builtin_mma_pmxvi8ger4pp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+    PMXVI8GER4PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvi8ger4pp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+    PMXVI8GER4PP_INTERNAL mma_pmxvi8ger4pp {mma,quad}\n+\n+  void __builtin_mma_pmxvi8ger4spp (v512 *, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+    PMXVI8GER4SPP nothing {mma,quad}\n+\n+  v512 __builtin_mma_pmxvi8ger4spp_internal (v512, vuc, vuc, const int<4>, const int<4>, const int<4>);\n+    PMXVI8GER4SPP_INTERNAL mma_pmxvi8ger4spp {mma,quad}\n+\n+  void __builtin_mma_xvbf16ger2 (v512 *, vuc, vuc);\n+    XVBF16GER2 nothing {mma}\n+\n+  v512 __builtin_mma_xvbf16ger2_internal (vuc, vuc);\n+    XVBF16GER2_INTERNAL mma_xvbf16ger2 {mma}\n+\n+  void __builtin_mma_xvbf16ger2nn (v512 *, vuc, vuc);\n+    XVBF16GER2NN nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvbf16ger2nn_internal (v512, vuc, vuc);\n+    XVBF16GER2NN_INTERNAL mma_xvbf16ger2nn {mma,quad}\n+\n+  void __builtin_mma_xvbf16ger2np (v512 *, vuc, vuc);\n+    XVBF16GER2NP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvbf16ger2np_internal (v512, vuc, vuc);\n+    XVBF16GER2NP_INTERNAL mma_xvbf16ger2np {mma,quad}\n+\n+  void __builtin_mma_xvbf16ger2pn (v512 *, vuc, vuc);\n+    XVBF16GER2PN nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvbf16ger2pn_internal (v512, vuc, vuc);\n+    XVBF16GER2PN_INTERNAL mma_xvbf16ger2pn {mma,quad}\n+\n+  void __builtin_mma_xvbf16ger2pp (v512 *, vuc, vuc);\n+    XVBF16GER2PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvbf16ger2pp_internal (v512, vuc, vuc);\n+    XVBF16GER2PP_INTERNAL mma_xvbf16ger2pp {mma,quad}\n+\n+  void __builtin_mma_xvf16ger2 (v512 *, vuc, vuc);\n+    XVF16GER2 nothing {mma}\n+\n+  v512 __builtin_mma_xvf16ger2_internal (vuc, vuc);\n+    XVF16GER2_INTERNAL mma_xvf16ger2 {mma}\n+\n+  void __builtin_mma_xvf16ger2nn (v512 *, vuc, vuc);\n+    XVF16GER2NN nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvf16ger2nn_internal (v512, vuc, vuc);\n+    XVF16GER2NN_INTERNAL mma_xvf16ger2nn {mma,quad}\n+\n+  void __builtin_mma_xvf16ger2np (v512 *, vuc, vuc);\n+    XVF16GER2NP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvf16ger2np_internal (v512, vuc, vuc);\n+    XVF16GER2NP_INTERNAL mma_xvf16ger2np {mma,quad}\n+\n+  void __builtin_mma_xvf16ger2pn (v512 *, vuc, vuc);\n+    XVF16GER2PN nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvf16ger2pn_internal (v512, vuc, vuc);\n+    XVF16GER2PN_INTERNAL mma_xvf16ger2pn {mma,quad}\n+\n+  void __builtin_mma_xvf16ger2pp (v512 *, vuc, vuc);\n+    XVF16GER2PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvf16ger2pp_internal (v512, vuc, vuc);\n+    XVF16GER2PP_INTERNAL mma_xvf16ger2pp {mma,quad}\n+\n+  void __builtin_mma_xvf32ger (v512 *, vuc, vuc);\n+    XVF32GER nothing {mma}\n+\n+  v512 __builtin_mma_xvf32ger_internal (vuc, vuc);\n+    XVF32GER_INTERNAL mma_xvf32ger {mma}\n+\n+  void __builtin_mma_xvf32gernn (v512 *, vuc, vuc);\n+    XVF32GERNN nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvf32gernn_internal (v512, vuc, vuc);\n+    XVF32GERNN_INTERNAL mma_xvf32gernn {mma,quad}\n+\n+  void __builtin_mma_xvf32gernp (v512 *, vuc, vuc);\n+    XVF32GERNP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvf32gernp_internal (v512, vuc, vuc);\n+    XVF32GERNP_INTERNAL mma_xvf32gernp {mma,quad}\n+\n+  void __builtin_mma_xvf32gerpn (v512 *, vuc, vuc);\n+    XVF32GERPN nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvf32gerpn_internal (v512, vuc, vuc);\n+    XVF32GERPN_INTERNAL mma_xvf32gerpn {mma,quad}\n+\n+  void __builtin_mma_xvf32gerpp (v512 *, vuc, vuc);\n+    XVF32GERPP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvf32gerpp_internal (v512, vuc, vuc);\n+    XVF32GERPP_INTERNAL mma_xvf32gerpp {mma,quad}\n+\n+  void __builtin_mma_xvf64ger (v512 *, v256, vuc);\n+    XVF64GER nothing {mma,pair}\n+\n+  v512 __builtin_mma_xvf64ger_internal (v256, vuc);\n+    XVF64GER_INTERNAL mma_xvf64ger {mma,pair}\n+\n+  void __builtin_mma_xvf64gernn (v512 *, v256, vuc);\n+    XVF64GERNN nothing {mma,pair,quad}\n+\n+  v512 __builtin_mma_xvf64gernn_internal (v512, v256, vuc);\n+    XVF64GERNN_INTERNAL mma_xvf64gernn {mma,pair,quad}\n+\n+  void __builtin_mma_xvf64gernp (v512 *, v256, vuc);\n+    XVF64GERNP nothing {mma,pair,quad}\n+\n+  v512 __builtin_mma_xvf64gernp_internal (v512, v256, vuc);\n+    XVF64GERNP_INTERNAL mma_xvf64gernp {mma,pair,quad}\n+\n+  void __builtin_mma_xvf64gerpn (v512 *, v256, vuc);\n+    XVF64GERPN nothing {mma,pair,quad}\n+\n+  v512 __builtin_mma_xvf64gerpn_internal (v512, v256, vuc);\n+    XVF64GERPN_INTERNAL mma_xvf64gerpn {mma,pair,quad}\n+\n+  void __builtin_mma_xvf64gerpp (v512 *, v256, vuc);\n+    XVF64GERPP nothing {mma,pair,quad}\n+\n+  v512 __builtin_mma_xvf64gerpp_internal (v512, v256, vuc);\n+    XVF64GERPP_INTERNAL mma_xvf64gerpp {mma,pair,quad}\n+\n+  void __builtin_mma_xvi16ger2 (v512 *, vuc, vuc);\n+    XVI16GER2 nothing {mma}\n+\n+  v512 __builtin_mma_xvi16ger2_internal (vuc, vuc);\n+    XVI16GER2_INTERNAL mma_xvi16ger2 {mma}\n+\n+  void __builtin_mma_xvi16ger2pp (v512 *, vuc, vuc);\n+    XVI16GER2PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvi16ger2pp_internal (v512, vuc, vuc);\n+    XVI16GER2PP_INTERNAL mma_xvi16ger2pp {mma,quad}\n+\n+  void __builtin_mma_xvi16ger2s (v512 *, vuc, vuc);\n+    XVI16GER2S nothing {mma}\n+\n+  v512 __builtin_mma_xvi16ger2s_internal (vuc, vuc);\n+    XVI16GER2S_INTERNAL mma_xvi16ger2s {mma}\n+\n+  void __builtin_mma_xvi16ger2spp (v512 *, vuc, vuc);\n+    XVI16GER2SPP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvi16ger2spp_internal (v512, vuc, vuc);\n+    XVI16GER2SPP_INTERNAL mma_xvi16ger2spp {mma,quad}\n+\n+  void __builtin_mma_xvi4ger8 (v512 *, vuc, vuc);\n+    XVI4GER8 nothing {mma}\n+\n+  v512 __builtin_mma_xvi4ger8_internal (vuc, vuc);\n+    XVI4GER8_INTERNAL mma_xvi4ger8 {mma}\n+\n+  void __builtin_mma_xvi4ger8pp (v512 *, vuc, vuc);\n+    XVI4GER8PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvi4ger8pp_internal (v512, vuc, vuc);\n+    XVI4GER8PP_INTERNAL mma_xvi4ger8pp {mma,quad}\n+\n+  void __builtin_mma_xvi8ger4 (v512 *, vuc, vuc);\n+    XVI8GER4 nothing {mma}\n+\n+  v512 __builtin_mma_xvi8ger4_internal (vuc, vuc);\n+    XVI8GER4_INTERNAL mma_xvi8ger4 {mma}\n+\n+  void __builtin_mma_xvi8ger4pp (v512 *, vuc, vuc);\n+    XVI8GER4PP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvi8ger4pp_internal (v512, vuc, vuc);\n+    XVI8GER4PP_INTERNAL mma_xvi8ger4pp {mma,quad}\n+\n+  void __builtin_mma_xvi8ger4spp (v512 *, vuc, vuc);\n+    XVI8GER4SPP nothing {mma,quad}\n+\n+  v512 __builtin_mma_xvi8ger4spp_internal (v512, vuc, vuc);\n+    XVI8GER4SPP_INTERNAL mma_xvi8ger4spp {mma,quad}\n+\n+  void __builtin_mma_xxmfacc (v512 *);\n+    XXMFACC nothing {mma,quad}\n+\n+  v512 __builtin_mma_xxmfacc_internal (v512);\n+    XXMFACC_INTERNAL mma_xxmfacc {mma,quad}\n+\n+  void __builtin_mma_xxmtacc (v512 *);\n+    XXMTACC nothing {mma,quad}\n+\n+  v512 __builtin_mma_xxmtacc_internal (v512);\n+    XXMTACC_INTERNAL mma_xxmtacc {mma,quad}\n+\n+  void __builtin_mma_xxsetaccz (v512 *);\n+    XXSETACCZ nothing {mma}\n+\n+  v512 __builtin_mma_xxsetaccz_internal ();\n+    XXSETACCZ_INTERNAL mma_xxsetaccz {mma}\n+\n+  void __builtin_vsx_assemble_pair (v256 *, vuc, vuc);\n+    ASSEMBLE_PAIR_V nothing {mma}\n+\n+  v256 __builtin_vsx_assemble_pair_internal (vuc, vuc);\n+    ASSEMBLE_PAIR_V_INTERNAL vsx_assemble_pair {mma}\n+\n+  void __builtin_vsx_build_pair (v256 *, vuc, vuc);\n+    BUILD_PAIR nothing {mma}\n+\n+  v256 __builtin_vsx_build_pair_internal (vuc, vuc);\n+    BUILD_PAIR_INTERNAL vsx_assemble_pair {mma}\n+\n+  void __builtin_vsx_disassemble_pair (void *, v256 *);\n+    DISASSEMBLE_PAIR_V nothing {mma,pair}\n+\n+  vuc __builtin_vsx_disassemble_pair_internal (v256, const int<2>);\n+    DISASSEMBLE_PAIR_V_INTERNAL vsx_disassemble_pair {mma}"}]}