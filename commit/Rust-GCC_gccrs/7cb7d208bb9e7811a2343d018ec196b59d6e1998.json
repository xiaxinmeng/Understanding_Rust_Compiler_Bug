{"sha": "7cb7d208bb9e7811a2343d018ec196b59d6e1998", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiN2QyMDhiYjllNzgxMWEyMzQzZDAxOGVjMTk2YjU5ZDZlMTk5OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-10-10T14:27:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-10T14:27:59Z"}, "message": "lto-streamer-in.c (lto_input_location_bitpack): Rename to ...\n\n2012-10-10  Richard Biener  <rguenther@suse.de>\n\n\t* lto-streamer-in.c (lto_input_location_bitpack): Rename to ...\n\t(lto_input_location): ... this.  Kill original.\n\t(input_eh_region): Adjust.\n\t(input_struct_function_base): Likewise.\n\t(lto_read_tree): Likewise.\n\t* lto-streamer-out.c (lto_output_location_bitpack): Rename to ...\n\t(lto_output_location): ... this.  Kill original.\n\t(lto_write_tree): Adjust.\n\t(output_eh_region): Likewise.\n\t(output_struct_function_base): Likewise.\n\t* lto-streamer.c (lto_streamer_hooks_init): Initialize location\n\thooks.\n\t* lto-streamer.h (lto_input_location): Adjust prototype.\n\t(lto_output_location): Likewise.\n\t* streamer-hooks.h (struct streamer_hooks): Adjust prototype\n\tof input_location and output_location hooks.\n\t(stream_input_location): New define.\n\t(stream_output_location): Likewise.\n\t* tree-streamer-in.c (unpack_ts_block_value_fields): Adjust.\n\t(unpack_value_fields): Likewise.\n\t(streamer_read_tree_bitfields): Likewise.\n\t(lto_input_ts_decl_minimal_tree_pointers): Likewise.\n\t(lto_input_ts_exp_tree_pointers): Likewise.\n\t(lto_input_ts_block_tree_pointers): Likewise.\n\t* tree-streamer-out.c (pack_ts_block_value_fields): Adjust.\n\t(streamer_pack_tree_bitfields): Likewise.\n\t(write_ts_decl_minimal_tree_pointers): Likewise.\n\t(write_ts_exp_tree_pointers): Likewise.\n\t(write_ts_block_tree_pointers): Likewise.\n\t* gimple-streamer-in.c (input_phi): Adjust.\n\t(input_gimple_stmt): Likewise.\n\t* gimple-streamer-out.c (output_phi): Adjust.\n\t(output_gimple_stmt): Likewise.\n\t* tree-streamer.h (streamer_read_tree_bitfields): Adjust prototype.\n\t(streamer_pack_tree_bitfields): Likewise.\n\nFrom-SVN: r192317", "tree": {"sha": "3534db32ee5430daa60040a605add057d9c96f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3534db32ee5430daa60040a605add057d9c96f94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cb7d208bb9e7811a2343d018ec196b59d6e1998", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb7d208bb9e7811a2343d018ec196b59d6e1998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb7d208bb9e7811a2343d018ec196b59d6e1998", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb7d208bb9e7811a2343d018ec196b59d6e1998/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fc5b387d7eeeffbaf6955920fb0e70d2bcd563b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc5b387d7eeeffbaf6955920fb0e70d2bcd563b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc5b387d7eeeffbaf6955920fb0e70d2bcd563b"}], "stats": {"total": 230, "additions": 127, "deletions": 103}, "files": [{"sha": "dfe39b431f47fd21a81d4cf0b930847e231e861b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -1,3 +1,41 @@\n+2012-10-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-streamer-in.c (lto_input_location_bitpack): Rename to ...\n+\t(lto_input_location): ... this.  Kill original.\n+\t(input_eh_region): Adjust.\n+\t(input_struct_function_base): Likewise.\n+\t(lto_read_tree): Likewise.\n+\t* lto-streamer-out.c (lto_output_location_bitpack): Rename to ...\n+\t(lto_output_location): ... this.  Kill original.\n+\t(lto_write_tree): Adjust.\n+\t(output_eh_region): Likewise.\n+\t(output_struct_function_base): Likewise.\n+\t* lto-streamer.c (lto_streamer_hooks_init): Initialize location\n+\thooks.\n+\t* lto-streamer.h (lto_input_location): Adjust prototype.\n+\t(lto_output_location): Likewise.\n+\t* streamer-hooks.h (struct streamer_hooks): Adjust prototype\n+\tof input_location and output_location hooks.\n+\t(stream_input_location): New define.\n+\t(stream_output_location): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_block_value_fields): Adjust.\n+\t(unpack_value_fields): Likewise.\n+\t(streamer_read_tree_bitfields): Likewise.\n+\t(lto_input_ts_decl_minimal_tree_pointers): Likewise.\n+\t(lto_input_ts_exp_tree_pointers): Likewise.\n+\t(lto_input_ts_block_tree_pointers): Likewise.\n+\t* tree-streamer-out.c (pack_ts_block_value_fields): Adjust.\n+\t(streamer_pack_tree_bitfields): Likewise.\n+\t(write_ts_decl_minimal_tree_pointers): Likewise.\n+\t(write_ts_exp_tree_pointers): Likewise.\n+\t(write_ts_block_tree_pointers): Likewise.\n+\t* gimple-streamer-in.c (input_phi): Adjust.\n+\t(input_gimple_stmt): Likewise.\n+\t* gimple-streamer-out.c (output_phi): Adjust.\n+\t(output_gimple_stmt): Likewise.\n+\t* tree-streamer.h (streamer_read_tree_bitfields): Adjust prototype.\n+\t(streamer_pack_tree_bitfields): Likewise.\n+\n 2012-10-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (altivec_expand_dst_builtin): Fix signed"}, {"sha": "0ad0fb1acfaeb90ae465deed6f407a6c81ed3389", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -53,7 +53,8 @@ input_phi (struct lto_input_block *ib, basic_block bb, struct data_in *data_in,\n     {\n       tree def = stream_read_tree (ib, data_in);\n       int src_index = streamer_read_uhwi (ib);\n-      location_t arg_loc = lto_input_location (ib, data_in);\n+      bitpack_d bp = streamer_read_bitpack (ib);\n+      location_t arg_loc = stream_input_location (&bp, data_in);\n       basic_block sbb = BASIC_BLOCK_FOR_FUNCTION (fn, src_index);\n \n       edge e = NULL;\n@@ -99,7 +100,7 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n   stmt->gsbase.subcode = bp_unpack_var_len_unsigned (&bp);\n \n   /* Read location information.  */\n-  gimple_set_location (stmt, lto_input_location (ib, data_in));\n+  gimple_set_location (stmt, stream_input_location (&bp, data_in));\n \n   /* Read lexical block reference.  */\n   gimple_set_block (stmt, stream_read_tree (ib, data_in));"}, {"sha": "e49400b34de2c9a42713bb8a796f289afd8e08c8", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -43,7 +43,9 @@ output_phi (struct output_block *ob, gimple phi)\n     {\n       stream_write_tree (ob, gimple_phi_arg_def (phi, i), true);\n       streamer_write_uhwi (ob, gimple_phi_arg_edge (phi, i)->src->index);\n-      lto_output_location (ob, gimple_phi_arg_location (phi, i));\n+      bitpack_d bp = bitpack_create (ob->main_stream);\n+      stream_output_location (ob, &bp, gimple_phi_arg_location (phi, i));\n+      streamer_write_bitpack (&bp);\n     }\n }\n \n@@ -71,10 +73,10 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n     bp_pack_value (&bp, gimple_assign_nontemporal_move_p (stmt), 1);\n   bp_pack_value (&bp, gimple_has_volatile_ops (stmt), 1);\n   bp_pack_var_len_unsigned (&bp, stmt->gsbase.subcode);\n-  streamer_write_bitpack (&bp);\n \n   /* Emit location information for the statement.  */\n-  lto_output_location (ob, LOCATION_LOCUS (gimple_location (stmt)));\n+  stream_output_location (ob, &bp, LOCATION_LOCUS (gimple_location (stmt)));\n+  streamer_write_bitpack (&bp);\n \n   /* Emit the lexical block holding STMT.  */\n   stream_write_tree (ob, gimple_block (stmt), true);"}, {"sha": "a5d13eec5ff0dbc6a35f18080a6fd5e4d6bc551e", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -138,8 +138,8 @@ clear_line_info (struct data_in *data_in)\n \n /* Read a location bitpack from input block IB.  */\n \n-static location_t\n-lto_input_location_bitpack (struct data_in *data_in, struct bitpack_d *bp)\n+location_t\n+lto_input_location (struct bitpack_d *bp, struct data_in *data_in)\n {\n   bool file_change, line_change, column_change;\n   unsigned len;\n@@ -178,26 +178,6 @@ lto_input_location_bitpack (struct data_in *data_in, struct bitpack_d *bp)\n }\n \n \n-/* Read a location from input block IB.\n-   If the input_location streamer hook exists, call it.\n-   Otherwise, proceed with reading the location from the\n-   expanded location bitpack.  */\n-\n-location_t\n-lto_input_location (struct lto_input_block *ib, struct data_in *data_in)\n-{\n-  if (streamer_hooks.input_location)\n-    return streamer_hooks.input_location (ib, data_in);\n-  else\n-    {\n-      struct bitpack_d bp;\n-\n-      bp = streamer_read_bitpack (ib);\n-      return lto_input_location_bitpack (data_in, &bp);\n-    }\n-}\n-\n-\n /* Read a reference to a tree node from DATA_IN using input block IB.\n    TAG is the expected node that should be found in IB, if TAG belongs\n    to one of the indexable trees, expect to read a reference index to\n@@ -368,9 +348,13 @@ input_eh_region (struct lto_input_block *ib, struct data_in *data_in, int ix)\n \tbreak;\n \n       case LTO_ert_must_not_throw:\n-\tr->type = ERT_MUST_NOT_THROW;\n-\tr->u.must_not_throw.failure_decl = stream_read_tree (ib, data_in);\n-\tr->u.must_not_throw.failure_loc = lto_input_location (ib, data_in);\n+\t{\n+\t  r->type = ERT_MUST_NOT_THROW;\n+\t  r->u.must_not_throw.failure_decl = stream_read_tree (ib, data_in);\n+\t  bitpack_d bp = streamer_read_bitpack (ib);\n+\t  r->u.must_not_throw.failure_loc\n+\t   = stream_input_location (&bp, data_in);\n+\t}\n \tbreak;\n \n       default:\n@@ -786,10 +770,6 @@ input_struct_function_base (struct function *fn, struct data_in *data_in,\n \t}\n     }\n \n-  /* Input the function start and end loci.  */\n-  fn->function_start_locus = lto_input_location (ib, data_in);\n-  fn->function_end_locus = lto_input_location (ib, data_in);\n-\n   /* Input the current IL state of the function.  */\n   fn->curr_properties = streamer_read_uhwi (ib);\n \n@@ -809,6 +789,10 @@ input_struct_function_base (struct function *fn, struct data_in *data_in,\n   fn->calls_setjmp = bp_unpack_value (&bp, 1);\n   fn->va_list_fpr_size = bp_unpack_value (&bp, 8);\n   fn->va_list_gpr_size = bp_unpack_value (&bp, 8);\n+\n+  /* Input the function start and end loci.  */\n+  fn->function_start_locus = stream_input_location (&bp, data_in);\n+  fn->function_end_locus = stream_input_location (&bp, data_in);\n }\n \n \n@@ -1041,7 +1025,7 @@ lto_read_tree (struct lto_input_block *ib, struct data_in *data_in,\n   /* Read all the bitfield values in RESULT.  Note that for LTO, we\n      only write language-independent bitfields, so no more unpacking is\n      needed.  */\n-  streamer_read_tree_bitfields (ib, result);\n+  streamer_read_tree_bitfields (ib, data_in, result);\n \n   /* Read all the pointer fields in RESULT.  */\n   streamer_read_tree_body (ib, data_in, result);"}, {"sha": "55a20dd134b44f6b67109f5a570eb87cac4caaaf", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -148,10 +148,9 @@ tree_is_indexable (tree t)\n    After outputting bitpack, lto_output_location_data has\n    to be done to output actual data.  */\n \n-static inline void\n-lto_output_location_bitpack (struct bitpack_d *bp,\n-\t\t\t     struct output_block *ob,\n-\t\t\t     location_t loc)\n+void\n+lto_output_location (struct output_block *ob, struct bitpack_d *bp,\n+\t\t     location_t loc)\n {\n   expanded_location xloc;\n \n@@ -182,25 +181,6 @@ lto_output_location_bitpack (struct bitpack_d *bp,\n }\n \n \n-/* Emit location LOC to output block OB.\n-   If the output_location streamer hook exists, call it.\n-   Otherwise, when bitpack is handy, it is more space efficient to call\n-   lto_output_location_bitpack with existing bitpack.  */\n-\n-void\n-lto_output_location (struct output_block *ob, location_t loc)\n-{\n-  if (streamer_hooks.output_location)\n-    streamer_hooks.output_location (ob, loc);\n-  else\n-    {\n-      struct bitpack_d bp = bitpack_create (ob->main_stream);\n-      lto_output_location_bitpack (&bp, ob, loc);\n-      streamer_write_bitpack (&bp);\n-    }\n-}\n-\n-\n /* If EXPR is an indexable tree node, output a reference to it to\n    output block OB.  Otherwise, output the physical representation of\n    EXPR to OB.  */\n@@ -333,7 +313,7 @@ lto_write_tree (struct output_block *ob, tree expr, bool ref_p)\n   /* Pack all the non-pointer fields in EXPR into a bitpack and write\n      the resulting bitpack.  */\n   bp = bitpack_create (ob->main_stream);\n-  streamer_pack_tree_bitfields (&bp, expr);\n+  streamer_pack_tree_bitfields (ob, &bp, expr);\n   streamer_write_bitpack (&bp);\n \n   /* Write all the pointer fields in EXPR.  */\n@@ -505,7 +485,9 @@ output_eh_region (struct output_block *ob, eh_region r)\n   else if (r->type == ERT_MUST_NOT_THROW)\n     {\n       stream_write_tree (ob, r->u.must_not_throw.failure_decl, true);\n-      lto_output_location (ob, r->u.must_not_throw.failure_loc);\n+      bitpack_d bp = bitpack_create (ob->main_stream);\n+      stream_output_location (ob, &bp, r->u.must_not_throw.failure_loc);\n+      streamer_write_bitpack (&bp);\n     }\n \n   if (r->landing_pads)\n@@ -751,10 +733,6 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n   FOR_EACH_VEC_ELT (tree, fn->local_decls, i, t)\n     stream_write_tree (ob, t, true);\n \n-  /* Output the function start and end loci.  */\n-  lto_output_location (ob, fn->function_start_locus);\n-  lto_output_location (ob, fn->function_end_locus);\n-\n   /* Output current IL state of the function.  */\n   streamer_write_uhwi (ob, fn->curr_properties);\n \n@@ -774,6 +752,11 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n   bp_pack_value (&bp, fn->calls_setjmp, 1);\n   bp_pack_value (&bp, fn->va_list_fpr_size, 8);\n   bp_pack_value (&bp, fn->va_list_gpr_size, 8);\n+\n+  /* Output the function start and end loci.  */\n+  stream_output_location (ob, &bp, fn->function_start_locus);\n+  stream_output_location (ob, &bp, fn->function_end_locus);\n+\n   streamer_write_bitpack (&bp);\n }\n "}, {"sha": "a338df0f28c6e821e1b488b717eeafc4a5d20b9c", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -387,4 +387,6 @@ lto_streamer_hooks_init (void)\n   streamer_hooks_init ();\n   streamer_hooks.write_tree = lto_output_tree;\n   streamer_hooks.read_tree = lto_input_tree;\n+  streamer_hooks.input_location = lto_input_location;\n+  streamer_hooks.output_location = lto_output_location;\n }"}, {"sha": "c7b7ef94871f546846a1173bfe18903a087b3b73", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -809,7 +809,7 @@ extern struct data_in *lto_data_in_create (struct lto_file_decl_data *,\n \t\t\t\t    VEC(ld_plugin_symbol_resolution_t,heap) *);\n extern void lto_data_in_delete (struct data_in *);\n extern void lto_input_data_block (struct lto_input_block *, void *, size_t);\n-location_t lto_input_location (struct lto_input_block *, struct data_in *);\n+location_t lto_input_location (struct bitpack_d *, struct data_in *);\n tree lto_input_tree_ref (struct lto_input_block *, struct data_in *,\n \t\t\t struct function *, enum LTO_tags);\n void lto_tag_check_set (enum LTO_tags, int, ...);\n@@ -829,7 +829,7 @@ void lto_output_decl_state_streams (struct output_block *,\n void lto_output_decl_state_refs (struct output_block *,\n \t\t\t         struct lto_output_stream *,\n \t\t\t         struct lto_out_decl_state *);\n-void lto_output_location (struct output_block *, location_t);\n+void lto_output_location (struct output_block *, struct bitpack_d *, location_t);\n \n \n /* In lto-cgraph.c  */"}, {"sha": "03de155d2dc72b7cc387dc76129d6b4de5bc7ec8", "filename": "gcc/streamer-hooks.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Fstreamer-hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Fstreamer-hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstreamer-hooks.h?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -53,15 +53,11 @@ struct streamer_hooks {\n      tree instantiated from the stream.  */\n   tree (*read_tree) (struct lto_input_block *, struct data_in *);\n \n-  /* [OPT] Called by lto_input_location to retrieve the source location of the\n-     tree currently being read. If this hook returns NULL, lto_input_location\n-     defaults to calling lto_input_location_bitpack.  */\n-  location_t (*input_location) (struct lto_input_block *, struct data_in *);\n-\n-  /* [OPT] Called by lto_output_location to write the source_location of the\n-     tree currently being written. If this hook returns NULL,\n-     lto_output_location defaults to calling lto_output_location_bitpack.  */\n-  void (*output_location) (struct output_block *, location_t);\n+  /* [REQ] Called by every streaming routine that needs to read a location.  */\n+  location_t (*input_location) (struct bitpack_d *, struct data_in *);\n+\n+  /* [REQ] Called by every streaming routine that needs to write a location.  */\n+  void (*output_location) (struct output_block *, struct bitpack_d *, location_t);\n };\n \n #define stream_write_tree(OB, EXPR, REF_P) \\\n@@ -73,6 +69,12 @@ struct streamer_hooks {\n #define stream_read_tree(IB, DATA_IN) \\\n     streamer_hooks.read_tree(IB, DATA_IN)\n \n+#define stream_input_location(BP, DATA_IN) \\\n+    streamer_hooks.input_location(BP, DATA_IN)\n+\n+#define stream_output_location(OB, BP, LOC) \\\n+    streamer_hooks.output_location(OB, BP, LOC)\n+\n /* Streamer hooks.  */\n extern struct streamer_hooks streamer_hooks;\n "}, {"sha": "cfaaf4538b70dddc3363b32ad50ecbfe932c0c25", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -179,7 +179,6 @@ unpack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n   TREE_FIXED_CST_PTR (expr) = fp;\n }\n \n-\n /* Unpack all the non-pointer fields of the TS_DECL_COMMON structure\n    of expression EXPR from bitpack BP.  */\n \n@@ -355,10 +354,12 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n    of expression EXPR from bitpack BP.  */\n \n static void\n-unpack_ts_block_value_fields (struct bitpack_d *bp, tree expr)\n+unpack_ts_block_value_fields (struct data_in *data_in,\n+\t\t\t      struct bitpack_d *bp, tree expr)\n {\n   BLOCK_ABSTRACT (expr) = (unsigned) bp_unpack_value (bp, 1);\n   /* BLOCK_NUMBER is recomputed.  */\n+  BLOCK_SOURCE_LOCATION (expr) = stream_input_location (bp, data_in);\n }\n \n /* Unpack all the non-pointer fields of the TS_TRANSLATION_UNIT_DECL\n@@ -372,7 +373,7 @@ unpack_ts_translation_unit_decl_value_fields (struct bitpack_d *bp ATTRIBUTE_UNU\n /* Unpack all the non-pointer fields in EXPR into a bit pack.  */\n \n static void\n-unpack_value_fields (struct bitpack_d *bp, tree expr)\n+unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n {\n   enum tree_code code;\n \n@@ -388,6 +389,9 @@ unpack_value_fields (struct bitpack_d *bp, tree expr)\n   if (CODE_CONTAINS_STRUCT (code, TS_FIXED_CST))\n     unpack_ts_fixed_cst_value_fields (bp, expr);\n \n+  if (CODE_CONTAINS_STRUCT (code, TS_DECL_MINIMAL))\n+    DECL_SOURCE_LOCATION (expr) = stream_input_location (bp, data_in);\n+\n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n     unpack_ts_decl_common_value_fields (bp, expr);\n \n@@ -403,8 +407,11 @@ unpack_value_fields (struct bitpack_d *bp, tree expr)\n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))\n     unpack_ts_type_common_value_fields (bp, expr);\n \n+  if (CODE_CONTAINS_STRUCT (code, TS_EXP))\n+    SET_EXPR_LOCATION (expr, stream_input_location (bp, data_in));\n+\n   if (CODE_CONTAINS_STRUCT (code, TS_BLOCK))\n-    unpack_ts_block_value_fields (bp, expr);\n+    unpack_ts_block_value_fields (data_in, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n     unpack_ts_translation_unit_decl_value_fields (bp, expr);\n@@ -416,7 +423,8 @@ unpack_value_fields (struct bitpack_d *bp, tree expr)\n    bitfield values that the writer may have written.  */\n \n struct bitpack_d\n-streamer_read_tree_bitfields (struct lto_input_block *ib, tree expr)\n+streamer_read_tree_bitfields (struct lto_input_block *ib,\n+\t\t\t      struct data_in *data_in, tree expr)\n {\n   enum tree_code code;\n   struct bitpack_d bp;\n@@ -431,7 +439,7 @@ streamer_read_tree_bitfields (struct lto_input_block *ib, tree expr)\n \t\t lto_tree_code_to_tag (TREE_CODE (expr)));\n \n   /* Unpack all the value fields from BP.  */\n-  unpack_value_fields (&bp, expr);\n+  unpack_value_fields (data_in, &bp, expr);\n \n   return bp;\n }\n@@ -563,7 +571,6 @@ lto_input_ts_decl_minimal_tree_pointers (struct lto_input_block *ib,\n {\n   DECL_NAME (expr) = stream_read_tree (ib, data_in);\n   DECL_CONTEXT (expr) = stream_read_tree (ib, data_in);\n-  DECL_SOURCE_LOCATION (expr) = lto_input_location (ib, data_in);\n }\n \n \n@@ -770,16 +777,13 @@ lto_input_ts_exp_tree_pointers (struct lto_input_block *ib,\n \t\t\t        struct data_in *data_in, tree expr)\n {\n   int i, length;\n-  location_t loc;\n \n   length = streamer_read_hwi (ib);\n   gcc_assert (length == TREE_OPERAND_LENGTH (expr));\n \n   for (i = 0; i < length; i++)\n     TREE_OPERAND (expr, i) = stream_read_tree (ib, data_in);\n \n-  loc = lto_input_location (ib, data_in);\n-  SET_EXPR_LOCATION (expr, loc);\n   TREE_SET_BLOCK (expr, stream_read_tree (ib, data_in));\n }\n \n@@ -801,7 +805,6 @@ lto_input_ts_block_tree_pointers (struct lto_input_block *ib,\n      function scopes.  For the rest them on the floor instead of ICEing in\n      dwarf2out.c.  */\n   BLOCK_ABSTRACT_ORIGIN (expr) = stream_read_tree (ib, data_in);\n-  BLOCK_SOURCE_LOCATION (expr) = lto_input_location (ib, data_in);\n   /* Do not stream BLOCK_NONLOCALIZED_VARS.  We cannot handle debug information\n      for early inlined BLOCKs so drop it on the floor instead of ICEing in\n      dwarf2out.c.  */"}, {"sha": "73ffb301fdac51c14ded788a980b3e88e3a57723", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -145,7 +145,6 @@ pack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_var_len_int (bp, fv.data.high);\n }\n \n-\n /* Pack all the non-pointer fields of the TS_DECL_COMMON structure\n    of expression EXPR into bitpack BP.  */\n \n@@ -299,10 +298,18 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n    of expression EXPR into bitpack BP.  */\n \n static void\n-pack_ts_block_value_fields (struct bitpack_d *bp, tree expr)\n+pack_ts_block_value_fields (struct output_block *ob,\n+\t\t\t    struct bitpack_d *bp, tree expr)\n {\n   bp_pack_value (bp, BLOCK_ABSTRACT (expr), 1);\n   /* BLOCK_NUMBER is recomputed.  */\n+  /* Stream BLOCK_SOURCE_LOCATION for the limited cases we can handle - those\n+     that represent inlined function scopes.\n+     For the rest them on the floor instead of ICEing in dwarf2out.c.  */\n+  if (inlined_function_outer_scope_p (expr))\n+    stream_output_location (ob, bp, BLOCK_SOURCE_LOCATION (expr));\n+  else\n+    stream_output_location (ob, bp, UNKNOWN_LOCATION);\n }\n \n /* Pack all the non-pointer fields of the TS_TRANSLATION_UNIT_DECL structure\n@@ -317,7 +324,8 @@ pack_ts_translation_unit_decl_value_fields (struct bitpack_d *bp ATTRIBUTE_UNUSE\n /* Pack all the bitfields in EXPR into a bit pack.  */\n \n void\n-streamer_pack_tree_bitfields (struct bitpack_d *bp, tree expr)\n+streamer_pack_tree_bitfields (struct output_block *ob,\n+\t\t\t      struct bitpack_d *bp, tree expr)\n {\n   enum tree_code code;\n \n@@ -333,6 +341,9 @@ streamer_pack_tree_bitfields (struct bitpack_d *bp, tree expr)\n   if (CODE_CONTAINS_STRUCT (code, TS_FIXED_CST))\n     pack_ts_fixed_cst_value_fields (bp, expr);\n \n+  if (CODE_CONTAINS_STRUCT (code, TS_DECL_MINIMAL))\n+    stream_output_location (ob, bp, DECL_SOURCE_LOCATION (expr));\n+\n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n     pack_ts_decl_common_value_fields (bp, expr);\n \n@@ -348,8 +359,11 @@ streamer_pack_tree_bitfields (struct bitpack_d *bp, tree expr)\n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))\n     pack_ts_type_common_value_fields (bp, expr);\n \n+  if (CODE_CONTAINS_STRUCT (code, TS_EXP))\n+    stream_output_location (ob, bp, EXPR_LOCATION (expr));\n+\n   if (CODE_CONTAINS_STRUCT (code, TS_BLOCK))\n-    pack_ts_block_value_fields (bp, expr);\n+    pack_ts_block_value_fields (ob, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n     pack_ts_translation_unit_decl_value_fields (bp, expr);\n@@ -476,7 +490,6 @@ write_ts_decl_minimal_tree_pointers (struct output_block *ob, tree expr,\n {\n   stream_write_tree (ob, DECL_NAME (expr), ref_p);\n   stream_write_tree (ob, DECL_CONTEXT (expr), ref_p);\n-  lto_output_location (ob, LOCATION_LOCUS (DECL_SOURCE_LOCATION (expr)));\n }\n \n \n@@ -673,7 +686,6 @@ write_ts_exp_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n   streamer_write_hwi (ob, TREE_OPERAND_LENGTH (expr));\n   for (i = 0; i < TREE_OPERAND_LENGTH (expr); i++)\n     stream_write_tree (ob, TREE_OPERAND (expr, i), ref_p);\n-  lto_output_location (ob, LOCATION_LOCUS (EXPR_LOCATION (expr)));\n   stream_write_tree (ob, TREE_BLOCK (expr), ref_p);\n }\n \n@@ -689,21 +701,16 @@ write_ts_block_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n \n   stream_write_tree (ob, BLOCK_SUPERCONTEXT (expr), ref_p);\n \n-  /* Stream BLOCK_ABSTRACT_ORIGIN and BLOCK_SOURCE_LOCATION for\n-     the limited cases we can handle - those that represent inlined\n-     function scopes.  For the rest them on the floor instead of ICEing in\n-     dwarf2out.c.  */\n+  /* Stream BLOCK_ABSTRACT_ORIGIN for the limited cases we can handle - those\n+     that represent inlined function scopes.\n+     For the rest them on the floor instead of ICEing in dwarf2out.c.  */\n   if (inlined_function_outer_scope_p (expr))\n     {\n       tree ultimate_origin = block_ultimate_origin (expr);\n       stream_write_tree (ob, ultimate_origin, ref_p);\n-      lto_output_location (ob, BLOCK_SOURCE_LOCATION (expr));\n     }\n   else\n-    {\n-      stream_write_tree (ob, NULL_TREE, ref_p);\n-      lto_output_location (ob, UNKNOWN_LOCATION);\n-    }\n+    stream_write_tree (ob, NULL_TREE, ref_p);\n   /* Do not stream BLOCK_NONLOCALIZED_VARS.  We cannot handle debug information\n      for early inlined BLOCKs so drop it on the floor instead of ICEing in\n      dwarf2out.c.  */"}, {"sha": "778712b3e20cb82371661fa79c1c98bda2a5cce2", "filename": "gcc/tree-streamer.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Ftree-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb7d208bb9e7811a2343d018ec196b59d6e1998/gcc%2Ftree-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.h?ref=7cb7d208bb9e7811a2343d018ec196b59d6e1998", "patch": "@@ -72,14 +72,16 @@ void streamer_read_tree_body (struct lto_input_block *, struct data_in *, tree);\n tree streamer_get_pickled_tree (struct lto_input_block *, struct data_in *);\n tree streamer_get_builtin_tree (struct lto_input_block *, struct data_in *);\n tree streamer_read_integer_cst (struct lto_input_block *, struct data_in *);\n-struct bitpack_d streamer_read_tree_bitfields (struct lto_input_block *, tree);\n+struct bitpack_d streamer_read_tree_bitfields (struct lto_input_block *,\n+\t\t\t\t\t       struct data_in *, tree);\n \n /* In tree-streamer-out.c.  */\n void streamer_write_string_cst (struct output_block *,\n \t\t\t\tstruct lto_output_stream *, tree);\n void streamer_write_chain (struct output_block *, tree, bool);\n void streamer_write_tree_header (struct output_block *, tree);\n-void streamer_pack_tree_bitfields (struct bitpack_d *, tree);\n+void streamer_pack_tree_bitfields (struct output_block *, struct bitpack_d *,\n+\t\t\t\t   tree);\n void streamer_write_tree_body (struct output_block *, tree, bool);\n void streamer_write_integer_cst (struct output_block *, tree, bool);\n void streamer_write_builtin (struct output_block *, tree);"}]}