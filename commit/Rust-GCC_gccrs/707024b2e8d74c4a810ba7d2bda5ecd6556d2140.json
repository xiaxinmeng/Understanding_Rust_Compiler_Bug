{"sha": "707024b2e8d74c4a810ba7d2bda5ecd6556d2140", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA3MDI0YjJlOGQ3NGM0YTgxMGJhN2QyYmRhNWVjZDY1NTZkMjE0MA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-12-18T13:22:13Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-12-18T13:22:13Z"}, "message": "re PR fortran/78848 ([OOP] ICE on writing CLASS variable with non-typebound DTIO procedure)\n\n2016-12-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/78848\n\t* trans-io.c (get_dtio_proc): Generate non-typebound DTIO call for class\n\tvariables, if no typebound DTIO procedure is available.\n\n2016-12-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/78848\n\t* gfortran.dg/dtio_22.f90: New test.\n\nFrom-SVN: r243784", "tree": {"sha": "b9d6cf3db49054b6bab44ff447099c387bc054f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9d6cf3db49054b6bab44ff447099c387bc054f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/707024b2e8d74c4a810ba7d2bda5ecd6556d2140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707024b2e8d74c4a810ba7d2bda5ecd6556d2140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707024b2e8d74c4a810ba7d2bda5ecd6556d2140", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707024b2e8d74c4a810ba7d2bda5ecd6556d2140/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413e859cdf69f402e64da550f6513021eb173fdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413e859cdf69f402e64da550f6513021eb173fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413e859cdf69f402e64da550f6513021eb173fdc"}], "stats": {"total": 94, "additions": 68, "deletions": 26}, "files": [{"sha": "d718a3fbbaf0122a56e7a98f904b8c2be188c030", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707024b2e8d74c4a810ba7d2bda5ecd6556d2140/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707024b2e8d74c4a810ba7d2bda5ecd6556d2140/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=707024b2e8d74c4a810ba7d2bda5ecd6556d2140", "patch": "@@ -1,3 +1,9 @@\n+2016-12-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/78848\n+\t* trans-io.c (get_dtio_proc): Generate non-typebound DTIO call for class\n+\tvariables, if no typebound DTIO procedure is available.\n+\n 2016-12-18  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/78592"}, {"sha": "5f9c191968576e7b3378c3af1d8494ff3a7730fd", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707024b2e8d74c4a810ba7d2bda5ecd6556d2140/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707024b2e8d74c4a810ba7d2bda5ecd6556d2140/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=707024b2e8d74c4a810ba7d2bda5ecd6556d2140", "patch": "@@ -2180,41 +2180,39 @@ get_dtio_proc (gfc_typespec * ts, gfc_code * code, gfc_symbol **dtio_sub)\n       formatted = true;\n     }\n \n-  if (ts->type == BT_DERIVED)\n+  if (ts->type == BT_CLASS)\n+    derived = ts->u.derived->components->ts.u.derived;\n+  else\n+    derived = ts->u.derived;\n+\n+  gfc_symtree *tb_io_st = gfc_find_typebound_dtio_proc (derived,\n+\t\t\t\t\t\t  last_dt == WRITE, formatted);\n+  if (ts->type == BT_CLASS && tb_io_st)\n+    {\n+      // polymorphic DTIO call  (based on the dynamic type)\n+      gfc_se se;\n+      gfc_expr *expr = gfc_find_and_cut_at_last_class_ref (code->expr1);\n+      gfc_add_vptr_component (expr);\n+      gfc_add_component_ref (expr,\n+\t\t\t     tb_io_st->n.tb->u.generic->specific_st->name);\n+      *dtio_sub = tb_io_st->n.tb->u.generic->specific->u.specific->n.sym;\n+      gfc_init_se (&se, NULL);\n+      se.want_pointer = 1;\n+      gfc_conv_expr (&se, expr);\n+      gfc_free_expr (expr);\n+      return se.expr;\n+    }\n+  else\n     {\n-      derived = ts->u.derived;\n+      // non-polymorphic DTIO call (based on the declared type)\n       *dtio_sub = gfc_find_specific_dtio_proc (derived, last_dt == WRITE,\n \t\t\t\t\t      formatted);\n \n       if (*dtio_sub)\n \treturn gfc_build_addr_expr (NULL, gfc_get_symbol_decl (*dtio_sub));\n     }\n-  else if (ts->type == BT_CLASS)\n-    {\n-      gfc_symtree *tb_io_st;\n-\n-      derived = ts->u.derived->components->ts.u.derived;\n-      tb_io_st = gfc_find_typebound_dtio_proc (derived,\n-\t\t\t\t\t       last_dt == WRITE, formatted);\n-      if (tb_io_st)\n-\t{\n-\t  gfc_se se;\n-\t  gfc_expr *expr = gfc_find_and_cut_at_last_class_ref (code->expr1);\n-\t  gfc_add_vptr_component (expr);\n-\t  gfc_add_component_ref (expr,\n-\t\t\t\t tb_io_st->n.tb->u.generic->specific_st->name);\n-\t  *dtio_sub = tb_io_st->n.tb->u.generic->specific->u.specific->n.sym;\n-\t  gfc_init_se (&se, NULL);\n-\t  se.want_pointer = 1;\n-\t  gfc_conv_expr (&se, expr);\n-\t  gfc_free_expr (expr);\n-\t  return se.expr;\n-\t}\n-    }\n-\n \n   return NULL_TREE;\n-\n }\n \n /* Generate the call for a scalar transfer node.  */"}, {"sha": "7b91b7b86b0601c82ee2be715eef1d7f77b6dfc3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707024b2e8d74c4a810ba7d2bda5ecd6556d2140/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707024b2e8d74c4a810ba7d2bda5ecd6556d2140/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=707024b2e8d74c4a810ba7d2bda5ecd6556d2140", "patch": "@@ -1,3 +1,8 @@\n+2016-12-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/78848\n+\t* gfortran.dg/dtio_22.f90: New test.\n+\n 2016-12-18  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/78592"}, {"sha": "f39450cbca2f9ae55ff9eec239fdf0efd9e51081", "filename": "gcc/testsuite/gfortran.dg/dtio_22.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707024b2e8d74c4a810ba7d2bda5ecd6556d2140/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707024b2e8d74c4a810ba7d2bda5ecd6556d2140/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_22.f90?ref=707024b2e8d74c4a810ba7d2bda5ecd6556d2140", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+!\n+! PR 78848: [OOP] ICE on writing CLASS variable with non-typebound DTIO procedure\n+!\n+! Contributed by Mikael Morin <morin-mikael@orange.fr>\n+\n+module m\n+  type :: t\n+    integer :: i = 123\n+  end type\n+  interface write(formatted)\n+    procedure wf\n+  end interface\n+contains\n+  subroutine wf(this, unit, b, c, iostat, iomsg)\n+    class(t), intent(in) :: this\n+    integer, intent(in) :: unit\n+    character, intent(in) :: b\n+    integer, intent(in) :: c(:)\n+    integer, intent(out) :: iostat\n+    character, intent(inout) :: iomsg\n+    write (unit, \"(i3)\", IOSTAT=iostat, IOMSG=iomsg) this%i\n+  end subroutine\n+end\n+\n+program p\n+  use m\n+  character(3) :: buffer\n+  class(t), allocatable :: z\n+  allocate(z)\n+  write(buffer,\"(DT)\") z\n+  if (buffer /= \"123\") call abort()\n+end"}]}