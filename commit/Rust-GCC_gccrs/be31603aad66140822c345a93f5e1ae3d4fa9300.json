{"sha": "be31603aad66140822c345a93f5e1ae3d4fa9300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUzMTYwM2FhZDY2MTQwODIyYzM0NWE5M2Y1ZTFhZTNkNGZhOTMwMA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-07-20T17:10:24Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-07-20T17:10:24Z"}, "message": "builtins.c (fold_builtin_expect): See through the cast from truthvalue_type_node to long.\n\n2011-07-20  Kai Tietz  <ktietz@redhat.com>\n\n        * builtins.c (fold_builtin_expect): See through the cast\n        from truthvalue_type_node to long.\n\nFrom-SVN: r176526", "tree": {"sha": "47f33616929f687720831f27ad08d967a25ec19d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47f33616929f687720831f27ad08d967a25ec19d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be31603aad66140822c345a93f5e1ae3d4fa9300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be31603aad66140822c345a93f5e1ae3d4fa9300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be31603aad66140822c345a93f5e1ae3d4fa9300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be31603aad66140822c345a93f5e1ae3d4fa9300/comments", "author": null, "committer": null, "parents": [{"sha": "c36193c690369c4180ab460b3a7c9a797f87e160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36193c690369c4180ab460b3a7c9a797f87e160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c36193c690369c4180ab460b3a7c9a797f87e160"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "5a832e27d3e67a286dc26cad6155784a5f50ba65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be31603aad66140822c345a93f5e1ae3d4fa9300/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be31603aad66140822c345a93f5e1ae3d4fa9300/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be31603aad66140822c345a93f5e1ae3d4fa9300", "patch": "@@ -1,3 +1,8 @@\n+2011-07-20  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* builtins.c (fold_builtin_expect): See through the cast\n+\tfrom truthvalue_type_node to long.\n+\n 2011-07-20  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/vsx.md (vsx_fma*): Use 4 argument fma instructions"}, {"sha": "79a6b09e92837042abb8076280877958301eb7d5", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be31603aad66140822c345a93f5e1ae3d4fa9300/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be31603aad66140822c345a93f5e1ae3d4fa9300/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=be31603aad66140822c345a93f5e1ae3d4fa9300", "patch": "@@ -6263,13 +6263,22 @@ build_builtin_expect_predicate (location_t loc, tree pred, tree expected)\n static tree\n fold_builtin_expect (location_t loc, tree arg0, tree arg1)\n {\n-  tree inner, fndecl;\n+  tree inner, fndecl, inner_arg0;\n   enum tree_code code;\n \n+  /* Distribute the expected value over short-circuiting operators.\n+     See through the cast from truthvalue_type_node to long.  */\n+  inner_arg0 = arg0;\n+  while (TREE_CODE (inner_arg0) == NOP_EXPR\n+\t && INTEGRAL_TYPE_P (TREE_TYPE (inner_arg0))\n+\t && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (inner_arg0, 0))))\n+    inner_arg0 = TREE_OPERAND (inner_arg0, 0);\n+\n   /* If this is a builtin_expect within a builtin_expect keep the\n      inner one.  See through a comparison against a constant.  It\n      might have been added to create a thruthvalue.  */\n-  inner = arg0;\n+  inner = inner_arg0;\n+\n   if (COMPARISON_CLASS_P (inner)\n       && TREE_CODE (TREE_OPERAND (inner, 1)) == INTEGER_CST)\n     inner = TREE_OPERAND (inner, 0);\n@@ -6280,14 +6289,7 @@ fold_builtin_expect (location_t loc, tree arg0, tree arg1)\n       && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_EXPECT)\n     return arg0;\n \n-  /* Distribute the expected value over short-circuiting operators.\n-     See through the cast from truthvalue_type_node to long.  */\n-  inner = arg0;\n-  while (TREE_CODE (inner) == NOP_EXPR\n-\t && INTEGRAL_TYPE_P (TREE_TYPE (inner))\n-\t && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (inner, 0))))\n-    inner = TREE_OPERAND (inner, 0);\n-\n+  inner = inner_arg0;\n   code = TREE_CODE (inner);\n   if (code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR)\n     {\n@@ -6302,13 +6304,13 @@ fold_builtin_expect (location_t loc, tree arg0, tree arg1)\n     }\n \n   /* If the argument isn't invariant then there's nothing else we can do.  */\n-  if (!TREE_CONSTANT (arg0))\n+  if (!TREE_CONSTANT (inner_arg0))\n     return NULL_TREE;\n \n   /* If we expect that a comparison against the argument will fold to\n      a constant return the constant.  In practice, this means a true\n      constant or the address of a non-weak symbol.  */\n-  inner = arg0;\n+  inner = inner_arg0;\n   STRIP_NOPS (inner);\n   if (TREE_CODE (inner) == ADDR_EXPR)\n     {"}]}