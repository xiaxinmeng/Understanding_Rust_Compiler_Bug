{"sha": "c961d8205b749d6df462202efd09efa6bf01442d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk2MWQ4MjA1Yjc0OWQ2ZGY0NjIyMDJlZmQwOWVmYTZiZjAxNDQyZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-22T13:56:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-22T13:56:26Z"}, "message": "[Ada] Fix internal error on array slice in loop and Loop_Invariant\n\nThis fixes an internal error caused by the presence of an Itype in a\nwrong scope.  This Itype is created for an array slice present in the\ncondition of a while loop whose body also contains a pragma\nLoop_Invariant, initially in the correct scope but then relocated into a\nfunction created for the pragma.\n\n2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Copy the condition\n\tof a while loop instead of simply relocating it.\n\ngcc/testsuite/\n\n\t* gnat.dg/loop_invariant1.adb, gnat.dg/loop_invariant1.ads: New\n\ttestcase.\n\nFrom-SVN: r273668", "tree": {"sha": "054d1c52fc795b26a8ba5c7f5fe0514114e8cd40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/054d1c52fc795b26a8ba5c7f5fe0514114e8cd40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c961d8205b749d6df462202efd09efa6bf01442d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c961d8205b749d6df462202efd09efa6bf01442d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c961d8205b749d6df462202efd09efa6bf01442d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c961d8205b749d6df462202efd09efa6bf01442d/comments", "author": null, "committer": null, "parents": [{"sha": "8801ca5c28c3a9e9f36fa39a6a4455b48c8221fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8801ca5c28c3a9e9f36fa39a6a4455b48c8221fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8801ca5c28c3a9e9f36fa39a6a4455b48c8221fa"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "38cc4b833a07d8336c684460b778690570f8d011", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c961d8205b749d6df462202efd09efa6bf01442d", "patch": "@@ -1,3 +1,8 @@\n+2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Copy the condition\n+\tof a while loop instead of simply relocating it.\n+\n 2019-07-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* Makefile.rtl, expect.c, env.c, aux-io.c, mkdir.c, initialize.c,"}, {"sha": "90ca8ffbd8d978ab61d59c5c78444c2bb4df857e", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=c961d8205b749d6df462202efd09efa6bf01442d", "patch": "@@ -1384,6 +1384,8 @@ package body Exp_Attr is\n                Stmts     : List_Id;\n \n             begin\n+               Func_Id := Make_Temporary (Loc, 'F');\n+\n                --  Wrap the condition of the while loop in a Boolean function.\n                --  This avoids the duplication of the same code which may lead\n                --  to gigi issues with respect to multiple declaration of the\n@@ -1403,15 +1405,16 @@ package body Exp_Attr is\n \n                Append_To (Stmts,\n                  Make_Simple_Return_Statement (Loc,\n-                   Expression => Relocate_Node (Condition (Scheme))));\n+                   Expression =>\n+                     New_Copy_Tree (Condition (Scheme),\n+                       New_Scope => Func_Id)));\n \n                --  Generate:\n                --    function Fnn return Boolean is\n                --    begin\n                --       <Stmts>\n                --    end Fnn;\n \n-               Func_Id   := Make_Temporary (Loc, 'F');\n                Func_Decl :=\n                  Make_Subprogram_Body (Loc,\n                    Specification              =>"}, {"sha": "e9c2b5e3b7dbf3a9b2b5cdfad2416d11ae243057", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c961d8205b749d6df462202efd09efa6bf01442d", "patch": "@@ -1,3 +1,8 @@\n+2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/loop_invariant1.adb, gnat.dg/loop_invariant1.ads: New\n+\ttestcase.\n+\n 2019-07-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91221"}, {"sha": "a5c94769ab62e5cb17411d4bddf96e00f87b0a8d", "filename": "gcc/testsuite/gnat.dg/loop_invariant1.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_invariant1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_invariant1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_invariant1.adb?ref=c961d8205b749d6df462202efd09efa6bf01442d", "patch": "@@ -0,0 +1,15 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnata\" }\n+\n+package body Loop_Invariant1 is\n+\n+   procedure Proc (A : Arr; N : Integer) is\n+      I : Integer := A'First;\n+   begin\n+      while i <= A'Last and then A(A'First .. A'Last) /= A loop\n+         pragma Loop_Invariant (N = N'Loop_Entry);\n+         i := i + 1;\n+      end loop;\n+   end;\n+\n+end Loop_Invariant1;"}, {"sha": "5c19a92160304bfacaec74fe884708e4bb7b660b", "filename": "gcc/testsuite/gnat.dg/loop_invariant1.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_invariant1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c961d8205b749d6df462202efd09efa6bf01442d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_invariant1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_invariant1.ads?ref=c961d8205b749d6df462202efd09efa6bf01442d", "patch": "@@ -0,0 +1,7 @@\n+package Loop_Invariant1 is\n+\n+   type Arr is array (Natural range <>) of Integer;\n+\n+   procedure Proc (A : Arr; N : Integer);\n+\n+end Loop_Invariant1;"}]}