{"sha": "03acddfe0cd541d7f37345a8c2eb3f905d14389a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhY2RkZmUwY2Q1NDFkN2YzNzM0NWE4YzJlYjNmOTA1ZDE0Mzg5YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-01T17:13:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-01T17:13:30Z"}, "message": "re PR target/49927 (ice in spill_failure, at reload1.c:2120)\n\n\tPR target/49927\n\t* config/i386/i386.c (ix86_address_subreg_operand): New.\n\t(ix86_decompose_address): Use ix86_address_subreg_operand.\n\t(ix86_legitimate_address_p): Do not assert that subregs satisfy\n\tregister_no_elim_operand in DImode.\n\ntestsuite/ChangeLog:\n\n\tPR target/49927\n\t* gcc.target/i386/pr49927.c: New test.\n\nFrom-SVN: r177064", "tree": {"sha": "66a8c9b2140e8f0b7b32d5202c831de4421ac3b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66a8c9b2140e8f0b7b32d5202c831de4421ac3b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03acddfe0cd541d7f37345a8c2eb3f905d14389a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03acddfe0cd541d7f37345a8c2eb3f905d14389a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03acddfe0cd541d7f37345a8c2eb3f905d14389a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03acddfe0cd541d7f37345a8c2eb3f905d14389a/comments", "author": null, "committer": null, "parents": [{"sha": "67f2d54f56cf4e978cf8e2d78330da7948f99591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f2d54f56cf4e978cf8e2d78330da7948f99591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f2d54f56cf4e978cf8e2d78330da7948f99591"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "c3d1b3a14d6bc1cc7828dc2caa2acd2e930cd54b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03acddfe0cd541d7f37345a8c2eb3f905d14389a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03acddfe0cd541d7f37345a8c2eb3f905d14389a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03acddfe0cd541d7f37345a8c2eb3f905d14389a", "patch": "@@ -1,11 +1,19 @@\n+2011-08-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49927\n+\t* config/i386/i386.c (ix86_address_subreg_operand): New.\n+\t(ix86_decompose_address): Use ix86_address_subreg_operand.\n+\t(ix86_legitimate_address_p): Do not assert that subregs satisfy\n+\tregister_no_elim_operand in DImode.\n+\n 2011-08-01  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/49926\n \t* tree-vect-loop.c (vect_is_slp_reduction): Check that a statement\n \tin a chain doesn't have uses both inside and outside the loop.\n \n 2011-08-01  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* config/avr/avr.h (mcu_type_s): Add errata_skip field.\n \t* config/avr/avr-devices.c (avr_mcu_types): Use it.\n \t* config/avr/avr-mcus.def (AVR_MCU): Use it.\n@@ -17,7 +25,8 @@\n \n 2011-08-02  Alan Modra  <amodra@gmail.com>\n \n-\t* config/rs6000/rs6000-protos.h (rs6000_save_toc_in_prologue_p): Delete.\n+\t* config/rs6000/rs6000-protos.h (rs6000_save_toc_in_prologue_p):\n+\tDelete.\n \t* config/rs6000/rs6000.c (rs6000_save_toc_in_prologue_p): Make static.\n \t(rs6000_emit_prologue): Don't prematurely return when\n \tTARGET_SINGLE_PIC_BASE.  Don't emit eh_frame info in\n@@ -40,13 +49,12 @@\n 2011-08-01  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/49547\n-\t* config.gcc (i[34567]86-*-*): Replace abmintrin.h with\n-\tlzcntintrin.h.\n+\t* config.gcc (i[34567]86-*-*): Replace abmintrin.h with lzcntintrin.h.\n \t(x86_64-*-*): Likewise.\n \t* config/i386/i386.opt (mlzcnt): New.\n \t* config/i386/abmintrin.h: File removed.\n \t(__lzcnt_u16, __lzcnt, __lzcnt_u64): Moved to ...\n-\t* config/i386/lzcntintrin.h: ... here. New file.\n+\t* config/i386/lzcntintrin.h: ... here.  New file.\n \t(__lzcnt): Rename to ...\n \t(__lzcnt32): ... this.\n \t* config/i386/bmiintrin.h (head): Update copyright year.\n@@ -183,10 +191,10 @@\n \t(*rep_stosdi_rex64): Disable when %eax, %ecx or %edi are fixed.\n \t(*rep_stossi): Ditto.\n \t(*rep_stosqi): Ditto.\n+\t(*strlenqi_1): Ditto.\n \t(cmpstrnsi): Also fail when %ecx is fixed.\n \t(*cmpstrnqi_nz_1): Disable when %ecx, %esi or %edi are fixed.\n \t(*cmpstrnqi_1): Ditto.\n-\t(*strlenqi_1): Ditto.\n \t(*strmovdi_rex_1): Disable when %esi or %edi are fixed.\n \t(*strmovsi_1): Ditto.\n \t(*strmovhi_1): Ditto."}, {"sha": "0e4f3f46de69f1921b9a562a6e8d5490e27b5e81", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03acddfe0cd541d7f37345a8c2eb3f905d14389a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03acddfe0cd541d7f37345a8c2eb3f905d14389a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=03acddfe0cd541d7f37345a8c2eb3f905d14389a", "patch": "@@ -11096,6 +11096,30 @@ ix86_live_on_entry (bitmap regs)\n     }\n }\n \f\n+/* Determine if op is suitable SUBREG RTX for address.  */\n+\n+static bool\n+ix86_address_subreg_operand (rtx op)\n+{\n+  enum machine_mode mode;\n+\n+  if (!REG_P (op))\n+    return false;\n+\n+  mode = GET_MODE (op);\n+\n+  if (GET_MODE_CLASS (mode) != MODE_INT)\n+    return false;\n+\n+  /* Don't allow SUBREGs that span more than a word.  It can lead to spill\n+     failures when the register is one word out of a two word structure.  */\n+  if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n+    return false;\n+\n+  /* Allow only SUBREGs of non-eliminable hard registers.  */\n+  return register_no_elim_operand (op, mode);\n+}\n+\n /* Extract the parts of an RTL expression that is a valid memory address\n    for an instruction.  Return 0 if the structure of the address is\n    grossly off.  Return -1 if the address contains ASHIFT, so it is not\n@@ -11116,8 +11140,7 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n     base = addr;\n   else if (GET_CODE (addr) == SUBREG)\n     {\n-      /* Allow only subregs of DImode hard regs.  */\n-      if (register_no_elim_operand (SUBREG_REG (addr), DImode))\n+      if (ix86_address_subreg_operand (SUBREG_REG (addr)))\n \tbase = addr;\n       else\n \treturn 0;\n@@ -11175,8 +11198,7 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n \t      break;\n \n \t    case SUBREG:\n-\t      /* Allow only subregs of DImode hard regs in PLUS chains.  */\n-\t      if (!register_no_elim_operand (SUBREG_REG (op), DImode))\n+\t      if (!ix86_address_subreg_operand (SUBREG_REG (op)))\n \t\treturn 0;\n \t      /* FALLTHRU */\n \n@@ -11228,9 +11250,8 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n     {\n       if (REG_P (index))\n \t;\n-      /* Allow only subregs of DImode hard regs.  */\n       else if (GET_CODE (index) == SUBREG\n-\t       && register_no_elim_operand (SUBREG_REG (index), DImode))\n+\t       && ix86_address_subreg_operand (SUBREG_REG (index)))\n \t;\n       else\n \treturn 0;\n@@ -11677,10 +11698,7 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n       if (REG_P (base))\n   \treg = base;\n       else if (GET_CODE (base) == SUBREG && REG_P (SUBREG_REG (base)))\n-\t{\n-\t  reg = SUBREG_REG (base);\n-\t  gcc_assert (register_no_elim_operand (reg, DImode));\n-\t}\n+\treg = SUBREG_REG (base);\n       else\n \t/* Base is not a register.  */\n \treturn false;\n@@ -11702,10 +11720,7 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n       if (REG_P (index))\n   \treg = index;\n       else if (GET_CODE (index) == SUBREG && REG_P (SUBREG_REG (index)))\n-\t{\n-\t  reg = SUBREG_REG (index);\n-\t  gcc_assert (register_no_elim_operand (reg, DImode));\n-\t}\n+\treg = SUBREG_REG (index);\n       else\n \t/* Index is not a register.  */\n \treturn false;"}, {"sha": "7a5d30f47e98e9cbf76b913dcbdee1e2b56957fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03acddfe0cd541d7f37345a8c2eb3f905d14389a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03acddfe0cd541d7f37345a8c2eb3f905d14389a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03acddfe0cd541d7f37345a8c2eb3f905d14389a", "patch": "@@ -1,3 +1,8 @@\n+2011-08-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49927\n+\t* gcc.target/i386/pr49927.c: New test.\n+\n 2011-08-01  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/49926"}, {"sha": "5850597d64cef39b0e4be7d5fa08a4cb90e2c9dc", "filename": "gcc/testsuite/gcc.target/i386/pr49927.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03acddfe0cd541d7f37345a8c2eb3f905d14389a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49927.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03acddfe0cd541d7f37345a8c2eb3f905d14389a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49927.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49927.c?ref=03acddfe0cd541d7f37345a8c2eb3f905d14389a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+char a[1][1];\n+long long b;\n+\n+void\n+foo (void)\n+{\n+  --a[b][b];\n+}"}]}