{"sha": "d4482715693d5289b88a7c68168b5fcbe40a2766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0ODI3MTU2OTNkNTI4OWI4OGE3YzY4MTY4YjVmY2JlNDBhMjc2Ng==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-08-05T20:57:06Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-08-05T20:57:06Z"}, "message": "pa.c (pa_asm_output_aligned_bss, [...]): New functions.\n\n\t* pa.c (pa_asm_output_aligned_bss, pa_asm_output_aligned_common,\n\tpa_asm_output_aligned_local): New functions.\n\t* pa-protos.h: Add prototypes for pa_asm_output_aligned_bss,\n\tpa_asm_output_aligned_common and pa_asm_output_aligned_local.\n\t* pa-pro-end.h (ASM_OUTPUT_ALIGNED_COMMON): Use\n\tpa_asm_output_aligned_common.\n\t(ASM_OUTPUT_ALIGNED_LOCAL): Use pa_asm_output_aligned_local.\n\t* pa.h (ASM_OUTPUT_ALIGNED_BSS): New macro.\n\t(ASM_OUTPUT_ALIGNED_COMMON): Use pa_asm_output_aligned_common.\n\t(ASM_OUTPUT_ALIGNED_LOCAL): Use pa_asm_output_aligned_local.\n\t* pa64-hpux.h (MAX_OFILE_ALIGNMENT): New macro.\n\t(ASM_OUTPUT_ALIGNED_COMMON): Use pa_asm_output_aligned_common.\n\t(ASM_OUTPUT_ALIGNED_LOCAL): Use pa_asm_output_aligned_local.\n\t* som.h (MAX_OFILE_ALIGNMENT): Provide maximum alignment of global\n\tcommon data.\n\nFrom-SVN: r85611", "tree": {"sha": "465ec10094020f2ced7d87cf202dca82d9966e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/465ec10094020f2ced7d87cf202dca82d9966e60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4482715693d5289b88a7c68168b5fcbe40a2766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4482715693d5289b88a7c68168b5fcbe40a2766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4482715693d5289b88a7c68168b5fcbe40a2766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4482715693d5289b88a7c68168b5fcbe40a2766/comments", "author": null, "committer": null, "parents": [{"sha": "c34f5b333dc7f357f14709c6a7d5d941ad84be5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34f5b333dc7f357f14709c6a7d5d941ad84be5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34f5b333dc7f357f14709c6a7d5d941ad84be5c"}], "stats": {"total": 204, "additions": 153, "deletions": 51}, "files": [{"sha": "fde29426ae4726bebeaba3310a273c7f2924c8ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4482715693d5289b88a7c68168b5fcbe40a2766", "patch": "@@ -1,3 +1,21 @@\n+2004-08-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (pa_asm_output_aligned_bss, pa_asm_output_aligned_common,\n+\tpa_asm_output_aligned_local): New functions.\n+\t* pa-protos.h: Add prototypes for pa_asm_output_aligned_bss,\n+\tpa_asm_output_aligned_common and pa_asm_output_aligned_local.\n+\t* pa-pro-end.h (ASM_OUTPUT_ALIGNED_COMMON): Use\n+\tpa_asm_output_aligned_common.\n+\t(ASM_OUTPUT_ALIGNED_LOCAL): Use pa_asm_output_aligned_local.\n+\t* pa.h (ASM_OUTPUT_ALIGNED_BSS): New macro.\n+\t(ASM_OUTPUT_ALIGNED_COMMON): Use pa_asm_output_aligned_common.\n+\t(ASM_OUTPUT_ALIGNED_LOCAL): Use pa_asm_output_aligned_local.\n+\t* pa64-hpux.h (MAX_OFILE_ALIGNMENT): New macro.\n+\t(ASM_OUTPUT_ALIGNED_COMMON): Use pa_asm_output_aligned_common.\n+\t(ASM_OUTPUT_ALIGNED_LOCAL): Use pa_asm_output_aligned_local.\n+\t* som.h (MAX_OFILE_ALIGNMENT): Provide maximum alignment of global\n+\tcommon data.\n+\n 2004-08-05  Andrew Pinski  <apinski@apple.com>\n \n \t* objc/objc-act.c (build_objc_string_object): Mark the address"}, {"sha": "b020f5e26bc34481364100351d8f515f22e371ef", "filename": "gcc/config/pa/pa-pro-end.h", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h?ref=d4482715693d5289b88a7c68168b5fcbe40a2766", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for PRO.\n-   Copyright (C) 1996, 1997, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -52,27 +52,13 @@ Boston, MA 02111-1307, USA.  */\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"\"\n \n-/* The following two macros are identical to the ones in pa.h.  We need\n-   to override the macros in elfos.h on the rtems and pro ports.  */\n-\n-/* This says how to output an assembler line to define a global common symbol\n-   with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n-\n+/* We need to override the following two macros defined in elfos.h since\n+   the .comm directive has a different syntax and it can't be used for\n+   local common symbols.  */\n #undef ASM_OUTPUT_ALIGNED_COMMON\n-#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGNED)\t\t\\\n-{ bss_section ();\t\t\t\t\t\t\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n-\t   MAX ((unsigned HOST_WIDE_INT)(SIZE),\t\t\t\t\\\n-\t\t((unsigned HOST_WIDE_INT)(ALIGNED) / BITS_PER_UNIT)));}\n-\n-/* This says how to output an assembler line to define a local common symbol\n-   with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n+#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)              \\\n+  pa_asm_output_aligned_common (FILE, NAME, SIZE, ALIGN)\n \n #undef ASM_OUTPUT_ALIGNED_LOCAL\n-#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGNED)\t\t\\\n-{ bss_section ();\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t.align %d\\n\", ((ALIGNED) / BITS_PER_UNIT));\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\\\n-\t   (unsigned HOST_WIDE_INT)(SIZE));}\n+#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)               \\\n+  pa_asm_output_aligned_local (FILE, NAME, SIZE, ALIGN)"}, {"sha": "c27ef124ac69a9c7791e72d1757e3c67ebfe3b88", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=d4482715693d5289b88a7c68168b5fcbe40a2766", "patch": "@@ -152,6 +152,7 @@ extern int cmpib_comparison_operator (rtx, enum machine_mode);\n #endif\n \n \n+/* Miscellaneous functions in pa.c.  */\n #ifdef TREE_CODE\n extern int reloc_needed (tree);\n #ifdef RTX_CODE\n@@ -165,6 +166,16 @@ extern int function_arg_partial_nregs (CUMULATIVE_ARGS *,\n extern bool pa_return_in_memory (tree, tree);\n #endif /* TREE_CODE */\n \n+extern void pa_asm_output_aligned_bss (FILE *, const char *,\n+\t\t\t\t       unsigned HOST_WIDE_INT,\n+\t\t\t\t       unsigned int);\n+extern void pa_asm_output_aligned_common (FILE *, const char *,\n+\t\t\t\t\t  unsigned HOST_WIDE_INT,\n+\t\t\t\t\t  unsigned int);\n+extern void pa_asm_output_aligned_local (FILE *, const char *,\n+\t\t\t\t\t unsigned HOST_WIDE_INT,\n+\t\t\t\t\t unsigned int);\n+\n /* Functions in varasm.c used by pa.c.  */\n extern void readonly_data (void);\n extern void one_only_readonly_data_section (void);"}, {"sha": "63eee3b220c0472a46ac067b26e2db44630f242a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d4482715693d5289b88a7c68168b5fcbe40a2766", "patch": "@@ -8169,6 +8169,79 @@ pa_asm_out_destructor (rtx symbol, int priority)\n }\n #endif\n \n+/* This function places uninitialized global data in the bss section.\n+   The ASM_OUTPUT_ALIGNED_BSS macro needs to be defined to call this\n+   function on the SOM port to prevent uninitialized global data from\n+   being placed in the data section.  */\n+   \n+void\n+pa_asm_output_aligned_bss (FILE *stream,\n+\t\t\t   const char *name,\n+\t\t\t   unsigned HOST_WIDE_INT size,\n+\t\t\t   unsigned int align)\n+{\n+  bss_section ();\n+  fprintf (stream, \"\\t.align %u\\n\", align / BITS_PER_UNIT);\n+\n+#ifdef ASM_OUTPUT_TYPE_DIRECTIVE\n+  ASM_OUTPUT_TYPE_DIRECTIVE (stream, name, \"object\");\n+#endif\n+\n+#ifdef ASM_OUTPUT_SIZE_DIRECTIVE\n+  ASM_OUTPUT_SIZE_DIRECTIVE (stream, name, size);\n+#endif\n+\n+  fprintf (stream, \"\\t.align %u\\n\", align / BITS_PER_UNIT);\n+  ASM_OUTPUT_LABEL (stream, name);\n+  fprintf (stream, \"\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n+}\n+\n+/* Both the HP and GNU assemblers under HP-UX provide a .comm directive\n+   that doesn't allow the alignment of global common storage to be directly\n+   specified.  The SOM linker aligns common storage based on the rounded\n+   value of the NUM_BYTES parameter in the .comm directive.  It's not\n+   possible to use the .align directive as it doesn't affect the alignment\n+   of the label associated with a .comm directive.  */\n+\n+void\n+pa_asm_output_aligned_common (FILE *stream,\n+\t\t\t      const char *name,\n+\t\t\t      unsigned HOST_WIDE_INT size,\n+\t\t\t      unsigned int align)\n+{\n+  bss_section ();\n+\n+  assemble_name (stream, name);\n+  fprintf (stream, \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\n+           MAX (size, align / BITS_PER_UNIT));\n+}\n+\n+/* We can't use .comm for local common storage as the SOM linker effectively\n+   treats the symbol as universal and uses the same storage for local symbols\n+   with the same name in different object files.  The .block directive\n+   reserves an uninitialized block of storage.  However, it's not common\n+   storage.  Fortunately, GCC never requests common storage with the same\n+   name in any given translation unit.  */\n+\n+void\n+pa_asm_output_aligned_local (FILE *stream,\n+\t\t\t     const char *name,\n+\t\t\t     unsigned HOST_WIDE_INT size,\n+\t\t\t     unsigned int align)\n+{\n+  bss_section ();\n+  fprintf (stream, \"\\t.align %u\\n\", align / BITS_PER_UNIT);\n+\n+#ifdef LOCAL_ASM_OP\n+  fprintf (stream, \"%s\", LOCAL_ASM_OP);\n+  assemble_name (stream, name);\n+  fprintf (stream, \"\\n\");\n+#endif\n+\n+  ASM_OUTPUT_LABEL (stream, name);\n+  fprintf (stream, \"\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n+}\n+\n /* Returns 1 if the 6 operands specified in OPERANDS are suitable for\n    use in fmpysub instructions.  */\n int"}, {"sha": "a76b3e04d05afd7f52ad97170312cf2325be3572", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d4482715693d5289b88a7c68168b5fcbe40a2766", "patch": "@@ -1902,25 +1902,28 @@ do { \t\t\t\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.blockz \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n \t   (unsigned HOST_WIDE_INT)(SIZE))\n \n+/* This says how to output an assembler line to define an uninitialized\n+   global variable with size SIZE (in bytes) and alignment ALIGN (in bits).\n+   This macro exists to properly support languages like C++ which do not\n+   have common data.  */\n+\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\t\\\n+  pa_asm_output_aligned_bss (FILE, NAME, SIZE, ALIGN)\n+  \n /* This says how to output an assembler line to define a global common symbol\n    with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n \n-#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGNED)  \t\t\\\n-{ bss_section ();\t\t\t\t\t\t\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n-\t   MAX ((unsigned HOST_WIDE_INT)(SIZE),\t\t\t\t\\\n-\t\t((unsigned HOST_WIDE_INT)(ALIGNED) / BITS_PER_UNIT)));}\n+#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)  \t\t\\\n+  pa_asm_output_aligned_common (FILE, NAME, SIZE, ALIGN)\n \n /* This says how to output an assembler line to define a local common symbol\n-   with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n+   with size SIZE (in bytes) and alignment ALIGN (in bits).  This macro\n+   controls how the assembler definitions of uninitialized static variables\n+   are output.  */\n \n-#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGNED)\t\t\\\n-{ bss_section ();\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t.align %d\\n\", ((ALIGNED) / BITS_PER_UNIT));\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\\\n-\t   (unsigned HOST_WIDE_INT)(SIZE));}\n+#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n+  pa_asm_output_aligned_local (FILE, NAME, SIZE, ALIGN)\n+  \n   \n #define ASM_PN_FORMAT \"%s___%lu\"\n "}, {"sha": "f2663c6b2ca8ad4fe0c32dc2ee75d153e4297a56", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=d4482715693d5289b88a7c68168b5fcbe40a2766", "patch": "@@ -109,6 +109,17 @@ Boston, MA 02111-1307, USA.  */\n #define MD_STARTFILE_PREFIX_1 \"/opt/langtools/lib/pa20_64/\"\n #endif\n \n+/* This macro specifies the biggest alignment supported by the object\n+   file format of this machine.\n+\n+   The .align directive in the HP assembler allows alignments up to\n+   4096 bytes.  However, the maximum alignment of a global common symbol\n+   is 16 bytes using HP ld.  For consistency, we use the same limit\n+   with GNU ld.  */\n+#undef MAX_OFILE_ALIGNMENT\n+#define MAX_OFILE_ALIGNMENT                                             \\\n+  (TREE_PUBLIC (decl) && DECL_COMMON (decl) ? 128 : 32768)\n+\n /* Due to limitations in the target structure, it isn't currently possible\n    to dynamically switch between the GNU and HP assemblers.  */\n #undef TARGET_GAS\n@@ -137,25 +148,16 @@ Boston, MA 02111-1307, USA.  */\n #define HP_FINI_ARRAY_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n #define GNU_FINI_ARRAY_SECTION_ASM_OP\t\"\\t.section\\t.fini_array\"\n \n+/* We need to override the following two macros defined in elfos.h since\n+   the .comm directive has a different syntax and it can't be used for\n+   local common symbols.  */\n #undef ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  bss_section ();\t\t\t\t\t\t\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n-\t   MAX ((unsigned HOST_WIDE_INT)(SIZE),\t\t\t\t\\\n-\t\t((unsigned HOST_WIDE_INT)(ALIGN) / BITS_PER_UNIT)));\t\\\n-} while (0)\n+  pa_asm_output_aligned_common (FILE, NAME, SIZE, ALIGN)\n \n #undef ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  bss_section ();\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t.align %d\\n\", ((ALIGN) / BITS_PER_UNIT));\t\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\\\n-\t   (unsigned HOST_WIDE_INT)(SIZE));\t\t\t\t\\\n-} while (0)\n+  pa_asm_output_aligned_local (FILE, NAME, SIZE, ALIGN)\n \n /* The define in pa.h doesn't work with the alias attribute.  The\n    default is ok with the following define for GLOBAL_ASM_OP.  */"}, {"sha": "a87b2fda174991f30e4a38b01f7b34c467552a55", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4482715693d5289b88a7c68168b5fcbe40a2766/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=d4482715693d5289b88a7c68168b5fcbe40a2766", "patch": "@@ -371,8 +371,17 @@ do {\t\t\t\t\t\t\\\n     (*p++) ();\t\t\t\t\t\\\n } while (0)\n \n-/* The .align directive in the HP assembler allows up to a 32 alignment.  */\n-#define MAX_OFILE_ALIGNMENT 32768\n+/* This macro specifies the biggest alignment supported by the object\n+   file format of this machine.\n+\n+   The .align directive in the HP assembler allows alignments up to 4096\n+   bytes.  However, the maximum alignment of a global common symbol is 8\n+   bytes for objects smaller than the page size (4096 bytes).  For larger\n+   objects, the linker provides an alignment of 32 bytes.  */\n+#define MAX_OFILE_ALIGNMENT\t\t\t\t\t\t\\\n+  (TREE_PUBLIC (decl) && DECL_COMMON (decl)\t\t\t\t\\\n+   ? (host_integerp (DECL_SIZE_UNIT (decl), 1) >= 4096 ? 256 : 64)\t\\\n+   : 32768)\n \n /* The SOM linker hardcodes paths into binaries.  As a result, dotdots\n    must be removed from library prefixes to prevent binaries from depending"}]}