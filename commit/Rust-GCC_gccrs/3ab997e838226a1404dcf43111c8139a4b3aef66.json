{"sha": "3ab997e838226a1404dcf43111c8139a4b3aef66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiOTk3ZTgzODIyNmExNDA0ZGNmNDMxMTFjODEzOWE0YjNhZWY2Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2005-11-07T19:14:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-11-07T19:14:02Z"}, "message": "expmed.c (extract_bit_field): Do not use insv/extv/extzv patterns if the bitsize is zero.\n\n\t* expmed.c (extract_bit_field): Do not use insv/extv/extzv patterns\n\tif the bitsize is zero.\n\t* doc/md.texi (Standard Pattern Names): Document it.\n\n\t* config/ia64/ia64.c (ia64_pass_by_reference): Delete.\n\t(TARGET_PASS_BY_REFERENCE): Likewise.\n\nFrom-SVN: r106605", "tree": {"sha": "001232e238f771969576c56eb45c370bca7b23a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/001232e238f771969576c56eb45c370bca7b23a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ab997e838226a1404dcf43111c8139a4b3aef66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab997e838226a1404dcf43111c8139a4b3aef66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab997e838226a1404dcf43111c8139a4b3aef66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab997e838226a1404dcf43111c8139a4b3aef66/comments", "author": null, "committer": null, "parents": [{"sha": "a7297856af43a0c5f563ff5a71a4503f9e01f625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7297856af43a0c5f563ff5a71a4503f9e01f625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7297856af43a0c5f563ff5a71a4503f9e01f625"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "73635c11dad77d16391ee7dfef62636216770471", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab997e838226a1404dcf43111c8139a4b3aef66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab997e838226a1404dcf43111c8139a4b3aef66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ab997e838226a1404dcf43111c8139a4b3aef66", "patch": "@@ -1,3 +1,12 @@\n+2005-11-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expmed.c (extract_bit_field): Do not use insv/extv/extzv patterns\n+\tif the bitsize is zero.\n+\t* doc/md.texi (Standard Pattern Names): Document it.\n+\n+\t* config/ia64/ia64.c (ia64_pass_by_reference): Delete.\n+\t(TARGET_PASS_BY_REFERENCE): Likewise.\n+\n 2005-11-07  Ian Lance Taylor  <ian@airs.com>\n \n \tPR rtl-optimization/24683"}, {"sha": "d1003b3d253769c69f79fc2736ef7a21b18953f2", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab997e838226a1404dcf43111c8139a4b3aef66/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab997e838226a1404dcf43111c8139a4b3aef66/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=3ab997e838226a1404dcf43111c8139a4b3aef66", "patch": "@@ -176,8 +176,6 @@ static rtx gen_fr_restore_x (rtx, rtx, rtx);\n static enum machine_mode hfa_element_mode (tree, bool);\n static void ia64_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n-static bool ia64_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t    tree, bool);\n static int ia64_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n static bool ia64_function_ok_for_sibcall (tree, tree);\n@@ -349,8 +347,6 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL ia64_function_ok_for_sibcall\n-#undef TARGET_PASS_BY_REFERENCE\n-#define TARGET_PASS_BY_REFERENCE ia64_pass_by_reference\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES ia64_arg_partial_bytes\n \n@@ -4221,17 +4217,6 @@ ia64_function_arg_boundary (enum machine_mode mode, tree type)\n     return PARM_BOUNDARY;\n }\n \n-/* Variable sized types are passed by reference.  */\n-/* ??? At present this is a GCC extension to the IA-64 ABI.  */\n-\n-static bool\n-ia64_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n-\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\ttree type, bool named ATTRIBUTE_UNUSED)\n-{\n-  return type && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST;\n-}\n-\n /* True if it is OK to do sibling call optimization for the specified\n    call expression EXP.  DECL will be the called function, or NULL if\n    this is an indirect call.  */"}, {"sha": "4fc8c3b76cc4eca30938e01b067e7047f3a85e15", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab997e838226a1404dcf43111c8139a4b3aef66/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab997e838226a1404dcf43111c8139a4b3aef66/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=3ab997e838226a1404dcf43111c8139a4b3aef66", "patch": "@@ -3551,7 +3551,7 @@ Operand 1 may have mode @code{byte_mode} or @code{word_mode}; often\n be valid for @code{word_mode}.\n \n The RTL generation pass generates this instruction only with constants\n-for operands 2 and 3.\n+for operands 2 and 3 and the constant is never zero for operand 2.\n \n The bit-field value is sign-extended to a full word integer\n before it is stored in operand 0.\n@@ -3569,7 +3569,7 @@ operand 2 the starting bit.  Operand 0 may have mode @code{byte_mode} or\n Operands 1 and 2 must be valid for @code{word_mode}.\n \n The RTL generation pass generates this instruction only with constants\n-for operands 1 and 2.\n+for operands 1 and 2 and the constant is never zero for operand 1.\n \n @cindex @code{mov@var{mode}cc} instruction pattern\n @item @samp{mov@var{mode}cc}"}, {"sha": "00172a355d6a029fec82ba9b83f294c5aeab4d94", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab997e838226a1404dcf43111c8139a4b3aef66/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab997e838226a1404dcf43111c8139a4b3aef66/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=3ab997e838226a1404dcf43111c8139a4b3aef66", "patch": "@@ -608,8 +608,8 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n   if (HAVE_insv\n       && GET_MODE (value) != BLKmode\n       && !(bitsize == 1 && GET_CODE (value) == CONST_INT)\n-      /* Ensure insv's size is wide enough for this field.  */\n-      && (GET_MODE_BITSIZE (op_mode) >= bitsize)\n+      && bitsize > 0\n+      && GET_MODE_BITSIZE (op_mode) >= bitsize\n       && ! ((REG_P (op0) || GET_CODE (op0) == SUBREG)\n \t    && (bitsize + bitpos > GET_MODE_BITSIZE (op_mode))))\n     {\n@@ -1356,7 +1356,8 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n   if (unsignedp)\n     {\n       if (HAVE_extzv\n-\t  && (GET_MODE_BITSIZE (extzv_mode) >= bitsize)\n+\t  && bitsize > 0\n+\t  && GET_MODE_BITSIZE (extzv_mode) >= bitsize\n \t  && ! ((REG_P (op0) || GET_CODE (op0) == SUBREG)\n \t\t&& (bitsize + bitpos > GET_MODE_BITSIZE (extzv_mode))))\n \t{\n@@ -1488,7 +1489,8 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n   else\n     {\n       if (HAVE_extv\n-\t  && (GET_MODE_BITSIZE (extv_mode) >= bitsize)\n+\t  && bitsize > 0\n+\t  && GET_MODE_BITSIZE (extv_mode) >= bitsize\n \t  && ! ((REG_P (op0) || GET_CODE (op0) == SUBREG)\n \t\t&& (bitsize + bitpos > GET_MODE_BITSIZE (extv_mode))))\n \t{"}]}