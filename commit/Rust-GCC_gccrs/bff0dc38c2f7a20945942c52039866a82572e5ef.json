{"sha": "bff0dc38c2f7a20945942c52039866a82572e5ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZmMGRjMzhjMmY3YTIwOTQ1OTQyYzUyMDM5ODY2YTgyNTcyZTVlZg==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-02-04T21:42:00Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-02-04T21:42:00Z"}, "message": "genfixes (machname.h): Move the functionality from gen-machine.h into this file.\n\n2000-02-04  Bruce Korb  <bkorb@gnu.org>\n\n\t* fixinc/genfixes(machname.h):\n\tMove the functionality from gen-machine.h into this file.\n\tUNdef MN_NAME_PAT if there are no names to change.\n\tAlso, be a little kinder when AutoGen is not present.\n\n\t* fixinc/Makefile.in(machname.h):\n\tChange the generation rule to use genfixes.\n\n\t* fixinc/fixfixes.c(machine_name):\n\tmachine_name_fix's functionality now dependent upon whether\n\tMN_NAME_PAT is defined.\n\n\t* fixinc/fixtests.c(machine_name):\n\tditto.\n\n\t* fixinc/fixlib.c(mn_get_regexps): conditional on definition\n\tof MN_NAME_PAT.\n\n\t* fixinc/fixlib.h(mn_get_regexps):\n\tditto\n\n\t* fixinc/gen-machine.h: DELETED\n\nFrom-SVN: r31793", "tree": {"sha": "8f81e15524ec14490e37b27653b87e0a00573278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f81e15524ec14490e37b27653b87e0a00573278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bff0dc38c2f7a20945942c52039866a82572e5ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff0dc38c2f7a20945942c52039866a82572e5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff0dc38c2f7a20945942c52039866a82572e5ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff0dc38c2f7a20945942c52039866a82572e5ef/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c71e60ef78d26b2146bdcf45f2177722ec1ff30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c71e60ef78d26b2146bdcf45f2177722ec1ff30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c71e60ef78d26b2146bdcf45f2177722ec1ff30"}], "stats": {"total": 211, "additions": 126, "deletions": 85}, "files": [{"sha": "7f88e0e9ab60bd68aa1cbcc98549508713b2ecb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bff0dc38c2f7a20945942c52039866a82572e5ef", "patch": "@@ -1,3 +1,28 @@\n+2000-02-04  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixinc/genfixes(machname.h):\n+\tMove the functionality from gen-machine.h into this file.\n+\tUNdef MN_NAME_PAT if there are no names to change.\n+\tAlso, be a little kinder when AutoGen is not present.\n+\n+\t* fixinc/Makefile.in(machname.h):\n+\tChange the generation rule to use genfixes.\n+\n+\t* fixinc/fixfixes.c(machine_name):\n+\tmachine_name_fix's functionality now dependent upon whether\n+\tMN_NAME_PAT is defined.\n+\n+\t* fixinc/fixtests.c(machine_name):\n+\tditto.\n+\n+\t* fixinc/fixlib.c(mn_get_regexps): conditional on definition\n+\tof MN_NAME_PAT.\n+\n+\t* fixinc/fixlib.h(mn_get_regexps):\n+\tditto\n+\n+\t* fixinc/gen-machine.h: DELETED\n+\n 2000-02-04  Jan Hubicka  <jh@suse.cz>\n \t    Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "cb0f70c46765f320369ad939677303e58a31599e", "filename": "gcc/fixinc/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FMakefile.in?ref=bff0dc38c2f7a20945942c52039866a82572e5ef", "patch": "@@ -139,5 +139,4 @@ Makefile: Makefile.in ../config.status\n \t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n \n machname.h: ../specs\n-\t$(SHELL) $(srcdir)/gen-machname.h < ../specs > machname.T\n-\tmv -f machname.T machname.h\n+\t$(SHELL) $(srcdir)/genfixes $@"}, {"sha": "7f481ebead32c9a77825b7da61c1467f789679f6", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=bff0dc38c2f7a20945942c52039866a82572e5ef", "patch": "@@ -560,16 +560,16 @@ FIX_PROC_HEAD( CTRL_defn_fix )\n \n FIX_PROC_HEAD( machine_name_fix )\n {\n+#ifndef MN_NAME_PAT\n+  fputs( \"The target machine has no needed machine name fixes\\n\", stderr );\n+#else\n   regmatch_t match[2];\n   char *line, *base, *limit, *p, *q;\n   regex_t *label_re, *name_re;\n   char scratch[SCRATCHSZ];\n   size_t len;\n \n-  if (mn_get_regexps (&label_re, &name_re, \"machine_name_fix\"))\n-    /* This platform doesn't need this fix.  We can only get here if\n-       someone is running fixfixes by hand, but let's be polite.  */\n-    goto done;\n+  mn_get_regexps (&label_re, &name_re, \"machine_name_fix\");\n \n   scratch[0] = '_';\n   scratch[1] = '_';\n@@ -647,6 +647,7 @@ FIX_PROC_HEAD( machine_name_fix )\n \t}\n     }\n  done:\n+#endif\n   fputs (text, stdout);\n }\n "}, {"sha": "9c8e53408ee29bd944b5e3b865c7481aa6abafef", "filename": "gcc/fixinc/fixlib.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.c?ref=bff0dc38c2f7a20945942c52039866a82572e5ef", "patch": "@@ -181,7 +181,7 @@ compile_re( pat, re, match, e1, e2 )\n    Helper routine and data for the machine_name test and fix.\n    machname.h is created by black magic in the Makefile.  */\n \n-#include \"machname.h\"\n+#ifdef MN_NAME_PAT\n \n tSCC mn_label_pat[] = \"^[ \\t]*#[ \\t]*(if|ifdef|ifndef)[ \\t]+\";\n static regex_t mn_label_re;\n@@ -191,16 +191,12 @@ static regex_t mn_name_re;\n \n static int mn_compiled = 0;\n \n-int\n+void\n mn_get_regexps( label_re, name_re, who )\n      regex_t **label_re;\n      regex_t **name_re;\n      tCC *who;\n {\n-  /* Maybe we don't need to do this fix at all?  */\n-  if (mn_name_pat[0] == '\\0')\n-    return 1;\n-\n   if (! mn_compiled)\n     {\n       compile_re (mn_label_pat, &mn_label_re, 1, \"label pattern\", who);\n@@ -209,5 +205,5 @@ mn_get_regexps( label_re, name_re, who )\n     }\n   *label_re = &mn_label_re;\n   *name_re = &mn_name_re;\n-  return 0;\n }\n+#endif"}, {"sha": "7794c9c4e1379027730e8d0e5bb4667533878747", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=bff0dc38c2f7a20945942c52039866a82572e5ef", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n \n #include \"gnu-regex.h\"\n+#include \"machname.h\"\n \n #ifndef STDIN_FILENO\n # define STDIN_FILENO   0\n@@ -99,6 +100,8 @@ char * load_file_data _P_(( FILE* fp ));\n t_bool is_cxx_header  _P_(( tCC* filename, tCC* filetext ));\n void   compile_re     _P_(( tCC* pat, regex_t* re, int match,\n \t\t\t    tCC *e1, tCC *e2 ));\n-int    mn_get_regexps _P_(( regex_t** label_re, regex_t** name_re,\n+#ifdef MN_NAME_PAT\n+void   mn_get_regexps _P_(( regex_t** label_re, regex_t** name_re,\n \t\t\t    tCC *who ));\n+#endif\n #endif /* FIXINCLUDES_FIXLIB_H */"}, {"sha": "445fa2aeb02a88776ce4eab497106c1328a724f9", "filename": "gcc/fixinc/fixtests.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Ffixtests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Ffixtests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixtests.c?ref=bff0dc38c2f7a20945942c52039866a82572e5ef", "patch": "@@ -271,12 +271,14 @@ TEST_FOR_FIX_PROC_HEAD( else_endif_label_test )\n \n TEST_FOR_FIX_PROC_HEAD( machine_name_test )\n {\n+#ifndef MN_NAME_PAT\n+  return SKIP_FIX;\n+#else\n   regex_t *label_re, *name_re;\n   regmatch_t match[2];\n   tCC *base, *limit;\n \n-  if (mn_get_regexps(&label_re, &name_re, \"machine_name_test\"))\n-    return SKIP_FIX;\n+  mn_get_regexps(&label_re, &name_re, \"machine_name_test\");\n \n   for (base = text;\n        regexec (label_re, base, 2, match, 0) == 0;\n@@ -314,6 +316,7 @@ TEST_FOR_FIX_PROC_HEAD( machine_name_test )\n       /* Otherwise, keep looking... */\n     }\n   return SKIP_FIX;\n+#endif\n }\n \n "}, {"sha": "361b3aff546fc3f71b2959b826b23378b041bb0d", "filename": "gcc/fixinc/gen-machname.h", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c71e60ef78d26b2146bdcf45f2177722ec1ff30/gcc%2Ffixinc%2Fgen-machname.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c71e60ef78d26b2146bdcf45f2177722ec1ff30/gcc%2Ffixinc%2Fgen-machname.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgen-machname.h?ref=1c71e60ef78d26b2146bdcf45f2177722ec1ff30", "patch": "@@ -1,46 +0,0 @@\n-#! /bin/sh\n-\n-# Copyright (C) 2000 Free Software Foundation, Inc.\n-# This file is part of GNU CC.\n-\n-# GNU CC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2, or (at your option)\n-# any later version.\n-\n-# GNU CC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-\n-# You should have received a copy of the GNU General Public License\n-# along with GNU CC; see the file COPYING.  If not, write to\n-# the Free Software Foundation, 59 Temple Place - Suite 330,\n-# Boston, MA 02111-1307, USA.\n-\n-# This script extracts from the specs file all the predefined macros\n-# that are not in the C89 reserved namespace (the reserved namespace\n-# is all identifiers beginnning with two underscores or one underscore\n-# followed by a capital letter).  The specs file is on standard input.\n-# A #define for a regular expression to find any of those macros in a\n-# header file is written to standard output.\n-\n-# Note dependency on ASCII. \\040 = space, \\011 = tab, \\012 = newline.\n-# tr ' ' '\\n' is, alas, not portable.\n-\n-tr -s '\\040\\011' '\\012\\012' |\n-    sed -n 's/^.*-D\\([a-zA-Z_][a-zA-Z0-9_]*\\).*$/\\1/p' |\n-    sort -u > mn.T\n-\n-if grep -v '^_[_A-Z]' mn.T > mn.U\n-then\n-    echo \"Forbidden identifiers: `tr '\\012' ' ' <mn.U`\" >&2\n-    sed 's/^/\\\\\\\\</; s/$/\\\\\\\\>/' <mn.U | tr '\\012' '|' > mn.V\n-    echo '' >>mn.V\n-    sed 's/^/#define MN_NAME_PAT \"/; s/|$/\"/' < mn.V\n-else\n-    echo \"No forbidden identifiers defined by this target\" >&2\n-    echo '#define MN_NAME_PAT \"\"'\n-fi\n-rm -f mn.[TUV]\n-exit 0"}, {"sha": "ae67610af5cb3c35727e5f8b654398b9d7df42dc", "filename": "gcc/fixinc/genfixes", "status": "modified", "additions": 83, "deletions": 23, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Fgenfixes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff0dc38c2f7a20945942c52039866a82572e5ef/gcc%2Ffixinc%2Fgenfixes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgenfixes?ref=bff0dc38c2f7a20945942c52039866a82572e5ef", "patch": "@@ -1,15 +1,25 @@\n #! /bin/sh\n \n-if (autogen --help > /dev/null 2>&1) ; then : ; else\n-  echo \"AutoGen does not appear to be correctly installed.\"\n-  echo \"Please download and install:\"\n-  echo \"   ftp://sourceware.cygnus.com/pub/egcs/infrastructure/autogen.tar.gz\"\n-  exit 1\n-fi\n+# Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+# This file is part of GNU CC.\n+\n+# GNU CC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# GNU CC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with GNU CC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n \n SHELL=/bin/sh\n export SHELL\n-AG=\"autogen\"\n if [ $# -eq 0 ] ; then\n   not_done=false\n else\n@@ -37,8 +47,9 @@ do\n   '-?' )\n     echo \"USAGE: gendefs [ -D<def-name> ... ] [ <output-name> ]\"\n     echo \"WHERE: '<def-name>' specifies a #define test name from inclhack.def\"\n-    echo \"  and  '<output-name>' is one of:  inclhack.sh fixincl.x fixincl.sh\"\n-    echo \"The default is to produce all three outputs.\"\n+    echo \"  and  '<output-name>' is one of:\"\n+    echo \"       inclhack.sh fixincl.x fixincl.sh machine.h\"\n+    echo \"The default is to produce the first three outputs.\"\n     exit 0\n     ;;\n \n@@ -49,33 +60,82 @@ do\n done\n \n if [ $# -eq 0 ] ; then\n-  echo AutoGen-ing inclhack.sh\n-  $AG inclhack.def\n-\n-  echo AutoGen-ing fixincl.x\n-  $AG -T fixincl.tpl -b fixincl inclhack.def\n-\n-  echo AutoGen-ing fixincl.sh\n-  $AG -DPROGRAM=1 -b fixincl inclhack.def\n+  ${SHELL} $0 $AG inclhack.sh || exit 1\n+  ${SHELL} $0 $AG fixincl.x   || exit 1\n+  ${SHELL} $0 $AG fixincl.sh  || exit 1\n   exit 0\n fi\n \n+AG=\"autogen $AG\"\n set -e\n \n case \"$1\" in\n inclhack.sh )\n-  echo AutoGen-ing inclhack.sh\n-  $AG inclhack.def\n+  if (autogen --help > /dev/null 2>&1)\n+  then\n+    echo AutoGen-ing inclhack.sh\n+    $AG inclhack.def\n+  else\n+    echo \"AutoGen does not appear to be correctly installed.\"\n+    echo \"Please download and install:\"\n+    echo \"   ftp://sourceware.cygnus.com/pub/egcs/infrastructure/autogen.tar.gz\"\n+    touch inclhack.sh\n+  fi\n   ;;\n \n fixincl.x )\n-  echo AutoGen-ing fixincl.x\n-  $AG -T fixincl.tpl -b fixincl inclhack.def\n+  if (autogen --help > /dev/null 2>&1)\n+  then\n+    echo AutoGen-ing fixincl.x\n+    $AG -T fixincl.tpl -b fixincl inclhack.def\n+  else\n+    echo \"AutoGen does not appear to be correctly installed.\"\n+    echo \"Please download and install:\"\n+    echo \"   ftp://sourceware.cygnus.com/pub/egcs/infrastructure/autogen.tar.gz\"\n+    touch fixincl.x\n+  fi\n   ;;\n \n fixincl.sh )\n-  echo AutoGen-ing fixincl.sh\n-  $AG -DPROGRAM=1 -b fixincl inclhack.def\n+  if (autogen --help > /dev/null 2>&1)\n+  then\n+    echo AutoGen-ing fixincl.sh\n+    $AG -DPROGRAM=1 -b fixincl inclhack.def\n+  else\n+    echo \"AutoGen does not appear to be correctly installed.\"\n+    echo \"Please download and install:\"\n+    echo \"   ftp://sourceware.cygnus.com/pub/egcs/infrastructure/autogen.tar.gz\"\n+    touch fixincl.sh\n+  fi\n+  ;;\n+\n+machname.h )\n+  # This script extracts from the specs file all the predefined macros\n+  # that are not in the C89 reserved namespace (the reserved namespace\n+  # is all identifiers beginnning with two underscores or one underscore\n+  # followed by a capital letter).  The specs file is on standard input.\n+  # A #define for a regular expression to find any of those macros in a\n+  # header file is written to standard output.\n+\n+  # Note dependency on ASCII. \\040 = space, \\011 = tab, \\012 = newline.\n+  # tr ' ' '\\n' is, alas, not portable.\n+\n+  tr -s '\\040\\011' '\\012\\012' < ../specs |\n+    sed -n 's/^.*-D\\([a-zA-Z_][a-zA-Z0-9_]*\\).*$/\\1/p' |\n+    sort -u > mn.T\n+\n+  if grep -v '^_[_A-Z]' mn.T > mn.U\n+  then\n+    echo \"Forbidden identifiers: `tr '\\012' ' ' <mn.U`\" >&2\n+    sed 's/^/\\\\\\\\</; s/$/\\\\\\\\>/' <mn.U | tr '\\012' '|' > mn.V\n+    echo '' >>mn.V\n+    sed 's/^/#define MN_NAME_PAT \"/; s/|$/\"/' < mn.V > machname.T\n+  else\n+    echo \"No forbidden identifiers defined by this target\" >&2\n+    echo '#undef MN_NAME_PAT' > machname.T\n+  fi\n+  rm -f mn.[TUV]\n+  mv -f machname.T machname.h\n   ;;\n \n * )"}]}