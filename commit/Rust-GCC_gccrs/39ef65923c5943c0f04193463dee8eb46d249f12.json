{"sha": "39ef65923c5943c0f04193463dee8eb46d249f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzllZjY1OTIzYzU5NDNjMGYwNDE5MzQ2M2RlZThlYjQ2ZDI0OWYxMg==", "commit": {"author": {"name": "Lawrence Crowl", "email": "crowl@google.com", "date": "2007-04-17T06:19:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-04-17T06:19:36Z"}, "message": "invoke.texi (Debugging Options): Add documentation for the -femit-struct-debug options...\n\n./:\t* doc/invoke.texi (Debugging Options): Add documentation for the\n\t-femit-struct-debug options -femit-struct-debug-baseonly,\n\t-femit-struct-debug-reduced, and\n\t-femit-struct-debug-detailed[=...].\n\n\t* c-opts.c (c_common_handle_option): Add\n\tOPT_femit_struct_debug_baseonly, OPT_femit_struct_debug_reduced,\n\tand OPT_femit_struct_debug_detailed_.\n\t* c.opt: Add specifications for\n\t-femit-struct-debug-baseonly, -femit-struct-debug-reduced,\n\tand -femit-struct-debug-detailed[=...].\n\t* opts.c (set_struct_debug_option): Parse the\n\t-femit-struct-debug-... options.\n\t* opts.c (matches_main_base, main_input_basename,\n\tmain_input_baselength, base_of_path, matches_main_base): Add\n\tvariables and functions to compare header base name to compilation\n\tunit base name.\n\t* opts.c (should_emit_struct_debug): Add to determine to emit a\n\tstructure based on the option.\n\t(dump_struct_debug) Also disabled function to debug this\n\tfunction.\n\t* opts.c (handle_options): Save the base name of the\n\tcompilation unit.\n\n\t* langhooks-def.h (LANG_HOOKS_GENERIC_TYPE_P): Define.\n        (LANG_HOOKS_FOR_TYPES_INITIALIZER): Add.\n\tThis hook indicates if a type is generic.  Set it by default\n\tto \"never generic\".\n\t* langhooks.h (struct lang_hooks_for_types): Add a new hook\n\tto determine if a struct type is generic or not.\n\t* cp/cp-tree.h (class_tmpl_impl_spec_p): Declare a C++ hook.\n\t* cp/tree.c (class_tmpl_impl_spec_p): Implement the C++ hook.\n\t* cp/cp-lang.c (LANG_HOOKS_GENERIC_TYPE_P): Override null C hook\n\twith live C++ hook.\n\n\t* flags.h (enum debug_info_usage): Add an enumeration to describe\n\ta program's use of a structure type.\n\t* dwarf2out.c (gen_struct_or_union_type_die): Add a new parameter\n\tto indicate the program's usage of the type.  Filter structs based\n\ton the -femit-struct-debug-... specification.\n\t(gen_type_die): Split into two routines, gen_type_die and\n\tgen_type_die_with_usage.  gen_type_die is now a wrapper\n\tthat assumes direct usage.\n\t(gen_type_die_with_usage): Replace calls to gen_type_die\n\twith gen_type_die_with_usage adding the program usage of\n\tthe referenced type.\n\t(dwarf2out_imported_module_or_decl): Suppress struct debug\n\tinformation using should_emit_struct_debug when appropriate.\ntestsuite/:\n\t* g++.dg/other/fesd-any.C: Test -femit-struct-debug-detailed=any.\n\t* g++.dg/other/fesd-any.h: Test -femit-struct-debug-detailed=any.\n\t* g++.dg/other/fesd-baseonly.C: Test -femit-struct-debug-baseonly.\n\t* g++.dg/other/fesd-baseonly.h: Test -femit-struct-debug-baseonly.\n\t* g++.dg/other/fesd-none.C: Test -femit-struct-debug-detailed=none.\n\t* g++.dg/other/fesd-none.h: Test -femit-struct-debug-detailed=none.\n\t* g++.dg/other/fesd-reduced.C: Test -femit-struct-debug-reduced.\n\t* g++.dg/other/fesd-reduced.h: Test -femit-struct-debug-reduced.\n\t* g++.dg/other/fesd-sys.C: Test -femit-struct-debug-detailed=sys.\n\t* g++.dg/other/fesd-sys.h: Test -femit-struct-debug-detailed=sys.\n\t* g++.dg/other/fesd.h: Common to -femit-struct-debug-... tests.\n\n\t* gcc.dg/fesd-any.c: Test -femit-struct-debug-detailed=any.\n\t* gcc.dg/fesd-any.h: Test -femit-struct-debug-detailed=any.\n\t* gcc.dg/fesd-baseonly.c: Test -femit-struct-debug-baseonly.\n\t* gcc.dg/fesd-baseonly.h: Test -femit-struct-debug-baseonly.\n\t* gcc.dg/fesd-none.c: Test -femit-struct-debug-detailed=none.\n\t* gcc.dg/fesd-none.h: Test -femit-struct-debug-detailed=none.\n\t* gcc.dg/fesd-reduced.c: Test -femit-struct-debug-reduced.\n\t* gcc.dg/fesd-reduced.h: Test -femit-struct-debug-reduced.\n\t* gcc.dg/fesd-sys.c: Test -femit-struct-debug-detailed=sys.\n\t* gcc.dg/fesd-sys.h: Test -femit-struct-debug-detailed=sys.\n\t* gcc.dg/fesd.h: Common to -femit-struct-debug-... tests.\n\nFrom-SVN: r123909", "tree": {"sha": "4e1b0eb361d1ad81f81cf74c4941675abea36a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e1b0eb361d1ad81f81cf74c4941675abea36a99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39ef65923c5943c0f04193463dee8eb46d249f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ef65923c5943c0f04193463dee8eb46d249f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ef65923c5943c0f04193463dee8eb46d249f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ef65923c5943c0f04193463dee8eb46d249f12/comments", "author": null, "committer": null, "parents": [{"sha": "fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb"}], "stats": {"total": 1965, "additions": 1955, "deletions": 10}, "files": [{"sha": "5cf9903435f9396015de77608056b4d0fd5f9ead", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -1,3 +1,54 @@\n+2007-04-16  Lawrence Crowl  <crowl@google.com>\n+\n+\t* doc/invoke.texi (Debugging Options): Add documentation for the\n+\t-femit-struct-debug options -femit-struct-debug-baseonly,\n+\t-femit-struct-debug-reduced, and\n+\t-femit-struct-debug-detailed[=...].\n+\n+\t* c-opts.c (c_common_handle_option): Add\n+\tOPT_femit_struct_debug_baseonly, OPT_femit_struct_debug_reduced,\n+\tand OPT_femit_struct_debug_detailed_.\n+\t* c.opt: Add specifications for\n+\t-femit-struct-debug-baseonly, -femit-struct-debug-reduced,\n+\tand -femit-struct-debug-detailed[=...].\n+\t* opts.c (set_struct_debug_option): Parse the\n+\t-femit-struct-debug-... options.\n+\t* opts.c (matches_main_base, main_input_basename,\n+\tmain_input_baselength, base_of_path, matches_main_base): Add\n+\tvariables and functions to compare header base name to compilation\n+\tunit base name.\n+\t* opts.c (should_emit_struct_debug): Add to determine to emit a\n+\tstructure based on the option.\n+\t(dump_struct_debug) Also disabled function to debug this\n+\tfunction.\n+\t* opts.c (handle_options): Save the base name of the\n+\tcompilation unit.\n+\n+\t* langhooks-def.h (LANG_HOOKS_GENERIC_TYPE_P): Define.\n+        (LANG_HOOKS_FOR_TYPES_INITIALIZER): Add.\n+\tThis hook indicates if a type is generic.  Set it by default\n+\tto \"never generic\".\n+\t* langhooks.h (struct lang_hooks_for_types): Add a new hook\n+\tto determine if a struct type is generic or not.\n+\t* cp/cp-tree.h (class_tmpl_impl_spec_p): Declare a C++ hook.\n+\t* cp/tree.c (class_tmpl_impl_spec_p): Implement the C++ hook.\n+\t* cp/cp-lang.c (LANG_HOOKS_GENERIC_TYPE_P): Override null C hook\n+\twith live C++ hook.\n+\n+\t* flags.h (enum debug_info_usage): Add an enumeration to describe\n+\ta program's use of a structure type.\n+\t* dwarf2out.c (gen_struct_or_union_type_die): Add a new parameter\n+\tto indicate the program's usage of the type.  Filter structs based\n+\ton the -femit-struct-debug-... specification.\n+\t(gen_type_die): Split into two routines, gen_type_die and\n+\tgen_type_die_with_usage.  gen_type_die is now a wrapper\n+\tthat assumes direct usage.\n+\t(gen_type_die_with_usage): Replace calls to gen_type_die\n+\twith gen_type_die_with_usage adding the program usage of\n+\tthe referenced type.\n+\t(dwarf2out_imported_module_or_decl): Suppress struct debug\n+\tinformation using should_emit_struct_debug when appropriate.\n+\n 2007-04-16  Ian Lance Taylor  <iant@google.com>\n \n \tPR tree-optimization/31522"}, {"sha": "e378f377a0ceff4b45de32bcdc4a902a95cd5925", "filename": "gcc/c-opts.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -832,6 +832,18 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_gen_declaration = 1;\n       break;\n \n+    case OPT_femit_struct_debug_baseonly:\n+      set_struct_debug_option (\"base\");\n+      break;\n+\n+    case OPT_femit_struct_debug_reduced:\n+      set_struct_debug_option (\"dir:ord:sys,dir:gen:any,ind:base\");\n+      break;\n+\n+    case OPT_femit_struct_debug_detailed_:\n+      set_struct_debug_option (arg);\n+      break;\n+\n     case OPT_idirafter:\n       add_path (xstrdup (arg), AFTER, 0, true);\n       break;"}, {"sha": "c76b3b4aa171425b577594ca2b601bfb1527d567", "filename": "gcc/c.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -791,6 +791,18 @@ gen-decls\n ObjC ObjC++\n Dump declarations to a .decl file\n \n+femit-struct-debug-baseonly\n+C ObjC C++ ObjC++\n+-femit-struct-debug-baseonly\tAggressive reduced debug info for structs\n+\n+femit-struct-debug-reduced\n+C ObjC C++ ObjC++\n+-femit-struct-debug-reduced\tConservative reduced debug info for structs\n+\n+femit-struct-debug-detailed=\n+C ObjC C++ ObjC++ Joined\n+-femit-struct-debug-detailed=<spec-list>\tDetailed reduced debug info for structs\n+\n idirafter\n C ObjC C++ ObjC++ Joined Separate\n -idirafter <dir>\tAdd <dir> to the end of the system include path"}, {"sha": "d898cf196ed54789cb9d508f5855be87e2bdb276", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -45,6 +45,8 @@ static const char * cxx_dwarf_name (tree t, int verbosity);\n #define LANG_HOOKS_NAME \"GNU C++\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT cxx_init\n+#undef LANG_HOOKS_GENERIC_TYPE_P\n+#define LANG_HOOKS_GENERIC_TYPE_P class_tmpl_impl_spec_p\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n #undef LANG_HOOKS_DWARF_NAME"}, {"sha": "e4e847328f306e0203120e4fe55165d6f4e9c03b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -4632,6 +4632,7 @@ extern tree add_stmt_to_compound\t\t(tree, tree);\n extern tree cxx_maybe_build_cleanup\t\t(tree);\n extern void init_tree\t\t\t\t(void);\n extern int pod_type_p\t\t\t\t(tree);\n+extern bool class_tmpl_impl_spec_p\t\t(tree);\n extern int zero_init_p\t\t\t\t(tree);\n extern tree canonical_type_variant\t\t(tree);\n extern tree copy_binfo\t\t\t\t(tree, tree, tree,"}, {"sha": "848c3407673df0552fe8556598756414c6ba5231", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -2007,6 +2007,14 @@ pod_type_p (tree t)\n   return 1;\n }\n \n+/* Nonzero iff type T is a class template implicit specialization.  */\n+\n+bool\n+class_tmpl_impl_spec_p (tree t)\n+{\n+  return CLASS_TYPE_P (t) && CLASSTYPE_TEMPLATE_INSTANTIATION (t);\n+}\n+\n /* Returns 1 iff zero initialization of type T means actually storing\n    zeros in it.  */\n "}, {"sha": "d1523db29de9ddc3131d3df4e4340a73419aa87a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -300,6 +300,8 @@ Objective-C and Objective-C++ Dialects}.\n -ftest-coverage  -ftime-report -fvar-tracking @gol\n -g  -g@var{level}  -gcoff -gdwarf-2 @gol\n -ggdb  -gstabs  -gstabs+  -gvms  -gxcoff  -gxcoff+ @gol\n+-femit-struct-debug-baseonly -femit-struct-debug-reduced @gol\n+-femit-struct-debug-detailed@r{[}=@var{spec-list}@r{]} @gol\n -p  -pg  -print-file-name=@var{library}  -print-libgcc-file-name @gol\n -print-multi-directory  -print-multi-lib @gol\n -print-prog-name=@var{program}  -print-search-dirs  -Q @gol\n@@ -3967,6 +3969,78 @@ Compress DWARF2 debugging information by eliminating duplicated\n information about each symbol.  This option only makes sense when\n generating DWARF2 debugging information with @option{-gdwarf-2}.\n \n+@item -femit-struct-debug-baseonly\n+Emit debug information for struct-like types\n+only when the base name of the compilation source file\n+matches the base name of file in which the struct was defined.\n+\n+This option substantially reduces the size of debugging information,\n+but at significant potential loss in type information to the debugger.\n+See @option{-femit-struct-debug-reduced} for a less aggressive option.\n+See @option{-femit-struct-debug-detailed} for more detailed control.\n+\n+This option works only with DWARF 2.\n+\n+@item -femit-struct-debug-reduced\n+Emit debug information for struct-like types\n+only when the base name of the compilation source file\n+matches the base name of file in which the type was defined,\n+unless the struct is a template or defined in a system header.\n+\n+This option significantly reduces the size of debugging information,\n+with some potential loss in type information to the debugger.\n+See @option{-femit-struct-debug-baseonly} for a more aggressive option.\n+See @option{-femit-struct-debug-detailed} for more detailed control.\n+\n+This option works only with DWARF 2.\n+\n+@item -femit-struct-debug-detailed@r{[}=@var{spec-list}@r{]}\n+Specify the struct-like types\n+for which the compiler will generate debug information.\n+The intent is to reduce duplicate struct debug information\n+between different object files within the same program.\n+\n+This option is a detailed version of\n+@option{-femit-struct-debug-reduced} and @option{-femit-struct-debug-baseonly},\n+which will serve for most needs.\n+\n+A specification has the syntax\n+[@samp{dir:}|@samp{ind:}][@samp{ord:}|@samp{gen:}](@samp{any}|@samp{sys}|@samp{base}|@samp{none})\n+\n+The optional first word limits the specification to\n+structs that are used directly (@samp{dir:}) or used indirectly (@samp{ind:}).\n+A struct type is used directly when it is the type of a variable, member.\n+Indirect uses arise through pointers to structs.\n+That is, when use of an incomplete struct would be legal, the use is indirect.\n+An example is\n+@samp{struct one direct; struct two * indirect;}.\n+\n+The optional second word limits the specification to\n+ordinary structs (@samp{ord:}) or generic structs (@samp{gen:}).\n+Generic structs are a bit complicated to explain.\n+For C++, these are non-explicit specializations of template classes,\n+or non-template classes within the above.\n+Other programming languages have generics,\n+but @samp{-femit-struct-debug-detailed} does not yet implement them.\n+\n+The third word specifies the source files for those\n+structs for which the compiler will emit debug information.\n+The values @samp{none} and @samp{any} have the normal meaning.\n+The value @samp{base} means that\n+the base of name of the file in which the type declaration appears\n+must match the base of the name of the main compilation file.\n+In practice, this means that\n+types declared in @file{foo.c} and @file{foo.h} will have debug information,\n+but types declared in other header will not.\n+The value @samp{sys} means those types satisfying @samp{base}\n+or declared in system or compiler headers.\n+\n+You may need to experiment to determine the best settings for your application.\n+\n+The default is @samp{-femit-struct-debug-detailed=all}.\n+\n+This option works only with DWARF 2.\n+\n @cindex @command{prof}\n @item -p\n @opindex p"}, {"sha": "bb70c2913348988d5e3a6781b090046545a364c7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -4236,7 +4236,8 @@ static void gen_ptr_to_mbr_type_die (tree, dw_die_ref);\n static dw_die_ref gen_compile_unit_die (const char *);\n static void gen_inheritance_die (tree, tree, dw_die_ref);\n static void gen_member_die (tree, dw_die_ref);\n-static void gen_struct_or_union_type_die (tree, dw_die_ref);\n+static void gen_struct_or_union_type_die (tree, dw_die_ref,\n+\t\t\t\t\t\tenum debug_info_usage);\n static void gen_subroutine_type_die (tree, dw_die_ref);\n static void gen_typedef_die (tree, dw_die_ref);\n static void gen_type_die (tree, dw_die_ref);\n@@ -12604,7 +12605,8 @@ gen_member_die (tree type, dw_die_ref context_die)\n    member DIEs needed by later specification DIEs.  */\n \n static void\n-gen_struct_or_union_type_die (tree type, dw_die_ref context_die)\n+gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n+\t\t\t\tenum debug_info_usage usage)\n {\n   dw_die_ref type_die = lookup_type_die (type);\n   dw_die_ref scope_die = 0;\n@@ -12613,6 +12615,7 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die)\n \t\t  && (! TYPE_STUB_DECL (type)\n \t\t      || ! TYPE_DECL_SUPPRESS_DEBUG (TYPE_STUB_DECL (type))));\n   int ns_decl = (context_die && context_die->die_tag == DW_TAG_namespace);\n+  complete = complete && should_emit_struct_debug (type, usage);\n \n   if (type_die && ! complete)\n     return;\n@@ -12749,7 +12752,8 @@ gen_typedef_die (tree decl, dw_die_ref context_die)\n /* Generate a type description DIE.  */\n \n static void\n-gen_type_die (tree type, dw_die_ref context_die)\n+gen_type_die_with_usage (tree type, dw_die_ref context_die,\n+\t\t\t\tenum debug_info_usage usage)\n {\n   int need_pop;\n \n@@ -12797,16 +12801,19 @@ gen_type_die (tree type, dw_die_ref context_die)\n \n       /* For these types, all that is required is that we output a DIE (or a\n \t set of DIEs) to represent the \"basis\" type.  */\n-      gen_type_die (TREE_TYPE (type), context_die);\n+      gen_type_die_with_usage (TREE_TYPE (type), context_die,\n+\t\t\t\tDINFO_USAGE_IND_USE);\n       break;\n \n     case OFFSET_TYPE:\n       /* This code is used for C++ pointer-to-data-member types.\n \t Output a description of the relevant class type.  */\n-      gen_type_die (TYPE_OFFSET_BASETYPE (type), context_die);\n+      gen_type_die_with_usage (TYPE_OFFSET_BASETYPE (type), context_die,\n+\t\t\t\t\tDINFO_USAGE_IND_USE);\n \n       /* Output a description of the type of the object pointed to.  */\n-      gen_type_die (TREE_TYPE (type), context_die);\n+      gen_type_die_with_usage (TREE_TYPE (type), context_die,\n+\t\t\t\t\tDINFO_USAGE_IND_USE);\n \n       /* Now output a DIE to represent this pointer-to-data-member type\n \t itself.  */\n@@ -12815,13 +12822,15 @@ gen_type_die (tree type, dw_die_ref context_die)\n \n     case FUNCTION_TYPE:\n       /* Force out return type (in case it wasn't forced out already).  */\n-      gen_type_die (TREE_TYPE (type), context_die);\n+      gen_type_die_with_usage (TREE_TYPE (type), context_die,\n+\t\t\t\t\tDINFO_USAGE_DIR_USE);\n       gen_subroutine_type_die (type, context_die);\n       break;\n \n     case METHOD_TYPE:\n       /* Force out return type (in case it wasn't forced out already).  */\n-      gen_type_die (TREE_TYPE (type), context_die);\n+      gen_type_die_with_usage (TREE_TYPE (type), context_die,\n+\t\t\t\t\tDINFO_USAGE_DIR_USE);\n       gen_subroutine_type_die (type, context_die);\n       break;\n \n@@ -12847,7 +12856,7 @@ gen_type_die (tree type, dw_die_ref context_die)\n \t  && AGGREGATE_TYPE_P (TYPE_CONTEXT (type))\n \t  && ! TREE_ASM_WRITTEN (TYPE_CONTEXT (type)))\n \t{\n-\t  gen_type_die (TYPE_CONTEXT (type), context_die);\n+\t  gen_type_die_with_usage (TYPE_CONTEXT (type), context_die, usage);\n \n \t  if (TREE_ASM_WRITTEN (type))\n \t    return;\n@@ -12871,7 +12880,7 @@ gen_type_die (tree type, dw_die_ref context_die)\n \t    gen_enumeration_type_die (type, context_die);\n \t}\n       else\n-\tgen_struct_or_union_type_die (type, context_die);\n+\tgen_struct_or_union_type_die (type, context_die, usage);\n \n       if (need_pop)\n \tpop_decl_scope ();\n@@ -12900,6 +12909,12 @@ gen_type_die (tree type, dw_die_ref context_die)\n   TREE_ASM_WRITTEN (type) = 1;\n }\n \n+static void\n+gen_type_die (tree type, dw_die_ref context_die)\n+{\n+  gen_type_die_with_usage (type, context_die, DINFO_USAGE_DIR_USE);\n+}\n+\n /* Generate a DIE for a tagged type instantiation.  */\n \n static void\n@@ -13496,7 +13511,11 @@ dwarf2out_imported_module_or_decl (tree decl, tree context)\n   if (!context)\n     scope_die = comp_unit_die;\n   else if (TYPE_P (context))\n+    {\n+      if (!should_emit_struct_debug (context, DINFO_USAGE_DIR_USE))\n+\treturn;\n     scope_die = force_type_die (context);\n+    }\n   else\n     scope_die = force_decl_die (context);\n \n@@ -13522,7 +13541,12 @@ dwarf2out_imported_module_or_decl (tree decl, tree context)\n \n \t      if (TYPE_CONTEXT (type))\n \t\tif (TYPE_P (TYPE_CONTEXT (type)))\n+\t\t  {\n+\t\t    if (!should_emit_struct_debug (TYPE_CONTEXT (type),\n+\t\t\t\t\t\t   DINFO_USAGE_DIR_USE))\n+\t\t      return;\n \t\t  type_context_die = force_type_die (TYPE_CONTEXT (type));\n+\t\t  }\n \t      else\n \t\ttype_context_die = force_decl_die (TYPE_CONTEXT (type));\n \t      else"}, {"sha": "98396f040915ea990ff0428c36c8f248f0784e21", "filename": "gcc/flags.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #ifndef GCC_FLAGS_H\n #define GCC_FLAGS_H\n \n+#include \"coretypes.h\"\n #include \"options.h\"\n \n enum debug_info_type\n@@ -54,6 +55,25 @@ enum debug_info_level\n /* Specify how much debugging info to generate.  */\n extern enum debug_info_level debug_info_level;\n \n+/* A major contribution to object and executable size is debug\n+   information size.  A major contribution to debug information\n+   size is struct descriptions replicated in several object files.\n+   The following function determines whether or not debug information\n+   should be generated for a given struct.  The indirect parameter\n+   indicates that the struct is being handled indirectly, via\n+   a pointer.  See opts.c for the implementation. */\n+\n+enum debug_info_usage\n+{\n+  DINFO_USAGE_DFN,\t/* A struct definition. */\n+  DINFO_USAGE_DIR_USE,\t/* A direct use, such as the type of a variable. */\n+  DINFO_USAGE_IND_USE,\t/* An indirect use, such as through a pointer. */\n+  DINFO_USAGE_NUM_ENUMS\t/* The number of enumerators. */\n+};\n+\n+extern bool should_emit_struct_debug (tree type_decl, enum debug_info_usage);\n+extern void set_struct_debug_option (const char *value);\n+\n /* Nonzero means use GNU-only extensions in the generated symbolic\n    debugging information.  */\n extern bool use_gnu_debug_info_extensions;"}, {"sha": "c2d5bc2e22cb58ebda60c2aef0a1bad913c4371e", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -199,6 +199,7 @@ extern tree lhd_make_node (enum tree_code);\n    so we create a compile-time error instead.  */\n #define LANG_HOOKS_MAKE_TYPE lhd_make_node\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n+#define LANG_HOOKS_GENERIC_TYPE_P\thook_bool_tree_false\n #define LANG_HOOKS_TYPE_PROMOTES_TO lhd_type_promotes_to\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE lhd_register_builtin_type\n #define LANG_HOOKS_TYPE_MAX_SIZE\tlhd_return_null_tree\n@@ -213,6 +214,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_UNSIGNED_TYPE, \\\n   LANG_HOOKS_SIGNED_TYPE, \\\n   LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE, \\\n+  LANG_HOOKS_GENERIC_TYPE_P, \\\n   LANG_HOOKS_TYPE_PROMOTES_TO, \\\n   LANG_HOOKS_REGISTER_BUILTIN_TYPE, \\\n   LANG_HOOKS_INCOMPLETE_TYPE_ERROR, \\"}, {"sha": "3e38f2653bd8aef2cfe238ecc1843015c9490c5f", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -115,6 +115,10 @@ struct lang_hooks_for_types\n      according to UNSIGNEDP.  */\n   tree (*signed_or_unsigned_type) (int, tree);\n \n+  /* True if the type is an instantiation of a generic type,\n+     e.g. C++ template implicit specializations.  */\n+  bool (*generic_p) (tree);\n+\n   /* Given a type, apply default promotions to unnamed function\n      arguments and return the new type.  Return the same type if no\n      change.  Required by any language that supports variadic"}, {"sha": "0c4a1627e856a3a745d70c594cb3a291b277ef22", "filename": "gcc/opts.c", "status": "modified", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -77,6 +77,256 @@ enum debug_info_type write_symbols = NO_DEBUG;\n    the definitions of the different possible levels.  */\n enum debug_info_level debug_info_level = DINFO_LEVEL_NONE;\n \n+/* A major contribution to object and executable size is debug\n+   information size.  A major contribution to debug information size\n+   is struct descriptions replicated in several object files. The\n+   following flags attempt to reduce this information.  The basic\n+   idea is to not emit struct debugging information in the current\n+   compilation unit when that information will be generated by\n+   another compilation unit.\n+\n+   Debug information for a struct defined in the current source\n+   file should be generated in the object file.  Likewise the\n+   debug information for a struct defined in a header should be\n+   generated in the object file of the corresponding source file.\n+   Both of these case are handled when the base name of the file of\n+   the struct definition matches the base name of the source file\n+   of thet current compilation unit.  This matching emits minimal\n+   struct debugging information.\n+\n+   The base file name matching rule above will fail to emit debug\n+   information for structs defined in system headers.  So a second\n+   category of files includes system headers in addition to files\n+   with matching bases.\n+\n+   The remaining types of files are library headers and application\n+   headers.  We cannot currently distinguish these two types.  */\n+\n+enum debug_struct_file\n+{\n+  DINFO_STRUCT_FILE_NONE,   /* Debug no structs. */\n+  DINFO_STRUCT_FILE_BASE,   /* Debug structs defined in files with the\n+                               same base name as the compilation unit. */\n+  DINFO_STRUCT_FILE_SYS,    /* Also debug structs defined in system\n+                               header files.  */\n+  DINFO_STRUCT_FILE_ANY     /* Debug structs defined in all files. */\n+};\n+\n+/* Generic structs (e.g. templates not explicitly specialized)\n+   may not have a compilation unit associated with them, and so\n+   may need to be treated differently from ordinary structs.\n+\n+   Structs only handled by reference (indirectly), will also usually\n+   not need as much debugging information.  */\n+\n+static enum debug_struct_file debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS]\n+  = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY };\n+static enum debug_struct_file debug_struct_generic[DINFO_USAGE_NUM_ENUMS]\n+  = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY };\n+\n+/* Parse the -femit-struct-debug-detailed option value\n+   and set the flag variables. */\n+\n+#define MATCH( prefix, string ) \\\n+  ((strncmp (prefix, string, sizeof prefix - 1) == 0) \\\n+   ? ((string += sizeof prefix - 1), 1) : 0)\n+\n+void\n+set_struct_debug_option (const char *spec)\n+{\n+  /* various labels for comparison */\n+  static char dfn_lbl[] = \"dfn:\", dir_lbl[] = \"dir:\", ind_lbl[] = \"ind:\";\n+  static char ord_lbl[] = \"ord:\", gen_lbl[] = \"gen:\";\n+  static char none_lbl[] = \"none\", any_lbl[] = \"any\";\n+  static char base_lbl[] = \"base\", sys_lbl[] = \"sys\";\n+\n+  enum debug_struct_file files = DINFO_STRUCT_FILE_ANY;\n+  /* Default is to apply to as much as possible. */\n+  enum debug_info_usage usage = DINFO_USAGE_NUM_ENUMS;\n+  int ord = 1, gen = 1;\n+\n+  /* What usage? */\n+  if (MATCH (dfn_lbl, spec))\n+    usage = DINFO_USAGE_DFN;\n+  else if (MATCH (dir_lbl, spec))\n+    usage = DINFO_USAGE_DIR_USE;\n+  else if (MATCH (ind_lbl, spec))\n+    usage = DINFO_USAGE_IND_USE;\n+\n+  /* Generics or not? */\n+  if (MATCH (ord_lbl, spec))\n+    gen = 0;\n+  else if (MATCH (gen_lbl, spec))\n+    ord = 0;\n+\n+  /* What allowable environment? */\n+  if (MATCH (none_lbl, spec))\n+    files = DINFO_STRUCT_FILE_NONE;\n+  else if (MATCH (any_lbl, spec))\n+    files = DINFO_STRUCT_FILE_ANY;\n+  else if (MATCH (sys_lbl, spec))\n+    files = DINFO_STRUCT_FILE_SYS;\n+  else if (MATCH (base_lbl, spec))\n+    files = DINFO_STRUCT_FILE_BASE;\n+  else\n+    error (\"argument %qs to %<-femit-struct-debug-detailed%> not recognized\",\n+           spec);\n+\n+  /* Effect the specification. */\n+  if (usage == DINFO_USAGE_NUM_ENUMS)\n+    {\n+      if (ord)\n+        {\n+          debug_struct_ordinary[DINFO_USAGE_DFN] = files;\n+          debug_struct_ordinary[DINFO_USAGE_DIR_USE] = files;\n+          debug_struct_ordinary[DINFO_USAGE_IND_USE] = files;\n+        }\n+      if (gen)\n+        {\n+          debug_struct_generic[DINFO_USAGE_DFN] = files;\n+          debug_struct_generic[DINFO_USAGE_DIR_USE] = files;\n+          debug_struct_generic[DINFO_USAGE_IND_USE] = files;\n+        }\n+    }\n+  else\n+    {\n+      if (ord)\n+        debug_struct_ordinary[usage] = files;\n+      if (gen)\n+        debug_struct_generic[usage] = files;\n+    }\n+\n+  if (*spec == ',')\n+    set_struct_debug_option (spec+1);\n+  else\n+    {\n+      /* No more -femit-struct-debug-detailed specifications.\n+         Do final checks. */\n+      if (*spec != '\\0')\n+\terror (\"argument %qs to %<-femit-struct-debug-detailed%> unknown\",\n+               spec);\n+      if (debug_struct_ordinary[DINFO_USAGE_DIR_USE]\n+\t\t< debug_struct_ordinary[DINFO_USAGE_IND_USE]\n+\t  || debug_struct_generic[DINFO_USAGE_DIR_USE]\n+\t\t< debug_struct_generic[DINFO_USAGE_IND_USE])\n+\terror (\"%<-femit-struct-debug-detailed=dir:...%> must allow at least\"\n+               \" as much as %<-femit-struct-debug-detailed=ind:...%>\");\n+    }\n+}\n+\n+/* Find the base name of a path, stripping off both directories and\n+   a single final extension. */\n+static int\n+base_of_path (const char *path, const char **base_out)\n+{\n+  const char *base = path;\n+  const char *dot = 0;\n+  const char *p = path;\n+  char c = *p;\n+  while (c)\n+    {\n+      if (IS_DIR_SEPARATOR(c))\n+        {\n+          base = p + 1;\n+          dot = 0;\n+        }\n+      else if (c == '.')\n+        dot = p;\n+      c = *++p;\n+    }\n+  if (!dot)\n+    dot = p;\n+  *base_out = base;\n+  return dot - base;\n+}\n+\n+/* Match the base name of a file to the base name of a compilation unit. */\n+\n+static const char *main_input_basename;\n+static int main_input_baselength;\n+\n+static int\n+matches_main_base (const char *path)\n+{\n+  /* Cache the last query. */\n+  static const char *last_path = NULL;\n+  static int last_match = 0;\n+  if (path != last_path)\n+    {\n+      const char *base;\n+      int length = base_of_path (path, &base);\n+      last_path = path;\n+      last_match = (length == main_input_baselength\n+                    && memcmp (base, main_input_basename, length) == 0);\n+    }\n+  return last_match;\n+}\n+\n+#ifdef DEBUG_DEBUG_STRUCT\n+\n+static int\n+dump_struct_debug (tree type, enum debug_info_usage usage,\n+\t\t   enum debug_struct_file criterion, int generic,\n+\t\t   int matches, int result)\n+{\n+  /* Find the type name. */\n+  tree type_decl = TYPE_STUB_DECL (type);\n+  tree t = type_decl;\n+  const char *name = 0;\n+  if (TREE_CODE (t) == TYPE_DECL)\n+    t = DECL_NAME (t);\n+  if (t)\n+    name = IDENTIFIER_POINTER (t);\n+\n+  fprintf (stderr, \"\tstruct %d %s %s %s %s %d %p %s\\n\",\n+\t   criterion,\n+           DECL_IN_SYSTEM_HEADER (type_decl) ? \"sys\" : \"usr\",\n+           matches ? \"bas\" : \"hdr\",\n+           generic ? \"gen\" : \"ord\",\n+           usage == DINFO_USAGE_DFN ? \";\" :\n+             usage == DINFO_USAGE_DIR_USE ? \".\" : \"*\",\n+           result,\n+           (void*) type_decl, name);\n+  return result;\n+}\n+#define DUMP_GSTRUCT(type, usage, criterion, generic, matches, result) \\\n+  dump_struct_debug (type, usage, criterion, generic, matches, result)\n+\n+#else\n+\n+#define DUMP_GSTRUCT(type, usage, criterion, generic, matches, result) \\\n+  (result)\n+\n+#endif\n+\n+\n+bool\n+should_emit_struct_debug (tree type, enum debug_info_usage usage)\n+{\n+  enum debug_struct_file criterion;\n+  tree type_decl;\n+  bool generic = lang_hooks.types.generic_p (type);\n+\n+  if (generic)\n+    criterion = debug_struct_generic[usage];\n+  else\n+    criterion = debug_struct_ordinary[usage];\n+\n+  if (criterion == DINFO_STRUCT_FILE_NONE)\n+    return DUMP_GSTRUCT (type, usage, criterion, generic, false, false);\n+  if (criterion == DINFO_STRUCT_FILE_ANY)\n+    return DUMP_GSTRUCT (type, usage, criterion, generic, false, true);\n+\n+  type_decl = TYPE_STUB_DECL (type);\n+\n+  if (criterion == DINFO_STRUCT_FILE_SYS && DECL_IN_SYSTEM_HEADER (type_decl))\n+    return DUMP_GSTRUCT (type, usage, criterion, generic, false, true);\n+\n+  if (matches_main_base (DECL_SOURCE_FILE (type_decl)))\n+    return DUMP_GSTRUCT (type, usage, criterion, generic, true, true);\n+  return DUMP_GSTRUCT (type, usage, criterion, generic, false, false);\n+}\n+\n /* Nonzero means use GNU-only extensions in the generated symbolic\n    debugging information.  Currently, this only has an effect when\n    write_symbols is set to DBX_DEBUG, XCOFF_DEBUG, or DWARF_DEBUG.  */\n@@ -368,7 +618,11 @@ handle_options (unsigned int argc, const char **argv, unsigned int lang_mask)\n       if (opt[0] != '-' || opt[1] == '\\0')\n \t{\n \t  if (main_input_filename == NULL)\n+\t    {\n \t    main_input_filename = opt;\n+\t      main_input_baselength\n+\t\t= base_of_path (main_input_filename, &main_input_basename);\n+\t    }\n \t  add_input_filename (opt);\n \t  n = 1;\n \t  continue;"}, {"sha": "652e4cc0c948f287c9a3f698caecf82a36a2f019", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -1,3 +1,29 @@\n+2007-04-16  Lawrence Crowl  <crowl@google.com>\n+\n+\t* g++.dg/other/fesd-any.C: Test -femit-struct-debug-detailed=any.\n+\t* g++.dg/other/fesd-any.h: Test -femit-struct-debug-detailed=any.\n+\t* g++.dg/other/fesd-baseonly.C: Test -femit-struct-debug-baseonly.\n+\t* g++.dg/other/fesd-baseonly.h: Test -femit-struct-debug-baseonly.\n+\t* g++.dg/other/fesd-none.C: Test -femit-struct-debug-detailed=none.\n+\t* g++.dg/other/fesd-none.h: Test -femit-struct-debug-detailed=none.\n+\t* g++.dg/other/fesd-reduced.C: Test -femit-struct-debug-reduced.\n+\t* g++.dg/other/fesd-reduced.h: Test -femit-struct-debug-reduced.\n+\t* g++.dg/other/fesd-sys.C: Test -femit-struct-debug-detailed=sys.\n+\t* g++.dg/other/fesd-sys.h: Test -femit-struct-debug-detailed=sys.\n+\t* g++.dg/other/fesd.h: Common to -femit-struct-debug-... tests.\n+\n+\t* gcc.dg/fesd-any.c: Test -femit-struct-debug-detailed=any.\n+\t* gcc.dg/fesd-any.h: Test -femit-struct-debug-detailed=any.\n+\t* gcc.dg/fesd-baseonly.c: Test -femit-struct-debug-baseonly.\n+\t* gcc.dg/fesd-baseonly.h: Test -femit-struct-debug-baseonly.\n+\t* gcc.dg/fesd-none.c: Test -femit-struct-debug-detailed=none.\n+\t* gcc.dg/fesd-none.h: Test -femit-struct-debug-detailed=none.\n+\t* gcc.dg/fesd-reduced.c: Test -femit-struct-debug-reduced.\n+\t* gcc.dg/fesd-reduced.h: Test -femit-struct-debug-reduced.\n+\t* gcc.dg/fesd-sys.c: Test -femit-struct-debug-detailed=sys.\n+\t* gcc.dg/fesd-sys.h: Test -femit-struct-debug-detailed=sys.\n+\t* gcc.dg/fesd.h: Common to -femit-struct-debug-... tests.\n+\n 2007-04-16  Ian Lance Taylor  <iant@google.com>\n \n \tPR tree-optimization/31522"}, {"sha": "a4a0b50ee50bc673a588a6822a65f6d9a3f73336", "filename": "gcc/testsuite/g++.dg/other/fesd-any.C", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-any.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-any.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-any.C?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,126 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-detailed=any\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_fld_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_decl_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ptr_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+# 1 \"fesd-any.C\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-any.C\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-any.C\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-any.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+struct gstruct_head_tmpl_defn_var_base< int > base_var5;\n+struct gstruct_base_tmpl_defn_var_base< int > base_var6;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n++ base_var5.field_head_tmpl_defn_var_base\n++ base_var6.field1_base_tmpl_defn_var_base_ptr->field_head_tmpl_defn_ptr_base\n++ base_var6.field1_base_tmpl_defn_var_base_fld.field_head_tmpl_defn_fld_base\n++ base_var6.field2_base_tmpl_defn_var_base_ptr->field_base_tmpl_defn_ptr_base\n++ base_var6.field2_base_tmpl_defn_var_base_fld.field_base_tmpl_defn_fld_base\n+;\n+}\n+"}, {"sha": "762f5878f938b569d3e03fb986bb5237c31b756c", "filename": "gcc/testsuite/g++.dg/other/fesd-any.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-any.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-any.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-any.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,42 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};\n+\n+template< typename T > struct gstruct_base_tmpl_decl_not;\n+template< typename T > struct gstruct_base_tmpl_defn_not\n+{ int field_base_tmpl_defn_not; };\n+\n+template< typename T > struct gstruct_base_tmpl_decl_ref_base;\n+template< typename T > struct gstruct_base_tmpl_defn_ref_base\n+{ int field_base_tmpl_defn_ref_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_ptr_base\n+{ int field_base_tmpl_defn_ptr_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_fld_base\n+{ int field_base_tmpl_defn_fld_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_var_base {\n+    gstruct_head_tmpl_decl_ref_base< T > *field1_base_tmpl_defn_var_base_inc;\n+    gstruct_head_tmpl_defn_ref_base< T > *field1_base_tmpl_defn_var_base_ref;\n+    gstruct_head_tmpl_defn_ptr_base< T > *field1_base_tmpl_defn_var_base_ptr;\n+    gstruct_head_tmpl_defn_fld_base< T >  field1_base_tmpl_defn_var_base_fld;\n+    gstruct_base_tmpl_decl_ref_base< T > *field2_base_tmpl_defn_var_base_inc;\n+    gstruct_base_tmpl_defn_ref_base< T > *field2_base_tmpl_defn_var_base_ref;\n+    gstruct_base_tmpl_defn_ptr_base< T > *field2_base_tmpl_defn_var_base_ptr;\n+    gstruct_base_tmpl_defn_fld_base< T >  field2_base_tmpl_defn_var_base_fld;\n+};\n+"}, {"sha": "4f580ebd36120a8b2b2ff331c767d259e50d011e", "filename": "gcc/testsuite/g++.dg/other/fesd-baseonly.C", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-baseonly.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-baseonly.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-baseonly.C?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,126 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-baseonly\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_fld_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_decl_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_ptr_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+# 1 \"fesd-baseonly.C\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-baseonly.C\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-baseonly.C\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-baseonly.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+struct gstruct_head_tmpl_defn_var_base< int > base_var5;\n+struct gstruct_base_tmpl_defn_var_base< int > base_var6;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n++ base_var5.field_head_tmpl_defn_var_base\n++ base_var6.field1_base_tmpl_defn_var_base_ptr->field_head_tmpl_defn_ptr_base\n++ base_var6.field1_base_tmpl_defn_var_base_fld.field_head_tmpl_defn_fld_base\n++ base_var6.field2_base_tmpl_defn_var_base_ptr->field_base_tmpl_defn_ptr_base\n++ base_var6.field2_base_tmpl_defn_var_base_fld.field_base_tmpl_defn_fld_base\n+;\n+}\n+"}, {"sha": "762f5878f938b569d3e03fb986bb5237c31b756c", "filename": "gcc/testsuite/g++.dg/other/fesd-baseonly.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-baseonly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-baseonly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-baseonly.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,42 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};\n+\n+template< typename T > struct gstruct_base_tmpl_decl_not;\n+template< typename T > struct gstruct_base_tmpl_defn_not\n+{ int field_base_tmpl_defn_not; };\n+\n+template< typename T > struct gstruct_base_tmpl_decl_ref_base;\n+template< typename T > struct gstruct_base_tmpl_defn_ref_base\n+{ int field_base_tmpl_defn_ref_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_ptr_base\n+{ int field_base_tmpl_defn_ptr_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_fld_base\n+{ int field_base_tmpl_defn_fld_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_var_base {\n+    gstruct_head_tmpl_decl_ref_base< T > *field1_base_tmpl_defn_var_base_inc;\n+    gstruct_head_tmpl_defn_ref_base< T > *field1_base_tmpl_defn_var_base_ref;\n+    gstruct_head_tmpl_defn_ptr_base< T > *field1_base_tmpl_defn_var_base_ptr;\n+    gstruct_head_tmpl_defn_fld_base< T >  field1_base_tmpl_defn_var_base_fld;\n+    gstruct_base_tmpl_decl_ref_base< T > *field2_base_tmpl_defn_var_base_inc;\n+    gstruct_base_tmpl_defn_ref_base< T > *field2_base_tmpl_defn_var_base_ref;\n+    gstruct_base_tmpl_defn_ptr_base< T > *field2_base_tmpl_defn_var_base_ptr;\n+    gstruct_base_tmpl_defn_fld_base< T >  field2_base_tmpl_defn_var_base_fld;\n+};\n+"}, {"sha": "0af0a83d85f73151a83cd97617a4a6bf2b523a5e", "filename": "gcc/testsuite/g++.dg/other/fesd-none.C", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-none.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-none.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-none.C?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,126 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-detailed=none\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_fld_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_decl_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_ptr_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_base_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_base_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+# 1 \"fesd-none.C\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-none.C\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-none.C\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-none.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+struct gstruct_head_tmpl_defn_var_base< int > base_var5;\n+struct gstruct_base_tmpl_defn_var_base< int > base_var6;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n++ base_var5.field_head_tmpl_defn_var_base\n++ base_var6.field1_base_tmpl_defn_var_base_ptr->field_head_tmpl_defn_ptr_base\n++ base_var6.field1_base_tmpl_defn_var_base_fld.field_head_tmpl_defn_fld_base\n++ base_var6.field2_base_tmpl_defn_var_base_ptr->field_base_tmpl_defn_ptr_base\n++ base_var6.field2_base_tmpl_defn_var_base_fld.field_base_tmpl_defn_fld_base\n+;\n+}\n+"}, {"sha": "762f5878f938b569d3e03fb986bb5237c31b756c", "filename": "gcc/testsuite/g++.dg/other/fesd-none.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-none.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-none.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-none.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,42 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};\n+\n+template< typename T > struct gstruct_base_tmpl_decl_not;\n+template< typename T > struct gstruct_base_tmpl_defn_not\n+{ int field_base_tmpl_defn_not; };\n+\n+template< typename T > struct gstruct_base_tmpl_decl_ref_base;\n+template< typename T > struct gstruct_base_tmpl_defn_ref_base\n+{ int field_base_tmpl_defn_ref_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_ptr_base\n+{ int field_base_tmpl_defn_ptr_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_fld_base\n+{ int field_base_tmpl_defn_fld_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_var_base {\n+    gstruct_head_tmpl_decl_ref_base< T > *field1_base_tmpl_defn_var_base_inc;\n+    gstruct_head_tmpl_defn_ref_base< T > *field1_base_tmpl_defn_var_base_ref;\n+    gstruct_head_tmpl_defn_ptr_base< T > *field1_base_tmpl_defn_var_base_ptr;\n+    gstruct_head_tmpl_defn_fld_base< T >  field1_base_tmpl_defn_var_base_fld;\n+    gstruct_base_tmpl_decl_ref_base< T > *field2_base_tmpl_defn_var_base_inc;\n+    gstruct_base_tmpl_defn_ref_base< T > *field2_base_tmpl_defn_var_base_ref;\n+    gstruct_base_tmpl_defn_ptr_base< T > *field2_base_tmpl_defn_var_base_ptr;\n+    gstruct_base_tmpl_defn_fld_base< T >  field2_base_tmpl_defn_var_base_fld;\n+};\n+"}, {"sha": "a93b90f05adf159a7ac45b22630e737b8dede6ca", "filename": "gcc/testsuite/g++.dg/other/fesd-reduced.C", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-reduced.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-reduced.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-reduced.C?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,126 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-reduced\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_fld_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_decl_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ptr_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+# 1 \"fesd-reduced.C\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-reduced.C\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-reduced.C\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-reduced.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+struct gstruct_head_tmpl_defn_var_base< int > base_var5;\n+struct gstruct_base_tmpl_defn_var_base< int > base_var6;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n++ base_var5.field_head_tmpl_defn_var_base\n++ base_var6.field1_base_tmpl_defn_var_base_ptr->field_head_tmpl_defn_ptr_base\n++ base_var6.field1_base_tmpl_defn_var_base_fld.field_head_tmpl_defn_fld_base\n++ base_var6.field2_base_tmpl_defn_var_base_ptr->field_base_tmpl_defn_ptr_base\n++ base_var6.field2_base_tmpl_defn_var_base_fld.field_base_tmpl_defn_fld_base\n+;\n+}\n+"}, {"sha": "762f5878f938b569d3e03fb986bb5237c31b756c", "filename": "gcc/testsuite/g++.dg/other/fesd-reduced.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-reduced.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-reduced.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-reduced.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,42 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};\n+\n+template< typename T > struct gstruct_base_tmpl_decl_not;\n+template< typename T > struct gstruct_base_tmpl_defn_not\n+{ int field_base_tmpl_defn_not; };\n+\n+template< typename T > struct gstruct_base_tmpl_decl_ref_base;\n+template< typename T > struct gstruct_base_tmpl_defn_ref_base\n+{ int field_base_tmpl_defn_ref_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_ptr_base\n+{ int field_base_tmpl_defn_ptr_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_fld_base\n+{ int field_base_tmpl_defn_fld_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_var_base {\n+    gstruct_head_tmpl_decl_ref_base< T > *field1_base_tmpl_defn_var_base_inc;\n+    gstruct_head_tmpl_defn_ref_base< T > *field1_base_tmpl_defn_var_base_ref;\n+    gstruct_head_tmpl_defn_ptr_base< T > *field1_base_tmpl_defn_var_base_ptr;\n+    gstruct_head_tmpl_defn_fld_base< T >  field1_base_tmpl_defn_var_base_fld;\n+    gstruct_base_tmpl_decl_ref_base< T > *field2_base_tmpl_defn_var_base_inc;\n+    gstruct_base_tmpl_defn_ref_base< T > *field2_base_tmpl_defn_var_base_ref;\n+    gstruct_base_tmpl_defn_ptr_base< T > *field2_base_tmpl_defn_var_base_ptr;\n+    gstruct_base_tmpl_defn_fld_base< T >  field2_base_tmpl_defn_var_base_fld;\n+};\n+"}, {"sha": "95a9a31ff609d7e3e823cb93d76de84fd928f4db", "filename": "gcc/testsuite/g++.dg/other/fesd-sys.C", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-sys.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-sys.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-sys.C?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,126 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-detailed=sys\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_fld_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_decl_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_ref_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_tmpl_defn_ptr_head<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_fld_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_tmpl_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_var_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_tmpl_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_decl_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_ref_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_tmpl_defn_ptr_base<int>.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_tmpl_defn_ptr_base.*DW_AT_name\" } }\n+# 1 \"fesd-sys.C\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-sys.C\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-sys.C\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-sys.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+struct gstruct_head_tmpl_defn_var_base< int > base_var5;\n+struct gstruct_base_tmpl_defn_var_base< int > base_var6;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n++ base_var5.field_head_tmpl_defn_var_base\n++ base_var6.field1_base_tmpl_defn_var_base_ptr->field_head_tmpl_defn_ptr_base\n++ base_var6.field1_base_tmpl_defn_var_base_fld.field_head_tmpl_defn_fld_base\n++ base_var6.field2_base_tmpl_defn_var_base_ptr->field_base_tmpl_defn_ptr_base\n++ base_var6.field2_base_tmpl_defn_var_base_fld.field_base_tmpl_defn_fld_base\n+;\n+}\n+"}, {"sha": "762f5878f938b569d3e03fb986bb5237c31b756c", "filename": "gcc/testsuite/g++.dg/other/fesd-sys.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-sys.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-sys.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd-sys.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,42 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};\n+\n+template< typename T > struct gstruct_base_tmpl_decl_not;\n+template< typename T > struct gstruct_base_tmpl_defn_not\n+{ int field_base_tmpl_defn_not; };\n+\n+template< typename T > struct gstruct_base_tmpl_decl_ref_base;\n+template< typename T > struct gstruct_base_tmpl_defn_ref_base\n+{ int field_base_tmpl_defn_ref_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_ptr_base\n+{ int field_base_tmpl_defn_ptr_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_fld_base\n+{ int field_base_tmpl_defn_fld_base; };\n+template< typename T > struct gstruct_base_tmpl_defn_var_base {\n+    gstruct_head_tmpl_decl_ref_base< T > *field1_base_tmpl_defn_var_base_inc;\n+    gstruct_head_tmpl_defn_ref_base< T > *field1_base_tmpl_defn_var_base_ref;\n+    gstruct_head_tmpl_defn_ptr_base< T > *field1_base_tmpl_defn_var_base_ptr;\n+    gstruct_head_tmpl_defn_fld_base< T >  field1_base_tmpl_defn_var_base_fld;\n+    gstruct_base_tmpl_decl_ref_base< T > *field2_base_tmpl_defn_var_base_inc;\n+    gstruct_base_tmpl_defn_ref_base< T > *field2_base_tmpl_defn_var_base_ref;\n+    gstruct_base_tmpl_defn_ptr_base< T > *field2_base_tmpl_defn_var_base_ptr;\n+    gstruct_base_tmpl_defn_fld_base< T >  field2_base_tmpl_defn_var_base_fld;\n+};\n+"}, {"sha": "83bb15a17bdb1a8cf05a79681c2a8f07009237d3", "filename": "gcc/testsuite/g++.dg/other/fesd.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffesd.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,67 @@\n+/*\n+where from: base = matching base; head = other header\n+what kind:  ordy = ordinary struct; tmpl = template struct\n+definition: decl = incomplete declaration; defn = full definition\n+how used:   not = not used; ref = by ref; ptr = through pointer;\n+            fld = as field; var = as variable\n+from where: base = from base; head = other header\n+*/\n+\n+struct gstruct_head_ordy_decl_not;\n+struct gstruct_head_ordy_defn_not { int field_head_ordy_defn_not; };\n+\n+struct gstruct_head_ordy_decl_ref_head;\n+struct gstruct_head_ordy_defn_ref_head { int field_head_ordy_defn_ref_head; };\n+struct gstruct_head_ordy_defn_ptr_head { int field_head_ordy_defn_ptr_head; };\n+struct gstruct_head_ordy_defn_fld_head { int field_head_ordy_defn_fld_head; };\n+struct gstruct_head_ordy_defn_var_head {\n+    gstruct_head_ordy_decl_ref_head *field_head_ordy_defn_var_head_inc;\n+    gstruct_head_ordy_defn_ref_head *field_head_ordy_defn_var_head_ref;\n+    gstruct_head_ordy_defn_ptr_head *field_head_ordy_defn_var_head_ptr;\n+    gstruct_head_ordy_defn_fld_head  field_head_ordy_defn_var_head_fld;\n+};\n+extern struct gstruct_head_ordy_defn_var_head head_var1;\n+\n+struct gstruct_head_ordy_decl_ref_base;\n+struct gstruct_head_ordy_defn_ref_base { int field_head_ordy_defn_ref_base; };\n+struct gstruct_head_ordy_defn_ptr_base { int field_head_ordy_defn_ptr_base; };\n+struct gstruct_head_ordy_defn_fld_base { int field_head_ordy_defn_fld_base; };\n+struct gstruct_head_ordy_defn_var_base { int field_head_ordy_defn_var_base; };\n+\n+template< typename T > struct gstruct_head_tmpl_decl_not;\n+template< typename T > struct gstruct_head_tmpl_defn_not\n+{ T field_head_tmpl_defn_not; };\n+\n+template< typename T > struct gstruct_head_tmpl_decl_ref_head;\n+template< typename T > struct gstruct_head_tmpl_defn_ref_head\n+{ T field_head_tmpl_defn_ref_head; };\n+template< typename T > struct gstruct_head_tmpl_defn_ptr_head\n+{ T field_head_tmpl_defn_ptr_head; };\n+template< typename T > struct gstruct_head_tmpl_defn_fld_head\n+{ T field_head_tmpl_defn_fld_head; };\n+template< typename T > struct gstruct_head_tmpl_defn_var_head {\n+    gstruct_head_tmpl_decl_ref_head< T > *field_head_tmpl_defn_var_head_inc;\n+    gstruct_head_tmpl_defn_ref_head< T > *field_head_tmpl_defn_var_head_ref;\n+    gstruct_head_tmpl_defn_ptr_head< T > *field_head_tmpl_defn_var_head_ptr;\n+    gstruct_head_tmpl_defn_fld_head< T >  field_head_tmpl_defn_var_head_fld;\n+};\n+extern gstruct_head_tmpl_defn_var_head< int > head_var5;\n+\n+template< typename T > struct gstruct_head_tmpl_decl_ref_base;\n+template< typename T > struct gstruct_head_tmpl_defn_ref_base\n+{ T field_head_tmpl_defn_ref_base; };\n+template< typename T > struct gstruct_head_tmpl_defn_ptr_base\n+{ T field_head_tmpl_defn_ptr_base; };\n+template< typename T > struct gstruct_head_tmpl_defn_fld_base\n+{ T field_head_tmpl_defn_fld_base; };\n+template< typename T > struct gstruct_head_tmpl_defn_var_base\n+{ T field_head_tmpl_defn_var_base; };\n+\n+inline int head_function() {\n+    return 0\n++ head_var1.field_head_ordy_defn_var_head_ptr->field_head_ordy_defn_ptr_head\n++ head_var1.field_head_ordy_defn_var_head_fld.field_head_ordy_defn_fld_head\n++ head_var5.field_head_tmpl_defn_var_head_ptr->field_head_tmpl_defn_ptr_head\n++ head_var5.field_head_tmpl_defn_var_head_fld.field_head_tmpl_defn_fld_head\n+;\n+}"}, {"sha": "fc510903c2ca8e3e04471ed0fa4028c123c5d56a", "filename": "gcc/testsuite/gcc.dg/fesd-any.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-any.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-any.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-any.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,84 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-detailed=any\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+# 1 \"fesd-any.c\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-any.c\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-any.c\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-any.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n+;\n+}\n+"}, {"sha": "a7146b65e31814f7d037a14ae83343b715abad32", "filename": "gcc/testsuite/gcc.dg/fesd-any.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-any.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-any.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-any.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,19 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    struct gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    struct gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    struct gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    struct gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    struct gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    struct gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    struct gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    struct gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};"}, {"sha": "a32abb5a2e22434ffa1d51925a0dba62886f5f16", "filename": "gcc/testsuite/gcc.dg/fesd-baseonly.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-baseonly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-baseonly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-baseonly.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,83 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-baseonly\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+# 1 \"fesd-baseonly.c\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-baseonly.c\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-baseonly.c\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-baseonly.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n+;\n+}"}, {"sha": "a7146b65e31814f7d037a14ae83343b715abad32", "filename": "gcc/testsuite/gcc.dg/fesd-baseonly.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-baseonly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-baseonly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-baseonly.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,19 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    struct gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    struct gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    struct gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    struct gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    struct gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    struct gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    struct gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    struct gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};"}, {"sha": "bd218f82615ef4a70ae8d8091717751469b67dab", "filename": "gcc/testsuite/gcc.dg/fesd-none.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-none.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,84 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-detailed=none\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+# 1 \"fesd-none.c\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-none.c\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-none.c\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-none.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n+;\n+}\n+"}, {"sha": "a7146b65e31814f7d037a14ae83343b715abad32", "filename": "gcc/testsuite/gcc.dg/fesd-none.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-none.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-none.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-none.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,19 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    struct gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    struct gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    struct gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    struct gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    struct gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    struct gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    struct gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    struct gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};"}, {"sha": "ac599f43fbff865fb47d85fdbfdac4efc28ab5bd", "filename": "gcc/testsuite/gcc.dg/fesd-reduced.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-reduced.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-reduced.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-reduced.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,83 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-reduced\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+# 1 \"fesd-reduced.c\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-reduced.c\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-reduced.c\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-reduced.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n+;\n+}"}, {"sha": "a7146b65e31814f7d037a14ae83343b715abad32", "filename": "gcc/testsuite/gcc.dg/fesd-reduced.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-reduced.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-reduced.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-reduced.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,19 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    struct gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    struct gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    struct gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    struct gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    struct gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    struct gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    struct gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    struct gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};"}, {"sha": "3a5c0bf1463512c71b407b4edbc33c77b037339d", "filename": "gcc/testsuite/gcc.dg/fesd-sys.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-sys.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-sys.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-sys.c?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,83 @@\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -femit-struct-debug-detailed=sys\" }\n+// { dg-final { scan-assembler \"timespec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_sec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"tv_nsec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"itimerspec.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_interval.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"it_value.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_head_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"gstruct_head_ordy_decl_ref_head.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"field_head_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_ptr_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field_base_ordy_defn_fld_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_defn_var_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field1_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_inc.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ref.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_ptr.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"field2_base_ordy_defn_var_base_fld.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_head_ordy_decl_ref_base.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"gstruct_base_ordy_decl_ref_base.*DW_AT_name\" } }\n+# 1 \"fesd-sys.c\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"fesd-sys.c\"\n+\n+//#include \"time.h\"\n+# 1 \"time.h\" 1 3 4\n+struct timespec\n+  {\n+    long int tv_sec;\n+    long int tv_nsec;\n+  };\n+\n+struct itimerspec\n+  {\n+    struct timespec it_interval;\n+    struct timespec it_value;\n+  };\n+\n+# 6 \"fesd-sys.c\" 2\n+\n+struct timespec base_var8;\n+struct itimerspec *base_var9;\n+\n+#include \"fesd-sys.h\"\n+\n+struct gstruct_head_ordy_defn_var_base base_var1;\n+struct gstruct_base_ordy_defn_var_base base_var2;\n+\n+int base_function() {\n+    return 0\n++ base_var1.field_head_ordy_defn_var_base\n++ base_var2.field1_base_ordy_defn_var_base_ptr->field_head_ordy_defn_ptr_base\n++ base_var2.field1_base_ordy_defn_var_base_fld.field_head_ordy_defn_fld_base\n++ base_var2.field2_base_ordy_defn_var_base_ptr->field_base_ordy_defn_ptr_base\n++ base_var2.field2_base_ordy_defn_var_base_fld.field_base_ordy_defn_fld_base\n+;\n+}"}, {"sha": "a7146b65e31814f7d037a14ae83343b715abad32", "filename": "gcc/testsuite/gcc.dg/fesd-sys.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-sys.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-sys.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd-sys.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,19 @@\n+#include \"fesd.h\"\n+\n+struct gstruct_base_ordy_decl_not;\n+struct gstruct_base_ordy_defn_not { int field_base_ordy_defn_not; };\n+\n+struct gstruct_base_ordy_decl_ref_base;\n+struct gstruct_base_ordy_defn_ref_base { int field_base_ordy_defn_ref_base; };\n+struct gstruct_base_ordy_defn_ptr_base { int field_base_ordy_defn_ptr_base; };\n+struct gstruct_base_ordy_defn_fld_base { int field_base_ordy_defn_fld_base; };\n+struct gstruct_base_ordy_defn_var_base {\n+    struct gstruct_head_ordy_decl_ref_base *field1_base_ordy_defn_var_base_inc;\n+    struct gstruct_head_ordy_defn_ref_base *field1_base_ordy_defn_var_base_ref;\n+    struct gstruct_head_ordy_defn_ptr_base *field1_base_ordy_defn_var_base_ptr;\n+    struct gstruct_head_ordy_defn_fld_base  field1_base_ordy_defn_var_base_fld;\n+    struct gstruct_base_ordy_decl_ref_base *field2_base_ordy_defn_var_base_inc;\n+    struct gstruct_base_ordy_defn_ref_base *field2_base_ordy_defn_var_base_ref;\n+    struct gstruct_base_ordy_defn_ptr_base *field2_base_ordy_defn_var_base_ptr;\n+    struct gstruct_base_ordy_defn_fld_base  field2_base_ordy_defn_var_base_fld;\n+};"}, {"sha": "46b24f5e9e1c135d6879dd3c8153530fd74f5091", "filename": "gcc/testsuite/gcc.dg/fesd.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ef65923c5943c0f04193463dee8eb46d249f12/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffesd.h?ref=39ef65923c5943c0f04193463dee8eb46d249f12", "patch": "@@ -0,0 +1,36 @@\n+/*\n+where from: base = matching base; head = other header\n+what kind:  ordy = ordinary struct; tmpl = template struct\n+definition: decl = incomplete declaration; defn = full definition\n+how used:   not = not used; ref = by ref; ptr = through pointer;\n+            fld = as field; var = as variable\n+from where: base = from base; head = other header\n+*/\n+\n+struct gstruct_head_ordy_decl_not;\n+struct gstruct_head_ordy_defn_not { int field_head_ordy_defn_not; };\n+\n+struct gstruct_head_ordy_decl_ref_head;\n+struct gstruct_head_ordy_defn_ref_head { int field_head_ordy_defn_ref_head; };\n+struct gstruct_head_ordy_defn_ptr_head { int field_head_ordy_defn_ptr_head; };\n+struct gstruct_head_ordy_defn_fld_head { int field_head_ordy_defn_fld_head; };\n+struct gstruct_head_ordy_defn_var_head {\n+    struct gstruct_head_ordy_decl_ref_head *field_head_ordy_defn_var_head_inc;\n+    struct gstruct_head_ordy_defn_ref_head *field_head_ordy_defn_var_head_ref;\n+    struct gstruct_head_ordy_defn_ptr_head *field_head_ordy_defn_var_head_ptr;\n+    struct gstruct_head_ordy_defn_fld_head  field_head_ordy_defn_var_head_fld;\n+};\n+extern struct gstruct_head_ordy_defn_var_head head_var1;\n+\n+struct gstruct_head_ordy_decl_ref_base;\n+struct gstruct_head_ordy_defn_ref_base { int field_head_ordy_defn_ref_base; };\n+struct gstruct_head_ordy_defn_ptr_base { int field_head_ordy_defn_ptr_base; };\n+struct gstruct_head_ordy_defn_fld_base { int field_head_ordy_defn_fld_base; };\n+struct gstruct_head_ordy_defn_var_base { int field_head_ordy_defn_var_base; };\n+\n+inline int head_function() {\n+    return 0\n++ head_var1.field_head_ordy_defn_var_head_ptr->field_head_ordy_defn_ptr_head\n++ head_var1.field_head_ordy_defn_var_head_fld.field_head_ordy_defn_fld_head\n+;\n+}"}]}