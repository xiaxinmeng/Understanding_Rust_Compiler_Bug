{"sha": "d2bd00524df2c65cb1b59ffb5ea70207a03a24ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiZDAwNTI0ZGYyYzY1Y2IxYjU5ZmZiNWVhNzAyMDdhMDNhMjRjYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-11-04T20:08:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-04T20:08:26Z"}, "message": "* print-tree.c (print_node): Use code instead of TREE_CODE (node).\n\nFrom-SVN: r141586", "tree": {"sha": "2464777bafd133375623c8891afdc8ab8d3097fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2464777bafd133375623c8891afdc8ab8d3097fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2bd00524df2c65cb1b59ffb5ea70207a03a24ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bd00524df2c65cb1b59ffb5ea70207a03a24ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2bd00524df2c65cb1b59ffb5ea70207a03a24ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bd00524df2c65cb1b59ffb5ea70207a03a24ca/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83371ec7b1202c89fe3f64db1058bd62192c20e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83371ec7b1202c89fe3f64db1058bd62192c20e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83371ec7b1202c89fe3f64db1058bd62192c20e1"}], "stats": {"total": 102, "additions": 52, "deletions": 50}, "files": [{"sha": "a0152b156996a6eb198bab2ed4219a8edd8268e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bd00524df2c65cb1b59ffb5ea70207a03a24ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bd00524df2c65cb1b59ffb5ea70207a03a24ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2bd00524df2c65cb1b59ffb5ea70207a03a24ca", "patch": "@@ -1,4 +1,6 @@\n-2008-11-04  Jakub Jelinek  <jakub@redhat.com>\n+2008-11-04  Jakub Jelinek  <jakuB@redhat.com>\n+\n+\t* print-tree.c (print_node): Use code instead of TREE_CODE (node).\n \n \t* print-tree.c (print_node): Don't print DECL_INITIAL\n \tfor PARM_DECL."}, {"sha": "24ff249c108556ae50df19518426a63c24f071f9", "filename": "gcc/print-tree.c", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bd00524df2c65cb1b59ffb5ea70207a03a24ca/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bd00524df2c65cb1b59ffb5ea70207a03a24ca/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=d2bd00524df2c65cb1b59ffb5ea70207a03a24ca", "patch": "@@ -217,7 +217,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n     }\n \n   /* It is unsafe to look at any other fields of an ERROR_MARK node.  */\n-  if (TREE_CODE (node) == ERROR_MARK)\n+  if (code == ERROR_MARK)\n     {\n       print_node_brief (file, prefix, node, indent);\n       return;\n@@ -247,19 +247,19 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n   indent_to (file, indent);\n \n   /* Print the slot this node is in, and its code, and address.  */\n-  fprintf (file, \"%s <%s\", prefix, tree_code_name[(int) TREE_CODE (node)]);\n+  fprintf (file, \"%s <%s\", prefix, tree_code_name[(int) code]);\n   dump_addr (file, \" \", node);\n \n   /* Print the name, if any.  */\n   if (tclass == tcc_declaration)\n     {\n       if (DECL_NAME (node))\n \tfprintf (file, \" %s\", IDENTIFIER_POINTER (DECL_NAME (node)));\n-      else if (TREE_CODE (node) == LABEL_DECL\n+      else if (code == LABEL_DECL\n \t       && LABEL_DECL_UID (node) != -1)\n \tfprintf (file, \" L.%d\", (int) LABEL_DECL_UID (node));\n       else\n-\tfprintf (file, \" %c.%u\", TREE_CODE (node) == CONST_DECL ? 'C' : 'D',\n+\tfprintf (file, \" %c.%u\", code == CONST_DECL ? 'C' : 'D',\n \t\t DECL_UID (node));\n     }\n   else if (tclass == tcc_type)\n@@ -274,10 +274,10 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t\t     IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (node))));\n \t}\n     }\n-  if (TREE_CODE (node) == IDENTIFIER_NODE)\n+  if (code == IDENTIFIER_NODE)\n     fprintf (file, \" %s\", IDENTIFIER_POINTER (node));\n \n-  if (TREE_CODE (node) == INTEGER_CST)\n+  if (code == INTEGER_CST)\n     {\n       if (indent <= 4)\n \tprint_node_brief (file, \"type\", TREE_TYPE (node), indent + 4);\n@@ -338,7 +338,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n   /* DECL_ nodes have additional attributes.  */\n \n-  switch (TREE_CODE_CLASS (TREE_CODE (node)))\n+  switch (TREE_CODE_CLASS (code))\n     {\n     case tcc_declaration:\n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n@@ -362,42 +362,42 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t    fputs (\" in_system_header\", file);\n \t}\n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_WRTL)\n-\t  && TREE_CODE (node) != LABEL_DECL\n-\t  && TREE_CODE (node) != FUNCTION_DECL\n+\t  && code != LABEL_DECL\n+\t  && code != FUNCTION_DECL\n \t  && DECL_REGISTER (node))\n \tfputs (\" regdecl\", file);\n \n-      if (TREE_CODE (node) == TYPE_DECL && TYPE_DECL_SUPPRESS_DEBUG (node))\n+      if (code == TYPE_DECL && TYPE_DECL_SUPPRESS_DEBUG (node))\n \tfputs (\" suppress-debug\", file);\n \n-      if (TREE_CODE (node) == FUNCTION_DECL\n+      if (code == FUNCTION_DECL\n \t  && DECL_FUNCTION_SPECIFIC_TARGET (node))\n \tfputs (\" function-specific-target\", file);\n-      if (TREE_CODE (node) == FUNCTION_DECL\n+      if (code == FUNCTION_DECL\n \t  && DECL_FUNCTION_SPECIFIC_OPTIMIZATION (node))\n \tfputs (\" function-specific-opt\", file);\n-      if (TREE_CODE (node) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (node))\n+      if (code == FUNCTION_DECL && DECL_DECLARED_INLINE_P (node))\n \tfputs (\" autoinline\", file);\n-      if (TREE_CODE (node) == FUNCTION_DECL && DECL_BUILT_IN (node))\n+      if (code == FUNCTION_DECL && DECL_BUILT_IN (node))\n \tfputs (\" built-in\", file);\n-      if (TREE_CODE (node) == FUNCTION_DECL && DECL_NO_STATIC_CHAIN (node))\n+      if (code == FUNCTION_DECL && DECL_NO_STATIC_CHAIN (node))\n \tfputs (\" no-static-chain\", file);\n \n-      if (TREE_CODE (node) == FIELD_DECL && DECL_PACKED (node))\n+      if (code == FIELD_DECL && DECL_PACKED (node))\n \tfputs (\" packed\", file);\n-      if (TREE_CODE (node) == FIELD_DECL && DECL_BIT_FIELD (node))\n+      if (code == FIELD_DECL && DECL_BIT_FIELD (node))\n \tfputs (\" bit-field\", file);\n-      if (TREE_CODE (node) == FIELD_DECL && DECL_NONADDRESSABLE_P (node))\n+      if (code == FIELD_DECL && DECL_NONADDRESSABLE_P (node))\n \tfputs (\" nonaddressable\", file);\n \n-      if (TREE_CODE (node) == LABEL_DECL && DECL_ERROR_ISSUED (node))\n+      if (code == LABEL_DECL && DECL_ERROR_ISSUED (node))\n \tfputs (\" error-issued\", file);\n \n-      if (TREE_CODE (node) == VAR_DECL && DECL_IN_TEXT_SECTION (node))\n+      if (code == VAR_DECL && DECL_IN_TEXT_SECTION (node))\n \tfputs (\" in-text-section\", file);\n-      if (TREE_CODE (node) == VAR_DECL && DECL_COMMON (node))\n+      if (code == VAR_DECL && DECL_COMMON (node))\n \tfputs (\" common\", file);\n-      if (TREE_CODE (node) == VAR_DECL && DECL_THREAD_LOCAL_P (node))\n+      if (code == VAR_DECL && DECL_THREAD_LOCAL_P (node))\n \t{\n \t  enum tls_model kind = DECL_TLS_MODEL (node);\n \t  switch (kind)\n@@ -461,18 +461,18 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  print_node (file, \"size\", DECL_SIZE (node), indent + 4);\n \t  print_node (file, \"unit size\", DECL_SIZE_UNIT (node), indent + 4);\n \t  \n-\t  if (TREE_CODE (node) != FUNCTION_DECL || DECL_BUILT_IN (node))\n+\t  if (code != FUNCTION_DECL || DECL_BUILT_IN (node))\n \t    indent_to (file, indent + 3);\n \t  \n \t  if (DECL_USER_ALIGN (node))\n \t    fprintf (file, \" user\");\n \t  \n \t  fprintf (file, \" align %d\", DECL_ALIGN (node));\n-\t  if (TREE_CODE (node) == FIELD_DECL)\n+\t  if (code == FIELD_DECL)\n \t    fprintf (file, \" offset_align \" HOST_WIDE_INT_PRINT_UNSIGNED,\n \t\t     DECL_OFFSET_ALIGN (node));\n \n-\t  if (TREE_CODE (node) == FUNCTION_DECL && DECL_BUILT_IN (node))\n+\t  if (code == FUNCTION_DECL && DECL_BUILT_IN (node))\n \t    {\n \t      if (DECL_BUILT_IN_CLASS (node) == BUILT_IN_MD)\n \t\tfprintf (file, \" built-in BUILT_IN_MD %d\", DECL_FUNCTION_CODE (node));\n@@ -486,7 +486,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t    fprintf (file, \" alias set \" HOST_WIDE_INT_PRINT_DEC,\n \t\t     (HOST_WIDE_INT) DECL_POINTER_ALIAS_SET (node));\n \t}\n-      if (TREE_CODE (node) == FIELD_DECL)\n+      if (code == FIELD_DECL)\n \t{\n \t  print_node (file, \"offset\", DECL_FIELD_OFFSET (node), indent + 4);\n \t  print_node (file, \"bit offset\", DECL_FIELD_BIT_OFFSET (node),\n@@ -525,7 +525,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  print_rtl (file, DECL_RTL (node));\n \t}\n \n-      if (TREE_CODE (node) == PARM_DECL)\n+      if (code == PARM_DECL)\n \t{\n \t  print_node (file, \"arg-type\", DECL_ARG_TYPE (node), indent + 4);\n \n@@ -536,14 +536,14 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t      print_rtl (file, DECL_INCOMING_RTL (node));\n \t    }\n \t}\n-      else if (TREE_CODE (node) == FUNCTION_DECL\n+      else if (code == FUNCTION_DECL\n \t       && DECL_STRUCT_FUNCTION (node) != 0)\n \t{\n \t  indent_to (file, indent + 4);\n \t  dump_addr (file, \"saved-insns \", DECL_STRUCT_FUNCTION (node));\n \t}\n \n-      if ((TREE_CODE (node) == VAR_DECL || TREE_CODE (node) == PARM_DECL)\n+      if ((code == VAR_DECL || code == PARM_DECL)\n \t  && DECL_HAS_VALUE_EXPR_P (node))\n \tprint_node (file, \"value-expr\", DECL_VALUE_EXPR (node), indent + 4);\n \n@@ -560,12 +560,12 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n       /* The no-force-blk flag is used for different things in\n \t different types.  */\n-      if ((TREE_CODE (node) == RECORD_TYPE\n-\t   || TREE_CODE (node) == UNION_TYPE\n-\t   || TREE_CODE (node) == QUAL_UNION_TYPE)\n+      if ((code == RECORD_TYPE\n+\t   || code == UNION_TYPE\n+\t   || code == QUAL_UNION_TYPE)\n \t  && TYPE_NO_FORCE_BLK (node))\n \tfputs (\" no-force-blk\", file);\n-      else if (TREE_CODE (node) == INTEGER_TYPE\n+      else if (code == INTEGER_TYPE\n \t       && TYPE_IS_SIZETYPE (node))\n \tfputs (\" sizetype\", file);\n \n@@ -576,9 +576,9 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n       /* The transparent-union flag is used for different things in\n \t different nodes.  */\n-      if (TREE_CODE (node) == UNION_TYPE && TYPE_TRANSPARENT_UNION (node))\n+      if (code == UNION_TYPE && TYPE_TRANSPARENT_UNION (node))\n \tfputs (\" transparent-union\", file);\n-      else if (TREE_CODE (node) == ARRAY_TYPE\n+      else if (code == ARRAY_TYPE\n \t       && TYPE_NONALIASED_COMPONENT (node))\n \tfputs (\" nonaliased-component\", file);\n \n@@ -624,33 +624,33 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n       \n       print_node (file, \"attributes\", TYPE_ATTRIBUTES (node), indent + 4);\n \n-      if (INTEGRAL_TYPE_P (node) || TREE_CODE (node) == REAL_TYPE\n-\t  || TREE_CODE (node) == FIXED_POINT_TYPE)\n+      if (INTEGRAL_TYPE_P (node) || code == REAL_TYPE\n+\t  || code == FIXED_POINT_TYPE)\n \t{\n \t  fprintf (file, \" precision %d\", TYPE_PRECISION (node));\n \t  print_node_brief (file, \"min\", TYPE_MIN_VALUE (node), indent + 4);\n \t  print_node_brief (file, \"max\", TYPE_MAX_VALUE (node), indent + 4);\n \t}\n \n-      if (TREE_CODE (node) == ENUMERAL_TYPE)\n+      if (code == ENUMERAL_TYPE)\n \tprint_node (file, \"values\", TYPE_VALUES (node), indent + 4);\n-      else if (TREE_CODE (node) == ARRAY_TYPE)\n+      else if (code == ARRAY_TYPE)\n \tprint_node (file, \"domain\", TYPE_DOMAIN (node), indent + 4);\n-      else if (TREE_CODE (node) == VECTOR_TYPE)\n+      else if (code == VECTOR_TYPE)\n \tfprintf (file, \" nunits %d\", (int) TYPE_VECTOR_SUBPARTS (node));\n-      else if (TREE_CODE (node) == RECORD_TYPE\n-\t       || TREE_CODE (node) == UNION_TYPE\n-\t       || TREE_CODE (node) == QUAL_UNION_TYPE)\n+      else if (code == RECORD_TYPE\n+\t       || code == UNION_TYPE\n+\t       || code == QUAL_UNION_TYPE)\n \tprint_node (file, \"fields\", TYPE_FIELDS (node), indent + 4);\n-      else if (TREE_CODE (node) == FUNCTION_TYPE\n-\t       || TREE_CODE (node) == METHOD_TYPE)\n+      else if (code == FUNCTION_TYPE\n+\t       || code == METHOD_TYPE)\n \t{\n \t  if (TYPE_METHOD_BASETYPE (node))\n \t    print_node_brief (file, \"method basetype\",\n \t\t\t      TYPE_METHOD_BASETYPE (node), indent + 4);\n \t  print_node (file, \"arg-types\", TYPE_ARG_TYPES (node), indent + 4);\n \t}\n-      else if (TREE_CODE (node) == OFFSET_TYPE)\n+      else if (code == OFFSET_TYPE)\n \tprint_node_brief (file, \"basetype\", TYPE_OFFSET_BASETYPE (node),\n \t\t\t  indent + 4);\n \n@@ -676,14 +676,14 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n     case tcc_reference:\n     case tcc_statement:\n     case tcc_vl_exp:\n-      if (TREE_CODE (node) == BIND_EXPR)\n+      if (code == BIND_EXPR)\n \t{\n \t  print_node (file, \"vars\", TREE_OPERAND (node, 0), indent + 4);\n \t  print_node (file, \"body\", TREE_OPERAND (node, 1), indent + 4);\n \t  print_node (file, \"block\", TREE_OPERAND (node, 2), indent + 4);\n \t  break;\n \t}\n-      if (TREE_CODE (node) == CALL_EXPR)\n+      if (code == CALL_EXPR)\n \t{\n \t  call_expr_arg_iterator iter;\n \t  tree arg;\n@@ -716,7 +716,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n     case tcc_constant:\n     case tcc_exceptional:\n-      switch (TREE_CODE (node))\n+      switch (code)\n \t{\n \tcase INTEGER_CST:\n \t  if (TREE_OVERFLOW (node))"}]}