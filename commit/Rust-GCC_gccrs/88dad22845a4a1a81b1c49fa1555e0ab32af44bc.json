{"sha": "88dad22845a4a1a81b1c49fa1555e0ab32af44bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhkYWQyMjg0NWE0YTFhODFiMWM0OWZhMTU1NWUwYWIzMmFmNDRiYw==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-11-20T20:36:53Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-11-20T20:36:53Z"}, "message": "x\n\nFrom-SVN: r13209", "tree": {"sha": "873e19747c9af42b9faae8b175ee7f5fcbe217a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/873e19747c9af42b9faae8b175ee7f5fcbe217a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88dad22845a4a1a81b1c49fa1555e0ab32af44bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88dad22845a4a1a81b1c49fa1555e0ab32af44bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88dad22845a4a1a81b1c49fa1555e0ab32af44bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88dad22845a4a1a81b1c49fa1555e0ab32af44bc/comments", "author": null, "committer": null, "parents": [{"sha": "d2872d37e9f153148d58c0dd6c4ce6456ef0a595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2872d37e9f153148d58c0dd6c4ce6456ef0a595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2872d37e9f153148d58c0dd6c4ce6456ef0a595"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "a3c8e29233a8bb230f118d4fd8c554095b08141a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dad22845a4a1a81b1c49fa1555e0ab32af44bc/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dad22845a4a1a81b1c49fa1555e0ab32af44bc/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=88dad22845a4a1a81b1c49fa1555e0ab32af44bc", "patch": "@@ -1324,6 +1324,10 @@ pushtag (name, type)\n      tagged type.  */\n \n   TYPE_STUB_DECL (type) = pushdecl (build_decl (TYPE_DECL, NULL_TREE, type));\n+\n+  /* An approximation for now, so we can tell this is a function-scope tag.\n+     This will be updated in poplevel.  */\n+  TYPE_CONTEXT (type) = DECL_CONTEXT (TYPE_STUB_DECL (type));\n }\n \f\n /* Handle when a new declaration NEWDECL"}, {"sha": "0beb7809c57bb3f9459229b53250967a67a732cc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dad22845a4a1a81b1c49fa1555e0ab32af44bc/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dad22845a4a1a81b1c49fa1555e0ab32af44bc/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=88dad22845a4a1a81b1c49fa1555e0ab32af44bc", "patch": "@@ -5793,18 +5793,16 @@ add_bit_size_attribute (die, decl)\n \t\t   (unsigned) TREE_INT_CST_LOW (DECL_SIZE (decl)));\n }\n \n-/* If the compiled language is GNU C, then add a 'prototyped'\n+/* If the compiled language is ANSI C, then add a 'prototyped'\n    attribute, if arg types are given for the parameters of a function.  */\n inline void\n add_prototyped_attribute (die, func_type)\n      register dw_die_ref die;\n      register tree func_type;\n {\n-  if ((strcmp (language_string, \"GNU C\") == 0)\n-      && (TYPE_ARG_TYPES (func_type) != NULL))\n-    {\n-      add_AT_flag (die, DW_AT_prototyped, 0);\n-    }\n+  if (get_AT_unsigned (comp_unit_die, DW_AT_language) == DW_LANG_C89\n+      && TYPE_ARG_TYPES (func_type) != NULL)\n+    add_AT_flag (die, DW_AT_prototyped, 1);\n }\n \n \n@@ -5893,6 +5891,11 @@ scope_die_for (t, context_die)\n   register tree containing_scope;\n   register unsigned long i;\n \n+  /* Function-local tags and functions get stuck in limbo until they are\n+     fixed up by decls_for_scope.  */\n+  if (context_die == NULL)\n+    return NULL;\n+\n   /* Walk back up the declaration tree looking for a place to define\n      this type.  */\n   if (TREE_CODE_CLASS (TREE_CODE (t)) == 't')\n@@ -6037,7 +6040,7 @@ decl_start_label (decl)\n \n /* These routines generate the internnal representation of the DIE's for\n    the compilation unit.  Debugging information is collected by walking\n-   the declaration trees passed in from dwarf2out_file_scope_decl().  */\n+   the declaration trees passed in from dwarf2out_decl().  */\n \n static void\n gen_array_type_die (type, context_die)\n@@ -6489,6 +6492,10 @@ gen_subprogram_die (decl, context_die)\n       fp_loc = new_loc_descr (DW_OP_reg0 + fp_reg);\n       add_AT_loc (subr_die, DW_AT_frame_base, fp_loc);\n \n+      if (current_function_needs_context)\n+\tadd_AT_loc (subr_die, DW_AT_static_link,\n+\t\t    loc_descriptor (lookup_static_chain (decl)));\n+\n #ifdef DWARF_GNU_EXTENSIONS\n       ASM_GENERATE_INTERNAL_LABEL (label_id, BODY_BEGIN_LABEL,\n \t\t\t\t   current_funcdef_number);\n@@ -7325,13 +7332,28 @@ decls_for_scope (stmt, context_die, depth)\n       next_block_number++;\n     }\n \n-  /* Output the DIEs to represent all of the data objects, functions,\n-     typedefs, and tagged types declared directly within this block but not\n-     within any nested sub-blocks.  */\n+  /* Output the DIEs to represent all of the data objects and typedefs\n+     declared directly within this block but not within any nested\n+     sub-blocks.  Also, nested function and tag DIEs have been\n+     generated with a parent of NULL; fix that up now.  */\n   for (decl = BLOCK_VARS (stmt);\n        decl != NULL; decl = TREE_CHAIN (decl))\n     {\n-      gen_decl_die (decl, context_die);\n+      if (TREE_CODE (decl) == FUNCTION_DECL)\n+\t{\n+\t  register dw_die_ref die = lookup_decl_die (decl);\n+\t  add_child_die (context_die, die);\n+\t}\n+      else if (TREE_CODE (decl) == TYPE_DECL && TYPE_DECL_IS_STUB (decl))\n+\t{\n+\t  register dw_die_ref die = lookup_type_die (TREE_TYPE (decl));\n+\t  if (die)\n+\t    add_child_die (context_die, die);\n+\t  else\n+\t    gen_decl_die (decl, context_die);\n+\t}\n+      else\n+\tgen_decl_die (decl, context_die);\n     }\n \n   /* Output the DIEs to represent all sub-blocks (and the items declared\n@@ -7478,10 +7500,11 @@ gen_decl_die (decl, context_die)\n \f\n /***************** Debug Information Generation Hooks ***********************/\n void\n-dwarf2out_file_scope_decl (decl, set_finalizing)\n+dwarf2out_decl (decl)\n      register tree decl;\n-     register int set_finalizing;\n {\n+  register dw_die_ref context_die = comp_unit_die;\n+\n   if (TREE_CODE (decl) == ERROR_MARK)\n     {\n       return;\n@@ -7544,6 +7567,13 @@ dwarf2out_file_scope_decl (decl, set_finalizing)\n \t{\n \t  return;\n \t}\n+\n+      /* If we're a nested function, initially use a parent of NULL; if we're\n+\t a plain function, this will be fixed up in decls_for_scope.  If\n+\t we're a method, it will be ignored, since we already have a DIE.  */\n+      if (decl_function_context (decl))\n+\tcontext_die = NULL;\n+\n       break;\n \n     case VAR_DECL:\n@@ -7574,17 +7604,22 @@ dwarf2out_file_scope_decl (decl, set_finalizing)\n       if (DECL_SOURCE_LINE (decl) == 0)\n \treturn;\n \n-      /* If we are in terse mode, don't generate any DIEs to represent any\n-         actual typedefs.  */\n+      /* If we are in terse mode, don't generate any DIEs for types.  */\n       if (debug_info_level <= DINFO_LEVEL_TERSE)\n \treturn;\n+\n+      /* If we're a function-scope tag, initially use a parent of NULL;\n+\t this will be fixed up in decls_for_scope.  */\n+      if (decl_function_context (decl))\n+\tcontext_die = NULL;\n+\n       break;\n \n     default:\n       return;\n     }\n \n-  gen_decl_die (decl, comp_unit_die);\n+  gen_decl_die (decl, context_die);\n \n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_INITIAL (decl) != NULL)"}, {"sha": "62e66d9b8a16c7eb1cc9b02565f6bdcf716b181c", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dad22845a4a1a81b1c49fa1555e0ab32af44bc/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dad22845a4a1a81b1c49fa1555e0ab32af44bc/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=88dad22845a4a1a81b1c49fa1555e0ab32af44bc", "patch": "@@ -2538,7 +2538,7 @@ compile_file (name)\n \n \tif (write_symbols == DWARF2_DEBUG\n \t    && (TREE_CODE (decl) != FUNCTION_DECL || !DECL_INITIAL (decl)))\n-\t  TIMEVAR (symout_time, dwarf2out_file_scope_decl (decl, 1));\n+\t  TIMEVAR (symout_time, dwarf2out_decl (decl));\n #endif\n       }\n   }\n@@ -2782,9 +2782,8 @@ rest_of_type_compilation (type, toplev)\n     TIMEVAR (symout_time, dwarfout_file_scope_decl (TYPE_STUB_DECL (type), 0));\n #endif\n #ifdef DWARF2_DEBUGGING_INFO\n-  /* Don't write out function-scope types here.  */\n-  if (write_symbols == DWARF2_DEBUG && toplev)\n-    TIMEVAR (symout_time, dwarf2out_file_scope_decl (TYPE_STUB_DECL (type), 0));\n+  if (write_symbols == DWARF2_DEBUG)\n+    TIMEVAR (symout_time, dwarf2out_decl (TYPE_STUB_DECL (type)));\n #endif\n }\n \n@@ -2900,7 +2899,7 @@ rest_of_compilation (decl)\n \t      if (write_symbols == DWARF2_DEBUG)\n \t\t{\n \t\t  set_decl_abstract_flags (decl, 1);\n-\t\t  TIMEVAR (symout_time, dwarf2out_file_scope_decl (decl, 0));\n+\t\t  TIMEVAR (symout_time, dwarf2out_decl (decl));\n \t\t  set_decl_abstract_flags (decl, 0);\n \t\t}\n #endif\n@@ -2934,7 +2933,7 @@ rest_of_compilation (decl)\n \t  if (write_symbols == DWARF2_DEBUG)\n \t    {\n \t      set_decl_abstract_flags (decl, 1);\n-\t      TIMEVAR (symout_time, dwarf2out_file_scope_decl (decl, 0));\n+\t      TIMEVAR (symout_time, dwarf2out_decl (decl));\n \t      set_decl_abstract_flags (decl, 0);\n \t    }\n #endif\n@@ -3431,7 +3430,7 @@ rest_of_compilation (decl)\n \n #ifdef DWARF2_DEBUGGING_INFO\n   if (write_symbols == DWARF2_DEBUG)\n-    TIMEVAR (symout_time, dwarf2out_file_scope_decl (decl, 0));\n+    TIMEVAR (symout_time, dwarf2out_decl (decl));\n #endif\n \n  exit_rest_of_compilation:"}, {"sha": "9490238086d7dfb491e206873d6b71e9d47a51d9", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dad22845a4a1a81b1c49fa1555e0ab32af44bc/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dad22845a4a1a81b1c49fa1555e0ab32af44bc/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=88dad22845a4a1a81b1c49fa1555e0ab32af44bc", "patch": "@@ -1183,7 +1183,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #ifdef DWARF2_DEBUGGING_INFO\n \t  if (write_symbols == DWARF2_DEBUG && top_level\n \t      && DECL_CONTEXT (decl))\n-\t    dwarf2out_file_scope_decl (decl, 0);\n+\t    dwarf2out_decl (decl);\n #endif\n \t}\n \n@@ -1316,7 +1316,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #ifdef DWARF2_DEBUGGING_INFO\n       if (write_symbols == DWARF2_DEBUG && top_level\n \t  && DECL_CONTEXT (decl))\n-\tdwarf2out_file_scope_decl (decl, 0);\n+\tdwarf2out_decl (decl);\n #endif\n \n       /* Only output DWARF debugging information for record-scope variables"}]}