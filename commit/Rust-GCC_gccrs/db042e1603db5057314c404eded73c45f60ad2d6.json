{"sha": "db042e1603db5057314c404eded73c45f60ad2d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwNDJlMTYwM2RiNTA1NzMxNGM0MDRlZGVkNzNjNDVmNjBhZDJkNg==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-02-03T20:41:42Z"}, "committer": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2021-06-09T16:22:53Z"}, "message": "RS6000 Add 128-bit Binary Integer sign extend operations\n\nThis patch adds the 128-bit sign extension instruction support and\ncorresponding builtin support.\n\nRS6000 Add 128-bit Binary Integer sign extend operations\n\n2021-06-08  Carl Love  <cel@us.ibm.com>\n\ngcc/ChangeLog\n\n\t* config/rs6000/altivec.h (vec_signextll, vec_signexti, vec_signextq):\n\tAdd define for new builtins.\n\t* config/rs6000/altivec.md(altivec_vreveti2): Add define_expand.\n\t* config/rs6000/rs6000-builtin.def (VSIGNEXTI, VSIGNEXTLL):  Add\n\toverloaded builtin definitions.\n\t(VSIGNEXTSB2W, VSIGNEXTSH2W, VSIGNEXTSB2D, VSIGNEXTSH2D,VSIGNEXTSW2D,\n\tVSIGNEXTSD2Q):\tAdd builtin expansions.\n\t(SIGNEXT): Add P10 overload definition.\n\t* config/rs6000/rs6000-call.c (P9V_BUILTIN_VEC_VSIGNEXTI, P9V_BUILTIN_VEC_VSIGNEXTLL,\n\tP10_BUILTIN_VEC_SIGNEXT): Add overloaded argument definitions.\n\t* config/rs6000/vsx.md (vsx_sign_extend_v2di_v1ti): Add define_insn.\n\t(vsignextend_v2di_v1ti, vsignextend_qi_<mode>, vsignextend_hi_<mode>,\n\tvsignextend_si_v2di)[VIlong]: Add define_expand.\n\tMake define_insn vsx_sign_extend_si_v2di visible.\n\t* doc/extend.texi:  Add documentation for the vec_signexti,\n\tvec_signextll builtins and vec_signextq.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/powerpc/int_128bit-runnable.c (extsd2q): Update expected\n\tcount.\n\tAdd tests for vec_signextq.\n\t* gcc.target/powerpc/p9-sign_extend-runnable.c:  New test case.", "tree": {"sha": "93c91d5f694af46a95d36058c95ddd180b91ec47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93c91d5f694af46a95d36058c95ddd180b91ec47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db042e1603db5057314c404eded73c45f60ad2d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db042e1603db5057314c404eded73c45f60ad2d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db042e1603db5057314c404eded73c45f60ad2d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db042e1603db5057314c404eded73c45f60ad2d6/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9090f4807161876033f6bf0e1133364b38d91865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9090f4807161876033f6bf0e1133364b38d91865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9090f4807161876033f6bf0e1133364b38d91865"}], "stats": {"total": 323, "additions": 321, "deletions": 2}, "files": [{"sha": "5b631c7ebaf8c75081a795cf35e17c7427546f26", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=db042e1603db5057314c404eded73c45f60ad2d6", "patch": "@@ -497,6 +497,8 @@\n \n #define vec_xlx __builtin_vec_vextulx\n #define vec_xrx __builtin_vec_vexturx\n+#define vec_signexti  __builtin_vec_vsignexti\n+#define vec_signextll __builtin_vec_vsignextll\n \n #endif\n \n@@ -715,6 +717,7 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_step(x) __builtin_vec_step (* (__typeof__ (x) *) 0)\n \n #ifdef _ARCH_PWR10\n+#define vec_signextq  __builtin_vec_vsignextq\n #define vec_dive __builtin_vec_dive\n #define vec_mod  __builtin_vec_mod\n "}, {"sha": "dad3a07841c74d3c8772b3dabcaf5f1ef29469b1", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=db042e1603db5057314c404eded73c45f60ad2d6", "patch": "@@ -4291,6 +4291,30 @@\n })\n \n ;; Vector reverse elements\n+(define_expand \"altivec_vreveti2\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=v\")\n+\t(unspec:TI [(match_operand:TI 1 \"register_operand\" \"v\")]\n+\t\t      UNSPEC_VREVEV))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  int i, j, size, num_elements;\n+  rtvec v = rtvec_alloc (16);\n+  rtx mask = gen_reg_rtx (V16QImode);\n+\n+  size = GET_MODE_UNIT_SIZE (TImode);\n+  num_elements = GET_MODE_NUNITS (TImode);\n+\n+  for (j = 0; j < num_elements; j++)\n+    for (i = 0; i < size; i++)\n+      RTVEC_ELT (v, i + j * size)\n+\t= GEN_INT (i + (num_elements - 1 - j) * size);\n+\n+  emit_insn (gen_vec_initv16qiqi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n+  emit_insn (gen_altivec_vperm_ti (operands[0], operands[1],\n+\t     operands[1], mask));\n+  DONE;\n+})\n+\n (define_expand \"altivec_vreve<mode>2\"\n   [(set (match_operand:VEC_A 0 \"register_operand\" \"=v\")\n \t(unspec:VEC_A [(match_operand:VEC_A 1 \"register_operand\" \"v\")]"}, {"sha": "d55095b01bb61195bb445beebb46c7c36e157d44", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=db042e1603db5057314c404eded73c45f60ad2d6", "patch": "@@ -2877,6 +2877,8 @@ BU_P9V_OVERLOAD_1 (VPRTYBD,\t\"vprtybd\")\n BU_P9V_OVERLOAD_1 (VPRTYBQ,\t\"vprtybq\")\n BU_P9V_OVERLOAD_1 (VPRTYBW,\t\"vprtybw\")\n BU_P9V_OVERLOAD_1 (VPARITY_LSBB,\t\"vparity_lsbb\")\n+BU_P9V_OVERLOAD_1 (VSIGNEXTI,\t\"vsignexti\")\n+BU_P9V_OVERLOAD_1 (VSIGNEXTLL,\t\"vsignextll\")\n \n /* 2 argument functions added in ISA 3.0 (power9).  */\n BU_P9_2 (CMPRB,\t\"byte_in_range\",\tCONST,\tcmprb)\n@@ -2888,6 +2890,13 @@ BU_P9_OVERLOAD_2 (CMPRB,\t\"byte_in_range\")\n BU_P9_OVERLOAD_2 (CMPRB2,\t\"byte_in_either_range\")\n BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n \f\n+\n+BU_P9V_AV_1 (VSIGNEXTSB2W,\t\"vsignextsb2w\",\t\tCONST,  vsignextend_qi_v4si)\n+BU_P9V_AV_1 (VSIGNEXTSH2W,\t\"vsignextsh2w\",\t\tCONST,  vsignextend_hi_v4si)\n+BU_P9V_AV_1 (VSIGNEXTSB2D,\t\"vsignextsb2d\",\t\tCONST,  vsignextend_qi_v2di)\n+BU_P9V_AV_1 (VSIGNEXTSH2D,\t\"vsignextsh2d\",\t\tCONST,  vsignextend_hi_v2di)\n+BU_P9V_AV_1 (VSIGNEXTSW2D,\t\"vsignextsw2d\",\t\tCONST,  vsignextend_si_v2di)\n+\n /* Builtins for scalar instructions added in ISA 3.1 (power10).  */\n BU_P10V_AV_P (VCMPEQUT_P,\t\"vcmpequt_p\",\tCONST,\tvector_eq_v1ti_p)\n BU_P10V_AV_P (VCMPGTST_P,\t\"vcmpgtst_p\",\tCONST,\tvector_gt_v1ti_p)\n@@ -2926,6 +2935,8 @@ BU_P10V_AV_2 (VNOR_V1TI,\t\"vnor_v1ti\",\tCONST,\tnorv1ti3)\n BU_P10V_AV_2 (VCMPNET_P,\t\"vcmpnet_p\",\tCONST,\tvector_ne_v1ti_p)\n BU_P10V_AV_2 (VCMPAET_P,\t\"vcmpaet_p\",\tCONST,\tvector_ae_v1ti_p)\n \n+BU_P10V_AV_1 (VSIGNEXTSD2Q,\t\"vsignext\",     CONST,  vsignextend_v2di_v1ti)\n+\n BU_P10V_AV_2 (VMULEUD,\t\"vmuleud\",\tCONST,\tvec_widen_umult_even_v2di)\n BU_P10V_AV_2 (VMULESD,\t\"vmulesd\",\tCONST,\tvec_widen_smult_even_v2di)\n BU_P10V_AV_2 (VMULOUD,\t\"vmuloud\",\tCONST,\tvec_widen_umult_odd_v2di)\n@@ -3145,6 +3156,7 @@ BU_CRYPTO_OVERLOAD_2A (VPMSUM,\t \"vpmsum\")\n BU_CRYPTO_OVERLOAD_3A (VPERMXOR,\t \"vpermxor\")\n BU_CRYPTO_OVERLOAD_3 (VSHASIGMA, \"vshasigma\")\n \n+BU_P10_OVERLOAD_1 (SIGNEXT, \"vsignextq\")\n \f\n /* HTM functions.  */\n BU_HTM_1  (TABORT,\t\"tabort\",\tCR,\ttabort)"}, {"sha": "b0b7f12195adfabe68fef80d1914b52f8ea6e593", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=db042e1603db5057314c404eded73c45f60ad2d6", "patch": "@@ -5821,6 +5821,19 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI },\n \n+  /* Sign extend builtins that work work on ISA 3.0, not added until ISA 3.1 */\n+  { P9V_BUILTIN_VEC_VSIGNEXTI, P9V_BUILTIN_VSIGNEXTSB2W,\n+    RS6000_BTI_V4SI, RS6000_BTI_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VSIGNEXTI, P9V_BUILTIN_VSIGNEXTSH2W,\n+    RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VSIGNEXTLL, P9V_BUILTIN_VSIGNEXTSB2D,\n+    RS6000_BTI_V2DI, RS6000_BTI_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VSIGNEXTLL, P9V_BUILTIN_VSIGNEXTSH2D,\n+    RS6000_BTI_V2DI, RS6000_BTI_V8HI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VSIGNEXTLL, P9V_BUILTIN_VSIGNEXTSW2D,\n+    RS6000_BTI_V2DI, RS6000_BTI_V4SI, 0, 0 },\n+\n   /* Overloaded built-in functions for ISA3.1 (power10). */\n   { P10_BUILTIN_VEC_CLRL, P10V_BUILTIN_VCLRLB,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_UINTSI, 0 },\n@@ -6184,6 +6197,9 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n  { P10_BUILTIN_VEC_XVTLSBB_ONES, P10V_BUILTIN_XVTLSBB_ONES,\n     RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n \n+  { P10_BUILTIN_VEC_SIGNEXT, P10V_BUILTIN_VSIGNEXTSD2Q,\n+     RS6000_BTI_V1TI, RS6000_BTI_V2DI, 0, 0 },\n+\n   { RS6000_BUILTIN_NONE, RS6000_BUILTIN_NONE, 0, 0, 0, 0 }\n };\n \f"}, {"sha": "f2260badf70491b45c26760a474927b229b19cf7", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=db042e1603db5057314c404eded73c45f60ad2d6", "patch": "@@ -4883,6 +4883,33 @@\n    (set_attr \"type\" \"vecload\")])\n \n \f\n+;; ISA 3.1 vector extend sign support\n+(define_insn \"vsx_sign_extend_v2di_v1ti\"\n+  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=v\")\n+\t(unspec:V1TI [(match_operand:V2DI 1 \"vsx_register_operand\" \"v\")]\n+\t\t     UNSPEC_VSX_SIGN_EXTEND))]\n+  \"TARGET_POWER10\"\n+ \"vextsd2q %0,%1\"\n+[(set_attr \"type\" \"vecexts\")])\n+\n+(define_expand \"vsignextend_v2di_v1ti\"\n+  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=v\")\n+\t(unspec:V1TI [(match_operand:V2DI 1 \"vsx_register_operand\" \"v\")]\n+\t\t     UNSPEC_VSX_SIGN_EXTEND))]\n+  \"TARGET_POWER10\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx tmp = gen_reg_rtx (V2DImode);\n+\n+      emit_insn (gen_altivec_vrevev2di2(tmp, operands[1]));\n+      emit_insn (gen_vsx_sign_extend_v2di_v1ti(operands[0], tmp));\n+      DONE;\n+     }\n+\n+  emit_insn (gen_vsx_sign_extend_v2di_v1ti(operands[0], operands[1]));\n+})\n+\n ;; ISA 3.0 vector extend sign support\n \n (define_insn \"vsx_sign_extend_qi_<mode>\"\n@@ -4894,6 +4921,24 @@\n   \"vextsb2<wd> %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n+(define_expand \"vsignextend_qi_<mode>\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+\t(unspec:VIlong\n+\t [(match_operand:V16QI 1 \"vsx_register_operand\" \"v\")]\n+\t UNSPEC_VSX_SIGN_EXTEND))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx tmp = gen_reg_rtx (V16QImode);\n+      emit_insn (gen_altivec_vrevev16qi2(tmp, operands[1]));\n+      emit_insn (gen_vsx_sign_extend_qi_<mode>(operands[0], tmp));\n+    }\n+  else\n+    emit_insn (gen_vsx_sign_extend_qi_<mode>(operands[0], operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"vsx_sign_extend_hi_<mode>\"\n   [(set (match_operand:VSINT_84 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:VSINT_84\n@@ -4903,14 +4948,50 @@\n   \"vextsh2<wd> %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n-(define_insn \"*vsx_sign_extend_si_v2di\"\n+(define_expand \"vsignextend_hi_<mode>\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+\t(unspec:VIlong\n+\t [(match_operand:V8HI 1 \"vsx_register_operand\" \"v\")]\n+\t UNSPEC_VSX_SIGN_EXTEND))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx tmp = gen_reg_rtx (V8HImode);\n+      emit_insn (gen_altivec_vrevev8hi2(tmp, operands[1]));\n+      emit_insn (gen_vsx_sign_extend_hi_<mode>(operands[0], tmp));\n+    }\n+  else\n+     emit_insn (gen_vsx_sign_extend_hi_<mode>(operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"vsx_sign_extend_si_v2di\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:V2DI [(match_operand:V4SI 1 \"vsx_register_operand\" \"v\")]\n \t\t     UNSPEC_VSX_SIGN_EXTEND))]\n   \"TARGET_P9_VECTOR\"\n   \"vextsw2d %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n+(define_expand \"vsignextend_si_v2di\"\n+  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:V4SI 1 \"vsx_register_operand\" \"v\")]\n+\t\t     UNSPEC_VSX_SIGN_EXTEND))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+       rtx tmp = gen_reg_rtx (V4SImode);\n+\n+       emit_insn (gen_altivec_vrevev4si2(tmp, operands[1]));\n+       emit_insn (gen_vsx_sign_extend_si_v2di(operands[0], tmp));\n+    }\n+  else\n+     emit_insn (gen_vsx_sign_extend_si_v2di(operands[0], operands[1]));\n+  DONE;\n+})\n+\n ;; ISA 3.1 vector sign extend\n ;; Move DI value from GPR to TI mode in VSX register, word 1.\n (define_insn \"mtvsrdd_diti_w1\""}, {"sha": "c24ecd70c70f5c1ff81eccfc645a6cc5897ec558", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=db042e1603db5057314c404eded73c45f60ad2d6", "patch": "@@ -19553,6 +19553,22 @@ The second argument to @var{__builtin_crypto_vshasigmad} and\n integer that is 0 or 1.  The third argument to these built-in functions\n must be a constant integer in the range of 0 to 15.\n \n+The following sign extension builtins are provided:\n+\n+@smallexample\n+vector signed int vec_signexti (vector signed char a)\n+vector signed long long vec_signextll (vector signed char a)\n+vector signed int vec_signexti (vector signed short a)\n+vector signed long long vec_signextll (vector signed short a)\n+vector signed long long vec_signextll (vector signed int a)\n+vector signed long long vec_signextq (vector signed long long a)\n+@end smallexample\n+\n+Each element of the result is produced by sign-extending the element of the\n+input vector that would fall in the least significant portion of the result\n+element. For example, a sign-extension of a vector signed char to a vector\n+signed long long will sign extend the rightmost byte of each doubleword.\n+\n @node PowerPC AltiVec Built-in Functions Available on ISA 3.1\n @subsubsection PowerPC AltiVec Built-in Functions Available on ISA 3.1\n "}, {"sha": "1255ee9f0abdb043d38ad51a38ae95efab4c149d", "filename": "gcc/testsuite/gcc.target/powerpc/int_128bit-runnable.c", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c?ref=db042e1603db5057314c404eded73c45f60ad2d6", "patch": "@@ -4,7 +4,7 @@\n \n /* Check that the expected 128-bit instructions are generated if the processor\n    supports the 128-bit integer instructions. */\n-/* { dg-final { scan-assembler-times {\\mvextsd2q\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvextsd2q\\M} 6 } } */\n /* { dg-final { scan-assembler-times {\\mvslq\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mvsrq\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mvsraq\\M} 2 } } */\n@@ -85,6 +85,45 @@ int main ()\n   vector __int128 vec_arg1, vec_arg2, vec_result;\n   vector unsigned __int128 vec_uarg1, vec_uarg2, vec_uarg3, vec_uresult;\n   vector bool __int128  vec_result_bool;\n+\n+  /* sign extend double to 128-bit integer  */\n+  vec_arg1_di[0] = 1000;\n+  vec_arg1_di[1] = -123456;\n+\n+  expected_result = 1000;\n+\n+  vec_result = vec_signextq (vec_arg1_di);\n+\n+  if (vec_result[0] != expected_result) {\n+#if DEBUG\n+    printf(\"ERROR: vec_signextq ((long long) %lld) =  \",  vec_arg1_di[0]);\n+    print_i128(vec_result[0]);\n+    printf(\"\\n does not match expected_result = \");\n+    print_i128(expected_result);\n+    printf(\"\\n\\n\");\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_arg1_di[0] = -123456;\n+  vec_arg1_di[1] = 1000;\n+\n+  expected_result = -123456;\n+\n+  vec_result = vec_signextq (vec_arg1_di);\n+\n+  if (vec_result[0] != expected_result) {\n+#if DEBUG\n+    printf(\"ERROR: vec_signextq ((long long) %lld) =  \",  vec_arg1_di[0]);\n+    print_i128(vec_result[0]);\n+    printf(\"\\n does not match expected_result = \");\n+    print_i128(expected_result);\n+    printf(\"\\n\\n\");\n+#else\n+    abort();\n+#endif\n+  }\n   \n   /* test shift 128-bit integers.\n      Note, shift amount is given by the lower 7-bits of the shift amount. */"}, {"sha": "fdcad019b9697c296947d9d35f6b88420d3b2900", "filename": "gcc/testsuite/gcc.target/powerpc/p9-sign_extend-runnable.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-sign_extend-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db042e1603db5057314c404eded73c45f60ad2d6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-sign_extend-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-sign_extend-runnable.c?ref=db042e1603db5057314c404eded73c45f60ad2d6", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do run { target { *-*-linux* && { lp64 && p9vector_hw } } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9 -save-temps\" } */\n+\n+/* These builtins were not defined until ISA 3.1 but only require ISA 3.0\n+   support.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvextsb2w\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvextsb2d\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvextsh2w\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvextsh2d\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvextsw2d\\M} 1 } } */\n+\n+#include <altivec.h>\n+\n+#define DEBUG 0\n+\n+#if DEBUG\n+#include <stdio.h>\n+#include <stdlib.h>\n+#endif\n+\n+void abort (void);\n+\n+int main ()\n+{\n+  int i;\n+\n+  vector signed char vec_arg_qi, vec_result_qi;\n+  vector signed short int vec_arg_hi, vec_result_hi, vec_expected_hi;\n+  vector signed int vec_arg_wi, vec_result_wi, vec_expected_wi;\n+  vector signed long long vec_result_di, vec_expected_di;\n+\n+  /* test sign extend byte to word */\n+  vec_arg_qi = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t     -1, -2, -3, -4, -5, -6, -7, -8};\n+  vec_expected_wi = (vector signed int) {1, 5, -1, -5};\n+\n+  vec_result_wi = vec_signexti (vec_arg_qi);\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_result_wi[i] != vec_expected_wi[i]) {\n+#if DEBUG\n+      printf(\"ERROR: vec_signexti(char, int):  \");\n+      printf(\"vec_result_wi[%d] != vec_expected_wi[%d]\\n\",\n+\t     i, i);\n+      printf(\"vec_result_wi[%d] = %d\\n\", i, vec_result_wi[i]);\n+      printf(\"vec_expected_wi[%d] = %d\\n\", i, vec_expected_wi[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* test sign extend byte to double */\n+  vec_arg_qi = (vector signed char){1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t    -1, -2, -3, -4, -5, -6, -7, -8};\n+  vec_expected_di = (vector signed long long int){1, -1};\n+\n+  vec_result_di = vec_signextll(vec_arg_qi);\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_result_di[i] != vec_expected_di[i]) {\n+#if DEBUG\n+      printf(\"ERROR: vec_signextll(byte, long long int):  \");\n+      printf(\"vec_result_di[%d] != vec_expected_di[%d]\\n\", i, i);\n+      printf(\"vec_result_di[%d] = %lld\\n\", i, vec_result_di[i]);\n+      printf(\"vec_expected_di[%d] = %lld\\n\", i, vec_expected_di[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* test sign extend short to word */\n+  vec_arg_hi = (vector signed short int){1, 2, 3, 4, -1, -2, -3, -4};\n+  vec_expected_wi = (vector signed int){1, 3, -1, -3};\n+\n+  vec_result_wi = vec_signexti(vec_arg_hi);\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_result_wi[i] != vec_expected_wi[i]) {\n+#if DEBUG\n+      printf(\"ERROR: vec_signexti(short, int):  \");\n+      printf(\"vec_result_wi[%d] != vec_expected_wi[%d]\\n\", i, i);\n+      printf(\"vec_result_wi[%d] = %d\\n\", i, vec_result_wi[i]);\n+      printf(\"vec_expected_wi[%d] = %d\\n\", i, vec_expected_wi[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* test sign extend short to double word */\n+  vec_arg_hi = (vector signed short int ){1, 3, 5, 7,  -1, -3, -5, -7};\n+  vec_expected_di = (vector signed long long int){1, -1};\n+\n+  vec_result_di = vec_signextll(vec_arg_hi);\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_result_di[i] != vec_expected_di[i]) {\n+#if DEBUG\n+      printf(\"ERROR: vec_signextll(short, double):  \");\n+      printf(\"vec_result_di[%d] != vec_expected_di[%d]\\n\", i, i);\n+      printf(\"vec_result_di[%d] = %lld\\n\", i, vec_result_di[i]);\n+      printf(\"vec_expected_di[%d] = %lld\\n\", i, vec_expected_di[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* test sign extend word to double word */\n+  vec_arg_wi = (vector signed int ){1, 3, -1, -3};\n+  vec_expected_di = (vector signed long long int){1, -1};\n+\n+  vec_result_di = vec_signextll(vec_arg_wi);\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_result_di[i] != vec_expected_di[i]) {\n+#if DEBUG\n+      printf(\"ERROR: vec_signextll(word, double):  \");\n+      printf(\"vec_result_di[%d] != vec_expected_di[%d]\\n\", i, i);\n+      printf(\"vec_result_di[%d] = %lld\\n\", i, vec_result_di[i]);\n+      printf(\"vec_expected_di[%d] = %lld\\n\", i, vec_expected_di[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  return 0;\n+}"}]}