{"sha": "76fe932be367d60f45e8a69a83d3efcf271f6e63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZmZTkzMmJlMzY3ZDYwZjQ1ZThhNjlhODNkM2VmY2YyNzFmNmU2Mw==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-02-11T16:48:45Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-02-11T16:48:45Z"}, "message": "re PR fortran/69296 ([F03] Problem with associate and vector subscript)\n\ngcc/fortran/ChangeLog:\n\n2016-02-11  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/69296\n\t* gfortran.h: Added flag to gfc_association_list indicating that\n\tthe rank of an associate variable has been guessed only.\n\t* parse.c (parse_associate): Set the guess flag mentioned above\n\twhen guessing the rank of an expression.\n\t* resolve.c (resolve_assoc_var): When the rank has been guessed,\n\tmake sure, that the guess was correct else overwrite with the actual\n\trank.\n\t* trans-stmt.c (trans_associate_var): For subref_array_pointers in\n\tclass objects, take the span from the _data component.\n\ngcc/testsuite/ChangeLog:\n\n2016-02-11  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/69296\n\t* gfortran.dg/associate_19.f03: New test.\n\t* gfortran.dg/associate_20.f03: New test.\n\nFrom-SVN: r233351", "tree": {"sha": "4f0f282a748ce12fc4fc2f005187201258537e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f0f282a748ce12fc4fc2f005187201258537e3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76fe932be367d60f45e8a69a83d3efcf271f6e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76fe932be367d60f45e8a69a83d3efcf271f6e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76fe932be367d60f45e8a69a83d3efcf271f6e63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76fe932be367d60f45e8a69a83d3efcf271f6e63/comments", "author": null, "committer": null, "parents": [{"sha": "564c4d4bb3eea5e84b04af6d8404ca96b0a65807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564c4d4bb3eea5e84b04af6d8404ca96b0a65807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564c4d4bb3eea5e84b04af6d8404ca96b0a65807"}], "stats": {"total": 92, "additions": 87, "deletions": 5}, "files": [{"sha": "77a08c42da5d912580860dd246896e349f0b6df6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=76fe932be367d60f45e8a69a83d3efcf271f6e63", "patch": "@@ -1,3 +1,16 @@\n+2016-02-11  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/69296\n+\t* gfortran.h: Added flag to gfc_association_list indicating that\n+\tthe rank of an associate variable has been guessed only.\n+\t* parse.c (parse_associate): Set the guess flag mentioned above\n+\twhen guessing the rank of an expression.\n+\t* resolve.c (resolve_assoc_var): When the rank has been guessed,\n+\tmake sure, that the guess was correct else overwrite with the actual\n+\trank.\n+\t* trans-stmt.c (trans_associate_var): For subref_array_pointers in\n+\tclass objects, take the span from the _data component.\n+\n 2016-02-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/50555"}, {"sha": "33fffd8bdcfe477c1cb0fe99b8d0862bd2ed8eca", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=76fe932be367d60f45e8a69a83d3efcf271f6e63", "patch": "@@ -2344,6 +2344,9 @@ typedef struct gfc_association_list\n      for memory handling.  */\n   unsigned dangling:1;\n \n+  /* True when the rank of the target expression is guessed during parsing.  */\n+  unsigned rankguessed:1;\n+\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_symtree *st; /* Symtree corresponding to name.  */\n   locus where;"}, {"sha": "7bce47fef0ae0d7b134234424b52e68ff04ac0a2", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=76fe932be367d60f45e8a69a83d3efcf271f6e63", "patch": "@@ -4098,6 +4098,7 @@ parse_associate (void)\n \t  int dim, rank = 0;\n \t  if (array_ref)\n \t    {\n+\t      a->rankguessed = 1;\n \t      /* Count the dimension, that have a non-scalar extend.  */\n \t      for (dim = 0; dim < array_ref->dimen; ++dim)\n \t\tif (array_ref->dimen_type[dim] != DIMEN_ELEMENT"}, {"sha": "556c8469d2814dce33629b44ec4ac3f94c869aa6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=76fe932be367d60f45e8a69a83d3efcf271f6e63", "patch": "@@ -4777,7 +4777,7 @@ expression_shape (gfc_expr *e)\n /* Given a variable expression node, compute the rank of the expression by\n    examining the base symbol and any reference structures it may have.  */\n \n-static void\n+void\n expression_rank (gfc_expr *e)\n {\n   gfc_ref *ref;\n@@ -8153,16 +8153,19 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n   if (target->rank != 0)\n     {\n       gfc_array_spec *as;\n-      if (sym->ts.type != BT_CLASS && !sym->as)\n+      /* The rank may be incorrectly guessed at parsing, therefore make sure\n+\t it is corrected now.  */\n+      if (sym->ts.type != BT_CLASS && (!sym->as || sym->assoc->rankguessed))\n \t{\n-\t  as = gfc_get_array_spec ();\n+\t  if (!sym->as)\n+\t    sym->as = gfc_get_array_spec ();\n+\t  as = sym->as;\n \t  as->rank = target->rank;\n \t  as->type = AS_DEFERRED;\n \t  as->corank = gfc_get_corank (target);\n \t  sym->attr.dimension = 1;\n \t  if (as->corank != 0)\n \t    sym->attr.codimension = 1;\n-\t  sym->as = as;\n \t}\n     }\n   else"}, {"sha": "cb54499ec39d7138fe9f06348951acaf0a6800f7", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=76fe932be367d60f45e8a69a83d3efcf271f6e63", "patch": "@@ -1569,7 +1569,9 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n       if (sym->attr.subref_array_pointer)\n \t{\n \t  gcc_assert (e->expr_type == EXPR_VARIABLE);\n-\t  tmp = e->symtree->n.sym->backend_decl;\n+\t  tmp = e->symtree->n.sym->ts.type == BT_CLASS\n+\t      ? gfc_class_data_get (e->symtree->n.sym->backend_decl)\n+\t      : e->symtree->n.sym->backend_decl;\n \t  tmp = gfc_get_element_type (TREE_TYPE (tmp));\n \t  tmp = fold_convert (gfc_array_index_type, size_in_bytes (tmp));\n \t  gfc_add_modify (&se.pre, GFC_DECL_SPAN(desc), tmp);"}, {"sha": "c99f7639760e6d05afbaa3dff5b64263b4d670d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76fe932be367d60f45e8a69a83d3efcf271f6e63", "patch": "@@ -1,3 +1,9 @@\n+2016-02-11  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/69296\n+\t* gfortran.dg/associate_19.f03: New test.\n+\t* gfortran.dg/associate_20.f03: New test.\n+\n 2016-02-11  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* gcc.target/sh/pr54089-8.c: Adjust optimization level."}, {"sha": "76534c57a5f88c2a64a11b9d6c50b52ba0183043", "filename": "gcc/testsuite/gfortran.dg/associate_19.f03", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_19.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_19.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_19.f03?ref=76fe932be367d60f45e8a69a83d3efcf271f6e63", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+!\n+! Contributed by mrestelli@gmail.com\n+! Adapated by Andre Vehreschild  <vehre@gcc.gnu.org>\n+! Test that fix for PR69296 is working.\n+\n+program p\n+ implicit none\n+\n+ integer :: j, a(2,6), i(3,2)\n+\n+  a(1,:) = (/ (     j , j=1,6) /)\n+  a(2,:) = (/ ( -10*j , j=1,6) /)\n+\n+  i(:,1) = (/ 1 , 3 , 5 /)\n+  i(:,2) = (/ 4 , 5 , 6 /)\n+\n+  associate( ai => a(:,i(:,1)) )\n+    if (any(shape(ai) /= [2, 3])) call abort()\n+    if (any(reshape(ai, [6]) /= [1 , -10, 3, -30, 5, -50])) call abort()\n+  end associate\n+\n+end program p"}, {"sha": "9d420efd9d659b9220630fa557260cd572329612", "filename": "gcc/testsuite/gfortran.dg/associate_20.f03", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fe932be367d60f45e8a69a83d3efcf271f6e63/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_20.f03?ref=76fe932be367d60f45e8a69a83d3efcf271f6e63", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+!\n+! Contributed by mrestelli@gmail.com\n+! Adapated by Andre Vehreschild  <vehre@gcc.gnu.org>\n+! Test that fix for PR69296 is working.\n+\n+program p\n+  implicit none\n+\n+  type foo\n+    integer :: i\n+  end type\n+\n+  integer :: j, i(3,2)\n+  class(foo), allocatable :: a(:,:)\n+\n+  allocate (a(2,6))\n+\n+  a(1,:)%i = (/ (     j , j=1,6) /)\n+  a(2,:)%i = (/ ( -10*j , j=1,6) /)\n+\n+  i(:,1) = (/ 1 , 3 , 5 /)\n+  i(:,2) = (/ 4 , 5 , 6 /)\n+\n+  associate( ai => a(:,i(:,1))%i )\n+    if (any(shape(ai) /= [2, 3])) call abort()\n+    if (any(reshape(ai, [6]) /= [1 , -10, 3, -30, 5, -50])) call abort()\n+  end associate\n+\n+  deallocate(a)\n+end program p"}]}