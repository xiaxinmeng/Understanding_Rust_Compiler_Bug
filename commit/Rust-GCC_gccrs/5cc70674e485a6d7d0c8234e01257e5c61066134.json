{"sha": "5cc70674e485a6d7d0c8234e01257e5c61066134", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjNzA2NzRlNDg1YTZkN2QwYzgyMzRlMDEyNTdlNWM2MTA2NjEzNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-11T18:29:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-11T18:29:19Z"}, "message": "Belongs here.\n\nFrom-SVN: r19679", "tree": {"sha": "98434503b3a508a5eb0f8f7a611826145fa75bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98434503b3a508a5eb0f8f7a611826145fa75bcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cc70674e485a6d7d0c8234e01257e5c61066134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc70674e485a6d7d0c8234e01257e5c61066134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc70674e485a6d7d0c8234e01257e5c61066134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc70674e485a6d7d0c8234e01257e5c61066134/comments", "author": null, "committer": null, "parents": [{"sha": "1ad35649f89faee0e93dfb1ff7a7429ad1ea2522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad35649f89faee0e93dfb1ff7a7429ad1ea2522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad35649f89faee0e93dfb1ff7a7429ad1ea2522"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "09bf430406e775124bd464e7dc484656684575b1", "filename": "gcc/testsuite/gcc.c-torture/compile/980408-1.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc70674e485a6d7d0c8234e01257e5c61066134/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980408-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc70674e485a6d7d0c8234e01257e5c61066134/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980408-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980408-1.c?ref=5cc70674e485a6d7d0c8234e01257e5c61066134", "patch": "@@ -0,0 +1,129 @@\n+typedef struct _RunlengthPacket\n+{\n+  unsigned short\n+    red,\n+    green,\n+    blue,\n+    length;\n+  unsigned short\n+    index;\n+} RunlengthPacket;\n+typedef struct _Image\n+{\n+  int\n+    status,\n+    temporary;\n+  char\n+    filename[1664 ];\n+  long int\n+    filesize;\n+  int\n+    pipe;\n+  char\n+    magick[1664 ],\n+    *comments,\n+    *label,\n+    *text;\n+  unsigned int\n+    matte;\n+  unsigned int\n+    columns,\n+    rows,\n+    depth;\n+  unsigned int\n+    scene,\n+    number_scenes;\n+  char\n+    *montage,\n+    *directory;\n+  unsigned int\n+    colors;\n+  double\n+    gamma;\n+  float\n+    x_resolution,\n+    y_resolution;\n+  unsigned int\n+    mean_error_per_pixel;\n+  double\n+    normalized_mean_error,\n+    normalized_maximum_error;\n+  unsigned long\n+    total_colors;\n+  char\n+    *signature;\n+  unsigned int\n+    packets,\n+    runlength,\n+    packet_size;\n+  unsigned char\n+    *packed_pixels;\n+  long int\n+    magick_time;\n+  char\n+    magick_filename[1664 ];\n+  unsigned int\n+    magick_columns,\n+    magick_rows;\n+  char\n+    *geometry,\n+    *page;\n+  unsigned int\n+    dispose,\n+    delay,\n+    iterations;\n+  unsigned int\n+    orphan;\n+  struct _Image\n+    *previous,\n+    *list,\n+    *next;\n+} Image;\n+  Image *MinifyImage(Image *image)\n+{\n+  Image\n+    *minified_image;\n+  register RunlengthPacket\n+    *q,\n+    *s,\n+    *s0,\n+    *s1,\n+    *s2,\n+    *s3;\n+  register unsigned int\n+    x;\n+  unsigned int\n+    blue,\n+    green,\n+    red;\n+  unsigned long\n+    total_matte,\n+    total_blue,\n+    total_green,\n+    total_red;\n+  unsigned short\n+    index;\n+    for (x=0; x < (image->columns-1); x+=2)\n+    {\n+      total_red=0;\n+      total_green=0;\n+      total_blue=0;\n+      total_matte=0;\n+      s=s0;\n+      total_red+=( 3 )*(s->red); total_green+=( 3 )*(s->green); total_blue+=( 3 )*(s->blue); total_matte+=( 3 )*(s->index); s++; ; total_red+=( 7 )*(s->red); total_green+=( 7 )*(s->green); total_blue+=( 7 )*(s->blue); total_matte+=( 7 )*(s->index); s++; ;  total_red+=( 7 )*(s->red); total_green+=( 7 )*(s->green); total_blue+=( 7 )*(s->blue); total_matte+=( 7 )*(s->index); s++; ;  total_red+=( 3 )*(s->red); total_green+=( 3 )*(s->green); total_blue+=( 3 )*(s->blue); total_matte+=( 3 )*(s->index); s++; ;\n+      s=s1;\n+      total_red+=( 7 )*(s->red); total_green+=( 7 )*(s->green); total_blue+=( 7 )*(s->blue); total_matte+=( 7 )*(s->index); s++; ; total_red+=( 15 )*(s->red); total_green+=( 15 )*(s->green); total_blue+=( 15 )*(s->blue); total_matte+=( 15 )*(s->index); s++; ; total_red+=( 15 )*(s->red); total_green+=( 15 )*(s->green); total_blue+=( 15 )*(s->blue); total_matte+=( 15 )*(s->index); s++; ; total_red+=( 7 )*(s->red); total_green+=( 7 )*(s->green); total_blue+=( 7 )*(s->blue); total_matte+=( 7 )*(s->index); s++; ;\n+      s=s2;\n+      total_red+=( 7 )*(s->red); total_green+=( 7 )*(s->green); total_blue+=( 7 )*(s->blue); total_matte+=( 7 )*(s->index); s++; ; total_red+=( 15 )*(s->red); total_green+=( 15 )*(s->green); total_blue+=( 15 )*(s->blue); total_matte+=( 15 )*(s->index); s++; ; total_red+=( 15 )*(s->red); total_green+=( 15 )*(s->green); total_blue+=( 15 )*(s->blue); total_matte+=( 15 )*(s->index); s++; ; total_red+=( 7 )*(s->red); total_green+=( 7 )*(s->green); total_blue+=( 7 )*(s->blue); total_matte+=( 7 )*(s->index); s++; ;\n+      s=s3;\n+      total_red+=( 3 )*(s->red); total_green+=( 3 )*(s->green); total_blue+=( 3 )*(s->blue); total_matte+=( 3 )*(s->index); s++; ; total_red+=( 7 )*(s->red); total_green+=( 7 )*(s->green); total_blue+=( 7 )*(s->blue); total_matte+=( 7 )*(s->index); s++; ;  total_red+=( 7 )*(s->red); total_green+=( 7 )*(s->green); total_blue+=( 7 )*(s->blue); total_matte+=( 7 )*(s->index); s++; ;  total_red+=( 3 )*(s->red); total_green+=( 3 )*(s->green); total_blue+=( 3 )*(s->blue); total_matte+=( 3 )*(s->index); s++; ;\n+      red=(unsigned short) ((total_red+63) >> 7);\n+      green=(unsigned short) ((total_green+63) >> 7);\n+      blue=(unsigned short) ((total_blue+63) >> 7);\n+      index=(unsigned short) ((total_matte+63) >> 7);\n+      if ((red == q->red) && (green == q->green) && (blue == q->blue) &&\n+          (index == q->index) && ((int) q->length < 65535L ))\n+        q->length++;\n+    }\n+  return(minified_image);\n+}"}]}