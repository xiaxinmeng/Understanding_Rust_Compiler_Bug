{"sha": "387c17d312f76173b9af2717cb89359e09647c28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3YzE3ZDMxMmY3NjE3M2I5YWYyNzE3Y2I4OTM1OWUwOTY0N2MyOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-07-10T17:59:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-07-10T17:59:02Z"}, "message": "PR libstdc++/81381 support stateful allocators in basic_stringbuf\n\n\tPR libstdc++/81381\n\t* include/bits/sstream.tcc (basic_stringbuf::overflow)\n\t(basic_stringbuf::basic_stringbuf(const __string_type&, ios::mode))\n\t(basic_stringbuf::str()): Construct new strings with an allocator.\n\t* testsuite/27_io/basic_stringbuf/cons/81381.cc: New.\n\nFrom-SVN: r250101", "tree": {"sha": "c9da9b89f426a94165143ac41631873085c42355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9da9b89f426a94165143ac41631873085c42355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387c17d312f76173b9af2717cb89359e09647c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387c17d312f76173b9af2717cb89359e09647c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387c17d312f76173b9af2717cb89359e09647c28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387c17d312f76173b9af2717cb89359e09647c28/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "25e3aed5b0ff0bc6449eb8973d693bddf733eaeb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387c17d312f76173b9af2717cb89359e09647c28/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387c17d312f76173b9af2717cb89359e09647c28/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=387c17d312f76173b9af2717cb89359e09647c28", "patch": "@@ -1,5 +1,11 @@\n 2017-07-10  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/81381\n+\t* include/bits/sstream.tcc (basic_stringbuf::overflow)\n+\t(basic_stringbuf::basic_stringbuf(const __string_type&, ios::mode))\n+\t(basic_stringbuf::str()): Construct new strings with an allocator.\n+\t* testsuite/27_io/basic_stringbuf/cons/81381.cc: New.\n+\n \tPR libstdc++/81338\n \t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI] (basic_string):\n \tDeclare basic_stringbuf to be a friend."}, {"sha": "56c53bc5923c5d93768cbe5ccbb08b42ce3f8fe5", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387c17d312f76173b9af2717cb89359e09647c28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387c17d312f76173b9af2717cb89359e09647c28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=387c17d312f76173b9af2717cb89359e09647c28", "patch": "@@ -129,7 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  const __size_type __opt_len = std::max(__size_type(2 * __capacity),\n \t\t\t\t\t\t __size_type(512));\n \t  const __size_type __len = std::min(__opt_len, __max_size);\n-\t  __string_type __tmp;\n+\t  __string_type __tmp(_M_string.get_allocator());\n \t  __tmp.reserve(__len);\n \t  if (this->pbase())\n \t    __tmp.assign(this->pbase(), this->epptr() - this->pbase());"}, {"sha": "e84b60c64173652186b11ccdfa6ce1f0ffcf45d3", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387c17d312f76173b9af2717cb89359e09647c28/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387c17d312f76173b9af2717cb89359e09647c28/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=387c17d312f76173b9af2717cb89359e09647c28", "patch": "@@ -112,7 +112,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       explicit\n       basic_stringbuf(const __string_type& __str,\n \t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())\n+      : __streambuf_type(), _M_mode(),\n+\t_M_string(__str.data(), __str.size(), __str.get_allocator())\n       { _M_stringbuf_init(__mode); }\n \n #if __cplusplus >= 201103L\n@@ -165,14 +166,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       __string_type\n       str() const\n       {\n-\t__string_type __ret;\n+\t__string_type __ret(_M_string.get_allocator());\n \tif (this->pptr())\n \t  {\n \t    // The current egptr() may not be the actual string end.\n \t    if (this->pptr() > this->egptr())\n-\t      __ret = __string_type(this->pbase(), this->pptr());\n+\t      __ret.assign(this->pbase(), this->pptr());\n \t    else\n- \t      __ret = __string_type(this->pbase(), this->egptr());\n+\t      __ret.assign(this->pbase(), this->egptr());\n \t  }\n \telse\n \t  __ret = _M_string;"}, {"sha": "865449d72ee0d468d494fb442d068ea9a47c72d6", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/cons/81381.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387c17d312f76173b9af2717cb89359e09647c28/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2F81381.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387c17d312f76173b9af2717cb89359e09647c28/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2F81381.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2F81381.cc?ref=387c17d312f76173b9af2717cb89359e09647c28", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+// PR libstdc++/81381\n+\n+#include <memory>\n+#include <sstream>\n+#include <testsuite_allocator.h>\n+\n+using Alloc = __gnu_test::uneq_allocator<char>;\n+using String = std::basic_string<char, std::char_traits<char>, Alloc>;\n+\n+struct SB : std::basic_stringbuf<char, std::char_traits<char>, Alloc>\n+{\n+  SB(const String& s) : basic_stringbuf(s) { }\n+\n+  using basic_stringbuf::overflow;\n+};\n+\n+int main()\n+{\n+  String s(Alloc(23));\n+  SB b(s);\n+  b.overflow('a');\n+  VERIFY( b.str().get_allocator() == s.get_allocator() );\n+}"}]}