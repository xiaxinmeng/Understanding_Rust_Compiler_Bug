{"sha": "8d80ff64373eb64492469fbf4f0bf0043f9e0854", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ4MGZmNjQzNzNlYjY0NDkyNDY5ZmJmNGYwYmYwMDQzZjllMDg1NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T07:54:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T07:54:29Z"}, "message": "[multiple changes]\n\n 2013-07-08  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch8.adb, exp_ch3.adb: Minor reformatting.\n\n2013-07-08  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Eq): When comparing two\n\tBounded_Strings, use the predefined equality function of the\n\troot Super_String type.\n\nFrom-SVN: r200760", "tree": {"sha": "ae23385220428ad46ccaa27470c483deadce72b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae23385220428ad46ccaa27470c483deadce72b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d80ff64373eb64492469fbf4f0bf0043f9e0854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d80ff64373eb64492469fbf4f0bf0043f9e0854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d80ff64373eb64492469fbf4f0bf0043f9e0854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d80ff64373eb64492469fbf4f0bf0043f9e0854/comments", "author": null, "committer": null, "parents": [{"sha": "b2c28399143ad6bebd4a5af6818c000bb69a6226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c28399143ad6bebd4a5af6818c000bb69a6226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c28399143ad6bebd4a5af6818c000bb69a6226"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "67275fe6886aeab9d714d22a8e0b704d381f5ee4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d80ff64373eb64492469fbf4f0bf0043f9e0854/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d80ff64373eb64492469fbf4f0bf0043f9e0854/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8d80ff64373eb64492469fbf4f0bf0043f9e0854", "patch": "@@ -1,3 +1,13 @@\n+ 2013-07-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch8.adb, exp_ch3.adb: Minor reformatting.\n+\n+2013-07-08  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Eq): When comparing two\n+\tBounded_Strings, use the predefined equality function of the\n+\troot Super_String type.\n+\n 2013-07-08  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch4.adb (Create_Alternative): Removed."}, {"sha": "102cb65bc347c7ca694cc98b9bfbce65aec6cd72", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d80ff64373eb64492469fbf4f0bf0043f9e0854/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d80ff64373eb64492469fbf4f0bf0043f9e0854/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=8d80ff64373eb64492469fbf4f0bf0043f9e0854", "patch": "@@ -7283,16 +7283,17 @@ package body Exp_Ch3 is\n \n             --  When compiling in Ada 2012 mode, ensure that the accessibility\n             --  level of the subpool access type is not deeper than that of the\n-            --  pool_with_subpools. This check is not performed on .NET/JVM\n-            --  since these targets do not support pools. The check is omitted\n-            --  on profiles that lack package System.Storage_Pools.Subpools.\n+            --  pool_with_subpools.\n \n             elsif Ada_Version >= Ada_2012\n               and then Present (Associated_Storage_Pool (Def_Id))\n+\n+              --  Omit this check on .NET/JVM where pools are not supported\n+\n               and then VM_Target = No_VM\n \n-              --  ??? Temporary workaround until restriction No_Storage_Pools\n-              --  is implemented.\n+              --  Omit this check for the case of a configurable run-time that\n+              --  does not provide package System.Storage_Pools.Subpools.\n \n               and then RTE_Available (RE_Root_Storage_Pool_With_Subpools)\n             then"}, {"sha": "f351b67f6d003de03a53916ae14660fa83933d9a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d80ff64373eb64492469fbf4f0bf0043f9e0854/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d80ff64373eb64492469fbf4f0bf0043f9e0854/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=8d80ff64373eb64492469fbf4f0bf0043f9e0854", "patch": "@@ -7242,6 +7242,27 @@ package body Exp_Ch4 is\n             Build_Equality_Call\n               (TSS (Root_Type (Typl), TSS_Composite_Equality));\n \n+         --  When comparing two Bounded_Strings, use the primitive equality of\n+         --  the root Super_String type.\n+\n+         elsif Is_Bounded_String (Typl) then\n+            Prim :=\n+              First_Elmt (Collect_Primitive_Operations (Root_Type (Typl)));\n+\n+            while Present (Prim) loop\n+               exit when Chars (Node (Prim)) = Name_Op_Eq\n+                 and then Etype (First_Formal (Node (Prim))) =\n+                          Etype (Next_Formal (First_Formal (Node (Prim))))\n+                 and then Base_Type (Etype (Node (Prim))) = Standard_Boolean;\n+\n+               Next_Elmt (Prim);\n+            end loop;\n+\n+            --  A Super_String type should always have a primitive equality\n+\n+            pragma Assert (Present (Prim));\n+            Build_Equality_Call (Node (Prim));\n+\n          --  Otherwise expand the component by component equality. Note that\n          --  we never use block-bit comparisons for records, because of the\n          --  problems with gaps. The backend will often be able to recombine\n@@ -10718,11 +10739,11 @@ package body Exp_Ch4 is\n               Expand_Composite_Equality (Nod, Etype (C),\n                Lhs =>\n                  Make_Selected_Component (Loc,\n-                   Prefix => New_Lhs,\n+                   Prefix        => New_Lhs,\n                    Selector_Name => New_Reference_To (C, Loc)),\n                Rhs =>\n                  Make_Selected_Component (Loc,\n-                   Prefix => New_Rhs,\n+                   Prefix        => New_Rhs,\n                    Selector_Name => New_Reference_To (C, Loc)),\n                Bodies => Bodies);\n "}, {"sha": "e9505d680f598245d63d147ea3d47d051e0b4845", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d80ff64373eb64492469fbf4f0bf0043f9e0854/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d80ff64373eb64492469fbf4f0bf0043f9e0854/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=8d80ff64373eb64492469fbf4f0bf0043f9e0854", "patch": "@@ -3300,14 +3300,14 @@ package body Sem_Ch8 is\n    ------------------------\n \n    procedure Attribute_Renaming (N : Node_Id) is\n-      Loc        : constant Source_Ptr := Sloc (N);\n-      Nam        : constant Node_Id    := Name (N);\n-      Spec       : constant Node_Id    := Specification (N);\n-      New_S      : constant Entity_Id  := Defining_Unit_Name (Spec);\n-      Aname      : constant Name_Id    := Attribute_Name (Nam);\n+      Loc   : constant Source_Ptr := Sloc (N);\n+      Nam   : constant Node_Id    := Name (N);\n+      Spec  : constant Node_Id    := Specification (N);\n+      New_S : constant Entity_Id  := Defining_Unit_Name (Spec);\n+      Aname : constant Name_Id    := Attribute_Name (Nam);\n \n-      Form_Num   : Nat      := 0;\n-      Expr_List  : List_Id  := No_List;\n+      Form_Num  : Nat      := 0;\n+      Expr_List : List_Id  := No_List;\n \n       Attr_Node  : Node_Id;\n       Body_Node  : Node_Id;\n@@ -3323,9 +3323,7 @@ package body Sem_Ch8 is\n       --  and the GNAT attribute 'Img, which GNAT treats as renameable.\n \n       if not Is_Non_Empty_List (Parameter_Specifications (Spec)) then\n-         if Aname /= Name_AST_Entry\n-           and then Aname /= Name_Img\n-         then\n+         if Aname /= Name_AST_Entry and then Aname /= Name_Img then\n             Error_Msg_N\n               (\"subprogram renaming an attribute must have formals\", N);\n             return;\n@@ -3344,8 +3342,8 @@ package body Sem_Ch8 is\n                --  there are no subtypes involved.\n \n                Rewrite (Parameter_Type (Param_Spec),\n-                New_Reference_To\n-                  (Base_Type (Entity (Parameter_Type (Param_Spec))), Loc));\n+                 New_Reference_To\n+                   (Base_Type (Entity (Parameter_Type (Param_Spec))), Loc));\n             end if;\n \n             if No (Expr_List) then\n@@ -3498,13 +3496,13 @@ package body Sem_Ch8 is\n             P : constant Node_Id := Prefix (Nam);\n \n          begin\n-            --  The prefix of 'Img is an object that is evaluated for\n-            --  each call of the function that renames it.\n+            --  The prefix of 'Img is an object that is evaluated for each call\n+            --  of the function that renames it.\n \n             if Aname = Name_Img then\n                Preanalyze_And_Resolve (P);\n \n-            --  For all other attribute renamings, the prefix is a subtype.\n+            --  For all other attribute renamings, the prefix is a subtype\n \n             else\n                Find_Type (P);"}]}