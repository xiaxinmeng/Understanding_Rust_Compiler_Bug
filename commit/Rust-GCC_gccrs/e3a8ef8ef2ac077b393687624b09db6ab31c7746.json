{"sha": "e3a8ef8ef2ac077b393687624b09db6ab31c7746", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNhOGVmOGVmMmFjMDc3YjM5MzY4NzYyNGIwOWRiNmFiMzFjNzc0Ng==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-01-22T03:03:28Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-01-22T14:05:32Z"}, "message": "rs6000: Enable vec_insert for P8 with rs6000_expand_vector_set_var_p8 [PR98093]\n\nSupport P8 variable vec_insert and Update testcases' instruction count.\n\ngcc/ChangeLog:\n\n2021-01-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\tPR target/98093\n\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n\tGenerate ARRAY_REF(VIEW_CONVERT_EXPR) for P8 and later\n\tplatforms.\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_set_var): Update\n\tto call different path for P8 and P9.\n\t(rs6000_expand_vector_set_var_p9): New function.\n\t(rs6000_expand_vector_set_var_p8): New function.\n\ngcc/testsuite/ChangeLog:\n\n2021-01-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* gcc.target/powerpc/pr79251.p8.c: New test.\n\t* gcc.target/powerpc/fold-vec-insert-char-p8.c: Adjust\n\tinstruction counts.\n\t* gcc.target/powerpc/fold-vec-insert-char-p9.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-double.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-float-p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-float-p9.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-int-p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-int-p9.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-longlong.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-short-p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-short-p9.c: Likewise.\n\t* gcc.target/powerpc/vsx-builtin-7.c: Likewise.", "tree": {"sha": "c2c188d80a10edb6f5409ddb327519e6c2dcdf72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c188d80a10edb6f5409ddb327519e6c2dcdf72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3a8ef8ef2ac077b393687624b09db6ab31c7746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a8ef8ef2ac077b393687624b09db6ab31c7746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a8ef8ef2ac077b393687624b09db6ab31c7746", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a8ef8ef2ac077b393687624b09db6ab31c7746/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b29225597584b697762585e0b707b7cb4b427650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29225597584b697762585e0b707b7cb4b427650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29225597584b697762585e0b707b7cb4b427650"}], "stats": {"total": 260, "additions": 206, "deletions": 54}, "files": [{"sha": "f6ee1e61b56a2f6d659b95b9ccd7c98919cdbff9", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -1599,10 +1599,29 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t  SET_EXPR_LOCATION (stmt, loc);\n \t  stmt = build1 (COMPOUND_LITERAL_EXPR, arg1_type, stmt);\n \t}\n-      stmt = build_array_ref (loc, stmt, arg2);\n-      stmt = fold_build2 (MODIFY_EXPR, TREE_TYPE (arg0), stmt,\n-\t\t\t  convert (TREE_TYPE (stmt), arg0));\n-      stmt = build2 (COMPOUND_EXPR, arg1_type, stmt, decl);\n+\n+      if (TARGET_P8_VECTOR)\n+\t{\n+\t  stmt = build_array_ref (loc, stmt, arg2);\n+\t  stmt = fold_build2 (MODIFY_EXPR, TREE_TYPE (arg0), stmt,\n+\t\t\t      convert (TREE_TYPE (stmt), arg0));\n+\t  stmt = build2 (COMPOUND_EXPR, arg1_type, stmt, decl);\n+\t}\n+      else\n+\t{\n+\t  tree arg1_inner_type;\n+\t  tree innerptrtype;\n+\t  arg1_inner_type = TREE_TYPE (arg1_type);\n+\t  innerptrtype = build_pointer_type (arg1_inner_type);\n+\n+\t  stmt = build_unary_op (loc, ADDR_EXPR, stmt, 0);\n+\t  stmt = convert (innerptrtype, stmt);\n+\t  stmt = build_binary_op (loc, PLUS_EXPR, stmt, arg2, 1);\n+\t  stmt = build_indirect_ref (loc, stmt, RO_NULL);\n+\t  stmt = build2 (MODIFY_EXPR, TREE_TYPE (stmt), stmt,\n+\t\t\t convert (TREE_TYPE (stmt), arg0));\n+\t  stmt = build2 (COMPOUND_EXPR, arg1_type, stmt, decl);\n+\t}\n       return stmt;\n     }\n "}, {"sha": "f5565a1a253393eba73c5fc7e42ecbc72648f899", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 115, "deletions": 2, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -7090,10 +7090,10 @@ rs6000_expand_vector_set (rtx target, rtx val, rtx elt_rtx)\n }\n \n /* Insert VAL into IDX of TARGET, VAL size is same of the vector element, IDX\n-   is variable and also counts by vector element size.  */\n+   is variable and also counts by vector element size for p9 and above.  */\n \n void\n-rs6000_expand_vector_set_var (rtx target, rtx val, rtx idx)\n+rs6000_expand_vector_set_var_p9 (rtx target, rtx val, rtx idx)\n {\n   machine_mode mode = GET_MODE (target);\n \n@@ -7136,6 +7136,119 @@ rs6000_expand_vector_set_var (rtx target, rtx val, rtx idx)\n   emit_insn (perml);\n }\n \n+/* Insert VAL into IDX of TARGET, VAL size is same of the vector element, IDX\n+   is variable and also counts by vector element size for p8.  */\n+\n+void\n+rs6000_expand_vector_set_var_p8 (rtx target, rtx val, rtx idx)\n+{\n+  machine_mode mode = GET_MODE (target);\n+\n+  gcc_assert (VECTOR_MEM_VSX_P (mode) && !CONST_INT_P (idx));\n+\n+  gcc_assert (GET_MODE (idx) == E_SImode);\n+\n+  machine_mode inner_mode = GET_MODE (val);\n+  HOST_WIDE_INT mode_mask = GET_MODE_MASK (inner_mode);\n+\n+  rtx tmp = gen_reg_rtx (GET_MODE (idx));\n+  int width = GET_MODE_SIZE (inner_mode);\n+\n+  gcc_assert (width >= 1 && width <= 4);\n+\n+  if (!BYTES_BIG_ENDIAN)\n+    {\n+      /*  idx = idx * width.  */\n+      emit_insn (gen_mulsi3 (tmp, idx, GEN_INT (width)));\n+      /*  idx = idx + 8.  */\n+      emit_insn (gen_addsi3 (tmp, tmp, GEN_INT (8)));\n+    }\n+  else\n+    {\n+      emit_insn (gen_mulsi3 (tmp, idx, GEN_INT (width)));\n+      emit_insn (gen_subsi3 (tmp, GEN_INT (24 - width), tmp));\n+    }\n+\n+  /*  lxv vs33, mask.\n+      DImode: 0xffffffffffffffff0000000000000000\n+      SImode: 0x00000000ffffffff0000000000000000\n+      HImode: 0x000000000000ffff0000000000000000.\n+      QImode: 0x00000000000000ff0000000000000000.  */\n+  rtx mask = gen_reg_rtx (V16QImode);\n+  rtx mask_v2di = gen_reg_rtx (V2DImode);\n+  rtvec v = rtvec_alloc (2);\n+  if (!BYTES_BIG_ENDIAN)\n+    {\n+      RTVEC_ELT (v, 0) = gen_rtx_CONST_INT (DImode, 0);\n+      RTVEC_ELT (v, 1) = gen_rtx_CONST_INT (DImode, mode_mask);\n+    }\n+  else\n+    {\n+      RTVEC_ELT (v, 0) = gen_rtx_CONST_INT (DImode, mode_mask);\n+      RTVEC_ELT (v, 1) = gen_rtx_CONST_INT (DImode, 0);\n+    }\n+  emit_insn (gen_vec_initv2didi (mask_v2di, gen_rtx_PARALLEL (V2DImode, v)));\n+  rtx sub_mask = simplify_gen_subreg (V16QImode, mask_v2di, V2DImode, 0);\n+  emit_insn (gen_rtx_SET (mask, sub_mask));\n+\n+  /*  mtvsrd[wz] f0,tmp_val.  */\n+  rtx tmp_val = gen_reg_rtx (SImode);\n+  if (inner_mode == E_SFmode)\n+    emit_insn (gen_movsi_from_sf (tmp_val, val));\n+  else\n+    tmp_val = force_reg (SImode, val);\n+\n+  rtx val_v16qi = gen_reg_rtx (V16QImode);\n+  rtx val_v2di = gen_reg_rtx (V2DImode);\n+  rtvec vec_val = rtvec_alloc (2);\n+  if (!BYTES_BIG_ENDIAN)\n+  {\n+    RTVEC_ELT (vec_val, 0) = gen_rtx_CONST_INT (DImode, 0);\n+    RTVEC_ELT (vec_val, 1) = tmp_val;\n+  }\n+  else\n+  {\n+    RTVEC_ELT (vec_val, 0) = tmp_val;\n+    RTVEC_ELT (vec_val, 1) = gen_rtx_CONST_INT (DImode, 0);\n+  }\n+  emit_insn (\n+    gen_vec_initv2didi (val_v2di, gen_rtx_PARALLEL (V2DImode, vec_val)));\n+  rtx sub_val = simplify_gen_subreg (V16QImode, val_v2di, V2DImode, 0);\n+  emit_insn (gen_rtx_SET (val_v16qi, sub_val));\n+\n+  /*  lvsl    13,0,idx.  */\n+  tmp = convert_modes (DImode, SImode, tmp, 1);\n+  rtx pcv = gen_reg_rtx (V16QImode);\n+  emit_insn (gen_altivec_lvsl_reg (pcv, tmp));\n+\n+  /*  vperm 1,1,1,13.  */\n+  /*  vperm 0,0,0,13.  */\n+  rtx val_perm = gen_reg_rtx (V16QImode);\n+  rtx mask_perm = gen_reg_rtx (V16QImode);\n+  emit_insn (gen_altivec_vperm_v8hiv16qi (val_perm, val_v16qi, val_v16qi, pcv));\n+  emit_insn (gen_altivec_vperm_v8hiv16qi (mask_perm, mask, mask, pcv));\n+\n+  rtx target_v16qi = simplify_gen_subreg (V16QImode, target, mode, 0);\n+\n+  /*  xxsel 34,34,32,33.  */\n+  emit_insn (\n+    gen_vector_select_v16qi (target_v16qi, target_v16qi, val_perm, mask_perm));\n+}\n+\n+/* Insert VAL into IDX of TARGET, VAL size is same of the vector element, IDX\n+   is variable and also counts by vector element size.  */\n+\n+void\n+rs6000_expand_vector_set_var (rtx target, rtx val, rtx idx)\n+{\n+  machine_mode mode = GET_MODE (target);\n+  machine_mode inner_mode = GET_MODE_INNER (mode);\n+  if (TARGET_P9_VECTOR || GET_MODE_SIZE (inner_mode) == 8)\n+    rs6000_expand_vector_set_var_p9 (target, val, idx);\n+  else\n+    rs6000_expand_vector_set_var_p8 (target, val, idx);\n+}\n+\n /* Extract field ELT from VEC into TARGET.  */\n \n void"}, {"sha": "8f94e8c80b87d481cb843b1c12cd8d323df2c900", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-char-p8.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -44,15 +44,16 @@ vector unsigned char testuu_cst (unsigned char x, vector unsigned char v)\n        return vec_insert (x, v, 12);\n }\n \n-/* one store per _var test */\n-/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxvw4x\\M} 4 } } */\n+/* no store per _var test */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxvw4x\\M} 0 } } */\n /* one store-byte per test */\n-/* { dg-final { scan-assembler-times {\\mstb\\M} 8 } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M} 4 } } */\n /* one load per test */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 { target le } } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 4 { target be } } } */\n \n /* one lvebx per _cst test.*/\n /* { dg-final { scan-assembler-times {\\mlvebx\\M} 4 } } */\n /* one vperm per _cst test.*/\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 } } */\n "}, {"sha": "35ae420dba07263238250944b380173abb2d8afe", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-char-p9.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -44,13 +44,13 @@ vector unsigned char testuu_cst (unsigned char x, vector unsigned char v)\n        return vec_insert (x, v, 12);\n }\n \n-/* load immediate, add, store, stb, load variable test.  */\n-/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 4 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mstb\\M} 4 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mlvebx\\M|\\mlxv\\M|\\mlvx\\M} 4 { target lp64} } } */\n+/* no store per _var test.  */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 0 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M} 0 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvebx\\M|\\mlxv\\M|\\mlvx\\M} 0 { target lp64} } } */\n /* an insert and a move per constant test. */\n-/* { dg-final { scan-assembler-times {\\mmtvsrwz\\M} 4 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mvinsertb\\M} 4 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mmtvsrwz\\M} 8 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mvinsertb\\M} 8 { target lp64 } } } */\n \n /* -m32 codegen. */\n /* { dg-final { scan-assembler-times {\\mrlwinm\\M} 4 { target ilp32 } } } */"}, {"sha": "5afadc9aa91533c4f87b4e287ac694bdf9a5c326", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-double.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -23,7 +23,12 @@ testd_cst (double d, vector double vd)\n /* { dg-final { scan-assembler {\\mxxpermdi\\M} } } */\n \n /* { dg-final { scan-assembler-times {\\mrldic\\M|\\mrlwinm\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 1 { target { ! has_arch_pwr8 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 1 { target { ! has_arch_pwr8 } } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 1 { target { ! has_arch_pwr8 } } } } */\n+\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 0 { target { has_arch_pwr8 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 0 { target { has_arch_pwr8 } } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 { target { has_arch_pwr8 } } } } */\n "}, {"sha": "834f1d39579dc91af6ec258df28b0adc0f7ccb57", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-float-p8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -19,12 +19,12 @@ testf_cst (float f, vector float vf)\n   return vec_insert (f, vf, 12);\n }\n \n-/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxv\\M|\\mstxvd2x\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxv\\M|\\mstxvd2x\\M} 0 } } */\n /* cst tests has stfs instead of stfsx. */\n-/* { dg-final { scan-assembler-times {\\mstfs\\M|\\mstfsx\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mstfs\\M|\\mstfsx\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxv\\M|\\mlxvd2x\\M|\\mlxvw4x\\M} 2 } } */\n \n /* cst test has a lvewx,vperm combo */\n /* { dg-final { scan-assembler-times {\\mlvewx\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 3 } } */\n "}, {"sha": "ba41330d8351037d8083d86520ee337238740719", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-float-p9.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -20,13 +20,13 @@ testf_cst (float f, vector float vf)\n }\n \n /* var test has a load and store. */\n-/* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 1 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mstfsx\\M} 1 { target lp64} } } */\n+/* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 0 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mstfsx\\M} 0 { target lp64} } } */\n \n /* cst test have a xscvdpspn,xxextractuw,xxinsertw combo */\n-/* { dg-final { scan-assembler-times {\\mxscvdpspn\\M} 1 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxextractuw\\M} 1 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxinsertw\\M} 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mxscvdpspn\\M} 2 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxextractuw\\M} 2 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxinsertw\\M} 2 { target lp64 } } } */\n \n /* { dg-final { scan-assembler-times {\\mstfs\\M} 2 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 2 { target ilp32 } } } */"}, {"sha": "37502417c7f837b3cfab733a3eeac653b2a7118e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-int-p8.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -49,9 +49,10 @@ testui2_cst(unsigned int x, vector unsigned int v)\n }\n \n /* Each test has lvx (8).  cst tests have additional lvewx. (4) */\n-/* var tests have both stwx (4) and stvx (4).  cst tests have stw (4).*/\n-/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstwx\\M|\\mstw\\M|\\mstxvw4x\\M} 12 } } */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 } } */\n+/* var tests have no stwx and stvx.  cst tests have stw (4).*/\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstwx\\M|\\mstw\\M|\\mstxvw4x\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 { target le } } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 4 { target be } } } */\n \n /* { dg-final { scan-assembler-times {\\mlvewx\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 } } */"}, {"sha": "01d4eee81fb37ca2fd6b5acf1f35b40980b13b9a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-int-p9.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -49,14 +49,13 @@ testui2_cst(unsigned int x, vector unsigned int v)\n }\n \n \n-/* load immediate, add, store, stb, load variable test.  */\n-/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mstwx\\M} 4 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 4 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 0 } } */\n+/* { dg-final { scan-assembler-times {\\mstwx\\M} 0 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 0 { target lp64 } } } */\n \n /* an insert and a move per constant test. */\n-/* { dg-final { scan-assembler-times {\\mmtvsrwz\\M} 4 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxinsertw\\M} 4 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mmtvsrwz\\M} 8 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxinsertw\\M} 8 { target lp64 } } } */\n \n /* { dg-final { scan-assembler-times {\\mstw\\M} 8 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 8 { target ilp32 } } } */"}, {"sha": "aa52efe13a6bd354e064cbe299ffcf44e7696f01", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-longlong.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -60,13 +60,9 @@ testul2_cst(unsigned long long x, vector unsigned long long v)\n \n /* { dg-final { scan-assembler-times {\\mrldic\\M|\\mrlwinm\\M} 4 } } */\n \n-/* The number of addi instructions decreases on newer systems.  Measured as 8 on\n- power7 and power8 targets, and drops to 4 on power9 targets that use the\n- newer stxv,lxv instructions.  For this test ensure we get at least one.  */\n-/* { dg-final { scan-assembler {\\maddi\\M} } } */\n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstvx\\M|\\mstxv\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mstdx\\M} 4 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstvx\\M|\\mstxv\\M} 0 } } */\n+/* { dg-final { scan-assembler-times {\\mstdx\\M} 0 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mstw\\M} 8 { target ilp32 } } } */\n \n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 } } */\n "}, {"sha": "8dc98f78ad416db81112d15604ec57afc5b7b8db", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-short-p8.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -48,10 +48,11 @@ testus2_cst(unsigned short x, vector unsigned short v)\n    return vec_insert(x, v, 12);\n }\n \n-/* { dg-final { scan-assembler-times {\\mlhz\\M|\\mlvx\\M|\\mlxv\\M|\\mlxvw4x\\M} 8 } } */\n-/* stores.. 2 each per variable tests, 1 each per cst test. */\n-/* { dg-final { scan-assembler-times {\\msthx\\M|\\mstvx\\M|\\msth\\M|\\mstxvw4x\\M} 12 } } */\n+/* { dg-final { scan-assembler-times {\\mlhz\\M|\\mlvx\\M|\\mlxv\\M|\\mlxvw4x\\M} 8 { target le } } } */\n+/* { dg-final { scan-assembler-times {\\mlhz\\M|\\mlvx\\M|\\mlxv\\M|\\mlxvw4x\\M} 4 { target be } } } */\n+/* stores.. 0 per variable tests, 1 each per cst test. */\n+/* { dg-final { scan-assembler-times {\\msthx\\M|\\mstvx\\M|\\msth\\M|\\mstxvw4x\\M} 4 } } */\n \n /* { dg-final { scan-assembler-times {\\mlvehx\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 } } */\n "}, {"sha": "55778bda3a518b5666363e6a346af32f67006865", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-short-p9.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -48,11 +48,11 @@ testus2_cst(unsigned short x, vector unsigned short v)\n    return vec_insert(x, v, 12);\n }\n \n-/* { dg-final { scan-assembler-times {\\mmtvsrwz\\M} 4 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mvinserth\\M} 4 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mmtvsrwz\\M} 8 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mvinserth\\M} 8 { target lp64 } } } */\n \n-/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 4 { target lp64 }} } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 0 } } */\n+/* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 0 { target lp64 }} } */\n \n /* -m32 uses sth/lvehx as part of the sequence. */\n /* { dg-final { scan-assembler-times {\\msth\\M} 8 { target ilp32 }} } */"}, {"sha": "06da47b77585851564a7a5b14c4c7d08a6640c57", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251.p8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p8.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power8 -maltivec\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+#include \"pr79251.h\"\n+\n+TEST_VEC_INSERT_ALL (test)\n+\n+/* { dg-final { scan-assembler-not {\\mstxw\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlvsl\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mlvsr\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M} 7 } } */\n+"}, {"sha": "6fffb7eb0985cdd9df412afd751469ce90ac6455", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-builtin-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a8ef8ef2ac077b393687624b09db6ab31c7746/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c?ref=e3a8ef8ef2ac077b393687624b09db6ab31c7746", "patch": "@@ -193,7 +193,7 @@ vector unsigned __int128 splat_uint128 (unsigned __int128 x) { return vec_splats\n /* { dg-final { scan-assembler-times {\\mrldic\\M} 0  { target { be && ilp32 } } } } */\n /* { dg-final { scan-assembler-times {\\mrldic\\M} 64 { target { be && lp64 } } } } */\n /* { dg-final { scan-assembler-times {\\mrldic\\M} 64 { target le } } } */\n-/* { dg-final { scan-assembler-times \"xxpermdi\" 4 { target be } } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 11 { target be } } } */\n /* { dg-final { scan-assembler-times \"xxpermdi\" 6 { target le } } } */\n /* { dg-final { scan-assembler-times \"vspltisb\" 2 } } */\n /* { dg-final { scan-assembler-times \"vspltish\" 2 } } */"}]}