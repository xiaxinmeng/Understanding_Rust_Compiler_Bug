{"sha": "78cabff8bd87840ecc941ae40f19848b3082783e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhjYWJmZjhiZDg3ODQwZWNjOTQxYWU0MGYxOTg0OGIzMDgyNzgzZQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-06-06T21:10:59Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-06-06T21:10:59Z"}, "message": "pa.h (ASM_OUTPUT_SKIP, [...]): Cast `SIZE' and `ALIGNED' parameters to unsigned HOST_WIDE_INT.\n\n\t* pa.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_ALIGNED_COMMON,\n\tASM_OUTPUT_ALIGNED_LOCAL): Cast `SIZE' and `ALIGNED' parameters to\n\tunsigned HOST_WIDE_INT.\n\t* pa-pro-end.h (ASM_OUTPUT_ALIGNED_COMMOM, ASM_OUTPUT_ALIGNED_LOCAL):\n\tLikewise.\n\t* pa64-hpux.h (ASM_OUTPUT_ALIGNED_COMMON, ASM_OUTPUT_ALIGNED_LOCAL):\n\tLikewise.\n\nFrom-SVN: r67570", "tree": {"sha": "b7cc7e2c6fc9589e142ad1c8e39976785f2ab142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7cc7e2c6fc9589e142ad1c8e39976785f2ab142"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78cabff8bd87840ecc941ae40f19848b3082783e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78cabff8bd87840ecc941ae40f19848b3082783e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78cabff8bd87840ecc941ae40f19848b3082783e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78cabff8bd87840ecc941ae40f19848b3082783e/comments", "author": null, "committer": null, "parents": [{"sha": "67b1fbb94e86232b063a7da341a23b7e54fee4b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b1fbb94e86232b063a7da341a23b7e54fee4b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b1fbb94e86232b063a7da341a23b7e54fee4b5"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "781d9653d65d98ee77b868662ee25cfe3af9eccc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78cabff8bd87840ecc941ae40f19848b3082783e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78cabff8bd87840ecc941ae40f19848b3082783e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78cabff8bd87840ecc941ae40f19848b3082783e", "patch": "@@ -1,3 +1,13 @@\n+2003-06-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_ALIGNED_COMMON,\n+\tASM_OUTPUT_ALIGNED_LOCAL): Cast `SIZE' and `ALIGNED' parameters to\n+\tunsigned HOST_WIDE_INT.\n+\t* pa-pro-end.h (ASM_OUTPUT_ALIGNED_COMMOM, ASM_OUTPUT_ALIGNED_LOCAL):\n+\tLikewise.\n+\t* pa64-hpux.h (ASM_OUTPUT_ALIGNED_COMMON, ASM_OUTPUT_ALIGNED_LOCAL):\n+\tLikewise.\n+\n 2003-06-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* doc/install.texi (Prerequisites): New section documenting"}, {"sha": "e6322e532a587f9976c23be172b8b61126cd3e48", "filename": "gcc/config/pa/pa-pro-end.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78cabff8bd87840ecc941ae40f19848b3082783e/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78cabff8bd87840ecc941ae40f19848b3082783e/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h?ref=78cabff8bd87840ecc941ae40f19848b3082783e", "patch": "@@ -64,7 +64,8 @@ Boston, MA 02111-1307, USA.  */\n { bss_section ();\t\t\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n-\t   MAX ((HOST_WIDE_INT)(SIZE), (HOST_WIDE_INT)((ALIGNED) / BITS_PER_UNIT)));}\n+\t   MAX ((unsigned HOST_WIDE_INT)(SIZE),\t\t\t\t\\\n+\t\t((unsigned HOST_WIDE_INT)(ALIGNED) / BITS_PER_UNIT)));}\n \n /* This says how to output an assembler line to define a local common symbol\n    with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n@@ -74,4 +75,5 @@ Boston, MA 02111-1307, USA.  */\n { bss_section ();\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.align %d\\n\", ((ALIGNED) / BITS_PER_UNIT));\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE));}\n+  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\\\n+\t   (unsigned HOST_WIDE_INT)(SIZE));}"}, {"sha": "8a188ffc53851c4952b5bde05b4648ca34b43fd2", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78cabff8bd87840ecc941ae40f19848b3082783e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78cabff8bd87840ecc941ae40f19848b3082783e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=78cabff8bd87840ecc941ae40f19848b3082783e", "patch": "@@ -1755,7 +1755,8 @@ do { \t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.align %d\\n\", (1<<(LOG)))\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.blockz \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.blockz \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n+\t   (unsigned HOST_WIDE_INT)(SIZE))\n \n /* This says how to output an assembler line to define a global common symbol\n    with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n@@ -1764,7 +1765,8 @@ do { \t\t\t\t\t\t\t\t\t\\\n { bss_section ();\t\t\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n-\t   MAX ((HOST_WIDE_INT)(SIZE), (HOST_WIDE_INT)((ALIGNED) / BITS_PER_UNIT)));}\n+\t   MAX ((unsigned HOST_WIDE_INT)(SIZE),\t\t\t\t\\\n+\t\t((unsigned HOST_WIDE_INT)(ALIGNED) / BITS_PER_UNIT)));}\n \n /* This says how to output an assembler line to define a local common symbol\n    with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n@@ -1774,7 +1776,7 @@ do { \t\t\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.align %d\\n\", ((ALIGNED) / BITS_PER_UNIT));\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n   fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\\\n-\t   (SIZE));}\n+\t   (unsigned HOST_WIDE_INT)(SIZE));}\n   \n #define ASM_PN_FORMAT \"%s___%lu\"\n "}, {"sha": "bd652c982c4664a3a6611d5405fe0596e17cbd6e", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78cabff8bd87840ecc941ae40f19848b3082783e/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78cabff8bd87840ecc941ae40f19848b3082783e/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=78cabff8bd87840ecc941ae40f19848b3082783e", "patch": "@@ -141,7 +141,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   bss_section ();\t\t\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n-\t   MAX ((SIZE), ((ALIGN) / BITS_PER_UNIT)));\t\t\t\\\n+\t   MAX ((unsigned HOST_WIDE_INT)(SIZE),\t\t\t\t\\\n+\t\t((unsigned HOST_WIDE_INT)(ALIGN) / BITS_PER_UNIT)));\t\\\n } while (0)\n \n #undef ASM_OUTPUT_ALIGNED_LOCAL\n@@ -150,7 +151,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   bss_section ();\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.align %d\\n\", ((ALIGN) / BITS_PER_UNIT));\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE));\\\n+  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\\\n+\t   (unsigned HOST_WIDE_INT)(SIZE));\t\t\t\t\\\n } while (0)\n \n /* The define in pa.h doesn't work with the alias attribute.  The"}]}