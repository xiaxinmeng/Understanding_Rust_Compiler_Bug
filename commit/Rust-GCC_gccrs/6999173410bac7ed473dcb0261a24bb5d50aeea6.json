{"sha": "6999173410bac7ed473dcb0261a24bb5d50aeea6", "node_id": "C_kwDOANBUbNoAKDY5OTkxNzM0MTBiYWM3ZWQ0NzNkY2IwMjYxYTI0YmI1ZDUwYWVlYTY", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2022-04-08T18:28:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-18T08:41:08Z"}, "message": "[Ada] arm-qnx-7.1: stack-checking and sigtramp implementation\n\nRewrite and base on VxWorks RTP implementation.\n\ngcc/ada/\n\n\t* sigtramp-arm-qnx.c: Rewrite.", "tree": {"sha": "1d53a2d5afdba66e125515af2f77e63370d9ce77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d53a2d5afdba66e125515af2f77e63370d9ce77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6999173410bac7ed473dcb0261a24bb5d50aeea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6999173410bac7ed473dcb0261a24bb5d50aeea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6999173410bac7ed473dcb0261a24bb5d50aeea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6999173410bac7ed473dcb0261a24bb5d50aeea6/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c9b82bc17e957c621bfb58e33801f956c7c31c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c9b82bc17e957c621bfb58e33801f956c7c31c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c9b82bc17e957c621bfb58e33801f956c7c31c"}], "stats": {"total": 79, "additions": 36, "deletions": 43}, "files": [{"sha": "24a3b64dbf17cdeacfd267d5eff84386f684593a", "filename": "gcc/ada/sigtramp-arm-qnx.c", "status": "modified", "additions": 36, "deletions": 43, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6999173410bac7ed473dcb0261a24bb5d50aeea6/gcc%2Fada%2Fsigtramp-arm-qnx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6999173410bac7ed473dcb0261a24bb5d50aeea6/gcc%2Fada%2Fsigtramp-arm-qnx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-arm-qnx.c?ref=6999173410bac7ed473dcb0261a24bb5d50aeea6", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                         Asm Implementation File                          *\n  *                                                                          *\n- *           Copyright (C) 2015-2022, Free Software Foundation, Inc.        *\n+ *         Copyright (C) 2011-2022, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -33,49 +33,44 @@\n  * ARM-QNX version of the __gnat_sigtramp service *\n  **************************************************/\n \n+#include <signal.h>\n #include <ucontext.h>\n \n #include \"sigtramp.h\"\n /* See sigtramp.h for a general explanation of functionality.  */\n \n-/* ----------------------\n-   -- General comments --\n-   ----------------------\n+/* -------------------------------------------\n+   -- Prototypes for our internal asm stubs --\n+   -------------------------------------------\n \n-   Stubs are generated from toplevel asms,\n-   The general idea is to establish CFA as the sigcontext\n-   and state where to find the registers as offsets from there.\n+   Eventhough our symbols will remain local, the prototype claims \"extern\"\n+   and not \"static\" to prevent compiler complaints about a symbol used but\n+   never defined.  */\n \n-   Note that the registers we \"restore\" here are those to which we have\n-   direct access through the system sigcontext structure, which includes\n-   only a partial set of the non-volatiles ABI-wise.  */\n+/* sigtramp stub providing ARM unwinding info for common registers.  */\n \n-/* -----------------------------------------\n-   -- Protypes for our internal asm stubs --\n-   -----------------------------------------\n-\n-   The registers are expected to be at SIGCONTEXT + 12 (reference the\n-   sicontext structure in asm/sigcontext.h which describes the first\n-   3 * 4byte fields.)  Even though our symbols will remain local, the\n-   prototype claims \"extern\" and not \"static\" to prevent compiler complaints\n-   about a symbol used but never defined.  */\n+extern void __gnat_sigtramp_common\n+(int signo, void *siginfo, void *sigcontext,\n+ __sigtramphandler_t * handler, void * sc_pregs);\n \n-/* sigtramp stub providing unwind info for common registers.  */\n+/* -------------------------------------\n+   -- Common interface implementation --\n+   -------------------------------------\n \n-extern void __gnat_sigtramp_common\n-  (int signo, void *siginfo, void *sigcontext,\n-   __sigtramphandler_t * handler);\n+   We enforce optimization to minimize the overhead of the extra layer.  */\n \n void __gnat_sigtramp (int signo, void *si, void *sc,\n-                      __sigtramphandler_t * handler)\n+\t\t      __sigtramphandler_t * handler)\n      __attribute__((optimize(2)));\n \n-void __gnat_sigtramp (int signo, void *si, void *ucontext,\n-                      __sigtramphandler_t * handler)\n+void __gnat_sigtramp (int signo, void *si, void *sc,\n+\t\t      __sigtramphandler_t * handler)\n {\n-  struct sigcontext *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n+  mcontext_t *mcontext = &((ucontext_t *) sc)->uc_mcontext;\n \n-  __gnat_sigtramp_common (signo, si, mcontext, handler);\n+  /* Pass MCONTEXT in the fifth position so that the assembly code can find\n+     it at the same stack location as SC_PREGS.  */\n+  __gnat_sigtramp_common (signo, si, mcontext, handler, &mcontext->cpu);\n }\n \n /* asm string construction helpers.  */\n@@ -98,27 +93,25 @@ void __gnat_sigtramp (int signo, void *si, void *ucontext,\n /* Trampoline body block\n    ---------------------  */\n \n+/* The 5 arguments passed to __gnat_sigtramp_common are located in:\n+   - r0-r2: arguments to pass on to the actual handler\n+   - r3: the actual handler\n+   - sp: the address of the reg set to restore\n+   All we have to do then is to instruct the unwinder to restore the registers\n+   from the value in VSP. Unwinder instructions are executed backwards, so we\n+   1- instruct to pop r2 from the VSP (.save {r2})\n+   2- move the VSP to the address pointed to by r2 (.movsp r2)\n+   3- restore all registers from there. (.save {r0-r15})\n+   Once the unwinding instructions are set, we just need to call the handler\n+   as r0-r2 are already properly set.\n+*/\n #define SIGTRAMP_BODY \\\n CR(\"\") \\\n-TCR(\"# Allocate frame and also save r2 which is the argument register\") \\\n-TCR(\"# containing the sigcontext, so that we can restore it during\") \\\n-TCR(\"# unwinding and thereby load the rest of the desired context.\") \\\n-TCR(\"stmfd\tsp!, {r2, r3, lr}\") \\\n-TCR(\"# The unwinder undo's these operations in reverse order so starting\") \\\n-TCR(\"# from bottom, restore r2 from the current vsp location, move r2 into\") \\\n-TCR(\"# the vsp, add 12 bytes to get the start of the register save area\") \\\n-TCR(\"# then restore the 15 general purpose registers of the frame which\") \\\n-TCR(\"# raised the signal.\") \\\n TCR(\".save {r0-r15}\") \\\n-TCR(\".pad #12\") \\\n TCR(\".movsp r2\") \\\n TCR(\".save {r2}\") \\\n-TCR(\"# Call the real handler. The signo, siginfo and sigcontext\") \\\n-TCR(\"# arguments are the same as those we received in r0, r1 and r2.\") \\\n TCR(\"blx\tr3\") \\\n-TCR(\"# Restore our callee-saved items, release our frame and return\") \\\n-TCR(\"# (should never get here!).\") \\\n-TCR(\"ldmfd\tsp, {r2, r3, pc}\")\n+TCR(\"# No return here.\")\n \n /* Symbol definition block\n    -----------------------  */"}]}