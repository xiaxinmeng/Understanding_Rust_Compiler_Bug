{"sha": "eefe4e49f4727e475e11e29c45b31736cc1963f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVmZTRlNDlmNDcyN2U0NzVlMTFlMjljNDViMzE3MzZjYzE5NjNmNg==", "commit": {"author": {"name": "Hale Wang", "email": "hale.wang@arm.com", "date": "2015-04-22T07:21:35Z"}, "committer": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2015-04-22T07:21:35Z"}, "message": "re PR rtl-optimization/64818 (User specified register don't work correctly in inline-asm operands.)\n\ngcc/ChangeLog:\n2015-04-22  Hale Wang  <hale.wang@arm.com>\n            Terry Guo  <terry.guo@arm.com>\n\n       PR rtl-optimization/64818\n       * combine.c (can_combine_p): Don't combine user-specified\n       register if it is in an asm input.\n\ngcc/testsuite/ChangeLog\n2015-04-22  Hale Wang  <hale.wang@arm.com>\n            Terry Guo  <terry.guo@arm.com>\n\n       PR rtl-optimization/64818\n       * gcc.target/arm/pr64818.c: New test.\n\nCo-Authored-By: Terry Guo <terry.guo@arm.com>\n\nFrom-SVN: r222306", "tree": {"sha": "142bbcbbb9752a567f6fbc46932fb24bc1b4cb76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/142bbcbbb9752a567f6fbc46932fb24bc1b4cb76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eefe4e49f4727e475e11e29c45b31736cc1963f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefe4e49f4727e475e11e29c45b31736cc1963f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eefe4e49f4727e475e11e29c45b31736cc1963f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefe4e49f4727e475e11e29c45b31736cc1963f6/comments", "author": null, "committer": null, "parents": [{"sha": "5a33401eabe208e602a94bbb1921ec1b19b1f185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a33401eabe208e602a94bbb1921ec1b19b1f185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a33401eabe208e602a94bbb1921ec1b19b1f185"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "2755252c291a2470633d2c1b38b5ae67fcfda554", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe4e49f4727e475e11e29c45b31736cc1963f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe4e49f4727e475e11e29c45b31736cc1963f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eefe4e49f4727e475e11e29c45b31736cc1963f6", "patch": "@@ -1,3 +1,10 @@\n+2015-04-22  Hale Wang  <hale.wang@arm.com>\n+\t    Terry Guo  <terry.guo@arm.com>\n+\n+\tPR rtl-optimization/64818\n+\t* combine.c (can_combine_p): Don't combine user-specified\n+\tregister if it is in an asm input.\n+\n 2015-04-21  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65076"}, {"sha": "6cd55dd4432791c5e039df1c6f08f6d7613e8d1c", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe4e49f4727e475e11e29c45b31736cc1963f6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe4e49f4727e475e11e29c45b31736cc1963f6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=eefe4e49f4727e475e11e29c45b31736cc1963f6", "patch": "@@ -1910,6 +1910,15 @@ can_combine_p (rtx_insn *insn, rtx_insn *i3, rtx_insn *pred ATTRIBUTE_UNUSED,\n   set = expand_field_assignment (set);\n   src = SET_SRC (set), dest = SET_DEST (set);\n \n+  /* Do not eliminate user-specified register if it is in an\n+     asm input because we may break the register asm usage defined\n+     in GCC manual if allow to do so.\n+     Be aware that this may cover more cases than we expect but this\n+     should be harmless.  */\n+  if (REG_P (dest) && REG_USERVAR_P (dest) && HARD_REGISTER_P (dest)\n+      && extract_asm_operands (PATTERN (i3)))\n+    return 0;\n+\n   /* Don't eliminate a store in the stack pointer.  */\n   if (dest == stack_pointer_rtx\n       /* Don't combine with an insn that sets a register to itself if it has"}, {"sha": "fd3f7006a893fb9fc1a97679c0b63884552db23a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe4e49f4727e475e11e29c45b31736cc1963f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe4e49f4727e475e11e29c45b31736cc1963f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eefe4e49f4727e475e11e29c45b31736cc1963f6", "patch": "@@ -1,3 +1,9 @@\n+2015-04-22  Hale Wang  <hale.wang@arm.com>\n+\t    Terry Guo  <terry.guo@arm.com>\n+\n+\tPR rtl-optimization/64818\n+\t* gcc.target/arm/pr64818.c: New test.\n+\n 2015-04-21 Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65076"}, {"sha": "bddd8462c698adb15c50913b6ceffadc6f64a876", "filename": "gcc/testsuite/gcc.target/arm/pr64818.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe4e49f4727e475e11e29c45b31736cc1963f6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64818.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe4e49f4727e475e11e29c45b31736cc1963f6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64818.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64818.c?ref=eefe4e49f4727e475e11e29c45b31736cc1963f6", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+char temp[16];\n+extern int foo1 (void);\n+\n+void foo (void)\n+{\n+  int i;\n+  int len;\n+\n+  while (1)\n+  {\n+    len = foo1 ();\n+    register int a asm (\"r0\") = 5;\n+    register char *b asm (\"r1\") = temp;\n+    register int c asm (\"r2\") = len;\n+    asm volatile (\"mov %[r0], %[r0]\\n  mov %[r1], %[r1]\\n  mov %[r2], %[r2]\\n\"\n+\t\t   : \"+m\"(*b)\n+\t\t   : [r0]\"r\"(a), [r1]\"r\"(b), [r2]\"r\"(c));\n+\n+    for (i = 0; i < len; i++)\n+    {\n+      if (temp[i] == 10)\n+      return;\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler \"\\[\\\\t \\]+mov\\ r1,\\ r1\" } } */"}]}