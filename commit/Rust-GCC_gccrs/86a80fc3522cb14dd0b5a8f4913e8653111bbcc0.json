{"sha": "86a80fc3522cb14dd0b5a8f4913e8653111bbcc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZhODBmYzM1MjJjYjE0ZGQwYjVhOGY0OTEzZTg2NTMxMTFiYmNjMA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-04-21T15:33:53Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-21T15:33:53Z"}, "message": "2004-04-21  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/DirectByteBufferImpl.java\n\t(shiftDown): Made static, give address as argument and\n\tprovide a convenience method that overwrites shiftDown in\n\tByteBufferImpl and calls the native shiftDown.\n\t* java/nio/MappedByteBufferImpl.java\n\t(): Use optimized method in DirectByteBufferImpl.\n\t* java/nio/natDirectByteBufferImpl.cc\n\t(shiftDown): Changed method signature. Removed usage of array_offset.\n\nFrom-SVN: r80967", "tree": {"sha": "5fa0cc964f6d61e0eb5bd8fc06169c322bd63729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fa0cc964f6d61e0eb5bd8fc06169c322bd63729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0/comments", "author": null, "committer": null, "parents": [{"sha": "f9da97f03ce8200d7ad3893ea0a5a181b92fd185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9da97f03ce8200d7ad3893ea0a5a181b92fd185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9da97f03ce8200d7ad3893ea0a5a181b92fd185"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "56bcc3278645bdd9fab2939df2ede30f51ea5740", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=86a80fc3522cb14dd0b5a8f4913e8653111bbcc0", "patch": "@@ -1,3 +1,14 @@\n+2004-04-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/DirectByteBufferImpl.java\n+\t(shiftDown): Made static, give address as argument and\n+\tprovide a convenience method that overwrites shiftDown in\n+\tByteBufferImpl and calls the native shiftDown.\n+\t* java/nio/MappedByteBufferImpl.java\n+\t(): Use optimized method in DirectByteBufferImpl.\n+\t* java/nio/natDirectByteBufferImpl.cc\n+\t(shiftDown): Changed method signature. Removed usage of array_offset.\n+\n 2004-04-21  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/natPlainSocketImplPosix.cc"}, {"sha": "be0fc52c07d7d7fc90bffbb15200279e46138dd2", "filename": "libjava/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=86a80fc3522cb14dd0b5a8f4913e8653111bbcc0", "patch": "@@ -136,15 +136,20 @@ public ByteBuffer put (int index, byte value)\n     return this;\n   }\n   \n-  native void shiftDown (int dst_offset, int src_offset, int count);\n+  static native void shiftDown(RawData address, int dst_offset, int src_offset, int count);\n \n+  void shiftDown(int dst_offset, int src_offset, int count)\n+  {\n+    shiftDown(address, dst_offset, src_offset, count);\n+  }\n+  \n   public ByteBuffer compact ()\n   {\n     int pos = position();\n     if (pos > 0)\n       {\n \tint count = remaining();\n-\tshiftDown(0, pos, count);\n+\tshiftDown(address, 0, pos, count);\n \tposition(count);\n \tlimit(capacity());\n       }"}, {"sha": "5932c99f6d02fd5cd929c5236854e38c54fc28ee", "filename": "libjava/java/nio/MappedByteBufferImpl.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java?ref=86a80fc3522cb14dd0b5a8f4913e8653111bbcc0", "patch": "@@ -121,7 +121,8 @@ public ByteBuffer compact ()\n     if (pos > 0)\n       {\n \tint count = remaining();\n-\tshiftDown(0, pos, count);\n+\t// Call shiftDown method optimized for direct buffers.\n+\tDirectByteBufferImpl.shiftDown(address, 0, pos, count);\n \tposition(count);\n \tlimit(capacity());\n       }"}, {"sha": "88f53fc2bea844a06d461cdf8cb15c011e0c1456", "filename": "libjava/java/nio/natDirectByteBufferImpl.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0/libjava%2Fjava%2Fnio%2FnatDirectByteBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86a80fc3522cb14dd0b5a8f4913e8653111bbcc0/libjava%2Fjava%2Fnio%2FnatDirectByteBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FnatDirectByteBufferImpl.cc?ref=86a80fc3522cb14dd0b5a8f4913e8653111bbcc0", "patch": "@@ -65,9 +65,9 @@ java::nio::DirectByteBufferImpl::adjustAddress (RawData* address, jint offset)\n \n void\n java::nio::DirectByteBufferImpl::shiftDown\n-(jint dst_offset, jint src_offset, jint count)\n+(RawData* address, jint dst_offset, jint src_offset, jint count)\n {\n-  jbyte* dst = reinterpret_cast<jbyte*> (address) + array_offset + dst_offset;\n-  jbyte* src = reinterpret_cast<jbyte*> (address) + array_offset + src_offset;\n+  jbyte* dst = reinterpret_cast<jbyte*> (address) + dst_offset;\n+  jbyte* src = reinterpret_cast<jbyte*> (address) + src_offset;\n   ::memmove(dst, src, count);\n }"}]}