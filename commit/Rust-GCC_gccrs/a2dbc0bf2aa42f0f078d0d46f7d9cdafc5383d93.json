{"sha": "a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJkYmMwYmYyYWE0MmYwZjA3OGQwZDQ2ZjdkOWNkYWZjNTM4M2Q5Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-06-06T13:36:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-06-06T13:36:27Z"}, "message": "Fix tests that fail in C++2a mode\n\nThe GNU extension that allows using the wrong allocator type with a\ncontainer is disabled for C++2a mode, because the standard now requires\na diagnostic. Fix the tests that fail when -std=gnu++2a is used.\n\nAlso remove some reundant tests that are duplicates of another test\nexcept for a target specifier of c++11. Those tests previously set\n-std=gnu++11 explicitly but that was replaced globally with a target\nspecifier. These tests existed to verify that explicit instantiation\nworked for both C++98 and C++11 modes, but now do nothing because both\ncopies of the test use -std=gnu++14 by default. Instead of duplicating\nthe test we should be regularly running the whole testsuite with\ndifferent -std options.\n\n\t* testsuite/23_containers/deque/requirements/explicit_instantiation/\n\t1_c++0x.cc: Remove redundant test.\n\t* testsuite/23_containers/deque/requirements/explicit_instantiation/\n\t2.cc: Use target selector instead of preprocessor condition.\n\t* testsuite/23_containers/deque/requirements/explicit_instantiation/\n\t3.cc: Do not run test for C++2a.\n\t* testsuite/23_containers/forward_list/requirements/\n\texplicit_instantiation/3.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/\n\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n\tfor C++2a.\n\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n\t1_c++0x.cc: Remove redundant test.\n\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n\t2.cc: Use target selector instead of preprocessor condition.\n\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n\t3.cc: Do not run test for C++2a.\n\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n\t5.cc: Do not test allocator rebinding extension for C++2a.\n\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n\t1_c++0x.cc: Remove redundant test.\n\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n\t2.cc: Adjust comment.\n\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n\t3.cc: Do not run test for C++2a.\n\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n\t5.cc: Do not test allocator rebinding extension for C++2a.\n\t* testsuite/23_containers/multimap/requirements/explicit_instantiation/\n\t1_c++0x.cc: Remove redundant test.\n\t* testsuite/23_containers/multimap/requirements/explicit_instantiation/\n\t3.cc: Do not run test for C++2a.\n\t* testsuite/23_containers/multimap/requirements/explicit_instantiation/\n\t5.cc: Do not test allocator rebinding extension for C++2a.\n\t* testsuite/23_containers/multiset/requirements/explicit_instantiation/\n\t3.cc: Do not run test for C++2a.\n\t* testsuite/23_containers/multiset/requirements/explicit_instantiation/\n\t5.cc: Do not test allocator rebinding extension for C++2a.\n\t* testsuite/23_containers/set/requirements/explicit_instantiation/3.cc:\n\tDo not run test for C++2a.\n\t* testsuite/23_containers/set/requirements/explicit_instantiation/\n\t1_c++0x.cc: Remove redundant test.\n\t* testsuite/23_containers/set/requirements/explicit_instantiation/5.cc:\n\tDo not test allocator rebinding extension for C++2a.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation/3.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n\tfor C++2a.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation/3.cc: Do not run test for C++2a.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n\tfor C++2a.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation/3.cc: Do not run test for C++2a.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n\tfor C++2a.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation/3.cc: Do not run test for C++2a.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n\tfor C++2a.\n\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n\t2.cc: Remove redundant test.\n\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n\t3.cc: Do not run test for C++2a.\n\t* testsuite/23_containers/vector/requirements/explicit_instantiation/\n\t3.cc: Likewise.\n\nFrom-SVN: r272001", "tree": {"sha": "1c9ec0bc1230dbc37c3b3cf22c6a47c65b96f370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9ec0bc1230dbc37c3b3cf22c6a47c65b96f370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "209ee62421fdeb177bdac29e670bc9b930bef4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209ee62421fdeb177bdac29e670bc9b930bef4a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209ee62421fdeb177bdac29e670bc9b930bef4a3"}], "stats": {"total": 293, "additions": 113, "deletions": 180}, "files": [{"sha": "afb41cb83a58d02c9037b834a01f9b828e8a974b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -1,5 +1,75 @@\n 2019-06-06  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/23_containers/deque/requirements/explicit_instantiation/\n+\t1_c++0x.cc: Remove redundant test.\n+\t* testsuite/23_containers/deque/requirements/explicit_instantiation/\n+\t2.cc: Use target selector instead of preprocessor condition.\n+\t* testsuite/23_containers/deque/requirements/explicit_instantiation/\n+\t3.cc: Do not run test for C++2a.\n+\t* testsuite/23_containers/forward_list/requirements/\n+\texplicit_instantiation/3.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/\n+\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n+\tfor C++2a.\n+\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n+\t1_c++0x.cc: Remove redundant test.\n+\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n+\t2.cc: Use target selector instead of preprocessor condition.\n+\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n+\t3.cc: Do not run test for C++2a.\n+\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n+\t5.cc: Do not test allocator rebinding extension for C++2a.\n+\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n+\t1_c++0x.cc: Remove redundant test.\n+\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n+\t2.cc: Adjust comment.\n+\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n+\t3.cc: Do not run test for C++2a.\n+\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n+\t5.cc: Do not test allocator rebinding extension for C++2a.\n+\t* testsuite/23_containers/multimap/requirements/explicit_instantiation/\n+\t1_c++0x.cc: Remove redundant test.\n+\t* testsuite/23_containers/multimap/requirements/explicit_instantiation/\n+\t3.cc: Do not run test for C++2a.\n+\t* testsuite/23_containers/multimap/requirements/explicit_instantiation/\n+\t5.cc: Do not test allocator rebinding extension for C++2a.\n+\t* testsuite/23_containers/multiset/requirements/explicit_instantiation/\n+\t3.cc: Do not run test for C++2a.\n+\t* testsuite/23_containers/multiset/requirements/explicit_instantiation/\n+\t5.cc: Do not test allocator rebinding extension for C++2a.\n+\t* testsuite/23_containers/set/requirements/explicit_instantiation/3.cc:\n+\tDo not run test for C++2a.\n+\t* testsuite/23_containers/set/requirements/explicit_instantiation/\n+\t1_c++0x.cc: Remove redundant test.\n+\t* testsuite/23_containers/set/requirements/explicit_instantiation/5.cc:\n+\tDo not test allocator rebinding extension for C++2a.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation/3.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n+\tfor C++2a.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation/3.cc: Do not run test for C++2a.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n+\tfor C++2a.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation/3.cc: Do not run test for C++2a.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n+\tfor C++2a.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation/3.cc: Do not run test for C++2a.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation/5.cc: Do not test allocator rebinding extension\n+\tfor C++2a.\n+\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n+\t2.cc: Remove redundant test.\n+\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n+\t3.cc: Do not run test for C++2a.\n+\t* testsuite/23_containers/vector/requirements/explicit_instantiation/\n+\t3.cc: Likewise.\n+\n \t* include/std/type_traits (is_empty, is_polymorphic, is_final)\n \t(is_abstract, is_aggregate): Remove static_assert.\n \t* testsuite/20_util/is_abstract/incomplete_neg.cc: Check for error"}, {"sha": "83dba98e2ac5392bf439c82cc7578a45a23d6356", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/explicit_instantiation/1_c++0x.cc", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,24 +0,0 @@\n-// { dg-do compile { target c++11 } }\n-\n-// Copyright (C) 2009-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// This file tests explicit instantiation of library containers\n-\n-#include <deque>\n-\n-template class std::deque<int>;"}, {"sha": "c8f8b7985b88a80bc2b404c66c3917dd5b3997e8", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -21,10 +21,8 @@\n #include <deque>\n #include <testsuite_api.h>\n \n-// { dg-do compile }\n+// { dg-do compile { target c++98_only } }\n \n-// N.B. In C++0x mode we cannot instantiate with T == NonDefaultConstructible\n-// because of 23.3.2.1.4\n-#if __cplusplus < 201103L\n+// N.B. Since C++11 we cannot instantiate with T == NonDefaultConstructible\n+// because of [deque.cons] p4: \"Requires: T shall be DefaultConstructible.\"\n template class std::deque<__gnu_test::NonDefaultConstructible>;\n-#endif"}, {"sha": "0ae076876a8b5de49b25af25414f9866ecae913f", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -21,7 +21,8 @@\n #include <deque>\n \n // { dg-do compile }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // libstdc++/21770\n template class std::deque<int, std::allocator<char> >;"}, {"sha": "037fc60a21bcdb122742781476d0536ade3af91e", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -22,7 +22,8 @@\n #include <forward_list>\n \n // { dg-do compile { target c++11 } }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // libstdc++/21770\n template class std::forward_list<int, std::allocator<char> >;"}, {"sha": "0ad9df9ce8defda95b2ed7a5681597caecfeda4b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -25,6 +25,6 @@\n \n // libstdc++/50118\n template class std::forward_list<int, __gnu_test::ExplicitConsAlloc<int>>;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::forward_list<int, __gnu_test::ExplicitConsAlloc<char>>;\n #endif"}, {"sha": "830ceec84d3af083914b4aa7ef2bcac33dd53151", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/1_c++0x.cc", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,24 +0,0 @@\n-// { dg-do compile { target c++11 } }\n-\n-// Copyright (C) 2009-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// This file tests explicit instantiation of library containers\n-\n-#include <list>\n-\n-template class std::list<int>;"}, {"sha": "35818d987216880dd6194bed94c5b9297e3f71a0", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -21,10 +21,8 @@\n #include <list>\n #include <testsuite_api.h>\n \n-// { dg-do compile }\n+// { dg-do compile { target c++98_only } }\n \n-// N.B. In C++0x mode we cannot instantiate with T == NonDefaultConstructible\n-// because of 23.3.4.1.4\n-#if __cplusplus < 201103L\n+// N.B. Since C++11 we cannot instantiate with T == NonDefaultConstructible\n+// because of [list.cons] p4: \"Requires: T shall be DefaultConstructible.\"\n template class std::list<__gnu_test::NonDefaultConstructible>;\n-#endif"}, {"sha": "e40e9b2ec972c6a870855ec22f58c7c5187754d4", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -21,7 +21,8 @@\n #include <list>\n \n // { dg-do compile }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // libstdc++/21770\n template class std::list<int, std::allocator<char> >;"}, {"sha": "82107199df4e6a38d2361f581fb03266c56b3e6c", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -24,6 +24,6 @@\n \n // libstdc++/50118\n template class std::list<int, __gnu_test::ExplicitConsAlloc<int> >;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::list<int, __gnu_test::ExplicitConsAlloc<char> >;\n #endif"}, {"sha": "ea902794fca2c3806ac471249252279771d180e2", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/1_c++0x.cc", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,24 +0,0 @@\n-// { dg-do compile { target c++11 } }\n-\n-// Copyright (C) 2009-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// This file tests explicit instantiation of library containers\n-\n-#include <map>\n-\n-template class std::map<int, double>;"}, {"sha": "6ce727fd9eb1d247a074e8215f3aefb5a828f6be", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -25,5 +25,5 @@\n // { dg-do compile }\n \n // N.B. We cannot instantiate with T == NonDefaultConstructible\n-// because of 23.3.1.2.\n+// because of [map.access] p2: \"mapped_type shall be DefaultConstructible.\"\n template class std::map<__gnu_test::NonDefaultConstructible, double>;"}, {"sha": "8e58ba7e43db4f060300dca5b42b2a1b16cc6586", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -21,7 +21,8 @@\n #include <map>\n \n // { dg-do compile }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // libstdc++/21770\n template class std::map<int, double, std::less<int>, std::allocator<char> >;"}, {"sha": "1793bb08ecbeb5eebb6e86910b2ef6f7a556b87a", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -27,7 +27,7 @@ using __gnu_test::ExplicitConsAlloc;\n // libstdc++/50118\n template class std::map<int, int, std::less<int>,\n \t\t\tExplicitConsAlloc<std::pair<const int, int> > >;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::map<int, int, std::less<int>,\n \t\t\tExplicitConsAlloc<char> >;\n #endif"}, {"sha": "8e1261a63d95ff2f6406001710d30e4c274591b6", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/explicit_instantiation/1_c++0x.cc", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,24 +0,0 @@\n-// { dg-do compile { target c++11 } }\n-\n-// Copyright (C) 2009-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// This file tests explicit instantiation of library containers\n-\n-#include <map>\n-\n-template class std::multimap<int, double>;"}, {"sha": "8b828163e178f23328d797898ac820575ee6888f", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -21,7 +21,8 @@\n #include <map>\n \n // { dg-do compile }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // libstdc++/21770\n template class std::multimap<int, double, std::less<int>, std::allocator<char> >;"}, {"sha": "fb7784550e7471c082623f48d36b969aeaab8555", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -27,7 +27,7 @@ using __gnu_test::ExplicitConsAlloc;\n // libstdc++/50118\n template class std::multimap<int, int, std::less<int>,\n \t\t\t     ExplicitConsAlloc<std::pair<const int, int> > >;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::multimap<int, int, std::less<int>,\n \t\t\t     ExplicitConsAlloc<char> >;\n #endif"}, {"sha": "d6e4b7f306030874b7ce26fe27ec6b5a2fd6a995", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -21,7 +21,8 @@\n #include <set>\n \n // { dg-do compile }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // libstdc++/21770\n template class std::multiset<int, std::less<int>, std::allocator<char> >;"}, {"sha": "899055ba385e581a663ff7a6650ba1ddd4692b0b", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -25,7 +25,7 @@\n // libstdc++/50118\n template class std::multiset<int, std::less<int>,\n \t\t\t     __gnu_test::ExplicitConsAlloc<int> >;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::multiset<int, std::less<int>,\n \t\t\t     __gnu_test::ExplicitConsAlloc<char> >;\n #endif"}, {"sha": "e053f8db420b9b28ec421fcdcacc7184fdbde504", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/explicit_instantiation/1_c++0x.cc", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B0x.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,24 +0,0 @@\n-// { dg-do compile { target c++11 } }\n-\n-// Copyright (C) 2009-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// This file tests explicit instantiation of library containers\n-\n-#include <set>\n-\n-template class std::set<int>;"}, {"sha": "2e8a80e58a003ee5152fcb5f12bb7978cc7e4e0e", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -21,7 +21,8 @@\n #include <set>\n \n // { dg-do compile }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // libstdc++/21770\n template class std::set<int, std::less<int>, std::allocator<char> >;"}, {"sha": "a05c2f856ecd098ac204386d6128cd1f2c6fe785", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -25,7 +25,7 @@\n // libstdc++/50118\n template class std::set<int, std::less<int>,\n \t\t\t__gnu_test::ExplicitConsAlloc<int> >;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::set<int, std::less<int>,\n \t\t\t__gnu_test::ExplicitConsAlloc<char> >;\n #endif"}, {"sha": "bfcb046ae7a72d2409d4cc40918c73337a762004", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++11 } }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // Copyright (C) 2007-2019 Free Software Foundation, Inc.\n //"}, {"sha": "ee91d16804da9f7b49e21b1e737c84873fab6fa1", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -28,7 +28,7 @@ using __gnu_test::ExplicitConsAlloc;\n // libstdc++/50118\n template class std::unordered_map<int, int, std::hash<int>, std::equal_to<int>,\n \t\t\t\t  ExplicitConsAlloc<std::pair<const int, int>>>;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::unordered_map<int, int, std::hash<int>, std::equal_to<int>,\n \t\t\t\t  ExplicitConsAlloc<char>>;\n #endif"}, {"sha": "101449c915b06905b504a2f1478471d29a86d3b0", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++11 } }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // Copyright (C) 2007-2019 Free Software Foundation, Inc.\n //"}, {"sha": "0a5848b008776be3f2d0cf511e903cc993b23396", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -28,7 +28,7 @@ using __gnu_test::ExplicitConsAlloc;\n template class\n   std::unordered_multimap<int, int, std::hash<int>, std::equal_to<int>,\n \t\t\t  ExplicitConsAlloc<std::pair<const int, int>>>;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::unordered_multimap<int, int, std::hash<int>,\n \t\t\t\t       std::equal_to<int>,\n \t\t\t\t       ExplicitConsAlloc<char>>;"}, {"sha": "dc9afeb292e2f8181b68cc1c994f06eaccd64557", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++11 } }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // Copyright (C) 2007-2019 Free Software Foundation, Inc.\n //"}, {"sha": "e9e1bcb244837a6ed3fa3de432772f790b7f44df", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -26,7 +26,7 @@\n // libstdc++/50118\n template class std::unordered_multiset<int, std::hash<int>, std::equal_to<int>,\n \t\t\t\t       __gnu_test::ExplicitConsAlloc<int>>;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::unordered_multiset<int, std::hash<int>, std::equal_to<int>,\n \t\t\t\t       __gnu_test::ExplicitConsAlloc<char>>;\n #endif"}, {"sha": "2f7193493bd828a5a04751a66388221fd417b3af", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++11 } }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // Copyright (C) 2007-2019 Free Software Foundation, Inc.\n //"}, {"sha": "c58b68fca785587a6ff3b40942267f5f7f485ad4", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -26,7 +26,7 @@\n // libstdc++/50118\n template class std::unordered_set<int, std::hash<int>, std::equal_to<int>,\n \t\t\t\t  __gnu_test::ExplicitConsAlloc<int>>;\n-#ifndef __STRICT_ANSI__\n+#if !defined __STRICT_ANSI__ && __cplusplus <= 201703L\n template class std::unordered_set<int, std::hash<int>, std::equal_to<int>,\n \t\t\t\t  __gnu_test::ExplicitConsAlloc<char>>;\n #endif"}, {"sha": "23510b4524eeecf1149338e04e21efd0cbab8403", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/explicit_instantiation/2.cc", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209ee62421fdeb177bdac29e670bc9b930bef4a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F2.cc?ref=209ee62421fdeb177bdac29e670bc9b930bef4a3", "patch": "@@ -1,26 +0,0 @@\n-// Test for Container using non-standard pointer types.\n-\n-// Copyright (C) 2011-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-\n-#include <vector>\n-#include <ext/extptr_allocator.h>\n-\n-// { dg-do compile { target c++11 } }\n-\n-template class std::vector<int, __gnu_cxx::_ExtPtr_allocator<int> >;"}, {"sha": "7ff2037e77fea897728ca26d4235e4e04fe8be36", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -24,7 +24,8 @@\n #include <ext/extptr_allocator.h>\n \n // { dg-do compile }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // libstdc++/21770\n template class std::vector<int, __gnu_cxx::_ExtPtr_allocator<char> >;"}, {"sha": "97582de58f7ed3b8c80005ac2352918406e0cf8f", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/explicit_instantiation/3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93", "patch": "@@ -21,7 +21,8 @@\n #include <vector>\n \n // { dg-do compile }\n-// { dg-skip-if \"no extensions in strict dialects\" { *-*-* } { \"-std=c++*\" } }\n+// The extension that implicitly rebinds allocators is in gnu++98/11/14/17 only\n+// { dg-skip-if \"\" { *-*-* } { \"-std=c++*\" \"-std=gnu++2*\" } }\n \n // libstdc++/21770\n template class std::vector<int, std::allocator<char> >;"}]}