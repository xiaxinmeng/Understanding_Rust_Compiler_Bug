{"sha": "424c83890f0b9ddffa43ce0c89847fa88a39ab63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI0YzgzODkwZjBiOWRkZmZhNDNjZTBjODk4NDdmYTg4YTM5YWI2Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-27T06:17:00Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-27T06:17:00Z"}, "message": "re PR target/37191 (ICE in inline_secondary_memory_needed, at config/i386/i386.c:21849)\n\n\tPR target/37191\n\t* config/i386/sse.md (*vec_extract_v4sf_mem): Avoid combining registers\n\tfrom different units in a single alternative.\n\nFrom-SVN: r180560", "tree": {"sha": "7d02c00e012935cff417f5c1804773aaab79d738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d02c00e012935cff417f5c1804773aaab79d738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/424c83890f0b9ddffa43ce0c89847fa88a39ab63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/424c83890f0b9ddffa43ce0c89847fa88a39ab63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/424c83890f0b9ddffa43ce0c89847fa88a39ab63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/424c83890f0b9ddffa43ce0c89847fa88a39ab63/comments", "author": null, "committer": null, "parents": [{"sha": "f6497cc6b57912a7300bbb429c4292f7d1cf723b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6497cc6b57912a7300bbb429c4292f7d1cf723b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6497cc6b57912a7300bbb429c4292f7d1cf723b"}], "stats": {"total": 139, "additions": 70, "deletions": 69}, "files": [{"sha": "8b8cea787959f5faed9e115ae52313f3e75b0885", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/424c83890f0b9ddffa43ce0c89847fa88a39ab63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/424c83890f0b9ddffa43ce0c89847fa88a39ab63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=424c83890f0b9ddffa43ce0c89847fa88a39ab63", "patch": "@@ -1,3 +1,9 @@\n+2011-08-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/37191\n+\t* config/i386/sse.md (*vec_extract_v4sf_mem): Avoid combining registers\n+\tfrom different units in a single alternative.\n+\n 2011-10-26  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc.c (emit_scc_insn): Force attempt of v9 sequences\n@@ -114,8 +120,7 @@\n 2011-10-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/41844\n-\t* Makefile.in (lto-wrapper): Depend on and link against\n-\topts-common.o.\n+\t* Makefile.in (lto-wrapper): Depend on and link against opts-common.o.\n \t(lto-wrapper.o): Depend on $(OPTS_H) and $(OPTIONS_H).\n \t* lto-wrapper.c (get_options_from_collect_gcc_options): New function.\n \t(run_gcc): Use it.  Filter out language specific options.\n@@ -223,8 +228,7 @@\n 2011-10-25  Dodji Seketeli  <dodji@redhat.com>\n \n \t* input.c (expand_location): Rewrite using\n-\tlinemap_resolve_location and linemap_expand_location.  Add a\n-\tcomment.\n+\tlinemap_resolve_location and linemap_expand_location.  Add a comment.\n \n 2011-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -265,8 +269,8 @@\n \tto MASK_LITTLE_ENDIAN.\n \t* config/sparc/sparc.opt (Mask(LITTLE_ENDIAN)): Delete.\n \n-\t* config/sparc/sparc.md: Only use F, G, and C constraints in FP\n-\tinsns.  Only use D, Y, and Z constraints in vector insns.\n+\t* config/sparc/sparc.md: Only use F, G, and C constraints in FP insns.\n+\tOnly use D, Y, and Z constraints in vector insns.\n \n \t* config/sparc/sparc.md (cpu_feature, enabled): New attributes.\n \t(*movsi_insn_novis3, *movsi_insn_vis3): Consolidate into one pattern\n@@ -343,7 +347,7 @@\n 2011-10-24  Julian Brown  <julian@codesourcery.com>\n \n \t* config/m68k/m68k.c (notice_update_cc): Tighten condition for\n-\tsetting CC_REVERSED for FP comparisons.  \n+\tsetting CC_REVERSED for FP comparisons.\n \n 2011-10-24  Richard Guenther  <rguenther@suse.de>\n \n@@ -396,14 +400,12 @@\n \tfloat and integer regs.\n \t(sparc_register_move_cost): Adjust to account for VIS3 moves.\n \t(sparc_preferred_reload_class): On 32-bit with VIS3 when moving an\n-\tinteger reg to a class containing EXTRA_FP_REGS, constrain to\n-\tFP_REGS.\n+\tinteger reg to a class containing EXTRA_FP_REGS, constrain to FP_REGS.\n \t(sparc_secondary_reload): On 32-bit with VIS3 when moving between\n \tfloat and integer regs we sometimes need a FP_REGS class\n \tintermediate move to satisfy the reload.  When this happens\n \tspecify an extra cost of 2.\n-\t(*movsi_insn): Rename to have \"_novis3\" suffix and add !VIS3\n-\tguard.\n+\t(*movsi_insn): Rename to have \"_novis3\" suffix and add !VIS3 guard.\n \t(*movdi_insn_sp32_v9): Likewise.\n \t(*movdi_insn_sp64): Likewise.\n \t(*movsf_insn): Likewise.\n@@ -429,8 +431,7 @@\n \t(*mov<VM64:mode>_insn_sp32_vis3): New insn.\n \t(VM64 reg<-->reg split): New spliiter for 32-bit.\n \n-\t* config/sparc/sparc.c (sparc_split_regreg_legitimate): New\n-\tfunction.\n+\t* config/sparc/sparc.c (sparc_split_regreg_legitimate): New function.\n \t* config/sparc/sparc-protos.h (sparc_split_regreg_legitimate):\n \tDeclare it.\n \t* config/sparc/sparc.md (DImode reg/reg split): Use it."}, {"sha": "740f8c856ede72baad3e29a6cbbde76e89814f67", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/424c83890f0b9ddffa43ce0c89847fa88a39ab63/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/424c83890f0b9ddffa43ce0c89847fa88a39ab63/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=424c83890f0b9ddffa43ce0c89847fa88a39ab63", "patch": "@@ -3866,6 +3866,62 @@\n   DONE;\n })\n \n+(define_insn_and_split \"*sse4_1_extractps\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,x,x\")\n+\t(vec_select:SF\n+\t  (match_operand:V4SF 1 \"register_operand\" \"x,0,x\")\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n+  \"TARGET_SSE4_1\"\n+  \"@\n+   %vextractps\\t{%2, %1, %0|%0, %1, %2}\n+   #\n+   #\"\n+  \"&& reload_completed && SSE_REG_P (operands[0])\"\n+  [(const_int 0)]\n+{\n+  rtx dest = gen_rtx_REG (V4SFmode, REGNO (operands[0]));\n+  switch (INTVAL (operands[2]))\n+    {\n+    case 1:\n+    case 3:\n+      emit_insn (gen_sse_shufps_v4sf (dest, operands[1], operands[1],\n+\t\t\t\t      operands[2], operands[2],\n+\t\t\t\t      GEN_INT (INTVAL (operands[2]) + 4),\n+\t\t\t\t      GEN_INT (INTVAL (operands[2]) + 4)));\n+      break;\n+    case 2:\n+      emit_insn (gen_vec_interleave_highv4sf (dest, operands[1], operands[1]));\n+      break;\n+    default:\n+      /* 0 should be handled by the *vec_extractv4sf_0 pattern above.  */\n+      gcc_unreachable ();\n+    }\n+  DONE;\n+}\n+  [(set_attr \"isa\" \"*,noavx,avx\")\n+   (set_attr \"type\" \"sselog,*,*\")\n+   (set_attr \"prefix_data16\" \"1,*,*\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"length_immediate\" \"1,*,*\")\n+   (set_attr \"prefix\" \"maybe_vex,*,*\")\n+   (set_attr \"mode\" \"V4SF,*,*\")])\n+\n+(define_insn_and_split \"*vec_extract_v4sf_mem\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x,*r,f\")\n+       (vec_select:SF\n+\t (match_operand:V4SF 1 \"memory_operand\" \"o,o,o\")\n+\t (parallel [(match_operand 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n+  \"TARGET_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  int i = INTVAL (operands[2]);\n+\n+  emit_move_insn (operands[0], adjust_address (operands[1], SFmode, i*4));\n+  DONE;\n+})\n+\n (define_expand \"avx_vextractf128<mode>\"\n   [(match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"\")\n    (match_operand:V_256 1 \"register_operand\" \"\")\n@@ -4044,62 +4100,6 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn_and_split \"*sse4_1_extractps\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,x,x\")\n-\t(vec_select:SF\n-\t  (match_operand:V4SF 1 \"register_operand\" \"x,0,x\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n-  \"TARGET_SSE4_1\"\n-  \"@\n-   %vextractps\\t{%2, %1, %0|%0, %1, %2}\n-   #\n-   #\"\n-  \"&& reload_completed && SSE_REG_P (operands[0])\"\n-  [(const_int 0)]\n-{\n-  rtx dest = gen_rtx_REG (V4SFmode, REGNO (operands[0]));\n-  switch (INTVAL (operands[2]))\n-    {\n-    case 1:\n-    case 3:\n-      emit_insn (gen_sse_shufps_v4sf (dest, operands[1], operands[1],\n-\t\t\t\t      operands[2], operands[2],\n-\t\t\t\t      GEN_INT (INTVAL (operands[2]) + 4),\n-\t\t\t\t      GEN_INT (INTVAL (operands[2]) + 4)));\n-      break;\n-    case 2:\n-      emit_insn (gen_vec_interleave_highv4sf (dest, operands[1], operands[1]));\n-      break;\n-    default:\n-      /* 0 should be handled by the *vec_extractv4sf_0 pattern above.  */\n-      gcc_unreachable ();\n-    }\n-  DONE;\n-}\n-  [(set_attr \"isa\" \"*,noavx,avx\")\n-   (set_attr \"type\" \"sselog,*,*\")\n-   (set_attr \"prefix_data16\" \"1,*,*\")\n-   (set_attr \"prefix_extra\" \"1,*,*\")\n-   (set_attr \"length_immediate\" \"1,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,*,*\")\n-   (set_attr \"mode\" \"V4SF,*,*\")])\n-\n-(define_insn_and_split \"*vec_extract_v4sf_mem\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x*rf\")\n-       (vec_select:SF\n-\t (match_operand:V4SF 1 \"memory_operand\" \"o\")\n-\t (parallel [(match_operand 2 \"const_0_to_3_operand\" \"n\")])))]\n-  \"TARGET_SSE\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-{\n-  int i = INTVAL (operands[2]);\n-\n-  emit_move_insn (operands[0], adjust_address (operands[1], SFmode, i*4));\n-  DONE;\n-})\n-\n ;; Modes handled by vec_extract patterns.\n (define_mode_iterator VEC_EXTRACT_MODE\n   [(V32QI \"TARGET_AVX\") V16QI"}]}