{"sha": "200f4143a27223e207707a0a6204379d45ab4470", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAwZjQxNDNhMjcyMjNlMjA3NzA3YTBhNjIwNDM3OWQ0NWFiNDQ3MA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-11-25T19:32:28Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-11-25T19:32:28Z"}, "message": "re PR libgcj/4583 (problems BigDecimal(double) ctor.)\n\n\tFix for PR libgcj/4583:\n\t* java/math/BigDecimal.java (BigDecimal(double)): Rewrote.\n\t(BigDecimal(String)): Likewise.\n\nFrom-SVN: r47329", "tree": {"sha": "cc9d7bce71c4d9c4aea079e97faf11d867329454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc9d7bce71c4d9c4aea079e97faf11d867329454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/200f4143a27223e207707a0a6204379d45ab4470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200f4143a27223e207707a0a6204379d45ab4470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200f4143a27223e207707a0a6204379d45ab4470", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200f4143a27223e207707a0a6204379d45ab4470/comments", "author": null, "committer": null, "parents": [{"sha": "a021c4736ae35d87c22f33907ca7a416f888b125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a021c4736ae35d87c22f33907ca7a416f888b125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a021c4736ae35d87c22f33907ca7a416f888b125"}], "stats": {"total": 125, "additions": 117, "deletions": 8}, "files": [{"sha": "2a6cd622d293b01bfb0317473c4f232fe2aa8fe1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200f4143a27223e207707a0a6204379d45ab4470/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200f4143a27223e207707a0a6204379d45ab4470/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=200f4143a27223e207707a0a6204379d45ab4470", "patch": "@@ -1,3 +1,9 @@\n+2001-11-25  Tom Tromey  <tromey@redhat.com>\n+\n+\tFix for PR libgcj/4583:\n+\t* java/math/BigDecimal.java (BigDecimal(double)): Rewrote.\n+\t(BigDecimal(String)): Likewise.\n+\n 2001-11-19  Tom Tromey  <tromey@redhat.com>\n \n \t* verify.cc (_Jv_BytecodeVerifier::branch_prepass) [op_iinc]:"}, {"sha": "bf803a2f526c12263d071454160a68f8249010ae", "filename": "libjava/java/math/BigDecimal.java", "status": "modified", "additions": 111, "deletions": 8, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200f4143a27223e207707a0a6204379d45ab4470/libjava%2Fjava%2Fmath%2FBigDecimal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200f4143a27223e207707a0a6204379d45ab4470/libjava%2Fjava%2Fmath%2FBigDecimal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigDecimal.java?ref=200f4143a27223e207707a0a6204379d45ab4470", "patch": "@@ -28,7 +28,8 @@\n \n import java.math.BigInteger;\n \n-public class BigDecimal extends Number implements Comparable {\n+public class BigDecimal extends Number implements Comparable\n+{\n   private BigInteger intVal;\n   private int scale;\n   private static final long serialVersionUID = 6108874887143696463L;\n@@ -63,16 +64,119 @@ public BigDecimal (BigInteger num, int scale) throws NumberFormatException\n \n   public BigDecimal (double num) throws NumberFormatException \n   {\n-    this (Double.toString (num));\n+    if (Double.isInfinite (num) || Double.isNaN (num))\n+      throw new NumberFormatException (\"invalid argument: \" + num);\n+    // Note we can't convert NUM to a String and then use the\n+    // String-based constructor.  The BigDecimal documentation makes\n+    // it clear that the two constructors work differently.\n+\n+    final int mantissaBits = 52;\n+    final int exponentBits = 11;\n+    final long mantMask = (1L << mantissaBits) - 1;\n+    final long expMask = (1L << exponentBits) - 1;\n+\n+    long bits = Double.doubleToLongBits (num);\n+    long mantissa = bits & mantMask;\n+    long exponent = (bits >>> mantissaBits) & expMask;\n+    boolean denormal = exponent == 0;\n+    // Correct the exponent for the bias.\n+    exponent -= denormal ? 1022 : 1023;\n+    // Now correct the exponent to account for the bits to the right\n+    // of the decimal.\n+    exponent -= mantissaBits;\n+    // Ordinary numbers have an implied leading `1' bit.\n+    if (! denormal)\n+      mantissa |= (1L << mantissaBits);\n+\n+    // Shave off factors of 10.\n+    while (exponent < 0 && (mantissa & 1) == 0)\n+      {\n+\t++exponent;\n+\tmantissa >>= 1;\n+      }\n+\n+    intVal = BigInteger.valueOf (bits < 0 ? - mantissa : mantissa);\n+    if (exponent < 0)\n+      {\n+\t// We have MANTISSA * 2 ^ (EXPONENT).\n+\t// Since (1/2)^N == 5^N * 10^-N we can easily convert this\n+\t// into a power of 10.\n+\tscale = (int) (- exponent);\n+\tBigInteger mult = BigInteger.valueOf (5).pow (scale);\n+\tintVal = intVal.multiply (mult);\n+      }\n+    else\n+      {\n+\tintVal = intVal.shiftLeft ((int) exponent);\n+\tscale = 0;\n+      }\n   }\n \n   public BigDecimal (String num) throws NumberFormatException \n   {\n-    int point = num.indexOf('.');\n-    this.intVal = new BigInteger (point == -1 ? num :\n-\t\t\t       num.substring (0, point) + \n-\t\t\t       num.substring (point + 1));\n-    scale = num.length() - (point == -1 ? num.length () : point + 1);\n+    int len = num.length();\n+    int start = 0, point = 0;\n+    int dot = -1;\n+    boolean negative = false;\n+    if (num.charAt(0) == '+')\n+      {\n+\t++start;\n+\t++point;\n+      }\n+    else if (num.charAt(0) == '-')\n+      {\n+\t++start;\n+\t++point;\n+\tnegative = true;\n+      }\n+\n+    while (point < len)\n+      {\n+\tchar c = num.charAt (point);\n+\tif (c == '.')\n+\t  {\n+\t    if (dot >= 0)\n+\t      throw new NumberFormatException (\"multiple `.'s in number\");\n+\t    dot = point;\n+\t  }\n+\telse if (c == 'e' || c == 'E')\n+\t  break;\n+\telse if (Character.digit (c, 10) < 0)\n+\t  throw new NumberFormatException (\"unrecognized character: \" + c);\n+\t++point;\n+      }\n+\n+    String val;\n+    if (dot >= 0)\n+      {\n+\tval = num.substring (start, dot) + num.substring (dot + 1, point);\n+\tscale = point - 1 - dot;\n+      }\n+    else\n+      {\n+\tval = num.substring (start, point);\n+\tscale = 0;\n+      }\n+    if (val.length () == 0)\n+      throw new NumberFormatException (\"no digits seen\");\n+\n+    if (negative)\n+      val = \"-\" + val;\n+    intVal = new BigInteger (val);\n+\n+    // Now parse exponent.\n+    if (point < len)\n+      {\n+\tint exp = Integer.parseInt (num.substring (point + 1));\n+\texp -= scale;\n+\tif (exp > 0)\n+\t  {\n+\t    intVal = intVal.multiply (BigInteger.valueOf (10).pow (exp));\n+\t    scale = 0;\n+\t  }\n+\telse\n+\t  scale = - exp;\n+      }\n   }\n \n   public static BigDecimal valueOf (long val) \n@@ -338,7 +442,6 @@ public BigInteger toBigInteger ()\n       intVal.divide (BigInteger.valueOf (10).pow (scale));\n   }\n \n-\f\n   public int intValue () \n   {\n     return toBigInteger ().intValue ();"}]}