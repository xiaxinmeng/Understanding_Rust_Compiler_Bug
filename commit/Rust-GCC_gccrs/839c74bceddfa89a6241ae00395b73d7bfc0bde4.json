{"sha": "839c74bceddfa89a6241ae00395b73d7bfc0bde4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5Yzc0YmNlZGRmYTg5YTYyNDFhZTAwMzk1YjczZDdiZmMwYmRlNA==", "commit": {"author": {"name": "Cong Hou", "email": "congh@google.com", "date": "2013-07-16T00:03:07Z"}, "committer": {"name": "Cong Hou", "email": "congh@gcc.gnu.org", "date": "2013-07-16T00:03:07Z"}, "message": "tree-vect-data-refs.c (dr_group_sort_cmp): Do not use hash function in compare function for sorting.\n\n2013-07-15  Cong Hou  <congh@google.com>\n\ngcc/\n        * tree-vect-data-refs.c (dr_group_sort_cmp): Do not use hash function in compare function for sorting.\n\ngcc/testsuite/\n\n        * gcc.target/i386/l_fma_float_1.c: Update the instruction to be counted.\n        * gcc.target/i386/l_fma_float_3.c: Likewise.\n        * gcc.target/i386/l_fma_double_1.c: Likewise.\n        * gcc.target/i386/l_fma_double_3.c: Likewise\n\nFrom-SVN: r200968", "tree": {"sha": "0990921efeb0db7b12abecade20eb63e2ea5ebad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0990921efeb0db7b12abecade20eb63e2ea5ebad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/839c74bceddfa89a6241ae00395b73d7bfc0bde4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839c74bceddfa89a6241ae00395b73d7bfc0bde4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839c74bceddfa89a6241ae00395b73d7bfc0bde4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839c74bceddfa89a6241ae00395b73d7bfc0bde4/comments", "author": null, "committer": null, "parents": [{"sha": "ab0e837971e29cc217a6cb2691dfd29a2aa953c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0e837971e29cc217a6cb2691dfd29a2aa953c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0e837971e29cc217a6cb2691dfd29a2aa953c2"}], "stats": {"total": 134, "additions": 109, "deletions": 25}, "files": [{"sha": "8248001bd6db27998353a95801e767f30ff018af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=839c74bceddfa89a6241ae00395b73d7bfc0bde4", "patch": "@@ -1,3 +1,8 @@\n+2013-07-15  Cong Hou  <congh@google.com>\n+\n+\t* tree-vect-data-refs.c (dr_group_sort_cmp): Do not use hash function\n+\tin compare function for sorting.\n+\n 2013-07-15  Peter Bergner <bergner@vnet.ibm.com>\n \n \t* config.gcc (powerpc*-*-*): Install htmintrin.h and htmxlintrin.h."}, {"sha": "2388ed9ee9192225c46403e1f7ca8a439e09a17b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=839c74bceddfa89a6241ae00395b73d7bfc0bde4", "patch": "@@ -1,3 +1,11 @@\n+2013-07-15  Cong Hou  <congh@google.com>\n+\n+\t* gcc.target/i386/l_fma_float_1.c: Update the instruction to be\n+\tcounted.\n+\t* gcc.target/i386/l_fma_float_3.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_1.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_3.c: Likewise.\n+\n 2013-07-15  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* lib/target-supports.exp (check_effective_target_powerpc_htm_ok): New"}, {"sha": "3ceababec10022d676ab3899bb0b3f19c3a4f9a5", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_1.c?ref=839c74bceddfa89a6241ae00395b73d7bfc0bde4", "patch": "@@ -10,9 +10,9 @@ typedef double adouble __attribute__((aligned(sizeof (double))));\n #include \"l_fma_1.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd213pd\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub213pd\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd231pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132pd\" 4  } } */"}, {"sha": "74e3e1c55dffb29ccdc4699bf0e6756843f3c338", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_3.c?ref=839c74bceddfa89a6241ae00395b73d7bfc0bde4", "patch": "@@ -10,9 +10,9 @@ typedef double adouble __attribute__((aligned(sizeof (double))));\n #include \"l_fma_3.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd213pd\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub213pd\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd231pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132pd\" 4  } } */"}, {"sha": "4a7ca95930e010d7a7629f67a1c48607f4c5f7f0", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_1.c?ref=839c74bceddfa89a6241ae00395b73d7bfc0bde4", "patch": "@@ -9,9 +9,9 @@\n #include \"l_fma_1.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd213ps\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub213ps\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd231ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132ps\" 4  } } */"}, {"sha": "f3fa74f98bdae57fd4f3b68e4479918ef609f5ea", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_3.c?ref=839c74bceddfa89a6241ae00395b73d7bfc0bde4", "patch": "@@ -9,9 +9,9 @@\n #include \"l_fma_3.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd213ps\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub213ps\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd231ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132ps\" 4  } } */"}, {"sha": "4e99747b73c062edffc1635a6a206542d6f63e42", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 88, "deletions": 17, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839c74bceddfa89a6241ae00395b73d7bfc0bde4/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=839c74bceddfa89a6241ae00395b73d7bfc0bde4", "patch": "@@ -2311,6 +2311,81 @@ vect_analyze_data_ref_access (struct data_reference *dr)\n   return vect_analyze_group_access (dr);\n }\n \n+\n+\n+/*  A helper function used in the comparator function to sort data\n+    references.  T1 and T2 are two data references to be compared.\n+    The function returns -1, 0, or 1.  */\n+\n+static int\n+compare_tree (tree t1, tree t2)\n+{\n+  int i, cmp;\n+  enum tree_code code;\n+  char tclass;\n+\n+  if (t1 == t2)\n+    return 0;\n+  if (t1 == NULL)\n+    return -1;\n+  if (t2 == NULL)\n+    return 1;\n+\n+\n+  if (TREE_CODE (t1) != TREE_CODE (t2))\n+    return TREE_CODE (t1) < TREE_CODE (t2) ? -1 : 1;\n+\n+  code = TREE_CODE (t1);\n+  switch (code)\n+    {\n+    /* For const values, we can just use hash values for comparisons.  */\n+    case INTEGER_CST:\n+    case REAL_CST:\n+    case FIXED_CST:\n+    case STRING_CST:\n+    case COMPLEX_CST:\n+    case VECTOR_CST:\n+      {\n+\thashval_t h1 = iterative_hash_expr (t1, 0);\n+\thashval_t h2 = iterative_hash_expr (t2, 0);\n+\tif (h1 != h2)\n+\t  return h1 < h2 ? -1 : 1;\n+\tbreak;\n+      }\n+\n+    case SSA_NAME:\n+      cmp = compare_tree (SSA_NAME_VAR (t1), SSA_NAME_VAR (t2));\n+      if (cmp != 0)\n+\treturn cmp;\n+\n+      if (SSA_NAME_VERSION (t1) != SSA_NAME_VERSION (t2))\n+\treturn SSA_NAME_VERSION (t1) < SSA_NAME_VERSION (t2) ? -1 : 1;\n+      break;\n+\n+    default:\n+      tclass = TREE_CODE_CLASS (code);\n+\n+      /* For var-decl, we could compare their UIDs.  */\n+      if (tclass == tcc_declaration)\n+\t{\n+\t  if (DECL_UID (t1) != DECL_UID (t2))\n+\t    return DECL_UID (t1) < DECL_UID (t2) ? -1 : 1;\n+\t  break;\n+\t}\n+\n+      /* For expressions with operands, compare their operands recursively.  */\n+      for (i = TREE_OPERAND_LENGTH (t1) - 1; i >= 0; --i)\n+\t{\n+\t  cmp = compare_tree (TREE_OPERAND (t1, i), TREE_OPERAND (t2, i));\n+\t  if (cmp != 0)\n+\t    return cmp;\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+\n /* Compare two data-references DRA and DRB to group them into chunks\n    suitable for grouping.  */\n \n@@ -2319,7 +2394,6 @@ dr_group_sort_cmp (const void *dra_, const void *drb_)\n {\n   data_reference_p dra = *(data_reference_p *)const_cast<void *>(dra_);\n   data_reference_p drb = *(data_reference_p *)const_cast<void *>(drb_);\n-  hashval_t h1, h2;\n   int cmp;\n \n   /* Stabilize sort.  */\n@@ -2329,19 +2403,17 @@ dr_group_sort_cmp (const void *dra_, const void *drb_)\n   /* Ordering of DRs according to base.  */\n   if (!operand_equal_p (DR_BASE_ADDRESS (dra), DR_BASE_ADDRESS (drb), 0))\n     {\n-      h1 = iterative_hash_expr (DR_BASE_ADDRESS (dra), 0);\n-      h2 = iterative_hash_expr (DR_BASE_ADDRESS (drb), 0);\n-      if (h1 != h2)\n-\treturn h1 < h2 ? -1 : 1;\n+      cmp = compare_tree (DR_BASE_ADDRESS (dra), DR_BASE_ADDRESS (drb));\n+      if (cmp != 0)\n+        return cmp;\n     }\n \n   /* And according to DR_OFFSET.  */\n   if (!dr_equal_offsets_p (dra, drb))\n     {\n-      h1 = iterative_hash_expr (DR_OFFSET (dra), 0);\n-      h2 = iterative_hash_expr (DR_OFFSET (drb), 0);\n-      if (h1 != h2)\n-\treturn h1 < h2 ? -1 : 1;\n+      cmp = compare_tree (DR_OFFSET (dra), DR_OFFSET (drb));\n+      if (cmp != 0)\n+        return cmp;\n     }\n \n   /* Put reads before writes.  */\n@@ -2352,19 +2424,18 @@ dr_group_sort_cmp (const void *dra_, const void *drb_)\n   if (!operand_equal_p (TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dra))),\n \t\t\tTYPE_SIZE_UNIT (TREE_TYPE (DR_REF (drb))), 0))\n     {\n-      h1 = iterative_hash_expr (TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dra))), 0);\n-      h2 = iterative_hash_expr (TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (drb))), 0);\n-      if (h1 != h2)\n-\treturn h1 < h2 ? -1 : 1;\n+      cmp = compare_tree (TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dra))),\n+                          TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (drb))));\n+      if (cmp != 0)\n+        return cmp;\n     }\n \n   /* And after step.  */\n   if (!operand_equal_p (DR_STEP (dra), DR_STEP (drb), 0))\n     {\n-      h1 = iterative_hash_expr (DR_STEP (dra), 0);\n-      h2 = iterative_hash_expr (DR_STEP (drb), 0);\n-      if (h1 != h2)\n-\treturn h1 < h2 ? -1 : 1;\n+      cmp = compare_tree (DR_STEP (dra), DR_STEP (drb));\n+      if (cmp != 0)\n+        return cmp;\n     }\n \n   /* Then sort after DR_INIT.  In case of identical DRs sort after stmt UID.  */"}]}