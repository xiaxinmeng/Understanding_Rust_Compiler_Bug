{"sha": "e9800852067503ed0fe4efbfcac5f172b8596ee6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4MDA4NTIwNjc1MDNlZDBmZTRlZmJmY2FjNWYxNzJiODU5NmVlNg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-11T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-11T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "82290acacbc6d6a85854bdb28e77deb319a72f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82290acacbc6d6a85854bdb28e77deb319a72f2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9800852067503ed0fe4efbfcac5f172b8596ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9800852067503ed0fe4efbfcac5f172b8596ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9800852067503ed0fe4efbfcac5f172b8596ee6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9800852067503ed0fe4efbfcac5f172b8596ee6/comments", "author": null, "committer": null, "parents": [{"sha": "4fa6356be14414957be05bdf5e22037fe1bea283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa6356be14414957be05bdf5e22037fe1bea283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa6356be14414957be05bdf5e22037fe1bea283"}], "stats": {"total": 221, "additions": 220, "deletions": 1}, "files": [{"sha": "f1f3405c7ead8e37e2c3fe1db0699104e2e848c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9800852067503ed0fe4efbfcac5f172b8596ee6", "patch": "@@ -1,3 +1,52 @@\n+2021-03-10  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/99492\n+\t* config/rs6000/aix.h (ADJUST_FIELD_ALIGN): Add check for DCmode.\n+\t* config/rs6000/rs6000.c (rs6000_special_round_type_align): Same.\n+\n+2021-03-10  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99422\n+\t* lra-constraints.c (process_address_1): Don't check unknown\n+\tconstraint, use X for empty constraint.\n+\n+2021-03-10  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vfp_is_call_or_return_candidate):\n+\tFix typo in comment describing \"is_ha\" argument.\n+\n+2021-03-10  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* doc/sourcebuild.texi: Document LRA target selector.\n+\n+2021-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/ux.texi: Add subsection contrasting interactive versus\n+\tbatch usage of GCC.\n+\n+2021-03-10  Joel Hutton  <joel.hutton@arm.com>\n+\n+\tPR target/99102\n+\t* tree-vect-stmts.c (vectorizable_store): Fix scatter store mask\n+\tcheck condition.\n+\t(vectorizable_load): Fix gather load mask check condition.\n+\n+2021-03-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99510\n+\t* tree.c (check_aligned_type): Check that the candidate\n+\thas TYPE_USER_ALIGN set instead of matching with the\n+\toriginal type.\n+\n+2021-03-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (sparc_regmode_natural_size): Return 4 for\n+\tfloat and vector integer modes only if the mode is not larger.\n+\n+2021-03-10  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.h (DWARF_FRAME_REGISTERS): Define.\n+\n 2021-03-09  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \t* ira.c (ira_setup_alts, ira_get_dup_out_num): Process digital"}, {"sha": "f2ed86a869c95f04565b26b4938d5019f24bf0aa", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e9800852067503ed0fe4efbfcac5f172b8596ee6", "patch": "@@ -1 +1 @@\n-20210310\n+20210311"}, {"sha": "2f39282193d5c4ce3ba571d42f51a35da2f847fa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e9800852067503ed0fe4efbfcac5f172b8596ee6", "patch": "@@ -1,3 +1,8 @@\n+2021-03-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Build a TYPE_STUB_DECL\n+\tfor the main variant of an enumeration type declared as volatile.\n+\n 2021-03-09  Mikael Pettersson  <mikpelinux@gmail.com>\n \n \t* raise-gcc.c: On Cygwin include mingw32.h to prevent"}, {"sha": "9ed1624c7951e11c203224224ea99af798e64b49", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=e9800852067503ed0fe4efbfcac5f172b8596ee6", "patch": "@@ -1,3 +1,22 @@\n+2021-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96374\n+\t* engine.cc (exploded_path::feasible_p): Move \"snodes_visited\" and\n+\t\"model\" locals into a new class feasibility_state.  Move heart\n+\tof per-edge processing into\n+\tfeasibility_state::maybe_update_for_edge.\n+\t(feasibility_state::feasibility_state): New.\n+\t(feasibility_state::maybe_update_for_edge): New, based on loop\n+\tbody in exploded_path::feasible_p.\n+\t* exploded-graph.h (class feasibility_state): New.\n+\n+2021-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* supergraph.h\n+\t(callgraph_superedge::dyn_cast_callgraph_superedge): New.\n+\t(call_superedge::dyn_cast_callgraph_superedge): Delete.\n+\t(return_superedge::dyn_cast_callgraph_superedge): Delete.\n+\n 2021-03-02  Martin Liska  <mliska@suse.cz>\n \n \t* diagnostic-manager.cc (diagnostic_manager::emit_saved_diagnostics):"}, {"sha": "06c6dfa5cef8efdbfd7da1da17ee807724e302b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e9800852067503ed0fe4efbfcac5f172b8596ee6", "patch": "@@ -1,3 +1,16 @@\n+2021-03-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99423\n+\t* module.cc (post_load_processing): Assert not gcable.\n+\t(laxy_load_pendings): Extend no-gc region around\n+\tpost_load_processing.\n+\n+2021-03-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99508\n+\t* decl.c (make_rtl_for_nonlocal_decl): Propagate local-extern's\n+\tassembler name to the ns alias.\n+\n 2021-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/99459"}, {"sha": "a78e724de17d1db462593c2e971b0e375d9294af", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e9800852067503ed0fe4efbfcac5f172b8596ee6", "patch": "@@ -1,3 +1,21 @@\n+2021-03-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/99205\n+\t* data.c (gfc_assign_data_value): Reject non-constant character\n+\tlength for lvalue.\n+\t* trans-array.c (gfc_conv_array_initializer): Restrict loop to\n+\telements which are defined to avoid NULL pointer dereference.\n+\n+2021-03-10  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* intrinsic.texi (MIN): Correct 'maximum' to 'minimum'.\n+\n+2021-03-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR fortran/96983\n+\t* trans-intrinsic.c (build_round_expr): Do not implicitly assume\n+\tthat __float128 is the 128-bit floating-point type.\n+\n 2021-03-08  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/49278"}, {"sha": "7ed0052005c277b1499a3e95d6d51d4eb17ea488", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9800852067503ed0fe4efbfcac5f172b8596ee6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9800852067503ed0fe4efbfcac5f172b8596ee6", "patch": "@@ -1,3 +1,63 @@\n+2021-03-10  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/99492\n+\t* gcc.target/powerpc/pr99492.c: New testcase.\n+\n+2021-03-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/99205\n+\t* gfortran.dg/data_char_4.f90: New test.\n+\t* gfortran.dg/data_char_5.f90: New test.\n+\n+2021-03-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/pr98959.c: Add int128 and lp64 selectors.\n+\n+2021-03-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99423\n+\t* g++.dg/modules/pr99423_a.H: New.\n+\t* g++.dg/modules/pr99423_b.H: New.\n+\n+2021-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/99305\n+\tPR testsuite/99498\n+\t* g++.dg/opt/pr99305.C: Don't expect cast to unsigned char on\n+\tunsigned_char effective targets.\n+\n+2021-03-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99508\n+\t* g++.dg/ext/pr99508.C: New.\n+\n+2021-03-10  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR testsuite/99292\n+\t* lib/target-supports.exp (check_effective_target_lra): New.\n+\t* gcc.c-torture/compile/asmgoto-2.c: Use LRA target selector.\n+\t* gcc.c-torture/compile/asmgoto-5.c: Likewise.\n+\t* gcc.c-torture/compile/pr98096.c: Likewise.\n+\t* gcc.dg/pr97954.c: Likewise.\n+\n+2021-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/pr94047.c: Remove \"-Wno-analyzer-too-complex\".\n+\t* gcc.dg/analyzer/zlib-2.c: Likewise.\n+\n+2021-03-10  Joel Hutton  <joel.hutton@arm.com>\n+\n+\t* gcc.dg/vect/pr99102.c: Fix target selector.\n+\n+2021-03-10  Joel Hutton  <joel.hutton@arm.com>\n+\n+\tPR target/99102\n+\t* gcc.dg/vect/pr99102.c: New test.\n+\n+2021-03-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/lto25.ads: New test.\n+\n 2021-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/99305"}, {"sha": "109a206b214c517db02fe567a6cb67bcf2cd7609", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9800852067503ed0fe4efbfcac5f172b8596ee6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9800852067503ed0fe4efbfcac5f172b8596ee6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9800852067503ed0fe4efbfcac5f172b8596ee6", "patch": "@@ -1,3 +1,58 @@\n+2021-03-10  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* testsuite/29_atomics/atomic/wait_notify/bool.cc: Add options to\n+\tlink with libatomic.\n+\t* testsuite/29_atomics/atomic/wait_notify/generic.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/wait_notify/pointers.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_flag/wait_notify/1.cc: Likewise.\n+\t* testsuite/30_threads/barrier/arrive.cc: Likewise.\n+\t* testsuite/30_threads/barrier/arrive_and_drop.cc: Likewise.\n+\t* testsuite/30_threads/barrier/arrive_and_wait.cc: Likewise.\n+\t* testsuite/30_threads/barrier/completion.cc: Likewise.\n+\t* testsuite/30_threads/latch/3.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/try_acquire.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/try_acquire_for.cc: Likewise.\n+\t* testsuite/30_threads/semaphore/try_acquire_until.cc: Likewise.\n+\n+2021-03-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99413\n+\t* include/bits/align.h: Include debug/assertions.h.\n+\t* include/bits/codecvt.h: Include bits/c++config.h.\n+\t* include/bits/enable_special_members.h: Likewise.\n+\t* include/bits/erase_if.h: Likewise.\n+\t* include/bits/functional_hash.h: Include <type_traits>.\n+\t* include/bits/invoke.h: Include bits/move.h.\n+\t* include/bits/ostream_insert.h: Include bits/exception_defines.h.\n+\t* include/bits/parse_numbers.h: Include <type_traits>.\n+\t* include/bits/predefined_ops.h: Include bits/c++config.h.\n+\t* include/bits/range_access.h: Include bits/stl_iterator.h.\n+\t* include/bits/stl_bvector.h: Do not include bits/stl_vector.h.\n+\t* include/bits/stl_iterator.h: Include bits/stl_iterator_base_types.h.\n+\t* include/bits/stl_uninitialized.h: Include bits/stl_algobase.h.\n+\t* include/bits/uniform_int_dist.h: Include bits/concept_check.h.\n+\t* include/bits/unique_lock.h: Include bits/std_mutex.h.\n+\t* include/debug/assertions.h: Include bits/c++config.h.\n+\n+2021-03-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_cmp.h (__eq_builtin_ptr_cmp): Remove.\n+\t(ranges::equal_to, ranges::not_equal_to): Do not constrain\n+\twith __eq_builtin_ptr_cmp.\n+\t(ranges::less, ranges::greater, ranges::less_equal)\n+\t(ranges::greater_equal): Do not constrain with\n+\t__less_builtin_ptr_cmp.\n+\t* libsupc++/compare (compare_three_way): Do not constrain with\n+\t__3way_builtin_ptr_cmp.\n+\t* testsuite/18_support/comparisons/object/builtin-ptr-three-way.cc: Moved to...\n+\t* testsuite/18_support/comparisons/object/lwg3530.cc: ...here.\n+\t* testsuite/20_util/function_objects/range.cmp/lwg3530.cc: New test.\n+\n+2021-03-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/std/time/syn_c++20.cc: Enable synopsis checks for\n+\tC++20 calendar types.\n+\n 2021-03-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/99396"}]}