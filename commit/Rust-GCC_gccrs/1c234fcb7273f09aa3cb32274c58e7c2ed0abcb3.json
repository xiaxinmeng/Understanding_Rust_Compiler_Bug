{"sha": "1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyMzRmY2I3MjczZjA5YWEzY2IzMjI3NGM1OGU3YzJlZDBhYmNiMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-29T17:13:08Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-29T17:13:08Z"}, "message": "expmed.c (expand_smod_pow2): Provide alternate implementations that avoid conditional jumps...\n\n\n\t* expmed.c (expand_smod_pow2): Provide alternate implementations\n\tthat avoid conditional jumps, and choose between them based upon\n\tthe target's rtx_costs.\n\nFrom-SVN: r83861", "tree": {"sha": "3526890960c85ad4ae1680858ad18c224437b6fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3526890960c85ad4ae1680858ad18c224437b6fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3/comments", "author": null, "committer": null, "parents": [{"sha": "e1514303f2550329accaf2fe3b7eec9ca54f9724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1514303f2550329accaf2fe3b7eec9ca54f9724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1514303f2550329accaf2fe3b7eec9ca54f9724"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "36fedf639e9595249cf37915b32a76c1c92cbde8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3", "patch": "@@ -1,3 +1,9 @@\n+2004-06-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expmed.c (expand_smod_pow2): Provide alternate implementations\n+\tthat avoid conditional jumps, and choose between them based upon\n+\tthe target's rtx_costs.\n+\n 2004-06-29  Andrew Pinski  <apinski@apple.com>\n \n \t* tree-sra.c: Include expr.h for definition of MOVE_RATIO."}, {"sha": "bb60ba1e832ef3ce70d94f61d8d70f2a836aa5f6", "filename": "gcc/expmed.c", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=1c234fcb7273f09aa3cb32274c58e7c2ed0abcb3", "patch": "@@ -3064,7 +3064,7 @@ static rtx\n expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n {\n   unsigned HOST_WIDE_INT mask;\n-  rtx result, temp, label;\n+  rtx result, temp, shift, label;\n   int logd;\n \n   logd = floor_log2 (d);\n@@ -3079,17 +3079,42 @@ expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n       if (signmask)\n \t{\n \t  signmask = force_reg (mode, signmask);\n-\t  temp = expand_binop (mode, xor_optab, op0, signmask,\n-\t\t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-\t  temp = expand_binop (mode, sub_optab, temp, signmask,\n-\t\t\t       NULL_RTX, 0, OPTAB_LIB_WIDEN);\n \t  mask = ((HOST_WIDE_INT) 1 << logd) - 1;\n-\t  temp = expand_binop (mode, and_optab, temp, GEN_INT (mask),\n-\t\t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-\t  temp = expand_binop (mode, xor_optab, temp, signmask,\n-\t\t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-\t  temp = expand_binop (mode, sub_optab, temp, signmask,\n-\t\t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t  shift = GEN_INT (GET_MODE_BITSIZE (mode) - logd);\n+\n+\t  /* Use the rtx_cost of a LSHIFTRT instruction to determine\n+\t     which instruction sequence to use.  If logical right shifts\n+\t     are expensive the use 2 XORs, 2 SUBs and an AND, otherwise\n+\t     use a LSHIFTRT, 1 ADD, 1 SUB and an AND.  */\n+\t     \n+\t  temp = gen_rtx_LSHIFTRT (mode, result, shift);\n+\t  if (lshr_optab->handlers[mode].insn_code == CODE_FOR_nothing\n+\t      || rtx_cost (temp, SET) > COSTS_N_INSNS (2))\n+\t    {\n+\t      temp = expand_binop (mode, xor_optab, op0, signmask,\n+\t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t      temp = expand_binop (mode, sub_optab, temp, signmask,\n+\t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t      temp = expand_binop (mode, and_optab, temp, GEN_INT (mask),\n+\t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t      temp = expand_binop (mode, xor_optab, temp, signmask,\n+\t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t      temp = expand_binop (mode, sub_optab, temp, signmask,\n+\t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t    }\n+\t  else\n+\t    {\n+\t      signmask = expand_binop (mode, lshr_optab, signmask, shift,\n+\t\t\t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t      signmask = force_reg (mode, signmask);\n+\n+\t      temp = expand_binop (mode, add_optab, op0, signmask,\n+\t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t      temp = expand_binop (mode, and_optab, temp, GEN_INT (mask),\n+\t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t      temp = expand_binop (mode, sub_optab, temp, signmask,\n+\t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t    }\n \t  return temp;\n \t}\n     }"}]}