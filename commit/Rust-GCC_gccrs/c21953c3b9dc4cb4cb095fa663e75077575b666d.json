{"sha": "c21953c3b9dc4cb4cb095fa663e75077575b666d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxOTUzYzNiOWRjNGNiNGNiMDk1ZmE2NjNlNzUwNzc1NzViNjY2ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-09T22:20:36Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-09T22:20:36Z"}, "message": "(clipper_builtin_saveregs): Changes to go with va-clipper.h changes.\n\nFrom-SVN: r4895", "tree": {"sha": "e45a1cd33a094960771808c6a589d6ad580f89b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e45a1cd33a094960771808c6a589d6ad580f89b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c21953c3b9dc4cb4cb095fa663e75077575b666d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21953c3b9dc4cb4cb095fa663e75077575b666d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21953c3b9dc4cb4cb095fa663e75077575b666d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21953c3b9dc4cb4cb095fa663e75077575b666d/comments", "author": null, "committer": null, "parents": [{"sha": "9e91edcefb11f7d7ffe62296ea7a55879d3f8099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e91edcefb11f7d7ffe62296ea7a55879d3f8099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e91edcefb11f7d7ffe62296ea7a55879d3f8099"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "feaf11ec8c0391d8203ded986d41237f41f2d070", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21953c3b9dc4cb4cb095fa663e75077575b666d/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21953c3b9dc4cb4cb095fa663e75077575b666d/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=c21953c3b9dc4cb4cb095fa663e75077575b666d", "patch": "@@ -366,57 +366,81 @@ rev_cond_name (op)\n \n \f\n /* Do what is necessary for `va_start'.  The argument is ignored;\n-   We look at the current function to determine if stdargs or varargs\n-   is used and fill in an initial va_list.  A pointer to this constructor\n-   is returned.  */\n+   We fill in an initial va_list.  A pointer to this constructor\n+   is returned. */\n+\n \n struct rtx_def *\n clipper_builtin_saveregs (arglist)\n      tree arglist;\n {\n   extern int current_function_varargs;\n-  rtx block, addr, argsize;\n-  /* Allocate the va_list constructor */\n-  block = assign_stack_local (BLKmode, 8 * UNITS_PER_WORD, 2 * BITS_PER_WORD);\n+  rtx block, addr, argsize, scratch, r0_addr,r1_addr,f0_addr,f1_addr;\n+\n+  /* Allocate the va_list constructor + save area for r0,r1,f0,f1 */\n+\n+  block = assign_stack_local (BLKmode,\n+\t\t\t      (6 + 6) * UNITS_PER_WORD, 2 * BITS_PER_WORD);\n+\n   RTX_UNCHANGING_P (block) = 1;\n   RTX_UNCHANGING_P (XEXP (block, 0)) = 1;\n \n   addr = copy_to_reg (XEXP (block, 0));\n \n-  /* Store float regs  */\n+  f0_addr =  gen_rtx (PLUS, Pmode, addr, gen_rtx (CONST_INT, Pmode, 24));\n+  f1_addr =  gen_rtx (PLUS, Pmode, addr, gen_rtx (CONST_INT, Pmode, 32));\n+  r0_addr =  gen_rtx (PLUS, Pmode, addr, gen_rtx (CONST_INT, Pmode, 40));\n+  r1_addr =  gen_rtx (PLUS, Pmode, addr, gen_rtx (CONST_INT, Pmode, 44));\n \n-  emit_move_insn (gen_rtx (MEM, DFmode, addr),\n-\t\t  gen_rtx (REG, DFmode, 16));\n \n-  emit_move_insn (gen_rtx (MEM, DFmode,\n-\t\t\t   gen_rtx (PLUS, Pmode, addr,\n-\t\t\t\t    gen_rtx (CONST_INT, Pmode, 8))),\n-\t\t  gen_rtx (REG, DFmode, 17));\n+  /* Store float regs  */\n+\n+  emit_move_insn (gen_rtx (MEM, DFmode, f0_addr), gen_rtx (REG, DFmode, 16));\n+  emit_move_insn (gen_rtx (MEM, DFmode, f1_addr), gen_rtx (REG, DFmode, 17));\n \n   /* Store int regs  */\n \n-  emit_move_insn (gen_rtx (MEM, SImode,\n-\t\t\t   gen_rtx (PLUS, Pmode, addr,\n-\t\t\t\t    gen_rtx (CONST_INT, Pmode, 16))),\n-\t\t  gen_rtx (REG, SImode, 0));\n+  emit_move_insn (gen_rtx (MEM, SImode, r0_addr), gen_rtx (REG, SImode, 0));\n+  emit_move_insn (gen_rtx (MEM, SImode, r1_addr), gen_rtx (REG, SImode, 1));\n \n-  emit_move_insn (gen_rtx (MEM, SImode,\n-\t\t\t   gen_rtx (PLUS, Pmode, addr,\n-\t\t\t\t    gen_rtx (CONST_INT, Pmode, 20))),\n-\t\t  gen_rtx (REG, SImode, 1));\n+  /* Store the arg pointer in the __va_stk member.  */\n \n+  emit_move_insn (gen_rtx (MEM, SImode, addr),\n+\t\t  copy_to_reg (virtual_incoming_args_rtx));\n+\t\t  \n \n-  /* Store the arg pointer in the __va_stk member.  */\n+  /* now move addresses of the saved regs into the pointer array */\n \n+  scratch = gen_reg_rtx (Pmode);\n+\n+  emit_move_insn (scratch, r0_addr);\n   emit_move_insn (gen_rtx (MEM, SImode,\n \t\t\t   gen_rtx (PLUS, Pmode, addr,\n-\t\t\t\t    gen_rtx (CONST_INT, Pmode, 24))),\n-\t\t  copy_to_reg (virtual_incoming_args_rtx));\n-\n+\t\t\t\t    gen_rtx (CONST_INT, Pmode, 4))),\n+\t\t  scratch);\n+\t\t  \n+  emit_move_insn (scratch, f0_addr);\n+  emit_move_insn (gen_rtx (MEM, SImode,\n+\t\t\t   gen_rtx (PLUS, Pmode, addr,\n+\t\t\t\t    gen_rtx (CONST_INT, Pmode, 8))),\n+\t\t  scratch);\n+\t\t  \n+  emit_move_insn (scratch, r1_addr);\n+  emit_move_insn (gen_rtx (MEM, SImode,\n+\t\t\t   gen_rtx (PLUS, Pmode, addr,\n+\t\t\t\t    gen_rtx (CONST_INT, Pmode, 12))),\n+\t\t  scratch);\n+\t\t  \n+  emit_move_insn (scratch, f1_addr);\n+  emit_move_insn (gen_rtx (MEM, SImode,\n+\t\t\t   gen_rtx (PLUS, Pmode, addr,\n+\t\t\t\t    gen_rtx (CONST_INT, Pmode, 16))),\n+\t\t  scratch);\n \n   /* Return the address of the va_list constructor, but don't put it in a\n      register.  This fails when not optimizing and produces worse code when\n      optimizing.  */\n+\n   return XEXP (block, 0);\n }\n "}]}