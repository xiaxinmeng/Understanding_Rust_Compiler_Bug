{"sha": "1aec2ecce4085a664f489e7a3585d993a9939a1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlYzJlY2NlNDA4NWE2NjRmNDg5ZTdhMzU4NWQ5OTNhOTkzOWExZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-03-18T14:16:59Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-03-18T14:16:59Z"}, "message": "re PR ipa/65432 (Invalid read of size 1: ipa_icf::sem_item_optimizer::merge_classes(unsigned int) (ipa-icf.c:2958))\n\nFix PR ipa/65432\n\n\tPR ipa/65432\n\t* cgraph.c (cgraph_node::get_create): Remove unnecessary\n\txstrdup_for_dump wrapper.\n\t* ipa-icf.c (sem_item::dump): Use symtab_node::name instead of\n\tsem_item::name.\n\t(sem_function::equals): Wrap symtab_node::name and symtab_node::asm_name\n\twith xstrdup_for_dump.\n\t(sem_variable::equals): Likewise.\n\t(sem_item_optimizer::read_section): Use symtab_node::name instead of\n\tsem_item::name.\n\t(sem_item_optimizer::parse_funcs_and_vars): Likewise.\n\t(sem_item_optimizer::merge_classes): Wrap symtab_node::name and\n\tsymtab_node::asm_name with xstrdup_for_dump.\n\t(congruence_class::dump): Use symtab_node::name instead of\n\tsem_item::name.\n\t* ipa-icf.h (symtab_node::name): Remove.\n\t(symtab_node::asm_name): Likewise.\n\nFrom-SVN: r221491", "tree": {"sha": "55ccb9f54b9b5fe403b7d176c43d8c3cb574bce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55ccb9f54b9b5fe403b7d176c43d8c3cb574bce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aec2ecce4085a664f489e7a3585d993a9939a1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aec2ecce4085a664f489e7a3585d993a9939a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aec2ecce4085a664f489e7a3585d993a9939a1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aec2ecce4085a664f489e7a3585d993a9939a1d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "faf4220c7236e48607dd8e286f7f555489d3dbef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf4220c7236e48607dd8e286f7f555489d3dbef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf4220c7236e48607dd8e286f7f555489d3dbef"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "7325636dd25aa4ab32b3c8a61eff7bec5403cad7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1aec2ecce4085a664f489e7a3585d993a9939a1d", "patch": "@@ -1,3 +1,23 @@\n+2015-03-18  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/65432\n+\t* cgraph.c (cgraph_node::get_create): Remove unnecessary\n+\txstrdup_for_dump wrapper.\n+\t* ipa-icf.c (sem_item::dump): Use symtab_node::name instead of\n+\tsem_item::name.\n+\t(sem_function::equals): Wrap symtab_node::name and symtab_node::asm_name\n+\twith xstrdup_for_dump.\n+\t(sem_variable::equals): Likewise.\n+\t(sem_item_optimizer::read_section): Use symtab_node::name instead of\n+\tsem_item::name.\n+\t(sem_item_optimizer::parse_funcs_and_vars): Likewise.\n+\t(sem_item_optimizer::merge_classes): Wrap symtab_node::name and\n+\tsymtab_node::asm_name with xstrdup_for_dump.\n+\t(congruence_class::dump): Use symtab_node::name instead of\n+\tsem_item::name.\n+\t* ipa-icf.h (symtab_node::name): Remove.\n+\t(symtab_node::asm_name): Likewise.\n+\n 2015-03-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/65450"}, {"sha": "e2958c4a508526fb8b5dccc5c7ff4c0f2fb6da43", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1aec2ecce4085a664f489e7a3585d993a9939a1d", "patch": "@@ -553,12 +553,11 @@ cgraph_node::get_create (tree decl)\n       if (dump_file)\n \tfprintf (dump_file, \"Introduced new external node \"\n \t\t \"(%s/%i) and turned into root of the clone tree.\\n\",\n-\t\t xstrdup_for_dump (node->name ()), node->order);\n+\t\t node->name (), node->order);\n     }\n   else if (dump_file)\n     fprintf (dump_file, \"Introduced new external node \"\n-\t     \"(%s/%i).\\n\", xstrdup_for_dump (node->name ()),\n-\t     node->order);\n+\t     \"(%s/%i).\\n\", node->name (), node->order);\n   return node;\n }\n "}, {"sha": "f68d23cf4dc62d247fb8ac509afd100214c733e2", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=1aec2ecce4085a664f489e7a3585d993a9939a1d", "patch": "@@ -239,12 +239,12 @@ sem_item::dump (void)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"[%s] %s (%u) (tree:%p)\\n\", type == FUNC ? \"func\" : \"var\",\n-\t       name(), node->order, (void *) node->decl);\n+\t       node->name(), node->order, (void *) node->decl);\n       fprintf (dump_file, \"  hash: %u\\n\", get_hash ());\n       fprintf (dump_file, \"  references: \");\n \n       for (unsigned i = 0; i < refs.length (); i++)\n-\tfprintf (dump_file, \"%s%s \", refs[i]->name (),\n+\tfprintf (dump_file, \"%s%s \", refs[i]->node->name (),\n \t\t i < refs.length() - 1 ? \",\" : \"\");\n \n       fprintf (dump_file, \"\\n\");\n@@ -575,8 +575,13 @@ sem_function::equals (sem_item *item,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file,\n \t     \"Equals called for:%s:%s (%u:%u) (%s:%s) with result: %s\\n\\n\",\n-\t     name(), item->name (), node->order, item->node->order, asm_name (),\n-\t     item->asm_name (), eq ? \"true\" : \"false\");\n+\t     xstrdup_for_dump (node->name()),\n+\t     xstrdup_for_dump (item->node->name ()),\n+\t     node->order,\n+\t     item->node->order,\n+\t     xstrdup_for_dump (node->asm_name ()),\n+\t     xstrdup_for_dump (item->node->asm_name ()),\n+\t     eq ? \"true\" : \"false\");\n \n   return eq;\n }\n@@ -1522,8 +1527,11 @@ sem_variable::equals (sem_item *item,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file,\n \t     \"Equals called for vars:%s:%s (%u:%u) (%s:%s) with result: %s\\n\\n\",\n-\t     name(), item->name (), node->order, item->node->order, asm_name (),\n-\t     item->asm_name (), ret ? \"true\" : \"false\");\n+\t     xstrdup_for_dump (node->name()),\n+\t     xstrdup_for_dump (item->node->name ()),\n+\t     node->order, item->node->order,\n+\t     xstrdup_for_dump (node->asm_name ()),\n+\t     xstrdup_for_dump (item->node->asm_name ()), ret ? \"true\" : \"false\");\n \n   return ret;\n }\n@@ -1995,8 +2003,8 @@ sem_item_optimizer::read_section (lto_file_decl_data *file_data,\n       gcc_assert (node->definition);\n \n       if (dump_file)\n-\tfprintf (dump_file, \"Symbol added:%s (tree: %p, uid:%u)\\n\", node->asm_name (),\n-\t\t (void *) node->decl, node->order);\n+\tfprintf (dump_file, \"Symbol added:%s (tree: %p, uid:%u)\\n\",\n+\t\t node->asm_name (), (void *) node->decl, node->order);\n \n       if (is_a<cgraph_node *> (node))\n \t{\n@@ -2259,7 +2267,7 @@ sem_item_optimizer::parse_funcs_and_vars (void)\n \t  m_symtab_node_map.put (cnode, f);\n \n \t  if (dump_file)\n-\t    fprintf (dump_file, \"Parsed function:%s\\n\", f->asm_name ());\n+\t    fprintf (dump_file, \"Parsed function:%s\\n\", f->node->asm_name ());\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    f->dump_to_file (dump_file);\n@@ -2955,9 +2963,11 @@ sem_item_optimizer::merge_classes (unsigned int prev_class_count)\n \t    if (dump_file)\n \t      {\n \t\tfprintf (dump_file, \"Semantic equality hit:%s->%s\\n\",\n-\t\t\t source->name (), alias->name ());\n+\t\t\t xstrdup_for_dump (source->node->name ()),\n+\t\t\t xstrdup_for_dump (alias->node->name ()));\n \t\tfprintf (dump_file, \"Assembler symbol names:%s->%s\\n\",\n-\t\t\t source->asm_name (), alias->asm_name ());\n+\t\t\t xstrdup_for_dump (source->node->asm_name ()),\n+\t\t\t xstrdup_for_dump (alias->node->asm_name ()));\n \t      }\n \n \t    if (lookup_attribute (\"no_icf\", DECL_ATTRIBUTES (alias->decl)))\n@@ -2993,7 +3003,8 @@ congruence_class::dump (FILE *file, unsigned int indent) const\n \n   FPUTS_SPACES (file, indent + 2, \"\");\n   for (unsigned i = 0; i < members.length (); i++)\n-    fprintf (file, \"%s(%p/%u) \", members[i]->asm_name (), (void *) members[i]->decl,\n+    fprintf (file, \"%s(%p/%u) \", members[i]->node->asm_name (),\n+\t     (void *) members[i]->decl,\n \t     members[i]->node->order);\n \n   fprintf (file, \"\\n\");"}, {"sha": "8245b5445cc78d80d05bd9aa928ce8edafe3654d", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=1aec2ecce4085a664f489e7a3585d993a9939a1d", "patch": "@@ -171,18 +171,6 @@ class sem_item\n   /* Add reference to a semantic TARGET.  */\n   void add_reference (sem_item *target);\n \n-  /* Gets symbol name of the item.  */\n-  const char *name (void)\n-  {\n-    return node->name ();\n-  }\n-\n-  /* Gets assembler name of the item.  */\n-  const char *asm_name (void)\n-  {\n-    return node->asm_name ();\n-  }\n-\n   /* Fast equality function based on knowledge known in WPA.  */\n   virtual bool equals_wpa (sem_item *item,\n \t\t\t   hash_map <symtab_node *, sem_item *> &ignored_nodes) = 0;"}]}