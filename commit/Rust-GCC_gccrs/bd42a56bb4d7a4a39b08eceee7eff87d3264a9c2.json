{"sha": "bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ0MmE1NmJiNGQ3YTRhMzliMDhlY2VlZTdlZmY4N2QzMjY0YTljMg==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2008-05-27T14:28:02Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2008-05-27T14:28:02Z"}, "message": "re PR middle-end/36326 (gimplification of aggregate copies introduces extra aggregate copy)\n\nPR middle-end/36326\n* tree-gimple.c (is_gimple_mem_rhs): Remove work-around for\nnon-BLKmode types.\n* tree-tailcall.c (find_tail_calls): Don't mark calls storing\ninto memory as tail calls.\n\nFrom-SVN: r136033", "tree": {"sha": "f9e2fb522e3165cb0dc981ccb4e13d343a341661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9e2fb522e3165cb0dc981ccb4e13d343a341661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a46fc136fc682ea3d0429e6ac1084712fe18b612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46fc136fc682ea3d0429e6ac1084712fe18b612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46fc136fc682ea3d0429e6ac1084712fe18b612"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "33ef156a46affe01255313ca4a42766a9dacdff6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2", "patch": "@@ -1,3 +1,11 @@\n+2008-05-27  Michael Matz  <matz@suse.de>\n+\n+\tPR middle-end/36326\n+\t* tree-gimple.c (is_gimple_mem_rhs): Remove work-around for\n+\tnon-BLKmode types.\n+\t* tree-tailcall.c (find_tail_calls): Don't mark calls storing\n+\tinto memory as tail calls.\n+\n 2008-05-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36339"}, {"sha": "2334e12634340ecb234825634dbb18afd6354466", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2", "patch": "@@ -113,13 +113,8 @@ bool\n is_gimple_mem_rhs (tree t)\n {\n   /* If we're dealing with a renamable type, either source or dest must be\n-     a renamed variable.  Also force a temporary if the type doesn't need\n-     to be stored in memory, since it's cheap and prevents erroneous\n-     tailcalls (PR 17526).  */\n-  if (is_gimple_reg_type (TREE_TYPE (t))\n-      || (TYPE_MODE (TREE_TYPE (t)) != BLKmode\n-\t  && (TREE_CODE (t) != CALL_EXPR\n-              || ! aggregate_value_p (t, t))))\n+     a renamed variable.  */\n+  if (is_gimple_reg_type (TREE_TYPE (t)))\n     return is_gimple_val (t);\n   else\n     return is_gimple_formal_tmp_rhs (t);"}, {"sha": "09a2eafe11939ac59b2fcb4d6d71db00b24bc811", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=bd42a56bb4d7a4a39b08eceee7eff87d3264a9c2", "patch": "@@ -429,6 +429,20 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n       return;\n     }\n \n+  /* If the LHS of our call is not just a simple register, we can't \n+     transform this into a tail or sibling call.  This situation happens,\n+     in (e.g.) \"*p = foo()\" where foo returns a struct.  In this case\n+     we won't have a temporary here, but we need to carry out the side\n+     effect anyway, so tailcall is impossible.\n+\n+     ??? In some situations (when the struct is returned in memory via\n+     invisible argument) we could deal with this, e.g. by passing 'p'\n+     itself as that argument to foo, but it's too early to do this here,\n+     and expand_call() will not handle it anyway.  If it ever can, then\n+     we need to revisit this here, to allow that situation.  */\n+  if (ass_var && !is_gimple_reg (ass_var))\n+    return;\n+\n   /* We found the call, check whether it is suitable.  */\n   tail_recursion = false;\n   func = get_callee_fndecl (call);"}]}