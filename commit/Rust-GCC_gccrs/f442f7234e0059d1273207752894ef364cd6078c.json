{"sha": "f442f7234e0059d1273207752894ef364cd6078c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ0MmY3MjM0ZTAwNTlkMTI3MzIwNzc1Mjg5NGVmMzY0Y2Q2MDc4Yw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-12-18T02:45:53Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-12-18T02:45:53Z"}, "message": "Initial revision\n\nFrom-SVN: r13320", "tree": {"sha": "2276934fbf17db1cb50610fd56c1c3870ddf91fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2276934fbf17db1cb50610fd56c1c3870ddf91fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f442f7234e0059d1273207752894ef364cd6078c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f442f7234e0059d1273207752894ef364cd6078c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f442f7234e0059d1273207752894ef364cd6078c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f442f7234e0059d1273207752894ef364cd6078c/comments", "author": null, "committer": null, "parents": [{"sha": "faf5394a1b5c4d23fdd8d9643e65a66fcd50c7ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf5394a1b5c4d23fdd8d9643e65a66fcd50c7ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf5394a1b5c4d23fdd8d9643e65a66fcd50c7ff"}], "stats": {"total": 227, "additions": 227, "deletions": 0}, "files": [{"sha": "881e8213b1dad3432e0a3d0b3491738340fb6180", "filename": "gcc/cp/g++spec.c", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f442f7234e0059d1273207752894ef364cd6078c/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f442f7234e0059d1273207752894ef364cd6078c/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=f442f7234e0059d1273207752894ef364cd6078c", "patch": "@@ -0,0 +1,227 @@\n+#include <sys/types.h>\n+#include <stdio.h>\n+#include \"gansidecl.h\"\n+\n+/* This bit is set if we saw a `-xfoo' language specification.  */\n+#define LANGSPEC\t(1<<1)\n+/* This bit is set if they did `-lm' or `-lmath'.  */\n+#define MATHLIB\t\t(1<<2)\n+/* This bit is set if they did `-lc'.  */\n+#define WITHLIBC\t(1<<3)\n+\n+#ifndef MATH_LIBRARY\n+#define MATH_LIBRARY \"-lm\"\n+#endif\n+\n+extern char *xmalloc PROTO((size_t));\n+\n+void\n+lang_specific_driver (fn, in_argc, in_argv)\n+     void (*fn)();\n+     int *in_argc;\n+     char ***in_argv;\n+{\n+  int i, j;\n+\n+  /* If non-zero, the user gave us the `-v' flag.  */ \n+  int saw_verbose_flag = 0;\n+\n+  /* This will be 0 if we encounter a situation where we should not\n+     link in libstdc++.  */\n+  int library = 1;\n+\n+  /* The number of arguments being added to what's in argv, other than\n+     libraries.  We use this to track the number of times we've inserted\n+     -xc++/-xnone.  */\n+  int added = 2;\n+\n+  /* Used to track options that take arguments, so we don't go wrapping\n+     those with -xc++/-xnone.  */\n+  char *quote = NULL;\n+\n+  /* The new argument list will be contained in this.  */\n+  char **arglist;\n+\n+  /* Non-zero if we saw a `-xfoo' language specification on the\n+     command line.  Used to avoid adding our own -xc++ if the user\n+     already gave a language for the file.  */\n+  int saw_speclang = 0;\n+\n+  /* \"-lm\" or \"-lmath\" if it appears on the command line.  */\n+  char *saw_math = 0;\n+\n+  /* \"-lc\" if it appears on the command line.  */\n+  char *saw_libc = 0;\n+\n+  /* An array used to flag each argument that needs a bit set for\n+     LANGSPEC, MATHLIB, or WITHLIBC.  */\n+  int *args;\n+\n+  /* By default, we throw on the math library.  */\n+  int need_math = 1;\n+\n+  /* The total number of arguments with the new stuff.  */\n+  int argc;\n+\n+  /* The argument list.  */\n+  char **argv;\n+\n+  /* The total number of arguments with the new stuff.  */\n+  int num_args = 1;\n+\n+  argc = *in_argc;\n+  argv = *in_argv;\n+\n+\n+  args = (int *) xmalloc (argc * sizeof (int));\n+  bzero ((char *) args, argc * sizeof (int));\n+\n+  /* NOTE: We start at 0 now, not 1.  */\n+  for (i = 0; i < argc; i++)\n+    {\n+      /* If the previous option took an argument, we swallow it here.  */\n+      if (quote)\n+\t{\n+\t  quote = NULL;\n+\t  continue;\n+\t}\n+\n+      /* We don't do this anymore, since we don't get them with minus\n+\t signs on them.  */\n+      if (argv[i][0] == '\\0' || argv[i][1] == '\\0')\n+\tcontinue;\n+\n+      if (argv[i][0] == '-')\n+\t{\n+\t  if (library != 0 && (strcmp (argv[i], \"nostdlib\") == 0\n+\t\t\t       || strcmp (argv[i], \"nodefaultlibs\") == 0))\n+\t    {\n+\t      library = 0;\n+\t    }\n+\t  else if (strcmp (argv[i], \"lm\") == 0\n+\t\t   || strcmp (argv[i], \"lmath\") == 0\n+#ifdef ALT_LIBM\n+\t\t   || strcmp (argv[i], ALT_LIBM) == 0\n+#endif\n+\t\t  )\n+\t    {\n+\t      args[i] |= MATHLIB;\n+\t      need_math = 0;\n+\t    }\n+\t  else if (strcmp (argv[i], \"lc\") == 0)\n+\t    args[i] |= WITHLIBC;\n+\t  else if (strcmp (argv[i], \"v\") == 0)\n+\t    {\n+\t      saw_verbose_flag = 1;\n+\t      /* We now see if this is 1, since we are doing the switches\n+\t\t differently.  */\n+\t      if (argc == 1)\n+\t\t{\n+\t\t  /* If they only gave us `-v', don't try to link\n+\t\t     in libg++.  */ \n+\t\t  library = 0;\n+\t\t}\n+\t    }\n+\t  else if (strncmp (argv[i], \"x\", 2) == 0)\n+\t    saw_speclang = 1;\n+\t  else if (((argv[i][2] == '\\0'\n+\t\t     && (char *)strchr (\"bBVDUoeTuIYmLiA\", argv[i][1]) != NULL)\n+\t\t    || strcmp (argv[i], \"Tdata\") == 0))\n+\t    quote = argv[i];\n+\t  else if (library != 0 && ((argv[i][2] == '\\0'\n+\t\t     && (char *) strchr (\"cSEM\", argv[i][1]) != NULL)\n+\t\t    || strcmp (argv[i], \"MM\") == 0))\n+\t    {\n+\t      /* Don't specify libraries if we won't link, since that would\n+\t\t cause a warning.  */\n+\t      library = 0;\n+\t      added -= 2;\n+\t    }\n+\t  else\n+\t    /* Pass other options through.  */\n+\t    continue;\n+\t}\n+      else\n+\t{\n+\t  int len; \n+\n+\t  if (saw_speclang)\n+\t    {\n+\t      saw_speclang = 0;\n+\t      continue;\n+\t    }\n+\n+\t  /* If the filename ends in .c or .i, put options around it.\n+\t     But not if a specified -x option is currently active.  */\n+\t  len = strlen (argv[i]);\n+\t  if (len > 2\n+\t      && (argv[i][len - 1] == 'c' || argv[i][len - 1] == 'i')\n+\t      && argv[i][len - 2] == '.')\n+\t    {\n+\t      args[i] |= LANGSPEC;\n+\t      added += 2;\n+\t    }\n+\t}\n+    }\n+\n+  if (quote)\n+    (*fn) (\"argument to `%s' missing\\n\", quote);\n+\n+  /* If we know we don't have to do anything, bail now.  */\n+  if (! added && ! library)\n+    {\n+      free (args);\n+      return;\n+    }\n+\n+  num_args = argc + added + need_math;\n+  arglist = (char **) xmalloc (num_args * sizeof (char *));\n+\n+  /* NOTE: We start at 1 now, not 0.  */\n+  for (i = 0, j = 0; i < argc; i++, j++)\n+    {\n+      arglist[j] = argv[i];\n+\n+      /* Make sure -lstdc++ is before the math library, since libstdc++\n+\t itself uses those math routines.  */\n+      if (!saw_math && (args[i] & MATHLIB) && library)\n+\t{\n+\t  --j;\n+\t  saw_math = argv[i];\n+\t}\n+\n+      if (!saw_libc && (args[i] & WITHLIBC) && library)\n+\t{\n+\t  --j;\n+\t  saw_libc = argv[i];\n+\t}\n+\n+      /* Wrap foo.c and foo.i files in a language specification to\n+\t force the gcc compiler driver to run cc1plus on them.  */\n+      if (args[i] & LANGSPEC)\n+\t{\n+\t  int len = strlen (argv[i]);\n+\t  if (argv[i][len - 1] == 'i')\n+\t    arglist[j++] = \"-xc++-cpp-output\";\n+\t  else\n+\t    arglist[j++] = \"-xc++\";\n+\t  arglist[j++] = argv[i];\n+\t  arglist[j] = \"-xnone\";\n+\t}\n+  }\n+\n+  /* Add `-lstdc++' if we haven't already done so.  */\n+  if (library)\n+    arglist[j++] = \"-lstdc++\";\n+  if (saw_math)\n+    arglist[j++] = saw_math;\n+  else if (library)\n+    arglist[j++] = MATH_LIBRARY;\n+  if (saw_libc)\n+    arglist[j++] = saw_libc;\n+\n+  arglist[j] = NULL;\n+\n+  *in_argc = j;\n+  *in_argv = arglist;\n+}"}]}