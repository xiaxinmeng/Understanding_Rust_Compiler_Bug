{"sha": "c63d3b963cf2f52adbf5130872782af02719a316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYzZDNiOTYzY2YyZjUyYWRiZjUxMzA4NzI3ODJhZjAyNzE5YTMxNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-12-03T15:04:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-03T15:04:57Z"}, "message": "asan.c (instrument_mem_region_access): Don't instrument if base doesn't have pointer type or len integral type.\n\n\t* asan.c (instrument_mem_region_access): Don't instrument\n\tif base doesn't have pointer type or len integral type.\n\tAdd cast if len doesn't have size_t compatible type.\n\t(instrument_builtin_call): Don't instrument BUILT_IN_ATOMIC_LOAD,\n\tBUILT_IN_ATOMIC_TEST_AND_SET, BUILT_IN_ATOMIC_CLEAR,\n\tBUILT_IN_ATOMIC_EXCHANGE, BUILT_IN_ATOMIC_COMPARE_EXCHANGE\n\tand BUILT_IN_ATOMIC_STORE.\n\nFrom-SVN: r194094", "tree": {"sha": "8a42bbe27712bd9a94f99cf3b8105a1ad7328649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a42bbe27712bd9a94f99cf3b8105a1ad7328649"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c63d3b963cf2f52adbf5130872782af02719a316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63d3b963cf2f52adbf5130872782af02719a316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63d3b963cf2f52adbf5130872782af02719a316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63d3b963cf2f52adbf5130872782af02719a316/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f15b972787dde99826750d935a2f2635608b1ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15b972787dde99826750d935a2f2635608b1ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f15b972787dde99826750d935a2f2635608b1ce8"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "774695322dc71d4cf4a40880cdbaf66f4940d4d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63d3b963cf2f52adbf5130872782af02719a316/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63d3b963cf2f52adbf5130872782af02719a316/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c63d3b963cf2f52adbf5130872782af02719a316", "patch": "@@ -1,5 +1,13 @@\n 2012-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* asan.c (instrument_mem_region_access): Don't instrument\n+\tif base doesn't have pointer type or len integral type.\n+\tAdd cast if len doesn't have size_t compatible type.\n+\t(instrument_builtin_call): Don't instrument BUILT_IN_ATOMIC_LOAD,\n+\tBUILT_IN_ATOMIC_TEST_AND_SET, BUILT_IN_ATOMIC_CLEAR,\n+\tBUILT_IN_ATOMIC_EXCHANGE, BUILT_IN_ATOMIC_COMPARE_EXCHANGE\n+\tand BUILT_IN_ATOMIC_STORE.\n+\n \t* asan.c (instrument_assignment): Instrument lhs only\n \tfor gimple_store_p and rhs1 only for gimple_assign_load_p.\n "}, {"sha": "7f814e7122dcb82cec8d8027856a023a57dc377a", "filename": "gcc/asan.c", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63d3b963cf2f52adbf5130872782af02719a316/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63d3b963cf2f52adbf5130872782af02719a316/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=c63d3b963cf2f52adbf5130872782af02719a316", "patch": "@@ -849,7 +849,9 @@ instrument_mem_region_access (tree base, tree len,\n \t\t\t      gimple_stmt_iterator *iter,\n \t\t\t      location_t location, bool is_store)\n {\n-  if (integer_zerop (len))\n+  if (!POINTER_TYPE_P (TREE_TYPE (base))\n+      || !INTEGRAL_TYPE_P (TREE_TYPE (len))\n+      || integer_zerop (len))\n     return;\n \n   gimple_stmt_iterator gsi = *iter;\n@@ -902,20 +904,41 @@ instrument_mem_region_access (tree base, tree len,\n \n   /* offset = len - 1;  */\n   len = unshare_expr (len);\n-  gimple offset =\n-    gimple_build_assign_with_ops (TREE_CODE (len),\n-\t\t\t\t  make_ssa_name (TREE_TYPE (len), NULL),\n-\t\t\t\t  len, NULL);\n-  gimple_set_location (offset, location);\n-  gsi_insert_before (&gsi, offset, GSI_NEW_STMT);\n-\n-  offset =\n-    gimple_build_assign_with_ops (MINUS_EXPR,\n-\t\t\t\t  make_ssa_name (size_type_node, NULL),\n-\t\t\t\t  gimple_assign_lhs (offset),\n-\t\t\t\t  build_int_cst (size_type_node, 1));\n-  gimple_set_location (offset, location);\n-  gsi_insert_after (&gsi, offset, GSI_NEW_STMT);\n+  tree offset;\n+  gimple_seq seq = NULL;\n+  if (TREE_CODE (len) == INTEGER_CST)\n+    offset = fold_build2 (MINUS_EXPR, size_type_node,\n+\t\t\t  fold_convert (size_type_node, len),\n+\t\t\t  build_int_cst (size_type_node, 1));\n+  else\n+    {\n+      gimple g;\n+      tree t;\n+\n+      if (TREE_CODE (len) != SSA_NAME)\n+\t{\n+\t  t = make_ssa_name (TREE_TYPE (len), NULL);\n+\t  g = gimple_build_assign_with_ops (TREE_CODE (len), t, len, NULL);\n+\t  gimple_set_location (g, location);\n+\t  gimple_seq_add_stmt_without_update (&seq, g);\n+\t  len = t;\n+\t}\n+      if (!useless_type_conversion_p (size_type_node, TREE_TYPE (len)))\n+\t{\n+\t  t = make_ssa_name (size_type_node, NULL);\n+\t  g = gimple_build_assign_with_ops (NOP_EXPR, t, len, NULL);\n+\t  gimple_set_location (g, location);\n+\t  gimple_seq_add_stmt_without_update (&seq, g);\n+\t  len = t;\n+\t}\n+\n+      t = make_ssa_name (size_type_node, NULL);\n+      g = gimple_build_assign_with_ops (MINUS_EXPR, t, len,\n+\t\t\t\t\tbuild_int_cst (size_type_node, 1));\n+      gimple_set_location (g, location);\n+      gimple_seq_add_stmt_without_update (&seq, g);\n+      offset = gimple_assign_lhs (g);\n+    }\n \n   /* _1 = base;  */\n   base = unshare_expr (base);\n@@ -924,14 +947,16 @@ instrument_mem_region_access (tree base, tree len,\n \t\t\t\t  make_ssa_name (TREE_TYPE (base), NULL),\n \t\t\t\t  base, NULL);\n   gimple_set_location (region_end, location);\n-  gsi_insert_after (&gsi, region_end, GSI_NEW_STMT);\n+  gimple_seq_add_stmt_without_update (&seq, region_end);\n+  gsi_insert_seq_before (&gsi, seq, GSI_SAME_STMT);\n+  gsi_prev (&gsi);\n \n   /* _2 = _1 + offset;  */\n   region_end =\n     gimple_build_assign_with_ops (POINTER_PLUS_EXPR,\n \t\t\t\t  make_ssa_name (TREE_TYPE (base), NULL),\n \t\t\t\t  gimple_assign_lhs (region_end),\n-\t\t\t\t  gimple_assign_lhs (offset));\n+\t\t\t\t  offset);\n   gimple_set_location (region_end, location);\n   gsi_insert_after (&gsi, region_end, GSI_NEW_STMT);\n \n@@ -1089,7 +1114,6 @@ instrument_builtin_call (gimple_stmt_iterator *iter)\n        These are handled differently from the classical memory memory\n        access builtins above.  */\n \n-    case BUILT_IN_ATOMIC_LOAD:\n     case BUILT_IN_ATOMIC_LOAD_1:\n     case BUILT_IN_ATOMIC_LOAD_2:\n     case BUILT_IN_ATOMIC_LOAD_4:\n@@ -1192,23 +1216,18 @@ instrument_builtin_call (gimple_stmt_iterator *iter)\n     case BUILT_IN_SYNC_LOCK_RELEASE_8:\n     case BUILT_IN_SYNC_LOCK_RELEASE_16:\n \n-    case BUILT_IN_ATOMIC_TEST_AND_SET:\n-    case BUILT_IN_ATOMIC_CLEAR:\n-    case BUILT_IN_ATOMIC_EXCHANGE:\n     case BUILT_IN_ATOMIC_EXCHANGE_1:\n     case BUILT_IN_ATOMIC_EXCHANGE_2:\n     case BUILT_IN_ATOMIC_EXCHANGE_4:\n     case BUILT_IN_ATOMIC_EXCHANGE_8:\n     case BUILT_IN_ATOMIC_EXCHANGE_16:\n \n-    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE:\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1:\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2:\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4:\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8:\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16:\n \n-    case BUILT_IN_ATOMIC_STORE:\n     case BUILT_IN_ATOMIC_STORE_1:\n     case BUILT_IN_ATOMIC_STORE_2:\n     case BUILT_IN_ATOMIC_STORE_4:"}]}