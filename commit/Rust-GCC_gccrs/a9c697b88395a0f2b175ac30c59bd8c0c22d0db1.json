{"sha": "a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTljNjk3Yjg4Mzk1YTBmMmIxNzVhYzMwYzU5YmQ4YzBjMjJkMGRiMQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-05-17T17:55:43Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-05-17T17:55:43Z"}, "message": "trans.c (check_inlining_for_nested_subprog): Quote reserved names.\n\n\ngcc/ada/ChangeLog:\n\n        * gcc-interface/trans.c (check_inlining_for_nested_subprog): Quote\n        reserved names.\n\ngcc/brig/ChangeLog:\n\n        * brigfrontend/brig-control-handler.cc\n        (brig_directive_control_handler::operator): Remove trailing newline\n        from a diagnostic.\n        * brigfrontend/brig-module-handler.cc\n        (brig_directive_module_handler::operator): Remove a duplicated space\n        from a diagnostic.\n\ngcc/c/ChangeLog:\n\n        * c-decl.c (start_decl): Quote keywords, operators, and\n        types in diagnostics.\n        (finish_decl): Same.\n        * c-parser.c (c_parser_asm_statement): Same.\n        (c_parser_conditional_expression): Same.\n        (c_parser_transaction_cancel): Same.\n        * c-typeck.c (c_common_type): Same.\n        (build_conditional_expr): Same.\n        (digest_init): Same.\n        (process_init_element): Same.\n        (build_binary_op): Same.\n\ngcc/c-family/ChangeLog:\n\n        * c-attribs.c (handle_no_sanitize_attribute): Quote identifiers,\n        keywords, operators, and types in diagnostics.\n        (handle_scalar_storage_order_attribute): Same.\n        (handle_mode_attribute): Same.\n        (handle_visibility_attribute): Same.\n        (handle_assume_aligned_attribute): Same.\n        (handle_no_split_stack_attribute): Same.\n        * c-common.c (shorten_compare): Same.\n        (c_common_truthvalue_conversion): Same.\n        (cb_get_source_date_epoch): Same.\n        * c-lex.c (cb_def_pragma): Quote keywords, operators, and types\n        in diagnostics.\n        (interpret_float): Same.\n        * c-omp.c (c_finish_omp_for): Same.\n        * c-opts.c (c_common_post_options): Same.\n        * c-pch.c (c_common_pch_pragma): Same.\n        * c-pragma.c (pop_alignment): Same.\n        (handle_pragma_pack): Same.\n        (apply_pragma_weak): Same.\n        (handle_pragma_weak): Same.\n        (handle_pragma_scalar_storage_order): Same.\n        (handle_pragma_redefine_extname): Same.\n        (add_to_renaming_pragma_list): Same.\n        (maybe_apply_renaming_pragma): Same.\n        (push_visibility): Same.\n        (handle_pragma_visibility): Same.\n        (handle_pragma_optimize): Same.\n        (handle_pragma_message): Same.\n        * c-warn.c (warn_for_omitted_condop): Same.\n        (lvalue_error): Same.\n\ngcc/cp/ChangeLog:\n\n        * call.c (print_z_candidate): Wrap diagnostic text in a gettext\n        macro.  Adjust.\n        (print_z_candidates): Same.\n        (build_conditional_expr_1): Quote keywords, operators, and types\n        in diagnostics.\n        (build_op_delete_call): Same.\n        (maybe_print_user_conv_context): Wrap diagnostic text in a gettext\n        macro.\n        (convert_like_real): Same.\n        (convert_arg_to_ellipsis): Quote keywords, operators, and types\n        in diagnostics.\n        (build_over_call): Same.\n        (joust): Break up an overlong line.  Wrap diagnostic text in a gettext\n        macro.\n        * constexpr.c (cxx_eval_check_shift_p): Spell out >= in English.\n        (cxx_eval_constant_expression): Quote keywords, operators, and types\n        in diagnostics.\n        (potential_constant_expression_1): Same.\n        * cp-gimplify.c (cp_genericize_r): Same.\n        * cvt.c (maybe_warn_nodiscard): Quote keywords, operators, and types\n        in diagnostics.\n        (type_promotes_to): Same.\n        * decl.c (check_previous_goto_1): Same.\n        (check_goto): Same.\n        (start_decl): Same.\n        (cp_finish_decl): Avoid parenthesizing a sentence for consistency.\n        (grok_op_properties): Quote keywords, operators, and types\n        in diagnostics.\n        * decl2.c (grokfield): Same.\n        (coerce_delete_type): Same.\n        * except.c (is_admissible_throw_operand_or_catch_parameter): Same.\n        * friend.c (do_friend): Quote C++ tokens.\n        * init.c (build_new_1): Quote keywords, operators, and types\n        in diagnostics.\n        (build_vec_delete_1): Same.\n        (build_delete): Same.\n        * lex.c (parse_strconst_pragma): Same.\n        (handle_pragma_implementation): Same.\n        (unqualified_fn_lookup_error): Same.\n        * mangle.c (write_type): Same.\n        * method.c (defaulted_late_check): Avoid two consecutive punctuators.\n        * name-lookup.c (cp_binding_level_debug): Remove a trailing newline.\n        (pop_everything): Same.\n        * parser.c (cp_lexer_start_debugging): Quote a macro name.\n        in a diagnostic\n        (cp_lexer_stop_debugging): Same.\n        (cp_parser_userdef_numeric_literal): Quote a C++ header name\n        in a diagnostic.\n        (cp_parser_nested_name_specifier_opt): Quote keywords, operators,\n        and types in diagnostics.\n        (cp_parser_question_colon_clause): Same.\n        (cp_parser_asm_definition): Same.\n        (cp_parser_init_declarator): Same.\n        (cp_parser_template_declaration_after_parameters): Avoid capitalizing\n        a sentence in a diagnostic.\n        (cp_parser_omp_declare_reduction): Quote keywords, operators, and types\n        in diagnostics.\n        (cp_parser_transaction): Same.\n        * pt.c (maybe_process_partial_specialization): Replace second call\n        to permerror with inform for consistency with other uses.\n        (expand_integer_pack): Quote keywords, operators, and types\n        in diagnostics.\n        * rtti.c (get_typeid): Quote keywords, operators, and types\n        in diagnostics.\n        (build_dynamic_cast_1): Same.\n        * semantics.c (finish_asm_stmt): Same.\n        (finish_label_decl): Same.\n        (finish_bases): Same.\n        (finish_offsetof): Same.\n        (cp_check_omp_declare_reduction): Same.\n        (finish_decltype_type): Same.\n        * tree.c (handle_init_priority_attribute): Same.  Add detail\n        to diagnostics.\n        (maybe_warn_zero_as_null_pointer_constant): Same.\n        * typeck.c (cp_build_binary_op): Quote keywords, operators, and types\n        in diagnostics.\n        (cp_build_unary_op): Same.\n        (check_for_casting_away_constness): Same.\n        (build_static_cast): Same.\n        (build_const_cast_1): Same.\n        (maybe_warn_about_returning_address_of_local): Same.\n        (check_return_expr): Same.\n        * typeck2.c (abstract_virtuals_error_sfinae): Same.\n        (digest_init_r): Replace a tab with spaces in a diagnostic.\n        (build_functional_cast): Quote keywords, operators, and types\n        in diagnostics.\n\ngcc/d/ChangeLog:\n\n        * d-builtins.cc (d_init_builtins): Quote keywords, operators,\n        and types in diagnostics.\n        * d-codegen.cc (get_array_length): Same.  Replace can't with cannot.\n        * d-convert.cc (convert_expr): Same.\n        * d-frontend.cc (getTypeInfoType): Quote an option name in\n        a diagnostic.\n        * d-lang.cc (d_handle_option): Same.\n        (d_parse_file): Same.\n        * decl.cc: Remove a trailing period from a diagnostic.\n        * expr.cc: Use a directive for an apostrophe.\n        * toir.cc: Quote keywords, operators, and types in diagnostics.\n        * typeinfo.cc (build_typeinfo): Quote an option name in a diagnostic.\n\ngcc/fortran/ChangeLog:\n\n\t* gfortranspec.c (append_arg): Spell out the word \"argument.\"\n\ngcc/ChangeLog:\n\n        * config/i386/i386-expand.c (get_element_number): Quote keywords\n        and other internal names in diagnostics.  Adjust other diagnostic\n        formatting issues noted by -Wformat-diag.\n        * config/i386/i386-features.c\n        (ix86_mangle_function_version_assembler_name): Same.\n        * config/i386/i386-options.c (ix86_handle_abi_attribute): Same.\n        * config/i386/i386.c (ix86_function_type_abi): Same.\n        (ix86_function_ms_hook_prologue): Same.\n        (classify_argument): Same.\n        (ix86_expand_prologue): Same.\n        (ix86_md_asm_adjust): Same.\n        (ix86_memmodel_check): Same.\n\ngcc/ChangeLog:\n\n        * builtins.c (expand_builtin_atomic_always_lock_free): Quote\n        identifiers, keywords, operators, and types in diagnostics.  Correct\n        quoting, spelling, and sentence capitalization issues.\n        (expand_builtin_atomic_is_lock_free): Same.\n        (fold_builtin_next_arg): Same.\n        * cfgexpand.c (expand_one_var): Same.\n        (tree_conflicts_with_clobbers_p): Same.\n        (expand_asm_stmt): Same.\n        (verify_loop_structure): Same.\n        * cgraphunit.c (process_function_and_variable_attributes): Same.\n        * collect-utils.c (collect_execute): Same.\n        * collect2.c (maybe_run_lto_and_relink): Same.\n        (is_lto_object_file): Same.\n        (scan_prog_file): Same.\n        * convert.c (convert_to_real_1): Same.\n        * dwarf2out.c (dwarf2out_begin_prologue): Same.\n        * except.c (verify_eh_tree): Same.\n        * gcc.c (execute): Same.\n        (eval_spec_function): Same.\n        (run_attempt): Same.\n        (driver::set_up_specs): Same.\n        (compare_debug_auxbase_opt_spec_function): Same.\n        * gcov-tool.c (unlink_gcda_file): Same.\n        (do_merge): Same.\n        (do_rewrite): Same.\n        * gcse.c (gcse_or_cprop_is_too_expensive): Same.\n        * gimplify.c (gimplify_asm_expr): Same.\n        (gimplify_adjust_omp_clauses): Same.\n        * hsa-gen.c (gen_hsa_addr_insns): Same.\n        (gen_hsa_insns_for_load): Same.\n        (gen_hsa_cmp_insn_from_gimple): Same.\n        (gen_hsa_insns_for_operation_assignment): Same.\n        (gen_get_level): Same.\n        (gen_hsa_alloca): Same.\n        (omp_simple_builtin::generate): Same.\n        (gen_hsa_atomic_for_builtin): Same.\n        (gen_hsa_insns_for_call): Same.\n        * input.c (dump_location_info): Same.\n        * ipa-devirt.c (compare_virtual_tables): Same.\n        * ira.c (ira_setup_eliminable_regset): Same.\n        * lra-assigns.c (lra_assign): Same.\n        * lra-constraints.c (lra_constraints): Same.\n        * lto-streamer-in.c (lto_input_mode_table): Same.\n        * lto-wrapper.c (get_options_from_collect_gcc_options): Same.\n        (merge_and_complain): Same.\n        (compile_offload_image): Same.\n        (compile_images_for_offload_targets): Same.\n        (debug_objcopy): Same.\n        (run_gcc): Same.\n        (main): Same.\n        * opts.c (print_specific_help): Same.\n        (parse_no_sanitize_attribute): Same.\n        (print_help): Same.\n        (handle_param): Same.\n        * plugin.c (add_new_plugin): Same.\n        (parse_plugin_arg_opt): Same.\n        (try_init_one_plugin): Same.\n        * print-rtl.c (debug_bb_n_slim): Quote identifiers, keywords,\n        operators, and types in diagnostics.  Correct quoting and spelling\n        issues.\n        * read-rtl-function.c (parse_edge_flag_token): Same.\n        (function_reader::parse_enum_value): Same.\n        * reg-stack.c (check_asm_stack_operands): Same.\n        * regcprop.c (validate_value_data): Same.\n        * sched-rgn.c (make_pass_sched_fusion): Same.\n        * stmt.c (check_unique_operand_names): Same.\n        * targhooks.c (default_target_option_pragma_parse): Same.\n        * tlink.c (recompile_files): Same.\n        * toplev.c (process_options): Same.\n        (do_compile): Same.\n        * trans-mem.c (diagnose_tm_1): Same.\n        (ipa_tm_scan_irr_block): Same.\n        (ipa_tm_diagnose_transaction): Same.\n        * tree-cfg.c (verify_address): Same.  Use get_tree_code_name to\n        format a tree code name in a diagnostic.\n        (verify_types_in_gimple_min_lval): Same.\n        (verify_types_in_gimple_reference): Same.\n        (verify_gimple_call): Same.\n        (verify_gimple_assign_unary): Same.\n        (verify_gimple_assign_binary): Same.\n        (verify_gimple_assign_ternary): Same.\n        (verify_gimple_assign_single): Same.\n        (verify_gimple_switch): Same.\n        (verify_gimple_label): Same.\n        (verify_gimple_phi): Same.\n        (verify_gimple_in_seq): Same.\n        (verify_eh_throw_stmt_node): Same.\n        (collect_subblocks): Same.\n        (gimple_verify_flow_info): Same.\n        (do_warn_unused_result): Same.\n        * tree-inline.c (expand_call_inline): Same.\n        * tree-into-ssa.c (update_ssa): Same.\n        * tree.c (tree_int_cst_elt_check_failed): Same.\n        (tree_vec_elt_check_failed): Same.\n        (omp_clause_operand_check_failed): Same.\n        (verify_type_variant): Same.\n        (verify_type): Same.\n        * value-prof.c (verify_histograms): Same.\n        * varasm.c (assemble_start_function): Same.\n\ngcc/lto/ChangeLog:\n\n        * lto-dump.c (lto_main): Same.\n        * lto.c (stream_out): Same.\n\ngcc/objc/ChangeLog:\n\n        * objc-act.c (objc_begin_catch_clause): Quote keywords and options\n        in diagnostics.\n        (objc_build_throw_stmt): Same.\n        (objc_finish_message_expr): Same.\n        (get_super_receiver): Same.\n        * objc-next-runtime-abi-01.c (objc_next_runtime_abi_01_init): Spell\n        out \"less than\" in English./\n        * objc-next-runtime-abi-02.c (objc_next_runtime_abi_02_init): Spell\n        out \"greater\" in English.\n\ngcc/testsuite/ChangeLog:\n\n        * c-c++-common/Wbool-operation-1.c: Adjust text of expected diagnostics.\n        * c-c++-common/Wvarargs-2.c: Same.\n        * c-c++-common/Wvarargs.c: Same.\n        * c-c++-common/pr51768.c: Same.\n        * c-c++-common/tm/inline-asm.c: Same.\n        * c-c++-common/tm/safe-1.c: Same.\n        * g++.dg/asm-qual-1.C: Same.\n        * g++.dg/asm-qual-3.C: Same.\n        * g++.dg/conversion/dynamic1.C: Same.\n        * g++.dg/cpp0x/constexpr-89599.C: Same.\n        * g++.dg/cpp0x/constexpr-cast.C: Same.\n        * g++.dg/cpp0x/constexpr-shift1.C: Same.\n        * g++.dg/cpp0x/lambda/lambda-conv11.C: Same.\n        * g++.dg/cpp0x/nullptr04.C: Same.\n        * g++.dg/cpp0x/static_assert12.C: Same.\n        * g++.dg/cpp0x/static_assert8.C: Same.\n        * g++.dg/cpp1y/lambda-conv1.C: Same.\n        * g++.dg/cpp1y/pr79393-3.C: Same.\n        * g++.dg/cpp1y/static_assert1.C: Same.\n        * g++.dg/cpp1z/constexpr-if4.C: Same.\n        * g++.dg/cpp1z/constexpr-if5.C: Same.\n        * g++.dg/cpp1z/constexpr-if9.C: Same.\n        * g++.dg/eh/goto2.C: Same.\n        * g++.dg/eh/goto3.C: Same.\n        * g++.dg/expr/static_cast8.C: Same.\n        * g++.dg/ext/flexary5.C: Same.\n        * g++.dg/ext/utf-array-short-wchar.C: Same.\n        * g++.dg/ext/utf-array.C: Same.\n        * g++.dg/ext/utf8-2.C: Same.\n        * g++.dg/gomp/loop-4.C: Same.\n        * g++.dg/gomp/macro-4.C: Same.\n        * g++.dg/gomp/udr-1.C: Same.\n        * g++.dg/init/initializer-string-too-long.C: Same.\n        * g++.dg/other/offsetof9.C: Same.\n        * g++.dg/ubsan/pr63956.C: Same.\n        * g++.dg/warn/Wbool-operation-1.C: Same.\n        * g++.dg/warn/Wtype-limits-Wextra.C: Same.\n        * g++.dg/warn/Wtype-limits.C: Same.\n        * g++.dg/wrappers/pr88680.C: Same.\n        * g++.old-deja/g++.mike/eh55.C: Same.\n        * gcc.dg/Wsign-compare-1.c: Same.\n        * gcc.dg/Wtype-limits-Wextra.c: Same.\n        * gcc.dg/Wtype-limits.c: Same.\n        * gcc.dg/Wunknownprag.c: Same.\n        * gcc.dg/Wunsuffixed-float-constants-1.c: Same.\n        * gcc.dg/asm-6.c: Same.\n        * gcc.dg/asm-qual-1.c: Same.\n        * gcc.dg/cast-1.c: Same.\n        * gcc.dg/cast-2.c: Same.\n        * gcc.dg/cast-3.c: Same.\n        * gcc.dg/cpp/source_date_epoch-2.c: Same.\n        * gcc.dg/debug/pr85252.c: Same.\n        * gcc.dg/dfp/cast-bad.c: Same.\n        * gcc.dg/format/gcc_diag-1.c: Same.\n        * gcc.dg/format/gcc_diag-11.c: Same.New test.\n        * gcc.dg/gcc_diag-11.c: Same.New test.\n        * gcc.dg/gnu-cond-expr-2.c: Same.\n        * gcc.dg/gnu-cond-expr-3.c: Same.\n        * gcc.dg/gomp/macro-4.c: Same.\n        * gcc.dg/init-bad-1.c: Same.\n        * gcc.dg/init-bad-2.c: Same.\n        * gcc.dg/init-bad-3.c: Same.\n        * gcc.dg/pr27528.c: Same.\n        * gcc.dg/pr48552-1.c: Same.\n        * gcc.dg/pr48552-2.c: Same.\n        * gcc.dg/pr59846.c: Same.\n        * gcc.dg/pr61096-1.c: Same.\n        * gcc.dg/pr8788-1.c: Same.\n        * gcc.dg/pr90082.c: Same.\n        * gcc.dg/simd-2.c: Same.\n        * gcc.dg/spellcheck-params-2.c: Same.\n        * gcc.dg/spellcheck-params.c: Same.\n        * gcc.dg/strlenopt-49.c: Same.\n        * gcc.dg/tm/pr52141.c: Same.\n        * gcc.dg/torture/pr51106-1.c: Same.\n        * gcc.dg/torture/pr51106-2.c: Same.\n        * gcc.dg/utf-array-short-wchar.c: Same.\n        * gcc.dg/utf-array.c: Same.\n        * gcc.dg/utf8-2.c: Same.\n        * gcc.dg/warn-sprintf-no-nul.c: Same.\n        * gcc.target/i386/asm-flag-0.c: Same.\n        * gcc.target/i386/inline_error.c: Same.\n        * gcc.target/i386/pr30848.c: Same.\n        * gcc.target/i386/pr39082-1.c: Same.\n        * gcc.target/i386/pr39678.c: Same.\n        * gcc.target/i386/pr57756.c: Same.\n        * gcc.target/i386/pr68843-1.c: Same.\n        * gcc.target/i386/pr79804.c: Same.\n        * gcc.target/i386/pr82673.c: Same.\n        * obj-c++.dg/class-protocol-1.mm: Same.\n        * obj-c++.dg/exceptions-3.mm: Same.\n        * obj-c++.dg/exceptions-4.mm: Same.\n        * obj-c++.dg/exceptions-5.mm: Same.\n        * obj-c++.dg/exceptions-6.mm: Same.\n        * obj-c++.dg/method-12.mm: Same.\n        * obj-c++.dg/method-13.mm: Same.\n        * obj-c++.dg/method-6.mm: Same.\n        * obj-c++.dg/method-7.mm: Same.\n        * obj-c++.dg/method-9.mm: Same.\n        * obj-c++.dg/method-lookup-1.mm: Same.\n        * obj-c++.dg/proto-lossage-4.mm: Same.\n        * obj-c++.dg/protocol-qualifier-2.mm: Same.\n        * objc.dg/call-super-2.m: Same.\n        * objc.dg/class-protocol-1.m: Same.\n        * objc.dg/desig-init-1.m: Same.\n        * objc.dg/exceptions-3.m: Same.\n        * objc.dg/exceptions-4.m: Same.\n        * objc.dg/exceptions-5.m: Same.\n        * objc.dg/exceptions-6.m: Same.\n        * objc.dg/method-19.m: Same.\n        * objc.dg/method-2.m: Same.\n        * objc.dg/method-5.m: Same.\n        * objc.dg/method-6.m: Same.\n        * objc.dg/method-7.m: Same.\n        * objc.dg/method-lookup-1.m: Same.\n        * objc.dg/proto-hier-1.m: Same.\n        * objc.dg/proto-lossage-4.m: Same.\n\nFrom-SVN: r271338", "tree": {"sha": "824792abb43c3e017801b6e124f310ffffc36c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/824792abb43c3e017801b6e124f310ffffc36c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6df6f67a283c62f0590d88b39d309b2c37cd7de1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df6f67a283c62f0590d88b39d309b2c37cd7de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df6f67a283c62f0590d88b39d309b2c37cd7de1"}], "stats": {"total": 2820, "additions": 1767, "deletions": 1053}, "files": [{"sha": "0b4e2455e7c67e0a636832e653c9dbe35327c22e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,120 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * builtins.c (expand_builtin_atomic_always_lock_free): Quote\n+        identifiers, keywords, operators, and types in diagnostics.  Correct\n+        quoting, spelling, and sentence capitalization issues.\n+        (expand_builtin_atomic_is_lock_free): Same.\n+        (fold_builtin_next_arg): Same.\n+        * cfgexpand.c (expand_one_var): Same.\n+        (tree_conflicts_with_clobbers_p): Same.\n+        (expand_asm_stmt): Same.\n+        (verify_loop_structure): Same.\n+        * cgraphunit.c (process_function_and_variable_attributes): Same.\n+        * collect-utils.c (collect_execute): Same.\n+        * collect2.c (maybe_run_lto_and_relink): Same.\n+        (is_lto_object_file): Same.\n+        (scan_prog_file): Same.\n+        * convert.c (convert_to_real_1): Same.\n+        * dwarf2out.c (dwarf2out_begin_prologue): Same.\n+        * except.c (verify_eh_tree): Same.\n+        * gcc.c (execute): Same.\n+        (eval_spec_function): Same.\n+        (run_attempt): Same.\n+        (driver::set_up_specs): Same.\n+        (compare_debug_auxbase_opt_spec_function): Same.\n+        * gcov-tool.c (unlink_gcda_file): Same.\n+        (do_merge): Same.\n+        (do_rewrite): Same.\n+        * gcse.c (gcse_or_cprop_is_too_expensive): Same.\n+        * gimplify.c (gimplify_asm_expr): Same.\n+        (gimplify_adjust_omp_clauses): Same.\n+        * hsa-gen.c (gen_hsa_addr_insns): Same.\n+        (gen_hsa_insns_for_load): Same.\n+        (gen_hsa_cmp_insn_from_gimple): Same.\n+        (gen_hsa_insns_for_operation_assignment): Same.\n+        (gen_get_level): Same.\n+        (gen_hsa_alloca): Same.\n+        (omp_simple_builtin::generate): Same.\n+        (gen_hsa_atomic_for_builtin): Same.\n+        (gen_hsa_insns_for_call): Same.\n+        * input.c (dump_location_info): Same.\n+        * ipa-devirt.c (compare_virtual_tables): Same.\n+        * ira.c (ira_setup_eliminable_regset): Same.\n+        * lra-assigns.c (lra_assign): Same.\n+        * lra-constraints.c (lra_constraints): Same.\n+        * lto-streamer-in.c (lto_input_mode_table): Same.\n+        * lto-wrapper.c (get_options_from_collect_gcc_options): Same.\n+        (merge_and_complain): Same.\n+        (compile_offload_image): Same.\n+        (compile_images_for_offload_targets): Same.\n+        (debug_objcopy): Same.\n+        (run_gcc): Same.\n+        (main): Same.\n+        * opts.c (print_specific_help): Same.\n+        (parse_no_sanitize_attribute): Same.\n+        (print_help): Same.\n+        (handle_param): Same.\n+        * plugin.c (add_new_plugin): Same.\n+        (parse_plugin_arg_opt): Same.\n+        (try_init_one_plugin): Same.\n+        * print-rtl.c (debug_bb_n_slim): Quote identifiers, keywords,\n+        operators, and types in diagnostics.  Correct quoting and spelling\n+        issues.\n+        * read-rtl-function.c (parse_edge_flag_token): Same.\n+        (function_reader::parse_enum_value): Same.\n+        * reg-stack.c (check_asm_stack_operands): Same.\n+        * regcprop.c (validate_value_data): Same.\n+        * sched-rgn.c (make_pass_sched_fusion): Same.\n+        * stmt.c (check_unique_operand_names): Same.\n+        * targhooks.c (default_target_option_pragma_parse): Same.\n+        * tlink.c (recompile_files): Same.\n+        * toplev.c (process_options): Same.\n+        (do_compile): Same.\n+        * trans-mem.c (diagnose_tm_1): Same.\n+        (ipa_tm_scan_irr_block): Same.\n+        (ipa_tm_diagnose_transaction): Same.\n+        * tree-cfg.c (verify_address): Same.  Use get_tree_code_name to\n+        format a tree code name in a diagnostic.\n+        (verify_types_in_gimple_min_lval): Same.\n+        (verify_types_in_gimple_reference): Same.\n+        (verify_gimple_call): Same.\n+        (verify_gimple_assign_unary): Same.\n+        (verify_gimple_assign_binary): Same.\n+        (verify_gimple_assign_ternary): Same.\n+        (verify_gimple_assign_single): Same.\n+        (verify_gimple_switch): Same.\n+        (verify_gimple_label): Same.\n+        (verify_gimple_phi): Same.\n+        (verify_gimple_in_seq): Same.\n+        (verify_eh_throw_stmt_node): Same.\n+        (collect_subblocks): Same.\n+        (gimple_verify_flow_info): Same.\n+        (do_warn_unused_result): Same.\n+        * tree-inline.c (expand_call_inline): Same.\n+        * tree-into-ssa.c (update_ssa): Same.\n+        * tree.c (tree_int_cst_elt_check_failed): Same.\n+        (tree_vec_elt_check_failed): Same.\n+        (omp_clause_operand_check_failed): Same.\n+        (verify_type_variant): Same.\n+        (verify_type): Same.\n+        * value-prof.c (verify_histograms): Same.\n+        * varasm.c (assemble_start_function): Same.\n+\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * config/i386/i386-expand.c (get_element_number): Quote keywords\n+        and other internal names in diagnostics.  Adjust other diagnostic\n+        formatting issues noted by -Wformat-diag.\n+        * config/i386/i386-features.c\n+        (ix86_mangle_function_version_assembler_name): Same.\n+        * config/i386/i386-options.c (ix86_handle_abi_attribute): Same.\n+        * config/i386/i386.c (ix86_function_type_abi): Same.\n+        (ix86_function_ms_hook_prologue): Same.\n+        (classify_argument): Same.\n+        (ix86_expand_prologue): Same.\n+        (ix86_md_asm_adjust): Same.\n+        (ix86_memmodel_check): Same.\n+\n 2019-05-17  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>\n \n \t* config/mips/mips.c (mips_dwarf_frame_reg_mode): Replace"}, {"sha": "ccea2b9b26fe523a0daec7ac4792c92cad991b36", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,8 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * gcc-interface/trans.c (check_inlining_for_nested_subprog): Quote\n+        reserved names.\n+\n 2019-05-08  Arnaud Charlet  <charlet@adacore.com>\n \n \t* standard.ads.h: New file."}, {"sha": "932a54ca111af12595255759edb6c96aabc2e580", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2024,12 +2024,13 @@ check_inlining_for_nested_subprog (tree fndecl)\n \n       if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (parent_decl)))\n \t{\n-\t  error_at (loc1, \"subprogram %q+F not marked Inline_Always\", fndecl);\n+\t  error_at (loc1, \"subprogram %q+F not marked %<Inline_Always%>\",\n+\t\t    fndecl);\n \t  error_at (loc2, \"parent subprogram cannot be inlined\");\n \t}\n       else\n \t{\n-\t  warning_at (loc1, OPT_Winline, \"subprogram %q+F not marked Inline\",\n+\t  warning_at (loc1, OPT_Winline, \"subprogram %q+F not marked %<Inline%>\",\n \t\t      fndecl);\n \t  warning_at (loc2, OPT_Winline, \"parent subprogram cannot be inlined\");\n \t}"}, {"sha": "1fdc0f15ba6ea03a47dffd9b5f13048fa41976a8", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,12 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * brigfrontend/brig-control-handler.cc\n+        (brig_directive_control_handler::operator): Remove trailing newline\n+        from a diagnostic.\n+        * brigfrontend/brig-module-handler.cc\n+        (brig_directive_module_handler::operator): Remove a duplicated space\n+        from a diagnostic.\n+\n 2019-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "4374c469a39a535c4432d735ddd3e22aff756855", "filename": "gcc/brig/brigfrontend/brig-control-handler.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-control-handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-control-handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-control-handler.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -102,7 +102,7 @@ brig_directive_control_handler::operator () (const BrigBase *base)\n       /* Unimplemented.  */\n       break;\n     default:\n-      sorry (\"Unsupported control directive %x.\\n\", inst->control);\n+      sorry (\"Unsupported control directive %x.\", inst->control);\n     }\n   return base->byteCount;\n }"}, {"sha": "e1551b93812ff5f0003f6324356d53774db15393", "filename": "gcc/brig/brigfrontend/brig-module-handler.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-module-handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-module-handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-module-handler.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -28,10 +28,10 @@ brig_directive_module_handler::operator () (const BrigBase *base)\n   const BrigDirectiveModule* mod = (const BrigDirectiveModule*)base;\n   m_parent.m_module_name = m_parent.get_string (mod->name).substr (1);\n   if (mod->hsailMajor != 1 || mod->hsailMinor != 0)\n-    fatal_error (UNKNOWN_LOCATION, PHSA_ERROR_PREFIX_INCOMPATIBLE_MODULE \" \"\n+    fatal_error (UNKNOWN_LOCATION, PHSA_ERROR_PREFIX_INCOMPATIBLE_MODULE\n \t\t \"HSAIL version not supported. HSAIL 1.0 required.\");\n   if (mod->machineModel != BRIG_MACHINE_LARGE)\n-    fatal_error (UNKNOWN_LOCATION, PHSA_ERROR_PREFIX_INCOMPATIBLE_MODULE \" \"\n+    fatal_error (UNKNOWN_LOCATION, PHSA_ERROR_PREFIX_INCOMPATIBLE_MODULE\n \t\t \"Only HSA 'large' machine model supported.\");\n   /* Do not check for the profile as the runtime conformance suite tests\n      with 'full' profile BRIGs even though they don't use any full profile"}, {"sha": "0456a9ef646b83f37d3d6dc3b09b1ef22df05c32", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -6784,7 +6784,7 @@ expand_builtin_atomic_always_lock_free (tree exp)\n \n   if (TREE_CODE (arg0) != INTEGER_CST)\n     {\n-      error (\"non-constant argument 1 to __atomic_always_lock_free\");\n+      error (\"non-constant argument 1 to %qs\", \"__atomic_always_lock_free\");\n       return const0_rtx;\n     }\n \n@@ -6826,7 +6826,7 @@ expand_builtin_atomic_is_lock_free (tree exp)\n \n   if (!INTEGRAL_TYPE_P (TREE_TYPE (arg0)))\n     {\n-      error (\"non-integer argument 1 to __atomic_is_lock_free\");\n+      error (\"non-integer argument 1 to %qs\", \"__atomic_is_lock_free\");\n       return NULL_RTX;\n     }\n \n@@ -10224,7 +10224,7 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n \n   if (!stdarg_p (fntype))\n     {\n-      error (\"%<va_start%> used in function with fixed args\");\n+      error (\"%<va_start%> used in function with fixed arguments\");\n       return true;\n     }\n "}, {"sha": "47c1d3d51f50e7889bda3e2924f52fcb6e3c7ab5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,36 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * c-attribs.c (handle_no_sanitize_attribute): Quote identifiers,\n+        keywords, operators, and types in diagnostics.\n+        (handle_scalar_storage_order_attribute): Same.\n+        (handle_mode_attribute): Same.\n+        (handle_visibility_attribute): Same.\n+        (handle_assume_aligned_attribute): Same.\n+        (handle_no_split_stack_attribute): Same.\n+        * c-common.c (shorten_compare): Same.\n+        (c_common_truthvalue_conversion): Same.\n+        (cb_get_source_date_epoch): Same.\n+        * c-lex.c (cb_def_pragma): Quote keywords, operators, and types\n+        in diagnostics.\n+        (interpret_float): Same.\n+        * c-omp.c (c_finish_omp_for): Same.\n+        * c-opts.c (c_common_post_options): Same.\n+        * c-pch.c (c_common_pch_pragma): Same.\n+        * c-pragma.c (pop_alignment): Same.\n+        (handle_pragma_pack): Same.\n+        (apply_pragma_weak): Same.\n+        (handle_pragma_weak): Same.\n+        (handle_pragma_scalar_storage_order): Same.\n+        (handle_pragma_redefine_extname): Same.\n+        (add_to_renaming_pragma_list): Same.\n+        (maybe_apply_renaming_pragma): Same.\n+        (push_visibility): Same.\n+        (handle_pragma_visibility): Same.\n+        (handle_pragma_optimize): Same.\n+        (handle_pragma_message): Same.\n+        * c-warn.c (warn_for_omitted_condop): Same.\n+        (lvalue_error): Same.\n+\n 2019-05-15  Richard Biener  <rguenther@suse.de>\n \n \tPR c/90474"}, {"sha": "12c0b9bfb54363398f1ecab84b22384583c53582", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -891,7 +891,7 @@ handle_no_sanitize_attribute (tree *node, tree name, tree args, int,\n       tree id = TREE_VALUE (args);\n       if (TREE_CODE (id) != STRING_CST)\n \t{\n-\t  error (\"no_sanitize argument not a string\");\n+\t  error (\"%qE argument not a string\", name);\n \t  return NULL_TREE;\n \t}\n \n@@ -1418,8 +1418,8 @@ handle_scalar_storage_order_attribute (tree *node, tree name, tree args,\n \n   if (BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n     {\n-      error (\"scalar_storage_order is not supported because endianness \"\n-\t    \"is not uniform\");\n+      error (\"%qE attribute is not supported because endianness is not uniform\",\n+\t     name);\n       return NULL_TREE;\n     }\n \n@@ -1435,8 +1435,8 @@ handle_scalar_storage_order_attribute (tree *node, tree name, tree args,\n \treverse = BYTES_BIG_ENDIAN;\n       else\n \t{\n-\t  error (\"scalar_storage_order argument must be one of \\\"big-endian\\\"\"\n-\t\t \" or \\\"little-endian\\\"\");\n+\t  error (\"attribute %qE argument must be one of %qs or %qs\",\n+\t\t name, \"big-endian\", \"little-endian\");\n \t  return NULL_TREE;\n \t}\n \n@@ -1759,9 +1759,9 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \tcase MODE_VECTOR_ACCUM:\n \tcase MODE_VECTOR_UACCUM:\n \t  warning (OPT_Wattributes, \"specifying vector types with \"\n-\t\t   \"__attribute__ ((mode)) is deprecated\");\n-\t  warning (OPT_Wattributes,\n-\t\t   \"use __attribute__ ((vector_size)) instead\");\n+\t\t   \"%<__attribute__ ((mode))%> is deprecated\");\n+\t  inform (input_location,\n+\t\t  \"use %<__attribute__ ((vector_size))%> instead\");\n \t  valid_mode = vector_mode_valid_p (mode);\n \t  break;\n \n@@ -2671,7 +2671,8 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n     vis = VISIBILITY_PROTECTED;\n   else\n     {\n-      error (\"visibility argument must be one of \\\"default\\\", \\\"hidden\\\", \\\"protected\\\" or \\\"internal\\\"\");\n+      error (\"attribute %qE argument must be one of %qs, %qs, %qs, or %qs\",\n+\t     name, \"default\", \"hidden\", \"protected\", \"internal\");\n       vis = VISIBILITY_DEFAULT;\n     }\n \n@@ -2935,8 +2936,8 @@ handle_assume_aligned_attribute (tree *node, tree name, tree args, int,\n \t  /* The misalignment specified by the second argument\n \t     must be non-negative and less than the alignment.  */\n \t  warning (OPT_Wattributes,\n-\t\t   \"%qE attribute argument %E is not in the range [0, %E)\",\n-\t\t   name, val, align);\n+\t\t   \"%qE attribute argument %E is not in the range [0, %wu]\",\n+\t\t   name, val, tree_to_uhwi (align) - 1);\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n@@ -3083,7 +3084,7 @@ handle_no_limit_stack_attribute (tree *node, tree name,\n   else if (DECL_INITIAL (decl))\n     {\n       error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\"can%'t set %qE attribute after definition\", name);\n+\t\t\"cannot set %qE attribute after definition\", name);\n       *no_add_attrs = true;\n     }\n   else\n@@ -3974,7 +3975,7 @@ handle_no_split_stack_attribute (tree *node, tree name,\n   else if (DECL_INITIAL (decl))\n     {\n       error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\"can%'t set %qE attribute after definition\", name);\n+\t\t\"cannot set %qE attribute after definition\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -3985,13 +3986,13 @@ handle_no_split_stack_attribute (tree *node, tree name,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_returns_nonnull_attribute (tree *node, tree, tree, int,\n+handle_returns_nonnull_attribute (tree *node, tree name, tree, int,\n \t\t\t\t  bool *no_add_attrs)\n {\n   // Even without a prototype we still have a return type we can check.\n   if (TREE_CODE (TREE_TYPE (*node)) != POINTER_TYPE)\n     {\n-      error (\"returns_nonnull attribute on a function not returning a pointer\");\n+      error (\"%qE attribute on a function not returning a pointer\", name);\n       *no_add_attrs = true;\n     }\n   return NULL_TREE;"}, {"sha": "10ae91e427ffd9375bf1f2b18ea6c3bdf6f5a7a5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3063,14 +3063,16 @@ shorten_compare (location_t loc, tree *op0_ptr, tree *op1_ptr,\n \t    case GE_EXPR:\n \t      if (warn)\n \t\twarning_at (loc, OPT_Wtype_limits,\n-\t\t\t    \"comparison of unsigned expression >= 0 is always true\");\n+\t\t\t    \"comparison of unsigned expression in %<>= 0%> \"\n+\t\t\t    \"is always true\");\n \t      value = truthvalue_true_node;\n \t      break;\n \n \t    case LT_EXPR:\n \t      if (warn)\n \t\twarning_at (loc, OPT_Wtype_limits,\n-\t\t\t    \"comparison of unsigned expression < 0 is always false\");\n+\t\t\t    \"comparison of unsigned expression in %<< 0%> \"\n+\t\t\t    \"is always false\");\n \t      value = truthvalue_false_node;\n \t      break;\n \n@@ -3379,7 +3381,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n       if (TREE_CODE (TREE_TYPE (expr)) == INTEGER_TYPE\n \t  && !TYPE_UNSIGNED (TREE_TYPE (expr)))\n \twarning_at (EXPR_LOCATION (expr), OPT_Wint_in_bool_context,\n-\t\t    \"%<<<%> in boolean context, did you mean %<<%> ?\");\n+\t\t    \"%<<<%> in boolean context, did you mean %<<%>?\");\n       break;\n \n     case COND_EXPR:\n@@ -3395,7 +3397,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \t      && (!integer_onep (val1)\n \t\t  || !integer_onep (val2)))\n \t    warning_at (EXPR_LOCATION (expr), OPT_Wint_in_bool_context,\n-\t\t\t\"?: using integer constants in boolean context, \"\n+\t\t\t\"%<?:%> using integer constants in boolean context, \"\n \t\t\t\"the expression will always evaluate to %<true%>\");\n \t  else if ((TREE_CODE (val1) == INTEGER_CST\n \t\t    && !integer_zerop (val1)\n@@ -3404,7 +3406,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \t\t       && !integer_zerop (val2)\n \t\t       && !integer_onep (val2)))\n \t    warning_at (EXPR_LOCATION (expr), OPT_Wint_in_bool_context,\n-\t\t\t\"?: using integer constants in boolean context\");\n+\t\t\t\"%<?:%> using integer constants in boolean context\");\n \t}\n       /* Distribute the conversion into the arms of a COND_EXPR.  */\n       if (c_dialect_cxx ())\n@@ -8259,9 +8261,9 @@ cb_get_source_date_epoch (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   if (errno != 0 || endptr == source_date_epoch || *endptr != '\\0'\n       || epoch < 0 || epoch > MAX_SOURCE_DATE_EPOCH)\n     {\n-      error_at (input_location, \"environment variable SOURCE_DATE_EPOCH must \"\n+      error_at (input_location, \"environment variable %qs must \"\n \t        \"expand to a non-negative integer less than or equal to %wd\",\n-\t\tMAX_SOURCE_DATE_EPOCH);\n+\t\t\"SOURCE_DATE_EPOCH\", MAX_SOURCE_DATE_EPOCH);\n       return (time_t) -1;\n     }\n "}, {"sha": "851fd704e5d37a7b0bffee7064cfa2d20c51c7f5", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -258,7 +258,7 @@ cb_def_pragma (cpp_reader *pfile, location_t loc)\n \t    name = cpp_token_as_text (pfile, s);\n \t}\n \n-      warning_at (fe_loc, OPT_Wunknown_pragmas, \"ignoring #pragma %s %s\",\n+      warning_at (fe_loc, OPT_Wunknown_pragmas, \"ignoring %<#pragma %s %s%>\",\n \t\t  space, name);\n     }\n }\n@@ -818,7 +818,7 @@ interpret_float (const cpp_token *token, unsigned int flags,\n       if (((flags & CPP_N_HEX) == 0) && ((flags & CPP_N_IMAGINARY) == 0))\n \t{\n \t  warning (OPT_Wunsuffixed_float_constants,\n-\t\t   \"unsuffixed float constant\");\n+\t\t   \"unsuffixed floating constant\");\n \t  if (float_const_decimal64_p ())\n \t    flags |= CPP_N_DFLOAT;\n \t}"}, {"sha": "5645e9d4fda9fb0fbdfa1c583cce0752deb4fe14", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -974,7 +974,7 @@ c_finish_omp_for (location_t locus, enum tree_code code, tree declv,\n \t\t\t\t{\n \t\t\t\t  error_at (elocus,\n \t\t\t\t\t    \"increment is not constant 1 or \"\n-\t\t\t\t\t    \"-1 for != condition\");\n+\t\t\t\t\t    \"-1 for %<!=%> condition\");\n \t\t\t\t  fail = true;\n \t\t\t\t}\n \t\t\t    }\n@@ -992,7 +992,7 @@ c_finish_omp_for (location_t locus, enum tree_code code, tree declv,\n \t\t\t{\n \t\t\t  error_at (elocus,\n \t\t\t\t    \"increment is not constant 1 or -1 for\"\n-\t\t\t\t    \" != condition\");\n+\t\t\t\t    \" %<!=%> condition\");\n \t\t\t  fail = true;\n \t\t\t}\n \t\t    }"}, {"sha": "954b6a494f85b900a185a458b859cf7bfc441ad7", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1022,8 +1022,8 @@ c_common_post_options (const char **pfilename)\n     warn_return_type = 1;\n \n   if (num_in_fnames > 1)\n-    error (\"too many filenames given.  Type %s --help for usage\",\n-\t   progname);\n+    error (\"too many filenames given; type %<%s %s%> for usage\",\n+\t   progname, \"--help\");\n \n   if (flag_preprocess_only)\n     {\n@@ -1057,7 +1057,7 @@ c_common_post_options (const char **pfilename)\n \t     debug formats we warn here and refuse to load any PCH files.  */\n \t  if (write_symbols != NO_DEBUG && write_symbols != DWARF2_DEBUG)\n \t    warning (OPT_Wdeprecated,\n-\t\t     \"the \\\"%s\\\" debug format cannot be used with \"\n+\t\t     \"the %qs debug format cannot be used with \"\n \t\t     \"pre-compiled headers\", debug_type_names[write_symbols]);\n \t}\n       else if (write_symbols != NO_DEBUG && write_symbols != DWARF2_DEBUG)"}, {"sha": "2024ae2f8c3235ecbfa0280130f6dc1396df3323", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -103,7 +103,7 @@ pch_init (void)\n \n   f = fopen (pch_file, \"w+b\");\n   if (f == NULL)\n-    fatal_error (input_location, \"can%'t create precompiled header %s: %m\",\n+    fatal_error (input_location, \"cannot create precompiled header %s: %m\",\n \t\t pch_file);\n   pch_outfile = f;\n \n@@ -124,7 +124,7 @@ pch_init (void)\n       || fwrite (executable_checksum, 16, 1, f) != 1\n       || fwrite (&v, sizeof (v), 1, f) != 1\n       || fwrite (target_validity, v.target_data_length, 1, f) != 1)\n-    fatal_error (input_location, \"can%'t write to %s: %m\", pch_file);\n+    fatal_error (input_location, \"cannot write to %s: %m\", pch_file);\n \n   /* Let the debugging format deal with the PCHness.  */\n   (*debug_hooks->handle_pch) (0);\n@@ -182,7 +182,7 @@ c_common_write_pch (void)\n \n   if (fseek (pch_outfile, 0, SEEK_SET) != 0\n       || fwrite (get_ident (), IDENT_LENGTH, 1, pch_outfile) != 1)\n-    fatal_error (input_location, \"can%'t write %s: %m\", pch_file);\n+    fatal_error (input_location, \"cannot write %s: %m\", pch_file);\n \n   fclose (pch_outfile);\n \n@@ -208,7 +208,7 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n \n   sizeread = read (fd, ident, IDENT_LENGTH + 16);\n   if (sizeread == -1)\n-    fatal_error (input_location, \"can%'t read %s: %m\", name);\n+    fatal_error (input_location, \"cannot read %s: %m\", name);\n   else if (sizeread != IDENT_LENGTH + 16)\n     {\n       if (cpp_get_options (pfile)->warn_invalid_pch)\n@@ -249,7 +249,7 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n      executable, so it ought to be long enough that we can read a\n      c_pch_validity structure.  */\n   if (read (fd, &v, sizeof (v)) != sizeof (v))\n-    fatal_error (input_location, \"can%'t read %s: %m\", name);\n+    fatal_error (input_location, \"cannot read %s: %m\", name);\n \n   /* The allowable debug info combinations are that either the PCH file\n      was built with the same as is being used now, or the PCH file was\n@@ -300,7 +300,7 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n \n     if ((size_t) read (fd, this_file_data, v.target_data_length)\n \t!= v.target_data_length)\n-      fatal_error (input_location, \"can%'t read %s: %m\", name);\n+      fatal_error (input_location, \"cannot read %s: %m\", name);\n     msg = targetm.pch_valid_p (this_file_data, v.target_data_length);\n     free (this_file_data);\n     if (msg != NULL)\n@@ -406,9 +406,9 @@ c_common_pch_pragma (cpp_reader *pfile, const char *name)\n \n   if (!cpp_get_options (pfile)->preprocessed)\n     {\n-      error (\"pch_preprocess pragma should only be used \"\n+      error (\"%<pch_preprocess%> pragma should only be used \"\n \t     \"with %<-fpreprocessed%>\");\n-      inform (input_location, \"use #include instead\");\n+      inform (input_location, \"use %<#include%> instead\");\n       return;\n     }\n "}, {"sha": "480d98efd1ec85ca954f8c00ab09a45dd8892761", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -91,7 +91,8 @@ pop_alignment (tree id)\n   align_stack * entry;\n \n   if (alignment_stack == NULL)\n-    GCC_BAD (\"#pragma pack (pop) encountered without matching #pragma pack (push)\");\n+    GCC_BAD (\"%<#pragma pack (pop)%> encountered without matching \"\n+\t     \"%<#pragma pack (push)%>\");\n \n   /* If we got an identifier, strip away everything above the target\n      entry so that the next step will restore the state just below it.  */\n@@ -104,8 +105,9 @@ pop_alignment (tree id)\n \t    break;\n \t  }\n       if (entry == NULL)\n-\twarning (OPT_Wpragmas, \"\\\n-#pragma pack(pop, %E) encountered without matching #pragma pack(push, %E)\"\n+\twarning (OPT_Wpragmas,\n+\t\t \"%<#pragma pack(pop, %E)%> encountered without matching \"\n+\t\t \"%<#pragma pack(push, %E)%>\"\n \t\t , id, id);\n     }\n \n@@ -197,7 +199,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n     warning (OPT_Wpragmas, \"junk at end of %<#pragma pack%>\");\n \n   if (flag_pack_struct)\n-    GCC_BAD (\"#pragma pack has no effect with %<-fpack-struct%> - ignored\");\n+    GCC_BAD (\"%<#pragma pack%> has no effect with %<-fpack-struct%> - ignored\");\n \n   if (action != pop)\n     switch (align)\n@@ -257,7 +259,7 @@ apply_pragma_weak (tree decl, tree value)\n       && !DECL_WEAK (decl) /* Don't complain about a redundant #pragma.  */\n       && DECL_ASSEMBLER_NAME_SET_P (decl)\n       && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n-    warning (OPT_Wpragmas, \"applying #pragma weak %q+D after first use \"\n+    warning (OPT_Wpragmas, \"applying %<#pragma weak %+D%> after first use \"\n \t     \"results in unspecified behavior\", decl);\n \n   declare_weak (decl);\n@@ -354,12 +356,12 @@ handle_pragma_weak (cpp_reader * ARG_UNUSED (dummy))\n   value = 0;\n \n   if (pragma_lex (&name) != CPP_NAME)\n-    GCC_BAD (\"malformed #pragma weak, ignored\");\n+    GCC_BAD (\"malformed %<#pragma weak%>, ignored\");\n   t = pragma_lex (&x);\n   if (t == CPP_EQ)\n     {\n       if (pragma_lex (&value) != CPP_NAME)\n-\tGCC_BAD (\"malformed #pragma weak, ignored\");\n+\tGCC_BAD (\"%<malformed #pragma weak%>, ignored\");\n       t = pragma_lex (&x);\n     }\n   if (t != CPP_EOF)\n@@ -417,7 +419,7 @@ handle_pragma_scalar_storage_order (cpp_reader *ARG_UNUSED(dummy))\n \n   if (BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n     {\n-      error (\"scalar_storage_order is not supported because endianness \"\n+      error (\"%<scalar_storage_order%> is not supported because endianness \"\n \t     \"is not uniform\");\n       return;\n     }\n@@ -495,9 +497,9 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n   bool found;\n \n   if (pragma_lex (&oldname) != CPP_NAME)\n-    GCC_BAD (\"malformed #pragma redefine_extname, ignored\");\n+    GCC_BAD (\"malformed %<#pragma redefine_extname%>, ignored\");\n   if (pragma_lex (&newname) != CPP_NAME)\n-    GCC_BAD (\"malformed #pragma redefine_extname, ignored\");\n+    GCC_BAD (\"malformed %<#pragma redefine_extname%>, ignored\");\n   t = pragma_lex (&x);\n   if (t != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of %<#pragma redefine_extname%>\");\n@@ -528,8 +530,8 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n \t      name = targetm.strip_name_encoding (name);\n \n \t      if (!id_equal (newname, name))\n-\t\twarning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n-\t\t\t \"conflict with previous rename\");\n+\t\twarning (OPT_Wpragmas, \"%<#pragma redefine_extname%> \"\n+\t\t\t \"ignored due to conflict with previous rename\");\n \t    }\n \t  else\n \t    symtab->change_decl_assembler_name (decl, newname);\n@@ -556,8 +558,8 @@ add_to_renaming_pragma_list (tree oldname, tree newname)\n     if (oldname == p->oldname)\n       {\n \tif (p->newname != newname)\n-\t  warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n-\t\t   \"conflict with previous #pragma redefine_extname\");\n+\t  warning (OPT_Wpragmas, \"%<#pragma redefine_extname%> ignored due to \"\n+\t\t   \"conflict with previous %<#pragma redefine_extname%>\");\n \treturn;\n       }\n \n@@ -592,7 +594,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n       oldname = targetm.strip_name_encoding (oldname);\n \n       if (asmname && strcmp (TREE_STRING_POINTER (asmname), oldname))\n-\t  warning (OPT_Wpragmas, \"asm declaration ignored due to \"\n+\t  warning (OPT_Wpragmas, \"%<asm%> declaration ignored due to \"\n \t\t   \"conflict with previous rename\");\n \n       /* Take any pending redefine_extname off the list.  */\n@@ -601,8 +603,8 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n \t  {\n \t    /* Only warn if there is a conflict.  */\n \t    if (!id_equal (p->newname, oldname))\n-\t      warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n-\t\t       \"conflict with previous rename\");\n+\t      warning (OPT_Wpragmas, \"%<#pragma redefine_extname%> ignored \"\n+\t\t       \"due to conflict with previous rename\");\n \n \t    pending_redefine_extname->unordered_remove (ix);\n \t    break;\n@@ -623,8 +625,8 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n \t  {\n \t    if (strcmp (TREE_STRING_POINTER (asmname),\n \t\t\tIDENTIFIER_POINTER (newname)) != 0)\n-\t      warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n-\t\t       \"conflict with __asm__ declaration\");\n+\t      warning (OPT_Wpragmas, \"%<#pragma redefine_extname%> ignored \"\n+\t\t       \"due to conflict with %<asm%> declaration\");\n \t    return asmname;\n \t  }\n \n@@ -684,7 +686,8 @@ push_visibility (const char *str, int kind)\n   else if (!strcmp (str, \"protected\"))\n     default_visibility = VISIBILITY_PROTECTED;\n   else\n-    GCC_BAD (\"#pragma GCC visibility push() must specify default, internal, hidden or protected\");\n+    GCC_BAD (\"%<#pragma GCC visibility push()%> must specify %<default%>, \"\n+\t     \"%<internal%>, %<hidden%> or %<protected%>\");\n   visibility_options.inpragma = 1;\n }\n \n@@ -726,7 +729,8 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n \taction = pop;\n     }\n   if (bad == action)\n-    GCC_BAD (\"#pragma GCC visibility must be followed by push or pop\");\n+    GCC_BAD (\"%<#pragma GCC visibility%> must be followed by %<push%> \"\n+\t     \"or %<pop%>\");\n   else\n     {\n       if (pop == action)\n@@ -740,7 +744,7 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n \t    GCC_BAD (\"missing %<(%> after %<#pragma GCC visibility push%> - ignored\");\n \t  token = pragma_lex (&x);\n \t  if (token != CPP_NAME)\n-\t    GCC_BAD (\"malformed #pragma GCC visibility push\");\n+\t    GCC_BAD (\"malformed %<#pragma GCC visibility push%>\");\n \t  else\n \t    push_visibility (IDENTIFIER_POINTER (x), 0);\n \t  if (pragma_lex (&x) != CPP_CLOSE_PAREN)\n@@ -860,7 +864,7 @@ handle_pragma_target(cpp_reader *ARG_UNUSED(dummy))\n \n   if (cfun)\n     {\n-      error (\"#pragma GCC option is not allowed inside functions\");\n+      error (\"%<#pragma GCC option%> is not allowed inside functions\");\n       return;\n     }\n \n@@ -906,7 +910,7 @@ handle_pragma_target(cpp_reader *ARG_UNUSED(dummy))\n \n       if (token != CPP_EOF)\n \t{\n-\t  error (\"#pragma GCC target string... is badly formed\");\n+\t  error (\"%<#pragma GCC target%> string is badly formed\");\n \t  return;\n \t}\n \n@@ -929,7 +933,7 @@ handle_pragma_optimize (cpp_reader *ARG_UNUSED(dummy))\n \n   if (cfun)\n     {\n-      error (\"#pragma GCC optimize is not allowed inside functions\");\n+      error (\"%<#pragma GCC optimize%> is not allowed inside functions\");\n       return;\n     }\n \n@@ -974,7 +978,7 @@ handle_pragma_optimize (cpp_reader *ARG_UNUSED(dummy))\n \n       if (token != CPP_EOF)\n \t{\n-\t  error (\"#pragma GCC optimize string... is badly formed\");\n+\t  error (\"%<#pragma GCC optimize%> string is badly formed\");\n \t  return;\n \t}\n \n@@ -1147,7 +1151,8 @@ handle_pragma_message (cpp_reader *ARG_UNUSED(dummy))\n     warning (OPT_Wpragmas, \"junk at end of %<#pragma message%>\");\n \n   if (TREE_STRING_LENGTH (message) > 1)\n-    inform (input_location, \"#pragma message: %s\", TREE_STRING_POINTER (message));\n+    inform (input_location, \"%<#pragma message: %s%>\",\n+\t    TREE_STRING_POINTER (message));\n }\n \n /* Mark whether the current location is valid for a STDC pragma.  */"}, {"sha": "fa7b6ddea555bcc2b810757ee61bb9c5bfe3d033", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1663,7 +1663,7 @@ warn_for_omitted_condop (location_t location, tree cond)\n       || (TREE_TYPE (cond) != NULL_TREE\n \t  && TREE_CODE (TREE_TYPE (cond)) == BOOLEAN_TYPE))\n       warning_at (location, OPT_Wparentheses,\n-\t\t\"the omitted middle operand in ?: will always be %<true%>, \"\n+\t\t\"the omitted middle operand in %<?:%> will always be %<true%>, \"\n \t\t\"suggest explicit middle operand\");\n }\n \n@@ -1762,7 +1762,7 @@ lvalue_error (location_t loc, enum lvalue_use use)\n       error_at (loc, \"lvalue required as unary %<&%> operand\");\n       break;\n     case lv_asm:\n-      error_at (loc, \"lvalue required in asm statement\");\n+      error_at (loc, \"lvalue required in %<asm%> statement\");\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "046d489f7eb312c81c2b214a49b8714474f6210a", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -562,6 +562,10 @@ Wformat-contains-nul\n C ObjC C++ ObjC++ Var(warn_format_contains_nul) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n Warn about format strings that contain NUL bytes.\n \n+Wformat-diag\n+C ObjC C++ ObjC++ Var(warn_format_diag) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n+Warn about GCC format strings with strings unsuitable for diagnostics..\n+\n Wformat-extra-args\n C ObjC C++ ObjC++ Var(warn_format_extra_args) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n Warn if passing too many arguments to a function for its format string."}, {"sha": "f558d28dc25911f03e568ef9a6b84529b80b7b79", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,17 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * c-decl.c (start_decl): Quote keywords, operators, and\n+        types in diagnostics.\n+        (finish_decl): Same.\n+        * c-parser.c (c_parser_asm_statement): Same.\n+        (c_parser_conditional_expression): Same.\n+        (c_parser_transaction_cancel): Same.\n+        * c-typeck.c (c_common_type): Same.\n+        (build_conditional_expr): Same.\n+        (digest_init): Same.\n+        (process_init_element): Same.\n+        (build_binary_op): Same.\n+\n 2019-05-17  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-parser.c (c_parser_gimple_statement): Handle __VEC_PERM."}, {"sha": "181a8c2e9aa0c8f758a5fbb1cd603fa4eabe999d", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1780,15 +1780,16 @@ diagnose_arglist_conflict (tree newdecl, tree olddecl,\n       if (TREE_CHAIN (t) == NULL_TREE\n \t  && TYPE_MAIN_VARIANT (type) != void_type_node)\n \t{\n-\t  inform (input_location, \"a parameter list with an ellipsis can%'t match \"\n-\t\t  \"an empty parameter name list declaration\");\n+\t  inform (input_location, \"a parameter list with an ellipsis \"\n+\t\t  \"cannot match an empty parameter name list declaration\");\n \t  break;\n \t}\n \n       if (c_type_promotes_to (type) != type)\n \t{\n-\t  inform (input_location, \"an argument type that has a default promotion can%'t match \"\n-\t\t  \"an empty parameter name list declaration\");\n+\t  inform (input_location, \"an argument type that has a default \"\n+\t\t  \"promotion cannot match an empty parameter name list \"\n+\t\t  \"declaration\");\n \t  break;\n \t}\n     }\n@@ -4887,7 +4888,7 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n     switch (TREE_CODE (decl))\n       {\n       case TYPE_DECL:\n-\terror (\"typedef %qD is initialized (use __typeof__ instead)\", decl);\n+\terror (\"typedef %qD is initialized (use %<__typeof__%> instead)\", decl);\n \tinitialized = false;\n \tbreak;\n \n@@ -5282,7 +5283,7 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t      && VAR_P (decl)\n \t      && !C_DECL_REGISTER (decl)\n \t      && !TREE_STATIC (decl))\n-\t    warning (0, \"ignoring asm-specifier for non-static local \"\n+\t    warning (0, \"ignoring %<asm%> specifier for non-static local \"\n \t\t     \"variable %q+D\", decl);\n \t  else\n \t    set_user_assembler_name (decl, asmspec);\n@@ -5725,10 +5726,10 @@ warn_variable_length_array (tree name, tree size)\n       if (name)\n \tpedwarn_c90 (input_location, OPT_Wvla,\n \t\t     \"ISO C90 forbids array %qE whose size \"\n-\t\t     \"can%'t be evaluated\", name);\n+\t\t     \"cannot be evaluated\", name);\n       else\n \tpedwarn_c90 (input_location, OPT_Wvla, \"ISO C90 forbids array \"\n-\t\t     \"whose size can%'t be evaluated\");\n+\t\t     \"whose size cannot be evaluated\");\n     }\n   else\n     {"}, {"sha": "993cfe05ecb0c9b7a87b2ff6bf05bace5790a10f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -6401,7 +6401,7 @@ c_parser_asm_statement (c_parser *parser)\n \tcase RID_VOLATILE:\n \t  if (volatile_loc)\n \t    {\n-\t      error_at (loc, \"duplicate asm qualifier %qE\", token->value);\n+\t      error_at (loc, \"duplicate %<asm%> qualifier %qE\", token->value);\n \t      inform (volatile_loc, \"first seen here\");\n \t    }\n \t  else\n@@ -6412,7 +6412,7 @@ c_parser_asm_statement (c_parser *parser)\n \tcase RID_INLINE:\n \t  if (inline_loc)\n \t    {\n-\t      error_at (loc, \"duplicate asm qualifier %qE\", token->value);\n+\t      error_at (loc, \"duplicate %<asm%> qualifier %qE\", token->value);\n \t      inform (inline_loc, \"first seen here\");\n \t    }\n \t  else\n@@ -6423,7 +6423,7 @@ c_parser_asm_statement (c_parser *parser)\n \tcase RID_GOTO:\n \t  if (goto_loc)\n \t    {\n-\t      error_at (loc, \"duplicate asm qualifier %qE\", token->value);\n+\t      error_at (loc, \"duplicate %<asm%> qualifier %qE\", token->value);\n \t      inform (goto_loc, \"first seen here\");\n \t    }\n \t  else\n@@ -6433,7 +6433,7 @@ c_parser_asm_statement (c_parser *parser)\n \n \tcase RID_CONST:\n \tcase RID_RESTRICT:\n-\t  error_at (loc, \"%qE is not an asm qualifier\", token->value);\n+\t  error_at (loc, \"%qE is not a valid %<asm%> qualifier\", token->value);\n \t  c_parser_consume_token (parser);\n \t  continue;\n \n@@ -6791,7 +6791,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n \n       location_t middle_loc = c_parser_peek_token (parser)->location;\n       pedwarn (middle_loc, OPT_Wpedantic,\n-\t       \"ISO C forbids omitting the middle term of a ?: expression\");\n+\t       \"ISO C forbids omitting the middle term of a %<?:%> expression\");\n       if (TREE_CODE (cond.value) == EXCESS_PRECISION_EXPR)\n \t{\n \t  eptype = TREE_TYPE (cond.value);\n@@ -19825,8 +19825,8 @@ c_parser_transaction_cancel (c_parser *parser)\n \t  && !is_tm_may_cancel_outer (current_function_decl))\n \t{\n \t  error_at (loc, \"outer %<__transaction_cancel%> not \"\n-\t\t    \"within outer %<__transaction_atomic%>\");\n-\t  error_at (loc, \"  or a %<transaction_may_cancel_outer%> function\");\n+\t\t    \"within outer %<__transaction_atomic%> or \"\n+\t\t    \"a %<transaction_may_cancel_outer%> function\");\n \t  goto ret_error;\n \t}\n     }"}, {"sha": "5eff040e85dcd69960091f47186f7c8346ecb4c1", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -743,17 +743,18 @@ c_common_type (tree t1, tree t2)\n     {\n       if (code1 == VECTOR_TYPE || code2 == VECTOR_TYPE)\n \t{\n-\t  error (\"can%'t mix operands of decimal float and vector types\");\n+\t  error (\"cannot mix operands of decimal floating and vector types\");\n \t  return error_mark_node;\n \t}\n       if (code1 == COMPLEX_TYPE || code2 == COMPLEX_TYPE)\n \t{\n-\t  error (\"can%'t mix operands of decimal float and complex types\");\n+\t  error (\"cannot mix operands of decimal floating and complex types\");\n \t  return error_mark_node;\n \t}\n       if (code1 == REAL_TYPE && code2 == REAL_TYPE)\n \t{\n-\t  error (\"can%'t mix operands of decimal float and other float types\");\n+\t  error (\"cannot mix operands of decimal floating \"\n+\t\t \"and other floating types\");\n \t  return error_mark_node;\n \t}\n     }\n@@ -5253,13 +5254,13 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n \t\t\t/* OK */;\n \t\t      else if (unsigned_op2)\n \t\t\twarning_at (op1_loc, OPT_Wsign_compare,\n-\t\t\t\t    \"operand of ?: changes signedness from \"\n+\t\t\t\t    \"operand of %<?:%> changes signedness from \"\n \t\t\t\t    \"%qT to %qT due to unsignedness of other \"\n \t\t\t\t    \"operand\", TREE_TYPE (orig_op1),\n \t\t\t\t    TREE_TYPE (orig_op2));\n \t\t      else\n \t\t\twarning_at (op2_loc, OPT_Wsign_compare,\n-\t\t\t\t    \"operand of ?: changes signedness from \"\n+\t\t\t\t    \"operand of %<?:%> changes signedness from \"\n \t\t\t\t    \"%qT to %qT due to unsignedness of other \"\n \t\t\t\t    \"operand\", TREE_TYPE (orig_op2),\n \t\t\t\t    TREE_TYPE (orig_op1));\n@@ -7764,13 +7765,13 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t\t that is counted in the length of the constant.  */\n \t      if (compare_tree_int (TYPE_SIZE_UNIT (type), len - unit) < 0)\n \t\tpedwarn_init (init_loc, 0,\n-\t\t\t      (\"initializer-string for array of chars \"\n-\t\t\t       \"is too long\"));\n+\t\t\t      (\"initializer-string for array of %qT \"\n+\t\t\t       \"is too long\"), typ1);\n \t      else if (warn_cxx_compat\n \t\t       && compare_tree_int (TYPE_SIZE_UNIT (type), len) < 0)\n \t\twarning_at (init_loc, OPT_Wc___compat,\n-\t\t\t    (\"initializer-string for array chars \"\n-\t\t\t     \"is too long for C++\"));\n+\t\t\t    (\"initializer-string for array of %qT \"\n+\t\t\t     \"is too long for C++\"), typ1);\n \t      if (compare_tree_int (TYPE_SIZE_UNIT (type), len) < 0)\n \t\t{\n \t\t  unsigned HOST_WIDE_INT size\n@@ -9888,7 +9889,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n       && integer_zerop (constructor_unfilled_index))\n     {\n       if (constructor_stack->replacement_value.value)\n-\terror_init (loc, \"excess elements in char array initializer\");\n+\terror_init (loc, \"excess elements in %<char%> array initializer\");\n       constructor_stack->replacement_value = value;\n       return;\n     }\n@@ -11937,7 +11938,7 @@ build_binary_op (location_t location, enum tree_code code,\n       if (FLOAT_TYPE_P (type0) || FLOAT_TYPE_P (type1))\n \twarning_at (location,\n \t\t    OPT_Wfloat_equal,\n-\t\t    \"comparing floating point with == or != is unsafe\");\n+\t\t    \"comparing floating point with %<==%> or %<!=%> is unsafe\");\n       /* Result of comparison is always int,\n \t but don't convert the args to int!  */\n       build_type = integer_type_node;"}, {"sha": "7722dcd4004e270551c8bcd4403e53a78ebfdff0", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1702,7 +1702,7 @@ expand_one_var (tree var, bool toplevel, bool really_expand)\n         {\n           if (lookup_attribute (\"naked\",\n                                 DECL_ATTRIBUTES (current_function_decl)))\n-            error (\"cannot allocate stack for variable %q+D, naked function.\",\n+\t    error (\"cannot allocate stack for variable %q+D, naked function\",\n                    var);\n \n           expand_one_stack_var (origvar);\n@@ -2840,7 +2840,8 @@ tree_conflicts_with_clobbers_p (tree t, HARD_REG_SET *clobbered_regs)\n \n   if (overlap)\n     {\n-      error (\"asm-specifier for variable %qE conflicts with asm clobber list\",\n+      error (\"%<asm%> specifier for variable %qE conflicts with \"\n+\t     \"%<asm%> clobber list\",\n \t     DECL_NAME (overlap));\n \n       /* Reset registerness to stop multiple errors emitted for a single\n@@ -3262,7 +3263,8 @@ expand_asm_stmt (gasm *stmt)\n \t  if (allows_reg && TYPE_MODE (type) != BLKmode)\n \t    op = force_reg (TYPE_MODE (type), op);\n \t  else if (!allows_mem)\n-\t    warning (0, \"asm operand %d probably doesn%'t match constraints\",\n+\t    warning (0, \"%<asm%> operand %d probably does not match \"\n+\t\t     \"constraints\",\n \t\t     i + noutputs);\n \t  else if (MEM_P (op))\n \t    {\n@@ -3445,11 +3447,13 @@ expand_asm_stmt (gasm *stmt)\n \t\t tripping over the under-construction body.  */\n \t      for (unsigned k = 0; k < noutputs; ++k)\n \t\tif (reg_overlap_mentioned_p (clobbered_reg, output_rvec[k]))\n-\t\t  internal_error (\"asm clobber conflict with output operand\");\n+\t\t  internal_error (\"%<asm%> clobber conflict with \"\n+\t\t\t\t  \"output operand\");\n \n \t      for (unsigned k = 0; k < ninputs - ninout; ++k)\n \t\tif (reg_overlap_mentioned_p (clobbered_reg, input_rvec[k]))\n-\t\t  internal_error (\"asm clobber conflict with input operand\");\n+\t\t  internal_error (\"%<asm%> clobber conflict with \"\n+\t\t\t\t  \"input operand\");\n \t    }\n \n \t  XVECEXP (body, 0, i++) = gen_rtx_CLOBBER (VOIDmode, clobbered_reg);"}, {"sha": "f4d668819c622c1a1d705978e377297e0d459dd2", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -796,8 +796,8 @@ process_function_and_variable_attributes (cgraph_node *first,\n \t  /* redefining extern inline function makes it DECL_UNINLINABLE.  */\n \t  && !DECL_UNINLINABLE (decl))\n \twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wattributes,\n-\t\t    \"always_inline function might not be inlinable\");\n-     \n+\t\t    \"%<always_inline%> function might not be inlinable\");\n+\n       process_common_attributes (node, decl);\n     }\n   for (vnode = symtab->first_variable (); vnode != first_var;"}, {"sha": "75645b9d533c9a93011a0ead495e68646214c608", "filename": "gcc/collect-utils.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcollect-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcollect-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -65,7 +65,7 @@ collect_wait (const char *prog, struct pex_obj *pex)\n   int status;\n \n   if (!pex_get_status (pex, 1, &status))\n-    fatal_error (input_location, \"can%'t get program status: %m\");\n+    fatal_error (input_location, \"cannot get program status: %m\");\n   pex_free (pex);\n \n   if (response_file && !save_temps)\n@@ -180,7 +180,7 @@ collect_execute (const char *prog, char **argv, const char *outname,\n \n   pex = pex_init (0, \"collect2\", NULL);\n   if (pex == NULL)\n-    fatal_error (input_location, \"pex_init failed: %m\");\n+    fatal_error (input_location, \"%<pex_init%> failed: %m\");\n \n   errmsg = pex_run (pex, flags, argv[0], argv, outname,\n \t\t    errname, &err);"}, {"sha": "d6a7355e218aa8175d9d2073c17afde9a76f2d80", "filename": "gcc/collect2.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -701,7 +701,8 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n       size_t num_files;\n \n       if (!lto_wrapper)\n-\tfatal_error (input_location, \"COLLECT_LTO_WRAPPER must be set\");\n+\tfatal_error (input_location, \"environment variable \"\n+\t\t     \"%<COLLECT_LTO_WRAPPER%> must be set\");\n \n       num_lto_c_args++;\n \n@@ -1396,7 +1397,7 @@ main (int argc, char **argv)\n \n \t\t  stream = fopen (list_filename, \"r\");\n \t\t  if (stream == NULL)\n-\t\t    fatal_error (input_location, \"can%'t open %s: %m\",\n+\t\t    fatal_error (input_location, \"cannot open %s: %m\",\n \t\t\t\t list_filename);\n \n \t\t  while (fgets (buf, sizeof buf, stream) != NULL)\n@@ -2382,7 +2383,7 @@ is_lto_object_file (const char *prog_name)\n     return true;\n \n   if (errmsg)\n-    fatal_error (0, \"%s: %s\\n\", errmsg, xstrerror (err));\n+    fatal_error (0, \"%s: %s\", errmsg, xstrerror (err));\n   return false;\n }\n \n@@ -2448,7 +2449,7 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \n   pex = pex_init (PEX_USE_PIPES, \"collect2\", NULL);\n   if (pex == NULL)\n-    fatal_error (input_location, \"pex_init failed: %m\");\n+    fatal_error (input_location, \"%<pex_init%> failed: %m\");\n \n   errmsg = pex_run (pex, 0, nm_file_name, real_nm_argv, NULL, HOST_BIT_BUCKET,\n \t\t    &err);\n@@ -2470,7 +2471,7 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \n   inf = pex_read_output (pex, 0);\n   if (inf == NULL)\n-    fatal_error (input_location, \"can%'t open nm output: %m\");\n+    fatal_error (input_location, \"cannot open nm output: %m\");\n \n   if (debug)\n     fprintf (stderr, \"\\nnm output with constructors/destructors.\\n\");\n@@ -2639,7 +2640,7 @@ scan_libraries (const char *prog_name)\n \n   inf = pex_read_output (pex, 0);\n   if (inf == NULL)\n-    fatal_error (input_location, \"can%'t open ldd output: %m\");\n+    fatal_error (input_location, \"cannot open ldd output: %m\");\n \n   if (debug)\n     notice (\"\\nldd output with constructors/destructors.\\n\");"}, {"sha": "93dc99fc365f059ba4d6bbfbfc3e372a0a20dc65", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -11828,9 +11828,9 @@ aarch64_validate_mbranch_protection (const char *const_str)\n   enum aarch64_parse_opt_result res =\n     aarch64_parse_branch_protection (const_str, &str);\n   if (res == AARCH64_PARSE_INVALID_ARG)\n-    error (\"invalid arg %<%s%> for %<-mbranch-protection=%>\", str);\n+    error (\"invalid argument %<%s%> for %<-mbranch-protection=%>\", str);\n   else if (res == AARCH64_PARSE_MISSING_ARG)\n-    error (\"missing arg for %<-mbranch-protection=%>\");\n+    error (\"missing argument for %<-mbranch-protection=%>\");\n   free (str);\n   return res == AARCH64_PARSE_OK;\n }"}, {"sha": "87e0973e1cae3f8f1d57d56dcb37e6b776f1c9ab", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -7969,7 +7969,7 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n       if (fndecl\n \t  && (lookup_attribute (\"interrupt\",\n \t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (fndecl)))))\n-\terror (\"interrupt service routine can%'t be called directly\");\n+\terror (\"interrupt service routine cannot be called directly\");\n     }\n   else\n     fndecl = NULL_TREE;\n@@ -10761,7 +10761,8 @@ get_element_number (tree vec_type, tree arg)\n   if (!tree_fits_uhwi_p (arg)\n       || (elt = tree_to_uhwi (arg), elt > max))\n     {\n-      error (\"selector must be an integer constant in the range 0..%wi\", max);\n+      error (\"selector must be an integer constant in the range \"\n+\t     \"[0, %wi]\", max);\n       return 0;\n     }\n "}, {"sha": "60a120f4df7bc384edf9dd6cf9f54bfe392180c6", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2447,7 +2447,7 @@ ix86_mangle_function_version_assembler_name (tree decl, tree id)\n       && lookup_attribute (\"gnu_inline\",\n \t\t\t   DECL_ATTRIBUTES (decl)))\n     error_at (DECL_SOURCE_LOCATION (decl),\n-\t      \"function versions cannot be marked as gnu_inline,\"\n+\t      \"function versions cannot be marked as %<gnu_inline%>,\"\n \t      \" bodies have to be generated\");\n \n   if (DECL_VIRTUAL_P (decl)"}, {"sha": "bde104879cb83d4d0e4f066fc1a9136a3eea2b34", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3462,7 +3462,8 @@ ix86_handle_abi_attribute (tree *node, tree name, tree, int,\n     {\n       if (lookup_attribute (\"sysv_abi\", TYPE_ATTRIBUTES (*node)))\n         {\n-\t  error (\"ms_abi and sysv_abi attributes are not compatible\");\n+\t  error (\"%qs and %qs attributes are not compatible\",\n+\t\t \"ms_abi\", \"sysv_abi\");\n \t}\n \n       return NULL_TREE;\n@@ -3471,7 +3472,8 @@ ix86_handle_abi_attribute (tree *node, tree name, tree, int,\n     {\n       if (lookup_attribute (\"ms_abi\", TYPE_ATTRIBUTES (*node)))\n         {\n-\t  error (\"ms_abi and sysv_abi attributes are not compatible\");\n+\t  error (\"%qs and %qs attributes are not compatible\",\n+\t\t \"ms_abi\", \"sysv_abi\");\n \t}\n \n       return NULL_TREE;\n@@ -3582,7 +3584,7 @@ ix86_handle_interrupt_attribute (tree *node, tree, tree, int, bool *)\n     error (\"interrupt service routine can only have a pointer argument \"\n \t   \"and an optional integer argument\");\n   if (! VOID_TYPE_P (return_type))\n-    error (\"interrupt service routine can%'t have non-void return value\");\n+    error (\"interrupt service routine must return %<void%>\");\n \n   return NULL_TREE;\n }"}, {"sha": "d3eb7c8cb06f2fad85845ff1bba78491cdd25011", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1525,7 +1525,7 @@ ix86_function_type_abi (const_tree fntype)\n       static int warned;\n       if (TARGET_X32 && !warned)\n \t{\n-\t  error (\"X32 does not support ms_abi attribute\");\n+\t  error (\"X32 does not support %<ms_abi%> attribute\");\n \t  warned = 1;\n \t}\n \n@@ -1559,7 +1559,8 @@ ix86_function_ms_hook_prologue (const_tree fn)\n     {\n       if (decl_function_context (fn) != NULL_TREE)\n \terror_at (DECL_SOURCE_LOCATION (fn),\n-\t\t  \"ms_hook_prologue is not compatible with nested function\");\n+\t\t  \"%<ms_hook_prologue%> attribute is not compatible \"\n+\t\t  \"with nested function\");\n       else\n         return true;\n     }\n@@ -2266,7 +2267,7 @@ classify_argument (machine_mode mode, const_tree type,\n \t\t{\n \t\t  warned = true;\n \t\t  inform (input_location,\n-\t\t\t  \"the ABI of passing union with long double\"\n+\t\t\t  \"the ABI of passing union with %<long double%>\"\n \t\t\t  \" has changed in GCC 4.4\");\n \t\t}\n \t      return 0;\n@@ -2384,7 +2385,7 @@ classify_argument (machine_mode mode, const_tree type,\n \t    {\n \t      warned = true;\n \t      inform (input_location,\n-\t\t      \"the ABI of passing structure with complex float\"\n+\t\t      \"the ABI of passing structure with %<complex float%>\"\n \t\t      \" member has changed in GCC 4.4\");\n \t    }\n \t  classes[1] = X86_64_SSESF_CLASS;\n@@ -7787,7 +7788,7 @@ ix86_expand_prologue (void)\n       /* Check if profiling is active and we shall use profiling before\n          prologue variant. If so sorry.  */\n       if (crtl->profile && flag_fentry != 0)\n-        sorry (\"ms_hook_prologue attribute isn%'t compatible \"\n+\tsorry (\"%<ms_hook_prologue%> attribute is not compatible \"\n \t       \"with %<-mfentry%> for 32-bit\");\n \n       /* In ix86_asm_output_function_label we emitted:\n@@ -20655,7 +20656,7 @@ ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n       con += 4;\n       if (strchr (con, ',') != NULL)\n \t{\n-\t  error (\"alternatives not allowed in asm flag output\");\n+\t  error (\"alternatives not allowed in %<asm%> flag output\");\n \t  continue;\n \t}\n \n@@ -20719,7 +20720,7 @@ ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n \t}\n       if (code == UNKNOWN)\n \t{\n-\t  error (\"unknown asm flag output %qs\", constraints[i]);\n+\t  error (\"unknown %<asm%> flag output %qs\", constraints[i]);\n \t  continue;\n \t}\n       if (invert)\n@@ -20748,7 +20749,7 @@ ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n       machine_mode dest_mode = GET_MODE (dest);\n       if (!SCALAR_INT_MODE_P (dest_mode))\n \t{\n-\t  error (\"invalid type for asm flag output\");\n+\t  error (\"invalid type for %<asm%> flag output\");\n \t  continue;\n \t}\n \n@@ -21682,13 +21683,15 @@ ix86_memmodel_check (unsigned HOST_WIDE_INT val)\n   if (val & IX86_HLE_ACQUIRE && !(is_mm_acquire (model) || strong))\n     {\n       warning (OPT_Winvalid_memory_model,\n-              \"HLE_ACQUIRE not used with ACQUIRE or stronger memory model\");\n+\t      \"%<HLE_ACQUIRE%> not used with %<ACQUIRE%> or stronger \"\n+\t       \"memory model\");\n       return MEMMODEL_SEQ_CST | IX86_HLE_ACQUIRE;\n     }\n   if (val & IX86_HLE_RELEASE && !(is_mm_release (model) || strong))\n     {\n       warning (OPT_Winvalid_memory_model,\n-              \"HLE_RELEASE not used with RELEASE or stronger memory model\");\n+\t      \"%<HLE_RELEASE%> not used with %<RELEASE%> or stronger \"\n+\t       \"memory model\");\n       return MEMMODEL_SEQ_CST | IX86_HLE_RELEASE;\n     }\n   return val;"}, {"sha": "d5aa07b510e0e7831e8d121b383e42e5c6e89321", "filename": "gcc/convert.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -415,11 +415,11 @@ convert_to_real_1 (tree type, tree expr, bool fold_p)\n \n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n-      error (\"pointer value used where a floating point value was expected\");\n+      error (\"pointer value used where a floating point was expected\");\n       return convert_to_real_1 (type, integer_zero_node, fold_p);\n \n     default:\n-      error (\"aggregate value used where a float was expected\");\n+      error (\"aggregate value used where a floating point was expected\");\n       return convert_to_real_1 (type, integer_zero_node, fold_p);\n     }\n }\n@@ -1029,7 +1029,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n     case VECTOR_TYPE:\n       if (!tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (TREE_TYPE (expr))))\n \t{\n-\t  error (\"can%'t convert a vector of type %qT\"\n+\t  error (\"cannot convert a vector of type %qT\"\n \t\t \" to type %qT which has different size\",\n \t\t TREE_TYPE (expr), type);\n \t  return error_mark_node;\n@@ -1166,15 +1166,15 @@ convert_to_vector (tree type, tree expr)\n     case VECTOR_TYPE:\n       if (!tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (TREE_TYPE (expr))))\n \t{\n-\t  error (\"can%'t convert a value of type %qT\"\n+\t  error (\"cannot convert a value of type %qT\"\n \t\t \" to vector type %qT which has different size\",\n \t\t TREE_TYPE (expr), type);\n \t  return error_mark_node;\n \t}\n       return build1 (VIEW_CONVERT_EXPR, type, expr);\n \n     default:\n-      error (\"can%'t convert value to a vector\");\n+      error (\"cannot convert value to a vector\");\n       return error_mark_node;\n     }\n }"}, {"sha": "08b7d5337071139a4f6df3da7d66fd4f5f9489b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,92 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * call.c (print_z_candidate): Wrap diagnostic text in a gettext\n+        macro.  Adjust.\n+        (print_z_candidates): Same.\n+        (build_conditional_expr_1): Quote keywords, operators, and types\n+        in diagnostics.\n+        (build_op_delete_call): Same.\n+        (maybe_print_user_conv_context): Wrap diagnostic text in a gettext\n+        macro.\n+        (convert_like_real): Same.\n+        (convert_arg_to_ellipsis): Quote keywords, operators, and types\n+        in diagnostics.\n+        (build_over_call): Same.\n+        (joust): Break up an overlong line.  Wrap diagnostic text in a gettext\n+        macro.\n+        * constexpr.c (cxx_eval_check_shift_p): Spell out >= in English.\n+        (cxx_eval_constant_expression): Quote keywords, operators, and types\n+        in diagnostics.\n+        (potential_constant_expression_1): Same.\n+        * cp-gimplify.c (cp_genericize_r): Same.\n+        * cvt.c (maybe_warn_nodiscard): Quote keywords, operators, and types\n+        in diagnostics.\n+        (type_promotes_to): Same.\n+        * decl.c (check_previous_goto_1): Same.\n+        (check_goto): Same.\n+        (start_decl): Same.\n+        (cp_finish_decl): Avoid parenthesizing a sentence for consistency.\n+        (grok_op_properties): Quote keywords, operators, and types\n+        in diagnostics.\n+        * decl2.c (grokfield): Same.\n+        (coerce_delete_type): Same.\n+        * except.c (is_admissible_throw_operand_or_catch_parameter): Same.\n+        * friend.c (do_friend): Quote C++ tokens.\n+        * init.c (build_new_1): Quote keywords, operators, and types\n+        in diagnostics.\n+        (build_vec_delete_1): Same.\n+        (build_delete): Same.\n+        * lex.c (parse_strconst_pragma): Same.\n+        (handle_pragma_implementation): Same.\n+        (unqualified_fn_lookup_error): Same.\n+        * mangle.c (write_type): Same.\n+        * method.c (defaulted_late_check): Avoid two consecutive punctuators.\n+        * name-lookup.c (cp_binding_level_debug): Remove a trailing newline.\n+        (pop_everything): Same.\n+        * parser.c (cp_lexer_start_debugging): Quote a macro name.\n+        in a diagnostic\n+        (cp_lexer_stop_debugging): Same.\n+        (cp_parser_userdef_numeric_literal): Quote a C++ header name\n+        in a diagnostic.\n+        (cp_parser_nested_name_specifier_opt): Quote keywords, operators,\n+        and types in diagnostics.\n+        (cp_parser_question_colon_clause): Same.\n+        (cp_parser_asm_definition): Same.\n+        (cp_parser_init_declarator): Same.\n+        (cp_parser_template_declaration_after_parameters): Avoid capitalizing\n+        a sentence in a diagnostic.\n+        (cp_parser_omp_declare_reduction): Quote keywords, operators, and types\n+        in diagnostics.\n+        (cp_parser_transaction): Same.\n+        * pt.c (maybe_process_partial_specialization): Replace second call\n+        to permerror with inform for consistency with other uses.\n+        (expand_integer_pack): Quote keywords, operators, and types\n+        in diagnostics.\n+        * rtti.c (get_typeid): Quote keywords, operators, and types\n+        in diagnostics.\n+        (build_dynamic_cast_1): Same.\n+        * semantics.c (finish_asm_stmt): Same.\n+        (finish_label_decl): Same.\n+        (finish_bases): Same.\n+        (finish_offsetof): Same.\n+        (cp_check_omp_declare_reduction): Same.\n+        (finish_decltype_type): Same.\n+        * tree.c (handle_init_priority_attribute): Same.  Add detail\n+        to diagnostics.\n+        (maybe_warn_zero_as_null_pointer_constant): Same.\n+        * typeck.c (cp_build_binary_op): Quote keywords, operators, and types\n+        in diagnostics.\n+        (cp_build_unary_op): Same.\n+        (check_for_casting_away_constness): Same.\n+        (build_static_cast): Same.\n+        (build_const_cast_1): Same.\n+        (maybe_warn_about_returning_address_of_local): Same.\n+        (check_return_expr): Same.\n+        * typeck2.c (abstract_virtuals_error_sfinae): Same.\n+        (digest_init_r): Replace a tab with spaces in a diagnostic.\n+        (build_functional_cast): Quote keywords, operators, and types\n+        in diagnostics.\n+\n 2019-05-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/90197"}, {"sha": "e160dd160eabfc99b258322c21c53800477541a8", "filename": "gcc/cp/call.c", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3603,7 +3603,7 @@ print_z_candidate (location_t loc, const char *msgstr,\n {\n   const char *msg = (msgstr == NULL\n \t\t     ? \"\"\n-\t\t     : ACONCAT ((msgstr, \" \", NULL)));\n+\t\t     : ACONCAT ((_(msgstr), \" \", NULL)));\n   tree fn = candidate->fn;\n   if (flag_new_inheriting_ctors)\n     fn = strip_inheriting_ctors (fn);\n@@ -3613,24 +3613,24 @@ print_z_candidate (location_t loc, const char *msgstr,\n     {\n       cloc = loc;\n       if (candidate->num_convs == 3)\n-\tinform (cloc, \"%s%<%D(%T, %T, %T)%> <built-in>\", msg, fn,\n+\tinform (cloc, \"%s%<%D(%T, %T, %T)%> (built-in)\", msg, fn,\n \t\tcandidate->convs[0]->type,\n \t\tcandidate->convs[1]->type,\n \t\tcandidate->convs[2]->type);\n       else if (candidate->num_convs == 2)\n-\tinform (cloc, \"%s%<%D(%T, %T)%> <built-in>\", msg, fn,\n+\tinform (cloc, \"%s%<%D(%T, %T)%> (built-in)\", msg, fn,\n \t\tcandidate->convs[0]->type,\n \t\tcandidate->convs[1]->type);\n       else\n-\tinform (cloc, \"%s%<%D(%T)%> <built-in>\", msg, fn,\n+\tinform (cloc, \"%s%<%D(%T)%> (built-in)\", msg, fn,\n \t\tcandidate->convs[0]->type);\n     }\n   else if (TYPE_P (fn))\n-    inform (cloc, \"%s%qT <conversion>\", msg, fn);\n+    inform (cloc, \"%s%qT (conversion)\", msg, fn);\n   else if (candidate->viable == -1)\n-    inform (cloc, \"%s%#qD <near match>\", msg, fn);\n+    inform (cloc, \"%s%#qD (near match)\", msg, fn);\n   else if (DECL_DELETED_FN (fn))\n-    inform (cloc, \"%s%#qD <deleted>\", msg, fn);\n+    inform (cloc, \"%s%#qD (deleted)\", msg, fn);\n   else\n     inform (cloc, \"%s%#qD\", msg, fn);\n   if (fn != candidate->fn)\n@@ -3763,7 +3763,7 @@ print_z_candidates (location_t loc, struct z_candidate *candidates)\n     }\n \n   for (; candidates; candidates = candidates->next)\n-    print_z_candidate (loc, \"candidate:\", candidates);\n+    print_z_candidate (loc, N_(\"candidate:\"), candidates);\n }\n \n /* USER_SEQ is a user-defined conversion sequence, beginning with a\n@@ -5003,7 +5003,8 @@ build_conditional_expr_1 (const op_location_t &loc,\n     {\n       if (complain & tf_error)\n \tpedwarn (loc, OPT_Wpedantic,\n-\t\t \"ISO C++ forbids omitting the middle term of a ?: expression\");\n+\t\t \"ISO C++ forbids omitting the middle term of \"\n+\t\t \"a %<?:%> expression\");\n \n       if ((complain & tf_warning) && !truth_value_p (TREE_CODE (arg1)))\n \twarn_for_omitted_condop (loc, arg1);\n@@ -5276,7 +5277,8 @@ build_conditional_expr_1 (const op_location_t &loc,\n \t{\n \t  if (complain & tf_error)\n \t    {\n-\t      error_at (loc, \"operands to ?: have different types %qT and %qT\",\n+\t      error_at (loc, \"operands to %<?:%> have different types \"\n+\t\t\t\"%qT and %qT\",\n \t\t\targ2_type, arg3_type);\n \t      if (conv2 && !conv2->bad_p && conv3 && !conv3->bad_p)\n \t\tinform (loc, \"  and each type can be converted to the other\");\n@@ -5392,7 +5394,7 @@ build_conditional_expr_1 (const op_location_t &loc,\n       if (!any_viable_p)\n \t{\n           if (complain & tf_error)\n-\t    error_at (loc, \"operands to ?: have different types %qT and %qT\",\n+\t    error_at (loc, \"operands to %<?:%> have different types %qT and %qT\",\n \t\t      arg2_type, arg3_type);\n \t  return error_mark_node;\n \t}\n@@ -5539,7 +5541,7 @@ build_conditional_expr_1 (const op_location_t &loc,\n   if (!result_type)\n     {\n       if (complain & tf_error)\n-        error_at (loc, \"operands to ?: have different types %qT and %qT\",\n+\terror_at (loc, \"operands to %<?:%> have different types %qT and %qT\",\n \t\t  arg2_type, arg3_type);\n       return error_mark_node;\n     }\n@@ -6489,10 +6491,10 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t{\n \t  const char *const msg1\n \t    = G_(\"exception cleanup for this placement new selects \"\n-\t\t \"non-placement operator delete\");\n+\t\t \"non-placement %<operator delete%>\");\n \t  const char *const msg2\n \t    = G_(\"%qD is a usual (non-placement) deallocation \"\n-\t\t \"function in C++14 (or with -fsized-deallocation)\");\n+\t\t \"function in C++14 (or with %<-fsized-deallocation%>)\");\n \n \t  /* But if the class has an operator delete (void *), then that is\n \t     the usual deallocation function, so we shouldn't complain\n@@ -6889,7 +6891,7 @@ maybe_print_user_conv_context (conversion *convs)\n     for (conversion *t = convs; t; t = next_conversion (t))\n       if (t->kind == ck_user)\n \t{\n-\t  print_z_candidate (0, \"  after user-defined conversion:\",\n+\t  print_z_candidate (0, N_(\"  after user-defined conversion:\"),\n \t\t\t     t->cand);\n \t  break;\n \t}\n@@ -7002,7 +7004,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\t      \"from %qH to %qI\", TREE_TYPE (expr),\n \t\t\t\t      totype);\n \t      if (complained)\n-\t\tprint_z_candidate (loc, \"candidate is:\", t->cand);\n+\t\tprint_z_candidate (loc, N_(\"candidate is:\"), t->cand);\n \t      expr = convert_like_real (t, expr, fn, argnum,\n \t\t\t\t\t/*issue_conversion_warnings=*/false,\n \t\t\t\t\t/*c_cast_p=*/false,\n@@ -7514,8 +7516,9 @@ convert_arg_to_ellipsis (tree arg, tsubst_flags_t complain)\n \t  if (abi_version_crosses (6)\n \t      && TYPE_MODE (TREE_TYPE (prom)) != TYPE_MODE (arg_type)\n \t      && (complain & tf_warning))\n-\t    warning_at (loc, OPT_Wabi, \"scoped enum %qT passed through ... as \"\n-\t\t\t\"%qT before %<-fabi-version=6%>, %qT after\", arg_type,\n+\t    warning_at (loc, OPT_Wabi, \"scoped enum %qT passed through %<...%>\"\n+\t\t\t\"as %qT before %<-fabi-version=6%>, %qT after\",\n+\t\t\targ_type,\n \t\t\tTREE_TYPE (prom), ENUM_UNDERLYING_TYPE (arg_type));\n \t  if (!abi_version_at_least (6))\n \t    arg = prom;\n@@ -8593,8 +8596,8 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t  if (is_std_init_list (type)\n \t      && conv_binds_ref_to_prvalue (convs[1]))\n \t    warning_at (loc, OPT_Winit_list_lifetime,\n-\t\t\t\"assignment from temporary initializer_list does not \"\n-\t\t\t\"extend the lifetime of the underlying array\");\n+\t\t\t\"assignment from temporary %<initializer_list%> does \"\n+\t\t\t\"not extend the lifetime of the underlying array\");\n \t  arg = cp_build_fold_indirect_ref (arg);\n \t  val = build2 (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n \t}\n@@ -10740,7 +10743,8 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn,\n \t      && warning (OPT_Wconversion, \"  for conversion from %qH to %qI\",\n \t\t\t  source, w->second_conv->type)) \n \t    {\n-\t      inform (input_location, \"  because conversion sequence for the argument is better\");\n+\t      inform (input_location, \"  because conversion sequence \"\n+\t\t      \"for the argument is better\");\n \t    }\n \t}\n       else\n@@ -11026,8 +11030,8 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn,\n \t\t\t   \"though the worst conversion for the first is \"\n \t\t\t   \"better than the worst conversion for the second:\"))\n \t\t{\n-\t\t  print_z_candidate (input_location, _(\"candidate 1:\"), w);\n-\t\t  print_z_candidate (input_location, _(\"candidate 2:\"), l);\n+\t\t  print_z_candidate (input_location, N_(\"candidate 1:\"), w);\n+\t\t  print_z_candidate (input_location, N_(\"candidate 2:\"), l);\n \t\t}\n \t    }\n \t  else"}, {"sha": "67a8f04310cbb381a1e6a62d4a9f6a09d00a590d", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2020,9 +2020,9 @@ cxx_eval_check_shift_p (location_t loc, const constexpr_ctx *ctx,\n   if (compare_tree_int (rhs, uprec) >= 0)\n     {\n       if (!ctx->quiet)\n-\tpermerror (loc, \"right operand of shift expression %q+E is >= than \"\n-\t\t   \"the precision of the left operand\",\n-\t\t   build2_loc (loc, code, type, lhs, rhs));\n+\tpermerror (loc, \"right operand of shift expression %q+E is greater \"\n+\t\t   \"than or equal to the precision %wu of the left operand\",\n+\t\t   build2_loc (loc, code, type, lhs, rhs), uprec);\n       return (!flag_permissive || ctx->quiet);\n     }\n \n@@ -4420,7 +4420,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       if (!ctx->quiet)\n \terror_at (cp_expr_loc_or_loc (t, input_location),\n \t\t  \"%<constexpr%> evaluation operation count exceeds limit of \"\n-\t\t  \"%wd (use -fconstexpr-ops-limit= to increase the limit)\",\n+\t\t  \"%wd (use %<-fconstexpr-ops-limit=%> to increase the limit)\",\n \t\t  constexpr_ops_limit);\n       *ctx->constexpr_ops_count = INTTYPE_MINIMUM (HOST_WIDE_INT);\n       *non_constant_p = true;\n@@ -4957,7 +4957,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t{\n \t  if (!ctx->quiet)\n \t    error_at (cp_expr_loc_or_loc (t, input_location),\n-\t\t      \"a reinterpret_cast is not a constant expression\");\n+\t\t      \"%<reinterpret_cast%> is not a constant expression\");\n \t  *non_constant_p = true;\n \t  return t;\n \t}\n@@ -6116,7 +6116,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       if (REINTERPRET_CAST_P (t))\n \t{\n \t  if (flags & tf_error)\n-\t    error_at (loc, \"a reinterpret_cast is not a constant expression\");\n+\t    error_at (loc, \"%<reinterpret_cast%> is not a constant expression\");\n \t  return false;\n \t}\n       /* FALLTHRU */\n@@ -6135,7 +6135,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t&& !integer_zerop (from))\n \t      {\n \t\tif (flags & tf_error)\n-\t\t  error_at (loc, \"reinterpret_cast from integer to pointer\");\n+\t\t  error_at (loc,\n+\t\t\t    \"%<reinterpret_cast%> from integer to pointer\");\n \t\treturn false;\n \t      }\n \t  }\n@@ -6389,7 +6390,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t/* In C++2a virtual calls can be constexpr, don't give up yet.  */\n \treturn true;\n       else if (flags & tf_error)\n-\terror_at (loc, \"virtual functions cannot be constexpr before C++2a\");\n+\terror_at (loc,\n+\t\t  \"virtual functions cannot be %<constexpr%> before C++2a\");\n       return false;\n \n     case TYPEID_EXPR:\n@@ -6401,7 +6403,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t    && TYPE_POLYMORPHIC_P (TREE_TYPE (e)))\n           {\n             if (flags & tf_error)\n-              error_at (loc, \"typeid-expression is not a constant expression \"\n+\t      error_at (loc, \"%<typeid%> is not a constant expression \"\n \t\t\t\"because %qE is of polymorphic type\", e);\n             return false;\n           }"}, {"sha": "e8c22c071c22c8a93b8100a5bf35afb1faebebfc", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1489,10 +1489,10 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \t      {\n \t\tauto_diagnostic_group d;\n \t\tif (warning_at (loc, OPT_Wterminate,\n-\t\t\t\t\"throw will always call terminate()\")\n+\t\t\t\t\"%<throw%> will always call %<terminate%>\")\n \t\t    && cxx_dialect >= cxx11\n \t\t    && DECL_DESTRUCTOR_P (current_function_decl))\n-\t\t  inform (loc, \"in C++11 destructors default to noexcept\");\n+\t\t  inform (loc, \"in C++11 destructors default to %<noexcept%>\");\n \t      }\n \t  }\n \telse\n@@ -1504,8 +1504,8 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \t\t&& (get_defaulted_eh_spec (current_function_decl)\n \t\t    == empty_except_spec))\n \t      warning_at (loc, OPT_Wc__11_compat,\n-\t\t\t  \"in C++11 this throw will terminate because \"\n-\t\t\t  \"destructors default to noexcept\");\n+\t\t\t  \"in C++11 this %<throw%> will call %<terminate%> \"\n+\t\t\t  \"because destructors default to %<noexcept%>\");\n \t  }\n       }\n       break;"}, {"sha": "7ebbf3c80c49906cb6d0fef0363b0382329feb3a", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -88,7 +88,7 @@ cp_convert_to_pointer (tree type, tree expr, bool dofold,\n       if (!COMPLETE_TYPE_P (intype))\n \t{\n \t  if (complain & tf_error)\n-\t    error_at (loc, \"can%'t convert from incomplete type %qH to %qI\",\n+\t    error_at (loc, \"cannot convert from incomplete type %qH to %qI\",\n \t\t      intype, type);\n \t  return error_mark_node;\n \t}\n@@ -1060,14 +1060,14 @@ maybe_warn_nodiscard (tree expr, impl_conv_void implicit)\n \t  auto_diagnostic_group d;\n \t  if (warning_at (loc, OPT_Wunused_result,\n \t\t\t  \"ignoring return value of %qD, \"\n-\t\t\t  \"declared with attribute warn_unused_result\",\n+\t\t\t  \"declared with attribute %<warn_unused_result%>\",\n \t\t\t  fn))\n \t    inform (DECL_SOURCE_LOCATION (fn), \"declared here\");\n \t}\n       else\n \twarning_at (loc, OPT_Wunused_result,\n \t\t    \"ignoring return value of function \"\n-\t\t    \"declared with attribute warn_unused_result\");\n+\t\t    \"declared with attribute %<warn_unused_result%>\");\n     }\n }\n \n@@ -1820,7 +1820,7 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \t  if (TREE_CODE (cand) == TEMPLATE_DECL)\n \t    {\n \t      if (complain)\n-\t\terror (\"default type conversion can%'t deduce template\"\n+\t\terror (\"default type conversion cannot deduce template\"\n \t\t       \" argument for %qD\", cand);\n \t      return error_mark_node;\n \t    }\n@@ -1920,7 +1920,7 @@ type_promotes_to (tree type)\n \t{\n \t  if (abi_version_crosses (6)\n \t      && TYPE_MODE (prom) != TYPE_MODE (type))\n-\t    warning (OPT_Wabi, \"scoped enum %qT passed through ... as \"\n+\t    warning (OPT_Wabi, \"scoped enum %qT passed through %<...%> as \"\n \t\t     \"%qT before %<-fabi-version=6%>, %qT after\",\n \t\t     type, prom, ENUM_UNDERLYING_TYPE (type));\n \t  if (!abi_version_at_least (6))"}, {"sha": "19d14a6a5e9f0ffa89a25749360208a90ad3f455", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3228,32 +3228,32 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n \t{\n \tcase sk_try:\n \t  if (!saw_eh)\n-\t    inf = N_(\"enters try block\");\n+\t    inf = G_(\"  enters %<try%> block\");\n \t  saw_eh = true;\n \t  break;\n \n \tcase sk_catch:\n \t  if (!saw_eh)\n-\t    inf = N_(\"enters catch block\");\n+\t    inf = G_(\"  enters %<catch%> block\");\n \t  saw_eh = true;\n \t  break;\n \n \tcase sk_omp:\n \t  if (!saw_omp)\n-\t    inf = N_(\"enters OpenMP structured block\");\n+\t    inf = G_(\"  enters OpenMP structured block\");\n \t  saw_omp = true;\n \t  break;\n \n \tcase sk_transaction:\n \t  if (!saw_tm)\n-\t    inf = N_(\"enters synchronized or atomic statement\");\n+\t    inf = G_(\"  enters synchronized or atomic statement\");\n \t  saw_tm = true;\n \t  break;\n \n \tcase sk_block:\n \t  if (!saw_cxif && level_for_constexpr_if (b->level_chain))\n \t    {\n-\t      inf = N_(\"enters constexpr if statement\");\n+\t      inf = G_(\"  enters %<constexpr if%> statement\");\n \t      loc = EXPR_LOCATION (b->level_chain->this_entity);\n \t      saw_cxif = true;\n \t    }\n@@ -3269,7 +3269,7 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n \t    complained = identify_goto (decl, input_location, locus, DK_ERROR);\n \t  identified = 2;\n \t  if (complained)\n-\t    inform (loc, \"  %s\", inf);\n+\t    inform (loc, inf);\n \t}\n     }\n \n@@ -3364,7 +3364,7 @@ check_goto (tree decl)\n \t      identified = 2;\n \t    }\n \t  if (complained)\n-\t    inform (DECL_SOURCE_LOCATION (bad), \"  enters catch block\");\n+\t    inform (DECL_SOURCE_LOCATION (bad), \"  enters %<catch%> block\");\n \t  saw_catch = true;\n \t}\n       else if (complained)\n@@ -3382,13 +3382,13 @@ check_goto (tree decl)\n   if (complained)\n     {\n       if (ent->in_try_scope)\n-\tinform (input_location, \"  enters try block\");\n+\tinform (input_location, \"  enters %<try%> block\");\n       else if (ent->in_catch_scope && !saw_catch)\n-\tinform (input_location, \"  enters catch block\");\n+\tinform (input_location, \"  enters %<catch%> block\");\n       else if (ent->in_transaction_scope)\n \tinform (input_location, \"  enters synchronized or atomic statement\");\n       else if (ent->in_constexpr_if)\n-\tinform (input_location, \"  enters %<constexpr%> if statement\");\n+\tinform (input_location, \"  enters %<constexpr if%> statement\");\n     }\n \n   if (ent->in_omp_scope)\n@@ -5078,7 +5078,8 @@ start_decl (const cp_declarator *declarator,\n       && TREE_CODE (decl) == TYPE_DECL)\n     {\n       error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\"typedef %qD is initialized (use decltype instead)\", decl);\n+\t\t\"typedef %qD is initialized (use %qs instead)\",\n+\t\tdecl, \"decltype\");\n       return error_mark_node;\n     }\n \n@@ -7020,8 +7021,8 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \treturn;\n       if (TREE_CODE (type) == FUNCTION_TYPE)\n \t{\n-\t  error (\"initializer for %<decltype(auto) %D%> has function type \"\n-\t\t \"(did you forget the %<()%> ?)\", decl);\n+\t  error (\"initializer for %<decltype(auto) %D%> has function type; \"\n+\t\t \"did you forget the %<()%>?\", decl);\n \t  TREE_TYPE (decl) = error_mark_node;\n \t  return;\n \t}\n@@ -11569,7 +11570,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t  error (\"friend declaration not in class definition\");\n \t\tif (current_function_decl && funcdef_flag)\n \t\t  {\n-\t\t    error (\"can%'t define friend function %qs in a local \"\n+\t\t    error (\"cannot define friend function %qs in a local \"\n \t\t\t   \"class definition\", name);\n \t\t    friendp = 0;\n \t\t  }\n@@ -13612,7 +13613,7 @@ grok_op_properties (tree decl, bool complain)\n   if (operator_code == COND_EXPR)\n     {\n       /* 13.4.0.3 */\n-      error_at (loc, \"ISO C++ prohibits overloading operator ?:\");\n+      error_at (loc, \"ISO C++ prohibits overloading %<operator ?:%>\");\n       return false;\n     }\n "}, {"sha": "bd022ca7ae37b431e47adb1722db3adee7e98323", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -830,7 +830,8 @@ grokfield (const cp_declarator *declarator,\n   if (TREE_CODE (value) == TYPE_DECL && init)\n     {\n       error_at (cp_expr_loc_or_loc (init, DECL_SOURCE_LOCATION (value)),\n-\t\t\"typedef %qD is initialized (use decltype instead)\", value);\n+\t\t\"typedef %qD is initialized (use %qs instead)\",\n+\t\tvalue, \"decltype\");\n       init = NULL_TREE;\n     }\n \n@@ -1772,12 +1773,13 @@ coerce_delete_type (tree decl, location_t loc)\n       else\n \t/* A destroying operator delete shall be a class member function named\n \t   operator delete.  */\n-\terror_at (loc, \"destroying operator delete must be a member function\");\n+\terror_at (loc,\n+\t\t  \"destroying %<operator delete%> must be a member function\");\n       const ovl_op_info_t *op = IDENTIFIER_OVL_OP_INFO (DECL_NAME (decl));\n       if (op->flags & OVL_OP_FLAG_VEC)\n-\terror_at (loc, \"operator delete[] cannot be a destroying delete\");\n+\terror_at (loc, \"%<operator delete[]%> cannot be a destroying delete\");\n       if (!usual_deallocation_fn_p (decl))\n-\terror_at (loc, \"destroying operator delete must be a usual \"\n+\terror_at (loc, \"destroying %<operator delete%> must be a usual \"\n \t\t  \"deallocation function\");\n     }\n "}, {"sha": "892d5201da983901d8faa138cfad257107962ef7", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -936,7 +936,7 @@ is_admissible_throw_operand_or_catch_parameter (tree t, bool is_throw)\n \t   && TYPE_REF_P (type)\n \t   && TYPE_REF_IS_RVALUE (type))\n     {\n-      error (\"cannot declare catch parameter to be of rvalue \"\n+      error (\"cannot declare %<catch%> parameter to be of rvalue \"\n \t     \"reference type %qT\", type);\n       return false;\n     }"}, {"sha": "4ea4bbc54a5e0416ee9a703caace62a962af5acc", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -638,9 +638,10 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t\t\t\t\"%q#D declares a non-template function\", decl);\n \t      if (! explained && warned)\n \t\t{\n-\t\t  inform (input_location, \"(if this is not what you intended, make sure \"\n-\t\t\t  \"the function template has already been declared \"\n-\t\t\t  \"and add <> after the function name here) \");\n+\t\t  inform (input_location, \"(if this is not what you intended, \"\n+\t\t\t  \"make sure the function template has already been \"\n+\t\t\t  \"declared and add %<<>%> after the function name \"\n+\t\t\t  \"here)\");\n \t\t  explained = 1;\n \t\t}\n \t    }"}, {"sha": "4ffd96eef9d705c1566d6a7765466deb4c73e02f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3005,7 +3005,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t  pedwarn (cp_expr_loc_or_loc (outer_nelts, input_location), OPT_Wvla,\n \t\t   typedef_variant_p (orig_type)\n \t\t   ? G_(\"non-constant array new length must be specified \"\n-\t\t\t\"directly, not by typedef\")\n+\t\t\t\"directly, not by %<typedef%>\")\n \t\t   : G_(\"non-constant array new length must be specified \"\n \t\t\t\"without parentheses around the type-id\"));\n \t}\n@@ -3016,13 +3016,13 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n   if (VOID_TYPE_P (elt_type))\n     {\n       if (complain & tf_error)\n-        error (\"invalid type %<void%> for new\");\n+\terror (\"invalid type %<void%> for %<new%>\");\n       return error_mark_node;\n     }\n \n   if (is_std_init_list (elt_type))\n     warning (OPT_Winit_list_lifetime,\n-\t     \"%<new%> of initializer_list does not \"\n+\t     \"%<new%> of %<initializer_list%> does not \"\n \t     \"extend the lifetime of the underlying array\");\n \n   if (abstract_virtuals_error_sfinae (ACU_NEW, elt_type, complain))\n@@ -3867,11 +3867,11 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n \t  auto_diagnostic_group d;\n \t  if (warning (OPT_Wdelete_incomplete,\n \t\t\t \"possible problem detected in invocation of \"\n-\t\t\t \"delete [] operator:\"))\n+\t\t\t \"operator %<delete []%>\"))\n \t    {\n \t      cxx_incomplete_type_diagnostic (base, type, DK_WARNING);\n \t      inform (input_location, \"neither the destructor nor the \"\n-\t\t\t\"class-specific operator delete [] will be called, \"\n+\t\t\t\"class-specific operator %<delete []%> will be called, \"\n \t\t\t\"even if they are declared when the class is defined\");\n \t    }\n \t}\n@@ -4753,14 +4753,14 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t\t{\n \t\t  auto_diagnostic_group d;\n \t\t  if (warning (OPT_Wdelete_incomplete,\n-\t\t\t\t \"possible problem detected in invocation of \"\n-\t\t\t\t \"delete operator:\"))\n+\t\t\t       \"possible problem detected in invocation of \"\n+\t\t\t       \"%<operator delete%>\"))\n \t\t    {\n \t\t      cxx_incomplete_type_diagnostic (addr, type, DK_WARNING);\n \t\t      inform (input_location,\n-\t\t\t\t\"neither the destructor nor the class-specific \"\n-\t\t\t\t\"operator delete will be called, even if they \"\n-\t\t\t\t\"are declared when the class is defined\");\n+\t\t\t      \"neither the destructor nor the class-specific \"\n+\t\t\t      \"%<operator delete%> will be called, even if \"\n+\t\t\t      \"they are declared when the class is defined\");\n \t\t    }\n \t\t}\n \t    }"}, {"sha": "20965e49fe471db47791311169b18e784b8868ec", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -385,22 +385,22 @@ parse_strconst_pragma (const char* name, int opt)\n   if (t == CPP_STRING)\n     {\n       if (pragma_lex (&x) != CPP_EOF)\n-\twarning (0, \"junk at end of #pragma %s\", name);\n+\twarning (0, \"junk at end of %<#pragma %s%>\", name);\n       return result;\n     }\n \n   if (t == CPP_EOF && opt)\n     return NULL_TREE;\n \n-  error (\"invalid #pragma %s\", name);\n+  error (\"invalid %<#pragma %s%>\", name);\n   return error_mark_node;\n }\n \n static void\n handle_pragma_vtable (cpp_reader* /*dfile*/)\n {\n   parse_strconst_pragma (\"vtable\", 0);\n-  sorry (\"#pragma vtable no longer supported\");\n+  sorry (\"%<#pragma vtable%> no longer supported\");\n }\n \n static void\n@@ -472,7 +472,7 @@ handle_pragma_implementation (cpp_reader* /*dfile*/)\n     {\n       filename = TREE_STRING_POINTER (fname);\n       if (cpp_included_before (parse_in, filename, input_location))\n-\twarning (0, \"#pragma implementation for %qs appears after \"\n+\twarning (0, \"%<#pragma implementation%> for %qs appears after \"\n \t\t \"file is included\", filename);\n     }\n \n@@ -568,8 +568,8 @@ unqualified_fn_lookup_error (cp_expr name_expr)\n \t  if (!hint)\n \t    {\n \t      inform (loc, \"(if you use %<-fpermissive%>, G++ will accept your \"\n-\t\t     \"code, but allowing the use of an undeclared name is \"\n-\t\t     \"deprecated)\");\n+\t\t      \"code, but allowing the use of an undeclared name is \"\n+\t\t      \"deprecated)\");\n \t      hint = true;\n \t    }\n \t}"}, {"sha": "d66482b194dbc19c586cd8dd1f07826a15bd2b7a", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2305,11 +2305,11 @@ write_type (tree type)\n \t      break;\n \n \t    case TYPEOF_TYPE:\n-\t      sorry (\"mangling typeof, use decltype instead\");\n+\t      sorry (\"mangling %<typeof%>, use %<decltype%> instead\");\n \t      break;\n \n \t    case UNDERLYING_TYPE:\n-\t      sorry (\"mangling __underlying_type\");\n+\t      sorry (\"mangling %<__underlying_type%>\");\n \t      break;\n \n \t    case LANG_TYPE:"}, {"sha": "3fb3b5a9091286d9572377367d85f86da2ffa4ed", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -826,13 +826,13 @@ do_build_copy_assign (tree fndecl)\n \n \t  if (CP_TYPE_CONST_P (expr_type))\n \t    {\n-\t      error (\"non-static const member %q#D, can%'t use default \"\n+\t      error (\"non-static const member %q#D, cannot use default \"\n \t\t     \"assignment operator\", field);\n \t      continue;\n \t    }\n \t  else if (TYPE_REF_P (expr_type))\n \t    {\n-\t      error (\"non-static reference member %q#D, can%'t use \"\n+\t      error (\"non-static reference member %q#D, cannot use \"\n \t\t     \"default assignment operator\", field);\n \t      continue;\n \t    }\n@@ -1336,13 +1336,13 @@ walk_field_subobs (tree fields, special_function_kind sfk, tree fnname,\n \t  if (CP_TYPE_CONST_P (mem_type) && !CLASS_TYPE_P (mem_type))\n \t    {\n \t      if (diag)\n-\t\terror (\"non-static const member %q#D, can%'t use default \"\n+\t\terror (\"non-static const member %q#D, cannot use default \"\n \t\t       \"assignment operator\", field);\n \t    }\n \t  else if (TYPE_REF_P (mem_type))\n \t    {\n \t      if (diag)\n-\t\terror (\"non-static reference member %q#D, can%'t use \"\n+\t\terror (\"non-static reference member %q#D, cannot use \"\n \t\t       \"default assignment operator\", field);\n \t    }\n \t  else\n@@ -2248,8 +2248,8 @@ defaulted_late_check (tree fn)\n       if (!CLASSTYPE_TEMPLATE_INSTANTIATION (ctx))\n \t{\n \t  error (\"explicitly defaulted function %q+D cannot be declared \"\n-\t\t \"as %<constexpr%> because the implicit declaration is not \"\n-\t\t \"%<constexpr%>:\", fn);\n+\t\t \"%qs because the implicit declaration is not %qs:\",\n+\t\t fn, \"constexpr\", \"constexpr\");\n \t  explain_implicit_non_constexpr (fn);\n \t}\n       DECL_DECLARED_CONSTEXPR_P (fn) = false;"}, {"sha": "d8d71be98ec2f7776c9d9530759664a10a29e9d5", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3270,10 +3270,10 @@ cp_binding_level_debug (cp_binding_level *scope, int line, const char *action)\n {\n   const char *desc = cp_binding_level_descriptor (scope);\n   if (scope->this_entity)\n-    verbatim (\"%s %<%s(%E)%> %p %d\\n\", action, desc,\n+    verbatim (\"%s %<%s(%E)%> %p %d\", action, desc,\n \t      scope->this_entity, (void *) scope, line);\n   else\n-    verbatim (\"%s %s %p %d\\n\", action, desc, (void *) scope, line);\n+    verbatim (\"%s %s %p %d\", action, desc, (void *) scope, line);\n }\n \n /* A chain of binding_level structures awaiting reuse.  */\n@@ -7499,7 +7499,7 @@ void\n pop_everything (void)\n {\n   if (ENABLE_SCOPE_CHECKING)\n-    verbatim (\"XXX entering pop_everything ()\\n\");\n+    verbatim (\"XXX entering %<pop_everything ()%>\");\n   while (!namespace_bindings_p ())\n     {\n       if (current_binding_level->kind == sk_class)\n@@ -7508,7 +7508,7 @@ pop_everything (void)\n \tpoplevel (0, 0, 0);\n     }\n   if (ENABLE_SCOPE_CHECKING)\n-    verbatim (\"XXX leaving pop_everything ()\\n\");\n+    verbatim (\"XXX leaving %<pop_everything ()%>\");\n }\n \n /* Emit debugging information for using declarations and directives."}, {"sha": "e6ef5a9bc008e9084242ba98a6bdd083a9ccfd3f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1308,7 +1308,7 @@ cp_lexer_start_debugging (cp_lexer* lexer)\n {\n   if (!LEXER_DEBUGGING_ENABLED_P)\n     fatal_error (input_location,\n-\t\t \"LEXER_DEBUGGING_ENABLED_P is not set to true\");\n+\t\t \"%<LEXER_DEBUGGING_ENABLED_P%> is not set to true\");\n \n   lexer->debugging_p = true;\n   cp_lexer_debug_stream = stderr;\n@@ -1321,7 +1321,7 @@ cp_lexer_stop_debugging (cp_lexer* lexer)\n {\n   if (!LEXER_DEBUGGING_ENABLED_P)\n     fatal_error (input_location,\n-\t\t \"LEXER_DEBUGGING_ENABLED_P is not set to true\");\n+\t\t \"%<LEXER_DEBUGGING_ENABLED_P%> is not set to true\");\n \n   lexer->debugging_p = false;\n   cp_lexer_debug_stream = NULL;\n@@ -4537,7 +4537,7 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n   else if (i14)\n     {\n       inform (token->location, \"add %<using namespace std::complex_literals%> \"\n-\t      \"(from <complex>) to enable the C++14 user-defined literal \"\n+\t      \"(from %<<complex>%>) to enable the C++14 user-defined literal \"\n \t      \"suffixes\");\n       if (ext)\n \tinform (token->location, \"or use %<j%> instead of %<i%> for the \"\n@@ -6400,7 +6400,7 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t\t  == CPP_SCOPE))\n \t    {\n \t      token = cp_lexer_consume_token (parser->lexer);\n-\t      error_at (token->location, \"decltype evaluates to %qT, \"\n+\t      error_at (token->location, \"%<decltype%> evaluates to %qT, \"\n \t\t\t\"which is not a class or enumeration type\",\n \t\t\ttoken->u.tree_check_value->value);\n \t      parser->scope = error_mark_node;\n@@ -9671,7 +9671,7 @@ cp_parser_question_colon_clause (cp_parser* parser, cp_expr logical_or_expr)\n       && token->type == CPP_COLON)\n     {\n       pedwarn (token->location, OPT_Wpedantic, \n-               \"ISO C++ does not allow ?: with omitted middle operand\");\n+\t       \"ISO C++ does not allow %<?:%> with omitted middle operand\");\n       /* Implicit true clause.  */\n       expr = NULL_TREE;\n       c_inhibit_evaluation_warnings +=\n@@ -14442,7 +14442,7 @@ cp_parser_static_assert(cp_parser *parser, bool member_p)\n     {\n       if (cxx_dialect < cxx17)\n \tpedwarn (input_location, OPT_Wpedantic,\n-\t\t \"static_assert without a message \"\n+\t\t \"%<static_assert%> without a message \"\n \t\t \"only available with %<-std=c++17%> or %<-std=gnu++17%>\");\n       /* Eat the ')'  */\n       cp_lexer_consume_token (parser->lexer);\n@@ -19818,14 +19818,15 @@ cp_parser_asm_definition (cp_parser* parser)\n \t  case RID_VOLATILE:\n \t    if (volatile_loc)\n \t      {\n-\t\terror_at (loc, \"duplicate asm qualifier %qT\", token->u.value);\n+\t\terror_at (loc, \"duplicate %<asm%> qualifier %qT\",\n+\t\t\t  token->u.value);\n \t\tinform (volatile_loc, \"first seen here\");\n \t      }\n \t    else\n \t      {\n \t\tif (!parser->in_function_body)\n-\t\t  warning_at (loc, 0, \"asm qualifier %qT ignored outside of \"\n-\t\t\t\t      \"function body\", token->u.value);\n+\t\t  warning_at (loc, 0, \"%<asm%> qualifier %qT ignored \"\n+\t\t\t      \"outside of function body\", token->u.value);\n \t\tvolatile_loc = loc;\n \t      }\n \t    cp_lexer_consume_token (parser->lexer);\n@@ -19834,7 +19835,8 @@ cp_parser_asm_definition (cp_parser* parser)\n \t  case RID_INLINE:\n \t    if (inline_loc)\n \t      {\n-\t\terror_at (loc, \"duplicate asm qualifier %qT\", token->u.value);\n+\t\terror_at (loc, \"duplicate %<asm%> qualifier %qT\",\n+\t\t\t  token->u.value);\n \t\tinform (inline_loc, \"first seen here\");\n \t      }\n \t    else\n@@ -19847,7 +19849,8 @@ cp_parser_asm_definition (cp_parser* parser)\n \t  case RID_GOTO:\n \t    if (goto_loc)\n \t      {\n-\t\terror_at (loc, \"duplicate asm qualifier %qT\", token->u.value);\n+\t\terror_at (loc, \"duplicate %<asm%> qualifier %qT\",\n+\t\t\t  token->u.value);\n \t\tinform (goto_loc, \"first seen here\");\n \t      }\n \t    else\n@@ -19859,7 +19862,7 @@ cp_parser_asm_definition (cp_parser* parser)\n \n \t  case RID_CONST:\n \t  case RID_RESTRICT:\n-\t    error_at (loc, \"%qT is not an asm qualifier\", token->u.value);\n+\t    error_at (loc, \"%qT is not an %<asm%> qualifier\", token->u.value);\n \t    cp_lexer_consume_token (parser->lexer);\n \t    continue;\n \n@@ -19875,7 +19878,7 @@ cp_parser_asm_definition (cp_parser* parser)\n \n   if (!parser->in_function_body && (inline_p || goto_p))\n     {\n-      error_at (first_loc, \"asm qualifier outside of function body\");\n+      error_at (first_loc, \"%<asm%> qualifier outside of function body\");\n       inline_p = goto_p = false;\n     }\n \n@@ -20257,7 +20260,7 @@ cp_parser_init_declarator (cp_parser* parser,\n \t     on a function-definition.  */\n \t  if (asm_specification)\n \t    error_at (asm_spec_start_token->location,\n-\t\t      \"an asm-specification is not allowed \"\n+\t\t      \"an %<asm%> specification is not allowed \"\n \t\t      \"on a function-definition\");\n \t  if (attributes)\n \t    error_at (attributes_start_token->location,\n@@ -27913,12 +27916,12 @@ cp_parser_template_declaration_after_parameters (cp_parser* parser,\n \t{\n \t  if (cxx_dialect > cxx17)\n \t    error (\"literal operator template %qD has invalid parameter list;\"\n-\t\t   \"  Expected non-type template parameter pack <char...> \"\n+\t\t   \" expected non-type template parameter pack %<<char...>%> \"\n \t\t   \"or single non-type parameter of class type\",\n \t\t   decl);\n \t  else\n-\t    error (\"literal operator template %qD has invalid parameter list.\"\n-\t\t   \"  Expected non-type template parameter pack <char...>\",\n+\t    error (\"literal operator template %qD has invalid parameter list;\"\n+\t\t   \" expected non-type template parameter pack %<<char...>%>\",\n \t\t   decl);\n \t}\n     }\n@@ -39634,8 +39637,8 @@ cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,\n \terror_at (loc, \"reference type %qT in \"\n \t\t       \"%<#pragma omp declare reduction%>\", type);\n       else if (TYPE_QUALS_NO_ADDR_SPACE (type))\n-\terror_at (loc, \"const, volatile or __restrict qualified type %qT in \"\n-\t\t       \"%<#pragma omp declare reduction%>\", type);\n+\terror_at (loc, \"%<const%>, %<volatile%> or %<__restrict%>-qualified \"\n+\t\t  \"type %qT in %<#pragma omp declare reduction%>\", type);\n       else\n \ttypes.safe_push (type);\n \n@@ -40486,7 +40489,7 @@ cp_parser_transaction (cp_parser *parser, cp_token *token)\n   else if (keyword == RID_ATOMIC_CANCEL)\n     {\n       /* cancel-and-throw is unimplemented.  */\n-      sorry (\"atomic_cancel\");\n+      sorry (\"%<atomic_cancel%>\");\n       noex = NULL_TREE;\n     }\n   else"}, {"sha": "ab79a9e73fac48a344efb3bb5b37c8267a11f3df", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1058,10 +1058,11 @@ maybe_process_partial_specialization (tree type)\n \t  if (current_namespace\n \t      != decl_namespace_context (tmpl))\n \t    {\n-\t      permerror (input_location,\n-\t\t\t \"specializing %q#T in different namespace\", type);\n-\t      permerror (DECL_SOURCE_LOCATION (tmpl),\n-\t\t\t \"  from definition of %q#D\", tmpl);\n+\t      if (permerror (input_location,\n+\t\t\t     \"specialization of %qD in different namespace\",\n+\t\t\t     type))\n+\t\tinform (DECL_SOURCE_LOCATION (tmpl),\n+\t\t\t\"from definition of %q#D\", tmpl);\n \t    }\n \n \t  /* Check for invalid specialization after instantiation:\n@@ -3606,7 +3607,8 @@ expand_integer_pack (tree call, tree args, tsubst_flags_t complain,\n \t{\n \t  if ((complain & tf_error)\n \t      && hi != error_mark_node)\n-\t    error (\"argument to __integer_pack must be between 0 and %d\", max);\n+\t    error (\"argument to %<__integer_pack%> must be between 0 and %d\",\n+\t\t   max);\n \t  return error_mark_node;\n \t}\n \n@@ -4081,7 +4083,7 @@ check_for_bare_parameter_packs (tree t, location_t loc /* = UNKNOWN_LOCATION */)\n \t  if (name)\n \t    inform (loc, \"        %qD\", name);\n \t  else\n-\t    inform (loc, \"        <anonymous>\");\n+\t    inform (loc, \"        %s\", \"<anonymous>\");\n \n           parameter_packs = TREE_CHAIN (parameter_packs);\n         }\n@@ -6565,7 +6567,7 @@ unify_template_deduction_failure (bool explain_p, tree parm, tree arg)\n {\n   if (explain_p)\n     inform (input_location,\n-\t    \"  can%'t deduce a template for %qT from non-template type %qT\",\n+\t    \"  cannot deduce a template for %qT from non-template type %qT\",\n \t    parm, arg);\n   return unify_invalid (explain_p);\n }"}, {"sha": "4c44a07f40c50bab57d1a09b7aab71c44f7e4df3", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -218,7 +218,7 @@ reopen_repo_file_for_write (void)\n \n   if (repo_file == 0)\n     {\n-      error (\"can%'t create repository information file %qs\", repo_name);\n+      error (\"cannot create repository information file %qs\", repo_name);\n       flag_use_repository = 0;\n     }\n "}, {"sha": "ef78564e88f1aec109d1974ed26ed35a95f8fad2", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -512,7 +512,7 @@ get_typeid (tree type, tsubst_flags_t complain)\n \t  || type_memfn_rqual (type) != REF_QUAL_NONE))\n     {\n       if (complain & tf_error)\n-\terror (\"typeid of qualified function type %qT\", type);\n+\terror (\"%<typeid%> of qualified function type %qT\", type);\n       return error_mark_node;\n     }\n \n@@ -693,8 +693,8 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t\t{\n \t\t  tree expr = throw_bad_cast ();\n                   if (complain & tf_warning)\n-                    warning (0, \"dynamic_cast of %q#D to %q#T can never succeed\",\n-                             old_expr, type);\n+\t            warning (0, \"%<dynamic_cast<%#T>(%#D)%> can never succeed\",\n+\t                     type, old_expr);\n \t\t  /* Bash it to the expected type.  */\n \t\t  TREE_TYPE (expr) = type;\n \t\t  return expr;\n@@ -708,8 +708,8 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t\t  && TREE_CODE (TREE_TYPE (op)) == RECORD_TYPE)\n \t\t{\n                   if (complain & tf_warning)\n-                    warning (0, \"dynamic_cast of %q#D to %q#T can never succeed\",\n-                             op, type);\n+\t            warning (0, \"%<dynamic_cast<%#T>(%#D)%> can never succeed\",\n+\t                     type, op);\n \t\t  retval = build_int_cst (type, 0);\n \t\t  return retval;\n \t\t}\n@@ -798,7 +798,7 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \n  fail:\n   if (complain & tf_error)\n-    error (\"cannot dynamic_cast %qE (of type %q#T) to type %q#T (%s)\",\n+    error (\"cannot %<dynamic_cast%> %qE (of type %q#T) to type %q#T (%s)\",\n            old_expr, TREE_TYPE (old_expr), type, errstr);\n   return error_mark_node;\n }"}, {"sha": "fc5edde89c37ce28087f436b6efe251cf914566b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1585,7 +1585,7 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t     resolve the overloading.  */\n \t  if (TREE_TYPE (operand) == unknown_type_node)\n \t    {\n-\t      error (\"type of asm operand %qE could not be determined\",\n+\t      error (\"type of %<asm%> operand %qE could not be determined\",\n \t\t     TREE_VALUE (t));\n \t      operand = error_mark_node;\n \t    }\n@@ -1667,7 +1667,7 @@ finish_label_decl (tree name)\n {\n   if (!at_function_scope_p ())\n     {\n-      error (\"__label__ declarations are only allowed in function scopes\");\n+      error (\"%<__label__%> declarations are only allowed in function scopes\");\n       return;\n     }\n \n@@ -4099,7 +4099,7 @@ finish_bases (tree type, bool direct)\n   if (!processing_template_decl)\n     {\n       /* Parameter packs can only be used in templates */\n-      error (\"Parameter pack __bases only valid in template declaration\");\n+      error (\"parameter pack %<__bases%> only valid in template declaration\");\n       return error_mark_node;\n     }\n \n@@ -4164,7 +4164,7 @@ finish_offsetof (tree object_ptr, tree expr, location_t loc)\n       && CLASS_TYPE_P (TREE_TYPE (TREE_TYPE (object_ptr)))\n       && CLASSTYPE_NON_STD_LAYOUT (TREE_TYPE (TREE_TYPE (object_ptr)))\n       && cp_unevaluated_operand == 0)\n-    warning_at (loc, OPT_Winvalid_offsetof, \"offsetof within \"\n+    warning_at (loc, OPT_Winvalid_offsetof, \"%<offsetof%> within \"\n \t\t\"non-standard-layout type %qT is conditionally-supported\",\n \t\tTREE_TYPE (TREE_TYPE (object_ptr)));\n   return fold_offsetof (expr);\n@@ -5546,8 +5546,8 @@ cp_check_omp_declare_reduction (tree udr)\n     }\n   else if (TYPE_QUALS_NO_ADDR_SPACE (type))\n     {\n-      error_at (loc, \"const, volatile or __restrict qualified type %qT in \"\n-\t\t     \"%<#pragma omp declare reduction%>\", type);\n+      error_at (loc, \"%<const%>, %<volatile%> or %<__restrict%>-qualified \"\n+\t\t\"type %qT in %<#pragma omp declare reduction%>\", type);\n       return;\n     }\n \n@@ -9334,7 +9334,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \t  && TYPE_P (TREE_OPERAND (expr, 0))))\n     {\n       if (complain & tf_error)\n-\terror (\"argument to decltype must be an expression\");\n+\terror (\"argument to %<decltype%> must be an expression\");\n       return error_mark_node;\n     }\n \n@@ -9362,7 +9362,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n   if (type_unknown_p (expr))\n     {\n       if (complain & tf_error)\n-\terror (\"decltype cannot resolve address of overloaded function\");\n+\terror (\"%<decltype%> cannot resolve address of overloaded function\");\n       return error_mark_node;\n     }\n "}, {"sha": "8d7f7a2c3e74481f57530dd262d746a78642f29e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4472,7 +4472,7 @@ handle_init_priority_attribute (tree* node,\n \n   if (!initp_expr || TREE_CODE (initp_expr) != INTEGER_CST)\n     {\n-      error (\"requested init_priority is not an integer constant\");\n+      error (\"requested %<init_priority%> is not an integer constant\");\n       cxx_constant_value (initp_expr);\n       *no_add_attrs = true;\n       return NULL_TREE;\n@@ -4502,7 +4502,8 @@ handle_init_priority_attribute (tree* node,\n \n   if (pri > MAX_INIT_PRIORITY || pri <= 0)\n     {\n-      error (\"requested init_priority is out of range\");\n+      error (\"requested %<init_priority%> %i is out of range [0, %i]\",\n+\t     pri, MAX_INIT_PRIORITY);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -4512,7 +4513,8 @@ handle_init_priority_attribute (tree* node,\n   if (pri <= MAX_RESERVED_INIT_PRIORITY)\n     {\n       warning\n-\t(0, \"requested init_priority is reserved for internal use\");\n+\t(0, \"requested %<init_priority%> %i is reserved for internal use\",\n+\t pri);\n     }\n \n   if (SUPPORTS_INIT_PRIORITY)\n@@ -5477,7 +5479,7 @@ maybe_warn_zero_as_null_pointer_constant (tree expr, location_t loc)\n void\n lang_check_failed (const char* file, int line, const char* function)\n {\n-  internal_error (\"lang_* check: failed in %s, at %s:%d\",\n+  internal_error (\"%<lang_*%> check: failed in %s, at %s:%d\",\n \t\t  function, trim_filename (file), line);\n }\n #endif /* ENABLE_TREE_CHECKING */"}, {"sha": "7289f2c49fc129258506394ae26b7ca0fece19d9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4887,7 +4887,7 @@ cp_build_binary_op (const op_location_t &location,\n \t  && c_inhibit_evaluation_warnings == 0\n \t  && (FLOAT_TYPE_P (type0) || FLOAT_TYPE_P (type1)))\n \twarning (OPT_Wfloat_equal,\n-\t\t \"comparing floating point with == or != is unsafe\");\n+\t\t \"comparing floating point with %<==%> or %<!=%> is unsafe\");\n       if (complain & tf_warning)\n \t{\n \t  tree stripped_orig_op0 = tree_strip_any_location_wrapper (orig_op0);\n@@ -6274,7 +6274,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t  if (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE\n \t      && (complain & tf_warning)\n \t      && warning_at (location, OPT_Wbool_operation,\n-\t\t\t     \"%<~%> on an expression of type bool\"))\n+\t\t\t     \"%<~%> on an expression of type %<bool%>\"))\n \t    inform (location, \"did you mean to use logical not (%<!%>)?\");\n \t  arg = cp_perform_integral_promotions (arg, complain);\n \t}\n@@ -6942,13 +6942,15 @@ check_for_casting_away_constness (tree src_type, tree dest_type,\n       \n     case STATIC_CAST_EXPR:\n       if (complain & tf_error)\n-\terror (\"static_cast from type %qT to type %qT casts away qualifiers\",\n+\terror (\"%<static_cast%> from type %qT to type %qT casts away \"\n+\t       \"qualifiers\",\n \t       src_type, dest_type);\n       return true;\n       \n     case REINTERPRET_CAST_EXPR:\n       if (complain & tf_error)\n-\terror (\"reinterpret_cast from type %qT to type %qT casts away qualifiers\",\n+\terror (\"%<reinterpret_cast%> from type %qT to type %qT casts away \"\n+\t       \"qualifiers\",\n \t       src_type, dest_type);\n       return true;\n \n@@ -7401,7 +7403,7 @@ build_static_cast (tree type, tree oexpr, tsubst_flags_t complain)\n \n   if (complain & tf_error)\n     {\n-      error (\"invalid static_cast from type %qT to type %qT\",\n+      error (\"invalid %<static_cast%> from type %qT to type %qT\",\n \t     TREE_TYPE (expr), type);\n       if ((TYPE_PTR_P (type) || TYPE_REF_P (type))\n \t  && CLASS_TYPE_P (TREE_TYPE (type))\n@@ -7738,7 +7740,7 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n   if (!INDIRECT_TYPE_P (dst_type) && !TYPE_PTRDATAMEM_P (dst_type))\n     {\n       if (complain & tf_error)\n-\terror (\"invalid use of const_cast with type %qT, \"\n+\terror (\"invalid use of %<const_cast%> with type %qT, \"\n \t       \"which is not a pointer, \"\n \t       \"reference, nor a pointer-to-data-member type\", dst_type);\n       return error_mark_node;\n@@ -7747,8 +7749,9 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n   if (TREE_CODE (TREE_TYPE (dst_type)) == FUNCTION_TYPE)\n     {\n       if (complain & tf_error)\n-\terror (\"invalid use of const_cast with type %qT, which is a pointer \"\n-\t       \"or reference to a function type\", dst_type);\n+\terror (\"invalid use of %<const_cast%> with type %qT, \"\n+\t       \"which is a pointer or reference to a function type\",\n+\t       dst_type);\n       return error_mark_node;\n     }\n \n@@ -7788,7 +7791,8 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n       else\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"invalid const_cast of an rvalue of type %qT to type %qT\",\n+\t    error (\"invalid %<const_cast%> of an rvalue of type %qT \"\n+\t\t   \"to type %qT\",\n \t\t   src_type, dst_type);\n \t  return error_mark_node;\n \t}\n@@ -7857,7 +7861,7 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n     }\n \n   if (complain & tf_error)\n-    error (\"invalid const_cast from type %qT to type %qT\",\n+    error (\"invalid %<const_cast%> from type %qT to type %qT\",\n \t   src_type, dst_type);\n   return error_mark_node;\n }\n@@ -9260,7 +9264,7 @@ maybe_warn_about_returning_address_of_local (tree retval)\n \t\t    \"returning reference to temporary\");\n       else if (is_std_init_list (valtype))\n \twarning_at (loc, OPT_Winit_list_lifetime,\n-\t\t    \"returning temporary initializer_list does not extend \"\n+\t\t    \"returning temporary %<initializer_list%> does not extend \"\n \t\t    \"the lifetime of the underlying array\");\n       return true;\n     }\n@@ -9298,7 +9302,7 @@ maybe_warn_about_returning_address_of_local (tree retval)\n \t\t\twhats_returned);\n       else if (is_std_init_list (valtype))\n \tw = warning_at (loc, OPT_Winit_list_lifetime,\n-\t\t\t\"returning local initializer_list variable %qD \"\n+\t\t\t\"returning local %<initializer_list%> variable %qD \"\n \t\t\t\"does not extend the lifetime of the underlying array\",\n \t\t\twhats_returned);\n       else if (TREE_CODE (whats_returned) == LABEL_DECL)\n@@ -9654,7 +9658,7 @@ check_return_expr (tree retval, bool *no_warning)\n       && ! flag_check_new\n       && retval && null_ptr_cst_p (retval))\n     warning (0, \"%<operator new%> must not return NULL unless it is \"\n-\t     \"declared %<throw()%> (or -fcheck-new is in effect)\");\n+\t     \"declared %<throw()%> (or %<-fcheck-new%> is in effect)\");\n \n   /* Effective C++ rule 15.  See also start_function.  */\n   if (warn_ecpp"}, {"sha": "e9f759d4213faa3d324abd85f55a2febc031d245", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -360,7 +360,7 @@ abstract_virtuals_error_sfinae (tree decl, tree type, abstract_class_use use,\n \t     \"be used in throw-expression\", type);\n       break;\n     case ACU_CATCH:\n-      error (\"cannot declare catch parameter to be of abstract \"\n+      error (\"cannot declare %<catch%> parameter to be of abstract \"\n \t     \"class type %qT\", type);\n       break;\n     default:\n@@ -380,7 +380,7 @@ abstract_virtuals_error_sfinae (tree decl, tree type, abstract_class_use use,\n       FOR_EACH_VEC_ELT (*pure, ix, fn)\n \tif (! DECL_CLONED_FUNCTION_P (fn)\n \t    || DECL_COMPLETE_DESTRUCTOR_P (fn))\n-\t  inform (DECL_SOURCE_LOCATION (fn), \"\\t%#qD\", fn);\n+\t  inform (DECL_SOURCE_LOCATION (fn), \"    %#qD\", fn);\n \n       /* Now truncate the vector.  This leaves it non-null, so we know\n \t there are pure virtuals, but empty so we don't list them out\n@@ -1164,8 +1164,8 @@ digest_init_r (tree type, tree init, int nested, int flags,\n \t\t be invalid.  */\n \t      if (size < TREE_STRING_LENGTH (stripped_init))\n \t\t{\n-\t\t  permerror (loc, \"initializer-string for array \"\n-\t\t\t     \"of chars is too long\");\n+\t\t  permerror (loc, \"initializer-string for %qT is too long\",\n+\t\t\t     type);\n \n \t\t  init = build_string (size,\n \t\t\t\t       TREE_STRING_POINTER (stripped_init));\n@@ -2215,7 +2215,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n \t  if (type == error_mark_node)\n \t    {\n \t      if (complain & tf_error)\n-\t\terror (\"cannot deduce template arguments for %qT from ()\",\n+\t\terror (\"cannot deduce template arguments for %qT from %<()%>\",\n \t\t       anode);\n \t      return error_mark_node;\n \t    }"}, {"sha": "b6ac2f8f080a041e8547378a9d383c3c4ee2fe91", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,18 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * d-builtins.cc (d_init_builtins): Quote keywords, operators,\n+        and types in diagnostics.\n+        * d-codegen.cc (get_array_length): Same.  Replace can't with cannot.\n+        * d-convert.cc (convert_expr): Same.\n+        * d-frontend.cc (getTypeInfoType): Quote an option name in\n+        a diagnostic.\n+        * d-lang.cc (d_handle_option): Same.\n+        (d_parse_file): Same.\n+        * decl.cc: Remove a trailing period from a diagnostic.\n+        * expr.cc: Use a directive for an apostrophe.\n+        * toir.cc: Quote keywords, operators, and types in diagnostics.\n+        * typeinfo.cc (build_typeinfo): Quote an option name in a diagnostic.\n+\n 2019-04-25  Johannes Pfau  <johannespfau@gmail.com>\n \n \t* config-lang.in: Do not add target_libs if phobos is disabled."}, {"sha": "3ebee721a25bbdedbdad8600bf3548f617315cc8", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1117,7 +1117,7 @@ d_init_builtins (void)\n   Type::tvalist = build_frontend_type (va_list_type_node);\n   if (!Type::tvalist)\n     {\n-      error (\"cannot represent built-in va_list type in D\");\n+      error (\"cannot represent built-in %<va_list%> type in D\");\n       gcc_unreachable ();\n     }\n "}, {"sha": "1971064e334330368855758d865000b9747821b4", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -316,7 +316,7 @@ get_array_length (tree exp, Type *type)\n       return d_array_length (exp);\n \n     default:\n-      error (\"can't determine the length of a %qs\", type->toChars ());\n+      error (\"cannot determine the length of a %qs\", type->toChars ());\n       return error_mark_node;\n     }\n }"}, {"sha": "b020eab902f801609eb2abd213919a915d9b1c5b", "filename": "gcc/d/d-convert.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-convert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-convert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-convert.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -376,7 +376,7 @@ convert_expr (tree exp, Type *etype, Type *totype)\n \t}\n       else\n \t{\n-\t  error (\"can't convert a delegate expression to %qs\",\n+\t  error (\"cannot convert a delegate expression to %qs\",\n \t\t totype->toChars ());\n \t  return error_mark_node;\n \t}\n@@ -392,7 +392,7 @@ convert_expr (tree exp, Type *etype, Type *totype)\n \t    }\n \t  else\n \t    {\n-\t      error (\"can't convert struct %qs to %qs\",\n+\t      error (\"cannot convert struct %qs to %qs\",\n \t\t     etype->toChars (), totype->toChars ());\n \t      return error_mark_node;\n \t    }\n@@ -475,7 +475,7 @@ convert_expr (tree exp, Type *etype, Type *totype)\n \n \t  if ((dim * esize) % tsize != 0)\n \t    {\n-\t      error (\"cannot cast %qs to %qs since sizes don't line up\",\n+\t      error (\"cannot cast %qs to %qs since sizes do not line up\",\n \t\t     etype->toChars (), totype->toChars ());\n \t      return error_mark_node;\n \t    }"}, {"sha": "77b6f22d824007ff21cdb03eca950fbcfe7cbeaa", "filename": "gcc/d/d-frontend.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-frontend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-frontend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-frontend.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -625,7 +625,7 @@ getTypeInfoType (Loc loc, Type *type, Scope *sc)\n \t  if (!warned)\n \t    {\n \t      error_at (make_location_t (loc),\n-\t\t\t\"%<object.TypeInfo%> cannot be used with -fno-rtti\");\n+\t\t\t\"%<object.TypeInfo%> cannot be used with %<-fno-rtti%>\");\n \t      warned = 1;\n \t    }\n \t}"}, {"sha": "f23f719a2c377f165eed43948a2af99b10f11bf3", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -449,7 +449,7 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \t  break;\n \t}\n \n-      error (\"bad argument for -fdebug %qs\", arg);\n+      error (\"bad argument for %<-fdebug%>: %qs\", arg);\n       break;\n \n     case OPT_fdoc:\n@@ -497,7 +497,7 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n     case OPT_fmodule_file_:\n       global.params.modFileAliasStrings->push (arg);\n       if (!strchr (arg, '='))\n-\terror (\"bad argument for -fmodule-file %qs\", arg);\n+\terror (\"bad argument for %<-fmodule-file%>: %qs\", arg);\n       break;\n \n     case OPT_fmoduleinfo:\n@@ -588,7 +588,7 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \t  break;\n \t}\n \n-      error (\"bad argument for -fversion %qs\", arg);\n+      error (\"bad argument for %<-fversion%>: %qs\", arg);\n       break;\n \n     case OPT_H:\n@@ -1011,7 +1011,7 @@ d_parse_file (void)\n   /* In this mode, the first file name is supposed to be a duplicate\n      of one of the input files.  */\n   if (d_option.fonly && strcmp (d_option.fonly, main_input_filename) != 0)\n-    error (\"-fonly= argument is different from first input file name\");\n+    error (\"%<-fonly=%> argument is different from first input file name\");\n \n   for (size_t i = 0; i < num_in_fnames; i++)\n     {"}, {"sha": "bcce245e59ce2fed506c01ed5e5378880b5d805e", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -463,7 +463,7 @@ class DeclVisitor : public Visitor\n \t\t\t    fd2->toPrettyChars ());\n \t\t    inform (make_location_t (d->loc),\n \t\t\t    \"use %<alias %s = %s.%s;%> to introduce base class \"\n-\t\t\t    \"overload set.\", fd->toChars (),\n+\t\t\t    \"overload set\", fd->toChars (),\n \t\t\t    fd->parent->toChars (), fd->toChars ());\n \t\t  }\n \t\telse"}, {"sha": "826c32a059f0de7310bf6a48f3f15e06999838ae", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1522,7 +1522,7 @@ class ExprVisitor : public Visitor\n       }\n     else\n       {\n-\terror (\"don't know how to delete %qs\", e->e1->toChars ());\n+\terror (\"don%'t know how to delete %qs\", e->e1->toChars ());\n \tthis->result_ = error_mark_node;\n       }\n   }"}, {"sha": "1d125b4396253c59ac66d1a9cd7f6400283a9f95", "filename": "gcc/d/toir.cc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Ftoir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Ftoir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftoir.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -367,9 +367,11 @@ class IRVisitor : public Visitor\n       }\n \n     if (ent->in_try_scope)\n-      error_at (make_location_t (from->loc), \"cannot goto into try block\");\n+      error_at (make_location_t (from->loc),\n+\t\t\"cannot %<goto%> into %<try%> block\");\n     else if (ent->in_catch_scope)\n-      error_at (make_location_t (from->loc), \"cannot goto into catch block\");\n+      error_at (make_location_t (from->loc),\n+\t\t\"cannot %<goto%> into %<catch%> block\");\n   }\n \n   /* Check that a previously seen jump to a newly defined label is valid.\n@@ -391,21 +393,21 @@ class IRVisitor : public Visitor\n \t      {\n \t\tlocation = make_location_t (fwdref->statement->loc);\n \t\tif (b->kind == level_try)\n-\t\t  error_at (location, \"cannot goto into try block\");\n+\t\t  error_at (location, \"cannot %<goto%> into %<try%> block\");\n \t\telse\n-\t\t  error_at (location, \"cannot goto into catch block\");\n+\t\t  error_at (location, \"cannot %<goto%> into %<catch%> block\");\n \t      }\n \t    else if (s->isCaseStatement ())\n \t      {\n \t\tlocation = make_location_t (s->loc);\n \t\terror_at (location, \"case cannot be in different \"\n-\t\t\t  \"try block level from switch\");\n+\t\t\t  \"%<try%> block level from %<switch%>\");\n \t      }\n \t    else if (s->isDefaultStatement ())\n \t      {\n \t\tlocation = make_location_t (s->loc);\n \t\terror_at (location, \"default cannot be in different \"\n-\t\t\t  \"try block level from switch\");\n+\t\t\t  \"%<try%> block level from %<switch%>\");\n \t      }\n \t    else\n \t      gcc_unreachable ();\n@@ -1125,8 +1127,8 @@ class IRVisitor : public Visitor\n \tstatic int warned = 0;\n \tif (!warned)\n \t  {\n-\t    error_at (make_location_t (s->loc), \"exception handling disabled, \"\n-\t\t      \"use -fexceptions to enable\");\n+\t    error_at (make_location_t (s->loc), \"exception handling disabled; \"\n+\t\t      \"use %<-fexceptions%> to enable\");\n \t    warned = 1;\n \t  }\n       }"}, {"sha": "58c6ce1ba3c7668c91f849ef003b6c4cbb8be6ba", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1350,7 +1350,7 @@ build_typeinfo (const Loc &loc, Type *type)\n       if (!warned)\n \t{\n \t  error_at (make_location_t (loc),\n-\t\t    \"%<object.TypeInfo%> cannot be used with -fno-rtti\");\n+\t\t    \"%<object.TypeInfo%> cannot be used with %<-fno-rtti%>\");\n \t  warned = 1;\n \t}\n     }"}, {"sha": "dced32950c8d3f88f630773efc6a2cee26ebeb0a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1115,7 +1115,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n \t function anymore.  */\n       if (personality && current_unit_personality != personality)\n \tsorry (\"multiple EH personalities are supported only with assemblers \"\n-\t       \"supporting .cfi_personality directive\");\n+\t       \"supporting %<.cfi_personality%> directive\");\n     }\n }\n "}, {"sha": "edaeeb4cfd1b8f57e0ad75167302d4e6614e4a3f", "filename": "gcc/except.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3412,7 +3412,7 @@ verify_eh_tree (struct function *fun)\n \t  count_r++;\n \telse\n \t  {\n-\t    error (\"region_array is corrupted for region %i\", r->index);\n+\t    error (\"%<region_array%> is corrupted for region %i\", r->index);\n \t    err = true;\n \t  }\n       }\n@@ -3425,7 +3425,7 @@ verify_eh_tree (struct function *fun)\n \t  count_lp++;\n \telse\n \t  {\n-\t    error (\"lp_array is corrupted for lp %i\", lp->index);\n+\t    error (\"%<lp_array%> is corrupted for lp %i\", lp->index);\n \t    err = true;\n \t  }\n       }\n@@ -3437,7 +3437,7 @@ verify_eh_tree (struct function *fun)\n     {\n       if ((*fun->eh->region_array)[r->index] != r)\n \t{\n-\t  error (\"region_array is corrupted for region %i\", r->index);\n+\t  error (\"%<region_array%> is corrupted for region %i\", r->index);\n \t  err = true;\n \t}\n       if (r->outer != outer)\n@@ -3456,7 +3456,7 @@ verify_eh_tree (struct function *fun)\n \t{\n \t  if ((*fun->eh->lp_array)[lp->index] != lp)\n \t    {\n-\t      error (\"lp_array is corrupted for lp %i\", lp->index);\n+\t      error (\"%<lp_array%> is corrupted for lp %i\", lp->index);\n \t      err = true;\n \t    }\n \t  if (lp->region != r)\n@@ -3493,19 +3493,19 @@ verify_eh_tree (struct function *fun)\n     }\n   if (count_r != nvisited_r)\n     {\n-      error (\"region_array does not match region_tree\");\n+      error (\"%<region_array%> does not match %<region_tree%>\");\n       err = true;\n     }\n   if (count_lp != nvisited_lp)\n     {\n-      error (\"lp_array does not match region_tree\");\n+      error (\"%<lp_array%> does not match %<region_tree%>\");\n       err = true;\n     }\n \n   if (err)\n     {\n       dump_eh_tree (stderr, fun);\n-      internal_error (\"verify_eh_tree failed\");\n+      internal_error (\"%qs failed\", __func__);\n     }\n }\n \f"}, {"sha": "b8851067cf3ee4e9d008fbabd25bcdccc6ee2c29", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,7 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gfortranspec.c (append_arg): Spell out the word \"argument.\"\n+\n 2019-05-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/90329"}, {"sha": "5b0fe4d7a5f85661fc84362368d96012445ff256", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -143,7 +143,7 @@ append_arg (const struct cl_decoded_option *arg)\n     }\n \n   if (g77_newargc == newargsize)\n-    fatal_error (input_location, \"overflowed output arg list for %qs\",\n+    fatal_error (input_location, \"overflowed output argument list for %qs\",\n \t\t arg->orig_option_with_args_text);\n \n   g77_new_decoded_options[g77_newargc++] = *arg;"}, {"sha": "7ebdf1f225b49769af3047c852ad3b72d6912fc0", "filename": "gcc/gcc.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3198,7 +3198,7 @@ execute (void)\n \t\t\t\t   ? PEX_RECORD_TIMES : 0),\n \t\t  progname, temp_filename);\n   if (pex == NULL)\n-    fatal_error (input_location, \"pex_init failed: %m\");\n+    fatal_error (input_location, \"%<pex_init%> failed: %m\");\n \n   for (i = 0; i < n_commands; i++)\n     {\n@@ -6138,7 +6138,8 @@ eval_spec_function (const char *func, const char *args,\n \n   alloc_args ();\n   if (do_spec_2 (args, soft_matched_part) < 0)\n-    fatal_error (input_location, \"error in args to spec function %qs\", func);\n+    fatal_error (input_location, \"error in arguments to spec function %qs\",\n+\t\t func);\n \n   /* argbuf_index is an index for the next argument to be inserted, and\n      so contains the count of the args already inserted.  */\n@@ -6923,7 +6924,7 @@ run_attempt (const char **new_argv, const char *out_temp,\n \n   pex = pex_init (PEX_USE_PIPES, new_argv[0], NULL);\n   if (!pex)\n-    fatal_error (input_location, \"pex_init failed: %m\");\n+    fatal_error (input_location, \"%<pex_init%> failed: %m\");\n \n   errmsg = pex_run (pex, pex_flags, new_argv[0],\n \t\t    CONST_CAST2 (char *const *, const char **, &new_argv[1]),\n@@ -7614,7 +7615,8 @@ driver::set_up_specs () const\n       && do_spec_2 (sysroot_suffix_spec, NULL) == 0)\n     {\n       if (argbuf.length () > 1)\n-        error (\"spec failure: more than one arg to SYSROOT_SUFFIX_SPEC\");\n+\terror (\"spec failure: more than one argument to \"\n+\t       \"%<SYSROOT_SUFFIX_SPEC%>\");\n       else if (argbuf.length () == 1)\n         target_sysroot_suffix = xstrdup (argbuf.last ());\n     }\n@@ -7638,7 +7640,8 @@ driver::set_up_specs () const\n       && do_spec_2 (sysroot_hdrs_suffix_spec, NULL) == 0)\n     {\n       if (argbuf.length () > 1)\n-        error (\"spec failure: more than one arg to SYSROOT_HEADERS_SUFFIX_SPEC\");\n+\terror (\"spec failure: more than one argument \"\n+\t       \"to %<SYSROOT_HEADERS_SUFFIX_SPEC%>\");\n       else if (argbuf.length () == 1)\n         target_sysroot_hdrs_suffix = xstrdup (argbuf.last ());\n     }\n@@ -9797,7 +9800,7 @@ compare_debug_auxbase_opt_spec_function (int arg,\n   len = strlen (argv[0]);\n   if (len < 3 || strcmp (argv[0] + len - 3, \".gk\") != 0)\n     fatal_error (input_location, \"argument to %%:compare-debug-auxbase-opt \"\n-\t\t \"does not end in .gk\");\n+\t\t \"does not end in %<.gk%>\");\n \n   if (debug_auxbase_opt)\n     return debug_auxbase_opt;"}, {"sha": "c06769ef1c03626ad13cd7eb432ec3c7138de09e", "filename": "gcc/gcov-tool.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fgcov-tool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fgcov-tool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-tool.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -70,7 +70,7 @@ unlink_gcda_file (const char *name,\n     ret = remove (name);\n \n   if (ret)\n-    fatal_error (input_location, \"error in removing %s\\n\", name);\n+    fatal_error (input_location, \"error in removing %s\", name);\n \n   return ret;\n }\n@@ -220,7 +220,7 @@ do_merge (int argc, char **argv)\n         case 'w':\n           sscanf (optarg, \"%d,%d\", &w1, &w2);\n           if (w1 < 0 || w2 < 0)\n-            fatal_error (input_location, \"weights need to be non-negative\\n\");\n+\t    fatal_error (input_location, \"weights need to be non-negative\");\n           break;\n         default:\n           merge_usage ();\n@@ -355,7 +355,7 @@ do_rewrite (int argc, char **argv)\n             }\n \n           if (scale < 0.0)\n-            fatal_error (input_location, \"scale needs to be non-negative\\n\");\n+\t    fatal_error (input_location, \"scale needs to be non-negative\");\n \n           if (normalize_val != 0)\n             {"}, {"sha": "ff2771bdc0419e48e98c30790ee6108c35ca0c51", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4004,7 +4004,8 @@ gcse_or_cprop_is_too_expensive (const char *pass)\n   if (memory_request > MAX_GCSE_MEMORY)\n     {\n       warning (OPT_Wdisabled_optimization,\n-\t       \"%s: %d basic blocks and %d registers; increase --param max-gcse-memory above %d\",\n+\t       \"%s: %d basic blocks and %d registers; \"\n+\t       \"increase %<--param max-gcse-memory%> above %d\",\n \t       pass, n_basic_blocks_for_fn (cfun), max_reg_num (),\n \t       memory_request);\n "}, {"sha": "2acdb6dc60c42fb753c4cde54f7dce051235283a", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -382,15 +382,15 @@ write_pch_globals (const struct ggc_root_tab * const *tab,\n \t    {\n \t      if (fwrite (&ptr, sizeof (void *), 1, state->f)\n \t\t  != 1)\n-\t\tfatal_error (input_location, \"can%'t write PCH file: %m\");\n+\t\tfatal_error (input_location, \"cannot write PCH file: %m\");\n \t    }\n \t  else\n \t    {\n \t      new_ptr = (struct ptr_data *)\n \t\tsaving_htab->find_with_hash (ptr, POINTER_HASH (ptr));\n \t      if (fwrite (&new_ptr->new_addr, sizeof (void *), 1, state->f)\n \t\t  != 1)\n-\t\tfatal_error (input_location, \"can%'t write PCH file: %m\");\n+\t\tfatal_error (input_location, \"cannot write PCH file: %m\");\n \t    }\n \t}\n }\n@@ -459,7 +459,7 @@ gt_pch_save (FILE *f)\n   for (rt = gt_pch_scalar_rtab; *rt; rt++)\n     for (rti = *rt; rti->base != NULL; rti++)\n       if (fwrite (rti->base, rti->stride, 1, f) != 1)\n-\tfatal_error (input_location, \"can%'t write PCH file: %m\");\n+\tfatal_error (input_location, \"cannot write PCH file: %m\");\n \n   /* Write out all the global pointers, after translation.  */\n   write_pch_globals (gt_ggc_rtab, &state);\n@@ -470,17 +470,17 @@ gt_pch_save (FILE *f)\n     long o;\n     o = ftell (state.f) + sizeof (mmi);\n     if (o == -1)\n-      fatal_error (input_location, \"can%'t get position in PCH file: %m\");\n+      fatal_error (input_location, \"cannot get position in PCH file: %m\");\n     mmi.offset = mmap_offset_alignment - o % mmap_offset_alignment;\n     if (mmi.offset == mmap_offset_alignment)\n       mmi.offset = 0;\n     mmi.offset += o;\n   }\n   if (fwrite (&mmi, sizeof (mmi), 1, state.f) != 1)\n-    fatal_error (input_location, \"can%'t write PCH file: %m\");\n+    fatal_error (input_location, \"cannot write PCH file: %m\");\n   if (mmi.offset != 0\n       && fseek (state.f, mmi.offset, SEEK_SET) != 0)\n-    fatal_error (input_location, \"can%'t write padding to PCH file: %m\");\n+    fatal_error (input_location, \"cannot write padding to PCH file: %m\");\n \n   ggc_pch_prepare_write (state.d, state.f);\n \n@@ -602,18 +602,18 @@ gt_pch_restore (FILE *f)\n   for (rt = gt_pch_scalar_rtab; *rt; rt++)\n     for (rti = *rt; rti->base != NULL; rti++)\n       if (fread (rti->base, rti->stride, 1, f) != 1)\n-\tfatal_error (input_location, \"can%'t read PCH file: %m\");\n+\tfatal_error (input_location, \"cannot read PCH file: %m\");\n \n   /* Read in all the global pointers, in 6 easy loops.  */\n   for (rt = gt_ggc_rtab; *rt; rt++)\n     for (rti = *rt; rti->base != NULL; rti++)\n       for (i = 0; i < rti->nelt; i++)\n \tif (fread ((char *)rti->base + rti->stride * i,\n \t\t   sizeof (void *), 1, f) != 1)\n-\t  fatal_error (input_location, \"can%'t read PCH file: %m\");\n+\t  fatal_error (input_location, \"cannot read PCH file: %m\");\n \n   if (fread (&mmi, sizeof (mmi), 1, f) != 1)\n-    fatal_error (input_location, \"can%'t read PCH file: %m\");\n+    fatal_error (input_location, \"cannot read PCH file: %m\");\n \n   result = host_hooks.gt_pch_use_address (mmi.preferred_base, mmi.size,\n \t\t\t\t\t  fileno (f), mmi.offset);\n@@ -623,10 +623,10 @@ gt_pch_restore (FILE *f)\n     {\n       if (fseek (f, mmi.offset, SEEK_SET) != 0\n \t  || fread (mmi.preferred_base, mmi.size, 1, f) != 1)\n-\tfatal_error (input_location, \"can%'t read PCH file: %m\");\n+\tfatal_error (input_location, \"cannot read PCH file: %m\");\n     }\n   else if (fseek (f, mmi.offset + mmi.size, SEEK_SET) != 0)\n-    fatal_error (input_location, \"can%'t read PCH file: %m\");\n+    fatal_error (input_location, \"cannot read PCH file: %m\");\n \n   ggc_pch_read (f, mmi.preferred_base);\n "}, {"sha": "7066ef2c488ef5bc5a03eadc4b9d64802affede7", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2455,7 +2455,7 @@ ggc_pch_write_object (struct ggc_pch_data *d,\n     }\n \n   if (fwrite (x, size, 1, f) != 1)\n-    fatal_error (input_location, \"can%'t write PCH file: %m\");\n+    fatal_error (input_location, \"cannot write PCH file: %m\");\n \n   /* If SIZE is not the same as OBJECT_SIZE(order), then we need to pad the\n      object out to OBJECT_SIZE(order).  This happens for strings.  */\n@@ -2471,13 +2471,13 @@ ggc_pch_write_object (struct ggc_pch_data *d,\n       if (padding <= sizeof (emptyBytes))\n         {\n           if (fwrite (emptyBytes, 1, padding, f) != padding)\n-            fatal_error (input_location, \"can%'t write PCH file\");\n+\t    fatal_error (input_location, \"cannot write PCH file\");\n         }\n       else\n         {\n           /* Larger than our buffer?  Just default to fseek.  */\n           if (fseek (f, padding, SEEK_CUR) != 0)\n-            fatal_error (input_location, \"can%'t write PCH file\");\n+\t    fatal_error (input_location, \"cannot write PCH file\");\n         }\n     }\n \n@@ -2486,14 +2486,14 @@ ggc_pch_write_object (struct ggc_pch_data *d,\n       && fseek (f, ROUND_UP_VALUE (d->d.totals[order] * OBJECT_SIZE (order),\n \t\t\t\t   G.pagesize),\n \t\tSEEK_CUR) != 0)\n-    fatal_error (input_location, \"can%'t write PCH file: %m\");\n+    fatal_error (input_location, \"cannot write PCH file: %m\");\n }\n \n void\n ggc_pch_finish (struct ggc_pch_data *d, FILE *f)\n {\n   if (fwrite (&d->d, sizeof (d->d), 1, f) != 1)\n-    fatal_error (input_location, \"can%'t write PCH file: %m\");\n+    fatal_error (input_location, \"cannot write PCH file: %m\");\n   free (d);\n }\n \n@@ -2585,7 +2585,7 @@ ggc_pch_read (FILE *f, void *addr)\n   /* Allocate the appropriate page-table entries for the pages read from\n      the PCH file.  */\n   if (fread (&d, sizeof (d), 1, f) != 1)\n-    fatal_error (input_location, \"can%'t read PCH file: %m\");\n+    fatal_error (input_location, \"cannot read PCH file: %m\");\n \n   for (i = 0; i < NUM_ORDERS; i++)\n     {"}, {"sha": "bc2000d4d80328c3410005c3aea2e4f1a182f0f3", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -6177,7 +6177,7 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t\t\t    fb_lvalue | fb_mayfail);\n       if (tret == GS_ERROR)\n \t{\n-\t  error (\"invalid lvalue in asm output %d\", i);\n+\t  error (\"invalid lvalue in %<asm%> output %d\", i);\n \t  ret = tret;\n \t}\n \n@@ -9835,7 +9835,7 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t\t    {\n \t\t      warning_at (OMP_CLAUSE_LOCATION (c), 0,\n \t\t\t\t  \"incompatible data clause with reduction \"\n-\t\t\t\t  \"on %qE; promoting to present_or_copy\",\n+\t\t\t\t  \"on %qE; promoting to %<present_or_copy%>\",\n \t\t\t\t  DECL_NAME (t));\n \t\t      OMP_CLAUSE_SET_MAP_KIND (c, GOMP_MAP_TOFROM);\n \t\t    }"}, {"sha": "f52c49c3fa2a1b4bed776fbd1e452917e0fd3537", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2264,7 +2264,7 @@ gen_hsa_addr_insns (tree val, hsa_op_reg *dest, hsa_bb *hbb)\n     {\n       HSA_SORRY_ATV (EXPR_LOCATION (val), \"support for HSA does \"\n \t\t     \"not implement taking addresses of complex \"\n-\t\t     \"CONST_DECLs such as %E\", val);\n+\t\t     \"%<CONST_DECL%> such as %E\", val);\n       return;\n     }\n \n@@ -2449,7 +2449,7 @@ gen_hsa_insns_for_load (hsa_op_reg *dest, tree rhs, tree type, hsa_bb *hbb)\n \t    {\n \t      HSA_SORRY_ATV (EXPR_LOCATION (rhs),\n \t\t\t     \"support for HSA does not implement conversion \"\n-\t\t\t     \"of %E to the requested non-pointer type.\", rhs);\n+\t\t\t     \"of %E to the requested non-pointer type\", rhs);\n \t      return;\n \t    }\n \n@@ -3012,7 +3012,7 @@ gen_hsa_cmp_insn_from_gimple (enum tree_code code, tree lhs, tree rhs,\n     default:\n       HSA_SORRY_ATV (EXPR_LOCATION (lhs),\n \t\t     \"support for HSA does not implement comparison tree \"\n-\t\t     \"code %s\\n\", get_tree_code_name (code));\n+\t\t     \"code %s\", get_tree_code_name (code));\n       return;\n     }\n \n@@ -3162,8 +3162,8 @@ gen_hsa_insns_for_operation_assignment (gimple *assign, hsa_bb *hbb)\n     case FLOOR_DIV_EXPR:\n     case ROUND_DIV_EXPR:\n       HSA_SORRY_AT (gimple_location (assign),\n-\t\t    \"support for HSA does not implement CEIL_DIV_EXPR, \"\n-\t\t    \"FLOOR_DIV_EXPR or ROUND_DIV_EXPR\");\n+\t\t    \"support for HSA does not implement %<CEIL_DIV_EXPR%>, \"\n+\t\t    \"%<FLOOR_DIV_EXPR%> or %<ROUND_DIV_EXPR%>\");\n       return;\n     case TRUNC_MOD_EXPR:\n       opcode = BRIG_OPCODE_REM;\n@@ -3172,8 +3172,8 @@ gen_hsa_insns_for_operation_assignment (gimple *assign, hsa_bb *hbb)\n     case FLOOR_MOD_EXPR:\n     case ROUND_MOD_EXPR:\n       HSA_SORRY_AT (gimple_location (assign),\n-\t\t    \"support for HSA does not implement CEIL_MOD_EXPR, \"\n-\t\t    \"FLOOR_MOD_EXPR or ROUND_MOD_EXPR\");\n+\t\t    \"support for HSA does not implement %<CEIL_MOD_EXPR%>, \"\n+\t\t    \"%<FLOOR_MOD_EXPR%> or %<ROUND_MOD_EXPR%>\");\n       return;\n     case NEGATE_EXPR:\n       opcode = BRIG_OPCODE_NEG;\n@@ -4188,8 +4188,8 @@ gen_get_level (gimple *stmt, hsa_bb *hbb)\n   if (shadow_reg_ptr == NULL)\n     {\n       HSA_SORRY_AT (gimple_location (stmt),\n-\t\t    \"support for HSA does not implement omp_get_level called \"\n-\t\t    \"from a function not being inlined within a kernel\");\n+\t\t    \"support for HSA does not implement %<omp_get_level%> \"\n+\t\t    \"called from a function not being inlined within a kernel\");\n       return;\n     }\n \n@@ -4230,7 +4230,8 @@ gen_hsa_alloca (gcall *call, hsa_bb *hbb)\n   if (lhs == NULL_TREE)\n     return;\n \n-  built_in_function fn = DECL_FUNCTION_CODE (gimple_call_fndecl (call));\n+  tree fndecl = gimple_call_fndecl (call);\n+  built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n \n   gcc_checking_assert (ALLOCA_FUNCTION_CODE_P (fn));\n \n@@ -4243,8 +4244,8 @@ gen_hsa_alloca (gcall *call, hsa_bb *hbb)\n \t{\n \t  HSA_SORRY_ATV (gimple_location (call),\n \t\t\t \"support for HSA does not implement \"\n-\t\t\t \"__builtin_alloca_with_align with a non-constant \"\n-\t\t\t \"alignment: %E\", alignment_tree);\n+\t\t\t \"%qD with a non-constant alignment %E\",\n+\t\t\t fndecl, alignment_tree);\n \t}\n \n       bit_alignment = tree_to_uhwi (alignment_tree);\n@@ -4548,7 +4549,7 @@ omp_simple_builtin::generate (gimple *stmt, hsa_bb *hbb)\n \tHSA_SORRY_AT (gimple_location (stmt), m_warning_message);\n       else\n \tHSA_SORRY_ATV (gimple_location (stmt),\n-\t\t       \"Support for HSA does not implement calls to %s\\n\",\n+\t\t       \"support for HSA does not implement calls to %qs\",\n \t\t       m_name);\n     }\n   else if (m_warning_message != NULL)\n@@ -5049,7 +5050,7 @@ gen_hsa_atomic_for_builtin (bool ret_orig, enum BrigAtomicOperation acode,\n \t{\n \t  HSA_SORRY_ATV (gimple_location (stmt),\n \t\t\t \"support for HSA does not implement memory model for \"\n-\t\t\t \"ATOMIC_ST: %s\", mmname);\n+\t\t\t \"%<ATOMIC_ST%>: %s\", mmname);\n \t  return;\n \t}\n     }\n@@ -5314,8 +5315,8 @@ gen_hsa_insns_for_call (gimple *stmt, hsa_bb *hbb)\n \tgen_hsa_insns_for_direct_call (stmt, hbb);\n       else if (!gen_hsa_insns_for_known_library_call (stmt, hbb))\n \tHSA_SORRY_AT (gimple_location (stmt),\n-\t\t      \"HSA supports only calls of functions marked with pragma \"\n-\t\t      \"omp declare target\");\n+\t\t      \"HSA supports only calls of functions marked with \"\n+\t\t      \"%<#pragma omp declare target%>\");\n       return;\n     }\n \n@@ -5625,7 +5626,7 @@ gen_hsa_insns_for_call (gimple *stmt, hsa_bb *hbb)\n     case BUILT_IN_GOMP_PARALLEL:\n       HSA_SORRY_AT (gimple_location (stmt),\n \t\t    \"support for HSA does not implement non-gridified \"\n-\t\t    \"OpenMP parallel constructs.\");\n+\t\t    \"OpenMP parallel constructs\");\n       break;\n \n     case BUILT_IN_OMP_GET_THREAD_NUM:"}, {"sha": "1e84d2ee2d149354fb961cd2b3edddb4085a6562", "filename": "gcc/input.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1215,16 +1215,17 @@ dump_location_info (FILE *stream)\n \t  if (x == y)\n \t    {\n \t      if (x < MAP_START_LOCATION (map))\n-\t\tinform (x, \"token %u has x-location == y-location == %u\", i, x);\n+\t\tinform (x, \"token %u has %<x-location == y-location == %u%>\",\n+\t\t\ti, x);\n \t      else\n \t\tfprintf (stream,\n \t\t\t \"x-location == y-location == %u encodes token # %u\\n\",\n \t\t\t x, x - MAP_START_LOCATION (map));\n \t\t}\n \t  else\n \t    {\n-\t      inform (x, \"token %u has x-location == %u\", i, x);\n-\t      inform (x, \"token %u has y-location == %u\", i, y);\n+\t      inform (x, \"token %u has %<x-location == %u%>\", i, x);\n+\t      inform (x, \"token %u has %<y-location == %u%>\", i, y);\n \t    }\n \t}\n       fprintf (stream, \"\\n\");"}, {"sha": "a51b15174225cb18fb4351510530660c43783f3a", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -947,7 +947,7 @@ compare_virtual_tables (varpool_node *prevailing, varpool_node *vtable)\n       if (warning_at (DECL_SOURCE_LOCATION\n \t\t\t(TYPE_NAME (DECL_CONTEXT (vtable->decl))), OPT_Wodr,\n \t\t      \"virtual table of type %qD violates \"\n-\t\t      \"one definition rule  \",\n+\t\t      \"one definition rule\",\n \t\t      DECL_CONTEXT (vtable->decl)))\n \t{\n \t  if (TREE_CODE (ref1->referred->decl) == FUNCTION_DECL)"}, {"sha": "4a14fb315833ab36829516f5624e1da3fc6d6f5c", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2326,7 +2326,7 @@ ira_setup_eliminable_regset (void)\n \t      SET_HARD_REG_BIT (ira_no_alloc_regs, eliminables[i].from);\n \t}\n       else if (cannot_elim)\n-\terror (\"%s cannot be used in asm here\",\n+\terror (\"%s cannot be used in %<asm%> here\",\n \t       reg_names[eliminables[i].from]);\n       else\n \tdf_set_regs_ever_live (eliminables[i].from, true);\n@@ -2340,7 +2340,7 @@ ira_setup_eliminable_regset (void)\n \t    SET_HARD_REG_BIT (ira_no_alloc_regs, HARD_FRAME_POINTER_REGNUM);\n \t}\n       else if (frame_pointer_needed)\n-\terror (\"%s cannot be used in asm here\",\n+\terror (\"%s cannot be used in %<asm%> here\",\n \t       reg_names[HARD_FRAME_POINTER_REGNUM]);\n       else\n \tdf_set_regs_ever_live (HARD_FRAME_POINTER_REGNUM, true);"}, {"sha": "609feec48ae6dddd1cf2d8df773e002992eb9b5e", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1692,7 +1692,7 @@ lra_assign (bool &fails_p)\n       && (lra_assignment_iter_after_spill\n \t  > LRA_MAX_ASSIGNMENT_ITERATION_NUMBER))\n     internal_error\n-      (\"Maximum number of LRA assignment passes is achieved (%d)\\n\",\n+      (\"maximum number of LRA assignment passes is achieved (%d)\",\n        LRA_MAX_ASSIGNMENT_ITERATION_NUMBER);\n   return no_spills_p;\n }"}, {"sha": "d1d99e01cde01cdd0ebad1efa810cc5c260de221", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4898,7 +4898,7 @@ lra_constraints (bool first_p)\n \t}\n       if (new_insns_num > MAX_RELOAD_INSNS_NUMBER)\n \tinternal_error\n-\t  (\"Max. number of generated reload insns per insn is achieved (%d)\\n\",\n+\t  (\"maximum number of generated reload insns per insn achieved (%d)\",\n \t   MAX_RELOAD_INSNS_NUMBER);\n       new_insns_num++;\n       if (DEBUG_INSN_P (curr_insn))"}, {"sha": "b78b7cb1ad2e5d9a7ef0fdc30916cb1b4ef2507c", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1700,7 +1700,7 @@ lto_input_mode_table (struct lto_file_decl_data *file_data)\n \t\t}\n \t      /* FALLTHRU */\n \t    default:\n-\t      fatal_error (UNKNOWN_LOCATION, \"unsupported mode %s\\n\", mname);\n+\t      fatal_error (UNKNOWN_LOCATION, \"unsupported mode %qs\", mname);\n \t      break;\n \t    }\n \t}"}, {"sha": "946897726d03716f7c93f955c438ee4f8190044c", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -155,7 +155,8 @@ get_options_from_collect_gcc_options (const char *collect_gcc,\n \t  do\n \t    {\n \t      if (argv_storage[j] == '\\0')\n-\t\tfatal_error (input_location, \"malformed COLLECT_GCC_OPTIONS\");\n+\t\tfatal_error (input_location,\n+\t\t\t     \"malformed %<COLLECT_GCC_OPTIONS%>\");\n \t      else if (strncmp (&argv_storage[j], \"'\\\\''\", 4) == 0)\n \t\t{\n \t\t  argv_storage[k++] = '\\'';\n@@ -310,7 +311,7 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t    append_option (decoded_options, decoded_options_count, foption);\n \t  else if (strcmp ((*decoded_options)[j].arg, foption->arg))\n \t    fatal_error (input_location,\n-\t\t\t \"Option %s with different values\",\n+\t\t\t \"option %s with different values\",\n \t\t\t foption->orig_option_with_args_text);\n \t  break;\n \n@@ -394,7 +395,7 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t    append_option (decoded_options, decoded_options_count, foption);\n \t  else if (foption->value != (*decoded_options)[j].value)\n \t    fatal_error (input_location,\n-\t\t\t \"Option %s not used consistently in all LTO input\"\n+\t\t\t \"option %s not used consistently in all LTO input\"\n \t\t\t \" files\", foption->orig_option_with_args_text);\n \t  break;\n \n@@ -822,7 +823,7 @@ compile_offload_image (const char *target, const char *compiler_path,\n \n   if (!compiler)\n     fatal_error (input_location,\n-\t\t \"could not find %s in %s (consider using %<-B%>)\\n\",\n+\t\t \"could not find %s in %s (consider using %<-B%>)\",\n \t\t suffix + 1, compiler_path);\n \n   /* Generate temporary output file name.  */\n@@ -903,7 +904,7 @@ compile_images_for_offload_targets (unsigned in_argc, char *in_argv[],\n \t\t\t\t linker_opts, linker_opt_count);\n       if (!offload_names[next_name_entry])\n \tfatal_error (input_location,\n-\t\t     \"problem with building target image for %s\\n\", names[i]);\n+\t\t     \"problem with building target image for %s\", names[i]);\n       next_name_entry++;\n     }\n \n@@ -960,7 +961,7 @@ find_crtoffloadtable (void)\n       }\n   if (i == n_paths)\n     fatal_error (input_location,\n-\t\t \"installation error, can%'t find crtoffloadtable.o\");\n+\t\t \"installation error, cannot find %<crtoffloadtable.o%>\");\n \n   free_array_of_ptrs ((void **) paths, n_paths);\n }\n@@ -1072,7 +1073,7 @@ debug_objcopy (const char *infile, bool rename)\n \t\t\t\t  &off, &len, &errmsg, &err) != 1)\n     {\n       if (errmsg)\n-\tfatal_error (0, \"%s: %s\\n\", errmsg, xstrerror (err));\n+\tfatal_error (0, \"%s: %s\", errmsg, xstrerror (err));\n \n       simple_object_release_read (inobj);\n       close (infd);\n@@ -1092,7 +1093,7 @@ debug_objcopy (const char *infile, bool rename)\n   if (errmsg)\n     {\n       unlink_if_ordinary (outfile);\n-      fatal_error (0, \"%s: %s\\n\", errmsg, xstrerror (err));\n+      fatal_error (0, \"%s: %s\", errmsg, xstrerror (err));\n     }\n \n   simple_object_release_read (inobj);\n@@ -1144,11 +1145,11 @@ run_gcc (unsigned argc, char *argv[])\n   collect_gcc = getenv (\"COLLECT_GCC\");\n   if (!collect_gcc)\n     fatal_error (input_location,\n-\t\t \"environment variable COLLECT_GCC must be set\");\n+\t\t \"environment variable %<COLLECT_GCC%> must be set\");\n   collect_gcc_options = getenv (\"COLLECT_GCC_OPTIONS\");\n   if (!collect_gcc_options)\n     fatal_error (input_location,\n-\t\t \"environment variable COLLECT_GCC_OPTIONS must be set\");\n+\t\t \"environment variable %<COLLECT_GCC_OPTIONS%> must be set\");\n   get_options_from_collect_gcc_options (collect_gcc, collect_gcc_options,\n \t\t\t\t\tCL_LANG_ALL,\n \t\t\t\t\t&decoded_options,\n@@ -1548,7 +1549,7 @@ run_gcc (unsigned argc, char *argv[])\n       int priority;\n \n       if (!stream)\n-\tfatal_error (input_location, \"fopen: %s: %m\", ltrans_output_file);\n+\tfatal_error (input_location, \"%<fopen%>: %s: %m\", ltrans_output_file);\n \n       /* Parse the list of LTRANS inputs from the WPA stage.  */\n       obstack_init (&env_obstack);\n@@ -1565,7 +1566,7 @@ run_gcc (unsigned argc, char *argv[])\n \t    {\n \t      if (!feof (stream))\n \t        fatal_error (input_location,\n-\t\t             \"Corrupted ltrans output file %s\",\n+\t\t             \"corrupted ltrans output file %s\",\n \t\t\t     ltrans_output_file);\n \t      break;\n \t    }\n@@ -1754,7 +1755,7 @@ main (int argc, char *argv[])\n   diagnostic_initialize (global_dc, 0);\n \n   if (atexit (lto_wrapper_cleanup) != 0)\n-    fatal_error (input_location, \"atexit failed\");\n+    fatal_error (input_location, \"%<atexit%> failed\");\n \n   if (signal (SIGINT, SIG_IGN) != SIG_IGN)\n     signal (SIGINT, fatal_signal);"}, {"sha": "a3b3c69c4912c2516005be794ca9a40feb4c596d", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,8 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * lto-dump.c (lto_main): Same.\n+        * lto.c (stream_out): Same.\n+\n 2019-05-10  Martin Liska  <mliska@suse.cz>\n \n \t* Make-lang.in: Use program_transform_name for lto-dump."}, {"sha": "691d109ff3449409091aea79af03f556efcde3dc", "filename": "gcc/lto/lto-dump.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto%2Flto-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto%2Flto-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-dump.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -320,7 +320,8 @@ lto_main (void)\n \tnode->get_untransformed_body ();\n       if (!GATHER_STATISTICS)\n \twarning_at (input_location, 0,\n-\t\t    \"Not configured with --enable-gather-detailed-mem-stats.\");\n+\t\t    \"Not configured with \"\n+\t\t    \"%<--enable-gather-detailed-mem-stats%>.\");\n       else\n \tdump_gimple_statistics ();\n     }\n@@ -329,7 +330,8 @@ lto_main (void)\n       /* Dump tree statistics.  */\n       if (!GATHER_STATISTICS)\n \twarning_at (input_location, 0,\n-\t\t    \"Not configured with --enable-gather-detailed-mem-stats.\");\n+\t\t    \"Not configured with \"\n+\t\t    \"%<--enable-gather-detailed-mem-stats%>.\");\n       else\n \t{\n \t  printf (\"Tree Statistics\\n\");"}, {"sha": "814f03a1777a456d44ffe2ae64e1e6af556ee6c2", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -159,7 +159,7 @@ stream_out (char *temp_filename, lto_symtab_encoder_t encoder, int part)\n {\n   lto_file *file = lto_obj_file_open (temp_filename, true);\n   if (!file)\n-    fatal_error (input_location, \"lto_obj_file_open() failed\");\n+    fatal_error (input_location, \"%<lto_obj_file_open()%> failed\");\n   lto_set_current_out_file (file);\n \n   gcc_assert (!dump_file);"}, {"sha": "908ea6727800fedeb7c73c02c2efe6ed56076705", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,15 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * objc-act.c (objc_begin_catch_clause): Quote keywords and options\n+        in diagnostics.\n+        (objc_build_throw_stmt): Same.\n+        (objc_finish_message_expr): Same.\n+        (get_super_receiver): Same.\n+        * objc-next-runtime-abi-01.c (objc_next_runtime_abi_01_init): Spell\n+        out \"less than\" in English./\n+        * objc-next-runtime-abi-02.c (objc_next_runtime_abi_02_init): Spell\n+        out \"greater\" in English.\n+\n 2019-05-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR pch/90326"}, {"sha": "7ee330629f751cf1f826a2ed4d774d4d171a52e1", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -458,7 +458,7 @@ objc_write_global_declarations (void)\n \t  char * const dumpname = concat (dump_base_name, \".decl\", NULL);\n \t  gen_declaration_file = fopen (dumpname, \"w\");\n \t  if (gen_declaration_file == 0)\n-\t    fatal_error (input_location, \"can%'t open %s: %m\", dumpname);\n+\t    fatal_error (input_location, \"cannot open %s: %m\", dumpname);\n \t  free (dumpname);\n \t}\n \n@@ -4208,13 +4208,13 @@ objc_begin_catch_clause (tree decl)\n     }\n   else if (!objc_type_valid_for_messaging (type, false))\n     {\n-      error (\"@catch parameter is not a known Objective-C class type\");\n+      error (\"%<@catch%> parameter is not a known Objective-C class type\");\n       type = error_mark_node;\n     }\n   else if (TYPE_HAS_OBJC_INFO (TREE_TYPE (type))\n \t   && TYPE_OBJC_PROTOCOL_LIST (TREE_TYPE (type)))\n     {\n-      error (\"@catch parameter cannot be protocol-qualified\");\n+      error (\"%<@catch%> parameter cannot be protocol-qualified\");\n       type = error_mark_node;\n     }\n   else if (POINTER_TYPE_P (type) && objc_is_object_id (TREE_TYPE (type)))\n@@ -4336,7 +4336,8 @@ objc_build_throw_stmt (location_t loc, tree throw_expr)\n       if (cur_try_context == NULL\n           || cur_try_context->current_catch == NULL)\n \t{\n-\t  error_at (loc, \"%<@throw%> (rethrow) used outside of a @catch block\");\n+\t  error_at (loc,\n+\t\t    \"%<@throw%> (rethrow) used outside of a %<@catch%> block\");\n \t  return error_mark_node;\n \t}\n \n@@ -5411,7 +5412,8 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n \t\t prototype.  Emit a warning, then keep going (this\n \t\t will use any method with a matching name, as if the\n \t\t receiver was of type 'Class').  */\n-\t      warning (0, \"@interface of class %qE not found\", class_tree);\n+\t      warning (0, \"%<@interface%> of class %qE not found\",\n+\t\t       class_tree);\n \t    }\n \t}\n       /* Handle `self' and `super'.  */\n@@ -5545,7 +5547,7 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n \t\t     warning, either include an @interface for the\n \t\t     class, or cast the receiver to 'id'.  Note that\n \t\t     rtype is an IDENTIFIER_NODE at this point.  */\n-\t\t  warning (0, \"@interface of class %qE not found\", rtype);\n+\t\t  warning (0, \"%<@interface%> of class %qE not found\", rtype);\n \t\t}\n \t    }\n \n@@ -5628,11 +5630,9 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n       if (!warn_missing_methods)\n \t{\n \t  warning_at (input_location,\n-\t\t      0, \"(Messages without a matching method signature\");\n-\t  warning_at (input_location,\n-\t\t      0, \"will be assumed to return %<id%> and accept\");\n-\t  warning_at (input_location,\n-\t\t      0, \"%<...%> as arguments.)\");\n+\t\t      0, \"(messages without a matching method signature \"\n+\t\t      \"will be assumed to return %<id%> and accept \"\n+\t\t      \"%<...%> as arguments)\");\n \t  warn_missing_methods = true;\n \t}\n     }\n@@ -8848,7 +8848,7 @@ get_super_receiver (void)\n     }\n   else\n     {\n-      error (\"[super ...] must appear in a method context\");\n+      error (\"%<[super ...]%> must appear in a method context\");\n       return error_mark_node;\n     }\n }"}, {"sha": "fa83e64b6a132f35c3c6f71269546c653ea35c07", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -150,7 +150,8 @@ objc_next_runtime_abi_01_init (objc_runtime_hooks *rthooks)\n     {\n       warning_at (UNKNOWN_LOCATION, OPT_Wall,\n \t\t\"%<-fobjc-sjlj-exceptions%> is the only supported exceptions \"\n-\t\t\"system for %<-fnext-runtime%> with %<-fobjc-abi-version%> < 2\");\n+\t\t\"system for %<-fnext-runtime%> with %<-fobjc-abi-version%> \"\n+\t\t\"argument less than 2\");\n     }\n \n   rthooks->initialize = next_runtime_01_initialize;"}, {"sha": "aa1cbde5010d858ec72ef478ba48ef13b2318649", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -241,8 +241,10 @@ objc_next_runtime_abi_02_init (objc_runtime_hooks *rthooks)\n \n   if (flag_objc_exceptions && flag_objc_sjlj_exceptions)\n     {\n-      inform (UNKNOWN_LOCATION, \"%<-fobjc-sjlj-exceptions%> is ignored for \"\n-\t\t\t\t\"%<-fnext-runtime%> when %<-fobjc-abi-version%> >= 2\");\n+      inform (UNKNOWN_LOCATION,\n+\t      \"%<-fobjc-sjlj-exceptions%> is ignored for \"\n+\t      \"%<-fnext-runtime%> when %<-fobjc-abi-version%> \"\n+\t      \"greater than 1\");\n       flag_objc_sjlj_exceptions = 0;\n     }\n "}, {"sha": "879ab17c3620ca6e002b46f4f833ed2b4c0f5432", "filename": "gcc/opts.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1671,7 +1671,8 @@ print_specific_help (unsigned int include_flags,\n \t    description = _(\"The following options take joined arguments\");\n \t  else\n \t    {\n-\t      internal_error (\"unrecognized include_flags 0x%x passed to print_specific_help\",\n+\t      internal_error (\"unrecognized %<include_flags 0x%x%> passed \"\n+\t\t\t      \"to %<print_specific_help%>\",\n \t\t\t      include_flags);\n \t      return;\n \t    }\n@@ -1982,7 +1983,7 @@ parse_no_sanitize_attribute (char *value)\n \n       if (sanitizer_opts[i].name == NULL)\n \twarning (OPT_Wattributes,\n-\t\t \"%<%s%> attribute directive ignored\", q);\n+\t\t \"%qs attribute directive ignored\", q);\n \n       q = strtok (NULL, \",\");\n     }\n@@ -2165,7 +2166,7 @@ print_help (struct gcc_options *opts, unsigned int lang_mask)\n \t\t*pflags |= lang_flag;\n \t      else\n \t\twarning (0,\n-\t\t\t \"--help argument %q.*s is ambiguous, \"\n+\t\t\t \"%<--help%> argument %q.*s is ambiguous, \"\n \t\t\t \"please be more specific\",\n \t\t\t len, a);\n \t    }\n@@ -2174,7 +2175,7 @@ print_help (struct gcc_options *opts, unsigned int lang_mask)\n \t*pflags |= lang_flag;\n       else\n \twarning (0,\n-\t\t \"unrecognized argument to --help= option: %q.*s\",\n+\t\t \"unrecognized argument to %<--help=%> option: %q.*s\",\n \t\t len, a);\n \n       if (comma == NULL)\n@@ -2831,8 +2832,8 @@ handle_param (struct gcc_options *opts, struct gcc_options *opts_set,\n   arg = xstrdup (carg);\n   equal = strchr (arg, '=');\n   if (!equal)\n-    error_at (loc, \"%s: --param arguments should be of the form NAME=VALUE\",\n-\t      arg);\n+    error_at (loc, \"%s: %qs arguments should be of the form NAME=VALUE\",\n+\t      arg, \"--param\");\n   else\n     {\n       *equal = '\\0';\n@@ -2842,18 +2843,18 @@ handle_param (struct gcc_options *opts, struct gcc_options *opts_set,\n \t{\n \t  const char *suggestion = find_param_fuzzy (arg);\n \t  if (suggestion)\n-\t    error_at (loc, \"invalid --param name %qs; did you mean %qs?\",\n-\t\t      arg, suggestion);\n+\t    error_at (loc, \"invalid %qs name %qs; did you mean %qs?\",\n+\t\t      \"--param\", arg, suggestion);\n \t  else\n-\t    error_at (loc, \"invalid --param name %qs\", arg);\n+\t    error_at (loc, \"invalid %qs name %qs\", \"--param\", arg);\n \t}\n       else\n \t{\n \t  if (!param_string_value_p (index, equal + 1, &value))\n \t    value = integral_argument (equal + 1);\n \n \t  if (value == -1)\n-\t    error_at (loc, \"invalid --param value %qs\", equal + 1);\n+\t    error_at (loc, \"invalid %qs value %qs\", \"--param\", equal + 1);\n \t  else\n \t    set_param_value (arg, value,\n \t\t\t     opts->x_param_values, opts_set->x_param_values);"}, {"sha": "c6331cbc49db0e2fc5fd1c7d0ac7240d3a44c237", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -87,8 +87,8 @@ opt_pass::clone ()\n void\n opt_pass::set_pass_param (unsigned int, bool)\n {\n-  internal_error (\"pass %s needs a set_pass_param implementation to handle the\"\n-\t\t  \" extra argument in NEXT_PASS\", name);\n+  internal_error (\"pass %s needs a %<set_pass_param%> implementation \"\n+\t\t  \"to handle the extra argument in %<NEXT_PASS%>\", name);\n }\n \n bool"}, {"sha": "a9d3171ecb335b3bd8dd3d2525902cb9eea775c5", "filename": "gcc/plugin.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -231,7 +231,7 @@ add_new_plugin (const char* plugin_name)\n     {\n       plugin = (struct plugin_name_args *) *slot;\n       if (strcmp (plugin->full_name, plugin_name))\n-        error (\"plugin %s was specified with different paths:\\n%s\\n%s\",\n+\terror (\"plugin %qs was specified with different paths: %qs and %qs\",\n                plugin->base_name, plugin->full_name, plugin_name);\n       return;\n     }\n@@ -290,7 +290,8 @@ parse_plugin_arg_opt (const char *arg)\n \n   if (!key_start)\n     {\n-      error (\"malformed option %<-fplugin-arg-%s%> (missing -<key>[=<value>])\",\n+      error (\"malformed option %<-fplugin-arg-%s%>: \"\n+\t     \"missing %<-<key>[=<value>]%>\",\n              arg);\n       return;\n     }\n@@ -700,7 +701,7 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n   dl_handle = dlopen (plugin->full_name, RTLD_NOW | RTLD_GLOBAL);\n   if (!dl_handle)\n     {\n-      error (\"cannot load plugin %s\\n%s\", plugin->full_name, dlerror ());\n+      error (\"cannot load plugin %s: %s\", plugin->full_name, dlerror ());\n       return false;\n     }\n \n@@ -710,7 +711,7 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n   /* Check the plugin license.  */\n   if (dlsym (dl_handle, str_license) == NULL)\n     fatal_error (input_location,\n-\t\t \"plugin %s is not licensed under a GPL-compatible license\\n\"\n+\t\t \"plugin %s is not licensed under a GPL-compatible license\"\n \t\t \"%s\", plugin->full_name, dlerror ());\n \n   PTR_UNION_AS_VOID_PTR (plugin_init_union) =\n@@ -720,7 +721,7 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n   if ((err = dlerror ()) != NULL)\n     {\n       dlclose(dl_handle);\n-      error (\"cannot find %s in plugin %s\\n%s\", str_plugin_init_func_name,\n+      error (\"cannot find %s in plugin %s: %s\", str_plugin_init_func_name,\n              plugin->full_name, err);\n       return false;\n     }\n@@ -729,7 +730,7 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n   if ((*plugin_init) (plugin, &gcc_version))\n     {\n       dlclose(dl_handle);\n-      error (\"fail to initialize plugin %s\", plugin->full_name);\n+      error (\"failed to initialize plugin %s\", plugin->full_name);\n       return false;\n     }\n   /* leak dl_handle on purpose to ensure the plugin is loaded for the"}, {"sha": "3cf34ba99a84b75bdb78e4267e02dbb496cd9f63", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -707,7 +707,7 @@ parse_edge_flag_token (const char *tok)\n   } while (0);\n #include \"cfg-flags.def\"\n #undef DEF_EDGE_FLAG\n-  error (\"unrecognized edge flag: '%s'\", tok);\n+  error (\"unrecognized edge flag: %qs\", tok);\n   return 0;\n }\n \n@@ -978,7 +978,7 @@ function_reader::parse_enum_value (int num_values, const char *const *strings)\n       if (strcmp (name.string, strings[i]) == 0)\n \treturn i;\n     }\n-  error (\"unrecognized enum value: '%s'\", name.string);\n+  error (\"unrecognized enum value: %qs\", name.string);\n   return 0;\n }\n "}, {"sha": "8c934aaf936e945a30e46d34106f3eeafd155544", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -545,7 +545,8 @@ check_asm_stack_operands (rtx_insn *insn)\n \t    for (j = 0; j < n_clobbers; j++)\n \t      if (REGNO (recog_data.operand[i]) == REGNO (clobber_reg[j]))\n \t\t{\n-\t\t  error_for_asm (insn, \"output constraint %d cannot be specified together with \\\"%s\\\" clobber\",\n+\t\t  error_for_asm (insn, \"output constraint %d cannot be \"\n+\t\t\t\t \"specified together with %qs clobber\",\n \t\t\t\t i, reg_names [REGNO (clobber_reg[j])]);\n \t\t  malformed_asm = 1;\n \t\t  break;\n@@ -568,7 +569,7 @@ check_asm_stack_operands (rtx_insn *insn)\n \n   if (i != LAST_STACK_REG + 1)\n     {\n-      error_for_asm (insn, \"output regs must be grouped at top of stack\");\n+      error_for_asm (insn, \"output registers must be grouped at top of stack\");\n       malformed_asm = 1;\n     }\n \n@@ -608,7 +609,8 @@ check_asm_stack_operands (rtx_insn *insn)\n   if (i != LAST_STACK_REG + 1)\n     {\n       error_for_asm (insn,\n-\t\t     \"implicitly popped regs must be grouped at top of stack\");\n+\t\t     \"implicitly popped registers must be grouped \"\n+\t\t     \"at top of stack\");\n       malformed_asm = 1;\n     }\n \n@@ -625,7 +627,8 @@ check_asm_stack_operands (rtx_insn *insn)\n   if (i != LAST_STACK_REG + 1)\n     {\n       error_for_asm (insn,\n-\t\t     \"explicitly used regs must be grouped at top of stack\");\n+\t\t     \"explicitly used registers must be grouped \"\n+\t\t     \"at top of stack\");\n       malformed_asm = 1;\n     }\n "}, {"sha": "a18c24f47979b125088c231f7f9b55e85b89ca05", "filename": "gcc/regcprop.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1216,8 +1216,8 @@ validate_value_data (struct value_data *vd)\n \tif (vd->e[i].mode == VOIDmode)\n \t  {\n \t    if (vd->e[i].next_regno != INVALID_REGNUM)\n-\t      internal_error (\"validate_value_data: [%u] Bad next_regno for empty chain (%u)\",\n-\t\t\t      i, vd->e[i].next_regno);\n+\t      internal_error (\"%qs: [%u] bad %<next_regno%> for empty chain (%u)\",\n+\t\t\t      __func__, i, vd->e[i].next_regno);\n \t    continue;\n \t  }\n \n@@ -1228,11 +1228,11 @@ validate_value_data (struct value_data *vd)\n \t     j = vd->e[j].next_regno)\n \t  {\n \t    if (TEST_HARD_REG_BIT (set, j))\n-\t      internal_error (\"validate_value_data: Loop in regno chain (%u)\",\n-\t\t\t      j);\n+\t      internal_error (\"%qs: loop in %<next_regno%> chain (%u)\",\n+\t\t\t      __func__, j);\n \t    if (vd->e[j].oldest_regno != i)\n-\t      internal_error (\"validate_value_data: [%u] Bad oldest_regno (%u)\",\n-\t\t\t      j, vd->e[j].oldest_regno);\n+\t      internal_error (\"%qs: [%u] bad %<oldest_regno%> (%u)\",\n+\t\t\t      __func__, j, vd->e[j].oldest_regno);\n \n \t    SET_HARD_REG_BIT (set, j);\n \t  }\n@@ -1243,8 +1243,9 @@ validate_value_data (struct value_data *vd)\n \t&& (vd->e[i].mode != VOIDmode\n \t    || vd->e[i].oldest_regno != i\n \t    || vd->e[i].next_regno != INVALID_REGNUM))\n-      internal_error (\"validate_value_data: [%u] Non-empty reg in chain (%s %u %i)\",\n-\t\t      i, GET_MODE_NAME (vd->e[i].mode), vd->e[i].oldest_regno,\n+      internal_error (\"%qs: [%u] non-empty register in chain (%s %u %i)\",\n+\t\t      __func__, i,\n+\t\t      GET_MODE_NAME (vd->e[i].mode), vd->e[i].oldest_regno,\n \t\t      vd->e[i].next_regno);\n }\n "}, {"sha": "bec2d40fe9553fa748723a8006e261e8256493d7", "filename": "gcc/reginfo.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -717,11 +717,11 @@ fix_register (const char *name, int fixed, int call_used)\n \t\t  switch (call_used)\n \t\t    {\n \t\t    case 0:\n-\t\t      error (\"can%'t use %qs as a call-saved register\", name);\n+\t\t      error (\"cannot use %qs as a call-saved register\", name);\n \t\t      break;\n \n \t\t    case 1:\n-\t\t      error (\"can%'t use %qs as a call-used register\", name);\n+\t\t      error (\"cannot use %qs as a call-used register\", name);\n \t\t      break;\n \n \t\t    default:\n@@ -733,7 +733,7 @@ fix_register (const char *name, int fixed, int call_used)\n \t\t  switch (call_used)\n \t\t    {\n \t\t    case 1:\n-\t\t      error (\"can%'t use %qs as a fixed register\", name);\n+\t\t      error (\"cannot use %qs as a fixed register\", name);\n \t\t      break;\n \n \t\t    case 0:"}, {"sha": "5039ceed5816dc5567274ff64e849c2c4f998bb4", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2062,7 +2062,7 @@ static void\n spill_failure (rtx_insn *insn, enum reg_class rclass)\n {\n   if (asm_noperands (PATTERN (insn)) >= 0)\n-    error_for_asm (insn, \"can%'t find a register in class %qs while \"\n+    error_for_asm (insn, \"cannot find a register in class %qs while \"\n \t\t   \"reloading %<asm%>\",\n \t\t   reg_class_names[rclass]);\n   else"}, {"sha": "8ed3bf5aa2f0fe39c16c1b503090997977fe0788", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -521,7 +521,7 @@ check_unique_operand_names (tree outputs, tree inputs, tree labels)\n   return true;\n \n  failure:\n-  error (\"duplicate asm operand name %qs\", TREE_STRING_POINTER (i_name));\n+  error (\"duplicate %<asm%> operand name %qs\", TREE_STRING_POINTER (i_name));\n   return false;\n }\n "}, {"sha": "577e373c5787e128ba10e37124fbb47af0e75fa3", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1600,7 +1600,7 @@ default_target_option_pragma_parse (tree ARG_UNUSED (args),\n      do not have the \"target\" pragma.  */\n   if (args)\n     warning (OPT_Wpragmas,\n-\t     \"#pragma GCC target is not supported for this machine\");\n+\t     \"%<#pragma GCC target%> is not supported for this machine\");\n \n   return false;\n }"}, {"sha": "e1aa25736efb400a9ff965f1ac6b9995faa9360d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,3 +1,123 @@\n+2019-05-16  Martin Sebor  <msebor@redhat.com>\n+\n+        * c-c++-common/Wbool-operation-1.c: Adjust text of expected diagnostics.\n+        * c-c++-common/Wvarargs-2.c: Same.\n+        * c-c++-common/Wvarargs.c: Same.\n+        * c-c++-common/pr51768.c: Same.\n+        * c-c++-common/tm/inline-asm.c: Same.\n+        * c-c++-common/tm/safe-1.c: Same.\n+        * g++.dg/asm-qual-1.C: Same.\n+        * g++.dg/asm-qual-3.C: Same.\n+        * g++.dg/conversion/dynamic1.C: Same.\n+        * g++.dg/cpp0x/constexpr-89599.C: Same.\n+        * g++.dg/cpp0x/constexpr-cast.C: Same.\n+        * g++.dg/cpp0x/constexpr-shift1.C: Same.\n+        * g++.dg/cpp0x/lambda/lambda-conv11.C: Same.\n+        * g++.dg/cpp0x/nullptr04.C: Same.\n+        * g++.dg/cpp0x/static_assert12.C: Same.\n+        * g++.dg/cpp0x/static_assert8.C: Same.\n+        * g++.dg/cpp1y/lambda-conv1.C: Same.\n+        * g++.dg/cpp1y/pr79393-3.C: Same.\n+        * g++.dg/cpp1y/static_assert1.C: Same.\n+        * g++.dg/cpp1z/constexpr-if4.C: Same.\n+        * g++.dg/cpp1z/constexpr-if5.C: Same.\n+        * g++.dg/cpp1z/constexpr-if9.C: Same.\n+        * g++.dg/eh/goto2.C: Same.\n+        * g++.dg/eh/goto3.C: Same.\n+        * g++.dg/expr/static_cast8.C: Same.\n+        * g++.dg/ext/flexary5.C: Same.\n+        * g++.dg/ext/utf-array-short-wchar.C: Same.\n+        * g++.dg/ext/utf-array.C: Same.\n+        * g++.dg/ext/utf8-2.C: Same.\n+        * g++.dg/gomp/loop-4.C: Same.\n+        * g++.dg/gomp/macro-4.C: Same.\n+        * g++.dg/gomp/udr-1.C: Same.\n+        * g++.dg/init/initializer-string-too-long.C: Same.\n+        * g++.dg/other/offsetof9.C: Same.\n+        * g++.dg/ubsan/pr63956.C: Same.\n+        * g++.dg/warn/Wbool-operation-1.C: Same.\n+        * g++.dg/warn/Wtype-limits-Wextra.C: Same.\n+        * g++.dg/warn/Wtype-limits.C: Same.\n+        * g++.dg/wrappers/pr88680.C: Same.\n+        * g++.old-deja/g++.mike/eh55.C: Same.\n+        * gcc.dg/Wsign-compare-1.c: Same.\n+        * gcc.dg/Wtype-limits-Wextra.c: Same.\n+        * gcc.dg/Wtype-limits.c: Same.\n+        * gcc.dg/Wunknownprag.c: Same.\n+        * gcc.dg/Wunsuffixed-float-constants-1.c: Same.\n+        * gcc.dg/asm-6.c: Same.\n+        * gcc.dg/asm-qual-1.c: Same.\n+        * gcc.dg/cast-1.c: Same.\n+        * gcc.dg/cast-2.c: Same.\n+        * gcc.dg/cast-3.c: Same.\n+        * gcc.dg/cpp/source_date_epoch-2.c: Same.\n+        * gcc.dg/debug/pr85252.c: Same.\n+        * gcc.dg/dfp/cast-bad.c: Same.\n+        * gcc.dg/format/gcc_diag-1.c: Same.\n+        * gcc.dg/format/gcc_diag-11.c: Same.New test.\n+        * gcc.dg/gcc_diag-11.c: Same.New test.\n+        * gcc.dg/gnu-cond-expr-2.c: Same.\n+        * gcc.dg/gnu-cond-expr-3.c: Same.\n+        * gcc.dg/gomp/macro-4.c: Same.\n+        * gcc.dg/init-bad-1.c: Same.\n+        * gcc.dg/init-bad-2.c: Same.\n+        * gcc.dg/init-bad-3.c: Same.\n+        * gcc.dg/pr27528.c: Same.\n+        * gcc.dg/pr48552-1.c: Same.\n+        * gcc.dg/pr48552-2.c: Same.\n+        * gcc.dg/pr59846.c: Same.\n+        * gcc.dg/pr61096-1.c: Same.\n+        * gcc.dg/pr8788-1.c: Same.\n+        * gcc.dg/pr90082.c: Same.\n+        * gcc.dg/simd-2.c: Same.\n+        * gcc.dg/spellcheck-params-2.c: Same.\n+        * gcc.dg/spellcheck-params.c: Same.\n+        * gcc.dg/strlenopt-49.c: Same.\n+        * gcc.dg/tm/pr52141.c: Same.\n+        * gcc.dg/torture/pr51106-1.c: Same.\n+        * gcc.dg/torture/pr51106-2.c: Same.\n+        * gcc.dg/utf-array-short-wchar.c: Same.\n+        * gcc.dg/utf-array.c: Same.\n+        * gcc.dg/utf8-2.c: Same.\n+        * gcc.dg/warn-sprintf-no-nul.c: Same.\n+        * gcc.target/i386/asm-flag-0.c: Same.\n+        * gcc.target/i386/inline_error.c: Same.\n+        * gcc.target/i386/pr30848.c: Same.\n+        * gcc.target/i386/pr39082-1.c: Same.\n+        * gcc.target/i386/pr39678.c: Same.\n+        * gcc.target/i386/pr57756.c: Same.\n+        * gcc.target/i386/pr68843-1.c: Same.\n+        * gcc.target/i386/pr79804.c: Same.\n+        * gcc.target/i386/pr82673.c: Same.\n+        * obj-c++.dg/class-protocol-1.mm: Same.\n+        * obj-c++.dg/exceptions-3.mm: Same.\n+        * obj-c++.dg/exceptions-4.mm: Same.\n+        * obj-c++.dg/exceptions-5.mm: Same.\n+        * obj-c++.dg/exceptions-6.mm: Same.\n+        * obj-c++.dg/method-12.mm: Same.\n+        * obj-c++.dg/method-13.mm: Same.\n+        * obj-c++.dg/method-6.mm: Same.\n+        * obj-c++.dg/method-7.mm: Same.\n+        * obj-c++.dg/method-9.mm: Same.\n+        * obj-c++.dg/method-lookup-1.mm: Same.\n+        * obj-c++.dg/proto-lossage-4.mm: Same.\n+        * obj-c++.dg/protocol-qualifier-2.mm: Same.\n+        * objc.dg/call-super-2.m: Same.\n+        * objc.dg/class-protocol-1.m: Same.\n+        * objc.dg/desig-init-1.m: Same.\n+        * objc.dg/exceptions-3.m: Same.\n+        * objc.dg/exceptions-4.m: Same.\n+        * objc.dg/exceptions-5.m: Same.\n+        * objc.dg/exceptions-6.m: Same.\n+        * objc.dg/method-19.m: Same.\n+        * objc.dg/method-2.m: Same.\n+        * objc.dg/method-5.m: Same.\n+        * objc.dg/method-6.m: Same.\n+        * objc.dg/method-7.m: Same.\n+        * objc.dg/method-lookup-1.m: Same.\n+        * objc.dg/proto-hier-1.m: Same.\n+        * objc.dg/proto-lossage-4.m: Same.\n+\n 2019-05-17  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>\n \n \t* g++.dg/eh/o32-fp.C: New."}, {"sha": "048918781553317393ae2f874b0f7d9e80cd869d", "filename": "gcc/testsuite/c-c++-common/Wbool-operation-1.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-operation-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-operation-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-operation-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -15,18 +15,18 @@ fn (bool b, bool b2, T b3, int n, v4si v)\n {\n   int r = 0;\n \n-  r += ~b; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += n + ~b; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += ~(n == 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += ~(n || 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += ~b == 1; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += ~(++n, n == 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += ~(++n, n > 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += ~(++n, n && 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += (++n, ~b); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += ~b3; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += ~foo (); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n-  r += ~(bool) !1; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~b; /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += n + ~b; /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += ~(n == 1); /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += ~(n || 1); /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += ~b == 1; /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += ~(++n, n == 1); /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += ~(++n, n > 1); /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += ~(++n, n && 1); /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += (++n, ~b); /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += ~b3; /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += ~foo (); /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n+  r += ~(bool) !1; /* { dg-warning \"on an expression of type 'bool'|on a boolean expression\" } */\n \n   v = ~v;\n   r += ~(int) b;"}, {"sha": "08d3b94a0871acef13fd2b18edafd3ce76ae185b", "filename": "gcc/testsuite/c-c++-common/Wvarargs-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,7 +9,7 @@ void\n err (int a)\n {\n   va_list vp;\n-  va_start (vp, a); // { dg-error \"used in function with fixed args\" }\n+  va_start (vp, a); // { dg-error \"used in function with fixed arguments\" }\n }\n \n void"}, {"sha": "bfd8276a2920e91095ebb7674017f1279cd1f380", "filename": "gcc/testsuite/c-c++-common/Wvarargs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -6,7 +6,7 @@ void\n err (int a)\n {\n   va_list vp;\n-  va_start (vp, a); // { dg-error \"used in function with fixed args\" }\n+  va_start (vp, a); // { dg-error \"used in function with fixed arguments\" }\n }\n \n #pragma GCC diagnostic push"}, {"sha": "f891a93ad208b551b1a0cb6767f44efaaa1a4358", "filename": "gcc/testsuite/c-c++-common/convert-vec-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconvert-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconvert-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconvert-vec-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n /* { dg-prune-output \"changes the ABI\" } */\n typedef float v2sf __attribute__ ((vector_size (8)));\n-v2sf sub (void) { return (v2sf) 0.0; } /* { dg-error \"can't convert\" } */\n+v2sf sub (void) { return (v2sf) 0.0; } /* { dg-error \"cannot convert\" } */"}, {"sha": "c30039226b39283603186a1c34b3b99d958fb081", "filename": "gcc/testsuite/c-c++-common/pr51768.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51768.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51768.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51768.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -5,21 +5,21 @@\n void\n foo (void)\n {\n-  asm goto (\"\" : : : : lab, lab, lab2, lab);\t/* { dg-error \"duplicate asm operand name\" } */\n+  asm goto (\"\" : : : : lab, lab, lab2, lab);\t/* { dg-error \"duplicate 'asm' operand name\" } */\n lab:;\n lab2:;\n }\n \n void\n bar (void)\n {\n-  asm goto (\"\" : : [lab] \"i\" (0) : : lab);\t/* { dg-error \"duplicate asm operand name\" } */\n+  asm goto (\"\" : : [lab] \"i\" (0) : : lab);\t/* { dg-error \"duplicate 'asm' operand name\" } */\n lab:;\n }\n \n void\n baz (void)\n {\n   int x;\n-  asm (\"\" : [lab] \"=r\" (x) : [lab] \"r\" (x));\t/* { dg-error \"duplicate asm operand name\" } */\n+  asm (\"\" : [lab] \"=r\" (x) : [lab] \"r\" (x));\t/* { dg-error \"duplicate 'asm' operand name\" } */\n }"}, {"sha": "4ffdc59f027ee9a7e9fd645c8d5f403e3e1e9b62", "filename": "gcc/testsuite/c-c++-common/scal-to-vec1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fscal-to-vec1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fscal-to-vec1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fscal-to-vec1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -35,9 +35,9 @@ int main (int argc, char *argv[]) {\n     f1 = ((int)998769576) + f0; /* { dg-error \"conversion of scalar \\[^\\\\n\\]* to vector\" \"scalar to vector\" { target { ! int16 } } } */\n \n     /* convert.c should take care of this.  */\n-    i1 = sfl + i0;      /* { dg-error \"can't convert value to a vector|invalid operands\" } */\n-    i1 = 1.5 + i0;      /* { dg-error \"can't convert value to a vector|invalid operands\" } */\n-    v1 = d + v0;        /* { dg-error \"can't convert value to a vector|invalid operands\" } */\n+    i1 = sfl + i0;      /* { dg-error \"cannot convert value to a vector|invalid operands\" } */\n+    i1 = 1.5 + i0;      /* { dg-error \"cannot convert value to a vector|invalid operands\" } */\n+    v1 = d + v0;        /* { dg-error \"cannot convert value to a vector|invalid operands\" } */\n \n     return 0;\n }"}, {"sha": "73892601897a73ccba6619d2995cbeb9d765d962", "filename": "gcc/testsuite/c-c++-common/tm/inline-asm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Finline-asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Finline-asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Finline-asm.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4,7 +4,7 @@\n static inline void\n inline_death ()\n {\n-  __asm__ (\"\");\t\t\t/* { dg-error \"asm not allowed\" } */\n+  __asm__ (\"\");\t\t\t/* { dg-error \"'asm' not allowed\" } */\n }\n \n void"}, {"sha": "504113e8eff86f3435a6a41b0bae815b25e4bfd5", "filename": "gcc/testsuite/c-c++-common/tm/safe-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fsafe-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fsafe-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fsafe-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -39,8 +39,8 @@ foo(void)\n   (*pi)();\t\t/* { dg-error \"unsafe indirect function call\" } */\n   (*pu)();\t\t/* { dg-error \"unsafe indirect function call\" } */\n \n-  asm(\"\");\t\t/* { dg-error \"asm not allowed\" } */\n-  asm(\"\" : \"=g\"(i));\t/* { dg-error \"asm not allowed\" } */\n+  asm(\"\");\t\t/* { dg-error \"'asm' not allowed\" } */\n+  asm(\"\" : \"=g\"(i));\t/* { dg-error \"'asm' not allowed\" } */\n \n   return fc(i);\n }\n@@ -62,8 +62,8 @@ bar(void)\n   (*pm)();\n   (*pu)();\t\t/* { dg-error \"unsafe indirect function call\" } */\n \n-  asm(\"\");\t\t/* { dg-error \"asm not allowed\" } */\n-  asm(\"\" : \"=g\"(i));\t/* { dg-error \"asm not allowed\" } */\n+  asm(\"\");\t\t/* { dg-error \"'asm' not allowed\" } */\n+  asm(\"\" : \"=g\"(i));\t/* { dg-error \"'asm' not allowed\" } */\n \n   return fc(i);\n }"}, {"sha": "1bb217fa99bfb119580448ca7b4e5cea56d8de0a", "filename": "gcc/testsuite/g++.dg/asm-qual-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasm-qual-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasm-qual-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasm-qual-1.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -7,7 +7,7 @@ f ()\n {\n   asm volatile (\"\");\n \n-  asm const (\"\"); // { dg-error {'const' is not an asm qualifier} }\n+  asm const (\"\"); // { dg-error {'const' is not an 'asm' qualifier} }\n \n-  asm __restrict (\"\"); // { dg-error {'__restrict' is not an asm qualifier} }\n+  asm __restrict (\"\"); // { dg-error {'__restrict' is not an 'asm' qualifier} }\n }"}, {"sha": "80573cb435860fc23e1584df0d3cbed84b4f9b25", "filename": "gcc/testsuite/g++.dg/asm-qual-3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasm-qual-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasm-qual-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasm-qual-3.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2,11 +2,11 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++98\" }\n \n-asm const (\"\");    // { dg-error {'const' is not an asm qualifier} }\n-asm volatile (\"\"); // { dg-warning {asm qualifier 'volatile' ignored outside of function body} }\n+asm const (\"\");    // { dg-error {'const' is not an 'asm' qualifier} }\n+asm volatile (\"\"); // { dg-warning {'asm' qualifier 'volatile' ignored outside of function body} }\n asm restrict (\"\"); // { dg-error {expected '\\(' before 'restrict'} }\n-asm inline (\"\");   // { dg-error {asm qualifier outside of function body} }\n-asm goto (\"\");     // { dg-error {asm qualifier outside of function body} }\n+asm inline (\"\");   // { dg-error {'asm' qualifier outside of function body} }\n+asm goto (\"\");     // { dg-error {'asm' qualifier outside of function body} }\n \n // There are many other things wrong with this code, so:\n // { dg-excess-errors \"\" }"}, {"sha": "3c8739c542284a0ab939c9e03aa491d68e85b6c7", "filename": "gcc/testsuite/g++.dg/conversion/dynamic1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdynamic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdynamic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdynamic1.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -11,5 +11,5 @@ A& bar();\n \n void baz()\n {\n-  dynamic_cast<A&>( bar().foo );  // { dg-error \"cannot dynamic_cast\" }\n+  dynamic_cast<A&>( bar().foo );  // { dg-error \"cannot 'dynamic_cast'\" }\n }"}, {"sha": "010416a77a1447859ba7ebedd3fb1c4490392b30", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-89599.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-89599.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-89599.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-89599.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile { target c++11 } }\n \n void foo (int x) {}\n-constexpr void *arr[2] = { (void*) &foo, (void *) foo };// { dg-error \"a reinterpret_cast is not a constant expression\" }\n-constexpr void *ptr = (void *) &foo;\t\t\t// { dg-error \"a reinterpret_cast is not a constant expression\" }\n+constexpr void *arr[2] = { (void*) &foo, (void *) foo };// { dg-error \"'reinterpret_cast' is not a constant expression\" }\n+constexpr void *ptr = (void *) &foo;\t\t\t// { dg-error \"'reinterpret_cast' is not a constant expression\" }"}, {"sha": "da76a3dc7bceb5bb424fc03b623904ce3f7d0dc8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-cast.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -7,8 +7,8 @@ int i;\n // The following was accepted due to bug 49171.\n constexpr void *q = reinterpret_cast<void*>(&i);    // { dg-error \"not a constant expression\" }\n \n-constexpr void *r0 = reinterpret_cast<void*>(1);    // { dg-error \"not a constant expression|reinterpret_cast from integer to pointer\" }\n-constexpr void *r1 = reinterpret_cast<void*>(sizeof 'x');  // { dg-error \".reinterpret_cast<void\\\\*>\\\\(1\\[ul\\]\\*\\\\). is not a constant expression\" }\n+constexpr void *r0 = reinterpret_cast<void*>(1);    // { dg-error \"not a constant expression|'reinterpret_cast' from integer to pointer\" }\n+constexpr void *r1 = reinterpret_cast<void*>(sizeof 'x');  // { dg-error \"'reinterpret_cast<void\\\\*>\\\\(1\\[ul\\]\\*\\\\)' is not a constant expression\" }\n \n template <class T>\n constexpr bool f ()"}, {"sha": "1970122f549bfde2731cc1e2f4d8adeb08ab2014", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-shift1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -11,7 +11,7 @@ constexpr int i1 = fn1 (1, -1); // { dg-message \"in .constexpr. expansion of \" }\n constexpr int\n fn2 (int i, int j)\n {\n-  return i << j; // { dg-error \"is >= than the precision of the left operand\" }\n+  return i << j; // { dg-error \"is greater than or equal to the precision .. of the left operand\" }\n }\n \n constexpr int i2 = fn2 (1, 200); // { dg-message \"in .constexpr. expansion of \" }\n@@ -43,7 +43,7 @@ constexpr int i5 = fn5 (__INT_MAX__, 1);\n constexpr int\n fn6 (unsigned int i, unsigned int j)\n {\n-  return i << j; // { dg-error \"is >= than the precision of the left operand\" }\n+  return i << j; // { dg-error \"is greater than or equal to the precision .. of the left operand\" }\n }\n \n constexpr int i6 = fn6 (1, -1); // { dg-message \"in .constexpr. expansion of \" }\n@@ -67,7 +67,7 @@ constexpr int i8 = fn8 (-1, 1);\n constexpr int\n fn9 (int i, int j)\n {\n-  return i >> j;  // { dg-error \"is >= than the precision of the left operand\" }\n+  return i >> j;  // { dg-error \"is greater than or equal to the precision .. of the left operand\" }\n }\n \n constexpr int i9 = fn9 (1, 200); // { dg-message \"in .constexpr. expansion of \" }"}, {"sha": "ef29f30771db133fe9be9ef26dda788f584aea2f", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted18.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile { target c++11 } }\n \n-void f(char i, int j) = delete;\t// { dg-message \"<deleted>\" }\n+void f(char i, int j) = delete;\t// { dg-message \"(deleted)\" }\n void f(int i, ...);\t\t// { dg-message \"void f\" }\n \n int main()"}, {"sha": "ec08f504fab6ed6bfa6cdcc955d5653f38eb8b4e", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-conv11.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv11.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4,7 +4,7 @@\n void foo()\n {\n   int i;\n-  static_cast<void(*)()>([i]{});  // { dg-error \"invalid static_cast\" }\n-  static_cast<void(*)()>([=]{});  // { dg-error \"invalid static_cast\" }\n-  static_cast<void(*)()>([&]{});  // { dg-error \"invalid static_cast\" }\n+  static_cast<void(*)()>([i]{});  // { dg-error \"invalid 'static_cast'\" }\n+  static_cast<void(*)()>([=]{});  // { dg-error \"invalid 'static_cast'\" }\n+  static_cast<void(*)()>([&]{});  // { dg-error \"invalid 'static_cast'\" }\n }"}, {"sha": "2b9017865f7f169a081115ad1772bd1a2e671ac8", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr04.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4,13 +4,13 @@\n \n __extension__ typedef __INTPTR_TYPE__ intptr_t;\n \n-const int n4 = static_cast<const int>(nullptr); // { dg-error \"invalid static_cast \" }\n+const int n4 = static_cast<const int>(nullptr); // { dg-error \"invalid 'static_cast' \" }\n const short int n5 = reinterpret_cast<short int>(nullptr); // { dg-error \"loses precision\" }\n const intptr_t n6 = reinterpret_cast<intptr_t>(nullptr);\n const intptr_t n7 = (intptr_t)nullptr;\n \n decltype(nullptr) mynull = 0;\n-const int n8 = static_cast<const int>(mynull); // { dg-error \"invalid static_cast \" }\n+const int n8 = static_cast<const int>(mynull); // { dg-error \"invalid 'static_cast' \" }\n const short int n9 = reinterpret_cast<short int>(mynull); // { dg-error \"loses precision\" }\n const intptr_t n10 = reinterpret_cast<intptr_t>(mynull);\n const intptr_t n11 = (intptr_t)mynull;"}, {"sha": "2ff5e0092a5d90dcc6d624e4c9e50af687d7942c", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert12.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -27,4 +27,4 @@ main()\n   float_thing(1);\n }\n \n-// { dg-warning \"static_assert without a message only available with \" \"\" { target *-*-* } 21 }\n+// { dg-warning \"'static_assert' without a message only available with \" \"\" { target *-*-* } 21 }"}, {"sha": "bca38ffa89a7ee19add8f6a04a93e99974b8dbe3", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -6,4 +6,4 @@ static_assert (1 == 0,); // { dg-error \"expected string-literal before '\\\\)'\" }\n \n static_assert (1 == 0, \"oops\"); // { dg-error \"static assertion failed\" }\n \n-// { dg-error \"static_assert without a message only available with \" \"\" { target { ! c++17 } } 3 }\n+// { dg-error \"'static_assert' without a message only available with \" \"\" { target { ! c++17 } } 3 }"}, {"sha": "25721259c6be7c1e3b25daa82474a993d418d2c3", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-conv1.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv1.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4,10 +4,10 @@\n void foo()\n {\n   int i;\n-  static_cast<void(*)(int)>([i](auto){});  // { dg-error \"invalid static_cast\" }\n-  static_cast<void(*)(int)>([=](auto){});  // { dg-error \"invalid static_cast\" }\n-  static_cast<void(*)(int)>([&](auto){});  // { dg-error \"invalid static_cast\" }\n-  static_cast<float(*)(float)>([i](auto x){ return x; });  // { dg-error \"invalid static_cast\" }\n-  static_cast<float(*)(float)>([=](auto x){ return x; });  // { dg-error \"invalid static_cast\" }\n-  static_cast<float(*)(float)>([&](auto x){ return x; });  // { dg-error \"invalid static_cast\" }\n+  static_cast<void(*)(int)>([i](auto){});  // { dg-error \"invalid 'static_cast'\" }\n+  static_cast<void(*)(int)>([=](auto){});  // { dg-error \"invalid 'static_cast'\" }\n+  static_cast<void(*)(int)>([&](auto){});  // { dg-error \"invalid 'static_cast'\" }\n+  static_cast<float(*)(float)>([i](auto x){ return x; });  // { dg-error \"invalid 'static_cast'\" }\n+  static_cast<float(*)(float)>([=](auto x){ return x; });  // { dg-error \"invalid 'static_cast'\" }\n+  static_cast<float(*)(float)>([&](auto x){ return x; });  // { dg-error \"invalid 'static_cast'\" }\n }"}, {"sha": "3c73cbbb65936a06a03449113f0dbe63a94febf5", "filename": "gcc/testsuite/g++.dg/cpp1y/pr79393-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79393-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79393-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79393-3.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -18,7 +18,7 @@ struct B : virtual A\n };\n \n B::~B () {\n-  throw 1; // { dg-warning \"will always call terminate\" }\n+  throw 1; // { dg-warning \"will always call 'terminate'\" }\n }\n \n struct C : virtual A"}, {"sha": "06815fdace2165eed600b444dd1243a8b4592cb6", "filename": "gcc/testsuite/g++.dg/cpp1y/static_assert1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert1.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -28,4 +28,4 @@ main()\n   float_thing(1);\n }\n \n-// { dg-warning \"static_assert without a message only available with \" \"\" { target *-*-* } 21 }\n+// { dg-warning \"'static_assert' without a message only available with \" \"\" { target *-*-* } 21 }"}, {"sha": "871e31a286d8c35ffa2fb114e0f0d3507a389067", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if4.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4,7 +4,7 @@\n void f()\n {\n   goto l;\t\t\t// { dg-message \"from here\" }\n-  if constexpr (false)\t\t// { dg-message \"enters constexpr if\" }\n+  if constexpr (false)\t\t// { dg-message \"enters 'constexpr if'\" }\n     {\n     l:;\t\t\t\t// { dg-error \"jump to label\" }\n     }"}, {"sha": "9d30b0e32f62e1f894dbac0a6ebea87337c34c20", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if5.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3,7 +3,7 @@\n \n void f()\n {\n-  if constexpr (false)\t\t// { dg-message \"enters constexpr if\" }\n+  if constexpr (false)\t\t// { dg-message \"enters 'constexpr if'\" }\n     {\n       goto l;\t\t\t// { dg-message \"from here\" }\n     }"}, {"sha": "8aa87f74437306c477cd99af52459a02a6168cdb", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if9.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4,7 +4,7 @@\n void f(int i)\n {\n   switch (i)\n-    if constexpr (false)\t// { dg-message \"enters constexpr if\" }\n+    if constexpr (false)\t// { dg-message \"enters 'constexpr if'\" }\n       {\n       case 42:;\t\t\t// { dg-error \"jump to case label\" }\n       }"}, {"sha": "7f22f50315ff2c32b6eb8b60b787df4ba5f473e2", "filename": "gcc/testsuite/g++.dg/eh/goto2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto2.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -8,6 +8,6 @@ try\n   } catch (...)\n   {\n   l2: ;            // { dg-error \"jump to label 'l2'\" }\n-                   // { dg-message \"enters catch block\" \"\" { target *-*-*} .-1 }\n-    goto l1;       // { dg-message \"from here|enters try block\" }\n+                   // { dg-message \"enters 'catch' block\" \"\" { target *-*-*} .-1 }\n+    goto l1;       // { dg-message \"from here|enters 'try' block\" }\n   }"}, {"sha": "415782cfd1f82fe4bfd1ca5763efe8a86d85c5cd", "filename": "gcc/testsuite/g++.dg/eh/goto3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto3.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,6 +9,6 @@ try\n   } catch (...)\n   {\n   l2: ;\t    // { dg-error \"jump to label 'l2'\" }\n-\t\t   // { dg-message \"enters catch block\" \"\" { target *-*-*} .-1 }\n-    goto l1;       // { dg-message \"from here|enters try block\" }\n+\t\t   // { dg-message \"enters 'catch' block\" \"\" { target *-*-*} .-1 }\n+    goto l1;       // { dg-message \"from here|enters 'try' block\" }\n   }"}, {"sha": "6dd7560136c9c525303c81a5991883850579cd13", "filename": "gcc/testsuite/g++.dg/expr/static_cast8.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast8.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,9 +9,9 @@ extern C* c;\n \n void pointers(C* c, A2* a2, B1* b1)\n {\n-  (void) static_cast<A1*>(c);\t// { dg-error \"invalid static_cast\" }\n-  (void) static_cast<C*>(a2);\t// { dg-error \"invalid static_cast\" }\n-  (void) static_cast<B2*>(b1);\t// { dg-error \"invalid static_cast\" }\n+  (void) static_cast<A1*>(c);\t// { dg-error \"invalid 'static_cast'\" }\n+  (void) static_cast<C*>(a2);\t// { dg-error \"invalid 'static_cast'\" }\n+  (void) static_cast<B2*>(b1);\t// { dg-error \"invalid 'static_cast'\" }\n }\n \n struct D1; // { dg-message \"note: class type 'D1' is incomplete\" }\n@@ -21,7 +21,7 @@ struct E2; // { dg-message \"note: class type 'E2' is incomplete\" }\n \n void references(C& c, D2& d2, E1& e1)\n {\n-  (void) static_cast<D1&>(c);\t// { dg-error \"invalid static_cast\" }\n-  (void) static_cast<C&>(d2);\t// { dg-error \"invalid static_cast\" }\n-  (void) static_cast<E2&>(e1);\t// { dg-error \"invalid static_cast\" }\n+  (void) static_cast<D1&>(c);\t// { dg-error \"invalid 'static_cast'\" }\n+  (void) static_cast<C&>(d2);\t// { dg-error \"invalid 'static_cast'\" }\n+  (void) static_cast<E2&>(e1);\t// { dg-error \"invalid 'static_cast'\" }\n }"}, {"sha": "d5ec13204966983e7e2ba3b2220aa6187390c02f", "filename": "gcc/testsuite/g++.dg/ext/flexary5.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary5.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -62,7 +62,7 @@ ASSERT_AT_END (D4, a);\n // below is benign since GCC computes the expected value.\n struct D5: E1, E2, NE { char a[]; };\n \n-ASSERT_AT_END (D5, a);   // { dg-warning \"offsetof within non-standard-layout\" }\n+ASSERT_AT_END (D5, a);   // { dg-warning \"'offsetof' within non-standard-layout\" }\n \n struct A2x_1 {\n   size_t n;\n@@ -166,29 +166,29 @@ struct A5x {\n \n struct D22: A5x, E1, E2 { };\n \n-ASSERT_AT_END (D22, a);   // { dg-warning \"offsetof within non-standard-layout\" }\n+ASSERT_AT_END (D22, a);   // { dg-warning \"'offsetof' within non-standard-layout\" }\n \n struct D23: E1, A5x, E2 { };\n \n-ASSERT_AT_END (D23, a);   // { dg-warning \"offsetof within non-standard-layout\" }\n+ASSERT_AT_END (D23, a);   // { dg-warning \"'offsetof' within non-standard-layout\" }\n \n struct D24: E1, E2, A5x { };\n \n-ASSERT_AT_END (D24, a);   // { dg-warning \"offsetof within non-standard-layout\" }\n+ASSERT_AT_END (D24, a);   // { dg-warning \"'offsetof' within non-standard-layout\" }\n \n struct DA5x: A5x { };\n \n struct D25: DA5x, E1, E2 { };\n \n-ASSERT_AT_END (D25, a);   // { dg-warning \"offsetof within non-standard-layout\" }\n+ASSERT_AT_END (D25, a);   // { dg-warning \"'offsetof' within non-standard-layout\" }\n \n struct D26: E1, DA5x, E2 { };\n \n-ASSERT_AT_END (D26, a);   // { dg-warning \"offsetof within non-standard-layout\" }\n+ASSERT_AT_END (D26, a);   // { dg-warning \"'offsetof' within non-standard-layout\" }\n \n struct D27: E1, E2, DA5x { };\n \n-ASSERT_AT_END (D27, a);   // { dg-warning \"offsetof within non-standard-layout\" }\n+ASSERT_AT_END (D27, a);   // { dg-warning \"'offsetof' within non-standard-layout\" }\n \n // Verfify that a flexible array member is diagnosed even when deep\n // in the base class hierarchy."}, {"sha": "8f0a7327ab2efaf77668ee7f4fd7626b89f178cd", "filename": "gcc/testsuite/g++.dg/ext/utf-array-short-wchar.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -21,9 +21,9 @@ const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type a\n const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n const char16_t\ts16_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_7[2] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-error \"initializer-string for 'const char16_t \\\\\\[0]' is too long\" } */\n+const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-error \"initializer-string for 'const char16_t \\\\\\[1]' is too long\" } */\n+const char16_t\ts16_7[2] = u\"ab\";\t/* { dg-error \"initializer-string for 'const char16_t \\\\\\[2]' is too long\" } */\n const char16_t\ts16_8[3] = u\"ab\";\n const char16_t\ts16_9[4] = u\"ab\";\n \n@@ -33,9 +33,9 @@ const char32_t\ts32_2[]\t= U\"ab\";\n const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n const char32_t\ts32_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-error \"initializer-string for 'const char32_t \\\\\\[0]' is too long\" } */\n+const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-error \"initializer-string for 'const char32_t \\\\\\[1]' is too long\" } */\n+const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-error \"initializer-string for 'const char32_t \\\\\\[2]' is too long\" } */\n const char32_t\ts32_8[3] = U\"ab\";\n const char32_t\ts32_9[4] = U\"ab\";\n "}, {"sha": "e539cd45063832bc8c96f1f470034e84fe0b65cd", "filename": "gcc/testsuite/g++.dg/ext/utf-array.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -21,9 +21,9 @@ const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type a\n const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n const char16_t\ts16_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char16_t\ts16_7[2] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-error \"initializer-string for 'const char16_t \\\\\\[0]' is too long\" } */\n+const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-error \"initializer-string for 'const char16_t \\\\\\[1]' is too long\" } */\n+const char16_t\ts16_7[2] = u\"ab\";\t/* { dg-error \"initializer-string for 'const char16_t \\\\\\[2]' is too long\" } */\n const char16_t\ts16_8[3] = u\"ab\";\n const char16_t\ts16_9[4] = u\"ab\";\n \n@@ -33,9 +33,9 @@ const char32_t\ts32_2[]\t= U\"ab\";\n const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .wchar_t.\" } */\n const char32_t\ts32_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n-const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-error \"initializer-string for 'const char32_t \\\\\\[0]' is too long\" } */\n+const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-error \"initializer-string for 'const char32_t \\\\\\[1]' is too long\" } */\n+const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-error \"initializer-string for 'const char32_t \\\\\\[2]' is too long\" } */\n const char32_t\ts32_8[3] = U\"ab\";\n const char32_t\ts32_9[4] = U\"ab\";\n "}, {"sha": "1db5c383fd6ef257f23466004b20fce3fc559e69", "filename": "gcc/testsuite/g++.dg/ext/utf8-2.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf8-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf8-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf8-2.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -12,16 +12,16 @@ const char16_t\ts1[]\t= u8\"ab\";\t// { dg-error \"from a string literal with type arr\n const char32_t  s2[]    = u8\"ab\";\t// { dg-error \"from a string literal with type array of .char.\" }\n const wchar_t   s3[]    = u8\"ab\";\t// { dg-error \"from a string literal with type array of .char.\" }\n \n-const u8_char_t      t0[0]   = u8\"ab\";\t// { dg-error \"chars is too long\" }\n-const u8_char_t      t1[1]   = u8\"ab\";\t// { dg-error \"chars is too long\" }\n-const u8_char_t      t2[2]   = u8\"ab\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      t0[0]   = u8\"ab\";\t// { dg-error \"initializer-string for 'const u8_char_t \\\\\\[0]' {aka 'const char \\\\\\[0]'} is too long\" }\n+const u8_char_t      t1[1]   = u8\"ab\";\t// { dg-error \"initializer-string for 'const u8_char_t \\\\\\[1]' {aka 'const char \\\\\\[1]'} is too long\" }\n+const u8_char_t      t2[2]   = u8\"ab\";\t// { dg-error \"initializer-string for 'const u8_char_t \\\\\\[2]' {aka 'const char \\\\\\[2]'} is too long\" }\n const u8_char_t      t3[3]   = u8\"ab\";\n const u8_char_t      t4[4]   = u8\"ab\";\n \n-const u8_char_t      u0[0]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n-const u8_char_t      u1[1]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n-const u8_char_t      u2[2]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n-const u8_char_t      u3[3]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n-const u8_char_t      u4[4]   = u8\"\\u2160.\";\t// { dg-error \"chars is too long\" }\n+const u8_char_t      u0[0]   = u8\"\\u2160.\";\t// { dg-error \"initializer-string for 'const u8_char_t \\\\\\[0]' {aka 'const char \\\\\\[0]'} is too long\" }\n+const u8_char_t      u1[1]   = u8\"\\u2160.\";\t// { dg-error \"initializer-string for 'const u8_char_t \\\\\\[1]' {aka 'const char \\\\\\[1]'} is too long\" }\n+const u8_char_t      u2[2]   = u8\"\\u2160.\";\t// { dg-error \"initializer-string for 'const u8_char_t \\\\\\[2]' {aka 'const char \\\\\\[2]'} is too long\" }\n+const u8_char_t      u3[3]   = u8\"\\u2160.\";\t// { dg-error \"initializer-string for 'const u8_char_t \\\\\\[3]' {aka 'const char \\\\\\[3]'} is too long\" }\n+const u8_char_t      u4[4]   = u8\"\\u2160.\";\t// { dg-error \"initializer-string for 'const u8_char_t \\\\\\[4]' {aka 'const char \\\\\\[4]'} is too long\" }\n const u8_char_t      u5[5]   = u8\"\\u2160.\";\n const u8_char_t      u6[6]   = u8\"\\u2160.\";"}, {"sha": "c45d43efe8af8329c29fb5d4872281d2c218f837", "filename": "gcc/testsuite/g++.dg/gomp/loop-4.C", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-4.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -81,28 +81,28 @@ f0 ()\n   for (i = 64; i != 0; i += k)\n     ;\n   #pragma omp for\n-  for (i = 0; i != 64; i += m)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = 0; i != 64; i += m)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = 64; i != 0; i -= m)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = 64; i != 0; i -= m)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = 0; i != 64; i -= n)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = 0; i != 64; i -= n)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = 64; i != 0; i += n)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = 64; i != 0; i += n)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = 0; i != 64; i += o)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = 0; i != 64; i += o)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = 64; i != 0; i -= o)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = 64; i != 0; i -= o)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = 0; i != 64; i -= p)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = 0; i != 64; i -= p)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = 64; i != 0; i += p)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = 64; i != 0; i += p)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n }\n \n@@ -165,63 +165,63 @@ f1 (I<int> &x, I<int> &y, I<int> &u, I<int> &v)\n   for (i = y; i != x; i = l + i)\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = i + 2)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = i + 2)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = 7 + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = 7 + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = i - 2)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = i - 2)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = -7 + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = -7 + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = i + m)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = i + m)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = m + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = m + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = i - m)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = i - m)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = -m + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = -m + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = i - n)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = i - n)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = -n + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = -n + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = i + n)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = i + n)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = n + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = n + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = i + o)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = i + o)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = o + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = o + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = i - o)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = i - o)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = -o + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = -o + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = i - p)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = i - p)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = x; i != y; i = -p + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = x; i != y; i = -p + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = i + p)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = i + p)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n   #pragma omp for\n-  for (i = y; i != x; i = p + i)\t// { dg-error \"increment is not constant 1 or -1 for != condition\" }\n+  for (i = y; i != x; i = p + i)\t// { dg-error \"increment is not constant 1 or -1 for '!=' condition\" }\n     ;\n }"}, {"sha": "dcc8bcbc8e5ca5557fcf31ff49c9b0abad7ecd10", "filename": "gcc/testsuite/g++.dg/gomp/macro-4.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmacro-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmacro-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmacro-4.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -10,9 +10,9 @@ void bar (void);\n void\n foo (void)\n {\n-#pragma omp p\t\t// { dg-warning \"-:ignoring #pragma omp _Pragma\" }\n+#pragma omp p\t\t// { dg-warning \"-:ignoring '#pragma omp _Pragma'\" }\n     bar ();\n-  omp_p\t\t\t// { dg-warning \"-:ignoring #pragma omp _Pragma\" }\n+  omp_p\t\t\t// { dg-warning \"-:ignoring '#pragma omp _Pragma'\" }\n     bar ();\n }\n \n@@ -22,8 +22,8 @@ foo (void)\n void\n baz (void)\n {\n-#pragma omp parallel\t// { dg-warning \"-:ignoring #pragma omp serial\" }\n+#pragma omp parallel\t// { dg-warning \"-:ignoring '#pragma omp serial'\" }\n     bar ();\n-  omp_parallel\t\t// { dg-warning \"-:ignoring #pragma omp serial\" }\n+  omp_parallel\t\t// { dg-warning \"-:ignoring '#pragma omp serial'\" }\n     bar ();\n }"}, {"sha": "c07a89b9d6ac26754ac440ae2168d870bb8f74d6", "filename": "gcc/testsuite/g++.dg/gomp/udr-1.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fudr-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fudr-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fudr-1.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -86,33 +86,33 @@ namespace N5\n namespace N6\n {\n   struct A { int a; A () : a (0) {} };\n-  #pragma omp declare reduction (| : const A : omp_out.a |= omp_in.a)\t// { dg-error \"const, volatile or __restrict\" }\n-  #pragma omp declare reduction (+ : __const A : omp_out.a += omp_in.a)\t// { dg-error \"const, volatile or __restrict\" }\n+  #pragma omp declare reduction (| : const A : omp_out.a |= omp_in.a)\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n+  #pragma omp declare reduction (+ : __const A : omp_out.a += omp_in.a)\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n   typedef volatile A T;\n-  #pragma omp declare reduction (min : T : omp_out.a += omp_in.a)\t// { dg-error \"const, volatile or __restrict\" }\n-  #pragma omp declare reduction (* : A *__restrict : omp_out->a *= omp_in->a)// { dg-error \"const, volatile or __restrict\" }\n+  #pragma omp declare reduction (min : T : omp_out.a += omp_in.a)\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n+  #pragma omp declare reduction (* : A *__restrict : omp_out->a *= omp_in->a)// { dg-error \"'const', 'volatile' or '__restrict'\" }\n }\n namespace N7\n {\n   struct A { int a; A () : a (0) {} };\n   template <typename T1, typename T2, typename T3, typename T4>\n   struct S\n   {\n-    #pragma omp declare reduction (| : T1 : omp_out |= omp_in)\t\t// { dg-error \"const, volatile or __restrict\" }\n-    #pragma omp declare reduction (+ : T2 : omp_out += omp_in)\t\t// { dg-error \"const, volatile or __restrict\" }\n+    #pragma omp declare reduction (| : T1 : omp_out |= omp_in)\t\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n+    #pragma omp declare reduction (+ : T2 : omp_out += omp_in)\t\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n     typedef T3 T;\n-    #pragma omp declare reduction (min : T : omp_out += omp_in)\t\t// { dg-error \"const, volatile or __restrict\" }\n-    #pragma omp declare reduction (* : T4 : omp_out *= omp_in)\t\t// { dg-error \"const, volatile or __restrict\" }\n+    #pragma omp declare reduction (min : T : omp_out += omp_in)\t\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n+    #pragma omp declare reduction (* : T4 : omp_out *= omp_in)\t\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n   };\n   S<const A, __const A, volatile A, A *__restrict> s;\n   template <typename T1, typename T2, typename T3, typename T4>\n   int foo ()\n   {\n-    #pragma omp declare reduction (| : T1 : omp_out |= omp_in)\t\t// { dg-error \"const, volatile or __restrict\" }\n-    #pragma omp declare reduction (+ : T2 : omp_out += omp_in)\t\t// { dg-error \"const, volatile or __restrict\" }\n+    #pragma omp declare reduction (| : T1 : omp_out |= omp_in)\t\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n+    #pragma omp declare reduction (+ : T2 : omp_out += omp_in)\t\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n     typedef T3 T;\n-    #pragma omp declare reduction (min : T : omp_out += omp_in)\t\t// { dg-error \"const, volatile or __restrict\" }\n-    #pragma omp declare reduction (* : T4 : omp_out *= omp_in)\t\t// { dg-error \"const, volatile or __restrict\" }\n+    #pragma omp declare reduction (min : T : omp_out += omp_in)\t\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n+    #pragma omp declare reduction (* : T4 : omp_out *= omp_in)\t\t// { dg-error \"'const', 'volatile' or '__restrict'\" }\n     return 0;\n   }\n   int x = foo <const A, __const A, volatile A, A *__restrict> ();"}, {"sha": "064e1ace4664df6b2080b0369900548fb6da9cde", "filename": "gcc/testsuite/g++.dg/init/initializer-string-too-long.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Finitializer-string-too-long.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Finitializer-string-too-long.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Finitializer-string-too-long.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2,7 +2,7 @@\n \n /* Verify that we highlight *which* string is too long.  */\n \n-char test[3][4] = { \"ok\", \"too long\", \"ok\" }; // { dg-error \"initializer-string for array of chars is too long\" }\n+char test[3][4] = { \"ok\", \"too long\", \"ok\" }; // { dg-error \"initializer-string for 'char \\\\\\[4]' is too long\" }\n /* { dg-begin-multiline-output \"\" }\n  char test[3][4] = { \"ok\", \"too long\", \"ok\" };\n                            ^~~~~~~~~~"}, {"sha": "1936f2e5f76106545d6b0e5134f7ff24ed7fcf35", "filename": "gcc/testsuite/g++.dg/other/offsetof9.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof9.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4,14 +4,14 @@\n \n struct A { int i; };\n struct B : virtual A { };\n-__SIZE_TYPE__ s = __builtin_offsetof (B, A::i);\t// { dg-warning \"offsetof within non-standard-layout type\" }\n+__SIZE_TYPE__ s = __builtin_offsetof (B, A::i);\t// { dg-warning \"'offsetof' within non-standard-layout type\" }\n \n template <typename T>\n __SIZE_TYPE__\n foo ()\n {\n-  return __builtin_offsetof (T, A::i)\t\t// { dg-warning \"offsetof within non-standard-layout type\" }\n-\t + __builtin_offsetof (B, A::i);\t// { dg-warning \"offsetof within non-standard-layout type\" }\n+  return __builtin_offsetof (T, A::i)\t\t// { dg-warning \"'offsetof' within non-standard-layout type\" }\n+\t + __builtin_offsetof (B, A::i);\t// { dg-warning \"'offsetof' within non-standard-layout type\" }\n }\n \n __SIZE_TYPE__ t = foo<B> ();"}, {"sha": "cd67c32a547a744eb16d4ca88943d6faa2bef67a", "filename": "gcc/testsuite/g++.dg/ubsan/pr63956.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -11,7 +11,7 @@ fn1 (int a, int b)\n   if (b != 2)\n     a <<= b;\n     // { dg-error \"5 << -2.. is negative\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"is >= than the precision of the left operand\" \"\" { target *-*-* } .-2 }\n+    // { dg-error \"is greater than or equal to the precision of the left operand\" \"\" { target *-*-* } .-2 }\n     // { dg-error \"-2 << 4.. is negative\" \"\" { target *-*-* } .-3 }\n   return a;\n }\n@@ -34,7 +34,7 @@ fn2 (int a, int b)\n   if (b != 2)\n     a >>= b;\n     // { dg-error \"4 >> -1.. is negative\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"is >= than the precision of the left operand\" \"\" { target *-*-* } .-2 }\n+    // { dg-error \"is greater than or equal to the precision of the left operand\" \"\" { target *-*-* } .-2 }\n \n   return a;\n }"}, {"sha": "82e9ead445d032b7b31e84e3c989c83791f6994d", "filename": "gcc/testsuite/g++.dg/warn/Wbool-operation-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWbool-operation-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWbool-operation-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWbool-operation-1.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -6,6 +6,6 @@ template <class c>\n decltype (~c{})\n call ()\n {\n-  return ~false; // { dg-warning \"on an expression of type bool\" }\n+  return ~false; // { dg-warning \"on an expression of type 'bool'\" }\n }\n template int call<bool>();"}, {"sha": "99e1e89b4b765388fbfa41b5f68ab57caf1f5bfb", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits-Wextra.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -30,10 +30,10 @@ void b (unsigned short x)\n \n void c (unsigned int x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n   if (1U >= 0) return;\n   if (1U < 0) return;\n   if (0 <= 1U) return;\n@@ -42,18 +42,18 @@ void c (unsigned int x)\n \n void d (unsigned long x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n }\n \n void e (unsigned long long x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n }\n \n int test (int x) "}, {"sha": "6a968d953dbb5a9661580db0a65ec576b9ee9a85", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -30,10 +30,10 @@ void b (unsigned short x)\n \n void c (unsigned int x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n   if (1U >= 0) return;\n   if (1U < 0) return;\n   if (0 <= 1U) return;\n@@ -42,18 +42,18 @@ void c (unsigned int x)\n \n void d (unsigned long x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n }\n \n void e (unsigned long long x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n }\n \n int test (int x) "}, {"sha": "8f8bdd6359ee266ab8cfac53c6d27987c307b35d", "filename": "gcc/testsuite/g++.dg/wrappers/pr88680.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr88680.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr88680.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr88680.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -27,9 +27,9 @@ void test(unsigned n)\n     return;\n   if (N >= FOO)\n     return;\n-  if (n >= 0) // { dg-warning \">= 0 is always true\" }\n+  if (n >= 0) // { dg-warning \"'>= 0' is always true\" }\n     return;\n-  if (n < 0) // { dg-warning \"< 0 is always false\" }\n+  if (n < 0) // { dg-warning \"'< 0' is always false\" }\n     return;\n   if (n >= FOO)\n     return;\n@@ -45,9 +45,9 @@ void test(unsigned n)\n     return;\n   if (0 <= FOO)\n     return;\n-  if (0 <= n) // { dg-warning \">= 0 is always true\" }\n+  if (0 <= n) // { dg-warning \"'>= 0' is always true\" }\n     return;\n-  if (0 > n) // { dg-warning \"< 0 is always false\" }\n+  if (0 > n) // { dg-warning \"'< 0' is always false\" }\n     return;\n   if (N <= FOO)\n     return;"}, {"sha": "5835c963be625bfc5e9c994bb8d1ee69ec6919a2", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh55.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh55.C?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,7 +9,7 @@ void my_terminate_handler() {\n }\n \n void throw_an_unexpected_exception() throw() {\n-  throw 1;\t// { dg-warning \"throw will always call terminate\" \"\" { target c++17 } }\n+  throw 1;\t// { dg-warning \"'throw' will always call 'terminate'\" \"\" { target c++17 } }\n }\n \n int main() {"}, {"sha": "b40bc6c5fee7c9a97050c9f118ac7516af3eb128", "filename": "gcc/testsuite/gcc.dg/Wsign-compare-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-compare-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -5,7 +5,7 @@\n unsigned int\n f0 (int x, unsigned int y)\n {\n-  return x ? y : -1; /* { dg-warning \"18:operand of \\\\?: changes signedness from 'int' to 'unsigned int'\" } */\n+  return x ? y : -1; /* { dg-warning \"18:operand of '\\\\?:' changes signedness from 'int' to 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    return x ? y : -1;\n                   ^~\n@@ -15,7 +15,7 @@ f0 (int x, unsigned int y)\n unsigned int\n f1 (int xxx, unsigned int yyy)\n {\n-  return xxx ? yyy : -1; /* { dg-warning \"22:operand of \\\\?: changes signedness from 'int' to 'unsigned int'\" } */\n+  return xxx ? yyy : -1; /* { dg-warning \"22:operand of '\\\\?:' changes signedness from 'int' to 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    return xxx ? yyy : -1;\n                       ^~\n@@ -25,7 +25,7 @@ f1 (int xxx, unsigned int yyy)\n unsigned int\n f2 (int xxx, unsigned int yyy)\n {\n-  return xxx ? -1 : yyy; /* { dg-warning \"16:operand of \\\\?: changes signedness from 'int' to 'unsigned int'\" } */\n+  return xxx ? -1 : yyy; /* { dg-warning \"16:operand of '\\\\?:' changes signedness from 'int' to 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    return xxx ? -1 : yyy;\n                 ^~\n@@ -35,7 +35,7 @@ f2 (int xxx, unsigned int yyy)\n unsigned int\n f3 (unsigned int yyy)\n {\n-  return yyy ?: -1; /* { dg-warning \"17:operand of \\\\?: changes signedness from 'int' to 'unsigned int'\" } */\n+  return yyy ?: -1; /* { dg-warning \"17:operand of '\\\\?:' changes signedness from 'int' to 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    return yyy ?: -1;\n                  ^~\n@@ -45,7 +45,7 @@ f3 (unsigned int yyy)\n unsigned int\n f4 (int xxx, unsigned yyy, short uuu)\n {\n-  return xxx ? yyy : uuu; /* { dg-warning \"22:operand of \\\\?: changes signedness from 'short int' to 'unsigned int'\" } */\n+  return xxx ? yyy : uuu; /* { dg-warning \"22:operand of '\\\\?:' changes signedness from 'short int' to 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    return xxx ? yyy : uuu;\n                       ^~~\n@@ -55,7 +55,7 @@ f4 (int xxx, unsigned yyy, short uuu)\n unsigned int\n f5 (int xxx, unsigned yyy, short uuu)\n {\n-  return xxx ? uuu : yyy; /* { dg-warning \"16:operand of \\\\?: changes signedness from 'short int' to 'unsigned int'\" } */\n+  return xxx ? uuu : yyy; /* { dg-warning \"16:operand of '\\\\?:' changes signedness from 'short int' to 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    return xxx ? uuu : yyy;\n                 ^~~\n@@ -65,7 +65,7 @@ f5 (int xxx, unsigned yyy, short uuu)\n unsigned int\n f6 (int xxx, unsigned yyy, signed char uuu)\n {\n-  return xxx ? yyy : uuu; /* { dg-warning \"22:operand of \\\\?: changes signedness from 'signed char' to 'unsigned int'\" } */\n+  return xxx ? yyy : uuu; /* { dg-warning \"22:operand of '\\\\?:' changes signedness from 'signed char' to 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    return xxx ? yyy : uuu;\n                       ^~~\n@@ -75,7 +75,7 @@ f6 (int xxx, unsigned yyy, signed char uuu)\n unsigned int\n f7 (int xxx, unsigned yyy, signed char uuu)\n {\n-  return xxx ? uuu : yyy; /* { dg-warning \"16:operand of \\\\?: changes signedness from 'signed char' to 'unsigned int'\" } */\n+  return xxx ? uuu : yyy; /* { dg-warning \"16:operand of '\\\\?:' changes signedness from 'signed char' to 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    return xxx ? uuu : yyy;\n                 ^~~"}, {"sha": "d04ecb7f3448b569948cab7eb214c2352fbbcd79", "filename": "gcc/testsuite/gcc.dg/Wtype-limits-Wextra.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -21,22 +21,22 @@ void a (unsigned char x)\n }\n \n void b (unsigned short x)\n-{                    /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } .+1 } */\n+{                    /* { dg-warning \"comparison of unsigned expression '< 0' is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } .+1 } */\n+                     /* { dg-warning \"comparison of unsigned expression '>= 0' is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } .+1 } */\n+                     /* { dg-warning \"comparison of unsigned expression '< 0' is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } .+1 } */\n+                     /* { dg-warning \"comparison of unsigned expression '>= 0' is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n }\n \n void c (unsigned int x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n   if (1U >= 0) return;\n   if (1U < 0) return;\n   if (0 <= 1U) return;\n@@ -45,18 +45,18 @@ void c (unsigned int x)\n \n void d (unsigned long x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n }\n \n void e (unsigned long long x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n }\n \n int test (int x) "}, {"sha": "6a596fc3a3c819babcef3fe3afc66c6b0710b9f0", "filename": "gcc/testsuite/gcc.dg/Wtype-limits.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -21,22 +21,22 @@ void a (unsigned char x)\n }\n \n void b (unsigned short x)\n-{                    /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } .+1 } */\n+{                    /* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } .+1 } */\n+                     /* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */  \n-                     /* { dg-warning \"comparison of unsigned expression < 0 is always false\" \"\" { target { ! int32plus } } .+1 } */\n+                     /* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression >= 0 is always true\" \"\" { target { ! int32plus } } .+1 } */\n+                     /* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n }\n \n void c (unsigned int x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n   if (1U >= 0) return;\n   if (1U < 0) return;\n   if (0 <= 1U) return;\n@@ -45,18 +45,18 @@ void c (unsigned int x)\n \n void d (unsigned long x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n }\n \n void e (unsigned long long x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression < 0 is always false\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression >= 0 is always true\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (x >= 0) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n+  if (0 > x)  return;/* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" } */\n+  if (0 <= x) return;/* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" } */\n }\n \n int test (int x) "}, {"sha": "158cab71511954f39fe091f0bbd7951bc4ec4421", "filename": "gcc/testsuite/gcc.dg/Wunknownprag.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWunknownprag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWunknownprag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunknownprag.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -5,7 +5,7 @@\n \n /* We used to get \"unspellable token: CPP_EOF\" warnings.  */\n \n-#pragma\t\t\t\t/* { dg-warning \"-:ignoring #pragma\" } */\n-#pragma ~\t\t\t/* { dg-warning \"-:ignoring #pragma\" } */\n-#pragma baz\t\t\t/* { dg-warning \"-:ignoring #pragma\" } */\n-#pragma baz baz\t\t\t/* { dg-warning \"-:ignoring #pragma\" } */\n+#pragma\t\t\t\t/* { dg-warning \"-:ignoring '#pragma\" } */\n+#pragma ~\t\t\t/* { dg-warning \"-:ignoring '#pragma\" } */\n+#pragma baz\t\t\t/* { dg-warning \"-:ignoring '#pragma\" } */\n+#pragma baz baz\t\t\t/* { dg-warning \"-:ignoring '#pragma baz baz'\" } */"}, {"sha": "ba992c45c03d91b16b69894e0fe4fc2e987899bb", "filename": "gcc/testsuite/gcc.dg/Wunsuffixed-float-constants-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWunsuffixed-float-constants-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2FWunsuffixed-float-constants-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunsuffixed-float-constants-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -8,8 +8,8 @@ double a = 1.1d;\n /* With FLOAT_CONST_DECIMAL64 switched to ON these would have type\n    _Decimal64.  */\n \n-double b = VAL;\t\t/* { dg-warning \"unsuffixed float constant\" } */\n-double c = 1.2;\t\t/* { dg-warning \"unsuffixed float constant\" } */\n+double b = VAL;\t\t/* { dg-warning \"unsuffixed floating constant\" } */\n+double c = 1.2;\t\t/* { dg-warning \"unsuffixed floating constant\" } */\n \n /* With FLOAT_CONST_DECIMAL64 switched to ON these are still binary.  */\n "}, {"sha": "10983c77c5537b77fbfbfab25a3047257617fc90", "filename": "gcc/testsuite/gcc.dg/asm-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-6.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2,6 +2,6 @@\n void foo ()\n {\n   int i;\n-  __asm__ (\"\" : [data] \"=r\" (i) : [data] \"i\" (100)); /* { dg-error \"duplicate asm operand\" } */\n+  __asm__ (\"\" : [data] \"=r\" (i) : [data] \"i\" (100)); /* { dg-error \"duplicate 'asm' operand\" } */\n   __asm__ (\"%[foo]\" :: [bar] \"i\" (1)); /* { dg-error \"undefined named operand\" } */\n }"}, {"sha": "7e216877637a2b0005a94b678217491fdc64af92", "filename": "gcc/testsuite/gcc.dg/asm-qual-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -8,7 +8,7 @@ f (void)\n {\n   asm volatile (\"\");\n \n-  asm const (\"\"); /* { dg-error {'const' is not an asm qualifier} } */\n+  asm const (\"\"); /* { dg-error {'const' is not a valid 'asm' qualifier} } */\n \n-  asm restrict (\"\"); /* { dg-error {'restrict' is not an asm qualifier} } */\n+  asm restrict (\"\"); /* { dg-error {'restrict' is not a valid 'asm' qualifier} } */\n }"}, {"sha": "2571ab8a6836490631b29fbd1e04af6d5fd41014", "filename": "gcc/testsuite/gcc.dg/attr-assume_aligned-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-assume_aligned-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-assume_aligned-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-assume_aligned-4.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -23,14 +23,14 @@ A (16385) void* fpv_16kp1 (void);    /* { dg-warning \".assume_aligned. attribute\n \n A (32767) void* fpv_32km1 (void);     /* { dg-warning \".assume_aligned. attribute argument 32767 is not a power of 2\" } */\n \n-A (4, -1) void* fpv_4_m1 (void);      /* { dg-warning \".assume_aligned. attribute argument -1 is not in the range \\\\\\[0, 4\\\\\\)\" } */\n+A (4, -1) void* fpv_4_m1 (void);      /* { dg-warning \".assume_aligned. attribute argument -1 is not in the range \\\\\\[0, 3]\" } */\n \n A (4, 0) void* fpv_4_0 (void);\n A (4, 1) void* fpv_4_1 (void);\n A (4, 2) void* fpv_4_2 (void);\n A (4, 3) void* fpv_4_3 (void);\n \n-A (4, 4) void* fpv_4_3 (void);        /* { dg-warning \".assume_aligned. attribute argument 4 is not in the range \\\\\\[0, 4\\\\\\)\" } */\n+A (4, 4) void* fpv_4_3 (void);        /* { dg-warning \".assume_aligned. attribute argument 4 is not in the range \\\\\\[0, 3]\" } */\n \n A (4) void* gpv_4_3 (void);\n A (2) void* gpv_4_3 (void);"}, {"sha": "210659d724c7d23d82d2a138abe5e286fe7ea595", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-6.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-6.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -7,22 +7,22 @@\n __extension__ typedef __INTPTR_TYPE__ intptr_t;\n \n /* PR 29116.  */\n-int n = 0, p[n * 0 + 1]; /* { dg-error \"variabl|can't be evaluated\" } */\n+int n = 0, p[n * 0 + 1]; /* { dg-error \"variabl|cannot be evaluated\" } */\n \n /* PR 31871.  */\n-extern int c[1 + ((intptr_t) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n+extern int c[1 + ((intptr_t) (void *) 0)]; /* { dg-error \"variab|cannot be evaluated\" } */\n \n /* Implicit conversions from floating-point constants are not OK,\n    although explicit ones are.  */\n-extern int c1[1.0 ? 1 : 0]; /* { dg-error \"variab|can't be evaluated\" } */\n+extern int c1[1.0 ? 1 : 0]; /* { dg-error \"variab|cannot be evaluated\" } */\n \n extern int c2[(int)1.0 ? 1 : 0];\n \n-extern int c3[1.0 && 1]; /* { dg-error \"variab|can't be evaluated\" } */\n+extern int c3[1.0 && 1]; /* { dg-error \"variab|cannot be evaluated\" } */\n \n extern int c4[(int)1.0 && 1];\n \n-extern int c5[1.0 || 1]; /* { dg-error \"variab|can't be evaluated\" } */\n+extern int c5[1.0 || 1]; /* { dg-error \"variab|cannot be evaluated\" } */\n \n extern int c6[(int)1.0 || 1];\n \n@@ -46,7 +46,7 @@ enum f {\n void\n f (int a)\n {\n-  int v[1 + ((intptr_t) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n+  int v[1 + ((intptr_t) (void *) 0)]; /* { dg-error \"variab|cannot be evaluated\" } */\n   switch (a)\n     {\n     case (n * 0 + 1): /* { dg-error \"constant\" } */"}, {"sha": "19ed4f4208d665aa910d938dbf93fad9325fdaa6", "filename": "gcc/testsuite/gcc.dg/cast-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -24,8 +24,8 @@ f (void)\n   (union u) l; /* { dg-error \"cast to union type from type not present in union\" } */\n   (int) sv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n   (int) uv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n-  (float) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n-  (float) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (float) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (float) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n   (_Complex double) sv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (_Complex double) uv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (void *) sv; /* { dg-error \"cannot convert to a pointer type\" } */"}, {"sha": "24f63b2e8d46d2bfa7fe356b5b613e3026c5df51", "filename": "gcc/testsuite/gcc.dg/cast-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -24,8 +24,8 @@ f (void)\n   (union u) l; /* { dg-error \"cast to union type from type not present in union\" } */\n   (int) sv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n   (int) uv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n-  (float) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n-  (float) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (float) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (float) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n   (_Complex double) sv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (_Complex double) uv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (void *) sv; /* { dg-error \"cannot convert to a pointer type\" } */"}, {"sha": "d8ae3a0fce27ea837b1e2a0c624cc0679791150a", "filename": "gcc/testsuite/gcc.dg/cast-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -24,8 +24,8 @@ f (void)\n   (union u) l; /* { dg-error \"cast to union type from type not present in union\" } */\n   (int) sv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n   (int) uv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n-  (float) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n-  (float) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (float) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (float) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n   (_Complex double) sv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (_Complex double) uv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (void *) sv; /* { dg-error \"cannot convert to a pointer type\" } */"}, {"sha": "2ca8fa32d3e10aa6439a13fbb2367ad598c53d99", "filename": "gcc/testsuite/gcc.dg/cpp/source_date_epoch-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsource_date_epoch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsource_date_epoch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsource_date_epoch-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -6,7 +6,7 @@\n int\n main(void)\n {\n-  __builtin_printf (\"%s %s\\n\", __DATE__, __TIME__); /* { dg-error \"SOURCE_DATE_EPOCH must expand\" } */\n+  __builtin_printf (\"%s %s\\n\", __DATE__, __TIME__); /* { dg-error \"environment variable 'SOURCE_DATE_EPOCH' must expand\" } */\n   __builtin_printf (\"%s %s\\n\", __DATE__, __TIME__);\n   return 0;\n }"}, {"sha": "9bd4d48d618bd9ac9a3bfdebb4893787afbdd59c", "filename": "gcc/testsuite/gcc.dg/debug/pr85252.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr85252.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr85252.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr85252.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -5,7 +5,7 @@ void\n foo (void)\n {\n   static char a[0] = \"\";\n-  static char b[0] = \"b\";\t/* { dg-warning \"initializer-string for array of chars is too long\" } */\n+  static char b[0] = \"b\";\t/* { dg-warning \"initializer-string for array of 'char' is too long\" } */\n   static char c[1] = \"c\";\n-  static char d[1] = \"de\";\t/* { dg-warning \"initializer-string for array of chars is too long\" } */\n+  static char d[1] = \"de\";\t/* { dg-warning \"initializer-string for array of 'char' is too long\" } */\n }"}, {"sha": "8d22ba3f8c1860a5b29d1f616a9bf8804ba9c103", "filename": "gcc/testsuite/gcc.dg/dfp/cast-bad.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -31,10 +31,10 @@ f (void)\n   (struct s) d128; /* { dg-error \"conversion to non-scalar type requested\" } */\n   (union u) d128; /* { dg-error \"cast to union type from type not present in union\" } */\n \t\t\n-  (_Decimal32) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n-  (_Decimal32) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n-  (_Decimal64) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n-  (_Decimal64) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n-  (_Decimal128) sv; /* { dg-error \"aggregate value used where a float was expected\" } */\n-  (_Decimal128) uv; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  (_Decimal32) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (_Decimal32) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (_Decimal64) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (_Decimal64) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (_Decimal128) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (_Decimal128) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n }"}, {"sha": "c359989f481c58246964a391f19c65be7397016c", "filename": "gcc/testsuite/gcc.dg/gcc_diag-11.c", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fgcc_diag-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fgcc_diag-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgcc_diag-11.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -0,0 +1,220 @@\n+/* Test warnings for for GCC diagnostics.\n+   { dg-do compile }\n+   { dg-options \"-Wformat -Wformat-diag\" } */\n+\n+/* Magic identifiers must be set before the attribute is used.  */\n+\n+typedef long long __gcc_host_wide_int__;\n+\n+typedef struct location_s\n+{\n+  const char *file;\n+  int line;\n+} location_t;\n+\n+union tree_node;\n+typedef union tree_node *tree;\n+\n+/* Define gimple as a dummy type.  The typedef must be provided for\n+   the C test to find the symbol.  */\n+typedef struct gimple gimple;\n+\n+/* Likewise for gimple.  */\n+typedef struct cgraph_node cgraph_node;\n+\n+#define FORMAT(kind) __attribute__ ((format (__gcc_## kind ##__, 1, 2)))\n+\n+/* Basic formatting function like pp_format.  */\n+void diag (const char*, ...) FORMAT (diag);\n+\n+/* Diagnostic formatting function like error or warning declared\n+   by the C front end.  */\n+void cdiag (const char*, ...) FORMAT (cdiag);\n+\n+/* Diagnostic formatting function like error or warning declared\n+   by the middle-end or back-end.  */\n+void tdiag (const char*, ...) FORMAT (tdiag);\n+\n+/* Diagnostic formatting function like error or warning declared\n+   by the C++ front-end.  */\n+void cxxdiag (const char*, ...) FORMAT (cxxdiag);\n+\n+void dump (const char*, ...) FORMAT (dump_printf);\n+\n+/* Verify that functions declared with the C/C++ front-end __gcc_cdiag__\n+   attribute detect invalid whitespace in format strings.  */\n+\n+void test_cdiag_whitespace (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\" a\");             /* { dg-warning \"spurious leading space character in format\" } */\n+  cdiag (\"%< %>a\");\n+  cdiag (\"%<  %>a\");\n+  cdiag (\"a b\");\n+  cdiag (\"a  b\");           /* { dg-warning \"unquoted sequence of 2 consecutive space characters\" } */\n+  cdiag (\"a \");             /* { dg-warning \"spurious trailing space character\" } */\n+  cdiag (\"a  \");            /* { dg-warning \"spurious trailing space characters\" } */\n+  cdiag (\"a%< %>\");\n+  cdiag (\"a%< %>%< %>\");\n+  cdiag (\"a%< %> \");        /* { dg-warning \"spurious trailing space character\" } */\n+  cdiag (\"a%< %>  %< %>\");  /* { dg-warning \"unquoted sequence of 2 consecutive space characters\" } */\n+\n+  /* It's debatable whether the following two formst strings should\n+     be  cdiagnosed.  They aren't only because it's simpler that way.  */\n+  cdiag (\"a %< %>\");\n+  cdiag (\"a%< %> %< %>\");\n+\n+  /* Exercise other whitespace characters.  */\n+  cdiag (\"a\\fb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0c'\" } */\n+  cdiag (\"a\\nb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0a'\" } */\n+  cdiag (\"a\\rb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0d'\" } */\n+  cdiag (\"a\\vb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0b'\" } */\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wformat-diag\"\n+\n+  /* Verify that the warning can be suppressed.  */\n+  cdiag (\"\\ta\\b    c\\vb\\n\");\n+\n+#pragma GCC diagnostic pop\n+}\n+\n+\n+void test_cdiag_control (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"\\1\");             /* { dg-warning \"unquoted control character '\\\\\\\\x01'\" } */\n+  cdiag (\"a\\ab\");           /* { dg-warning \"unquoted control character '\\\\\\\\x07'\" } */\n+  cdiag (\"a\\bb\");           /* { dg-warning \"unquoted control character '\\\\\\\\x08'\" } */\n+}\n+\n+\n+void test_cdiag_punct (tree t, gimple *gc, int i)\n+{\n+  (void)&t; (void)&gc;\n+\n+  /* Exercise the period.  */\n+  cdiag (\".abc\");           /* { dg-warning \"spurious leading punctuation character\" } */\n+  cdiag (\"abc;\");           /* { dg-warning \"spurious trailing punctuation character\" } */\n+  /* Verify that sentences that start with an uppercase letter and end\n+     in a period are not diagnosed.  */\n+  cdiag (\"This is a full sentence.\");\n+  cdiag (\"Capitalized sentence (with a parethetical note).\");\n+  cdiag (\"Not a full sentence;\");   /* { dg-warning \"spurious trailing punctuation character\" } */\n+  cdiag (\"Neither is this one,\");   /* { dg-warning \"spurious trailing punctuation character\" } */\n+\n+  /* Exercise the ellipsis.  */\n+  cdiag (\"this message...\");\n+  cdiag (\"...continues here\");\n+  cdiag (\"but...not here\"); /* { dg-warning \"unquoted sequence of 3 consecutive punctuation characters\" } */\n+\n+  /* Exercise parentheses.  */\n+  cdiag (\"null argument where non-null required (argument %i)\", i);\n+\n+  /* Exercise C++.  */\n+  cdiag (\"C++ is cool\");\n+  cdiag (\"this is c++\");\n+  cdiag (\"you can do this in C++ but not in C\");\n+\n+  /* Exercise parenthetical note followed by a colon, semicolon,\n+     or a comma.  */\n+  cdiag (\"found a bug (here):\");\n+  cdiag (\"because of another bug (over there); fix it\");\n+\n+  cdiag (\"found foo (123): go look at it\");\n+  cdiag (\"missed bar (abc); will try harder next time\");\n+\n+  cdiag (\"expected this (or that), got something else (or who knows what)\");\n+}\n+\n+\n+void test_cdiag_punct_balance (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"f()\");            /* { dg-warning \"spurious trailing punctuation characters\" } */\n+  cdiag (\"g(1)\");\n+  cdiag (\"(\");              /* { dg-warning \"spurious leading punctuation character|unbalanced\" } */\n+  cdiag (\"()\");             /* { dg-warning \"spurious leading punctuation characters\" } */\n+  cdiag (\")\");              /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" } */\n+  cdiag (\"f()g\");           /* { dg-warning \"unquoted sequence of 2 consecutive punctuation characters\" } */\n+  cdiag (\"illegal operand (1)\");\n+}\n+\n+\n+void test_cdiag_nongraph (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"a\\376b\");         /* { dg-warning \"unquoted non-graph character '\\\\\\\\xfe'\" } */\n+  cdiag (\"a\\377b\");         /* { dg-warning \"unquoted non-graph character '\\\\\\\\xff'\" } */\n+}\n+\n+\n+void test_cdiag_attribute (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"attribute foo\");\n+  cdiag (\"this is attribute bar\");\n+  cdiag (\"bad __attribute bar\");        /* { dg-warning \"unquoted attribute\" } */\n+  cdiag (\"__attribute__ (foobar) bad\"); /* { dg-warning \"unquoted attribute\" } */\n+  cdiag (\"__attribute__ ((foobar))\");   /* { dg-warning \"unquoted attribute\" } */\n+  cdiag (\"__attribute__ (xxx))\");       /* { dg-warning \"unquoted attribute\" } */\n+  /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" \"xxx\" { target *-*-* } .-1 } */\n+  cdiag (\"__attribute__ ((yyy)))\");     /* { dg-warning \"unquoted attribute\" } */\n+  /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" \"yyy\" { target *-*-* } .-1 } */\n+  cdiag (\"__attribute__ ((zzz)\");       /* { dg-warning \"unquoted attribute\" } */\n+  /* { dg-warning \"unbalanced punctuation character '\\\\\\('\" \"zzz\" { target *-*-* } .-1 } */\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wformat-diag\"\n+\n+  /* Verify that the warning can be suppressed.  */\n+  cdiag (\"__attribute__ (((\");\n+\n+#pragma GCC diagnostic pop\n+}\n+\n+void test_cdiag_builtin (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"__builtin_abort\");    /* { dg-warning \"unquoted name of built-in function '__builtin_abort'\" } */\n+  cdiag (\"in __builtin_trap\");  /* { dg-warning \"unquoted name of built-in function '__builtin_trap'\" } */\n+  cdiag (\"__builtin_xyz bites\");/* { dg-warning \"unquoted name of built-in function '__builtin_xyz'\" } */\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wformat-diag\"\n+\n+  /* Verify that the warning can be suppressed.  */\n+  cdiag (\"__builtin____with____lots__of__underscores\");\n+\n+#pragma GCC diagnostic pop\n+}\n+\n+void test_cdiag_option (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"%<-Wall%>\");\n+  cdiag (\"use option %<-Wextra%> to enable additinal warnings\");\n+\n+  cdiag (\"-O2 is fast\");       /* { dg-warning \"unquoted option name '-O2'\" } */\n+  cdiag (\"but -O3 is faster\"); /* { dg-warning \"unquoted option name '-O3'\" } */\n+\n+  cdiag (\"get --help\");        /* { dg-warning \"unquoted option name '--help'\" } */\n+  cdiag (\"enable -m32\");       /* { dg-warning \"unquoted option name '-m32'\" } */\n+  cdiag (\"value is -12\");\n+  cdiag (\"foo-O2\");\n+  cdiag (\"a-W\");\n+}\n+\n+void test_cdiag_oper (tree t, gimple *gc)\n+{\n+  cdiag (\"a == b\");            /* { dg-warning \"unquoted operator '=='\" } */\n+  cdiag (\"++a\");               /* { dg-warning \"unquoted operator '\\\\\\+\\\\\\+'\" } */\n+  cdiag (\"b--\");               /* { dg-warning \"unquoted operator '--'\" } */\n+}"}, {"sha": "fed5adf15b7db06de78e88874c28025005bff6c0", "filename": "gcc/testsuite/gcc.dg/gnu-cond-expr-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,5 +9,5 @@ int a, b, c;\n void\n f (void)\n {\n-  c = (++a ? : b); /* { dg-warning \"ISO C forbids omitting the middle term of a \\\\?: expression\" } */\n+  c = (++a ? : b); /* { dg-warning \"ISO C forbids omitting the middle term of a '\\\\?:' expression\" } */\n }"}, {"sha": "08657ff737e580327fc03b954bb1c75c6473533b", "filename": "gcc/testsuite/gcc.dg/gnu-cond-expr-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu-cond-expr-3.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,5 +9,5 @@ int a, b, c;\n void\n f (void)\n {\n-  c = (++a ? : b); /* { dg-error \"ISO C forbids omitting the middle term of a \\\\?: expression\" } */\n+  c = (++a ? : b); /* { dg-error \"ISO C forbids omitting the middle term of a '\\\\?:' expression\" } */\n }"}, {"sha": "a4ed9a3980afa73a850001c8ccff72d92a3395c9", "filename": "gcc/testsuite/gcc.dg/gomp/macro-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fmacro-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fmacro-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fmacro-4.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -10,9 +10,9 @@ void bar (void);\n void\n foo (void)\n {\n-#pragma omp p\t\t/* { dg-warning \"-:ignoring #pragma omp _Pragma\" } */\n+#pragma omp p\t\t/* { dg-warning \"-:ignoring '#pragma omp _Pragma'\" } */\n     bar ();\n-  omp_p\t\t\t/* { dg-warning \"-:ignoring #pragma omp _Pragma\" } */\n+  omp_p\t\t\t/* { dg-warning \"-:ignoring '#pragma omp _Pragma'\" } */\n     bar ();\n }\n \n@@ -22,8 +22,8 @@ foo (void)\n void\n baz (void)\n {\n-#pragma omp parallel\t/* { dg-warning \"-:ignoring #pragma omp serial\" } */\n+#pragma omp parallel\t/* { dg-warning \"-:ignoring '#pragma omp serial'\" } */\n     bar ();\n-  omp_parallel\t\t/* { dg-warning \"-:ignoring #pragma omp serial\" } */\n+  omp_parallel\t\t/* { dg-warning \"-:ignoring '#pragma omp serial'\" } */\n     bar ();\n }"}, {"sha": "61734045f2b7c1eae77ac2c6081ccfeb09bcf799", "filename": "gcc/testsuite/gcc.dg/init-bad-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -16,9 +16,9 @@ void h(a)\n \n char s[1] = \"x\";\n char s1[1] = { \"x\" };\n-char t[1] = \"xy\"; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n-char t1[1] = { \"xy\" }; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n-char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in char array initializer\" } */\n+char t[1] = \"xy\"; /* { dg-warning \"initializer-string for array of 'char' is too long\" } */\n+char t1[1] = { \"xy\" }; /* { dg-warning \"initializer-string for array of 'char' is too long\" } */\n+char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in 'char' array initializer\" } */\n /* { dg-message \"near init\" \"near\" { target *-*-* } .-1 } */\n \n int i = { }; /* { dg-error \"empty scalar initializer\" } */"}, {"sha": "4775c4807bb6675c75cdf6b213a05ce2b0c08c52", "filename": "gcc/testsuite/gcc.dg/init-bad-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -17,9 +17,9 @@ void h(a)\n \n char s[1] = \"x\";\n char s1[1] = { \"x\" };\n-char t[1] = \"xy\"; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n-char t1[1] = { \"xy\" }; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n-char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in char array initializer\" } */\n+char t[1] = \"xy\"; /* { dg-warning \"initializer-string for array of 'char' is too long\" } */\n+char t1[1] = { \"xy\" }; /* { dg-warning \"initializer-string for array of 'char' is too long\" } */\n+char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in 'char' array initializer\" } */\n /* { dg-message \"near init\" \"near\" { target *-*-* } .-1 } */\n \n int j = { 1 };"}, {"sha": "c5c338d9a85b3389b5557f82b0fed7a4843af737", "filename": "gcc/testsuite/gcc.dg/init-bad-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -17,9 +17,9 @@ void h(a)\n \n char s[1] = \"x\";\n char s1[1] = { \"x\" };\n-char t[1] = \"xy\"; /* { dg-error \"initializer-string for array of chars is too long\" } */\n-char t1[1] = { \"xy\" }; /* { dg-error \"initializer-string for array of chars is too long\" } */\n-char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in char array initializer\" } */\n+char t[1] = \"xy\"; /* { dg-error \"initializer-string for array of 'char' is too long\" } */\n+char t1[1] = { \"xy\" }; /* { dg-error \"initializer-string for array of 'char' is too long\" } */\n+char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in 'char' array initializer\" } */\n /* { dg-message \"near init\" \"near\" { target *-*-* } .-1 } */\n \n int j = { 1 };"}, {"sha": "058f2e856f5b1a479b30228cf80ba29fcba415e5", "filename": "gcc/testsuite/gcc.dg/parm-mismatch-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,18 +1,18 @@\n-/* Test diagnostics for parameter mismatches.  Types that can't match\n+/* Test diagnostics for parameter mismatches.  Types that cannot match\n    ().  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n void f0(); /* { dg-message \"note: previous declaration of 'f0' was here\" } */\n void f0(int, ...); /* { dg-error \"conflicting types for 'f0'\" } */\n-/* { dg-message \"note: a parameter list with an ellipsis can't match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n+/* { dg-message \"note: a parameter list with an ellipsis cannot match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n void f1(int, ...); /* { dg-message \"note: previous declaration of 'f1' was here\" } */\n void f1(); /* { dg-error \"conflicting types for 'f1'\" } */\n-/* { dg-message \"note: a parameter list with an ellipsis can't match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n+/* { dg-message \"note: a parameter list with an ellipsis cannot match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n void f2(); /* { dg-message \"note: previous declaration of 'f2' was here\" } */\n void f2(char); /* { dg-error \"conflicting types for 'f2'\" } */\n-/* { dg-message \"note: an argument type that has a default promotion can't match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n+/* { dg-message \"note: an argument type that has a default promotion cannot match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n void f3(char); /* { dg-message \"note: previous declaration of 'f3' was here\" } */\n void f3(); /* { dg-error \"conflicting types for 'f3'\" } */\n-/* { dg-message \"note: an argument type that has a default promotion can't match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n+/* { dg-message \"note: an argument type that has a default promotion cannot match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */"}, {"sha": "d63238eab0714044a29367cce7b92739a5ea660d", "filename": "gcc/testsuite/gcc.dg/pr27528.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27528.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27528.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27528.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -7,16 +7,16 @@ void\n foo (int *x, int y)\n {\n   int constant = 0;\n-  asm (\"# %0\" :: \"i\" (x)); /* { dg-warning \"probably doesn't match\" } */\n+  asm (\"# %0\" :: \"i\" (x)); /* { dg-warning \"probably does not match\" } */\n   /* { dg-error \"impossible constraint\" \"\" { target *-*-* } .-1 } */\n \n-  asm (\"# %0\" :: \"i\" (bar (*x))); /* { dg-warning \"probably doesn't match\" } */\n+  asm (\"# %0\" :: \"i\" (bar (*x))); /* { dg-warning \"probably does not match\" } */\n   /* { dg-error \"impossible constraint\" \"\" { target *-*-* } .-1 } */\n \n-  asm (\"# %0\" :: \"i\" (*x + 0x11)); /* { dg-warning \"probably doesn't match\" } */\n+  asm (\"# %0\" :: \"i\" (*x + 0x11)); /* { dg-warning \"probably does not match\" } */\n   /* { dg-error \"impossible constraint\" \"\" { target *-*-* } .-1 } */\n \n-  asm (\"# %0\" :: \"i\" (constant)); /* { dg-warning \"probably doesn't match\" } */\n+  asm (\"# %0\" :: \"i\" (constant)); /* { dg-warning \"probably does not match\" } */\n   /* { dg-error \"impossible constraint\" \"\" { target *-*-* } .-1 } */\n \n   asm (\"# %0\" :: \"i\" (y * 0)); /* folded */"}, {"sha": "70d3483d80cd869ee74bf3c54df71d6554d2ca18", "filename": "gcc/testsuite/gcc.dg/pr48552-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -15,7 +15,7 @@ f2 (void *x)\n {\n   __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n }\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } .-1 } */\n-\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n+\t\t\t\t\t/* { dg-error \"invalid lvalue in 'asm' output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n void\n f3 (void *x)\n {\n@@ -39,7 +39,7 @@ f6 (void *x)\n {\n   __asm volatile (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n }\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } .-1 } */\n-\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n+\t\t\t\t\t/* { dg-error \"invalid lvalue in 'asm' output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n void\n f7 (struct S *x)\n {\n@@ -49,5 +49,5 @@ f7 (struct S *x)\n void\n f8 (struct S *x)\n {\n-  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-error \"invalid lvalue in asm output 0\" } */\n+  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-error \"invalid lvalue in 'asm' output 0\" } */\n }"}, {"sha": "ce6bece3f964398935a753ab4614ff6b1893347b", "filename": "gcc/testsuite/gcc.dg/pr48552-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -15,7 +15,7 @@ f2 (void *x)\n {\n   __asm (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n }\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } .-1 } */\n-\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n+\t\t\t\t/* { dg-error \"invalid lvalue in 'asm' output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n void\n f3 (void *x)\n {\n@@ -39,7 +39,7 @@ f6 (void *x)\n {\n   __asm (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n }\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } .-1 } */\n-\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n+\t\t\t\t/* { dg-error \"invalid lvalue in 'asm' output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n void\n f7 (struct S *x)\n {\n@@ -49,5 +49,5 @@ f7 (struct S *x)\n void\n f8 (struct S *x)\n {\n-  __asm (\"\" : \"=r\" (*x));\t/* { dg-error \"invalid lvalue in asm output 0\" } */\n+  __asm (\"\" : \"=r\" (*x));\t/* { dg-error \"invalid lvalue in 'asm' output 0\" } */\n }"}, {"sha": "9b01b22631cdb999130093e014ff0f19beaa713c", "filename": "gcc/testsuite/gcc.dg/pr59846.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59846.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59846.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59846.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -17,13 +17,13 @@ fn2 (unsigned int p)\n _Bool\n fn3 (unsigned int p)\n {\n-  return p >= 0U; /* { dg-warning \"12:comparison of unsigned expression >= 0 is always true\" } */\n+  return p >= 0U; /* { dg-warning \"12:comparison of unsigned expression in '>= 0' is always true\" } */\n }\n \n _Bool\n fn4 (unsigned int p)\n {\n-  return p < 0U; /* { dg-warning \"12:comparison of unsigned expression < 0 is always false\" } */\n+  return p < 0U; /* { dg-warning \"12:comparison of unsigned expression in '< 0' is always false\" } */\n }\n \n _Bool"}, {"sha": "e707904c0876b5370422229810636e210f027228", "filename": "gcc/testsuite/gcc.dg/pr61096-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61096-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61096-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61096-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -47,7 +47,7 @@ __extension__ int a15[10] = {[2 ... 1] = 4 }; /* { dg-error \"31:empty index rang\n __extension__ int a16[10] = {[2 ... 100] = 4 }; /* { dg-error \"31:array index range in initializer exceeds array bounds\" } */\n int a17[] = { .B = 1 }; /* { dg-error \"15:field name not in record or union initializer\" } */\n int a18[] = { e }; /* { dg-error \"15:initializer element is not constant\" } */\n-char a19[1] = { \"x\", \"x\" }; /* { dg-error \"22:excess elements in char array initializer\" } */\n+char a19[1] = { \"x\", \"x\" }; /* { dg-error \"22:excess elements in 'char' array initializer\" } */\n \n void\n bar (void)"}, {"sha": "2281a02f17a2b0e32158923e33883dd5835291eb", "filename": "gcc/testsuite/gcc.dg/pr8788-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr8788-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr8788-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr8788-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -12,7 +12,7 @@ typedef struct {\n \n void switch_to_stack (my_stack *stack){\n     asm (  /* { dg-error \"impossible constraint\" } */\n-/* { dg-warning \"asm operand 1\" \"asm operand 1\" { target *-*-* } .-1 } */\n+/* { dg-warning \"'asm' operand 1\" \"asm operand 1\" { target *-*-* } .-1 } */\n         \"\\n\"\n         : \"+r\" (stack->regs)\n     );"}, {"sha": "663a171821b0bbfad56df6308f5b5a8a9b967156", "filename": "gcc/testsuite/gcc.dg/pr90082.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90082.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90082.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90082.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,5 +9,5 @@ foo (int a)\n {\n   if (__builtin_setjmp (buf) == 0)\n     __asm__ (\"\" : : \"n\" (a * 2));\t/* { dg-error \"impossible constraint in 'asm'\" } */\n-\t\t\t\t\t/* { dg-warning \"asm operand 0 probably doesn't match constraints\" \"\" { target *-*-* } .-1 } */\n+\t\t\t\t\t/* { dg-warning \"'asm' operand 0 probably does not match constraints\" \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "601724834affeb4e4a872876b60fc39b44ae8195", "filename": "gcc/testsuite/gcc.dg/simd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -45,7 +45,7 @@ hanneke ()\n   foo = (typeof (foo)) foo2;\n \n   /* Casted assignment between scalar and SIMD of different size.  */\n-  foo1 = (typeof (foo1)) foo2; /* { dg-error \"can't convert a vector of type\" } */\n+  foo1 = (typeof (foo1)) foo2; /* { dg-error \"cannot convert a vector of type\" } */\n \n   /* Operators on compatible SIMD types.  */\n   a += b + b;"}, {"sha": "e5462390effb4d7a5a42e83e0dd4ce1c8dc00bf3", "filename": "gcc/testsuite/gcc.dg/simd-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -33,10 +33,10 @@ hanneke ()\n   foo = a; /* { dg-error \"incompatible types when assigning\" } */\n \n   /* Casted assignment between scalar and SIMD of same size.  */\n-  foo = (typeof (foo)) foo2; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  foo = (typeof (foo)) foo2; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n \n   /* Casted assignment between scalar and SIMD of different size.  */\n-  foo1 = (typeof (foo1)) foo2; /* { dg-error \"aggregate value used where a float was expected\" } */\n+  foo1 = (typeof (foo1)) foo2; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n \n   /* Operators on compatible SIMD types.  */\n   a += b + b;"}, {"sha": "8187de43481f9a3122d5cd8eb4103ed9f1127569", "filename": "gcc/testsuite/gcc.dg/spellcheck-params-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n /* { dg-options \"--param does-not-resemble-anything=42\" } */\n-/* { dg-error \"invalid --param name .does-not-resemble-anything.\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"invalid '--param' name 'does-not-resemble-anything'\"  \"\" { target *-*-* } 0 } */\n "}, {"sha": "01e1343ab9e143304b198122a75e8ad0546584d7", "filename": "gcc/testsuite/gcc.dg/spellcheck-params.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n /* { dg-options \"--param max-early-inliner-iteration=3\" } */\n-/* { dg-error \"invalid --param name .max-early-inliner-iteration.; did you mean .max-early-inliner-iterations.?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"invalid '--param' name 'max-early-inliner-iteration'; did you mean 'max-early-inliner-iterations'?\"  \"\" { target *-*-* } 0 } */\n "}, {"sha": "f901fd14b54bf953a39ab3e29ba7a2150e37c63a", "filename": "gcc/testsuite/gcc.dg/strlenopt-49.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-49.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -11,8 +11,8 @@ const char a3[3] = \"12\\0\";\n const char a8[8] = \"1234567\\0\";\n const char a9[9] = \"12345678\\0\";\n \n-const char ax[9] = \"12345678\\0\\0\\0\\0\";   /* { dg-warning \"initializer-string for array of chars is too long\" } */\n-const char ay[9] = \"\\00012345678\\0\\0\\0\\0\";   /* { dg-warning \"initializer-string for array of chars is too long\" } */\n+const char ax[9] = \"12345678\\0\\0\\0\\0\";   /* { dg-warning \"initializer-string for array of 'char' is too long\" } */\n+const char ay[9] = \"\\00012345678\\0\\0\\0\\0\";   /* { dg-warning \"initializer-string for array of 'char' is too long\" } */\n \n \n int len1 (void)"}, {"sha": "dbaab307a1e309aec7e8325b941382bb62a7608e", "filename": "gcc/testsuite/gcc.dg/tm/pr52141.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpr52141.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpr52141.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpr52141.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4,7 +4,7 @@\n __attribute__((always_inline))\n static void asmfunc(void)\n {\n-  __asm__ (\"\"); /* { dg-error \"asm not allowed in .transaction_safe\" } */\n+  __asm__ (\"\"); /* { dg-error \"'asm' not allowed in 'transaction_safe\" } */\n }\n \n __attribute__((transaction_safe))"}, {"sha": "5501b546fe0bbbd39abe681f996bb17967e5745e", "filename": "gcc/testsuite/gcc.dg/torture/pr51106-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -6,7 +6,7 @@ int\n foo (int x)\n {\n   asm goto (\"\" : : \"i\" (x) : : lab); /* { dg-error \"impossible constraint\" } */\n-  /* { dg-warning \"probably doesn.t match constraints\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"probably does not match constraints\" \"\" { target *-*-* } .-1 } */\n   return 1;\n lab:\n   return 0;"}, {"sha": "2dbb832b7cc5202e325c96cf98e3a378b3b05d25", "filename": "gcc/testsuite/gcc.dg/torture/pr51106-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -7,7 +7,7 @@ int\n bar (int x)\n {\n   asm goto (\"\" : : \"i\" (x) : : lab); /* { dg-error \"impossible constraint\" } */\n-/* { dg-warning \"probably doesn.t match constraints\" \"\" { target *-*-* } .-1 } */\n+/* { dg-warning \"probably does not match constraints\" \"\" { target *-*-* } .-1 } */\n   __builtin_unreachable ();\n lab:\n   return 0;"}, {"sha": "81b452a33a1cffcdb04c539986d736be04063f6e", "filename": "gcc/testsuite/gcc.dg/utf-array-short-wchar.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -21,8 +21,8 @@ const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type a\n const char16_t\ts16_3[]\t= L\"ab\";\n const char16_t\ts16_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-warning \" is too long\" } */\n+const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-warning \" is too long\" } */\n const char16_t\ts16_7[2] = u\"ab\";\n const char16_t\ts16_8[3] = u\"ab\";\n const char16_t\ts16_9[4] = u\"ab\";\n@@ -33,11 +33,11 @@ const char32_t\ts32_2[]\t= U\"ab\";\n const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n const char32_t\ts32_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n-const char32_t\ts32_8[3] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n-const char32_t\ts32_9[4] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-warning \" is too long\" } */\n+const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-warning \" is too long\" } */\n+const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-warning \" is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_8[3] = U\"ab\";\t/* { dg-warning \" is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_9[4] = U\"ab\";\t/* { dg-warning \" is too long\" \"\" { target \"m32c-*-*\" } } */\n \n const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n const wchar_t\tsw_1[]\t= u\"ab\";"}, {"sha": "7f0cb915e041a3a42629f960871bcb3d140ed6c4", "filename": "gcc/testsuite/gcc.dg/utf-array.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -21,8 +21,8 @@ const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type a\n const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .(long |short )?(unsigned )?int.\" \"\" { target { ! wchar_t_char16_t_compatible } } } */\n const char16_t\ts16_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-warning \" is too long\" } */\n+const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-warning \" is too long\" } */\n const char16_t\ts16_7[2] = u\"ab\";\n const char16_t\ts16_8[3] = u\"ab\";\n const char16_t\ts16_9[4] = u\"ab\";\n@@ -33,11 +33,11 @@ const char32_t\ts32_2[]\t= U\"ab\";\n const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .(long |short )?(unsigned )?int.\" \"\" { target { ! wchar_t_char32_t_compatible } } } */\n const char32_t\ts32_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n-const char32_t\ts32_8[3] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n-const char32_t\ts32_9[4] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-warning \" is too long\" } */\n+const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-warning \" is too long\" } */\n+const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-warning \" is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_8[3] = U\"ab\";\t/* { dg-warning \" is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_9[4] = U\"ab\";\t/* { dg-warning \" is too long\" \"\" { target \"m32c-*-*\" } } */\n \n const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of\" \"\" { target { ! wchar_t_char16_t_compatible } } } */"}, {"sha": "b3b873dfd8ae15cb19e4723db84380639b2cecce", "filename": "gcc/testsuite/gcc.dg/utf8-2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Futf8-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Futf8-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf8-2.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -12,16 +12,16 @@ const char16_t\ts1[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type arr\n const char32_t  s2[]    = u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n const wchar_t   s3[]    = u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char      t0[0]   = u8\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char      t1[1]   = u8\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char      t0[0]   = u8\"ab\";\t/* { dg-warning \" is too long\" } */\n+const char      t1[1]   = u8\"ab\";\t/* { dg-warning \" is too long\" } */\n const char      t2[2]   = u8\"ab\";\n const char      t3[3]   = u8\"ab\";\n const char      t4[4]   = u8\"ab\";\n \n-const char      u0[0]   = u8\"\\u2160.\";\t/* { dg-warning \"chars is too long\" } */\n-const char      u1[1]   = u8\"\\u2160.\";\t/* { dg-warning \"chars is too long\" } */\n-const char      u2[2]   = u8\"\\u2160.\";\t/* { dg-warning \"chars is too long\" } */\n-const char      u3[3]   = u8\"\\u2160.\";\t/* { dg-warning \"chars is too long\" } */\n+const char      u0[0]   = u8\"\\u2160.\";\t/* { dg-warning \" is too long\" } */\n+const char      u1[1]   = u8\"\\u2160.\";\t/* { dg-warning \" is too long\" } */\n+const char      u2[2]   = u8\"\\u2160.\";\t/* { dg-warning \" is too long\" } */\n+const char      u3[3]   = u8\"\\u2160.\";\t/* { dg-warning \" is too long\" } */\n const char      u4[4]   = u8\"\\u2160.\";\n const char      u5[5]   = u8\"\\u2160.\";\n const char      u6[6]   = u8\"\\u2160.\";"}, {"sha": "a38679fa8883f197543d0dd6ebabd8f0f3ee1b6b", "filename": "gcc/testsuite/gcc.dg/warn-sprintf-no-nul.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -26,7 +26,7 @@ void sink (int, ...);\n const char a[5] = \"12345\";    /* { dg-message \"declared here\" } */\n const char b[6] = \"123456\";   /* { dg-message \"declared here\" } */\n const char a2[][3] = {\n-  \"\", \"1\", \"12\", \"123\", \"123\\000\"   /* { dg-warning \"initializer-string for array of chars is too long\" } */\n+  \"\", \"1\", \"12\", \"123\", \"123\\000\"   /* { dg-warning \"initializer-string for array of 'char' is too long\" } */\n };\n \n "}, {"sha": "e7bd1a585f941e5cf8c435a1617ae422b3897d59", "filename": "gcc/testsuite/gcc.target/i386/asm-flag-0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-flag-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-flag-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-flag-0.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -11,5 +11,5 @@ void a(void)\n void b(void)\n {\n   char x;\n-  asm(\"\" : \"=@ccbad\"(x)); /* { dg-error \"unknown asm flag output\" } */\n+  asm(\"\" : \"=@ccbad\"(x)); /* { dg-error \"unknown 'asm' flag output\" } */\n }"}, {"sha": "57e60fbadef8373ab5bdd564922ca4c3d7b0b8ba", "filename": "gcc/testsuite/gcc.target/i386/inline_error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finline_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finline_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finline_error.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O0 -mno-popcnt\" } */\n \n inline int __attribute__ ((__gnu_inline__, __always_inline__, target(\"popcnt\")))\n-foo () /* { dg-error \"inlining failed in call to always_inline .* target specific option mismatch\" } */\n+foo () /* { dg-error \"inlining failed in call to 'always_inline' .* target specific option mismatch\" } */\n {\n   return 0;\n }"}, {"sha": "138b98fe1ea7a131963284e044a610557800db0f", "filename": "gcc/testsuite/gcc.target/i386/interrupt-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-6.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -31,7 +31,7 @@ fn4 (uword_t error_code, void *frame)\n   error = error_code;\n }\n \n-extern int fn5 (void *) __attribute__ ((interrupt)); /* { dg-error \"interrupt service routine can't have non-void return value\" } */\n+extern int fn5 (void *) __attribute__ ((interrupt)); /* { dg-error \"interrupt service routine must return 'void'\" } */\n \n int\n fn5 (void *frame)"}, {"sha": "3e2f6a0eb41aa85ab18dc0ea82606488be9fc6b8", "filename": "gcc/testsuite/gcc.target/i386/interrupt-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-7.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -8,5 +8,5 @@ extern void fn (void *) __attribute__((interrupt));\n void\n foo (void)\n {\n-  fn (&error); /* { dg-error \"interrupt service routine can't be called directly\" } */\n+  fn (&error); /* { dg-error \"interrupt service routine cannot be called directly\" } */\n }"}, {"sha": "9c4e22ac716bf71f4a33e6164eb692e5999af820", "filename": "gcc/testsuite/gcc.target/i386/pr30848.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30848.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30848.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30848.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2,5 +2,5 @@\n \n void foo(double d)\n {\n-  __asm__ (\"\" : \"=u\" (d));  /* { dg-error \"output regs\" } */\n+  __asm__ (\"\" : \"=u\" (d));  /* { dg-error \"output registers\" } */\n }"}, {"sha": "85b5671e920585e6b33afb96262c2a633e14107c", "filename": "gcc/testsuite/gcc.target/i386/pr39082-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39082-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39082-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39082-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -13,7 +13,7 @@ extern int bar1 (union un);\n extern union un bar2 (int);\n \n int\n-foo1 (union un u) /* { dg-message \"note: the ABI of passing union with long double has changed in GCC 4.4\" } */\n+foo1 (union un u) /* { dg-message \"note: the ABI of passing union with 'long double' has changed in GCC 4.4\" } */\n {\n   bar1 (u);\n   return u.i;"}, {"sha": "c94c002f14b1ff8634a99e06f61b2f02d6170ef9", "filename": "gcc/testsuite/gcc.target/i386/pr39678.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39678.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39678.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39678.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -10,7 +10,7 @@ struct X {\n \n struct X\n foo (float *p)\n-{ /* { dg-message \"note: the ABI of passing structure with complex float member has changed in GCC 4.4\" } */\n+{ /* { dg-message \"note: the ABI of passing structure with 'complex float' member has changed in GCC 4.4\" } */\n   struct X x;\n   x.c = -3;\n   __real x.val = p[0];"}, {"sha": "9a78f62c98cacf2ccaf765047491131d1dee9a73", "filename": "gcc/testsuite/gcc.target/i386/pr57756.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57756.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57756.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57756.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3,7 +3,7 @@\n \n /* callee cannot be inlined into caller because it has a higher target ISA.  */\n __attribute__((always_inline,target(\"sse4.2\")))\n-__inline int callee () /* { dg-error \"inlining failed in call to always_inline\" }  */\n+__inline int callee () /* { dg-error \"inlining failed in call to 'always_inline'\" }  */\n {\n   return 0;\n }"}, {"sha": "6198ea9af05198cbf9c7908601759f2034dbfa74", "filename": "gcc/testsuite/gcc.target/i386/pr68843-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68843-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68843-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68843-1.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -5,7 +5,7 @@ double\n test ()\n {\n   double x = 1.0;\n-  asm (\"fld %1\" /* { dg-error \"explicitly used regs must be grouped at top of stack\" } */\n+  asm (\"fld %1\" /* { dg-error \"explicitly used registers must be grouped at top of stack\" } */\n        : \"=&t\" (x)\n        : \"u\" (x));\n   return x;"}, {"sha": "08d1a3ea1f1c82eea6fae30d405866b00d7fe5a5", "filename": "gcc/testsuite/gcc.target/i386/pr79804.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79804.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79804.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79804.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -7,4 +7,4 @@ void foo (void)\n   register int r19 asm (\"19\");\n \n   asm volatile (\"# %0\" : \"=r\"(r19));  /* { dg-error \"invalid use of register\" } */\n-}  /* { dg-error \"cannot be used in asm here\" } */\n+}  /* { dg-error \"cannot be used in 'asm' here\" } */"}, {"sha": "161ec88e3a7d05a6eb06b318eda5b778241e503d", "filename": "gcc/testsuite/gcc.target/i386/pr82673.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82673.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82673.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82673.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,4 +9,4 @@ void\n bar (void) /* { dg-error \"frame pointer required, but reserved\" } */\n {\n   B = &y;\n-} /* { dg-error \"bp cannot be used in asm here\" } */\n+} /* { dg-error \"bp cannot be used in 'asm' here\" } */"}, {"sha": "9eae4696ff0b5cd896dd8f3735612e17588bf6af", "filename": "gcc/testsuite/gnat.dg/inline3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgnat.dg%2Finline3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgnat.dg%2Finline3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline3.adb?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,5 +1,5 @@\n -- { dg-do compile }\n--- { dg-error \"not marked Inline_Always\" \"\" { target *-*-* } 0 }\n+-- { dg-error \"not marked 'Inline_Always'\" \"\" { target *-*-* } 0 }\n -- { dg-error \"cannot be inlined\" \"\" { target *-*-* } 0 }\n \n with Inline3_Pkg; use Inline3_Pkg;"}, {"sha": "5d9bed7e6f833ba7bfb54ee602c25f4b3d752740", "filename": "gcc/testsuite/gnat.dg/inline5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgnat.dg%2Finline5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgnat.dg%2Finline5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline5.adb?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,6 +1,6 @@\n -- { dg-do compile }\n -- { dg-options \"-O -gnatn -Winline\" }\n--- { dg-warning \"not marked Inline\" \"\" { target *-*-* } 0 }\n+-- { dg-warning \"not marked 'Inline'\" \"\" { target *-*-* } 0 }\n -- { dg-warning \"cannot be inlined\" \"\" { target *-*-* } 0 }\n \n with Inline5_Pkg; use Inline5_Pkg;"}, {"sha": "390d627b2f5d8972aba36914f9272d308fc2d2a4", "filename": "gcc/testsuite/gnat.dg/inline7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgnat.dg%2Finline7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgnat.dg%2Finline7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline7.adb?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,6 +1,6 @@\n -- { dg-do compile }\n -- { dg-options \"-O -gnatn -Winline\" }\n--- { dg-warning \"not marked Inline\" \"\" { target *-*-* } 0 }\n+-- { dg-warning \"not marked 'Inline'\" \"\" { target *-*-* } 0 }\n -- { dg-warning \"cannot be inlined\" \"\" { target *-*-* } 0 }\n \n with Inline7_Pkg1; use Inline7_Pkg1;"}, {"sha": "3ab23c6e47d67628c6c96e89bb4bc6cfb29b429b", "filename": "gcc/testsuite/gnat.dg/inline9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgnat.dg%2Finline9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fgnat.dg%2Finline9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline9.adb?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1,6 +1,6 @@\n -- { dg-do compile }\n -- { dg-options \"-O -gnatn -Winline\" }\n--- { dg-warning \"not marked Inline\" \"\" { target *-*-* } 0 }\n+-- { dg-warning \"not marked 'Inline'\" \"\" { target *-*-* } 0 }\n -- { dg-warning \"cannot be inlined\" \"\" { target *-*-* } 0 }\n \n with Inline9_Pkg; use Inline9_Pkg;"}, {"sha": "78957cb061edf44d1b5ea576cd9372996743722f", "filename": "gcc/testsuite/obj-c++.dg/class-protocol-1.mm", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -436,6 +436,4 @@ int main ()\n   return(0);\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "622e4ca3b60aa7f7ea2e7d587782ebe110279251", "filename": "gcc/testsuite/obj-c++.dg/exceptions-3.mm", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-3.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -27,19 +27,19 @@ int test (id object)\n   int dummy = 0;\n \n   @try { @throw object; }\n-  @catch (int x)          /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (int x)          /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (intTypedef x)   /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (intTypedef x)   /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (int *x)         /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (int *x)         /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }  \n@@ -51,7 +51,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (id <MyProtocol> x) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (id <MyProtocol> x) /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -63,13 +63,13 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject <MyProtocol> *x)  /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (MyObject <MyProtocol> *x)  /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject x)     /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (MyObject x)     /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {                     /* { dg-error \"no matching function\" \"\" { target *-*-* } .-1 } */\n       dummy++;            /* { dg-message \"MyObject\" \"\" { target *-*-* } interface_MyObject } */\n     }                     /* { dg-message \"candidate\" \"\" { target *-*-* } interface_MyObject } */\n@@ -86,7 +86,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObjectTypedef <MyProtocol> *x) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (MyObjectTypedef <MyProtocol> *x) /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -98,7 +98,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (Class x)   /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (Class x)   /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }"}, {"sha": "4aa00a6006fbb50fc072791352b90c42b0ecc143", "filename": "gcc/testsuite/obj-c++.dg/exceptions-4.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-4.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -33,18 +33,18 @@ int test (id object)\n   @try { @throw object; }\n   @catch\n     {          /* { dg-error \"expected\" } */\n-      dummy++; /* { dg-error \"@catch parameter is not a known Objective-C class type\" \"\" { target *-*-* } .-1 } */\n+      dummy++; /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" \"\" { target *-*-* } .-1 } */\n     }\n   @catch ()  /* { dg-error \"expected identifier before\" } */\n-    {        /* { dg-error \"@catch parameter is not a known Objective-C class type\" \"\" { target *-*-* } .-1 } */\n+    {        /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" \"\" { target *-*-* } .-1 } */\n       dummy++;\n     }\n   @catch (i) /* { dg-error \".i. has not been declared\" } */\n-    {        /* { dg-error \"@catch parameter is not a known Objective-C class type\" \"\" { target *-*-* } .-1 } */\n+    {        /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" \"\" { target *-*-* } .-1 } */\n       dummy++;\n     }\n   @catch (id <MyProtocol x) /* { dg-error \"expected ... before .x.\" } */\n-    {                       /* { dg-error \"@catch parameter cannot be protocol-qualified\" \"\" { target *-*-* } .-1 } */\n+    {                       /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" \"\" { target *-*-* } .-1 } */\n       dummy++;\n     }\n   @catch MyObject *x       /* { dg-error \"expected ... before .MyObject.\" } */"}, {"sha": "5aa08f35821eeb05f0170df64fc9273aa35a767f", "filename": "gcc/testsuite/obj-c++.dg/exceptions-5.mm", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-5.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -27,19 +27,19 @@ int test (id object)\n   int dummy = 0;\n \n   @try { @throw object; }\n-  @catch (int)          /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (int)          /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (intTypedef)   /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (intTypedef)   /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (int *)         /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (int *)         /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }  \n@@ -51,7 +51,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (id <MyProtocol>) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (id <MyProtocol>) /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -63,13 +63,13 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject <MyProtocol> *)  /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (MyObject <MyProtocol> *)  /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject)     /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (MyObject)     /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {                     /* { dg-error \"no matching function\" \"\" { target *-*-* } .-1 } */\n       dummy++;            /* { dg-message \"MyObject\" \"\" { target *-*-* } interface_MyObject } */\n     }                     /* { dg-message \"candidate\" \"\" { target *-*-* } interface_MyObject } */\n@@ -87,7 +87,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObjectTypedef <MyProtocol> *) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (MyObjectTypedef <MyProtocol> *) /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -99,7 +99,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (Class)   /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (Class)   /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }"}, {"sha": "7a776a518a2d89b9e31079e72ce77fc9a1f317f8", "filename": "gcc/testsuite/obj-c++.dg/exceptions-6.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-6.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,7 +9,7 @@\n void test (id object)\n {\n   @throw object;   /* Ok */\n-  @throw;          /* { dg-error \".@throw. .rethrow. used outside of a @catch block\" } */\n+  @throw;          /* { dg-error \".@throw. .rethrow. used outside of a '@catch' block\" } */\n   @throw (object); /* Ok.  */\n   @throw (id)0     /* { dg-error \"expected\" } */\n }"}, {"sha": "4546144517875f253d450122d63d524830b6e65c", "filename": "gcc/testsuite/obj-c++.dg/method-12.mm", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -24,9 +24,7 @@ void foo(void) {\n        /* { dg-message \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } Derived_port_last } */\n \n   [receiver starboard];  /* { dg-warning \"no .\\\\+starboard. method found\" } */\n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } .-1 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } .-2 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } .-3 } */\n+       /* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n \n   [Class port];  /* { dg-error \".Class. is not an Objective\\\\-C class name or alias\" } */\n }"}, {"sha": "cd53d0f2f165dce2ef6fd025ce76f58d76086fc0", "filename": "gcc/testsuite/obj-c++.dg/method-13.mm", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -16,10 +16,9 @@ id foo(void) {\n   TestsuiteObject *obj = [[TestsuiteObject alloc] init];\n   id obj2 = obj;\n   [obj setWindow:nil];  /* { dg-warning \".TestsuiteObject. may not respond to .\\\\-setWindow:.\" } */\n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } .-1 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } .-2 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } .-3 } */\n-  [obj2 setWindow:nil]; /* { dg-warning \"multiple methods named .\\\\-setWindow:. found\" } */\n+       /* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+\n+[obj2 setWindow:nil]; /* { dg-warning \"multiple methods named .\\\\-setWindow:. found\" } */\n        /* { dg-message \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(TestsuiteObject \\\\*\\\\)wdw.\" \"\" { target *-*-* } Class1_setWindow } */\n        /* { dg-message \"also found .\\\\-\\\\(void\\\\)setWindow:\\\\(Class1 \\\\*\\\\)window.\" \"\" { target *-*-* } Class2_setWindow } */\n "}, {"sha": "65c0043e2e25458c7c1c8229c4ac649032438c88", "filename": "gcc/testsuite/obj-c++.dg/method-6.mm", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -8,11 +8,9 @@\n @class NotKnown;\n \n void foo(NotKnown *n) {\n-  [NotKnown new];         /* { dg-warning \".interface of class .NotKnown. not found\" } */\n-  [n nonexistent_method]; /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+  [NotKnown new];         /* { dg-warning \"'.interface' of class .NotKnown. not found\" } */\n+  [n nonexistent_method]; /* { dg-warning \"'.interface' of class .NotKnown. not found\" } */\n                           /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } .-1 } */\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "277a7e9e223e050357be0a29315e0d9839a745c4", "filename": "gcc/testsuite/obj-c++.dg/method-7.mm", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-7.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -11,12 +11,10 @@ void foo(UnderSpecified *u, NotAClass *n) {\n   [n nonexistent_method];    /* { dg-warning \"invalid receiver type\" } */\n        /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } .-1 } */\n   [NotAClass nonexistent_method]; /* { dg-error \".NotAClass. is not an Objective\\\\-C class name or alias\" } */\n-  [u nonexistent_method];    /* { dg-warning \".interface of class .UnderSpecified. not found\" } */\n+  [u nonexistent_method];    /* { dg-warning \"'.interface' of class .UnderSpecified. not found\" } */\n                              /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } .-1 } */\n-  [UnderSpecified nonexistent_method]; /* { dg-warning \".interface of class .UnderSpecified. not found\" } */\n+  [UnderSpecified nonexistent_method]; /* { dg-warning \"'.interface' of class .UnderSpecified. not found\" } */\n                                        /* { dg-warning \"no .\\\\+nonexistent_method. method found\" \"\" { target *-*-* } .-1 } */\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "787e25d67ffd3f5c21d1fd2778546175dc3b99b7", "filename": "gcc/testsuite/obj-c++.dg/method-9.mm", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-9.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -27,7 +27,4 @@ + (void) classMethod {                    /* If a class method is not found, the\n }\n @end\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n-\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "e458471ff2ce25bd473add5a67c1301ce07bd50d", "filename": "gcc/testsuite/obj-c++.dg/method-lookup-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-lookup-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-lookup-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-lookup-1.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -39,7 +39,7 @@ void test (Class x, Class <MyProtocol> y, id w, id <MyProtocol> z, NotKnown *a,\n \n   /* If a class is specified by name, the @interface must be available\n      to check what it responds to.  */\n-  [NotKnown classMethod]; /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+  [NotKnown classMethod]; /* { dg-warning \"'.interface' of class .NotKnown. not found\" } */\n \n \n   /* \"id w\" means that \"w\" responds to anything, both class and\n@@ -70,7 +70,7 @@ void test (Class x, Class <MyProtocol> y, id w, id <MyProtocol> z, NotKnown *a,\n      because they expect the compiler to do type-checking; the\n      @interface must be available to do this check, otherwise the\n      compiler does not know what \"a\" responds to.  */\n-  [a instanceMethod];  /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+  [a instanceMethod];  /* { dg-warning \"'.interface' of class .NotKnown. not found\" } */\n \n   /* But, if you cast it to \"id\", then you're disabling type-checking\n      and the warnings should go away.  */"}, {"sha": "2e753d1f8ba1baeefdbb4f0ab975065983db7666", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-4.mm", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-4.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -47,6 +47,4 @@ long foo(void) {\n   return receiver;\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "aa3082c9ded715d3fb4b062e9d623b3c818b402c", "filename": "gcc/testsuite/obj-c++.dg/protocol-qualifier-2.mm", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprotocol-qualifier-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprotocol-qualifier-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprotocol-qualifier-2.mm?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -25,7 +25,6 @@ void test1 (void)\n {\n   [object1 method]; /* Ok */\n   [object2 method]; /* { dg-warning \".MyClass. may not respond to ..method.\" } */\n-                    /* { dg-warning \"without a matching method\" \"\" { target *-*-* } .-1 } */\n-                    /* { dg-warning \"will be assumed to return\" \"\" { target *-*-* } .-2 } */\n-                    /* { dg-warning \"as arguments\" \"\" { target *-*-* } .-3 } */\n+\n+  /* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept '\\.\\.\\.' as arguments\" \"\" { target *-*-* } 0 } */\n }"}, {"sha": "0a3765f07fbcb3e54f261b5a33e464fa778abbc6", "filename": "gcc/testsuite/objc.dg/call-super-2.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -141,6 +141,4 @@ - (int) categ_instance_func2\n }\n @end\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "59c8f827615931211eabd5944bc63c6cbf39987b", "filename": "gcc/testsuite/objc.dg/class-protocol-1.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -436,6 +436,4 @@ int main ()\n   return(0);\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "e5d5a595e91c2a4081c3e86b987041e5c6affb58", "filename": "gcc/testsuite/objc.dg/desig-init-1.m", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -44,8 +44,4 @@ int main(void) {\n   return 0;\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n-\n-\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "69a6494e0482f2befe75c3c16f031ae5649cc941", "filename": "gcc/testsuite/objc.dg/exceptions-3.m", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-3.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -27,19 +27,19 @@ int test (id object)\n   int dummy = 0;\n \n   @try { @throw object; }\n-  @catch (int x)          /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (int x)          /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (intTypedef x)   /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (intTypedef x)   /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (int *x)         /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (int *x)         /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }  \n@@ -51,7 +51,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (id <MyProtocol> x) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (id <MyProtocol> x) /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -63,13 +63,13 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject <MyProtocol> *x)  /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (MyObject <MyProtocol> *x)  /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject x)     /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (MyObject x)     /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {                     /* { dg-error \"conversion to non-scalar type requested\" \"\" { target *-*-* } .-1 } */\n       dummy++;\n     }\n@@ -87,7 +87,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObjectTypedef <MyProtocol> *x) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (MyObjectTypedef <MyProtocol> *x) /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -99,7 +99,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (Class x)   /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (Class x)   /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }"}, {"sha": "bbdb741f40b55c9c68e721e4c3afeb9b94a4edb3", "filename": "gcc/testsuite/objc.dg/exceptions-4.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-4.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -44,7 +44,7 @@ int test (id object)\n       dummy++;\n     }\n   @catch (id <MyProtocol x) /* { dg-error \"expected ... before .x.\" } */\n-    {                       /* { dg-error \"@catch parameter cannot be protocol-qualified\" \"\" { target *-*-* } .-1 } */\n+    {                       /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" \"\" { target *-*-* } .-1 } */\n       dummy++;\n     }\n   @catch MyObject *x       /* { dg-error \"expected ... before .MyObject.\" } */"}, {"sha": "55ef0f340e69ad0b37dda495c2e0cf8bad59a703", "filename": "gcc/testsuite/objc.dg/exceptions-5.m", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-5.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -27,19 +27,19 @@ int test (id object)\n   int dummy = 0;\n \n   @try { @throw object; }\n-  @catch (int)          /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (int)          /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (intTypedef)   /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (intTypedef)   /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (int *)         /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (int *)         /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }  \n@@ -51,7 +51,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (id <MyProtocol>) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (id <MyProtocol>) /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -63,13 +63,13 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject <MyProtocol> *)  /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (MyObject <MyProtocol> *)  /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject)     /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (MyObject)     /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {                     /* { dg-error \"conversion to non-scalar type requested\" \"\" { target *-*-* } .-1 } */\n       dummy++;\n     }\n@@ -87,7 +87,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObjectTypedef <MyProtocol> *) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n+  @catch (MyObjectTypedef <MyProtocol> *) /* { dg-error \"'@catch' parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -99,7 +99,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (Class)   /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n+  @catch (Class)   /* { dg-error \"'@catch' parameter is not a known Objective-C class type\" } */\n     {\n       dummy++;\n     }"}, {"sha": "ae44a88e4360be3959abb5d56c44bd141214b4b7", "filename": "gcc/testsuite/objc.dg/exceptions-6.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-6.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -9,7 +9,7 @@\n void test (id object)\n {\n   @throw object;   /* Ok */\n-  @throw;          /* { dg-error \".@throw. .rethrow. used outside of a @catch block\" } */\n+  @throw;          /* { dg-error \".@throw. .rethrow. used outside of a '@catch' block\" } */\n   @throw (object); /* Ok.  */\n   @throw (id)0     /* { dg-error \"expected\" } */\n }"}, {"sha": "83280fb89f621c00d310c2c4e5db0c6b32296f86", "filename": "gcc/testsuite/objc.dg/method-19.m", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -8,11 +8,9 @@\n @class NotKnown;\n \n void foo(NotKnown *n) {\n-  [NotKnown new];         /* { dg-warning \".interface of class .NotKnown. not found\" } */\n-  [n nonexistent_method]; /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+  [NotKnown new];         /* { dg-warning \"'.interface' of class .NotKnown. not found\" } */\n+  [n nonexistent_method]; /* { dg-warning \"'.interface' of class .NotKnown. not found\" } */\n                           /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } .-1 } */\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept '\\.\\.\\.' as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "cae2d7ff6f7428b96078d25f34f131b6ffc86cfc", "filename": "gcc/testsuite/objc.dg/method-2.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-2.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -23,9 +23,7 @@ + (void) classMethod {                    /* If a class method is not found, the\n     [MyIntermediate rootInstanceMethod];  /* with the same name.                       */\n \n     [self instanceMethod];   /* { dg-warning \".MyDerived. may not respond to .\\\\+instanceMethod.\" } */\n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } .-1 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } .-2 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } .-3 } */\n+    /* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n     [MyDerived instanceMethod];   /* { dg-warning \".MyDerived. may not respond to .\\\\+instanceMethod.\" } */\n }\n @end"}, {"sha": "277a7e9e223e050357be0a29315e0d9839a745c4", "filename": "gcc/testsuite/objc.dg/method-5.m", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -11,12 +11,10 @@ void foo(UnderSpecified *u, NotAClass *n) {\n   [n nonexistent_method];    /* { dg-warning \"invalid receiver type\" } */\n        /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } .-1 } */\n   [NotAClass nonexistent_method]; /* { dg-error \".NotAClass. is not an Objective\\\\-C class name or alias\" } */\n-  [u nonexistent_method];    /* { dg-warning \".interface of class .UnderSpecified. not found\" } */\n+  [u nonexistent_method];    /* { dg-warning \"'.interface' of class .UnderSpecified. not found\" } */\n                              /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } .-1 } */\n-  [UnderSpecified nonexistent_method]; /* { dg-warning \".interface of class .UnderSpecified. not found\" } */\n+  [UnderSpecified nonexistent_method]; /* { dg-warning \"'.interface' of class .UnderSpecified. not found\" } */\n                                        /* { dg-warning \"no .\\\\+nonexistent_method. method found\" \"\" { target *-*-* } .-1 } */\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "3ff73e0e9ca3b8ba144060c9a31b1788030b6485", "filename": "gcc/testsuite/objc.dg/method-6.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -31,9 +31,7 @@ void foo(void) {\n        /* { dg-message \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } Derived_port_last } */\n \n   [receiver starboard];  /* { dg-warning \"no .\\\\+starboard. method found\" } */\n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } .-1 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } .-2 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } .-3 } */\n+  /* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n \n   [Class port];  /* { dg-error \".Class. is not an Objective\\\\-C class name or alias\" } */\n }"}, {"sha": "314e8abaf8931093e20d71d65cdcc6d6c7af9b75", "filename": "gcc/testsuite/objc.dg/method-7.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -18,9 +18,7 @@ id foo(void) {\n   TestsuiteObject *obj = [[TestsuiteObject alloc] init];\n   id obj2 = obj;\n   [obj setWindow:nil];  /* { dg-warning \".TestsuiteObject. may not respond to .\\\\-setWindow:.\" } */\n-  /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } .-1 } */\n-  /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } .-2 } */\n-  /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } .-3 } */\n+  /* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n   [obj2 setWindow:nil]; /* { dg-warning \"multiple methods named .\\\\-setWindow:. found\" } */\n   /* { dg-message \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(TestsuiteObject \\\\*\\\\)wdw.\" \"\" { target *-*-* } Class1_setWindow } */\n   /* { dg-message \"also found .\\\\-\\\\(void\\\\)setWindow:\\\\(Class1 \\\\*\\\\)window.\" \"\" { target *-*-* } Class2_setWindow } */"}, {"sha": "e458471ff2ce25bd473add5a67c1301ce07bd50d", "filename": "gcc/testsuite/objc.dg/method-lookup-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-lookup-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-lookup-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-lookup-1.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -39,7 +39,7 @@ void test (Class x, Class <MyProtocol> y, id w, id <MyProtocol> z, NotKnown *a,\n \n   /* If a class is specified by name, the @interface must be available\n      to check what it responds to.  */\n-  [NotKnown classMethod]; /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+  [NotKnown classMethod]; /* { dg-warning \"'.interface' of class .NotKnown. not found\" } */\n \n \n   /* \"id w\" means that \"w\" responds to anything, both class and\n@@ -70,7 +70,7 @@ void test (Class x, Class <MyProtocol> y, id w, id <MyProtocol> z, NotKnown *a,\n      because they expect the compiler to do type-checking; the\n      @interface must be available to do this check, otherwise the\n      compiler does not know what \"a\" responds to.  */\n-  [a instanceMethod];  /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+  [a instanceMethod];  /* { dg-warning \"'.interface' of class .NotKnown. not found\" } */\n \n   /* But, if you cast it to \"id\", then you're disabling type-checking\n      and the warnings should go away.  */"}, {"sha": "0f409fc69ed488d15006b05f7cfe306bb31b34b5", "filename": "gcc/testsuite/objc.dg/proto-hier-1.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-1.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -53,6 +53,4 @@ int foo(void) {\n   return 0;\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "9d1def5f9de8973b5dc122345cbafa485f33a39a", "filename": "gcc/testsuite/objc.dg/proto-lossage-4.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -49,6 +49,4 @@ long foo(void) {\n   return receiver;\n }\n \n-/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n-/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "33a6969a33d21e392c7612200bbdb2677468c46a", "filename": "gcc/testsuite/objc.dg/protocol-qualifier-2.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fprotocol-qualifier-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftestsuite%2Fobjc.dg%2Fprotocol-qualifier-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fprotocol-qualifier-2.m?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -25,7 +25,5 @@ void test1 (void)\n {\n   [object1 method]; /* Ok */\n   [object2 method]; /* { dg-warning \".MyClass. may not respond to ..method.\" } */\n-                    /* { dg-warning \"without a matching method\" \"\" { target *-*-* } .-1 } */\n-                    /* { dg-warning \"will be assumed to return\" \"\" { target *-*-* } .-2 } */\n-                    /* { dg-warning \"as arguments\" \"\" { target *-*-* } .-3 } */\n }\n+/* { dg-warning \"messages without a matching method signature will be assumed to return .id. and accept .\\.\\.\\.' as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "485000b54663bbf888d64bec493a129dd97943df", "filename": "gcc/tlink.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -484,9 +484,11 @@ recompile_files (void)\n \t the new file name already exists.  Therefore, we explicitly\n \t remove the old file first.  */\n       if (remove (f->key) == -1)\n-\tfatal_error (input_location, \"removing .rpo file: %m\");\n+\tfatal_error (input_location,\n+\t\t     \"removing repository file %qs: %m\", f->key);\n       if (rename (outname, f->key) == -1)\n-\tfatal_error (input_location, \"renaming .rpo file: %m\");\n+\tfatal_error (input_location, \"renaming repository file from \"\n+\t\t     \"%qs to %qs: %m\", outname, f->key);\n \n       if (!f->args)\n \t{"}, {"sha": "d300ac2ec894ee947156616e71796d55d9d04307", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -879,7 +879,7 @@ init_asm_output (const char *name)\n \t\t     asm_file_name);\n       if (asm_out_file == 0)\n \tfatal_error (UNKNOWN_LOCATION,\n-\t\t     \"can%'t open %qs for writing: %m\", asm_file_name);\n+\t\t     \"cannot open %qs for writing: %m\", asm_file_name);\n     }\n \n   if (!flag_syntax_only)\n@@ -1056,7 +1056,7 @@ open_auxiliary_file (const char *ext)\n   filename = concat (aux_base_name, \".\", ext, NULL);\n   file = fopen (filename, \"w\");\n   if (!file)\n-    fatal_error (input_location, \"can%'t open %s for writing: %m\", filename);\n+    fatal_error (input_location, \"cannot open %s for writing: %m\", filename);\n   free (filename);\n   return file;\n }\n@@ -1666,7 +1666,7 @@ process_options (void)\n       aux_info_file = fopen (aux_info_file_name, \"w\");\n       if (aux_info_file == 0)\n \tfatal_error (UNKNOWN_LOCATION,\n-\t\t     \"can%'t open %s: %m\", aux_info_file_name);\n+\t\t     \"cannot open %s: %m\", aux_info_file_name);\n     }\n \n   if (!targetm_common.have_named_sections)\n@@ -1737,7 +1737,7 @@ process_options (void)\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n \t\t  \"%<-fstack-check=%> and %<-fstack-clash_protection%> are \"\n-\t\t  \"mutually exclusive.  Disabling %<-fstack-check=%>\");\n+\t\t  \"mutually exclusive; disabling %<-fstack-check=%>\");\n       flag_stack_check = NO_STACK_CHECK;\n     }\n \n@@ -2180,7 +2180,7 @@ do_compile ()\n \t on the squared numbers.  */\n       if (mpfr_set_emin (2 * (min_exp - 1))\n \t  || mpfr_set_emax (2 * (max_exp + 1)))\n-\tsorry (\"mpfr not configured to handle all float modes\");\n+\tsorry (\"mpfr not configured to handle all floating modes\");\n \n       /* Set up the back-end if requested.  */\n       if (!no_backend)"}, {"sha": "d16f5f9cad18b815826691ffb2222471fac60192", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -754,10 +754,10 @@ diagnose_tm_1 (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n \t Either that or get the language spec to resurrect __tm_waiver.  */\n       if (d->block_flags & DIAG_TM_SAFE)\n \terror_at (gimple_location (stmt),\n-\t\t  \"asm not allowed in atomic transaction\");\n+\t\t  \"%<asm%> not allowed in atomic transaction\");\n       else if (d->func_flags & DIAG_TM_SAFE)\n \terror_at (gimple_location (stmt),\n-\t\t  \"asm not allowed in %<transaction_safe%> function\");\n+\t\t  \"%<asm%> not allowed in %<transaction_safe%> function\");\n       break;\n \n     case GIMPLE_TRANSACTION:\n@@ -4414,7 +4414,8 @@ ipa_tm_scan_irr_block (basic_block bb)\n \t    {\n \t      tree t = build1 (NOP_EXPR, void_type_node, size_zero_node);\n \t      SET_EXPR_LOCATION (t, gimple_location (stmt));\n-\t      error (\"%Kasm not allowed in %<transaction_safe%> function\", t);\n+\t      error (\"%K%<asm%> not allowed in %<transaction_safe%> function\",\n+\t\t     t);\n \t    }\n \t  return true;\n \n@@ -4788,7 +4789,7 @@ ipa_tm_diagnose_transaction (struct cgraph_node *node,\n \t      if (gimple_code (stmt) == GIMPLE_ASM)\n \t\t{\n \t\t  error_at (gimple_location (stmt),\n-\t\t\t    \"asm not allowed in atomic transaction\");\n+\t\t\t    \"%<asm%> not allowed in atomic transaction\");\n \t\t  continue;\n \t\t}\n "}, {"sha": "4655d7f80735aaf1f6d14d9ead210fdce84e9e94", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 122, "deletions": 89, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -2961,12 +2961,12 @@ verify_address (tree t, bool verify_addressable)\n \n   if (old_constant != new_constant)\n     {\n-      error (\"constant not recomputed when ADDR_EXPR changed\");\n+      error (\"constant not recomputed when %<ADDR_EXPR%> changed\");\n       return true;\n     }\n   if (old_side_effects != new_side_effects)\n     {\n-      error (\"side effects not recomputed when ADDR_EXPR changed\");\n+      error (\"side effects not recomputed when %<ADDR_EXPR%> changed\");\n       return true;\n     }\n \n@@ -2981,13 +2981,13 @@ verify_address (tree t, bool verify_addressable)\n \n   if (DECL_GIMPLE_REG_P (base))\n     {\n-      error (\"DECL_GIMPLE_REG_P set on a variable with address taken\");\n+      error (\"%<DECL_GIMPLE_REG_P%> set on a variable with address taken\");\n       return true;\n     }\n \n   if (verify_addressable && !TREE_ADDRESSABLE (base))\n     {\n-      error (\"address taken, but ADDRESSABLE bit not set\");\n+      error (\"address taken but %<TREE_ADDRESSABLE%> bit not set\");\n       return true;\n     }\n \n@@ -3036,14 +3036,16 @@ verify_types_in_gimple_min_lval (tree expr)\n static bool\n verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n {\n+  const char *code_name = get_tree_code_name (TREE_CODE (expr));\n+\n   if (TREE_CODE (expr) == REALPART_EXPR\n       || TREE_CODE (expr) == IMAGPART_EXPR\n       || TREE_CODE (expr) == BIT_FIELD_REF)\n     {\n       tree op = TREE_OPERAND (expr, 0);\n       if (!is_gimple_reg_type (TREE_TYPE (expr)))\n \t{\n-\t  error (\"non-scalar BIT_FIELD_REF, IMAGPART_EXPR or REALPART_EXPR\");\n+\t  error (\"non-scalar %qs\", code_name);\n \t  return true;\n \t}\n \n@@ -3057,14 +3059,14 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t      || !types_compatible_p (bitsizetype, TREE_TYPE (t1))\n \t      || !types_compatible_p (bitsizetype, TREE_TYPE (t2)))\n \t    {\n-\t      error (\"invalid position or size operand to BIT_FIELD_REF\");\n+\t      error (\"invalid position or size operand to %qs\", code_name);\n \t      return true;\n \t    }\n \t  if (INTEGRAL_TYPE_P (TREE_TYPE (expr))\n \t      && maybe_ne (TYPE_PRECISION (TREE_TYPE (expr)), size))\n \t    {\n \t      error (\"integral result type precision does not match \"\n-\t\t     \"field size of BIT_FIELD_REF\");\n+\t\t     \"field size of %qs\", code_name);\n \t      return true;\n \t    }\n \t  else if (!INTEGRAL_TYPE_P (TREE_TYPE (expr))\n@@ -3073,21 +3075,22 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t\t\t\tsize))\n \t    {\n \t      error (\"mode size of non-integral result does not \"\n-\t\t     \"match field size of BIT_FIELD_REF\");\n+\t\t     \"match field size of %qs\",\n+\t\t     code_name);\n \t      return true;\n \t    }\n \t  if (INTEGRAL_TYPE_P (TREE_TYPE (op))\n \t      && !type_has_mode_precision_p (TREE_TYPE (op)))\n \t    {\n-\t      error (\"BIT_FIELD_REF of non-mode-precision operand\");\n+\t      error (\"%qs of non-mode-precision operand\", code_name);\n \t      return true;\n \t    }\n \t  if (!AGGREGATE_TYPE_P (TREE_TYPE (op))\n \t      && maybe_gt (size + bitpos,\n \t\t\t   tree_to_poly_uint64 (TYPE_SIZE (TREE_TYPE (op)))))\n \t    {\n \t      error (\"position plus size exceeds size of referenced object in \"\n-\t\t     \"BIT_FIELD_REF\");\n+\t\t     \"%qs\", code_name);\n \t      return true;\n \t    }\n \t}\n@@ -3097,7 +3100,7 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t  && !useless_type_conversion_p (TREE_TYPE (expr),\n \t\t\t\t\t TREE_TYPE (TREE_TYPE (op))))\n \t{\n-\t  error (\"type mismatch in real/imagpart reference\");\n+\t  error (\"type mismatch in %qs reference\", code_name);\n \t  debug_generic_stmt (TREE_TYPE (expr));\n \t  debug_generic_stmt (TREE_TYPE (TREE_TYPE (op)));\n \t  return true;\n@@ -3107,11 +3110,13 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \n   while (handled_component_p (expr))\n     {\n+      code_name = get_tree_code_name (TREE_CODE (expr));\n+\n       if (TREE_CODE (expr) == REALPART_EXPR\n \t  || TREE_CODE (expr) == IMAGPART_EXPR\n \t  || TREE_CODE (expr) == BIT_FIELD_REF)\n \t{\n-\t  error (\"non-top-level BIT_FIELD_REF, IMAGPART_EXPR or REALPART_EXPR\");\n+\t  error (\"non-top-level %qs\", code_name);\n \t  return true;\n \t}\n \n@@ -3126,7 +3131,7 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t      || (TREE_OPERAND (expr, 3)\n \t\t  && !is_gimple_val (TREE_OPERAND (expr, 3))))\n \t    {\n-\t      error (\"invalid operands to array reference\");\n+\t      error (\"invalid operands to %qs\", code_name);\n \t      debug_generic_stmt (expr);\n \t      return true;\n \t    }\n@@ -3137,7 +3142,7 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t  && !useless_type_conversion_p (TREE_TYPE (expr),\n \t\t\t\t\t TREE_TYPE (TREE_TYPE (op))))\n \t{\n-\t  error (\"type mismatch in array reference\");\n+\t  error (\"type mismatch in %qs\", code_name);\n \t  debug_generic_stmt (TREE_TYPE (expr));\n \t  debug_generic_stmt (TREE_TYPE (TREE_TYPE (op)));\n \t  return true;\n@@ -3146,7 +3151,7 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t  && !useless_type_conversion_p (TREE_TYPE (TREE_TYPE (expr)),\n \t\t\t\t\t TREE_TYPE (TREE_TYPE (op))))\n \t{\n-\t  error (\"type mismatch in array range reference\");\n+\t  error (\"type mismatch in %qs\", code_name);\n \t  debug_generic_stmt (TREE_TYPE (TREE_TYPE (expr)));\n \t  debug_generic_stmt (TREE_TYPE (TREE_TYPE (op)));\n \t  return true;\n@@ -3157,13 +3162,13 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t  if (TREE_OPERAND (expr, 2)\n \t      && !is_gimple_val (TREE_OPERAND (expr, 2)))\n \t    {\n-\t      error (\"invalid COMPONENT_REF offset operator\");\n+\t      error (\"invalid %qs offset operator\", code_name);\n \t      return true;\n \t    }\n \t  if (!useless_type_conversion_p (TREE_TYPE (expr),\n \t\t\t\t\t  TREE_TYPE (TREE_OPERAND (expr, 1))))\n \t    {\n-\t      error (\"type mismatch in component reference\");\n+\t      error (\"type mismatch in %qs\", code_name);\n \t      debug_generic_stmt (TREE_TYPE (expr));\n \t      debug_generic_stmt (TREE_TYPE (TREE_OPERAND (expr, 1)));\n \t      return true;\n@@ -3181,14 +3186,16 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t      && (TREE_CODE (op) == SSA_NAME\n \t\t  || is_gimple_min_invariant (op)))\n \t    {\n-\t      error (\"conversion of an SSA_NAME on the left hand side\");\n+\t      error (\"conversion of %qs on the left hand side of %qs\",\n+\t\t     get_tree_code_name (TREE_CODE (op)), code_name);\n \t      debug_generic_stmt (expr);\n \t      return true;\n \t    }\n \t  else if (TREE_CODE (op) == SSA_NAME\n \t\t   && TYPE_SIZE (TREE_TYPE (expr)) != TYPE_SIZE (TREE_TYPE (op)))\n \t    {\n-\t      error (\"conversion of register to a different size\");\n+\t      error (\"conversion of register to a different size in %qs\",\n+\t\t     code_name);\n \t      debug_generic_stmt (expr);\n \t      return true;\n \t    }\n@@ -3199,20 +3206,22 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n       expr = op;\n     }\n \n+  code_name = get_tree_code_name (TREE_CODE (expr));\n+\n   if (TREE_CODE (expr) == MEM_REF)\n     {\n       if (!is_gimple_mem_ref_addr (TREE_OPERAND (expr, 0))\n \t  || (TREE_CODE (TREE_OPERAND (expr, 0)) == ADDR_EXPR\n \t      && verify_address (TREE_OPERAND (expr, 0), false)))\n \t{\n-\t  error (\"invalid address operand in MEM_REF\");\n+\t  error (\"invalid address operand in %qs\", code_name);\n \t  debug_generic_stmt (expr);\n \t  return true;\n \t}\n       if (!poly_int_tree_p (TREE_OPERAND (expr, 1))\n \t  || !POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (expr, 1))))\n \t{\n-\t  error (\"invalid offset operand in MEM_REF\");\n+\t  error (\"invalid offset operand in %qs\", code_name);\n \t  debug_generic_stmt (expr);\n \t  return true;\n \t}\n@@ -3224,21 +3233,21 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t  || (TREE_CODE (TMR_BASE (expr)) == ADDR_EXPR\n \t      && verify_address (TMR_BASE (expr), false)))\n \t{\n-\t  error (\"invalid address operand in TARGET_MEM_REF\");\n+\t  error (\"invalid address operand in %qs\", code_name);\n \t  return true;\n \t}\n       if (!TMR_OFFSET (expr)\n \t  || !poly_int_tree_p (TMR_OFFSET (expr))\n \t  || !POINTER_TYPE_P (TREE_TYPE (TMR_OFFSET (expr))))\n \t{\n-\t  error (\"invalid offset operand in TARGET_MEM_REF\");\n+\t  error (\"invalid offset operand in %qs\", code_name);\n \t  debug_generic_stmt (expr);\n \t  return true;\n \t}\n     }\n   else if (TREE_CODE (expr) == INDIRECT_REF)\n     {\n-      error (\"INDIRECT_REF in gimple IL\");\n+      error (\"%qs in gimple IL\", code_name);\n       debug_generic_stmt (expr);\n       return true;\n     }\n@@ -3345,7 +3354,7 @@ verify_gimple_call (gcall *stmt)\n       && gimple_call_noreturn_p (stmt)\n       && should_remove_lhs_p (lhs))\n     {\n-      error (\"LHS in noreturn call\");\n+      error (\"LHS in %<noreturn%> call\");\n       return true;\n     }\n \n@@ -3536,6 +3545,8 @@ verify_gimple_assign_unary (gassign *stmt)\n       return true;\n     }\n \n+  const char* const code_name = get_tree_code_name (rhs_code);\n+\n   /* First handle conversions.  */\n   switch (rhs_code)\n     {\n@@ -3663,7 +3674,7 @@ verify_gimple_assign_unary (gassign *stmt)\n \t  || maybe_ne (2 * TYPE_VECTOR_SUBPARTS (lhs_type),\n \t\t       TYPE_VECTOR_SUBPARTS (rhs1_type)))\n \t{\n-\t  error (\"type mismatch in vector unpack expression\");\n+\t  error (\"type mismatch in %qs expression\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  return true;\n@@ -3685,7 +3696,7 @@ verify_gimple_assign_unary (gassign *stmt)\n \t  || TYPE_UNSIGNED (rhs1_type)\n \t  || element_precision (lhs_type) != element_precision (rhs1_type))\n \t{\n-\t  error (\"invalid types for ABSU_EXPR\");\n+\t  error (\"invalid types for %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  return true;\n@@ -3696,7 +3707,7 @@ verify_gimple_assign_unary (gassign *stmt)\n       if (TREE_CODE (lhs_type) != VECTOR_TYPE\n \t  || !useless_type_conversion_p (TREE_TYPE (lhs_type), rhs1_type))\n \t{\n-\t  error (\"vec_duplicate should be from a scalar to a like vector\");\n+\t  error (\"%qs should be from a scalar to a like vector\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  return true;\n@@ -3746,6 +3757,8 @@ verify_gimple_assign_binary (gassign *stmt)\n       return true;\n     }\n \n+  const char* const code_name = get_tree_code_name (rhs_code);\n+\n   /* First handle operations that involve different types.  */\n   switch (rhs_code)\n     {\n@@ -3757,7 +3770,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t    || !(INTEGRAL_TYPE_P (rhs2_type)\n \t         || SCALAR_FLOAT_TYPE_P (rhs2_type)))\n \t  {\n-\t    error (\"type mismatch in complex expression\");\n+\t    error (\"type mismatch in %qs\", code_name);\n \t    debug_generic_expr (lhs_type);\n \t    debug_generic_expr (rhs1_type);\n \t    debug_generic_expr (rhs2_type);\n@@ -3786,7 +3799,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t\t     && INTEGRAL_TYPE_P (TREE_TYPE (rhs2_type))))\n \t    || !useless_type_conversion_p (lhs_type, rhs1_type))\n \t  {\n-\t    error (\"type mismatch in shift expression\");\n+\t    error (\"type mismatch in %qs\", code_name);\n \t    debug_generic_expr (lhs_type);\n \t    debug_generic_expr (rhs1_type);\n \t    debug_generic_expr (rhs2_type);\n@@ -3803,7 +3816,7 @@ verify_gimple_assign_binary (gassign *stmt)\n             || TREE_CODE (rhs2) != INTEGER_CST\n             || (2 * TYPE_PRECISION (rhs1_type) > TYPE_PRECISION (lhs_type)))\n           {\n-            error (\"type mismatch in widening vector shift expression\");\n+\t    error (\"type mismatch in %qs\", code_name);\n             debug_generic_expr (lhs_type);\n             debug_generic_expr (rhs1_type);\n             debug_generic_expr (rhs2_type);\n@@ -3824,7 +3837,7 @@ verify_gimple_assign_binary (gassign *stmt)\n             || (2 * TYPE_PRECISION (TREE_TYPE (rhs1_type))\n                 > TYPE_PRECISION (TREE_TYPE (lhs_type))))\n           {\n-            error (\"type mismatch in widening vector shift expression\");\n+\t    error (\"type mismatch in %qs\", code_name);\n             debug_generic_expr (lhs_type);\n             debug_generic_expr (rhs1_type);\n             debug_generic_expr (rhs2_type);\n@@ -3845,7 +3858,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t    if (TREE_CODE (rhs1_type) != VECTOR_TYPE\n \t\t|| TREE_CODE (rhs2_type) != VECTOR_TYPE)\n \t      {\n-\t\terror (\"invalid non-vector operands to vector valued plus\");\n+\t\terror (\"invalid non-vector operands to %qs\", code_name);\n \t\treturn true;\n \t      }\n \t    lhs_etype = TREE_TYPE (lhs_type);\n@@ -3856,7 +3869,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t    || POINTER_TYPE_P (rhs1_etype)\n \t    || POINTER_TYPE_P (rhs2_etype))\n \t  {\n-\t    error (\"invalid (pointer) operands to plus/minus\");\n+\t    error (\"invalid (pointer) operands %qs\", code_name);\n \t    return true;\n \t  }\n \n@@ -3870,7 +3883,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t    || !useless_type_conversion_p (lhs_type, rhs1_type)\n \t    || !ptrofftype_p (rhs2_type))\n \t  {\n-\t    error (\"type mismatch in pointer plus expression\");\n+\t    error (\"type mismatch in %qs\", code_name);\n \t    debug_generic_stmt (lhs_type);\n \t    debug_generic_stmt (rhs1_type);\n \t    debug_generic_stmt (rhs2_type);\n@@ -3891,7 +3904,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t    || TYPE_UNSIGNED (lhs_type)\n \t    || TYPE_PRECISION (lhs_type) != TYPE_PRECISION (rhs1_type))\n \t  {\n-\t    error (\"type mismatch in pointer diff expression\");\n+\t    error (\"type mismatch in %qs\", code_name);\n \t    debug_generic_stmt (lhs_type);\n \t    debug_generic_stmt (rhs1_type);\n \t    debug_generic_stmt (rhs2_type);\n@@ -3945,7 +3958,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t    || maybe_lt (GET_MODE_SIZE (element_mode (rhs2_type)),\n \t\t\t 2 * GET_MODE_SIZE (element_mode (rhs1_type))))\n           {\n-            error (\"type mismatch in widening sum reduction\");\n+\t    error (\"type mismatch in %qs\", code_name);\n             debug_generic_expr (lhs_type);\n             debug_generic_expr (rhs1_type);\n             debug_generic_expr (rhs2_type);\n@@ -3965,7 +3978,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t    || maybe_ne (GET_MODE_SIZE (element_mode (lhs_type)),\n \t\t\t 2 * GET_MODE_SIZE (element_mode (rhs1_type))))\n           {\n-            error (\"type mismatch in vector widening multiplication\");\n+\t    error (\"type mismatch in %qs\", code_name);\n             debug_generic_expr (lhs_type);\n             debug_generic_expr (rhs1_type);\n             debug_generic_expr (rhs2_type);\n@@ -4001,7 +4014,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t    || maybe_ne (2 * TYPE_VECTOR_SUBPARTS (rhs1_type),\n \t\t\t TYPE_VECTOR_SUBPARTS (lhs_type)))\n           {\n-            error (\"type mismatch in vector pack expression\");\n+\t    error (\"type mismatch in %qs\", code_name);\n             debug_generic_expr (lhs_type);\n             debug_generic_expr (rhs1_type);\n             debug_generic_expr (rhs2_type);\n@@ -4022,7 +4035,7 @@ verify_gimple_assign_binary (gassign *stmt)\n \t  || maybe_ne (2 * TYPE_VECTOR_SUBPARTS (rhs1_type),\n \t\t       TYPE_VECTOR_SUBPARTS (lhs_type)))\n \t{\n-\t  error (\"type mismatch in vector pack expression\");\n+\t  error (\"type mismatch in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -4054,15 +4067,15 @@ verify_gimple_assign_binary (gassign *stmt)\n     case VEC_SERIES_EXPR:\n       if (!useless_type_conversion_p (rhs1_type, rhs2_type))\n \t{\n-\t  error (\"type mismatch in series expression\");\n+\t  error (\"type mismatch in %qs\", code_name);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n \t  return true;\n \t}\n       if (TREE_CODE (lhs_type) != VECTOR_TYPE\n \t  || !useless_type_conversion_p (TREE_TYPE (lhs_type), rhs1_type))\n \t{\n-\t  error (\"vector type expected in series expression\");\n+\t  error (\"vector type expected in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  return true;\n \t}\n@@ -4116,6 +4129,8 @@ verify_gimple_assign_ternary (gassign *stmt)\n       return true;\n     }\n \n+  const char* const code_name = get_tree_code_name (rhs_code);\n+\n   /* First handle operations that involve different types.  */\n   switch (rhs_code)\n     {\n@@ -4128,7 +4143,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  || 2 * TYPE_PRECISION (rhs1_type) > TYPE_PRECISION (lhs_type)\n \t  || TYPE_PRECISION (rhs1_type) != TYPE_PRECISION (rhs2_type))\n \t{\n-\t  error (\"type mismatch in widening multiply-accumulate expression\");\n+\t  error (\"type mismatch in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -4142,9 +4157,9 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  || maybe_ne (TYPE_VECTOR_SUBPARTS (rhs1_type),\n \t\t       TYPE_VECTOR_SUBPARTS (lhs_type)))\n \t{\n-\t  error (\"the first argument of a VEC_COND_EXPR must be of a \"\n+\t  error (\"the first argument of a %qs must be of a \"\n \t\t \"boolean vector type of the same number of elements \"\n-\t\t \"as the result\");\n+\t\t \"as the result\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  return true;\n@@ -4160,7 +4175,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n       if (!useless_type_conversion_p (lhs_type, rhs2_type)\n \t  || !useless_type_conversion_p (lhs_type, rhs3_type))\n \t{\n-\t  error (\"type mismatch in conditional expression\");\n+\t  error (\"type mismatch in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs2_type);\n \t  debug_generic_expr (rhs3_type);\n@@ -4172,7 +4187,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n       if (!useless_type_conversion_p (lhs_type, rhs1_type)\n \t  || !useless_type_conversion_p (lhs_type, rhs2_type))\n \t{\n-\t  error (\"type mismatch in vector permute expression\");\n+\t  error (\"type mismatch in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -4184,7 +4199,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  || TREE_CODE (rhs2_type) != VECTOR_TYPE\n \t  || TREE_CODE (rhs3_type) != VECTOR_TYPE)\n \t{\n-\t  error (\"vector types expected in vector permute expression\");\n+\t  error (\"vector types expected in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -4199,8 +4214,8 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  || maybe_ne (TYPE_VECTOR_SUBPARTS (rhs3_type),\n \t\t       TYPE_VECTOR_SUBPARTS (lhs_type)))\n \t{\n-\t  error (\"vectors with different element number found \"\n-\t\t \"in vector permute expression\");\n+\t  error (\"vectors with different element number found in %qs\",\n+\t\t code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -4215,7 +4230,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t\t  != GET_MODE_BITSIZE (SCALAR_TYPE_MODE\n \t\t\t\t       (TREE_TYPE (rhs1_type))))))\n \t{\n-\t  error (\"invalid mask type in vector permute expression\");\n+\t  error (\"invalid mask type in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -4231,7 +4246,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  || 2 * GET_MODE_UNIT_BITSIZE (TYPE_MODE (TREE_TYPE (rhs1_type)))\n \t       > GET_MODE_UNIT_BITSIZE (TYPE_MODE (TREE_TYPE (lhs_type))))\n \t{\n-\t  error (\"type mismatch in sad expression\");\n+\t  error (\"type mismatch in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -4243,7 +4258,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  || TREE_CODE (rhs2_type) != VECTOR_TYPE\n \t  || TREE_CODE (rhs3_type) != VECTOR_TYPE)\n \t{\n-\t  error (\"vector types expected in sad expression\");\n+\t  error (\"vector types expected in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -4256,7 +4271,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n     case BIT_INSERT_EXPR:\n       if (! useless_type_conversion_p (lhs_type, rhs1_type))\n \t{\n-\t  error (\"type mismatch in BIT_INSERT_EXPR\");\n+\t  error (\"type mismatch in %qs\", code_name);\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  return true;\n@@ -4275,7 +4290,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t\t\t\tTYPE_VECTOR_SUBPARTS (rhs2_type))\n \t\t && multiple_of_p (bitsizetype, rhs3, TYPE_SIZE (rhs2_type)))))\n \t{\n-\t  error (\"not allowed type combination in BIT_INSERT_EXPR\");\n+\t  error (\"not allowed type combination in %qs\", code_name);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n \t  return true;\n@@ -4284,13 +4299,13 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  || ! types_compatible_p (bitsizetype, TREE_TYPE (rhs3))\n \t  || ! tree_fits_uhwi_p (TYPE_SIZE (rhs2_type)))\n \t{\n-\t  error (\"invalid position or size in BIT_INSERT_EXPR\");\n+\t  error (\"invalid position or size in %qs\", code_name);\n \t  return true;\n \t}\n       if (INTEGRAL_TYPE_P (rhs1_type)\n \t  && !type_has_mode_precision_p (rhs1_type))\n \t{\n-\t  error (\"BIT_INSERT_EXPR into non-mode-precision operand\");\n+\t  error (\"%qs into non-mode-precision operand\", code_name);\n \t  return true;\n \t}\n       if (INTEGRAL_TYPE_P (rhs1_type))\n@@ -4300,7 +4315,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t      || (bitpos + TYPE_PRECISION (rhs2_type)\n \t\t  > TYPE_PRECISION (rhs1_type)))\n \t    {\n-\t      error (\"insertion out of range in BIT_INSERT_EXPR\");\n+\t      error (\"insertion out of range in %qs\", code_name);\n \t      return true;\n \t    }\n \t}\n@@ -4310,7 +4325,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  unsigned HOST_WIDE_INT bitsize = tree_to_uhwi (TYPE_SIZE (rhs2_type));\n \t  if (bitpos % bitsize != 0)\n \t    {\n-\t      error (\"vector insertion not at element boundary\");\n+\t      error (\"%qs not at element boundary\", code_name);\n \t      return true;\n \t    }\n \t}\n@@ -4329,7 +4344,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t    || maybe_lt (GET_MODE_SIZE (element_mode (rhs3_type)),\n \t\t\t 2 * GET_MODE_SIZE (element_mode (rhs1_type))))\n           {\n-            error (\"type mismatch in dot product reduction\");\n+\t    error (\"type mismatch in %qs\", code_name);\n             debug_generic_expr (lhs_type);\n             debug_generic_expr (rhs1_type);\n             debug_generic_expr (rhs2_type);\n@@ -4361,9 +4376,11 @@ verify_gimple_assign_single (gassign *stmt)\n   tree rhs1_type = TREE_TYPE (rhs1);\n   bool res = false;\n \n+  const char* const code_name = get_tree_code_name (rhs_code);\n+\n   if (!useless_type_conversion_p (lhs_type, rhs1_type))\n     {\n-      error (\"non-trivial conversion at assignment\");\n+      error (\"non-trivial conversion in %qs\", code_name);\n       debug_generic_expr (lhs_type);\n       debug_generic_expr (rhs1_type);\n       return true;\n@@ -4372,7 +4389,8 @@ verify_gimple_assign_single (gassign *stmt)\n   if (gimple_clobber_p (stmt)\n       && !(DECL_P (lhs) || TREE_CODE (lhs) == MEM_REF))\n     {\n-      error (\"non-decl/MEM_REF LHS in clobber statement\");\n+      error (\"%qs LHS in clobber statement\",\n+\t     get_tree_code_name (TREE_CODE (lhs)));\n       debug_generic_expr (lhs);\n       return true;\n     }\n@@ -4390,7 +4408,7 @@ verify_gimple_assign_single (gassign *stmt)\n \ttree op = TREE_OPERAND (rhs1, 0);\n \tif (!is_gimple_addressable (op))\n \t  {\n-\t    error (\"invalid operand in unary expression\");\n+\t    error (\"invalid operand in %qs\", code_name);\n \t    return true;\n \t  }\n \n@@ -4404,7 +4422,7 @@ verify_gimple_assign_single (gassign *stmt)\n \t    && !one_pointer_to_useless_type_conversion_p (TREE_TYPE (rhs1),\n \t\t\t\t\t\t\t  TREE_TYPE (op)))\n \t  {\n-\t    error (\"type mismatch in address expression\");\n+\t    error (\"type mismatch in %qs\", code_name);\n \t    debug_generic_stmt (TREE_TYPE (rhs1));\n \t    debug_generic_stmt (TREE_TYPE (op));\n \t    return true;\n@@ -4416,7 +4434,7 @@ verify_gimple_assign_single (gassign *stmt)\n \n     /* tcc_reference  */\n     case INDIRECT_REF:\n-      error (\"INDIRECT_REF in gimple IL\");\n+      error (\"%qs in gimple IL\", code_name);\n       return true;\n \n     case COMPONENT_REF:\n@@ -4431,7 +4449,7 @@ verify_gimple_assign_single (gassign *stmt)\n       if (!is_gimple_reg (lhs)\n \t  && is_gimple_reg_type (TREE_TYPE (lhs)))\n \t{\n-\t  error (\"invalid rhs for gimple memory store\");\n+\t  error (\"invalid RHS for gimple memory store: %qs\", code_name);\n \t  debug_generic_stmt (lhs);\n \t  debug_generic_stmt (rhs1);\n \t  return true;\n@@ -4457,7 +4475,7 @@ verify_gimple_assign_single (gassign *stmt)\n \t  && !is_gimple_reg (rhs1)\n \t  && is_gimple_reg_type (TREE_TYPE (lhs)))\n \t{\n-\t  error (\"invalid rhs for gimple memory store\");\n+\t  error (\"invalid RHS for gimple memory store: %qs\", code_name);\n \t  debug_generic_stmt (lhs);\n \t  debug_generic_stmt (rhs1);\n \t  return true;\n@@ -4491,32 +4509,34 @@ verify_gimple_assign_single (gassign *stmt)\n \t\t      if (!useless_type_conversion_p (TREE_TYPE (rhs1_type),\n \t\t\t\t\t\t      TREE_TYPE (elt_t)))\n \t\t\t{\n-\t\t\t  error (\"incorrect type of vector CONSTRUCTOR\"\n-\t\t\t\t \" elements\");\n+\t\t\t  error (\"incorrect type of vector %qs elements\",\n+\t\t\t\t code_name);\n \t\t\t  debug_generic_stmt (rhs1);\n \t\t\t  return true;\n \t\t\t}\n \t\t      else if (maybe_ne (CONSTRUCTOR_NELTS (rhs1)\n \t\t\t\t\t * TYPE_VECTOR_SUBPARTS (elt_t),\n \t\t\t\t\t TYPE_VECTOR_SUBPARTS (rhs1_type)))\n \t\t\t{\n-\t\t\t  error (\"incorrect number of vector CONSTRUCTOR\"\n-\t\t\t\t \" elements\");\n+\t\t\t  error (\"incorrect number of vector %qs elements\",\n+\t\t\t\t code_name);\n \t\t\t  debug_generic_stmt (rhs1);\n \t\t\t  return true;\n \t\t\t}\n \t\t    }\n \t\t  else if (!useless_type_conversion_p (TREE_TYPE (rhs1_type),\n \t\t\t\t\t\t       elt_t))\n \t\t    {\n-\t\t      error (\"incorrect type of vector CONSTRUCTOR elements\");\n+\t\t      error (\"incorrect type of vector %qs elements\",\n+\t\t\t     code_name);\n \t\t      debug_generic_stmt (rhs1);\n \t\t      return true;\n \t\t    }\n \t\t  else if (maybe_gt (CONSTRUCTOR_NELTS (rhs1),\n \t\t\t\t     TYPE_VECTOR_SUBPARTS (rhs1_type)))\n \t\t    {\n-\t\t      error (\"incorrect number of vector CONSTRUCTOR elements\");\n+\t\t      error (\"incorrect number of vector %qs elements\",\n+\t\t\t     code_name);\n \t\t      debug_generic_stmt (rhs1);\n \t\t      return true;\n \t\t    }\n@@ -4532,21 +4552,23 @@ verify_gimple_assign_single (gassign *stmt)\n \t\t      || TREE_CODE (elt_i) != INTEGER_CST\n \t\t      || compare_tree_int (elt_i, i) != 0))\n \t\t{\n-\t\t  error (\"vector CONSTRUCTOR with non-NULL element index\");\n+\t\t  error (\"vector %qs with non-NULL element index\",\n+\t\t\t code_name);\n \t\t  debug_generic_stmt (rhs1);\n \t\t  return true;\n \t\t}\n \t      if (!is_gimple_val (elt_v))\n \t\t{\n-\t\t  error (\"vector CONSTRUCTOR element is not a GIMPLE value\");\n+\t\t  error (\"vector %qs element is not a GIMPLE value\",\n+\t\t\t code_name);\n \t\t  debug_generic_stmt (rhs1);\n \t\t  return true;\n \t\t}\n \t    }\n \t}\n       else if (CONSTRUCTOR_NELTS (rhs1) != 0)\n \t{\n-\t  error (\"non-vector CONSTRUCTOR with elements\");\n+\t  error (\"non-vector %qs with elements\", code_name);\n \t  debug_generic_stmt (rhs1);\n \t  return true;\n \t}\n@@ -4557,7 +4579,7 @@ verify_gimple_assign_single (gassign *stmt)\n       rhs1 = fold (ASSERT_EXPR_COND (rhs1));\n       if (rhs1 == boolean_false_node)\n \t{\n-\t  error (\"ASSERT_EXPR with an always-false condition\");\n+\t  error (\"%qs with an always-false condition\", code_name);\n \t  debug_generic_stmt (rhs1);\n \t  return true;\n \t}\n@@ -4704,7 +4726,7 @@ verify_gimple_switch (gswitch *stmt)\n \n       if (CASE_CHAIN (elt))\n \t{\n-\t  error (\"invalid CASE_CHAIN\");\n+\t  error (\"invalid %<CASE_CHAIN%>\");\n \t  debug_generic_expr (elt);\n \t  return true;\n \t}\n@@ -4798,7 +4820,7 @@ verify_gimple_label (glabel *stmt)\n       && (uid == -1\n \t  || (*label_to_block_map_for_fn (cfun))[uid] != gimple_bb (stmt)))\n     {\n-      error (\"incorrect entry in label_to_block_map\");\n+      error (\"incorrect entry in %<label_to_block_map%>\");\n       err |= true;\n     }\n \n@@ -4915,7 +4937,7 @@ verify_gimple_phi (gphi *phi)\n \n   if (!phi_result)\n     {\n-      error (\"invalid PHI result\");\n+      error (\"invalid %<PHI%> result\");\n       return true;\n     }\n \n@@ -4924,7 +4946,7 @@ verify_gimple_phi (gphi *phi)\n       || (virtual_p\n \t  && SSA_NAME_VAR (phi_result) != gimple_vop (cfun)))\n     {\n-      error (\"invalid PHI result\");\n+      error (\"invalid %<PHI%> result\");\n       err = true;\n     }\n \n@@ -4934,7 +4956,7 @@ verify_gimple_phi (gphi *phi)\n \n       if (!t)\n \t{\n-\t  error (\"missing PHI def\");\n+\t  error (\"missing %<PHI%> def\");\n \t  err |= true;\n \t  continue;\n \t}\n@@ -4948,14 +4970,14 @@ verify_gimple_phi (gphi *phi)\n \t       || (!virtual_p\n \t\t   && !is_gimple_val (t)))\n \t{\n-\t  error (\"invalid PHI argument\");\n+\t  error (\"invalid %<PHI%> argument\");\n \t  debug_generic_expr (t);\n \t  err |= true;\n \t}\n #ifdef ENABLE_TYPES_CHECKING\n       if (!useless_type_conversion_p (TREE_TYPE (phi_result), TREE_TYPE (t)))\n \t{\n-\t  error (\"incompatible types in PHI argument %u\", i);\n+\t  error (\"incompatible types in %<PHI%> argument %u\", i);\n \t  debug_generic_stmt (TREE_TYPE (phi_result));\n \t  debug_generic_stmt (TREE_TYPE (t));\n \t  err |= true;\n@@ -5053,7 +5075,7 @@ verify_gimple_in_seq (gimple_seq stmts)\n {\n   timevar_push (TV_TREE_STMT_VERIFY);\n   if (verify_gimple_in_seq_2 (stmts))\n-    internal_error (\"verify_gimple failed\");\n+    internal_error (\"%<verify_gimple%> failed\");\n   timevar_pop (TV_TREE_STMT_VERIFY);\n }\n \n@@ -5110,7 +5132,7 @@ verify_eh_throw_stmt_node (gimple *const &stmt, const int &,\n {\n   if (!visited->contains (stmt))\n     {\n-      error (\"dead STMT in EH table\");\n+      error (\"dead statement in EH table\");\n       debug_gimple_stmt (stmt);\n       eh_error_found = true;\n     }\n@@ -5234,6 +5256,14 @@ collect_subblocks (hash_set<tree> *blocks, tree block)\n     }\n }\n \n+/* Disable warnings about missing quoting in GCC diagnostics for\n+   the verification errors.  Their format strings don't follow\n+   GCC diagnostic conventions and trigger an ICE in the end.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Verify the GIMPLE statements in the CFG of FN.  */\n \n DEBUG_FUNCTION void\n@@ -5711,6 +5741,9 @@ gimple_verify_flow_info (void)\n   return err;\n }\n \n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif\n \n /* Updates phi nodes after creating a forwarder block joined\n    by edge FALLTHRU.  */\n@@ -9413,13 +9446,13 @@ do_warn_unused_result (gimple_seq seq)\n \n \t      if (fdecl)\n \t\twarning_at (loc, OPT_Wunused_result,\n-\t\t\t    \"ignoring return value of %qD, \"\n-\t\t\t    \"declared with attribute warn_unused_result\",\n+\t\t\t    \"ignoring return value of %qD \"\n+\t\t\t    \"declared with attribute %<warn_unused_result%>\",\n \t\t\t    fdecl);\n \t      else\n \t\twarning_at (loc, OPT_Wunused_result,\n \t\t\t    \"ignoring return value of function \"\n-\t\t\t    \"declared with attribute warn_unused_result\");\n+\t\t\t    \"declared with attribute %<warn_unused_result%>\");\n \t    }\n \t  break;\n "}, {"sha": "7598674f39c58db7524be9a6f83af4629035dd2e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -4615,7 +4615,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \t  /* PR 20090218-1_0.c. Body can be provided by another module. */\n \t  && (reason != CIF_BODY_NOT_AVAILABLE || !flag_generate_lto))\n \t{\n-\t  error (\"inlining failed in call to always_inline %q+F: %s\", fn,\n+\t  error (\"inlining failed in call to %<always_inline%> %q+F: %s\", fn,\n \t\t cgraph_inline_failed_string (reason));\n \t  if (gimple_location (stmt) != UNKNOWN_LOCATION)\n \t    inform (gimple_location (stmt), \"called from here\");"}, {"sha": "f2a91a1bfa18aa1c58dc48949c765c8cab4c2696", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -3310,7 +3310,7 @@ update_ssa (unsigned update_flags)\n \n \t\t  if (SSA_NAME_IN_FREE_LIST (use))\n \t\t    {\n-\t\t      error (\"statement uses released SSA name:\");\n+\t\t      error (\"statement uses released SSA name\");\n \t\t      debug_gimple_stmt (stmt);\n \t\t      fprintf (stderr, \"The use of \");\n \t\t      print_generic_expr (stderr, use);"}, {"sha": "cc8b4b8e709e3f00772c580a9b14796042b30046", "filename": "gcc/tree.c", "status": "modified", "additions": 56, "deletions": 51, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -10009,8 +10009,10 @@ void\n omp_clause_check_failed (const_tree node, const char *file, int line,\n                          const char *function, enum omp_clause_code code)\n {\n-  internal_error (\"tree check: expected omp_clause %s, have %s in %s, at %s:%d\",\n-\t\t  omp_clause_code_name[code], get_tree_code_name (TREE_CODE (node)),\n+  internal_error (\"tree check: expected %<omp_clause %s%>, have %qs \"\n+\t\t  \"in %s, at %s:%d\",\n+\t\t  omp_clause_code_name[code],\n+\t\t  get_tree_code_name (TREE_CODE (node)),\n \t\t  function, trim_filename (file), line);\n }\n \n@@ -10083,7 +10085,8 @@ tree_int_cst_elt_check_failed (int idx, int len, const char *file, int line,\n \t\t\t       const char *function)\n {\n   internal_error\n-    (\"tree check: accessed elt %d of tree_int_cst with %d elts in %s, at %s:%d\",\n+    (\"tree check: accessed elt %d of %<tree_int_cst%> with %d elts in %s, \"\n+     \"at %s:%d\",\n      idx + 1, len, function, trim_filename (file), line);\n }\n \n@@ -10095,7 +10098,7 @@ tree_vec_elt_check_failed (int idx, int len, const char *file, int line,\n \t\t\t   const char *function)\n {\n   internal_error\n-    (\"tree check: accessed elt %d of tree_vec with %d elts in %s, at %s:%d\",\n+    (\"tree check: accessed elt %d of %<tree_vec%> with %d elts in %s, at %s:%d\",\n      idx + 1, len, function, trim_filename (file), line);\n }\n \n@@ -10121,7 +10124,7 @@ omp_clause_operand_check_failed (int idx, const_tree t, const char *file,\n \t\t\t         int line, const char *function)\n {\n   internal_error\n-    (\"tree check: accessed operand %d of omp_clause %s with %d operands \"\n+    (\"tree check: accessed operand %d of %<omp_clause %s%> with %d operands \"\n      \"in %s, at %s:%d\", idx + 1, omp_clause_code_name[OMP_CLAUSE_CODE (t)],\n      omp_clause_num_ops [OMP_CLAUSE_CODE (t)], function,\n      trim_filename (file), line);\n@@ -13853,11 +13856,11 @@ verify_type_variant (const_tree t, tree tv)\n \t{\n \t  gcc_assert (!operand_equal_p (TYPE_SIZE_UNIT (t),\n \t\t\t\t\tTYPE_SIZE_UNIT (tv), 0));\n-\t  error (\"type variant has different TYPE_SIZE_UNIT\");\n+\t  error (\"type variant has different %<TYPE_SIZE_UNIT%>\");\n \t  debug_tree (tv);\n-\t  error (\"type variant%'s TYPE_SIZE_UNIT\");\n+\t  error (\"type variant%'s %<TYPE_SIZE_UNIT%>\");\n \t  debug_tree (TYPE_SIZE_UNIT (tv));\n-\t  error (\"type%'s TYPE_SIZE_UNIT\");\n+\t  error (\"type%'s %<TYPE_SIZE_UNIT%>\");\n \t  debug_tree (TYPE_SIZE_UNIT (t));\n \t  return false;\n \t}\n@@ -13877,7 +13880,7 @@ verify_type_variant (const_tree t, tree tv)\n   verify_variant_match (TYPE_STRING_FLAG);\n   if (TYPE_ALIAS_SET_KNOWN_P (t))\n     {\n-      error (\"type variant with TYPE_ALIAS_SET_KNOWN_P\");\n+      error (\"type variant with %<TYPE_ALIAS_SET_KNOWN_P%>\");\n       debug_tree (tv);\n       return false;\n     }\n@@ -13890,7 +13893,7 @@ verify_type_variant (const_tree t, tree tv)\n       && (in_lto_p || !TYPE_VFIELD (tv)\n \t  || TREE_CODE (TYPE_VFIELD (tv)) != TREE_LIST))\n     {\n-      error (\"type variant has different TYPE_VFIELD\");\n+      error (\"type variant has different %<TYPE_VFIELD%>\");\n       debug_tree (tv);\n       return false;\n     }\n@@ -13926,11 +13929,11 @@ verify_type_variant (const_tree t, tree tv)\n \t at LTO time only.  */\n       && (in_lto_p && odr_type_p (t)))\n     {\n-      error (\"type variant has different TYPE_BINFO\");\n+      error (\"type variant has different %<TYPE_BINFO%>\");\n       debug_tree (tv);\n-      error (\"type variant%'s TYPE_BINFO\");\n+      error (\"type variant%'s %<TYPE_BINFO%>\");\n       debug_tree (TYPE_BINFO (tv));\n-      error (\"type%'s TYPE_BINFO\");\n+      error (\"type%'s %<TYPE_BINFO%>\");\n       debug_tree (TYPE_BINFO (t));\n       return false;\n     }\n@@ -13969,7 +13972,7 @@ verify_type_variant (const_tree t, tree tv)\n \t  break;\n       if (f1 || f2)\n \t{\n-\t  error (\"type variant has different TYPE_FIELDS\");\n+\t  error (\"type variant has different %<TYPE_FIELDS%>\");\n \t  debug_tree (tv);\n \t  error (\"first mismatch is field\");\n \t  debug_tree (f1);\n@@ -13990,11 +13993,11 @@ verify_type_variant (const_tree t, tree tv)\n \t  || TYPE_MAIN_VARIANT (TREE_TYPE (t))\n \t     != TYPE_MAIN_VARIANT (TREE_TYPE (tv))))\n     {\n-      error (\"type variant has different TREE_TYPE\");\n+      error (\"type variant has different %<TREE_TYPE%>\");\n       debug_tree (tv);\n-      error (\"type variant%'s TREE_TYPE\");\n+      error (\"type variant%'s %<TREE_TYPE%>\");\n       debug_tree (TREE_TYPE (tv));\n-      error (\"type%'s TREE_TYPE\");\n+      error (\"type%'s %<TREE_TYPE%>\");\n       debug_tree (TREE_TYPE (t));\n       return false;\n     }\n@@ -14003,9 +14006,9 @@ verify_type_variant (const_tree t, tree tv)\n     {\n       error (\"type is not compatible with its variant\");\n       debug_tree (tv);\n-      error (\"type variant%'s TREE_TYPE\");\n+      error (\"type variant%'s %<TREE_TYPE%>\");\n       debug_tree (TREE_TYPE (tv));\n-      error (\"type%'s TREE_TYPE\");\n+      error (\"type%'s %<TREE_TYPE%>\");\n       debug_tree (TREE_TYPE (t));\n       return false;\n     }\n@@ -14304,12 +14307,12 @@ verify_type (const_tree t)\n   tree mv = TYPE_MAIN_VARIANT (t);\n   if (!mv)\n     {\n-      error (\"Main variant is not defined\");\n+      error (\"main variant is not defined\");\n       error_found = true;\n     }\n   else if (mv != TYPE_MAIN_VARIANT (mv))\n     {\n-      error (\"TYPE_MAIN_VARIANT has different TYPE_MAIN_VARIANT\");\n+      error (\"%<TYPE_MAIN_VARIANT%> has different %<TYPE_MAIN_VARIANT%>\");\n       debug_tree (mv);\n       error_found = true;\n     }\n@@ -14321,7 +14324,7 @@ verify_type (const_tree t)\n     ;\n   else if (TYPE_CANONICAL (t) != ct)\n     {\n-      error (\"TYPE_CANONICAL has different TYPE_CANONICAL\");\n+      error (\"%<TYPE_CANONICAL%> has different %<TYPE_CANONICAL%>\");\n       debug_tree (ct);\n       error_found = true;\n     }\n@@ -14340,21 +14343,21 @@ verify_type (const_tree t)\n \t   && !gimple_canonical_types_compatible_p (t, ct, false)\n \t   && COMPLETE_TYPE_P (t))\n     {\n-      error (\"TYPE_CANONICAL is not compatible\");\n+      error (\"%<TYPE_CANONICAL%> is not compatible\");\n       debug_tree (ct);\n       error_found = true;\n     }\n \n   if (COMPLETE_TYPE_P (t) && TYPE_CANONICAL (t)\n       && TYPE_MODE (t) != TYPE_MODE (TYPE_CANONICAL (t)))\n     {\n-      error (\"TYPE_MODE of TYPE_CANONICAL is not compatible\");\n+      error (\"%<TYPE_MODE%> of %<TYPE_CANONICAL%> is not compatible\");\n       debug_tree (ct);\n       error_found = true;\n     }\n   if (TYPE_MAIN_VARIANT (t) == t && ct && TYPE_MAIN_VARIANT (ct) != ct)\n    {\n-      error (\"TYPE_CANONICAL of main variant is not main variant\");\n+      error (\"%<TYPE_CANONICAL%> of main variant is not main variant\");\n       debug_tree (ct);\n       debug_tree (TYPE_MAIN_VARIANT (ct));\n       error_found = true;\n@@ -14370,7 +14373,7 @@ verify_type (const_tree t)\n \t  && TREE_CODE (TYPE_VFIELD (t)) != FIELD_DECL\n \t  && TREE_CODE (TYPE_VFIELD (t)) != TREE_LIST)\n \t{\n-\t  error (\"TYPE_VFIELD is not FIELD_DECL nor TREE_LIST\");\n+\t  error (\"%<TYPE_VFIELD%> is not %<FIELD_DECL%> nor %<TREE_LIST%>\");\n \t  debug_tree (TYPE_VFIELD (t));\n \t  error_found = true;\n \t}\n@@ -14380,7 +14383,7 @@ verify_type (const_tree t)\n       if (TYPE_NEXT_PTR_TO (t)\n \t  && TREE_CODE (TYPE_NEXT_PTR_TO (t)) != POINTER_TYPE)\n \t{\n-\t  error (\"TYPE_NEXT_PTR_TO is not POINTER_TYPE\");\n+\t  error (\"%<TYPE_NEXT_PTR_TO%> is not %<POINTER_TYPE%>\");\n \t  debug_tree (TYPE_NEXT_PTR_TO (t));\n \t  error_found = true;\n \t}\n@@ -14390,7 +14393,7 @@ verify_type (const_tree t)\n       if (TYPE_NEXT_REF_TO (t)\n \t  && TREE_CODE (TYPE_NEXT_REF_TO (t)) != REFERENCE_TYPE)\n \t{\n-\t  error (\"TYPE_NEXT_REF_TO is not REFERENCE_TYPE\");\n+\t  error (\"%<TYPE_NEXT_REF_TO%> is not %<REFERENCE_TYPE%>\");\n \t  debug_tree (TYPE_NEXT_REF_TO (t));\n \t  error_found = true;\n \t}\n@@ -14411,13 +14414,13 @@ verify_type (const_tree t)\n \t;\n       else if (TREE_CODE (TYPE_BINFO (t)) != TREE_BINFO)\n \t{\n-\t  error (\"TYPE_BINFO is not TREE_BINFO\");\n+\t  error (\"%<TYPE_BINFO%> is not %<TREE_BINFO%>\");\n \t  debug_tree (TYPE_BINFO (t));\n \t  error_found = true;\n \t}\n       else if (TREE_TYPE (TYPE_BINFO (t)) != TYPE_MAIN_VARIANT (t))\n \t{\n-\t  error (\"TYPE_BINFO type is not TYPE_MAIN_VARIANT\");\n+\t  error (\"%<TYPE_BINFO%> type is not %<TYPE_MAIN_VARIANT%>\");\n \t  debug_tree (TREE_TYPE (TYPE_BINFO (t)));\n \t  error_found = true;\n \t}\n@@ -14428,7 +14431,7 @@ verify_type (const_tree t)\n \t  && TREE_CODE (TYPE_METHOD_BASETYPE (t)) != RECORD_TYPE\n \t  && TREE_CODE (TYPE_METHOD_BASETYPE (t)) != UNION_TYPE)\n \t{\n-\t  error (\"TYPE_METHOD_BASETYPE is not record nor union\");\n+\t  error (\"%<TYPE_METHOD_BASETYPE%> is not record nor union\");\n \t  debug_tree (TYPE_METHOD_BASETYPE (t));\n \t  error_found = true;\n \t}\n@@ -14439,7 +14442,7 @@ verify_type (const_tree t)\n \t  && TREE_CODE (TYPE_OFFSET_BASETYPE (t)) != RECORD_TYPE\n \t  && TREE_CODE (TYPE_OFFSET_BASETYPE (t)) != UNION_TYPE)\n \t{\n-\t  error (\"TYPE_OFFSET_BASETYPE is not record nor union\");\n+\t  error (\"%<TYPE_OFFSET_BASETYPE%> is not record nor union\");\n \t  debug_tree (TYPE_OFFSET_BASETYPE (t));\n \t  error_found = true;\n \t}\n@@ -14457,21 +14460,21 @@ verify_type (const_tree t)\n       if (TYPE_ARRAY_MAX_SIZE (t)\n \t  && TREE_CODE (TYPE_ARRAY_MAX_SIZE (t)) != INTEGER_CST)\n         {\n-\t  error (\"TYPE_ARRAY_MAX_SIZE not INTEGER_CST\");\n+\t  error (\"%<TYPE_ARRAY_MAX_SIZE%> not %<INTEGER_CST%>\");\n \t  debug_tree (TYPE_ARRAY_MAX_SIZE (t));\n \t  error_found = true;\n         } \n     }\n   else if (TYPE_MAX_VALUE_RAW (t))\n     {\n-      error (\"TYPE_MAX_VALUE_RAW non-NULL\");\n+      error (\"%<TYPE_MAX_VALUE_RAW%> non-NULL\");\n       debug_tree (TYPE_MAX_VALUE_RAW (t));\n       error_found = true;\n     }\n \n   if (TYPE_LANG_SLOT_1 (t) && in_lto_p)\n     {\n-      error (\"TYPE_LANG_SLOT_1 (binfo) field is non-NULL\");\n+      error (\"%<TYPE_LANG_SLOT_1 (binfo)%> field is non-NULL\");\n       debug_tree (TYPE_LANG_SLOT_1 (t));\n       error_found = true;\n     }\n@@ -14487,22 +14490,23 @@ verify_type (const_tree t)\n  \t   CONST_DECL of ENUMERAL TYPE.  */\n \tif (TREE_CODE (value) != INTEGER_CST && TREE_CODE (value) != CONST_DECL)\n \t  {\n-\t    error (\"Enum value is not CONST_DECL or INTEGER_CST\");\n+\t    error (\"enum value is not %<CONST_DECL%> or %<INTEGER_CST%>\");\n \t    debug_tree (value);\n \t    debug_tree (name);\n \t    error_found = true;\n \t  }\n \tif (TREE_CODE (TREE_TYPE (value)) != INTEGER_TYPE\n \t    && !useless_type_conversion_p (const_cast <tree> (t), TREE_TYPE (value)))\n \t  {\n-\t    error (\"Enum value type is not INTEGER_TYPE nor convertible to the enum\");\n+\t    error (\"enum value type is not %<INTEGER_TYPE%> nor convertible \"\n+\t\t   \"to the enum\");\n \t    debug_tree (value);\n \t    debug_tree (name);\n \t    error_found = true;\n \t  }\n \tif (TREE_CODE (name) != IDENTIFIER_NODE)\n \t  {\n-\t    error (\"Enum value name is not IDENTIFIER_NODE\");\n+\t    error (\"enum value name is not %<IDENTIFIER_NODE%>\");\n \t    debug_tree (value);\n \t    debug_tree (name);\n \t    error_found = true;\n@@ -14512,7 +14516,7 @@ verify_type (const_tree t)\n     {\n       if (TYPE_DOMAIN (t) && TREE_CODE (TYPE_DOMAIN (t)) != INTEGER_TYPE)\n \t{\n-\t  error (\"Array TYPE_DOMAIN is not integer type\");\n+\t  error (\"array %<TYPE_DOMAIN%> is not integer type\");\n \t  debug_tree (TYPE_DOMAIN (t));\n \t  error_found = true;\n \t}\n@@ -14521,7 +14525,7 @@ verify_type (const_tree t)\n     {\n       if (TYPE_FIELDS (t) && !COMPLETE_TYPE_P (t) && in_lto_p)\n \t{\n-\t  error (\"TYPE_FIELDS defined in incomplete type\");\n+\t  error (\"%<TYPE_FIELDS%> defined in incomplete type\");\n \t  error_found = true;\n \t}\n       for (tree fld = TYPE_FIELDS (t); fld; fld = TREE_CHAIN (fld))\n@@ -14543,7 +14547,7 @@ verify_type (const_tree t)\n \t    ;\n \t  else\n \t    {\n-\t      error (\"Wrong tree in TYPE_FIELDS list\");\n+\t      error (\"wrong tree in %<TYPE_FIELDS%> list\");\n \t      debug_tree (fld);\n \t      error_found = true;\n \t    }\n@@ -14558,13 +14562,14 @@ verify_type (const_tree t)\n     {\n       if (TYPE_CACHED_VALUES_P (t) != (TYPE_CACHED_VALUES (t) != NULL))\n \t{\n-\t  error (\"TYPE_CACHED_VALUES_P is %i while TYPE_CACHED_VALUES is %p\",\n+\t  error (\"%<TYPE_CACHED_VALUES_P%> is %i while %<TYPE_CACHED_VALUES%> \"\n+\t\t \"is %p\",\n \t\t TYPE_CACHED_VALUES_P (t), (void *)TYPE_CACHED_VALUES (t));\n \t  error_found = true;\n \t}\n       else if (TYPE_CACHED_VALUES_P (t) && TREE_CODE (TYPE_CACHED_VALUES (t)) != TREE_VEC)\n \t{\n-\t  error (\"TYPE_CACHED_VALUES is not TREE_VEC\");\n+\t  error (\"%<TYPE_CACHED_VALUES%> is not %<TREE_VEC%>\");\n \t  debug_tree (TYPE_CACHED_VALUES (t));\n \t  error_found = true;\n \t}\n@@ -14577,7 +14582,7 @@ verify_type (const_tree t)\n \t    if (TREE_VEC_ELT (TYPE_CACHED_VALUES (t), i)\n \t\t&& TREE_TYPE (TREE_VEC_ELT (TYPE_CACHED_VALUES (t), i)) != t)\n \t      {\n-\t\terror (\"wrong TYPE_CACHED_VALUES entry\");\n+\t\terror (\"wrong %<TYPE_CACHED_VALUES%> entry\");\n \t\tdebug_tree (TREE_VEC_ELT (TYPE_CACHED_VALUES (t), i));\n \t\terror_found = true;\n \t\tbreak;\n@@ -14590,20 +14595,20 @@ verify_type (const_tree t)\n \t/* C++ FE uses TREE_PURPOSE to store initial values.  */\n \tif (TREE_PURPOSE (l) && in_lto_p)\n \t  {\n-\t    error (\"TREE_PURPOSE is non-NULL in TYPE_ARG_TYPES list\");\n+\t    error (\"%<TREE_PURPOSE%> is non-NULL in %<TYPE_ARG_TYPES%> list\");\n \t    debug_tree (l);\n \t    error_found = true;\n \t  }\n \tif (!TYPE_P (TREE_VALUE (l)))\n \t  {\n-\t    error (\"Wrong entry in TYPE_ARG_TYPES list\");\n+\t    error (\"wrong entry in %<TYPE_ARG_TYPES%> list\");\n \t    debug_tree (l);\n \t    error_found = true;\n \t  }\n       }\n   else if (!is_lang_specific (t) && TYPE_VALUES_RAW (t))\n     {\n-      error (\"TYPE_VALUES_RAW field is non-NULL\");\n+      error (\"%<TYPE_VALUES_RAW%> field is non-NULL\");\n       debug_tree (TYPE_VALUES_RAW (t));\n       error_found = true;\n     }\n@@ -14615,13 +14620,13 @@ verify_type (const_tree t)\n       && TREE_CODE (t) != POINTER_TYPE\n       && TYPE_CACHED_VALUES_P (t))\n     {\n-      error (\"TYPE_CACHED_VALUES_P is set while it should not\");\n+      error (\"%<TYPE_CACHED_VALUES_P%> is set while it should not be\");\n       error_found = true;\n     }\n   if (TYPE_STRING_FLAG (t)\n       && TREE_CODE (t) != ARRAY_TYPE && TREE_CODE (t) != INTEGER_TYPE)\n     {\n-      error (\"TYPE_STRING_FLAG is set on wrong type code\");\n+      error (\"%<TYPE_STRING_FLAG%> is set on wrong type code\");\n       error_found = true;\n     }\n   \n@@ -14631,14 +14636,14 @@ verify_type (const_tree t)\n   if (TREE_CODE (t) == METHOD_TYPE\n       && TYPE_MAIN_VARIANT (TYPE_METHOD_BASETYPE (t)) != TYPE_METHOD_BASETYPE (t))\n     {\n-\terror (\"TYPE_METHOD_BASETYPE is not main variant\");\n+\terror (\"%<TYPE_METHOD_BASETYPE%> is not main variant\");\n \terror_found = true;\n     }\n \n   if (error_found)\n     {\n       debug_tree (const_cast <tree> (t));\n-      internal_error (\"verify_type failed\");\n+      internal_error (\"%qs failed\", __func__);\n     }\n }\n "}, {"sha": "d34d2ab768543d5b9f97a6f91a22087cadc9920e", "filename": "gcc/value-prof.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -535,7 +535,7 @@ verify_histograms (void)\n \t  {\n \t    if (hist->hvalue.stmt != stmt)\n \t      {\n-\t\terror (\"Histogram value statement does not correspond to \"\n+\t\terror (\"histogram value statement does not correspond to \"\n \t\t       \"the statement it is associated with\");\n \t\tdebug_gimple_stmt (stmt);\n \t\tdump_histogram_value (stderr, hist);\n@@ -547,7 +547,7 @@ verify_histograms (void)\n   if (VALUE_HISTOGRAMS (cfun))\n     htab_traverse (VALUE_HISTOGRAMS (cfun), visit_hist, &visited_hists);\n   if (error_found)\n-    internal_error (\"verify_histograms failed\");\n+    internal_error (\"%qs failed\", __func__);\n }\n \n /* Helper function for verify_histograms.  For each histogram reachable via htab"}, {"sha": "9397152dbce7b3e238a32a62092ebc3e1b5fd7cf", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -1878,7 +1878,9 @@ assemble_start_function (tree decl, const char *fnname)\n   if (patch_area_entry > patch_area_size)\n     {\n       if (patch_area_size > 0)\n-\twarning (OPT_Wattributes, \"patchable function entry > size\");\n+\twarning (OPT_Wattributes,\n+\t\t \"patchable function entry %wu exceeds size %wu\",\n+\t\t patch_area_entry, patch_area_size);\n       patch_area_entry = 0;\n     }\n "}, {"sha": "6be229b094ab8bd3c5112e7e5fcd963e14685745", "filename": "libgcc/libgcov-util.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/libgcc%2Flibgcov-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/libgcc%2Flibgcov-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-util.c?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -332,7 +332,7 @@ read_gcda_file (const char *filename)\n         {\n           if (((mask & 0xff) != 0xff))\n             {\n-              warning (0, \"%s:tag `%x' is invalid\\n\", filename, tag);\n+\t      warning (0, \"%s:tag %qx is invalid\", filename, tag);\n               break;\n             }\n           tag_depth--;\n@@ -347,7 +347,7 @@ read_gcda_file (const char *filename)\n           if (depth && depth < tag_depth)\n             {\n               if (!GCOV_TAG_IS_SUBTAG (tags[depth - 1], tag))\n-                warning (0, \"%s:tag `%x' is incorrectly nested\\n\",\n+\t        warning (0, \"%s:tag %qx is incorrectly nested\",\n                          filename, tag);\n             }\n           depth = tag_depth;\n@@ -362,18 +362,18 @@ read_gcda_file (const char *filename)\n \n           actual_length = gcov_position () - base;\n           if (actual_length > length)\n-            warning (0, \"%s:record size mismatch %lu bytes overread\\n\",\n+\t    warning (0, \"%s:record size mismatch %lu bytes overread\",\n                      filename, actual_length - length);\n           else if (length > actual_length)\n-            warning (0, \"%s:record size mismatch %lu bytes unread\\n\",\n+\t    warning (0, \"%s:record size mismatch %lu bytes unread\",\n                      filename, length - actual_length);\n        }\n \n       gcov_sync (base, length);\n       if ((error = gcov_is_error ()))\n         {\n-          warning (0, error < 0 ? \"%s:counter overflow at %lu\\n\" :\n-                                  \"%s:read error at %lu\\n\", filename,\n+\t  warning (0, error < 0 ? \"%s:counter overflow at %lu\" :\n+\t                          \"%s:read error at %lu\", filename,\n                    (long unsigned) gcov_position ());\n           break;\n         }"}, {"sha": "5423178ce714bdf289656ce2e3569b759fba6b66", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c697b88395a0f2b175ac30c59bd8c0c22d0db1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=a9c697b88395a0f2b175ac30c59bd8c0c22d0db1", "patch": "@@ -26,7 +26,7 @@ using std::any_cast;\n void test01()\n {\n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 461 }\n+  any_cast<int&>(y); // { dg-error \"invalid 'static_cast'\" \"\" { target { *-*-* } } 461 }\n   // { dg-error \"Template argument must be constructible from a const value\" \"\" { target { *-*-* } } 457 }\n }\n \n@@ -40,6 +40,6 @@ void test02()\n void test03()\n {\n   any y(1);\n-  any_cast<int&>(std::move(y));  // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 501 }\n+  any_cast<int&>(std::move(y));  // { dg-error \"invalid 'static_cast'\" \"\" { target { *-*-* } } 501 }\n   // { dg-error \"Template argument must be constructible from an rvalue\" \"\" { target { *-*-* } } 497 }\n }"}]}