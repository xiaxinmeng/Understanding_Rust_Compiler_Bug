{"sha": "28df0b5ae3b6d7905de50fad4b5091dc7eb695a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkZjBiNWFlM2I2ZDc5MDVkZTUwZmFkNGI1MDkxZGM3ZWI2OTVhMw==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-04-29T00:12:51Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-04-29T00:12:51Z"}, "message": "objc-act.c (handle_class_ref): Rewrite to flush target specific code and use new macro...\n\n        * objc/objc-act.c (handle_class_ref): Rewrite to flush target\n        specific code and use new macro ASM_DECLARE_UNRESOLVED_REFERENCE.\n        * config/darwin.h (ASM_DECLARE_UNRESOLVED_REFERENCE): Define.\n        * tm.texi (ASM_DECLARE_UNRESOLVED_REFERENCE): Document.\n\nFrom-SVN: r41666", "tree": {"sha": "c3a72e15a098bd16c87919299d256399f54003cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3a72e15a098bd16c87919299d256399f54003cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3/comments", "author": null, "committer": null, "parents": [{"sha": "f37f462aa63f3290f973f7b30288ea70373969a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37f462aa63f3290f973f7b30288ea70373969a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37f462aa63f3290f973f7b30288ea70373969a8"}], "stats": {"total": 87, "additions": 48, "deletions": 39}, "files": [{"sha": "3327ea4ce627f2a13f858b356d56c0a0d6b8423e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28df0b5ae3b6d7905de50fad4b5091dc7eb695a3", "patch": "@@ -1,5 +1,10 @@\n 2001-04-28  Stan Shebs  <shebs@apple.com>\n \n+\t* objc/objc-act.c (handle_class_ref): Rewrite to flush target\n+\tspecific code and use new macro ASM_DECLARE_UNRESOLVED_REFERENCE.\n+\t* config/darwin.h (ASM_DECLARE_UNRESOLVED_REFERENCE): Define.\n+\t* tm.texi (ASM_DECLARE_UNRESOLVED_REFERENCE): Document.\n+\n \t* config/darwin.h (STANDARD_EXEC_PREFIX): Don't define.\n \t(NEXT_OBJC_RUNTIME): Define.\n \t"}, {"sha": "4de7078ed2c462d5774f02f73001f24f2c5efa35", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=28df0b5ae3b6d7905de50fad4b5091dc7eb695a3", "patch": "@@ -648,15 +648,15 @@ void alias_section (name, alias)\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define DECLARE_UNRESOLVED_REFERENCE(NAME)\t\t\t\t\\\n-    do { extern FILE* asm_out_file; \t\t\t\t\t\\\n-\t if (asm_out_file) {\t\t\t\t\t\t\\\n+#define ASM_DECLARE_UNRESOLVED_REFERENCE(FILE,NAME)\t\t\t\\\n+    do { \t\t\t\t\t\t\t\t\\\n+\t if (FILE) {\t\t\t\t\t\t\t\\\n \t   if (flag_pic)\t\t\t\t\t\t\\\n-\t     fprintf (asm_out_file, \"\\t.lazy_reference \");\t\t\\\n+\t     fprintf (FILE, \"\\t.lazy_reference \");\t\t\t\\\n \t   else\t\t\t\t\t\t\t\t\\\n-\t     fprintf (asm_out_file, \"\\t.reference \");\t\t\t\\\n-\t   assemble_name (asm_out_file, NAME);\t\t\t\t\\\n-\t   fprintf (asm_out_file, \"\\n\");\t\t\t\t\\\n+\t     fprintf (FILE, \"\\t.reference \");\t\t\t\t\\\n+\t   assemble_name (FILE, NAME);\t\t\t\t\t\\\n+\t   fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n \t }                                                              \\\n        } while (0)\n "}, {"sha": "d29c6f20ab9cce6459c1b267dec370a5f041983a", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=28df0b5ae3b6d7905de50fad4b5091dc7eb695a3", "patch": "@@ -8355,46 +8355,43 @@ handle_class_ref (chain)\n      tree chain;\n {\n   const char *name = IDENTIFIER_POINTER (TREE_VALUE (chain));\n-  if (! flag_next_runtime)\n-    {\n-      tree decl;\n-      char *string = (char *) alloca (strlen (name) + 30);\n-      tree exp;\n+  char *string = (char *) alloca (strlen (name) + 30);\n+  tree decl;\n+  tree exp;\n \n-      sprintf (string, \"%sobjc_class_name_%s\",\n-\t       (flag_next_runtime ? \".\" : \"__\"), name);\n+  sprintf (string, \"%sobjc_class_name_%s\",\n+\t   (flag_next_runtime ? \".\" : \"__\"), name);\n \n-      /* Make a decl for this name, so we can use its address in a tree.  */\n-      decl = build_decl (VAR_DECL, get_identifier (string), char_type_node);\n-      DECL_EXTERNAL (decl) = 1;\n-      TREE_PUBLIC (decl) = 1;\n+#ifdef ASM_DECLARE_UNRESOLVED_REFERENCE\n+  if (flag_next_runtime)\n+    {\n+      ASM_DECLARE_UNRESOLVED_REFERENCE (asm_out_file, string);\n+      return;\n+    }\n+#endif\n \n-      pushdecl (decl);\n-      rest_of_decl_compilation (decl, 0, 0, 0);\n+  /* Make a decl for this name, so we can use its address in a tree.  */\n+  decl = build_decl (VAR_DECL, get_identifier (string), char_type_node);\n+  DECL_EXTERNAL (decl) = 1;\n+  TREE_PUBLIC (decl) = 1;\n+\n+  pushdecl (decl);\n+  rest_of_decl_compilation (decl, 0, 0, 0);\n \n-      /* Make following constant read-only (why not)?  */\n-      readonly_data_section ();\n+  /* Make following constant read-only, but only for GNU runtime.  */\n+  if (!flag_next_runtime)\n+    readonly_data_section ();\n \n-      exp = build1 (ADDR_EXPR, string_type_node, decl);\n+  exp = build1 (ADDR_EXPR, string_type_node, decl);\n \n-      /* Align the section properly.  */\n-      assemble_constant_align (exp);\n+  /* Align the section properly.  */\n+  assemble_constant_align (exp);\n \n-      /* Inform the assembler about this new external thing.  */\n-      assemble_external (decl);\n+  /* Inform the assembler about this new external thing.  */\n+  assemble_external (decl);\n \n-      /* Output a constant to reference this address.  */\n-      output_constant (exp, int_size_in_bytes (string_type_node));\n-    }\n-  else\n-    {\n-      /* This overreliance on our assembler (i.e. lack of portability)\n-\t should be dealt with at some point.  The GNU strategy (above)\n-\t won't work either, but it is a start.  */\n-      char *string = (char *) alloca (strlen (name) + 30);\n-      sprintf (string, \".reference .objc_class_name_%s\", name);\n-      assemble_asm (my_build_string (strlen (string) + 1, string));\n-    }\n+  /* Output a constant to reference this address.  */\n+  output_constant (exp, int_size_in_bytes (string_type_node));\n }\n \n static void"}, {"sha": "bbc8cf2fdfccb18cfbe2ea2bdcfe12e2b49cd838", "filename": "gcc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28df0b5ae3b6d7905de50fad4b5091dc7eb695a3/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=28df0b5ae3b6d7905de50fad4b5091dc7eb695a3", "patch": "@@ -6270,6 +6270,13 @@ in a category); and @var{sel_name} is the name of the selector.\n \n On systems where the assembler can handle quoted names, you can use this\n macro to provide more human-readable names.\n+\n+@findex ASM_DECLARE_UNRESOLVED_REFERENCE\n+@item ASM_DECLARE_UNRESOLVED_REFERENCE (@var{stream}, @var{name})\n+A C statement (sans semicolon) to output to the stdio stream\n+@var{stream} commands to declare that the label @var{name} is an\n+unresolved Objective-C class reference.  This is only needed for targets\n+whose linkers have special support for NeXT-style runtimes.\n @end table\n \n @node Initialization"}]}