{"sha": "276ca25d7b89e90c6fda272f1aabc9da01d7342d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc2Y2EyNWQ3Yjg5ZTkwYzZmZGEyNzJmMWFhYmM5ZGEwMWQ3MzQyZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-05T14:06:15Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-05T14:06:15Z"}, "message": "re PR fortran/31483 ([4.1/4.2 only] ICE on fortran Code)\n\n2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31483\n\t* trans-expr.c (gfc_conv_function_call): Give a dummy\n\tprocedure the correct type if it has alternate returns.\n\n2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31483\n\t* gfortran.dg/altreturn_5.f90: New test.\n\nFrom-SVN: r123518", "tree": {"sha": "83e273fbd1bb9b23ba711ad472cf3a55032e49e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83e273fbd1bb9b23ba711ad472cf3a55032e49e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/276ca25d7b89e90c6fda272f1aabc9da01d7342d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/276ca25d7b89e90c6fda272f1aabc9da01d7342d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/276ca25d7b89e90c6fda272f1aabc9da01d7342d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/276ca25d7b89e90c6fda272f1aabc9da01d7342d/comments", "author": null, "committer": null, "parents": [{"sha": "060fca4a44e24baebe7575b9119518b7821c1c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/060fca4a44e24baebe7575b9119518b7821c1c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/060fca4a44e24baebe7575b9119518b7821c1c45"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "5b3001f489ec3e3435613ee23dcdf18814b871cf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276ca25d7b89e90c6fda272f1aabc9da01d7342d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276ca25d7b89e90c6fda272f1aabc9da01d7342d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=276ca25d7b89e90c6fda272f1aabc9da01d7342d", "patch": "@@ -1,3 +1,9 @@\n+2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\r\n+\r\n+\tPR fortran/31483\r\n+\t* trans-expr.c (gfc_conv_function_call): Give a dummy\r\n+\tprocedure the correct type if it has alternate returns.\r\n+\r\n 2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\r\n \r\n \tPR fortran/31292\r"}, {"sha": "5ff0c44dfbc24cb591d762c8ae4c7bcef46c9742", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276ca25d7b89e90c6fda272f1aabc9da01d7342d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276ca25d7b89e90c6fda272f1aabc9da01d7342d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=276ca25d7b89e90c6fda272f1aabc9da01d7342d", "patch": "@@ -2392,17 +2392,23 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \n   /* Generate the actual call.  */\n   gfc_conv_function_val (se, sym);\n+\n   /* If there are alternate return labels, function type should be\n      integer.  Can't modify the type in place though, since it can be shared\n-     with other functions.  */\n+     with other functions.  For dummy arguments, the typing is done to\n+     to this result, even if it has to be repeated for each call.  */\n   if (has_alternate_specifier\n       && TREE_TYPE (TREE_TYPE (TREE_TYPE (se->expr))) != integer_type_node)\n     {\n-      gcc_assert (! sym->attr.dummy);\n-      TREE_TYPE (sym->backend_decl)\n-        = build_function_type (integer_type_node,\n-                               TYPE_ARG_TYPES (TREE_TYPE (sym->backend_decl)));\n-      se->expr = build_fold_addr_expr (sym->backend_decl);\n+      if (!sym->attr.dummy)\n+\t{\n+\t  TREE_TYPE (sym->backend_decl)\n+\t\t= build_function_type (integer_type_node,\n+\t\t      TYPE_ARG_TYPES (TREE_TYPE (sym->backend_decl)));\n+\t  se->expr = build_fold_addr_expr (sym->backend_decl);\n+\t}\n+      else\n+\tTREE_TYPE (TREE_TYPE (TREE_TYPE (se->expr))) = integer_type_node;\n     }\n \n   fntype = TREE_TYPE (TREE_TYPE (se->expr));"}, {"sha": "28316c2b911bddee7120c30155d77a851907a8a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276ca25d7b89e90c6fda272f1aabc9da01d7342d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276ca25d7b89e90c6fda272f1aabc9da01d7342d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=276ca25d7b89e90c6fda272f1aabc9da01d7342d", "patch": "@@ -1,3 +1,8 @@\n+2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\r\n+\r\n+\tPR fortran/31483\r\n+\t* gfortran.dg/altreturn_5.f90: New test.\r\n+\n 2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\r\n \r\n \tPR fortran/31292\r"}, {"sha": "ff1b82289f6587ff5765d2547dc3ff5ebe2bde1c", "filename": "gcc/testsuite/gfortran.dg/altreturn_5.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276ca25d7b89e90c6fda272f1aabc9da01d7342d/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276ca25d7b89e90c6fda272f1aabc9da01d7342d/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_5.f90?ref=276ca25d7b89e90c6fda272f1aabc9da01d7342d", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! Tests the fix for PR31483, in which dummy argument procedures\n+! produced an ICE if they had an alternate return.\n+!\n+! Contributed by Mathias Fr\ufffdhlich <M.Froehlich@science-computing.de>\n+\n+      SUBROUTINE R (i, *, *)\n+      INTEGER i\n+      RETURN i\n+      END\n+\n+      SUBROUTINE PHLOAD (READER, i, res)\r\n+      IMPLICIT NONE\r\n+      EXTERNAL         READER\n+      integer i\n+      character(3) res\r\n+      CALL READER (i, *1, *2)\r\n+ 1    res = \"one\"\n+      return\r\n+ 2    res = \"two\"\n+      return\r\n+      END\n+\n+      EXTERNAL R\n+      character(3) res\r\n+      call PHLOAD (R, 1, res)\n+      if (res .ne. \"one\") call abort ()\n+      CALL PHLOAD (R, 2, res)\n+      if (res .ne. \"two\") call abort ()\n+      END\r\n+\r"}]}