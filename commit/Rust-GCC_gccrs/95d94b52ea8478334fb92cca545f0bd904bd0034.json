{"sha": "95d94b52ea8478334fb92cca545f0bd904bd0034", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkOTRiNTJlYTg0NzgzMzRmYjkyY2NhNTQ1ZjBiZDkwNGJkMDAzNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-11T10:13:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-12T08:38:52Z"}, "message": "tree-optimization/38474 - fix store-merging compile-time regression\n\nThe following puts a limit on the number of alias tests we do in\nterminate_all_aliasing_chains which is quadratic in the number of\noverall stores currentrly tracked.  There is already a limit in\nplace on the maximum number of stores in a single chain so the\nfollowing adds a limit on the number of chains tracked.  The\nworst number of overall stores tracked from the defaults (64 and 64)\nis then 4096 which when imposed as the sole limit for the testcase\nstill causes\n\n store merging                      :  71.65 ( 56%)\n\nbecause the testcase is somewhat degenerate with most chains\nconsisting only of a single store (and 25% of exactly three stores).\nThe single stores are all CLOBBERs at the point variables go out of\nscope.  Note unpatched we have\n\n store merging                      : 308.60 ( 84%)\n\nLimiting the number of chains to 64 brings this down to\n\n store merging                      :   1.52 (  3%)\n\nwhich is more reasonable.  There are ideas on how to make\nterminate_all_aliasing_chains cheaper but for this degenerate case\nthey would not have any effect so I'll defer for GCC 12 for those.\n\nI'm not sure we want to have both --params, just keeping the\nmore to-the-point max-stores-to-track works but makes the\ndegenerate case above slower.\nI made the current default 1024 which for the testcasse\n(without limiting chains) results in 25% compile time and 20s\nputting it in the same ballpart as the next offender (which is PTA).\n\nThis is a regression on trunk and the GCC 10 branch btw.\n\n2021-02-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/38474\n\t* params.opt (-param=max-store-chains-to-track=): New param.\n\t(-param=max-stores-to-track=): Likewise.\n\t* doc/invoke.texi (max-store-chains-to-track): Document.\n\t(max-stores-to-track): Likewise.\n\t* gimple-ssa-store-merging.c (pass_store_merging::m_n_chains):\n\tNew.\n\t(pass_store_merging::m_n_stores): Likewise.\n\t(pass_store_merging::terminate_and_process_chain): Update\n\tm_n_stores and m_n_chains.\n\t(pass_store_merging::process_store): Likewise.   Terminate\n\toldest chains if the number of stores or chains get too large.\n\t(imm_store_chain_info::terminate_and_process_chain): Dump\n\tchain length.", "tree": {"sha": "279e1ca7a0144b8dd78423a3dd306c3a8f1b6159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/279e1ca7a0144b8dd78423a3dd306c3a8f1b6159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95d94b52ea8478334fb92cca545f0bd904bd0034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d94b52ea8478334fb92cca545f0bd904bd0034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d94b52ea8478334fb92cca545f0bd904bd0034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d94b52ea8478334fb92cca545f0bd904bd0034/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac001ddd0cb635dec0145bf577ac796894bda398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac001ddd0cb635dec0145bf577ac796894bda398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac001ddd0cb635dec0145bf577ac796894bda398"}], "stats": {"total": 104, "additions": 83, "deletions": 21}, "files": [{"sha": "e8baa545eee95bfa43111b61acbcbb280ae86f29", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d94b52ea8478334fb92cca545f0bd904bd0034/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d94b52ea8478334fb92cca545f0bd904bd0034/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=95d94b52ea8478334fb92cca545f0bd904bd0034", "patch": "@@ -13308,6 +13308,14 @@ do so.\n The maximum number of stores to attempt to merge into wider stores in the store\n merging pass.\n \n+@item max-store-chains-to-track\n+The maximum number of store chains to track at the same time in the attempt\n+to merge them into wider stores in the store merging pass.\n+\n+@item max-stores-to-track\n+The maximum number of stores to track at the same time in the attemt to\n+to merge them into wider stores in the store merging pass.\n+\n @item max-unrolled-insns\n The maximum number of instructions that a loop may have to be unrolled.\n If a loop is unrolled, this parameter also determines how many times"}, {"sha": "b4c5e8eb9a8b6d3576c0fdbe069957474ded90ad", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 67, "deletions": 21, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d94b52ea8478334fb92cca545f0bd904bd0034/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d94b52ea8478334fb92cca545f0bd904bd0034/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=95d94b52ea8478334fb92cca545f0bd904bd0034", "patch": "@@ -2324,7 +2324,8 @@ class pass_store_merging : public gimple_opt_pass\n {\n public:\n   pass_store_merging (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_tree_store_merging, ctxt), m_stores_head ()\n+    : gimple_opt_pass (pass_data_tree_store_merging, ctxt), m_stores_head (),\n+      m_n_chains (0), m_n_stores (0)\n   {\n   }\n \n@@ -2356,6 +2357,11 @@ class pass_store_merging : public gimple_opt_pass\n      decisions when going out of SSA).  */\n   imm_store_chain_info *m_stores_head;\n \n+  /* The number of store chains currently tracked.  */\n+  unsigned m_n_chains;\n+  /* The number of stores currently tracked.  */\n+  unsigned m_n_stores;\n+\n   bool process_store (gimple *);\n   bool terminate_and_process_chain (imm_store_chain_info *);\n   bool terminate_all_aliasing_chains (imm_store_chain_info **, gimple *);\n@@ -2435,6 +2441,8 @@ pass_store_merging::terminate_all_aliasing_chains (imm_store_chain_info\n bool\n pass_store_merging::terminate_and_process_chain (imm_store_chain_info *chain_info)\n {\n+  m_n_stores -= chain_info->m_store_info.length ();\n+  m_n_chains--;\n   bool ret = chain_info->terminate_and_process_chain ();\n   m_stores.remove (chain_info->base_addr);\n   delete chain_info;\n@@ -4711,6 +4719,9 @@ imm_store_chain_info::output_merged_stores ()\n bool\n imm_store_chain_info::terminate_and_process_chain ()\n {\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"Terminating chain with %u stores\\n\",\n+\t     m_store_info.length ());\n   /* Process store chain.  */\n   bool ret = false;\n   if (m_store_info.length () > 1)\n@@ -5159,6 +5170,7 @@ pass_store_merging::process_store (gimple *stmt)\n \t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n       (*chain_info)->m_store_info.safe_push (info);\n+      m_n_stores++;\n       ret |= terminate_all_aliasing_chains (chain_info, stmt);\n       /* If we reach the limit of stores to merge in a chain terminate and\n \t process the chain now.  */\n@@ -5170,30 +5182,64 @@ pass_store_merging::process_store (gimple *stmt)\n \t\t     \"Reached maximum number of statements to merge:\\n\");\n \t  ret |= terminate_and_process_chain (*chain_info);\n \t}\n-      return ret;\n     }\n+  else\n+    {\n+      /* Store aliases any existing chain?  */\n+      ret |= terminate_all_aliasing_chains (NULL, stmt);\n \n-  /* Store aliases any existing chain?  */\n-  ret |= terminate_all_aliasing_chains (NULL, stmt);\n-  /* Start a new chain.  */\n-  class imm_store_chain_info *new_chain\n-    = new imm_store_chain_info (m_stores_head, base_addr);\n-  info = new store_immediate_info (const_bitsize, const_bitpos,\n-\t\t\t\t   const_bitregion_start,\n-\t\t\t\t   const_bitregion_end,\n-\t\t\t\t   stmt, 0, rhs_code, n, ins_stmt,\n-\t\t\t\t   bit_not_p, lp_nr_for_store (stmt),\n-\t\t\t\t   ops[0], ops[1]);\n-  new_chain->m_store_info.safe_push (info);\n-  m_stores.put (base_addr, new_chain);\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n+      /* Start a new chain.  */\n+      class imm_store_chain_info *new_chain\n+\t  = new imm_store_chain_info (m_stores_head, base_addr);\n+      info = new store_immediate_info (const_bitsize, const_bitpos,\n+\t\t\t\t       const_bitregion_start,\n+\t\t\t\t       const_bitregion_end,\n+\t\t\t\t       stmt, 0, rhs_code, n, ins_stmt,\n+\t\t\t\t       bit_not_p, lp_nr_for_store (stmt),\n+\t\t\t\t       ops[0], ops[1]);\n+      new_chain->m_store_info.safe_push (info);\n+      m_n_stores++;\n+      m_stores.put (base_addr, new_chain);\n+      m_n_chains++;\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"Starting active chain number %u with statement:\\n\",\n+\t\t   m_n_chains);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n+\t  fprintf (dump_file, \"The base object is:\\n\");\n+\t  print_generic_expr (dump_file, base_addr);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+    }\n+\n+  /* Prune oldest chains so that after adding the chain or store above\n+     we're again within the limits set by the params.  */\n+  if (m_n_chains > (unsigned)param_max_store_chains_to_track\n+      || m_n_stores > (unsigned)param_max_stores_to_track)\n     {\n-      fprintf (dump_file, \"Starting new chain with statement:\\n\");\n-      print_gimple_stmt (dump_file, stmt, 0);\n-      fprintf (dump_file, \"The base object is:\\n\");\n-      print_generic_expr (dump_file, base_addr);\n-      fprintf (dump_file, \"\\n\");\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"Too many chains (%u > %d) or stores (%u > %d), \"\n+\t\t \"terminating oldest chain(s).\\n\", m_n_chains,\n+\t\t param_max_store_chains_to_track, m_n_stores,\n+\t\t param_max_stores_to_track);\n+      imm_store_chain_info **e = &m_stores_head;\n+      unsigned idx = 0;\n+      unsigned n_stores = 0;\n+      while (*e)\n+\t{\n+\t  if (idx >= (unsigned)param_max_store_chains_to_track\n+\t      || (n_stores + (*e)->m_store_info.length ()\n+\t\t  > (unsigned)param_max_stores_to_track))\n+\t    terminate_and_process_chain (*e);\n+\t  else\n+\t    {\n+\t      n_stores += (*e)->m_store_info.length ();\n+\t      e = &(*e)->next;\n+\t      ++idx;\n+\t    }\n+\t}\n     }\n+\n   return ret;\n }\n "}, {"sha": "c633648d0472264c1be7a21f2e4d7d4134cf86b8", "filename": "gcc/params.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d94b52ea8478334fb92cca545f0bd904bd0034/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d94b52ea8478334fb92cca545f0bd904bd0034/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=95d94b52ea8478334fb92cca545f0bd904bd0034", "patch": "@@ -681,6 +681,14 @@ Maximum number of constant stores to merge in the store merging pass.\n Common Joined UInteger Var(param_max_stores_to_sink) Init(2) Param Optimization\n Maximum number of conditional store pairs that can be sunk.\n \n+-param=max-store-chains-to-track=\n+Common Joined UInteger Var(param_max_store_chains_to_track) Init(64) IntegerRange(1, 65536)\n+Maximum number of store chains to track at the same time in the store merging pass.\n+\n+-param=max-stores-to-track=\n+Common Joined UInteger Var(param_max_stores_to_track) Init(1024) IntegerRange(2, 1048576)\n+Maximum number of store chains to track at the same time in the store merging pass.\n+\n -param=max-tail-merge-comparisons=\n Common Joined UInteger Var(param_max_tail_merge_comparisons) Init(10) Param Optimization\n Maximum amount of similar bbs to compare a bb with."}]}