{"sha": "693445c9123e815d55daade0d5e32aee2583185b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzNDQ1YzkxMjNlODE1ZDU1ZGFhZGUwZDVlMzJhZWUyNTgzMTg1Yg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-04T22:08:34Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-04T22:08:34Z"}, "message": "Revert accidential commits.\n\nFrom-SVN: r192107", "tree": {"sha": "76b688187f485e097831a06e1b02c4f204993fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76b688187f485e097831a06e1b02c4f204993fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/693445c9123e815d55daade0d5e32aee2583185b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693445c9123e815d55daade0d5e32aee2583185b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693445c9123e815d55daade0d5e32aee2583185b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693445c9123e815d55daade0d5e32aee2583185b/comments", "author": null, "committer": null, "parents": [{"sha": "06c5d264f8305959568934fbc00ddcc618eb3767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c5d264f8305959568934fbc00ddcc618eb3767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06c5d264f8305959568934fbc00ddcc618eb3767"}], "stats": {"total": 45, "additions": 10, "deletions": 35}, "files": [{"sha": "7a1c4d33a58017365cad9f7530ba60bde38a74b4", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693445c9123e815d55daade0d5e32aee2583185b/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693445c9123e815d55daade0d5e32aee2583185b/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=693445c9123e815d55daade0d5e32aee2583185b", "patch": "@@ -835,13 +835,9 @@\n \n (define_insn_and_split \"*cmp_div0s_1\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-;;\t(ge:SI (xor:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n-;;\t\t       (match_operand:SI 2 \"arith_reg_operand\" \"\"))\n-;;\t       (const_int 0)))\n-\t(xor:SI (lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\")\n-\t\t\t     (const_int 31))\n-\t\t(ge:SI (match_operand:SI 2 \"arith_reg_operand\")\n-\t\t       (const_int 0))))\n+\t(ge:SI (xor:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n+\t\t       (match_operand:SI 2 \"arith_reg_operand\" \"\"))\n+\t       (const_int 0)))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n@@ -857,13 +853,9 @@\n \n (define_insn_and_split \"*cmp_div0s_1\"\n   [(set (reg:SI T_REG)\n-;;\t(ge:SI (xor:SI (match_operand:SI 0 \"arith_reg_operand\" \"\")\n-;;\t\t       (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n-;;\t       (const_int 0)))]\n-\t(eq:SI (lshiftrt:SI (match_operand:SI 0 \"arith_reg_operand\")\n-\t\t\t    (const_int 31))\n-\t       (ge:SI (match_operand:SI 1 \"arith_reg_operand\")\n-\t\t      (const_int 0))))]\n+\t(ge:SI (xor:SI (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t\t       (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t       (const_int 0)))]\n   \"TARGET_SH1\"\n   \"#\"\n   \"&& can_create_pseudo_p ()\"\n@@ -1010,13 +1002,9 @@\n \n (define_insn_and_split \"*cbranch_div0s\"\n   [(set (pc)\n-;;\t(if_then_else (ge (xor:SI (match_operand:SI 0 \"arith_reg_operand\" \"\")\n-;;\t\t\t\t  (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n-;;\t\t\t  (const_int 0))\n-\t(if_then_else (eq (lshiftrt:SI (match_operand:SI 0 \"arith_reg_operand\")\n-\t\t\t\t       (const_int 31))\n-\t\t\t  (ge:SI (match_operand:SI 1 \"arith_reg_operand\")\n-\t\t\t\t (const_int 0)))\n+\t(if_then_else (ge (xor:SI (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t\t\t\t  (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 2))\n \t\t      (pc)))\n    (clobber (reg:SI T_REG))]\n@@ -10681,19 +10669,6 @@ label:\n    DONE;\n })\n \n-;; The *cstoresi pattern is for combine, so that it can apply some\n-;; comparison canonicalization if it hasn't been done before.\n-(define_insn_and_split \"*cstoresi\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\")\n-\t(ge:SI (match_operand:SI 1 \"arith_reg_operand\")\n-\t       (const_int 0)))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:SI T_REG) (ge:SI (match_dup 1) (const_int 0)))\n-   (set (match_dup 0) (reg:SI T_REG))])\n-\n (define_expand \"cstoredi4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 1 \"comparison_operator\""}, {"sha": "037f916f34f776d35ff1748cc47430ddf4244282", "filename": "gcc/testsuite/gcc.target/sh/pr52933-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693445c9123e815d55daade0d5e32aee2583185b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693445c9123e815d55daade0d5e32aee2583185b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c?ref=693445c9123e815d55daade0d5e32aee2583185b", "patch": "@@ -8,7 +8,7 @@\n /* { dg-final { scan-assembler-times \"div0s\" 25 } } */\n /* { dg-final { scan-assembler-not \"tst\" } } */\n \n-// typedef unsigned char bool;\n+typedef unsigned char bool;\n \n int other_func_a (int, int);\n int other_func_b (int, int);"}]}