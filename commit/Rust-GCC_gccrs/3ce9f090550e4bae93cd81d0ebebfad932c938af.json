{"sha": "3ce9f090550e4bae93cd81d0ebebfad932c938af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlOWYwOTA1NTBlNGJhZTkzY2Q4MWQwZWJlYmZhZDkzMmM5MzhhZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-07-07T13:24:21Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-07-07T13:24:21Z"}, "message": "gcc.c (%[Spec]): Don't document.\n\n\t* gcc.c (%[Spec]): Don't document.\n\t(struct spec_list): Update comment.\n\t(do_spec_1): Don't handle %[Spec].\n\t* doc/invoke.texi (%[@var{name}]): Remove documentation of spec.\n\nFrom-SVN: r175970", "tree": {"sha": "65056fe4e7576161deac5116d3bed950c6d8f543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65056fe4e7576161deac5116d3bed950c6d8f543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ce9f090550e4bae93cd81d0ebebfad932c938af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce9f090550e4bae93cd81d0ebebfad932c938af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce9f090550e4bae93cd81d0ebebfad932c938af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce9f090550e4bae93cd81d0ebebfad932c938af/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41dfca871e78a0bae628716ca066b5b5269f54f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41dfca871e78a0bae628716ca066b5b5269f54f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41dfca871e78a0bae628716ca066b5b5269f54f5"}], "stats": {"total": 78, "additions": 17, "deletions": 61}, "files": [{"sha": "b2be0973cb0d998104cddec5d80d1767f2b7ca2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce9f090550e4bae93cd81d0ebebfad932c938af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce9f090550e4bae93cd81d0ebebfad932c938af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ce9f090550e4bae93cd81d0ebebfad932c938af", "patch": "@@ -1,3 +1,10 @@\n+2011-07-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.c (%[Spec]): Don't document.\n+\t(struct spec_list): Update comment.\n+\t(do_spec_1): Don't handle %[Spec].\n+\t* doc/invoke.texi (%[@var{name}]): Remove documentation of spec.\n+\n 2011-07-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* common/common-target-def.h (TARGET_HAVE_NAMED_SECTIONS): Don't"}, {"sha": "0be0f4d125b78611f987c9effa19daf8efde5c43", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce9f090550e4bae93cd81d0ebebfad932c938af/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce9f090550e4bae93cd81d0ebebfad932c938af/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3ce9f090550e4bae93cd81d0ebebfad932c938af", "patch": "@@ -9768,9 +9768,6 @@ Use this when inconsistent options are detected.\n @item %(@var{name})\n Substitute the contents of spec string @var{name} at this point.\n \n-@item %[@var{name}]\n-Like @samp{%(@dots{})} but put @samp{__} around @option{-D} arguments.\n-\n @item %x@{@var{option}@}\n Accumulate an option for @samp{%X}.\n "}, {"sha": "5e5d3c2b81e746bae05d7d5466952de3fa9be250", "filename": "gcc/gcc.c", "status": "modified", "additions": 10, "deletions": 58, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce9f090550e4bae93cd81d0ebebfad932c938af/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce9f090550e4bae93cd81d0ebebfad932c938af/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3ce9f090550e4bae93cd81d0ebebfad932c938af", "patch": "@@ -438,7 +438,6 @@ or with constant text in a single argument.\n           This may be combined with '.', '!', ',', '|', and '*' as above.\n \n  %(Spec) processes a specification defined in a specs file as *Spec:\n- %[Spec] as above, but put __ around -D arguments\n \n The conditional text X in a %{S:X} or similar construct may contain\n other nested % constructs or spaces, or even newlines.  They are\n@@ -1149,8 +1148,8 @@ static const char *multilib_dir;\n static const char *multilib_os_dir;\n \f\n /* Structure to keep track of the specs that have been defined so far.\n-   These are accessed using %(specname) or %[specname] in a compiler\n-   or link spec.  */\n+   These are accessed using %(specname) in a compiler or link\n+   spec.  */\n \n struct spec_list\n {\n@@ -5212,11 +5211,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \n \t    /* Process a string found as the value of a spec given by name.\n \t       This feature allows individual machine descriptions\n-\t       to add and use their own specs.\n-\t       %[...] modifies -D options the way %P does;\n-\t       %(...) uses the spec unmodified.  */\n-\t  case '[':\n-\t    warning (0, \"use of obsolete %%[ operator in specs\");\n+\t       to add and use their own specs.  */\n \t  case '(':\n \t    {\n \t      const char *name = p;\n@@ -5225,7 +5220,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \n \t      /* The string after the S/P is the name of a spec that is to be\n \t\t processed.  */\n-\t      while (*p && *p != ')' && *p != ']')\n+\t      while (*p && *p != ')')\n \t\tp++;\n \n \t      /* See if it's in the list.  */\n@@ -5234,63 +5229,20 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t  {\n \t\t    name = *(sl->ptr_spec);\n #ifdef DEBUG_SPECS\n-\t\t    fnotice (stderr, \"Processing spec %c%s%c, which is '%s'\\n\",\n-\t\t\t    c, sl->name, (c == '(') ? ')' : ']', name);\n+\t\t    fnotice (stderr, \"Processing spec (%s), which is '%s'\\n\",\n+\t\t\t     sl->name, name);\n #endif\n \t\t    break;\n \t\t  }\n \n \t      if (sl)\n \t\t{\n-\t\t  if (c == '(')\n-\t\t    {\n-\t\t      value = do_spec_1 (name, 0, NULL);\n-\t\t      if (value != 0)\n-\t\t\treturn value;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      char *x = (char *) alloca (strlen (name) * 2 + 1);\n-\t\t      char *buf = x;\n-\t\t      const char *y = name;\n-\t\t      int flag = 0;\n-\n-\t\t      /* Copy all of NAME into BUF, but put __ after\n-\t\t\t every -D and at the end of each arg.  */\n-\t\t      while (1)\n-\t\t\t{\n-\t\t\t  if (! strncmp (y, \"-D\", 2))\n-\t\t\t    {\n-\t\t\t      *x++ = '-';\n-\t\t\t      *x++ = 'D';\n-\t\t\t      *x++ = '_';\n-\t\t\t      *x++ = '_';\n-\t\t\t      y += 2;\n-\t\t\t      flag = 1;\n-\t\t\t      continue;\n-\t\t\t    }\n-\t\t\t  else if (flag\n-\t\t\t\t   && (*y == ' ' || *y == '\\t' || *y == '='\n-\t\t\t\t       || *y == '}' || *y == 0))\n-\t\t\t    {\n-\t\t\t      *x++ = '_';\n-\t\t\t      *x++ = '_';\n-\t\t\t      flag = 0;\n-\t\t\t    }\n-\t\t\t  if (*y == 0)\n-\t\t\t    break;\n-\t\t\t  else\n-\t\t\t    *x++ = *y++;\n-\t\t\t}\n-\t\t      *x = 0;\n-\n-\t\t      value = do_spec_1 (buf, 0, NULL);\n-\t\t      if (value != 0)\n-\t\t\treturn value;\n-\t\t    }\n+\t\t  value = do_spec_1 (name, 0, NULL);\n+\t\t  if (value != 0)\n+\t\t    return value;\n \t\t}\n \n-\t      /* Discard the closing paren or bracket.  */\n+\t      /* Discard the closing paren.  */\n \t      if (*p)\n \t\tp++;\n \t    }"}]}