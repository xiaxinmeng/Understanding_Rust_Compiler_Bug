{"sha": "0e67d46049a58b11d577736056157cc003c0f1d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2N2Q0NjA0OWE1OGIxMWQ1Nzc3MzYwNTYxNTdjYzAwM2MwZjFkOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse,cz", "date": "2002-10-22T22:38:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-10-22T22:38:07Z"}, "message": "i386.c (standard_sse_constant_p): Accept vector and integer zeros too.\n\n\t* i386.c (standard_sse_constant_p): Accept vector and integer zeros too.\n\t* i386.h (EXTRA_CONSTRAINT): Recognize 'C'\n\t* i386.md (movti_internal): Use 'C'\n\n\t* xmmintrin.h (_mm_cmplt_epi*): New.\n\nFrom-SVN: r58423", "tree": {"sha": "c33e2bada4128614a42748badc75685502820080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33e2bada4128614a42748badc75685502820080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e67d46049a58b11d577736056157cc003c0f1d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e67d46049a58b11d577736056157cc003c0f1d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e67d46049a58b11d577736056157cc003c0f1d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e67d46049a58b11d577736056157cc003c0f1d8/comments", "author": null, "committer": null, "parents": [{"sha": "d5869ca0f117a34b5a483fb34f6d45f4e103871a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5869ca0f117a34b5a483fb34f6d45f4e103871a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5869ca0f117a34b5a483fb34f6d45f4e103871a"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "c1f445a23af74dc342fad6982bc4e8330e18714d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e67d46049a58b11d577736056157cc003c0f1d8", "patch": "@@ -1,3 +1,11 @@\n+Wed Oct 23 00:33:11 CEST 2002  Jan Hubicka  <jh@suse,cz>\n+\n+\t* i386.c (standard_sse_constant_p): Accept vector and integer zeros too.\n+\t* i386.h (EXTRA_CONSTRAINT): Recognize 'C'\n+\t* i386.md (movti_internal): Use 'C'\n+\n+\t* xmmintrin.h (_mm_cmplt_epi*): New.\n+\n 2002-10-22  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"*movdi_64\"): Fix op_type attribute."}, {"sha": "efce0f3238213af431ca7089e2f063a3ce978ce2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0e67d46049a58b11d577736056157cc003c0f1d8", "patch": "@@ -3749,8 +3749,8 @@ int\n standard_sse_constant_p (x)\n      rtx x;\n {\n-  if (GET_CODE (x) != CONST_DOUBLE)\n-    return -1;\n+  if (x == const0_rtx)\n+    return 1;\n   return (x == CONST0_RTX (GET_MODE (x)));\n }\n "}, {"sha": "a679d3d469e5b2e7af6cf96407cd8e14cb171a67", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0e67d46049a58b11d577736056157cc003c0f1d8", "patch": "@@ -1425,9 +1425,10 @@ enum reg_class\n    the constraint letter C.  If C is not defined as an extra\n    constraint, the value returned should be 0 regardless of VALUE.  */\n \n-#define EXTRA_CONSTRAINT(VALUE, C)\t\t\t\t\\\n-  ((C) == 'e' ? x86_64_sign_extended_value (VALUE, 0)\t\t\\\n-   : (C) == 'Z' ? x86_64_zero_extended_value (VALUE)\t\t\\\n+#define EXTRA_CONSTRAINT(VALUE, D)\t\t\t\t\\\n+  ((D) == 'e' ? x86_64_sign_extended_value (VALUE, 0)\t\t\\\n+   : (D) == 'Z' ? x86_64_zero_extended_value (VALUE)\t\t\\\n+   : (D) == 'C' ? standard_sse_constant_p (VALUE)\t\t\\\n    : 0)\n \n /* Place additional restrictions on the register class to use when it"}, {"sha": "7e90501b445ac7a9b1f4957f752870db5ae07b23", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0e67d46049a58b11d577736056157cc003c0f1d8", "patch": "@@ -18145,7 +18145,7 @@\n \n (define_insn \"movti_internal\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,x,m\")\n-\t(match_operand:TI 1 \"general_operand\" \"O,xm,x\"))]\n+\t(match_operand:TI 1 \"general_operand\" \"C,xm,x\"))]\n   \"TARGET_SSE && !TARGET_64BIT\"\n   \"@\n    xorps\\t%0, %0"}, {"sha": "2740824cd90c5721ebd4cebd059fc160d5ab2028", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e67d46049a58b11d577736056157cc003c0f1d8/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=0e67d46049a58b11d577736056157cc003c0f1d8", "patch": "@@ -2307,6 +2307,24 @@ _mm_cmpeq_epi32 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_pcmpeqd128 ((__v4si)__A, (__v4si)__B);\n }\n \n+static __inline __m128i\n+_mm_cmplt_epi8 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i)__builtin_ia32_pcmpgtb128 ((__v16qi)__B, (__v16qi)__A);\n+}\n+\n+static __inline __m128i\n+_mm_cmplt_epi16 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i)__builtin_ia32_pcmpgtw128 ((__v8hi)__B, (__v8hi)__A);\n+}\n+\n+static __inline __m128i\n+_mm_cmplt_epi32 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i)__builtin_ia32_pcmpgtd128 ((__v4si)__B, (__v4si)__A);\n+}\n+\n static __inline __m128i\n _mm_cmpgt_epi8 (__m128i __A, __m128i __B)\n {"}]}