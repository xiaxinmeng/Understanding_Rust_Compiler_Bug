{"sha": "254830bab29913361ddd47358d3d90b7d4a49f3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU0ODMwYmFiMjk5MTMzNjFkZGQ0NzM1OGQzZDkwYjdkNGE0OWYzZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-09-13T16:08:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-09-13T16:08:59Z"}, "message": "fix-it hints: insert_before vs insert_after\n\nThe API for adding \"insert text\" fix-it hints was unclear\nabout exactly where the text should be inserted relative\nto the given insertion point.\n\nThis patch clarifies things by renaming the pertinent methods from\n  richloc.add_fixit_insert\nto\n  richloc.add_fixit_insert_before\nand adding:\n  richloc.add_fixit_insert_after\n\nThe latter allows us to consolidate some failure-handling into\nclass rich_location, rather than having to have every such diagnostic\ncheck for it.\n\nThe patch also adds a description of how fix-it hints work to the\ncomment for class rich_location within libcpp/include/line-map.h.\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (warn_logical_not_parentheses): Replace\n\trich_location::add_fixit_insert calls with add_fixit_insert_before\n\tand add_fixit_insert_after, eliminating the \"next_loc\" calculation.\n\ngcc/c/ChangeLog:\n\t* c-parser.c (c_parser_declaration_or_fndef): Update for renaming\n\tof add_fixit_insert to add_fixit_insert_before.\n\ngcc/cp/ChangeLog:\n\t* parser.c (cp_parser_class_specifier_1): Update for renaming of\n\tadd_fixit_insert to add_fixit_insert_before.\n\t(cp_parser_class_head): Likewise.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c (selftest::test_one_liner_fixit_insert):\n\tRename to...\n\t(selftest::test_one_liner_fixit_insert_before): ...this, and update\n\tfor renaming of add_fixit_insert to add_fixit_insert_before.\n\t(selftest::test_one_liner_fixit_insert_after): New function.\n\t(selftest::test_one_liner_fixit_validation_adhoc_locations):\n\tUpdate for renaming of add_fixit_insert to\n\tadd_fixit_insert_before.\n\t(selftest::test_one_liner_many_fixits): Likewise.\n\t(selftest::test_diagnostic_show_locus_one_liner): Update for\n\trenaming, call new test function.\n\t(selftest::test_diagnostic_show_locus_fixit_lines): Update for\n\trenaming of add_fixit_insert to add_fixit_insert_before.\n\t(selftest::test_fixit_consolidation): Likewise.\n\t* diagnostic.c (selftest::test_print_parseable_fixits_insert):\n\tLikewise.\n\t* edit-context.c (selftest::test_applying_fixits_insert): Rename\n\tto...\n\t(selftest::test_applying_fixits_insert_before): ...this.\n\t(selftest::test_applying_fixits_insert): Update for renaming of\n\tadd_fixit_insert to add_fixit_insert_before.\n\t(selftest::test_applying_fixits_insert_after): New function.\n\t(selftest::test_applying_fixits_insert_after_at_line_end): New\n\tfunction.\n\t(selftest::test_applying_fixits_insert_after_failure): New\n\tfunction.\n\t(selftest::test_applying_fixits_multiple): Update for renaming of\n\tadd_fixit_insert to add_fixit_insert_before.\n\t(selftest::change_line): Likewise.\n\t(selftest::test_applying_fixits_unreadable_file): Likewise.\n\t(selftest::test_applying_fixits_line_out_of_range): Likewise.\n\t(selftest::test_applying_fixits_column_validation): Likewise.\n\t(selftest::test_applying_fixits_column_validation): Likewise.\n\t(selftest::edit_context_c_tests): Update for renamed test\n\tfunction; call new test functions.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n\t(test_show_locus): Replace rich_location::add_fixit_insert calls\n\twith add_fixit_insert_before and add_fixit_insert_after.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (class rich_location): Add description of\n\tfix-it hints to leading comment.\n\t(rich_location::add_fixit_insert): Rename both overloaded methods\n\tto..\n\t(rich_location::add_fixit_insert_before): ...this, updating their\n\tcomments.\n\t(rich_location::add_fixit_insert_after): Two new overloaded\n\tmethods.\n\t(rich_location::stop_supporting_fixits): New method.\n\t* line-map.c (rich_location::add_fixit_insert): Rename both\n\toverloaded methods to..\n\t(rich_location::add_fixit_insert_before): ...this, updating their\n\tcomments.\n\t(rich_location::add_fixit_insert_after): Two new methods.\n\t(rich_location::reject_impossible_fixit): Split out\n\tfailure-handling into...\n\t(rich_location::stop_supporting_fixits): New method.\n\nFrom-SVN: r240115", "tree": {"sha": "f49ba2c7c6f8a048ee6c7db0ecc48ec1bbe3d897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f49ba2c7c6f8a048ee6c7db0ecc48ec1bbe3d897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/254830bab29913361ddd47358d3d90b7d4a49f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254830bab29913361ddd47358d3d90b7d4a49f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254830bab29913361ddd47358d3d90b7d4a49f3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254830bab29913361ddd47358d3d90b7d4a49f3d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c77b8713a77e9b30420fc8c594b9c35c95580daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77b8713a77e9b30420fc8c594b9c35c95580daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77b8713a77e9b30420fc8c594b9c35c95580daa"}], "stats": {"total": 476, "additions": 423, "deletions": 53}, "files": [{"sha": "93c90ce07856497b4a4ccdbe94caf983fb7c8771", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1,3 +1,41 @@\n+2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c (selftest::test_one_liner_fixit_insert):\n+\tRename to...\n+\t(selftest::test_one_liner_fixit_insert_before): ...this, and update\n+\tfor renaming of add_fixit_insert to add_fixit_insert_before.\n+\t(selftest::test_one_liner_fixit_insert_after): New function.\n+\t(selftest::test_one_liner_fixit_validation_adhoc_locations):\n+\tUpdate for renaming of add_fixit_insert to\n+\tadd_fixit_insert_before.\n+\t(selftest::test_one_liner_many_fixits): Likewise.\n+\t(selftest::test_diagnostic_show_locus_one_liner): Update for\n+\trenaming, call new test function.\n+\t(selftest::test_diagnostic_show_locus_fixit_lines): Update for\n+\trenaming of add_fixit_insert to add_fixit_insert_before.\n+\t(selftest::test_fixit_consolidation): Likewise.\n+\t* diagnostic.c (selftest::test_print_parseable_fixits_insert):\n+\tLikewise.\n+\t* edit-context.c (selftest::test_applying_fixits_insert): Rename\n+\tto...\n+\t(selftest::test_applying_fixits_insert_before): ...this.\n+\t(selftest::test_applying_fixits_insert): Update for renaming of\n+\tadd_fixit_insert to add_fixit_insert_before.\n+\t(selftest::test_applying_fixits_insert_after): New function.\n+\t(selftest::test_applying_fixits_insert_after_at_line_end): New\n+\tfunction.\n+\t(selftest::test_applying_fixits_insert_after_failure): New\n+\tfunction.\n+\t(selftest::test_applying_fixits_multiple): Update for renaming of\n+\tadd_fixit_insert to add_fixit_insert_before.\n+\t(selftest::change_line): Likewise.\n+\t(selftest::test_applying_fixits_unreadable_file): Likewise.\n+\t(selftest::test_applying_fixits_line_out_of_range): Likewise.\n+\t(selftest::test_applying_fixits_column_validation): Likewise.\n+\t(selftest::test_applying_fixits_column_validation): Likewise.\n+\t(selftest::edit_context_c_tests): Update for renamed test\n+\tfunction; call new test functions.\n+\n 2016-09-13  Pat Haugen  <pthaugen@us.ibm.com>\n \n \tPR tree-optimization/77536"}, {"sha": "5a2cbbef4160c07dd3ce3e63db75f2cae28ad5d2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1,3 +1,9 @@\n+2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (warn_logical_not_parentheses): Replace\n+\trich_location::add_fixit_insert calls with add_fixit_insert_before\n+\tand add_fixit_insert_after, eliminating the \"next_loc\" calculation.\n+\n 2016-09-13  Jason Merrill  <jason@redhat.com>\n \t    Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "1132a03138446ef14795186f547b4d1b53ecd575", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1544,11 +1544,8 @@ warn_logical_not_parentheses (location_t location, enum tree_code code,\n     {\n       location_t lhs_loc = EXPR_LOCATION (lhs);\n       rich_location richloc (line_table, lhs_loc);\n-      richloc.add_fixit_insert (lhs_loc, \"(\");\n-      location_t finish = get_finish (lhs_loc);\n-      location_t next_loc\n-\t= linemap_position_for_loc_and_offset (line_table, finish, 1);\n-      richloc.add_fixit_insert (next_loc, \")\");\n+      richloc.add_fixit_insert_before (lhs_loc, \"(\");\n+      richloc.add_fixit_insert_after (lhs_loc, \")\");\n       inform_at_rich_loc (&richloc, \"add parentheses around left hand side \"\n \t\t\t  \"expression to silence this warning\");\n     }"}, {"sha": "4a9881d351a5fd8531552066ada950057be7afbc", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1,3 +1,8 @@\n+2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-parser.c (c_parser_declaration_or_fndef): Update for renaming\n+\tof add_fixit_insert to add_fixit_insert_before.\n+\n 2016-09-13  Marek Polacek  <polacek@redhat.com>\n \n \t* c-typeck.c (build_unary_op): Rename FLAG parameter to NOCONVERT.  Use"}, {"sha": "e71c0d5b9b543199f83232599ba760ca4c6f1d5c", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1685,23 +1685,23 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n       if (tag_exists_p (RECORD_TYPE, name))\n \t{\n \t  /* This is not C++ with its implicit typedef.  */\n-\t  richloc.add_fixit_insert (\"struct \");\n+\t  richloc.add_fixit_insert_before (\"struct \");\n \t  error_at_rich_loc (&richloc,\n \t\t\t     \"unknown type name %qE;\"\n \t\t\t     \" use %<struct%> keyword to refer to the type\",\n \t\t\t     name);\n \t}\n       else if (tag_exists_p (UNION_TYPE, name))\n \t{\n-\t  richloc.add_fixit_insert (\"union \");\n+\t  richloc.add_fixit_insert_before (\"union \");\n \t  error_at_rich_loc (&richloc,\n \t\t\t     \"unknown type name %qE;\"\n \t\t\t     \" use %<union%> keyword to refer to the type\",\n \t\t\t     name);\n \t}\n       else if (tag_exists_p (ENUMERAL_TYPE, name))\n \t{\n-\t  richloc.add_fixit_insert (\"enum \");\n+\t  richloc.add_fixit_insert_before (\"enum \");\n \t  error_at_rich_loc (&richloc,\n \t\t\t     \"unknown type name %qE;\"\n \t\t\t     \" use %<enum%> keyword to refer to the type\","}, {"sha": "79691bf68927fc0020b725e76e3cdcc2b82f6111", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1,3 +1,9 @@\n+2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* parser.c (cp_parser_class_specifier_1): Update for renaming of\n+\tadd_fixit_insert to add_fixit_insert_before.\n+\t(cp_parser_class_head): Likewise.\n+\n 2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/77496"}, {"sha": "73a37814b5969c12b4dadafdbbf271be6cc6a5f5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -21594,7 +21594,7 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t  next_loc = linemap_position_for_loc_and_offset (line_table, loc, 1);\n \n \trich_location richloc (line_table, next_loc);\n-\trichloc.add_fixit_insert (next_loc, \";\");\n+\trichloc.add_fixit_insert_before (next_loc, \";\");\n \n \tif (CLASSTYPE_DECLARED_CLASS (type))\n \t  error_at_rich_loc (&richloc,\n@@ -22037,7 +22037,8 @@ cp_parser_class_head (cp_parser* parser,\n                          class_head_start_location,\n                          get_finish (type_start_token->location));\n       rich_location richloc (line_table, reported_loc);\n-      richloc.add_fixit_insert (class_head_start_location, \"template <> \");\n+      richloc.add_fixit_insert_before (class_head_start_location,\n+                                       \"template <> \");\n       error_at_rich_loc\n         (&richloc,\n          \"an explicit specialization must be preceded by %<template <>%>\");"}, {"sha": "331eb92f9686b1c4d23a0c976a19718c7badf09c", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1661,12 +1661,12 @@ test_one_liner_multiple_carets_and_ranges ()\n /* Insertion fix-it hint: adding an \"&\" to the front of \"bar.field\". */\n \n static void\n-test_one_liner_fixit_insert ()\n+test_one_liner_fixit_insert_before ()\n {\n   test_diagnostic_context dc;\n   location_t caret = linemap_position_for_column (line_table, 7);\n   rich_location richloc (line_table, caret);\n-  richloc.add_fixit_insert (\"&\");\n+  richloc.add_fixit_insert_before (\"&\");\n   diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n   ASSERT_STREQ (\"\\n\"\n \t\t\" foo = bar.field;\\n\"\n@@ -1675,6 +1675,25 @@ test_one_liner_fixit_insert ()\n \t\tpp_formatted_text (dc.printer));\n }\n \n+/* Insertion fix-it hint: adding a \"[0]\" after \"foo\". */\n+\n+static void\n+test_one_liner_fixit_insert_after ()\n+{\n+  test_diagnostic_context dc;\n+  location_t start = linemap_position_for_column (line_table, 1);\n+  location_t finish = linemap_position_for_column (line_table, 3);\n+  location_t foo = make_location (start, start, finish);\n+  rich_location richloc (line_table, foo);\n+  richloc.add_fixit_insert_after (\"[0]\");\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar.field;\\n\"\n+\t\t\" ^~~\\n\"\n+\t\t\"    [0]\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n /* Removal fix-it hint: removal of the \".field\". */\n \n static void\n@@ -1785,7 +1804,7 @@ test_one_liner_fixit_validation_adhoc_locations ()\n   /* Insert.  */\n   {\n     rich_location richloc (line_table, loc);\n-    richloc.add_fixit_insert (loc, \"test\");\n+    richloc.add_fixit_insert_before (loc, \"test\");\n     /* It should not have been discarded by the validator.  */\n     ASSERT_EQ (1, richloc.get_num_fixit_hints ());\n \n@@ -1843,7 +1862,7 @@ test_one_liner_many_fixits ()\n   location_t equals = linemap_position_for_column (line_table, 5);\n   rich_location richloc (line_table, equals);\n   for (int i = 0; i < 19; i++)\n-    richloc.add_fixit_insert (\"a\");\n+    richloc.add_fixit_insert_before (\"a\");\n   ASSERT_EQ (19, richloc.get_num_fixit_hints ());\n   diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n   ASSERT_STREQ (\"\\n\"\n@@ -1898,7 +1917,8 @@ test_diagnostic_show_locus_one_liner (const line_table_case &case_)\n   test_one_liner_simple_caret ();\n   test_one_liner_caret_and_range ();\n   test_one_liner_multiple_carets_and_ranges ();\n-  test_one_liner_fixit_insert ();\n+  test_one_liner_fixit_insert_before ();\n+  test_one_liner_fixit_insert_after ();\n   test_one_liner_fixit_remove ();\n   test_one_liner_fixit_replace ();\n   test_one_liner_fixit_replace_non_equal_range ();\n@@ -1949,7 +1969,7 @@ test_diagnostic_show_locus_fixit_lines (const line_table_case &case_)\n     const location_t colon\n       = linemap_position_for_line_and_column (line_table, ord_map, 2, 25);\n     rich_location richloc (line_table, colon);\n-    richloc.add_fixit_insert (x, \".\");\n+    richloc.add_fixit_insert_before (x, \".\");\n     richloc.add_fixit_replace (colon, \"=\");\n     diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n     ASSERT_STREQ (\"\\n\"\n@@ -1970,7 +1990,7 @@ test_diagnostic_show_locus_fixit_lines (const line_table_case &case_)\n     const location_t colon\n       = linemap_position_for_line_and_column (line_table, ord_map, 6, 25);\n     rich_location richloc (line_table, colon);\n-    richloc.add_fixit_insert (y, \".\");\n+    richloc.add_fixit_insert_before (y, \".\");\n     richloc.add_fixit_replace (colon, \"=\");\n     diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n     ASSERT_STREQ (\"\\n\"\n@@ -2012,8 +2032,8 @@ test_fixit_consolidation (const line_table_case &case_)\n   /* Insert + insert. */\n   {\n     rich_location richloc (line_table, caret);\n-    richloc.add_fixit_insert (c10, \"foo\");\n-    richloc.add_fixit_insert (c15, \"bar\");\n+    richloc.add_fixit_insert_before (c10, \"foo\");\n+    richloc.add_fixit_insert_before (c15, \"bar\");\n \n     if (c15 > LINE_MAP_MAX_LOCATION_WITH_COLS)\n       /* Bogus column info for 2nd fixit, so no fixits.  */\n@@ -2026,7 +2046,7 @@ test_fixit_consolidation (const line_table_case &case_)\n   /* Insert + replace. */\n   {\n     rich_location richloc (line_table, caret);\n-    richloc.add_fixit_insert (c10, \"foo\");\n+    richloc.add_fixit_insert_before (c10, \"foo\");\n     richloc.add_fixit_replace (source_range::from_locations (c15, c17),\n \t\t\t       \"bar\");\n \n@@ -2043,7 +2063,7 @@ test_fixit_consolidation (const line_table_case &case_)\n     rich_location richloc (line_table, caret);\n     richloc.add_fixit_replace (source_range::from_locations (c10, c15),\n \t\t\t       \"bar\");\n-    richloc.add_fixit_insert (c17, \"foo\");\n+    richloc.add_fixit_insert_before (c17, \"foo\");\n \n     if (c17 > LINE_MAP_MAX_LOCATION_WITH_COLS)\n       /* Bogus column info for 2nd fixit, so no fixits.  */"}, {"sha": "585028ec21185094ab1d9e1289ea4f1e339390fe", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1504,7 +1504,7 @@ test_print_parseable_fixits_insert ()\n   linemap_line_start (line_table, 5, 100);\n   linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n   location_t where = linemap_position_for_column (line_table, 10);\n-  richloc.add_fixit_insert (where, \"added content\");\n+  richloc.add_fixit_insert_before (where, \"added content\");\n \n   print_parseable_fixits (&pp, &richloc);\n   ASSERT_STREQ (\"fix-it:\\\"test.c\\\":{5:10-5:10}:\\\"added content\\\"\\n\","}, {"sha": "5945f423d29c7091866243444de1669a06d7c8c9", "filename": "gcc/edit-context.c", "status": "modified", "additions": 151, "deletions": 12, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fedit-context.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Fedit-context.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fedit-context.c?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -918,10 +918,10 @@ test_get_content ()\n   }\n }\n \n-/* Test applying an \"insert\" fixit.  */\n+/* Test applying an \"insert\" fixit, using insert_before.  */\n \n static void\n-test_applying_fixits_insert (const line_table_case &case_)\n+test_applying_fixits_insert_before (const line_table_case &case_)\n {\n   /* Create a tempfile and write some text to it.\n      .........................0000000001111111.\n@@ -937,7 +937,7 @@ test_applying_fixits_insert (const line_table_case &case_)\n   /* Add a comment in front of \"bar.field\".  */\n   location_t start = linemap_position_for_column (line_table, 7);\n   rich_location richloc (line_table, start);\n-  richloc.add_fixit_insert (\"/* inserted */\");\n+  richloc.add_fixit_insert_before (\"/* inserted */\");\n \n   if (start > LINE_MAP_MAX_LOCATION_WITH_COLS)\n     return;\n@@ -971,6 +971,142 @@ test_applying_fixits_insert (const line_table_case &case_)\n \t\t\" /* after */\\n\", diff);\n }\n \n+/* Test applying an \"insert\" fixit, using insert_after, with\n+   a range of length > 1 (to ensure that the end-point of\n+   the input range is used).  */\n+\n+static void\n+test_applying_fixits_insert_after (const line_table_case &case_)\n+{\n+  /* Create a tempfile and write some text to it.\n+     .........................0000000001111111.\n+     .........................1234567890123456.  */\n+  const char *old_content = (\"/* before */\\n\"\n+\t\t\t     \"foo = bar.field;\\n\"\n+\t\t\t     \"/* after */\\n\");\n+  temp_source_file tmp (SELFTEST_LOCATION, \".c\", old_content);\n+  const char *filename = tmp.get_filename ();\n+  line_table_test ltt (case_);\n+  linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 2);\n+\n+  /* Add a comment after \"field\".  */\n+  location_t start = linemap_position_for_column (line_table, 11);\n+  location_t finish = linemap_position_for_column (line_table, 15);\n+  location_t field = make_location (start, start, finish);\n+  rich_location richloc (line_table, field);\n+  richloc.add_fixit_insert_after (\"/* inserted */\");\n+\n+  if (finish > LINE_MAP_MAX_LOCATION_WITH_COLS)\n+    return;\n+\n+  /* Verify that the text was inserted after the end of \"field\". */\n+  edit_context edit;\n+  edit.add_fixits (&richloc);\n+  auto_free <char *> new_content = edit.get_content (filename);\n+  ASSERT_STREQ (\"/* before */\\n\"\n+\t\t\"foo = bar.field/* inserted */;\\n\"\n+\t\t\"/* after */\\n\", new_content);\n+\n+  /* Verify diff.  */\n+  auto_free <char *> diff = edit.generate_diff (false);\n+  ASSERT_STREQ (\"@@ -1,3 +1,3 @@\\n\"\n+\t\t\" /* before */\\n\"\n+\t\t\"-foo = bar.field;\\n\"\n+\t\t\"+foo = bar.field/* inserted */;\\n\"\n+\t\t\" /* after */\\n\", diff);\n+}\n+\n+/* Test applying an \"insert\" fixit, using insert_after at the end of\n+   a line (contrast with test_applying_fixits_insert_after_failure\n+   below).  */\n+\n+static void\n+test_applying_fixits_insert_after_at_line_end (const line_table_case &case_)\n+{\n+  /* Create a tempfile and write some text to it.\n+     .........................0000000001111111.\n+     .........................1234567890123456.  */\n+  const char *old_content = (\"/* before */\\n\"\n+\t\t\t     \"foo = bar.field;\\n\"\n+\t\t\t     \"/* after */\\n\");\n+  temp_source_file tmp (SELFTEST_LOCATION, \".c\", old_content);\n+  const char *filename = tmp.get_filename ();\n+  line_table_test ltt (case_);\n+  linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 2);\n+\n+  /* Add a comment after the semicolon.  */\n+  location_t loc = linemap_position_for_column (line_table, 16);\n+  rich_location richloc (line_table, loc);\n+  richloc.add_fixit_insert_after (\"/* inserted */\");\n+\n+  if (loc > LINE_MAP_MAX_LOCATION_WITH_COLS)\n+    return;\n+\n+  edit_context edit;\n+  edit.add_fixits (&richloc);\n+  auto_free <char *> new_content = edit.get_content (filename);\n+  ASSERT_STREQ (\"/* before */\\n\"\n+\t\t\"foo = bar.field;/* inserted */\\n\"\n+\t\t\"/* after */\\n\", new_content);\n+\n+  /* Verify diff.  */\n+  auto_free <char *> diff = edit.generate_diff (false);\n+  ASSERT_STREQ (\"@@ -1,3 +1,3 @@\\n\"\n+\t\t\" /* before */\\n\"\n+\t\t\"-foo = bar.field;\\n\"\n+\t\t\"+foo = bar.field;/* inserted */\\n\"\n+\t\t\" /* after */\\n\", diff);\n+}\n+\n+/* Test of a failed attempt to apply an \"insert\" fixit, using insert_after,\n+   due to the relevant linemap ending.  Contrast with\n+   test_applying_fixits_insert_after_at_line_end above.  */\n+\n+static void\n+test_applying_fixits_insert_after_failure (const line_table_case &case_)\n+{\n+  /* Create a tempfile and write some text to it.\n+     .........................0000000001111111.\n+     .........................1234567890123456.  */\n+  const char *old_content = (\"/* before */\\n\"\n+\t\t\t     \"foo = bar.field;\\n\"\n+\t\t\t     \"/* after */\\n\");\n+  temp_source_file tmp (SELFTEST_LOCATION, \".c\", old_content);\n+  const char *filename = tmp.get_filename ();\n+  line_table_test ltt (case_);\n+  linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 2);\n+\n+  /* Add a comment after the semicolon.  */\n+  location_t loc = linemap_position_for_column (line_table, 16);\n+  rich_location richloc (line_table, loc);\n+\n+  /* We want a failure of linemap_position_for_loc_and_offset.\n+     We can do this by starting a new linemap at line 3, so that\n+     there is no appropriate location value for the insertion point\n+     within the linemap for line 2.  */\n+  linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 3);\n+\n+  /* The failure fails to happen at the transition point from\n+     packed ranges to unpacked ranges (where there are some \"spare\"\n+     location_t values).  Skip the test there.  */\n+  if (loc >= LINE_MAP_MAX_LOCATION_WITH_PACKED_RANGES)\n+    return;\n+\n+  /* Offsetting \"loc\" should now fail (by returning the input loc. */\n+  ASSERT_EQ (loc, linemap_position_for_loc_and_offset (line_table, loc, 1));\n+\n+  /* Hence attempting to use add_fixit_insert_after at the end of the line\n+     should now fail.  */\n+  richloc.add_fixit_insert_after (\"/* inserted */\");\n+  ASSERT_TRUE (richloc.seen_impossible_fixit_p ());\n+\n+  edit_context edit;\n+  edit.add_fixits (&richloc);\n+  ASSERT_FALSE (edit.valid_p ());\n+  ASSERT_EQ (NULL, edit.get_content (filename));\n+  ASSERT_EQ (NULL, edit.generate_diff (false));\n+}\n+\n /* Test applying a \"replace\" fixit that grows the affected line.  */\n \n static void\n@@ -1135,11 +1271,11 @@ test_applying_fixits_multiple (const line_table_case &case_)\n \n   /* Add a comment in front of \"bar.field\".  */\n   rich_location insert_a (line_table, c7);\n-  insert_a.add_fixit_insert (c7, \"/* alpha */\");\n+  insert_a.add_fixit_insert_before (c7, \"/* alpha */\");\n \n   /* Add a comment after \"bar.field;\".  */\n   rich_location insert_b (line_table, c17);\n-  insert_b.add_fixit_insert (c17, \"/* beta */\");\n+  insert_b.add_fixit_insert_before (c17, \"/* beta */\");\n \n   /* Replace \"bar\" with \"pub\".   */\n   rich_location replace_a (line_table, c7);\n@@ -1203,7 +1339,7 @@ change_line (edit_context &edit, int line_num)\n     }\n \n   rich_location insert (line_table, loc);\n-  insert.add_fixit_insert (\"CHANGED: \");\n+  insert.add_fixit_insert_before (\"CHANGED: \");\n   edit.add_fixits (&insert);\n   return loc;\n }\n@@ -1371,8 +1507,8 @@ test_applying_fixits_unreadable_file ()\n   location_t loc = linemap_position_for_column (line_table, 1);\n \n   rich_location insert (line_table, loc);\n-  insert.add_fixit_insert (\"change 1\");\n-  insert.add_fixit_insert (\"change 2\");\n+  insert.add_fixit_insert_before (\"change 1\");\n+  insert.add_fixit_insert_before (\"change 2\");\n \n   edit_context edit;\n   /* Attempting to add the fixits affecting the unreadable file\n@@ -1403,7 +1539,7 @@ test_applying_fixits_line_out_of_range ()\n   location_t loc = linemap_position_for_column (line_table, 1);\n \n   rich_location insert (line_table, loc);\n-  insert.add_fixit_insert (\"change\");\n+  insert.add_fixit_insert_before (\"change\");\n \n   /* Verify that attempting the insertion puts an edit_context\n      into an invalid state.  */\n@@ -1440,7 +1576,7 @@ test_applying_fixits_column_validation (const line_table_case &case_)\n   /* Verify inserting at the end of the line.  */\n   {\n     rich_location richloc (line_table, c11);\n-    richloc.add_fixit_insert (c15, \" change\");\n+    richloc.add_fixit_insert_before (c15, \" change\");\n \n     /* Col 15 is at the end of the line, so the insertion\n        should succeed.  */\n@@ -1456,7 +1592,7 @@ test_applying_fixits_column_validation (const line_table_case &case_)\n   /* Verify inserting beyond the end of the line.  */\n   {\n     rich_location richloc (line_table, c11);\n-    richloc.add_fixit_insert (c16, \" change\");\n+    richloc.add_fixit_insert_before (c16, \" change\");\n \n     /* Col 16 is beyond the end of the line, so the insertion\n        should fail gracefully.  */\n@@ -1510,7 +1646,10 @@ void\n edit_context_c_tests ()\n {\n   test_get_content ();\n-  for_each_line_table_case (test_applying_fixits_insert);\n+  for_each_line_table_case (test_applying_fixits_insert_before);\n+  for_each_line_table_case (test_applying_fixits_insert_after);\n+  for_each_line_table_case (test_applying_fixits_insert_after_at_line_end);\n+  for_each_line_table_case (test_applying_fixits_insert_after_failure);\n   for_each_line_table_case (test_applying_fixits_growing_replace);\n   for_each_line_table_case (test_applying_fixits_shrinking_replace);\n   for_each_line_table_case (test_applying_fixits_remove);"}, {"sha": "d6f6b32ba4b1169797202ad38f1c7b8756b85787", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1,3 +1,9 @@\n+2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n+\t(test_show_locus): Replace rich_location::add_fixit_insert calls\n+\twith add_fixit_insert_before and add_fixit_insert_after.\n+\n 2016-09-13  Jason Merrill  <jason@redhat.com>\n \t    Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "3efc7dfa0b4c40ed7b9cad8e75da79011cfdce68", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -263,8 +263,8 @@ test_show_locus (function *fun)\n       location_t start = get_loc (line, 19);\n       location_t finish = get_loc (line, 22);\n       rich_location richloc (line_table, make_location (start, start, finish));\n-      richloc.add_fixit_insert (start, \"{\");\n-      richloc.add_fixit_insert (get_loc (line, 23), \"}\");\n+      richloc.add_fixit_insert_before (\"{\");\n+      richloc.add_fixit_insert_after (\"}\");\n       warning_at_rich_loc (&richloc, 0, \"example of insertion hints\");\n     }\n "}, {"sha": "95e12a9ba6b5439d91b0fefd16d9d7ad67dc428a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1,3 +1,23 @@\n+2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (class rich_location): Add description of\n+\tfix-it hints to leading comment.\n+\t(rich_location::add_fixit_insert): Rename both overloaded methods\n+\tto..\n+\t(rich_location::add_fixit_insert_before): ...this, updating their\n+\tcomments.\n+\t(rich_location::add_fixit_insert_after): Two new overloaded\n+\tmethods.\n+\t(rich_location::stop_supporting_fixits): New method.\n+\t* line-map.c (rich_location::add_fixit_insert): Rename both\n+\toverloaded methods to..\n+\t(rich_location::add_fixit_insert_before): ...this, updating their\n+\tcomments.\n+\t(rich_location::add_fixit_insert_after): Two new methods.\n+\t(rich_location::reject_impossible_fixit): Split out\n+\tfailure-handling into...\n+\t(rich_location::stop_supporting_fixits): New method.\n+\n 2016-09-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (rich_location::seen_impossible_fixit_p): New"}, {"sha": "939bfcc5712532636dceb150e6703ec230290c54", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 95, "deletions": 6, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -1484,7 +1484,84 @@ class fixit_hint;\n    - range 0 is at the \"%s\" with start = caret = \"%\" and finish at\n      the \"s\".\n    - range 1 has start/finish covering the \"101\" and is not flagged for\n-     caret printing; it is perhaps at the start of \"101\".  */\n+     caret printing; it is perhaps at the start of \"101\".\n+\n+\n+   Fix-it hints\n+   ------------\n+\n+   Rich locations can also contain \"fix-it hints\", giving suggestions\n+   for the user on how to edit their code to fix a problem.  These\n+   can be expressed as insertions, replacements, and removals of text.\n+   The edits by default are relative to the zeroth range within the\n+   rich_location, but optionally they can be expressed relative to\n+   other locations (using various overloaded methods of the form\n+   rich_location::add_fixit_*).\n+\n+   For example:\n+\n+   Example F: fix-it hint: insert_before\n+   *************************************\n+      ptr = arr[0];\n+\t    ^~~~~~\n+\t    &\n+   This rich location has a single range (range 0) covering \"arr[0]\",\n+   with the caret at the start.  The rich location has a single\n+   insertion fix-it hint, inserted before range 0, added via\n+     richloc.add_fixit_insert_before (\"&\");\n+\n+   Example G: multiple fix-it hints: insert_before and insert_after\n+   ****************************************************************\n+      #define FN(ARG0, ARG1, ARG2) fn(ARG0, ARG1, ARG2)\n+\t\t\t\t      ^~~~  ^~~~  ^~~~\n+\t\t\t\t      (   ) (   ) (   )\n+   This rich location has three ranges, covering \"arg0\", \"arg1\",\n+   and \"arg2\", all with caret-printing enabled.\n+   The rich location has 6 insertion fix-it hints: each arg\n+   has a pair of insertion fix-it hints, suggesting wrapping\n+   them with parentheses: one a '(' inserted before,\n+   the other a ')' inserted after, added via\n+     richloc.add_fixit_insert_before (LOC, \"(\");\n+   and\n+     richloc.add_fixit_insert_after (LOC, \")\");\n+\n+   Example H: fix-it hint: removal\n+   *******************************\n+     struct s {int i};;\n+\t\t      ^\n+\t\t      -\n+   This rich location has a single range at the stray trailing\n+   semicolon, along with a single removal fix-it hint, covering\n+   the same range, added via:\n+     richloc.add_fixit_remove ();\n+\n+   Example I: fix-it hint: replace\n+   *******************************\n+      c = s.colour;\n+\t    ^~~~~~\n+\t    color\n+   This rich location has a single range (range 0) covering \"colour\",\n+   and a single \"replace\" fix-it hint, covering the same range,\n+   added via\n+     richloc.add_fixit_replace (\"color\");\n+\n+   Adding a fix-it hint can fail: for example, attempts to insert content\n+   at the transition between two line maps may fail due to there being no\n+   source_location (aka location_t) value to express the new location.\n+\n+   Attempts to add a fix-it hint within a macro expansion will fail.\n+\n+   The rich_location API handles these failures gracefully, so that\n+   diagnostics can attempt to add fix-it hints without each needing\n+   extensive checking.\n+\n+   Fix-it hints within a rich_location are \"atomic\": if any hints can't\n+   be applied, none of them will be (tracked by the m_seen_impossible_fixit\n+   flag), and no fix-its hints will be displayed for that rich_location.\n+   This implies that diagnostic messages need to be worded in such a way\n+   that they make sense whether or not the fix-it hints are displayed,\n+   or that richloc.seen_impossible_fixit_p () should be checked before\n+   issuing the diagnostics.  */\n \n class rich_location\n {\n@@ -1522,14 +1599,25 @@ class rich_location\n \n   /* Methods for adding insertion fix-it hints.  */\n \n-  /* Suggest inserting NEW_CONTENT at the primary range's caret.  */\n+  /* Suggest inserting NEW_CONTENT immediately before the primary\n+     range's start.  */\n   void\n-  add_fixit_insert (const char *new_content);\n+  add_fixit_insert_before (const char *new_content);\n \n-  /* Suggest inserting NEW_CONTENT at WHERE.  */\n+  /* Suggest inserting NEW_CONTENT immediately before the start of WHERE.  */\n   void\n-  add_fixit_insert (source_location where,\n-\t\t    const char *new_content);\n+  add_fixit_insert_before (source_location where,\n+\t\t\t   const char *new_content);\n+\n+  /* Suggest inserting NEW_CONTENT immediately after the end of the primary\n+     range.  */\n+  void\n+  add_fixit_insert_after (const char *new_content);\n+\n+  /* Suggest inserting NEW_CONTENT immediately after the end of WHERE.  */\n+  void\n+  add_fixit_insert_after (source_location where,\n+\t\t\t  const char *new_content);\n \n   /* Methods for adding removal fix-it hints.  */\n \n@@ -1571,6 +1659,7 @@ class rich_location\n \n private:\n   bool reject_impossible_fixit (source_location where);\n+  void stop_supporting_fixits ();\n   void add_fixit (fixit_hint *hint);\n \n public:"}, {"sha": "742af0a07bbd39f055687e60df0ac752ad80f30c", "filename": "libcpp/line-map.c", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254830bab29913361ddd47358d3d90b7d4a49f3d/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254830bab29913361ddd47358d3d90b7d4a49f3d/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=254830bab29913361ddd47358d3d90b7d4a49f3d", "patch": "@@ -2109,26 +2109,61 @@ rich_location::set_range (line_maps * /*set*/, unsigned int idx,\n /* Methods for adding insertion fix-it hints.  */\n \n /* Add a fixit-hint, suggesting insertion of NEW_CONTENT\n-   at the primary range's caret location.  */\n+   immediately before the primary range's start location.  */\n \n void\n-rich_location::add_fixit_insert (const char *new_content)\n+rich_location::add_fixit_insert_before (const char *new_content)\n {\n-  add_fixit_insert (get_loc (), new_content);\n+  add_fixit_insert_before (get_loc (), new_content);\n }\n \n /* Add a fixit-hint, suggesting insertion of NEW_CONTENT\n-   at WHERE.  */\n+   immediately before the start of WHERE.  */\n \n void\n-rich_location::add_fixit_insert (source_location where,\n-\t\t\t\t const char *new_content)\n+rich_location::add_fixit_insert_before (source_location where,\n+\t\t\t\t\tconst char *new_content)\n {\n-  where = get_pure_location (m_line_table, where);\n+  source_location start = get_range_from_loc (m_line_table, where).m_start;\n \n-  if (reject_impossible_fixit (where))\n+  if (reject_impossible_fixit (start))\n     return;\n-  add_fixit (new fixit_insert (where, new_content));\n+  add_fixit (new fixit_insert (start, new_content));\n+}\n+\n+/* Add a fixit-hint, suggesting insertion of NEW_CONTENT\n+   immediately after the primary range's end-point.  */\n+\n+void\n+rich_location::add_fixit_insert_after (const char *new_content)\n+{\n+  add_fixit_insert_after (get_loc (), new_content);\n+}\n+\n+/* Add a fixit-hint, suggesting insertion of NEW_CONTENT\n+   immediately after the end-point of WHERE.  */\n+\n+void\n+rich_location::add_fixit_insert_after (source_location where,\n+\t\t\t\t       const char *new_content)\n+{\n+  source_location finish = get_range_from_loc (m_line_table, where).m_finish;\n+\n+  if (reject_impossible_fixit (finish))\n+    return;\n+\n+  source_location next_loc\n+    = linemap_position_for_loc_and_offset (m_line_table, finish, 1);\n+\n+  /* linemap_position_for_loc_and_offset can fail, if so, it returns\n+     its input value.  */\n+  if (next_loc == finish)\n+    {\n+      stop_supporting_fixits ();\n+      return;\n+    }\n+\n+  add_fixit (new fixit_insert (next_loc, new_content));\n }\n \n /* Methods for adding removal fix-it hints.  */\n@@ -2278,14 +2313,22 @@ rich_location::reject_impossible_fixit (source_location where)\n   /* Otherwise we have an attempt to add a fix-it with an \"awkward\"\n      location: either one that we can't obtain column information\n      for (within an ordinary map), or one within a macro expansion.  */\n+  stop_supporting_fixits ();\n+  return true;\n+}\n+\n+/* Mark this rich_location as not supporting fixits, purging any that were\n+   already added.  */\n+\n+void\n+rich_location::stop_supporting_fixits ()\n+{\n   m_seen_impossible_fixit = true;\n \n   /* Purge the rich_location of any fix-its that were already added. */\n   for (unsigned int i = 0; i < m_fixit_hints.count (); i++)\n     delete get_fixit_hint (i);\n   m_fixit_hints.truncate (0);\n-\n-  return true;\n }\n \n /* Add HINT to the fix-it hints in this rich_location.  */"}]}