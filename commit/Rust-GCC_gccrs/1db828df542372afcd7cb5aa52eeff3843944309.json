{"sha": "1db828df542372afcd7cb5aa52eeff3843944309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiODI4ZGY1NDIzNzJhZmNkN2NiNWFhNTJlZWZmMzg0Mzk0NDMwOQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-04-27T00:07:16Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-04-27T00:07:16Z"}, "message": "re PR target/6422 (libjava failures on sparc-linux)\n\n2002-04-25  David S. Miller  <davem@redhat.com>\n\n\tPR target/6422\n\t* reorg.c (optimize_skip): Do not allow exception causing\n\tinstructions to be considered for delay slots.\n\t(fill_simply_delay_slots, fill_slots_from_thread): Likewise.\n\t(relax_delay_slots): Do not try to consider exception causing\n\tinstructions as redundant.\n\nFrom-SVN: r52822", "tree": {"sha": "ee797cc837442e06493fadc89e7aa4beaf581294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee797cc837442e06493fadc89e7aa4beaf581294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1db828df542372afcd7cb5aa52eeff3843944309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db828df542372afcd7cb5aa52eeff3843944309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db828df542372afcd7cb5aa52eeff3843944309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db828df542372afcd7cb5aa52eeff3843944309/comments", "author": null, "committer": null, "parents": [{"sha": "6ea531707a876cf6f27e374c535d94a9b5e71a41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea531707a876cf6f27e374c535d94a9b5e71a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea531707a876cf6f27e374c535d94a9b5e71a41"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "70c3795e9e425affd0e923e2d401f0878e0a128b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db828df542372afcd7cb5aa52eeff3843944309/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db828df542372afcd7cb5aa52eeff3843944309/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1db828df542372afcd7cb5aa52eeff3843944309", "patch": "@@ -1,3 +1,12 @@\n+2002-04-25  David S. Miller  <davem@redhat.com>\n+\n+\tPR target/6422\n+\t* reorg.c (optimize_skip): Do not allow exception causing\n+\tinstructions to be considered for delay slots.\n+\t(fill_simply_delay_slots, fill_slots_from_thread): Likewise.\n+\t(relax_delay_slots): Do not try to consider exception causing\n+\tinstructions as redundant.\n+\n 2002-04-26  Richard Henderson  <rth@redhat.com>\n \n \tPR c/5225"}, {"sha": "659fc007590eab9203a7d058f0dff5a32bad23d1", "filename": "gcc/reorg.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db828df542372afcd7cb5aa52eeff3843944309/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db828df542372afcd7cb5aa52eeff3843944309/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=1db828df542372afcd7cb5aa52eeff3843944309", "patch": "@@ -750,7 +750,8 @@ optimize_skip (insn)\n       || GET_CODE (PATTERN (trial)) == SEQUENCE\n       || recog_memoized (trial) < 0\n       || (! eligible_for_annul_false (insn, 0, trial, flags)\n-\t  && ! eligible_for_annul_true (insn, 0, trial, flags)))\n+\t  && ! eligible_for_annul_true (insn, 0, trial, flags))\n+      || can_throw_internal (trial))\n     return 0;\n \n   /* There are two cases where we are just executing one insn (we assume\n@@ -2127,7 +2128,8 @@ fill_simple_delay_slots (non_jumps_p)\n \t  && GET_CODE (trial) == JUMP_INSN\n \t  && simplejump_p (trial)\n \t  && eligible_for_delay (insn, slots_filled, trial, flags)\n-\t  && no_labels_between_p (insn, trial))\n+\t  && no_labels_between_p (insn, trial)\n+\t  && ! can_throw_internal (trial))\n \t{\n \t  rtx *tmp;\n \t  slots_filled++;\n@@ -2197,7 +2199,7 @@ fill_simple_delay_slots (non_jumps_p)\n \t\t  /* Can't separate set of cc0 from its use.  */\n \t\t  && ! (reg_mentioned_p (cc0_rtx, pat) && ! sets_cc0_p (pat))\n #endif\n-\t\t  )\n+\t\t  && ! can_throw_internal (trial))\n \t\t{\n \t\t  trial = try_split (pat, trial, 1);\n \t\t  next_trial = prev_nonnote_insn (trial);\n@@ -2273,7 +2275,7 @@ fill_simple_delay_slots (non_jumps_p)\n \n \t     Presumably, we should also check to see if we could get\n \t     back to this function via `setjmp'.  */\n-\t  && !can_throw_internal (insn)\n+\t  && ! can_throw_internal (insn)\n \t  && (GET_CODE (insn) != JUMP_INSN\n \t      || ((condjump_p (insn) || condjump_in_parallel_p (insn))\n \t\t  && ! simplejump_p (insn)\n@@ -2340,7 +2342,8 @@ fill_simple_delay_slots (non_jumps_p)\n #endif\n \t\t    && ! (maybe_never && may_trap_p (pat))\n \t\t    && (trial = try_split (pat, trial, 0))\n-\t\t    && eligible_for_delay (insn, slots_filled, trial, flags))\n+\t\t    && eligible_for_delay (insn, slots_filled, trial, flags)\n+\t\t    && ! can_throw_internal(trial))\n \t\t  {\n \t\t    next_trial = next_nonnote_insn (trial);\n \t\t    delay_list = add_to_delay_list (trial, delay_list);\n@@ -2392,7 +2395,8 @@ fill_simple_delay_slots (non_jumps_p)\n #endif\n \t      && ! (maybe_never && may_trap_p (PATTERN (next_trial)))\n \t      && (next_trial = try_split (PATTERN (next_trial), next_trial, 0))\n-\t      && eligible_for_delay (insn, slots_filled, next_trial, flags))\n+\t      && eligible_for_delay (insn, slots_filled, next_trial, flags)\n+\t      && ! can_throw_internal (trial))\n \t    {\n \t      rtx new_label = next_active_insn (next_trial);\n \n@@ -2496,7 +2500,7 @@ fill_simple_delay_slots (non_jumps_p)\n \t  /* Don't want to mess with cc0 here.  */\n \t  && ! reg_mentioned_p (cc0_rtx, pat)\n #endif\n-\t  )\n+\t  && ! can_throw_internal (trial))\n \t{\n \t  trial = try_split (pat, trial, 1);\n \t  if (ELIGIBLE_FOR_EPILOGUE_DELAY (trial, slots_filled))\n@@ -2637,7 +2641,7 @@ fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n \t  && ! (reg_mentioned_p (cc0_rtx, pat)\n \t\t&& (! own_thread || ! sets_cc0_p (pat)))\n #endif\n-\t  )\n+\t  && ! can_throw_internal (trial))\n \t{\n \t  rtx prior_insn;\n \n@@ -2874,8 +2878,10 @@ fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n       trial = new_thread;\n       pat = PATTERN (trial);\n \n-      if (GET_CODE (trial) != INSN || GET_CODE (pat) != SET\n-\t  || ! eligible_for_delay (insn, 0, trial, flags))\n+      if (GET_CODE (trial) != INSN\n+\t  || GET_CODE (pat) != SET\n+\t  || ! eligible_for_delay (insn, 0, trial, flags)\n+\t  || can_throw_internal (trial))\n \treturn 0;\n \n       dest = SET_DEST (pat), src = SET_SRC (pat);\n@@ -3286,7 +3292,8 @@ relax_delay_slots (first)\n \t     insn, redirect the jump to the following insn process again.  */\n \t  trial = next_active_insn (target_label);\n \t  if (trial && GET_CODE (PATTERN (trial)) != SEQUENCE\n-\t      && redundant_insn (trial, insn, 0))\n+\t      && redundant_insn (trial, insn, 0)\n+\t      && ! can_throw_internal (trial))\n \t    {\n \t      rtx tmp;\n "}]}