{"sha": "472d98b46bfc898a1d3b2d68d9697f8c476311d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyZDk4YjQ2YmZjODk4YTFkM2IyZDY4ZDk2OTdmOGM0NzYzMTFkNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-06-04T01:34:47Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-06-04T01:34:47Z"}, "message": "re PR c/21873 (infinite warning loop on bad array initializer)\n\n\tPR c/21873\n\t* c-typeck.c (push_init_level): Don't pop levels without braces if\n\timplicit == 1.\n\ntestsuite:\n\t* gcc.dg/init-excess-1.c: New test.\n\nFrom-SVN: r100571", "tree": {"sha": "d222a657cc3d23d45bb5bef331c55e2171867174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d222a657cc3d23d45bb5bef331c55e2171867174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/472d98b46bfc898a1d3b2d68d9697f8c476311d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472d98b46bfc898a1d3b2d68d9697f8c476311d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472d98b46bfc898a1d3b2d68d9697f8c476311d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472d98b46bfc898a1d3b2d68d9697f8c476311d4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecb83da78366e14defb51f41777d41ea0ede0a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb83da78366e14defb51f41777d41ea0ede0a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecb83da78366e14defb51f41777d41ea0ede0a26"}], "stats": {"total": 91, "additions": 79, "deletions": 12}, "files": [{"sha": "d32b69e69c4c8a5ed9e9dffb09d9b47d1a1cd273", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472d98b46bfc898a1d3b2d68d9697f8c476311d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472d98b46bfc898a1d3b2d68d9697f8c476311d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=472d98b46bfc898a1d3b2d68d9697f8c476311d4", "patch": "@@ -1,3 +1,9 @@\n+2005-06-04  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/21873\n+\t* c-typeck.c (push_init_level): Don't pop levels without braces if\n+\timplicit == 1.\n+\n 2005-06-03  Sebastian Pop  <pop@cri.ensmp.fr>\n \t\n \t* tree-data-ref.c (compute_self_dependence): New function."}, {"sha": "9d41433b3975bb3e68368d8664743bbd66e72a51", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472d98b46bfc898a1d3b2d68d9697f8c476311d4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472d98b46bfc898a1d3b2d68d9697f8c476311d4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=472d98b46bfc898a1d3b2d68d9697f8c476311d4", "patch": "@@ -4844,19 +4844,27 @@ push_init_level (int implicit)\n   tree value = NULL_TREE;\n \n   /* If we've exhausted any levels that didn't have braces,\n-     pop them now.  */\n-  while (constructor_stack->implicit)\n+     pop them now.  If implicit == 1, this will have been done in\n+     process_init_element; do not repeat it here because in the case\n+     of excess initializers for an empty aggregate this leads to an\n+     infinite cycle of popping a level and immediately recreating\n+     it.  */\n+  if (implicit != 1)\n     {\n-      if ((TREE_CODE (constructor_type) == RECORD_TYPE\n-\t   || TREE_CODE (constructor_type) == UNION_TYPE)\n-\t  && constructor_fields == 0)\n-\tprocess_init_element (pop_init_level (1));\n-      else if (TREE_CODE (constructor_type) == ARRAY_TYPE\n-\t       && constructor_max_index\n-\t       && tree_int_cst_lt (constructor_max_index, constructor_index))\n-\tprocess_init_element (pop_init_level (1));\n-      else\n-\tbreak;\n+      while (constructor_stack->implicit)\n+\t{\n+\t  if ((TREE_CODE (constructor_type) == RECORD_TYPE\n+\t       || TREE_CODE (constructor_type) == UNION_TYPE)\n+\t      && constructor_fields == 0)\n+\t    process_init_element (pop_init_level (1));\n+\t  else if (TREE_CODE (constructor_type) == ARRAY_TYPE\n+\t\t   && constructor_max_index\n+\t\t   && tree_int_cst_lt (constructor_max_index,\n+\t\t\t\t       constructor_index))\n+\t    process_init_element (pop_init_level (1));\n+\t  else\n+\t    break;\n+\t}\n     }\n \n   /* Unless this is an explicit brace, we need to preserve previous"}, {"sha": "fd5b607426311c796e9cf273da56f98704bacad7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472d98b46bfc898a1d3b2d68d9697f8c476311d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472d98b46bfc898a1d3b2d68d9697f8c476311d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=472d98b46bfc898a1d3b2d68d9697f8c476311d4", "patch": "@@ -1,3 +1,8 @@\n+2005-06-04  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/21873\n+\t* gcc.dg/init-excess-1.c: New test.\n+\n 2005-06-03  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/21853"}, {"sha": "ade6fd0859d36b8a83d6aea6f1dbc238917d0d84", "filename": "gcc/testsuite/gcc.dg/init-excess-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472d98b46bfc898a1d3b2d68d9697f8c476311d4/gcc%2Ftestsuite%2Fgcc.dg%2Finit-excess-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472d98b46bfc898a1d3b2d68d9697f8c476311d4/gcc%2Ftestsuite%2Fgcc.dg%2Finit-excess-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-excess-1.c?ref=472d98b46bfc898a1d3b2d68d9697f8c476311d4", "patch": "@@ -0,0 +1,48 @@\n+/* Test for various cases of excess initializers for empty objects:\n+   bug 21873.  Various versions of GCC ICE, hang or loop repeating\n+   diagnostics on various of these tests.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct s0 { };\n+struct s1 { int a; };\n+struct s2 { int a; int b; };\n+\n+int a0[0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+int a1[0][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+int a2[0][1] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+int a3[1][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+int a4[][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+int a5[][0][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+int a6[][0][1] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+int a7[][1][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+\n+struct s0 b0[0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s0 b1[0][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s0 b2[0][1] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s0 b3[1][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s0 b4[][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s0 b5[][0][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s0 b6[][0][1] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s0 b7[][1][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s0 b8[1] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s0 b9[] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+\n+struct s1 c0[0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s1 c1[0][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s1 c2[0][1] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s1 c3[1][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s1 c4[][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s1 c5[][0][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s1 c6[][0][1] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s1 c7[][1][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+\n+struct s2 d0[0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s2 d1[0][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s2 d2[0][1] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s2 d3[1][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s2 d4[][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s2 d5[][0][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s2 d6[][0][1] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */\n+struct s2 d7[][1][0] = { 1, 2 }; /* { dg-warning \"excess elements|near init\" } */"}]}