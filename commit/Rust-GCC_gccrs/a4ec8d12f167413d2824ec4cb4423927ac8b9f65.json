{"sha": "a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRlYzhkMTJmMTY3NDEzZDI4MjRlYzRjYjQ0MjM5MjdhYzhiOWY2NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-20T22:44:50Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-20T22:44:50Z"}, "message": "machmode.h (mode_name): Constify a char*.\n\n\t* machmode.h (mode_name): Constify a char*.\n\n\t* rtl.c (mode_name): Likewise.\n\n\t* genopinit.c (gen_insn): Use accessor macro, not `mode_name'.\n\n\t* optabs.c (init_libfuncs): Constify a char*.\n\n\t* print-tree.c (mode_name): Remove redundant declaration.\n\t(print_node): Use accessor macro, not `mode_name'.\n\n\t* reload1.c (dump_needs): Constify a char*.  Use accessor macro,\n\tnot `mode_name'.\n\t(new_spill_reg): Constify a char*.\n\n\t* tree.c (mode_name): Remove redundant declaration.\n\nFrom-SVN: r28783", "tree": {"sha": "d7a92cd8ec4aed354cbdea6762e9270f367f380e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7a92cd8ec4aed354cbdea6762e9270f367f380e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/comments", "author": null, "committer": null, "parents": [{"sha": "5f06c983f3b137a2fe493e80087f2bb72b34d715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f06c983f3b137a2fe493e80087f2bb72b34d715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f06c983f3b137a2fe493e80087f2bb72b34d715"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "53b6b52cbb0623f3521c0136b5997f2fa9567494", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "patch": "@@ -1,3 +1,22 @@\n+Fri Aug 20 18:38:43 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* machmode.h (mode_name): Constify a char*.\n+\t\n+\t* rtl.c (mode_name): Likewise.\n+\n+\t* genopinit.c (gen_insn): Use accessor macro, not `mode_name'.\n+\n+\t* optabs.c (init_libfuncs): Constify a char*.\n+\n+\t* print-tree.c (mode_name): Remove redundant declaration.\n+\t(print_node): Use accessor macro, not `mode_name'.\n+\n+\t* reload1.c (dump_needs): Constify a char*.  Use accessor macro,\n+\tnot `mode_name'.\n+\t(new_spill_reg): Constify a char*.\n+\n+\t* tree.c (mode_name): Remove redundant declaration.\n+\t\n Fri Aug 20 18:31:26 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* rtl.c (rtx_name): Constify a char*."}, {"sha": "c9dd88d5fef5226d17eef799a5ce6404cd082f32", "filename": "gcc/genopinit.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "patch": "@@ -200,7 +200,7 @@ gen_insn (insn)\n                    CC modes (as it should be).  */\n \t\tfor (i = ((int) MAX_MACHINE_MODE) - 1; i >= 0; i--)\n \t\t  {\n-\t\t    for (p = mode_name[i], q = np; *p; p++, q++)\n+\t\t    for (p = GET_MODE_NAME(i), q = np; *p; p++, q++)\n \t\t      if (tolower ((unsigned char)*p) != *q)\n \t\t\tbreak;\n \n@@ -213,9 +213,9 @@ gen_insn (insn)\n \t\tif (i < 0)\n \t\t  matches = 0;\n \t\telse if (*pp == 'a')\n-\t\t  m1 = i, np += strlen (mode_name[i]);\n+\t\t  m1 = i, np += strlen (GET_MODE_NAME(i));\n \t\telse\n-\t\t  m2 = i, np += strlen (mode_name[i]);\n+\t\t  m2 = i, np += strlen (GET_MODE_NAME(i));\n \n \t\tforce_int = force_float = 0;\n \t\tbreak;\n@@ -254,18 +254,18 @@ gen_insn (insn)\n \t  case 'I':  case 'F':  case 'N':\n \t    break;\n \t  case 'a':\n-\t    for (np = mode_name[m1]; *np; np++)\n+\t    for (np = GET_MODE_NAME(m1); *np; np++)\n \t      printf (\"%c\", tolower ((unsigned char)*np));\n \t    break;\n \t  case 'b':\n-\t    for (np = mode_name[m2]; *np; np++)\n+\t    for (np = GET_MODE_NAME(m2); *np; np++)\n \t      printf (\"%c\", tolower ((unsigned char)*np));\n \t    break;\n \t  case 'A':\n-\t    printf (\"%smode\", mode_name[m1]);\n+\t    printf (\"%smode\", GET_MODE_NAME(m1));\n \t    break;\n \t  case 'B':\n-\t    printf (\"%smode\", mode_name[m2]);\n+\t    printf (\"%smode\", GET_MODE_NAME(m2));\n \t    break;\n \t  case 'c':\n \t    printf (\"%s\", GET_RTX_NAME(op));"}, {"sha": "756559181ea7e924236e9706d9d94a5d8ef6ed4f", "filename": "gcc/machmode.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "patch": "@@ -56,7 +56,7 @@ MAX_MACHINE_MODE };\n \n /* Get the name of mode MODE as a string.  */\n \n-extern char *mode_name[];\n+extern const char * const mode_name[];\n #define GET_MODE_NAME(MODE)\t\t(mode_name[(int) (MODE)])\n \n enum mode_class { MODE_RANDOM, MODE_INT, MODE_FLOAT, MODE_PARTIAL_INT, MODE_CC,"}, {"sha": "814a483fee49f5f378b27a3d904dc09313f39b08", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "patch": "@@ -4450,7 +4450,7 @@ init_libfuncs (optable, first_mode, last_mode, opname, suffix)\n   for (mode = first_mode; (int) mode <= (int) last_mode;\n        mode = (enum machine_mode) ((int) mode + 1))\n     {\n-      register char *mname = mode_name[(int) mode];\n+      register const char *mname = GET_MODE_NAME(mode);\n       register unsigned mname_len = strlen (mname);\n       register char *libfunc_name\n \t= (char *) xmalloc (2 + opname_len + mname_len + 1 + 1);"}, {"sha": "55eb4c8a8b263d97bb7c9700a781f08dd1dc0e50", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "patch": "@@ -23,8 +23,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"tree.h\"\n \n-extern char *mode_name[];\n-\n void print_node ();\n void indent_to ();\n \n@@ -389,7 +387,7 @@ print_node (file, prefix, node, indent)\n       if (DECL_LANG_FLAG_7 (node))\n \tfputs (\" decl_7\", file);\n \n-      fprintf (file, \" %s\", mode_name[(int) mode]);\n+      fprintf (file, \" %s\", GET_MODE_NAME(mode));\n \n       fprintf (file, \" file %s line %d\",\n \t       DECL_SOURCE_FILE (node), DECL_SOURCE_LINE (node));\n@@ -474,7 +472,7 @@ print_node (file, prefix, node, indent)\n \tfputs (\" type_6\", file);\n \n       mode = TYPE_MODE (node);\n-      fprintf (file, \" %s\", mode_name[(int) mode]);\n+      fprintf (file, \" %s\", GET_MODE_NAME(mode));\n \n       print_node (file, \"size\", TYPE_SIZE (node), indent + 4);\n       indent_to (file, indent + 3);"}, {"sha": "edaa13f89d1cc1c17cb192597c4973415e43fcfa", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "patch": "@@ -2031,7 +2031,7 @@ dump_needs (chain, dumpfile)\n      struct insn_chain *chain;\n      FILE *dumpfile;\n {\n-  static char *reg_class_names[] = REG_CLASS_NAMES;\n+  static const char * const reg_class_names[] = REG_CLASS_NAMES;\n   int i;\n   struct needs *n = &chain->need;\n \n@@ -2051,7 +2051,7 @@ dump_needs (chain, dumpfile)\n \tfprintf (dumpfile,\n \t\t \";; Need %d group%s (%smode) of class %s.\\n\",\n \t\t n->groups[i], n->groups[i] == 1 ? \"\" : \"s\",\n-\t\t mode_name[(int) chain->group_mode[i]],\n+\t\t GET_MODE_NAME(chain->group_mode[i]),\n \t\t reg_class_names[i]);\n     }\n }\n@@ -2292,7 +2292,7 @@ new_spill_reg (chain, i, class, nongroup, dumpfile)\n \n   if (TEST_HARD_REG_BIT (bad_spill_regs, regno))\n     {\n-      static char *reg_class_names[] = REG_CLASS_NAMES;\n+      static const char * const reg_class_names[] = REG_CLASS_NAMES;\n \n       if (asm_noperands (PATTERN (chain->insn)) < 0)\n \t{"}, {"sha": "ae921537ca391e795edf7432a51cafc0813d4da3", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "patch": "@@ -58,7 +58,7 @@ const char * const rtx_name[] = {\n \n #define DEF_MACHMODE(SYM, NAME, CLASS, SIZE, UNIT, WIDER)  NAME,\n \n-char *mode_name[(int) MAX_MACHINE_MODE + 1] = {\n+const char * const mode_name[(int) MAX_MACHINE_MODE + 1] = {\n #include \"machmode.def\"\n \n #ifdef EXTRA_CC_MODES"}, {"sha": "fb8f08a425b67c0660ca933e5b5fb536b3520767", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ec8d12f167413d2824ec4cb4423927ac8b9f65/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "patch": "@@ -266,8 +266,6 @@ static void set_type_quals PROTO((tree, int));\n static void append_random_chars PROTO((char *));\n static void build_real_from_int_cst_1 PROTO((PTR));\n \n-extern char *mode_name[];\n-\n void gcc_obstack_init ();\n \n /* If non-null, a language specific helper for unsave_expr_now. */"}]}