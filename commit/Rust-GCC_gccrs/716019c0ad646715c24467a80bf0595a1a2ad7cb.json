{"sha": "716019c0ad646715c24467a80bf0595a1a2ad7cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE2MDE5YzBhZDY0NjcxNWMyNDQ2N2E4MGJmMDU5NWExYTJhZDdjYg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-03-14T00:29:07Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-03-14T00:29:07Z"}, "message": "rs6000.opt (mdlmzb): New option.\n\n\t* config/rs6000/rs6000.opt (mdlmzb): New option.\n\t(msched-prolog, msched-epilog): Use Var not Mask.\n\t* doc/invoke.texi (-mdlmzb): Document.\n\t* config/rs6000/rs6000.c (TARGET_DEFAULT_TARGET_FLAGS): Remove\n\tMASK_SCHED_PROLOG.\n\t(rs6000_override_options): Enable -mdlmzb for 405 and 440.\n\t* config/rs6000/rs6000.md: Add dlmzb support for 405 and 440.\n\ntestsuite:\n\t* gcc.target/powerpc/405-dlmzb-strlen-1.c,\n\tgcc.target/powerpc/440-dlmzb-strlen-1.c: New tests.\n\nFrom-SVN: r112040", "tree": {"sha": "daec867ae253bd094bdc807e9a74b7a29b03ca5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daec867ae253bd094bdc807e9a74b7a29b03ca5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/716019c0ad646715c24467a80bf0595a1a2ad7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716019c0ad646715c24467a80bf0595a1a2ad7cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/716019c0ad646715c24467a80bf0595a1a2ad7cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716019c0ad646715c24467a80bf0595a1a2ad7cb/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14df7dabe7ede95e34d726741524031746f563c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14df7dabe7ede95e34d726741524031746f563c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14df7dabe7ede95e34d726741524031746f563c"}], "stats": {"total": 152, "additions": 143, "deletions": 9}, "files": [{"sha": "d2c7e51b74fad3d580e91cc2a3305dcc9a22ae41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=716019c0ad646715c24467a80bf0595a1a2ad7cb", "patch": "@@ -1,3 +1,13 @@\n+2006-03-14  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.opt (mdlmzb): New option.\n+\t(msched-prolog, msched-epilog): Use Var not Mask.\n+\t* doc/invoke.texi (-mdlmzb): Document.\n+\t* config/rs6000/rs6000.c (TARGET_DEFAULT_TARGET_FLAGS): Remove\n+\tMASK_SCHED_PROLOG.\n+\t(rs6000_override_options): Enable -mdlmzb for 405 and 440.\n+\t* config/rs6000/rs6000.md: Add dlmzb support for 405 and 440.\n+\n 2006-03-13  Uttam Pawar  <uttamp@us.ibm.com>\n \n \tPR rtl-optimization/25739"}, {"sha": "23f76c38e9c5dbf8873bcc5867254ad69a7b12a7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=716019c0ad646715c24467a80bf0595a1a2ad7cb", "patch": "@@ -1002,7 +1002,7 @@ static const char alt_reg_names[][8] =\n \n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS \\\n-  (TARGET_DEFAULT | MASK_SCHED_PROLOG)\n+  (TARGET_DEFAULT)\n \n #undef TARGET_STACK_PROTECT_FAIL\n #define TARGET_STACK_PROTECT_FAIL rs6000_stack_protect_fail\n@@ -1135,11 +1135,13 @@ rs6000_override_options (const char *default_cpu)\n \t {\"403\", PROCESSOR_PPC403,\n \t  POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_STRICT_ALIGN},\n \t {\"405\", PROCESSOR_PPC405,\n-\t  POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW},\n-\t {\"405fp\", PROCESSOR_PPC405, POWERPC_BASE_MASK | MASK_MULHW},\n+\t  POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB},\n+\t {\"405fp\", PROCESSOR_PPC405,\n+\t  POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB},\n \t {\"440\", PROCESSOR_PPC440,\n-\t  POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW},\n-\t {\"440fp\", PROCESSOR_PPC440, POWERPC_BASE_MASK | MASK_MULHW},\n+\t  POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB},\n+\t {\"440fp\", PROCESSOR_PPC440,\n+\t  POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB},\n \t {\"505\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK},\n \t {\"601\", PROCESSOR_PPC601,\n \t  MASK_POWER | POWERPC_BASE_MASK | MASK_MULTIPLE | MASK_STRING},\n@@ -1209,7 +1211,8 @@ rs6000_override_options (const char *default_cpu)\n     POWER_MASKS = MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING,\n     POWERPC_MASKS = (POWERPC_BASE_MASK | MASK_PPC_GPOPT\n \t\t     | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n-\t\t     | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_MULHW)\n+\t\t     | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_MULHW\n+\t\t     | MASK_DLMZB)\n   };\n \n   rs6000_init_hard_regno_mode_ok ();"}, {"sha": "fc57e5b3833c06ec9b00981775a21b19511af168", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=716019c0ad646715c24467a80bf0595a1a2ad7cb", "patch": "@@ -69,6 +69,9 @@\n    (UNSPEC_CMPXCHG\t\t42)\n    (UNSPEC_XCHG\t\t\t43)\n    (UNSPEC_AND\t\t\t44)\n+   (UNSPEC_DLMZB\t\t45)\n+   (UNSPEC_DLMZB_CR\t\t46)\n+   (UNSPEC_DLMZB_STRLEN\t\t47)\n   ])\n \n ;;\n@@ -1343,6 +1346,72 @@\n   \"mullhwu %0, %1, %2\"\n   [(set_attr \"type\" \"imul3\")])\n \f\n+;; IBM 405 and 440 string-search dlmzb instruction support.\n+(define_insn \"dlmzb\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+                    (match_operand:SI 2 \"gpc_reg_operand\" \"r\")]\n+                   UNSPEC_DLMZB_CR))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:SI [(match_dup 1)\n+                    (match_dup 2)]\n+                   UNSPEC_DLMZB))]\n+  \"TARGET_DLMZB\"\n+  \"dlmzb. %0, %1, %2\")\n+\n+(define_expand \"strlensi\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+        (unspec:SI [(match_operand:BLK 1 \"general_operand\" \"\")\n+                    (match_operand:QI 2 \"const_int_operand\" \"\")\n+                    (match_operand 3 \"const_int_operand\" \"\")]\n+                   UNSPEC_DLMZB_STRLEN))\n+   (clobber (match_scratch:CC 4 \"=x\"))]\n+  \"TARGET_DLMZB && WORDS_BIG_ENDIAN && !optimize_size\"\n+{\n+  rtx result = operands[0];\n+  rtx src = operands[1];\n+  rtx search_char = operands[2];\n+  rtx align = operands[3];\n+  rtx addr, scratch_string, word1, word2, scratch_dlmzb;\n+  rtx loop_label, end_label, mem, cr0, cond;\n+  if (search_char != const0_rtx\n+      || GET_CODE (align) != CONST_INT\n+      || INTVAL (align) < 8)\n+        FAIL;\n+  word1 = gen_reg_rtx (SImode);\n+  word2 = gen_reg_rtx (SImode);\n+  scratch_dlmzb = gen_reg_rtx (SImode);\n+  scratch_string = gen_reg_rtx (Pmode);\n+  loop_label = gen_label_rtx ();\n+  end_label = gen_label_rtx ();\n+  addr = force_reg (Pmode, XEXP (src, 0));\n+  emit_move_insn (scratch_string, addr);\n+  emit_label (loop_label);\n+  mem = change_address (src, SImode, scratch_string);\n+  emit_move_insn (word1, mem);\n+  emit_move_insn (word2, adjust_address (mem, SImode, 4));\n+  cr0 = gen_rtx_REG (CCmode, CR0_REGNO);\n+  emit_insn (gen_dlmzb (scratch_dlmzb, word1, word2, cr0));\n+  cond = gen_rtx_NE (VOIDmode, cr0, const0_rtx);\n+  emit_jump_insn (gen_rtx_SET (VOIDmode,\n+                               pc_rtx,\n+                               gen_rtx_IF_THEN_ELSE (VOIDmode,\n+                                                     cond,\n+                                                     gen_rtx_LABEL_REF\n+                                                       (VOIDmode,\n+                                                        end_label),\n+                                                     pc_rtx)));\n+  emit_insn (gen_addsi3 (scratch_string, scratch_string, GEN_INT (8)));\n+  emit_jump_insn (gen_rtx_SET (VOIDmode,\n+                               pc_rtx,\n+                               gen_rtx_LABEL_REF (VOIDmode, loop_label)));\n+  emit_label (end_label);\n+  emit_insn (gen_addsi3 (scratch_string, scratch_string, scratch_dlmzb));\n+  emit_insn (gen_subsi3 (result, scratch_string, addr));\n+  emit_insn (gen_subsi3 (result, result, const1_rtx));\n+  DONE;\n+})\n+\f\n (define_split\n   [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))"}, {"sha": "1ecd87b5c3cf3e0b7c2283af54f550d4fde63538", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=716019c0ad646715c24467a80bf0595a1a2ad7cb", "patch": "@@ -72,6 +72,10 @@ mmulhw\n Target Report Mask(MULHW)\n Use 4xx half-word multiply instructions\n \n+mdlmzb\n+Target Report Mask(DLMZB)\n+Use 4xx string-search dlmzb instruction\n+\n mmultiple\n Target Report Mask(MULTIPLE)\n Generate load/store multiple instructions\n@@ -113,11 +117,11 @@ Target Report RejectNegative InverseMask(NO_FUSED_MADD, FUSED_MADD)\n Generate fused multiply/add instructions\n \n msched-prolog\n-Target Report Mask(SCHED_PROLOG)\n+Target Report Var(TARGET_SCHED_PROLOG) Init(1)\n Schedule the start and end of the procedure\n \n msched-epilog\n-Target Undocumented Mask(SCHED_PROLOG) MaskExists\n+Target Undocumented Var(TARGET_SCHED_PROLOG) VarExists\n \n maix-struct-return\n Target Report RejectNegative Var(aix_struct_return)"}, {"sha": "f11214f7f9c4bb24b3cedacca9219697bd7d89b4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=716019c0ad646715c24467a80bf0595a1a2ad7cb", "patch": "@@ -670,6 +670,7 @@ See RS/6000 and PowerPC Options.\n -mspe=yes  -mspe=no @gol\n -mvrsave -mno-vrsave @gol\n -mmulhw -mno-mulhw @gol\n+-mdlmzb -mno-dlmzb @gol\n -mfloat-gprs=yes  -mfloat-gprs=no -mfloat-gprs=single -mfloat-gprs=double @gol\n -mprototype  -mno-prototype @gol\n -msim  -mmvme  -mads  -myellowknife  -memb  -msdata @gol\n@@ -11106,7 +11107,7 @@ following options: @option{-maltivec}, @option{-mfprnd},\n @option{-mhard-float}, @option{-mmfcrf}, @option{-mmultiple},\n @option{-mnew-mnemonics}, @option{-mpopcntb}, @option{-mpower},\n @option{-mpower2}, @option{-mpowerpc64}, @option{-mpowerpc-gpopt},\n-@option{-mpowerpc-gfxopt}, @option{-mstring}, @option{-mmulhw}.\n+@option{-mpowerpc-gfxopt}, @option{-mstring}, @option{-mmulhw}, @option{dlmzb}.\n The particular options\n set for any particular CPU will vary between compiler versions,\n depending on what setting seems to produce optimal code for that CPU;\n@@ -11370,6 +11371,14 @@ multiply-accumulate instructions on the IBM 405 and 440 processors.\n These instructions are generated by default when targetting those\n processors.\n \n+@item -mdlmzb\n+@itemx -mno-dlmzb\n+@opindex mdlmzb\n+@opindex mno-dlmzb\n+Generate code that uses (does not use) the string-search @samp{dlmzb}\n+instruction on the IBM 405 and 440 processors.  This instruction is\n+generated by default when targetting those processors.\n+\n @item -mno-bit-align\n @itemx -mbit-align\n @opindex mno-bit-align"}, {"sha": "5d89febca76e3b08256e59f4585550e079db8649", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=716019c0ad646715c24467a80bf0595a1a2ad7cb", "patch": "@@ -1,3 +1,8 @@\n+2006-03-14  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.target/powerpc/405-dlmzb-strlen-1.c,\n+\tgcc.target/powerpc/440-dlmzb-strlen-1.c: New tests.\n+\n 2006-03-13  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/26557"}, {"sha": "dc3095150102d8f5302939d6460c1f520e32203e", "filename": "gcc/testsuite/gcc.target/powerpc/405-dlmzb-strlen-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-dlmzb-strlen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-dlmzb-strlen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-dlmzb-strlen-1.c?ref=716019c0ad646715c24467a80bf0595a1a2ad7cb", "patch": "@@ -0,0 +1,17 @@\n+/* Test generation of dlmzb for strlen on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"dlmzb\\\\. \" } } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+size_t strlen(const char *);\n+\n+size_t\n+strlen8(const long long *s)\n+{\n+  return strlen((const char *)s);\n+}"}, {"sha": "c69a7c91bcca07121470e5cb41c36fc059d9774a", "filename": "gcc/testsuite/gcc.target/powerpc/440-dlmzb-strlen-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-dlmzb-strlen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716019c0ad646715c24467a80bf0595a1a2ad7cb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-dlmzb-strlen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-dlmzb-strlen-1.c?ref=716019c0ad646715c24467a80bf0595a1a2ad7cb", "patch": "@@ -0,0 +1,17 @@\n+/* Test generation of dlmzb for strlen on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"dlmzb\\\\. \" } } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+size_t strlen(const char *);\n+\n+size_t\n+strlen8(const long long *s)\n+{\n+  return strlen((const char *)s);\n+}"}]}