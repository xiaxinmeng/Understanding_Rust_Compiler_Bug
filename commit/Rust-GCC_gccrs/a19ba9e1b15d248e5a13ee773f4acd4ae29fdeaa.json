{"sha": "a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE5YmE5ZTFiMTVkMjQ4ZTVhMTNlZTc3M2Y0YWNkNGFlMjlmZGVhYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:18:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:18:03Z"}, "message": "[AArch64] Use SVE binary immediate instructions for conditional arithmetic\n\nThis patch lets us use the immediate forms of FADD, FSUB, FSUBR,\nFMUL, FMAXNM and FMINNM for conditional arithmetic.  (We already\nuse them for normal unconditional arithmetic.)\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_print_vector_float_operand):\n\tPrint 2.0 naturally.\n\t(aarch64_sve_float_mul_immediate_p): Return true for 2.0.\n\t* config/aarch64/predicates.md\n\t(aarch64_sve_float_negated_arith_immediate): New predicate,\n\trenamed from aarch64_sve_float_arith_with_sub_immediate.\n\t(aarch64_sve_float_arith_with_sub_immediate): Test for both\n\tpositive and negative constants.\n\t(aarch64_sve_float_arith_with_sub_operand): Redefine as a register\n\tor an aarch64_sve_float_arith_with_sub_immediate.\n\t* config/aarch64/constraints.md (vsN): Use\n\taarch64_sve_float_negated_arith_immediate.\n\t* config/aarch64/iterators.md (SVE_COND_FP_BINARY_I1): New int\n\titerator.\n\t(sve_pred_fp_rhs2_immediate): New int attribute.\n\t* config/aarch64/aarch64-sve.md\n\t(cond_<SVE_COND_FP_BINARY:optab><SVE_F:mode>): Use\n\tsve_pred_fp_rhs1_operand and sve_pred_fp_rhs2_operand.\n\t(*cond_<SVE_COND_FP_BINARY_I1:optab><SVE_F:mode>_2_const)\n\t(*cond_<SVE_COND_FP_BINARY_I1:optab><SVE_F:mode>_any_const)\n\t(*cond_add<SVE_F:mode>_2_const, *cond_add<SVE_F:mode>_any_const)\n\t(*cond_sub<mode>_3_const, *cond_sub<mode>_any_const): New patterns.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_fadd_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_fadd_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fadd_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fadd_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fadd_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fadd_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fadd_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fadd_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fsubr_1.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fsubr_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fsubr_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fsubr_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fsubr_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fsubr_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fsubr_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fsubr_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_1.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_1.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmul_1.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmul_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmul_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmul_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmul_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmul_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmul_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmul_4_run.c: Likewise.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274508", "tree": {"sha": "585d320966057caeb76464388dcb7d0d8a8c20e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/585d320966057caeb76464388dcb7d0d8a8c20e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf30864e4c241e50585745af504b09db55f7f08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf30864e4c241e50585745af504b09db55f7f08b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf30864e4c241e50585745af504b09db55f7f08b"}], "stats": {"total": 1790, "additions": 1772, "deletions": 18}, "files": [{"sha": "52ab8e5d3702811a13a6764046345ed6e150bac8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -1,3 +1,29 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64.c (aarch64_print_vector_float_operand):\n+\tPrint 2.0 naturally.\n+\t(aarch64_sve_float_mul_immediate_p): Return true for 2.0.\n+\t* config/aarch64/predicates.md\n+\t(aarch64_sve_float_negated_arith_immediate): New predicate,\n+\trenamed from aarch64_sve_float_arith_with_sub_immediate.\n+\t(aarch64_sve_float_arith_with_sub_immediate): Test for both\n+\tpositive and negative constants.\n+\t(aarch64_sve_float_arith_with_sub_operand): Redefine as a register\n+\tor an aarch64_sve_float_arith_with_sub_immediate.\n+\t* config/aarch64/constraints.md (vsN): Use\n+\taarch64_sve_float_negated_arith_immediate.\n+\t* config/aarch64/iterators.md (SVE_COND_FP_BINARY_I1): New int\n+\titerator.\n+\t(sve_pred_fp_rhs2_immediate): New int attribute.\n+\t* config/aarch64/aarch64-sve.md\n+\t(cond_<SVE_COND_FP_BINARY:optab><SVE_F:mode>): Use\n+\tsve_pred_fp_rhs1_operand and sve_pred_fp_rhs2_operand.\n+\t(*cond_<SVE_COND_FP_BINARY_I1:optab><SVE_F:mode>_2_const)\n+\t(*cond_<SVE_COND_FP_BINARY_I1:optab><SVE_F:mode>_any_const)\n+\t(*cond_add<SVE_F:mode>_2_const, *cond_add<SVE_F:mode>_any_const)\n+\t(*cond_sub<mode>_3_const, *cond_sub<mode>_any_const): New patterns.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "d43ce521a799bf3385f0ca1ffd14599b18c27be3", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 209, "deletions": 12, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -2553,14 +2553,14 @@\n ;; ---- [FP] General binary arithmetic corresponding to unspecs\n ;; -------------------------------------------------------------------------\n ;; Includes merging forms of:\n-;; - FADD\n+;; - FADD    (constant forms handled in the \"Addition\" section)\n ;; - FDIV\n ;; - FDIVR\n-;; - FMAXNM\n-;; - FMINNM\n-;; - FMUL\n-;; - FSUB\n-;; - FSUBR\n+;; - FMAXNM  (including #0.0 and #1.0)\n+;; - FMINNM  (including #0.0 and #1.0)\n+;; - FMUL    (including #0.5 and #2.0)\n+;; - FSUB    (constant forms handled in the \"Addition\" section)\n+;; - FSUBR   (constant forms handled in the \"Subtraction\" section)\n ;; -------------------------------------------------------------------------\n \n ;; Unpredicated floating-point binary operations.\n@@ -2603,8 +2603,8 @@\n \t   (unspec:SVE_F\n \t     [(match_dup 1)\n \t      (const_int SVE_STRICT_GP)\n-\t      (match_operand:SVE_F 2 \"register_operand\")\n-\t      (match_operand:SVE_F 3 \"register_operand\")]\n+\t      (match_operand:SVE_F 2 \"<sve_pred_fp_rhs1_operand>\")\n+\t      (match_operand:SVE_F 3 \"<sve_pred_fp_rhs2_operand>\")]\n \t     SVE_COND_FP_BINARY)\n \t   (match_operand:SVE_F 4 \"aarch64_simd_reg_or_zero\")]\n \t  UNSPEC_SEL))]\n@@ -2635,6 +2635,30 @@\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n+;; Same for operations that take a 1-bit constant.\n+(define_insn_and_rewrite \"*cond_<optab><mode>_2_const\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"0, w\")\n+\t      (match_operand:SVE_F 3 \"<sve_pred_fp_rhs2_immediate>\")]\n+\t     SVE_COND_FP_BINARY_I1)\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\"\n+  \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0, %2\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n+  \"&& !rtx_equal_p (operands[1], operands[4])\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; Predicated floating-point operations, merging with the second input.\n (define_insn_and_rewrite \"*cond_<optab><mode>_3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?&w\")\n@@ -2700,6 +2724,44 @@\n   [(set_attr \"movprfx\" \"yes\")]\n )\n \n+;; Same for operations that take a 1-bit constant.\n+(define_insn_and_rewrite \"*cond_<optab><mode>_any_const\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 5)\n+\t      (match_operand:SI 6 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"w, w, w\")\n+\t      (match_operand:SVE_F 3 \"<sve_pred_fp_rhs2_immediate>\")]\n+\t     SVE_COND_FP_BINARY_I1)\n+\t   (match_operand:SVE_F 4 \"aarch64_simd_reg_or_zero\" \"Dz, 0, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && !rtx_equal_p (operands[2], operands[4])\n+   && aarch64_sve_pred_dominates_p (&operands[5], operands[1])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   #\"\n+  \"&& 1\"\n+  {\n+    if (reload_completed\n+        && register_operand (operands[4], <MODE>mode)\n+        && !rtx_equal_p (operands[0], operands[4]))\n+      {\n+\temit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[2],\n+\t\t\t\t\t\t operands[4], operands[1]));\n+\toperands[4] = operands[2] = operands[0];\n+      }\n+    else if (!rtx_equal_p (operands[1], operands[5]))\n+      operands[5] = copy_rtx (operands[1]);\n+    else\n+      FAIL;\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] Addition\n ;; -------------------------------------------------------------------------\n@@ -2729,7 +2791,76 @@\n   [(set (match_dup 0) (plus:SVE_F (match_dup 2) (match_dup 3)))]\n )\n \n-;; Merging forms are handled through SVE_COND_FP_BINARY.\n+;; Predicated floating-point addition of a constant, merging with the\n+;; first input.\n+(define_insn_and_rewrite \"*cond_add<mode>_2_const\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?w, ?w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"0, 0, w, w\")\n+\t      (match_operand:SVE_F 3 \"aarch64_sve_float_arith_with_sub_immediate\" \"vsA, vsN, vsA, vsN\")]\n+\t     UNSPEC_COND_FADD)\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\"\n+  \"@\n+   fadd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   fsub\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%N3\n+   movprfx\\t%0, %2\\;fadd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0, %2\\;fsub\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%N3\"\n+  \"&& !rtx_equal_p (operands[1], operands[4])\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,*,yes,yes\")]\n+)\n+\n+;; Predicated floating-point addition of a constant, merging with an\n+;; independent value.\n+(define_insn_and_rewrite \"*cond_add<mode>_any_const\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, w, w, ?w, ?w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 5)\n+\t      (match_operand:SI 6 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"w, w, w, w, w, w\")\n+\t      (match_operand:SVE_F 3 \"aarch64_sve_float_arith_with_sub_immediate\" \"vsA, vsN, vsA, vsN, vsA, vsN\")]\n+\t     UNSPEC_COND_FADD)\n+\t   (match_operand:SVE_F 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, 0, 0, w, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && !rtx_equal_p (operands[2], operands[4])\n+   && aarch64_sve_pred_dominates_p (&operands[5], operands[1])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;fadd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;fsub\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%N3\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;fadd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;fsub\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%N3\n+   #\n+   #\"\n+  \"&& 1\"\n+  {\n+    if (reload_completed\n+        && register_operand (operands[4], <MODE>mode)\n+        && !rtx_equal_p (operands[0], operands[4]))\n+      {\n+\temit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[2],\n+\t\t\t\t\t\t operands[4], operands[1]));\n+\toperands[4] = operands[2] = operands[0];\n+      }\n+    else if (!rtx_equal_p (operands[1], operands[5]))\n+      operands[5] = copy_rtx (operands[1]);\n+    else\n+      FAIL;\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n+;; Register merging forms are handled through SVE_COND_FP_BINARY.\n \n ;; -------------------------------------------------------------------------\n ;; ---- [FP] Subtraction\n@@ -2765,7 +2896,71 @@\n   [(set (match_dup 0) (minus:SVE_F (match_dup 2) (match_dup 3)))]\n )\n \n-;; Merging forms are handled through SVE_COND_FP_BINARY.\n+;; Predicated floating-point subtraction from a constant, merging with the\n+;; second input.\n+(define_insn_and_rewrite \"*cond_sub<mode>_3_const\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"aarch64_sve_float_arith_immediate\")\n+\t      (match_operand:SVE_F 3 \"register_operand\" \"0, w\")]\n+\t     UNSPEC_COND_FSUB)\n+\t   (match_dup 3)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\"\n+  \"@\n+   fsubr\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%2\n+   movprfx\\t%0, %3\\;fsubr\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%2\"\n+  \"&& !rtx_equal_p (operands[1], operands[4])\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated floating-point subtraction from a constant, merging with an\n+;; independent value.\n+(define_insn_and_rewrite \"*cond_sub<mode>_any_const\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 5)\n+\t      (match_operand:SI 6 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"aarch64_sve_float_arith_immediate\")\n+\t      (match_operand:SVE_F 3 \"register_operand\" \"w, w, w\")]\n+\t     UNSPEC_COND_FSUB)\n+\t   (match_operand:SVE_F 4 \"aarch64_simd_reg_or_zero\" \"Dz, 0, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && !rtx_equal_p (operands[3], operands[4])\n+   && aarch64_sve_pred_dominates_p (&operands[5], operands[1])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %3.<Vetype>\\;fsubr\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%2\n+   movprfx\\t%0.<Vetype>, %1/m, %3.<Vetype>\\;fsubr\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%2\n+   #\"\n+  \"&& 1\"\n+  {\n+    if (reload_completed\n+        && register_operand (operands[4], <MODE>mode)\n+        && !rtx_equal_p (operands[0], operands[4]))\n+      {\n+\temit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[3],\n+\t\t\t\t\t\t operands[4], operands[1]));\n+\toperands[4] = operands[3] = operands[0];\n+      }\n+    else if (!rtx_equal_p (operands[1], operands[5]))\n+      operands[5] = copy_rtx (operands[1]);\n+    else\n+      FAIL;\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n+;; Register merging forms are handled through SVE_COND_FP_BINARY.\n \n ;; -------------------------------------------------------------------------\n ;; ---- [FP] Absolute difference\n@@ -2939,7 +3134,8 @@\n   [(set (match_dup 0) (mult:SVE_F (match_dup 2) (match_dup 3)))]\n )\n \n-;; Merging forms are handled through SVE_COND_FP_BINARY.\n+;; Merging forms are handled through SVE_COND_FP_BINARY and\n+;; SVE_COND_FP_BINARY_I1.\n \n ;; -------------------------------------------------------------------------\n ;; ---- [FP] Binary logical operations\n@@ -3064,7 +3260,8 @@\n   [(set_attr \"movprfx\" \"*,*,yes,yes\")]\n )\n \n-;; Merging forms are handled through SVE_COND_FP_BINARY.\n+;; Merging forms are handled through SVE_COND_FP_BINARY and\n+;; SVE_COND_FP_BINARY_I1.\n \n ;; -------------------------------------------------------------------------\n ;; ---- [PRED] Binary logical operations"}, {"sha": "81a267bde54372d999f4851d537d6885f9abd4ce", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -8289,6 +8289,8 @@ aarch64_print_vector_float_operand (FILE *f, rtx x, bool negate)\n      fixed form in the assembly syntax.  */\n   if (real_equal (&r, &dconst0))\n     asm_fprintf (f, \"0.0\");\n+  else if (real_equal (&r, &dconst2))\n+    asm_fprintf (f, \"2.0\");\n   else if (real_equal (&r, &dconst1))\n     asm_fprintf (f, \"1.0\");\n   else if (real_equal (&r, &dconsthalf))\n@@ -15205,11 +15207,10 @@ aarch64_sve_float_mul_immediate_p (rtx x)\n {\n   rtx elt;\n \n-  /* GCC will never generate a multiply with an immediate of 2, so there is no\n-     point testing for it (even though it is a valid constant).  */\n   return (const_vec_duplicate_p (x, &elt)\n \t  && GET_CODE (elt) == CONST_DOUBLE\n-\t  && real_equal (CONST_DOUBLE_REAL_VALUE (elt), &dconsthalf));\n+\t  && (real_equal (CONST_DOUBLE_REAL_VALUE (elt), &dconsthalf)\n+\t      || real_equal (CONST_DOUBLE_REAL_VALUE (elt), &dconst2)));\n }\n \n /* Return true if replicating VAL32 is a valid 2-byte or 4-byte immediate"}, {"sha": "bb2fe8eb1f08f95a942a03ac796039cf2b520108", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -458,4 +458,4 @@\n (define_constraint \"vsN\"\n   \"@internal\n    A constraint that matches the negative of vsA\"\n- (match_operand 0 \"aarch64_sve_float_arith_with_sub_immediate\"))\n+ (match_operand 0 \"aarch64_sve_float_negated_arith_immediate\"))"}, {"sha": "31878434c29daf1409cf51607260f2e8b0485933", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -1713,6 +1713,10 @@\n \t\t\t\t\t UNSPEC_COND_FMUL\n \t\t\t\t\t UNSPEC_COND_FSUB])\n \n+(define_int_iterator SVE_COND_FP_BINARY_I1 [UNSPEC_COND_FMAXNM\n+\t\t\t\t\t    UNSPEC_COND_FMINNM\n+\t\t\t\t\t    UNSPEC_COND_FMUL])\n+\n (define_int_iterator SVE_COND_FP_BINARY_REG [UNSPEC_COND_FDIV])\n \n ;; Floating-point max/min operations that correspond to optabs,\n@@ -2108,3 +2112,9 @@\n    (UNSPEC_COND_FMINNM \"aarch64_sve_float_maxmin_operand\")\n    (UNSPEC_COND_FMUL \"aarch64_sve_float_mul_operand\")\n    (UNSPEC_COND_FSUB \"register_operand\")])\n+\n+;; Likewise for immediates only.\n+(define_int_attr sve_pred_fp_rhs2_immediate\n+  [(UNSPEC_COND_FMAXNM \"aarch64_sve_float_maxmin_immediate\")\n+   (UNSPEC_COND_FMINNM \"aarch64_sve_float_maxmin_immediate\")\n+   (UNSPEC_COND_FMUL \"aarch64_sve_float_mul_immediate\")])"}, {"sha": "98f28f5ff8b0162bc9347291ff92ff631bfd5651", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -663,10 +663,14 @@\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_sve_float_arith_immediate_p (op, false)\")))\n \n-(define_predicate \"aarch64_sve_float_arith_with_sub_immediate\"\n+(define_predicate \"aarch64_sve_float_negated_arith_immediate\"\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_sve_float_arith_immediate_p (op, true)\")))\n \n+(define_predicate \"aarch64_sve_float_arith_with_sub_immediate\"\n+  (ior (match_operand 0 \"aarch64_sve_float_arith_immediate\")\n+       (match_operand 0 \"aarch64_sve_float_negated_arith_immediate\")))\n+\n (define_predicate \"aarch64_sve_float_mul_immediate\"\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_sve_float_mul_immediate_p (op)\")))\n@@ -730,7 +734,7 @@\n        (match_operand 0 \"aarch64_sve_float_arith_immediate\")))\n \n (define_predicate \"aarch64_sve_float_arith_with_sub_operand\"\n-  (ior (match_operand 0 \"aarch64_sve_float_arith_operand\")\n+  (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_sve_float_arith_with_sub_immediate\")))\n \n (define_predicate \"aarch64_sve_float_mul_operand\""}, {"sha": "aad8e04c32ca396b7f682368469a58798ca212be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -1,3 +1,47 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/cond_fadd_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_fadd_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fadd_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fadd_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fadd_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fadd_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fadd_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fadd_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fsubr_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fsubr_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fsubr_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fsubr_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fsubr_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fsubr_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fsubr_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fsubr_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmul_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmul_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmul_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmul_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmul_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmul_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmul_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmul_4_run.c: Likewise.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "d103e1f38a0dd475bd1450cf6a8177bc1d8547ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fadd_1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_1.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? y[i] + (TYPE) CONST : y[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, PRED_TYPE) \\\n+  T (TYPE, PRED_TYPE, half, 0.5) \\\n+  T (TYPE, PRED_TYPE, one, 1.0) \\\n+  T (TYPE, PRED_TYPE, two, 2.0) \\\n+  T (TYPE, PRED_TYPE, minus_half, -0.5) \\\n+  T (TYPE, PRED_TYPE, minus_one, -1.0) \\\n+  T (TYPE, PRED_TYPE, minus_two, -2.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, _Float16, int16_t) \\\n+  TEST_TYPE (T, float, int32_t) \\\n+  TEST_TYPE (T, double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #-2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #-2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #-2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "956ae143575dd21a0f863d0afd7b670d2e76bfdb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fadd_1_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_1_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fadd_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? y[i] + (TYPE) CONST : y[i];\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "b7d02f4ad414bfe13588cd55dfd98ab238084820", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fadd_2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_2.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, CONST)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tTYPE *__restrict z,\t\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = y[i] < 8 ? z[i] + (TYPE) CONST : y[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, half, 0.5) \\\n+  T (TYPE, one, 1.0) \\\n+  T (TYPE, two, 2.0) \\\n+  T (TYPE, minus_half, -0.5) \\\n+  T (TYPE, minus_one, -1.0) \\\n+  T (TYPE, minus_two, -2.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, float) \\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #-2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #-2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 6 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "debf395cc3f73337924c1888035385cc87500b34", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fadd_2_run.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_2_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fadd_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, CONST)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N], z[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i % 13;\t\t\t\t\t\t\t\\\n+\tz[i] = i * i;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, z, N);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = y[i] < 8 ? z[i] + (TYPE) CONST : y[i];\t\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "aec0e5acac9231194430c247f1aeeb27132f0e55", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fadd_3.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_3.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? y[i] + (TYPE) CONST : 4;\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, PRED_TYPE) \\\n+  T (TYPE, PRED_TYPE, half, 0.5) \\\n+  T (TYPE, PRED_TYPE, one, 1.0) \\\n+  T (TYPE, PRED_TYPE, two, 2.0) \\\n+  T (TYPE, PRED_TYPE, minus_half, -0.5) \\\n+  T (TYPE, PRED_TYPE, minus_one, -1.0) \\\n+  T (TYPE, PRED_TYPE, minus_two, -2.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, _Float16, int16_t) \\\n+  TEST_TYPE (T, float, int32_t) \\\n+  TEST_TYPE (T, double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #-2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #-2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #-2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 6 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */"}, {"sha": "d5268c5cad85739f1f592ced46d383417b1b1ca7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fadd_3_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_3_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fadd_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? y[i] + (TYPE) CONST : 4;\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "bb276c140282364b143afbf4e9564c9fad3d641d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fadd_4.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_4.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? y[i] + (TYPE) CONST : 0;\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, PRED_TYPE) \\\n+  T (TYPE, PRED_TYPE, half, 0.5) \\\n+  T (TYPE, PRED_TYPE, one, 1.0) \\\n+  T (TYPE, PRED_TYPE, two, 2.0) \\\n+  T (TYPE, PRED_TYPE, minus_half, -0.5) \\\n+  T (TYPE, PRED_TYPE, minus_one, -1.0) \\\n+  T (TYPE, PRED_TYPE, minus_two, -2.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, _Float16, int16_t) \\\n+  TEST_TYPE (T, float, int32_t) \\\n+  TEST_TYPE (T, double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #-2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #-2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #-2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 6 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "4ea8be66120b406c2e66886e30c4a0c63b366892", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fadd_4_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fadd_4_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fadd_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? y[i] + (TYPE) CONST : 0;\t\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "d0db0900ece3065a6567fd21833f2d6d51f4b8ed", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_1.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FN\n+#define FN(X) __builtin_fmax##X\n+#endif\n+\n+#define DEF_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? FN (y[i], CONST) : y[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, FN, TYPE, PRED_TYPE) \\\n+  T (FN, TYPE, PRED_TYPE, zero, 0) \\\n+  T (FN, TYPE, PRED_TYPE, one, 1) \\\n+  T (FN, TYPE, PRED_TYPE, two, 2)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, FN (f16), _Float16, int16_t) \\\n+  TEST_TYPE (T, FN (f32), float, int32_t) \\\n+  TEST_TYPE (T, FN (f64), double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "00a3c41f228417ae140459e35563cd21936c38eb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_1_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_1_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"cond_fmaxnm_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? FN (y[i], CONST) : y[i];\t\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "0b535d15f3014db7f519380ecf375dbf088b32a2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_2.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FN\n+#define FN(X) __builtin_fmax##X\n+#endif\n+\n+#define DEF_LOOP(FN, TYPE, NAME, CONST)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tTYPE *__restrict z,\t\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = y[i] < 8 ? FN (z[i], CONST) : y[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, FN, TYPE) \\\n+  T (FN, TYPE, zero, 0) \\\n+  T (FN, TYPE, one, 1) \\\n+  T (FN, TYPE, two, 2)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, FN (f32), float) \\\n+  TEST_TYPE (T, FN (f64), double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "9eb4d80fc289b472d12fc312221cfbce668d473a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_2_run.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_2_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"cond_fmaxnm_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FN, TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N], z[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i % 13;\t\t\t\t\t\t\t\\\n+\tz[i] = i * i;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, z, N);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = y[i] < 8 ? FN (z[i], CONST) : y[i];\t\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "741f8f6d08e623cb47a75767d9c0ef9e676cfc7e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_3.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_3.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FN\n+#define FN(X) __builtin_fmax##X\n+#endif\n+\n+#define DEF_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? FN (y[i], CONST) : 4;\t\\\n+  }\n+\n+#define TEST_TYPE(T, FN, TYPE, PRED_TYPE) \\\n+  T (FN, TYPE, PRED_TYPE, zero, 0) \\\n+  T (FN, TYPE, PRED_TYPE, one, 1) \\\n+  T (FN, TYPE, PRED_TYPE, two, 2)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, FN (f16), _Float16, int16_t) \\\n+  TEST_TYPE (T, FN (f32), float, int32_t) \\\n+  TEST_TYPE (T, FN (f64), double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */"}, {"sha": "4aac75f0e08908cd5b9d1be77b14dad9a2615a6b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_3_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_3_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"cond_fmaxnm_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)\t       \t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? FN (y[i], CONST) : 4;\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "83a53c7d460cabee3f49a913fe55a9883550f8d2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_4.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_4.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FN\n+#define FN(X) __builtin_fmax##X\n+#endif\n+\n+#define DEF_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? FN (y[i], CONST) : 0;\t\\\n+  }\n+\n+#define TEST_TYPE(T, FN, TYPE, PRED_TYPE) \\\n+  T (FN, TYPE, PRED_TYPE, zero, 0) \\\n+  T (FN, TYPE, PRED_TYPE, one, 1) \\\n+  T (FN, TYPE, PRED_TYPE, two, 2)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, FN (f16), _Float16, int16_t) \\\n+  TEST_TYPE (T, FN (f32), float, int32_t) \\\n+  TEST_TYPE (T, FN (f64), double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "e1d9043386e584c4d06e354fec8699ffae14fdfe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_4_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_4_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"cond_fmaxnm_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FN, TYPE, PRED_TYPE, NAME, CONST)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? FN (y[i], CONST) : 0;\t\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "d667b20884eb7e73a2b9f928b4549df1df4d1130", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_1.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "5df2ff84b1f83d95199fc6befefde0c62fe0fb33", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_1_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_1_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_1_run.c\""}, {"sha": "d66a84b01bf84ac0ac77a95756e5cd15183df7bf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_2.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_2.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "79a98bb770777b97b5c56f0d977ab30371fdc7aa", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_2_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_2_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_2_run.c\""}, {"sha": "d39dd1825bd1cc8176e791946c68d209f552daf1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_3.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_3.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */"}, {"sha": "ca1a047daff1e6f4d0deb0d1089ed3e32732dafc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_3_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_3_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_3_run.c\""}, {"sha": "fff6fdd37e5caee3edeadb4037c6ebe923e1fa4a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_4.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_4.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "b945d047077f8734102f6e683cb3436d903d8beb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_4_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_4_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_4_run.c\""}, {"sha": "ce417ed85b48776c7598d1339d5d6d77d42f9f14", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmul_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_1.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? y[i] * (TYPE) CONST : y[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, PRED_TYPE) \\\n+  T (TYPE, PRED_TYPE, half, 0.5) \\\n+  T (TYPE, PRED_TYPE, two, 2.0) \\\n+  T (TYPE, PRED_TYPE, four, 4.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, _Float16, int16_t) \\\n+  TEST_TYPE (T, float, int32_t) \\\n+  TEST_TYPE (T, double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #4\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #4\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #4\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "9ca5b5080682536102bb7366a36e234307a0f58a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmul_1_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_1_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmul_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? y[i] * (TYPE) CONST : y[i];\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "cbf9d13a548c210c2fddde933fb7f2a945e8c07d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmul_2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_2.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, CONST)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tTYPE *__restrict z,\t\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = y[i] < 8 ? z[i] * (TYPE) CONST : y[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, half, 0.5) \\\n+  T (TYPE, two, 2.0) \\\n+  T (TYPE, four, 4.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, float) \\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #4\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #4\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "44b283ba3d24ecab72c1661d99e2fbfa53500d96", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmul_2_run.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_2_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmul_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, CONST)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N], z[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i % 13;\t\t\t\t\t\t\t\\\n+\tz[i] = i * i;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, z, N);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = y[i] < 8 ? z[i] * (TYPE) CONST : y[i];\t\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "4da147e15680f60fb27be5219a798cb25b905193", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmul_3.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_3.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? y[i] * (TYPE) CONST : 8;\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, PRED_TYPE) \\\n+  T (TYPE, PRED_TYPE, half, 0.5) \\\n+  T (TYPE, PRED_TYPE, two, 2.0) \\\n+  T (TYPE, PRED_TYPE, four, 4.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, _Float16, int16_t) \\\n+  TEST_TYPE (T, float, int32_t) \\\n+  TEST_TYPE (T, double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #4\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #4\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #4\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */"}, {"sha": "9b81d43c9082b67d64067dd535d050f19108f504", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmul_3_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_3_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmul_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? y[i] * (TYPE) CONST : 8;\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "c4fdb2b2b27efa10f9b4c508600c443df7a9afba", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmul_4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_4.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? y[i] * (TYPE) CONST : 0;\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, PRED_TYPE) \\\n+  T (TYPE, PRED_TYPE, half, 0.5) \\\n+  T (TYPE, PRED_TYPE, two, 2.0) \\\n+  T (TYPE, PRED_TYPE, four, 4.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, _Float16, int16_t) \\\n+  TEST_TYPE (T, float, int32_t) \\\n+  TEST_TYPE (T, double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #4\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #4\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #4\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "b93e031e55f42d8a9fcb53df0f19877fdad88bfe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmul_4_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmul_4_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmul_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? y[i] * (TYPE) CONST : 0;\t\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "8e7172af42ea1591f38487f70d9e62fc9a67a925", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fsubr_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_1.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? (TYPE) CONST - y[i] : y[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, PRED_TYPE) \\\n+  T (TYPE, PRED_TYPE, half, 0.5) \\\n+  T (TYPE, PRED_TYPE, one, 1.0) \\\n+  T (TYPE, PRED_TYPE, two, 2.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, _Float16, int16_t) \\\n+  TEST_TYPE (T, float, int32_t) \\\n+  TEST_TYPE (T, double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "61ffac429b55d12ab16e27ac885fd61b99de6445", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fsubr_1_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_1_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fsubr_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? (TYPE) CONST - y[i] : y[i];\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "6d2efde94658ad4db8f7b2c75f67f2e67574159d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fsubr_2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_2.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, CONST)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tTYPE *__restrict z,\t\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = y[i] < 8 ? (TYPE) CONST - z[i] : y[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, half, 0.5) \\\n+  T (TYPE, one, 1.0) \\\n+  T (TYPE, two, 2.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, float) \\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "1b25392b0863683b2159c6ae1c059f9e5cdbdf3e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fsubr_2_run.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_2_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fsubr_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, CONST)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N], z[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i % 13;\t\t\t\t\t\t\t\\\n+\tz[i] = i * i;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, z, N);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = y[i] < 8 ? (TYPE) CONST - z[i] : y[i];\t\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "328af5741ef7f558d44e29a6c8f2e72c21ccb2b8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fsubr_3.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_3.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? (TYPE) CONST - y[i] : 4;\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, PRED_TYPE) \\\n+  T (TYPE, PRED_TYPE, half, 0.5) \\\n+  T (TYPE, PRED_TYPE, one, 1.0) \\\n+  T (TYPE, PRED_TYPE, two, 2.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, _Float16, int16_t) \\\n+  TEST_TYPE (T, float, int32_t) \\\n+  TEST_TYPE (T, double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */"}, {"sha": "8978287df279affcacfb68594b4bee07f047f3c4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fsubr_3_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_3_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fsubr_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? (TYPE) CONST - y[i] : 4;\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "1d420b104a31e1aac86ebeabd23db1958f38ae52", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fsubr_4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_4.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y,\t\t\\\n+\t\t\tPRED_TYPE *__restrict pred,\t\\\n+\t\t\tint n)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] != 1 ? (TYPE) CONST - y[i] : 0;\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE, PRED_TYPE) \\\n+  T (TYPE, PRED_TYPE, half, 0.5) \\\n+  T (TYPE, PRED_TYPE, one, 1.0) \\\n+  T (TYPE, PRED_TYPE, two, 2.0)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, _Float16, int16_t) \\\n+  TEST_TYPE (T, float, int32_t) \\\n+  TEST_TYPE (T, double, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "2cb3409af00bf7e547c57470d116c071cc3727b0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fsubr_4_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fsubr_4_run.c?ref=a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fsubr_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, PRED_TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], y[N];\t\t\t\t\t\t\t\\\n+    PRED_TYPE pred[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ty[i] = i * i;\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, y, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = i % 3 != 1 ? (TYPE) CONST - y[i] : 0;\t\t\\\n+\tif (x[i] != expected)\t\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}