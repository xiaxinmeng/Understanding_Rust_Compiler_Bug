{"sha": "e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwMjZkYzA0Y2I4ZGQ3ZjVmNjhkNmFjNTg2NjY1Y2MwNjQzZDVjMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-06-08T15:24:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-06-08T15:24:38Z"}, "message": "system.h (fancy_abort): Annotate by ATTRIBUTE_COLD.\n\n\n\t* system.h (fancy_abort): Annotate by ATTRIBUTE_COLD.\n\t* rtl.h (rtl_check_failed_bounds, rtl_check_failed_type1,\n\trtl_check_failed_type2, rtl_check_failed_code1,\n\trtl_check_failed_code2, rtl_check_failed_code_mode,\n\trtl_check_failed_block_symbol, cwi_check_failed_bounds,\n\trtvec_check_failed_bounds, rtl_check_failed_flag,\n\t_fatal_insn_not_found, _fatal_insn): Likewise.\n\t* tree.h (tree_contains_struct_check_failed,\n\ttree_check_failed, tree_not_check_failed,\n\ttree_class_check_failed, tree_range_check_failed,\n\ttree_not_class_check_failed, tree_int_cst_elt_check_failed,\n\ttree_vec_elt_check_failed, phi_node_elt_check_failed,\n\ttree_operand_check_failed, omp_clause_check_failed,\n\tomp_clause_operand_check_failed, omp_clause_range_check_failed):\n\tLikewise.\n\n\t* cp-tree.h (lang_check_failed): Annotate by ATTRIBUTE_COLD.\n\nFrom-SVN: r249022", "tree": {"sha": "d84b73a4c04b4ab6167283c67dbd1cf42152f615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d84b73a4c04b4ab6167283c67dbd1cf42152f615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/comments", "author": null, "committer": null, "parents": [{"sha": "ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4e85b78f5dab1f297aa9278694593c18fe1ae0"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "141836fcdfbc9a06e90a0b8ad7e5c7aacb9ffb3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "patch": "@@ -1,3 +1,21 @@\n+2017-06-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* system.h (fancy_abort): Annotate by ATTRIBUTE_COLD.\n+\t* rtl.h (rtl_check_failed_bounds, rtl_check_failed_type1,\n+\trtl_check_failed_type2, rtl_check_failed_code1,\n+\trtl_check_failed_code2, rtl_check_failed_code_mode,\n+\trtl_check_failed_block_symbol, cwi_check_failed_bounds,\n+\trtvec_check_failed_bounds, rtl_check_failed_flag,\n+\t_fatal_insn_not_found, _fatal_insn): Likewise.\n+\t* tree.h (tree_contains_struct_check_failed,\n+\ttree_check_failed, tree_not_check_failed,\n+\ttree_class_check_failed, tree_range_check_failed,\n+\ttree_not_class_check_failed, tree_int_cst_elt_check_failed,\n+\ttree_vec_elt_check_failed, phi_node_elt_check_failed,\n+\ttree_operand_check_failed, omp_clause_check_failed,\n+\tomp_clause_operand_check_failed, omp_clause_range_check_failed):\n+\tLikewise.\n+\n 2017-06-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c (cgraph_edge::maybe_hot_p): Do not check"}, {"sha": "14f33c7798968cc89038fc7aa7dca8978a24717d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "patch": "@@ -1,3 +1,7 @@\n+2017-06-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cp-tree.h (lang_check_failed): Annotate by ATTRIBUTE_COLD.\n+\n 2017-06-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* class.c (layout_class_type): Restructure overlong-bitfield tpe"}, {"sha": "550dbf26a80a0ce3d81677dd3adc325a158aaa54", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "patch": "@@ -6819,7 +6819,8 @@ extern void cp_free_lang_data \t\t\t(tree t);\n extern tree force_target_expr\t\t\t(tree, tree, tsubst_flags_t);\n extern tree build_target_expr_with_type\t\t(tree, tree, tsubst_flags_t);\n extern void lang_check_failed\t\t\t(const char *, int,\n-\t\t\t\t\t\t const char *) ATTRIBUTE_NORETURN;\n+\t\t\t\t\t\t const char *) ATTRIBUTE_NORETURN\n+\t\t\t\t\t\t ATTRIBUTE_COLD;\n extern tree stabilize_expr\t\t\t(tree, tree *);\n extern void stabilize_call\t\t\t(tree, tree *);\n extern bool stabilize_init\t\t\t(tree, tree *);"}, {"sha": "c3790ccde9b6bd9ec6306c67a87ca8f082eb0e21", "filename": "gcc/rtl.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "patch": "@@ -1148,30 +1148,30 @@ is_a_helper <rtx_note *>::test (rtx_insn *insn)\n \n extern void rtl_check_failed_bounds (const_rtx, int, const char *, int,\n \t\t\t\t     const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void rtl_check_failed_type1 (const_rtx, int, int, const char *, int,\n \t\t\t\t    const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void rtl_check_failed_type2 (const_rtx, int, int, int, const char *,\n \t\t\t\t    int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void rtl_check_failed_code1 (const_rtx, enum rtx_code, const char *,\n \t\t\t\t    int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void rtl_check_failed_code2 (const_rtx, enum rtx_code, enum rtx_code,\n \t\t\t\t    const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void rtl_check_failed_code_mode (const_rtx, enum rtx_code, machine_mode,\n \t\t\t\t\tbool, const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void rtl_check_failed_block_symbol (const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void cwi_check_failed_bounds (const_rtx, int, const char *, int,\n \t\t\t\t     const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void rtvec_check_failed_bounds (const_rtvec, int, const char *, int,\n \t\t\t\t       const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n \n #else   /* not ENABLE_RTL_CHECKING */\n \n@@ -1269,7 +1269,7 @@ extern void rtvec_check_failed_bounds (const_rtvec, int, const char *, int,\n \n extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n \t\t\t\t   int, const char *)\n-    ATTRIBUTE_NORETURN\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD\n     ;\n \n #else\t/* not ENABLE_RTL_FLAG_CHECKING */\n@@ -3793,9 +3793,9 @@ extern location_t curr_insn_location (void);\n \n /* rtl-error.c */\n extern void _fatal_insn_not_found (const_rtx, const char *, int, const char *)\n-     ATTRIBUTE_NORETURN;\n+     ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void _fatal_insn (const char *, const_rtx, const char *, int, const char *)\n-     ATTRIBUTE_NORETURN;\n+     ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n \n #define fatal_insn(msgid, insn) \\\n \t_fatal_insn (msgid, insn, __FILE__, __LINE__, __FUNCTION__)"}, {"sha": "b091794becbbcf583595b196d745fcb32ae73383", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "patch": "@@ -722,7 +722,8 @@ extern int vsnprintf (char *, size_t, const char *, va_list);\n \n /* Redefine abort to report an internal error w/o coredump, and\n    reporting the location of the error in the source file.  */\n-extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n+extern void fancy_abort (const char *, int, const char *)\n+\t\t\t\t\t ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n #define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)\n \n /* Use gcc_assert(EXPR) to test invariants.  */"}, {"sha": "7de1a7777434e0d25c1bfd3b16ae60f70dc2733b", "filename": "gcc/tree.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e6026dc04cb8dd7f5f68d6ac586665cc0643d5c0", "patch": "@@ -358,45 +358,45 @@ as_internal_fn (combined_fn code)\n extern void tree_contains_struct_check_failed (const_tree,\n \t\t\t\t\t       const enum tree_node_structure_enum,\n \t\t\t\t\t       const char *, int, const char *)\n-  ATTRIBUTE_NORETURN;\n+  ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n \n extern void tree_check_failed (const_tree, const char *, int, const char *,\n-\t\t\t       ...) ATTRIBUTE_NORETURN;\n+\t\t\t       ...) ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void tree_not_check_failed (const_tree, const char *, int, const char *,\n-\t\t\t\t   ...) ATTRIBUTE_NORETURN;\n+\t\t\t\t   ...) ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void tree_class_check_failed (const_tree, const enum tree_code_class,\n \t\t\t\t     const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void tree_range_check_failed (const_tree, const char *, int,\n \t\t\t\t     const char *, enum tree_code,\n \t\t\t\t     enum tree_code)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void tree_not_class_check_failed (const_tree,\n \t\t\t\t\t const enum tree_code_class,\n \t\t\t\t\t const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void tree_int_cst_elt_check_failed (int, int, const char *,\n \t\t\t\t\t   int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void tree_vec_elt_check_failed (int, int, const char *,\n \t\t\t\t       int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void phi_node_elt_check_failed (int, int, const char *,\n \t\t\t\t       int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void tree_operand_check_failed (int, const_tree,\n \t\t\t\t       const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void omp_clause_check_failed (const_tree, const char *, int,\n \t\t\t\t     const char *, enum omp_clause_code)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void omp_clause_operand_check_failed (int, const_tree, const char *,\n \t\t\t\t             int, const char *)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n extern void omp_clause_range_check_failed (const_tree, const char *, int,\n \t\t\t       const char *, enum omp_clause_code,\n \t\t\t       enum omp_clause_code)\n-    ATTRIBUTE_NORETURN;\n+    ATTRIBUTE_NORETURN ATTRIBUTE_COLD;\n \n #else /* not ENABLE_TREE_CHECKING, or not gcc */\n "}]}