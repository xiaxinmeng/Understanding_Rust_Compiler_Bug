{"sha": "c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjYzVjNGFiOTM4ODZmMGEzOTMxYzJjNGMwNDMzYjhmMDc2MmYyZg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-11-18T22:42:34Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-11-18T22:42:34Z"}, "message": "x\n\nFrom-SVN: r13202", "tree": {"sha": "a55de973ef4f1568cf6d5e2311ab4de207a63e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a55de973ef4f1568cf6d5e2311ab4de207a63e9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f/comments", "author": null, "committer": null, "parents": [{"sha": "a9d38797dd25d635f0bca39e64b2d0be10ed164a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d38797dd25d635f0bca39e64b2d0be10ed164a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9d38797dd25d635f0bca39e64b2d0be10ed164a"}], "stats": {"total": 157, "additions": 55, "deletions": 102}, "files": [{"sha": "f1b4d05ad11095112587fe5282749f210de2d878", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f", "patch": "@@ -920,10 +920,17 @@ while (0)\n    since the length can run past this up to a continuation point.  */\n #define DBX_CONTIN_LENGTH 1500\n \n-\n /* How to renumber registers for dbx and gdb. */\n #define DBX_REGISTER_NUMBER(REGNO) mips_dbx_regno[ (REGNO) ]\n \n+/* The mapping from gcc register number to DWARF 2 CFA column number.\n+   This mapping does not allow for tracking DBX register 0, since column 0\n+   is used for the frame address, but since register 0 is fixed this is\n+   not really a problem.  */\n+#define DWARF_FRAME_REGNUM(REG) (DBX_REGISTER_NUMBER (REG))\n+\n+/* The DWARF 2 CFA column which tracks the return address.  */\n+#define DWARF_FRAME_RETURN_COLUMN (FP_REG_LAST + 1)\n \n /* Overrides for the COFF debug format.  */\n #define PUT_SDB_SCL(a)\t\t\t\t\t\\"}, {"sha": "b16c4a3d531acf01167c091cdd1fc836854ea9ea", "filename": "gcc/dwarf2.h", "status": "modified", "additions": 2, "deletions": 78, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f/gcc%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f/gcc%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2.h?ref=c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f", "patch": "@@ -503,82 +503,6 @@ enum dwarf_call_frame_info\n #define DW_CFA_low_user   0x1c\n #define DW_CFA_high_user  0x3f\n \n-/* SGI/MIPS call frame register usage information */\n-enum dwarf_call_reg_usage\n-  {\n-    DW_FRAME_CFA_COL = 0,\n-    DW_FRAME_REG1 = 1,\n-    DW_FRAME_REG2 = 2,\n-    DW_FRAME_REG3 = 3,\n-    DW_FRAME_REG4 = 4,\n-    DW_FRAME_REG5 = 5,\n-    DW_FRAME_REG6 = 6,\n-    DW_FRAME_REG7 = 7,\n-    DW_FRAME_REG8 = 8,\n-    DW_FRAME_REG9 = 9,\n-    DW_FRAME_REG10 = 10,\n-    DW_FRAME_REG11 = 11,\n-    DW_FRAME_REG12 = 12,\n-    DW_FRAME_REG13 = 13,\n-    DW_FRAME_REG14 = 14,\n-    DW_FRAME_REG15 = 15,\n-    DW_FRAME_REG16 = 16,\n-    DW_FRAME_REG17 = 17,\n-    DW_FRAME_REG18 = 18,\n-    DW_FRAME_REG19 = 19,\n-    DW_FRAME_REG20 = 20,\n-    DW_FRAME_REG21 = 21,\n-    DW_FRAME_REG22 = 22,\n-    DW_FRAME_REG23 = 23,\n-    DW_FRAME_REG24 = 24,\n-    DW_FRAME_REG25 = 25,\n-    DW_FRAME_REG26 = 26,\n-    DW_FRAME_REG27 = 27,\n-    DW_FRAME_REG28 = 28,\n-    DW_FRAME_REG29 = 29,\n-    DW_FRAME_REG30 = 30,\n-    DW_FRAME_REG31 = 31,\n-    DW_FRAME_FREG0 = 32,\n-    DW_FRAME_FREG1 = 33,\n-    DW_FRAME_FREG2 = 34,\n-    DW_FRAME_FREG3 = 35,\n-    DW_FRAME_FREG4 = 36,\n-    DW_FRAME_FREG5 = 37,\n-    DW_FRAME_FREG6 = 38,\n-    DW_FRAME_FREG7 = 39,\n-    DW_FRAME_FREG8 = 40,\n-    DW_FRAME_FREG9 = 41,\n-    DW_FRAME_FREG10 = 42,\n-    DW_FRAME_FREG11 = 43,\n-    DW_FRAME_FREG12 = 44,\n-    DW_FRAME_FREG13 = 45,\n-    DW_FRAME_FREG14 = 46,\n-    DW_FRAME_FREG15 = 47,\n-    DW_FRAME_FREG16 = 48,\n-    DW_FRAME_FREG17 = 49,\n-    DW_FRAME_FREG18 = 50,\n-    DW_FRAME_FREG19 = 51,\n-    DW_FRAME_FREG20 = 52,\n-    DW_FRAME_FREG21 = 53,\n-    DW_FRAME_FREG22 = 54,\n-    DW_FRAME_FREG23 = 55,\n-    DW_FRAME_FREG24 = 56,\n-    DW_FRAME_FREG25 = 57,\n-    DW_FRAME_FREG26 = 58,\n-    DW_FRAME_FREG27 = 59,\n-    DW_FRAME_FREG28 = 60,\n-    DW_FRAME_FREG29 = 61,\n-    DW_FRAME_FREG30 = 62,\n-    DW_FRAME_FREG31 = 63,\n-    DW_FRAME_RA_COL = 64,\n-    DW_FRAME_STATIC_LINK = 65\n-  };\n-\n-/* This is the number of columns in the Frame Table. */\n-#define DW_FRAME_LAST_REG_NUM   66\n-\n-\n-\n #define DW_CHILDREN_no\t\t     0x00\n #define DW_CHILDREN_yes\t\t     0x01\n \n@@ -605,13 +529,13 @@ enum dwarf_source_language\n #define DW_LANG_lo_user 0x8000\t/* implementation-defined range start */\n #define DW_LANG_hi_user 0xffff\t/* implementation-defined range start */\n \n-/* Names and codes for GNU \"macinfo\" extension.  */\n+/* Names and codes for macro information.  */\n \n enum dwarf_macinfo_record_type\n   {\n     DW_MACINFO_define = 1,\n     DW_MACINFO_undef = 2,\n     DW_MACINFO_start_file = 3,\n     DW_MACINFO_end_file = 4,\n-    DW_MACINFO_vend_ext = 255\n+    DW_MACINFO_vendor_ext = 255\n   };"}, {"sha": "439ee1eaacc15c5a51d12c1e944470673c711c63", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 45, "deletions": 23, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c8cc5c4ab93886f0a3931c2c4c0433b8f0762f2f", "patch": "@@ -310,9 +310,19 @@ extern char *language_string;\n #define DWARF_ARANGES_HEADER_SIZE \\\n   (DWARF_ROUND (2 * DWARF_OFFSET_SIZE + 4, PTR_SIZE * 2) - DWARF_OFFSET_SIZE)\n \n-/* Fixed size portion of the Common Information Entry (including\n-   the length field).  */\n-#define DWARF_CIE_HEADER_SIZE (2 * DWARF_OFFSET_SIZE + 8)\n+/* Length of the target-dependent instructions in the\n+   Common Information Entry (CIE).\n+   ??? This should be computed when the frame info is genericized.  */\n+#ifdef MIPS_DEBUGGING_INFO\n+#define DWARF_CIE_INSN_SIZE (2*3)\n+#endif\n+\n+#ifndef DWARF_CIE_INSN_SIZE\n+#define DWARF_CIE_INSN_SIZE 0\n+#endif\n+\n+/* Fixed size portion of the CIE (including the length field).  */\n+#define DWARF_CIE_HEADER_SIZE (2 * DWARF_OFFSET_SIZE + 5 + DWARF_CIE_INSN_SIZE)\n \n /* Fixed size of the Common Information Entry in the call frame\n    information (.debug_frame) section rounded up to a word boundary.  */\n@@ -828,6 +838,17 @@ char text_end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n   while (0)\n #endif\n \n+/* The DWARF 2 CFA column which tracks the return address.  Normally this\n+   is the first column after all of the hard registers.  */\n+#ifndef DWARF_FRAME_RETURN_COLUMN\n+#define DWARF_FRAME_RETURN_COLUMN \tFIRST_PSEUDO_REGISTER\n+#endif\n+\n+/* The mapping from gcc register number to DWARF 2 CFA column number.  By\n+   default, we provide columns for all registers after the CFA column.  */\n+#ifndef DWARF_FRAME_REGNUM\n+#define DWARF_FRAME_REGNUM(REG) (DBX_REGISTER_NUMBER (REG) + 1)\n+#endif\n \f\n /************************ general utility functions **************************/\n \n@@ -3920,7 +3941,7 @@ output_call_frame_info ()\n \t       ASM_COMMENT_START);\n     }\n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_FRAME_RA_COL);\n+  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DWARF_FRAME_RETURN_COLUMN);\n   if (flag_verbose_asm)\n     {\n       fprintf (asm_out_file, \"\\t%s CIE RA Column\",\n@@ -3932,12 +3953,21 @@ output_call_frame_info ()\n \n #ifdef MIPS_DEBUGGING_INFO\n \n-  /* Set the RA on entry to be the contents of r31.  */\n   bzero (&cfi_node, sizeof (dw_cfi_node));\n   cfi = &cfi_node;\n+\n+  /* On entry, the Call Frame Address is in the stack pointer register.  */\n+  cfi->dw_cfi_opc = DW_CFA_def_cfa;\n+  cfi->dw_cfi_oprnd1.dw_cfi_reg_num\n+    = DWARF_FRAME_REGNUM (STACK_POINTER_REGNUM);\n+  cfi->dw_cfi_oprnd2.dw_cfi_offset = 0;\n+  output_cfi (cfi);\n+\n+  /* Set the RA on entry to be the contents of r31.  */\n   cfi->dw_cfi_opc = DW_CFA_register;\n-  cfi->dw_cfi_oprnd1.dw_cfi_reg_num = DW_FRAME_RA_COL;\n-  cfi->dw_cfi_oprnd2.dw_cfi_reg_num = DW_FRAME_REG31;\n+  cfi->dw_cfi_oprnd1.dw_cfi_reg_num = DWARF_FRAME_RETURN_COLUMN;\n+  cfi->dw_cfi_oprnd2.dw_cfi_reg_num\n+    = DWARF_FRAME_REGNUM (GP_REG_FIRST + 31);\n   output_cfi (cfi);\n \n #endif\n@@ -7654,27 +7684,19 @@ dwarf2out_begin_function ()\n \n #ifdef MIPS_DEBUGGING_INFO\n \n-  /* On entry, the Call Frame Address is in the stack pointer register.  */\n-  cfi = new_cfi ();\n-  cfi->dw_cfi_opc = DW_CFA_def_cfa;\n-  cfi->dw_cfi_oprnd1.dw_cfi_reg_num\n-    = DBX_REGISTER_NUMBER (STACK_POINTER_REGNUM);\n-  cfi->dw_cfi_oprnd2.dw_cfi_offset = 0;\n-  add_cfi (&fde->dw_fde_cfi, cfi);\n-\n   /* Set the location counter to the end of the function prolog.  */\n   cfi = new_cfi ();\n   cfi->dw_cfi_opc = DW_CFA_advance_loc4;\n   cfi->dw_cfi_oprnd1.dw_cfi_addr = xstrdup (label);\n   add_cfi (&fde->dw_fde_cfi, cfi);\n \n-  /* Define the CFA as either an explicit frame pointer register,\n-     or an offset from the stack pointer.  */\n+  /* Define the CFA as an offset from either the frame pointer\n+     or the stack pointer.  */\n   cfi = new_cfi ();\n   cfi->dw_cfi_opc = DW_CFA_def_cfa;\n   cfi->dw_cfi_oprnd1.dw_cfi_reg_num\n-    = DBX_REGISTER_NUMBER (frame_pointer_needed ? FRAME_POINTER_REGNUM\n-\t\t\t   : STACK_POINTER_REGNUM);\n+    = DWARF_FRAME_REGNUM (frame_pointer_needed ? FRAME_POINTER_REGNUM\n+\t\t\t  : STACK_POINTER_REGNUM);\n   offset = current_frame_info.total_size;\n   cfi->dw_cfi_oprnd2.dw_cfi_offset = offset;\n   add_cfi (&fde->dw_fde_cfi, cfi);\n@@ -7690,9 +7712,9 @@ dwarf2out_begin_function ()\n       cfi = new_cfi ();\n       cfi->dw_cfi_opc = DW_CFA_register;\n       cfi->dw_cfi_oprnd1.dw_cfi_reg_num\n-\t= DBX_REGISTER_NUMBER (STACK_POINTER_REGNUM);\n+\t= DWARF_FRAME_REGNUM (STACK_POINTER_REGNUM);\n       cfi->dw_cfi_oprnd2.dw_cfi_reg_num\n-\t= DBX_REGISTER_NUMBER (FRAME_POINTER_REGNUM);\n+\t= DWARF_FRAME_REGNUM (FRAME_POINTER_REGNUM);\n       add_cfi (&fde->dw_fde_cfi, cfi);\n     }\n \n@@ -7703,7 +7725,7 @@ dwarf2out_begin_function ()\n       assert (offset >= 0);\n       cfi = new_cfi ();\n       cfi->dw_cfi_opc = DW_CFA_offset_extended;\n-      cfi->dw_cfi_oprnd1.dw_cfi_reg_num = DW_FRAME_RA_COL;\n+      cfi->dw_cfi_oprnd1.dw_cfi_reg_num = DWARF_FRAME_RETURN_COLUMN;\n       cfi->dw_cfi_oprnd2.dw_cfi_offset = offset;\n       add_cfi (&fde->dw_fde_cfi, cfi);\n     }\n@@ -7718,7 +7740,7 @@ dwarf2out_begin_function ()\n       cfi = new_cfi ();\n       cfi->dw_cfi_opc = DW_CFA_offset;\n       cfi->dw_cfi_oprnd1.dw_cfi_reg_num\n-\t= DBX_REGISTER_NUMBER (FRAME_POINTER_REGNUM);\n+\t= DWARF_FRAME_REGNUM (FRAME_POINTER_REGNUM);\n       cfi->dw_cfi_oprnd2.dw_cfi_offset = offset;\n       add_cfi (&fde->dw_fde_cfi, cfi);\n     }"}]}