{"sha": "75326e8c5ab20d07c24cee21e00e7124b7bb136a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUzMjZlOGM1YWIyMGQwN2MyNGNlZTIxZTAwZTcxMjRiN2JiMTM2YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T13:30:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T13:30:49Z"}, "message": "(common_type): For COMPLEX_TYPE, return one of the original types if is the desired common type.\n\n(common_type): For COMPLEX_TYPE, return one of the original types if is the\ndesired common type.\n(build_binary_op): Use SHORT_COMPARE code even if complex.\n\nFrom-SVN: r6312", "tree": {"sha": "8c063d1d6282e0ba044d1f1fdb344a75b901c7f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c063d1d6282e0ba044d1f1fdb344a75b901c7f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75326e8c5ab20d07c24cee21e00e7124b7bb136a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75326e8c5ab20d07c24cee21e00e7124b7bb136a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75326e8c5ab20d07c24cee21e00e7124b7bb136a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75326e8c5ab20d07c24cee21e00e7124b7bb136a/comments", "author": null, "committer": null, "parents": [{"sha": "c470260b418aad0883ea8399797eee81f836b425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c470260b418aad0883ea8399797eee81f836b425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c470260b418aad0883ea8399797eee81f836b425"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "bc9550833a88116bbe4db32a1d87b5921040d1e4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75326e8c5ab20d07c24cee21e00e7124b7bb136a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75326e8c5ab20d07c24cee21e00e7124b7bb136a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=75326e8c5ab20d07c24cee21e00e7124b7bb136a", "patch": "@@ -193,22 +193,21 @@ common_type (t1, t2)\n   code1 = TREE_CODE (t1);\n   code2 = TREE_CODE (t2);\n \n-  /* If one type is complex, form the common type\n-     of the non-complex components,\n-     then make that complex.  */\n+  /* If one type is complex, form the common type of the non-complex\n+     components, then make that complex.  Use T1 or T2 if it is the\n+     required type.  */\n   if (code1 == COMPLEX_TYPE || code2 == COMPLEX_TYPE)\n     {\n-      tree subtype1, subtype2, subtype;\n-      if (code1 == COMPLEX_TYPE)\n-\tsubtype1 = TREE_TYPE (t1);\n-      else\n-\tsubtype1 = t1;\n-      if (code2 == COMPLEX_TYPE)\n-\tsubtype2 = TREE_TYPE (t2);\n+      tree subtype1 = code1 == COMPLEX_TYPE ? TREE_TYPE (t1) : t1;\n+      tree subtype2 = code2 == COMPLEX_TYPE ? TREE_TYPE (t2) : t2;\n+      tree subtype = common_type (subtype1, subtype2);\n+\n+      if (code1 == COMPLEX_TYPE && TREE_TYPE (t1) == subtype)\n+\treturn t1;\n+      else if (code2 == COMPLEX_TYPE && TREE_TYPE (t2) == subtype)\n+\treturn t2;\n       else\n-\tsubtype2 = t2;\n-      subtype = common_type (subtype1, subtype2);\n-      return build_complex_type (subtype);\n+\treturn build_complex_type (subtype);\n     }\n \n   switch (code1)\n@@ -2358,7 +2357,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n       /* Comparison operations are shortened too but differently.\n \t They identify themselves by setting short_compare = 1.  */\n \n-      if (short_compare && none_complex)\n+      if (short_compare)\n \t{\n \t  /* Don't write &op0, etc., because that would prevent op0\n \t     from being kept in a register."}]}