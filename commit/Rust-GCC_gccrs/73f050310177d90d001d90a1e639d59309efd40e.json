{"sha": "73f050310177d90d001d90a1e639d59309efd40e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmMDUwMzEwMTc3ZDkwZDAwMWQ5MGExZTYzOWQ1OTMwOWVmZDQwZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-10-04T20:34:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-10-04T20:34:54Z"}, "message": "alloc_traits.h (__alloc_traits::max_size): Define.\n\n2011-10-04  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/ext/alloc_traits.h (__alloc_traits::max_size): Define.\n\t(__alloc_traits::rebind): Define.\n\t* include/bits/stl_vector.h: Use them.\n\t* testsuite/util/testsuite_allocator.h (SimpleAllocator): Define.\n\t* testsuite/23_containers/vector/allocator/minimal.cc: New.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r179523", "tree": {"sha": "483c6f7252fc7d791893fd151de372b8053ad8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/483c6f7252fc7d791893fd151de372b8053ad8e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73f050310177d90d001d90a1e639d59309efd40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f050310177d90d001d90a1e639d59309efd40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f050310177d90d001d90a1e639d59309efd40e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f050310177d90d001d90a1e639d59309efd40e/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97f26732675a4a388b79d927876443c92a55c8c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f26732675a4a388b79d927876443c92a55c8c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f26732675a4a388b79d927876443c92a55c8c7"}], "stats": {"total": 115, "additions": 109, "deletions": 6}, "files": [{"sha": "10cfaaf70bf1f4db47e35ca8481fc5ae2009f5fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=73f050310177d90d001d90a1e639d59309efd40e", "patch": "@@ -1,3 +1,19 @@\n+2011-10-04  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/ext/alloc_traits.h (__alloc_traits::max_size): Define.\n+\t(__alloc_traits::rebind): Define.\n+\t* include/bits/stl_vector.h: Use them.\n+\t* testsuite/util/testsuite_allocator.h (SimpleAllocator): Define.\n+\t* testsuite/23_containers/vector/allocator/minimal.cc: New.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2011-10-03  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* testsuite/20_util/pointer_traits/pointer_to.cc: Define equality"}, {"sha": "869bcf7448932c486d8ffbad9d1847016a76d2cb", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=73f050310177d90d001d90a1e639d59309efd40e", "patch": "@@ -70,7 +70,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     struct _Vector_base\n     {\n-      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+        rebind<_Tp>::other _Tp_alloc_type;\n       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer\n        \tpointer;\n \n@@ -643,7 +644,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**  Returns the size() of the largest possible %vector.  */\n       size_type\n       max_size() const _GLIBCXX_NOEXCEPT\n-      { return _M_get_Tp_allocator().max_size(); }\n+      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**"}, {"sha": "de13b652521273116f53bdb5bc9f244d6a641dd0", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=73f050310177d90d001d90a1e639d59309efd40e", "patch": "@@ -106,6 +106,7 @@ template<typename _Alloc>\n     using _Base_type::deallocate;\n     using _Base_type::construct;\n     using _Base_type::destroy;\n+    using _Base_type::max_size;\n \n   private:\n     template<typename _Ptr>\n@@ -115,6 +116,7 @@ template<typename _Alloc>\n       { };\n \n   public:\n+    // overload construct for non-standard pointer types\n     template<typename _Ptr, typename... _Args>\n       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type\n       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)\n@@ -123,6 +125,7 @@ template<typename _Alloc>\n \t\t\t      std::forward<_Args>(__args)...);\n       }\n \n+    // overload destroy for non-standard pointer types\n     template<typename _Ptr>\n       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type\n       destroy(_Alloc& __a, _Ptr __p)\n@@ -156,6 +159,9 @@ template<typename _Alloc>\n        \t|| noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));\n     }\n \n+    template<typename _Tp>\n+      struct rebind\n+      { typedef typename _Base_type::template __rebind_alloc<_Tp>::__type other; };\n #else\n \n     typedef typename _Alloc::pointer                pointer;\n@@ -179,6 +185,9 @@ template<typename _Alloc>\n     static void destroy(_Alloc& __a, pointer __p)\n     { __a.destroy(__p); }\n \n+    static size_type max_size(const _Alloc& __a)\n+    { return __a.max_size(); }\n+\n     static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }\n \n     static void _S_on_swap(_Alloc& __a, _Alloc& __b)\n@@ -187,6 +196,10 @@ template<typename _Alloc>\n       // 431. Swapping containers with unequal allocators.\n       std::__alloc_swap<_Alloc>::_S_do_it(__a, __b);\n     }\n+\n+    template<typename _Tp>\n+      struct rebind\n+      { typedef typename _Alloc::template rebind<_Tp>::other other; };\n #endif\n   };\n "}, {"sha": "2d56884a43602e25ecbcc042ac7ce9738febc5ee", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/minimal.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fminimal.cc?ref=73f050310177d90d001d90a1e639d59309efd40e", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2011 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <vector>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+ \n+struct T { int i; };\n+\n+using __gnu_test::SimpleAllocator;\n+\n+template class std::vector<T, SimpleAllocator<T>>;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef SimpleAllocator<T> alloc_type;\n+  typedef std::allocator_traits<alloc_type> traits_type;\n+  typedef std::vector<T, alloc_type> test_type;\n+  test_type v(alloc_type{});\n+  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "00d18b74fd5ab7860b2d28227c696206d73dd750", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=73f050310177d90d001d90a1e639d59309efd40e", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1222 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1223 }\n \n #include <vector>\n "}, {"sha": "34c2ed1c6a849ecefee939d06c68c615dbcffe11", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=73f050310177d90d001d90a1e639d59309efd40e", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1152 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1153 }\n \n #include <vector>\n "}, {"sha": "563def0e66640e4c58331ede633e92171ece422e", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=73f050310177d90d001d90a1e639d59309efd40e", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1152 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1153 }\n \n #include <vector>\n #include <utility>"}, {"sha": "fec41a39fdbf7b11fda2c2ad17b82127b4ab892a", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=73f050310177d90d001d90a1e639d59309efd40e", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1263 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1264 }\n \n #include <vector>\n "}, {"sha": "454108c6e8e98daa8f3a0339687b17ed9aa06941", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f050310177d90d001d90a1e639d59309efd40e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=73f050310177d90d001d90a1e639d59309efd40e", "patch": "@@ -386,6 +386,8 @@ namespace __gnu_test\n       typedef std::integral_constant<bool, Propagate> trait_type;\n \n     public:\n+      // default allocator_traits::rebind_alloc would select\n+      // uneq_allocator::rebind so we must define rebind here\n       template<typename Up>\n \tstruct rebind { typedef propagating_allocator<Up, Propagate> other; };\n \n@@ -433,6 +435,32 @@ namespace __gnu_test\n       { return Propagate ? *this : propagating_allocator(); }\n     };\n \n+  // Class template supporting the minimal interface that satisfies the\n+  // Allocator requirements, from example in [allocator.requirements]\n+  template <class Tp>\n+    struct SimpleAllocator\n+    {\n+      typedef Tp value_type;\n+\n+      SimpleAllocator() { }\n+\n+      template <class T>\n+        SimpleAllocator(const SimpleAllocator<T>& other) { }\n+\n+      Tp *allocate(std::size_t n)\n+      { return std::allocator<Tp>().allocate(n); }\n+\n+      void deallocate(Tp *p, std::size_t n)\n+      { std::allocator<Tp>().deallocate(p, n); }\n+    };\n+\n+  template <class T, class U>\n+    bool operator==(const SimpleAllocator<T>&, const SimpleAllocator<U>&)\n+    { return true; }\n+  template <class T, class U>\n+    bool operator!=(const SimpleAllocator<T>&, const SimpleAllocator<U>&)\n+    { return false; }\n+\n #endif\n \n   template<typename Tp>"}]}