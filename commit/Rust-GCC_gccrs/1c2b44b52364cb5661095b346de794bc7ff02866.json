{"sha": "1c2b44b52364cb5661095b346de794bc7ff02866", "node_id": "C_kwDOANBUbNoAKDFjMmI0NGI1MjM2NGNiNTY2MTA5NWIzNDZkZTc5NGJjN2ZmMDI4NjY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-17T10:14:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-17T10:14:38Z"}, "message": "valtrack: Avoid creating raw SUBREGs with VOIDmode argument [PR104557]\n\nAfter the recent r12-7240 simplify_immed_subreg changes, we bail on more\nsimplify_subreg calls than before, e.g. apparently for decimal modes\nin the NaN representations  we almost never preserve anything except the\ncanonical {q,s}NaNs.\nsimplify_gen_subreg will punt in such cases because a SUBREG with VOIDmode\nis not valid, but debug_lowpart_subreg wants to attempt even harder, even\nif e.g. target indicates certain mode combinations aren't valid for the\nbackend, dwarf2out can still handle them.  But a SUBREG from a VOIDmode\noperand is just too much, the inner mode is lost there.  We'd need some\nnew rtx that would be able to represent those cases.\nFor now, just punt in those cases.\n\n2022-02-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/104557\n\t* valtrack.cc (debug_lowpart_subreg): Don't call gen_rtx_raw_SUBREG\n\tif expr has VOIDmode.\n\n\t* gcc.dg/dfp/pr104557.c: New test.", "tree": {"sha": "deca0a2689a81a742b4accae291f788a5a5c1288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deca0a2689a81a742b4accae291f788a5a5c1288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c2b44b52364cb5661095b346de794bc7ff02866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2b44b52364cb5661095b346de794bc7ff02866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2b44b52364cb5661095b346de794bc7ff02866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2b44b52364cb5661095b346de794bc7ff02866/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99ad11af953568e1a01e4f4fe31cba0f11879a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99ad11af953568e1a01e4f4fe31cba0f11879a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99ad11af953568e1a01e4f4fe31cba0f11879a5"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "a4a1cc6340913cb8f2196dd054aa8cfbfd4c45d7", "filename": "gcc/testsuite/gcc.dg/dfp/pr104557.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2b44b52364cb5661095b346de794bc7ff02866/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr104557.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2b44b52364cb5661095b346de794bc7ff02866/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr104557.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr104557.c?ref=1c2b44b52364cb5661095b346de794bc7ff02866", "patch": "@@ -0,0 +1,22 @@\n+/* PR debug/104557 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -g -Wno-psabi\" } */\n+\n+typedef int __attribute__((__vector_size__ (32))) U;\n+typedef double __attribute__((__vector_size__ (32))) F;\n+typedef _Decimal64 __attribute__((__vector_size__ (32))) D;\n+\n+F\n+bar (void)\n+{\n+  F f = __builtin_convertvector ((D) (-10.d < (D) ((D) (U) { 0, 0, 0, 0, 0, 0, 0, -0xe0 }\n+\t\t\t\t\t\t   >= (D) { 80000000 })), F);\n+  return f;\n+}\n+\n+F\n+foo ()\n+{\n+  F x = bar ();\n+  return x;\n+}"}, {"sha": "27c98b69ea5e6427795bd2897dc47d75d353022a", "filename": "gcc/valtrack.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2b44b52364cb5661095b346de794bc7ff02866/gcc%2Fvaltrack.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2b44b52364cb5661095b346de794bc7ff02866/gcc%2Fvaltrack.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.cc?ref=1c2b44b52364cb5661095b346de794bc7ff02866", "patch": "@@ -558,7 +558,9 @@ debug_lowpart_subreg (machine_mode outer_mode, rtx expr,\n   rtx ret = simplify_gen_subreg (outer_mode, expr, inner_mode, offset);\n   if (ret)\n     return ret;\n-  return gen_rtx_raw_SUBREG (outer_mode, expr, offset);\n+  if (GET_MODE (expr) != VOIDmode)\n+    return gen_rtx_raw_SUBREG (outer_mode, expr, offset);\n+  return NULL_RTX;\n }\n \n /* If UREGNO is referenced by any entry in DEBUG, emit a debug insn"}]}