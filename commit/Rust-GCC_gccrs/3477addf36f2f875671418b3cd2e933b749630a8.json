{"sha": "3477addf36f2f875671418b3cd2e933b749630a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3N2FkZGYzNmYyZjg3NTY3MTQxOGIzY2QyZTkzM2I3NDk2MzBhOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-03-24T23:47:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-03-24T23:47:17Z"}, "message": "builtins.c (expand_builtin_bzero): Convert `length' argument to sizetype.\n\n        * builtins.c (expand_builtin_bzero): Convert `length' argument\n        to sizetype.\n\nFrom-SVN: r32732", "tree": {"sha": "af83580b8aa96e963ea567d0881abbc9339d91a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af83580b8aa96e963ea567d0881abbc9339d91a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3477addf36f2f875671418b3cd2e933b749630a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3477addf36f2f875671418b3cd2e933b749630a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3477addf36f2f875671418b3cd2e933b749630a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3477addf36f2f875671418b3cd2e933b749630a8/comments", "author": null, "committer": null, "parents": [{"sha": "46238b7dab9626030712b1f6aa9b2abd18e3e82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46238b7dab9626030712b1f6aa9b2abd18e3e82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46238b7dab9626030712b1f6aa9b2abd18e3e82e"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "252250897212fd9e858eb6818f087dbffec8926b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477addf36f2f875671418b3cd2e933b749630a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477addf36f2f875671418b3cd2e933b749630a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3477addf36f2f875671418b3cd2e933b749630a8", "patch": "@@ -1,3 +1,8 @@\n+2000-03-24  Richard Henderson  <rth@cygnus.com>\n+\n+\t* builtins.c (expand_builtin_bzero): Convert `length' argument\n+\tto sizetype.\n+\n 2000-03-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* sibcall.c (skip_copy_to_return_value): Use OUTGOING_REGNO for"}, {"sha": "0271d1254ec86c838e5e7acc4b17a65986214b0d", "filename": "gcc/builtins.c", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477addf36f2f875671418b3cd2e933b749630a8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477addf36f2f875671418b3cd2e933b749630a8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3477addf36f2f875671418b3cd2e933b749630a8", "patch": "@@ -1582,33 +1582,31 @@ expand_builtin_bzero (exp)\n      tree exp;\n {\n   tree arglist = TREE_OPERAND (exp, 1);\n+  tree dest, size, newarglist;\n+  rtx result;\n \n   if (arglist == 0\n       /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CODE (TREE_TYPE (dest = TREE_VALUE (arglist))) != POINTER_TYPE\n       || TREE_CHAIN (arglist) == 0\n-      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n+      || (TREE_CODE (TREE_TYPE (size = TREE_VALUE (TREE_CHAIN (arglist))))\n \t  != INTEGER_TYPE))\n-    return 0;\n-  else\n-    {\n-      tree newarglist;\n-      rtx result;\n+    return NULL_RTX;\n \n-      /* New argument list transforming bzero(x, y) -> memset(x, 0, y).  */\n-      newarglist = build_tree_list (NULL_TREE, TREE_VALUE (arglist));\n-      chainon (newarglist, build_tree_list (NULL_TREE, integer_zero_node));\n-      chainon (newarglist,\n-\t       build_tree_list (NULL_TREE, TREE_VALUE (TREE_CHAIN (arglist))));\n-      TREE_OPERAND (exp, 1) = newarglist;\n+  /* New argument list transforming bzero(ptr x, int y) to\n+     memset(ptr x, int 0, size_t y).  */\n+  \n+  newarglist = build_tree_list (NULL_TREE, convert (sizetype, size));\n+  newarglist = tree_cons (NULL_TREE, integer_zero_node, newarglist);\n+  newarglist = tree_cons (NULL_TREE, dest, newarglist);\n \n-      result = expand_builtin_memset(exp);\n+  TREE_OPERAND (exp, 1) = newarglist;\n+  result = expand_builtin_memset(exp);\n       \n-      /* Always restore the original arguments.  */\n-      TREE_OPERAND (exp, 1) = arglist;\n+  /* Always restore the original arguments.  */\n+  TREE_OPERAND (exp, 1) = arglist;\n \n-      return result;\n-    }\n+  return result;\n }\n \n #ifdef HAVE_cmpstrsi"}]}