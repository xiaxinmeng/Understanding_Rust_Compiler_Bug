{"sha": "292c801888be22f65845216cd16ae7adc63802bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyYzgwMTg4OGJlMjJmNjU4NDUyMTZjZDE2YWU3YWRjNjM4MDJiYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-05-09T12:10:29Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-05-09T12:10:29Z"}, "message": "iq2000.c (abort_with_insn): Use fancy_abort.\n\n\t* config/iq2000/iq2000.c (abort_with_insn): Use fancy_abort.\n\t(gen_int_relational): Use gcc_unreachable and gcc_assert as necessary.\n\t(function_arg_advance, function_arg, save_restore_insns,\n\tiq2000_expand_prologue, iq2000_output_conditional_branch,\n\texpand_one_builtin, print_operand):\n\t* config/iq2000/iq2000.md (tablejump): Likewise.\n\nFrom-SVN: r99432", "tree": {"sha": "a99910a278a74f302e7dca4862ab350590d3b489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a99910a278a74f302e7dca4862ab350590d3b489"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/292c801888be22f65845216cd16ae7adc63802bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292c801888be22f65845216cd16ae7adc63802bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292c801888be22f65845216cd16ae7adc63802bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292c801888be22f65845216cd16ae7adc63802bc/comments", "author": null, "committer": null, "parents": [{"sha": "f2710beab66da672ce5759404176a9561d5ad518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2710beab66da672ce5759404176a9561d5ad518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2710beab66da672ce5759404176a9561d5ad518"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "0a923745fbfe430cb867582f8bb812637e049e34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c801888be22f65845216cd16ae7adc63802bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c801888be22f65845216cd16ae7adc63802bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=292c801888be22f65845216cd16ae7adc63802bc", "patch": "@@ -1,3 +1,12 @@\n+2005-05-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/iq2000/iq2000.c (abort_with_insn): Use fancy_abort.\n+\t(gen_int_relational): Use gcc_unreachable and gcc_assert as necessary.\n+\t(function_arg_advance, function_arg, save_restore_insns,\n+\tiq2000_expand_prologue, iq2000_output_conditional_branch,\n+\texpand_one_builtin, print_operand):\n+\t* config/iq2000/iq2000.md (tablejump): Likewise.\n+\n 2005-05-09  David Ung  <davidu@mips.com>\n \n \t* config/mips/mips.h (processor_type): Add names for the 24K. "}, {"sha": "91bb128f525d23425b16c06f0b74985816e572ea", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c801888be22f65845216cd16ae7adc63802bc/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c801888be22f65845216cd16ae7adc63802bc/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=292c801888be22f65845216cd16ae7adc63802bc", "patch": "@@ -500,7 +500,7 @@ abort_with_insn (rtx insn, const char * reason)\n {\n   error (reason);\n   debug_rtx (insn);\n-  abort ();\n+  fancy_abort (__FILE__, __LINE__, __FUNCTION__);\n }\n \f\n /* Return the appropriate instructions to move one operand to another.  */\n@@ -872,8 +872,7 @@ gen_int_relational (enum rtx_code test_code, rtx result, rtx cmp0, rtx cmp1,\n   rtx reg2;\n \n   test = map_test_to_internal_test (test_code);\n-  if (test == ITEST_MAX)\n-    abort ();\n+  gcc_assert (test != ITEST_MAX);\n \n   p_info = &info[(int) test];\n   eqne_p = (p_info->test_code == XOR);\n@@ -1136,9 +1135,8 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n       break;\n \n     default:\n-      if (GET_MODE_CLASS (mode) != MODE_COMPLEX_INT\n-\t  && GET_MODE_CLASS (mode) != MODE_COMPLEX_FLOAT)\n-\tabort ();\n+      gcc_assert (GET_MODE_CLASS (mode) == MODE_COMPLEX_INT\n+\t\t  || GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT);\n \n       cum->gp_reg_found = 1;\n       cum->arg_words += ((GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1)\n@@ -1218,9 +1216,8 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n       break;\n \n     default:\n-      if (GET_MODE_CLASS (mode) != MODE_COMPLEX_INT\n-\t  && GET_MODE_CLASS (mode) != MODE_COMPLEX_FLOAT)\n-\tabort ();\n+      gcc_assert (GET_MODE_CLASS (mode) == MODE_COMPLEX_INT\n+\t\t  || GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT);\n \n       /* Drops through.  */\n     case BLKmode:\n@@ -1250,8 +1247,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n     }\n   else\n     {\n-      if (regbase == -1)\n-\tabort ();\n+      gcc_assert (regbase != -1);\n \n       if (! type || TREE_CODE (type) != RECORD_TYPE\n \t  || ! named  || ! TYPE_SIZE_UNIT (type)\n@@ -1781,9 +1777,8 @@ save_restore_insns (int store_p)\n   HOST_WIDE_INT gp_offset;\n   HOST_WIDE_INT end_offset;\n \n-  if (frame_pointer_needed\n-      && ! BITSET_P (mask, HARD_FRAME_POINTER_REGNUM - GP_REG_FIRST))\n-    abort ();\n+  gcc_assert (!frame_pointer_needed\n+\t      || BITSET_P (mask, HARD_FRAME_POINTER_REGNUM - GP_REG_FIRST));\n \n   if (mask == 0)\n     {\n@@ -1923,8 +1918,7 @@ iq2000_expand_prologue (void)\n \t    {\n \t      int words;\n \n-\t      if (GET_CODE (entry_parm) != REG)\n-\t        abort ();\n+\t      gcc_assert (GET_CODE (entry_parm) == REG);\n \n \t      /* Passed in a register, so will get homed automatically.  */\n \t      if (GET_MODE (entry_parm) == BLKmode)\n@@ -2430,7 +2424,7 @@ iq2000_output_conditional_branch (rtx insn, rtx * operands, int two_operands_p,\n       }\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n \n   /* NOTREACHED */\n@@ -2637,7 +2631,7 @@ expand_one_builtin (enum insn_code icode, rtx target, tree arglist,\n \tpat = GEN_FCN (icode) (op[0], op[1], op[2], op[3]);\n       break;\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n   \n   if (! pat)\n@@ -3142,15 +3136,7 @@ print_operand (FILE *file, rtx op, int letter)\n \n   else if (letter == 'Z')\n     {\n-      int regnum;\n-\n-      if (code != REG)\n-\tabort ();\n-\n-      regnum = REGNO (op);\n-      abort ();\n-\n-      fprintf (file, \"%s,\", reg_names[regnum]);\n+      gcc_unreachable ();\n     }\n \n   else if (code == REG || code == SUBREG)"}, {"sha": "0528a12e88d99d10d040ac5bcc1243bcf6909410", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c801888be22f65845216cd16ae7adc63802bc/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c801888be22f65845216cd16ae7adc63802bc/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=292c801888be22f65845216cd16ae7adc63802bc", "patch": "@@ -1729,8 +1729,7 @@\n {\n   if (operands[0])\t\t/* eliminate unused code warnings */\n     {\n-      if (GET_MODE (operands[0]) != Pmode)\n-\tabort ();\n+      gcc_assert (GET_MODE (operands[0]) == Pmode);\n \n       if (!(Pmode == DImode))\n \temit_jump_insn (gen_tablejump_internal1 (operands[0], operands[1]));"}]}