{"sha": "6c36539dcffceaff517f6682c08ea236a4c77e14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzNjUzOWRjZmZjZWFmZjUxN2Y2NjgyYzA4ZWEyMzZhNGM3N2UxNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-12-15T22:35:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-12-15T22:35:20Z"}, "message": "re PR lto/64043 (ICE (segfault) with LTO: in tree_check/tree.h:2758 get_binfo_at_offset/tree.c:11914)\n\n\n\tPR lto/64043\n\t* gcc.dg/lto/20110201-1_0.c: New testcase.\n\n\t* tree-streamer.c (preload_common_nodes): Skip preloading\n\tof main_identifier_node, pid_type and optimization/option nodes.\n\nFrom-SVN: r218767", "tree": {"sha": "6d7e7596b4e5e5b1571f88c420ce3de5d2a54ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d7e7596b4e5e5b1571f88c420ce3de5d2a54ec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c36539dcffceaff517f6682c08ea236a4c77e14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c36539dcffceaff517f6682c08ea236a4c77e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c36539dcffceaff517f6682c08ea236a4c77e14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c36539dcffceaff517f6682c08ea236a4c77e14/comments", "author": null, "committer": null, "parents": [{"sha": "2bf7560bd3757dbd0d7ffbe8e61b3eb847cfc5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf7560bd3757dbd0d7ffbe8e61b3eb847cfc5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf7560bd3757dbd0d7ffbe8e61b3eb847cfc5f0"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "a80221827eb33dfae4f8cad6f9399f3aeb5562d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c36539dcffceaff517f6682c08ea236a4c77e14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c36539dcffceaff517f6682c08ea236a4c77e14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c36539dcffceaff517f6682c08ea236a4c77e14", "patch": "@@ -1,3 +1,9 @@\n+2014-12-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/64043\n+\t* tree-streamer.c (preload_common_nodes): Skip preloading\n+\tof main_identifier_node, pid_type and optimization/option nodes.\n+\n 2014-12-15  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/63397\n@@ -92,6 +98,16 @@\n \t* tree-ssa-threadupdate.c (duplicate_seme_region): Mark\n \tthe loop for removal if we copied the loop header.\n \n+2014-12-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/61602\n+\t* cgraph.h (ipa_discover_readonly_nonaddressable_vars): Return bool.\n+\t* ipa.c (set_writeonly_bit): Track if reference was removed.\n+\t(ipa_discover_readonly_nonaddressable_vars): Return true if any\n+\treferences was removed.\n+\t* ipa-reference.c (propagate): Return TODO_remove_functions if\n+\treference was removed.\n+\n 2014-12-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa.c (process_references): Fix conditoinal on flag_optimize"}, {"sha": "c4366d5cc5da029150e3d3c655b180328d1190e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c36539dcffceaff517f6682c08ea236a4c77e14/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c36539dcffceaff517f6682c08ea236a4c77e14/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c36539dcffceaff517f6682c08ea236a4c77e14", "patch": "@@ -1,3 +1,8 @@\n+2014-12-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/64043\n+\t* gcc.dg/lto/20110201-1_0.c: New testcase.\n+\n 2014-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/64316"}, {"sha": "5073a50fc52099d9a0d7013124b355dd3b00f2f7", "filename": "gcc/testsuite/gcc.dg/lto/20110201-1_0.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c36539dcffceaff517f6682c08ea236a4c77e14/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20110201-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c36539dcffceaff517f6682c08ea236a4c77e14/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20110201-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20110201-1_0.c?ref=6c36539dcffceaff517f6682c08ea236a4c77e14", "patch": "@@ -1,6 +1,5 @@\n /* { dg-lto-do run } */\n /* { dg-lto-options { { -O0 -flto } } } */\n-/* { dg-extra-ld-options \"-O2 -ffast-math -fuse-linker-plugin\" } */\n /* { dg-require-linker-plugin \"\" } */\n \n /* We require a linker plugin because otherwise we'd need to link\n@@ -9,7 +8,7 @@\n    which does not have folded cabs.  */\n \n double cabs(_Complex double);\n-double __attribute__((used))\n+double __attribute__((used)) __attribute__ ((optimize (\"O2,fast-math\")))\n foo (_Complex double x, int b)\n {\n   if (b)"}, {"sha": "a4502bd2167c7c4d0e1118848837fb554992093a", "filename": "gcc/tree-streamer.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c36539dcffceaff517f6682c08ea236a4c77e14/gcc%2Ftree-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c36539dcffceaff517f6682c08ea236a4c77e14/gcc%2Ftree-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.c?ref=6c36539dcffceaff517f6682c08ea236a4c77e14", "patch": "@@ -324,7 +324,18 @@ preload_common_nodes (struct streamer_tree_cache_d *cache)\n     /* Skip boolean type and constants, they are frontend dependent.  */\n     if (i != TI_BOOLEAN_TYPE\n \t&& i != TI_BOOLEAN_FALSE\n-\t&& i != TI_BOOLEAN_TRUE)\n+\t&& i != TI_BOOLEAN_TRUE\n+\t/* MAIN_IDENTIFIER is not always initialized by Fortran FE.  */\n+\t&& i != TI_MAIN_IDENTIFIER\n+\t/* PID_TYPE is initialized only by C family front-ends.  */\n+\t&& i != TI_PID_TYPE\n+\t/* Skip optimization and target option nodes; they depend on flags.  */\n+\t&& i != TI_OPTIMIZATION_DEFAULT\n+\t&& i != TI_OPTIMIZATION_CURRENT\n+\t&& i != TI_TARGET_OPTION_DEFAULT\n+\t&& i != TI_TARGET_OPTION_CURRENT\n+\t&& i != TI_CURRENT_TARGET_PRAGMA\n+\t&& i != TI_CURRENT_OPTIMIZE_PRAGMA)\n       record_common_node (cache, global_trees[i]);\n }\n "}]}