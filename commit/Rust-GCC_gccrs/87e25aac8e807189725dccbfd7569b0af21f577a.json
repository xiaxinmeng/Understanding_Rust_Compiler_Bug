{"sha": "87e25aac8e807189725dccbfd7569b0af21f577a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdlMjVhYWM4ZTgwNzE4OTcyNWRjY2JmZDc1NjliMGFmMjFmNTc3YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-11T10:03:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-11T10:03:49Z"}, "message": "trans.c (gnat_to_gnu): Adjust comment.\n\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Op_Add>: Adjust comment.\n\t<N_Op_Minus>: Add comment and missing guard.\n\t* gcc-interface/trans.c (build_binary_op_trapv): Use an explicit test.\n\nFrom-SVN: r240976", "tree": {"sha": "61097eb5d3b5cd179b74749f1062cc306400ebac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61097eb5d3b5cd179b74749f1062cc306400ebac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87e25aac8e807189725dccbfd7569b0af21f577a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e25aac8e807189725dccbfd7569b0af21f577a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e25aac8e807189725dccbfd7569b0af21f577a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e25aac8e807189725dccbfd7569b0af21f577a/comments", "author": null, "committer": null, "parents": [{"sha": "9fd7cd44d6634b4013a0c4ced3c2763881038dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd7cd44d6634b4013a0c4ced3c2763881038dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd7cd44d6634b4013a0c4ced3c2763881038dab"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "62a6d5ca589f23bed63c5a076b797008a945e17b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e25aac8e807189725dccbfd7569b0af21f577a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e25aac8e807189725dccbfd7569b0af21f577a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=87e25aac8e807189725dccbfd7569b0af21f577a", "patch": "@@ -1,3 +1,9 @@\n+2016-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Op_Add>: Adjust comment.\n+\t<N_Op_Minus>: Add comment and missing guard.\n+\t* gcc-interface/trans.c (build_binary_op_trapv): Use an explicit test.\n+\n 2016-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (type_unsigned_for_rm): New predicate."}, {"sha": "930725b911d4fc223a3a7b619e68588674d8ec7b", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e25aac8e807189725dccbfd7569b0af21f577a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e25aac8e807189725dccbfd7569b0af21f577a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=87e25aac8e807189725dccbfd7569b0af21f577a", "patch": "@@ -6680,10 +6680,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n \t/* Instead of expanding overflow checks for addition, subtraction\n \t   and multiplication itself, the front end will leave this to\n-\t   the back end when Backend_Overflow_Checks_On_Target is set.\n-\t   As the back end itself does not know yet how to properly\n-\t   do overflow checking, do it here.  The goal is to push\n-\t   the expansions further into the back end over time.  */\n+\t   the back end when Backend_Overflow_Checks_On_Target is set.  */\n \tif (Do_Overflow_Check (gnat_node)\n \t    && Backend_Overflow_Checks_On_Target\n \t    && (code == PLUS_EXPR || code == MINUS_EXPR || code == MULT_EXPR)\n@@ -6754,7 +6751,11 @@ gnat_to_gnu (Node_Id gnat_node)\n       gnu_expr = gnat_to_gnu (Right_Opnd (gnat_node));\n       gnu_result_type = get_unpadded_type (Etype (gnat_node));\n \n+      /* Instead of expanding overflow checks for negation and absolute\n+\t value itself, the front end will leave this to the back end\n+\t when Backend_Overflow_Checks_On_Target is set.  */\n       if (Do_Overflow_Check (gnat_node)\n+\t  && Backend_Overflow_Checks_On_Target\n \t  && !TYPE_UNSIGNED (gnu_result_type)\n \t  && !FLOAT_TYPE_P (gnu_result_type))\n \tgnu_result\n@@ -8937,8 +8938,9 @@ build_binary_op_trapv (enum tree_code code, tree gnu_type, tree left,\n \t\t\t\t\tlhs, rhs);\n       tree tgt = save_expr (call);\n       gnu_expr = build1 (REALPART_EXPR, gnu_type, tgt);\n-      check\n-\t= convert (boolean_type_node, build1 (IMAGPART_EXPR, gnu_type, tgt));\n+      check = fold_build2 (NE_EXPR, boolean_type_node,\n+\t\t\t   build1 (IMAGPART_EXPR, gnu_type, tgt),\n+\t\t\t   build_int_cst (gnu_type, 0));\n       return\n \temit_check (check, gnu_expr, CE_Overflow_Check_Failed, gnat_node);\n    }"}]}