{"sha": "3a0e583bf17240e55fee7b490e13753cca52bfe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwZTU4M2JmMTcyNDBlNTVmZWU3YjQ5MGUxMzc1M2NjYTUyYmZlMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-05T18:44:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-05T18:44:42Z"}, "message": "i386: Fix some -O0 avx2intrin.h and xopintrin.h intrinsic macros [PR94046]\n\nAs the testcases show, the macros we have for -O0 for intrinsics that require\nconstant argument(s) should first cast the argument to the type the -O1+\ninline uses and afterwards to whatever type e.g. a builtin needs.\nThe PR reported one which violated this, and I've grepped for all double-casts\nand grepped out from that meaningful casts where the __m{128,256,512}{,d,i}\nfirst cast is cast to same sized __v* type and has the same kind of element\ntype (float, double, integral).  These 7 macros were using different casts,\nand I've double checked them against the inline function types.\n\n2020-03-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94046\n\t* config/i386/avx2intrin.h (_mm_mask_i32gather_ps): Fix first cast of\n\tSRC and MASK arguments to __m128 from __m128d.\n\t(_mm256_mask_i32gather_ps): Fix first cast of MASK argument to __m256\n\tfrom __m256d.\n\t(_mm_mask_i64gather_ps): Fix first cast of MASK argument to __m128\n\tfrom __m128d.\n\t* config/i386/xopintrin.h (_mm_permute2_pd): Fix first cast of C\n\targument to __m128i from __m128d.\n\t(_mm256_permute2_pd): Fix first cast of C argument to __m256i from\n\t__m256d.\n\t(_mm_permute2_ps): Fix first cast of C argument to __m128i from __m128.\n\t(_mm256_permute2_ps): Fix first cast of C argument to __m256i from\n\t__m256.\n\n\t* g++.target/i386/pr94046-1.C: New test.\n\t* g++.target/i386/pr94046-2.C: New test.", "tree": {"sha": "43d445803ae3e1590a9cd9d45774e207d73a72ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d445803ae3e1590a9cd9d45774e207d73a72ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a0e583bf17240e55fee7b490e13753cca52bfe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0e583bf17240e55fee7b490e13753cca52bfe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0e583bf17240e55fee7b490e13753cca52bfe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0e583bf17240e55fee7b490e13753cca52bfe1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d22ab64c4774d7d30c7e014652b28a13d744aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d22ab64c4774d7d30c7e014652b28a13d744aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d22ab64c4774d7d30c7e014652b28a13d744aec"}], "stats": {"total": 99, "additions": 91, "deletions": 8}, "files": [{"sha": "a20f8dcbd5d43cda08a5f630463f9ad2a47a491b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a0e583bf17240e55fee7b490e13753cca52bfe1", "patch": "@@ -1,3 +1,20 @@\n+2020-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94046\n+\t* config/i386/avx2intrin.h (_mm_mask_i32gather_ps): Fix first cast of\n+\tSRC and MASK arguments to __m128 from __m128d.\n+\t(_mm256_mask_i32gather_ps): Fix first cast of MASK argument to __m256\n+\tfrom __m256d.\n+\t(_mm_mask_i64gather_ps): Fix first cast of MASK argument to __m128\n+\tfrom __m128d.\n+\t* config/i386/xopintrin.h (_mm_permute2_pd): Fix first cast of C\n+\targument to __m128i from __m128d.\n+\t(_mm256_permute2_pd): Fix first cast of C argument to __m256i from\n+\t__m256d.\n+\t(_mm_permute2_ps): Fix first cast of C argument to __m128i from __m128.\n+\t(_mm256_permute2_ps): Fix first cast of C argument to __m256i from\n+\t__m256.\n+\n 2020-03-05  Delia Burduv  <delia.burduv@arm.com>\n \n \t* config/arm/arm_neon.h (vbfmmlaq_f32): New."}, {"sha": "4ac21b9954820a9e996dbf9cd492a0bffffce4ed", "filename": "gcc/config/i386/avx2intrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx2intrin.h?ref=3a0e583bf17240e55fee7b490e13753cca52bfe1", "patch": "@@ -1736,10 +1736,10 @@ _mm256_mask_i64gather_epi32 (__m128i __src, int const *__base,\n \t\t\t\t\t(int)SCALE)\n \n #define _mm_mask_i32gather_ps(SRC, BASE, INDEX, MASK, SCALE)\t \\\n-  (__m128) __builtin_ia32_gathersiv4sf ((__v4sf)(__m128d)SRC,\t \\\n+  (__m128) __builtin_ia32_gathersiv4sf ((__v4sf)(__m128)SRC,\t \\\n \t\t\t\t\t(float const *)BASE,\t \\\n \t\t\t\t\t(__v4si)(__m128i)INDEX,\t \\\n-\t\t\t\t\t(__v4sf)(__m128d)MASK,\t \\\n+\t\t\t\t\t(__v4sf)(__m128)MASK,\t \\\n \t\t\t\t\t(int)SCALE)\n \n #define _mm256_i32gather_ps(BASE, INDEX, SCALE)\t\t\t       \\\n@@ -1754,7 +1754,7 @@ _mm256_mask_i64gather_epi32 (__m128i __src, int const *__base,\n   (__m256) __builtin_ia32_gathersiv8sf ((__v8sf)(__m256)SRC,\t\\\n \t\t\t\t\t(float const *)BASE,\t\\\n \t\t\t\t\t(__v8si)(__m256i)INDEX, \\\n-\t\t\t\t\t(__v8sf)(__m256d)MASK,\t\\\n+\t\t\t\t\t(__v8sf)(__m256)MASK,\t\\\n \t\t\t\t\t(int)SCALE)\n \n #define _mm_i64gather_ps(BASE, INDEX, SCALE)\t\t\t\t\\\n@@ -1769,7 +1769,7 @@ _mm256_mask_i64gather_epi32 (__m128i __src, int const *__base,\n   (__m128) __builtin_ia32_gatherdiv4sf ((__v4sf)(__m128)SRC,\t \\\n \t\t\t\t\t(float const *)BASE,\t \\\n \t\t\t\t\t(__v2di)(__m128i)INDEX,\t \\\n-\t\t\t\t\t(__v4sf)(__m128d)MASK,\t \\\n+\t\t\t\t\t(__v4sf)(__m128)MASK,\t \\\n \t\t\t\t\t(int)SCALE)\n \n #define _mm256_i64gather_ps(BASE, INDEX, SCALE)\t\t\t\t\\"}, {"sha": "49bac22effa92b839523056e8f105d776ea14e21", "filename": "gcc/config/i386/xopintrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Fconfig%2Fi386%2Fxopintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Fconfig%2Fi386%2Fxopintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxopintrin.h?ref=3a0e583bf17240e55fee7b490e13753cca52bfe1", "patch": "@@ -814,25 +814,25 @@ _mm256_permute2_ps (__m256 __X, __m256 __Y, __m256i __C, const int __I)\n #define _mm_permute2_pd(X, Y, C, I)\t\t\t\t\t\\\n   ((__m128d) __builtin_ia32_vpermil2pd ((__v2df)(__m128d)(X),\t\t\\\n \t\t\t\t\t(__v2df)(__m128d)(Y),\t\t\\\n-\t\t\t\t\t(__v2di)(__m128d)(C),\t\t\\\n+\t\t\t\t\t(__v2di)(__m128i)(C),\t\t\\\n \t\t\t\t\t(int)(I)))\n \n #define _mm256_permute2_pd(X, Y, C, I)\t\t\t\t\t\\\n   ((__m256d) __builtin_ia32_vpermil2pd256 ((__v4df)(__m256d)(X),\t\\\n \t\t\t\t\t   (__v4df)(__m256d)(Y),\t\\\n-\t\t\t\t\t   (__v4di)(__m256d)(C),\t\\\n+\t\t\t\t\t   (__v4di)(__m256i)(C),\t\\\n \t\t\t\t\t   (int)(I)))\n \n #define _mm_permute2_ps(X, Y, C, I)\t\t\t\t\t\\\n   ((__m128) __builtin_ia32_vpermil2ps ((__v4sf)(__m128)(X),\t\t\\\n \t\t\t\t       (__v4sf)(__m128)(Y),\t\t\\\n-\t\t\t\t       (__v4si)(__m128)(C),\t\t\\\n+\t\t\t\t       (__v4si)(__m128i)(C),\t\t\\\n \t\t\t\t       (int)(I)))\n \n #define _mm256_permute2_ps(X, Y, C, I)\t\t\t\t\t\\\n   ((__m256) __builtin_ia32_vpermil2ps256 ((__v8sf)(__m256)(X),\t\t\\\n \t\t\t\t\t  (__v8sf)(__m256)(Y),  \t\\\n-\t\t\t\t\t  (__v8si)(__m256)(C),\t\t\\\n+\t\t\t\t\t  (__v8si)(__m256i)(C),\t\t\\\n  \t\t\t\t\t  (int)(I)))\n #endif /* __OPTIMIZE__ */\n "}, {"sha": "169cedea81bc576eb2642e1c00d3a3c013154743", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a0e583bf17240e55fee7b490e13753cca52bfe1", "patch": "@@ -1,3 +1,9 @@\n+2020-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94046\n+\t* g++.target/i386/pr94046-1.C: New test.\n+\t* g++.target/i386/pr94046-2.C: New test.\n+\n 2020-03-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/asan/asan_test.C (dg-options): Add"}, {"sha": "f2d472442d76622f8aa26de2129f94c2df81cca2", "filename": "gcc/testsuite/g++.target/i386/pr94046-1.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr94046-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr94046-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr94046-1.C?ref=3a0e583bf17240e55fee7b490e13753cca52bfe1", "patch": "@@ -0,0 +1,55 @@\n+// PR target/94046\n+// { dg-do compile }\n+// { dg-options \"-O2 -mavx2 -mxop\" }\n+\n+#include <x86intrin.h>\n+\n+#define S(x) struct x { operator __##x (); };\n+S (m128)\n+S (m128d)\n+S (m128i)\n+S (m256)\n+S (m256d)\n+S (m256i)\n+\n+__m128\n+f1 (m128 src, float const *base, m128i idx, m128 mask)\n+{\n+  return _mm_mask_i32gather_ps (src, base, idx, mask, 2);\n+}\n+\n+__m256\n+f2 (m256 src, float const *base, m256i idx, m256 mask)\n+{\n+  return _mm256_mask_i32gather_ps (src, base, idx, mask, 2);\n+}\n+\n+__m128\n+f3 (m128 src, float const *base, m128i idx, m128 mask)\n+{\n+  return _mm_mask_i64gather_ps (src, base, idx, mask, 2);\n+}\n+\n+__m128d\n+f4 (m128d x, m128d y, m128i c)\n+{\n+  return _mm_permute2_pd (x, y, c, 3);\n+}\n+\n+__m128\n+f5 (m128 x, m128 y, m128i c)\n+{\n+  return _mm_permute2_ps (x, y, c, 3);\n+}\n+\n+__m256d\n+f6 (m256d x, m256d y, m256i c)\n+{\n+  return _mm256_permute2_pd (x, y, c, 3);\n+}\n+\n+__m256\n+f7 (m256 x, m256 y, m256i c)\n+{\n+  return _mm256_permute2_ps (x, y, c, 3);\n+}"}, {"sha": "abc8c3ee1ec4337b403288c5a4799b5d929837a7", "filename": "gcc/testsuite/g++.target/i386/pr94046-2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr94046-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0e583bf17240e55fee7b490e13753cca52bfe1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr94046-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr94046-2.C?ref=3a0e583bf17240e55fee7b490e13753cca52bfe1", "patch": "@@ -0,0 +1,5 @@\n+// PR target/94046\n+// { dg-do compile }\n+// { dg-options \"-O0 -mavx2 -mxop\" }\n+\n+#include \"pr94046-1.C\""}]}