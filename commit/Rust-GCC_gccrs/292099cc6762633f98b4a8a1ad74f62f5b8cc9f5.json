{"sha": "292099cc6762633f98b4a8a1ad74f62f5b8cc9f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyMDk5Y2M2NzYyNjMzZjk4YjRhOGExYWQ3NGY2MmY1YjhjYzlmNQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-08-04T01:20:26Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-08-04T01:20:26Z"}, "message": "(subsi3+1): Handle case where first operand is constant\nbut second operand is not.\n\nFrom-SVN: r12589", "tree": {"sha": "b0a26282641a62208f242773fc756ee9face8e91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a26282641a62208f242773fc756ee9face8e91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/292099cc6762633f98b4a8a1ad74f62f5b8cc9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292099cc6762633f98b4a8a1ad74f62f5b8cc9f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292099cc6762633f98b4a8a1ad74f62f5b8cc9f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292099cc6762633f98b4a8a1ad74f62f5b8cc9f5/comments", "author": null, "committer": null, "parents": [{"sha": "cd25d00b2556334e757b2c826fe089f1c1e0d0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd25d00b2556334e757b2c826fe089f1c1e0d0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd25d00b2556334e757b2c826fe089f1c1e0d0e4"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "32acd924ed11f493e2504d557fad8629aaa69ad7", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292099cc6762633f98b4a8a1ad74f62f5b8cc9f5/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292099cc6762633f98b4a8a1ad74f62f5b8cc9f5/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=292099cc6762633f98b4a8a1ad74f62f5b8cc9f5", "patch": "@@ -1509,6 +1509,9 @@\n ;; add instruction.\n ;; Some assemblers apparently won't accept two addresses added together.\n \n+;; ??? The condition should be improved to reject the case of two\n+;; symbolic constants.\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n \t(plus:SI (match_operand:SI 1 \"arith32_operand\" \"%dn,i,dn\")\n@@ -1531,8 +1534,16 @@\n       else if (INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) < 32)\n \treturn \\\"addo\t%1,%2,%0\\\";\n     }\n+  /* Non-canonical results (op1 == const, op2 != const) have been seen\n+     in reload output when both operands were symbols before reload, so\n+     we deal with it here.  This may be a fault of the constraints above.  */\n   if (CONSTANT_P (operands[1]))\n-    return \\\"lda\t%1+%2,%0\\\";\n+    {\n+      if (CONSTANT_P (operands[2]))\n+\treturn \\\"lda\t%1+%2,%0\\\";\n+      else\n+\treturn \\\"lda\t%1(%2),%0\\\";\n+    }\n   return \\\"lda\t%2(%1),%0\\\";\n }\")\n "}]}