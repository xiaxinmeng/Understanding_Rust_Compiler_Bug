{"sha": "eb51c837dd39c8eea4751234230ab4334db66d49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1MWM4MzdkZDM5YzhlZWE0NzUxMjM0MjMwYWI0MzM0ZGI2NmQ0OQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-19T17:39:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-19T17:39:08Z"}, "message": "Strengthen return types of various {next|prev}_*insn from rtx to rtx_insn *\n\n2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (previous_insn): Strengthen return type from rtx to\n\trtx_insn *.\n\t(next_insn): Likewise.\n\t(prev_nonnote_insn): Likewise.\n\t(prev_nonnote_insn_bb): Likewise.\n\t(next_nonnote_insn): Likewise.\n\t(next_nonnote_insn_bb): Likewise.\n\t(prev_nondebug_insn): Likewise.\n\t(next_nondebug_insn): Likewise.\n\t(prev_nonnote_nondebug_insn): Likewise.\n\t(next_nonnote_nondebug_insn): Likewise.\n\t(prev_real_insn): Likewise.\n\t(next_real_insn): Likewise.\n\t(prev_active_insn): Likewise.\n\t(next_active_insn): Likewise.\n\n\t* emit-rtl.c (next_insn): Strengthen return type from rtx to\n\trtx_insn *, adding a checked cast.\n\t(previous_insn): Likewise.\n\t(next_nonnote_insn): Likewise.\n\t(next_nonnote_insn_bb): Likewise.\n\t(prev_nonnote_insn): Likewise.\n\t(prev_nonnote_insn_bb): Likewise.\n\t(next_nondebug_insn): Likewise.\n\t(prev_nondebug_insn): Likewise.\n\t(next_nonnote_nondebug_insn): Likewise.\n\t(prev_nonnote_nondebug_insn): Likewise.\n\t(next_real_insn): Likewise.\n\t(prev_real_insn): Likewise.\n\t(next_active_insn): Likewise.\n\t(prev_active_insn): Likewise.\n\n\t* config/sh/sh-protos.h (sh_find_set_of_reg): Convert function ptr\n\tparam \"stepfunc\" so that it returns an rtx_insn * rather than an\n\trtx, to track the change to prev_nonnote_insn_bb, which is the\n\tonly function this is called with.\n\t* config/sh/sh.c (sh_find_set_of_reg): Likewise.\n\nFrom-SVN: r214178", "tree": {"sha": "334afa48c1700aa96da864f37f94b04143e97375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/334afa48c1700aa96da864f37f94b04143e97375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb51c837dd39c8eea4751234230ab4334db66d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb51c837dd39c8eea4751234230ab4334db66d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb51c837dd39c8eea4751234230ab4334db66d49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb51c837dd39c8eea4751234230ab4334db66d49/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad035db84b6136038f9919c72c2bdf140342bf4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad035db84b6136038f9919c72c2bdf140342bf4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad035db84b6136038f9919c72c2bdf140342bf4e"}], "stats": {"total": 132, "additions": 86, "deletions": 46}, "files": [{"sha": "2bd3e1a294e0635a6d3fe9f51a86280b53959e99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb51c837dd39c8eea4751234230ab4334db66d49", "patch": "@@ -1,3 +1,43 @@\n+2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (previous_insn): Strengthen return type from rtx to\n+\trtx_insn *.\n+\t(next_insn): Likewise.\n+\t(prev_nonnote_insn): Likewise.\n+\t(prev_nonnote_insn_bb): Likewise.\n+\t(next_nonnote_insn): Likewise.\n+\t(next_nonnote_insn_bb): Likewise.\n+\t(prev_nondebug_insn): Likewise.\n+\t(next_nondebug_insn): Likewise.\n+\t(prev_nonnote_nondebug_insn): Likewise.\n+\t(next_nonnote_nondebug_insn): Likewise.\n+\t(prev_real_insn): Likewise.\n+\t(next_real_insn): Likewise.\n+\t(prev_active_insn): Likewise.\n+\t(next_active_insn): Likewise.\n+\n+\t* emit-rtl.c (next_insn): Strengthen return type from rtx to\n+\trtx_insn *, adding a checked cast.\n+\t(previous_insn): Likewise.\n+\t(next_nonnote_insn): Likewise.\n+\t(next_nonnote_insn_bb): Likewise.\n+\t(prev_nonnote_insn): Likewise.\n+\t(prev_nonnote_insn_bb): Likewise.\n+\t(next_nondebug_insn): Likewise.\n+\t(prev_nondebug_insn): Likewise.\n+\t(next_nonnote_nondebug_insn): Likewise.\n+\t(prev_nonnote_nondebug_insn): Likewise.\n+\t(next_real_insn): Likewise.\n+\t(prev_real_insn): Likewise.\n+\t(next_active_insn): Likewise.\n+\t(prev_active_insn): Likewise.\n+\n+\t* config/sh/sh-protos.h (sh_find_set_of_reg): Convert function ptr\n+\tparam \"stepfunc\" so that it returns an rtx_insn * rather than an\n+\trtx, to track the change to prev_nonnote_insn_bb, which is the\n+\tonly function this is called with.\n+\t* config/sh/sh.c (sh_find_set_of_reg): Likewise.\n+\n 2014-08-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-visibility.c (update_visibility_by_resolution_info): Fix"}, {"sha": "cec324c8320020e0d756afd7530a471ea1b4696a", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=eb51c837dd39c8eea4751234230ab4334db66d49", "patch": "@@ -181,7 +181,7 @@ struct set_of_reg\n   rtx set_src;\n };\n \n-extern set_of_reg sh_find_set_of_reg (rtx reg, rtx insn, rtx(*stepfunc)(rtx));\n+extern set_of_reg sh_find_set_of_reg (rtx reg, rtx insn, rtx_insn *(*stepfunc)(rtx));\n extern bool sh_is_logical_t_store_expr (rtx op, rtx insn);\n extern rtx sh_try_omit_signzero_extend (rtx extended_op, rtx insn);\n #endif /* RTX_CODE */"}, {"sha": "673fc7e4299c2b0f1d5b789e90c394c1465536d0", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=eb51c837dd39c8eea4751234230ab4334db66d49", "patch": "@@ -13505,7 +13505,7 @@ sh_find_equiv_gbr_addr (rtx insn, rtx mem)\n    'prev_nonnote_insn_bb'.  When the insn is found, try to extract the rtx\n    of the reg set.  */\n set_of_reg\n-sh_find_set_of_reg (rtx reg, rtx insn, rtx(*stepfunc)(rtx))\n+sh_find_set_of_reg (rtx reg, rtx insn, rtx_insn *(*stepfunc)(rtx))\n {\n   set_of_reg result;\n   result.insn = insn;"}, {"sha": "1a31877ab43b9eb40a68d8939aacfdda7bc0d28e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=eb51c837dd39c8eea4751234230ab4334db66d49", "patch": "@@ -3179,7 +3179,7 @@ get_max_insn_count (void)\n /* Return the next insn.  If it is a SEQUENCE, return the first insn\n    of the sequence.  */\n \n-rtx\n+rtx_insn *\n next_insn (rtx insn)\n {\n   if (insn)\n@@ -3190,13 +3190,13 @@ next_insn (rtx insn)\n \tinsn = XVECEXP (PATTERN (insn), 0, 0);\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the previous insn.  If it is a SEQUENCE, return the last insn\n    of the sequence.  */\n \n-rtx\n+rtx_insn *\n previous_insn (rtx insn)\n {\n   if (insn)\n@@ -3207,13 +3207,13 @@ previous_insn (rtx insn)\n \tinsn = XVECEXP (PATTERN (insn), 0, XVECLEN (PATTERN (insn), 0) - 1);\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the next insn after INSN that is not a NOTE.  This routine does not\n    look inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n next_nonnote_insn (rtx insn)\n {\n   while (insn)\n@@ -3223,14 +3223,14 @@ next_nonnote_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the next insn after INSN that is not a NOTE, but stop the\n    search before we enter another basic block.  This routine does not\n    look inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n next_nonnote_insn_bb (rtx insn)\n {\n   while (insn)\n@@ -3239,16 +3239,16 @@ next_nonnote_insn_bb (rtx insn)\n       if (insn == 0 || !NOTE_P (insn))\n \tbreak;\n       if (NOTE_INSN_BASIC_BLOCK_P (insn))\n-\treturn NULL_RTX;\n+\treturn NULL;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the previous insn before INSN that is not a NOTE.  This routine does\n    not look inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n prev_nonnote_insn (rtx insn)\n {\n   while (insn)\n@@ -3258,14 +3258,14 @@ prev_nonnote_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the previous insn before INSN that is not a NOTE, but stop\n    the search before we enter another basic block.  This routine does\n    not look inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n prev_nonnote_insn_bb (rtx insn)\n {\n   while (insn)\n@@ -3274,16 +3274,16 @@ prev_nonnote_insn_bb (rtx insn)\n       if (insn == 0 || !NOTE_P (insn))\n \tbreak;\n       if (NOTE_INSN_BASIC_BLOCK_P (insn))\n-\treturn NULL_RTX;\n+\treturn NULL;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the next insn after INSN that is not a DEBUG_INSN.  This\n    routine does not look inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n next_nondebug_insn (rtx insn)\n {\n   while (insn)\n@@ -3293,13 +3293,13 @@ next_nondebug_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the previous insn before INSN that is not a DEBUG_INSN.\n    This routine does not look inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n prev_nondebug_insn (rtx insn)\n {\n   while (insn)\n@@ -3309,13 +3309,13 @@ prev_nondebug_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the next insn after INSN that is not a NOTE nor DEBUG_INSN.\n    This routine does not look inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n next_nonnote_nondebug_insn (rtx insn)\n {\n   while (insn)\n@@ -3325,13 +3325,13 @@ next_nonnote_nondebug_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the previous insn before INSN that is not a NOTE nor DEBUG_INSN.\n    This routine does not look inside SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n prev_nonnote_nondebug_insn (rtx insn)\n {\n   while (insn)\n@@ -3341,14 +3341,14 @@ prev_nonnote_nondebug_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the next INSN, CALL_INSN or JUMP_INSN after INSN;\n    or 0, if there is none.  This routine does not look inside\n    SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n next_real_insn (rtx insn)\n {\n   while (insn)\n@@ -3358,14 +3358,14 @@ next_real_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the last INSN, CALL_INSN or JUMP_INSN before INSN;\n    or 0, if there is none.  This routine does not look inside\n    SEQUENCEs.  */\n \n-rtx\n+rtx_insn *\n prev_real_insn (rtx insn)\n {\n   while (insn)\n@@ -3375,7 +3375,7 @@ prev_real_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Return the last CALL_INSN in the current list, or 0 if there is none.\n@@ -3409,7 +3409,7 @@ active_insn_p (const_rtx insn)\n \t\t      && GET_CODE (PATTERN (insn)) != CLOBBER))));\n }\n \n-rtx\n+rtx_insn *\n next_active_insn (rtx insn)\n {\n   while (insn)\n@@ -3419,14 +3419,14 @@ next_active_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \n /* Find the last insn before INSN that really does something.  This routine\n    does not look inside SEQUENCEs.  After reload this also skips over\n    standalone USE and CLOBBER insn.  */\n \n-rtx\n+rtx_insn *\n prev_active_insn (rtx insn)\n {\n   while (insn)\n@@ -3436,7 +3436,7 @@ prev_active_insn (rtx insn)\n \tbreak;\n     }\n \n-  return insn;\n+  return safe_as_a <rtx_insn *> (insn);\n }\n \f\n #ifdef HAVE_cc0"}, {"sha": "9a2884abbb3e362e11688ecbe766b69af4ade1a0", "filename": "gcc/rtl.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb51c837dd39c8eea4751234230ab4334db66d49/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=eb51c837dd39c8eea4751234230ab4334db66d49", "patch": "@@ -2417,20 +2417,20 @@ extern rtx emit_use (rtx);\n extern rtx make_insn_raw (rtx);\n extern void add_function_usage_to (rtx, rtx);\n extern rtx last_call_insn (void);\n-extern rtx previous_insn (rtx);\n-extern rtx next_insn (rtx);\n-extern rtx prev_nonnote_insn (rtx);\n-extern rtx prev_nonnote_insn_bb (rtx);\n-extern rtx next_nonnote_insn (rtx);\n-extern rtx next_nonnote_insn_bb (rtx);\n-extern rtx prev_nondebug_insn (rtx);\n-extern rtx next_nondebug_insn (rtx);\n-extern rtx prev_nonnote_nondebug_insn (rtx);\n-extern rtx next_nonnote_nondebug_insn (rtx);\n-extern rtx prev_real_insn (rtx);\n-extern rtx next_real_insn (rtx);\n-extern rtx prev_active_insn (rtx);\n-extern rtx next_active_insn (rtx);\n+extern rtx_insn *previous_insn (rtx);\n+extern rtx_insn *next_insn (rtx);\n+extern rtx_insn *prev_nonnote_insn (rtx);\n+extern rtx_insn *prev_nonnote_insn_bb (rtx);\n+extern rtx_insn *next_nonnote_insn (rtx);\n+extern rtx_insn *next_nonnote_insn_bb (rtx);\n+extern rtx_insn *prev_nondebug_insn (rtx);\n+extern rtx_insn *next_nondebug_insn (rtx);\n+extern rtx_insn *prev_nonnote_nondebug_insn (rtx);\n+extern rtx_insn *next_nonnote_nondebug_insn (rtx);\n+extern rtx_insn *prev_real_insn (rtx);\n+extern rtx_insn *next_real_insn (rtx);\n+extern rtx_insn *prev_active_insn (rtx);\n+extern rtx_insn *next_active_insn (rtx);\n extern int active_insn_p (const_rtx);\n extern rtx next_cc0_user (rtx);\n extern rtx prev_cc0_setter (rtx);"}]}