{"sha": "b2202431910e30d8505c94d1cb9341cac7080d10", "node_id": "C_kwDOANBUbNoAKGIyMjAyNDMxOTEwZTMwZDg1MDVjOTRkMWNiOTM0MWNhYzcwODBkMTA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-20T17:06:17Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-04-25T21:14:02Z"}, "message": "fortran: Fix up gfc_trans_oacc_construct [PR104717]\n\nSo that move_sese_region_to_fn works properly, OpenMP/OpenACC constructs\nfor which that function is invoked need an extra artificial BIND_EXPR\naround their body so that we move all variables of the bodies.\n\nThe C/C++ FEs do that both for OpenMP constructs like OMP_PARALLEL, OMP_TASK\nor OMP_TARGET and for OpenACC constructs that behave similarly to\nOMP_TARGET, but the Fortran FE only does that for OpenMP constructs.\n\nThe following patch does that for OpenACC constructs too.\n\n\tPR fortran/104717\n\tgcc/fortran/\n\t* trans-openmp.cc (gfc_trans_oacc_construct): Wrap construct body\n\tin an extra BIND_EXPR.\n\tgcc/testsuite/\n\t* gfortran.dg/goacc/pr104717.f90: New test.\n\t* gfortran.dg/goacc/privatization-1-compute-loop.f90: Adjust.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Adjust.\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "0d32c5d40834f0b7a5d297398070378dd40e471d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d32c5d40834f0b7a5d297398070378dd40e471d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2202431910e30d8505c94d1cb9341cac7080d10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2202431910e30d8505c94d1cb9341cac7080d10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2202431910e30d8505c94d1cb9341cac7080d10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2202431910e30d8505c94d1cb9341cac7080d10/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68fd1c9f22ad42536bcb63a4c776004268702b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68fd1c9f22ad42536bcb63a4c776004268702b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68fd1c9f22ad42536bcb63a4c776004268702b0b"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "43d59abe9e098a35ce76fbb65aa51491dff2e1ce", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2202431910e30d8505c94d1cb9341cac7080d10/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2202431910e30d8505c94d1cb9341cac7080d10/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=b2202431910e30d8505c94d1cb9341cac7080d10", "patch": "@@ -4444,7 +4444,9 @@ gfc_trans_oacc_construct (gfc_code *code)\n   gfc_start_block (&block);\n   oacc_clauses = gfc_trans_omp_clauses (&block, code->ext.omp_clauses,\n \t\t\t\t\tcode->loc, false, true);\n+  pushlevel ();\n   stmt = gfc_trans_omp_code (code->block->next, true);\n+  stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n   stmt = build2_loc (gfc_get_location (&code->loc), construct_code,\n \t\t     void_type_node, stmt, oacc_clauses);\n   gfc_add_expr_to_block (&block, stmt);"}, {"sha": "4ef16187c841864c8266ad125d245a323767a75e", "filename": "gcc/testsuite/gfortran.dg/goacc/pr104717.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2202431910e30d8505c94d1cb9341cac7080d10/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr104717.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2202431910e30d8505c94d1cb9341cac7080d10/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr104717.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr104717.f90?ref=b2202431910e30d8505c94d1cb9341cac7080d10", "patch": "@@ -0,0 +1,22 @@\n+! Extracted from 'libgomp.oacc-fortran/privatized-ref-2.f90'.\n+\n+! { dg-additional-options \"-O1 -fstack-arrays -fipa-pta\" }\n+\n+program main\n+  implicit none (type, external)\n+  integer :: j\n+  integer, allocatable :: A(:)\n+\n+  A = [(3*j, j=1, 10)]\n+  call foo (A, size(A))\n+  deallocate (A)\n+contains\n+  subroutine foo (array, nn)\n+    integer :: i, nn\n+    integer :: array(nn)\n+\n+    !$acc parallel copyout(array)\n+    array = [(-i, i = 1, nn)]\n+    !$acc end parallel\n+  end subroutine foo\n+end"}, {"sha": "13772c185ce9b493b820ead75f3e34fd962e646c", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-compute-loop.f90", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2202431910e30d8505c94d1cb9341cac7080d10/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2202431910e30d8505c94d1cb9341cac7080d10/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90?ref=b2202431910e30d8505c94d1cb9341cac7080d10", "patch": "@@ -13,7 +13,7 @@\n ! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n ! so to maintain compatibility with earlier Tcl releases, we manually\n ! initialize counter variables:\n-! { dg-line l_dummy[variable c_loop 0] }\n+! { dg-line l_dummy[variable c_compute 0 c_loop 0] }\n ! { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n ! \"WARNING: dg-line var l_dummy defined, but not used\".\n \n@@ -26,7 +26,7 @@ subroutine f (i, j, a)\n     integer, parameter :: c = 3\n     integer, external :: g\n \n-    !$acc parallel\n+    !$acc parallel ! { dg-line l_compute[incr c_compute] }\n     !$acc loop collapse(2) private(a) private(x, y) ! { dg-line l_loop[incr c_loop] }\n     do i = 1, 20\n        do j = 1, 25\n@@ -46,6 +46,8 @@ subroutine f (i, j, a)\n           y = a\n        end do\n     end do\n+    !$acc end parallel\n+    ! { dg-note {variable 'count\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'count\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n@@ -54,6 +56,5 @@ subroutine f (i, j, a)\n     ! { dg-note {variable 'y' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'y' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop }\n-    !$acc end parallel\n   end subroutine f\n end module m"}, {"sha": "b31f4066152b11123946eead5296be5184000788", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-2.f90", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2202431910e30d8505c94d1cb9341cac7080d10/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2202431910e30d8505c94d1cb9341cac7080d10/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90?ref=b2202431910e30d8505c94d1cb9341cac7080d10", "patch": "@@ -53,6 +53,9 @@ subroutine foo (array, nn)\n     integer :: array(nn)\n \n     !$acc parallel copyout(array) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {variable 'atmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'shadow_loopvar\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'offset\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     array = [(-i, i = 1, nn)]\n     !$acc end parallel\n@@ -81,6 +84,10 @@ subroutine bar (array)\n     integer :: array(:)\n \n     !$acc parallel copyout(array) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {variable 'atmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'shadow_loopvar\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'offset\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     array = [(-2*i, i = 1, size(array))]\n     !$acc end parallel"}]}