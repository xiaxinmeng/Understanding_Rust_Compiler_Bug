{"sha": "229a1c5999abbd0e19302c470d27aa0ed867f4f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5YTFjNTk5OWFiYmQwZTE5MzAyYzQ3MGQyN2FhMGVkODY3ZjRmNQ==", "commit": {"author": {"name": "Jie Zhang", "email": "jie@codesourcery.com", "date": "2011-04-18T14:01:13Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2011-04-18T14:01:13Z"}, "message": "Jie Zhang  <jie@codesourcery.com>\n\tRichard Earnshaw  <rearnsha@arm.com>\n\n\t* arm.c (neon_builtin_type_bits): Remove.\n\t(typedef enum neon_builtin_mode): New.\n\t(T_MAX): Don't define.\n\t(typedef enum neon_builtin_datum): Remove bits, codes[],\n\tnum_vars and base_fcode.  Add mode, code and fcode.\n\t(VAR1, VAR2, VAR3, VAR4, VAR5, VAR6, VAR7, VAR8, VAR9\n\tVAR10): Change accordingly.\n\t(neon_builtin_data[]): Change accordingly\n\t(arm_init_neon_builtins): Change accordingly.\n\t(neon_builtin_compare): Remove.\n\t(locate_neon_builtin_icode): Remove.\n\t(arm_expand_neon_builtin): Change accordingly.\n\n\t* arm.h (enum arm_builtins): Move to ...\n\t* arm.c (enum arm_builtins): ... here; and rearrange builtin code.\n\n\t* arm.c (arm_builtin_decl): Declare.\n\t(TARGET_BUILTIN_DECL): Define.\n\t(enum arm_builtins): Correct ARM_BUILTIN_MAX.\n\t(arm_builtin_decls[]): New.\n\t(arm_init_neon_builtins): Store builtin declarations in\n\tarm_builtin_decls[].\n\t(arm_init_tls_builtins): Likewise.\n\t(arm_init_iwmmxt_builtins): Likewise.  Refactor initialization code.\n\t(arm_builtin_decl): New.\n\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\n\nFrom-SVN: r172646", "tree": {"sha": "b61f87519713be7c71673d603293744ee534cf80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b61f87519713be7c71673d603293744ee534cf80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/229a1c5999abbd0e19302c470d27aa0ed867f4f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229a1c5999abbd0e19302c470d27aa0ed867f4f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/229a1c5999abbd0e19302c470d27aa0ed867f4f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229a1c5999abbd0e19302c470d27aa0ed867f4f5/comments", "author": null, "committer": null, "parents": [{"sha": "75e802cc5f06a9db7d7e2509d658538b3142d86b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e802cc5f06a9db7d7e2509d658538b3142d86b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e802cc5f06a9db7d7e2509d658538b3142d86b"}], "stats": {"total": 2730, "additions": 1365, "deletions": 1365}, "files": [{"sha": "6e126426101434515559392141b2fd3719cdd4a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229a1c5999abbd0e19302c470d27aa0ed867f4f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229a1c5999abbd0e19302c470d27aa0ed867f4f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=229a1c5999abbd0e19302c470d27aa0ed867f4f5", "patch": "@@ -1,3 +1,32 @@\n+2011-04-18  Jie Zhang  <jie@codesourcery.com>\n+\tRichard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (neon_builtin_type_bits): Remove.\n+\t(typedef enum neon_builtin_mode): New.\n+\t(T_MAX): Don't define.\n+\t(typedef enum neon_builtin_datum): Remove bits, codes[],\n+\tnum_vars and base_fcode.  Add mode, code and fcode.\n+\t(VAR1, VAR2, VAR3, VAR4, VAR5, VAR6, VAR7, VAR8, VAR9\n+\tVAR10): Change accordingly.\n+\t(neon_builtin_data[]): Change accordingly\n+\t(arm_init_neon_builtins): Change accordingly.\n+\t(neon_builtin_compare): Remove.\n+\t(locate_neon_builtin_icode): Remove.\n+\t(arm_expand_neon_builtin): Change accordingly.\n+\n+\t* arm.h (enum arm_builtins): Move to ...\n+\t* arm.c (enum arm_builtins): ... here; and rearrange builtin code.\n+\n+\t* arm.c (arm_builtin_decl): Declare.\n+\t(TARGET_BUILTIN_DECL): Define.\n+\t(enum arm_builtins): Correct ARM_BUILTIN_MAX.\n+\t(arm_builtin_decls[]): New.\n+\t(arm_init_neon_builtins): Store builtin declarations in\n+\tarm_builtin_decls[].\n+\t(arm_init_tls_builtins): Likewise.\n+\t(arm_init_iwmmxt_builtins): Likewise.  Refactor initialization code.\n+\t(arm_builtin_decl): New.\n+\n 2011-04-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.c (upper_bound_in_type): Build properly canonicalized"}, {"sha": "722a3715ea54f8fa9770819d052418f8048c3da9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1336, "deletions": 1193, "changes": 2529, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229a1c5999abbd0e19302c470d27aa0ed867f4f5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229a1c5999abbd0e19302c470d27aa0ed867f4f5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=229a1c5999abbd0e19302c470d27aa0ed867f4f5", "patch": "@@ -161,6 +161,7 @@ static rtx safe_vector_operand (rtx, enum machine_mode);\n static rtx arm_expand_binop_builtin (enum insn_code, tree, rtx);\n static rtx arm_expand_unop_builtin (enum insn_code, tree, rtx, int);\n static rtx arm_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+static tree arm_builtin_decl (unsigned, bool);\n static void emit_constant_insn (rtx cond, rtx pattern);\n static rtx emit_set_insn (rtx, rtx);\n static int arm_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n@@ -409,6 +410,8 @@ static const struct default_options arm_option_optimization_table[] =\n #define TARGET_INIT_BUILTINS  arm_init_builtins\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN arm_expand_builtin\n+#undef  TARGET_BUILTIN_DECL\n+#define TARGET_BUILTIN_DECL arm_builtin_decl\n \n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS arm_init_libfuncs\n@@ -17763,892 +17766,582 @@ arm_debugger_arg_offset (int value, rtx addr)\n   return value;\n }\n \f\n-#define def_mbuiltin(MASK, NAME, TYPE, CODE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if ((MASK) & insn_flags)\t\t\t\t\t\t\\\n-        add_builtin_function ((NAME), (TYPE), (CODE),\t\t\t\\\n-\t\t\t     BUILT_IN_MD, NULL, NULL_TREE);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+typedef enum {\n+  T_V8QI,\n+  T_V4HI,\n+  T_V2SI,\n+  T_V2SF,\n+  T_DI,\n+  T_V16QI,\n+  T_V8HI,\n+  T_V4SI,\n+  T_V4SF,\n+  T_V2DI,\n+  T_TI,\n+  T_EI,\n+  T_OI,\n+  T_MAX\t\t/* Size of enum.  Keep last.  */\n+} neon_builtin_type_mode;\n+\n+#define TYPE_MODE_BIT(X) (1 << (X))\n+\n+#define TB_DREG (TYPE_MODE_BIT (T_V8QI) | TYPE_MODE_BIT (T_V4HI)\t\\\n+\t\t | TYPE_MODE_BIT (T_V2SI) | TYPE_MODE_BIT (T_V2SF)\t\\\n+\t\t | TYPE_MODE_BIT (T_DI))\n+#define TB_QREG (TYPE_MODE_BIT (T_V16QI) | TYPE_MODE_BIT (T_V8HI)\t\\\n+\t\t | TYPE_MODE_BIT (T_V4SI) | TYPE_MODE_BIT (T_V4SF)\t\\\n+\t\t | TYPE_MODE_BIT (T_V2DI) | TYPE_MODE_BIT (T_TI))\n \n-struct builtin_description\n-{\n-  const unsigned int       mask;\n-  const enum insn_code     icode;\n-  const char * const       name;\n-  const enum arm_builtins  code;\n-  const enum rtx_code      comparison;\n-  const unsigned int       flag;\n-};\n+#define v8qi_UP  T_V8QI\n+#define v4hi_UP  T_V4HI\n+#define v2si_UP  T_V2SI\n+#define v2sf_UP  T_V2SF\n+#define di_UP    T_DI\n+#define v16qi_UP T_V16QI\n+#define v8hi_UP  T_V8HI\n+#define v4si_UP  T_V4SI\n+#define v4sf_UP  T_V4SF\n+#define v2di_UP  T_V2DI\n+#define ti_UP\t T_TI\n+#define ei_UP\t T_EI\n+#define oi_UP\t T_OI\n \n-static const struct builtin_description bdesc_2arg[] =\n-{\n-#define IWMMXT_BUILTIN(code, string, builtin) \\\n-  { FL_IWMMXT, CODE_FOR_##code, \"__builtin_arm_\" string, \\\n-    ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n+#define UP(X) X##_UP\n \n-  IWMMXT_BUILTIN (addv8qi3, \"waddb\", WADDB)\n-  IWMMXT_BUILTIN (addv4hi3, \"waddh\", WADDH)\n-  IWMMXT_BUILTIN (addv2si3, \"waddw\", WADDW)\n-  IWMMXT_BUILTIN (subv8qi3, \"wsubb\", WSUBB)\n-  IWMMXT_BUILTIN (subv4hi3, \"wsubh\", WSUBH)\n-  IWMMXT_BUILTIN (subv2si3, \"wsubw\", WSUBW)\n-  IWMMXT_BUILTIN (ssaddv8qi3, \"waddbss\", WADDSSB)\n-  IWMMXT_BUILTIN (ssaddv4hi3, \"waddhss\", WADDSSH)\n-  IWMMXT_BUILTIN (ssaddv2si3, \"waddwss\", WADDSSW)\n-  IWMMXT_BUILTIN (sssubv8qi3, \"wsubbss\", WSUBSSB)\n-  IWMMXT_BUILTIN (sssubv4hi3, \"wsubhss\", WSUBSSH)\n-  IWMMXT_BUILTIN (sssubv2si3, \"wsubwss\", WSUBSSW)\n-  IWMMXT_BUILTIN (usaddv8qi3, \"waddbus\", WADDUSB)\n-  IWMMXT_BUILTIN (usaddv4hi3, \"waddhus\", WADDUSH)\n-  IWMMXT_BUILTIN (usaddv2si3, \"waddwus\", WADDUSW)\n-  IWMMXT_BUILTIN (ussubv8qi3, \"wsubbus\", WSUBUSB)\n-  IWMMXT_BUILTIN (ussubv4hi3, \"wsubhus\", WSUBUSH)\n-  IWMMXT_BUILTIN (ussubv2si3, \"wsubwus\", WSUBUSW)\n-  IWMMXT_BUILTIN (mulv4hi3, \"wmulul\", WMULUL)\n-  IWMMXT_BUILTIN (smulv4hi3_highpart, \"wmulsm\", WMULSM)\n-  IWMMXT_BUILTIN (umulv4hi3_highpart, \"wmulum\", WMULUM)\n-  IWMMXT_BUILTIN (eqv8qi3, \"wcmpeqb\", WCMPEQB)\n-  IWMMXT_BUILTIN (eqv4hi3, \"wcmpeqh\", WCMPEQH)\n-  IWMMXT_BUILTIN (eqv2si3, \"wcmpeqw\", WCMPEQW)\n-  IWMMXT_BUILTIN (gtuv8qi3, \"wcmpgtub\", WCMPGTUB)\n-  IWMMXT_BUILTIN (gtuv4hi3, \"wcmpgtuh\", WCMPGTUH)\n-  IWMMXT_BUILTIN (gtuv2si3, \"wcmpgtuw\", WCMPGTUW)\n-  IWMMXT_BUILTIN (gtv8qi3, \"wcmpgtsb\", WCMPGTSB)\n-  IWMMXT_BUILTIN (gtv4hi3, \"wcmpgtsh\", WCMPGTSH)\n-  IWMMXT_BUILTIN (gtv2si3, \"wcmpgtsw\", WCMPGTSW)\n-  IWMMXT_BUILTIN (umaxv8qi3, \"wmaxub\", WMAXUB)\n-  IWMMXT_BUILTIN (smaxv8qi3, \"wmaxsb\", WMAXSB)\n-  IWMMXT_BUILTIN (umaxv4hi3, \"wmaxuh\", WMAXUH)\n-  IWMMXT_BUILTIN (smaxv4hi3, \"wmaxsh\", WMAXSH)\n-  IWMMXT_BUILTIN (umaxv2si3, \"wmaxuw\", WMAXUW)\n-  IWMMXT_BUILTIN (smaxv2si3, \"wmaxsw\", WMAXSW)\n-  IWMMXT_BUILTIN (uminv8qi3, \"wminub\", WMINUB)\n-  IWMMXT_BUILTIN (sminv8qi3, \"wminsb\", WMINSB)\n-  IWMMXT_BUILTIN (uminv4hi3, \"wminuh\", WMINUH)\n-  IWMMXT_BUILTIN (sminv4hi3, \"wminsh\", WMINSH)\n-  IWMMXT_BUILTIN (uminv2si3, \"wminuw\", WMINUW)\n-  IWMMXT_BUILTIN (sminv2si3, \"wminsw\", WMINSW)\n-  IWMMXT_BUILTIN (iwmmxt_anddi3, \"wand\", WAND)\n-  IWMMXT_BUILTIN (iwmmxt_nanddi3, \"wandn\", WANDN)\n-  IWMMXT_BUILTIN (iwmmxt_iordi3, \"wor\", WOR)\n-  IWMMXT_BUILTIN (iwmmxt_xordi3, \"wxor\", WXOR)\n-  IWMMXT_BUILTIN (iwmmxt_uavgv8qi3, \"wavg2b\", WAVG2B)\n-  IWMMXT_BUILTIN (iwmmxt_uavgv4hi3, \"wavg2h\", WAVG2H)\n-  IWMMXT_BUILTIN (iwmmxt_uavgrndv8qi3, \"wavg2br\", WAVG2BR)\n-  IWMMXT_BUILTIN (iwmmxt_uavgrndv4hi3, \"wavg2hr\", WAVG2HR)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckilb, \"wunpckilb\", WUNPCKILB)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckilh, \"wunpckilh\", WUNPCKILH)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckilw, \"wunpckilw\", WUNPCKILW)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckihb, \"wunpckihb\", WUNPCKIHB)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckihh, \"wunpckihh\", WUNPCKIHH)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckihw, \"wunpckihw\", WUNPCKIHW)\n-  IWMMXT_BUILTIN (iwmmxt_wmadds, \"wmadds\", WMADDS)\n-  IWMMXT_BUILTIN (iwmmxt_wmaddu, \"wmaddu\", WMADDU)\n+typedef enum {\n+  NEON_BINOP,\n+  NEON_TERNOP,\n+  NEON_UNOP,\n+  NEON_GETLANE,\n+  NEON_SETLANE,\n+  NEON_CREATE,\n+  NEON_DUP,\n+  NEON_DUPLANE,\n+  NEON_COMBINE,\n+  NEON_SPLIT,\n+  NEON_LANEMUL,\n+  NEON_LANEMULL,\n+  NEON_LANEMULH,\n+  NEON_LANEMAC,\n+  NEON_SCALARMUL,\n+  NEON_SCALARMULL,\n+  NEON_SCALARMULH,\n+  NEON_SCALARMAC,\n+  NEON_CONVERT,\n+  NEON_FIXCONV,\n+  NEON_SELECT,\n+  NEON_RESULTPAIR,\n+  NEON_REINTERP,\n+  NEON_VTBL,\n+  NEON_VTBX,\n+  NEON_LOAD1,\n+  NEON_LOAD1LANE,\n+  NEON_STORE1,\n+  NEON_STORE1LANE,\n+  NEON_LOADSTRUCT,\n+  NEON_LOADSTRUCTLANE,\n+  NEON_STORESTRUCT,\n+  NEON_STORESTRUCTLANE,\n+  NEON_LOGICBINOP,\n+  NEON_SHIFTINSERT,\n+  NEON_SHIFTIMM,\n+  NEON_SHIFTACC\n+} neon_itype;\n \n-#define IWMMXT_BUILTIN2(code, builtin) \\\n-  { FL_IWMMXT, CODE_FOR_##code, NULL, ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n+typedef struct {\n+  const char *name;\n+  const neon_itype itype;\n+  const neon_builtin_type_mode mode;\n+  const enum insn_code code;\n+  unsigned int fcode;\n+} neon_builtin_datum;\n \n-  IWMMXT_BUILTIN2 (iwmmxt_wpackhss, WPACKHSS)\n-  IWMMXT_BUILTIN2 (iwmmxt_wpackwss, WPACKWSS)\n-  IWMMXT_BUILTIN2 (iwmmxt_wpackdss, WPACKDSS)\n-  IWMMXT_BUILTIN2 (iwmmxt_wpackhus, WPACKHUS)\n-  IWMMXT_BUILTIN2 (iwmmxt_wpackwus, WPACKWUS)\n-  IWMMXT_BUILTIN2 (iwmmxt_wpackdus, WPACKDUS)\n-  IWMMXT_BUILTIN2 (ashlv4hi3_di,    WSLLH)\n-  IWMMXT_BUILTIN2 (ashlv4hi3_iwmmxt, WSLLHI)\n-  IWMMXT_BUILTIN2 (ashlv2si3_di,    WSLLW)\n-  IWMMXT_BUILTIN2 (ashlv2si3_iwmmxt, WSLLWI)\n-  IWMMXT_BUILTIN2 (ashldi3_di,      WSLLD)\n-  IWMMXT_BUILTIN2 (ashldi3_iwmmxt,  WSLLDI)\n-  IWMMXT_BUILTIN2 (lshrv4hi3_di,    WSRLH)\n-  IWMMXT_BUILTIN2 (lshrv4hi3_iwmmxt, WSRLHI)\n-  IWMMXT_BUILTIN2 (lshrv2si3_di,    WSRLW)\n-  IWMMXT_BUILTIN2 (lshrv2si3_iwmmxt, WSRLWI)\n-  IWMMXT_BUILTIN2 (lshrdi3_di,      WSRLD)\n-  IWMMXT_BUILTIN2 (lshrdi3_iwmmxt,  WSRLDI)\n-  IWMMXT_BUILTIN2 (ashrv4hi3_di,    WSRAH)\n-  IWMMXT_BUILTIN2 (ashrv4hi3_iwmmxt, WSRAHI)\n-  IWMMXT_BUILTIN2 (ashrv2si3_di,    WSRAW)\n-  IWMMXT_BUILTIN2 (ashrv2si3_iwmmxt, WSRAWI)\n-  IWMMXT_BUILTIN2 (ashrdi3_di,      WSRAD)\n-  IWMMXT_BUILTIN2 (ashrdi3_iwmmxt,  WSRADI)\n-  IWMMXT_BUILTIN2 (rorv4hi3_di,     WRORH)\n-  IWMMXT_BUILTIN2 (rorv4hi3,        WRORHI)\n-  IWMMXT_BUILTIN2 (rorv2si3_di,     WRORW)\n-  IWMMXT_BUILTIN2 (rorv2si3,        WRORWI)\n-  IWMMXT_BUILTIN2 (rordi3_di,       WRORD)\n-  IWMMXT_BUILTIN2 (rordi3,          WRORDI)\n-  IWMMXT_BUILTIN2 (iwmmxt_wmacuz,   WMACUZ)\n-  IWMMXT_BUILTIN2 (iwmmxt_wmacsz,   WMACSZ)\n-};\n+#define CF(N,X) CODE_FOR_neon_##N##X\n \n-static const struct builtin_description bdesc_1arg[] =\n+#define VAR1(T, N, A) \\\n+  {#N, NEON_##T, UP (A), CF (N, A), 0}\n+#define VAR2(T, N, A, B) \\\n+  VAR1 (T, N, A), \\\n+  {#N, NEON_##T, UP (B), CF (N, B), 0}\n+#define VAR3(T, N, A, B, C) \\\n+  VAR2 (T, N, A, B), \\\n+  {#N, NEON_##T, UP (C), CF (N, C), 0}\n+#define VAR4(T, N, A, B, C, D) \\\n+  VAR3 (T, N, A, B, C), \\\n+  {#N, NEON_##T, UP (D), CF (N, D), 0}\n+#define VAR5(T, N, A, B, C, D, E) \\\n+  VAR4 (T, N, A, B, C, D), \\\n+  {#N, NEON_##T, UP (E), CF (N, E), 0}\n+#define VAR6(T, N, A, B, C, D, E, F) \\\n+  VAR5 (T, N, A, B, C, D, E), \\\n+  {#N, NEON_##T, UP (F), CF (N, F), 0}\n+#define VAR7(T, N, A, B, C, D, E, F, G) \\\n+  VAR6 (T, N, A, B, C, D, E, F), \\\n+  {#N, NEON_##T, UP (G), CF (N, G), 0}\n+#define VAR8(T, N, A, B, C, D, E, F, G, H) \\\n+  VAR7 (T, N, A, B, C, D, E, F, G), \\\n+  {#N, NEON_##T, UP (H), CF (N, H), 0}\n+#define VAR9(T, N, A, B, C, D, E, F, G, H, I) \\\n+  VAR8 (T, N, A, B, C, D, E, F, G, H), \\\n+  {#N, NEON_##T, UP (I), CF (N, I), 0}\n+#define VAR10(T, N, A, B, C, D, E, F, G, H, I, J) \\\n+  VAR9 (T, N, A, B, C, D, E, F, G, H, I), \\\n+  {#N, NEON_##T, UP (J), CF (N, J), 0}\n+\n+/* The mode entries in the following table correspond to the \"key\" type of the\n+   instruction variant, i.e. equivalent to that which would be specified after\n+   the assembler mnemonic, which usually refers to the last vector operand.\n+   (Signed/unsigned/polynomial types are not differentiated between though, and\n+   are all mapped onto the same mode for a given element size.) The modes\n+   listed per instruction should be the same as those defined for that\n+   instruction's pattern in neon.md.  */\n+\n+static neon_builtin_datum neon_builtin_data[] =\n {\n-  IWMMXT_BUILTIN (iwmmxt_tmovmskb, \"tmovmskb\", TMOVMSKB)\n-  IWMMXT_BUILTIN (iwmmxt_tmovmskh, \"tmovmskh\", TMOVMSKH)\n-  IWMMXT_BUILTIN (iwmmxt_tmovmskw, \"tmovmskw\", TMOVMSKW)\n-  IWMMXT_BUILTIN (iwmmxt_waccb, \"waccb\", WACCB)\n-  IWMMXT_BUILTIN (iwmmxt_wacch, \"wacch\", WACCH)\n-  IWMMXT_BUILTIN (iwmmxt_waccw, \"waccw\", WACCW)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckehub, \"wunpckehub\", WUNPCKEHUB)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckehuh, \"wunpckehuh\", WUNPCKEHUH)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckehuw, \"wunpckehuw\", WUNPCKEHUW)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckehsb, \"wunpckehsb\", WUNPCKEHSB)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckehsh, \"wunpckehsh\", WUNPCKEHSH)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckehsw, \"wunpckehsw\", WUNPCKEHSW)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckelub, \"wunpckelub\", WUNPCKELUB)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckeluh, \"wunpckeluh\", WUNPCKELUH)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckeluw, \"wunpckeluw\", WUNPCKELUW)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckelsb, \"wunpckelsb\", WUNPCKELSB)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckelsh, \"wunpckelsh\", WUNPCKELSH)\n-  IWMMXT_BUILTIN (iwmmxt_wunpckelsw, \"wunpckelsw\", WUNPCKELSW)\n+  VAR10 (BINOP, vadd,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR3 (BINOP, vaddl, v8qi, v4hi, v2si),\n+  VAR3 (BINOP, vaddw, v8qi, v4hi, v2si),\n+  VAR6 (BINOP, vhadd, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR8 (BINOP, vqadd, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR3 (BINOP, vaddhn, v8hi, v4si, v2di),\n+  VAR8 (BINOP, vmul, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR8 (TERNOP, vmla, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR3 (TERNOP, vmlal, v8qi, v4hi, v2si),\n+  VAR8 (TERNOP, vmls, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR3 (TERNOP, vmlsl, v8qi, v4hi, v2si),\n+  VAR4 (BINOP, vqdmulh, v4hi, v2si, v8hi, v4si),\n+  VAR2 (TERNOP, vqdmlal, v4hi, v2si),\n+  VAR2 (TERNOP, vqdmlsl, v4hi, v2si),\n+  VAR3 (BINOP, vmull, v8qi, v4hi, v2si),\n+  VAR2 (SCALARMULL, vmull_n, v4hi, v2si),\n+  VAR2 (LANEMULL, vmull_lane, v4hi, v2si),\n+  VAR2 (SCALARMULL, vqdmull_n, v4hi, v2si),\n+  VAR2 (LANEMULL, vqdmull_lane, v4hi, v2si),\n+  VAR4 (SCALARMULH, vqdmulh_n, v4hi, v2si, v8hi, v4si),\n+  VAR4 (LANEMULH, vqdmulh_lane, v4hi, v2si, v8hi, v4si),\n+  VAR2 (BINOP, vqdmull, v4hi, v2si),\n+  VAR8 (BINOP, vshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR8 (BINOP, vqshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR8 (SHIFTIMM, vshr_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR3 (SHIFTIMM, vshrn_n, v8hi, v4si, v2di),\n+  VAR3 (SHIFTIMM, vqshrn_n, v8hi, v4si, v2di),\n+  VAR3 (SHIFTIMM, vqshrun_n, v8hi, v4si, v2di),\n+  VAR8 (SHIFTIMM, vshl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR8 (SHIFTIMM, vqshl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR8 (SHIFTIMM, vqshlu_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR3 (SHIFTIMM, vshll_n, v8qi, v4hi, v2si),\n+  VAR8 (SHIFTACC, vsra_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR10 (BINOP, vsub,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR3 (BINOP, vsubl, v8qi, v4hi, v2si),\n+  VAR3 (BINOP, vsubw, v8qi, v4hi, v2si),\n+  VAR8 (BINOP, vqsub, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR6 (BINOP, vhsub, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR3 (BINOP, vsubhn, v8hi, v4si, v2di),\n+  VAR8 (BINOP, vceq, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR8 (BINOP, vcge, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR8 (BINOP, vcgt, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR2 (BINOP, vcage, v2sf, v4sf),\n+  VAR2 (BINOP, vcagt, v2sf, v4sf),\n+  VAR6 (BINOP, vtst, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR8 (BINOP, vabd, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR3 (BINOP, vabdl, v8qi, v4hi, v2si),\n+  VAR6 (TERNOP, vaba, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR3 (TERNOP, vabal, v8qi, v4hi, v2si),\n+  VAR8 (BINOP, vmax, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR8 (BINOP, vmin, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR4 (BINOP, vpadd, v8qi, v4hi, v2si, v2sf),\n+  VAR6 (UNOP, vpaddl, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR6 (BINOP, vpadal, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR4 (BINOP, vpmax, v8qi, v4hi, v2si, v2sf),\n+  VAR4 (BINOP, vpmin, v8qi, v4hi, v2si, v2sf),\n+  VAR2 (BINOP, vrecps, v2sf, v4sf),\n+  VAR2 (BINOP, vrsqrts, v2sf, v4sf),\n+  VAR8 (SHIFTINSERT, vsri_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR8 (SHIFTINSERT, vsli_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di),\n+  VAR8 (UNOP, vabs, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR6 (UNOP, vqabs, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR8 (UNOP, vneg, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR6 (UNOP, vqneg, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR6 (UNOP, vcls, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR6 (UNOP, vclz, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  VAR2 (UNOP, vcnt, v8qi, v16qi),\n+  VAR4 (UNOP, vrecpe, v2si, v2sf, v4si, v4sf),\n+  VAR4 (UNOP, vrsqrte, v2si, v2sf, v4si, v4sf),\n+  VAR6 (UNOP, vmvn, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+  /* FIXME: vget_lane supports more variants than this!  */\n+  VAR10 (GETLANE, vget_lane,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (SETLANE, vset_lane,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR5 (CREATE, vcreate, v8qi, v4hi, v2si, v2sf, di),\n+  VAR10 (DUP, vdup_n,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (DUPLANE, vdup_lane,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR5 (COMBINE, vcombine, v8qi, v4hi, v2si, v2sf, di),\n+  VAR5 (SPLIT, vget_high, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR5 (SPLIT, vget_low, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR3 (UNOP, vmovn, v8hi, v4si, v2di),\n+  VAR3 (UNOP, vqmovn, v8hi, v4si, v2di),\n+  VAR3 (UNOP, vqmovun, v8hi, v4si, v2di),\n+  VAR3 (UNOP, vmovl, v8qi, v4hi, v2si),\n+  VAR6 (LANEMUL, vmul_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR6 (LANEMAC, vmla_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR2 (LANEMAC, vmlal_lane, v4hi, v2si),\n+  VAR2 (LANEMAC, vqdmlal_lane, v4hi, v2si),\n+  VAR6 (LANEMAC, vmls_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR2 (LANEMAC, vmlsl_lane, v4hi, v2si),\n+  VAR2 (LANEMAC, vqdmlsl_lane, v4hi, v2si),\n+  VAR6 (SCALARMUL, vmul_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR6 (SCALARMAC, vmla_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR2 (SCALARMAC, vmlal_n, v4hi, v2si),\n+  VAR2 (SCALARMAC, vqdmlal_n, v4hi, v2si),\n+  VAR6 (SCALARMAC, vmls_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR2 (SCALARMAC, vmlsl_n, v4hi, v2si),\n+  VAR2 (SCALARMAC, vqdmlsl_n, v4hi, v2si),\n+  VAR10 (BINOP, vext,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR8 (UNOP, vrev64, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR4 (UNOP, vrev32, v8qi, v4hi, v16qi, v8hi),\n+  VAR2 (UNOP, vrev16, v8qi, v16qi),\n+  VAR4 (CONVERT, vcvt, v2si, v2sf, v4si, v4sf),\n+  VAR4 (FIXCONV, vcvt_n, v2si, v2sf, v4si, v4sf),\n+  VAR10 (SELECT, vbsl,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR1 (VTBL, vtbl1, v8qi),\n+  VAR1 (VTBL, vtbl2, v8qi),\n+  VAR1 (VTBL, vtbl3, v8qi),\n+  VAR1 (VTBL, vtbl4, v8qi),\n+  VAR1 (VTBX, vtbx1, v8qi),\n+  VAR1 (VTBX, vtbx2, v8qi),\n+  VAR1 (VTBX, vtbx3, v8qi),\n+  VAR1 (VTBX, vtbx4, v8qi),\n+  VAR8 (RESULTPAIR, vtrn, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR8 (RESULTPAIR, vzip, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR8 (RESULTPAIR, vuzp, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n+  VAR5 (REINTERP, vreinterpretv8qi, v8qi, v4hi, v2si, v2sf, di),\n+  VAR5 (REINTERP, vreinterpretv4hi, v8qi, v4hi, v2si, v2sf, di),\n+  VAR5 (REINTERP, vreinterpretv2si, v8qi, v4hi, v2si, v2sf, di),\n+  VAR5 (REINTERP, vreinterpretv2sf, v8qi, v4hi, v2si, v2sf, di),\n+  VAR5 (REINTERP, vreinterpretdi, v8qi, v4hi, v2si, v2sf, di),\n+  VAR5 (REINTERP, vreinterpretv16qi, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR5 (REINTERP, vreinterpretv8hi, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR5 (REINTERP, vreinterpretv4si, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR5 (REINTERP, vreinterpretv4sf, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR5 (REINTERP, vreinterpretv2di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (LOAD1, vld1,\n+         v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (LOAD1LANE, vld1_lane,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (LOAD1, vld1_dup,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (STORE1, vst1,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (STORE1LANE, vst1_lane,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR9 (LOADSTRUCT,\n+\tvld2, v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf),\n+  VAR7 (LOADSTRUCTLANE, vld2_lane,\n+\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR5 (LOADSTRUCT, vld2_dup, v8qi, v4hi, v2si, v2sf, di),\n+  VAR9 (STORESTRUCT, vst2,\n+\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf),\n+  VAR7 (STORESTRUCTLANE, vst2_lane,\n+\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR9 (LOADSTRUCT,\n+\tvld3, v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf),\n+  VAR7 (LOADSTRUCTLANE, vld3_lane,\n+\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR5 (LOADSTRUCT, vld3_dup, v8qi, v4hi, v2si, v2sf, di),\n+  VAR9 (STORESTRUCT, vst3,\n+\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf),\n+  VAR7 (STORESTRUCTLANE, vst3_lane,\n+\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR9 (LOADSTRUCT, vld4,\n+\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf),\n+  VAR7 (LOADSTRUCTLANE, vld4_lane,\n+\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR5 (LOADSTRUCT, vld4_dup, v8qi, v4hi, v2si, v2sf, di),\n+  VAR9 (STORESTRUCT, vst4,\n+\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf),\n+  VAR7 (STORESTRUCTLANE, vst4_lane,\n+\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf),\n+  VAR10 (LOGICBINOP, vand,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (LOGICBINOP, vorr,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (BINOP, veor,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (LOGICBINOP, vbic,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR10 (LOGICBINOP, vorn,\n+\t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n+};\n+\n+#undef CF\n+#undef VAR1\n+#undef VAR2\n+#undef VAR3\n+#undef VAR4\n+#undef VAR5\n+#undef VAR6\n+#undef VAR7\n+#undef VAR8\n+#undef VAR9\n+#undef VAR10\n+\n+/* Neon defines builtins from ARM_BUILTIN_MAX upwards, though they don't have\n+   symbolic names defined here (which would require too much duplication).\n+   FIXME?  */\n+enum arm_builtins\n+{\n+  ARM_BUILTIN_GETWCX,\n+  ARM_BUILTIN_SETWCX,\n+\n+  ARM_BUILTIN_WZERO,\n+\n+  ARM_BUILTIN_WAVG2BR,\n+  ARM_BUILTIN_WAVG2HR,\n+  ARM_BUILTIN_WAVG2B,\n+  ARM_BUILTIN_WAVG2H,\n+\n+  ARM_BUILTIN_WACCB,\n+  ARM_BUILTIN_WACCH,\n+  ARM_BUILTIN_WACCW,\n+\n+  ARM_BUILTIN_WMACS,\n+  ARM_BUILTIN_WMACSZ,\n+  ARM_BUILTIN_WMACU,\n+  ARM_BUILTIN_WMACUZ,\n+\n+  ARM_BUILTIN_WSADB,\n+  ARM_BUILTIN_WSADBZ,\n+  ARM_BUILTIN_WSADH,\n+  ARM_BUILTIN_WSADHZ,\n+\n+  ARM_BUILTIN_WALIGN,\n+\n+  ARM_BUILTIN_TMIA,\n+  ARM_BUILTIN_TMIAPH,\n+  ARM_BUILTIN_TMIABB,\n+  ARM_BUILTIN_TMIABT,\n+  ARM_BUILTIN_TMIATB,\n+  ARM_BUILTIN_TMIATT,\n+\n+  ARM_BUILTIN_TMOVMSKB,\n+  ARM_BUILTIN_TMOVMSKH,\n+  ARM_BUILTIN_TMOVMSKW,\n+\n+  ARM_BUILTIN_TBCSTB,\n+  ARM_BUILTIN_TBCSTH,\n+  ARM_BUILTIN_TBCSTW,\n+\n+  ARM_BUILTIN_WMADDS,\n+  ARM_BUILTIN_WMADDU,\n+\n+  ARM_BUILTIN_WPACKHSS,\n+  ARM_BUILTIN_WPACKWSS,\n+  ARM_BUILTIN_WPACKDSS,\n+  ARM_BUILTIN_WPACKHUS,\n+  ARM_BUILTIN_WPACKWUS,\n+  ARM_BUILTIN_WPACKDUS,\n+\n+  ARM_BUILTIN_WADDB,\n+  ARM_BUILTIN_WADDH,\n+  ARM_BUILTIN_WADDW,\n+  ARM_BUILTIN_WADDSSB,\n+  ARM_BUILTIN_WADDSSH,\n+  ARM_BUILTIN_WADDSSW,\n+  ARM_BUILTIN_WADDUSB,\n+  ARM_BUILTIN_WADDUSH,\n+  ARM_BUILTIN_WADDUSW,\n+  ARM_BUILTIN_WSUBB,\n+  ARM_BUILTIN_WSUBH,\n+  ARM_BUILTIN_WSUBW,\n+  ARM_BUILTIN_WSUBSSB,\n+  ARM_BUILTIN_WSUBSSH,\n+  ARM_BUILTIN_WSUBSSW,\n+  ARM_BUILTIN_WSUBUSB,\n+  ARM_BUILTIN_WSUBUSH,\n+  ARM_BUILTIN_WSUBUSW,\n+\n+  ARM_BUILTIN_WAND,\n+  ARM_BUILTIN_WANDN,\n+  ARM_BUILTIN_WOR,\n+  ARM_BUILTIN_WXOR,\n+\n+  ARM_BUILTIN_WCMPEQB,\n+  ARM_BUILTIN_WCMPEQH,\n+  ARM_BUILTIN_WCMPEQW,\n+  ARM_BUILTIN_WCMPGTUB,\n+  ARM_BUILTIN_WCMPGTUH,\n+  ARM_BUILTIN_WCMPGTUW,\n+  ARM_BUILTIN_WCMPGTSB,\n+  ARM_BUILTIN_WCMPGTSH,\n+  ARM_BUILTIN_WCMPGTSW,\n+\n+  ARM_BUILTIN_TEXTRMSB,\n+  ARM_BUILTIN_TEXTRMSH,\n+  ARM_BUILTIN_TEXTRMSW,\n+  ARM_BUILTIN_TEXTRMUB,\n+  ARM_BUILTIN_TEXTRMUH,\n+  ARM_BUILTIN_TEXTRMUW,\n+  ARM_BUILTIN_TINSRB,\n+  ARM_BUILTIN_TINSRH,\n+  ARM_BUILTIN_TINSRW,\n+\n+  ARM_BUILTIN_WMAXSW,\n+  ARM_BUILTIN_WMAXSH,\n+  ARM_BUILTIN_WMAXSB,\n+  ARM_BUILTIN_WMAXUW,\n+  ARM_BUILTIN_WMAXUH,\n+  ARM_BUILTIN_WMAXUB,\n+  ARM_BUILTIN_WMINSW,\n+  ARM_BUILTIN_WMINSH,\n+  ARM_BUILTIN_WMINSB,\n+  ARM_BUILTIN_WMINUW,\n+  ARM_BUILTIN_WMINUH,\n+  ARM_BUILTIN_WMINUB,\n+\n+  ARM_BUILTIN_WMULUM,\n+  ARM_BUILTIN_WMULSM,\n+  ARM_BUILTIN_WMULUL,\n+\n+  ARM_BUILTIN_PSADBH,\n+  ARM_BUILTIN_WSHUFH,\n+\n+  ARM_BUILTIN_WSLLH,\n+  ARM_BUILTIN_WSLLW,\n+  ARM_BUILTIN_WSLLD,\n+  ARM_BUILTIN_WSRAH,\n+  ARM_BUILTIN_WSRAW,\n+  ARM_BUILTIN_WSRAD,\n+  ARM_BUILTIN_WSRLH,\n+  ARM_BUILTIN_WSRLW,\n+  ARM_BUILTIN_WSRLD,\n+  ARM_BUILTIN_WRORH,\n+  ARM_BUILTIN_WRORW,\n+  ARM_BUILTIN_WRORD,\n+  ARM_BUILTIN_WSLLHI,\n+  ARM_BUILTIN_WSLLWI,\n+  ARM_BUILTIN_WSLLDI,\n+  ARM_BUILTIN_WSRAHI,\n+  ARM_BUILTIN_WSRAWI,\n+  ARM_BUILTIN_WSRADI,\n+  ARM_BUILTIN_WSRLHI,\n+  ARM_BUILTIN_WSRLWI,\n+  ARM_BUILTIN_WSRLDI,\n+  ARM_BUILTIN_WRORHI,\n+  ARM_BUILTIN_WRORWI,\n+  ARM_BUILTIN_WRORDI,\n+\n+  ARM_BUILTIN_WUNPCKIHB,\n+  ARM_BUILTIN_WUNPCKIHH,\n+  ARM_BUILTIN_WUNPCKIHW,\n+  ARM_BUILTIN_WUNPCKILB,\n+  ARM_BUILTIN_WUNPCKILH,\n+  ARM_BUILTIN_WUNPCKILW,\n+\n+  ARM_BUILTIN_WUNPCKEHSB,\n+  ARM_BUILTIN_WUNPCKEHSH,\n+  ARM_BUILTIN_WUNPCKEHSW,\n+  ARM_BUILTIN_WUNPCKEHUB,\n+  ARM_BUILTIN_WUNPCKEHUH,\n+  ARM_BUILTIN_WUNPCKEHUW,\n+  ARM_BUILTIN_WUNPCKELSB,\n+  ARM_BUILTIN_WUNPCKELSH,\n+  ARM_BUILTIN_WUNPCKELSW,\n+  ARM_BUILTIN_WUNPCKELUB,\n+  ARM_BUILTIN_WUNPCKELUH,\n+  ARM_BUILTIN_WUNPCKELUW,\n+\n+  ARM_BUILTIN_THREAD_POINTER,\n+\n+  ARM_BUILTIN_NEON_BASE,\n+\n+  ARM_BUILTIN_MAX = ARM_BUILTIN_NEON_BASE + ARRAY_SIZE (neon_builtin_data)\n };\n \n-/* Set up all the iWMMXt builtins.  This is\n-   not called if TARGET_IWMMXT is zero.  */\n+static GTY(()) tree arm_builtin_decls[ARM_BUILTIN_MAX];\n \n static void\n-arm_init_iwmmxt_builtins (void)\n+arm_init_neon_builtins (void)\n {\n-  const struct builtin_description * d;\n-  size_t i;\n-  tree endlink = void_list_node;\n+  unsigned int i, fcode;\n+  tree decl;\n \n-  tree V2SI_type_node = build_vector_type_for_mode (intSI_type_node, V2SImode);\n-  tree V4HI_type_node = build_vector_type_for_mode (intHI_type_node, V4HImode);\n-  tree V8QI_type_node = build_vector_type_for_mode (intQI_type_node, V8QImode);\n+  tree neon_intQI_type_node;\n+  tree neon_intHI_type_node;\n+  tree neon_polyQI_type_node;\n+  tree neon_polyHI_type_node;\n+  tree neon_intSI_type_node;\n+  tree neon_intDI_type_node;\n+  tree neon_float_type_node;\n \n-  tree int_ftype_int\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, integer_type_node, endlink));\n-  tree v8qi_ftype_v8qi_v8qi_int\n-    = build_function_type (V8QI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t\t\t    endlink))));\n-  tree v4hi_ftype_v4hi_int\n-    = build_function_type (V4HI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v2si_ftype_v2si_int\n-    = build_function_type (V2SI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v2si_ftype_di_di\n-    = build_function_type (V2SI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_long_integer_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, long_long_integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree di_ftype_di_int\n-    = build_function_type (long_long_integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_long_integer_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree di_ftype_di_int_int\n-    = build_function_type (long_long_integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_long_integer_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t\t\t    endlink))));\n-  tree int_ftype_v8qi\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t      endlink));\n-  tree int_ftype_v4hi\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      endlink));\n-  tree int_ftype_v2si\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t      endlink));\n-  tree int_ftype_v8qi_int\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree int_ftype_v4hi_int\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree int_ftype_v2si_int\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v8qi_ftype_v8qi_int_int\n-    = build_function_type (V8QI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t\t\t    endlink))));\n-  tree v4hi_ftype_v4hi_int_int\n-    = build_function_type (V4HI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t\t\t    endlink))));\n-  tree v2si_ftype_v2si_int_int\n-    = build_function_type (V2SI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t\t\t    endlink))));\n-  /* Miscellaneous.  */\n-  tree v8qi_ftype_v4hi_v4hi\n-    = build_function_type (V8QI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v4hi_ftype_v2si_v2si\n-    = build_function_type (V4HI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v2si_ftype_v4hi_v4hi\n-    = build_function_type (V2SI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v2si_ftype_v8qi_v8qi\n-    = build_function_type (V2SI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v4hi_ftype_v4hi_di\n-    = build_function_type (V4HI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t long_long_integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v2si_ftype_v2si_di\n-    = build_function_type (V2SI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t long_long_integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree void_ftype_int_int\n-    = build_function_type (void_type_node,\n-\t\t\t   tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree di_ftype_void\n-    = build_function_type (long_long_unsigned_type_node, endlink);\n-  tree di_ftype_v8qi\n-    = build_function_type (long_long_integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t      endlink));\n-  tree di_ftype_v4hi\n-    = build_function_type (long_long_integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      endlink));\n-  tree di_ftype_v2si\n-    = build_function_type (long_long_integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t      endlink));\n-  tree v2si_ftype_v4hi\n-    = build_function_type (V2SI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      endlink));\n-  tree v4hi_ftype_v8qi\n-    = build_function_type (V4HI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t      endlink));\n-\n-  tree di_ftype_di_v4hi_v4hi\n-    = build_function_type (long_long_unsigned_type_node,\n-\t\t\t   tree_cons (NULL_TREE,\n-\t\t\t\t      long_long_unsigned_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    V4HI_type_node,\n-\t\t\t\t\t\t\t    endlink))));\n-\n-  tree di_ftype_v4hi_v4hi\n-    = build_function_type (long_long_unsigned_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t\t\t endlink)));\n-\n-  /* Normal vector binops.  */\n-  tree v8qi_ftype_v8qi_v8qi\n-    = build_function_type (V8QI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V8QI_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v4hi_ftype_v4hi_v4hi\n-    = build_function_type (V4HI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree v2si_ftype_v2si_v2si\n-    = build_function_type (V2SI_type_node,\n-\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, V2SI_type_node,\n-\t\t\t\t\t\t endlink)));\n-  tree di_ftype_di_di\n-    = build_function_type (long_long_unsigned_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_long_unsigned_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t long_long_unsigned_type_node,\n-\t\t\t\t\t\t endlink)));\n+  tree intQI_pointer_node;\n+  tree intHI_pointer_node;\n+  tree intSI_pointer_node;\n+  tree intDI_pointer_node;\n+  tree float_pointer_node;\n \n-  /* Add all builtins that are more or less simple operations on two\n-     operands.  */\n-  for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n-    {\n-      /* Use one of the operands; the target can have a different mode for\n-\t mask-generating compares.  */\n-      enum machine_mode mode;\n-      tree type;\n+  tree const_intQI_node;\n+  tree const_intHI_node;\n+  tree const_intSI_node;\n+  tree const_intDI_node;\n+  tree const_float_node;\n \n-      if (d->name == 0)\n-\tcontinue;\n+  tree const_intQI_pointer_node;\n+  tree const_intHI_pointer_node;\n+  tree const_intSI_pointer_node;\n+  tree const_intDI_pointer_node;\n+  tree const_float_pointer_node;\n \n-      mode = insn_data[d->icode].operand[1].mode;\n+  tree V8QI_type_node;\n+  tree V4HI_type_node;\n+  tree V2SI_type_node;\n+  tree V2SF_type_node;\n+  tree V16QI_type_node;\n+  tree V8HI_type_node;\n+  tree V4SI_type_node;\n+  tree V4SF_type_node;\n+  tree V2DI_type_node;\n \n-      switch (mode)\n-\t{\n-\tcase V8QImode:\n-\t  type = v8qi_ftype_v8qi_v8qi;\n-\t  break;\n-\tcase V4HImode:\n-\t  type = v4hi_ftype_v4hi_v4hi;\n-\t  break;\n-\tcase V2SImode:\n-\t  type = v2si_ftype_v2si_v2si;\n-\t  break;\n-\tcase DImode:\n-\t  type = di_ftype_di_di;\n-\t  break;\n+  tree intUQI_type_node;\n+  tree intUHI_type_node;\n+  tree intUSI_type_node;\n+  tree intUDI_type_node;\n \n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n+  tree intEI_type_node;\n+  tree intOI_type_node;\n+  tree intCI_type_node;\n+  tree intXI_type_node;\n \n-      def_mbuiltin (d->mask, d->name, type, d->code);\n-    }\n+  tree V8QI_pointer_node;\n+  tree V4HI_pointer_node;\n+  tree V2SI_pointer_node;\n+  tree V2SF_pointer_node;\n+  tree V16QI_pointer_node;\n+  tree V8HI_pointer_node;\n+  tree V4SI_pointer_node;\n+  tree V4SF_pointer_node;\n+  tree V2DI_pointer_node;\n \n-  /* Add the remaining MMX insns with somewhat more complicated types.  */\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wzero\", di_ftype_void, ARM_BUILTIN_WZERO);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_setwcx\", void_ftype_int_int, ARM_BUILTIN_SETWCX);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_getwcx\", int_ftype_int, ARM_BUILTIN_GETWCX);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsllh\", v4hi_ftype_v4hi_di, ARM_BUILTIN_WSLLH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsllw\", v2si_ftype_v2si_di, ARM_BUILTIN_WSLLW);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wslld\", di_ftype_di_di, ARM_BUILTIN_WSLLD);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsllhi\", v4hi_ftype_v4hi_int, ARM_BUILTIN_WSLLHI);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsllwi\", v2si_ftype_v2si_int, ARM_BUILTIN_WSLLWI);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wslldi\", di_ftype_di_int, ARM_BUILTIN_WSLLDI);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrlh\", v4hi_ftype_v4hi_di, ARM_BUILTIN_WSRLH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrlw\", v2si_ftype_v2si_di, ARM_BUILTIN_WSRLW);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrld\", di_ftype_di_di, ARM_BUILTIN_WSRLD);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrlhi\", v4hi_ftype_v4hi_int, ARM_BUILTIN_WSRLHI);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrlwi\", v2si_ftype_v2si_int, ARM_BUILTIN_WSRLWI);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrldi\", di_ftype_di_int, ARM_BUILTIN_WSRLDI);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrah\", v4hi_ftype_v4hi_di, ARM_BUILTIN_WSRAH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsraw\", v2si_ftype_v2si_di, ARM_BUILTIN_WSRAW);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrad\", di_ftype_di_di, ARM_BUILTIN_WSRAD);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrahi\", v4hi_ftype_v4hi_int, ARM_BUILTIN_WSRAHI);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsrawi\", v2si_ftype_v2si_int, ARM_BUILTIN_WSRAWI);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsradi\", di_ftype_di_int, ARM_BUILTIN_WSRADI);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wrorh\", v4hi_ftype_v4hi_di, ARM_BUILTIN_WRORH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wrorw\", v2si_ftype_v2si_di, ARM_BUILTIN_WRORW);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wrord\", di_ftype_di_di, ARM_BUILTIN_WRORD);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wrorhi\", v4hi_ftype_v4hi_int, ARM_BUILTIN_WRORHI);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wrorwi\", v2si_ftype_v2si_int, ARM_BUILTIN_WRORWI);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wrordi\", di_ftype_di_int, ARM_BUILTIN_WRORDI);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wshufh\", v4hi_ftype_v4hi_int, ARM_BUILTIN_WSHUFH);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsadb\", v2si_ftype_v8qi_v8qi, ARM_BUILTIN_WSADB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsadh\", v2si_ftype_v4hi_v4hi, ARM_BUILTIN_WSADH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsadbz\", v2si_ftype_v8qi_v8qi, ARM_BUILTIN_WSADBZ);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wsadhz\", v2si_ftype_v4hi_v4hi, ARM_BUILTIN_WSADHZ);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_textrmsb\", int_ftype_v8qi_int, ARM_BUILTIN_TEXTRMSB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_textrmsh\", int_ftype_v4hi_int, ARM_BUILTIN_TEXTRMSH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_textrmsw\", int_ftype_v2si_int, ARM_BUILTIN_TEXTRMSW);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_textrmub\", int_ftype_v8qi_int, ARM_BUILTIN_TEXTRMUB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_textrmuh\", int_ftype_v4hi_int, ARM_BUILTIN_TEXTRMUH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_textrmuw\", int_ftype_v2si_int, ARM_BUILTIN_TEXTRMUW);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tinsrb\", v8qi_ftype_v8qi_int_int, ARM_BUILTIN_TINSRB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tinsrh\", v4hi_ftype_v4hi_int_int, ARM_BUILTIN_TINSRH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tinsrw\", v2si_ftype_v2si_int_int, ARM_BUILTIN_TINSRW);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_waccb\", di_ftype_v8qi, ARM_BUILTIN_WACCB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wacch\", di_ftype_v4hi, ARM_BUILTIN_WACCH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_waccw\", di_ftype_v2si, ARM_BUILTIN_WACCW);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tmovmskb\", int_ftype_v8qi, ARM_BUILTIN_TMOVMSKB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tmovmskh\", int_ftype_v4hi, ARM_BUILTIN_TMOVMSKH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tmovmskw\", int_ftype_v2si, ARM_BUILTIN_TMOVMSKW);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wpackhss\", v8qi_ftype_v4hi_v4hi, ARM_BUILTIN_WPACKHSS);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wpackhus\", v8qi_ftype_v4hi_v4hi, ARM_BUILTIN_WPACKHUS);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wpackwus\", v4hi_ftype_v2si_v2si, ARM_BUILTIN_WPACKWUS);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wpackwss\", v4hi_ftype_v2si_v2si, ARM_BUILTIN_WPACKWSS);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wpackdus\", v2si_ftype_di_di, ARM_BUILTIN_WPACKDUS);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wpackdss\", v2si_ftype_di_di, ARM_BUILTIN_WPACKDSS);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckehub\", v4hi_ftype_v8qi, ARM_BUILTIN_WUNPCKEHUB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckehuh\", v2si_ftype_v4hi, ARM_BUILTIN_WUNPCKEHUH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckehuw\", di_ftype_v2si, ARM_BUILTIN_WUNPCKEHUW);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckehsb\", v4hi_ftype_v8qi, ARM_BUILTIN_WUNPCKEHSB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckehsh\", v2si_ftype_v4hi, ARM_BUILTIN_WUNPCKEHSH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckehsw\", di_ftype_v2si, ARM_BUILTIN_WUNPCKEHSW);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckelub\", v4hi_ftype_v8qi, ARM_BUILTIN_WUNPCKELUB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckeluh\", v2si_ftype_v4hi, ARM_BUILTIN_WUNPCKELUH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckeluw\", di_ftype_v2si, ARM_BUILTIN_WUNPCKELUW);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckelsb\", v4hi_ftype_v8qi, ARM_BUILTIN_WUNPCKELSB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckelsh\", v2si_ftype_v4hi, ARM_BUILTIN_WUNPCKELSH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wunpckelsw\", di_ftype_v2si, ARM_BUILTIN_WUNPCKELSW);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wmacs\", di_ftype_di_v4hi_v4hi, ARM_BUILTIN_WMACS);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wmacsz\", di_ftype_v4hi_v4hi, ARM_BUILTIN_WMACSZ);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wmacu\", di_ftype_di_v4hi_v4hi, ARM_BUILTIN_WMACU);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_wmacuz\", di_ftype_v4hi_v4hi, ARM_BUILTIN_WMACUZ);\n-\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_walign\", v8qi_ftype_v8qi_v8qi_int, ARM_BUILTIN_WALIGN);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tmia\", di_ftype_di_int_int, ARM_BUILTIN_TMIA);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tmiaph\", di_ftype_di_int_int, ARM_BUILTIN_TMIAPH);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tmiabb\", di_ftype_di_int_int, ARM_BUILTIN_TMIABB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tmiabt\", di_ftype_di_int_int, ARM_BUILTIN_TMIABT);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tmiatb\", di_ftype_di_int_int, ARM_BUILTIN_TMIATB);\n-  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_tmiatt\", di_ftype_di_int_int, ARM_BUILTIN_TMIATT);\n-}\n+  tree void_ftype_pv8qi_v8qi_v8qi;\n+  tree void_ftype_pv4hi_v4hi_v4hi;\n+  tree void_ftype_pv2si_v2si_v2si;\n+  tree void_ftype_pv2sf_v2sf_v2sf;\n+  tree void_ftype_pdi_di_di;\n+  tree void_ftype_pv16qi_v16qi_v16qi;\n+  tree void_ftype_pv8hi_v8hi_v8hi;\n+  tree void_ftype_pv4si_v4si_v4si;\n+  tree void_ftype_pv4sf_v4sf_v4sf;\n+  tree void_ftype_pv2di_v2di_v2di;\n \n-static void\n-arm_init_tls_builtins (void)\n-{\n-  tree ftype, decl;\n-\n-  ftype = build_function_type (ptr_type_node, void_list_node);\n-  decl = add_builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\t       ARM_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t       NULL, NULL_TREE);\n-  TREE_NOTHROW (decl) = 1;\n-  TREE_READONLY (decl) = 1;\n-}\n-\n-enum neon_builtin_type_bits {\n-  T_V8QI  = 0x0001,\n-  T_V4HI  = 0x0002,\n-  T_V2SI  = 0x0004,\n-  T_V2SF  = 0x0008,\n-  T_DI    = 0x0010,\n-  T_DREG  = 0x001F,\n-  T_V16QI = 0x0020,\n-  T_V8HI  = 0x0040,\n-  T_V4SI  = 0x0080,\n-  T_V4SF  = 0x0100,\n-  T_V2DI  = 0x0200,\n-  T_TI\t  = 0x0400,\n-  T_QREG  = 0x07E0,\n-  T_EI\t  = 0x0800,\n-  T_OI\t  = 0x1000\n-};\n-\n-#define v8qi_UP  T_V8QI\n-#define v4hi_UP  T_V4HI\n-#define v2si_UP  T_V2SI\n-#define v2sf_UP  T_V2SF\n-#define di_UP    T_DI\n-#define v16qi_UP T_V16QI\n-#define v8hi_UP  T_V8HI\n-#define v4si_UP  T_V4SI\n-#define v4sf_UP  T_V4SF\n-#define v2di_UP  T_V2DI\n-#define ti_UP\t T_TI\n-#define ei_UP\t T_EI\n-#define oi_UP\t T_OI\n-\n-#define UP(X) X##_UP\n-\n-#define T_MAX 13\n-\n-typedef enum {\n-  NEON_BINOP,\n-  NEON_TERNOP,\n-  NEON_UNOP,\n-  NEON_GETLANE,\n-  NEON_SETLANE,\n-  NEON_CREATE,\n-  NEON_DUP,\n-  NEON_DUPLANE,\n-  NEON_COMBINE,\n-  NEON_SPLIT,\n-  NEON_LANEMUL,\n-  NEON_LANEMULL,\n-  NEON_LANEMULH,\n-  NEON_LANEMAC,\n-  NEON_SCALARMUL,\n-  NEON_SCALARMULL,\n-  NEON_SCALARMULH,\n-  NEON_SCALARMAC,\n-  NEON_CONVERT,\n-  NEON_FIXCONV,\n-  NEON_SELECT,\n-  NEON_RESULTPAIR,\n-  NEON_REINTERP,\n-  NEON_VTBL,\n-  NEON_VTBX,\n-  NEON_LOAD1,\n-  NEON_LOAD1LANE,\n-  NEON_STORE1,\n-  NEON_STORE1LANE,\n-  NEON_LOADSTRUCT,\n-  NEON_LOADSTRUCTLANE,\n-  NEON_STORESTRUCT,\n-  NEON_STORESTRUCTLANE,\n-  NEON_LOGICBINOP,\n-  NEON_SHIFTINSERT,\n-  NEON_SHIFTIMM,\n-  NEON_SHIFTACC\n-} neon_itype;\n-\n-typedef struct {\n-  const char *name;\n-  const neon_itype itype;\n-  const int bits;\n-  const enum insn_code codes[T_MAX];\n-  const unsigned int num_vars;\n-  unsigned int base_fcode;\n-} neon_builtin_datum;\n-\n-#define CF(N,X) CODE_FOR_neon_##N##X\n-\n-#define VAR1(T, N, A) \\\n-  #N, NEON_##T, UP (A), { CF (N, A) }, 1, 0\n-#define VAR2(T, N, A, B) \\\n-  #N, NEON_##T, UP (A) | UP (B), { CF (N, A), CF (N, B) }, 2, 0\n-#define VAR3(T, N, A, B, C) \\\n-  #N, NEON_##T, UP (A) | UP (B) | UP (C), \\\n-  { CF (N, A), CF (N, B), CF (N, C) }, 3, 0\n-#define VAR4(T, N, A, B, C, D) \\\n-  #N, NEON_##T, UP (A) | UP (B) | UP (C) | UP (D), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D) }, 4, 0\n-#define VAR5(T, N, A, B, C, D, E) \\\n-  #N, NEON_##T, UP (A) | UP (B) | UP (C) | UP (D) | UP (E), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E) }, 5, 0\n-#define VAR6(T, N, A, B, C, D, E, F) \\\n-  #N, NEON_##T, UP (A) | UP (B) | UP (C) | UP (D) | UP (E) | UP (F), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F) }, 6, 0\n-#define VAR7(T, N, A, B, C, D, E, F, G) \\\n-  #N, NEON_##T, UP (A) | UP (B) | UP (C) | UP (D) | UP (E) | UP (F) | UP (G), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G) }, 7, 0\n-#define VAR8(T, N, A, B, C, D, E, F, G, H) \\\n-  #N, NEON_##T, UP (A) | UP (B) | UP (C) | UP (D) | UP (E) | UP (F) | UP (G) \\\n-                | UP (H), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G), CF (N, H) }, 8, 0\n-#define VAR9(T, N, A, B, C, D, E, F, G, H, I) \\\n-  #N, NEON_##T, UP (A) | UP (B) | UP (C) | UP (D) | UP (E) | UP (F) | UP (G) \\\n-                | UP (H) | UP (I), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G), CF (N, H), CF (N, I) }, 9, 0\n-#define VAR10(T, N, A, B, C, D, E, F, G, H, I, J) \\\n-  #N, NEON_##T, UP (A) | UP (B) | UP (C) | UP (D) | UP (E) | UP (F) | UP (G) \\\n-                | UP (H) | UP (I) | UP (J), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G), CF (N, H), CF (N, I), CF (N, J) }, 10, 0\n-\n-/* The mode entries in the following table correspond to the \"key\" type of the\n-   instruction variant, i.e. equivalent to that which would be specified after\n-   the assembler mnemonic, which usually refers to the last vector operand.\n-   (Signed/unsigned/polynomial types are not differentiated between though, and\n-   are all mapped onto the same mode for a given element size.) The modes\n-   listed per instruction should be the same as those defined for that\n-   instruction's pattern in neon.md.\n-   WARNING: Variants should be listed in the same increasing order as\n-   neon_builtin_type_bits.  */\n-\n-static neon_builtin_datum neon_builtin_data[] =\n-{\n-  { VAR10 (BINOP, vadd,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR3 (BINOP, vaddl, v8qi, v4hi, v2si) },\n-  { VAR3 (BINOP, vaddw, v8qi, v4hi, v2si) },\n-  { VAR6 (BINOP, vhadd, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR8 (BINOP, vqadd, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR3 (BINOP, vaddhn, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, vmul, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR8 (TERNOP, vmla, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR3 (TERNOP, vmlal, v8qi, v4hi, v2si) },\n-  { VAR8 (TERNOP, vmls, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR3 (TERNOP, vmlsl, v8qi, v4hi, v2si) },\n-  { VAR4 (BINOP, vqdmulh, v4hi, v2si, v8hi, v4si) },\n-  { VAR2 (TERNOP, vqdmlal, v4hi, v2si) },\n-  { VAR2 (TERNOP, vqdmlsl, v4hi, v2si) },\n-  { VAR3 (BINOP, vmull, v8qi, v4hi, v2si) },\n-  { VAR2 (SCALARMULL, vmull_n, v4hi, v2si) },\n-  { VAR2 (LANEMULL, vmull_lane, v4hi, v2si) },\n-  { VAR2 (SCALARMULL, vqdmull_n, v4hi, v2si) },\n-  { VAR2 (LANEMULL, vqdmull_lane, v4hi, v2si) },\n-  { VAR4 (SCALARMULH, vqdmulh_n, v4hi, v2si, v8hi, v4si) },\n-  { VAR4 (LANEMULH, vqdmulh_lane, v4hi, v2si, v8hi, v4si) },\n-  { VAR2 (BINOP, vqdmull, v4hi, v2si) },\n-  { VAR8 (BINOP, vshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, vqshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (SHIFTIMM, vshr_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR3 (SHIFTIMM, vshrn_n, v8hi, v4si, v2di) },\n-  { VAR3 (SHIFTIMM, vqshrn_n, v8hi, v4si, v2di) },\n-  { VAR3 (SHIFTIMM, vqshrun_n, v8hi, v4si, v2di) },\n-  { VAR8 (SHIFTIMM, vshl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (SHIFTIMM, vqshl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (SHIFTIMM, vqshlu_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR3 (SHIFTIMM, vshll_n, v8qi, v4hi, v2si) },\n-  { VAR8 (SHIFTACC, vsra_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR10 (BINOP, vsub,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR3 (BINOP, vsubl, v8qi, v4hi, v2si) },\n-  { VAR3 (BINOP, vsubw, v8qi, v4hi, v2si) },\n-  { VAR8 (BINOP, vqsub, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR6 (BINOP, vhsub, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR3 (BINOP, vsubhn, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, vceq, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR8 (BINOP, vcge, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR8 (BINOP, vcgt, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR2 (BINOP, vcage, v2sf, v4sf) },\n-  { VAR2 (BINOP, vcagt, v2sf, v4sf) },\n-  { VAR6 (BINOP, vtst, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR8 (BINOP, vabd, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR3 (BINOP, vabdl, v8qi, v4hi, v2si) },\n-  { VAR6 (TERNOP, vaba, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR3 (TERNOP, vabal, v8qi, v4hi, v2si) },\n-  { VAR8 (BINOP, vmax, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR8 (BINOP, vmin, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR4 (BINOP, vpadd, v8qi, v4hi, v2si, v2sf) },\n-  { VAR6 (UNOP, vpaddl, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR6 (BINOP, vpadal, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR4 (BINOP, vpmax, v8qi, v4hi, v2si, v2sf) },\n-  { VAR4 (BINOP, vpmin, v8qi, v4hi, v2si, v2sf) },\n-  { VAR2 (BINOP, vrecps, v2sf, v4sf) },\n-  { VAR2 (BINOP, vrsqrts, v2sf, v4sf) },\n-  { VAR8 (SHIFTINSERT, vsri_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (SHIFTINSERT, vsli_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (UNOP, vabs, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR6 (UNOP, vqabs, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR8 (UNOP, vneg, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR6 (UNOP, vqneg, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR6 (UNOP, vcls, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR6 (UNOP, vclz, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR2 (UNOP, vcnt, v8qi, v16qi) },\n-  { VAR4 (UNOP, vrecpe, v2si, v2sf, v4si, v4sf) },\n-  { VAR4 (UNOP, vrsqrte, v2si, v2sf, v4si, v4sf) },\n-  { VAR6 (UNOP, vmvn, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  /* FIXME: vget_lane supports more variants than this!  */\n-  { VAR10 (GETLANE, vget_lane,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (SETLANE, vset_lane,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR5 (CREATE, vcreate, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR10 (DUP, vdup_n,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (DUPLANE, vdup_lane,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR5 (COMBINE, vcombine, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR5 (SPLIT, vget_high, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR5 (SPLIT, vget_low, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR3 (UNOP, vmovn, v8hi, v4si, v2di) },\n-  { VAR3 (UNOP, vqmovn, v8hi, v4si, v2di) },\n-  { VAR3 (UNOP, vqmovun, v8hi, v4si, v2di) },\n-  { VAR3 (UNOP, vmovl, v8qi, v4hi, v2si) },\n-  { VAR6 (LANEMUL, vmul_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR6 (LANEMAC, vmla_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR2 (LANEMAC, vmlal_lane, v4hi, v2si) },\n-  { VAR2 (LANEMAC, vqdmlal_lane, v4hi, v2si) },\n-  { VAR6 (LANEMAC, vmls_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR2 (LANEMAC, vmlsl_lane, v4hi, v2si) },\n-  { VAR2 (LANEMAC, vqdmlsl_lane, v4hi, v2si) },\n-  { VAR6 (SCALARMUL, vmul_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR6 (SCALARMAC, vmla_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR2 (SCALARMAC, vmlal_n, v4hi, v2si) },\n-  { VAR2 (SCALARMAC, vqdmlal_n, v4hi, v2si) },\n-  { VAR6 (SCALARMAC, vmls_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR2 (SCALARMAC, vmlsl_n, v4hi, v2si) },\n-  { VAR2 (SCALARMAC, vqdmlsl_n, v4hi, v2si) },\n-  { VAR10 (BINOP, vext,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR8 (UNOP, vrev64, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR4 (UNOP, vrev32, v8qi, v4hi, v16qi, v8hi) },\n-  { VAR2 (UNOP, vrev16, v8qi, v16qi) },\n-  { VAR4 (CONVERT, vcvt, v2si, v2sf, v4si, v4sf) },\n-  { VAR4 (FIXCONV, vcvt_n, v2si, v2sf, v4si, v4sf) },\n-  { VAR10 (SELECT, vbsl,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR1 (VTBL, vtbl1, v8qi) },\n-  { VAR1 (VTBL, vtbl2, v8qi) },\n-  { VAR1 (VTBL, vtbl3, v8qi) },\n-  { VAR1 (VTBL, vtbl4, v8qi) },\n-  { VAR1 (VTBX, vtbx1, v8qi) },\n-  { VAR1 (VTBX, vtbx2, v8qi) },\n-  { VAR1 (VTBX, vtbx3, v8qi) },\n-  { VAR1 (VTBX, vtbx4, v8qi) },\n-  { VAR8 (RESULTPAIR, vtrn, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR8 (RESULTPAIR, vzip, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR8 (RESULTPAIR, vuzp, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf) },\n-  { VAR5 (REINTERP, vreinterpretv8qi, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR5 (REINTERP, vreinterpretv4hi, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR5 (REINTERP, vreinterpretv2si, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR5 (REINTERP, vreinterpretv2sf, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR5 (REINTERP, vreinterpretdi, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR5 (REINTERP, vreinterpretv16qi, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR5 (REINTERP, vreinterpretv8hi, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR5 (REINTERP, vreinterpretv4si, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR5 (REINTERP, vreinterpretv4sf, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR5 (REINTERP, vreinterpretv2di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (LOAD1, vld1,\n-           v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (LOAD1LANE, vld1_lane,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (LOAD1, vld1_dup,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (STORE1, vst1,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (STORE1LANE, vst1_lane,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR9 (LOADSTRUCT,\n-\t  vld2, v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf) },\n-  { VAR7 (LOADSTRUCTLANE, vld2_lane,\n-\t  v8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR5 (LOADSTRUCT, vld2_dup, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR9 (STORESTRUCT, vst2,\n-\t  v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf) },\n-  { VAR7 (STORESTRUCTLANE, vst2_lane,\n-\t  v8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR9 (LOADSTRUCT,\n-\t  vld3, v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf) },\n-  { VAR7 (LOADSTRUCTLANE, vld3_lane,\n-\t  v8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR5 (LOADSTRUCT, vld3_dup, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR9 (STORESTRUCT, vst3,\n-\t  v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf) },\n-  { VAR7 (STORESTRUCTLANE, vst3_lane,\n-\t  v8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR9 (LOADSTRUCT, vld4,\n-\t  v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf) },\n-  { VAR7 (LOADSTRUCTLANE, vld4_lane,\n-\t  v8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR5 (LOADSTRUCT, vld4_dup, v8qi, v4hi, v2si, v2sf, di) },\n-  { VAR9 (STORESTRUCT, vst4,\n-\t  v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf) },\n-  { VAR7 (STORESTRUCTLANE, vst4_lane,\n-\t  v8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf) },\n-  { VAR10 (LOGICBINOP, vand,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (LOGICBINOP, vorr,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (BINOP, veor,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (LOGICBINOP, vbic,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) },\n-  { VAR10 (LOGICBINOP, vorn,\n-\t   v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di) }\n-};\n-\n-#undef CF\n-#undef VAR1\n-#undef VAR2\n-#undef VAR3\n-#undef VAR4\n-#undef VAR5\n-#undef VAR6\n-#undef VAR7\n-#undef VAR8\n-#undef VAR9\n-#undef VAR10\n-\n-static void\n-arm_init_neon_builtins (void)\n-{\n-  unsigned int i, fcode = ARM_BUILTIN_NEON_BASE;\n-\n-  tree neon_intQI_type_node;\n-  tree neon_intHI_type_node;\n-  tree neon_polyQI_type_node;\n-  tree neon_polyHI_type_node;\n-  tree neon_intSI_type_node;\n-  tree neon_intDI_type_node;\n-  tree neon_float_type_node;\n-\n-  tree intQI_pointer_node;\n-  tree intHI_pointer_node;\n-  tree intSI_pointer_node;\n-  tree intDI_pointer_node;\n-  tree float_pointer_node;\n-\n-  tree const_intQI_node;\n-  tree const_intHI_node;\n-  tree const_intSI_node;\n-  tree const_intDI_node;\n-  tree const_float_node;\n-\n-  tree const_intQI_pointer_node;\n-  tree const_intHI_pointer_node;\n-  tree const_intSI_pointer_node;\n-  tree const_intDI_pointer_node;\n-  tree const_float_pointer_node;\n-\n-  tree V8QI_type_node;\n-  tree V4HI_type_node;\n-  tree V2SI_type_node;\n-  tree V2SF_type_node;\n-  tree V16QI_type_node;\n-  tree V8HI_type_node;\n-  tree V4SI_type_node;\n-  tree V4SF_type_node;\n-  tree V2DI_type_node;\n-\n-  tree intUQI_type_node;\n-  tree intUHI_type_node;\n-  tree intUSI_type_node;\n-  tree intUDI_type_node;\n-\n-  tree intEI_type_node;\n-  tree intOI_type_node;\n-  tree intCI_type_node;\n-  tree intXI_type_node;\n-\n-  tree V8QI_pointer_node;\n-  tree V4HI_pointer_node;\n-  tree V2SI_pointer_node;\n-  tree V2SF_pointer_node;\n-  tree V16QI_pointer_node;\n-  tree V8HI_pointer_node;\n-  tree V4SI_pointer_node;\n-  tree V4SF_pointer_node;\n-  tree V2DI_pointer_node;\n-\n-  tree void_ftype_pv8qi_v8qi_v8qi;\n-  tree void_ftype_pv4hi_v4hi_v4hi;\n-  tree void_ftype_pv2si_v2si_v2si;\n-  tree void_ftype_pv2sf_v2sf_v2sf;\n-  tree void_ftype_pdi_di_di;\n-  tree void_ftype_pv16qi_v16qi_v16qi;\n-  tree void_ftype_pv8hi_v8hi_v8hi;\n-  tree void_ftype_pv4si_v4si_v4si;\n-  tree void_ftype_pv4sf_v4sf_v4sf;\n-  tree void_ftype_pv2di_v2di_v2di;\n-\n-  tree reinterp_ftype_dreg[5][5];\n-  tree reinterp_ftype_qreg[5][5];\n-  tree dreg_types[5], qreg_types[5];\n+  tree reinterp_ftype_dreg[5][5];\n+  tree reinterp_ftype_qreg[5][5];\n+  tree dreg_types[5], qreg_types[5];\n \n   /* Create distinguished type nodes for NEON vector element types,\n      and pointers to values of such types, so we can detect them later.  */\n@@ -18807,268 +18500,758 @@ arm_init_neon_builtins (void)\n   dreg_types[3] = V2SF_type_node;\n   dreg_types[4] = neon_intDI_type_node;\n \n-  qreg_types[0] = V16QI_type_node;\n-  qreg_types[1] = V8HI_type_node;\n-  qreg_types[2] = V4SI_type_node;\n-  qreg_types[3] = V4SF_type_node;\n-  qreg_types[4] = V2DI_type_node;\n+  qreg_types[0] = V16QI_type_node;\n+  qreg_types[1] = V8HI_type_node;\n+  qreg_types[2] = V4SI_type_node;\n+  qreg_types[3] = V4SF_type_node;\n+  qreg_types[4] = V2DI_type_node;\n+\n+  for (i = 0; i < 5; i++)\n+    {\n+      int j;\n+      for (j = 0; j < 5; j++)\n+        {\n+          reinterp_ftype_dreg[i][j]\n+            = build_function_type_list (dreg_types[i], dreg_types[j], NULL);\n+          reinterp_ftype_qreg[i][j]\n+            = build_function_type_list (qreg_types[i], qreg_types[j], NULL);\n+        }\n+    }\n+\n+  for (i = 0, fcode = ARM_BUILTIN_NEON_BASE;\n+       i < ARRAY_SIZE (neon_builtin_data);\n+       i++, fcode++)\n+    {\n+      neon_builtin_datum *d = &neon_builtin_data[i];\n+\n+      const char* const modenames[] = {\n+\t\"v8qi\", \"v4hi\", \"v2si\", \"v2sf\", \"di\",\n+\t\"v16qi\", \"v8hi\", \"v4si\", \"v4sf\", \"v2di\",\n+\t\"ti\", \"ei\", \"oi\"\n+      };\n+      char namebuf[60];\n+      tree ftype = NULL;\n+      int is_load = 0, is_store = 0;\n+\n+      gcc_assert (ARRAY_SIZE (modenames) == T_MAX);\n+\n+      d->fcode = fcode;\n+\n+      switch (d->itype)\n+\t{\n+\tcase NEON_LOAD1:\n+\tcase NEON_LOAD1LANE:\n+\tcase NEON_LOADSTRUCT:\n+\tcase NEON_LOADSTRUCTLANE:\n+\t  is_load = 1;\n+\t  /* Fall through.  */\n+\tcase NEON_STORE1:\n+\tcase NEON_STORE1LANE:\n+\tcase NEON_STORESTRUCT:\n+\tcase NEON_STORESTRUCTLANE:\n+\t  if (!is_load)\n+\t    is_store = 1;\n+\t  /* Fall through.  */\n+\tcase NEON_UNOP:\n+\tcase NEON_BINOP:\n+\tcase NEON_LOGICBINOP:\n+\tcase NEON_SHIFTINSERT:\n+\tcase NEON_TERNOP:\n+\tcase NEON_GETLANE:\n+\tcase NEON_SETLANE:\n+\tcase NEON_CREATE:\n+\tcase NEON_DUP:\n+\tcase NEON_DUPLANE:\n+\tcase NEON_SHIFTIMM:\n+\tcase NEON_SHIFTACC:\n+\tcase NEON_COMBINE:\n+\tcase NEON_SPLIT:\n+\tcase NEON_CONVERT:\n+\tcase NEON_FIXCONV:\n+\tcase NEON_LANEMUL:\n+\tcase NEON_LANEMULL:\n+\tcase NEON_LANEMULH:\n+\tcase NEON_LANEMAC:\n+\tcase NEON_SCALARMUL:\n+\tcase NEON_SCALARMULL:\n+\tcase NEON_SCALARMULH:\n+\tcase NEON_SCALARMAC:\n+\tcase NEON_SELECT:\n+\tcase NEON_VTBL:\n+\tcase NEON_VTBX:\n+\t  {\n+\t    int k;\n+\t    tree return_type = void_type_node, args = void_list_node;\n+\n+\t    /* Build a function type directly from the insn_data for\n+\t       this builtin.  The build_function_type() function takes\n+\t       care of removing duplicates for us.  */\n+\t    for (k = insn_data[d->code].n_generator_args - 1; k >= 0; k--)\n+\t      {\n+\t\ttree eltype;\n+\n+\t\tif (is_load && k == 1)\n+\t\t  {\n+\t\t    /* Neon load patterns always have the memory\n+\t\t       operand in the operand 1 position.  */\n+\t\t    gcc_assert (insn_data[d->code].operand[k].predicate\n+\t\t\t\t== neon_struct_operand);\n+\n+\t\t    switch (d->mode)\n+\t\t      {\n+\t\t      case T_V8QI:\n+\t\t      case T_V16QI:\n+\t\t\teltype = const_intQI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V4HI:\n+\t\t      case T_V8HI:\n+\t\t\teltype = const_intHI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V2SI:\n+\t\t      case T_V4SI:\n+\t\t\teltype = const_intSI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V2SF:\n+\t\t      case T_V4SF:\n+\t\t\teltype = const_float_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_DI:\n+\t\t      case T_V2DI:\n+\t\t\teltype = const_intDI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      default: gcc_unreachable ();\n+\t\t      }\n+\t\t  }\n+\t\telse if (is_store && k == 0)\n+\t\t  {\n+\t\t    /* Similarly, Neon store patterns use operand 0 as\n+\t\t       the memory location to store to.  */\n+\t\t    gcc_assert (insn_data[d->code].operand[k].predicate\n+\t\t\t\t== neon_struct_operand);\n+\n+\t\t    switch (d->mode)\n+\t\t      {\n+\t\t      case T_V8QI:\n+\t\t      case T_V16QI:\n+\t\t\teltype = intQI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V4HI:\n+\t\t      case T_V8HI:\n+\t\t\teltype = intHI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V2SI:\n+\t\t      case T_V4SI:\n+\t\t\teltype = intSI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V2SF:\n+\t\t      case T_V4SF:\n+\t\t\teltype = float_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_DI:\n+\t\t      case T_V2DI:\n+\t\t\teltype = intDI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      default: gcc_unreachable ();\n+\t\t      }\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    switch (insn_data[d->code].operand[k].mode)\n+\t\t      {\n+\t\t      case VOIDmode: eltype = void_type_node; break;\n+\t\t\t/* Scalars.  */\n+\t\t      case QImode: eltype = neon_intQI_type_node; break;\n+\t\t      case HImode: eltype = neon_intHI_type_node; break;\n+\t\t      case SImode: eltype = neon_intSI_type_node; break;\n+\t\t      case SFmode: eltype = neon_float_type_node; break;\n+\t\t      case DImode: eltype = neon_intDI_type_node; break;\n+\t\t      case TImode: eltype = intTI_type_node; break;\n+\t\t      case EImode: eltype = intEI_type_node; break;\n+\t\t      case OImode: eltype = intOI_type_node; break;\n+\t\t      case CImode: eltype = intCI_type_node; break;\n+\t\t      case XImode: eltype = intXI_type_node; break;\n+\t\t\t/* 64-bit vectors.  */\n+\t\t      case V8QImode: eltype = V8QI_type_node; break;\n+\t\t      case V4HImode: eltype = V4HI_type_node; break;\n+\t\t      case V2SImode: eltype = V2SI_type_node; break;\n+\t\t      case V2SFmode: eltype = V2SF_type_node; break;\n+\t\t\t/* 128-bit vectors.  */\n+\t\t      case V16QImode: eltype = V16QI_type_node; break;\n+\t\t      case V8HImode: eltype = V8HI_type_node; break;\n+\t\t      case V4SImode: eltype = V4SI_type_node; break;\n+\t\t      case V4SFmode: eltype = V4SF_type_node; break;\n+\t\t      case V2DImode: eltype = V2DI_type_node; break;\n+\t\t      default: gcc_unreachable ();\n+\t\t      }\n+\t\t  }\n+\n+\t\tif (k == 0 && !is_store)\n+\t\t  return_type = eltype;\n+\t\telse\n+\t\t  args = tree_cons (NULL_TREE, eltype, args);\n+\t      }\n+\n+\t    ftype = build_function_type (return_type, args);\n+\t  }\n+\t  break;\n+\n+\tcase NEON_RESULTPAIR:\n+\t  {\n+\t    switch (insn_data[d->code].operand[1].mode)\n+\t      {\n+\t      case V8QImode: ftype = void_ftype_pv8qi_v8qi_v8qi; break;\n+\t      case V4HImode: ftype = void_ftype_pv4hi_v4hi_v4hi; break;\n+\t      case V2SImode: ftype = void_ftype_pv2si_v2si_v2si; break;\n+\t      case V2SFmode: ftype = void_ftype_pv2sf_v2sf_v2sf; break;\n+\t      case DImode: ftype = void_ftype_pdi_di_di; break;\n+\t      case V16QImode: ftype = void_ftype_pv16qi_v16qi_v16qi; break;\n+\t      case V8HImode: ftype = void_ftype_pv8hi_v8hi_v8hi; break;\n+\t      case V4SImode: ftype = void_ftype_pv4si_v4si_v4si; break;\n+\t      case V4SFmode: ftype = void_ftype_pv4sf_v4sf_v4sf; break;\n+\t      case V2DImode: ftype = void_ftype_pv2di_v2di_v2di; break;\n+\t      default: gcc_unreachable ();\n+\t      }\n+\t  }\n+\t  break;\n+\n+\tcase NEON_REINTERP:\n+\t  {\n+\t    /* We iterate over 5 doubleword types, then 5 quadword\n+\t       types.  */\n+\t    int rhs = d->mode % 5;\n+\t    switch (insn_data[d->code].operand[0].mode)\n+\t      {\n+\t      case V8QImode: ftype = reinterp_ftype_dreg[0][rhs]; break;\n+\t      case V4HImode: ftype = reinterp_ftype_dreg[1][rhs]; break;\n+\t      case V2SImode: ftype = reinterp_ftype_dreg[2][rhs]; break;\n+\t      case V2SFmode: ftype = reinterp_ftype_dreg[3][rhs]; break;\n+\t      case DImode: ftype = reinterp_ftype_dreg[4][rhs]; break;\n+\t      case V16QImode: ftype = reinterp_ftype_qreg[0][rhs]; break;\n+\t      case V8HImode: ftype = reinterp_ftype_qreg[1][rhs]; break;\n+\t      case V4SImode: ftype = reinterp_ftype_qreg[2][rhs]; break;\n+\t      case V4SFmode: ftype = reinterp_ftype_qreg[3][rhs]; break;\n+\t      case V2DImode: ftype = reinterp_ftype_qreg[4][rhs]; break;\n+\t      default: gcc_unreachable ();\n+\t      }\n+\t  }\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      gcc_assert (ftype != NULL);\n+\n+      sprintf (namebuf, \"__builtin_neon_%s%s\", d->name, modenames[d->mode]);\n+\n+      decl = add_builtin_function (namebuf, ftype, fcode, BUILT_IN_MD, NULL,\n+\t\t\t\t   NULL_TREE);\n+      arm_builtin_decls[fcode] = decl;\n+    }\n+}\n+\n+#define def_mbuiltin(MASK, NAME, TYPE, CODE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if ((MASK) & insn_flags)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  tree bdecl;\t\t\t\t\t\t\t\\\n+\t  bdecl = add_builtin_function ((NAME), (TYPE), (CODE),\t\t\\\n+\t\t\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\t\\\n+\t  arm_builtin_decls[CODE] = bdecl;\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+  \n+struct builtin_description\n+{\n+  const unsigned int       mask;\n+  const enum insn_code     icode;\n+  const char * const       name;\n+  const enum arm_builtins  code;\n+  const enum rtx_code      comparison;\n+  const unsigned int       flag;\n+};\n+  \n+static const struct builtin_description bdesc_2arg[] =\n+{\n+#define IWMMXT_BUILTIN(code, string, builtin) \\\n+  { FL_IWMMXT, CODE_FOR_##code, \"__builtin_arm_\" string, \\\n+    ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n+  \n+  IWMMXT_BUILTIN (addv8qi3, \"waddb\", WADDB)\n+  IWMMXT_BUILTIN (addv4hi3, \"waddh\", WADDH)\n+  IWMMXT_BUILTIN (addv2si3, \"waddw\", WADDW)\n+  IWMMXT_BUILTIN (subv8qi3, \"wsubb\", WSUBB)\n+  IWMMXT_BUILTIN (subv4hi3, \"wsubh\", WSUBH)\n+  IWMMXT_BUILTIN (subv2si3, \"wsubw\", WSUBW)\n+  IWMMXT_BUILTIN (ssaddv8qi3, \"waddbss\", WADDSSB)\n+  IWMMXT_BUILTIN (ssaddv4hi3, \"waddhss\", WADDSSH)\n+  IWMMXT_BUILTIN (ssaddv2si3, \"waddwss\", WADDSSW)\n+  IWMMXT_BUILTIN (sssubv8qi3, \"wsubbss\", WSUBSSB)\n+  IWMMXT_BUILTIN (sssubv4hi3, \"wsubhss\", WSUBSSH)\n+  IWMMXT_BUILTIN (sssubv2si3, \"wsubwss\", WSUBSSW)\n+  IWMMXT_BUILTIN (usaddv8qi3, \"waddbus\", WADDUSB)\n+  IWMMXT_BUILTIN (usaddv4hi3, \"waddhus\", WADDUSH)\n+  IWMMXT_BUILTIN (usaddv2si3, \"waddwus\", WADDUSW)\n+  IWMMXT_BUILTIN (ussubv8qi3, \"wsubbus\", WSUBUSB)\n+  IWMMXT_BUILTIN (ussubv4hi3, \"wsubhus\", WSUBUSH)\n+  IWMMXT_BUILTIN (ussubv2si3, \"wsubwus\", WSUBUSW)\n+  IWMMXT_BUILTIN (mulv4hi3, \"wmulul\", WMULUL)\n+  IWMMXT_BUILTIN (smulv4hi3_highpart, \"wmulsm\", WMULSM)\n+  IWMMXT_BUILTIN (umulv4hi3_highpart, \"wmulum\", WMULUM)\n+  IWMMXT_BUILTIN (eqv8qi3, \"wcmpeqb\", WCMPEQB)\n+  IWMMXT_BUILTIN (eqv4hi3, \"wcmpeqh\", WCMPEQH)\n+  IWMMXT_BUILTIN (eqv2si3, \"wcmpeqw\", WCMPEQW)\n+  IWMMXT_BUILTIN (gtuv8qi3, \"wcmpgtub\", WCMPGTUB)\n+  IWMMXT_BUILTIN (gtuv4hi3, \"wcmpgtuh\", WCMPGTUH)\n+  IWMMXT_BUILTIN (gtuv2si3, \"wcmpgtuw\", WCMPGTUW)\n+  IWMMXT_BUILTIN (gtv8qi3, \"wcmpgtsb\", WCMPGTSB)\n+  IWMMXT_BUILTIN (gtv4hi3, \"wcmpgtsh\", WCMPGTSH)\n+  IWMMXT_BUILTIN (gtv2si3, \"wcmpgtsw\", WCMPGTSW)\n+  IWMMXT_BUILTIN (umaxv8qi3, \"wmaxub\", WMAXUB)\n+  IWMMXT_BUILTIN (smaxv8qi3, \"wmaxsb\", WMAXSB)\n+  IWMMXT_BUILTIN (umaxv4hi3, \"wmaxuh\", WMAXUH)\n+  IWMMXT_BUILTIN (smaxv4hi3, \"wmaxsh\", WMAXSH)\n+  IWMMXT_BUILTIN (umaxv2si3, \"wmaxuw\", WMAXUW)\n+  IWMMXT_BUILTIN (smaxv2si3, \"wmaxsw\", WMAXSW)\n+  IWMMXT_BUILTIN (uminv8qi3, \"wminub\", WMINUB)\n+  IWMMXT_BUILTIN (sminv8qi3, \"wminsb\", WMINSB)\n+  IWMMXT_BUILTIN (uminv4hi3, \"wminuh\", WMINUH)\n+  IWMMXT_BUILTIN (sminv4hi3, \"wminsh\", WMINSH)\n+  IWMMXT_BUILTIN (uminv2si3, \"wminuw\", WMINUW)\n+  IWMMXT_BUILTIN (sminv2si3, \"wminsw\", WMINSW)\n+  IWMMXT_BUILTIN (iwmmxt_anddi3, \"wand\", WAND)\n+  IWMMXT_BUILTIN (iwmmxt_nanddi3, \"wandn\", WANDN)\n+  IWMMXT_BUILTIN (iwmmxt_iordi3, \"wor\", WOR)\n+  IWMMXT_BUILTIN (iwmmxt_xordi3, \"wxor\", WXOR)\n+  IWMMXT_BUILTIN (iwmmxt_uavgv8qi3, \"wavg2b\", WAVG2B)\n+  IWMMXT_BUILTIN (iwmmxt_uavgv4hi3, \"wavg2h\", WAVG2H)\n+  IWMMXT_BUILTIN (iwmmxt_uavgrndv8qi3, \"wavg2br\", WAVG2BR)\n+  IWMMXT_BUILTIN (iwmmxt_uavgrndv4hi3, \"wavg2hr\", WAVG2HR)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckilb, \"wunpckilb\", WUNPCKILB)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckilh, \"wunpckilh\", WUNPCKILH)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckilw, \"wunpckilw\", WUNPCKILW)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckihb, \"wunpckihb\", WUNPCKIHB)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckihh, \"wunpckihh\", WUNPCKIHH)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckihw, \"wunpckihw\", WUNPCKIHW)\n+  IWMMXT_BUILTIN (iwmmxt_wmadds, \"wmadds\", WMADDS)\n+  IWMMXT_BUILTIN (iwmmxt_wmaddu, \"wmaddu\", WMADDU)\n+  \n+#define IWMMXT_BUILTIN2(code, builtin) \\\n+  { FL_IWMMXT, CODE_FOR_##code, NULL, ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n+  \n+  IWMMXT_BUILTIN2 (iwmmxt_wpackhss, WPACKHSS)\n+  IWMMXT_BUILTIN2 (iwmmxt_wpackwss, WPACKWSS)\n+  IWMMXT_BUILTIN2 (iwmmxt_wpackdss, WPACKDSS)\n+  IWMMXT_BUILTIN2 (iwmmxt_wpackhus, WPACKHUS)\n+  IWMMXT_BUILTIN2 (iwmmxt_wpackwus, WPACKWUS)\n+  IWMMXT_BUILTIN2 (iwmmxt_wpackdus, WPACKDUS)\n+  IWMMXT_BUILTIN2 (ashlv4hi3_di,    WSLLH)\n+  IWMMXT_BUILTIN2 (ashlv4hi3_iwmmxt, WSLLHI)\n+  IWMMXT_BUILTIN2 (ashlv2si3_di,    WSLLW)\n+  IWMMXT_BUILTIN2 (ashlv2si3_iwmmxt, WSLLWI)\n+  IWMMXT_BUILTIN2 (ashldi3_di,      WSLLD)\n+  IWMMXT_BUILTIN2 (ashldi3_iwmmxt,  WSLLDI)\n+  IWMMXT_BUILTIN2 (lshrv4hi3_di,    WSRLH)\n+  IWMMXT_BUILTIN2 (lshrv4hi3_iwmmxt, WSRLHI)\n+  IWMMXT_BUILTIN2 (lshrv2si3_di,    WSRLW)\n+  IWMMXT_BUILTIN2 (lshrv2si3_iwmmxt, WSRLWI)\n+  IWMMXT_BUILTIN2 (lshrdi3_di,      WSRLD)\n+  IWMMXT_BUILTIN2 (lshrdi3_iwmmxt,  WSRLDI)\n+  IWMMXT_BUILTIN2 (ashrv4hi3_di,    WSRAH)\n+  IWMMXT_BUILTIN2 (ashrv4hi3_iwmmxt, WSRAHI)\n+  IWMMXT_BUILTIN2 (ashrv2si3_di,    WSRAW)\n+  IWMMXT_BUILTIN2 (ashrv2si3_iwmmxt, WSRAWI)\n+  IWMMXT_BUILTIN2 (ashrdi3_di,      WSRAD)\n+  IWMMXT_BUILTIN2 (ashrdi3_iwmmxt,  WSRADI)\n+  IWMMXT_BUILTIN2 (rorv4hi3_di,     WRORH)\n+  IWMMXT_BUILTIN2 (rorv4hi3,        WRORHI)\n+  IWMMXT_BUILTIN2 (rorv2si3_di,     WRORW)\n+  IWMMXT_BUILTIN2 (rorv2si3,        WRORWI)\n+  IWMMXT_BUILTIN2 (rordi3_di,       WRORD)\n+  IWMMXT_BUILTIN2 (rordi3,          WRORDI)\n+  IWMMXT_BUILTIN2 (iwmmxt_wmacuz,   WMACUZ)\n+  IWMMXT_BUILTIN2 (iwmmxt_wmacsz,   WMACSZ)\n+};\n+  \n+static const struct builtin_description bdesc_1arg[] =\n+{\n+  IWMMXT_BUILTIN (iwmmxt_tmovmskb, \"tmovmskb\", TMOVMSKB)\n+  IWMMXT_BUILTIN (iwmmxt_tmovmskh, \"tmovmskh\", TMOVMSKH)\n+  IWMMXT_BUILTIN (iwmmxt_tmovmskw, \"tmovmskw\", TMOVMSKW)\n+  IWMMXT_BUILTIN (iwmmxt_waccb, \"waccb\", WACCB)\n+  IWMMXT_BUILTIN (iwmmxt_wacch, \"wacch\", WACCH)\n+  IWMMXT_BUILTIN (iwmmxt_waccw, \"waccw\", WACCW)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckehub, \"wunpckehub\", WUNPCKEHUB)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckehuh, \"wunpckehuh\", WUNPCKEHUH)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckehuw, \"wunpckehuw\", WUNPCKEHUW)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckehsb, \"wunpckehsb\", WUNPCKEHSB)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckehsh, \"wunpckehsh\", WUNPCKEHSH)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckehsw, \"wunpckehsw\", WUNPCKEHSW)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckelub, \"wunpckelub\", WUNPCKELUB)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckeluh, \"wunpckeluh\", WUNPCKELUH)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckeluw, \"wunpckeluw\", WUNPCKELUW)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckelsb, \"wunpckelsb\", WUNPCKELSB)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckelsh, \"wunpckelsh\", WUNPCKELSH)\n+  IWMMXT_BUILTIN (iwmmxt_wunpckelsw, \"wunpckelsw\", WUNPCKELSW)\n+};\n+  \n+/* Set up all the iWMMXt builtins.  This is not called if\n+   TARGET_IWMMXT is zero.  */\n+\n+static void\n+arm_init_iwmmxt_builtins (void)\n+{\n+  const struct builtin_description * d;\n+  size_t i;\n+  tree endlink = void_list_node;\n+\n+  tree V2SI_type_node = build_vector_type_for_mode (intSI_type_node, V2SImode);\n+  tree V4HI_type_node = build_vector_type_for_mode (intHI_type_node, V4HImode);\n+  tree V8QI_type_node = build_vector_type_for_mode (intQI_type_node, V8QImode);\n+\n+  tree int_ftype_int\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, integer_type_node, endlink));\n+  tree v8qi_ftype_v8qi_v8qi_int\n+    = build_function_type (V8QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    integer_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  tree v4hi_ftype_v4hi_int\n+    = build_function_type (V4HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2si_ftype_v2si_int\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2si_ftype_di_di\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, long_long_integer_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t long_long_integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree di_ftype_di_int\n+    = build_function_type (long_long_integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, long_long_integer_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree di_ftype_di_int_int\n+    = build_function_type (long_long_integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, long_long_integer_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    integer_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  tree int_ftype_v8qi\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t      endlink));\n+  tree int_ftype_v4hi\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      endlink));\n+  tree int_ftype_v2si\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      endlink));\n+  tree int_ftype_v8qi_int\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree int_ftype_v4hi_int\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree int_ftype_v2si_int\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v8qi_ftype_v8qi_int_int\n+    = build_function_type (V8QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    integer_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  tree v4hi_ftype_v4hi_int_int\n+    = build_function_type (V4HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    integer_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  tree v2si_ftype_v2si_int_int\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    integer_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  /* Miscellaneous.  */\n+  tree v8qi_ftype_v4hi_v4hi\n+    = build_function_type (V8QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v4hi_ftype_v2si_v2si\n+    = build_function_type (V4HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2si_ftype_v4hi_v4hi\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2si_ftype_v8qi_v8qi\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v4hi_ftype_v4hi_di\n+    = build_function_type (V4HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t long_long_integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2si_ftype_v2si_di\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t long_long_integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree void_ftype_int_int\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree di_ftype_void\n+    = build_function_type (long_long_unsigned_type_node, endlink);\n+  tree di_ftype_v8qi\n+    = build_function_type (long_long_integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t      endlink));\n+  tree di_ftype_v4hi\n+    = build_function_type (long_long_integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      endlink));\n+  tree di_ftype_v2si\n+    = build_function_type (long_long_integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      endlink));\n+  tree v2si_ftype_v4hi\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      endlink));\n+  tree v4hi_ftype_v8qi\n+    = build_function_type (V4HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t      endlink));\n+\n+  tree di_ftype_di_v4hi_v4hi\n+    = build_function_type (long_long_unsigned_type_node,\n+\t\t\t   tree_cons (NULL_TREE,\n+\t\t\t\t      long_long_unsigned_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    V4HI_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n \n-  for (i = 0; i < 5; i++)\n+  tree di_ftype_v4hi_v4hi\n+    = build_function_type (long_long_unsigned_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  \n+  /* Normal vector binops.  */\n+  tree v8qi_ftype_v8qi_v8qi\n+    = build_function_type (V8QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8QI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v4hi_ftype_v4hi_v4hi\n+    = build_function_type (V4HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4HI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2si_ftype_v2si_v2si\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree di_ftype_di_di\n+    = build_function_type (long_long_unsigned_type_node,\n+\t\t\t   tree_cons (NULL_TREE, long_long_unsigned_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t long_long_unsigned_type_node,\n+\t\t\t\t\t\t endlink)));\n+  \n+  /* Add all builtins that are more or less simple operations on two\n+     operands.  */\n+  for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     {\n-      int j;\n-      for (j = 0; j < 5; j++)\n-        {\n-          reinterp_ftype_dreg[i][j]\n-            = build_function_type_list (dreg_types[i], dreg_types[j], NULL);\n-          reinterp_ftype_qreg[i][j]\n-            = build_function_type_list (qreg_types[i], qreg_types[j], NULL);\n-        }\n-    }\n+      /* Use one of the operands; the target can have a different mode for\n+\t mask-generating compares.  */\n+      enum machine_mode mode;\n+      tree type;\n \n-  for (i = 0; i < ARRAY_SIZE (neon_builtin_data); i++)\n-    {\n-      neon_builtin_datum *d = &neon_builtin_data[i];\n-      unsigned int j, codeidx = 0;\n+      if (d->name == 0)\n+\tcontinue;\n \n-      d->base_fcode = fcode;\n+      mode = insn_data[d->icode].operand[1].mode;\n \n-      for (j = 0; j < T_MAX; j++)\n+      switch (mode)\n \t{\n-\t  const char* const modenames[] = {\n-\t    \"v8qi\", \"v4hi\", \"v2si\", \"v2sf\", \"di\",\n-\t    \"v16qi\", \"v8hi\", \"v4si\", \"v4sf\", \"v2di\"\n-\t  };\n-\t  char namebuf[60];\n-\t  tree ftype = NULL;\n-\t  enum insn_code icode;\n-\t  int is_load = 0, is_store = 0;\n-\n-          if ((d->bits & (1 << j)) == 0)\n-            continue;\n-\n-          icode = d->codes[codeidx++];\n-\n-          switch (d->itype)\n-            {\n-\t    case NEON_LOAD1:\n-\t    case NEON_LOAD1LANE:\n-\t    case NEON_LOADSTRUCT:\n-\t    case NEON_LOADSTRUCTLANE:\n-\t      is_load = 1;\n-\t      /* Fall through.  */\n-\t    case NEON_STORE1:\n-\t    case NEON_STORE1LANE:\n-\t    case NEON_STORESTRUCT:\n-\t    case NEON_STORESTRUCTLANE:\n-\t      if (!is_load)\n-\t        is_store = 1;\n-\t      /* Fall through.  */\n-            case NEON_UNOP:\n-\t    case NEON_BINOP:\n-\t    case NEON_LOGICBINOP:\n-\t    case NEON_SHIFTINSERT:\n-\t    case NEON_TERNOP:\n-\t    case NEON_GETLANE:\n-\t    case NEON_SETLANE:\n-\t    case NEON_CREATE:\n-\t    case NEON_DUP:\n-\t    case NEON_DUPLANE:\n-\t    case NEON_SHIFTIMM:\n-\t    case NEON_SHIFTACC:\n-\t    case NEON_COMBINE:\n-\t    case NEON_SPLIT:\n-\t    case NEON_CONVERT:\n-\t    case NEON_FIXCONV:\n-\t    case NEON_LANEMUL:\n-\t    case NEON_LANEMULL:\n-\t    case NEON_LANEMULH:\n-\t    case NEON_LANEMAC:\n-\t    case NEON_SCALARMUL:\n-\t    case NEON_SCALARMULL:\n-\t    case NEON_SCALARMULH:\n-\t    case NEON_SCALARMAC:\n-\t    case NEON_SELECT:\n-\t    case NEON_VTBL:\n-\t    case NEON_VTBX:\n-\t      {\n-\t\tint k;\n-\t\ttree return_type = void_type_node, args = void_list_node;\n-\n-\t\t/* Build a function type directly from the insn_data for this\n-\t\t   builtin.  The build_function_type() function takes care of\n-\t\t   removing duplicates for us.  */\n-\t\tfor (k = insn_data[icode].n_generator_args - 1; k >= 0; k--)\n-\t\t  {\n-\t\t    tree eltype;\n-\n-\t\t    if (is_load && k == 1)\n-\t\t      {\n-\t\t        /* Neon load patterns always have the memory operand\n-\t\t\t   in the operand 1 position.  */\n-\t\t\tgcc_assert (insn_data[icode].operand[k].predicate\n-\t\t\t\t    == neon_struct_operand);\n-\n-\t\t\tswitch (1 << j)\n-\t\t\t  {\n-\t\t\t  case T_V8QI:\n-\t\t\t  case T_V16QI:\n-\t\t\t    eltype = const_intQI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V4HI:\n-\t\t\t  case T_V8HI:\n-\t\t\t    eltype = const_intHI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V2SI:\n-\t\t\t  case T_V4SI:\n-\t\t\t    eltype = const_intSI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V2SF:\n-\t\t\t  case T_V4SF:\n-\t\t\t    eltype = const_float_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_DI:\n-\t\t\t  case T_V2DI:\n-\t\t\t    eltype = const_intDI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  default: gcc_unreachable ();\n-\t\t\t  }\n-  \t\t      }\n-\t\t    else if (is_store && k == 0)\n-\t\t      {\n-\t\t        /* Similarly, Neon store patterns use operand 0 as\n-\t\t\t   the memory location to store to.  */\n-\t\t\tgcc_assert (insn_data[icode].operand[k].predicate\n-\t\t\t\t    == neon_struct_operand);\n-\n-\t\t\tswitch (1 << j)\n-\t\t\t  {\n-\t\t\t  case T_V8QI:\n-\t\t\t  case T_V16QI:\n-\t\t\t    eltype = intQI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V4HI:\n-\t\t\t  case T_V8HI:\n-\t\t\t    eltype = intHI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V2SI:\n-\t\t\t  case T_V4SI:\n-\t\t\t    eltype = intSI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V2SF:\n-\t\t\t  case T_V4SF:\n-\t\t\t    eltype = float_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_DI:\n-\t\t\t  case T_V2DI:\n-\t\t\t    eltype = intDI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  default: gcc_unreachable ();\n-\t\t\t  }\n-\t\t      }\n-\t\t    else\n-\t\t      {\n-\t\t\tswitch (insn_data[icode].operand[k].mode)\n-\t        \t  {\n-\t\t\t  case VOIDmode: eltype = void_type_node; break;\n-\t\t\t  /* Scalars.  */\n-\t\t\t  case QImode: eltype = neon_intQI_type_node; break;\n-\t\t\t  case HImode: eltype = neon_intHI_type_node; break;\n-\t\t\t  case SImode: eltype = neon_intSI_type_node; break;\n-\t\t\t  case SFmode: eltype = neon_float_type_node; break;\n-\t\t\t  case DImode: eltype = neon_intDI_type_node; break;\n-\t\t\t  case TImode: eltype = intTI_type_node; break;\n-\t\t\t  case EImode: eltype = intEI_type_node; break;\n-\t\t\t  case OImode: eltype = intOI_type_node; break;\n-\t\t\t  case CImode: eltype = intCI_type_node; break;\n-\t\t\t  case XImode: eltype = intXI_type_node; break;\n-\t\t\t  /* 64-bit vectors.  */\n-\t\t\t  case V8QImode: eltype = V8QI_type_node; break;\n-\t\t\t  case V4HImode: eltype = V4HI_type_node; break;\n-\t\t\t  case V2SImode: eltype = V2SI_type_node; break;\n-\t\t\t  case V2SFmode: eltype = V2SF_type_node; break;\n-\t\t\t  /* 128-bit vectors.  */\n-\t\t\t  case V16QImode: eltype = V16QI_type_node; break;\n-\t\t\t  case V8HImode: eltype = V8HI_type_node; break;\n-\t\t\t  case V4SImode: eltype = V4SI_type_node; break;\n-\t\t\t  case V4SFmode: eltype = V4SF_type_node; break;\n-\t\t\t  case V2DImode: eltype = V2DI_type_node; break;\n-\t\t\t  default: gcc_unreachable ();\n-\t\t\t  }\n-\t\t      }\n-\n-\t\t    if (k == 0 && !is_store)\n-\t              return_type = eltype;\n-\t\t    else\n-\t\t      args = tree_cons (NULL_TREE, eltype, args);\n-\t\t  }\n-\n-\t\tftype = build_function_type (return_type, args);\n-\t      }\n-\t      break;\n-\n-\t    case NEON_RESULTPAIR:\n-              {\n-                switch (insn_data[icode].operand[1].mode)\n-                  {\n-\t\t  case V8QImode: ftype = void_ftype_pv8qi_v8qi_v8qi; break;\n-                  case V4HImode: ftype = void_ftype_pv4hi_v4hi_v4hi; break;\n-                  case V2SImode: ftype = void_ftype_pv2si_v2si_v2si; break;\n-                  case V2SFmode: ftype = void_ftype_pv2sf_v2sf_v2sf; break;\n-                  case DImode: ftype = void_ftype_pdi_di_di; break;\n-                  case V16QImode: ftype = void_ftype_pv16qi_v16qi_v16qi; break;\n-                  case V8HImode: ftype = void_ftype_pv8hi_v8hi_v8hi; break;\n-                  case V4SImode: ftype = void_ftype_pv4si_v4si_v4si; break;\n-                  case V4SFmode: ftype = void_ftype_pv4sf_v4sf_v4sf; break;\n-                  case V2DImode: ftype = void_ftype_pv2di_v2di_v2di; break;\n-                  default: gcc_unreachable ();\n-                  }\n-              }\n-              break;\n+\tcase V8QImode:\n+\t  type = v8qi_ftype_v8qi_v8qi;\n+\t  break;\n+\tcase V4HImode:\n+\t  type = v4hi_ftype_v4hi_v4hi;\n+\t  break;\n+\tcase V2SImode:\n+\t  type = v2si_ftype_v2si_v2si;\n+\t  break;\n+\tcase DImode:\n+\t  type = di_ftype_di_di;\n+\t  break;\n \n-\t    case NEON_REINTERP:\n-              {\n-                /* We iterate over 5 doubleword types, then 5 quadword\n-                   types.  */\n-                int rhs = j % 5;\n-                switch (insn_data[icode].operand[0].mode)\n-                  {\n-                  case V8QImode: ftype = reinterp_ftype_dreg[0][rhs]; break;\n-                  case V4HImode: ftype = reinterp_ftype_dreg[1][rhs]; break;\n-                  case V2SImode: ftype = reinterp_ftype_dreg[2][rhs]; break;\n-                  case V2SFmode: ftype = reinterp_ftype_dreg[3][rhs]; break;\n-                  case DImode: ftype = reinterp_ftype_dreg[4][rhs]; break;\n-                  case V16QImode: ftype = reinterp_ftype_qreg[0][rhs]; break;\n-                  case V8HImode: ftype = reinterp_ftype_qreg[1][rhs]; break;\n-                  case V4SImode: ftype = reinterp_ftype_qreg[2][rhs]; break;\n-\t\t  case V4SFmode: ftype = reinterp_ftype_qreg[3][rhs]; break;\n-                  case V2DImode: ftype = reinterp_ftype_qreg[4][rhs]; break;\n-                  default: gcc_unreachable ();\n-                  }\n-              }\n-              break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n \n-            default:\n-              gcc_unreachable ();\n-            }\n+      def_mbuiltin (d->mask, d->name, type, d->code);\n+    }\n \n-          gcc_assert (ftype != NULL);\n+  /* Add the remaining MMX insns with somewhat more complicated types.  */\n+#define iwmmx_mbuiltin(NAME, TYPE, CODE)\t\t\t\\\n+  def_mbuiltin (FL_IWMMXT, \"__builtin_arm_\" NAME, (TYPE),\t\\\n+\t\tARM_BUILTIN_ ## CODE)\n+\n+  iwmmx_mbuiltin (\"wzero\", di_ftype_void, WZERO);\n+  iwmmx_mbuiltin (\"setwcx\", void_ftype_int_int, SETWCX);\n+  iwmmx_mbuiltin (\"getwcx\", int_ftype_int, GETWCX);\n+\n+  iwmmx_mbuiltin (\"wsllh\", v4hi_ftype_v4hi_di, WSLLH);\n+  iwmmx_mbuiltin (\"wsllw\", v2si_ftype_v2si_di, WSLLW);\n+  iwmmx_mbuiltin (\"wslld\", di_ftype_di_di, WSLLD);\n+  iwmmx_mbuiltin (\"wsllhi\", v4hi_ftype_v4hi_int, WSLLHI);\n+  iwmmx_mbuiltin (\"wsllwi\", v2si_ftype_v2si_int, WSLLWI);\n+  iwmmx_mbuiltin (\"wslldi\", di_ftype_di_int, WSLLDI);\n+\n+  iwmmx_mbuiltin (\"wsrlh\", v4hi_ftype_v4hi_di, WSRLH);\n+  iwmmx_mbuiltin (\"wsrlw\", v2si_ftype_v2si_di, WSRLW);\n+  iwmmx_mbuiltin (\"wsrld\", di_ftype_di_di, WSRLD);\n+  iwmmx_mbuiltin (\"wsrlhi\", v4hi_ftype_v4hi_int, WSRLHI);\n+  iwmmx_mbuiltin (\"wsrlwi\", v2si_ftype_v2si_int, WSRLWI);\n+  iwmmx_mbuiltin (\"wsrldi\", di_ftype_di_int, WSRLDI);\n+\n+  iwmmx_mbuiltin (\"wsrah\", v4hi_ftype_v4hi_di, WSRAH);\n+  iwmmx_mbuiltin (\"wsraw\", v2si_ftype_v2si_di, WSRAW);\n+  iwmmx_mbuiltin (\"wsrad\", di_ftype_di_di, WSRAD);\n+  iwmmx_mbuiltin (\"wsrahi\", v4hi_ftype_v4hi_int, WSRAHI);\n+  iwmmx_mbuiltin (\"wsrawi\", v2si_ftype_v2si_int, WSRAWI);\n+  iwmmx_mbuiltin (\"wsradi\", di_ftype_di_int, WSRADI);\n+\n+  iwmmx_mbuiltin (\"wrorh\", v4hi_ftype_v4hi_di, WRORH);\n+  iwmmx_mbuiltin (\"wrorw\", v2si_ftype_v2si_di, WRORW);\n+  iwmmx_mbuiltin (\"wrord\", di_ftype_di_di, WRORD);\n+  iwmmx_mbuiltin (\"wrorhi\", v4hi_ftype_v4hi_int, WRORHI);\n+  iwmmx_mbuiltin (\"wrorwi\", v2si_ftype_v2si_int, WRORWI);\n+  iwmmx_mbuiltin (\"wrordi\", di_ftype_di_int, WRORDI);\n+\n+  iwmmx_mbuiltin (\"wshufh\", v4hi_ftype_v4hi_int, WSHUFH);\n+\n+  iwmmx_mbuiltin (\"wsadb\", v2si_ftype_v8qi_v8qi, WSADB);\n+  iwmmx_mbuiltin (\"wsadh\", v2si_ftype_v4hi_v4hi, WSADH);\n+  iwmmx_mbuiltin (\"wsadbz\", v2si_ftype_v8qi_v8qi, WSADBZ);\n+  iwmmx_mbuiltin (\"wsadhz\", v2si_ftype_v4hi_v4hi, WSADHZ);\n+\n+  iwmmx_mbuiltin (\"textrmsb\", int_ftype_v8qi_int, TEXTRMSB);\n+  iwmmx_mbuiltin (\"textrmsh\", int_ftype_v4hi_int, TEXTRMSH);\n+  iwmmx_mbuiltin (\"textrmsw\", int_ftype_v2si_int, TEXTRMSW);\n+  iwmmx_mbuiltin (\"textrmub\", int_ftype_v8qi_int, TEXTRMUB);\n+  iwmmx_mbuiltin (\"textrmuh\", int_ftype_v4hi_int, TEXTRMUH);\n+  iwmmx_mbuiltin (\"textrmuw\", int_ftype_v2si_int, TEXTRMUW);\n+  iwmmx_mbuiltin (\"tinsrb\", v8qi_ftype_v8qi_int_int, TINSRB);\n+  iwmmx_mbuiltin (\"tinsrh\", v4hi_ftype_v4hi_int_int, TINSRH);\n+  iwmmx_mbuiltin (\"tinsrw\", v2si_ftype_v2si_int_int, TINSRW);\n+\n+  iwmmx_mbuiltin (\"waccb\", di_ftype_v8qi, WACCB);\n+  iwmmx_mbuiltin (\"wacch\", di_ftype_v4hi, WACCH);\n+  iwmmx_mbuiltin (\"waccw\", di_ftype_v2si, WACCW);\n+\n+  iwmmx_mbuiltin (\"tmovmskb\", int_ftype_v8qi, TMOVMSKB);\n+  iwmmx_mbuiltin (\"tmovmskh\", int_ftype_v4hi, TMOVMSKH);\n+  iwmmx_mbuiltin (\"tmovmskw\", int_ftype_v2si, TMOVMSKW);\n+\n+  iwmmx_mbuiltin (\"wpackhss\", v8qi_ftype_v4hi_v4hi, WPACKHSS);\n+  iwmmx_mbuiltin (\"wpackhus\", v8qi_ftype_v4hi_v4hi, WPACKHUS);\n+  iwmmx_mbuiltin (\"wpackwus\", v4hi_ftype_v2si_v2si, WPACKWUS);\n+  iwmmx_mbuiltin (\"wpackwss\", v4hi_ftype_v2si_v2si, WPACKWSS);\n+  iwmmx_mbuiltin (\"wpackdus\", v2si_ftype_di_di, WPACKDUS);\n+  iwmmx_mbuiltin (\"wpackdss\", v2si_ftype_di_di, WPACKDSS);\n+\n+  iwmmx_mbuiltin (\"wunpckehub\", v4hi_ftype_v8qi, WUNPCKEHUB);\n+  iwmmx_mbuiltin (\"wunpckehuh\", v2si_ftype_v4hi, WUNPCKEHUH);\n+  iwmmx_mbuiltin (\"wunpckehuw\", di_ftype_v2si, WUNPCKEHUW);\n+  iwmmx_mbuiltin (\"wunpckehsb\", v4hi_ftype_v8qi, WUNPCKEHSB);\n+  iwmmx_mbuiltin (\"wunpckehsh\", v2si_ftype_v4hi, WUNPCKEHSH);\n+  iwmmx_mbuiltin (\"wunpckehsw\", di_ftype_v2si, WUNPCKEHSW);\n+  iwmmx_mbuiltin (\"wunpckelub\", v4hi_ftype_v8qi, WUNPCKELUB);\n+  iwmmx_mbuiltin (\"wunpckeluh\", v2si_ftype_v4hi, WUNPCKELUH);\n+  iwmmx_mbuiltin (\"wunpckeluw\", di_ftype_v2si, WUNPCKELUW);\n+  iwmmx_mbuiltin (\"wunpckelsb\", v4hi_ftype_v8qi, WUNPCKELSB);\n+  iwmmx_mbuiltin (\"wunpckelsh\", v2si_ftype_v4hi, WUNPCKELSH);\n+  iwmmx_mbuiltin (\"wunpckelsw\", di_ftype_v2si, WUNPCKELSW);\n+\n+  iwmmx_mbuiltin (\"wmacs\", di_ftype_di_v4hi_v4hi, WMACS);\n+  iwmmx_mbuiltin (\"wmacsz\", di_ftype_v4hi_v4hi, WMACSZ);\n+  iwmmx_mbuiltin (\"wmacu\", di_ftype_di_v4hi_v4hi, WMACU);\n+  iwmmx_mbuiltin (\"wmacuz\", di_ftype_v4hi_v4hi, WMACUZ);\n+\n+  iwmmx_mbuiltin (\"walign\", v8qi_ftype_v8qi_v8qi_int, WALIGN);\n+  iwmmx_mbuiltin (\"tmia\", di_ftype_di_int_int, TMIA);\n+  iwmmx_mbuiltin (\"tmiaph\", di_ftype_di_int_int, TMIAPH);\n+  iwmmx_mbuiltin (\"tmiabb\", di_ftype_di_int_int, TMIABB);\n+  iwmmx_mbuiltin (\"tmiabt\", di_ftype_di_int_int, TMIABT);\n+  iwmmx_mbuiltin (\"tmiatb\", di_ftype_di_int_int, TMIATB);\n+  iwmmx_mbuiltin (\"tmiatt\", di_ftype_di_int_int, TMIATT);\n+\n+#undef iwmmx_mbuiltin\n+}\n \n-          sprintf (namebuf, \"__builtin_neon_%s%s\", d->name, modenames[j]);\n+static void\n+arm_init_tls_builtins (void)\n+{\n+  tree ftype, decl;\n \n-          add_builtin_function (namebuf, ftype, fcode++, BUILT_IN_MD, NULL,\n-\t\t\t\tNULL_TREE);\n-        }\n-    }\n+  ftype = build_function_type (ptr_type_node, void_list_node);\n+  decl = add_builtin_function (\"__builtin_thread_pointer\", ftype,\n+\t\t\t       ARM_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\t       NULL, NULL_TREE);\n+  TREE_NOTHROW (decl) = 1;\n+  TREE_READONLY (decl) = 1;\n+  arm_builtin_decls[ARM_BUILTIN_THREAD_POINTER] = decl;\n }\n \n static void\n@@ -19095,6 +19278,17 @@ arm_init_builtins (void)\n     arm_init_fp16_builtins ();\n }\n \n+/* Return the ARM builtin for CODE.  */\n+\n+static tree\n+arm_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n+{\n+  if (code >= ARM_BUILTIN_MAX)\n+    return error_mark_node;\n+\n+  return arm_builtin_decls[code];\n+}\n+\n /* Implement TARGET_INVALID_PARAMETER_TYPE.  */\n \n static const char *\n@@ -19246,58 +19440,6 @@ arm_expand_unop_builtin (enum insn_code icode,\n   return target;\n }\n \n-static int\n-neon_builtin_compare (const void *a, const void *b)\n-{\n-  const neon_builtin_datum *const key = (const neon_builtin_datum *) a;\n-  const neon_builtin_datum *const memb = (const neon_builtin_datum *) b;\n-  unsigned int soughtcode = key->base_fcode;\n-\n-  if (soughtcode >= memb->base_fcode\n-      && soughtcode < memb->base_fcode + memb->num_vars)\n-    return 0;\n-  else if (soughtcode < memb->base_fcode)\n-    return -1;\n-  else\n-    return 1;\n-}\n-\n-static enum insn_code\n-locate_neon_builtin_icode (int fcode, neon_itype *itype,\n-\t\t\t   enum neon_builtin_type_bits *type_bit)\n-{\n-  neon_builtin_datum key\n-    = { NULL, (neon_itype) 0, 0, { CODE_FOR_nothing }, 0, 0 };\n-  neon_builtin_datum *found;\n-  int idx, type, ntypes;\n-\n-  key.base_fcode = fcode;\n-  found = (neon_builtin_datum *)\n-    bsearch (&key, &neon_builtin_data[0], ARRAY_SIZE (neon_builtin_data),\n-\t\t   sizeof (neon_builtin_data[0]), neon_builtin_compare);\n-  gcc_assert (found);\n-  idx = fcode - (int) found->base_fcode;\n-  gcc_assert (idx >= 0 && idx < T_MAX && idx < (int)found->num_vars);\n-\n-  if (itype)\n-    *itype = found->itype;\n-\n-  if (type_bit)\n-    {\n-      ntypes = 0;\n-      for (type = 0; type < T_MAX; type++)\n-\tif (found->bits & (1 << type))\n-\t  {\n-\t    if (ntypes == idx)\n-\t      break;\n-\t    ntypes++;\n-\t  }\n-      gcc_assert (type < T_MAX);\n-      *type_bit = (enum neon_builtin_type_bits) (1 << type);\n-    }\n-  return found->codes[idx];\n-}\n-\n typedef enum {\n   NEON_ARG_COPY_TO_REG,\n   NEON_ARG_CONSTANT,\n@@ -19311,14 +19453,14 @@ typedef enum {\n    and return an expression for the accessed memory.\n \n    The intrinsic function operates on a block of registers that has\n-   mode REG_MODE.  This block contains vectors of type TYPE_BIT.\n+   mode REG_MODE.  This block contains vectors of type TYPE_MODE.\n    The function references the memory at EXP in mode MEM_MODE;\n    this mode may be BLKmode if no more suitable mode is available.  */\n \n static tree\n neon_dereference_pointer (tree exp, enum machine_mode mem_mode,\n \t\t\t  enum machine_mode reg_mode,\n-\t\t\t  enum neon_builtin_type_bits type_bit)\n+\t\t\t  neon_builtin_type_mode type_mode)\n {\n   HOST_WIDE_INT reg_size, vector_size, nvectors, nelems;\n   tree elem_type, upper_bound, array_type;\n@@ -19327,8 +19469,8 @@ neon_dereference_pointer (tree exp, enum machine_mode mem_mode,\n   reg_size = GET_MODE_SIZE (reg_mode);\n \n   /* Work out the size of each vector in bytes.  */\n-  gcc_assert (type_bit & (T_DREG | T_QREG));\n-  vector_size = (type_bit & T_QREG ? 16 : 8);\n+  gcc_assert (TYPE_MODE_BIT (type_mode) & (TB_DREG | TB_QREG));\n+  vector_size = (TYPE_MODE_BIT (type_mode) & TB_QREG ? 16 : 8);\n \n   /* Work out how many vectors there are.  */\n   gcc_assert (reg_size % vector_size == 0);\n@@ -19359,7 +19501,7 @@ neon_dereference_pointer (tree exp, enum machine_mode mem_mode,\n /* Expand a Neon builtin.  */\n static rtx\n arm_expand_neon_args (rtx target, int icode, int have_retval,\n-\t\t      enum neon_builtin_type_bits type_bit,\n+\t\t      neon_builtin_type_mode type_mode,\n \t\t      tree exp, ...)\n {\n   va_list ap;\n@@ -19395,7 +19537,7 @@ arm_expand_neon_args (rtx target, int icode, int have_retval,\n             {\n               other_mode = insn_data[icode].operand[1 - opno].mode;\n               arg[argc] = neon_dereference_pointer (arg[argc], mode[argc],\n-                                                    other_mode, type_bit);\n+                                                    other_mode, type_mode);\n             }\n           op[argc] = expand_normal (arg[argc]);\n \n@@ -19505,16 +19647,17 @@ arm_expand_neon_args (rtx target, int icode, int have_retval,\n static rtx\n arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n {\n-  neon_itype itype;\n-  enum neon_builtin_type_bits type_bit;\n-  enum insn_code icode = locate_neon_builtin_icode (fcode, &itype, &type_bit);\n+  neon_builtin_datum *d = &neon_builtin_data[fcode - ARM_BUILTIN_NEON_BASE];\n+  neon_itype itype = d->itype;\n+  enum insn_code icode = d->code;\n+  neon_builtin_type_mode type_mode = d->mode;\n \n   switch (itype)\n     {\n     case NEON_UNOP:\n     case NEON_CONVERT:\n     case NEON_DUPLANE:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_CONSTANT, NEON_ARG_STOP);\n \n     case NEON_BINOP:\n@@ -19524,89 +19667,89 @@ arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n     case NEON_SCALARMULH:\n     case NEON_SHIFTINSERT:\n     case NEON_LOGICBINOP:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG, NEON_ARG_CONSTANT,\n         NEON_ARG_STOP);\n \n     case NEON_TERNOP:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG,\n         NEON_ARG_CONSTANT, NEON_ARG_STOP);\n \n     case NEON_GETLANE:\n     case NEON_FIXCONV:\n     case NEON_SHIFTIMM:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_CONSTANT, NEON_ARG_CONSTANT,\n         NEON_ARG_STOP);\n \n     case NEON_CREATE:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_STOP);\n \n     case NEON_DUP:\n     case NEON_SPLIT:\n     case NEON_REINTERP:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_STOP);\n \n     case NEON_COMBINE:\n     case NEON_VTBL:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG, NEON_ARG_STOP);\n \n     case NEON_RESULTPAIR:\n-      return arm_expand_neon_args (target, icode, 0, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 0, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG,\n         NEON_ARG_STOP);\n \n     case NEON_LANEMUL:\n     case NEON_LANEMULL:\n     case NEON_LANEMULH:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG, NEON_ARG_CONSTANT,\n         NEON_ARG_CONSTANT, NEON_ARG_STOP);\n \n     case NEON_LANEMAC:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG,\n         NEON_ARG_CONSTANT, NEON_ARG_CONSTANT, NEON_ARG_STOP);\n \n     case NEON_SHIFTACC:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG, NEON_ARG_CONSTANT,\n         NEON_ARG_CONSTANT, NEON_ARG_STOP);\n \n     case NEON_SCALARMAC:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n \tNEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG,\n         NEON_ARG_CONSTANT, NEON_ARG_STOP);\n \n     case NEON_SELECT:\n     case NEON_VTBX:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n \tNEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG, NEON_ARG_COPY_TO_REG,\n         NEON_ARG_STOP);\n \n     case NEON_LOAD1:\n     case NEON_LOADSTRUCT:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n \tNEON_ARG_MEMORY, NEON_ARG_STOP);\n \n     case NEON_LOAD1LANE:\n     case NEON_LOADSTRUCTLANE:\n-      return arm_expand_neon_args (target, icode, 1, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 1, type_mode, exp,\n \tNEON_ARG_MEMORY, NEON_ARG_COPY_TO_REG, NEON_ARG_CONSTANT,\n \tNEON_ARG_STOP);\n \n     case NEON_STORE1:\n     case NEON_STORESTRUCT:\n-      return arm_expand_neon_args (target, icode, 0, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 0, type_mode, exp,\n \tNEON_ARG_MEMORY, NEON_ARG_COPY_TO_REG, NEON_ARG_STOP);\n \n     case NEON_STORE1LANE:\n     case NEON_STORESTRUCTLANE:\n-      return arm_expand_neon_args (target, icode, 0, type_bit, exp,\n+      return arm_expand_neon_args (target, icode, 0, type_mode, exp,\n \tNEON_ARG_MEMORY, NEON_ARG_COPY_TO_REG, NEON_ARG_CONSTANT,\n \tNEON_ARG_STOP);\n     }"}, {"sha": "e45b9274323f48d5fb88f543af20d4f808da3cbe", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 172, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229a1c5999abbd0e19302c470d27aa0ed867f4f5/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229a1c5999abbd0e19302c470d27aa0ed867f4f5/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=229a1c5999abbd0e19302c470d27aa0ed867f4f5", "patch": "@@ -2249,178 +2249,6 @@ extern int making_const_table;\n    : arm_gen_return_addr_mask ())\n \n \f\n-/* Neon defines builtins from ARM_BUILTIN_MAX upwards, though they don't have\n-   symbolic names defined here (which would require too much duplication).\n-   FIXME?  */\n-enum arm_builtins\n-{\n-  ARM_BUILTIN_GETWCX,\n-  ARM_BUILTIN_SETWCX,\n-\n-  ARM_BUILTIN_WZERO,\n-\n-  ARM_BUILTIN_WAVG2BR,\n-  ARM_BUILTIN_WAVG2HR,\n-  ARM_BUILTIN_WAVG2B,\n-  ARM_BUILTIN_WAVG2H,\n-\n-  ARM_BUILTIN_WACCB,\n-  ARM_BUILTIN_WACCH,\n-  ARM_BUILTIN_WACCW,\n-\n-  ARM_BUILTIN_WMACS,\n-  ARM_BUILTIN_WMACSZ,\n-  ARM_BUILTIN_WMACU,\n-  ARM_BUILTIN_WMACUZ,\n-\n-  ARM_BUILTIN_WSADB,\n-  ARM_BUILTIN_WSADBZ,\n-  ARM_BUILTIN_WSADH,\n-  ARM_BUILTIN_WSADHZ,\n-\n-  ARM_BUILTIN_WALIGN,\n-\n-  ARM_BUILTIN_TMIA,\n-  ARM_BUILTIN_TMIAPH,\n-  ARM_BUILTIN_TMIABB,\n-  ARM_BUILTIN_TMIABT,\n-  ARM_BUILTIN_TMIATB,\n-  ARM_BUILTIN_TMIATT,\n-\n-  ARM_BUILTIN_TMOVMSKB,\n-  ARM_BUILTIN_TMOVMSKH,\n-  ARM_BUILTIN_TMOVMSKW,\n-\n-  ARM_BUILTIN_TBCSTB,\n-  ARM_BUILTIN_TBCSTH,\n-  ARM_BUILTIN_TBCSTW,\n-\n-  ARM_BUILTIN_WMADDS,\n-  ARM_BUILTIN_WMADDU,\n-\n-  ARM_BUILTIN_WPACKHSS,\n-  ARM_BUILTIN_WPACKWSS,\n-  ARM_BUILTIN_WPACKDSS,\n-  ARM_BUILTIN_WPACKHUS,\n-  ARM_BUILTIN_WPACKWUS,\n-  ARM_BUILTIN_WPACKDUS,\n-\n-  ARM_BUILTIN_WADDB,\n-  ARM_BUILTIN_WADDH,\n-  ARM_BUILTIN_WADDW,\n-  ARM_BUILTIN_WADDSSB,\n-  ARM_BUILTIN_WADDSSH,\n-  ARM_BUILTIN_WADDSSW,\n-  ARM_BUILTIN_WADDUSB,\n-  ARM_BUILTIN_WADDUSH,\n-  ARM_BUILTIN_WADDUSW,\n-  ARM_BUILTIN_WSUBB,\n-  ARM_BUILTIN_WSUBH,\n-  ARM_BUILTIN_WSUBW,\n-  ARM_BUILTIN_WSUBSSB,\n-  ARM_BUILTIN_WSUBSSH,\n-  ARM_BUILTIN_WSUBSSW,\n-  ARM_BUILTIN_WSUBUSB,\n-  ARM_BUILTIN_WSUBUSH,\n-  ARM_BUILTIN_WSUBUSW,\n-\n-  ARM_BUILTIN_WAND,\n-  ARM_BUILTIN_WANDN,\n-  ARM_BUILTIN_WOR,\n-  ARM_BUILTIN_WXOR,\n-\n-  ARM_BUILTIN_WCMPEQB,\n-  ARM_BUILTIN_WCMPEQH,\n-  ARM_BUILTIN_WCMPEQW,\n-  ARM_BUILTIN_WCMPGTUB,\n-  ARM_BUILTIN_WCMPGTUH,\n-  ARM_BUILTIN_WCMPGTUW,\n-  ARM_BUILTIN_WCMPGTSB,\n-  ARM_BUILTIN_WCMPGTSH,\n-  ARM_BUILTIN_WCMPGTSW,\n-\n-  ARM_BUILTIN_TEXTRMSB,\n-  ARM_BUILTIN_TEXTRMSH,\n-  ARM_BUILTIN_TEXTRMSW,\n-  ARM_BUILTIN_TEXTRMUB,\n-  ARM_BUILTIN_TEXTRMUH,\n-  ARM_BUILTIN_TEXTRMUW,\n-  ARM_BUILTIN_TINSRB,\n-  ARM_BUILTIN_TINSRH,\n-  ARM_BUILTIN_TINSRW,\n-\n-  ARM_BUILTIN_WMAXSW,\n-  ARM_BUILTIN_WMAXSH,\n-  ARM_BUILTIN_WMAXSB,\n-  ARM_BUILTIN_WMAXUW,\n-  ARM_BUILTIN_WMAXUH,\n-  ARM_BUILTIN_WMAXUB,\n-  ARM_BUILTIN_WMINSW,\n-  ARM_BUILTIN_WMINSH,\n-  ARM_BUILTIN_WMINSB,\n-  ARM_BUILTIN_WMINUW,\n-  ARM_BUILTIN_WMINUH,\n-  ARM_BUILTIN_WMINUB,\n-\n-  ARM_BUILTIN_WMULUM,\n-  ARM_BUILTIN_WMULSM,\n-  ARM_BUILTIN_WMULUL,\n-\n-  ARM_BUILTIN_PSADBH,\n-  ARM_BUILTIN_WSHUFH,\n-\n-  ARM_BUILTIN_WSLLH,\n-  ARM_BUILTIN_WSLLW,\n-  ARM_BUILTIN_WSLLD,\n-  ARM_BUILTIN_WSRAH,\n-  ARM_BUILTIN_WSRAW,\n-  ARM_BUILTIN_WSRAD,\n-  ARM_BUILTIN_WSRLH,\n-  ARM_BUILTIN_WSRLW,\n-  ARM_BUILTIN_WSRLD,\n-  ARM_BUILTIN_WRORH,\n-  ARM_BUILTIN_WRORW,\n-  ARM_BUILTIN_WRORD,\n-  ARM_BUILTIN_WSLLHI,\n-  ARM_BUILTIN_WSLLWI,\n-  ARM_BUILTIN_WSLLDI,\n-  ARM_BUILTIN_WSRAHI,\n-  ARM_BUILTIN_WSRAWI,\n-  ARM_BUILTIN_WSRADI,\n-  ARM_BUILTIN_WSRLHI,\n-  ARM_BUILTIN_WSRLWI,\n-  ARM_BUILTIN_WSRLDI,\n-  ARM_BUILTIN_WRORHI,\n-  ARM_BUILTIN_WRORWI,\n-  ARM_BUILTIN_WRORDI,\n-\n-  ARM_BUILTIN_WUNPCKIHB,\n-  ARM_BUILTIN_WUNPCKIHH,\n-  ARM_BUILTIN_WUNPCKIHW,\n-  ARM_BUILTIN_WUNPCKILB,\n-  ARM_BUILTIN_WUNPCKILH,\n-  ARM_BUILTIN_WUNPCKILW,\n-\n-  ARM_BUILTIN_WUNPCKEHSB,\n-  ARM_BUILTIN_WUNPCKEHSH,\n-  ARM_BUILTIN_WUNPCKEHSW,\n-  ARM_BUILTIN_WUNPCKEHUB,\n-  ARM_BUILTIN_WUNPCKEHUH,\n-  ARM_BUILTIN_WUNPCKEHUW,\n-  ARM_BUILTIN_WUNPCKELSB,\n-  ARM_BUILTIN_WUNPCKELSH,\n-  ARM_BUILTIN_WUNPCKELSW,\n-  ARM_BUILTIN_WUNPCKELUB,\n-  ARM_BUILTIN_WUNPCKELUH,\n-  ARM_BUILTIN_WUNPCKELUW,\n-\n-  ARM_BUILTIN_THREAD_POINTER,\n-\n-  ARM_BUILTIN_NEON_BASE,\n-\n-  ARM_BUILTIN_MAX = ARM_BUILTIN_NEON_BASE  /* FIXME: Wrong!  */\n-};\n-\n /* Do not emit .note.GNU-stack by default.  */\n #ifndef NEED_INDICATE_EXEC_STACK\n #define NEED_INDICATE_EXEC_STACK\t0"}]}