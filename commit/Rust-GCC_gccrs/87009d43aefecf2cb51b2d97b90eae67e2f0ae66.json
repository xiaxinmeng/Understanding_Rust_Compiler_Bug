{"sha": "87009d43aefecf2cb51b2d97b90eae67e2f0ae66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwMDlkNDNhZWZlY2YyY2I1MWIyZDk3YjkwZWFlNjdlMmYwYWU2Ng==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2006-10-31T17:59:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T17:59:12Z"}, "message": "g-catiio.ads, [...] (Value): New function.\n\n2006-10-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* g-catiio.ads, g-catiio.adb (Value): New function.\n\tGiven an input String, try and parse a valid Time value.\n\nFrom-SVN: r118274", "tree": {"sha": "584cf088a2d058c9101eef151829cbb616cab5cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/584cf088a2d058c9101eef151829cbb616cab5cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87009d43aefecf2cb51b2d97b90eae67e2f0ae66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87009d43aefecf2cb51b2d97b90eae67e2f0ae66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87009d43aefecf2cb51b2d97b90eae67e2f0ae66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87009d43aefecf2cb51b2d97b90eae67e2f0ae66/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88b32fc3a7728aac518bb52c53cb7596c49b720c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b32fc3a7728aac518bb52c53cb7596c49b720c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b32fc3a7728aac518bb52c53cb7596c49b720c"}], "stats": {"total": 222, "additions": 202, "deletions": 20}, "files": [{"sha": "585caea721dbf3ccda7f9e7b703c411015daccda", "filename": "gcc/ada/g-catiio.adb", "status": "modified", "additions": 186, "deletions": 15, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87009d43aefecf2cb51b2d97b90eae67e2f0ae66/gcc%2Fada%2Fg-catiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87009d43aefecf2cb51b2d97b90eae67e2f0ae66/gcc%2Fada%2Fg-catiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-catiio.adb?ref=87009d43aefecf2cb51b2d97b90eae67e2f0ae66", "patch": "@@ -8,10 +8,6 @@\n --                                                                          --\n --                     Copyright (C) 1999-2006, AdaCore                     --\n --                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n -- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n@@ -76,7 +72,7 @@ package body GNAT.Calendar.Time_IO is\n \n    function Image (Str : String; Length : Natural := 0) return String;\n    --  Return Str capitalized and cut to length number of characters. If\n-   --  length is set to 0 it does not cut it.\n+   --  length is 0, then no cut operation is performed.\n \n    function Image\n      (N       : Sec_Number;\n@@ -129,7 +125,8 @@ package body GNAT.Calendar.Time_IO is\n    is\n       use Ada.Characters.Handling;\n       Local : constant String :=\n-                To_Upper (Str (1)) & To_Lower (Str (2 .. Str'Last));\n+                To_Upper (Str (Str'First)) &\n+                  To_Lower (Str (Str'First + 1 .. Str'Last));\n    begin\n       if Length = 0 then\n          return Local;\n@@ -214,7 +211,6 @@ package body GNAT.Calendar.Time_IO is\n          --  A directive has the following format \"%[-_].\"\n \n          if Picture (P) = '%' then\n-\n             Padding := Zero;\n \n             if P = Picture'Last then\n@@ -291,17 +287,17 @@ package body GNAT.Calendar.Time_IO is\n                     Image (Second, Padding, Length => 2) & ' ' &\n                     Am_Pm (Hour);\n \n-               --   Seconds  since 1970-01-01  00:00:00 UTC\n+               --   Seconds since 1970-01-01  00:00:00 UTC\n                --   (a nonstandard extension)\n \n                when 's' =>\n                   declare\n                      Sec : constant Sec_Number :=\n-                             Sec_Number (Julian_Day (Year, Month, Day) -\n-                                       Julian_Day (1970, 1, 1)) * 86_400\n-                                         + Sec_Number (Hour) * 3_600\n-                                         + Sec_Number (Minute) * 60\n-                                         + Sec_Number (Second);\n+                             Sec_Number (Julian_Day (Year, Month, Day)\n+                                          - Julian_Day (1970, 1, 1)) * 86_400\n+                                          + Sec_Number (Hour) * 3_600\n+                                          + Sec_Number (Minute) * 60\n+                                          + Sec_Number (Second);\n \n                   begin\n                      Result := Result & Image (Sec, None);\n@@ -349,7 +345,7 @@ package body GNAT.Calendar.Time_IO is\n \n                when 'T' =>\n                   Result := Result &\n-                    Image (Hour, Padding, Length => 2) & ':' &\n+                    Image (Hour, Padding, Length => 2)   & ':' &\n                     Image (Minute, Padding, Length => 2) & ':' &\n                     Image (Second, Padding, Length => 2);\n \n@@ -373,7 +369,7 @@ package body GNAT.Calendar.Time_IO is\n                     Image (Month_Name'Image (Month_Name'Val (Month - 1)), 3);\n \n                --  Locale's full month name, variable length\n-               --  (January..December)\n+               --  (January..December).\n \n                when 'B' =>\n                   Result := Result &\n@@ -483,6 +479,181 @@ package body GNAT.Calendar.Time_IO is\n       return To_String (Result);\n    end Image;\n \n+   -----------\n+   -- Value --\n+   -----------\n+\n+   function Value (Date : String) return Ada.Calendar.Time is\n+      D          : String (1 .. 19);\n+      D_Length   : constant Natural := Date'Length;\n+\n+      Year       : Year_Number;\n+      Month      : Month_Number;\n+      Day        : Day_Number;\n+      Hour       : Hour_Number;\n+      Minute     : Minute_Number;\n+      Second     : Second_Number;\n+      Sub_Second : Second_Duration;\n+\n+      procedure Extract_Date\n+        (Year  : out Year_Number;\n+         Month : out Month_Number;\n+         Day   : out Day_Number;\n+         Y2K   : Boolean := False);\n+      --  Try and extract a date value from string D. Set Y2K to True to\n+      --  account for the 20YY case. Raise Constraint_Error if the portion\n+      --  of D corresponding to the date is not well formatted.\n+\n+      procedure Extract_Time\n+        (Index       : Positive;\n+         Hour        : out Hour_Number;\n+         Minute      : out Minute_Number;\n+         Second      : out Second_Number;\n+         Check_Space : Boolean := False);\n+      --  Try and extract a time value from string D starting from position\n+      --  Index. Set Check_Space to True to check whether the character at\n+      --  Index - 1 is a space. Raise Constraint_Error if the portion of D\n+      --  corresponding to the date is not well formatted.\n+\n+      ------------------\n+      -- Extract_Date --\n+      ------------------\n+\n+      procedure Extract_Date\n+        (Year  : out Year_Number;\n+         Month : out Month_Number;\n+         Day   : out Day_Number;\n+         Y2K   : Boolean := False)\n+      is\n+         Delim_Index : Positive := 5;\n+\n+      begin\n+         if Y2K then\n+            Delim_Index := 3;\n+         end if;\n+\n+         if (D (Delim_Index) /= '-' or else D (Delim_Index + 3) /= '-')\n+           and then\n+            (D (Delim_Index) /= '/' or else D (Delim_Index + 3) /= '/')\n+         then\n+            raise Constraint_Error;\n+         end if;\n+\n+         if Y2K then\n+            Year  := Year_Number'Value (\"20\" & D (1 .. 2));\n+            Month := Month_Number'Value       (D (4 .. 5));\n+            Day   := Day_Number'Value         (D (7 .. 8));\n+         else\n+            Year  := Year_Number'Value  (D (1 .. 4));\n+            Month := Month_Number'Value (D (6 .. 7));\n+            Day   := Day_Number'Value   (D (9 .. 10));\n+         end if;\n+      end Extract_Date;\n+\n+      ------------------\n+      -- Extract_Time --\n+      ------------------\n+\n+      procedure Extract_Time\n+        (Index       : Positive;\n+         Hour        : out Hour_Number;\n+         Minute      : out Minute_Number;\n+         Second      : out Second_Number;\n+         Check_Space : Boolean := False) is\n+\n+      begin\n+         if Check_Space and then D (Index - 1) /= ' ' then\n+            raise Constraint_Error;\n+         end if;\n+\n+         if D (Index + 2) /= ':' or else D (Index + 5) /= ':' then\n+            raise Constraint_Error;\n+         end if;\n+\n+         Hour   := Hour_Number'Value   (D (Index     .. Index + 1));\n+         Minute := Minute_Number'Value (D (Index + 3 .. Index + 4));\n+         Second := Second_Number'Value (D (Index + 6 .. Index + 7));\n+      end Extract_Time;\n+\n+   --  Start of processing for Value\n+\n+   begin\n+      Split (Clock, Year, Month, Day, Hour, Minute, Second, Sub_Second);\n+      Sub_Second := 0.0;\n+\n+      --  Length checks\n+\n+      if D_Length /= 8\n+        and then D_Length /= 10\n+        and then D_Length /= 17\n+        and then D_Length /= 19\n+      then\n+         raise Constraint_Error;\n+      end if;\n+\n+      --  After the correct length has been determined, it is safe to create\n+      --  a local string copy in order to avoid String'First N arithmetic.\n+\n+      D (1 .. D_Length) := Date;\n+\n+      --  Case 1:\n+\n+      --    hh:mm:ss\n+      --    yy*mm*dd\n+\n+      if D_Length = 8 then\n+\n+         if D (3) = ':' then\n+            Extract_Time (1, Hour, Minute, Second);\n+         else\n+            Extract_Date (Year, Month, Day, True);\n+            Hour   := 0;\n+            Minute := 0;\n+            Second := 0;\n+         end if;\n+\n+      --  Case 2:\n+\n+      --    yyyy*mm*dd\n+\n+      elsif D_Length = 10 then\n+         Extract_Date (Year, Month, Day);\n+         Hour   := 0;\n+         Minute := 0;\n+         Second := 0;\n+\n+      --  Case 3:\n+\n+      --    yy*mm*dd hh:mm:ss\n+\n+      elsif D_Length = 17 then\n+         Extract_Date (Year, Month, Day, True);\n+         Extract_Time (10, Hour, Minute, Second, True);\n+\n+      --  Case 4:\n+\n+      --    yyyy*mm*dd hh:mm:ss\n+\n+      else\n+         Extract_Date (Year, Month, Day);\n+         Extract_Time (12, Hour, Minute, Second, True);\n+      end if;\n+\n+      --  Sanity checks\n+\n+      if not Year'Valid\n+        or else not Month'Valid\n+        or else not Day'Valid\n+        or else not Hour'Valid\n+        or else not Minute'Valid\n+        or else not Second'Valid\n+      then\n+         raise Constraint_Error;\n+      end if;\n+\n+      return Time_Of (Year, Month, Day, Hour, Minute, Second, Sub_Second);\n+   end Value;\n+\n    --------------\n    -- Put_Time --\n    --------------"}, {"sha": "0ed4f5e6e1f9d343572954fbd1b9aebad2c41f9b", "filename": "gcc/ada/g-catiio.ads", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87009d43aefecf2cb51b2d97b90eae67e2f0ae66/gcc%2Fada%2Fg-catiio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87009d43aefecf2cb51b2d97b90eae67e2f0ae66/gcc%2Fada%2Fg-catiio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-catiio.ads?ref=87009d43aefecf2cb51b2d97b90eae67e2f0ae66", "patch": "@@ -6,11 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2005, AdaCore                     --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n+--                     Copyright (C) 1999-2006, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -120,6 +116,21 @@ package GNAT.Calendar.Time_IO is\n    --  Return Date as a string with format Picture. Raise Picture_Error if\n    --  picture string is wrong.\n \n+   function Value (Date : String) return Ada.Calendar.Time;\n+   --  Parse the string Date and return its equivalent as a Time value. The\n+   --  following formats are supported:\n+   --\n+   --     yyyy*mm*dd hh:mm:ss  - Delimiter '*' is either '-' or '/'\n+   --     yyyy*mm*dd           - The time of day is set to 00:00:00\n+   --\n+   --     yy*mm*dd hh:mm:ss    - Year is assumend to be 20YY\n+   --     yy*mm*dd             - The time of day is set to 00:00:00\n+   --\n+   --     hh:mm:ss             - Date is the current date\n+   --\n+   --  Constraint_Error is raised if the input string is malformatted or\n+   --  the resulting time is not valid.\n+\n    procedure Put_Time\n      (Date    : Ada.Calendar.Time;\n       Picture : Picture_String);"}]}