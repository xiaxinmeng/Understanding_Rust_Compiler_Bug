{"sha": "cd4341ef953bc5697917b3e6e43c59be03da0bee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q0MzQxZWY5NTNiYzU2OTc5MTdiM2U2ZTQzYzU5YmUwM2RhMGJlZQ==", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2021-05-25T12:12:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-08T13:34:18Z"}, "message": "[Ada] Prevent crash on inspection point for unfrozen entity\n\ngcc/ada/\n\n\t* exp_prag.adb (Expand_Pragma_Inspection_Point): After expansion\n\tof the Inspection_Point pragma, check if referenced entities\n\tthat have a freeze node are already frozen. If they aren't, emit\n\ta warning and turn the pragma into a no-op.", "tree": {"sha": "265e12f8c9985d08f761fbe484821f81c8a69f50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/265e12f8c9985d08f761fbe484821f81c8a69f50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd4341ef953bc5697917b3e6e43c59be03da0bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4341ef953bc5697917b3e6e43c59be03da0bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd4341ef953bc5697917b3e6e43c59be03da0bee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4341ef953bc5697917b3e6e43c59be03da0bee/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "242c0f4772c6697ba0b27853f153a13970bbded9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/242c0f4772c6697ba0b27853f153a13970bbded9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/242c0f4772c6697ba0b27853f153a13970bbded9"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "f686395a9ef3fea5cec58300f3331eb87fea4886", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4341ef953bc5697917b3e6e43c59be03da0bee/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4341ef953bc5697917b3e6e43c59be03da0bee/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=cd4341ef953bc5697917b3e6e43c59be03da0bee", "patch": "@@ -2361,6 +2361,7 @@ package body Exp_Prag is\n       S     : Entity_Id;\n       E     : Entity_Id;\n \n+      Remove_Inspection_Point : Boolean := False;\n    begin\n       if No (Pragma_Argument_Associations (N)) then\n          A := New_List;\n@@ -2400,6 +2401,36 @@ package body Exp_Prag is\n          Expand (Expression (Assoc));\n          Next (Assoc);\n       end loop;\n+\n+      --  If any of the references have a freeze node, it must appear before\n+      --  pragma Inspection_Point, otherwise the entity won't be available when\n+      --  Gigi processes Inspection_Point.\n+      --  When this requirement isn't met, turn the pragma into a no-op.\n+\n+      Assoc := First (Pragma_Argument_Associations (N));\n+      while Present (Assoc) loop\n+\n+         if Present (Freeze_Node (Entity (Expression (Assoc)))) and then\n+           not Is_Frozen (Entity (Expression (Assoc)))\n+         then\n+            Error_Msg_NE (\"?inspection point references unfrozen object &\",\n+              Assoc,\n+              Entity (Expression (Assoc)));\n+            Remove_Inspection_Point := True;\n+         end if;\n+\n+         Next (Assoc);\n+      end loop;\n+\n+      if Remove_Inspection_Point then\n+         Error_Msg_N (\"\\pragma will be ignored\", N);\n+\n+         --  We can't just remove the pragma from the tree as it might be\n+         --  iterated over by the caller. Turn it into a null statement\n+         --  instead.\n+\n+         Rewrite (N, Make_Null_Statement (Sloc (N)));\n+      end if;\n    end Expand_Pragma_Inspection_Point;\n \n    --------------------------------------"}]}