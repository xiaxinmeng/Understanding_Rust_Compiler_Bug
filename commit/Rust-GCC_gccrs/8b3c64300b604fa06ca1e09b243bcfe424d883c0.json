{"sha": "8b3c64300b604fa06ca1e09b243bcfe424d883c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIzYzY0MzAwYjYwNGZhMDZjYTFlMDliMjQzYmNmZTQyNGQ4ODNjMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T10:06:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T10:06:14Z"}, "message": "[multiple changes]\n\n2011-08-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* scos.ads: Update comments.\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Type): Inherit the convention from the\n\tbase type, because the parent may be a subtype of a private type whose\n\tconvention is established in a private part.\n\n2011-08-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Wrap the return\n\tstatement in a block when the expansion of the return expression has\n\tcreated a finalization chain.\n\t* freeze.adb (Freeze_Expression): Alphabetize all choices associated\n\twith the parent node.\n\tAdd N_Extended_Return_Statement to handle the case where a transient\n\tobject declaration appears in the Return_Object_Declarations list of\n\tan extended return statement.\n\n2011-08-02  Matthew Gingell  <gingell@adacore.com>\n\n\t* adaint.c (__gnat_is_symbolic_link_attr): Supress warning on possibly\n\tunused parameter 'name'.\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_elim.adb (Set_Eliminated): If the overridden operation is an\n\tinherited operation, check whether its alias, which is the source\n\toperastion that it renames, has been marked eliminated.\n\nFrom-SVN: r177121", "tree": {"sha": "32596f0b0a7fd593fddbf191b5cca6d3fdbd88f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32596f0b0a7fd593fddbf191b5cca6d3fdbd88f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b3c64300b604fa06ca1e09b243bcfe424d883c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b3c64300b604fa06ca1e09b243bcfe424d883c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b3c64300b604fa06ca1e09b243bcfe424d883c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b3c64300b604fa06ca1e09b243bcfe424d883c0/comments", "author": null, "committer": null, "parents": [{"sha": "cae81f177de95c5de06a61f769f3008925ebcb35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cae81f177de95c5de06a61f769f3008925ebcb35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cae81f177de95c5de06a61f769f3008925ebcb35"}], "stats": {"total": 152, "additions": 122, "deletions": 30}, "files": [{"sha": "1bba5f3e50b4270d8c6b88bb4e1db967bd4308e3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8b3c64300b604fa06ca1e09b243bcfe424d883c0", "patch": "@@ -1,3 +1,35 @@\n+2011-08-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* scos.ads: Update comments.\n+\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Type): Inherit the convention from the\n+\tbase type, because the parent may be a subtype of a private type whose\n+\tconvention is established in a private part.\n+\n+2011-08-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Wrap the return\n+\tstatement in a block when the expansion of the return expression has\n+\tcreated a finalization chain.\n+\t* freeze.adb (Freeze_Expression): Alphabetize all choices associated\n+\twith the parent node.\n+\tAdd N_Extended_Return_Statement to handle the case where a transient\n+\tobject declaration appears in the Return_Object_Declarations list of\n+\tan extended return statement.\n+\n+2011-08-02  Matthew Gingell  <gingell@adacore.com>\n+\n+\t* adaint.c (__gnat_is_symbolic_link_attr): Supress warning on possibly\n+\tunused parameter 'name'.\n+\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_elim.adb (Set_Eliminated): If the overridden operation is an\n+\tinherited operation, check whether its alias, which is the source\n+\toperastion that it renames, has been marked eliminated.\n+\n 2011-08-02  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_util.adb (Safe_Prefixed_Reference): Do not consider safe an"}, {"sha": "fd305e67011f2674ee155ac196e965c1b4fe7ac2", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=8b3c64300b604fa06ca1e09b243bcfe424d883c0", "patch": "@@ -2273,7 +2273,8 @@ __gnat_set_non_readable (char *name)\n }\n \n int\n-__gnat_is_symbolic_link_attr (char* name, struct file_attributes* attr)\n+__gnat_is_symbolic_link_attr (char* name ATTRIBUTE_UNUSED,\n+                              struct file_attributes* attr)\n {\n    if (attr->symbolic_link == ATTR_UNSET) {\n #if defined (__vxworks) || defined (__nucleus__)"}, {"sha": "e61de38dedff7d5c59a27f46b74d2042d08e46b8", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=8b3c64300b604fa06ca1e09b243bcfe424d883c0", "patch": "@@ -4879,19 +4879,44 @@ package body Exp_Ch6 is\n       --  Case where we do not build a block\n \n       else\n-         --  We're about to drop Return_Object_Declarations on the floor, so\n-         --  we need to insert it, in case it got expanded into useful code.\n          --  Remove side effects from expression, which may be duplicated in\n          --  subsequent checks (see Expand_Simple_Function_Return).\n \n-         Insert_List_Before (N, Return_Object_Declarations (N));\n          Remove_Side_Effects (Exp);\n \n          --  Build simple_return_statement that returns the expression directly\n \n          Return_Stm := Make_Simple_Return_Statement (Loc, Expression => Exp);\n \n-         Result := Return_Stm;\n+         --  The expansion of the return expression may create a finalization\n+         --  chain to service transient temporaries. The entity of the chain\n+         --  appears as a semantic attribute of the return statement scope.\n+         --  For the chain to be handled properly by Expand_Cleanup_Actions,\n+         --  the return statement is wrapped in a block and reanalyzed.\n+\n+         if Present\n+              (Finalization_Chain_Entity (Return_Statement_Entity (N)))\n+         then\n+            Result :=\n+              Make_Block_Statement (Loc,\n+                Declarations => Return_Object_Declarations (N),\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc,\n+                    Statements => New_List (Return_Stm)));\n+\n+            --  Propagate the return statement scope to the block in order to\n+            --  preserve the various semantic fields.\n+\n+            Set_Identifier\n+              (Result, New_Occurrence_Of (Return_Statement_Entity (N), Loc));\n+         else\n+            --  We're about to drop Return_Object_Declarations on the floor, so\n+            --  we need to insert it, in case it got expanded into useful code.\n+\n+            Insert_List_Before (N, Return_Object_Declarations (N));\n+\n+            Result := Return_Stm;\n+         end if;\n       end if;\n \n       --  Set the flag to prevent infinite recursion"}, {"sha": "08aed5550a83a863d342faab014a9d68754d8a96", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=8b3c64300b604fa06ca1e09b243bcfe424d883c0", "patch": "@@ -4536,33 +4536,34 @@ package body Freeze is\n             --  is a statement or declaration and we can insert the freeze node\n             --  before it.\n \n-            when N_Package_Specification |\n+            when N_Block_Statement       |\n+                 N_Entry_Body            |\n                  N_Package_Body          |\n-                 N_Subprogram_Body       |\n-                 N_Task_Body             |\n+                 N_Package_Specification |\n                  N_Protected_Body        |\n-                 N_Entry_Body            |\n-                 N_Block_Statement       => exit;\n+                 N_Subprogram_Body       |\n+                 N_Task_Body             => exit;\n \n             --  The expander is allowed to define types in any statements list,\n             --  so any of the following parent nodes also mark a freezing point\n             --  if the actual node is in a list of statements or declarations.\n \n-            when N_Exception_Handler          |\n-                 N_If_Statement               |\n-                 N_Elsif_Part                 |\n+            when N_Abortable_Part             |\n+                 N_Accept_Alternative         |\n+                 N_And_Then                   |\n                  N_Case_Statement_Alternative |\n                  N_Compilation_Unit_Aux       |\n-                 N_Selective_Accept           |\n-                 N_Accept_Alternative         |\n-                 N_Delay_Alternative          |\n                  N_Conditional_Entry_Call     |\n+                 N_Delay_Alternative          |\n+                 N_Elsif_Part                 |\n                  N_Entry_Call_Alternative     |\n-                 N_Triggering_Alternative     |\n-                 N_Abortable_Part             |\n-                 N_And_Then                   |\n+                 N_Exception_Handler          |\n+                 N_Extended_Return_Statement  |\n+                 N_Freeze_Entity              |\n+                 N_If_Statement               |\n                  N_Or_Else                    |\n-                 N_Freeze_Entity              =>\n+                 N_Selective_Accept           |\n+                 N_Triggering_Alternative     =>\n \n                exit when Is_List_Member (P);\n "}, {"sha": "40a278eb404c815f6d240d4d585e1597080b3b25", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=8b3c64300b604fa06ca1e09b243bcfe424d883c0", "patch": "@@ -165,6 +165,12 @@ package SCOs is\n    --    entries appear in one logical statement sequence, continuation lines\n    --    are marked by Cs and appear immediately after the CS line.\n \n+   --    Implementation permission: a SCO generator is permitted to emit a\n+   --    narrower SLOC range for a statement if the corresponding code\n+   --    generation circuitry ensures that all debug information for the code\n+   --    implementing the statement will be labeled with SLOCs that fall within\n+   --    that narrower range.\n+\n    --  Decisions\n \n    --    Note: in the following description, logical operator includes only the\n@@ -246,16 +252,17 @@ package SCOs is\n    --      term ::= element\n    --      term ::= expression\n \n-   --      element ::= outcome sloc-range\n+   --      element ::= *sloc-range\n \n-   --    outcome is one of the following letters:\n+   --    where * is one of the following letters:\n \n    --      c  condition\n    --      t  true condition\n    --      f  false condition\n \n-   --      where t/f are used to mark a condition that has been recognized by\n-   --      the compiler as always being true or false.\n+   --      t/f are used to mark a condition that has been recognized by the\n+   --      compiler as always being true or false. c is the normal case of\n+   --      conditions whose value is not known at compile time.\n \n    --    & indicates AND THEN connecting two conditions\n \n@@ -277,7 +284,8 @@ package SCOs is\n    --    form is used, e.g. A in (2,7,11.15).\n \n    --    The expression can be followed by chaining indicators of the form\n-   --    Tsloc-range or Fsloc-range.\n+   --    Tsloc-range or Fsloc-range, where the sloc-range is that of some\n+   --    entry on a CS line.\n \n    --    T* is present when the statement with the given sloc range is executed\n    --    if, and only if, the decision evaluates to TRUE.\n@@ -304,6 +312,12 @@ package SCOs is\n \n    --    In all other cases, chaining indicators are omitted\n \n+   --    Implementation permission: a SCO generator is permitted to emit a\n+   --    narrower SLOC range for a condition if the corresponding code\n+   --    generation circuitry ensures that all debug information for the code\n+   --    evaluating the condition will be labeled with SLOCs that fall within\n+   --    that narrower range.\n+\n    --  Case Expressions\n \n    --    For case statements, we rely on statement coverage to make sure that"}, {"sha": "fffe351b3aefe18f86dd0dc11837697c0f789330", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8b3c64300b604fa06ca1e09b243bcfe424d883c0", "patch": "@@ -7836,10 +7836,15 @@ package body Sem_Ch3 is\n \n       Set_Size_Info      (Derived_Type,                 Parent_Type);\n       Set_RM_Size        (Derived_Type, RM_Size        (Parent_Type));\n-      Set_Convention     (Derived_Type, Convention     (Parent_Type));\n       Set_Is_Controlled  (Derived_Type, Is_Controlled  (Parent_Type));\n       Set_Is_Tagged_Type (Derived_Type, Is_Tagged_Type (Parent_Type));\n \n+      --  If the parent type is a private subtype, the convention on the base\n+      --  type may be set in the private part, and not propagated to the\n+      --  subtype until later, so we obtain the convention from the base type.\n+\n+      Set_Convention     (Derived_Type, Convention     (Parent_Base));\n+\n       --  Propagate invariant information. The new type has invariants if\n       --  they are inherited from the parent type, and these invariants can\n       --  be further inherited, so both flags are set.\n@@ -9918,9 +9923,10 @@ package body Sem_Ch3 is\n       Set_Homonym     (Full, Save_Homonym);\n       Set_Associated_Node_For_Itype (Full, Related_Nod);\n \n-      --  Set common attributes for all subtypes\n+      --  Set common attributes for all subtypes: kind, convention, etc.\n \n       Set_Ekind (Full, Subtype_Kind (Ekind (Full_Base)));\n+      Set_Convention (Full, Convention (Full_Base));\n \n       --  The Etype of the full view is inconsistent. Gigi needs to see the\n       --  structural full view,  which is what the current scheme gives:"}, {"sha": "dedc52d8a89317978d767665eb6b3fc9e64dd966", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b3c64300b604fa06ca1e09b243bcfe424d883c0/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=8b3c64300b604fa06ca1e09b243bcfe424d883c0", "patch": "@@ -261,14 +261,27 @@ package body Sem_Elim is\n             --------------------\n \n             procedure Set_Eliminated is\n+               Overridden : Entity_Id;\n+\n             begin\n                if Is_Dispatching_Operation (E) then\n \n                   --  If an overriding dispatching primitive is eliminated then\n-                  --  its parent must have been eliminated.\n+                  --  its parent must have been eliminated. If the parent is an\n+                  --  inherited operation, check the operation that it renames,\n+                  --  because flag Eliminated is only set on source operations.\n+\n+                  Overridden := Overridden_Operation (E);\n+\n+                  if Present (Overridden)\n+                    and then not Comes_From_Source (Overridden)\n+                    and then Present (Alias (Overridden))\n+                  then\n+                     Overridden := Alias (Overridden);\n+                  end if;\n \n-                  if Present (Overridden_Operation (E))\n-                    and then not Is_Eliminated (Overridden_Operation (E))\n+                  if Present (Overridden)\n+                    and then not Is_Eliminated (Overridden)\n                   then\n                      Error_Msg_Name_1 := Chars (E);\n                      Error_Msg_N (\"cannot eliminate subprogram %\", E);"}]}