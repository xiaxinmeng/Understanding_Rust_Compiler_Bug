{"sha": "e7d9342c7b51b4a66d3341d53d55bc9add186c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdkOTM0MmM3YjUxYjRhNjZkMzM0MWQ1M2Q1NWJjOWFkZDE4NmMwYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-10T00:04:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-10T00:04:23Z"}, "message": "compiler: A type conversion of a constant is not always a constant.\n\nFrom-SVN: r203332", "tree": {"sha": "c5123176fadef40c02071fb15c24424e29e54487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5123176fadef40c02071fb15c24424e29e54487"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7d9342c7b51b4a66d3341d53d55bc9add186c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d9342c7b51b4a66d3341d53d55bc9add186c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7d9342c7b51b4a66d3341d53d55bc9add186c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d9342c7b51b4a66d3341d53d55bc9add186c0b/comments", "author": null, "committer": null, "parents": [{"sha": "215552adac04bc04778b3052c24d8c66b8455fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215552adac04bc04778b3052c24d8c66b8455fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/215552adac04bc04778b3052c24d8c66b8455fef"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "e96ab7606c2e3f651c493fecfccc24edd951604e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7d9342c7b51b4a66d3341d53d55bc9add186c0b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7d9342c7b51b4a66d3341d53d55bc9add186c0b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=e7d9342c7b51b4a66d3341d53d55bc9add186c0b", "patch": "@@ -3055,8 +3055,7 @@ class Type_conversion_expression : public Expression\n   do_lower(Gogo*, Named_object*, Statement_inserter*, int);\n \n   bool\n-  do_is_constant() const\n-  { return this->expr_->is_constant(); }\n+  do_is_constant() const;\n \n   bool\n   do_numeric_constant_value(Numeric_constant*) const;\n@@ -3198,6 +3197,27 @@ Type_conversion_expression::do_lower(Gogo*, Named_object*,\n   return this;\n }\n \n+// Return whether a type conversion is a constant.\n+\n+bool\n+Type_conversion_expression::do_is_constant() const\n+{\n+  if (!this->expr_->is_constant())\n+    return false;\n+\n+  // A conversion to a type that may not be used as a constant is not\n+  // a constant.  For example, []byte(nil).\n+  Type* type = this->type_;\n+  if (type->integer_type() == NULL\n+      && type->float_type() == NULL\n+      && type->complex_type() == NULL\n+      && !type->is_boolean_type()\n+      && !type->is_string_type())\n+    return false;\n+\n+  return true;\n+}\n+\n // Return the constant numeric value if there is one.\n \n bool"}]}