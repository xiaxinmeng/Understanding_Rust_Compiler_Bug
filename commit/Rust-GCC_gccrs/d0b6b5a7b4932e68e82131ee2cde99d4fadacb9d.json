{"sha": "d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiNmI1YTdiNDkzMmU2OGU4MjEzMWVlMmNkZTk5ZDRmYWRhY2I5ZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-01-15T11:56:03Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-01-15T11:56:03Z"}, "message": "[arm] PR target/83687: Fix invalid combination of VSUB + VABS into VABD\n\nIn this wrong-code bug we combine a VSUB.I8 and a VABS.S8\ninto a VABD.S8 instruction . This combination is not valid\nfor integer operands because in the VABD instruction the semantics\nare that the difference is computed in notionally infinite precision\nand the absolute difference is computed on that, whereas for a\nVSUB.I8 + VABS.S8 sequence the VSUB operation will perform any\nwrapping that's needed for the 8-bit signed type before the VABS\ngets its hands on it.\n\nThis leads to the wrong-code in the PR where the expected\nsequence from the intrinsics:\nVSUB + VABS of two vectors {-100, -100, -100...}, {100, 100, 100...}\ngives a result of {56, 56, 56...} (-100 - 100)\n\nbut GCC optimises it into a single\nVABD of {-100, -100, -100...}, {100, 100, 100...}\nwhich produces a result of {200, 200, 200...}\n\nThe transformation is still valid for floating-point operands,\nwhich is why it was added in the first place I believe (r178817)\nbut this patch disables it for integer operands.\nThe HFmode variants though only exist for TARGET_NEON_FP16INST, so\nthis patch adds the appropriate guards to the new mode iterator\n\nBootstrapped and tested on arm-none-linux-gnueabihf.\n\n\tPR target/83687\n\t* config/arm/iterators.md (VF): New mode iterator.\n\t* config/arm/neon.md (neon_vabd<mode>_2): Use the above.\n\tRemove integer-related logic from pattern.\n\t(neon_vabd<mode>_3): Likewise.\n\n\t* gcc.target/arm/neon-combine-sub-abs-into-vabd.c: Delete integer\n\ttests.\n\t* gcc.target/arm/pr83687.c: New test.\n\nFrom-SVN: r256696", "tree": {"sha": "efbc2114605a98214bdcc6888a97a72004b7b692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efbc2114605a98214bdcc6888a97a72004b7b692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c89f2d24685de5663523d328814541165a0d97c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89f2d24685de5663523d328814541165a0d97c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89f2d24685de5663523d328814541165a0d97c3"}], "stats": {"total": 106, "additions": 61, "deletions": 45}, "files": [{"sha": "980573ff3c6bdacb7417476c5679b3da149b3f7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "patch": "@@ -1,3 +1,11 @@\n+2018-01-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/83687\n+\t* config/arm/iterators.md (VF): New mode iterator.\n+\t* config/arm/neon.md (neon_vabd<mode>_2): Use the above.\n+\tRemove integer-related logic from pattern.\n+\t(neon_vabd<mode>_3): Likewise.\n+\n 2018-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/82694"}, {"sha": "0b2d42399d22ba89a976e39bef6182d31173c1ef", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "patch": "@@ -119,6 +119,10 @@\n ;; All supported vector modes (except singleton DImode).\n (define_mode_iterator VDQ [V8QI V16QI V4HI V8HI V2SI V4SI V4HF V8HF V2SF V4SF V2DI])\n \n+;; All supported floating-point vector modes (except V2DF).\n+(define_mode_iterator VF [(V4HF \"TARGET_NEON_FP16INST\")\n+\t\t\t   (V8HF \"TARGET_NEON_FP16INST\") V2SF V4SF])\n+\n ;; All supported vector modes (except those with 64-bit integer elements).\n (define_mode_iterator VDQW [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF])\n "}, {"sha": "6a6f5d737715e4100adee8fb7de1d6211da3d85c", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "patch": "@@ -6706,28 +6706,22 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_insn \"neon_vabd<mode>_2\"\n- [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n-       (abs:VDQ (minus:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")\n-                           (match_operand:VDQ 2 \"s_register_operand\" \"w\"))))]\n- \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+ [(set (match_operand:VF 0 \"s_register_operand\" \"=w\")\n+       (abs:VF (minus:VF (match_operand:VF 1 \"s_register_operand\" \"w\")\n+\t\t\t (match_operand:VF 2 \"s_register_operand\" \"w\"))))]\n+ \"TARGET_NEON && flag_unsafe_math_optimizations\"\n  \"vabd.<V_s_elem> %<V_reg>0, %<V_reg>1, %<V_reg>2\"\n- [(set (attr \"type\")\n-       (if_then_else (ne (symbol_ref \"<Is_float_mode>\") (const_int 0))\n-                     (const_string \"neon_fp_abd_s<q>\")\n-                     (const_string \"neon_abd<q>\")))]\n+ [(set_attr \"type\" \"neon_fp_abd_s<q>\")]\n )\n \n (define_insn \"neon_vabd<mode>_3\"\n- [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n-       (abs:VDQ (unspec:VDQ [(match_operand:VDQ 1 \"s_register_operand\" \"w\")\n-                             (match_operand:VDQ 2 \"s_register_operand\" \"w\")]\n-                 UNSPEC_VSUB)))]\n- \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+ [(set (match_operand:VF 0 \"s_register_operand\" \"=w\")\n+       (abs:VF (unspec:VF [(match_operand:VF 1 \"s_register_operand\" \"w\")\n+\t\t\t    (match_operand:VF 2 \"s_register_operand\" \"w\")]\n+\t\tUNSPEC_VSUB)))]\n+ \"TARGET_NEON && flag_unsafe_math_optimizations\"\n  \"vabd.<V_if_elem> %<V_reg>0, %<V_reg>1, %<V_reg>2\"\n- [(set (attr \"type\")\n-       (if_then_else (ne (symbol_ref \"<Is_float_mode>\") (const_int 0))\n-                     (const_string \"neon_fp_abd_s<q>\")\n-                     (const_string \"neon_abd<q>\")))]\n+ [(set_attr \"type\" \"neon_fp_abd_s<q>\")]\n )\n \n ;; Copy from core-to-neon regs, then extend, not vice-versa"}, {"sha": "9d0aeb02e7872194b9ff211ea350cf7e6a4decf5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "patch": "@@ -1,3 +1,10 @@\n+2018-01-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/83687\n+\t* gcc.target/arm/neon-combine-sub-abs-into-vabd.c: Delete integer\n+\ttests.\n+\t* gcc.target/arm/pr83687.c: New test.\n+\n 2018-01-15  Georg-Johann Lay  <avr@gjlay.de>\n \n \tAdjust tests to AVR_TINY."}, {"sha": "784714f0e87d8cd1216af948c61cdb87319e02cd", "filename": "gcc/testsuite/gcc.target/arm/neon-combine-sub-abs-into-vabd.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-combine-sub-abs-into-vabd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-combine-sub-abs-into-vabd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-combine-sub-abs-into-vabd.c?ref=d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "patch": "@@ -12,31 +12,3 @@ float32x2_t f_sub_abs_to_vabd_32(float32x2_t val1, float32x2_t val2)\n   return res;\n }\n /* { dg-final { scan-assembler \"vabd\\.f32\" } }*/\n-\n-#include <arm_neon.h>\n-int8x8_t sub_abs_to_vabd_8(int8x8_t val1, int8x8_t val2)\n-{\n-  int8x8_t sres = vsub_s8(val1, val2);\n-  int8x8_t res = vabs_s8 (sres);\n-\n-  return res;\n-}\n-/* { dg-final { scan-assembler \"vabd\\.s8\" } }*/\n-\n-int16x4_t sub_abs_to_vabd_16(int16x4_t val1, int16x4_t val2)\n-{\n-  int16x4_t sres = vsub_s16(val1, val2);\n-  int16x4_t res = vabs_s16 (sres);\n-\n-  return res;\n-}\n-/* { dg-final { scan-assembler \"vabd\\.s16\" } }*/\n-\n-int32x2_t sub_abs_to_vabd_32(int32x2_t val1, int32x2_t val2)\n-{\n-  int32x2_t sres = vsub_s32(val1, val2);\n-  int32x2_t res = vabs_s32 (sres);\n-\n-   return res;\n-}\n-/* { dg-final { scan-assembler \"vabd\\.s32\" } }*/"}, {"sha": "42754138660739d9fbffcd337460e26de94f736f", "filename": "gcc/testsuite/gcc.target/arm/pr83687.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr83687.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr83687.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr83687.c?ref=d0b6b5a7b4932e68e82131ee2cde99d4fadacb9d", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+__attribute__ ((noinline)) int8_t\n+testFunction1 (int8_t a, int8_t b)\n+{\n+  volatile int8x16_t sub = vsubq_s8 (vdupq_n_s8 (a), vdupq_n_s8 (b));\n+  int8x16_t abs = vabsq_s8 (sub);\n+  return vgetq_lane_s8 (abs, 0);\n+}\n+\n+__attribute__ ((noinline)) int8_t\n+testFunction2 (int8_t a, int8_t b)\n+{\n+  int8x16_t sub = vsubq_s8 (vdupq_n_s8 (a), vdupq_n_s8 (b));\n+  int8x16_t abs = vabsq_s8 (sub);\n+  return vgetq_lane_s8 (abs, 0);\n+}\n+\n+int\n+main (void)\n+{\n+  if (testFunction1 (-100, 100) != testFunction2 (-100, 100))\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}