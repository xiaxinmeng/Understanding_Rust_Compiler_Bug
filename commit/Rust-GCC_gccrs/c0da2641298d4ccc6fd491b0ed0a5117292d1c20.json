{"sha": "c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkYTI2NDEyOThkNGNjYzZmZDQ5MWIwZWQwYTUxMTcyOTJkMWMyMA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-11T06:51:34Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-11T06:51:34Z"}, "message": "2003-02-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/DoubleBuffer.java\n\t(DoubleBuffer): Implements Comparable.\n\t(endian): Removed.\n\t(array_offset): New member variable.\n\t(DoubleBuffer): New constuctor.\n\t(get): May not be final.\n\t(put): May not be final.\n\t(arrayOffset): Implemented.\n\t(order): Made abstract.\n\t(order): Removed.\n\t(as*Buffer): Removed.\n\t(get*): Removed.\n\t(put*): Removed.\n\t* java/nio/FloatBuffer.java\n\t(FloatBuffer): Implements Comparable.\n\t(endian): Removed.\n\t(array_offset): New member variable.\n\t(FloatBuffer): New constuctor.\n\t(get): May not be final.\n\t(put): May not be final.\n\t(arrayOffset): Implemented.\n\t(order): Made abstract.\n\t(order): Removed.\n\t(as*Buffer): Removed.\n\t(get*): Removed.\n\t(put*): Removed.\n\t* java/nio/IntBuffer.java\n\t(IntBuffer): Implements Comparable.\n\t(endian): Removed.\n\t(array_offset): New member variable.\n\t(IntBuffer): New constuctor.\n\t(get): May not be final.\n\t(put): May not be final.\n\t(arrayOffset): Implemented.\n\t(order): Made abstract.\n\t(order): Removed.\n\t(as*Buffer): Removed.\n\t(get*): Removed.\n\t(put*): Removed.\n\t* java/nio/LongBuffer.java\n\t(LongBuffer): Implements Comparable.\n\t(endian): Removed.\n\t(array_offset): New member variable.\n\t(LongBuffer): New constuctor.\n\t(get): May not be final.\n\t(put): May not be final.\n\t(arrayOffset): Implemented.\n\t(order): Made abstract.\n\t(order): Removed.\n\t(as*Buffer): Removed.\n\t(get*): Removed.\n\t(put*): Removed.\n\t* java/nio/ShortBuffer.java\n\t(ShortBuffer): Implements Comparable.\n\t(endian): Removed.\n\t(array_offset): New member variable.\n\t(ShortBuffer): New constuctor.\n\t(get): May not be final.\n\t(put): May not be final.\n\t(arrayOffset): Implemented.\n\t(order): Made abstract.\n\t(order): Removed.\n\t(as*Buffer): Removed.\n\t(get*): Removed.\n\t(put*): Removed.\n\nFrom-SVN: r62684", "tree": {"sha": "de568104e9bb4380e6589cc61a0172daf0f9f577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de568104e9bb4380e6589cc61a0172daf0f9f577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/comments", "author": null, "committer": null, "parents": [{"sha": "c34ce2a63744231051665086321901cf5331588c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34ce2a63744231051665086321901cf5331588c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34ce2a63744231051665086321901cf5331588c"}], "stats": {"total": 378, "additions": 138, "deletions": 240}, "files": [{"sha": "a1641fef43180ef03d8742b5190453a0a9cc154f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "patch": "@@ -1,3 +1,71 @@\n+2003-02-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/DoubleBuffer.java\n+\t(DoubleBuffer): Implements Comparable.\n+\t(endian): Removed.\n+\t(array_offset): New member variable.\n+\t(DoubleBuffer): New constuctor.\n+\t(get): May not be final.\n+\t(put): May not be final.\n+\t(arrayOffset): Implemented.\n+\t(order): Made abstract.\n+\t(order): Removed.\n+\t(as*Buffer): Removed.\n+\t(get*): Removed.\n+\t(put*): Removed.\n+\t* java/nio/FloatBuffer.java\n+\t(FloatBuffer): Implements Comparable.\n+\t(endian): Removed.\n+\t(array_offset): New member variable.\n+\t(FloatBuffer): New constuctor.\n+\t(get): May not be final.\n+\t(put): May not be final.\n+\t(arrayOffset): Implemented.\n+\t(order): Made abstract.\n+\t(order): Removed.\n+\t(as*Buffer): Removed.\n+\t(get*): Removed.\n+\t(put*): Removed.\n+\t* java/nio/IntBuffer.java\n+\t(IntBuffer): Implements Comparable.\n+\t(endian): Removed.\n+\t(array_offset): New member variable.\n+\t(IntBuffer): New constuctor.\n+\t(get): May not be final.\n+\t(put): May not be final.\n+\t(arrayOffset): Implemented.\n+\t(order): Made abstract.\n+\t(order): Removed.\n+\t(as*Buffer): Removed.\n+\t(get*): Removed.\n+\t(put*): Removed.\n+\t* java/nio/LongBuffer.java\n+\t(LongBuffer): Implements Comparable.\n+\t(endian): Removed.\n+\t(array_offset): New member variable.\n+\t(LongBuffer): New constuctor.\n+\t(get): May not be final.\n+\t(put): May not be final.\n+\t(arrayOffset): Implemented.\n+\t(order): Made abstract.\n+\t(order): Removed.\n+\t(as*Buffer): Removed.\n+\t(get*): Removed.\n+\t(put*): Removed.\n+\t* java/nio/ShortBuffer.java\n+\t(ShortBuffer): Implements Comparable.\n+\t(endian): Removed.\n+\t(array_offset): New member variable.\n+\t(ShortBuffer): New constuctor.\n+\t(get): May not be final.\n+\t(put): May not be final.\n+\t(arrayOffset): Implemented.\n+\t(order): Made abstract.\n+\t(order): Removed.\n+\t(as*Buffer): Removed.\n+\t(get*): Removed.\n+\t(put*): Removed.\n+\n 2003-02-11   Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/channels/SelectionKey.java"}, {"sha": "79de54a13edc581659390865040284778b22eea0", "filename": "libjava/java/nio/DoubleBuffer.java", "status": "modified", "additions": 13, "deletions": 48, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleBuffer.java?ref=c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "patch": "@@ -39,10 +39,10 @@\n \n import gnu.java.nio.DoubleBufferImpl;\n \n-public abstract class DoubleBuffer extends Buffer\n+public abstract class DoubleBuffer extends Buffer implements Comparable\n {\n-  private ByteOrder endian = ByteOrder.BIG_ENDIAN;\n   protected double [] backing_buffer;\n+  protected int array_offset;\n \n   public static DoubleBuffer allocateDirect(int capacity)\n   {\n@@ -77,7 +77,12 @@ final public static DoubleBuffer wrap(double[] array)\n     return wrap(array, 0, array.length);\n   }\n \n-  final public DoubleBuffer get (double[] dst, int offset, int length)\n+  DoubleBuffer (int capacity, int limit, int position, int mark)\n+  {\n+    super (capacity, limit, position, mark);\n+  }\n+  \n+  public DoubleBuffer get (double[] dst, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       {\n@@ -87,20 +92,20 @@ final public DoubleBuffer get (double[] dst, int offset, int length)\n     return this;\n   }\n \n-  final public DoubleBuffer get(double[] dst)\n+  public DoubleBuffer get (double[] dst)\n   {\n     return get(dst, 0, dst.length);\n   }\n \n-  final public DoubleBuffer put(DoubleBuffer src)\n+  public DoubleBuffer put (DoubleBuffer src)\n   {\n     while (src.hasRemaining())\n       put(src.get());\n \n     return this;\n   }\n \n-  final public DoubleBuffer put (double[] src, int offset, int length)\n+  public DoubleBuffer put (double[] src, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       put(src[i]);\n@@ -125,7 +130,7 @@ public final double[] array()\n \n   public final int arrayOffset()\n   {\n-    return 0;\n+    return array_offset;\n   }\n \n   public int hashCode()\n@@ -172,17 +177,7 @@ public int compareTo(Object ob)\n     return 0;\n   }\n \n-  public final ByteOrder order()\n-  {\n-    return endian;\n-  }\n-\n-  public final DoubleBuffer order(ByteOrder bo)\n-  {\n-    endian = bo;\n-    return this;\n-  }\n-\n+  public abstract ByteOrder order ();\n   public abstract double get();\n   public abstract DoubleBuffer put (double b);\n   public abstract double get(int index);\n@@ -192,34 +187,4 @@ public final DoubleBuffer order(ByteOrder bo)\n   public abstract DoubleBuffer slice();\n   public abstract DoubleBuffer duplicate();\n   public abstract DoubleBuffer asReadOnlyBuffer();\n-  public abstract ShortBuffer asShortBuffer();\n-  public abstract CharBuffer asCharBuffer();\n-  public abstract IntBuffer asIntBuffer();\n-  public abstract LongBuffer asLongBuffer();\n-  public abstract FloatBuffer asFloatBuffer();\n-  public abstract DoubleBuffer asDoubleBuffer();\n-  public abstract char getChar();\n-  public abstract DoubleBuffer putChar(char value);\n-  public abstract char getChar(int index);\n-  public abstract DoubleBuffer putChar(int index, char value);\n-  public abstract short getShort();\n-  public abstract DoubleBuffer putShort(short value);\n-  public abstract short getShort(int index);\n-  public abstract DoubleBuffer putShort(int index, short value);\n-  public abstract int getInt();\n-  public abstract DoubleBuffer putInt(int value);\n-  public abstract int getInt(int index);\n-  public abstract DoubleBuffer putInt(int index, int value);\n-  public abstract long getLong();\n-  public abstract DoubleBuffer putLong(long value);\n-  public abstract long getLong(int index);\n-  public abstract DoubleBuffer putLong(int index, long value);\n-  public abstract float getFloat();\n-  public abstract DoubleBuffer putFloat(float value);\n-  public abstract float getFloat(int index);\n-  public abstract DoubleBuffer putFloat(int index, float value);\n-  public abstract double getDouble();\n-  public abstract DoubleBuffer putDouble(double value);\n-  public abstract double getDouble(int index);\n-  public abstract DoubleBuffer putDouble(int index, double value);\n }"}, {"sha": "7cabd964951ba082a573c040eac439828d684f59", "filename": "libjava/java/nio/FloatBuffer.java", "status": "modified", "additions": 15, "deletions": 48, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatBuffer.java?ref=c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "patch": "@@ -39,10 +39,10 @@\n \n import gnu.java.nio.FloatBufferImpl;\n \n-public abstract class FloatBuffer extends Buffer\n+public abstract class FloatBuffer extends Buffer implements Comparable\n {\n-  private ByteOrder endian = ByteOrder.BIG_ENDIAN;\n   protected float [] backing_buffer;\n+  protected int array_offset;\n \n   public static FloatBuffer allocateDirect(int capacity)\n   {\n@@ -77,7 +77,13 @@ final public static FloatBuffer wrap(float[] array)\n     return wrap(array, 0, array.length);\n   }\n \n-  final public FloatBuffer get(float[] dst, int offset, int length)\n+  FloatBuffer (int capacity, int limit, int position, int mark)\n+  {\n+    super (capacity, limit, position, mark);\n+    array_offset = 0;                    \n+  }\n+  \n+  public FloatBuffer get (float[] dst, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       {\n@@ -87,20 +93,20 @@ final public FloatBuffer get(float[] dst, int offset, int length)\n     return this;\n   }\n \n-  final public FloatBuffer get(float[] dst)\n+  public FloatBuffer get (float[] dst)\n   {\n     return get(dst, 0, dst.length);\n   }\n \n-  final public FloatBuffer put(FloatBuffer src)\n+  public FloatBuffer put (FloatBuffer src)\n   {\n     while (src.hasRemaining())\n       put(src.get());\n \n     return this;\n   }\n \n-  final public FloatBuffer put(float[] src, int offset, int length)\n+  public FloatBuffer put (float[] src, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       put(src[i]);\n@@ -125,7 +131,7 @@ public final float[] array()\n \n   public final int arrayOffset()\n   {\n-    return 0;\n+    return array_offset;\n   }\n \n   public int hashCode()\n@@ -139,6 +145,7 @@ public boolean equals(Object obj)\n       {\n         return compareTo(obj) == 0;\n       }\n+\n     return false;\n   }\n \n@@ -171,17 +178,7 @@ public int compareTo(Object ob)\n     return 0;\n   }\n \n-  public final ByteOrder order()\n-  {\n-    return endian;\n-  }\n-\n-  public final FloatBuffer order(ByteOrder bo)\n-  {\n-    endian = bo;\n-    return this;\n-  }\n-\n+  public abstract ByteOrder order ();\n   public abstract float get();\n   public abstract java.nio. FloatBuffer put(float b);\n   public abstract float get(int index);\n@@ -191,34 +188,4 @@ public final FloatBuffer order(ByteOrder bo)\n   public abstract FloatBuffer slice();\n   public abstract FloatBuffer duplicate();\n   public abstract FloatBuffer asReadOnlyBuffer();\n-  public abstract ShortBuffer asShortBuffer();\n-  public abstract CharBuffer asCharBuffer();\n-  public abstract IntBuffer asIntBuffer();\n-  public abstract LongBuffer asLongBuffer();\n-  public abstract FloatBuffer asFloatBuffer();\n-  public abstract DoubleBuffer asDoubleBuffer();\n-  public abstract char getChar();\n-  public abstract FloatBuffer putChar(char value);\n-  public abstract char getChar(int index);\n-  public abstract FloatBuffer putChar(int index, char value);\n-  public abstract short getShort();\n-  public abstract FloatBuffer putShort(short value);\n-  public abstract short getShort(int index);\n-  public abstract FloatBuffer putShort(int index, short value);\n-  public abstract int getInt();\n-  public abstract FloatBuffer putInt(int value);\n-  public abstract int getInt(int index);\n-  public abstract FloatBuffer putInt(int index, int value);\n-  public abstract long getLong();\n-  public abstract FloatBuffer putLong(long value);\n-  public abstract long getLong(int index);\n-  public abstract FloatBuffer putLong(int index, long value);\n-  public abstract float getFloat();\n-  public abstract FloatBuffer putFloat(float value);\n-  public abstract float getFloat(int index);\n-  public abstract FloatBuffer putFloat(int index, float value);\n-  public abstract double getDouble();\n-  public abstract FloatBuffer putDouble(double value);\n-  public abstract double getDouble(int index);\n-  public abstract FloatBuffer putDouble(int index, double value);\n }"}, {"sha": "2aadf3509198143c99247363157bcb4efa9d38ed", "filename": "libjava/java/nio/IntBuffer.java", "status": "modified", "additions": 14, "deletions": 48, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FIntBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FIntBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntBuffer.java?ref=c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "patch": "@@ -39,10 +39,10 @@\n \n import gnu.java.nio.IntBufferImpl;\n \n-public abstract class IntBuffer extends Buffer\n+public abstract class IntBuffer extends Buffer implements Comparable\n {\n-  private ByteOrder endian = ByteOrder.BIG_ENDIAN;\n   protected int [] backing_buffer;\n+  protected int array_offset;\n \n   public static IntBuffer allocateDirect(int capacity)\n   {\n@@ -77,7 +77,13 @@ final public static IntBuffer wrap(int[] array)\n     return wrap(array, 0, array.length);\n   }\n \n-  final public IntBuffer get(int[] dst, int offset, int length)\n+  IntBuffer (int capacity, int limit, int position, int mark)\n+  {\n+    super (capacity, limit, position, mark);\n+    array_offset = 0;\n+  }\n+  \n+  public IntBuffer get(int[] dst, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       {\n@@ -87,20 +93,20 @@ final public IntBuffer get(int[] dst, int offset, int length)\n     return this;\n   }\n \n-  final public IntBuffer get(int[] dst)\n+  public IntBuffer get (int[] dst)\n   {\n     return get(dst, 0, dst.length);\n   }\n \n-  final public IntBuffer put(IntBuffer src)\n+  public IntBuffer put (IntBuffer src)\n   {\n     while (src.hasRemaining())\n       put(src.get());\n \n     return this;\n   }\n \n-  final public IntBuffer put(int[] src, int offset, int length)\n+  public IntBuffer put (int[] src, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       put(src[i]);\n@@ -125,7 +131,7 @@ public final int[] array()\n \n   public final int arrayOffset()\n   {\n-    return 0;\n+    return array_offset;\n   }\n \n   public int hashCode()\n@@ -172,17 +178,7 @@ public int compareTo(Object ob)\n     return 0;\n   }\n \n-  public final ByteOrder order()\n-  {\n-    return endian;\n-  }\n-\n-  public final IntBuffer order(ByteOrder bo)\n-  {\n-    endian = bo;\n-    return this;\n-  }\n-\n+  public abstract ByteOrder order();\n   public abstract int get();\n   public abstract IntBuffer put(int b);\n   public abstract int get(int index);\n@@ -192,34 +188,4 @@ public final IntBuffer order(ByteOrder bo)\n   public abstract IntBuffer slice();\n   public abstract IntBuffer duplicate();\n   public abstract IntBuffer asReadOnlyBuffer();\n-  public abstract ShortBuffer asShortBuffer();\n-  public abstract CharBuffer asCharBuffer();\n-  public abstract IntBuffer asIntBuffer();\n-  public abstract LongBuffer asLongBuffer();\n-  public abstract FloatBuffer asFloatBuffer();\n-  public abstract DoubleBuffer asDoubleBuffer();\n-  public abstract char getChar();\n-  public abstract IntBuffer putChar(char value);\n-  public abstract char getChar(int index);\n-  public abstract IntBuffer putChar(int index, char value);\n-  public abstract short getShort();\n-  public abstract IntBuffer putShort(short value);\n-  public abstract short getShort(int index);\n-  public abstract IntBuffer putShort(int index, short value);\n-  public abstract int getInt();\n-  public abstract IntBuffer putInt(int value);\n-  public abstract int getInt(int index);\n-  public abstract IntBuffer putInt(int index, int value);\n-  public abstract long getLong();\n-  public abstract IntBuffer putLong(long value);\n-  public abstract long getLong(int index);\n-  public abstract IntBuffer putLong(int index, long value);\n-  public abstract float getFloat();\n-  public abstract IntBuffer putFloat(float value);\n-  public abstract float getFloat(int index);\n-  public abstract IntBuffer putFloat(int index, float value);\n-  public abstract double getDouble();\n-  public abstract IntBuffer putDouble(double value);\n-  public abstract double getDouble(int index);\n-  public abstract IntBuffer putDouble(int index, double value);\n }"}, {"sha": "62ff390e82d8f782bedec88476b3e81dadb12182", "filename": "libjava/java/nio/LongBuffer.java", "status": "modified", "additions": 14, "deletions": 48, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FLongBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FLongBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongBuffer.java?ref=c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "patch": "@@ -39,10 +39,10 @@\n \n import gnu.java.nio.LongBufferImpl;\n \n-public abstract class LongBuffer extends Buffer\n+public abstract class LongBuffer extends Buffer implements Comparable\n {\n-  private ByteOrder endian = ByteOrder.BIG_ENDIAN;\n   protected long [] backing_buffer;\n+  protected int array_offset;\n \n   public static LongBuffer allocateDirect(int capacity)\n   {\n@@ -77,7 +77,13 @@ final public static LongBuffer wrap(long[] array)\n     return wrap(array, 0, array.length);\n   }\n \n-  final public LongBuffer get(long[] dst, int offset, int length)\n+  LongBuffer (int capacity, int limit, int position, int mark)\n+  {\n+    super (capacity, limit, position, mark);\n+    array_offset = 0;\n+  }\n+  \n+  public LongBuffer get (long[] dst, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       {\n@@ -87,20 +93,20 @@ final public LongBuffer get(long[] dst, int offset, int length)\n     return this;\n   }\n \n-  final public LongBuffer get(long[] dst)\n+  public LongBuffer get (long[] dst)\n   {\n     return get(dst, 0, dst.length);\n   }\n \n-  final public LongBuffer put(LongBuffer src)\n+  public LongBuffer put (LongBuffer src)\n   {\n     while (src.hasRemaining())\n       put(src.get());\n \n     return this;\n   }\n \n-  final public LongBuffer put(long[] src, int offset, int length)\n+  public LongBuffer put (long[] src, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       put(src[i]);\n@@ -125,7 +131,7 @@ public final long[] array()\n \n   public final int arrayOffset()\n   {\n-    return 0;\n+    return array_offset;\n   }\n \n   public int hashCode()\n@@ -173,17 +179,7 @@ public int compareTo(Object ob)\n     return 0;\n   }\n \n-  public final ByteOrder order()\n-  {\n-    return endian;\n-  }\n-\n-  public final LongBuffer order(ByteOrder bo)\n-  {\n-    endian = bo;\n-    return this;\n-  }\n-\n+  public abstract ByteOrder order();\n   public abstract long get();\n   public abstract java.nio. LongBuffer put(long b);\n   public abstract long get(int index);\n@@ -193,34 +189,4 @@ public final LongBuffer order(ByteOrder bo)\n   public abstract LongBuffer slice();\n   public abstract LongBuffer duplicate();\n   public abstract LongBuffer asReadOnlyBuffer();\n-  public abstract ShortBuffer asShortBuffer();\n-  public abstract CharBuffer asCharBuffer();\n-  public abstract IntBuffer asIntBuffer();\n-  public abstract LongBuffer asLongBuffer();\n-  public abstract FloatBuffer asFloatBuffer();\n-  public abstract DoubleBuffer asDoubleBuffer();\n-  public abstract char getChar();\n-  public abstract LongBuffer putChar(char value);\n-  public abstract char getChar(int index);\n-  public abstract LongBuffer putChar(int index, char value);\n-  public abstract short getShort();\n-  public abstract LongBuffer putShort(short value);\n-  public abstract short getShort(int index);\n-  public abstract LongBuffer putShort(int index, short value);\n-  public abstract int getInt();\n-  public abstract LongBuffer putInt(int value);\n-  public abstract int getInt(int index);\n-  public abstract LongBuffer putInt(int index, int value);\n-  public abstract long getLong();\n-  public abstract LongBuffer putLong(long value);\n-  public abstract long getLong(int index);\n-  public abstract LongBuffer putLong(int index, long value);\n-  public abstract float getFloat();\n-  public abstract LongBuffer putFloat(float value);\n-  public abstract float getFloat(int index);\n-  public abstract LongBuffer putFloat(int index, float value);\n-  public abstract double getDouble();\n-  public abstract LongBuffer putDouble(double value);\n-  public abstract double getDouble(int index);\n-  public abstract LongBuffer putDouble(int index, double value);\n }"}, {"sha": "08c05c4040474a336101f1391b6f1992f50d5eb2", "filename": "libjava/java/nio/ShortBuffer.java", "status": "modified", "additions": 14, "deletions": 48, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FShortBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0da2641298d4ccc6fd491b0ed0a5117292d1c20/libjava%2Fjava%2Fnio%2FShortBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortBuffer.java?ref=c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "patch": "@@ -39,10 +39,10 @@\n \n import gnu.java.nio.ShortBufferImpl;\n \n-public abstract class ShortBuffer extends Buffer\n+public abstract class ShortBuffer extends Buffer implements Comparable\n {\n-  private ByteOrder endian = ByteOrder.BIG_ENDIAN;\n   protected short [] backing_buffer;\n+  protected int array_offset;\n \n   public static ShortBuffer allocateDirect(int capacity)\n   {\n@@ -77,7 +77,13 @@ final public static ShortBuffer wrap(short[] array)\n     return wrap(array, 0, array.length);\n   }\n \n-  final public ShortBuffer get(short[] dst, int offset, int length)\n+  ShortBuffer (int capacity, int limit, int position, int mark)\n+  {\n+    super (capacity, limit, position, mark);\n+    array_offset = 0;\n+  }\n+  \n+  public ShortBuffer get (short[] dst, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       {\n@@ -87,20 +93,20 @@ final public ShortBuffer get(short[] dst, int offset, int length)\n     return this;\n   }\n \n-  final public ShortBuffer get(short[] dst)\n+  public ShortBuffer get (short[] dst)\n   {\n     return get(dst, 0, dst.length);\n   }\n \n-  final public ShortBuffer put(ShortBuffer src)\n+  public ShortBuffer put (ShortBuffer src)\n   {\n     while (src.hasRemaining())\n       put(src.get());\n \n     return this;\n   }\n \n-  final public ShortBuffer put(short[] src, int offset, int length)\n+  public ShortBuffer put (short[] src, int offset, int length)\n   {\n     for (int i = offset; i < offset + length; i++)\n       put(src[i]);\n@@ -125,7 +131,7 @@ public final short[] array()\n \n   public final int arrayOffset()\n   {\n-    return 0;\n+    return array_offset;\n   }\n \n   public int hashCode()\n@@ -173,17 +179,7 @@ public int compareTo(Object ob)\n     return 0;\n   }\n \n-  public final ByteOrder order()\n-  {\n-    return endian;\n-  }\n-\n-  public final ShortBuffer order(ByteOrder bo)\n-  {\n-    endian = bo;\n-    return this;\n-  }\n-\n+  public abstract ByteOrder order ();\n   public abstract short get();\n   public abstract java.nio. ShortBuffer put(short b);\n   public abstract short get(int index);\n@@ -193,34 +189,4 @@ public final ShortBuffer order(ByteOrder bo)\n   public abstract ShortBuffer slice();\n   public abstract ShortBuffer duplicate();\n   public abstract ShortBuffer asReadOnlyBuffer();\n-  public abstract ShortBuffer asShortBuffer();\n-  public abstract CharBuffer asCharBuffer();\n-  public abstract IntBuffer asIntBuffer();\n-  public abstract LongBuffer asLongBuffer();\n-  public abstract FloatBuffer asFloatBuffer();\n-  public abstract DoubleBuffer asDoubleBuffer();\n-  public abstract char getChar();\n-  public abstract ShortBuffer putChar(char value);\n-  public abstract char getChar(int index);\n-  public abstract ShortBuffer putChar(int index, char value);\n-  public abstract short getShort();\n-  public abstract ShortBuffer putShort(short value);\n-  public abstract short getShort(int index);\n-  public abstract ShortBuffer putShort(int index, short value);\n-  public abstract int getInt();\n-  public abstract ShortBuffer putInt(int value);\n-  public abstract int getInt(int index);\n-  public abstract ShortBuffer putInt(int index, int value);\n-  public abstract long getLong();\n-  public abstract ShortBuffer putLong(long value);\n-  public abstract long getLong(int index);\n-  public abstract ShortBuffer putLong(int index, long value);\n-  public abstract float getFloat();\n-  public abstract ShortBuffer putFloat(float value);\n-  public abstract float getFloat(int index);\n-  public abstract ShortBuffer putFloat(int index, float value);\n-  public abstract double getDouble();\n-  public abstract ShortBuffer putDouble(double value);\n-  public abstract double getDouble(int index);\n-  public abstract ShortBuffer putDouble(int index, double value);\n }"}]}