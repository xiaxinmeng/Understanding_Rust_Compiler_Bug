{"sha": "964cf38cb37e4766837b284a566cabe0fc737f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0Y2YzOGNiMzdlNDc2NjgzN2IyODRhNTY2Y2FiZTBmYzczN2YyNg==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-05-21T13:42:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-10T09:16:16Z"}, "message": "[Ada] Fix expansion of 'Update with multiple choices in GNATprove\n\ngcc/ada/\n\n\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Fix\n\texpansion of attribute Update.", "tree": {"sha": "276bc81bf72a295058092ad01f9d7e673187e7ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/276bc81bf72a295058092ad01f9d7e673187e7ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/964cf38cb37e4766837b284a566cabe0fc737f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964cf38cb37e4766837b284a566cabe0fc737f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964cf38cb37e4766837b284a566cabe0fc737f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964cf38cb37e4766837b284a566cabe0fc737f26/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f74065e26a7a795d480884f352d0aeb69b8f436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f74065e26a7a795d480884f352d0aeb69b8f436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f74065e26a7a795d480884f352d0aeb69b8f436"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "a02c0c882efcd9ee321a77c423a371dcfd9a87b7", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964cf38cb37e4766837b284a566cabe0fc737f26/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964cf38cb37e4766837b284a566cabe0fc737f26/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=964cf38cb37e4766837b284a566cabe0fc737f26", "patch": "@@ -258,10 +258,12 @@ package body Exp_SPARK is\n \n             Assoc     : Node_Id;\n             Comp      : Node_Id;\n+            Comp_Id   : Entity_Id;\n             Comp_Type : Entity_Id;\n             Expr      : Node_Id;\n             Index     : Node_Id;\n             Index_Typ : Entity_Id;\n+            New_Assoc : Node_Id;\n \n          begin\n             --  Apply scalar range checks on the updated components, if needed\n@@ -346,19 +348,65 @@ package body Exp_SPARK is\n \n             else pragma Assert (Is_Record_Type (Typ));\n \n+               --  If the aggregate has multiple component choices, e.g.\n+               --\n+               --    X'Update (A | B | C => 123)\n+               --\n+               --  then each component might be of a different type and might\n+               --  or might not require a range check. We first rewrite\n+               --  associations into single-component choices, e.g.:\n+               --\n+               --    X'Update (A => 123, B => 123, C => 123)\n+               --\n+               --  and then apply range checks to individual copies of the\n+               --  expressions.\n+\n+               --  Iterate over associations of the original aggregate\n+\n                Assoc := First (Component_Associations (Aggr));\n+\n+               --  Rewrite into a new aggregate and decorate\n+\n+               Rewrite\n+                 (Aggr,\n+                  Make_Aggregate\n+                    (Sloc                   => Sloc (Aggr),\n+                     Component_Associations => New_List));\n+\n+               Set_Etype (Aggr, Typ);\n+\n+               --  Populate the new aggregate with component associations\n+\n                while Present (Assoc) loop\n-                  Expr      := Expression (Assoc);\n-                  Comp      := First (Choices (Assoc));\n-                  Comp_Type := Etype (Entity (Comp));\n+                  Expr := Expression (Assoc);\n+                  Comp := First (Choices (Assoc));\n+\n+                  while Present (Comp) loop\n+                     Comp_Id   := Entity (Comp);\n+                     Comp_Type := Etype (Comp_Id);\n \n-                  --  Use the type of the first component from the Choices\n-                  --  list, as multiple components can only appear there if\n-                  --  they have exactly the same type.\n+                     New_Assoc :=\n+                       Make_Component_Association\n+                         (Sloc       => Sloc (Assoc),\n+                          Choices    =>\n+                            New_List\n+                              (New_Occurrence_Of (Comp_Id, Sloc (Comp))),\n+                          Expression => New_Copy_Tree (Expr));\n \n-                  if Is_Scalar_Type (Comp_Type) then\n-                     Apply_Scalar_Range_Check (Expr, Comp_Type);\n-                  end if;\n+                     --  New association must be attached as a child of the\n+                     --  aggregate before we analyze it.\n+\n+                     Append (New_Assoc, Component_Associations (Aggr));\n+\n+                     Analyze_And_Resolve (Expression (New_Assoc), Comp_Type);\n+\n+                     if Is_Scalar_Type (Comp_Type) then\n+                        Apply_Scalar_Range_Check\n+                          (Expression (New_Assoc), Comp_Type);\n+                     end if;\n+\n+                     Next (Comp);\n+                  end loop;\n \n                   Next (Assoc);\n                end loop;"}]}