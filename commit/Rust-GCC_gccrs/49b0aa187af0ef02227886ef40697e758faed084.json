{"sha": "49b0aa187af0ef02227886ef40697e758faed084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDliMGFhMTg3YWYwZWYwMjIyNzg4NmVmNDA2OTdlNzU4ZmFlZDA4NA==", "commit": {"author": {"name": "Joshua J Cogliati", "email": "jrincayc@yahoo.com", "date": "2013-11-20T07:15:40Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2013-11-20T07:15:40Z"}, "message": "re PR c/53001 (-Wfloat-conversion should be available to warn about floating point errors)\n\n2013-11-19  Joshua J Cogliati  <jrincayc@yahoo.com>\n\n\tPR c/53001\n\tSplitting out a -Wfloat-conversion from -Wconversion for\n\tconversions that lower floating point number precision\n\tor conversion from floating point numbers to integers.\n\ngcc/c-family/\n\n\t* c-common.c (unsafe_conversion_p): Make this function\n\treturn an enumeration with more detail.\n\t(conversion_warning): Use the new return type of\n\tunsafe_conversion_p to separately warn either about conversions\n\tthat lower floating point number precision or about the other\n\tkinds of conversions.\n \t* c-common.h (enum conversion_safety): New enumeration.\n \t(unsafe_conversion_p): switching return type to\n \tconversion_safety enumeration.\n\t* c.opt: Adding new warning -Wfloat-conversion and\n\tenabling it with -Wconversion.\n\ngcc/\n\n\t* doc/invoke.texi: Adding documentation about\n\t-Wfloat-conversion.\n\ngcc/testsuite/\n\n\t* c-c++-common/Wfloat-conversion.c: Copies relevant\n\ttests from c-c++-common/Wconversion-real.c,\n\tgcc.dg/Wconversion-real-integer.c and gcc.dg/pr35635.c into\n\tnew testcase for conversions that are warned about by\n\t-Wfloat-conversion.\n\nFrom-SVN: r205090", "tree": {"sha": "1db592038d3ef44848cd4d54d0f45ab0344081ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1db592038d3ef44848cd4d54d0f45ab0344081ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49b0aa187af0ef02227886ef40697e758faed084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b0aa187af0ef02227886ef40697e758faed084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49b0aa187af0ef02227886ef40697e758faed084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b0aa187af0ef02227886ef40697e758faed084/comments", "author": {"login": "jrincayc", "id": 9276782, "node_id": "MDQ6VXNlcjkyNzY3ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/9276782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrincayc", "html_url": "https://github.com/jrincayc", "followers_url": "https://api.github.com/users/jrincayc/followers", "following_url": "https://api.github.com/users/jrincayc/following{/other_user}", "gists_url": "https://api.github.com/users/jrincayc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrincayc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrincayc/subscriptions", "organizations_url": "https://api.github.com/users/jrincayc/orgs", "repos_url": "https://api.github.com/users/jrincayc/repos", "events_url": "https://api.github.com/users/jrincayc/events{/privacy}", "received_events_url": "https://api.github.com/users/jrincayc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b891d26733800746d0a95319846bd6134a48195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b891d26733800746d0a95319846bd6134a48195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b891d26733800746d0a95319846bd6134a48195"}], "stats": {"total": 162, "additions": 142, "deletions": 20}, "files": [{"sha": "3900adfd66c929b3fc2fc0b84715812297e34e98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b0aa187af0ef02227886ef40697e758faed084/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b0aa187af0ef02227886ef40697e758faed084/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49b0aa187af0ef02227886ef40697e758faed084", "patch": "@@ -1,3 +1,9 @@\n+2013-11-19  Joshua J Cogliati  <jrincayc@yahoo.com>\n+\n+\tPR c/53001\n+\t* doc/invoke.texi: Adding documentation about\n+\t-Wfloat-conversion.\n+\n 2013-11-20  Miro Kropacek  <miro.kropacek@gmail.com>\n \n \t* config/m68k/m68k.c (m68k_option_overrides): Fix typo."}, {"sha": "525efad325b58077889f85e4ca392129d7cfae41", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=49b0aa187af0ef02227886ef40697e758faed084", "patch": "@@ -1,3 +1,18 @@\n+2013-11-19  Joshua J Cogliati  <jrincayc@yahoo.com>\n+\n+\tPR c/53001\n+\t* c-common.c (unsafe_conversion_p): Make this function\n+\treturn an enumeration with more detail.\n+\t(conversion_warning): Use the new return type of\n+\tunsafe_conversion_p to separately warn either about conversions\n+\tthat lower floating point number precision or about the other\n+\tkinds of conversions.\n+\t* c-common.h (enum conversion_safety): New enumeration.\n+ \t(unsafe_conversion_p): switching return type to\n+ \tconversion_safety enumeration.\n+\t* c.opt: Adding new warning -Wfloat-conversion and\n+\tenabling it with -Wconversion.\n+\n 2013-11-19  Basile Starynkevitch  <basile@starynkevitch.net>\n \n         * c-opts.c: Include plugin.h."}, {"sha": "9f89a161b1484ee870ce6d9ddfeb278cbbc84196", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=49b0aa187af0ef02227886ef40697e758faed084", "patch": "@@ -2537,20 +2537,20 @@ shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwise)\n }\n \n /* Checks if expression EXPR of real/integer type cannot be converted \n-   to the real/integer type TYPE. Function returns true when:\n+   to the real/integer type TYPE. Function returns non-zero when:\n \t* EXPR is a constant which cannot be exactly converted to TYPE \n \t* EXPR is not a constant and size of EXPR's type > than size of TYPE, \n \t  for EXPR type and TYPE being both integers or both real.\n \t* EXPR is not a constant of real type and TYPE is an integer.  \n \t* EXPR is not a constant of integer type which cannot be \n \t  exactly converted to real type.  \n    Function allows conversions between types of different signedness and\n-   does not return true in that case.  Function can produce signedness\n-   warnings if PRODUCE_WARNS is true.  */\n-bool\n+   can return SAFE_CONVERSION (zero) in that case.  Function can produce\n+   signedness warnings if PRODUCE_WARNS is true.  */\n+enum conversion_safety\n unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n {\n-  bool give_warning = false;\n+  enum conversion_safety give_warning = SAFE_CONVERSION; /* is 0 or false */\n   tree expr_type = TREE_TYPE (expr);\n   location_t loc = EXPR_LOC_OR_HERE (expr);\n \n@@ -2562,7 +2562,7 @@ unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n \t  && TREE_CODE (type) == INTEGER_TYPE)\n \t{\n \t  if (!real_isinteger (TREE_REAL_CST_PTR (expr), TYPE_MODE (expr_type)))\n-\t    give_warning = true;\n+\t    give_warning = UNSAFE_REAL;\n \t}\n       /* Warn for an integer constant that does not fit into integer type.  */\n       else if (TREE_CODE (expr_type) == INTEGER_TYPE\n@@ -2583,7 +2583,7 @@ unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n \t\t\t    \" constant value to negative integer\");\n \t    }\n \t  else\n-\t    give_warning = true;\n+\t    give_warning = UNSAFE_OTHER;\n \t}\n       else if (TREE_CODE (type) == REAL_TYPE)\n \t{\n@@ -2592,7 +2592,7 @@ unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n \t    {\n \t      REAL_VALUE_TYPE a = real_value_from_int_cst (0, expr);\n \t      if (!exact_real_truncate (TYPE_MODE (type), &a))\n-\t\tgive_warning = true;\n+\t\tgive_warning = UNSAFE_REAL;\n \t    }\n \t  /* Warn for a real constant that does not fit into a smaller\n \t     real type.  */\n@@ -2601,7 +2601,7 @@ unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n \t    {\n \t      REAL_VALUE_TYPE a = TREE_REAL_CST (expr);\n \t      if (!exact_real_truncate (TYPE_MODE (type), &a))\n-\t\tgive_warning = true;\n+\t\tgive_warning = UNSAFE_REAL;\n \t    }\n \t}\n     }\n@@ -2610,7 +2610,7 @@ unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n       /* Warn for real types converted to integer types.  */\n       if (TREE_CODE (expr_type) == REAL_TYPE\n \t  && TREE_CODE (type) == INTEGER_TYPE)\n-\tgive_warning = true;\n+\tgive_warning = UNSAFE_REAL;\n \n       else if (TREE_CODE (expr_type) == INTEGER_TYPE\n \t       && TREE_CODE (type) == INTEGER_TYPE)\n@@ -2648,7 +2648,7 @@ unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n \t\t\t  && int_fits_type_p (op1, c_common_signed_type (type))\n \t\t\t  && int_fits_type_p (op1,\n \t\t\t\t\t      c_common_unsigned_type (type))))\n-\t\t    return false;\n+\t\t    return SAFE_CONVERSION;\n \t\t  /* If constant is unsigned and fits in the target\n \t\t     type, then the result will also fit.  */\n \t\t  else if ((TREE_CODE (op0) == INTEGER_CST\n@@ -2657,12 +2657,12 @@ unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n \t\t\t   || (TREE_CODE (op1) == INTEGER_CST\n \t\t\t       && unsigned1\n \t\t\t       && int_fits_type_p (op1, type)))\n-\t\t    return false;\n+\t\t    return SAFE_CONVERSION;\n \t\t}\n \t    }\n \t  /* Warn for integer types converted to smaller integer types.  */\n \t  if (TYPE_PRECISION (type) < TYPE_PRECISION (expr_type))\n-\t    give_warning = true;\n+\t    give_warning = UNSAFE_OTHER;\n \n \t  /* When they are the same width but different signedness,\n \t     then the value may change.  */\n@@ -2698,14 +2698,14 @@ unsafe_conversion_p (tree type, tree expr, bool produce_warns)\n \n \t  if (!exact_real_truncate (TYPE_MODE (type), &real_low_bound)\n \t      || !exact_real_truncate (TYPE_MODE (type), &real_high_bound))\n-\t    give_warning = true;\n+\t    give_warning = UNSAFE_OTHER;\n \t}\n \n       /* Warn for real types converted to smaller real types.  */\n       else if (TREE_CODE (expr_type) == REAL_TYPE\n \t       && TREE_CODE (type) == REAL_TYPE\n \t       && TYPE_PRECISION (type) < TYPE_PRECISION (expr_type))\n-\tgive_warning = true;\n+\tgive_warning = UNSAFE_REAL;\n     }\n \n   return give_warning;\n@@ -2719,8 +2719,9 @@ conversion_warning (tree type, tree expr)\n {\n   tree expr_type = TREE_TYPE (expr);\n   location_t loc = EXPR_LOC_OR_HERE (expr);\n+  enum conversion_safety conversion_kind;\n \n-  if (!warn_conversion && !warn_sign_conversion)\n+  if (!warn_conversion && !warn_sign_conversion && !warn_float_conversion)\n     return;\n \n   switch (TREE_CODE (expr))\n@@ -2747,7 +2748,12 @@ conversion_warning (tree type, tree expr)\n \n     case REAL_CST:\n     case INTEGER_CST:\n-      if (unsafe_conversion_p (type, expr, true))\n+      conversion_kind = unsafe_conversion_p (type, expr, true);\n+      if (conversion_kind == UNSAFE_REAL)\n+\twarning_at (loc, OPT_Wfloat_conversion,\n+\t\t    \"conversion to %qT alters %qT constant value\",\n+\t\t    type, expr_type);\n+      else if (conversion_kind)\n \twarning_at (loc, OPT_Wconversion,\n \t\t    \"conversion to %qT alters %qT constant value\",\n \t\t    type, expr_type);\n@@ -2766,7 +2772,12 @@ conversion_warning (tree type, tree expr)\n       }\n \n     default: /* 'expr' is not a constant.  */\n-      if (unsafe_conversion_p (type, expr, true))\n+      conversion_kind = unsafe_conversion_p (type, expr, true);\n+      if (conversion_kind == UNSAFE_REAL)\n+\twarning_at (loc, OPT_Wfloat_conversion,\n+\t\t    \"conversion to %qT from %qT may alter its value\",\n+\t\t    type, expr_type);\n+      else if (conversion_kind)\n \twarning_at (loc, OPT_Wconversion,\n \t\t    \"conversion to %qT from %qT may alter its value\",\n \t\t    type, expr_type);"}, {"sha": "664e9287a1b43ddd09da777e537f00a8aac5ad91", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=49b0aa187af0ef02227886ef40697e758faed084", "patch": "@@ -688,6 +688,16 @@ struct visibility_flags\n   unsigned inlines_hidden : 1;\t/* True when -finlineshidden in effect.  */\n };\n \n+/* These enumerators are possible types of unsafe conversions.\n+   SAFE_CONVERSION The conversion is safe\n+   UNSAFE_OTHER Another type of conversion with problems\n+   UNSAFE_SIGN Conversion between signed and unsigned integers\n+    which are all warned about immediately, so this is unused\n+   UNSAFE_REAL Conversions that reduce the precision of reals\n+    including conversions from reals to integers\n+ */\n+enum conversion_safety { SAFE_CONVERSION = 0, UNSAFE_OTHER, UNSAFE_SIGN, UNSAFE_REAL };\n+\n /* Global visibility options.  */\n extern struct visibility_flags visibility_options;\n \n@@ -741,7 +751,7 @@ extern tree c_common_signed_type (tree);\n extern tree c_common_signed_or_unsigned_type (int, tree);\n extern void c_common_init_ts (void);\n extern tree c_build_bitfield_integer_type (unsigned HOST_WIDE_INT, int);\n-extern bool unsafe_conversion_p (tree, tree, bool);\n+extern enum conversion_safety unsafe_conversion_p (tree, tree, bool);\n extern bool decl_with_nonnull_addr_p (const_tree);\n extern tree c_fully_fold (tree, bool, bool *);\n extern tree decl_constant_value_for_optimization (tree);"}, {"sha": "ac6788554148961596b52bba32bdf1da70be8075", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=49b0aa187af0ef02227886ef40697e758faed084", "patch": "@@ -387,6 +387,10 @@ Werror-implicit-function-declaration\n C ObjC RejectNegative Warning Alias(Werror=, implicit-function-declaration)\n This switch is deprecated; use -Werror=implicit-function-declaration instead\n \n+Wfloat-conversion\n+C ObjC C++ ObjC++ Var(warn_float_conversion) LangEnabledBy(C ObjC C++ ObjC++,Wconversion)\n+Warn for implicit type conversions that cause loss of floating point precision\n+\n Wfloat-equal\n C ObjC C++ ObjC++ Var(warn_float_equal) Warning\n Warn if testing floating point numbers for equality"}, {"sha": "6fc56b92aada043f9730b3f0831271e8f031a77a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=49b0aa187af0ef02227886ef40697e758faed084", "patch": "@@ -262,7 +262,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n -Wredundant-decls  -Wno-return-local-addr @gol\n -Wreturn-type  -Wsequence-point  -Wshadow @gol\n--Wsign-compare  -Wsign-conversion  -Wsizeof-pointer-memaccess @gol\n+-Wsign-compare  -Wsign-conversion -Wfloat-conversion @gol\n+-Wsizeof-pointer-memaccess @gol\n -Wstack-protector -Wstack-usage=@var{len} -Wstrict-aliasing @gol\n -Wstrict-aliasing=n @gol -Wstrict-overflow -Wstrict-overflow=@var{n} @gol\n -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{|}format@r{]} @gol\n@@ -4592,6 +4593,14 @@ value, like assigning a signed integer expression to an unsigned\n integer variable. An explicit cast silences the warning. In C, this\n option is enabled also by @option{-Wconversion}.\n \n+@item -Wfloat-conversion\n+@opindex Wfloat-conversion\n+@opindex Wno-float-conversion\n+Warn for implicit conversions that reduce the precision of a real value.\n+This includes conversions from real to integer, and from higher precision\n+real to lower precision real values.  This option is also enabled by\n+@option{-Wconversion}.\n+\n @item -Wsizeof-pointer-memaccess\n @opindex Wsizeof-pointer-memaccess\n @opindex Wno-sizeof-pointer-memaccess"}, {"sha": "bb30fd36e6ae622aa5e746cbedc3a3e49cfee6de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49b0aa187af0ef02227886ef40697e758faed084", "patch": "@@ -1,3 +1,12 @@\n+2013-11-19  Joshua J Cogliati  <jrincayc@yahoo.com>\n+\n+\tPR c/53001\n+\t* c-c++-common/Wfloat-conversion.c: Copies relevant\n+\ttests from c-c++-common/Wconversion-real.c,\n+\tgcc.dg/Wconversion-real-integer.c and gcc.dg/pr35635.c into\n+\tnew testcase for conversions that are warned about by\n+\t-Wfloat-conversion.\n+\n 2013-11-19  Martin Jambor  <mjambor@suse.cz>\n \n \tPR rtl-optimization/59099"}, {"sha": "e872755902deeab3081e2cabe26acfc35c9d5b6e", "filename": "gcc/testsuite/c-c++-common/Wfloat-conversion.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWfloat-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b0aa187af0ef02227886ef40697e758faed084/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWfloat-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWfloat-conversion.c?ref=49b0aa187af0ef02227886ef40697e758faed084", "patch": "@@ -0,0 +1,58 @@\n+/* Test for diagnostics for Wconversion for floating-point.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -Wfloat-conversion\" { target c } } */\n+/* { dg-options \"-Wfloat-conversion\" { target c++ } } */\n+/* { dg-require-effective-target large_double } */\n+/* { dg-require-effective-target int32plus } */\n+/* { dg-require-effective-target double64plus } */\n+#include <limits.h>\n+\n+float  vfloat;\n+double vdouble;\n+long double vlongdouble;\n+int bar;\n+\n+void fsi (signed int x);\n+void fui (unsigned int x);\n+void ffloat (float f);\n+void fdouble (double d);\n+void flongdouble (long double ld);\n+\n+void h (void)\n+{\n+  unsigned int ui = 3;\n+  int   si = 3;\n+  unsigned char uc = 3;\n+  signed char sc = 3;\n+  float f = 0;\n+  double d = 0;\n+  long double ld = 0;\n+\n+  ffloat (3.1); /* { dg-warning \"conversion to 'float' alters 'double' constant value\" } */\n+  vfloat = 3.1; /* { dg-warning \"conversion to 'float' alters 'double' constant value\" } */\n+  ffloat (3.1L); /* { dg-warning \"conversion to 'float' alters 'long double' constant value\" } */\n+  vfloat = 3.1L;  /* { dg-warning \"conversion to 'float' alters 'long double' constant value\" } */\n+  fdouble (3.1L); /* { dg-warning \"conversion to 'double' alters 'long double' constant value\" \"\" { target large_long_double } } */\n+  vdouble = 3.1L; /* { dg-warning \"conversion to 'double' alters 'long double' constant value\" \"\" { target large_long_double } } */\n+  ffloat (vdouble); /* { dg-warning \"conversion to 'float' from 'double' may alter its value\" } */\n+  vfloat = vdouble; /* { dg-warning \"conversion to 'float' from 'double' may alter its value\" } */\n+  ffloat (vlongdouble); /* { dg-warning \"conversion to 'float' from 'long double' may alter its value\" } */\n+  vfloat = vlongdouble; /* { dg-warning \"conversion to 'float' from 'long double' may alter its value\" } */\n+  fdouble (vlongdouble); /* { dg-warning \"conversion to 'double' from 'long double' may alter its value\" \"\" { target large_long_double } } */\n+  vdouble = vlongdouble; /* { dg-warning \"conversion to 'double' from 'long double' may alter its value\" \"\" { target large_long_double } } */\n+\n+  fsi (3.1f); /* { dg-warning \"conversion to 'int' alters 'float' constant value\" } */\n+  si = 3.1f; /* { dg-warning \"conversion to 'int' alters 'float' constant value\" } */\n+  fsi (3.1);  /* { dg-warning \"conversion to 'int' alters 'double' constant value\" } */\n+  si = 3.1;  /* { dg-warning \"conversion to 'int' alters 'double' constant value\" } */\n+  fsi (d);    /* { dg-warning \"conversion to 'int' from 'double' may alter its value\" } */\n+  si = d;    /* { dg-warning \"conversion to 'int' from 'double' may alter its value\" } */\n+  ffloat (INT_MAX);  /* { dg-warning \"conversion to 'float' alters 'int' constant value\" } */\n+  vfloat = INT_MAX;  /* { dg-warning \"conversion to 'float' alters 'int' constant value\" } */\n+  ffloat (16777217); /* { dg-warning \"conversion to 'float' alters 'int' constant value\" } */\n+  vfloat = 16777217; /* { dg-warning \"conversion to 'float' alters 'int' constant value\" } */\n+\n+  sc = bar != 0 ? 2.1 : 10; /* { dg-warning \"conversion to 'signed char' alters 'double' constant value\" } */\n+  uc = bar != 0 ? 2.1 : 10; /* { dg-warning \"conversion to 'unsigned char' alters 'double' constant value\" } */\n+}"}]}