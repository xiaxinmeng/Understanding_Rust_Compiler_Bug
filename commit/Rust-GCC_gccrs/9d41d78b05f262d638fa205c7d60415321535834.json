{"sha": "9d41d78b05f262d638fa205c7d60415321535834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ0MWQ3OGIwNWYyNjJkNjM4ZmEyMDVjN2Q2MDQxNTMyMTUzNTgzNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-10-13T07:15:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-25T13:22:28Z"}, "message": "[Ada] Adjust support for 128-bit integer types in System.Random_Numbers\n\ngcc/ada/\n\n\t* libgnat/s-rannum.adb (Random_Discrete): Specifically deal with\n\tthe case where the size of the base type is larger than 64 bits.", "tree": {"sha": "6785031d2339fa5097981501e207524cfabaefef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6785031d2339fa5097981501e207524cfabaefef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d41d78b05f262d638fa205c7d60415321535834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d41d78b05f262d638fa205c7d60415321535834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d41d78b05f262d638fa205c7d60415321535834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d41d78b05f262d638fa205c7d60415321535834/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c229e14c4d6c5c6e2d1ff18741e89d7149d81d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c229e14c4d6c5c6e2d1ff18741e89d7149d81d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c229e14c4d6c5c6e2d1ff18741e89d7149d81d"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "ab6428f9ff8a8d83a3cb9920c514780e31b6d0c3", "filename": "gcc/ada/libgnat/s-rannum.adb", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d41d78b05f262d638fa205c7d60415321535834/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d41d78b05f262d638fa205c7d60415321535834/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-rannum.adb?ref=9d41d78b05f262d638fa205c7d60415321535834", "patch": "@@ -409,6 +409,41 @@ is\n       elsif Max < Min then\n          raise Constraint_Error;\n \n+      --  In the 128-bit case, we have to be careful since not all 128-bit\n+      --  unsigned values are representable in GNAT's universal integer.\n+\n+      elsif Result_Subtype'Base'Size > 64 then\n+         declare\n+            --  Ignore unequal-size warnings since GNAT's handling is correct.\n+\n+            pragma Warnings (\"Z\");\n+            function Conv_To_Unsigned is\n+               new Unchecked_Conversion (Result_Subtype'Base, Unsigned_128);\n+            function Conv_To_Result is\n+               new Unchecked_Conversion (Unsigned_128, Result_Subtype'Base);\n+            pragma Warnings (\"z\");\n+\n+            N : constant Unsigned_128 :=\n+                  Conv_To_Unsigned (Max) - Conv_To_Unsigned (Min) + 1;\n+\n+            X, Slop : Unsigned_128;\n+\n+         begin\n+            if N = 0 then\n+               return Conv_To_Result (Conv_To_Unsigned (Min) + Random (Gen));\n+\n+            else\n+               Slop := Unsigned_128'Last rem N + 1;\n+\n+               loop\n+                  X := Random (Gen);\n+                  exit when Slop = N or else X <= Unsigned_128'Last - Slop;\n+               end loop;\n+\n+               return Conv_To_Result (Conv_To_Unsigned (Min) + X rem N);\n+            end if;\n+         end;\n+\n       --  In the 64-bit case, we have to be careful since not all 64-bit\n       --  unsigned values are representable in GNAT's universal integer.\n "}]}