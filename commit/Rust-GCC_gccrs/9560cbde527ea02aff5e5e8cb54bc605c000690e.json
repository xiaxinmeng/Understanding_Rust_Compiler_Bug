{"sha": "9560cbde527ea02aff5e5e8cb54bc605c000690e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2MGNiZGU1MjdlYTAyYWZmNWU1ZThjYjU0YmM2MDVjMDAwNjkwZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-03-02T17:13:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-03-02T17:13:09Z"}, "message": "re PR c++/19916 (Segmentation fault in __static_initialization_and_destruction_0)\n\n\tPR c++/19916\n\t* varasm.c (initializer_constant_valid_p): Allow conversions\n\tbetween OFFSET_TYPEs.  Tidy.\n\n\tPR c++/19916\n\t* g++.dg/init/ptrmem2.C: New test.\n\nFrom-SVN: r95787", "tree": {"sha": "80fbf71bf5886e6e3f2c8d0c427f13ed3863b027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80fbf71bf5886e6e3f2c8d0c427f13ed3863b027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9560cbde527ea02aff5e5e8cb54bc605c000690e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9560cbde527ea02aff5e5e8cb54bc605c000690e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9560cbde527ea02aff5e5e8cb54bc605c000690e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9560cbde527ea02aff5e5e8cb54bc605c000690e/comments", "author": null, "committer": null, "parents": [{"sha": "bf95bc65e075027af69946f8536930132a8f7520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf95bc65e075027af69946f8536930132a8f7520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf95bc65e075027af69946f8536930132a8f7520"}], "stats": {"total": 131, "additions": 76, "deletions": 55}, "files": [{"sha": "3f8b31e274224c602a841c684132cb3c8badbe2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9560cbde527ea02aff5e5e8cb54bc605c000690e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9560cbde527ea02aff5e5e8cb54bc605c000690e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9560cbde527ea02aff5e5e8cb54bc605c000690e", "patch": "@@ -1,3 +1,9 @@\n+2005-03-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/19916\n+\t* varasm.c (initializer_constant_valid_p): Allow conversions\n+\tbetween OFFSET_TYPEs.  Tidy.\n+\n 2005-03-02  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.md (\"return\"): Remove epilogue delay list"}, {"sha": "5351064c549402163d02067cdc00e8898cb019ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9560cbde527ea02aff5e5e8cb54bc605c000690e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9560cbde527ea02aff5e5e8cb54bc605c000690e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9560cbde527ea02aff5e5e8cb54bc605c000690e", "patch": "@@ -1,3 +1,8 @@\n+2005-03-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/19916\n+\t* g++.dg/init/ptrmem2.C: New test.\n+\n 2005-03-02  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/8927"}, {"sha": "54b69215bb47c2855381ae9bc7887b2183492f7e", "filename": "gcc/testsuite/g++.dg/init/ptrmem2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9560cbde527ea02aff5e5e8cb54bc605c000690e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9560cbde527ea02aff5e5e8cb54bc605c000690e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrmem2.C?ref=9560cbde527ea02aff5e5e8cb54bc605c000690e", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/19916\n+// { dg-do run }\n+\n+struct S {\n+  char k;\n+};\n+\n+char const volatile S::* const p01 = &S::k;\n+int main(void)\n+{\n+  return  0;\n+}"}, {"sha": "29ce0486766475d9a7e035f5bfc0e56be11a1a45", "filename": "gcc/varasm.c", "status": "modified", "additions": 53, "deletions": 55, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9560cbde527ea02aff5e5e8cb54bc605c000690e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9560cbde527ea02aff5e5e8cb54bc605c000690e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9560cbde527ea02aff5e5e8cb54bc605c000690e", "patch": "@@ -3523,63 +3523,61 @@ initializer_constant_valid_p (tree value, tree endtype)\n \n     case CONVERT_EXPR:\n     case NOP_EXPR:\n-      /* Allow conversions between pointer types.  */\n-      if (POINTER_TYPE_P (TREE_TYPE (value))\n-\t  && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (value, 0))))\n-\treturn initializer_constant_valid_p (TREE_OPERAND (value, 0), endtype);\n-\n-      /* Allow conversions between real types.  */\n-      if (FLOAT_TYPE_P (TREE_TYPE (value))\n-\t  && FLOAT_TYPE_P (TREE_TYPE (TREE_OPERAND (value, 0))))\n-\treturn initializer_constant_valid_p (TREE_OPERAND (value, 0), endtype);\n-\n-      /* Allow length-preserving conversions between integer types.  */\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (value))\n-\t  && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (value, 0)))\n-\t  && (TYPE_PRECISION (TREE_TYPE (value))\n-\t      == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (value, 0)))))\n-\treturn initializer_constant_valid_p (TREE_OPERAND (value, 0), endtype);\n-\n-      /* Allow conversions between other integer types only if\n-\t explicit value.  */\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (value))\n-\t  && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (value, 0))))\n-\t{\n-\t  tree inner = initializer_constant_valid_p (TREE_OPERAND (value, 0),\n-\t\t\t\t\t\t     endtype);\n-\t  if (inner == null_pointer_node)\n-\t    return null_pointer_node;\n-\t  break;\n-\t}\n+      {\n+\ttree src;\n+\ttree src_type;\n+\ttree dest_type;\n+\n+\tsrc = TREE_OPERAND (value, 0);\n+\tsrc_type = TREE_TYPE (src);\n+\tdest_type = TREE_TYPE (value);\n+\n+\t/* Allow conversions between pointer types, floating-point\n+\t   types, and offset types.  */\n+\tif ((POINTER_TYPE_P (dest_type) && POINTER_TYPE_P (src_type))\n+\t    || (FLOAT_TYPE_P (dest_type) && FLOAT_TYPE_P (src_type))\n+\t    || (TREE_CODE (dest_type) == OFFSET_TYPE\n+\t\t&& TREE_CODE (src_type) == OFFSET_TYPE))\n+\t  return initializer_constant_valid_p (src, endtype);\n+\n+\t/* Allow length-preserving conversions between integer types.  */\n+\tif (INTEGRAL_TYPE_P (dest_type) && INTEGRAL_TYPE_P (src_type)\n+\t    && (TYPE_PRECISION (dest_type) == TYPE_PRECISION (src_type)))\n+\t  return initializer_constant_valid_p (src, endtype);\n+\n+\t/* Allow conversions between other integer types only if\n+\t   explicit value.  */\n+\tif (INTEGRAL_TYPE_P (dest_type) && INTEGRAL_TYPE_P (src_type))\n+\t  {\n+\t    tree inner = initializer_constant_valid_p (src, endtype);\n+\t    if (inner == null_pointer_node)\n+\t      return null_pointer_node;\n+\t    break;\n+\t  }\n \n-      /* Allow (int) &foo provided int is as wide as a pointer.  */\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (value))\n-\t  && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (value, 0)))\n-\t  && (TYPE_PRECISION (TREE_TYPE (value))\n-\t      >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (value, 0)))))\n-\treturn initializer_constant_valid_p (TREE_OPERAND (value, 0),\n-\t\t\t\t\t     endtype);\n-\n-      /* Likewise conversions from int to pointers, but also allow\n-\t conversions from 0.  */\n-      if ((POINTER_TYPE_P (TREE_TYPE (value))\n-\t   || TREE_CODE (TREE_TYPE (value)) == OFFSET_TYPE)\n-\t  && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (value, 0))))\n-\t{\n-\t  if (integer_zerop (TREE_OPERAND (value, 0)))\n-\t    return null_pointer_node;\n-\t  else if (TYPE_PRECISION (TREE_TYPE (value))\n-\t\t   <= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (value, 0))))\n-\t    return initializer_constant_valid_p (TREE_OPERAND (value, 0),\n-\t\t\t\t\t\t endtype);\n-\t}\n+\t/* Allow (int) &foo provided int is as wide as a pointer.  */\n+\tif (INTEGRAL_TYPE_P (dest_type) && POINTER_TYPE_P (src_type)\n+\t    && (TYPE_PRECISION (dest_type) >= TYPE_PRECISION (src_type)))\n+\t  return initializer_constant_valid_p (src, endtype);\n \n-      /* Allow conversions to struct or union types if the value\n-\t inside is okay.  */\n-      if (TREE_CODE (TREE_TYPE (value)) == RECORD_TYPE\n-\t  || TREE_CODE (TREE_TYPE (value)) == UNION_TYPE)\n-\treturn initializer_constant_valid_p (TREE_OPERAND (value, 0),\n-\t\t\t\t\t     endtype);\n+\t/* Likewise conversions from int to pointers, but also allow\n+\t   conversions from 0.  */\n+\tif ((POINTER_TYPE_P (dest_type)\n+\t     || TREE_CODE (dest_type) == OFFSET_TYPE)\n+\t    && INTEGRAL_TYPE_P (src_type))\n+\t  {\n+\t    if (integer_zerop (src))\n+\t      return null_pointer_node;\n+\t    else if (TYPE_PRECISION (dest_type) <= TYPE_PRECISION (src_type))\n+\t      return initializer_constant_valid_p (src, endtype);\n+\t  }\n+\n+\t/* Allow conversions to struct or union types if the value\n+\t   inside is okay.  */\n+\tif (TREE_CODE (dest_type) == RECORD_TYPE\n+\t    || TREE_CODE (dest_type) == UNION_TYPE)\n+\t  return initializer_constant_valid_p (src, endtype);\n+      }\n       break;\n \n     case PLUS_EXPR:"}]}