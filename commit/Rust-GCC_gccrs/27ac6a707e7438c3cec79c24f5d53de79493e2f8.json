{"sha": "27ac6a707e7438c3cec79c24f5d53de79493e2f8", "node_id": "C_kwDOANBUbNoAKDI3YWM2YTcwN2U3NDM4YzNjZWM3OWMyNGY1ZDUzZGU3OTQ5M2UyZjg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-01-30T14:02:00Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-03T18:56:26Z"}, "message": "c++: wrong error with constexpr array and value-init [PR108158]\n\nIn this test case, we find ourselves evaluating 't' which is\n((const struct carray *) this)->data_[VIEW_CONVERT_EXPR<long int>(index)]\nin cxx_eval_array_reference.  ctx->object is non-null, a RESULT_DECL, so\nwe replace it with 't':\n\n  new_ctx.object = t; // result_decl replaced\n\nand then we go to cxx_eval_constant_expression to evaluate an\nAGGR_INIT_EXPR, where we end up evaluating an INIT_EXPR (which is in the\nbody of the constructor for seed_or_index):\n\n  ((struct seed_or_index *) this)->value_ = NON_LVALUE_EXPR <0>\n\nwhereupon in cxx_eval_store_expression we go to the probe loop\nwhere the 'this' is evaluated to\n\n  ze_set.tables_.first_table_.data_[0]\n\nso the 'object' is ze_set, but that isn't in ctx->global->get_value_ptr\nso we fail with a bogus error.  ze_set is not there because it comes\nfrom a different constexpr context (it's not in cv_cache either).\n\nThe problem started with r12-2304 where I added the new_ctx.object\nreplacement.  That was to prevent a type mismatch: the type of 't'\nand ctx.object were different.\n\nIt seems clear that we shouldn't have replaced ctx.object here.\nThe cxx_eval_array_reference I mentioned earlier is called from\ncxx_eval_store_expression:\n 6257       init = cxx_eval_constant_expression (&new_ctx, init, vc_prvalue,\n 6258                                            non_constant_p, overflow_p);\nwhich already created a new context, whose .object we should be\nusing unless, for instance, INIT contained a.b and we're evaluating\nthe 'a' part, which I think was the case for r12-2304; in that case\nctx.object has to be something different.\n\nIt no longer seems necessary to replace new_ctx.object (likely due to\nchanges in empty class handling).\n\n\tPR c++/108158\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_array_reference): Don't replace\n\tnew_ctx.object.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/constexpr-108158.C: New test.", "tree": {"sha": "5bc66522213f27be25d1fed73e927136b6aa4204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bc66522213f27be25d1fed73e927136b6aa4204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27ac6a707e7438c3cec79c24f5d53de79493e2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ac6a707e7438c3cec79c24f5d53de79493e2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ac6a707e7438c3cec79c24f5d53de79493e2f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ac6a707e7438c3cec79c24f5d53de79493e2f8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60fca1802a25034f49fa1e3769b3a5656f392e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fca1802a25034f49fa1e3769b3a5656f392e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60fca1802a25034f49fa1e3769b3a5656f392e89"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "564766c8a006b88ace611adf4b4fbc4e4c6f4033", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ac6a707e7438c3cec79c24f5d53de79493e2f8/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ac6a707e7438c3cec79c24f5d53de79493e2f8/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=27ac6a707e7438c3cec79c24f5d53de79493e2f8", "patch": "@@ -4301,10 +4301,6 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n   if (!SCALAR_TYPE_P (elem_type))\n     {\n       new_ctx = *ctx;\n-      if (ctx->object)\n-\t/* If there was no object, don't add one: it could confuse us\n-\t   into thinking we're modifying a const object.  */\n-\tnew_ctx.object = t;\n       new_ctx.ctor = build_constructor (elem_type, NULL);\n       ctx = &new_ctx;\n     }"}, {"sha": "e5f5e9954e5e619762608392c79c49379f4ea0eb", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-108158.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ac6a707e7438c3cec79c24f5d53de79493e2f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-108158.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ac6a707e7438c3cec79c24f5d53de79493e2f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-108158.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-108158.C?ref=27ac6a707e7438c3cec79c24f5d53de79493e2f8", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/108158\n+// { dg-do compile { target c++14 } }\n+\n+template <class T, int N> struct carray {\n+  T data_[N]{};\n+  constexpr T operator[](long index) const { return data_[index]; }\n+};\n+struct seed_or_index {\n+private:\n+  long value_ = 0;\n+};\n+template <int M> struct pmh_tables {\n+  carray<seed_or_index, M> first_table_;\n+  template <typename KeyType, typename HasherType>\n+  constexpr void lookup(KeyType, HasherType) const {\n+    first_table_[0];\n+  }\n+};\n+template <int N> struct unordered_set {\n+  int equal_;\n+  carray<int, N> keys_;\n+  pmh_tables<N> tables_;\n+  constexpr unordered_set() : equal_{} {}\n+  template <class KeyType, class Hasher>\n+  constexpr auto lookup(KeyType key, Hasher hash) const {\n+    tables_.lookup(key, hash);\n+    return keys_;\n+  }\n+};\n+constexpr unordered_set<3> ze_set;\n+constexpr auto nocount = ze_set.lookup(4, int());\n+constexpr auto nocount2 = unordered_set<3>{}.lookup(4, int());"}]}