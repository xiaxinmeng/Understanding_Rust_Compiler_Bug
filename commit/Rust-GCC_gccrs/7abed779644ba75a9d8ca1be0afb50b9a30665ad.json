{"sha": "7abed779644ba75a9d8ca1be0afb50b9a30665ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiZWQ3Nzk2NDRiYTc1YTlkOGNhMWJlMGFmYjUwYjlhMzA2NjVhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-10-23T12:45:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-10-23T12:45:21Z"}, "message": "tree-vect-patterns.c (vect_recog_divmod_pattern): Optimize sequence based on get_range_info returned range.\n\n\t* tree-vect-patterns.c (vect_recog_divmod_pattern): Optimize\n\tsequence based on get_range_info returned range.\n\n\t* gcc.target/i386/vect-div-1.c: New test.\n\nFrom-SVN: r203969", "tree": {"sha": "82594f08a74d42d571012a398a395645544bcc3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82594f08a74d42d571012a398a395645544bcc3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7abed779644ba75a9d8ca1be0afb50b9a30665ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abed779644ba75a9d8ca1be0afb50b9a30665ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7abed779644ba75a9d8ca1be0afb50b9a30665ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abed779644ba75a9d8ca1be0afb50b9a30665ad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d67d16929e583de54d05e1b0d529d48a07ff7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d67d16929e583de54d05e1b0d529d48a07ff7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d67d16929e583de54d05e1b0d529d48a07ff7e8"}], "stats": {"total": 109, "additions": 94, "deletions": 15}, "files": [{"sha": "c03246ad8a637e417b4b951e35d860bf0023d5bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abed779644ba75a9d8ca1be0afb50b9a30665ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abed779644ba75a9d8ca1be0afb50b9a30665ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7abed779644ba75a9d8ca1be0afb50b9a30665ad", "patch": "@@ -1,3 +1,8 @@\n+2013-10-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vect-patterns.c (vect_recog_divmod_pattern): Optimize\n+\tsequence based on get_range_info returned range.\n+\n 2013-10-23  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-ssa.h: Remove all #include's"}, {"sha": "574fdc0f617369e33d6e950a7af3bf12aa23b30d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abed779644ba75a9d8ca1be0afb50b9a30665ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abed779644ba75a9d8ca1be0afb50b9a30665ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7abed779644ba75a9d8ca1be0afb50b9a30665ad", "patch": "@@ -1,5 +1,7 @@\n 2013-10-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.target/i386/vect-div-1.c: New test.\n+\n \t* gcc.dg/vect/pr58508.c: Remove dg-options.\n \n 2013-10-23  Richard Biener  <rguenther@suse.de>"}, {"sha": "b3eed19c7d7413827ece9ce29e5da8395ad17038", "filename": "gcc/testsuite/gcc.target/i386/vect-div-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abed779644ba75a9d8ca1be0afb50b9a30665ad/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-div-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abed779644ba75a9d8ca1be0afb50b9a30665ad/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-div-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-div-1.c?ref=7abed779644ba75a9d8ca1be0afb50b9a30665ad", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile { target sse2 } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-common -msse2\" } */\n+\n+unsigned short b[1024] = { 0 };\n+int a[1024] = { 0 };\n+\n+int\n+f1 (int x)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    a[i] = (b[i] + 7) / 15;\n+}\n+\n+int\n+f2 (int x)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    a[i] = (b[i] + 7) % 15;\n+}\n+\n+int\n+f3 (int x)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    a[i] = (b[i] - 66000) / 15;\n+}\n+\n+int\n+f4 (int x)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    a[i] = (b[i] - 66000) % 15;\n+}\n+\n+/* In f1 and f2, VRP can prove the first operand of division or modulo\n+   is always non-negative, so there is no need to do >> 31 shift\n+   etc. to check if it is.  And in f3 and f4, VRP can prove it is always\n+   negative.  */\n+/* { dg-final { scan-assembler-not \"psrad\\[^\\n\\r\\]*\\\\\\$31\" } } */"}, {"sha": "8d9aaa2303e48192b4f085544902a683a66e4426", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abed779644ba75a9d8ca1be0afb50b9a30665ad/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abed779644ba75a9d8ca1be0afb50b9a30665ad/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=7abed779644ba75a9d8ca1be0afb50b9a30665ad", "patch": "@@ -2230,48 +2230,77 @@ vect_recog_divmod_pattern (vec<gimple> *stmts,\n       if (post_shift >= prec)\n \treturn NULL;\n \n-      /* t1 = oprnd1 h* ml;  */\n+      /* t1 = oprnd0 h* ml;  */\n       t1 = vect_recog_temp_ssa_var (itype, NULL);\n       def_stmt\n \t= gimple_build_assign_with_ops (MULT_HIGHPART_EXPR, t1, oprnd0,\n \t\t\t\t\tbuild_int_cst (itype, ml));\n-      append_pattern_def_seq (stmt_vinfo, def_stmt);\n \n       if (add)\n \t{\n \t  /* t2 = t1 + oprnd0;  */\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t  t2 = vect_recog_temp_ssa_var (itype, NULL);\n \t  def_stmt\n \t    = gimple_build_assign_with_ops (PLUS_EXPR, t2, t1, oprnd0);\n-\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t}\n       else\n \tt2 = t1;\n \n       if (post_shift)\n \t{\n \t  /* t3 = t2 >> post_shift;  */\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t  t3 = vect_recog_temp_ssa_var (itype, NULL);\n \t  def_stmt\n \t    = gimple_build_assign_with_ops (RSHIFT_EXPR, t3, t2,\n \t\t\t\t\t    build_int_cst (itype, post_shift));\n-\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t}\n       else\n \tt3 = t2;\n \n-      /* t4 = oprnd0 >> (prec - 1);  */\n-      t4 = vect_recog_temp_ssa_var (itype, NULL);\n-      def_stmt\n-\t= gimple_build_assign_with_ops (RSHIFT_EXPR, t4, oprnd0,\n-\t\t\t\t\tbuild_int_cst (itype, prec - 1));\n-      append_pattern_def_seq (stmt_vinfo, def_stmt);\n+      double_int oprnd0_min, oprnd0_max;\n+      int msb = 1;\n+      if (get_range_info (oprnd0, &oprnd0_min, &oprnd0_max) == VR_RANGE)\n+\t{\n+\t  if (!oprnd0_min.is_negative ())\n+\t    msb = 0;\n+\t  else if (oprnd0_max.is_negative ())\n+\t    msb = -1;\n+\t}\n \n-      /* q = t3 - t4;  or q = t4 - t3;  */\n-      q = vect_recog_temp_ssa_var (itype, NULL);\n-      pattern_stmt\n-\t= gimple_build_assign_with_ops (MINUS_EXPR, q, d < 0 ? t4 : t3,\n-\t\t\t\t\td < 0 ? t3 : t4);\n+      if (msb == 0 && d >= 0)\n+\t{\n+\t  /* q = t3;  */\n+\t  q = t3;\n+\t  pattern_stmt = def_stmt;\n+\t}\n+      else\n+\t{\n+\t  /* t4 = oprnd0 >> (prec - 1);\n+\t     or if we know from VRP that oprnd0 >= 0\n+\t     t4 = 0;\n+\t     or if we know from VRP that oprnd0 < 0\n+\t     t4 = -1;  */\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n+\t  t4 = vect_recog_temp_ssa_var (itype, NULL);\n+\t  if (msb != 1)\n+\t    def_stmt\n+\t      = gimple_build_assign_with_ops (INTEGER_CST,\n+\t\t\t\t\t      t4, build_int_cst (itype, msb),\n+\t\t\t\t\t      NULL_TREE);\n+\t  else\n+\t    def_stmt\n+\t      = gimple_build_assign_with_ops (RSHIFT_EXPR, t4, oprnd0,\n+\t\t\t\t\t      build_int_cst (itype, prec - 1));\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n+\n+\t  /* q = t3 - t4;  or q = t4 - t3;  */\n+\t  q = vect_recog_temp_ssa_var (itype, NULL);\n+\t  pattern_stmt\n+\t    = gimple_build_assign_with_ops (MINUS_EXPR, q, d < 0 ? t4 : t3,\n+\t\t\t\t\t    d < 0 ? t3 : t4);\n+\t}\n     }\n \n   if (rhs_code == TRUNC_MOD_EXPR)"}]}