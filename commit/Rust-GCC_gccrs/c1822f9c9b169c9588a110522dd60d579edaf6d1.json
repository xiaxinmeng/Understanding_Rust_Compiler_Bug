{"sha": "c1822f9c9b169c9588a110522dd60d579edaf6d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE4MjJmOWM5YjE2OWM5NTg4YTExMDUyMmRkNjBkNTc5ZWRhZjZkMQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-23T13:07:07Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-23T13:07:07Z"}, "message": "[c-family/49654/49655] reject invalid options in pragma diagnostic\n\nUse find_opt instead of linear search through options in\nhandle_pragma_diagnostic (PR 49654) and reject non-warning options and\noptions not valid for the current language (PR 49655).\n\ngcc/testsuite/ChangeLog:\n\n2015-09-23  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/49655\n\t* gcc.dg/pragma-diag-6.c: New test.\n\ngcc/ChangeLog:\n\n2015-09-23  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/49655\n\t* opts.h (write_langs): Declare.\n\t* opts-global.c (write_langs): Make it extern.\n\ngcc/c-family/ChangeLog:\n\n2015-09-23  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/49654\n\tPR c/49655\n\t* c-pragma.c (handle_pragma_diagnostic): Detect non-warning\n\toptions and options not valid for the current language.\n\nFrom-SVN: r228049", "tree": {"sha": "36263b59f5fe1b8892bd6bafafc963cd33e5923f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36263b59f5fe1b8892bd6bafafc963cd33e5923f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1822f9c9b169c9588a110522dd60d579edaf6d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1822f9c9b169c9588a110522dd60d579edaf6d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1822f9c9b169c9588a110522dd60d579edaf6d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1822f9c9b169c9588a110522dd60d579edaf6d1/comments", "author": null, "committer": null, "parents": [{"sha": "9ea4e88f177aec6d897055efc954b4de05766017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea4e88f177aec6d897055efc954b4de05766017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea4e88f177aec6d897055efc954b4de05766017"}], "stats": {"total": 72, "additions": 57, "deletions": 15}, "files": [{"sha": "eba5f94c573c7032e534fe35fed29356d3431d88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1822f9c9b169c9588a110522dd60d579edaf6d1", "patch": "@@ -1,3 +1,9 @@\n+2015-09-23  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/49655\n+\t* opts.h (write_langs): Declare.\n+\t* opts-global.c (write_langs): Make it extern.\n+\n 2015-09-23  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/67391"}, {"sha": "8d4df7654b77f898b665fc243f829d274b4059ec", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c1822f9c9b169c9588a110522dd60d579edaf6d1", "patch": "@@ -1,3 +1,10 @@\n+2015-09-23  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/49654\n+\tPR c/49655\n+\t* c-pragma.c (handle_pragma_diagnostic): Detect non-warning\n+\toptions and options not valid for the current language.\n+\n 2015-09-22  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* c-indentation.c (should_warn_for_misleading_indentation):"}, {"sha": "3c348009ceada82e4c1c7253b5d6b028f4c14356", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=c1822f9c9b169c9588a110522dd60d579edaf6d1", "patch": "@@ -749,22 +749,40 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n       return;\n     }\n \n+  const char *option_string = TREE_STRING_POINTER (x);\n+  unsigned int lang_mask = c_common_option_lang_mask () | CL_COMMON;\n+  /* option_string + 1 to skip the initial '-' */\n+  unsigned int option_index = find_opt (option_string + 1, lang_mask);\n+  if (option_index == OPT_SPECIAL_unknown)\n+    {\n+      warning_at (loc, OPT_Wpragmas,\n+\t\t  \"unknown option after %<#pragma GCC diagnostic%> kind\");\n+      return;\n+    }\n+  else if (!(cl_options[option_index].flags & CL_WARNING))\n+    {\n+      warning_at (loc, OPT_Wpragmas,\n+\t\t  \"%qs is not an option that controls warnings\", option_string);\n+      return;\n+    }\n+  else if (!(cl_options[option_index].flags & lang_mask))\n+    {\n+      char *ok_langs = write_langs (cl_options[option_index].flags);\n+      char *bad_lang = write_langs (c_common_option_lang_mask ());\n+      warning_at (loc, OPT_Wpragmas,\n+\t\t  \"option %qs is valid for %s but not for %s\",\n+\t\t  option_string, ok_langs, bad_lang);\n+      free (ok_langs);\n+      free (bad_lang);\n+      return;\n+    }\n+\n   struct cl_option_handlers handlers;\n   set_default_handlers (&handlers);\n-\n-  unsigned int option_index;\n-  const char *option_string = TREE_STRING_POINTER (x);\n-  for (option_index = 0; option_index < cl_options_count; option_index++)\n-    if (strcmp (cl_options[option_index].opt_text, option_string) == 0)\n-      {\n-\tcontrol_warning_option (option_index, (int) kind, kind != DK_IGNORED,\n-\t\t\t\tinput_location, c_family_lang_mask, &handlers,\n-\t\t\t\t&global_options, &global_options_set,\n-\t\t\t\tglobal_dc);\n-\treturn;\n-      }\n-  warning_at (loc, OPT_Wpragmas,\n-\t      \"unknown option after %<#pragma GCC diagnostic%> kind\");\n+  control_warning_option (option_index, (int) kind, kind != DK_IGNORED,\n+\t\t\t  loc, lang_mask, &handlers,\n+\t\t\t  &global_options, &global_options_set,\n+\t\t\t  global_dc);\n }\n \n /*  Parse #pragma GCC target (xxx) to set target specific options.  */"}, {"sha": "05e2e37aed633c035ec181e02e79b4fb3a8a8330", "filename": "gcc/opts-global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=c1822f9c9b169c9588a110522dd60d579edaf6d1", "patch": "@@ -54,7 +54,7 @@ unsigned num_in_fnames;\n \n /* Return a malloced slash-separated list of languages in MASK.  */\n \n-static char *\n+char *\n write_langs (unsigned int mask)\n {\n   unsigned int n = 0, len = 0;"}, {"sha": "38b38370fb53080bfba385f4c56ec3d3a812eb53", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=c1822f9c9b169c9588a110522dd60d579edaf6d1", "patch": "@@ -368,6 +368,7 @@ extern void control_warning_option (unsigned int opt_index, int kind,\n \t\t\t\t    struct gcc_options *opts,\n \t\t\t\t    struct gcc_options *opts_set,\n \t\t\t\t    diagnostic_context *dc);\n+extern char *write_langs (unsigned int mask);\n extern void print_ignored_options (void);\n extern void handle_common_deferred_options (void);\n extern bool common_handle_option (struct gcc_options *opts,"}, {"sha": "46d4f053130c05eba137a811b4ec9e71f20d0b30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1822f9c9b169c9588a110522dd60d579edaf6d1", "patch": "@@ -1,3 +1,8 @@\n+2015-09-23  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/49655\n+\t* gcc.dg/pragma-diag-6.c: New test.\n+\n 2015-09-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vcvt_high_1.c: New."}, {"sha": "6ce76d9e49bd180d3150b61bc824c12fa1267e19", "filename": "gcc/testsuite/gcc.dg/pragma-diag-6.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1822f9c9b169c9588a110522dd60d579edaf6d1/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-6.c?ref=c1822f9c9b169c9588a110522dd60d579edaf6d1", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+#pragma GCC diagnostic error \"-Wnoexcept\" /* { dg-warning \"is valid for C../ObjC.. but not for C\" } */\n+#pragma GCC diagnostic error \"-fstrict-aliasing\" /* { dg-warning \"not an option that controls warnings\" } */\n+#pragma GCC diagnostic error \"-Werror\" /* { dg-warning \"not an option that controls warnings\" } */\n+int i;"}]}