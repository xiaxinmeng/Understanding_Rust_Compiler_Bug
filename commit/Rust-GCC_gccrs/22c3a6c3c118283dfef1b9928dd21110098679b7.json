{"sha": "22c3a6c3c118283dfef1b9928dd21110098679b7", "node_id": "C_kwDOANBUbNoAKDIyYzNhNmMzYzExODI4M2RmZWYxYjk5MjhkZDIxMTEwMDk4Njc5Yjc", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-28T18:34:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-28T18:34:49Z"}, "message": "Don't emit -Wxor-used-as-pow on macro expansions [PR107002]\n\nPR c/107002 reports an assertion failure from deep inside the\ndiagnostic_shows_locus when attempting to print fix-it hints relating\nto -Wxor-used-as-pow.  The case involves macro expansions with\n-ftrack-macro-expansion=0.\n\nIt doesn't seem to make much sense to emit this warning for macro\nexpansions, so this patch updates the warning not to (which seems\nto also be clang's behavior).  The patch also adds some bulletproofing\nto diagnostic-show-locus.cc to be more robust against such invalid\nfix-it hints.\n\nDoing so fixes the ICE.\n\ngcc/c-family/ChangeLog:\n\tPR c/107002\n\t* c-common.h (check_for_xor_used_as_pow): Add \"rhs_loc\" param.\n\t* c-warn.cc (check_for_xor_used_as_pow): Add \"rhs_loc\" param.\n\tReject cases where involving macro expansions.\n\ngcc/c/ChangeLog:\n\tPR c/107002\n\t* c-typeck.cc (parser_build_binary_op): Update for new param of\n\tcheck_for_xor_used_as_pow.\n\ngcc/cp/ChangeLog:\n\tPR c/107002\n\t* parser.cc (cp_parser_binary_expression): Update for new param of\n\tcheck_for_xor_used_as_pow.\n\ngcc/ChangeLog:\n\tPR c/107002\n\t* diagnostic-show-locus.cc (column_range::column_range): Factor\n\tout assertion conditional into...\n\t(column_range::valid_p): ...this new function.\n\t(line_corrections::add_hint): Don't attempt to consolidate hints\n\tif it would lead to invalid column_range instances.\n\ngcc/testsuite/ChangeLog:\n\tPR c/107002\n\t* c-c++-common/Wxor-used-as-pow-1.c: Add macro test.\n\t* c-c++-common/Wxor-used-as-pow-pr107002-0.c: New test.\n\t* c-c++-common/Wxor-used-as-pow-pr107002-1.c: New test.\n\t* c-c++-common/Wxor-used-as-pow-pr107002-2.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "4e0c0bb61d608e1603f1b6fabf4f2460a718a0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0c0bb61d608e1603f1b6fabf4f2460a718a0a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22c3a6c3c118283dfef1b9928dd21110098679b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c3a6c3c118283dfef1b9928dd21110098679b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c3a6c3c118283dfef1b9928dd21110098679b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c3a6c3c118283dfef1b9928dd21110098679b7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "f96350b64af0ca59d1a125534a5b909e761c213c", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=22c3a6c3c118283dfef1b9928dd21110098679b7", "patch": "@@ -1524,7 +1524,7 @@ extern void warn_for_multistatement_macros (location_t, location_t,\n \n extern void check_for_xor_used_as_pow (location_t lhs_loc, tree lhs_val,\n \t\t\t\t       location_t operator_loc,\n-\t\t\t\t       tree rhs_val);\n+\t\t\t\t       location_t rhs_loc, tree rhs_val);\n \n /* In c-attribs.cc.  */\n extern bool attribute_takes_identifier_p (const_tree);"}, {"sha": "9ac43a1af6ef5f9bc9c5bc2368a16a72588bed2c", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=22c3a6c3c118283dfef1b9928dd21110098679b7", "patch": "@@ -3835,14 +3835,15 @@ do_warn_array_compare (location_t location, tree_code code, tree op0, tree op1)\n     }\n }\n \n-/* Given LHS_VAL ^ RHS_VAL, where LHS_LOC is the location of the LHS and\n-   OPERATOR_LOC is the location of the ^, complain with -Wxor-used-as-pow\n-   if it looks like the user meant exponentiation rather than xor.  */\n+/* Given LHS_VAL ^ RHS_VAL, where LHS_LOC is the location of the LHS,\n+   OPERATOR_LOC is the location of the ^, and RHS_LOC the location of the\n+   RHS, complain with -Wxor-used-as-pow if it looks like the user meant\n+   exponentiation rather than xor.  */\n \n void\n check_for_xor_used_as_pow (location_t lhs_loc, tree lhs_val,\n \t\t\t   location_t operator_loc,\n-\t\t\t   tree rhs_val)\n+\t\t\t   location_t rhs_loc, tree rhs_val)\n {\n   /* Only complain if both args are non-negative integer constants that fit\n      in uhwi.  */\n@@ -3859,6 +3860,20 @@ check_for_xor_used_as_pow (location_t lhs_loc, tree lhs_val,\n   binary_op_rich_location loc (operator_loc,\n \t\t\t       lhs_val, rhs_val, false);\n \n+  /* Reject cases where we don't have 3 distinct locations.\n+     This can happen e.g. due to macro expansion with\n+     -ftrack-macro-expansion=0 */\n+  if (!(lhs_loc != operator_loc\n+\t&& lhs_loc != rhs_loc\n+\t&& operator_loc != rhs_loc))\n+    return;\n+\n+  /* Reject cases in which any of the locations came from a macro.  */\n+  if (from_macro_expansion_at (lhs_loc)\n+      || from_macro_expansion_at (operator_loc)\n+      || from_macro_expansion_at (rhs_loc))\n+    return;\n+\n   /* If we issue fix-it hints with the warning then we will also issue a\n      note suggesting how to suppress the warning with a different change.\n      These proposed changes are incompatible.  */"}, {"sha": "7079d4ee145cf7c6b80c64c765973cb24c8a027d", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=22c3a6c3c118283dfef1b9928dd21110098679b7", "patch": "@@ -4083,7 +4083,7 @@ parser_build_binary_op (location_t location, enum tree_code code,\n       && arg2.m_decimal)\n     check_for_xor_used_as_pow (arg1.get_location (), arg1.value,\n \t\t\t       location,\n-\t\t\t       arg2.value);\n+\t\t\t       arg2.get_location (), arg2.value);\n \n   return result;\n }"}, {"sha": "e8efc32f2c26051ce874d88dd7264e0bf58d9dce", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=22c3a6c3c118283dfef1b9928dd21110098679b7", "patch": "@@ -10289,6 +10289,7 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \t  (current.lhs.get_location (),\n \t   tree_strip_any_location_wrapper (current.lhs),\n \t   current.loc,\n+\t   rhs.get_location (),\n \t   tree_strip_any_location_wrapper (rhs));\n \n       overload = NULL;"}, {"sha": "0514815b51f9271ac1b68b1142d501aa1ea40479", "filename": "gcc/diagnostic-show-locus.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fdiagnostic-show-locus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Fdiagnostic-show-locus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.cc?ref=22c3a6c3c118283dfef1b9928dd21110098679b7", "patch": "@@ -2232,15 +2232,20 @@ class column_range\n public:\n   column_range (int start_, int finish_) : start (start_), finish (finish_)\n   {\n-    /* We must have either a range, or an insertion.  */\n-    gcc_assert (start <= finish || finish == start - 1);\n+    gcc_assert (valid_p (start, finish));\n   }\n \n   bool operator== (const column_range &other) const\n   {\n     return start == other.start && finish == other.finish;\n   }\n \n+  static bool valid_p (int start, int finish)\n+  {\n+    /* We must have either a range, or an insertion.  */\n+    return (start <= finish || finish == start - 1);\n+  }\n+\n   int start;\n   int finish;\n };\n@@ -2470,7 +2475,9 @@ line_corrections::add_hint (const fixit_hint *hint)\n       gcc_assert (printed_columns.start\n \t\t  >= last_correction->m_printed_columns.start);\n \n-      if (printed_columns.start <= last_correction->m_printed_columns.finish)\n+      if (printed_columns.start <= last_correction->m_printed_columns.finish\n+\t  && column_range::valid_p (last_correction->m_affected_bytes.finish + 1,\n+\t\t\t\t    affected_bytes.start - 1))\n \t{\n \t  /* We have two hints for which the printed forms of the hints\n \t     would touch or overlap, so we need to consolidate them to avoid"}, {"sha": "33c418c24790cef6c66c5ce35166f8baefef2be0", "filename": "gcc/testsuite/c-c++-common/Wxor-used-as-pow-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-1.c?ref=22c3a6c3c118283dfef1b9928dd21110098679b7", "patch": "@@ -55,3 +55,7 @@ int h10_3 = 0xa ^ 3;\n /* Don't complain if the RHS isn't literal decimal.  */\n int t2_x16 = 2^0x10;\n int h10_x3 = 10 ^ 0x3;\n+\n+/* Don't complain about uses in macros.  */\n+#define AMT (10^2)\n+int amt = AMT;"}, {"sha": "37a1e301d12124041788093540c668d3914f9c75", "filename": "gcc/testsuite/c-c++-common/Wxor-used-as-pow-pr107002-0.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-pr107002-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-pr107002-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-pr107002-0.c?ref=22c3a6c3c118283dfef1b9928dd21110098679b7", "patch": "@@ -0,0 +1,9 @@\n+/* Regression test for ICE seen in -Wxor-used-as-pow with\n+   -ftrack-macro-expansion=0 in source-printing (fix-it-hints,\n+   specifically).  */\n+\n+/* { dg-options \"-ftrack-macro-expansion=0 -fdiagnostics-show-caret\" } */\n+\n+#define test(lower, higher, a, b, c, d)\t\t\t\t\t\\\n+  char test##line[ (a higher b lower c higher d) == 0 ? -1 : 1];\n+test (|, ^, 1, 2, 2, 1)"}, {"sha": "10e2a0d55a33d859da536cf817ac46b903ade40e", "filename": "gcc/testsuite/c-c++-common/Wxor-used-as-pow-pr107002-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-pr107002-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-pr107002-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-pr107002-1.c?ref=22c3a6c3c118283dfef1b9928dd21110098679b7", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-options \"-ftrack-macro-expansion=1 -fdiagnostics-show-caret\" } */\n+\n+#define test(lower, higher, a, b, c, d)\t\t\t\t\t\\\n+  char test##line[ (a higher b lower c higher d) == 0 ? -1 : 1];\n+test (|, ^, 1, 2, 2, 1)"}, {"sha": "8e9a4bf0f55cd6105b7fad8158339ed68df3c7bd", "filename": "gcc/testsuite/c-c++-common/Wxor-used-as-pow-pr107002-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-pr107002-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c3a6c3c118283dfef1b9928dd21110098679b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-pr107002-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWxor-used-as-pow-pr107002-2.c?ref=22c3a6c3c118283dfef1b9928dd21110098679b7", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-options \"-ftrack-macro-expansion=2 -fdiagnostics-show-caret\" } */\n+\n+#define test(lower, higher, a, b, c, d)\t\t\t\t\t\\\n+  char test##line[ (a higher b lower c higher d) == 0 ? -1 : 1];\n+test (|, ^, 1, 2, 2, 1)"}]}