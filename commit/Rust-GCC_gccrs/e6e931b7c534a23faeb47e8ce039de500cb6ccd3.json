{"sha": "e6e931b7c534a23faeb47e8ce039de500cb6ccd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZlOTMxYjdjNTM0YTIzZmFlYjQ3ZThjZTAzOWRlNTAwY2I2Y2NkMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-09-23T16:11:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-09-23T16:11:24Z"}, "message": "re PR c/16833 (-fno-builtin prevents automatic format checks for standard functions)\n\n\tPR c/16833\n\t* doc/extend.texi, doc/invoke.texi: Document interaction of\n\t-fno-builtin with format checks.  Note that built-in functions\n\thave effects beyond generating code that avoids calls to those\n\tfunctions.\n\nFrom-SVN: r87957", "tree": {"sha": "22ca0403abd4aa5f3d57ae2b15d82f09f3000b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22ca0403abd4aa5f3d57ae2b15d82f09f3000b39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6e931b7c534a23faeb47e8ce039de500cb6ccd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e931b7c534a23faeb47e8ce039de500cb6ccd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e931b7c534a23faeb47e8ce039de500cb6ccd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e931b7c534a23faeb47e8ce039de500cb6ccd3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211504688018ec18bc9659c2a61ede4c88d53941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211504688018ec18bc9659c2a61ede4c88d53941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211504688018ec18bc9659c2a61ede4c88d53941"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "3c44c68c815aed04818975cfc57481bb9169b6fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e931b7c534a23faeb47e8ce039de500cb6ccd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e931b7c534a23faeb47e8ce039de500cb6ccd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6e931b7c534a23faeb47e8ce039de500cb6ccd3", "patch": "@@ -1,3 +1,11 @@\n+2004-09-23  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/16833\n+\t* doc/extend.texi, doc/invoke.texi: Document interaction of\n+\t-fno-builtin with format checks.  Note that built-in functions\n+\thave effects beyond generating code that avoids calls to those\n+\tfunctions.\n+\n 2004-09-23  Frank Ch. Eigler <fche@redhat.com>\n \n \tPR tree-optimization/17533"}, {"sha": "a407663ae103856bd78b4e40865ecba60321b0a4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e931b7c534a23faeb47e8ce039de500cb6ccd3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e931b7c534a23faeb47e8ce039de500cb6ccd3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e6e931b7c534a23faeb47e8ce039de500cb6ccd3", "patch": "@@ -1764,10 +1764,11 @@ start with the third argument, so the correct parameters for the format\n attribute are 2 and 3.\n \n @opindex ffreestanding\n+@opindex fno-builtin\n The @code{format} attribute allows you to identify your own functions\n which take format strings as arguments, so that GCC can check the\n calls to these functions for errors.  The compiler always (unless\n-@option{-ffreestanding} is used) checks formats\n+@option{-ffreestanding} or @option{-fno-builtin} is used) checks formats\n for the standard library functions @code{printf}, @code{fprintf},\n @code{sprintf}, @code{scanf}, @code{fscanf}, @code{sscanf}, @code{strftime},\n @code{vprintf}, @code{vfprintf} and @code{vsprintf} whenever such\n@@ -1824,7 +1825,8 @@ type function whose operands are a call to one of your own function.\n The compiler always treats @code{gettext}, @code{dgettext}, and\n @code{dcgettext} in this manner except when strict ISO C support is\n requested by @option{-ansi} or an appropriate @option{-std} option, or\n-@option{-ffreestanding} is used.  @xref{C Dialect Options,,Options\n+@option{-ffreestanding} or @option{-fno-builtin}\n+is used.  @xref{C Dialect Options,,Options\n Controlling C Dialect}.\n \n @item function_vector"}, {"sha": "e86677d3ecc745ca09942940aa7ab039141d9b64", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e931b7c534a23faeb47e8ce039de500cb6ccd3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e931b7c534a23faeb47e8ce039de500cb6ccd3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e6e931b7c534a23faeb47e8ce039de500cb6ccd3", "patch": "@@ -1173,7 +1173,14 @@ instructions that adjust the stack directly, and calls to @code{memcpy}\n may become inline copy loops.  The resulting code is often both smaller\n and faster, but since the function calls no longer appear as such, you\n cannot set a breakpoint on those calls, nor can you change the behavior\n-of the functions by linking with a different library.\n+of the functions by linking with a different library.  In addition,\n+when a function is recognized as a built-in function, GCC may use\n+information about that function to warn about problems with calls to\n+that function, or to generate more efficient code, even if the\n+resulting code still contains calls to that function.  For example,\n+warnings are given with @option{-Wformat} for bad calls to\n+@code{printf}, when @code{printf} is built in, and @code{strlen} is\n+known not to modify global memory.\n \n With the @option{-fno-builtin-@var{function}} option\n only the built-in function @var{function} is\n@@ -2161,13 +2168,19 @@ messages.\n \n @item -Wformat\n @opindex Wformat\n+@opindex ffreestanding\n+@opindex fno-builtin\n Check calls to @code{printf} and @code{scanf}, etc., to make sure that\n the arguments supplied have types appropriate to the format string\n specified, and that the conversions specified in the format string make\n sense.  This includes standard functions, and others specified by format\n attributes (@pxref{Function Attributes}), in the @code{printf},\n @code{scanf}, @code{strftime} and @code{strfmon} (an X/Open extension,\n not in the C standard) families (or other target-specific families).\n+Which functions are checked without format attributes having been\n+specified depends on the standard version selected, and such checks of\n+functions without the attribute specified are disabled by\n+@option{-ffreestanding} or @option{-fno-builtin}.\n \n The formats are checked against the format features supported by GNU\n libc version 2.2.  These include all ISO C90 and C99 features, as well"}]}