{"sha": "efb45a9f4ae816d61fd06fedeb86a50d7434d157", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZiNDVhOWY0YWU4MTZkNjFmZDA2ZmVkZWI4NmE1MGQ3NDM0ZDE1Nw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-08T23:06:21Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-08T23:06:21Z"}, "message": "Fix PR c++/69139 (deduction failure with trailing return type)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/69139\n\t* parser.c (cp_parser_simple_type_specifier): Make the check\n\tfor disambiguating between an 'auto' placeholder and an implicit\n\ttemplate parameter more robust.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/69139\n\t* g++.dg/cpp0x/trailing12.C: New test.\n\t* g++.dg/cpp0x/trailing13.C: New test.\n\nFrom-SVN: r233231", "tree": {"sha": "98b18911a7e3fb68c913c06d673f62253a06e20e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98b18911a7e3fb68c913c06d673f62253a06e20e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efb45a9f4ae816d61fd06fedeb86a50d7434d157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb45a9f4ae816d61fd06fedeb86a50d7434d157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb45a9f4ae816d61fd06fedeb86a50d7434d157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb45a9f4ae816d61fd06fedeb86a50d7434d157/comments", "author": null, "committer": null, "parents": [{"sha": "20a0c6f9bdbd781ed5d413a10a06764a174dc394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a0c6f9bdbd781ed5d413a10a06764a174dc394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a0c6f9bdbd781ed5d413a10a06764a174dc394"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "8ed7828c10f51f33b023185cd6bda93e60034037", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=efb45a9f4ae816d61fd06fedeb86a50d7434d157", "patch": "@@ -1,3 +1,10 @@\n+2016-02-08  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/69139\n+\t* parser.c (cp_parser_simple_type_specifier): Make the check\n+\tfor disambiguating between an 'auto' placeholder and an implicit\n+\ttemplate parameter more robust.\n+\n 2016-02-08  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/69283"}, {"sha": "6f47edf9bd0abec6d22406e185716cc1d35640a5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=efb45a9f4ae816d61fd06fedeb86a50d7434d157", "patch": "@@ -16032,20 +16032,33 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t  /* The 'auto' might be the placeholder return type for a function decl\n \t     with trailing return type.  */\n \t  bool have_trailing_return_fn_decl = false;\n-\t  if (cp_lexer_peek_nth_token (parser->lexer, 2)->type\n-\t      == CPP_OPEN_PAREN)\n+\n+\t  cp_parser_parse_tentatively (parser);\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  while (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ)\n+\t\t && cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA)\n+\t\t && cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN)\n+\t\t && cp_lexer_next_token_is_not (parser->lexer, CPP_EOF))\n \t    {\n-\t      cp_parser_parse_tentatively (parser);\n-\t      cp_lexer_consume_token (parser->lexer);\n-\t      cp_lexer_consume_token (parser->lexer);\n-\t      if (cp_parser_skip_to_closing_parenthesis (parser,\n+\t      if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n+\t\t{\n+\t\t  cp_lexer_consume_token (parser->lexer);\n+\t\t  cp_parser_skip_to_closing_parenthesis (parser,\n \t\t\t\t\t\t\t /*recovering*/false,\n \t\t\t\t\t\t\t /*or_comma*/false,\n-\t\t\t\t\t\t\t /*consume_paren*/true))\n-\t\thave_trailing_return_fn_decl\n-\t\t  = cp_lexer_next_token_is (parser->lexer, CPP_DEREF);\n-\t      cp_parser_abort_tentative_parse (parser);\n+\t\t\t\t\t\t\t /*consume_paren*/true);\n+\t\t  continue;\n+\t\t}\n+\n+\t      if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))\n+\t\t{\n+\t\t  have_trailing_return_fn_decl = true;\n+\t\t  break;\n+\t\t}\n+\n+\t      cp_lexer_consume_token (parser->lexer);\n \t    }\n+\t  cp_parser_abort_tentative_parse (parser);\n \n \t  if (have_trailing_return_fn_decl)\n \t    {"}, {"sha": "700ba0e28c485aa9bb75ae48115d51d3f10ede76", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efb45a9f4ae816d61fd06fedeb86a50d7434d157", "patch": "@@ -1,3 +1,9 @@\n+2016-02-08  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/69139\n+\t* g++.dg/cpp0x/trailing12.C: New test.\n+\t* g++.dg/cpp0x/trailing13.C: New test.\n+\n 2016-02-08  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/69283"}, {"sha": "a27d988b9b24d06cb9b2005fded431050cec5752", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing12.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing12.C?ref=efb45a9f4ae816d61fd06fedeb86a50d7434d157", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/69139\n+// { dg-do compile { target c++11 } }\n+\n+auto get(int) -> int { return {}; }\n+template <class R> int f(auto (*)(int) -> R) { return {}; }\n+int i = f(get);\n+\n+int foo1 (auto (int) -> char);\n+\n+int foo2 (auto f(int) -> char);\n+\n+int foo2 (auto (f)(int) -> char);\n+\n+int foo3 (auto (*f)(int) -> char);\n+\n+int foo4 (auto (*const **&f)(int) -> char);\n+\n+int foo5 (auto (*const **&f)(int, int *) -> char);\n+\n+int foo6 (auto (int) const -> char); // { dg-error \"const\" }\n+\n+void foo7 (auto __attribute__ ((unused)) f (int) -> int) { }"}, {"sha": "2681bcd3f530f8bbb8a32c99daf043d36ac529e1", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing13.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb45a9f4ae816d61fd06fedeb86a50d7434d157/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing13.C?ref=efb45a9f4ae816d61fd06fedeb86a50d7434d157", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/69139\n+// { dg-do compile { target c++11 } }\n+\n+struct X {\n+  auto get(int) const & noexcept -> int { return {}; }\n+  auto get(int) && throw () -> long { return {}; }\n+};\n+\n+template <class R> auto f(auto (X::*)(int) const & -> R) -> R {}\n+\n+using I = decltype(f(&X::get));\n+using I = int;"}]}