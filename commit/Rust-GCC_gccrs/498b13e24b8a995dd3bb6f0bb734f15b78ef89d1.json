{"sha": "498b13e24b8a995dd3bb6f0bb734f15b78ef89d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk4YjEzZTI0YjhhOTk1ZGQzYmI2ZjBiYjczNGYxNWI3OGVmODlkMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-02-20T14:05:51Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-02-20T14:05:51Z"}, "message": "[AArch64] Fix wrong-code bug in right-shift SISD patterns\n\n\t* config/aarch64/aarch64.md (*aarch64_lshr_sisd_or_int_<mode>3):\n\tMark operand 0 as earlyclobber in 2nd alternative.\n\t(1st define_split below *aarch64_lshr_sisd_or_int_<mode>3):\n\tWrite negated shift amount into QI lowpart operand 0 and use it\n\tin the shift step.\n\t(2nd define_split below *aarch64_lshr_sisd_or_int_<mode>3): Likewise.\n\n\t* gcc.target/aarch64/sisd-shft-neg_1.c: New test.\n\nFrom-SVN: r220860", "tree": {"sha": "4cf8cd26b5ea9500187020a5b5fad34f124e8436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cf8cd26b5ea9500187020a5b5fad34f124e8436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "739b41ebb1350735fe3aa92c1978524204395df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739b41ebb1350735fe3aa92c1978524204395df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/739b41ebb1350735fe3aa92c1978524204395df8"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "32cc757278b41bb3901139c3f458334c8a6863ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=498b13e24b8a995dd3bb6f0bb734f15b78ef89d1", "patch": "@@ -1,3 +1,12 @@\n+2015-02-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*aarch64_lshr_sisd_or_int_<mode>3):\n+\tMark operand 0 as earlyclobber in 2nd alternative.\n+\t(1st define_split below *aarch64_lshr_sisd_or_int_<mode>3):\n+\tWrite negated shift amount into QI lowpart operand 0 and use it\n+\tin the shift step.\n+\t(2nd define_split below *aarch64_lshr_sisd_or_int_<mode>3): Likewise.\n+\n 2015-02-20  Bernd Schmidt  <bernds@codesourcery.com>\n \n     \t* cgraph.h (clone_function_name_1): Declare."}, {"sha": "8f157ce2901362222da27011452095a46e4bf30d", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=498b13e24b8a995dd3bb6f0bb734f15b78ef89d1", "patch": "@@ -3360,7 +3360,7 @@\n \n ;; Logical right shift using SISD or Integer instruction\n (define_insn \"*aarch64_lshr_sisd_or_int_<mode>3\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=w,w,r\")\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=w,&w,r\")\n         (lshiftrt:GPI\n           (match_operand:GPI 1 \"register_operand\" \"w,w,r\")\n           (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"Us<cmode>,w,rUs<cmode>\")))]\n@@ -3379,11 +3379,13 @@\n            (match_operand:DI 1 \"aarch64_simd_register\")\n            (match_operand:QI 2 \"aarch64_simd_register\")))]\n   \"TARGET_SIMD && reload_completed\"\n-  [(set (match_dup 2)\n+  [(set (match_dup 3)\n         (unspec:QI [(match_dup 2)] UNSPEC_SISD_NEG))\n    (set (match_dup 0)\n-        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_SISD_USHL))]\n-  \"\"\n+        (unspec:DI [(match_dup 1) (match_dup 3)] UNSPEC_SISD_USHL))]\n+  {\n+    operands[3] = gen_lowpart (QImode, operands[0]);\n+  }\n )\n \n (define_split\n@@ -3392,11 +3394,13 @@\n            (match_operand:SI 1 \"aarch64_simd_register\")\n            (match_operand:QI 2 \"aarch64_simd_register\")))]\n   \"TARGET_SIMD && reload_completed\"\n-  [(set (match_dup 2)\n+  [(set (match_dup 3)\n         (unspec:QI [(match_dup 2)] UNSPEC_SISD_NEG))\n    (set (match_dup 0)\n-        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_USHL_2S))]\n-  \"\"\n+        (unspec:SI [(match_dup 1) (match_dup 3)] UNSPEC_USHL_2S))]\n+  {\n+    operands[3] = gen_lowpart (QImode, operands[0]);\n+  }\n )\n \n ;; Arithmetic right shift using SISD or Integer instruction"}, {"sha": "65310fd081d6aea2fcef786a13c165b7ee36a247", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=498b13e24b8a995dd3bb6f0bb734f15b78ef89d1", "patch": "@@ -1,3 +1,7 @@\n+2015-02-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/sisd-shft-neg_1.c: New test.\n+\n 2015-02-20  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/64452"}, {"sha": "c091657cb5751af2d87ae22e67f80fa3f6a1b049", "filename": "gcc/testsuite/gcc.target/aarch64/sisd-shft-neg_1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsisd-shft-neg_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498b13e24b8a995dd3bb6f0bb734f15b78ef89d1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsisd-shft-neg_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsisd-shft-neg_1.c?ref=498b13e24b8a995dd3bb6f0bb734f15b78ef89d1", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+#define force_simd_si(v) asm volatile (\"mov %s0, %1.s[0]\" :\"=w\" (v) :\"w\" (v) :)\n+\n+unsigned int\n+shft_add (unsigned int a, unsigned int b)\n+{\n+  unsigned int c;\n+\n+  force_simd_si (a);\n+  force_simd_si (b);\n+  c = a >> b;\n+  force_simd_si (c);\n+\n+  return c + b;\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned int i = 0;\n+  unsigned int a = 0xdeadbeef;\n+\n+  for (i = 0; i < 32; i++)\n+  {\n+    unsigned int exp = (a / (1 << i) + i);\n+    unsigned int got = shft_add (a, i);\n+\n+    if (exp != got)\n+      abort ();\n+  }\n+\n+  return 0;\n+}\n+"}]}