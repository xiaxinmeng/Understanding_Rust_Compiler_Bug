{"sha": "fc7721ee68a02651b6d8d4b2958fe02c7b02342a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3NzIxZWU2OGEwMjY1MWI2ZDhkNGIyOTU4ZmUwMmM3YjAyMzQyYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-05-14T13:54:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-05-14T13:54:49Z"}, "message": "re PR c++/53903 ([C++11] Incompatible exception-specification allowed if member explicitly-defaulted after first declaration)\n\n/cp\n2013-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53903\n\t* method.c (defaulted_late_check): Check for compatible exception\n\tspecification out of class explicitly defaulted functions too.\n\n/testsuite\n2013-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53903\n\t* g++.dg/cpp0x/defaulted43.C: New.\n\nFrom-SVN: r198886", "tree": {"sha": "9dd4b06919cfff11739444ffb3b520b7762ad9c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dd4b06919cfff11739444ffb3b520b7762ad9c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc7721ee68a02651b6d8d4b2958fe02c7b02342a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7721ee68a02651b6d8d4b2958fe02c7b02342a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7721ee68a02651b6d8d4b2958fe02c7b02342a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7721ee68a02651b6d8d4b2958fe02c7b02342a/comments", "author": null, "committer": null, "parents": [{"sha": "dd787b0c00f8c10239b08685826946433fc40f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd787b0c00f8c10239b08685826946433fc40f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd787b0c00f8c10239b08685826946433fc40f22"}], "stats": {"total": 107, "additions": 89, "deletions": 18}, "files": [{"sha": "9c09c134c47fb5c68161e6cc3bc331e4021174a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7721ee68a02651b6d8d4b2958fe02c7b02342a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7721ee68a02651b6d8d4b2958fe02c7b02342a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc7721ee68a02651b6d8d4b2958fe02c7b02342a", "patch": "@@ -1,3 +1,9 @@\n+2013-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53903\n+\t* method.c (defaulted_late_check): Check for compatible exception\n+\tspecification out of class explicitly defaulted functions too.\n+\n 2013-05-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56998"}, {"sha": "801b3a5422afb705e6453d90e57ffc6640c41777", "filename": "gcc/cp/method.c", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7721ee68a02651b6d8d4b2958fe02c7b02342a/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7721ee68a02651b6d8d4b2958fe02c7b02342a/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=fc7721ee68a02651b6d8d4b2958fe02c7b02342a", "patch": "@@ -1755,6 +1755,7 @@ defaulted_late_check (tree fn)\n   bool fn_const_p = (copy_fn_p (fn) == 2);\n   tree implicit_fn = implicitly_declare_fn (kind, ctx, fn_const_p,\n \t\t\t\t\t    NULL, NULL);\n+  tree eh_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (implicit_fn));\n \n   if (!same_type_p (TREE_TYPE (TREE_TYPE (fn)),\n \t\t    TREE_TYPE (TREE_TYPE (implicit_fn)))\n@@ -1766,31 +1767,40 @@ defaulted_late_check (tree fn)\n \t\t\"does not match expected signature %qD\", implicit_fn);\n     }\n \n-  /* 8.4.2/2: If it is explicitly defaulted on its first declaration, it is\n+  /* 8.4.2/2: An explicitly-defaulted function (...) may have an explicit\n+     exception-specification only if it is compatible (15.4) with the \n+     exception-specification on the implicit declaration.  If a function\n+     is explicitly defaulted on its first declaration, (...) it is\n      implicitly considered to have the same exception-specification as if\n      it had been implicitly declared.  */\n-  if (DECL_DEFAULTED_IN_CLASS_P (fn))\n+  if (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)))\n     {\n-      tree eh_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (implicit_fn));\n-      if (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)))\n+      maybe_instantiate_noexcept (fn);\n+      if (!comp_except_specs (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)),\n+\t\t\t      eh_spec, ce_normal))\n \t{\n-\t  maybe_instantiate_noexcept (fn);\n-\t  if (!comp_except_specs (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)),\n-\t\t\t\t  eh_spec, ce_normal))\n+\t  if (DECL_DEFAULTED_IN_CLASS_P (fn))\n \t    error (\"function %q+D defaulted on its first declaration \"\n \t\t   \"with an exception-specification that differs from \"\n \t\t   \"the implicit declaration %q#D\", fn, implicit_fn);\n+\t  else\n+\t    error (\"function %q+D defaulted on its redeclaration \"\n+\t\t   \"with an exception-specification that differs from \"\n+\t\t   \"the implicit declaration %q#D\", fn, implicit_fn);\n \t}\n-      TREE_TYPE (fn) = build_exception_variant (TREE_TYPE (fn), eh_spec);\n-      if (DECL_DECLARED_CONSTEXPR_P (implicit_fn))\n-\t{\n-\t  /* Hmm...should we do this for out-of-class too? Should it be OK to\n-\t     add constexpr later like inline, rather than requiring\n-\t     declarations to match?  */\n-\t  DECL_DECLARED_CONSTEXPR_P (fn) = true;\n-\t  if (kind == sfk_constructor)\n-\t    TYPE_HAS_CONSTEXPR_CTOR (ctx) = true;\n-\t}\n+    }\n+  if (DECL_DEFAULTED_IN_CLASS_P (fn))\n+    TREE_TYPE (fn) = build_exception_variant (TREE_TYPE (fn), eh_spec);\n+\n+  if (DECL_DEFAULTED_IN_CLASS_P (fn)\n+      && DECL_DECLARED_CONSTEXPR_P (implicit_fn))\n+    {\n+      /* Hmm...should we do this for out-of-class too? Should it be OK to\n+\t add constexpr later like inline, rather than requiring\n+\t declarations to match?  */\n+      DECL_DECLARED_CONSTEXPR_P (fn) = true;\n+      if (kind == sfk_constructor)\n+\tTYPE_HAS_CONSTEXPR_CTOR (ctx) = true;\n     }\n \n   if (!DECL_DECLARED_CONSTEXPR_P (implicit_fn)"}, {"sha": "0507b6000582cb5ae4d993ab773291d1e06218b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7721ee68a02651b6d8d4b2958fe02c7b02342a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7721ee68a02651b6d8d4b2958fe02c7b02342a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc7721ee68a02651b6d8d4b2958fe02c7b02342a", "patch": "@@ -1,3 +1,8 @@\n+2013-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53903\n+\t* g++.dg/cpp0x/defaulted43.C: New.\n+\n 2013-05-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/fstack-protector-strong.c: Don't include <stdlib.h>.\n@@ -6,7 +11,7 @@\n \n 2013-05-14  Joern Rennecke <joern.rennecke@embecosm.com>\n \n-\t* testsuite/gcc.c-torture/compile/limits-externdecl.c [target avr-*-*]:\n+\t* gcc.c-torture/compile/limits-externdecl.c [target avr-*-*]:\n         Expect \"size of array is too large\" error.\n \n 2013-05-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>"}, {"sha": "e1c2b72ba27c7bb2a6524bdc7a893d2f6a1bd7b5", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted43.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7721ee68a02651b6d8d4b2958fe02c7b02342a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7721ee68a02651b6d8d4b2958fe02c7b02342a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted43.C?ref=fc7721ee68a02651b6d8d4b2958fe02c7b02342a", "patch": "@@ -0,0 +1,50 @@\n+// PR c++/53903\n+// { dg-do compile { target c++11 } }\n+\n+struct T\n+{\n+  T() noexcept(false) { }\n+  ~T() noexcept(false) { }\n+};\n+\n+struct A\n+{\n+  A() noexcept;\n+  ~A() noexcept;\n+\n+  T t;\n+};\n+\n+A::A() noexcept = default;   // { dg-error \"defaulted\" }\n+A::~A() noexcept = default;  // { dg-error \"defaulted\" }\n+\n+struct U\n+{\n+  U() noexcept(false) { }\n+  ~U() noexcept(false) { }\n+};\n+\n+struct B\n+{\n+  B() noexcept(false);\n+  ~B() noexcept(false);\n+\n+  U u;\n+};\n+\n+B::B() noexcept(false) = default;\n+B::~B() noexcept(false) = default;\n+\n+struct V\n+{\n+  V() noexcept(false) { }\n+  ~V() noexcept(false) { }\n+};\n+\n+struct C\n+{\n+  C() noexcept = default;     // { dg-error \"defaulted\" }\n+  ~C() noexcept = default;    // { dg-error \"defaulted\" }\n+\n+  V v;\n+};"}]}