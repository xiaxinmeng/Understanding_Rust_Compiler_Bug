{"sha": "4c38b6d9425a007d8e27511703f9660c48962e6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzOGI2ZDk0MjVhMDA3ZDhlMjc1MTE3MDNmOTY2MGM0ODk2MmU2ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-11T19:48:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-11T19:48:07Z"}, "message": "i386.c (TARGET_VECTORIZE_BUILTIN_CONVERSION): Define.\n\n        * config/i386/i386.c (TARGET_VECTORIZE_BUILTIN_CONVERSION): Define.\n        (ix86_builtin_conversion): New function.\n\ntestsuite/ChangeLog:\n\n        * gcc.dg/vect/vect-intfloat-conversion-1.c: Loop gets vectorized\n        on i?86 and x86_64.\n        * gcc.dg/vect/vect-intfloat-conversion-2.c: Ditto.\n        * gcc.dg/vect/vect-floatint-conversion-1.c: New.\n        * gcc.dg/vect/vect-93.c: Another loop gets vectorized\n        on i?86 and x86_64.\n        * gcc.dg/vect/vect-113.c: Ditto.\n\nFrom-SVN: r121820", "tree": {"sha": "2cd086f29296f4cd361e8861e6a69e1c418171e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cd086f29296f4cd361e8861e6a69e1c418171e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c38b6d9425a007d8e27511703f9660c48962e6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c38b6d9425a007d8e27511703f9660c48962e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c38b6d9425a007d8e27511703f9660c48962e6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c38b6d9425a007d8e27511703f9660c48962e6e/comments", "author": null, "committer": null, "parents": [{"sha": "56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5"}], "stats": {"total": 185, "additions": 178, "deletions": 7}, "files": [{"sha": "bd05c7ff2fcab0b48082d82746a6ab761aa10e0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c38b6d9425a007d8e27511703f9660c48962e6e", "patch": "@@ -1,3 +1,8 @@\n+2007-02-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (TARGET_VECTORIZE_BUILTIN_CONVERSION): Define.\n+\t(ix86_builtin_conversion): New function.\n+\n 2007-02-06  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR target/29487"}, {"sha": "a052ea286731ad8ac22726919b41c260bf0cd64a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4c38b6d9425a007d8e27511703f9660c48962e6e", "patch": "@@ -1514,6 +1514,7 @@ static bool ix86_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n static void ix86_init_builtins (void);\n static rtx ix86_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static tree ix86_builtin_vectorized_function (enum built_in_function, tree, tree);\n+static tree ix86_builtin_conversion (enum tree_code, tree);\n static const char *ix86_mangle_fundamental_type (tree);\n static tree ix86_stack_protect_fail (void);\n static rtx ix86_internal_arg_pointer (void);\n@@ -1581,8 +1582,11 @@ static section *x86_64_elf_select_section (tree decl, int reloc,\n #define TARGET_INIT_BUILTINS ix86_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN ix86_expand_builtin\n+\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION ix86_builtin_vectorized_function\n+#undef TARGET_VECTORIZE_BUILTIN_CONVERSION\n+#define TARGET_VECTORIZE_BUILTIN_CONVERSION ix86_builtin_conversion\n \n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ix86_output_function_epilogue\n@@ -18268,6 +18272,40 @@ ix86_builtin_vectorized_function (enum built_in_function fn, tree type_out,\n   return NULL_TREE;\n }\n \n+/* Returns a decl of a function that implements conversion of the\n+   input vector of type TYPE, or NULL_TREE if it is not available.  */\n+\n+static tree\n+ix86_builtin_conversion (enum tree_code code, tree type)\n+{\n+  if (TREE_CODE (type) != VECTOR_TYPE)\n+    return NULL_TREE;\n+  \n+  switch (code)\n+    {\n+    case FLOAT_EXPR:\n+      switch (TYPE_MODE (type))\n+\t{\n+\tcase V4SImode:\n+\t  return ix86_builtins[IX86_BUILTIN_CVTDQ2PS];\n+\tdefault:\n+\t  return NULL_TREE;\n+\t}\n+\n+    case FIX_TRUNC_EXPR:\n+      switch (TYPE_MODE (type))\n+\t{\n+\tcase V4SFmode:\n+\t  return ix86_builtins[IX86_BUILTIN_CVTTPS2DQ];\n+\tdefault:\n+\t  return NULL_TREE;\n+\t}\n+    default:\n+      return NULL_TREE;\n+\n+    }\n+}\n+\n /* Store OPERAND to the memory after reload is completed.  This means\n    that we can't easily use assign_stack_local.  */\n rtx"}, {"sha": "b03e9c0779facba226ff6ec26678870c2d8a71ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c38b6d9425a007d8e27511703f9660c48962e6e", "patch": "@@ -1,3 +1,13 @@\n+2007-02-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/vect/vect-intfloat-conversion-1.c: Loop gets vectorized\n+\ton i?86 and x86_64.\n+\t* gcc.dg/vect/vect-intfloat-conversion-2.c: Ditto.\n+\t* gcc.dg/vect/vect-floatint-conversion-1.c: New.\n+\t* gcc.dg/vect/vect-93.c: Another loop gets vectorized\n+\ton i?86 and x86_64.\n+\t* gcc.dg/vect/vect-113.c: Ditto.\n+\n 2007-02-06  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29487\n@@ -8,9 +18,9 @@\n 2007-02-11  Tehila Meyzels <tehila@il.ibm.com>\n \t    Dorit Nuzman  <dorit@il.ibm.com>\n \n-\t* gcc.dg/vect/vect-intfloat-conversion.c-1:  New test.\n-\t* gcc.dg/vect/vect-intfloat-conversion.c-2:  New test.\n-\t* gcc.dg/vect/vect-93.c: Another loop gets vectorized  on powerpc.\n+\t* gcc.dg/vect/vect-intfloat-conversion-1.c:  New test.\n+\t* gcc.dg/vect/vect-intfloat-conversion-1.c:  New test.\n+\t* gcc.dg/vect/vect-93.c: Another loop gets vectorized on powerpc.\n \t* gcc.dg/vect/vect-113.c: Likewise.\n \n \t* gcc.dg/vect/vect-iv-11.c: A loop gets vectorized."}, {"sha": "f5d6b4ada3323d5a7d4f69a61b5237261b70037d", "filename": "gcc/testsuite/gcc.dg/vect/vect-113.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-113.c?ref=4c38b6d9425a007d8e27511703f9660c48962e6e", "patch": "@@ -32,5 +32,5 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target powerpc*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target powerpc*-*-* i?86-*-* x86_64-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5c8b0d082f9c68a0c0b0ca8529c845fe996ab243", "filename": "gcc/testsuite/gcc.dg/vect/vect-93.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c?ref=4c38b6d9425a007d8e27511703f9660c48962e6e", "patch": "@@ -67,15 +67,15 @@ int main (void)\n \n /* 2 loops vectorized in main1, 2 loops vectorized in main:\n    the first loop in main requires vectorization of conversions,\n-   the second loop in main requires vectorization of misaliged load:  */\n+   the second loop in main requires vectorization of misaliged load.  */\n \n /* main && main1 together: */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 2 \"vect\" { target powerpc*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 2 \"vect\" { target powerpc*-*-* i?86-*-* x86_64-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { target vect_no_align } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" { xfail vect_no_align } } } */\n \n /* in main1: */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target {! powerpc*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target !powerpc*-*-* !i?86-*-* !x86_64-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target vect_no_align } } } */\n \n /* in main: */"}, {"sha": "95ffc684ec44d7b2e31bf72df6d906218d9d7945", "filename": "gcc/testsuite/gcc.dg/vect/vect-floatint-conversion-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-floatint-conversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-floatint-conversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-floatint-conversion-1.c?ref=4c38b6d9425a007d8e27511703f9660c48962e6e", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  float fb[N] = {0.4,3.5,6.6,9.4,12.5,15.6,18.4,21.5,24.6,27.4,30.5,33.6,36.4,39.5,42.6,45.4,0.5,3.6,6.4,9.5,12.6,15.4,18.5,21.6,24.4,27.5,30.6,33.4,36.5,39.6,42.4,45.5};\n+  int ia[N];\n+\n+  /* float -> int */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = (int) fb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != (int) fb[i])\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target i?86-*-* x86_64-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1369f2b8608d3caaf499a7052e49b9026c78c047", "filename": "gcc/testsuite/gcc.dg/vect/vect-intfloat-conversion-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-intfloat-conversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-intfloat-conversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-intfloat-conversion-1.c?ref=4c38b6d9425a007d8e27511703f9660c48962e6e", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+int main1 ()\n+{\n+  int i;\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  float fa[N];\n+\n+  /* int -> float */\n+  for (i = 0; i < N; i++)\n+    {\n+      fa[i] = (float) ib[i];\t\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (fa[i] != (float) ib[i]) \n+        abort (); \n+    }   \n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target powerpc*-*-* i?86-*-* x86_64-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c189e54ca7df17b854956613a117b86251e2d0fd", "filename": "gcc/testsuite/gcc.dg/vect/vect-intfloat-conversion-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-intfloat-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c38b6d9425a007d8e27511703f9660c48962e6e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-intfloat-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-intfloat-conversion-2.c?ref=4c38b6d9425a007d8e27511703f9660c48962e6e", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+int main1 ()\n+{\n+  int i;\n+  int int_arr[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  float float_arr[N];\n+  char char_arr[N];\n+\n+  for (i = 0; i < N; i++){\n+    float_arr[i] = (float) int_arr[i];\n+    char_arr[i] = 0;\n+  }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (float_arr[i] != (float) int_arr[i]) \n+        abort (); \n+      if (char_arr[i] != 0)\n+\tabort ();\n+    }   \n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target powerpc*-*-* i?86-*-* x86_64-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}