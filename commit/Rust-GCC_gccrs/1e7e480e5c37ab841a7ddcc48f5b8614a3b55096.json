{"sha": "1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3ZTQ4MGU1YzM3YWI4NDFhN2RkY2M0OGY1Yjg2MTRhM2I1NTA5Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-22T23:23:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-22T23:23:46Z"}, "message": "* config/alpha/alpha.c (some_small_symbolic_mem_operand) Use\n        for_each_rtx instead of assuming we're already looking at the MEM.\n        (split_small_symbolic_mem_operand): Likewise.\n        * config/alpha/alpha.h (PREDICATE_CODES): Update.\n        * config/alpha/alpha.md (small symbolic memory splitters): Update.\n\n\t* gcc.dg/20020122-4.c: New.\n\nFrom-SVN: r49111", "tree": {"sha": "0f102228b0a11cff8137af4104ea7415fa233bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f102228b0a11cff8137af4104ea7415fa233bed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/comments", "author": null, "committer": null, "parents": [{"sha": "2e27193212a89346908fd2d15b505e617dd53045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e27193212a89346908fd2d15b505e617dd53045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e27193212a89346908fd2d15b505e617dd53045"}], "stats": {"total": 107, "additions": 65, "deletions": 42}, "files": [{"sha": "724a8b90a2a2e4bc25270b2f94bbbffd070010ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "patch": "@@ -1,4 +1,12 @@\n-<<<<<<< ChangeLog\n+2002-01-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (some_small_symbolic_mem_operand) Use\n+\tfor_each_rtx instead of assuming we're already looking at the MEM.\n+\t(split_small_symbolic_mem_operand): Likewise.\n+\t* config/alpha/alpha.h (PREDICATE_CODES): Update.\n+\t* config/alpha/alpha.md (small symbolic memory splitters): Update.\n+\n+2002-01-22  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.md (divmodsi_internal_er): Generate lituse\n \tsequence number for the literal."}, {"sha": "3bc6c6c92c70f6dfd5261e29e83d749a4bf34a52", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "patch": "@@ -116,6 +116,10 @@ int alpha_this_gpdisp_sequence_number;\n /* Declarations of static functions.  */\n static bool decl_in_text_section\n   PARAMS ((tree));\n+static int some_small_symbolic_mem_operand_1\n+  PARAMS ((rtx *, void *));\n+static int split_small_symbolic_mem_operand_1\n+  PARAMS ((rtx *, void *));\n static bool local_symbol_p\n   PARAMS ((rtx));\n static void alpha_set_memflags_1\n@@ -1874,51 +1878,57 @@ some_small_symbolic_mem_operand (x, mode)\n      rtx x;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  /* Get rid of SIGN_EXTEND, etc.  */\n-  while (GET_RTX_CLASS (GET_CODE (x)) == '1')\n-    x = XEXP (x, 0);\n+  return for_each_rtx (&x, some_small_symbolic_mem_operand_1, NULL);\n+}\n+\n+static int\n+some_small_symbolic_mem_operand_1 (px, data)\n+     rtx *px;\n+     void *data ATTRIBUTE_UNUSED;\n+{\n+  rtx x = *px;\n \n   if (GET_CODE (x) != MEM)\n     return 0;\n-\n   x = XEXP (x, 0);\n+\n   /* If this is an ldq_u type address, discard the outer AND.  */\n-  if (GET_CODE (x) == AND && GET_MODE (x) == DImode\n-      && GET_CODE (XEXP (x, 1)) == CONST_INT\n-      && INTVAL (XEXP (x, 1)) == -8)\n+  if (GET_CODE (x) == AND)\n     x = XEXP (x, 0);\n-  return small_symbolic_operand (x, Pmode);\n+\n+  return small_symbolic_operand (x, Pmode) ? 1 : -1;\n }\n \n rtx\n split_small_symbolic_mem_operand (x)\n      rtx x;\n {\n-  rtx *p;\n+  x = copy_rtx (x);\n+  for_each_rtx (&x, split_small_symbolic_mem_operand_1, NULL);\n+  return x;\n+}\n \n-  if (GET_CODE (x) == MEM)\n-    {\n-      rtx tmp = XEXP (x, 0);\n+static int\n+split_small_symbolic_mem_operand_1 (px, data)\n+     rtx *px;\n+     void *data ATTRIBUTE_UNUSED;\n+{\n+  rtx x = *px;\n \n-      if (GET_CODE (tmp) == AND && GET_MODE (tmp) == DImode\n-\t  && GET_CODE (XEXP (tmp, 1)) == CONST_INT\n-\t  && INTVAL (XEXP (tmp, 1)) == -8)\n-\t{\n-\t  tmp = gen_rtx_LO_SUM (DImode, pic_offset_table_rtx, XEXP (tmp, 0));\n-\t  tmp = gen_rtx_AND (DImode, tmp, GEN_INT (-8));\n-\t}\n-      else\n-\ttmp = gen_rtx_LO_SUM (DImode, pic_offset_table_rtx, tmp);\n-      return replace_equiv_address (x, tmp);\n-    }\n+  if (GET_CODE (x) != MEM)\n+    return 0;\n \n-  x = copy_rtx (x);\n-  p = &x;\n-  while (GET_RTX_CLASS (GET_CODE (*p)) == '1')\n-    p = &XEXP (*p, 0);\n+  px = &XEXP (x, 0), x = *px;\n+  if (GET_CODE (x) == AND)\n+    px = &XEXP (x, 0), x = *px;\n \n-  *p = split_small_symbolic_mem_operand (*p);\n-  return x;\n+  if (small_symbolic_operand (x, Pmode))\n+    {\n+      x = gen_rtx_LO_SUM (Pmode, pic_offset_table_rtx, x);\n+      *px = x;\n+    }\n+\n+  return -1;\n }\n \n /* Try a machine-dependent way of reloading an illegitimate address"}, {"sha": "dd8d82072613620219b9f09cddf5c073e773cc63", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "patch": "@@ -2079,8 +2079,7 @@ do {\t\t\t\t\t\t\\\n   {\"reg_no_subreg_operand\", {REG}},\t\t\t\t\t\\\n   {\"addition_operation\", {PLUS}},\t\t\t\t\t\\\n   {\"symbolic_operand\", {SYMBOL_REF, LABEL_REF, CONST}},\t\t\t\\\n-  {\"some_small_symbolic_mem_operand\", {MEM, SIGN_EXTEND, ZERO_EXTEND,\t\\\n-\t\t\t\t       FLOAT_EXTEND}},\n+  {\"some_small_symbolic_mem_operand\", {SET, PARALLEL}},\n \f\n /* Define the `__builtin_va_list' type for the ABI.  */\n #define BUILD_VA_LIST_TYPE(VALIST) \\"}, {"sha": "e8a1a8c3c75b1d8912a580389562bdd0fee3e05d", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "patch": "@@ -5501,19 +5501,11 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   \"operands[2] = pic_offset_table_rtx;\")\n \n (define_split\n-  [(set (match_operand 0 \"some_small_symbolic_mem_operand\" \"\")\n-\t(match_operand 1 \"\" \"\"))]\n+  [(match_operand 0 \"some_small_symbolic_mem_operand\" \"\")]\n   \"TARGET_EXPLICIT_RELOCS && reload_completed\"\n-  [(set (match_dup 0) (match_dup 1))]\n+  [(match_dup 0)]\n   \"operands[0] = split_small_symbolic_mem_operand (operands[0]);\")\n \n-(define_split\n-  [(set (match_operand 0 \"\" \"\")\n-\t(match_operand 1 \"some_small_symbolic_mem_operand\" \"\"))]\n-  \"TARGET_EXPLICIT_RELOCS && reload_completed\"\n-  [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = split_small_symbolic_mem_operand (operands[1]);\")\n-\n (define_insn \"movdi_er_high_g\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")"}, {"sha": "67c44656284b6299b066a450ae7604cbb91a22fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "patch": "@@ -1,3 +1,7 @@\n+2002-01-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/20020122-4.c: New.\n+\n 2002-01-22  H.J. Lu <hjl@gnu.org>\n \n \t* g++.dg/special/ecos.exp: Append .exe instead of a.out as the"}, {"sha": "9109bcfdad903b209411fed28c4a046fbc793b51", "filename": "gcc/testsuite/gcc.dg/20020122-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Ftestsuite%2Fgcc.dg%2F20020122-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7e480e5c37ab841a7ddcc48f5b8614a3b55096/gcc%2Ftestsuite%2Fgcc.dg%2F20020122-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020122-4.c?ref=1e7e480e5c37ab841a7ddcc48f5b8614a3b55096", "patch": "@@ -0,0 +1,10 @@\n+/* Alpha -msmall-data didn't transform (mem (symbol_ref)) to\n+   (mem (lo_sum pic (symbol_ref))) within an asm at the right time.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+void foo()\n+{\n+  static int test;\n+  asm volatile (\"\" : \"=m\"(test) : \"m\"(test));\n+}"}]}