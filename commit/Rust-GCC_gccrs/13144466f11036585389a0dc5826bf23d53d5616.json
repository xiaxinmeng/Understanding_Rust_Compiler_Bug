{"sha": "13144466f11036585389a0dc5826bf23d53d5616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxNDQ0NjZmMTEwMzY1ODUzODlhMGRjNTgyNmJmMjNkNTNkNTYxNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-10T23:18:34Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-11T15:17:03Z"}, "message": "c++: Remove LOOKUP_CONSTINIT.\n\nSince we now have DECL_DECLARED_CONSTINIT_P, we no longer need\nLOOKUP_CONSTINIT.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (LOOKUP_CONSTINIT): Remove.\n\t(LOOKUP_REWRITTEN): Adjust.\n\t* decl.c (duplicate_decls): Set DECL_DECLARED_CONSTINIT_P.\n\t(check_initializer): Use DECL_DECLARED_CONSTINIT_P instead of\n\tLOOKUP_CONSTINIT.\n\t(cp_finish_decl): Don't set DECL_DECLARED_CONSTINIT_P.  Use\n\tDECL_DECLARED_CONSTINIT_P instead of LOOKUP_CONSTINIT.\n\t(grokdeclarator): Set DECL_DECLARED_CONSTINIT_P.\n\t* decl2.c (grokfield): Don't handle LOOKUP_CONSTINIT.\n\t* parser.c (cp_parser_decomposition_declaration): Remove\n\tLOOKUP_CONSTINIT handling.\n\t(cp_parser_init_declarator): Likewise.\n\t* pt.c (tsubst_expr): Likewise.\n\t(instantiate_decl): Likewise.\n\t* typeck2.c (store_init_value): Use DECL_DECLARED_CONSTINIT_P instead\n\tof LOOKUP_CONSTINIT.", "tree": {"sha": "9dfe7bd6076c341c2ab13bdabd9993bca8446ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dfe7bd6076c341c2ab13bdabd9993bca8446ac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13144466f11036585389a0dc5826bf23d53d5616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13144466f11036585389a0dc5826bf23d53d5616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13144466f11036585389a0dc5826bf23d53d5616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13144466f11036585389a0dc5826bf23d53d5616/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29216f56d002982f10c33056f4b3d7f07e164122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29216f56d002982f10c33056f4b3d7f07e164122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29216f56d002982f10c33056f4b3d7f07e164122"}], "stats": {"total": 48, "additions": 19, "deletions": 29}, "files": [{"sha": "5923574a7aa25791084ec4bd68a7fd7726642408", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=13144466f11036585389a0dc5826bf23d53d5616", "patch": "@@ -5598,13 +5598,11 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n #define LOOKUP_DELEGATING_CONS (LOOKUP_NO_NON_INTEGRAL << 1)\n /* Allow initialization of a flexible array members.  */\n #define LOOKUP_ALLOW_FLEXARRAY_INIT (LOOKUP_DELEGATING_CONS << 1)\n-/* Require constant initialization of a non-constant variable.  */\n-#define LOOKUP_CONSTINIT (LOOKUP_ALLOW_FLEXARRAY_INIT << 1)\n /* We're looking for either a rewritten comparison operator candidate or the\n    operator to use on the former's result.  We distinguish between the two by\n    knowing that comparisons other than == and <=> must be the latter, as must\n    a <=> expression trying to rewrite to <=> without reversing.  */\n-#define LOOKUP_REWRITTEN (LOOKUP_CONSTINIT << 1)\n+#define LOOKUP_REWRITTEN (LOOKUP_ALLOW_FLEXARRAY_INIT << 1)\n /* Reverse the order of the two arguments for comparison rewriting.  First we\n    swap the arguments in add_operator_candidates, then we swap the conversions\n    in add_candidate (so that they correspond to the original order of the"}, {"sha": "8922ef54d7448327cbdab3059a5a51b55a8f3a63", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=13144466f11036585389a0dc5826bf23d53d5616", "patch": "@@ -2312,6 +2312,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    |= DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (olddecl);\n \t  DECL_DECLARED_CONSTEXPR_P (newdecl)\n \t    |= DECL_DECLARED_CONSTEXPR_P (olddecl);\n+\t  DECL_DECLARED_CONSTINIT_P (newdecl)\n+\t    |= DECL_DECLARED_CONSTINIT_P (olddecl);\n \n \t  /* Merge the threadprivate attribute from OLDDECL into NEWDECL.  */\n \t  if (DECL_LANG_SPECIFIC (olddecl)\n@@ -6884,7 +6886,7 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t      flags |= LOOKUP_ALREADY_DIGESTED;\n \t    }\n \t  else if (DECL_DECLARED_CONSTEXPR_P (decl)\n-\t\t   || (flags & LOOKUP_CONSTINIT))\n+\t\t   || DECL_DECLARED_CONSTINIT_P (decl))\n \t    {\n \t      /* Declared constexpr or constinit, but no suitable initializer;\n \t\t massage init appropriately so we can pass it into\n@@ -7675,10 +7677,6 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t  DECL_INITIAL (decl) = NULL_TREE;\n \t}\n \n-      /* Handle `constinit' on variable templates.  */\n-      if (flags & LOOKUP_CONSTINIT)\n-\tDECL_DECLARED_CONSTINIT_P (decl) = true;\n-\n       /* Generally, initializers in templates are expanded when the\n \t template is instantiated.  But, if DECL is a variable constant\n \t then it can be used in future constant expressions, so its value\n@@ -7782,7 +7780,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       /* [dcl.constinit]/1 \"The constinit specifier shall be applied\n \t only to a declaration of a variable with static or thread storage\n \t duration.\"  */\n-      if ((flags & LOOKUP_CONSTINIT)\n+      if (DECL_DECLARED_CONSTINIT_P (decl)\n \t  && !(dk == dk_thread || dk == dk_static))\n \t{\n \t  error_at (DECL_SOURCE_LOCATION (decl),\n@@ -13829,9 +13827,15 @@ grokdeclarator (const cp_declarator *declarator,\n     else if (storage_class == sc_static)\n       DECL_THIS_STATIC (decl) = 1;\n \n-    /* Set constexpr flag on vars (functions got it in grokfndecl).  */\n-    if (constexpr_p && VAR_P (decl))\n-      DECL_DECLARED_CONSTEXPR_P (decl) = true;\n+    if (VAR_P (decl))\n+      {\n+\t/* Set constexpr flag on vars (functions got it in grokfndecl).  */\n+\tif (constexpr_p)\n+\t  DECL_DECLARED_CONSTEXPR_P (decl) = true;\n+\t/* And the constinit flag (which only applies to variables).  */\n+\telse if (constinit_p)\n+\t  DECL_DECLARED_CONSTINIT_P (decl) = true;\n+      }\n \n     /* Record constancy and volatility on the DECL itself .  There's\n        no need to do this when processing a template; we'll do this"}, {"sha": "fd48a212787c7579dcff8d1bbbf02cb65d1bc287", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=13144466f11036585389a0dc5826bf23d53d5616", "patch": "@@ -994,9 +994,6 @@ grokfield (const cp_declarator *declarator,\n   else\n     flags = LOOKUP_IMPLICIT;\n \n-  if (decl_spec_seq_has_spec_p (declspecs, ds_constinit))\n-    flags |= LOOKUP_CONSTINIT;\n-\n   switch (TREE_CODE (value))\n     {\n     case VAR_DECL:"}, {"sha": "fed16895b424169c2312aee270d0cb3a8eb3450d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=13144466f11036585389a0dc5826bf23d53d5616", "patch": "@@ -14096,12 +14096,9 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n \n       if (decl != error_mark_node)\n \t{\n-\t  int flags = (decl_spec_seq_has_spec_p (decl_specifiers, ds_constinit)\n-\t\t       ? LOOKUP_CONSTINIT : 0);\n \t  cp_maybe_mangle_decomp (decl, prev, v.length ());\n \t  cp_finish_decl (decl, initializer, non_constant_p, NULL_TREE,\n-\t\t\t  (is_direct_init ? LOOKUP_NORMAL : LOOKUP_IMPLICIT)\n-\t\t\t  | flags);\n+\t\t\t  (is_direct_init ? LOOKUP_NORMAL : LOOKUP_IMPLICIT));\n \t  cp_finish_decomp (decl, prev, v.length ());\n \t}\n     }\n@@ -21018,8 +21015,6 @@ cp_parser_init_declarator (cp_parser* parser,\n      declarations.  */\n   if (!member_p && decl && decl != error_mark_node && !range_for_decl_p)\n     {\n-      int cf = (decl_spec_seq_has_spec_p (decl_specifiers, ds_constinit)\n-\t\t? LOOKUP_CONSTINIT : 0);\n       cp_finish_decl (decl,\n \t\t      initializer, !is_non_constant_init,\n \t\t      asm_specification,\n@@ -21028,7 +21023,7 @@ cp_parser_init_declarator (cp_parser* parser,\n \t\t\t `explicit' constructor is OK.  Otherwise, an\n \t\t\t `explicit' constructor cannot be used.  */\n \t\t      ((is_direct_init || !is_initialized)\n-\t\t       ? LOOKUP_NORMAL : LOOKUP_IMPLICIT) | cf);\n+\t\t       ? LOOKUP_NORMAL : LOOKUP_IMPLICIT));\n     }\n   else if ((cxx_dialect != cxx98) && friend_p\n \t   && decl && TREE_CODE (decl) == FUNCTION_DECL)"}, {"sha": "0f52a9ed77dbc71c7fd884ad5985d879bb09094c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=13144466f11036585389a0dc5826bf23d53d5616", "patch": "@@ -18103,10 +18103,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t       now.  */\n \t\t    predeclare_vla (decl);\n \n-\t\t    bool constinit_p\n-\t\t      = VAR_P (decl) && DECL_DECLARED_CONSTINIT_P (decl);\n-\t\t    cp_finish_decl (decl, init, const_init, NULL_TREE,\n-\t\t\t\t    constinit_p ? LOOKUP_CONSTINIT : 0);\n+\t\t    cp_finish_decl (decl, init, const_init, NULL_TREE, 0);\n \n \t\t    if (ndecl != error_mark_node)\n \t\t      cp_finish_decomp (ndecl, first, cnt);\n@@ -25758,8 +25755,7 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n         push_nested_class (DECL_CONTEXT (d));\n \n       const_init = DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (code_pattern);\n-      int flags = (DECL_DECLARED_CONSTINIT_P (d) ? LOOKUP_CONSTINIT : 0);\n-      cp_finish_decl (d, init, const_init, NULL_TREE, flags);\n+      cp_finish_decl (d, init, const_init, NULL_TREE, 0);\n \n       if (enter_context)\n         pop_nested_class ();"}, {"sha": "e259a4201bee20ecf61fe0f3902f86f697e7a40a", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13144466f11036585389a0dc5826bf23d53d5616/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=13144466f11036585389a0dc5826bf23d53d5616", "patch": "@@ -920,7 +920,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n \t  /* [dcl.constinit]/2 \"If a variable declared with the constinit\n \t     specifier has dynamic initialization, the program is\n \t     ill-formed.\"  */\n-\t  if (flags & LOOKUP_CONSTINIT)\n+\t  if (DECL_DECLARED_CONSTINIT_P (decl))\n \t    {\n \t      error_at (location_of (decl),\n \t\t\t\"%<constinit%> variable %qD does not have a constant \""}]}