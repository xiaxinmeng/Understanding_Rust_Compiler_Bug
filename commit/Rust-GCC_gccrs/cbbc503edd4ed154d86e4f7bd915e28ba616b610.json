{"sha": "cbbc503edd4ed154d86e4f7bd915e28ba616b610", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JiYzUwM2VkZDRlZDE1NGQ4NmU0ZjdiZDkxNWUyOGJhNjE2YjYxMA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-07-12T13:30:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-12T13:30:40Z"}, "message": "expr.c (expand_expr, [...]): Pass constants through immed_double_const to ensure they are properly truncated...\n\n        * expr.c (expand_expr, case PLUS_EXPR): Pass constants through\n        immed_double_const to ensure they are properly truncated then\n        sign extended.\n\nFrom-SVN: r28066", "tree": {"sha": "c56c7eddc5e8a770ae6723b26cd5ba5ca503caf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c56c7eddc5e8a770ae6723b26cd5ba5ca503caf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbbc503edd4ed154d86e4f7bd915e28ba616b610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbc503edd4ed154d86e4f7bd915e28ba616b610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbbc503edd4ed154d86e4f7bd915e28ba616b610", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbc503edd4ed154d86e4f7bd915e28ba616b610/comments", "author": null, "committer": null, "parents": [{"sha": "d4a8b6a2f37357e1ad9d7e998dc05738559b2ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a8b6a2f37357e1ad9d7e998dc05738559b2ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a8b6a2f37357e1ad9d7e998dc05738559b2ce5"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "fd5d177eb7ac66ac76febf986f13932601b78e07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbc503edd4ed154d86e4f7bd915e28ba616b610/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbc503edd4ed154d86e4f7bd915e28ba616b610/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbbc503edd4ed154d86e4f7bd915e28ba616b610", "patch": "@@ -1,3 +1,9 @@\n+Mon Jul 12 14:29:15 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* expr.c (expand_expr, case PLUS_EXPR): Pass constants through\n+\timmed_double_const to ensure they are properly truncated then\n+\tsign extended.\n+\n Mon Jul 12 10:40:01 1999  Vladimir Makarov  <vmakarov@tofu.to.cygnus.com>\n \n \t* config/arm/thumb.c (thumb_reorg): Call replace_symbols_in_block"}, {"sha": "111e6ebe3f1b9b336777c919ade76fe235ae3b09", "filename": "gcc/expr.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbc503edd4ed154d86e4f7bd915e28ba616b610/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbc503edd4ed154d86e4f7bd915e28ba616b610/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=cbbc503edd4ed154d86e4f7bd915e28ba616b610", "patch": "@@ -6968,13 +6968,25 @@ expand_expr (exp, target, tmode, modifier)\n       if (modifier == EXPAND_SUM || modifier == EXPAND_INITIALIZER\n \t  || mode == ptr_mode)\n \t{\n+\t  rtx constant_part;\n+\n \t  if (TREE_CODE (TREE_OPERAND (exp, 0)) == INTEGER_CST\n \t      && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n \t      && TREE_CONSTANT (TREE_OPERAND (exp, 1)))\n \t    {\n+\t      rtx constant_part;\n+\n \t      op1 = expand_expr (TREE_OPERAND (exp, 1), subtarget, VOIDmode,\n \t\t\t\t EXPAND_SUM);\n-\t      op1 = plus_constant (op1, TREE_INT_CST_LOW (TREE_OPERAND (exp, 0)));\n+\t      /* Use immed_double_const to ensure that the constant is\n+\t\t truncated according to the mode of OP1, then sign extended\n+\t\t to a HOST_WIDE_INT.  Using the constant directly can result\n+\t\t in non-canonical RTL in a 64x32 cross compile.  */\n+\t      constant_part\n+\t\t= immed_double_const (TREE_INT_CST_LOW (TREE_OPERAND (exp, 0)),\n+\t\t\t\t      (HOST_WIDE_INT) 0,\n+\t\t\t\t      GET_MODE (op1));\n+\t      op1 = plus_constant (op1, XINT (constant_part, 0));\n \t      if (modifier != EXPAND_SUM && modifier != EXPAND_INITIALIZER)\n \t\top1 = force_operand (op1, target);\n \t      return op1;\n@@ -6984,6 +6996,8 @@ expand_expr (exp, target, tmode, modifier)\n \t\t   && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_INT\n \t\t   && TREE_CONSTANT (TREE_OPERAND (exp, 0)))\n \t    {\n+\t      rtx constant_part;\n+\n \t      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode,\n \t\t\t\t EXPAND_SUM);\n \t      if (! CONSTANT_P (op0))\n@@ -6996,7 +7010,15 @@ expand_expr (exp, target, tmode, modifier)\n \t\t    goto binop2;\n \t\t  goto both_summands;\n \t\t}\n-\t      op0 = plus_constant (op0, TREE_INT_CST_LOW (TREE_OPERAND (exp, 1)));\n+\t      /* Use immed_double_const to ensure that the constant is\n+\t\t truncated according to the mode of OP1, then sign extended\n+\t\t to a HOST_WIDE_INT.  Using the constant directly can result\n+\t\t in non-canonical RTL in a 64x32 cross compile.  */\n+\t      constant_part\n+\t\t= immed_double_const (TREE_INT_CST_LOW (TREE_OPERAND (exp, 1)),\n+\t\t\t\t      (HOST_WIDE_INT) 0,\n+\t\t\t\t      GET_MODE (op0));\n+\t      op0 = plus_constant (op0, XINT (constant_part, 0));\n \t      if (modifier != EXPAND_SUM && modifier != EXPAND_INITIALIZER)\n \t\top0 = force_operand (op0, target);\n \t      return op0;"}]}