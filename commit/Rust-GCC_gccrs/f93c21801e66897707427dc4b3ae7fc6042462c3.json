{"sha": "f93c21801e66897707427dc4b3ae7fc6042462c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkzYzIxODAxZTY2ODk3NzA3NDI3ZGM0YjNhZTdmYzYwNDI0NjJjMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-10-11T16:54:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-10-11T16:54:17Z"}, "message": "alpha.c (alpha_return_in_memory): Rename from return_in_memory, make static, change signature to match target hook.\n\n        * config/alpha/alpha.c (alpha_return_in_memory): Rename from\n        return_in_memory, make static, change signature to match target hook.\n        (alpha_setup_incoming_varargs): Make static, change signature to\n        match target hook, add code for vms and unicos.\n        (TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n        TARGET_PROMOTE_PROTOTYPES, TARGET_STRUCT_VALUE_RTX,\n        TARGET_RETURN_IN_MEMORY, TARGET_SETUP_INCOMING_VARARGS,\n        TARGET_STRICT_ARGUMENT_NAMING,\n        TARGET_PRETEND_OUTGOING_VARARGS_NAMED): New.\n        * config/alpha/alpha-protos.h: Update.\n        * config/alpha/alpha.h (PROMOTE_FUNCTION_ARGS,\n        PROMOTE_FUNCTION_RETURN, RETURN_IN_MEMORY,\n        SETUP_INCOMING_VARARGS): Remove.\n        * config/alpha/unicosmk.h (SETUP_INCOMING_VARARGS): Remove.\n        * config/alpha/vms.h (SETUP_INCOMING_VARARGS): Remove.\n\nFrom-SVN: r72338", "tree": {"sha": "1d5b91395e6c6f109a7aafa0309dcae5857432b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d5b91395e6c6f109a7aafa0309dcae5857432b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f93c21801e66897707427dc4b3ae7fc6042462c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f93c21801e66897707427dc4b3ae7fc6042462c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f93c21801e66897707427dc4b3ae7fc6042462c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f93c21801e66897707427dc4b3ae7fc6042462c3/comments", "author": null, "committer": null, "parents": [{"sha": "e99faaaaaff0261f66cba13c27017a37e075d290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99faaaaaff0261f66cba13c27017a37e075d290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99faaaaaff0261f66cba13c27017a37e075d290"}], "stats": {"total": 198, "additions": 90, "deletions": 108}, "files": [{"sha": "825eafa3073254582b39d342eac2e8ebb2dc7d9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f93c21801e66897707427dc4b3ae7fc6042462c3", "patch": "@@ -1,3 +1,21 @@\n+2003-10-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_return_in_memory): Rename from\n+\treturn_in_memory, make static, change signature to match target hook.\n+\t(alpha_setup_incoming_varargs): Make static, change signature to\n+\tmatch target hook, add code for vms and unicos.\n+\t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN,\n+\tTARGET_PROMOTE_PROTOTYPES, TARGET_STRUCT_VALUE_RTX,\n+\tTARGET_RETURN_IN_MEMORY, TARGET_SETUP_INCOMING_VARARGS,\n+\tTARGET_STRICT_ARGUMENT_NAMING,\n+\tTARGET_PRETEND_OUTGOING_VARARGS_NAMED): New.\n+\t* config/alpha/alpha-protos.h: Update.\n+\t* config/alpha/alpha.h (PROMOTE_FUNCTION_ARGS,\n+\tPROMOTE_FUNCTION_RETURN, RETURN_IN_MEMORY,\n+\tSETUP_INCOMING_VARARGS): Remove.\n+\t* config/alpha/unicosmk.h (SETUP_INCOMING_VARARGS): Remove.\n+\t* config/alpha/vms.h (SETUP_INCOMING_VARARGS): Remove.\n+\n 2003-10-11  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* config/arm/arm.c (arm_regno_class): Handle IWMMXT_GR_REGS."}, {"sha": "0e2cf4843df34b3b1268b961c79eb6155613ecaa", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=f93c21801e66897707427dc4b3ae7fc6042462c3", "patch": "@@ -130,13 +130,10 @@ extern void print_operand_address (FILE *, rtx);\n extern void alpha_initialize_trampoline (rtx, rtx, rtx, int, int, int);\n \n extern tree alpha_build_va_list (void);\n-extern void alpha_setup_incoming_varargs (CUMULATIVE_ARGS, enum machine_mode,\n-\t\t\t\t\t  tree, int *, int);\n extern void alpha_va_start (tree, rtx);\n extern rtx alpha_va_arg (tree, tree);\n extern rtx function_arg (CUMULATIVE_ARGS, enum machine_mode, tree, int);\n extern rtx function_value (tree, tree, enum machine_mode);\n-extern bool return_in_memory (tree, enum machine_mode);\n \n extern void alpha_start_function (FILE *, const char *, tree);\n extern void alpha_end_function (FILE *, const char *, tree);"}, {"sha": "66b6f748d1f3b03f96740fb7f0726f4c07efdb6d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 72, "deletions": 22, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f93c21801e66897707427dc4b3ae7fc6042462c3", "patch": "@@ -5983,9 +5983,10 @@ function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode, tree type,\n \n /* Return true if TYPE must be returned in memory, instead of in registers.  */\n \n-bool\n-return_in_memory (tree type, enum machine_mode mode)\n+static bool\n+alpha_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n {\n+  enum machine_mode mode = VOIDmode;\n   int size;\n \n   if (type)\n@@ -6043,7 +6044,7 @@ function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n   enum mode_class class;\n \n #ifdef ENABLE_CHECKING\n-  if (return_in_memory (valtype, mode))\n+  if (alpha_return_in_memory (valtype, func))\n     abort ();\n #endif\n \n@@ -6118,27 +6119,59 @@ alpha_build_va_list (void)\n }\n \n /* Perform any needed actions needed for a function that is receiving a\n-   variable number of arguments. \n+   variable number of arguments.  */\n \n-   On the Alpha, we allocate space for all 12 arg registers, but only\n-   push those that are remaining.  However, if NO registers need to be\n-   saved, don't allocate any space.  This is not only because we won't\n-   need the space, but because AP includes the current_pretend_args_size\n-   and we don't want to mess up any ap-relative addresses already made.\n+static void\n+alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum,\n+\t\t\t      enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t      tree type ATTRIBUTE_UNUSED,\n+\t\t\t      int *pretend_size, int no_rtl)\n+{\n+#if TARGET_ABI_UNICOSMK\n+  /* On Unicos/Mk, the standard subroutine __T3E_MISMATCH stores all register\n+     arguments on the stack. Unfortunately, it doesn't always store the first\n+     one (i.e. the one that arrives in $16 or $f16). This is not a problem\n+     with stdargs as we always have at least one named argument there.  */\n+  int num_reg_words = pcum->num_reg_words;\n+  if (num_reg_words < 6)\n+    {\n+      if (!no_rtl)\n+\t{\n+\t  emit_insn (gen_umk_mismatch_args (GEN_INT (num_reg_words + 1)));\n+\t  emit_insn (gen_arg_home_umk ());\n+\t}\n+      *pretend_size = 0;\n+    }\n+#elif TARGET_ABI_OPEN_VMS\n+  /* For VMS, we allocate space for all 6 arg registers plus a count.\n \n-   If we are not to use the floating-point registers, save the integer\n-   registers where we would put the floating-point registers.  This is\n-   not the most efficient way to implement varargs with just one register\n-   class, but it isn't worth doing anything more efficient in this rare\n-   case.  */\n+     However, if NO registers need to be saved, don't allocate any space.\n+     This is not only because we won't need the space, but because AP\n+     includes the current_pretend_args_size and we don't want to mess up\n+     any ap-relative addresses already made.  */\n+  if (pcum->num_args < 6)\n+    {\n+      if (!no_rtl)\n+\t{\n+\t  emit_move_insn (gen_rtx_REG (DImode, 1), virtual_incoming_args_rtx);\n+\t  emit_insn (gen_arg_home ());\n+\t}\n+      *pretend_size = 7 * UNITS_PER_WORD;\n+    }\n+#else\n+  /* On OSF/1 and friends, we allocate space for all 12 arg registers, but\n+     only push those that are remaining.  However, if NO registers need to\n+     be saved, don't allocate any space.  This is not only because we won't\n+     need the space, but because AP includes the current_pretend_args_size\n+     and we don't want to mess up any ap-relative addresses already made.\n+\n+     If we are not to use the floating-point registers, save the integer\n+     registers where we would put the floating-point registers.  This is\n+     not the most efficient way to implement varargs with just one register\n+     class, but it isn't worth doing anything more efficient in this rare\n+     case.  */\n+  CUMULATIVE_ARGS cum = *pcum;\n \n-#if TARGET_ABI_OSF\n-void\n-alpha_setup_incoming_varargs(CUMULATIVE_ARGS cum,\n-\t\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t     tree type ATTRIBUTE_UNUSED,\n-\t\t\t     int *pretend_size, int no_rtl)\n-{\n   if (cum >= 6)\n     return;\n \n@@ -6161,8 +6194,8 @@ alpha_setup_incoming_varargs(CUMULATIVE_ARGS cum,\n \t\t\t   6 - cum);\n      }\n   *pretend_size = 12 * UNITS_PER_WORD;\n-}\n #endif\n+}\n \n void\n alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n@@ -10146,6 +10179,23 @@ alpha_init_libfuncs (void)\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG alpha_reorg\n \n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_false\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY alpha_return_in_memory\n+#undef TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS alpha_setup_incoming_varargs\n+#undef TARGET_STRICT_ARGUMENT_NAMING\n+#define TARGET_STRICT_ARGUMENT_NAMING hook_bool_CUMULATIVE_ARGS_true\n+#undef TARGET_PRETEND_OUTGOING_VARARGS_NAMED\n+#define TARGET_PRETEND_OUTGOING_VARARGS_NAMED hook_bool_CUMULATIVE_ARGS_true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "4b873775a3eca616b62a009b61e44c3ae959b201", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=f93c21801e66897707427dc4b3ae7fc6042462c3", "patch": "@@ -461,15 +461,6 @@ extern const char *alpha_tls_size_string; /* For -mtls-size= */\n       (MODE) = DImode;\t\t\t\t\\\n     }\n \n-/* Define this if function arguments should also be promoted using the above\n-   procedure.  */\n-\n-#define PROMOTE_FUNCTION_ARGS\n-\n-/* Likewise, if the function return value is promoted.  */\n-\n-#define PROMOTE_FUNCTION_RETURN\n-\n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.\n \n@@ -1003,15 +994,6 @@ extern int alpha_memory_latency;\n #define LIBCALL_VALUE(MODE) \\\n   function_value (NULL, NULL, MODE)\n \n-/* The definition of this macro implies that there are cases where\n-   a scalar value cannot be returned in registers.\n-\n-   For the Alpha, any structure or union type is returned in memory, as\n-   are integers whose size is larger than 64 bits.  */\n-\n-#define RETURN_IN_MEMORY(TYPE) \\\n-  return_in_memory (TYPE, VOIDmode)\n-\n /* 1 if N is a possible register number for a function value\n    as seen by the caller.  */\n \n@@ -1096,11 +1078,6 @@ extern int alpha_memory_latency;\n ((CUM) < 6 && 6 < (CUM) + ALPHA_ARG_SIZE (MODE, TYPE, NAMED)\t\\\n  ? 6 - (CUM) : 0)\n \n-/* Perform any needed actions needed for a function that is receiving a\n-   variable number of arguments.  */\n-#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL) \\\n-  alpha_setup_incoming_varargs(CUM,MODE,TYPE,&(PRETEND_SIZE),NO_RTL)\n-\n /* Try to output insns to set TARGET equal to the constant C if it can be\n    done in less than N insns.  Do all computations in MODE.  Returns the place\n    where the output has been placed if it can be done and the insns have been"}, {"sha": "c7f2bfe4aa724d41b46576aaee7305508dcb893f", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=f93c21801e66897707427dc4b3ae7fc6042462c3", "patch": "@@ -223,30 +223,6 @@ do {\t\t\t\t\t\t\t\t\\\n #undef FUNCTION_ARG_PARTIAL_NREGS\n /* #define FUNCTION_ARG_PARTIAL_NREGS(CUM,MODE,TYPE,NAMED) 0 */\n \n-/* Perform any needed actions needed for a function that is receiving a\n-   variable number of arguments.\n-\n-   On Unicos/Mk, the standard subroutine __T3E_MISMATCH stores all register\n-   arguments on the stack. Unfortunately, it doesn't always store the first\n-   one (i.e. the one that arrives in $16 or $f16). This is not a problem\n-   with stdargs as we always have at least one named argument there.  */\n-\n-#undef SETUP_INCOMING_VARARGS\n-#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n-{ if ((CUM).num_reg_words < 6)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (! (NO_RTL))\t\t\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-\t  int start = (CUM).num_reg_words + 1;\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-          emit_insn (gen_umk_mismatch_args (GEN_INT (start)));\t\t\\\n-\t  emit_insn (gen_arg_home_umk ());\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      PRETEND_SIZE = 0;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* This ensures that $15 increments/decrements in leaf functions won't get\n    eliminated.  */\n "}, {"sha": "8b065e7b9b0f9df0f87813f3d3db2fdf5a458072", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93c21801e66897707427dc4b3ae7fc6042462c3/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=f93c21801e66897707427dc4b3ae7fc6042462c3", "patch": "@@ -202,42 +202,6 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n    + ALPHA_ARG_SIZE (MODE, TYPE, NAMED)\t\t\t\t\t\\\n  ? 6 - (CUM).num_args : 0)\n \n-/* Perform any needed actions needed for a function that is receiving a\n-   variable number of arguments. \n-\n-   CUM is as for INIT_CUMULATIVE_ARGS.\n-\n-   MODE and TYPE are the mode and type of the current parameter.\n-\n-   PRETEND_SIZE is a variable that should be set to the amount of stack\n-   that must be pushed by the prolog to pretend that our caller pushed\n-   it.\n-\n-   Normally, this macro will push all remaining incoming registers on the\n-   stack and set PRETEND_SIZE to the length of the registers pushed. \n-\n-   For VMS, we allocate space for all 6 arg registers plus a count.\n-\n-   However, if NO registers need to be saved, don't allocate any space.\n-   This is not only because we won't need the space, but because AP includes\n-   the current_pretend_args_size and we don't want to mess up any\n-   ap-relative addresses already made.  */\n-\n-#undef SETUP_INCOMING_VARARGS\n-#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n-{ if ((CUM).num_args < 6)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (! (NO_RTL))\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  emit_move_insn (gen_rtx_REG (DImode, 1),\t\\\n-\t\t\t  virtual_incoming_args_rtx);\t\\\n-\t  emit_insn (gen_arg_home ());\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-\t\t\t\t\t\t        \\\n-      PRETEND_SIZE = 7 * UNITS_PER_WORD;\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-}\n-\n /* ABI has stack checking, but it's broken.  */\n #undef STACK_CHECK_BUILTIN\n #define STACK_CHECK_BUILTIN 0"}]}