{"sha": "7861a5ce14376a46409d83eeebef942be4030fe4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2MWE1Y2UxNDM3NmE0NjQwOWQ4M2VlZWJlZjk0MmJlNDAzMGZlNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-11-22T09:55:47Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-11-22T09:55:47Z"}, "message": "re PR fortran/34079 (Bind(C): Character argument/return value problems)\n\n2007-11-22  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34079\n        * trans-expr.c (gfc_conv_function_call): Do not append\n        string length arguments when calling bind(c) procedures.\n        * trans-decl.c (create_function_arglist): Do not append\n        string length arguments when declaring bind(c) procedures.\n\n2007-11-22  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34079\n        * gfortran.dg/bind_c_usage_10.f03: Remove .mod file afterwards.\n        * gfortran.dg/bind_c_usage_13.f03: New.\n        * gfortran.dg/bind_c_usage_14.f03: New.\n\nFrom-SVN: r130346", "tree": {"sha": "8a9a62e34f11f58333d3069ebae8246ca7489e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a9a62e34f11f58333d3069ebae8246ca7489e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7861a5ce14376a46409d83eeebef942be4030fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7861a5ce14376a46409d83eeebef942be4030fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7861a5ce14376a46409d83eeebef942be4030fe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7861a5ce14376a46409d83eeebef942be4030fe4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac605fd66dcaa3c39b41c94d0c00a00659c3e42e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac605fd66dcaa3c39b41c94d0c00a00659c3e42e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac605fd66dcaa3c39b41c94d0c00a00659c3e42e"}], "stats": {"total": 293, "additions": 289, "deletions": 4}, "files": [{"sha": "43f622947449cc4a86942433a0a74b0e295fb085", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7861a5ce14376a46409d83eeebef942be4030fe4", "patch": "@@ -1,3 +1,11 @@\n+2007-11-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34079\n+\t* trans-expr.c (gfc_conv_function_call): Do not append\n+\tstring length arguments when calling bind(c) procedures.\n+\t* trans-decl.c (create_function_arglist): Do not append\n+\tstring length arguments when declaring bind(c) procedures.\n+\n 2007-11-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/34083"}, {"sha": "3a3897377cd363703e5b821b62914a0bad2f9332", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=7861a5ce14376a46409d83eeebef942be4030fe4", "patch": "@@ -1535,8 +1535,10 @@ create_function_arglist (gfc_symbol * sym)\n       typelist = TREE_CHAIN (typelist);\n     }\n \n-  /* Add the hidden string length parameters.  */\n-  arglist = chainon (arglist, hidden_arglist);\n+  /* Add the hidden string length parameters, unless the procedure\n+     is bind(C).  */\n+  if (!sym->attr.is_bind_c)\n+    arglist = chainon (arglist, hidden_arglist);\n \n   gcc_assert (hidden_typelist == NULL_TREE\n               || TREE_VALUE (hidden_typelist) == void_type_node);"}, {"sha": "6fc1e2c13163c9c014dc42309fb9a18e9f100b90", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7861a5ce14376a46409d83eeebef942be4030fe4", "patch": "@@ -2392,8 +2392,8 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n         }\n \n       /* Character strings are passed as two parameters, a length and a\n-         pointer.  */\n-      if (parmse.string_length != NULL_TREE)\n+         pointer - except for Bind(c) which only passes the pointer.  */\n+      if (parmse.string_length != NULL_TREE && !sym->attr.is_bind_c)\n         stringargs = gfc_chainon_list (stringargs, parmse.string_length);\n \n       arglist = gfc_chainon_list (arglist, parmse.expr);"}, {"sha": "7380eb89bb7b450fd8aa70d92260f1e480a0d6ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7861a5ce14376a46409d83eeebef942be4030fe4", "patch": "@@ -1,3 +1,10 @@\n+2007-11-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34079\n+\t* gfortran.dg/bind_c_usage_10.f03: Remove .mod file afterwards.\n+\t* gfortran.dg/bind_c_usage_13.f03: New.\n+\t* gfortran.dg/bind_c_usage_14.f03: New.\n+\n 2007-11-22  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR rtl-optimization/33848"}, {"sha": "4f2268aee6dbb7150f7bffffa6884714aad078c1", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_10.f03", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_10.f03?ref=7861a5ce14376a46409d83eeebef942be4030fe4", "patch": "@@ -71,3 +71,5 @@ integer(c_int) function func4()\n     func4ent = -88.0\n   end function func4\n end module mod\n+\n+! { dg-final { cleanup-modules \"mod\" } }"}, {"sha": "d89963d8b1dc2e870545180ff2cf6cb844105bde", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_13.f03", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_13.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_13.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_13.f03?ref=7861a5ce14376a46409d83eeebef942be4030fe4", "patch": "@@ -0,0 +1,151 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/34079\n+! Character bind(c) arguments shall not pass the length as additional argument\n+!\n+\n+subroutine multiArgTest()\n+  implicit none\n+interface ! Array\n+  subroutine multiso_array(x,y) bind(c)\n+    use iso_c_binding\n+    character(kind=c_char,len=1), dimension(*) :: x,y\n+  end subroutine multiso_array\n+  subroutine multiso2_array(x,y) bind(c) ! { dg-warning \"may not be C interoperable\" }\n+    character(len=1), dimension(*) :: x,y\n+  end subroutine multiso2_array\n+  subroutine mult_array(x,y)\n+    use iso_c_binding\n+    character(kind=c_char,len=1), dimension(*) :: x,y\n+  end subroutine mult_array\n+end interface\n+\n+interface ! Scalar: call by reference\n+  subroutine multiso(x,y) bind(c)\n+    use iso_c_binding\n+    character(kind=c_char,len=1) :: x,y\n+  end subroutine multiso\n+  subroutine multiso2(x,y) bind(c) ! { dg-warning \"may not be C interoperable\" }\n+    character(len=1) :: x,y\n+  end subroutine multiso2\n+  subroutine mult(x,y)\n+    use iso_c_binding\n+    character(kind=c_char,len=1) :: x,y\n+  end subroutine mult\n+end interface\n+\n+interface ! Scalar: call by VALUE\n+  subroutine multiso_val(x,y) bind(c)\n+    use iso_c_binding\n+    character(kind=c_char,len=1), value :: x,y\n+  end subroutine multiso_val\n+  subroutine multiso2_val(x,y) bind(c) ! { dg-warning \"may not be C interoperable\" }\n+    character(len=1), value :: x,y\n+  end subroutine multiso2_val\n+  subroutine mult_val(x,y)\n+    use iso_c_binding\n+    character(kind=c_char,len=1), value :: x,y\n+  end subroutine mult_val\n+end interface\n+\n+call mult_array    (\"abc\",\"ab\")\n+call multiso_array (\"ABCDEF\",\"ab\")\n+call multiso2_array(\"AbCdEfGhIj\",\"ab\")\n+\n+call mult    (\"u\",\"x\")\n+call multiso (\"v\",\"x\")\n+call multiso2(\"w\",\"x\")\n+\n+call mult_val    (\"x\",\"x\")\n+call multiso_val (\"y\",\"x\")\n+call multiso2_val(\"z\",\"x\")\n+end subroutine multiArgTest\n+\n+program test\n+implicit none\n+\n+interface ! Array\n+  subroutine subiso_array(x) bind(c)\n+    use iso_c_binding\n+    character(kind=c_char,len=1), dimension(*) :: x\n+  end subroutine subiso_array\n+  subroutine subiso2_array(x) bind(c) ! { dg-warning \"may not be C interoperable\" }\n+    character(len=1), dimension(*) :: x\n+  end subroutine subiso2_array\n+  subroutine sub_array(x)\n+    use iso_c_binding\n+    character(kind=c_char,len=1), dimension(*) :: x\n+  end subroutine sub_array\n+end interface\n+\n+interface ! Scalar: call by reference\n+  subroutine subiso(x) bind(c)\n+    use iso_c_binding\n+    character(kind=c_char,len=1) :: x\n+  end subroutine subiso\n+  subroutine subiso2(x) bind(c) ! { dg-warning \"may not be C interoperable\" }\n+    character(len=1) :: x\n+  end subroutine subiso2\n+  subroutine sub(x)\n+    use iso_c_binding\n+    character(kind=c_char,len=1) :: x\n+  end subroutine sub\n+end interface\n+\n+interface ! Scalar: call by VALUE\n+  subroutine subiso_val(x) bind(c)\n+    use iso_c_binding\n+    character(kind=c_char,len=1), value :: x\n+  end subroutine subiso_val\n+  subroutine subiso2_val(x) bind(c) ! { dg-warning \"may not be C interoperable\" }\n+    character(len=1), value :: x\n+  end subroutine subiso2_val\n+  subroutine sub_val(x)\n+    use iso_c_binding\n+    character(kind=c_char,len=1), value :: x\n+  end subroutine sub_val\n+end interface\n+\n+call sub_array    (\"abc\")\n+call subiso_array (\"ABCDEF\")\n+call subiso2_array(\"AbCdEfGhIj\")\n+\n+call sub    (\"u\")\n+call subiso (\"v\")\n+call subiso2(\"w\")\n+\n+call sub_val    (\"x\")\n+call subiso_val (\"y\")\n+call subiso2_val(\"z\")\n+end program test\n+\n+! Double argument dump:\n+!\n+! { dg-final { scan-tree-dump \"mult_array .&.abc..1..lb: 1 sz: 1., &.ab..1..lb: 1 sz: 1., 3, 2.;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"multiso_array .&.ABCDEF..1..lb: 1 sz: 1., &.ab..1..lb: 1 sz: 1..;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"multiso2_array .&.AbCdEfGhIj..1..lb: 1 sz: 1., &.ab..1..lb: 1 sz: 1..;\" \"original\" } }\n+!\n+! { dg-final { scan-tree-dump \"mult .&.u..1..lb: 1 sz: 1., &.x..1..lb: 1 sz: 1., 1, 1.;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"multiso .&.v..1..lb: 1 sz: 1., &.x..1..lb: 1 sz: 1..;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"multiso2 .&.w..1..lb: 1 sz: 1., &.x..1..lb: 1 sz: 1..;\" \"original\" } }\n+!\n+! { dg-final { scan-tree-dump \"mult_val ..x., .x., 1, 1.;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"multiso_val .121, 120.;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"multiso2_val ..z., .x..;\" \"original\" } }\n+!\n+! Single argument dump:\n+!\n+! { dg-final { scan-tree-dump \"sub_array .&.abc..1..lb: 1 sz: 1., 3.;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"subiso_array .&.ABCDEF..1..lb: 1 sz: 1..;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"subiso2_array .&.AbCdEfGhIj..1..lb: 1 sz: 1..;\" \"original\" } }\n+!\n+! { dg-final { scan-tree-dump \"sub .&.u..1..lb: 1 sz: 1., 1.;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"subiso .&.v..1..lb: 1 sz: 1..;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"subiso2 .&.w..1..lb: 1 sz: 1..;\" \"original\" } }\n+!\n+! { dg-final { scan-tree-dump \"sub_val ..x., 1.;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"subiso_val .121.;\" \"original\" } }\n+! { dg-final { scan-tree-dump \"subiso2_val ..z..;\" \"original\" } }\n+!\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "abcc46e7e3915f020968a544f3ec4ddde1eca593", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_14.f03", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_14.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7861a5ce14376a46409d83eeebef942be4030fe4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_14.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_14.f03?ref=7861a5ce14376a46409d83eeebef942be4030fe4", "patch": "@@ -0,0 +1,115 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/34079\n+! Bind(C) procedures shall have no character length\n+! dummy and actual arguments.\n+!\n+\n+! SUBROUTINES\n+\n+subroutine sub1noiso(a, b)\n+  use iso_c_binding\n+  implicit none\n+  character(len=1,kind=c_char) :: a(*), b\n+  character(len=1,kind=c_char):: x,z\n+  integer(c_int) :: y\n+  value :: b\n+  print *, a(1:2), b\n+end subroutine sub1noiso\n+\n+subroutine sub2(a, b) bind(c)\n+  use iso_c_binding\n+  implicit none\n+  character(len=1,kind=c_char) :: a(*), b\n+  character(len=1,kind=c_char):: x,z\n+  integer(c_int) :: y\n+  value :: b\n+  print *, a(1:2), b\n+end subroutine sub2\n+\n+! SUBROUTINES with ENTRY\n+\n+subroutine sub3noiso(a, b)\n+  use iso_c_binding\n+  implicit none\n+  character(len=1,kind=c_char) :: a(*), b\n+  character(len=1,kind=c_char):: x,z\n+  integer(c_int) :: y\n+  value :: b\n+  print *, a(1:2), b\n+entry sub3noisoEntry(x,y,z)\n+  x = 'd'\n+end subroutine sub3noiso\n+\n+subroutine sub4iso(a, b) bind(c)\n+  use iso_c_binding\n+  implicit none\n+  character(len=1,kind=c_char) :: a(*), b\n+  character(len=1,kind=c_char):: x,z\n+  integer(c_int) :: y\n+  value :: b\n+  print *, a(1:2), b\n+entry sub4isoEntry(x,y,z)\n+  x = 'd'\n+end subroutine sub4iso\n+\n+subroutine sub5iso(a, b) bind(c)\n+  use iso_c_binding\n+  implicit none\n+  character(len=1,kind=c_char) :: a(*), b\n+  character(len=1,kind=c_char):: x,z\n+  integer(c_int) :: y\n+  value :: b\n+  print *, a(1:2), b\n+entry sub5noIsoEntry(x,y,z)\n+  x = 'd'\n+end subroutine sub5iso\n+\n+subroutine sub6NoIso(a, b)\n+  use iso_c_binding\n+  implicit none\n+  character(len=1,kind=c_char) :: a(*), b\n+  character(len=1,kind=c_char):: x,z\n+  integer(c_int) :: y\n+  value :: b\n+  print *, a(1:2), b\n+entry sub6isoEntry(x,y,z)\n+  x = 'd'\n+end subroutine sub6NoIso\n+\n+! The subroutines (including entry) should have\n+! only a char-length parameter if they are not bind(C).\n+!\n+! { dg-final { scan-tree-dump \"sub1noiso .a, b, _a, _b\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"sub2 .a, b\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"sub3noiso .a, b, _a, _b\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"sub3noisoentry .x, y, z, _x, _z\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"sub4iso .a, b\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"sub4isoentry .x, y, z, _x, _z\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"sub5iso .a, b\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"sub5noisoentry .x, y, z, _x, _z\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"sub6noiso .a, b, _a, _b\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"sub6isoentry .x, y, z, _x, _z\\\\)\" \"original\" } }\n+\n+! The master functions should have always a length parameter\n+! to ensure sharing a parameter between bind(C) and non-bind(C) works\n+!\n+! { dg-final { scan-tree-dump \"master.0.sub3noiso .__entry, z, y, x, b, a, _z, _x, _b, _a\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.1.sub4iso .__entry, z, y, x, b, a, _z, _x, _b, _a\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.2.sub5iso .__entry, z, y, x, b, a, _z, _x, _b, _a\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.3.sub6noiso .__entry, z, y, x, b, a, _z, _x, _b, _a\\\\)\" \"original\" } }\n+\n+! Thus, the master functions need to be called with length arguments\n+! present\n+!\n+! { dg-final { scan-tree-dump \"master.0.sub3noiso .0, 0B, 0B, 0B, b, a, 0, 0, 1, 1\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.0.sub3noiso .1, z, y, x, 0B, 0B, 1, 1, 0, 0\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.1.sub4iso .0, 0B, 0B, 0B, b, a, 0, 0, 1, 1\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.1.sub4iso .1, z, y, x, 0B, 0B, 1, 1, 0, 0\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.2.sub5iso .0, 0B, 0B, 0B, b, a, 0, 0, 1, 1\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.2.sub5iso .1, z, y, x, 0B, 0B, 1, 1, 0, 0\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.3.sub6noiso .0, 0B, 0B, 0B, b, a, 0, 0, 1, 1\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \"master.3.sub6noiso .1, z, y, x, 0B, 0B, 1, 1, 0, 0\\\\);\" \"original\" } }\n+\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}