{"sha": "435a6d9580fa1675537a4d2a3151802a15064d3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1YTZkOTU4MGZhMTY3NTUzN2E0ZDJhMzE1MTgwMmExNTA2NGQzZA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-07-11T07:50:58Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-07-11T07:50:58Z"}, "message": "Do not try to further refine a VR_UNDEFINED result when intersecting\nvalue_ranges.\n\nFrom-SVN: r273377", "tree": {"sha": "e01e63c5f4914c367549a907d46d6fcb13d3d481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e01e63c5f4914c367549a907d46d6fcb13d3d481"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435a6d9580fa1675537a4d2a3151802a15064d3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435a6d9580fa1675537a4d2a3151802a15064d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435a6d9580fa1675537a4d2a3151802a15064d3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435a6d9580fa1675537a4d2a3151802a15064d3d/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e66e7b0d1efa3f78a5598884e2d5d526894833e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e66e7b0d1efa3f78a5598884e2d5d526894833e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e66e7b0d1efa3f78a5598884e2d5d526894833e"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "f1718532e456d2c197ca5105eccc283aa34ebc65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435a6d9580fa1675537a4d2a3151802a15064d3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435a6d9580fa1675537a4d2a3151802a15064d3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=435a6d9580fa1675537a4d2a3151802a15064d3d", "patch": "@@ -1,3 +1,9 @@\n+2019-07-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (intersect_ranges): If we know the intersection is\n+\tempty, there is no need to conservatively add anything else to\n+\tthe set.\n+\n 2019-07-11  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/91131"}, {"sha": "594ee9adc17d6a904bc44a4bcecb909aa8f524c7", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435a6d9580fa1675537a4d2a3151802a15064d3d/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435a6d9580fa1675537a4d2a3151802a15064d3d/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=435a6d9580fa1675537a4d2a3151802a15064d3d", "patch": "@@ -5977,6 +5977,11 @@ intersect_ranges (enum value_range_kind *vr0type,\n \tgcc_unreachable ();\n     }\n \n+  /* If we know the intersection is empty, there's no need to\n+     conservatively add anything else to the set.  */\n+  if (*vr0type == VR_UNDEFINED)\n+    return;\n+\n   /* As a fallback simply use { *VRTYPE, *VR0MIN, *VR0MAX } as\n      result for the intersection.  That's always a conservative\n      correct estimate unless VR1 is a constant singleton range"}]}