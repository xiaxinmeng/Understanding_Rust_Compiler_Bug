{"sha": "9bf40564e1a7c92ad0faa23f2c00d088ac0959d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmNDA1NjRlMWE3YzkyYWQwZmFhMjNmMmMwMGQwODhhYzA5NTlkMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-08-04T23:57:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-08-04T23:57:50Z"}, "message": "Eliminate most of the conditional compilation from dwarf2out.c.\n\nTrying to reduce the amount of code compiled when dwarf2 debug\ninfo and/or dwarf2 unwind info are disabled results in a twisted\nmess.  Don't bother -- just build it all even if it's not going\nto be used.\n\nFrom-SVN: r162883", "tree": {"sha": "6f51c6abb0e6a865f8d29fbf492baa165db4a0fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f51c6abb0e6a865f8d29fbf492baa165db4a0fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3/comments", "author": null, "committer": null, "parents": [{"sha": "e78f1a3f6710a19026c9746cdea6a7df25956bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78f1a3f6710a19026c9746cdea6a7df25956bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78f1a3f6710a19026c9746cdea6a7df25956bba"}], "stats": {"total": 99, "additions": 10, "deletions": 89}, "files": [{"sha": "1cc2118c1162bca576ceaa3b0c8a64c8f0750e99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bf40564e1a7c92ad0faa23f2c00d088ac0959d3", "patch": "@@ -1,3 +1,8 @@\n+2010-08-04  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c: Remove most of the DWARF2_DEBUGGING_INFO\n+\tand DWARF2_UNWIND_INFO conditional compilation.\n+\n 2010-08-04  Richard Henderson  <rth@redhat.com>\n \n \tPR debug/45171"}, {"sha": "54585e91d9f5b0d1f229dc8680f92176b74ae59c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 89, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf40564e1a7c92ad0faa23f2c00d088ac0959d3/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9bf40564e1a7c92ad0faa23f2c00d088ac0959d3", "patch": "@@ -93,11 +93,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"tree-flow.h\"\n \n-#ifdef DWARF2_DEBUGGING_INFO\n static void dwarf2out_source_line (unsigned int, const char *, int, bool);\n-\n static rtx last_var_location_insn;\n-#endif\n \n #ifdef VMS_DEBUGGING_INFO\n int vms_file_stats_name (const char *, long long *, long *, char *, int *);\n@@ -418,13 +415,11 @@ current_fde (void)\n /* A list of call frame insns for the CIE.  */\n static GTY(()) dw_cfi_ref cie_cfi_head;\n \n-#if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n /* Some DWARF extensions (e.g., MIPS/SGI) implement a subprogram\n    attribute that accelerates the lookup of the FDE associated\n    with the subprogram.  This variable holds the table index of the FDE\n    associated with the current function (body) definition.  */\n static unsigned current_funcdef_fde;\n-#endif\n \n struct GTY(()) indirect_string_node {\n   const char *str;\n@@ -453,8 +448,6 @@ static GTY(()) bool cold_text_section_used = false;\n /* The default cold text section.  */\n static GTY(()) section *cold_text_section;\n \n-#if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n-\n /* Forward declarations for functions defined in this file.  */\n \n static char *stripattributes (const char *);\n@@ -465,9 +458,7 @@ static void add_fde_cfi (const char *, dw_cfi_ref);\n static void lookup_cfa_1 (dw_cfi_ref, dw_cfa_location *, dw_cfa_location *);\n static void lookup_cfa (dw_cfa_location *);\n static void reg_save (const char *, unsigned, unsigned, HOST_WIDE_INT);\n-#ifdef DWARF2_UNWIND_INFO\n static void initial_return_save (rtx);\n-#endif\n static HOST_WIDE_INT stack_adjust_offset (const_rtx, HOST_WIDE_INT,\n \t\t\t\t\t  HOST_WIDE_INT);\n static void output_cfi (dw_cfi_ref, dw_fde_ref, int);\n@@ -1195,7 +1186,6 @@ dwarf2out_return_reg (const char *label, unsigned int sreg)\n   reg_save (label, DWARF_FRAME_RETURN_COLUMN, DWARF_FRAME_REGNUM (sreg), 0);\n }\n \n-#ifdef DWARF2_UNWIND_INFO\n /* Record the initial position of the return address.  RTL is\n    INCOMING_RETURN_ADDR_RTX.  */\n \n@@ -1253,7 +1243,6 @@ initial_return_save (rtx rtl)\n   if (reg != DWARF_FRAME_RETURN_COLUMN)\n     reg_save (NULL, DWARF_FRAME_RETURN_COLUMN, reg, offset - cfa.offset);\n }\n-#endif\n \n /* Given a SET, calculate the amount of stack adjustment it\n    contains.  */\n@@ -1656,8 +1645,6 @@ dwarf2out_notice_stack_adjust (rtx insn, bool after_p)\n   dwarf2out_stack_adjust (offset, label);\n }\n \n-#endif\n-\n /* We delay emitting a register save until either (a) we reach the end\n    of the prologue or (b) the register is clobbered.  This clusters\n    register saves so that there are fewer pc advances.  */\n@@ -1684,7 +1671,6 @@ struct GTY(()) reg_saved_in_data {\n static GTY(()) struct reg_saved_in_data regs_saved_in_regs[4];\n static GTY(()) size_t num_regs_saved_in_regs;\n \n-#if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n static const char *last_reg_save_label;\n \n /* Add an entry to QUEUED_REG_SAVES saying that REG is now saved at\n@@ -2895,8 +2881,6 @@ dwarf2out_frame_debug_restore_state (void)\n   cfa_remember.in_use = 0;\n }\n \n-#endif\n-\n /* Describe for the GTY machinery what parts of dw_cfi_oprnd1 are used.  */\n static enum dw_cfi_oprnd_type dw_cfi_oprnd1_desc\n  (enum dwarf_call_frame_info cfi);\n@@ -2973,8 +2957,6 @@ dw_cfi_oprnd2_desc (enum dwarf_call_frame_info cfi)\n     }\n }\n \n-#if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n-\n /* Switch [BACK] to eh_frame_section.  If we don't have an eh_frame_section,\n    switch to the data section instead, and write out a synthetic start label\n    for collect2 the first time around.  */\n@@ -3014,7 +2996,7 @@ switch_to_eh_frame_section (bool back)\n \tflags = SECTION_WRITE;\n       eh_frame_section = get_section (EH_FRAME_SECTION_NAME, flags, NULL);\n     }\n-#endif\n+#endif /* EH_FRAME_SECTION_NAME */\n \n   if (eh_frame_section)\n     switch_to_section (eh_frame_section);\n@@ -4093,9 +4075,7 @@ dwarf2out_end_epilogue (unsigned int line ATTRIBUTE_UNUSED,\n   dw_fde_ref fde;\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n-#ifdef DWARF2_DEBUGGING_INFO\n   last_var_location_insn = NULL_RTX;\n-#endif\n \n   if (dwarf2out_do_cfi_asm ())\n     fprintf (asm_out_file, \"\\t.cfi_endproc\\n\");\n@@ -4204,7 +4184,6 @@ dwarf2out_switch_text_section (void)\n       fde->dw_fde_switch_cfi = cfi;\n     }\n }\n-#endif\n \f\n /* And now, the subset of the debugging information support code necessary\n    for emitting location expressions.  */\n@@ -4335,8 +4314,6 @@ typedef struct GTY(()) dw_loc_list_struct {\n   dw_loc_descr_ref expr;\n } dw_loc_list_node;\n \n-#if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n-\n static dw_loc_descr_ref int_loc_descriptor (HOST_WIDE_INT);\n \n /* Convert a DWARF stack opcode into its string name.  */\n@@ -4755,7 +4732,6 @@ loc_descr_plus_const (dw_loc_descr_ref *list_head, HOST_WIDE_INT offset)\n     }\n }\n \n-#ifdef DWARF2_DEBUGGING_INFO\n /* Add a constant OFFSET to a location list.  */\n \n static void\n@@ -4765,7 +4741,6 @@ loc_list_plus_const (dw_loc_list_ref list_head, HOST_WIDE_INT offset)\n   for (d = list_head; d != NULL; d = d->dw_loc_next)\n     loc_descr_plus_const (&d->expr, offset);\n }\n-#endif\n \n /* Return the size of a location descriptor.  */\n \n@@ -4914,9 +4889,7 @@ size_of_locs (dw_loc_descr_ref loc)\n   return size;\n }\n \n-#ifdef DWARF2_DEBUGGING_INFO\n static HOST_WIDE_INT extract_int (const unsigned char *, unsigned);\n-#endif\n \n /* Output location description stack opcode's operands (if any).  */\n \n@@ -5506,10 +5479,8 @@ get_cfa_from_loc_descr (dw_cfa_location *cfa, struct dw_loc_descr_struct *loc)\n \t}\n     }\n }\n-#endif /* .debug_frame support */\n \f\n /* And now, the support for symbolic debugging information.  */\n-#ifdef DWARF2_DEBUGGING_INFO\n \n /* .debug_str support.  */\n static int output_indirect_string (void **, void *);\n@@ -5585,7 +5556,6 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n   dwarf2out_set_name,\n   1                             /* start_end_main_source_file */\n };\n-#endif\n \f\n /* NOTE: In the comments in this file, many references are made to\n    \"Debugging Information Entries\".  This term is abbreviated as `DIE'\n@@ -5811,11 +5781,9 @@ skeleton_chain_node;\n #define DWARF_LINE_DEFAULT_MAX_OPS_PER_INSN 1\n #endif\n \n-#ifdef DWARF2_DEBUGGING_INFO\n /* This location is used by calc_die_sizes() to keep track\n    the offset of each DIE within the .debug_info section.  */\n static unsigned long next_die_offset;\n-#endif\n \n /* Record the root of the DIE's built for the current compilation unit.  */\n static GTY(()) dw_die_ref comp_unit_die;\n@@ -6016,10 +5984,8 @@ struct GTY (()) vcall_insn {\n \n static GTY ((param_is (struct vcall_insn))) htab_t vcall_insn_table;\n \n-#ifdef DWARF2_DEBUGGING_INFO\n /* Record whether the function being analyzed contains inlined functions.  */\n static int current_function_has_inlines;\n-#endif\n #if 0 && defined (MIPS_DEBUGGING_INFO)\n static int comp_unit_has_inlines;\n #endif\n@@ -6035,8 +6001,6 @@ static GTY(()) struct dwarf_file_data * file_table_last_lookup;\n \n static GTY(()) VEC(die_arg_entry,gc) *tmpl_value_parm_die_table;\n \n-#ifdef DWARF2_DEBUGGING_INFO\n-\n /* Offset from the \"steady-state frame pointer\" to the frame base,\n    within the current function.  */\n static HOST_WIDE_INT frame_pointer_fb_offset;\n@@ -11960,7 +11924,7 @@ output_file_names (void)\n \n       /* File length in bytes.  */\n       dw2_asm_output_data_uleb128 (0, NULL);\n-#endif\n+#endif /* VMS_DEBUGGING_INFO */\n     }\n \n   dw2_asm_output_data (1, 0, \"End file name table\");\n@@ -13141,10 +13105,6 @@ multiple_reg_loc_descriptor (rtx rtl, rtx regs,\n   return loc_result;\n }\n \n-#endif /* DWARF2_DEBUGGING_INFO */\n-\n-#if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n-\n /* Return a location descriptor that designates a constant.  */\n \n static dw_loc_descr_ref\n@@ -13183,9 +13143,7 @@ int_loc_descriptor (HOST_WIDE_INT i)\n \n   return new_loc_descr (op, i, 0);\n }\n-#endif\n \n-#ifdef DWARF2_DEBUGGING_INFO\n /* Return loc description representing \"address\" of integer value.\n    This can appear only as toplevel expression.  */\n \n@@ -15798,7 +15756,7 @@ field_byte_offset (const_tree decl)\n \t}\n     }\n   else\n-#endif\n+#endif /* PCC_BITFIELD_TYPE_MATTERS */\n     object_offset_in_bits = bitpos_int;\n \n   object_offset_in_bytes\n@@ -17502,11 +17460,10 @@ add_name_and_src_coords_attributes (dw_die_ref die, tree decl)\n \t\t   XEXP (DECL_RTL (decl), 0));\n       VEC_safe_push (rtx, gc, used_rtx_array, XEXP (DECL_RTL (decl), 0));\n     }\n-#endif\n+#endif /* VMS_DEBUGGING_INFO */\n }\n \n #ifdef VMS_DEBUGGING_INFO\n-\n /* Output the debug main pointer die for VMS */\n \n void\n@@ -17536,7 +17493,7 @@ dwarf2out_vms_debug_main_pointer (void)\n       comp_unit_die->die_child = die;\n     }\n }\n-#endif\n+#endif /* VMS_DEBUGGING_INFO */\n \n /* Push a new declaration scope.  */\n \n@@ -22560,46 +22517,5 @@ dwarf2out_finish (const char *filename)\n   if (debug_str_hash)\n     htab_traverse (debug_str_hash, output_indirect_string, NULL);\n }\n-#else\n-\n-/* This should never be used, but its address is needed for comparisons.  */\n-const struct gcc_debug_hooks dwarf2_debug_hooks =\n-{\n-  0,\t\t/* init */\n-  0,\t\t/* finish */\n-  0,\t\t/* assembly_start */\n-  0,\t\t/* define */\n-  0,\t\t/* undef */\n-  0,\t\t/* start_source_file */\n-  0,\t\t/* end_source_file */\n-  0,\t\t/* begin_block */\n-  0,\t\t/* end_block */\n-  0,\t\t/* ignore_block */\n-  0,\t\t/* source_line */\n-  0,\t\t/* begin_prologue */\n-  0,\t\t/* end_prologue */\n-  0,\t\t/* begin_epilogue */\n-  0,\t\t/* end_epilogue */\n-  0,\t\t/* begin_function */\n-  0,\t\t/* end_function */\n-  0,\t\t/* function_decl */\n-  0,\t\t/* global_decl */\n-  0,\t\t/* type_decl */\n-  0,\t\t/* imported_module_or_decl */\n-  0,\t\t/* deferred_inline_function */\n-  0,\t\t/* outlining_inline_function */\n-  0,\t\t/* label */\n-  0,\t\t/* handle_pch */\n-  0,\t\t/* var_location */\n-  0,\t\t/* switch_text_section */\n-  0,\t\t/* direct_call */\n-  0,\t\t/* virtual_call_token */\n-  0,\t\t/* copy_call_info */\n-  0,\t\t/* virtual_call */\n-  0,\t\t/* set_name */\n-  0\t\t/* start_end_main_source_file */\n-};\n-\n-#endif /* DWARF2_DEBUGGING_INFO */\n \n #include \"gt-dwarf2out.h\""}]}