{"sha": "f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY2YTlhNzYxMzc0NTZhMTJiMzcyMGFkZDdiOWIyYzNiYmNmZmYzZg==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-10-16T13:37:14Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-10-16T13:37:14Z"}, "message": "re PR target/67745 ([ARM] wrong alignments when __attribute__ ((optimize,target,align) is used)\n\n2015-10-16  Christian Bruel  <christian.bruel@st.com>\n\n\tPR target/67745\n\t* config/arm/arm.h (FUNCTION_BOUNDARY): Move optimize_size condition to:\n\t* config/arm/arm.c (arm_option_override_internal): Call\n\tarm_override_options_after_change_1.\n\t(arm_override_options_after_change): New function.\n\t(arm_override_options_after_change_1): Likewise.\n\t(TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): Define hook.\n\nFrom-SVN: r228904", "tree": {"sha": "e49fc7000143d5cca7ec5d9fd4d426118d5709c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e49fc7000143d5cca7ec5d9fd4d426118d5709c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/comments", "author": null, "committer": null, "parents": [{"sha": "2346b8064304115b851646532e1738d4afdc89b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2346b8064304115b851646532e1738d4afdc89b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2346b8064304115b851646532e1738d4afdc89b8"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "24deaaccef39a9a78301f9de4e75db928a7a6bc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "patch": "@@ -1,3 +1,13 @@\n+2015-10-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/67745\n+\t* config/arm/arm.h (FUNCTION_BOUNDARY): Move optimize_size condition to:\n+\t* config/arm/arm.c (arm_option_override_internal): Call\n+\tarm_override_options_after_change_1.\n+\t(arm_override_options_after_change): New function.\n+\t(arm_override_options_after_change_1): Likewise.\n+\t(TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): Define hook.\n+\n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \tRevert:"}, {"sha": "2c8215cb5133ef63f6b40185284728ae2aab17a6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "patch": "@@ -246,6 +246,7 @@ static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n+static void arm_override_options_after_change (void);\n static void arm_option_print (FILE *, int, struct cl_target_option *);\n static void arm_set_current_function (tree);\n static bool arm_can_inline_p (tree, tree);\n@@ -407,6 +408,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE arm_option_override\n \n+#undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n+#define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE arm_override_options_after_change\n+\n #undef TARGET_OPTION_PRINT\n #define TARGET_OPTION_PRINT arm_option_print\n \n@@ -2810,11 +2814,29 @@ static GTY(()) bool thumb_flipper;\n /* Options after initial target override.  */\n static GTY(()) tree init_optimize;\n \n+static void\n+arm_override_options_after_change_1 (struct gcc_options *opts)\n+{\n+  if (opts->x_align_functions <= 0)\n+    opts->x_align_functions = TARGET_THUMB_P (opts->x_target_flags)\n+      && opts->x_optimize_size ? 2 : 4;\n+}\n+\n+/* Implement targetm.override_options_after_change.  */\n+\n+static void\n+arm_override_options_after_change (void)\n+{\n+  arm_override_options_after_change_1 (&global_options);\n+}\n+\n /* Reset options between modes that the user has specified.  */\n static void\n arm_option_override_internal (struct gcc_options *opts,\n \t\t\t      struct gcc_options *opts_set)\n {\n+  arm_override_options_after_change_1 (opts);\n+\n   if (TARGET_THUMB_P (opts->x_target_flags)\n       && !(ARM_FSET_HAS_CPU1 (insn_flags, FL_THUMB)))\n     {"}, {"sha": "9715969a5e560135629d114535c69962354d1173", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "patch": "@@ -565,7 +565,7 @@ extern int arm_arch_crc;\n #define PREFERRED_STACK_BOUNDARY \\\n     (arm_abi == ARM_ABI_ATPCS ? 64 : STACK_BOUNDARY)\n \n-#define FUNCTION_BOUNDARY  ((TARGET_THUMB && optimize_size) ? 16 : 32)\n+#define FUNCTION_BOUNDARY           (TARGET_THUMB ? 16 : 32)\n \n /* The lowest bit is used to indicate Thumb-mode functions, so the\n    vbit must go into the delta field of pointers to member"}, {"sha": "8701cb44988e818b8a0732fdaf4397dd30495054", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "patch": "@@ -1,3 +1,11 @@\n+2015-10-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/67745\n+        * gcc.target/arm/no-align.c: New test.\n+        * gcc.target/arm/attr-align1.c: New test.\n+        * gcc.target/arm/attr-align2.c: New test.\n+        * gcc.target/arm/attr-align3.c: New test.\n+\n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.c-torture/compile/icfmatch.c: Add testcase"}, {"sha": "96d29a9eed5a81306cb90393a2eb4fe7236ae50b", "filename": "gcc/testsuite/gcc.target/arm/attr-align1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-align1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-align1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-align1.c?ref=f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/67745\n+   Verify alignment when both attribute optimize and target are used.  */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! { arm_thumb1_ok || arm_thumb2_ok } } } */\n+\n+void\n+__attribute__ ((target (\"arm\")))\n+bar()\n+{\n+}\n+\n+void\n+__attribute__ ((target (\"thumb\")))\n+__attribute__ ((optimize (\"Os\")))\n+foo()\n+{\n+}\n+\n+void\n+__attribute__ ((target (\"thumb\")))\n+__attribute__ ((optimize (\"O2\")))\n+rab()\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".align\\[ \\t]2\" 2 } } */\n+/* { dg-final { scan-assembler \".align\\[ \\t]1\" } } */"}, {"sha": "2086f112e4355ed488c2278e981c7a78f0d15cff", "filename": "gcc/testsuite/gcc.target/arm/attr-align2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-align2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-align2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-align2.c?ref=f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/67745\n+   Verify alignment when attribute optimize is used.  */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! { arm_thumb1_ok || arm_thumb2_ok } } } */\n+/* { dg-options \"-O2 -mthumb\" }  */\n+\n+/* Check that thumb code is always 2 bytes aligned for -Os.  */\n+\n+void\n+__attribute__ ((optimize(\"Os\")))\n+foo()\n+{\n+}\n+\n+/* { dg-final { scan-assembler \".align\\[ \\t]1\" } } */"}, {"sha": "edcf64b45e053eca4ae5f0be2de3afd7b674f464", "filename": "gcc/testsuite/gcc.target/arm/attr-align3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-align3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-align3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-align3.c?ref=f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/67745\n+   Verify alignment when attribute target is used.  */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! { arm_thumb1_ok || arm_thumb2_ok } } } */\n+/* { dg-options \"-Os -mthumb\" }  */\n+\n+/* Check that arm code is always 4 bytes aligned.  */\n+void  __attribute__ ((target (\"arm\")))\n+c(void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-not \".align\\[ \\t]1\" } } */"}, {"sha": "03811c3458278736b3ec1d45c911f8ae5b78f9fb", "filename": "gcc/testsuite/gcc.target/arm/no-align.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fno-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66a9a76137456a12b3720add7b9b2c3bbcfff3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fno-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fno-align.c?ref=f66a9a76137456a12b3720add7b9b2c3bbcfff3f", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/67745\n+   Verify that -mthumb code is not aligned.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mthumb -fno-align-functions\" }  */\n+/* { dg-skip-if \"\" { ! { arm_thumb1_ok || arm_thumb2_ok } } } */\n+\n+void\n+foo()\n+{\n+}\n+\n+/* { dg-final { scan-assembler-not \".align\\[ \\t]2\" } } */"}]}