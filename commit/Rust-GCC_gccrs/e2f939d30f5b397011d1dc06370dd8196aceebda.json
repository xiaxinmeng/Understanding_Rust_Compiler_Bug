{"sha": "e2f939d30f5b397011d1dc06370dd8196aceebda", "node_id": "C_kwDOANBUbNoAKGUyZjkzOWQzMGY1YjM5NzAxMWQxZGMwNjM3MGRkODE5NmFjZWViZGE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-01-31T17:56:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-02-01T02:25:42Z"}, "message": "c++: Add -Wno-changes-meaning\n\nIn recent years this error has been coming up more because other compilers\ndon't diagnose it as consistently.  So let's add a flag for it, and be more\nlenient about cases that aren't likely to cause bugs.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Document -Wno-changes-meaning.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt: Add -Wno-changes-meaning.\n\ngcc/cp/ChangeLog:\n\n\t* class.cc (note_name_declared_in_class): Change from permerror to\n\t-Wchanges-meaning pedwarn, forcing -pedantic-errors for most cases.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/changes-meaning2.C: New test.\n\t* g++.dg/warn/changes-meaning3.C: New test.", "tree": {"sha": "6e307314c373f719439a51e93bd85680c9f69db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e307314c373f719439a51e93bd85680c9f69db1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2f939d30f5b397011d1dc06370dd8196aceebda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f939d30f5b397011d1dc06370dd8196aceebda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2f939d30f5b397011d1dc06370dd8196aceebda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f939d30f5b397011d1dc06370dd8196aceebda/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03ae4be2c6d48255b18bb35dc25e551bd3a3b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03ae4be2c6d48255b18bb35dc25e551bd3a3b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d03ae4be2c6d48255b18bb35dc25e551bd3a3b9d"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "c0fea56a8f5cc4a1f2ed7c112db1639d80d3551d", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=e2f939d30f5b397011d1dc06370dd8196aceebda", "patch": "@@ -494,6 +494,10 @@ Wcatch-value=\n C++ ObjC++ Var(warn_catch_value) Warning Joined RejectNegative UInteger LangEnabledBy(C++ ObjC++,Wall, 1, 0) IntegerRange(0, 3)\n Warn about catch handlers of non-reference type.\n \n+Wchanges-meaning\n+C++ ObjC++ Var(warn_changes_meaning) Warning Init(1)\n+Complain about a name being declared as a class member after a previous use of the same name.\n+\n Wchar-subscripts\n C ObjC C++ ObjC++ Var(warn_char_subscripts) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about subscripts whose type is \\\"char\\\"."}, {"sha": "a2aa6674590b5536af1df2edb8692d2f4ac3e3ec", "filename": "gcc/cp/class.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Fcp%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Fcp%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.cc?ref=e2f939d30f5b397011d1dc06370dd8196aceebda", "patch": "@@ -9016,7 +9016,7 @@ note_name_declared_in_class (tree name, tree decl)\n     return;\n   /* The C language allows members to be declared with a type of the same\n      name, and the C++ standard says this diagnostic is not required.  So\n-     allow it in extern \"C\" blocks unless predantic is specified.\n+     allow it in extern \"C\" blocks unless pedantic is specified.\n      Allow it in all cases if -ms-extensions is specified.  */\n   if ((!pedantic && current_lang_name == lang_name_c)\n       || flag_ms_extensions)\n@@ -9032,9 +9032,19 @@ note_name_declared_in_class (tree name, tree decl)\n \t A name N used in a class S shall refer to the same declaration\n \t in its context and when re-evaluated in the completed scope of\n \t S.  */\n-      if (permerror (location_of (decl),\n-\t\t     \"declaration of %q#D changes meaning of %qD\",\n-\t\t     decl, OVL_NAME (decl)))\n+      auto ov = make_temp_override (global_dc->pedantic_errors);\n+      if (TREE_CODE (decl) == TYPE_DECL\n+\t  && TREE_CODE (olddecl) == TYPE_DECL\n+\t  && same_type_p (TREE_TYPE (decl), TREE_TYPE (olddecl)))\n+\t/* Different declaration, but same meaning; just warn.  */;\n+      else if (flag_permissive)\n+\t/* Let -fpermissive make it a warning like past versions.  */;\n+      else\n+\t/* Make it an error.  */\n+\tglobal_dc->pedantic_errors = 1;\n+      if (pedwarn (location_of (decl), OPT_Wchanges_meaning,\n+\t\t   \"declaration of %q#D changes meaning of %qD\",\n+\t\t   decl, OVL_NAME (decl)))\n \t{\n \t  inform (loc, \"used here to mean %q#D\", olddecl);\n \t  inform (location_of (olddecl), \"declared here\" );"}, {"sha": "1eda0e0396b1dc0e3cb7f2cea3bb57b914eead57", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e2f939d30f5b397011d1dc06370dd8196aceebda", "patch": "@@ -6287,6 +6287,23 @@ union U @{\n \n @end itemize\n \n+@item -Wno-changes-meaning @r{(C++ and Objective-C++ only)}\n+C++ requires that unqualified uses of a name within a class have the\n+same meaning in the complete scope of the class, so declaring the name\n+after using it is ill-formed:\n+@smallexample\n+struct A;\n+struct B1 @{ A a; typedef A A; @}; // warning, 'A' changes meaning\n+struct B2 @{ A a; struct A @{ @}; @}; // error, 'A' changes meaning\n+@end smallexample\n+By default, the B1 case is only a warning because the two declarations\n+have the same type, while the B2 case is an error.  Both diagnostics\n+can be disabled with @option{-Wno-changes-meaning}.  Alternately, the\n+error case can be reduced to a warning with\n+@option{-Wno-error=changes-meaning} or @option{-fpermissive}.\n+\n+Both diagnostics are also suppressed by @option{-fms-extensions}.\n+\n @item -Wchar-subscripts\n @opindex Wchar-subscripts\n @opindex Wno-char-subscripts"}, {"sha": "7ac888c0babc467fc7033d52654438a543e2b83d", "filename": "gcc/testsuite/g++.dg/warn/changes-meaning2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fchanges-meaning2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fchanges-meaning2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fchanges-meaning2.C?ref=e2f939d30f5b397011d1dc06370dd8196aceebda", "patch": "@@ -0,0 +1,16 @@\n+// It's an error to redeclare a name after using it in the class, but be\n+// lenient if it has the same meaning.\n+\n+// { dg-options \"\" }\n+\n+struct Lock { };\n+struct Traits\n+{\n+  Lock lock;\n+  typedef ::Lock Lock;\t\t// { dg-warning -Wchanges-meaning }\n+};\n+struct Traits2\n+{\n+  Lock lock;\n+  typedef int Lock;\t\t// { dg-error -Wchanges-meaning }\n+};"}, {"sha": "ffb0f3631d7b63fecd8c3a49e3d7075ccc09ea75", "filename": "gcc/testsuite/g++.dg/warn/changes-meaning3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fchanges-meaning3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f939d30f5b397011d1dc06370dd8196aceebda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fchanges-meaning3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fchanges-meaning3.C?ref=e2f939d30f5b397011d1dc06370dd8196aceebda", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-Wno-changes-meaning\" }\n+\n+struct Lock { };\n+struct Traits\n+{\n+  Lock lock;\n+  typedef ::Lock Lock;\n+};\n+struct Traits2\n+{\n+  Lock lock;\n+  typedef int Lock;\n+};"}]}