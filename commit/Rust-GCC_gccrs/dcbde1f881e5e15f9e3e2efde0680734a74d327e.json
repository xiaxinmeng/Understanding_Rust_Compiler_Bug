{"sha": "dcbde1f881e5e15f9e3e2efde0680734a74d327e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiZGUxZjg4MWU1ZTE1ZjllM2UyZWZkZTA2ODA3MzRhNzRkMzI3ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-22T21:10:24Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-22T21:10:24Z"}, "message": "re PR ipa/65502 (pure-const should play well with clobbers.)\n\n\n\tPR ipa/65502\n\t* ipa-comdats.c (enqueue_references): Walk through thunks.\n\t(ipa_comdats): Likewise.\n\t(set_comdat_group_1): New function.\n\nFrom-SVN: r221574", "tree": {"sha": "fb2d3bfeee17bb863c1cb4a35e4b1dbea1e364e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb2d3bfeee17bb863c1cb4a35e4b1dbea1e364e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcbde1f881e5e15f9e3e2efde0680734a74d327e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbde1f881e5e15f9e3e2efde0680734a74d327e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcbde1f881e5e15f9e3e2efde0680734a74d327e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbde1f881e5e15f9e3e2efde0680734a74d327e/comments", "author": null, "committer": null, "parents": [{"sha": "a6bfa7c773c7e5ec130de14d426b5eabddc26205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bfa7c773c7e5ec130de14d426b5eabddc26205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bfa7c773c7e5ec130de14d426b5eabddc26205"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "44eaf45415c3b9131ee4cee96f0e95ca19d361a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbde1f881e5e15f9e3e2efde0680734a74d327e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbde1f881e5e15f9e3e2efde0680734a74d327e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcbde1f881e5e15f9e3e2efde0680734a74d327e", "patch": "@@ -1,3 +1,10 @@\n+2015-03-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/65502\n+\t* ipa-comdats.c (enqueue_references): Walk through thunks.\n+\t(ipa_comdats): Likewise.\n+\t(set_comdat_group_1): New function.\n+\n 2015-03-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65475"}, {"sha": "f349f9f087ec61604e0493d45babd34b8e2d8a89", "filename": "gcc/ipa-comdats.c", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbde1f881e5e15f9e3e2efde0680734a74d327e/gcc%2Fipa-comdats.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbde1f881e5e15f9e3e2efde0680734a74d327e/gcc%2Fipa-comdats.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-comdats.c?ref=dcbde1f881e5e15f9e3e2efde0680734a74d327e", "patch": "@@ -182,6 +182,10 @@ enqueue_references (symtab_node **first,\n   for (i = 0; symbol->iterate_reference (i, ref); i++)\n     {\n       symtab_node *node = ref->referred->ultimate_alias_target ();\n+\n+      /* Always keep thunks in same sections as target function.  */\n+      if (is_a <cgraph_node *>(node))\n+\tnode = dyn_cast <cgraph_node *> (node)->function_symbol ();\n       if (!node->aux && node->definition)\n \t{\n \t   node->aux = *first;\n@@ -199,6 +203,10 @@ enqueue_references (symtab_node **first,\n \telse\n \t  {\n \t    symtab_node *node = edge->callee->ultimate_alias_target ();\n+\n+\t    /* Always keep thunks in same sections as target function.  */\n+\t    if (is_a <cgraph_node *>(node))\n+\t      node = dyn_cast <cgraph_node *> (node)->function_symbol ();\n \t    if (!node->aux && node->definition)\n \t      {\n \t\t node->aux = *first;\n@@ -209,7 +217,7 @@ enqueue_references (symtab_node **first,\n }\n \n /* Set comdat group of SYMBOL to GROUP.\n-   Callback for symtab_for_node_and_aliases.  */\n+   Callback for for_node_and_aliases.  */\n \n bool\n set_comdat_group (symtab_node *symbol,\n@@ -223,6 +231,16 @@ set_comdat_group (symtab_node *symbol,\n   return false;\n }\n \n+/* Set comdat group of SYMBOL to GROUP.\n+   Callback for for_node_thunks_and_aliases.  */\n+\n+bool\n+set_comdat_group_1 (cgraph_node *symbol,\n+\t\t    void *head_p)\n+{\n+  return set_comdat_group (symbol, head_p);\n+}\n+\n /* The actual pass with the main dataflow loop.  */\n \n static unsigned int\n@@ -263,7 +281,12 @@ ipa_comdats (void)\n \t\t && (DECL_STATIC_CONSTRUCTOR (symbol->decl)\n \t\t     || DECL_STATIC_DESTRUCTOR (symbol->decl))))\n       {\n-\tmap.put (symbol->ultimate_alias_target (), error_mark_node);\n+\tsymtab_node *target = symbol->ultimate_alias_target ();\n+\n+\t/* Always keep thunks in same sections as target function.  */\n+\tif (is_a <cgraph_node *>(target))\n+\t  target = dyn_cast <cgraph_node *> (target)->function_symbol ();\n+\tmap.put (target, error_mark_node);\n \n \t/* Mark the symbol so we won't waste time visiting it for dataflow.  */\n \tsymbol->aux = (symtab_node *) (void *) 1;\n@@ -332,10 +355,8 @@ ipa_comdats (void)\n       symbol->aux = NULL; \n       if (!symbol->get_comdat_group ()\n \t  && !symbol->alias\n-\t  /* Thunks to external functions do not need to be categorized.  */\n \t  && (!(fun = dyn_cast <cgraph_node *> (symbol))\n-\t      || !fun->thunk.thunk_p\n-\t      || fun->function_symbol ()->definition)\n+\t      || !fun->thunk.thunk_p)\n \t  && symbol->real_symbol_p ())\n \t{\n \t  tree *val = map.get (symbol);\n@@ -355,9 +376,16 @@ ipa_comdats (void)\n \t      symbol->dump (dump_file);\n \t      fprintf (dump_file, \"To group: %s\\n\", IDENTIFIER_POINTER (group));\n \t    }\n-\t  symbol->call_for_symbol_and_aliases (set_comdat_group,\n-\t\t\t\t\t     *comdat_head_map.get (group),\n-\t\t\t\t\t     true);\n+\t  if (is_a <cgraph_node *> (symbol))\n+\t   dyn_cast <cgraph_node *>(symbol)->call_for_symbol_and_aliases\n+\t\t  (set_comdat_group_1,\n+\t\t   *comdat_head_map.get (group),\n+\t\t   true);\n+\t  else\n+\t   symbol->call_for_symbol_and_aliases\n+\t\t  (set_comdat_group,\n+\t\t   *comdat_head_map.get (group),\n+\t\t   true);\n \t}\n     }\n   return 0;"}]}