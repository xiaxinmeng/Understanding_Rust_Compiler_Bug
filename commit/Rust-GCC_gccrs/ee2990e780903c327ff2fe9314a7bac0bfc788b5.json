{"sha": "ee2990e780903c327ff2fe9314a7bac0bfc788b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUyOTkwZTc4MDkwM2MzMjdmZjJmZTkzMTRhN2JhYzBiZmM3ODhiNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-02T18:25:40Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-02T18:25:40Z"}, "message": "(process_init_element): Warn and truncate if upper bound of index is\nout of range.\n\nFrom-SVN: r13684", "tree": {"sha": "ac10b2c0fd698ec1c42b76ca52613eef204840e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac10b2c0fd698ec1c42b76ca52613eef204840e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee2990e780903c327ff2fe9314a7bac0bfc788b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2990e780903c327ff2fe9314a7bac0bfc788b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee2990e780903c327ff2fe9314a7bac0bfc788b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2990e780903c327ff2fe9314a7bac0bfc788b5/comments", "author": null, "committer": null, "parents": [{"sha": "f28c0e6987c1d099e868e216dec53f8b4f2099ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28c0e6987c1d099e868e216dec53f8b4f2099ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28c0e6987c1d099e868e216dec53f8b4f2099ba"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "32d5c27a0cffc09379ff7b21efbddd18aa9da276", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2990e780903c327ff2fe9314a7bac0bfc788b5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2990e780903c327ff2fe9314a7bac0bfc788b5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ee2990e780903c327ff2fe9314a7bac0bfc788b5", "patch": "@@ -5769,10 +5769,8 @@ set_init_index (first, last)\n     error_init (\"duplicate array index in initializer%s\", \" for `%s'\", NULL);\n   else\n     {\n-      TREE_INT_CST_LOW (constructor_index)\n-\t= TREE_INT_CST_LOW (first);\n-      TREE_INT_CST_HIGH (constructor_index)\n-\t= TREE_INT_CST_HIGH (first);\n+      TREE_INT_CST_LOW (constructor_index) = TREE_INT_CST_LOW (first);\n+      TREE_INT_CST_HIGH (constructor_index) = TREE_INT_CST_HIGH (first);\n \n       if (last != 0 && tree_int_cst_lt (last, first))\n \terror_init (\"empty index range in initializer%s\", \" for `%s'\", NULL);\n@@ -6377,7 +6375,21 @@ process_init_element (value)\n \n \t  /* In the case of [LO .. HI] = VALUE, only evaluate VALUE once.  */\n \t  if (constructor_range_end)\n-\t    value = save_expr (value);\n+\t    {\n+\t      if (constructor_max_index != 0\n+\t\t  && tree_int_cst_lt (constructor_max_index, \n+\t\t\t\t      constructor_range_end))\n+\t\t{\n+\t\t  pedwarn_init (\"excess elements in array initializer%s\",\n+\t\t\t\t\" after `%s'\", NULL_PTR);\n+\t\t  TREE_INT_CST_HIGH (constructor_range_end)\n+\t\t    = TREE_INT_CST_HIGH (constructor_max_index);\n+\t\t  TREE_INT_CST_LOW (constructor_range_end)\n+\t\t    = TREE_INT_CST_LOW (constructor_max_index);\n+\t\t}\n+\n+\t      value = save_expr (value);\n+\t    }\n \n \t  /* Now output the actual element.\n \t     Ordinarily, output once.\n@@ -6395,10 +6407,8 @@ process_init_element (value)\n \n \t      tem = size_binop (PLUS_EXPR, constructor_index,\n \t\t\t\tinteger_one_node);\n-\t      TREE_INT_CST_LOW (constructor_index)\n-\t\t= TREE_INT_CST_LOW (tem);\n-\t      TREE_INT_CST_HIGH (constructor_index)\n-\t\t= TREE_INT_CST_HIGH (tem);\n+\t      TREE_INT_CST_LOW (constructor_index) = TREE_INT_CST_LOW (tem);\n+\t      TREE_INT_CST_HIGH (constructor_index) = TREE_INT_CST_HIGH (tem);\n \n \t      if (!value)\n \t\t/* If we are doing the bookkeeping for an element that was"}]}